
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: ''' Classes for interpolating values.
2: '''
3: from __future__ import division, print_function, absolute_import
4: 
5: 
6: __all__ = ['interp1d', 'interp2d', 'spline', 'spleval', 'splmake', 'spltopp',
7:            'lagrange', 'PPoly', 'BPoly', 'NdPPoly',
8:            'RegularGridInterpolator', 'interpn']
9: 
10: 
11: import itertools
12: import warnings
13: import functools
14: import operator
15: 
16: import numpy as np
17: from numpy import (array, transpose, searchsorted, atleast_1d, atleast_2d,
18:                    dot, ravel, poly1d, asarray, intp)
19: 
20: import scipy.linalg
21: import scipy.special as spec
22: from scipy.special import comb
23: 
24: from scipy._lib.six import xrange, integer_types, string_types
25: 
26: from . import fitpack
27: from . import dfitpack
28: from . import _fitpack
29: from .polyint import _Interpolator1D
30: from . import _ppoly
31: from .fitpack2 import RectBivariateSpline
32: from .interpnd import _ndim_coords_from_arrays
33: from ._bsplines import make_interp_spline, BSpline
34: 
35: 
36: def prod(x):
37:     '''Product of a list of numbers; ~40x faster vs np.prod for Python tuples'''
38:     if len(x) == 0:
39:         return 1
40:     return functools.reduce(operator.mul, x)
41: 
42: 
43: def lagrange(x, w):
44:     r'''
45:     Return a Lagrange interpolating polynomial.
46: 
47:     Given two 1-D arrays `x` and `w,` returns the Lagrange interpolating
48:     polynomial through the points ``(x, w)``.
49: 
50:     Warning: This implementation is numerically unstable. Do not expect to
51:     be able to use more than about 20 points even if they are chosen optimally.
52: 
53:     Parameters
54:     ----------
55:     x : array_like
56:         `x` represents the x-coordinates of a set of datapoints.
57:     w : array_like
58:         `w` represents the y-coordinates of a set of datapoints, i.e. f(`x`).
59: 
60:     Returns
61:     -------
62:     lagrange : `numpy.poly1d` instance
63:         The Lagrange interpolating polynomial.
64: 
65:     Examples
66:     --------
67:     Interpolate :math:`f(x) = x^3` by 3 points.
68: 
69:     >>> from scipy.interpolate import lagrange
70:     >>> x = np.array([0, 1, 2])
71:     >>> y = x**3
72:     >>> poly = lagrange(x, y)
73: 
74:     Since there are only 3 points, Lagrange polynomial has degree 2. Explicitly,
75:     it is given by
76: 
77:     .. math::
78: 
79:         \begin{aligned}
80:             L(x) &= 1\times \frac{x (x - 2)}{-1} + 8\times \frac{x (x-1)}{2} \\
81:                  &= x (-2 + 3x)
82:         \end{aligned}
83: 
84:     >>> from numpy.polynomial.polynomial import Polynomial
85:     >>> Polynomial(poly).coef
86:     array([ 3., -2.,  0.])
87: 
88:     '''
89: 
90:     M = len(x)
91:     p = poly1d(0.0)
92:     for j in xrange(M):
93:         pt = poly1d(w[j])
94:         for k in xrange(M):
95:             if k == j:
96:                 continue
97:             fac = x[j]-x[k]
98:             pt *= poly1d([1.0, -x[k]])/fac
99:         p += pt
100:     return p
101: 
102: 
103: # !! Need to find argument for keeping initialize.  If it isn't
104: # !! found, get rid of it!
105: 
106: 
107: class interp2d(object):
108:     '''
109:     interp2d(x, y, z, kind='linear', copy=True, bounds_error=False,
110:              fill_value=nan)
111: 
112:     Interpolate over a 2-D grid.
113: 
114:     `x`, `y` and `z` are arrays of values used to approximate some function
115:     f: ``z = f(x, y)``. This class returns a function whose call method uses
116:     spline interpolation to find the value of new points.
117: 
118:     If `x` and `y` represent a regular grid, consider using
119:     RectBivariateSpline.
120: 
121:     Note that calling `interp2d` with NaNs present in input values results in
122:     undefined behaviour.
123: 
124:     Methods
125:     -------
126:     __call__
127: 
128:     Parameters
129:     ----------
130:     x, y : array_like
131:         Arrays defining the data point coordinates.
132: 
133:         If the points lie on a regular grid, `x` can specify the column
134:         coordinates and `y` the row coordinates, for example::
135: 
136:           >>> x = [0,1,2];  y = [0,3]; z = [[1,2,3], [4,5,6]]
137: 
138:         Otherwise, `x` and `y` must specify the full coordinates for each
139:         point, for example::
140: 
141:           >>> x = [0,1,2,0,1,2];  y = [0,0,0,3,3,3]; z = [1,2,3,4,5,6]
142: 
143:         If `x` and `y` are multi-dimensional, they are flattened before use.
144:     z : array_like
145:         The values of the function to interpolate at the data points. If
146:         `z` is a multi-dimensional array, it is flattened before use.  The
147:         length of a flattened `z` array is either
148:         len(`x`)*len(`y`) if `x` and `y` specify the column and row coordinates
149:         or ``len(z) == len(x) == len(y)`` if `x` and `y` specify coordinates
150:         for each point.
151:     kind : {'linear', 'cubic', 'quintic'}, optional
152:         The kind of spline interpolation to use. Default is 'linear'.
153:     copy : bool, optional
154:         If True, the class makes internal copies of x, y and z.
155:         If False, references may be used. The default is to copy.
156:     bounds_error : bool, optional
157:         If True, when interpolated values are requested outside of the
158:         domain of the input data (x,y), a ValueError is raised.
159:         If False, then `fill_value` is used.
160:     fill_value : number, optional
161:         If provided, the value to use for points outside of the
162:         interpolation domain. If omitted (None), values outside
163:         the domain are extrapolated.
164: 
165:     See Also
166:     --------
167:     RectBivariateSpline :
168:         Much faster 2D interpolation if your input data is on a grid
169:     bisplrep, bisplev :
170:         Spline interpolation based on FITPACK
171:     BivariateSpline : a more recent wrapper of the FITPACK routines
172:     interp1d : one dimension version of this function
173: 
174:     Notes
175:     -----
176:     The minimum number of data points required along the interpolation
177:     axis is ``(k+1)**2``, with k=1 for linear, k=3 for cubic and k=5 for
178:     quintic interpolation.
179: 
180:     The interpolator is constructed by `bisplrep`, with a smoothing factor
181:     of 0. If more control over smoothing is needed, `bisplrep` should be
182:     used directly.
183: 
184:     Examples
185:     --------
186:     Construct a 2-D grid and interpolate on it:
187: 
188:     >>> from scipy import interpolate
189:     >>> x = np.arange(-5.01, 5.01, 0.25)
190:     >>> y = np.arange(-5.01, 5.01, 0.25)
191:     >>> xx, yy = np.meshgrid(x, y)
192:     >>> z = np.sin(xx**2+yy**2)
193:     >>> f = interpolate.interp2d(x, y, z, kind='cubic')
194: 
195:     Now use the obtained interpolation function and plot the result:
196: 
197:     >>> import matplotlib.pyplot as plt
198:     >>> xnew = np.arange(-5.01, 5.01, 1e-2)
199:     >>> ynew = np.arange(-5.01, 5.01, 1e-2)
200:     >>> znew = f(xnew, ynew)
201:     >>> plt.plot(x, z[0, :], 'ro-', xnew, znew[0, :], 'b-')
202:     >>> plt.show()
203:     '''
204: 
205:     def __init__(self, x, y, z, kind='linear', copy=True, bounds_error=False,
206:                  fill_value=None):
207:         x = ravel(x)
208:         y = ravel(y)
209:         z = asarray(z)
210: 
211:         rectangular_grid = (z.size == len(x) * len(y))
212:         if rectangular_grid:
213:             if z.ndim == 2:
214:                 if z.shape != (len(y), len(x)):
215:                     raise ValueError("When on a regular grid with x.size = m "
216:                                      "and y.size = n, if z.ndim == 2, then z "
217:                                      "must have shape (n, m)")
218:             if not np.all(x[1:] >= x[:-1]):
219:                 j = np.argsort(x)
220:                 x = x[j]
221:                 z = z[:, j]
222:             if not np.all(y[1:] >= y[:-1]):
223:                 j = np.argsort(y)
224:                 y = y[j]
225:                 z = z[j, :]
226:             z = ravel(z.T)
227:         else:
228:             z = ravel(z)
229:             if len(x) != len(y):
230:                 raise ValueError(
231:                     "x and y must have equal lengths for non rectangular grid")
232:             if len(z) != len(x):
233:                 raise ValueError(
234:                     "Invalid length for input z for non rectangular grid")
235: 
236:         try:
237:             kx = ky = {'linear': 1,
238:                        'cubic': 3,
239:                        'quintic': 5}[kind]
240:         except KeyError:
241:             raise ValueError("Unsupported interpolation type.")
242: 
243:         if not rectangular_grid:
244:             # TODO: surfit is really not meant for interpolation!
245:             self.tck = fitpack.bisplrep(x, y, z, kx=kx, ky=ky, s=0.0)
246:         else:
247:             nx, tx, ny, ty, c, fp, ier = dfitpack.regrid_smth(
248:                 x, y, z, None, None, None, None,
249:                 kx=kx, ky=ky, s=0.0)
250:             self.tck = (tx[:nx], ty[:ny], c[:(nx - kx - 1) * (ny - ky - 1)],
251:                         kx, ky)
252: 
253:         self.bounds_error = bounds_error
254:         self.fill_value = fill_value
255:         self.x, self.y, self.z = [array(a, copy=copy) for a in (x, y, z)]
256: 
257:         self.x_min, self.x_max = np.amin(x), np.amax(x)
258:         self.y_min, self.y_max = np.amin(y), np.amax(y)
259: 
260:     def __call__(self, x, y, dx=0, dy=0, assume_sorted=False):
261:         '''Interpolate the function.
262: 
263:         Parameters
264:         ----------
265:         x : 1D array
266:             x-coordinates of the mesh on which to interpolate.
267:         y : 1D array
268:             y-coordinates of the mesh on which to interpolate.
269:         dx : int >= 0, < kx
270:             Order of partial derivatives in x.
271:         dy : int >= 0, < ky
272:             Order of partial derivatives in y.
273:         assume_sorted : bool, optional
274:             If False, values of `x` and `y` can be in any order and they are
275:             sorted first.
276:             If True, `x` and `y` have to be arrays of monotonically
277:             increasing values.
278: 
279:         Returns
280:         -------
281:         z : 2D array with shape (len(y), len(x))
282:             The interpolated values.
283:         '''
284: 
285:         x = atleast_1d(x)
286:         y = atleast_1d(y)
287: 
288:         if x.ndim != 1 or y.ndim != 1:
289:             raise ValueError("x and y should both be 1-D arrays")
290: 
291:         if not assume_sorted:
292:             x = np.sort(x)
293:             y = np.sort(y)
294: 
295:         if self.bounds_error or self.fill_value is not None:
296:             out_of_bounds_x = (x < self.x_min) | (x > self.x_max)
297:             out_of_bounds_y = (y < self.y_min) | (y > self.y_max)
298: 
299:             any_out_of_bounds_x = np.any(out_of_bounds_x)
300:             any_out_of_bounds_y = np.any(out_of_bounds_y)
301: 
302:         if self.bounds_error and (any_out_of_bounds_x or any_out_of_bounds_y):
303:             raise ValueError("Values out of range; x must be in %r, y in %r"
304:                              % ((self.x_min, self.x_max),
305:                                 (self.y_min, self.y_max)))
306: 
307:         z = fitpack.bisplev(x, y, self.tck, dx, dy)
308:         z = atleast_2d(z)
309:         z = transpose(z)
310: 
311:         if self.fill_value is not None:
312:             if any_out_of_bounds_x:
313:                 z[:, out_of_bounds_x] = self.fill_value
314:             if any_out_of_bounds_y:
315:                 z[out_of_bounds_y, :] = self.fill_value
316: 
317:         if len(z) == 1:
318:             z = z[0]
319:         return array(z)
320: 
321: 
322: def _check_broadcast_up_to(arr_from, shape_to, name):
323:     '''Helper to check that arr_from broadcasts up to shape_to'''
324:     shape_from = arr_from.shape
325:     if len(shape_to) >= len(shape_from):
326:         for t, f in zip(shape_to[::-1], shape_from[::-1]):
327:             if f != 1 and f != t:
328:                 break
329:         else:  # all checks pass, do the upcasting that we need later
330:             if arr_from.size != 1 and arr_from.shape != shape_to:
331:                 arr_from = np.ones(shape_to, arr_from.dtype) * arr_from
332:             return arr_from.ravel()
333:     # at least one check failed
334:     raise ValueError('%s argument must be able to broadcast up '
335:                      'to shape %s but had shape %s'
336:                      % (name, shape_to, shape_from))
337: 
338: 
339: def _do_extrapolate(fill_value):
340:     '''Helper to check if fill_value == "extrapolate" without warnings'''
341:     return (isinstance(fill_value, string_types) and
342:             fill_value == 'extrapolate')
343: 
344: 
345: class interp1d(_Interpolator1D):
346:     '''
347:     Interpolate a 1-D function.
348: 
349:     `x` and `y` are arrays of values used to approximate some function f:
350:     ``y = f(x)``.  This class returns a function whose call method uses
351:     interpolation to find the value of new points.
352: 
353:     Note that calling `interp1d` with NaNs present in input values results in
354:     undefined behaviour.
355: 
356:     Parameters
357:     ----------
358:     x : (N,) array_like
359:         A 1-D array of real values.
360:     y : (...,N,...) array_like
361:         A N-D array of real values. The length of `y` along the interpolation
362:         axis must be equal to the length of `x`.
363:     kind : str or int, optional
364:         Specifies the kind of interpolation as a string
365:         ('linear', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic'
366:         where 'zero', 'slinear', 'quadratic' and 'cubic' refer to a spline
367:         interpolation of zeroth, first, second or third order) or as an
368:         integer specifying the order of the spline interpolator to use.
369:         Default is 'linear'.
370:     axis : int, optional
371:         Specifies the axis of `y` along which to interpolate.
372:         Interpolation defaults to the last axis of `y`.
373:     copy : bool, optional
374:         If True, the class makes internal copies of x and y.
375:         If False, references to `x` and `y` are used. The default is to copy.
376:     bounds_error : bool, optional
377:         If True, a ValueError is raised any time interpolation is attempted on
378:         a value outside of the range of x (where extrapolation is
379:         necessary). If False, out of bounds values are assigned `fill_value`.
380:         By default, an error is raised unless `fill_value="extrapolate"`.
381:     fill_value : array-like or (array-like, array_like) or "extrapolate", optional
382:         - if a ndarray (or float), this value will be used to fill in for
383:           requested points outside of the data range. If not provided, then
384:           the default is NaN. The array-like must broadcast properly to the
385:           dimensions of the non-interpolation axes.
386:         - If a two-element tuple, then the first element is used as a
387:           fill value for ``x_new < x[0]`` and the second element is used for
388:           ``x_new > x[-1]``. Anything that is not a 2-element tuple (e.g.,
389:           list or ndarray, regardless of shape) is taken to be a single
390:           array-like argument meant to be used for both bounds as
391:           ``below, above = fill_value, fill_value``.
392: 
393:           .. versionadded:: 0.17.0
394:         - If "extrapolate", then points outside the data range will be
395:           extrapolated.
396: 
397:           .. versionadded:: 0.17.0
398:     assume_sorted : bool, optional
399:         If False, values of `x` can be in any order and they are sorted first.
400:         If True, `x` has to be an array of monotonically increasing values.
401: 
402:     Methods
403:     -------
404:     __call__
405: 
406:     See Also
407:     --------
408:     splrep, splev
409:         Spline interpolation/smoothing based on FITPACK.
410:     UnivariateSpline : An object-oriented wrapper of the FITPACK routines.
411:     interp2d : 2-D interpolation
412: 
413:     Examples
414:     --------
415:     >>> import matplotlib.pyplot as plt
416:     >>> from scipy import interpolate
417:     >>> x = np.arange(0, 10)
418:     >>> y = np.exp(-x/3.0)
419:     >>> f = interpolate.interp1d(x, y)
420: 
421:     >>> xnew = np.arange(0, 9, 0.1)
422:     >>> ynew = f(xnew)   # use interpolation function returned by `interp1d`
423:     >>> plt.plot(x, y, 'o', xnew, ynew, '-')
424:     >>> plt.show()
425:     '''
426: 
427:     def __init__(self, x, y, kind='linear', axis=-1,
428:                  copy=True, bounds_error=None, fill_value=np.nan,
429:                  assume_sorted=False):
430:         ''' Initialize a 1D linear interpolation class.'''
431:         _Interpolator1D.__init__(self, x, y, axis=axis)
432: 
433:         self.bounds_error = bounds_error  # used by fill_value setter
434:         self.copy = copy
435: 
436:         if kind in ['zero', 'slinear', 'quadratic', 'cubic']:
437:             order = {'zero': 0, 'slinear': 1,
438:                      'quadratic': 2, 'cubic': 3}[kind]
439:             kind = 'spline'
440:         elif isinstance(kind, int):
441:             order = kind
442:             kind = 'spline'
443:         elif kind not in ('linear', 'nearest'):
444:             raise NotImplementedError("%s is unsupported: Use fitpack "
445:                                       "routines for other types." % kind)
446:         x = array(x, copy=self.copy)
447:         y = array(y, copy=self.copy)
448: 
449:         if not assume_sorted:
450:             ind = np.argsort(x)
451:             x = x[ind]
452:             y = np.take(y, ind, axis=axis)
453: 
454:         if x.ndim != 1:
455:             raise ValueError("the x array must have exactly one dimension.")
456:         if y.ndim == 0:
457:             raise ValueError("the y array must have at least one dimension.")
458: 
459:         # Force-cast y to a floating-point type, if it's not yet one
460:         if not issubclass(y.dtype.type, np.inexact):
461:             y = y.astype(np.float_)
462: 
463:         # Backward compatibility
464:         self.axis = axis % y.ndim
465: 
466:         # Interpolation goes internally along the first axis
467:         self.y = y
468:         self._y = self._reshape_yi(self.y)
469:         self.x = x
470:         del y, x  # clean up namespace to prevent misuse; use attributes
471:         self._kind = kind
472:         self.fill_value = fill_value  # calls the setter, can modify bounds_err
473: 
474:         # Adjust to interpolation kind; store reference to *unbound*
475:         # interpolation methods, in order to avoid circular references to self
476:         # stored in the bound instance methods, and therefore delayed garbage
477:         # collection.  See: http://docs.python.org/2/reference/datamodel.html
478:         if kind in ('linear', 'nearest'):
479:             # Make a "view" of the y array that is rotated to the interpolation
480:             # axis.
481:             minval = 2
482:             if kind == 'nearest':
483:                 # Do division before addition to prevent possible integer
484:                 # overflow
485:                 self.x_bds = self.x / 2.0
486:                 self.x_bds = self.x_bds[1:] + self.x_bds[:-1]
487: 
488:                 self._call = self.__class__._call_nearest
489:             else:
490:                 # Check if we can delegate to numpy.interp (2x-10x faster).
491:                 cond = self.x.dtype == np.float_ and self.y.dtype == np.float_
492:                 cond = cond and self.y.ndim == 1
493:                 cond = cond and not _do_extrapolate(fill_value)
494: 
495:                 if cond:
496:                     self._call = self.__class__._call_linear_np
497:                 else:
498:                     self._call = self.__class__._call_linear
499:         else:
500:             minval = order + 1
501: 
502:             rewrite_nan = False
503:             xx, yy = self.x, self._y
504:             if order > 1:
505:                 # Quadratic or cubic spline. If input contains even a single
506:                 # nan, then the output is all nans. We cannot just feed data
507:                 # with nans to make_interp_spline because it calls LAPACK.
508:                 # So, we make up a bogus x and y with no nans and use it
509:                 # to get the correct shape of the output, which we then fill
510:                 # with nans.
511:                 # For slinear or zero order spline, we just pass nans through.
512:                 if np.isnan(self.x).any():
513:                     xx = np.linspace(min(self.x), max(self.x), len(self.x))
514:                     rewrite_nan = True
515:                 if np.isnan(self._y).any():
516:                     yy = np.ones_like(self._y)
517:                     rewrite_nan = True
518: 
519:             self._spline = make_interp_spline(xx, yy, k=order,
520:                                               check_finite=False)
521:             if rewrite_nan:
522:                 self._call = self.__class__._call_nan_spline
523:             else:
524:                 self._call = self.__class__._call_spline
525: 
526:         if len(self.x) < minval:
527:             raise ValueError("x and y arrays must have at "
528:                              "least %d entries" % minval)
529: 
530:     @property
531:     def fill_value(self):
532:         # backwards compat: mimic a public attribute
533:         return self._fill_value_orig
534: 
535:     @fill_value.setter
536:     def fill_value(self, fill_value):
537:         # extrapolation only works for nearest neighbor and linear methods
538:         if _do_extrapolate(fill_value):
539:             if self.bounds_error:
540:                 raise ValueError("Cannot extrapolate and raise "
541:                                  "at the same time.")
542:             self.bounds_error = False
543:             self._extrapolate = True
544:         else:
545:             broadcast_shape = (self.y.shape[:self.axis] +
546:                                self.y.shape[self.axis + 1:])
547:             if len(broadcast_shape) == 0:
548:                 broadcast_shape = (1,)
549:             # it's either a pair (_below_range, _above_range) or a single value
550:             # for both above and below range
551:             if isinstance(fill_value, tuple) and len(fill_value) == 2:
552:                 below_above = [np.asarray(fill_value[0]),
553:                                np.asarray(fill_value[1])]
554:                 names = ('fill_value (below)', 'fill_value (above)')
555:                 for ii in range(2):
556:                     below_above[ii] = _check_broadcast_up_to(
557:                         below_above[ii], broadcast_shape, names[ii])
558:             else:
559:                 fill_value = np.asarray(fill_value)
560:                 below_above = [_check_broadcast_up_to(
561:                     fill_value, broadcast_shape, 'fill_value')] * 2
562:             self._fill_value_below, self._fill_value_above = below_above
563:             self._extrapolate = False
564:             if self.bounds_error is None:
565:                 self.bounds_error = True
566:         # backwards compat: fill_value was a public attr; make it writeable
567:         self._fill_value_orig = fill_value
568: 
569:     def _call_linear_np(self, x_new):
570:         # Note that out-of-bounds values are taken care of in self._evaluate
571:         return np.interp(x_new, self.x, self.y)
572: 
573:     def _call_linear(self, x_new):
574:         # 2. Find where in the orignal data, the values to interpolate
575:         #    would be inserted.
576:         #    Note: If x_new[n] == x[m], then m is returned by searchsorted.
577:         x_new_indices = searchsorted(self.x, x_new)
578: 
579:         # 3. Clip x_new_indices so that they are within the range of
580:         #    self.x indices and at least 1.  Removes mis-interpolation
581:         #    of x_new[n] = x[0]
582:         x_new_indices = x_new_indices.clip(1, len(self.x)-1).astype(int)
583: 
584:         # 4. Calculate the slope of regions that each x_new value falls in.
585:         lo = x_new_indices - 1
586:         hi = x_new_indices
587: 
588:         x_lo = self.x[lo]
589:         x_hi = self.x[hi]
590:         y_lo = self._y[lo]
591:         y_hi = self._y[hi]
592: 
593:         # Note that the following two expressions rely on the specifics of the
594:         # broadcasting semantics.
595:         slope = (y_hi - y_lo) / (x_hi - x_lo)[:, None]
596: 
597:         # 5. Calculate the actual value for each entry in x_new.
598:         y_new = slope*(x_new - x_lo)[:, None] + y_lo
599: 
600:         return y_new
601: 
602:     def _call_nearest(self, x_new):
603:         ''' Find nearest neighbour interpolated y_new = f(x_new).'''
604: 
605:         # 2. Find where in the averaged data the values to interpolate
606:         #    would be inserted.
607:         #    Note: use side='left' (right) to searchsorted() to define the
608:         #    halfway point to be nearest to the left (right) neighbour
609:         x_new_indices = searchsorted(self.x_bds, x_new, side='left')
610: 
611:         # 3. Clip x_new_indices so that they are within the range of x indices.
612:         x_new_indices = x_new_indices.clip(0, len(self.x)-1).astype(intp)
613: 
614:         # 4. Calculate the actual value for each entry in x_new.
615:         y_new = self._y[x_new_indices]
616: 
617:         return y_new
618: 
619:     def _call_spline(self, x_new):
620:         return self._spline(x_new)
621: 
622:     def _call_nan_spline(self, x_new):
623:         out = self._spline(x_new)
624:         out[...] = np.nan
625:         return out
626: 
627:     def _evaluate(self, x_new):
628:         # 1. Handle values in x_new that are outside of x.  Throw error,
629:         #    or return a list of mask array indicating the outofbounds values.
630:         #    The behavior is set by the bounds_error variable.
631:         x_new = asarray(x_new)
632:         y_new = self._call(self, x_new)
633:         if not self._extrapolate:
634:             below_bounds, above_bounds = self._check_bounds(x_new)
635:             if len(y_new) > 0:
636:                 # Note fill_value must be broadcast up to the proper size
637:                 # and flattened to work here
638:                 y_new[below_bounds] = self._fill_value_below
639:                 y_new[above_bounds] = self._fill_value_above
640:         return y_new
641: 
642:     def _check_bounds(self, x_new):
643:         '''Check the inputs for being in the bounds of the interpolated data.
644: 
645:         Parameters
646:         ----------
647:         x_new : array
648: 
649:         Returns
650:         -------
651:         out_of_bounds : bool array
652:             The mask on x_new of values that are out of the bounds.
653:         '''
654: 
655:         # If self.bounds_error is True, we raise an error if any x_new values
656:         # fall outside the range of x.  Otherwise, we return an array indicating
657:         # which values are outside the boundary region.
658:         below_bounds = x_new < self.x[0]
659:         above_bounds = x_new > self.x[-1]
660: 
661:         # !! Could provide more information about which values are out of bounds
662:         if self.bounds_error and below_bounds.any():
663:             raise ValueError("A value in x_new is below the interpolation "
664:                              "range.")
665:         if self.bounds_error and above_bounds.any():
666:             raise ValueError("A value in x_new is above the interpolation "
667:                              "range.")
668: 
669:         # !! Should we emit a warning if some values are out of bounds?
670:         # !! matlab does not.
671:         return below_bounds, above_bounds
672: 
673: 
674: class _PPolyBase(object):
675:     '''Base class for piecewise polynomials.'''
676:     __slots__ = ('c', 'x', 'extrapolate', 'axis')
677: 
678:     def __init__(self, c, x, extrapolate=None, axis=0):
679:         self.c = np.asarray(c)
680:         self.x = np.ascontiguousarray(x, dtype=np.float64)
681: 
682:         if extrapolate is None:
683:             extrapolate = True
684:         elif extrapolate != 'periodic':
685:             extrapolate = bool(extrapolate)
686:         self.extrapolate = extrapolate
687: 
688:         if self.c.ndim < 2:
689:             raise ValueError("Coefficients array must be at least "
690:                              "2-dimensional.")
691: 
692:         if not (0 <= axis < self.c.ndim - 1):
693:             raise ValueError("axis=%s must be between 0 and %s" %
694:                              (axis, self.c.ndim-1))
695: 
696:         self.axis = axis
697:         if axis != 0:
698:             # roll the interpolation axis to be the first one in self.c
699:             # More specifically, the target shape for self.c is (k, m, ...),
700:             # and axis !=0 means that we have c.shape (..., k, m, ...)
701:             #                                               ^
702:             #                                              axis
703:             # So we roll two of them.
704:             self.c = np.rollaxis(self.c, axis+1)
705:             self.c = np.rollaxis(self.c, axis+1)
706: 
707:         if self.x.ndim != 1:
708:             raise ValueError("x must be 1-dimensional")
709:         if self.x.size < 2:
710:             raise ValueError("at least 2 breakpoints are needed")
711:         if self.c.ndim < 2:
712:             raise ValueError("c must have at least 2 dimensions")
713:         if self.c.shape[0] == 0:
714:             raise ValueError("polynomial must be at least of order 0")
715:         if self.c.shape[1] != self.x.size-1:
716:             raise ValueError("number of coefficients != len(x)-1")
717:         dx = np.diff(self.x)
718:         if not (np.all(dx >= 0) or np.all(dx <= 0)):
719:             raise ValueError("`x` must be strictly increasing or decreasing.")
720: 
721:         dtype = self._get_dtype(self.c.dtype)
722:         self.c = np.ascontiguousarray(self.c, dtype=dtype)
723: 
724:     def _get_dtype(self, dtype):
725:         if np.issubdtype(dtype, np.complexfloating) \
726:                or np.issubdtype(self.c.dtype, np.complexfloating):
727:             return np.complex_
728:         else:
729:             return np.float_
730: 
731:     @classmethod
732:     def construct_fast(cls, c, x, extrapolate=None, axis=0):
733:         '''
734:         Construct the piecewise polynomial without making checks.
735: 
736:         Takes the same parameters as the constructor. Input arguments
737:         `c` and `x` must be arrays of the correct shape and type.  The
738:         `c` array can only be of dtypes float and complex, and `x`
739:         array must have dtype float.
740:         '''
741:         self = object.__new__(cls)
742:         self.c = c
743:         self.x = x
744:         self.axis = axis
745:         if extrapolate is None:
746:             extrapolate = True
747:         self.extrapolate = extrapolate
748:         return self
749: 
750:     def _ensure_c_contiguous(self):
751:         '''
752:         c and x may be modified by the user. The Cython code expects
753:         that they are C contiguous.
754:         '''
755:         if not self.x.flags.c_contiguous:
756:             self.x = self.x.copy()
757:         if not self.c.flags.c_contiguous:
758:             self.c = self.c.copy()
759: 
760:     def extend(self, c, x, right=None):
761:         '''
762:         Add additional breakpoints and coefficients to the polynomial.
763: 
764:         Parameters
765:         ----------
766:         c : ndarray, size (k, m, ...)
767:             Additional coefficients for polynomials in intervals. Note that
768:             the first additional interval will be formed using one of the
769:             `self.x` end points.
770:         x : ndarray, size (m,)
771:             Additional breakpoints. Must be sorted in the same order as
772:             `self.x` and either to the right or to the left of the current
773:             breakpoints.
774:         right
775:             Deprecated argument. Has no effect.
776: 
777:             .. deprecated:: 0.19
778:         '''
779:         if right is not None:
780:             warnings.warn("`right` is deprecated and will be removed.")
781: 
782:         c = np.asarray(c)
783:         x = np.asarray(x)
784: 
785:         if c.ndim < 2:
786:             raise ValueError("invalid dimensions for c")
787:         if x.ndim != 1:
788:             raise ValueError("invalid dimensions for x")
789:         if x.shape[0] != c.shape[1]:
790:             raise ValueError("x and c have incompatible sizes")
791:         if c.shape[2:] != self.c.shape[2:] or c.ndim != self.c.ndim:
792:             raise ValueError("c and self.c have incompatible shapes")
793: 
794:         if c.size == 0:
795:             return
796: 
797:         dx = np.diff(x)
798:         if not (np.all(dx >= 0) or np.all(dx <= 0)):
799:             raise ValueError("`x` is not sorted.")
800: 
801:         if self.x[-1] >= self.x[0]:
802:             if not x[-1] >= x[0]:
803:                 raise ValueError("`x` is in the different order "
804:                                  "than `self.x`.")
805: 
806:             if x[0] >= self.x[-1]:
807:                 action = 'append'
808:             elif x[-1] <= self.x[0]:
809:                 action = 'prepend'
810:             else:
811:                 raise ValueError("`x` is neither on the left or on the right "
812:                                  "from `self.x`.")
813:         else:
814:             if not x[-1] <= x[0]:
815:                 raise ValueError("`x` is in the different order "
816:                                  "than `self.x`.")
817: 
818:             if x[0] <= self.x[-1]:
819:                 action = 'append'
820:             elif x[-1] >= self.x[0]:
821:                 action = 'prepend'
822:             else:
823:                 raise ValueError("`x` is neither on the left or on the right "
824:                                  "from `self.x`.")
825: 
826:         dtype = self._get_dtype(c.dtype)
827: 
828:         k2 = max(c.shape[0], self.c.shape[0])
829:         c2 = np.zeros((k2, self.c.shape[1] + c.shape[1]) + self.c.shape[2:],
830:                       dtype=dtype)
831: 
832:         if action == 'append':
833:             c2[k2-self.c.shape[0]:, :self.c.shape[1]] = self.c
834:             c2[k2-c.shape[0]:, self.c.shape[1]:] = c
835:             self.x = np.r_[self.x, x]
836:         elif action == 'prepend':
837:             c2[k2-self.c.shape[0]:, :c.shape[1]] = c
838:             c2[k2-c.shape[0]:, c.shape[1]:] = self.c
839:             self.x = np.r_[x, self.x]
840: 
841:         self.c = c2
842: 
843:     def __call__(self, x, nu=0, extrapolate=None):
844:         '''
845:         Evaluate the piecewise polynomial or its derivative.
846: 
847:         Parameters
848:         ----------
849:         x : array_like
850:             Points to evaluate the interpolant at.
851:         nu : int, optional
852:             Order of derivative to evaluate. Must be non-negative.
853:         extrapolate : {bool, 'periodic', None}, optional
854:             If bool, determines whether to extrapolate to out-of-bounds points
855:             based on first and last intervals, or to return NaNs.
856:             If 'periodic', periodic extrapolation is used.
857:             If None (default), use `self.extrapolate`.
858: 
859:         Returns
860:         -------
861:         y : array_like
862:             Interpolated values. Shape is determined by replacing
863:             the interpolation axis in the original array with the shape of x.
864: 
865:         Notes
866:         -----
867:         Derivatives are evaluated piecewise for each polynomial
868:         segment, even if the polynomial is not differentiable at the
869:         breakpoints. The polynomial intervals are considered half-open,
870:         ``[a, b)``, except for the last interval which is closed
871:         ``[a, b]``.
872:         '''
873:         if extrapolate is None:
874:             extrapolate = self.extrapolate
875:         x = np.asarray(x)
876:         x_shape, x_ndim = x.shape, x.ndim
877:         x = np.ascontiguousarray(x.ravel(), dtype=np.float_)
878: 
879:         # With periodic extrapolation we map x to the segment
880:         # [self.x[0], self.x[-1]].
881:         if extrapolate == 'periodic':
882:             x = self.x[0] + (x - self.x[0]) % (self.x[-1] - self.x[0])
883:             extrapolate = False
884: 
885:         out = np.empty((len(x), prod(self.c.shape[2:])), dtype=self.c.dtype)
886:         self._ensure_c_contiguous()
887:         self._evaluate(x, nu, extrapolate, out)
888:         out = out.reshape(x_shape + self.c.shape[2:])
889:         if self.axis != 0:
890:             # transpose to move the calculated values to the interpolation axis
891:             l = list(range(out.ndim))
892:             l = l[x_ndim:x_ndim+self.axis] + l[:x_ndim] + l[x_ndim+self.axis:]
893:             out = out.transpose(l)
894:         return out
895: 
896: 
897: class PPoly(_PPolyBase):
898:     '''
899:     Piecewise polynomial in terms of coefficients and breakpoints
900: 
901:     The polynomial between ``x[i]`` and ``x[i + 1]`` is written in the
902:     local power basis::
903: 
904:         S = sum(c[m, i] * (xp - x[i])**(k-m) for m in range(k+1))
905: 
906:     where ``k`` is the degree of the polynomial.
907: 
908:     Parameters
909:     ----------
910:     c : ndarray, shape (k, m, ...)
911:         Polynomial coefficients, order `k` and `m` intervals
912:     x : ndarray, shape (m+1,)
913:         Polynomial breakpoints. Must be sorted in either increasing or
914:         decreasing order.
915:     extrapolate : bool or 'periodic', optional
916:         If bool, determines whether to extrapolate to out-of-bounds points
917:         based on first and last intervals, or to return NaNs. If 'periodic',
918:         periodic extrapolation is used. Default is True.
919:     axis : int, optional
920:         Interpolation axis. Default is zero.
921: 
922:     Attributes
923:     ----------
924:     x : ndarray
925:         Breakpoints.
926:     c : ndarray
927:         Coefficients of the polynomials. They are reshaped
928:         to a 3-dimensional array with the last dimension representing
929:         the trailing dimensions of the original coefficient array.
930:     axis : int
931:         Interpolation axis.
932: 
933:     Methods
934:     -------
935:     __call__
936:     derivative
937:     antiderivative
938:     integrate
939:     solve
940:     roots
941:     extend
942:     from_spline
943:     from_bernstein_basis
944:     construct_fast
945: 
946:     See also
947:     --------
948:     BPoly : piecewise polynomials in the Bernstein basis
949: 
950:     Notes
951:     -----
952:     High-order polynomials in the power basis can be numerically
953:     unstable.  Precision problems can start to appear for orders
954:     larger than 20-30.
955:     '''
956:     def _evaluate(self, x, nu, extrapolate, out):
957:         _ppoly.evaluate(self.c.reshape(self.c.shape[0], self.c.shape[1], -1),
958:                         self.x, x, nu, bool(extrapolate), out)
959: 
960:     def derivative(self, nu=1):
961:         '''
962:         Construct a new piecewise polynomial representing the derivative.
963: 
964:         Parameters
965:         ----------
966:         nu : int, optional
967:             Order of derivative to evaluate. Default is 1, i.e. compute the
968:             first derivative. If negative, the antiderivative is returned.
969: 
970:         Returns
971:         -------
972:         pp : PPoly
973:             Piecewise polynomial of order k2 = k - n representing the derivative
974:             of this polynomial.
975: 
976:         Notes
977:         -----
978:         Derivatives are evaluated piecewise for each polynomial
979:         segment, even if the polynomial is not differentiable at the
980:         breakpoints. The polynomial intervals are considered half-open,
981:         ``[a, b)``, except for the last interval which is closed
982:         ``[a, b]``.
983:         '''
984:         if nu < 0:
985:             return self.antiderivative(-nu)
986: 
987:         # reduce order
988:         if nu == 0:
989:             c2 = self.c.copy()
990:         else:
991:             c2 = self.c[:-nu, :].copy()
992: 
993:         if c2.shape[0] == 0:
994:             # derivative of order 0 is zero
995:             c2 = np.zeros((1,) + c2.shape[1:], dtype=c2.dtype)
996: 
997:         # multiply by the correct rising factorials
998:         factor = spec.poch(np.arange(c2.shape[0], 0, -1), nu)
999:         c2 *= factor[(slice(None),) + (None,)*(c2.ndim-1)]
1000: 
1001:         # construct a compatible polynomial
1002:         return self.construct_fast(c2, self.x, self.extrapolate, self.axis)
1003: 
1004:     def antiderivative(self, nu=1):
1005:         '''
1006:         Construct a new piecewise polynomial representing the antiderivative.
1007: 
1008:         Antiderivative is also the indefinite integral of the function,
1009:         and derivative is its inverse operation.
1010: 
1011:         Parameters
1012:         ----------
1013:         nu : int, optional
1014:             Order of antiderivative to evaluate. Default is 1, i.e. compute
1015:             the first integral. If negative, the derivative is returned.
1016: 
1017:         Returns
1018:         -------
1019:         pp : PPoly
1020:             Piecewise polynomial of order k2 = k + n representing
1021:             the antiderivative of this polynomial.
1022: 
1023:         Notes
1024:         -----
1025:         The antiderivative returned by this function is continuous and
1026:         continuously differentiable to order n-1, up to floating point
1027:         rounding error.
1028: 
1029:         If antiderivative is computed and ``self.extrapolate='periodic'``,
1030:         it will be set to False for the returned instance. This is done because
1031:         the antiderivative is no longer periodic and its correct evaluation
1032:         outside of the initially given x interval is difficult.
1033:         '''
1034:         if nu <= 0:
1035:             return self.derivative(-nu)
1036: 
1037:         c = np.zeros((self.c.shape[0] + nu, self.c.shape[1]) + self.c.shape[2:],
1038:                      dtype=self.c.dtype)
1039:         c[:-nu] = self.c
1040: 
1041:         # divide by the correct rising factorials
1042:         factor = spec.poch(np.arange(self.c.shape[0], 0, -1), nu)
1043:         c[:-nu] /= factor[(slice(None),) + (None,)*(c.ndim-1)]
1044: 
1045:         # fix continuity of added degrees of freedom
1046:         self._ensure_c_contiguous()
1047:         _ppoly.fix_continuity(c.reshape(c.shape[0], c.shape[1], -1),
1048:                               self.x, nu - 1)
1049: 
1050:         if self.extrapolate == 'periodic':
1051:             extrapolate = False
1052:         else:
1053:             extrapolate = self.extrapolate
1054: 
1055:         # construct a compatible polynomial
1056:         return self.construct_fast(c, self.x, extrapolate, self.axis)
1057: 
1058:     def integrate(self, a, b, extrapolate=None):
1059:         '''
1060:         Compute a definite integral over a piecewise polynomial.
1061: 
1062:         Parameters
1063:         ----------
1064:         a : float
1065:             Lower integration bound
1066:         b : float
1067:             Upper integration bound
1068:         extrapolate : {bool, 'periodic', None}, optional
1069:             If bool, determines whether to extrapolate to out-of-bounds points
1070:             based on first and last intervals, or to return NaNs.
1071:             If 'periodic', periodic extrapolation is used.
1072:             If None (default), use `self.extrapolate`.
1073: 
1074:         Returns
1075:         -------
1076:         ig : array_like
1077:             Definite integral of the piecewise polynomial over [a, b]
1078:         '''
1079:         if extrapolate is None:
1080:             extrapolate = self.extrapolate
1081: 
1082:         # Swap integration bounds if needed
1083:         sign = 1
1084:         if b < a:
1085:             a, b = b, a
1086:             sign = -1
1087: 
1088:         range_int = np.empty((prod(self.c.shape[2:]),), dtype=self.c.dtype)
1089:         self._ensure_c_contiguous()
1090: 
1091:         # Compute the integral.
1092:         if extrapolate == 'periodic':
1093:             # Split the integral into the part over period (can be several
1094:             # of them) and the remaining part.
1095: 
1096:             xs, xe = self.x[0], self.x[-1]
1097:             period = xe - xs
1098:             interval = b - a
1099:             n_periods, left = divmod(interval, period)
1100: 
1101:             if n_periods > 0:
1102:                 _ppoly.integrate(
1103:                     self.c.reshape(self.c.shape[0], self.c.shape[1], -1),
1104:                     self.x, xs, xe, False, out=range_int)
1105:                 range_int *= n_periods
1106:             else:
1107:                 range_int.fill(0)
1108: 
1109:             # Map a to [xs, xe], b is always a + left.
1110:             a = xs + (a - xs) % period
1111:             b = a + left
1112: 
1113:             # If b <= xe then we need to integrate over [a, b], otherwise
1114:             # over [a, xe] and from xs to what is remained.
1115:             remainder_int = np.empty_like(range_int)
1116:             if b <= xe:
1117:                 _ppoly.integrate(
1118:                     self.c.reshape(self.c.shape[0], self.c.shape[1], -1),
1119:                     self.x, a, b, False, out=remainder_int)
1120:                 range_int += remainder_int
1121:             else:
1122:                 _ppoly.integrate(
1123:                     self.c.reshape(self.c.shape[0], self.c.shape[1], -1),
1124:                     self.x, a, xe, False, out=remainder_int)
1125:                 range_int += remainder_int
1126: 
1127:                 _ppoly.integrate(
1128:                     self.c.reshape(self.c.shape[0], self.c.shape[1], -1),
1129:                     self.x, xs, xs + left + a - xe, False, out=remainder_int)
1130:                 range_int += remainder_int
1131:         else:
1132:             _ppoly.integrate(
1133:                 self.c.reshape(self.c.shape[0], self.c.shape[1], -1),
1134:                 self.x, a, b, bool(extrapolate), out=range_int)
1135: 
1136:         # Return
1137:         range_int *= sign
1138:         return range_int.reshape(self.c.shape[2:])
1139: 
1140:     def solve(self, y=0., discontinuity=True, extrapolate=None):
1141:         '''
1142:         Find real solutions of the the equation ``pp(x) == y``.
1143: 
1144:         Parameters
1145:         ----------
1146:         y : float, optional
1147:             Right-hand side. Default is zero.
1148:         discontinuity : bool, optional
1149:             Whether to report sign changes across discontinuities at
1150:             breakpoints as roots.
1151:         extrapolate : {bool, 'periodic', None}, optional
1152:             If bool, determines whether to return roots from the polynomial
1153:             extrapolated based on first and last intervals, 'periodic' works
1154:             the same as False. If None (default), use `self.extrapolate`.
1155: 
1156:         Returns
1157:         -------
1158:         roots : ndarray
1159:             Roots of the polynomial(s).
1160: 
1161:             If the PPoly object describes multiple polynomials, the
1162:             return value is an object array whose each element is an
1163:             ndarray containing the roots.
1164: 
1165:         Notes
1166:         -----
1167:         This routine works only on real-valued polynomials.
1168: 
1169:         If the piecewise polynomial contains sections that are
1170:         identically zero, the root list will contain the start point
1171:         of the corresponding interval, followed by a ``nan`` value.
1172: 
1173:         If the polynomial is discontinuous across a breakpoint, and
1174:         there is a sign change across the breakpoint, this is reported
1175:         if the `discont` parameter is True.
1176: 
1177:         Examples
1178:         --------
1179: 
1180:         Finding roots of ``[x**2 - 1, (x - 1)**2]`` defined on intervals
1181:         ``[-2, 1], [1, 2]``:
1182: 
1183:         >>> from scipy.interpolate import PPoly
1184:         >>> pp = PPoly(np.array([[1, -4, 3], [1, 0, 0]]).T, [-2, 1, 2])
1185:         >>> pp.roots()
1186:         array([-1.,  1.])
1187:         '''
1188:         if extrapolate is None:
1189:             extrapolate = self.extrapolate
1190: 
1191:         self._ensure_c_contiguous()
1192: 
1193:         if np.issubdtype(self.c.dtype, np.complexfloating):
1194:             raise ValueError("Root finding is only for "
1195:                              "real-valued polynomials")
1196: 
1197:         y = float(y)
1198:         r = _ppoly.real_roots(self.c.reshape(self.c.shape[0], self.c.shape[1], -1),
1199:                               self.x, y, bool(discontinuity),
1200:                               bool(extrapolate))
1201:         if self.c.ndim == 2:
1202:             return r[0]
1203:         else:
1204:             r2 = np.empty(prod(self.c.shape[2:]), dtype=object)
1205:             # this for-loop is equivalent to ``r2[...] = r``, but that's broken
1206:             # in numpy 1.6.0
1207:             for ii, root in enumerate(r):
1208:                 r2[ii] = root
1209: 
1210:             return r2.reshape(self.c.shape[2:])
1211: 
1212:     def roots(self, discontinuity=True, extrapolate=None):
1213:         '''
1214:         Find real roots of the the piecewise polynomial.
1215: 
1216:         Parameters
1217:         ----------
1218:         discontinuity : bool, optional
1219:             Whether to report sign changes across discontinuities at
1220:             breakpoints as roots.
1221:         extrapolate : {bool, 'periodic', None}, optional
1222:             If bool, determines whether to return roots from the polynomial
1223:             extrapolated based on first and last intervals, 'periodic' works
1224:             the same as False. If None (default), use `self.extrapolate`.
1225: 
1226:         Returns
1227:         -------
1228:         roots : ndarray
1229:             Roots of the polynomial(s).
1230: 
1231:             If the PPoly object describes multiple polynomials, the
1232:             return value is an object array whose each element is an
1233:             ndarray containing the roots.
1234: 
1235:         See Also
1236:         --------
1237:         PPoly.solve
1238:         '''
1239:         return self.solve(0, discontinuity, extrapolate)
1240: 
1241:     @classmethod
1242:     def from_spline(cls, tck, extrapolate=None):
1243:         '''
1244:         Construct a piecewise polynomial from a spline
1245: 
1246:         Parameters
1247:         ----------
1248:         tck
1249:             A spline, as returned by `splrep` or a BSpline object.
1250:         extrapolate : bool or 'periodic', optional
1251:             If bool, determines whether to extrapolate to out-of-bounds points
1252:             based on first and last intervals, or to return NaNs.
1253:             If 'periodic', periodic extrapolation is used. Default is True.
1254:         '''
1255:         if isinstance(tck, BSpline):
1256:             t, c, k = tck.tck
1257:             if extrapolate is None:
1258:                 extrapolate = tck.extrapolate
1259:         else:
1260:             t, c, k = tck
1261: 
1262:         cvals = np.empty((k + 1, len(t)-1), dtype=c.dtype)
1263:         for m in xrange(k, -1, -1):
1264:             y = fitpack.splev(t[:-1], tck, der=m)
1265:             cvals[k - m, :] = y/spec.gamma(m+1)
1266: 
1267:         return cls.construct_fast(cvals, t, extrapolate)
1268: 
1269:     @classmethod
1270:     def from_bernstein_basis(cls, bp, extrapolate=None):
1271:         '''
1272:         Construct a piecewise polynomial in the power basis
1273:         from a polynomial in Bernstein basis.
1274: 
1275:         Parameters
1276:         ----------
1277:         bp : BPoly
1278:             A Bernstein basis polynomial, as created by BPoly
1279:         extrapolate : bool or 'periodic', optional
1280:             If bool, determines whether to extrapolate to out-of-bounds points
1281:             based on first and last intervals, or to return NaNs.
1282:             If 'periodic', periodic extrapolation is used. Default is True.
1283:         '''
1284:         dx = np.diff(bp.x)
1285:         k = bp.c.shape[0] - 1  # polynomial order
1286: 
1287:         rest = (None,)*(bp.c.ndim-2)
1288: 
1289:         c = np.zeros_like(bp.c)
1290:         for a in range(k+1):
1291:             factor = (-1)**a * comb(k, a) * bp.c[a]
1292:             for s in range(a, k+1):
1293:                 val = comb(k-a, s-a) * (-1)**s
1294:                 c[k-s] += factor * val / dx[(slice(None),)+rest]**s
1295: 
1296:         if extrapolate is None:
1297:             extrapolate = bp.extrapolate
1298: 
1299:         return cls.construct_fast(c, bp.x, extrapolate, bp.axis)
1300: 
1301: 
1302: class BPoly(_PPolyBase):
1303:     '''Piecewise polynomial in terms of coefficients and breakpoints.
1304: 
1305:     The polynomial between ``x[i]`` and ``x[i + 1]`` is written in the
1306:     Bernstein polynomial basis::
1307: 
1308:         S = sum(c[a, i] * b(a, k; x) for a in range(k+1)),
1309: 
1310:     where ``k`` is the degree of the polynomial, and::
1311: 
1312:         b(a, k; x) = binom(k, a) * t**a * (1 - t)**(k - a),
1313: 
1314:     with ``t = (x - x[i]) / (x[i+1] - x[i])`` and ``binom`` is the binomial
1315:     coefficient.
1316: 
1317:     Parameters
1318:     ----------
1319:     c : ndarray, shape (k, m, ...)
1320:         Polynomial coefficients, order `k` and `m` intervals
1321:     x : ndarray, shape (m+1,)
1322:         Polynomial breakpoints. Must be sorted in either increasing or
1323:         decreasing order.
1324:     extrapolate : bool, optional
1325:         If bool, determines whether to extrapolate to out-of-bounds points
1326:         based on first and last intervals, or to return NaNs. If 'periodic',
1327:         periodic extrapolation is used. Default is True.
1328:     axis : int, optional
1329:         Interpolation axis. Default is zero.
1330: 
1331:     Attributes
1332:     ----------
1333:     x : ndarray
1334:         Breakpoints.
1335:     c : ndarray
1336:         Coefficients of the polynomials. They are reshaped
1337:         to a 3-dimensional array with the last dimension representing
1338:         the trailing dimensions of the original coefficient array.
1339:     axis : int
1340:         Interpolation axis.
1341: 
1342:     Methods
1343:     -------
1344:     __call__
1345:     extend
1346:     derivative
1347:     antiderivative
1348:     integrate
1349:     construct_fast
1350:     from_power_basis
1351:     from_derivatives
1352: 
1353:     See also
1354:     --------
1355:     PPoly : piecewise polynomials in the power basis
1356: 
1357:     Notes
1358:     -----
1359:     Properties of Bernstein polynomials are well documented in the literature.
1360:     Here's a non-exhaustive list:
1361: 
1362:     .. [1] http://en.wikipedia.org/wiki/Bernstein_polynomial
1363: 
1364:     .. [2] Kenneth I. Joy, Bernstein polynomials,
1365:       http://www.idav.ucdavis.edu/education/CAGDNotes/Bernstein-Polynomials.pdf
1366: 
1367:     .. [3] E. H. Doha, A. H. Bhrawy, and M. A. Saker, Boundary Value Problems,
1368:          vol 2011, article ID 829546, :doi:`10.1155/2011/829543`.
1369: 
1370:     Examples
1371:     --------
1372:     >>> from scipy.interpolate import BPoly
1373:     >>> x = [0, 1]
1374:     >>> c = [[1], [2], [3]]
1375:     >>> bp = BPoly(c, x)
1376: 
1377:     This creates a 2nd order polynomial
1378: 
1379:     .. math::
1380: 
1381:         B(x) = 1 \\times b_{0, 2}(x) + 2 \\times b_{1, 2}(x) + 3 \\times b_{2, 2}(x) \\\\
1382:              = 1 \\times (1-x)^2 + 2 \\times 2 x (1 - x) + 3 \\times x^2
1383: 
1384:     '''
1385: 
1386:     def _evaluate(self, x, nu, extrapolate, out):
1387:         _ppoly.evaluate_bernstein(
1388:             self.c.reshape(self.c.shape[0], self.c.shape[1], -1),
1389:             self.x, x, nu, bool(extrapolate), out)
1390: 
1391:     def derivative(self, nu=1):
1392:         '''
1393:         Construct a new piecewise polynomial representing the derivative.
1394: 
1395:         Parameters
1396:         ----------
1397:         nu : int, optional
1398:             Order of derivative to evaluate. Default is 1, i.e. compute the
1399:             first derivative. If negative, the antiderivative is returned.
1400: 
1401:         Returns
1402:         -------
1403:         bp : BPoly
1404:             Piecewise polynomial of order k - nu representing the derivative of
1405:             this polynomial.
1406: 
1407:         '''
1408:         if nu < 0:
1409:             return self.antiderivative(-nu)
1410: 
1411:         if nu > 1:
1412:             bp = self
1413:             for k in range(nu):
1414:                 bp = bp.derivative()
1415:             return bp
1416: 
1417:         # reduce order
1418:         if nu == 0:
1419:             c2 = self.c.copy()
1420:         else:
1421:             # For a polynomial
1422:             #    B(x) = \sum_{a=0}^{k} c_a b_{a, k}(x),
1423:             # we use the fact that
1424:             #   b'_{a, k} = k ( b_{a-1, k-1} - b_{a, k-1} ),
1425:             # which leads to
1426:             #   B'(x) = \sum_{a=0}^{k-1} (c_{a+1} - c_a) b_{a, k-1}
1427:             #
1428:             # finally, for an interval [y, y + dy] with dy != 1,
1429:             # we need to correct for an extra power of dy
1430: 
1431:             rest = (None,)*(self.c.ndim-2)
1432: 
1433:             k = self.c.shape[0] - 1
1434:             dx = np.diff(self.x)[(None, slice(None))+rest]
1435:             c2 = k * np.diff(self.c, axis=0) / dx
1436: 
1437:         if c2.shape[0] == 0:
1438:             # derivative of order 0 is zero
1439:             c2 = np.zeros((1,) + c2.shape[1:], dtype=c2.dtype)
1440: 
1441:         # construct a compatible polynomial
1442:         return self.construct_fast(c2, self.x, self.extrapolate, self.axis)
1443: 
1444:     def antiderivative(self, nu=1):
1445:         '''
1446:         Construct a new piecewise polynomial representing the antiderivative.
1447: 
1448:         Parameters
1449:         ----------
1450:         nu : int, optional
1451:             Order of antiderivative to evaluate. Default is 1, i.e. compute
1452:             the first integral. If negative, the derivative is returned.
1453: 
1454:         Returns
1455:         -------
1456:         bp : BPoly
1457:             Piecewise polynomial of order k + nu representing the
1458:             antiderivative of this polynomial.
1459: 
1460:         Notes
1461:         -----
1462:         If antiderivative is computed and ``self.extrapolate='periodic'``,
1463:         it will be set to False for the returned instance. This is done because
1464:         the antiderivative is no longer periodic and its correct evaluation
1465:         outside of the initially given x interval is difficult.
1466:         '''
1467:         if nu <= 0:
1468:             return self.derivative(-nu)
1469: 
1470:         if nu > 1:
1471:             bp = self
1472:             for k in range(nu):
1473:                 bp = bp.antiderivative()
1474:             return bp
1475: 
1476:         # Construct the indefinite integrals on individual intervals
1477:         c, x = self.c, self.x
1478:         k = c.shape[0]
1479:         c2 = np.zeros((k+1,) + c.shape[1:], dtype=c.dtype)
1480: 
1481:         c2[1:, ...] = np.cumsum(c, axis=0) / k
1482:         delta = x[1:] - x[:-1]
1483:         c2 *= delta[(None, slice(None)) + (None,)*(c.ndim-2)]
1484: 
1485:         # Now fix continuity: on the very first interval, take the integration
1486:         # constant to be zero; on an interval [x_j, x_{j+1}) with j>0,
1487:         # the integration constant is then equal to the jump of the `bp` at x_j.
1488:         # The latter is given by the coefficient of B_{n+1, n+1}
1489:         # *on the previous interval* (other B. polynomials are zero at the
1490:         # breakpoint). Finally, use the fact that BPs form a partition of unity.
1491:         c2[:,1:] += np.cumsum(c2[k, :], axis=0)[:-1]
1492: 
1493:         if self.extrapolate == 'periodic':
1494:             extrapolate = False
1495:         else:
1496:             extrapolate = self.extrapolate
1497: 
1498:         return self.construct_fast(c2, x, extrapolate, axis=self.axis)
1499: 
1500:     def integrate(self, a, b, extrapolate=None):
1501:         '''
1502:         Compute a definite integral over a piecewise polynomial.
1503: 
1504:         Parameters
1505:         ----------
1506:         a : float
1507:             Lower integration bound
1508:         b : float
1509:             Upper integration bound
1510:         extrapolate : {bool, 'periodic', None}, optional
1511:             Whether to extrapolate to out-of-bounds points based on first
1512:             and last intervals, or to return NaNs. If 'periodic', periodic
1513:             extrapolation is used. If None (default), use `self.extrapolate`.
1514: 
1515:         Returns
1516:         -------
1517:         array_like
1518:             Definite integral of the piecewise polynomial over [a, b]
1519: 
1520:         '''
1521:         # XXX: can probably use instead the fact that
1522:         # \int_0^{1} B_{j, n}(x) \dx = 1/(n+1)
1523:         ib = self.antiderivative()
1524:         if extrapolate is None:
1525:             extrapolate = self.extrapolate
1526: 
1527:         # ib.extrapolate shouldn't be 'periodic', it is converted to
1528:         # False for 'periodic. in antiderivative() call.
1529:         if extrapolate != 'periodic':
1530:             ib.extrapolate = extrapolate
1531: 
1532:         if extrapolate == 'periodic':
1533:             # Split the integral into the part over period (can be several
1534:             # of them) and the remaining part.
1535: 
1536:             # For simplicity and clarity convert to a <= b case.
1537:             if a <= b:
1538:                 sign = 1
1539:             else:
1540:                 a, b = b, a
1541:                 sign = -1
1542: 
1543:             xs, xe = self.x[0], self.x[-1]
1544:             period = xe - xs
1545:             interval = b - a
1546:             n_periods, left = divmod(interval, period)
1547:             res = n_periods * (ib(xe) - ib(xs))
1548: 
1549:             # Map a and b to [xs, xe].
1550:             a = xs + (a - xs) % period
1551:             b = a + left
1552: 
1553:             # If b <= xe then we need to integrate over [a, b], otherwise
1554:             # over [a, xe] and from xs to what is remained.
1555:             if b <= xe:
1556:                 res += ib(b) - ib(a)
1557:             else:
1558:                 res += ib(xe) - ib(a) + ib(xs + left + a - xe) - ib(xs)
1559: 
1560:             return sign * res
1561:         else:
1562:             return ib(b) - ib(a)
1563: 
1564:     def extend(self, c, x, right=None):
1565:         k = max(self.c.shape[0], c.shape[0])
1566:         self.c = self._raise_degree(self.c, k - self.c.shape[0])
1567:         c = self._raise_degree(c, k - c.shape[0])
1568:         return _PPolyBase.extend(self, c, x, right)
1569:     extend.__doc__ = _PPolyBase.extend.__doc__
1570: 
1571:     @classmethod
1572:     def from_power_basis(cls, pp, extrapolate=None):
1573:         '''
1574:         Construct a piecewise polynomial in Bernstein basis
1575:         from a power basis polynomial.
1576: 
1577:         Parameters
1578:         ----------
1579:         pp : PPoly
1580:             A piecewise polynomial in the power basis
1581:         extrapolate : bool or 'periodic', optional
1582:             If bool, determines whether to extrapolate to out-of-bounds points
1583:             based on first and last intervals, or to return NaNs.
1584:             If 'periodic', periodic extrapolation is used. Default is True.
1585:         '''
1586:         dx = np.diff(pp.x)
1587:         k = pp.c.shape[0] - 1   # polynomial order
1588: 
1589:         rest = (None,)*(pp.c.ndim-2)
1590: 
1591:         c = np.zeros_like(pp.c)
1592:         for a in range(k+1):
1593:             factor = pp.c[a] / comb(k, k-a) * dx[(slice(None),)+rest]**(k-a)
1594:             for j in range(k-a, k+1):
1595:                 c[j] += factor * comb(j, k-a)
1596: 
1597:         if extrapolate is None:
1598:             extrapolate = pp.extrapolate
1599: 
1600:         return cls.construct_fast(c, pp.x, extrapolate, pp.axis)
1601: 
1602:     @classmethod
1603:     def from_derivatives(cls, xi, yi, orders=None, extrapolate=None):
1604:         '''Construct a piecewise polynomial in the Bernstein basis,
1605:         compatible with the specified values and derivatives at breakpoints.
1606: 
1607:         Parameters
1608:         ----------
1609:         xi : array_like
1610:             sorted 1D array of x-coordinates
1611:         yi : array_like or list of array_likes
1612:             ``yi[i][j]`` is the ``j``-th derivative known at ``xi[i]``
1613:         orders : None or int or array_like of ints. Default: None.
1614:             Specifies the degree of local polynomials. If not None, some
1615:             derivatives are ignored.
1616:         extrapolate : bool or 'periodic', optional
1617:             If bool, determines whether to extrapolate to out-of-bounds points
1618:             based on first and last intervals, or to return NaNs.
1619:             If 'periodic', periodic extrapolation is used. Default is True.
1620: 
1621:         Notes
1622:         -----
1623:         If ``k`` derivatives are specified at a breakpoint ``x``, the
1624:         constructed polynomial is exactly ``k`` times continuously
1625:         differentiable at ``x``, unless the ``order`` is provided explicitly.
1626:         In the latter case, the smoothness of the polynomial at
1627:         the breakpoint is controlled by the ``order``.
1628: 
1629:         Deduces the number of derivatives to match at each end
1630:         from ``order`` and the number of derivatives available. If
1631:         possible it uses the same number of derivatives from
1632:         each end; if the number is odd it tries to take the
1633:         extra one from y2. In any case if not enough derivatives
1634:         are available at one end or another it draws enough to
1635:         make up the total from the other end.
1636: 
1637:         If the order is too high and not enough derivatives are available,
1638:         an exception is raised.
1639: 
1640:         Examples
1641:         --------
1642: 
1643:         >>> from scipy.interpolate import BPoly
1644:         >>> BPoly.from_derivatives([0, 1], [[1, 2], [3, 4]])
1645: 
1646:         Creates a polynomial `f(x)` of degree 3, defined on `[0, 1]`
1647:         such that `f(0) = 1, df/dx(0) = 2, f(1) = 3, df/dx(1) = 4`
1648: 
1649:         >>> BPoly.from_derivatives([0, 1, 2], [[0, 1], [0], [2]])
1650: 
1651:         Creates a piecewise polynomial `f(x)`, such that
1652:         `f(0) = f(1) = 0`, `f(2) = 2`, and `df/dx(0) = 1`.
1653:         Based on the number of derivatives provided, the order of the
1654:         local polynomials is 2 on `[0, 1]` and 1 on `[1, 2]`.
1655:         Notice that no restriction is imposed on the derivatives at
1656:         `x = 1` and `x = 2`.
1657: 
1658:         Indeed, the explicit form of the polynomial is::
1659: 
1660:             f(x) = | x * (1 - x),  0 <= x < 1
1661:                    | 2 * (x - 1),  1 <= x <= 2
1662: 
1663:         So that f'(1-0) = -1 and f'(1+0) = 2
1664: 
1665:         '''
1666:         xi = np.asarray(xi)
1667:         if len(xi) != len(yi):
1668:             raise ValueError("xi and yi need to have the same length")
1669:         if np.any(xi[1:] - xi[:1] <= 0):
1670:             raise ValueError("x coordinates are not in increasing order")
1671: 
1672:         # number of intervals
1673:         m = len(xi) - 1
1674: 
1675:         # global poly order is k-1, local orders are <=k and can vary
1676:         try:
1677:             k = max(len(yi[i]) + len(yi[i+1]) for i in range(m))
1678:         except TypeError:
1679:             raise ValueError("Using a 1D array for y? Please .reshape(-1, 1).")
1680: 
1681:         if orders is None:
1682:             orders = [None] * m
1683:         else:
1684:             if isinstance(orders, (integer_types, np.integer)):
1685:                 orders = [orders] * m
1686:             k = max(k, max(orders))
1687: 
1688:             if any(o <= 0 for o in orders):
1689:                 raise ValueError("Orders must be positive.")
1690: 
1691:         c = []
1692:         for i in range(m):
1693:             y1, y2 = yi[i], yi[i+1]
1694:             if orders[i] is None:
1695:                 n1, n2 = len(y1), len(y2)
1696:             else:
1697:                 n = orders[i]+1
1698:                 n1 = min(n//2, len(y1))
1699:                 n2 = min(n - n1, len(y2))
1700:                 n1 = min(n - n2, len(y2))
1701:                 if n1+n2 != n:
1702:                     mesg = ("Point %g has %d derivatives, point %g"
1703:                             " has %d derivatives, but order %d requested" % (
1704:                                xi[i], len(y1), xi[i+1], len(y2), orders[i]))
1705:                     raise ValueError(mesg)
1706: 
1707:                 if not (n1 <= len(y1) and n2 <= len(y2)):
1708:                     raise ValueError("`order` input incompatible with"
1709:                                      " length y1 or y2.")
1710: 
1711:             b = BPoly._construct_from_derivatives(xi[i], xi[i+1],
1712:                                                   y1[:n1], y2[:n2])
1713:             if len(b) < k:
1714:                 b = BPoly._raise_degree(b, k - len(b))
1715:             c.append(b)
1716: 
1717:         c = np.asarray(c)
1718:         return cls(c.swapaxes(0, 1), xi, extrapolate)
1719: 
1720:     @staticmethod
1721:     def _construct_from_derivatives(xa, xb, ya, yb):
1722:         r'''Compute the coefficients of a polynomial in the Bernstein basis
1723:         given the values and derivatives at the edges.
1724: 
1725:         Return the coefficients of a polynomial in the Bernstein basis
1726:         defined on `[xa, xb]` and having the values and derivatives at the
1727:         endpoints ``xa`` and ``xb`` as specified by ``ya`` and ``yb``.
1728:         The polynomial constructed is of the minimal possible degree, i.e.,
1729:         if the lengths of ``ya`` and ``yb`` are ``na`` and ``nb``, the degree
1730:         of the polynomial is ``na + nb - 1``.
1731: 
1732:         Parameters
1733:         ----------
1734:         xa : float
1735:             Left-hand end point of the interval
1736:         xb : float
1737:             Right-hand end point of the interval
1738:         ya : array_like
1739:             Derivatives at ``xa``. ``ya[0]`` is the value of the function, and
1740:             ``ya[i]`` for ``i > 0`` is the value of the ``i``-th derivative.
1741:         yb : array_like
1742:             Derivatives at ``xb``.
1743: 
1744:         Returns
1745:         -------
1746:         array
1747:             coefficient array of a polynomial having specified derivatives
1748: 
1749:         Notes
1750:         -----
1751:         This uses several facts from life of Bernstein basis functions.
1752:         First of all,
1753: 
1754:             .. math:: b'_{a, n} = n (b_{a-1, n-1} - b_{a, n-1})
1755: 
1756:         If B(x) is a linear combination of the form
1757: 
1758:             .. math:: B(x) = \sum_{a=0}^{n} c_a b_{a, n},
1759: 
1760:         then :math: B'(x) = n \sum_{a=0}^{n-1} (c_{a+1} - c_{a}) b_{a, n-1}.
1761:         Iterating the latter one, one finds for the q-th derivative
1762: 
1763:             .. math:: B^{q}(x) = n!/(n-q)! \sum_{a=0}^{n-q} Q_a b_{a, n-q},
1764: 
1765:         with
1766: 
1767:           .. math:: Q_a = \sum_{j=0}^{q} (-)^{j+q} comb(q, j) c_{j+a}
1768: 
1769:         This way, only `a=0` contributes to :math: `B^{q}(x = xa)`, and
1770:         `c_q` are found one by one by iterating `q = 0, ..., na`.
1771: 
1772:         At `x = xb` it's the same with `a = n - q`.
1773: 
1774:         '''
1775:         ya, yb = np.asarray(ya), np.asarray(yb)
1776:         if ya.shape[1:] != yb.shape[1:]:
1777:             raise ValueError('ya and yb have incompatible dimensions.')
1778: 
1779:         dta, dtb = ya.dtype, yb.dtype
1780:         if (np.issubdtype(dta, np.complexfloating) or
1781:                np.issubdtype(dtb, np.complexfloating)):
1782:             dt = np.complex_
1783:         else:
1784:             dt = np.float_
1785: 
1786:         na, nb = len(ya), len(yb)
1787:         n = na + nb
1788: 
1789:         c = np.empty((na+nb,) + ya.shape[1:], dtype=dt)
1790: 
1791:         # compute coefficients of a polynomial degree na+nb-1
1792:         # walk left-to-right
1793:         for q in range(0, na):
1794:             c[q] = ya[q] / spec.poch(n - q, q) * (xb - xa)**q
1795:             for j in range(0, q):
1796:                 c[q] -= (-1)**(j+q) * comb(q, j) * c[j]
1797: 
1798:         # now walk right-to-left
1799:         for q in range(0, nb):
1800:             c[-q-1] = yb[q] / spec.poch(n - q, q) * (-1)**q * (xb - xa)**q
1801:             for j in range(0, q):
1802:                 c[-q-1] -= (-1)**(j+1) * comb(q, j+1) * c[-q+j]
1803: 
1804:         return c
1805: 
1806:     @staticmethod
1807:     def _raise_degree(c, d):
1808:         r'''Raise a degree of a polynomial in the Bernstein basis.
1809: 
1810:         Given the coefficients of a polynomial degree `k`, return (the
1811:         coefficients of) the equivalent polynomial of degree `k+d`.
1812: 
1813:         Parameters
1814:         ----------
1815:         c : array_like
1816:             coefficient array, 1D
1817:         d : integer
1818: 
1819:         Returns
1820:         -------
1821:         array
1822:             coefficient array, 1D array of length `c.shape[0] + d`
1823: 
1824:         Notes
1825:         -----
1826:         This uses the fact that a Bernstein polynomial `b_{a, k}` can be
1827:         identically represented as a linear combination of polynomials of
1828:         a higher degree `k+d`:
1829: 
1830:             .. math:: b_{a, k} = comb(k, a) \sum_{j=0}^{d} b_{a+j, k+d} \
1831:                                  comb(d, j) / comb(k+d, a+j)
1832: 
1833:         '''
1834:         if d == 0:
1835:             return c
1836: 
1837:         k = c.shape[0] - 1
1838:         out = np.zeros((c.shape[0] + d,) + c.shape[1:], dtype=c.dtype)
1839: 
1840:         for a in range(c.shape[0]):
1841:             f = c[a] * comb(k, a)
1842:             for j in range(d+1):
1843:                 out[a+j] += f * comb(d, j) / comb(k+d, a+j)
1844:         return out
1845: 
1846: 
1847: class NdPPoly(object):
1848:     '''
1849:     Piecewise tensor product polynomial
1850: 
1851:     The value at point `xp = (x', y', z', ...)` is evaluated by first
1852:     computing the interval indices `i` such that::
1853: 
1854:         x[0][i[0]] <= x' < x[0][i[0]+1]
1855:         x[1][i[1]] <= y' < x[1][i[1]+1]
1856:         ...
1857: 
1858:     and then computing::
1859: 
1860:         S = sum(c[k0-m0-1,...,kn-mn-1,i[0],...,i[n]]
1861:                 * (xp[0] - x[0][i[0]])**m0
1862:                 * ...
1863:                 * (xp[n] - x[n][i[n]])**mn
1864:                 for m0 in range(k[0]+1)
1865:                 ...
1866:                 for mn in range(k[n]+1))
1867: 
1868:     where ``k[j]`` is the degree of the polynomial in dimension j. This
1869:     representation is the piecewise multivariate power basis.
1870: 
1871:     Parameters
1872:     ----------
1873:     c : ndarray, shape (k0, ..., kn, m0, ..., mn, ...)
1874:         Polynomial coefficients, with polynomial order `kj` and
1875:         `mj+1` intervals for each dimension `j`.
1876:     x : ndim-tuple of ndarrays, shapes (mj+1,)
1877:         Polynomial breakpoints for each dimension. These must be
1878:         sorted in increasing order.
1879:     extrapolate : bool, optional
1880:         Whether to extrapolate to out-of-bounds points based on first
1881:         and last intervals, or to return NaNs. Default: True.
1882: 
1883:     Attributes
1884:     ----------
1885:     x : tuple of ndarrays
1886:         Breakpoints.
1887:     c : ndarray
1888:         Coefficients of the polynomials.
1889: 
1890:     Methods
1891:     -------
1892:     __call__
1893:     construct_fast
1894: 
1895:     See also
1896:     --------
1897:     PPoly : piecewise polynomials in 1D
1898: 
1899:     Notes
1900:     -----
1901:     High-order polynomials in the power basis can be numerically
1902:     unstable.
1903: 
1904:     '''
1905: 
1906:     def __init__(self, c, x, extrapolate=None):
1907:         self.x = tuple(np.ascontiguousarray(v, dtype=np.float64) for v in x)
1908:         self.c = np.asarray(c)
1909:         if extrapolate is None:
1910:             extrapolate = True
1911:         self.extrapolate = bool(extrapolate)
1912: 
1913:         ndim = len(self.x)
1914:         if any(v.ndim != 1 for v in self.x):
1915:             raise ValueError("x arrays must all be 1-dimensional")
1916:         if any(v.size < 2 for v in self.x):
1917:             raise ValueError("x arrays must all contain at least 2 points")
1918:         if c.ndim < 2*ndim:
1919:             raise ValueError("c must have at least 2*len(x) dimensions")
1920:         if any(np.any(v[1:] - v[:-1] < 0) for v in self.x):
1921:             raise ValueError("x-coordinates are not in increasing order")
1922:         if any(a != b.size - 1 for a, b in zip(c.shape[ndim:2*ndim], self.x)):
1923:             raise ValueError("x and c do not agree on the number of intervals")
1924: 
1925:         dtype = self._get_dtype(self.c.dtype)
1926:         self.c = np.ascontiguousarray(self.c, dtype=dtype)
1927: 
1928:     @classmethod
1929:     def construct_fast(cls, c, x, extrapolate=None):
1930:         '''
1931:         Construct the piecewise polynomial without making checks.
1932: 
1933:         Takes the same parameters as the constructor. Input arguments
1934:         `c` and `x` must be arrays of the correct shape and type.  The
1935:         `c` array can only be of dtypes float and complex, and `x`
1936:         array must have dtype float.
1937: 
1938:         '''
1939:         self = object.__new__(cls)
1940:         self.c = c
1941:         self.x = x
1942:         if extrapolate is None:
1943:             extrapolate = True
1944:         self.extrapolate = extrapolate
1945:         return self
1946: 
1947:     def _get_dtype(self, dtype):
1948:         if np.issubdtype(dtype, np.complexfloating) \
1949:                or np.issubdtype(self.c.dtype, np.complexfloating):
1950:             return np.complex_
1951:         else:
1952:             return np.float_
1953: 
1954:     def _ensure_c_contiguous(self):
1955:         if not self.c.flags.c_contiguous:
1956:             self.c = self.c.copy()
1957:         if not isinstance(self.x, tuple):
1958:             self.x = tuple(self.x)
1959: 
1960:     def __call__(self, x, nu=None, extrapolate=None):
1961:         '''
1962:         Evaluate the piecewise polynomial or its derivative
1963: 
1964:         Parameters
1965:         ----------
1966:         x : array-like
1967:             Points to evaluate the interpolant at.
1968:         nu : tuple, optional
1969:             Orders of derivatives to evaluate. Each must be non-negative.
1970:         extrapolate : bool, optional
1971:             Whether to extrapolate to out-of-bounds points based on first
1972:             and last intervals, or to return NaNs.
1973: 
1974:         Returns
1975:         -------
1976:         y : array-like
1977:             Interpolated values. Shape is determined by replacing
1978:             the interpolation axis in the original array with the shape of x.
1979: 
1980:         Notes
1981:         -----
1982:         Derivatives are evaluated piecewise for each polynomial
1983:         segment, even if the polynomial is not differentiable at the
1984:         breakpoints. The polynomial intervals are considered half-open,
1985:         ``[a, b)``, except for the last interval which is closed
1986:         ``[a, b]``.
1987: 
1988:         '''
1989:         if extrapolate is None:
1990:             extrapolate = self.extrapolate
1991:         else:
1992:             extrapolate = bool(extrapolate)
1993: 
1994:         ndim = len(self.x)
1995: 
1996:         x = _ndim_coords_from_arrays(x)
1997:         x_shape = x.shape
1998:         x = np.ascontiguousarray(x.reshape(-1, x.shape[-1]), dtype=np.float_)
1999: 
2000:         if nu is None:
2001:             nu = np.zeros((ndim,), dtype=np.intc)
2002:         else:
2003:             nu = np.asarray(nu, dtype=np.intc)
2004:             if nu.ndim != 1 or nu.shape[0] != ndim:
2005:                 raise ValueError("invalid number of derivative orders nu")
2006: 
2007:         dim1 = prod(self.c.shape[:ndim])
2008:         dim2 = prod(self.c.shape[ndim:2*ndim])
2009:         dim3 = prod(self.c.shape[2*ndim:])
2010:         ks = np.array(self.c.shape[:ndim], dtype=np.intc)
2011: 
2012:         out = np.empty((x.shape[0], dim3), dtype=self.c.dtype)
2013:         self._ensure_c_contiguous()
2014: 
2015:         _ppoly.evaluate_nd(self.c.reshape(dim1, dim2, dim3),
2016:                            self.x,
2017:                            ks,
2018:                            x,
2019:                            nu,
2020:                            bool(extrapolate),
2021:                            out)
2022: 
2023:         return out.reshape(x_shape[:-1] + self.c.shape[2*ndim:])
2024: 
2025:     def _derivative_inplace(self, nu, axis):
2026:         '''
2027:         Compute 1D derivative along a selected dimension in-place
2028:         May result to non-contiguous c array.
2029:         '''
2030:         if nu < 0:
2031:             return self._antiderivative_inplace(-nu, axis)
2032: 
2033:         ndim = len(self.x)
2034:         axis = axis % ndim
2035: 
2036:         # reduce order
2037:         if nu == 0:
2038:             # noop
2039:             return
2040:         else:
2041:             sl = [slice(None)]*ndim
2042:             sl[axis] = slice(None, -nu, None)
2043:             c2 = self.c[sl]
2044: 
2045:         if c2.shape[axis] == 0:
2046:             # derivative of order 0 is zero
2047:             shp = list(c2.shape)
2048:             shp[axis] = 1
2049:             c2 = np.zeros(shp, dtype=c2.dtype)
2050: 
2051:         # multiply by the correct rising factorials
2052:         factor = spec.poch(np.arange(c2.shape[axis], 0, -1), nu)
2053:         sl = [None]*c2.ndim
2054:         sl[axis] = slice(None)
2055:         c2 *= factor[sl]
2056: 
2057:         self.c = c2
2058: 
2059:     def _antiderivative_inplace(self, nu, axis):
2060:         '''
2061:         Compute 1D antiderivative along a selected dimension
2062:         May result to non-contiguous c array.
2063:         '''
2064:         if nu <= 0:
2065:             return self._derivative_inplace(-nu, axis)
2066: 
2067:         ndim = len(self.x)
2068:         axis = axis % ndim
2069: 
2070:         perm = list(range(ndim))
2071:         perm[0], perm[axis] = perm[axis], perm[0]
2072:         perm = perm + list(range(ndim, self.c.ndim))
2073: 
2074:         c = self.c.transpose(perm)
2075: 
2076:         c2 = np.zeros((c.shape[0] + nu,) + c.shape[1:],
2077:                      dtype=c.dtype)
2078:         c2[:-nu] = c
2079: 
2080:         # divide by the correct rising factorials
2081:         factor = spec.poch(np.arange(c.shape[0], 0, -1), nu)
2082:         c2[:-nu] /= factor[(slice(None),) + (None,)*(c.ndim-1)]
2083: 
2084:         # fix continuity of added degrees of freedom
2085:         perm2 = list(range(c2.ndim))
2086:         perm2[1], perm2[ndim+axis] = perm2[ndim+axis], perm2[1]
2087: 
2088:         c2 = c2.transpose(perm2)
2089:         c2 = c2.copy()
2090:         _ppoly.fix_continuity(c2.reshape(c2.shape[0], c2.shape[1], -1),
2091:                               self.x[axis], nu-1)
2092: 
2093:         c2 = c2.transpose(perm2)
2094:         c2 = c2.transpose(perm)
2095: 
2096:         # Done
2097:         self.c = c2
2098: 
2099:     def derivative(self, nu):
2100:         '''
2101:         Construct a new piecewise polynomial representing the derivative.
2102: 
2103:         Parameters
2104:         ----------
2105:         nu : ndim-tuple of int
2106:             Order of derivatives to evaluate for each dimension.
2107:             If negative, the antiderivative is returned.
2108: 
2109:         Returns
2110:         -------
2111:         pp : NdPPoly
2112:             Piecewise polynomial of orders (k[0] - nu[0], ..., k[n] - nu[n])
2113:             representing the derivative of this polynomial.
2114: 
2115:         Notes
2116:         -----
2117:         Derivatives are evaluated piecewise for each polynomial
2118:         segment, even if the polynomial is not differentiable at the
2119:         breakpoints. The polynomial intervals in each dimension are
2120:         considered half-open, ``[a, b)``, except for the last interval
2121:         which is closed ``[a, b]``.
2122: 
2123:         '''
2124:         p = self.construct_fast(self.c.copy(), self.x, self.extrapolate)
2125: 
2126:         for axis, n in enumerate(nu):
2127:             p._derivative_inplace(n, axis)
2128: 
2129:         p._ensure_c_contiguous()
2130:         return p
2131: 
2132:     def antiderivative(self, nu):
2133:         '''
2134:         Construct a new piecewise polynomial representing the antiderivative.
2135: 
2136:         Antiderivative is also the indefinite integral of the function,
2137:         and derivative is its inverse operation.
2138: 
2139:         Parameters
2140:         ----------
2141:         nu : ndim-tuple of int
2142:             Order of derivatives to evaluate for each dimension.
2143:             If negative, the derivative is returned.
2144: 
2145:         Returns
2146:         -------
2147:         pp : PPoly
2148:             Piecewise polynomial of order k2 = k + n representing
2149:             the antiderivative of this polynomial.
2150: 
2151:         Notes
2152:         -----
2153:         The antiderivative returned by this function is continuous and
2154:         continuously differentiable to order n-1, up to floating point
2155:         rounding error.
2156: 
2157:         '''
2158:         p = self.construct_fast(self.c.copy(), self.x, self.extrapolate)
2159: 
2160:         for axis, n in enumerate(nu):
2161:             p._antiderivative_inplace(n, axis)
2162: 
2163:         p._ensure_c_contiguous()
2164:         return p
2165: 
2166:     def integrate_1d(self, a, b, axis, extrapolate=None):
2167:         r'''
2168:         Compute NdPPoly representation for one dimensional definite integral
2169: 
2170:         The result is a piecewise polynomial representing the integral:
2171: 
2172:         .. math::
2173: 
2174:            p(y, z, ...) = \int_a^b dx\, p(x, y, z, ...)
2175: 
2176:         where the dimension integrated over is specified with the
2177:         `axis` parameter.
2178: 
2179:         Parameters
2180:         ----------
2181:         a, b : float
2182:             Lower and upper bound for integration.
2183:         axis : int
2184:             Dimension over which to compute the 1D integrals
2185:         extrapolate : bool, optional
2186:             Whether to extrapolate to out-of-bounds points based on first
2187:             and last intervals, or to return NaNs.
2188: 
2189:         Returns
2190:         -------
2191:         ig : NdPPoly or array-like
2192:             Definite integral of the piecewise polynomial over [a, b].
2193:             If the polynomial was 1-dimensional, an array is returned,
2194:             otherwise, an NdPPoly object.
2195: 
2196:         '''
2197:         if extrapolate is None:
2198:             extrapolate = self.extrapolate
2199:         else:
2200:             extrapolate = bool(extrapolate)
2201: 
2202:         ndim = len(self.x)
2203:         axis = int(axis) % ndim
2204: 
2205:         # reuse 1D integration routines
2206:         c = self.c
2207:         swap = list(range(c.ndim))
2208:         swap.insert(0, swap[axis])
2209:         del swap[axis + 1]
2210:         swap.insert(1, swap[ndim + axis])
2211:         del swap[ndim + axis + 1]
2212: 
2213:         c = c.transpose(swap)
2214:         p = PPoly.construct_fast(c.reshape(c.shape[0], c.shape[1], -1),
2215:                                  self.x[axis],
2216:                                  extrapolate=extrapolate)
2217:         out = p.integrate(a, b, extrapolate=extrapolate)
2218: 
2219:         # Construct result
2220:         if ndim == 1:
2221:             return out.reshape(c.shape[2:])
2222:         else:
2223:             c = out.reshape(c.shape[2:])
2224:             x = self.x[:axis] + self.x[axis+1:]
2225:             return self.construct_fast(c, x, extrapolate=extrapolate)
2226: 
2227:     def integrate(self, ranges, extrapolate=None):
2228:         '''
2229:         Compute a definite integral over a piecewise polynomial.
2230: 
2231:         Parameters
2232:         ----------
2233:         ranges : ndim-tuple of 2-tuples float
2234:             Sequence of lower and upper bounds for each dimension,
2235:             ``[(a[0], b[0]), ..., (a[ndim-1], b[ndim-1])]``
2236:         extrapolate : bool, optional
2237:             Whether to extrapolate to out-of-bounds points based on first
2238:             and last intervals, or to return NaNs.
2239: 
2240:         Returns
2241:         -------
2242:         ig : array_like
2243:             Definite integral of the piecewise polynomial over
2244:             [a[0], b[0]] x ... x [a[ndim-1], b[ndim-1]]
2245: 
2246:         '''
2247: 
2248:         ndim = len(self.x)
2249: 
2250:         if extrapolate is None:
2251:             extrapolate = self.extrapolate
2252:         else:
2253:             extrapolate = bool(extrapolate)
2254: 
2255:         if not hasattr(ranges, '__len__') or len(ranges) != ndim:
2256:             raise ValueError("Range not a sequence of correct length")
2257: 
2258:         self._ensure_c_contiguous()
2259: 
2260:         # Reuse 1D integration routine
2261:         c = self.c
2262:         for n, (a, b) in enumerate(ranges):
2263:             swap = list(range(c.ndim))
2264:             swap.insert(1, swap[ndim - n])
2265:             del swap[ndim - n + 1]
2266: 
2267:             c = c.transpose(swap)
2268: 
2269:             p = PPoly.construct_fast(c, self.x[n], extrapolate=extrapolate)
2270:             out = p.integrate(a, b, extrapolate=extrapolate)
2271:             c = out.reshape(c.shape[2:])
2272: 
2273:         return c
2274: 
2275: 
2276: class RegularGridInterpolator(object):
2277:     '''
2278:     Interpolation on a regular grid in arbitrary dimensions
2279: 
2280:     The data must be defined on a regular grid; the grid spacing however may be
2281:     uneven.  Linear and nearest-neighbour interpolation are supported. After
2282:     setting up the interpolator object, the interpolation method (*linear* or
2283:     *nearest*) may be chosen at each evaluation.
2284: 
2285:     Parameters
2286:     ----------
2287:     points : tuple of ndarray of float, with shapes (m1, ), ..., (mn, )
2288:         The points defining the regular grid in n dimensions.
2289: 
2290:     values : array_like, shape (m1, ..., mn, ...)
2291:         The data on the regular grid in n dimensions.
2292: 
2293:     method : str, optional
2294:         The method of interpolation to perform. Supported are "linear" and
2295:         "nearest". This parameter will become the default for the object's
2296:         ``__call__`` method. Default is "linear".
2297: 
2298:     bounds_error : bool, optional
2299:         If True, when interpolated values are requested outside of the
2300:         domain of the input data, a ValueError is raised.
2301:         If False, then `fill_value` is used.
2302: 
2303:     fill_value : number, optional
2304:         If provided, the value to use for points outside of the
2305:         interpolation domain. If None, values outside
2306:         the domain are extrapolated.
2307: 
2308:     Methods
2309:     -------
2310:     __call__
2311: 
2312:     Notes
2313:     -----
2314:     Contrary to LinearNDInterpolator and NearestNDInterpolator, this class
2315:     avoids expensive triangulation of the input data by taking advantage of the
2316:     regular grid structure.
2317: 
2318:     If any of `points` have a dimension of size 1, linear interpolation will
2319:     return an array of `nan` values. Nearest-neighbor interpolation will work
2320:     as usual in this case.
2321: 
2322:     .. versionadded:: 0.14
2323: 
2324:     Examples
2325:     --------
2326:     Evaluate a simple example function on the points of a 3D grid:
2327: 
2328:     >>> from scipy.interpolate import RegularGridInterpolator
2329:     >>> def f(x, y, z):
2330:     ...     return 2 * x**3 + 3 * y**2 - z
2331:     >>> x = np.linspace(1, 4, 11)
2332:     >>> y = np.linspace(4, 7, 22)
2333:     >>> z = np.linspace(7, 9, 33)
2334:     >>> data = f(*np.meshgrid(x, y, z, indexing='ij', sparse=True))
2335: 
2336:     ``data`` is now a 3D array with ``data[i,j,k] = f(x[i], y[j], z[k])``.
2337:     Next, define an interpolating function from this data:
2338: 
2339:     >>> my_interpolating_function = RegularGridInterpolator((x, y, z), data)
2340: 
2341:     Evaluate the interpolating function at the two points
2342:     ``(x,y,z) = (2.1, 6.2, 8.3)`` and ``(3.3, 5.2, 7.1)``:
2343: 
2344:     >>> pts = np.array([[2.1, 6.2, 8.3], [3.3, 5.2, 7.1]])
2345:     >>> my_interpolating_function(pts)
2346:     array([ 125.80469388,  146.30069388])
2347: 
2348:     which is indeed a close approximation to
2349:     ``[f(2.1, 6.2, 8.3), f(3.3, 5.2, 7.1)]``.
2350: 
2351:     See also
2352:     --------
2353:     NearestNDInterpolator : Nearest neighbour interpolation on unstructured
2354:                             data in N dimensions
2355: 
2356:     LinearNDInterpolator : Piecewise linear interpolant on unstructured data
2357:                            in N dimensions
2358: 
2359:     References
2360:     ----------
2361:     .. [1] Python package *regulargrid* by Johannes Buchner, see
2362:            https://pypi.python.org/pypi/regulargrid/
2363:     .. [2] Trilinear interpolation. (2013, January 17). In Wikipedia, The Free
2364:            Encyclopedia. Retrieved 27 Feb 2013 01:28.
2365:            http://en.wikipedia.org/w/index.php?title=Trilinear_interpolation&oldid=533448871
2366:     .. [3] Weiser, Alan, and Sergio E. Zarantonello. "A note on piecewise linear
2367:            and multilinear table interpolation in many dimensions." MATH.
2368:            COMPUT. 50.181 (1988): 189-196.
2369:            http://www.ams.org/journals/mcom/1988-50-181/S0025-5718-1988-0917826-0/S0025-5718-1988-0917826-0.pdf
2370: 
2371:     '''
2372:     # this class is based on code originally programmed by Johannes Buchner,
2373:     # see https://github.com/JohannesBuchner/regulargrid
2374: 
2375:     def __init__(self, points, values, method="linear", bounds_error=True,
2376:                  fill_value=np.nan):
2377:         if method not in ["linear", "nearest"]:
2378:             raise ValueError("Method '%s' is not defined" % method)
2379:         self.method = method
2380:         self.bounds_error = bounds_error
2381: 
2382:         if not hasattr(values, 'ndim'):
2383:             # allow reasonable duck-typed values
2384:             values = np.asarray(values)
2385: 
2386:         if len(points) > values.ndim:
2387:             raise ValueError("There are %d point arrays, but values has %d "
2388:                              "dimensions" % (len(points), values.ndim))
2389: 
2390:         if hasattr(values, 'dtype') and hasattr(values, 'astype'):
2391:             if not np.issubdtype(values.dtype, np.inexact):
2392:                 values = values.astype(float)
2393: 
2394:         self.fill_value = fill_value
2395:         if fill_value is not None:
2396:             fill_value_dtype = np.asarray(fill_value).dtype
2397:             if (hasattr(values, 'dtype') and not
2398:                     np.can_cast(fill_value_dtype, values.dtype,
2399:                                 casting='same_kind')):
2400:                 raise ValueError("fill_value must be either 'None' or "
2401:                                  "of a type compatible with values")
2402: 
2403:         for i, p in enumerate(points):
2404:             if not np.all(np.diff(p) > 0.):
2405:                 raise ValueError("The points in dimension %d must be strictly "
2406:                                  "ascending" % i)
2407:             if not np.asarray(p).ndim == 1:
2408:                 raise ValueError("The points in dimension %d must be "
2409:                                  "1-dimensional" % i)
2410:             if not values.shape[i] == len(p):
2411:                 raise ValueError("There are %d points and %d values in "
2412:                                  "dimension %d" % (len(p), values.shape[i], i))
2413:         self.grid = tuple([np.asarray(p) for p in points])
2414:         self.values = values
2415: 
2416:     def __call__(self, xi, method=None):
2417:         '''
2418:         Interpolation at coordinates
2419: 
2420:         Parameters
2421:         ----------
2422:         xi : ndarray of shape (..., ndim)
2423:             The coordinates to sample the gridded data at
2424: 
2425:         method : str
2426:             The method of interpolation to perform. Supported are "linear" and
2427:             "nearest".
2428: 
2429:         '''
2430:         method = self.method if method is None else method
2431:         if method not in ["linear", "nearest"]:
2432:             raise ValueError("Method '%s' is not defined" % method)
2433: 
2434:         ndim = len(self.grid)
2435:         xi = _ndim_coords_from_arrays(xi, ndim=ndim)
2436:         if xi.shape[-1] != len(self.grid):
2437:             raise ValueError("The requested sample points xi have dimension "
2438:                              "%d, but this RegularGridInterpolator has "
2439:                              "dimension %d" % (xi.shape[1], ndim))
2440: 
2441:         xi_shape = xi.shape
2442:         xi = xi.reshape(-1, xi_shape[-1])
2443: 
2444:         if self.bounds_error:
2445:             for i, p in enumerate(xi.T):
2446:                 if not np.logical_and(np.all(self.grid[i][0] <= p),
2447:                                       np.all(p <= self.grid[i][-1])):
2448:                     raise ValueError("One of the requested xi is out of bounds "
2449:                                      "in dimension %d" % i)
2450: 
2451:         indices, norm_distances, out_of_bounds = self._find_indices(xi.T)
2452:         if method == "linear":
2453:             result = self._evaluate_linear(indices,
2454:                                            norm_distances,
2455:                                            out_of_bounds)
2456:         elif method == "nearest":
2457:             result = self._evaluate_nearest(indices,
2458:                                             norm_distances,
2459:                                             out_of_bounds)
2460:         if not self.bounds_error and self.fill_value is not None:
2461:             result[out_of_bounds] = self.fill_value
2462: 
2463:         return result.reshape(xi_shape[:-1] + self.values.shape[ndim:])
2464: 
2465:     def _evaluate_linear(self, indices, norm_distances, out_of_bounds):
2466:         # slice for broadcasting over trailing dimensions in self.values
2467:         vslice = (slice(None),) + (None,)*(self.values.ndim - len(indices))
2468: 
2469:         # find relevant values
2470:         # each i and i+1 represents a edge
2471:         edges = itertools.product(*[[i, i + 1] for i in indices])
2472:         values = 0.
2473:         for edge_indices in edges:
2474:             weight = 1.
2475:             for ei, i, yi in zip(edge_indices, indices, norm_distances):
2476:                 weight *= np.where(ei == i, 1 - yi, yi)
2477:             values += np.asarray(self.values[edge_indices]) * weight[vslice]
2478:         return values
2479: 
2480:     def _evaluate_nearest(self, indices, norm_distances, out_of_bounds):
2481:         idx_res = []
2482:         for i, yi in zip(indices, norm_distances):
2483:             idx_res.append(np.where(yi <= .5, i, i + 1))
2484:         return self.values[idx_res]
2485: 
2486:     def _find_indices(self, xi):
2487:         # find relevant edges between which xi are situated
2488:         indices = []
2489:         # compute distance to lower edge in unity units
2490:         norm_distances = []
2491:         # check for out of bounds xi
2492:         out_of_bounds = np.zeros((xi.shape[1]), dtype=bool)
2493:         # iterate through dimensions
2494:         for x, grid in zip(xi, self.grid):
2495:             i = np.searchsorted(grid, x) - 1
2496:             i[i < 0] = 0
2497:             i[i > grid.size - 2] = grid.size - 2
2498:             indices.append(i)
2499:             norm_distances.append((x - grid[i]) /
2500:                                   (grid[i + 1] - grid[i]))
2501:             if not self.bounds_error:
2502:                 out_of_bounds += x < grid[0]
2503:                 out_of_bounds += x > grid[-1]
2504:         return indices, norm_distances, out_of_bounds
2505: 
2506: 
2507: def interpn(points, values, xi, method="linear", bounds_error=True,
2508:             fill_value=np.nan):
2509:     '''
2510:     Multidimensional interpolation on regular grids.
2511: 
2512:     Parameters
2513:     ----------
2514:     points : tuple of ndarray of float, with shapes (m1, ), ..., (mn, )
2515:         The points defining the regular grid in n dimensions.
2516: 
2517:     values : array_like, shape (m1, ..., mn, ...)
2518:         The data on the regular grid in n dimensions.
2519: 
2520:     xi : ndarray of shape (..., ndim)
2521:         The coordinates to sample the gridded data at
2522: 
2523:     method : str, optional
2524:         The method of interpolation to perform. Supported are "linear" and
2525:         "nearest", and "splinef2d". "splinef2d" is only supported for
2526:         2-dimensional data.
2527: 
2528:     bounds_error : bool, optional
2529:         If True, when interpolated values are requested outside of the
2530:         domain of the input data, a ValueError is raised.
2531:         If False, then `fill_value` is used.
2532: 
2533:     fill_value : number, optional
2534:         If provided, the value to use for points outside of the
2535:         interpolation domain. If None, values outside
2536:         the domain are extrapolated.  Extrapolation is not supported by method
2537:         "splinef2d".
2538: 
2539:     Returns
2540:     -------
2541:     values_x : ndarray, shape xi.shape[:-1] + values.shape[ndim:]
2542:         Interpolated values at input coordinates.
2543: 
2544:     Notes
2545:     -----
2546: 
2547:     .. versionadded:: 0.14
2548: 
2549:     See also
2550:     --------
2551:     NearestNDInterpolator : Nearest neighbour interpolation on unstructured
2552:                             data in N dimensions
2553: 
2554:     LinearNDInterpolator : Piecewise linear interpolant on unstructured data
2555:                            in N dimensions
2556: 
2557:     RegularGridInterpolator : Linear and nearest-neighbor Interpolation on a
2558:                               regular grid in arbitrary dimensions
2559: 
2560:     RectBivariateSpline : Bivariate spline approximation over a rectangular mesh
2561: 
2562:     '''
2563:     # sanity check 'method' kwarg
2564:     if method not in ["linear", "nearest", "splinef2d"]:
2565:         raise ValueError("interpn only understands the methods 'linear', "
2566:                          "'nearest', and 'splinef2d'. You provided %s." %
2567:                          method)
2568: 
2569:     if not hasattr(values, 'ndim'):
2570:         values = np.asarray(values)
2571: 
2572:     ndim = values.ndim
2573:     if ndim > 2 and method == "splinef2d":
2574:         raise ValueError("The method spline2fd can only be used for "
2575:                          "2-dimensional input data")
2576:     if not bounds_error and fill_value is None and method == "splinef2d":
2577:         raise ValueError("The method spline2fd does not support extrapolation.")
2578: 
2579:     # sanity check consistency of input dimensions
2580:     if len(points) > ndim:
2581:         raise ValueError("There are %d point arrays, but values has %d "
2582:                          "dimensions" % (len(points), ndim))
2583:     if len(points) != ndim and method == 'splinef2d':
2584:         raise ValueError("The method spline2fd can only be used for "
2585:                          "scalar data with one point per coordinate")
2586: 
2587:     # sanity check input grid
2588:     for i, p in enumerate(points):
2589:         if not np.all(np.diff(p) > 0.):
2590:             raise ValueError("The points in dimension %d must be strictly "
2591:                              "ascending" % i)
2592:         if not np.asarray(p).ndim == 1:
2593:             raise ValueError("The points in dimension %d must be "
2594:                              "1-dimensional" % i)
2595:         if not values.shape[i] == len(p):
2596:             raise ValueError("There are %d points and %d values in "
2597:                              "dimension %d" % (len(p), values.shape[i], i))
2598:     grid = tuple([np.asarray(p) for p in points])
2599: 
2600:     # sanity check requested xi
2601:     xi = _ndim_coords_from_arrays(xi, ndim=len(grid))
2602:     if xi.shape[-1] != len(grid):
2603:         raise ValueError("The requested sample points xi have dimension "
2604:                          "%d, but this RegularGridInterpolator has "
2605:                          "dimension %d" % (xi.shape[1], len(grid)))
2606: 
2607:     for i, p in enumerate(xi.T):
2608:         if bounds_error and not np.logical_and(np.all(grid[i][0] <= p),
2609:                                                np.all(p <= grid[i][-1])):
2610:             raise ValueError("One of the requested xi is out of bounds "
2611:                              "in dimension %d" % i)
2612: 
2613:     # perform interpolation
2614:     if method == "linear":
2615:         interp = RegularGridInterpolator(points, values, method="linear",
2616:                                          bounds_error=bounds_error,
2617:                                          fill_value=fill_value)
2618:         return interp(xi)
2619:     elif method == "nearest":
2620:         interp = RegularGridInterpolator(points, values, method="nearest",
2621:                                          bounds_error=bounds_error,
2622:                                          fill_value=fill_value)
2623:         return interp(xi)
2624:     elif method == "splinef2d":
2625:         xi_shape = xi.shape
2626:         xi = xi.reshape(-1, xi.shape[-1])
2627: 
2628:         # RectBivariateSpline doesn't support fill_value; we need to wrap here
2629:         idx_valid = np.all((grid[0][0] <= xi[:, 0], xi[:, 0] <= grid[0][-1],
2630:                             grid[1][0] <= xi[:, 1], xi[:, 1] <= grid[1][-1]),
2631:                            axis=0)
2632:         result = np.empty_like(xi[:, 0])
2633: 
2634:         # make a copy of values for RectBivariateSpline
2635:         interp = RectBivariateSpline(points[0], points[1], values[:])
2636:         result[idx_valid] = interp.ev(xi[idx_valid, 0], xi[idx_valid, 1])
2637:         result[np.logical_not(idx_valid)] = fill_value
2638: 
2639:         return result.reshape(xi_shape[:-1])
2640: 
2641: 
2642: # backward compatibility wrapper
2643: class _ppform(PPoly):
2644:     '''
2645:     Deprecated piecewise polynomial class.
2646: 
2647:     New code should use the `PPoly` class instead.
2648: 
2649:     '''
2650: 
2651:     def __init__(self, coeffs, breaks, fill=0.0, sort=False):
2652:         warnings.warn("_ppform is deprecated -- use PPoly instead",
2653:                       category=DeprecationWarning)
2654: 
2655:         if sort:
2656:             breaks = np.sort(breaks)
2657:         else:
2658:             breaks = np.asarray(breaks)
2659: 
2660:         PPoly.__init__(self, coeffs, breaks)
2661: 
2662:         self.coeffs = self.c
2663:         self.breaks = self.x
2664:         self.K = self.coeffs.shape[0]
2665:         self.fill = fill
2666:         self.a = self.breaks[0]
2667:         self.b = self.breaks[-1]
2668: 
2669:     def __call__(self, x):
2670:         return PPoly.__call__(self, x, 0, False)
2671: 
2672:     def _evaluate(self, x, nu, extrapolate, out):
2673:         PPoly._evaluate(self, x, nu, extrapolate, out)
2674:         out[~((x >= self.a) & (x <= self.b))] = self.fill
2675:         return out
2676: 
2677:     @classmethod
2678:     def fromspline(cls, xk, cvals, order, fill=0.0):
2679:         # Note: this spline representation is incompatible with FITPACK
2680:         N = len(xk)-1
2681:         sivals = np.empty((order+1, N), dtype=float)
2682:         for m in xrange(order, -1, -1):
2683:             fact = spec.gamma(m+1)
2684:             res = _fitpack._bspleval(xk[:-1], xk, cvals, order, m)
2685:             res /= fact
2686:             sivals[order-m, :] = res
2687:         return cls(sivals, xk, fill=fill)
2688: 
2689: 
2690: # The 3 private functions below can be called by splmake().
2691: 
2692: 
2693: def _dot0(a, b):
2694:     '''Similar to numpy.dot, but sum over last axis of a and 1st axis of b'''
2695:     if b.ndim <= 2:
2696:         return dot(a, b)
2697:     else:
2698:         axes = list(range(b.ndim))
2699:         axes.insert(-1, 0)
2700:         axes.pop(0)
2701:         return dot(a, b.transpose(axes))
2702: 
2703: 
2704: def _find_smoothest(xk, yk, order, conds=None, B=None):
2705:     # construct Bmatrix, and Jmatrix
2706:     # e = J*c
2707:     # minimize norm(e,2) given B*c=yk
2708:     # if desired B can be given
2709:     # conds is ignored
2710:     N = len(xk)-1
2711:     K = order
2712:     if B is None:
2713:         B = _fitpack._bsplmat(order, xk)
2714:     J = _fitpack._bspldismat(order, xk)
2715:     u, s, vh = scipy.linalg.svd(B)
2716:     ind = K-1
2717:     V2 = vh[-ind:,:].T
2718:     V1 = vh[:-ind,:].T
2719:     A = dot(J.T,J)
2720:     tmp = dot(V2.T,A)
2721:     Q = dot(tmp,V2)
2722:     p = scipy.linalg.solve(Q, tmp)
2723:     tmp = dot(V2,p)
2724:     tmp = np.eye(N+K) - tmp
2725:     tmp = dot(tmp,V1)
2726:     tmp = dot(tmp,np.diag(1.0/s))
2727:     tmp = dot(tmp,u.T)
2728:     return _dot0(tmp, yk)
2729: 
2730: 
2731: # conds is a tuple of an array and a vector
2732: #  giving the left-hand and the right-hand side
2733: #  of the additional equations to add to B
2734: 
2735: 
2736: def _find_user(xk, yk, order, conds, B):
2737:     lh = conds[0]
2738:     rh = conds[1]
2739:     B = np.concatenate((B, lh), axis=0)
2740:     w = np.concatenate((yk, rh), axis=0)
2741:     M, N = B.shape
2742:     if (M > N):
2743:         raise ValueError("over-specification of conditions")
2744:     elif (M < N):
2745:         return _find_smoothest(xk, yk, order, None, B)
2746:     else:
2747:         return scipy.linalg.solve(B, w)
2748: 
2749: 
2750: # Remove the 3 private functions above as well when removing splmake
2751: @np.deprecate(message="splmake is deprecated in scipy 0.19.0, "
2752:                       "use make_interp_spline instead.")
2753: def splmake(xk, yk, order=3, kind='smoothest', conds=None):
2754:     '''
2755:     Return a representation of a spline given data-points at internal knots
2756: 
2757:     Parameters
2758:     ----------
2759:     xk : array_like
2760:         The input array of x values of rank 1
2761:     yk : array_like
2762:         The input array of y values of rank N. `yk` can be an N-d array to
2763:         represent more than one curve, through the same `xk` points. The first
2764:         dimension is assumed to be the interpolating dimension and is the same
2765:         length of `xk`.
2766:     order : int, optional
2767:         Order of the spline
2768:     kind : str, optional
2769:         Can be 'smoothest', 'not_a_knot', 'fixed', 'clamped', 'natural',
2770:         'periodic', 'symmetric', 'user', 'mixed' and it is ignored if order < 2
2771:     conds : optional
2772:         Conds
2773: 
2774:     Returns
2775:     -------
2776:     splmake : tuple
2777:         Return a (`xk`, `cvals`, `k`) representation of a spline given
2778:         data-points where the (internal) knots are at the data-points.
2779: 
2780:     '''
2781:     yk = np.asanyarray(yk)
2782: 
2783:     order = int(order)
2784:     if order < 0:
2785:         raise ValueError("order must not be negative")
2786:     if order == 0:
2787:         return xk, yk[:-1], order
2788:     elif order == 1:
2789:         return xk, yk, order
2790: 
2791:     try:
2792:         func = eval('_find_%s' % kind)
2793:     except:
2794:         raise NotImplementedError
2795: 
2796:     # the constraint matrix
2797:     B = _fitpack._bsplmat(order, xk)
2798:     coefs = func(xk, yk, order, conds, B)
2799:     return xk, coefs, order
2800: 
2801: 
2802: @np.deprecate(message="spleval is deprecated in scipy 0.19.0, "
2803:         "use BSpline instead.")
2804: def spleval(xck, xnew, deriv=0):
2805:     '''
2806:     Evaluate a fixed spline represented by the given tuple at the new x-values
2807: 
2808:     The `xj` values are the interior knot points.  The approximation
2809:     region is `xj[0]` to `xj[-1]`.  If N+1 is the length of `xj`, then `cvals`
2810:     should have length N+k where `k` is the order of the spline.
2811: 
2812:     Parameters
2813:     ----------
2814:     (xj, cvals, k) : tuple
2815:         Parameters that define the fixed spline
2816:     xj : array_like
2817:         Interior knot points
2818:     cvals : array_like
2819:         Curvature
2820:     k : int
2821:         Order of the spline
2822:     xnew : array_like
2823:         Locations to calculate spline
2824:     deriv : int
2825:         Deriv
2826: 
2827:     Returns
2828:     -------
2829:     spleval : ndarray
2830:         If `cvals` represents more than one curve (`cvals.ndim` > 1) and/or
2831:         `xnew` is N-d, then the result is `xnew.shape` + `cvals.shape[1:]`
2832:         providing the interpolation of multiple curves.
2833: 
2834:     Notes
2835:     -----
2836:     Internally, an additional `k`-1 knot points are added on either side of
2837:     the spline.
2838: 
2839:     '''
2840:     (xj, cvals, k) = xck
2841:     oldshape = np.shape(xnew)
2842:     xx = np.ravel(xnew)
2843:     sh = cvals.shape[1:]
2844:     res = np.empty(xx.shape + sh, dtype=cvals.dtype)
2845:     for index in np.ndindex(*sh):
2846:         sl = (slice(None),) + index
2847:         if issubclass(cvals.dtype.type, np.complexfloating):
2848:             res[sl].real = _fitpack._bspleval(xx,xj, cvals.real[sl], k, deriv)
2849:             res[sl].imag = _fitpack._bspleval(xx,xj, cvals.imag[sl], k, deriv)
2850:         else:
2851:             res[sl] = _fitpack._bspleval(xx, xj, cvals[sl], k, deriv)
2852:     res.shape = oldshape + sh
2853:     return res
2854: 
2855: 
2856: # When `spltopp` gets removed, also remove the _ppform class.
2857: @np.deprecate(message="spltopp is deprecated in scipy 0.19.0, "
2858:                       "use PPoly.from_spline instead.")
2859: def spltopp(xk, cvals, k):
2860:     '''Return a piece-wise polynomial object from a fixed-spline tuple.'''
2861:     return _ppform.fromspline(xk, cvals, k)
2862: 
2863: 
2864: @np.deprecate(message="spline is deprecated in scipy 0.19.0, "
2865:                       "use Bspline class instead.")
2866: def spline(xk, yk, xnew, order=3, kind='smoothest', conds=None):
2867:     '''
2868:     Interpolate a curve at new points using a spline fit
2869: 
2870:     Parameters
2871:     ----------
2872:     xk, yk : array_like
2873:         The x and y values that define the curve.
2874:     xnew : array_like
2875:         The x values where spline should estimate the y values.
2876:     order : int
2877:         Default is 3.
2878:     kind : string
2879:         One of {'smoothest'}
2880:     conds : Don't know
2881:         Don't know
2882: 
2883:     Returns
2884:     -------
2885:     spline : ndarray
2886:         An array of y values; the spline evaluated at the positions `xnew`.
2887: 
2888:     '''
2889:     return spleval(splmake(xk, yk, order=order, kind=kind, conds=conds), xnew)
2890: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_63656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2, (-1)), 'str', ' Classes for interpolating values.\n')

# Assigning a List to a Name (line 6):

# Assigning a List to a Name (line 6):
__all__ = ['interp1d', 'interp2d', 'spline', 'spleval', 'splmake', 'spltopp', 'lagrange', 'PPoly', 'BPoly', 'NdPPoly', 'RegularGridInterpolator', 'interpn']
module_type_store.set_exportable_members(['interp1d', 'interp2d', 'spline', 'spleval', 'splmake', 'spltopp', 'lagrange', 'PPoly', 'BPoly', 'NdPPoly', 'RegularGridInterpolator', 'interpn'])

# Obtaining an instance of the builtin type 'list' (line 6)
list_63657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 6)
# Adding element type (line 6)
str_63658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6, 11), 'str', 'interp1d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63658)
# Adding element type (line 6)
str_63659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6, 23), 'str', 'interp2d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63659)
# Adding element type (line 6)
str_63660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6, 35), 'str', 'spline')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63660)
# Adding element type (line 6)
str_63661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6, 45), 'str', 'spleval')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63661)
# Adding element type (line 6)
str_63662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6, 56), 'str', 'splmake')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63662)
# Adding element type (line 6)
str_63663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 6, 67), 'str', 'spltopp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63663)
# Adding element type (line 6)
str_63664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7, 11), 'str', 'lagrange')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63664)
# Adding element type (line 6)
str_63665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7, 23), 'str', 'PPoly')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63665)
# Adding element type (line 6)
str_63666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7, 32), 'str', 'BPoly')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63666)
# Adding element type (line 6)
str_63667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 7, 41), 'str', 'NdPPoly')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63667)
# Adding element type (line 6)
str_63668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 8, 11), 'str', 'RegularGridInterpolator')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63668)
# Adding element type (line 6)
str_63669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 8, 38), 'str', 'interpn')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 6, 10), list_63657, str_63669)

# Assigning a type to the variable '__all__' (line 6)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 6, 0), '__all__', list_63657)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'import itertools' statement (line 11)
import itertools

import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'itertools', itertools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import warnings' statement (line 12)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'import functools' statement (line 13)
import functools

import_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'functools', functools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import operator' statement (line 14)
import operator

import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'operator', operator, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'import numpy' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63670 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy')

if (type(import_63670) is not StypyTypeError):

    if (import_63670 != 'pyd_module'):
        __import__(import_63670)
        sys_modules_63671 = sys.modules[import_63670]
        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'np', sys_modules_63671.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy', import_63670)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'from numpy import array, transpose, searchsorted, atleast_1d, atleast_2d, dot, ravel, poly1d, asarray, intp' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63672 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'numpy')

if (type(import_63672) is not StypyTypeError):

    if (import_63672 != 'pyd_module'):
        __import__(import_63672)
        sys_modules_63673 = sys.modules[import_63672]
        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'numpy', sys_modules_63673.module_type_store, module_type_store, ['array', 'transpose', 'searchsorted', 'atleast_1d', 'atleast_2d', 'dot', 'ravel', 'poly1d', 'asarray', 'intp'])
        nest_module(stypy.reporting.localization.Localization(__file__, 17, 0), __file__, sys_modules_63673, sys_modules_63673.module_type_store, module_type_store)
    else:
        from numpy import array, transpose, searchsorted, atleast_1d, atleast_2d, dot, ravel, poly1d, asarray, intp

        import_from_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'numpy', None, module_type_store, ['array', 'transpose', 'searchsorted', 'atleast_1d', 'atleast_2d', 'dot', 'ravel', 'poly1d', 'asarray', 'intp'], [array, transpose, searchsorted, atleast_1d, atleast_2d, dot, ravel, poly1d, asarray, intp])

else:
    # Assigning a type to the variable 'numpy' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'numpy', import_63672)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'import scipy.linalg' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63674 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.linalg')

if (type(import_63674) is not StypyTypeError):

    if (import_63674 != 'pyd_module'):
        __import__(import_63674)
        sys_modules_63675 = sys.modules[import_63674]
        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.linalg', sys_modules_63675.module_type_store, module_type_store)
    else:
        import scipy.linalg

        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.linalg', scipy.linalg, module_type_store)

else:
    # Assigning a type to the variable 'scipy.linalg' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy.linalg', import_63674)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'import scipy.special' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63676 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'scipy.special')

if (type(import_63676) is not StypyTypeError):

    if (import_63676 != 'pyd_module'):
        __import__(import_63676)
        sys_modules_63677 = sys.modules[import_63676]
        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'spec', sys_modules_63677.module_type_store, module_type_store)
    else:
        import scipy.special as spec

        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'spec', scipy.special, module_type_store)

else:
    # Assigning a type to the variable 'scipy.special' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'scipy.special', import_63676)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'from scipy.special import comb' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63678 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.special')

if (type(import_63678) is not StypyTypeError):

    if (import_63678 != 'pyd_module'):
        __import__(import_63678)
        sys_modules_63679 = sys.modules[import_63678]
        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.special', sys_modules_63679.module_type_store, module_type_store, ['comb'])
        nest_module(stypy.reporting.localization.Localization(__file__, 22, 0), __file__, sys_modules_63679, sys_modules_63679.module_type_store, module_type_store)
    else:
        from scipy.special import comb

        import_from_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.special', None, module_type_store, ['comb'], [comb])

else:
    # Assigning a type to the variable 'scipy.special' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'scipy.special', import_63678)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'from scipy._lib.six import xrange, integer_types, string_types' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63680 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'scipy._lib.six')

if (type(import_63680) is not StypyTypeError):

    if (import_63680 != 'pyd_module'):
        __import__(import_63680)
        sys_modules_63681 = sys.modules[import_63680]
        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'scipy._lib.six', sys_modules_63681.module_type_store, module_type_store, ['xrange', 'integer_types', 'string_types'])
        nest_module(stypy.reporting.localization.Localization(__file__, 24, 0), __file__, sys_modules_63681, sys_modules_63681.module_type_store, module_type_store)
    else:
        from scipy._lib.six import xrange, integer_types, string_types

        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'scipy._lib.six', None, module_type_store, ['xrange', 'integer_types', 'string_types'], [xrange, integer_types, string_types])

else:
    # Assigning a type to the variable 'scipy._lib.six' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'scipy._lib.six', import_63680)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'from scipy.interpolate import fitpack' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63682 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.interpolate')

if (type(import_63682) is not StypyTypeError):

    if (import_63682 != 'pyd_module'):
        __import__(import_63682)
        sys_modules_63683 = sys.modules[import_63682]
        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.interpolate', sys_modules_63683.module_type_store, module_type_store, ['fitpack'])
        nest_module(stypy.reporting.localization.Localization(__file__, 26, 0), __file__, sys_modules_63683, sys_modules_63683.module_type_store, module_type_store)
    else:
        from scipy.interpolate import fitpack

        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.interpolate', None, module_type_store, ['fitpack'], [fitpack])

else:
    # Assigning a type to the variable 'scipy.interpolate' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.interpolate', import_63682)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'from scipy.interpolate import dfitpack' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63684 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'scipy.interpolate')

if (type(import_63684) is not StypyTypeError):

    if (import_63684 != 'pyd_module'):
        __import__(import_63684)
        sys_modules_63685 = sys.modules[import_63684]
        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'scipy.interpolate', sys_modules_63685.module_type_store, module_type_store, ['dfitpack'])
        nest_module(stypy.reporting.localization.Localization(__file__, 27, 0), __file__, sys_modules_63685, sys_modules_63685.module_type_store, module_type_store)
    else:
        from scipy.interpolate import dfitpack

        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'scipy.interpolate', None, module_type_store, ['dfitpack'], [dfitpack])

else:
    # Assigning a type to the variable 'scipy.interpolate' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'scipy.interpolate', import_63684)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'from scipy.interpolate import _fitpack' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63686 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.interpolate')

if (type(import_63686) is not StypyTypeError):

    if (import_63686 != 'pyd_module'):
        __import__(import_63686)
        sys_modules_63687 = sys.modules[import_63686]
        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.interpolate', sys_modules_63687.module_type_store, module_type_store, ['_fitpack'])
        nest_module(stypy.reporting.localization.Localization(__file__, 28, 0), __file__, sys_modules_63687, sys_modules_63687.module_type_store, module_type_store)
    else:
        from scipy.interpolate import _fitpack

        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.interpolate', None, module_type_store, ['_fitpack'], [_fitpack])

else:
    # Assigning a type to the variable 'scipy.interpolate' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.interpolate', import_63686)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from scipy.interpolate.polyint import _Interpolator1D' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63688 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.interpolate.polyint')

if (type(import_63688) is not StypyTypeError):

    if (import_63688 != 'pyd_module'):
        __import__(import_63688)
        sys_modules_63689 = sys.modules[import_63688]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.interpolate.polyint', sys_modules_63689.module_type_store, module_type_store, ['_Interpolator1D'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_63689, sys_modules_63689.module_type_store, module_type_store)
    else:
        from scipy.interpolate.polyint import _Interpolator1D

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.interpolate.polyint', None, module_type_store, ['_Interpolator1D'], [_Interpolator1D])

else:
    # Assigning a type to the variable 'scipy.interpolate.polyint' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.interpolate.polyint', import_63688)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'from scipy.interpolate import _ppoly' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63690 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'scipy.interpolate')

if (type(import_63690) is not StypyTypeError):

    if (import_63690 != 'pyd_module'):
        __import__(import_63690)
        sys_modules_63691 = sys.modules[import_63690]
        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'scipy.interpolate', sys_modules_63691.module_type_store, module_type_store, ['_ppoly'])
        nest_module(stypy.reporting.localization.Localization(__file__, 30, 0), __file__, sys_modules_63691, sys_modules_63691.module_type_store, module_type_store)
    else:
        from scipy.interpolate import _ppoly

        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'scipy.interpolate', None, module_type_store, ['_ppoly'], [_ppoly])

else:
    # Assigning a type to the variable 'scipy.interpolate' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'scipy.interpolate', import_63690)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'from scipy.interpolate.fitpack2 import RectBivariateSpline' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63692 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'scipy.interpolate.fitpack2')

if (type(import_63692) is not StypyTypeError):

    if (import_63692 != 'pyd_module'):
        __import__(import_63692)
        sys_modules_63693 = sys.modules[import_63692]
        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'scipy.interpolate.fitpack2', sys_modules_63693.module_type_store, module_type_store, ['RectBivariateSpline'])
        nest_module(stypy.reporting.localization.Localization(__file__, 31, 0), __file__, sys_modules_63693, sys_modules_63693.module_type_store, module_type_store)
    else:
        from scipy.interpolate.fitpack2 import RectBivariateSpline

        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'scipy.interpolate.fitpack2', None, module_type_store, ['RectBivariateSpline'], [RectBivariateSpline])

else:
    # Assigning a type to the variable 'scipy.interpolate.fitpack2' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'scipy.interpolate.fitpack2', import_63692)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'from scipy.interpolate.interpnd import _ndim_coords_from_arrays' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63694 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'scipy.interpolate.interpnd')

if (type(import_63694) is not StypyTypeError):

    if (import_63694 != 'pyd_module'):
        __import__(import_63694)
        sys_modules_63695 = sys.modules[import_63694]
        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'scipy.interpolate.interpnd', sys_modules_63695.module_type_store, module_type_store, ['_ndim_coords_from_arrays'])
        nest_module(stypy.reporting.localization.Localization(__file__, 32, 0), __file__, sys_modules_63695, sys_modules_63695.module_type_store, module_type_store)
    else:
        from scipy.interpolate.interpnd import _ndim_coords_from_arrays

        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'scipy.interpolate.interpnd', None, module_type_store, ['_ndim_coords_from_arrays'], [_ndim_coords_from_arrays])

else:
    # Assigning a type to the variable 'scipy.interpolate.interpnd' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'scipy.interpolate.interpnd', import_63694)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 0))

# 'from scipy.interpolate._bsplines import make_interp_spline, BSpline' statement (line 33)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/interpolate/')
import_63696 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy.interpolate._bsplines')

if (type(import_63696) is not StypyTypeError):

    if (import_63696 != 'pyd_module'):
        __import__(import_63696)
        sys_modules_63697 = sys.modules[import_63696]
        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy.interpolate._bsplines', sys_modules_63697.module_type_store, module_type_store, ['make_interp_spline', 'BSpline'])
        nest_module(stypy.reporting.localization.Localization(__file__, 33, 0), __file__, sys_modules_63697, sys_modules_63697.module_type_store, module_type_store)
    else:
        from scipy.interpolate._bsplines import make_interp_spline, BSpline

        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy.interpolate._bsplines', None, module_type_store, ['make_interp_spline', 'BSpline'], [make_interp_spline, BSpline])

else:
    # Assigning a type to the variable 'scipy.interpolate._bsplines' (line 33)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy.interpolate._bsplines', import_63696)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/interpolate/')


@norecursion
def prod(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'prod'
    module_type_store = module_type_store.open_function_context('prod', 36, 0, False)
    
    # Passed parameters checking function
    prod.stypy_localization = localization
    prod.stypy_type_of_self = None
    prod.stypy_type_store = module_type_store
    prod.stypy_function_name = 'prod'
    prod.stypy_param_names_list = ['x']
    prod.stypy_varargs_param_name = None
    prod.stypy_kwargs_param_name = None
    prod.stypy_call_defaults = defaults
    prod.stypy_call_varargs = varargs
    prod.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'prod', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'prod', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'prod(...)' code ##################

    str_63698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 4), 'str', 'Product of a list of numbers; ~40x faster vs np.prod for Python tuples')
    
    
    
    # Call to len(...): (line 38)
    # Processing the call arguments (line 38)
    # Getting the type of 'x' (line 38)
    x_63700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 11), 'x', False)
    # Processing the call keyword arguments (line 38)
    kwargs_63701 = {}
    # Getting the type of 'len' (line 38)
    len_63699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 7), 'len', False)
    # Calling len(args, kwargs) (line 38)
    len_call_result_63702 = invoke(stypy.reporting.localization.Localization(__file__, 38, 7), len_63699, *[x_63700], **kwargs_63701)
    
    int_63703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 17), 'int')
    # Applying the binary operator '==' (line 38)
    result_eq_63704 = python_operator(stypy.reporting.localization.Localization(__file__, 38, 7), '==', len_call_result_63702, int_63703)
    
    # Testing the type of an if condition (line 38)
    if_condition_63705 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 38, 4), result_eq_63704)
    # Assigning a type to the variable 'if_condition_63705' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 4), 'if_condition_63705', if_condition_63705)
    # SSA begins for if statement (line 38)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    int_63706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 15), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 8), 'stypy_return_type', int_63706)
    # SSA join for if statement (line 38)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to reduce(...): (line 40)
    # Processing the call arguments (line 40)
    # Getting the type of 'operator' (line 40)
    operator_63709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 28), 'operator', False)
    # Obtaining the member 'mul' of a type (line 40)
    mul_63710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 40, 28), operator_63709, 'mul')
    # Getting the type of 'x' (line 40)
    x_63711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 42), 'x', False)
    # Processing the call keyword arguments (line 40)
    kwargs_63712 = {}
    # Getting the type of 'functools' (line 40)
    functools_63707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 11), 'functools', False)
    # Obtaining the member 'reduce' of a type (line 40)
    reduce_63708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 40, 11), functools_63707, 'reduce')
    # Calling reduce(args, kwargs) (line 40)
    reduce_call_result_63713 = invoke(stypy.reporting.localization.Localization(__file__, 40, 11), reduce_63708, *[mul_63710, x_63711], **kwargs_63712)
    
    # Assigning a type to the variable 'stypy_return_type' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 4), 'stypy_return_type', reduce_call_result_63713)
    
    # ################# End of 'prod(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'prod' in the type store
    # Getting the type of 'stypy_return_type' (line 36)
    stypy_return_type_63714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_63714)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'prod'
    return stypy_return_type_63714

# Assigning a type to the variable 'prod' (line 36)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'prod', prod)

@norecursion
def lagrange(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'lagrange'
    module_type_store = module_type_store.open_function_context('lagrange', 43, 0, False)
    
    # Passed parameters checking function
    lagrange.stypy_localization = localization
    lagrange.stypy_type_of_self = None
    lagrange.stypy_type_store = module_type_store
    lagrange.stypy_function_name = 'lagrange'
    lagrange.stypy_param_names_list = ['x', 'w']
    lagrange.stypy_varargs_param_name = None
    lagrange.stypy_kwargs_param_name = None
    lagrange.stypy_call_defaults = defaults
    lagrange.stypy_call_varargs = varargs
    lagrange.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lagrange', ['x', 'w'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lagrange', localization, ['x', 'w'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lagrange(...)' code ##################

    str_63715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, (-1)), 'str', '\n    Return a Lagrange interpolating polynomial.\n\n    Given two 1-D arrays `x` and `w,` returns the Lagrange interpolating\n    polynomial through the points ``(x, w)``.\n\n    Warning: This implementation is numerically unstable. Do not expect to\n    be able to use more than about 20 points even if they are chosen optimally.\n\n    Parameters\n    ----------\n    x : array_like\n        `x` represents the x-coordinates of a set of datapoints.\n    w : array_like\n        `w` represents the y-coordinates of a set of datapoints, i.e. f(`x`).\n\n    Returns\n    -------\n    lagrange : `numpy.poly1d` instance\n        The Lagrange interpolating polynomial.\n\n    Examples\n    --------\n    Interpolate :math:`f(x) = x^3` by 3 points.\n\n    >>> from scipy.interpolate import lagrange\n    >>> x = np.array([0, 1, 2])\n    >>> y = x**3\n    >>> poly = lagrange(x, y)\n\n    Since there are only 3 points, Lagrange polynomial has degree 2. Explicitly,\n    it is given by\n\n    .. math::\n\n        \\begin{aligned}\n            L(x) &= 1\\times \\frac{x (x - 2)}{-1} + 8\\times \\frac{x (x-1)}{2} \\\\\n                 &= x (-2 + 3x)\n        \\end{aligned}\n\n    >>> from numpy.polynomial.polynomial import Polynomial\n    >>> Polynomial(poly).coef\n    array([ 3., -2.,  0.])\n\n    ')
    
    # Assigning a Call to a Name (line 90):
    
    # Assigning a Call to a Name (line 90):
    
    # Call to len(...): (line 90)
    # Processing the call arguments (line 90)
    # Getting the type of 'x' (line 90)
    x_63717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 12), 'x', False)
    # Processing the call keyword arguments (line 90)
    kwargs_63718 = {}
    # Getting the type of 'len' (line 90)
    len_63716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 8), 'len', False)
    # Calling len(args, kwargs) (line 90)
    len_call_result_63719 = invoke(stypy.reporting.localization.Localization(__file__, 90, 8), len_63716, *[x_63717], **kwargs_63718)
    
    # Assigning a type to the variable 'M' (line 90)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 4), 'M', len_call_result_63719)
    
    # Assigning a Call to a Name (line 91):
    
    # Assigning a Call to a Name (line 91):
    
    # Call to poly1d(...): (line 91)
    # Processing the call arguments (line 91)
    float_63721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 15), 'float')
    # Processing the call keyword arguments (line 91)
    kwargs_63722 = {}
    # Getting the type of 'poly1d' (line 91)
    poly1d_63720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 8), 'poly1d', False)
    # Calling poly1d(args, kwargs) (line 91)
    poly1d_call_result_63723 = invoke(stypy.reporting.localization.Localization(__file__, 91, 8), poly1d_63720, *[float_63721], **kwargs_63722)
    
    # Assigning a type to the variable 'p' (line 91)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 4), 'p', poly1d_call_result_63723)
    
    
    # Call to xrange(...): (line 92)
    # Processing the call arguments (line 92)
    # Getting the type of 'M' (line 92)
    M_63725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 20), 'M', False)
    # Processing the call keyword arguments (line 92)
    kwargs_63726 = {}
    # Getting the type of 'xrange' (line 92)
    xrange_63724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 13), 'xrange', False)
    # Calling xrange(args, kwargs) (line 92)
    xrange_call_result_63727 = invoke(stypy.reporting.localization.Localization(__file__, 92, 13), xrange_63724, *[M_63725], **kwargs_63726)
    
    # Testing the type of a for loop iterable (line 92)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 92, 4), xrange_call_result_63727)
    # Getting the type of the for loop variable (line 92)
    for_loop_var_63728 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 92, 4), xrange_call_result_63727)
    # Assigning a type to the variable 'j' (line 92)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 4), 'j', for_loop_var_63728)
    # SSA begins for a for statement (line 92)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 93):
    
    # Assigning a Call to a Name (line 93):
    
    # Call to poly1d(...): (line 93)
    # Processing the call arguments (line 93)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 93)
    j_63730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 22), 'j', False)
    # Getting the type of 'w' (line 93)
    w_63731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 20), 'w', False)
    # Obtaining the member '__getitem__' of a type (line 93)
    getitem___63732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 93, 20), w_63731, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 93)
    subscript_call_result_63733 = invoke(stypy.reporting.localization.Localization(__file__, 93, 20), getitem___63732, j_63730)
    
    # Processing the call keyword arguments (line 93)
    kwargs_63734 = {}
    # Getting the type of 'poly1d' (line 93)
    poly1d_63729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 13), 'poly1d', False)
    # Calling poly1d(args, kwargs) (line 93)
    poly1d_call_result_63735 = invoke(stypy.reporting.localization.Localization(__file__, 93, 13), poly1d_63729, *[subscript_call_result_63733], **kwargs_63734)
    
    # Assigning a type to the variable 'pt' (line 93)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 8), 'pt', poly1d_call_result_63735)
    
    
    # Call to xrange(...): (line 94)
    # Processing the call arguments (line 94)
    # Getting the type of 'M' (line 94)
    M_63737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 24), 'M', False)
    # Processing the call keyword arguments (line 94)
    kwargs_63738 = {}
    # Getting the type of 'xrange' (line 94)
    xrange_63736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 17), 'xrange', False)
    # Calling xrange(args, kwargs) (line 94)
    xrange_call_result_63739 = invoke(stypy.reporting.localization.Localization(__file__, 94, 17), xrange_63736, *[M_63737], **kwargs_63738)
    
    # Testing the type of a for loop iterable (line 94)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 94, 8), xrange_call_result_63739)
    # Getting the type of the for loop variable (line 94)
    for_loop_var_63740 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 94, 8), xrange_call_result_63739)
    # Assigning a type to the variable 'k' (line 94)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'k', for_loop_var_63740)
    # SSA begins for a for statement (line 94)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'k' (line 95)
    k_63741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 15), 'k')
    # Getting the type of 'j' (line 95)
    j_63742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 20), 'j')
    # Applying the binary operator '==' (line 95)
    result_eq_63743 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 15), '==', k_63741, j_63742)
    
    # Testing the type of an if condition (line 95)
    if_condition_63744 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 95, 12), result_eq_63743)
    # Assigning a type to the variable 'if_condition_63744' (line 95)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 12), 'if_condition_63744', if_condition_63744)
    # SSA begins for if statement (line 95)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 95)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 97):
    
    # Assigning a BinOp to a Name (line 97):
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 97)
    j_63745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 20), 'j')
    # Getting the type of 'x' (line 97)
    x_63746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 18), 'x')
    # Obtaining the member '__getitem__' of a type (line 97)
    getitem___63747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 97, 18), x_63746, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 97)
    subscript_call_result_63748 = invoke(stypy.reporting.localization.Localization(__file__, 97, 18), getitem___63747, j_63745)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 97)
    k_63749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 25), 'k')
    # Getting the type of 'x' (line 97)
    x_63750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 23), 'x')
    # Obtaining the member '__getitem__' of a type (line 97)
    getitem___63751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 97, 23), x_63750, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 97)
    subscript_call_result_63752 = invoke(stypy.reporting.localization.Localization(__file__, 97, 23), getitem___63751, k_63749)
    
    # Applying the binary operator '-' (line 97)
    result_sub_63753 = python_operator(stypy.reporting.localization.Localization(__file__, 97, 18), '-', subscript_call_result_63748, subscript_call_result_63752)
    
    # Assigning a type to the variable 'fac' (line 97)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 12), 'fac', result_sub_63753)
    
    # Getting the type of 'pt' (line 98)
    pt_63754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 12), 'pt')
    
    # Call to poly1d(...): (line 98)
    # Processing the call arguments (line 98)
    
    # Obtaining an instance of the builtin type 'list' (line 98)
    list_63756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 25), 'list')
    # Adding type elements to the builtin type 'list' instance (line 98)
    # Adding element type (line 98)
    float_63757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 26), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 25), list_63756, float_63757)
    # Adding element type (line 98)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 98)
    k_63758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 34), 'k', False)
    # Getting the type of 'x' (line 98)
    x_63759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 32), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 98)
    getitem___63760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 98, 32), x_63759, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 98)
    subscript_call_result_63761 = invoke(stypy.reporting.localization.Localization(__file__, 98, 32), getitem___63760, k_63758)
    
    # Applying the 'usub' unary operator (line 98)
    result___neg___63762 = python_operator(stypy.reporting.localization.Localization(__file__, 98, 31), 'usub', subscript_call_result_63761)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 98, 25), list_63756, result___neg___63762)
    
    # Processing the call keyword arguments (line 98)
    kwargs_63763 = {}
    # Getting the type of 'poly1d' (line 98)
    poly1d_63755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 18), 'poly1d', False)
    # Calling poly1d(args, kwargs) (line 98)
    poly1d_call_result_63764 = invoke(stypy.reporting.localization.Localization(__file__, 98, 18), poly1d_63755, *[list_63756], **kwargs_63763)
    
    # Getting the type of 'fac' (line 98)
    fac_63765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 39), 'fac')
    # Applying the binary operator 'div' (line 98)
    result_div_63766 = python_operator(stypy.reporting.localization.Localization(__file__, 98, 18), 'div', poly1d_call_result_63764, fac_63765)
    
    # Applying the binary operator '*=' (line 98)
    result_imul_63767 = python_operator(stypy.reporting.localization.Localization(__file__, 98, 12), '*=', pt_63754, result_div_63766)
    # Assigning a type to the variable 'pt' (line 98)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 12), 'pt', result_imul_63767)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'p' (line 99)
    p_63768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 8), 'p')
    # Getting the type of 'pt' (line 99)
    pt_63769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 13), 'pt')
    # Applying the binary operator '+=' (line 99)
    result_iadd_63770 = python_operator(stypy.reporting.localization.Localization(__file__, 99, 8), '+=', p_63768, pt_63769)
    # Assigning a type to the variable 'p' (line 99)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 8), 'p', result_iadd_63770)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'p' (line 100)
    p_63771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 11), 'p')
    # Assigning a type to the variable 'stypy_return_type' (line 100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 100, 4), 'stypy_return_type', p_63771)
    
    # ################# End of 'lagrange(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lagrange' in the type store
    # Getting the type of 'stypy_return_type' (line 43)
    stypy_return_type_63772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_63772)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lagrange'
    return stypy_return_type_63772

# Assigning a type to the variable 'lagrange' (line 43)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'lagrange', lagrange)
# Declaration of the 'interp2d' class

class interp2d(object, ):
    str_63773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, (-1)), 'str', "\n    interp2d(x, y, z, kind='linear', copy=True, bounds_error=False,\n             fill_value=nan)\n\n    Interpolate over a 2-D grid.\n\n    `x`, `y` and `z` are arrays of values used to approximate some function\n    f: ``z = f(x, y)``. This class returns a function whose call method uses\n    spline interpolation to find the value of new points.\n\n    If `x` and `y` represent a regular grid, consider using\n    RectBivariateSpline.\n\n    Note that calling `interp2d` with NaNs present in input values results in\n    undefined behaviour.\n\n    Methods\n    -------\n    __call__\n\n    Parameters\n    ----------\n    x, y : array_like\n        Arrays defining the data point coordinates.\n\n        If the points lie on a regular grid, `x` can specify the column\n        coordinates and `y` the row coordinates, for example::\n\n          >>> x = [0,1,2];  y = [0,3]; z = [[1,2,3], [4,5,6]]\n\n        Otherwise, `x` and `y` must specify the full coordinates for each\n        point, for example::\n\n          >>> x = [0,1,2,0,1,2];  y = [0,0,0,3,3,3]; z = [1,2,3,4,5,6]\n\n        If `x` and `y` are multi-dimensional, they are flattened before use.\n    z : array_like\n        The values of the function to interpolate at the data points. If\n        `z` is a multi-dimensional array, it is flattened before use.  The\n        length of a flattened `z` array is either\n        len(`x`)*len(`y`) if `x` and `y` specify the column and row coordinates\n        or ``len(z) == len(x) == len(y)`` if `x` and `y` specify coordinates\n        for each point.\n    kind : {'linear', 'cubic', 'quintic'}, optional\n        The kind of spline interpolation to use. Default is 'linear'.\n    copy : bool, optional\n        If True, the class makes internal copies of x, y and z.\n        If False, references may be used. The default is to copy.\n    bounds_error : bool, optional\n        If True, when interpolated values are requested outside of the\n        domain of the input data (x,y), a ValueError is raised.\n        If False, then `fill_value` is used.\n    fill_value : number, optional\n        If provided, the value to use for points outside of the\n        interpolation domain. If omitted (None), values outside\n        the domain are extrapolated.\n\n    See Also\n    --------\n    RectBivariateSpline :\n        Much faster 2D interpolation if your input data is on a grid\n    bisplrep, bisplev :\n        Spline interpolation based on FITPACK\n    BivariateSpline : a more recent wrapper of the FITPACK routines\n    interp1d : one dimension version of this function\n\n    Notes\n    -----\n    The minimum number of data points required along the interpolation\n    axis is ``(k+1)**2``, with k=1 for linear, k=3 for cubic and k=5 for\n    quintic interpolation.\n\n    The interpolator is constructed by `bisplrep`, with a smoothing factor\n    of 0. If more control over smoothing is needed, `bisplrep` should be\n    used directly.\n\n    Examples\n    --------\n    Construct a 2-D grid and interpolate on it:\n\n    >>> from scipy import interpolate\n    >>> x = np.arange(-5.01, 5.01, 0.25)\n    >>> y = np.arange(-5.01, 5.01, 0.25)\n    >>> xx, yy = np.meshgrid(x, y)\n    >>> z = np.sin(xx**2+yy**2)\n    >>> f = interpolate.interp2d(x, y, z, kind='cubic')\n\n    Now use the obtained interpolation function and plot the result:\n\n    >>> import matplotlib.pyplot as plt\n    >>> xnew = np.arange(-5.01, 5.01, 1e-2)\n    >>> ynew = np.arange(-5.01, 5.01, 1e-2)\n    >>> znew = f(xnew, ynew)\n    >>> plt.plot(x, z[0, :], 'ro-', xnew, znew[0, :], 'b-')\n    >>> plt.show()\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_63774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, 37), 'str', 'linear')
        # Getting the type of 'True' (line 205)
        True_63775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 52), 'True')
        # Getting the type of 'False' (line 205)
        False_63776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 71), 'False')
        # Getting the type of 'None' (line 206)
        None_63777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 28), 'None')
        defaults = [str_63774, True_63775, False_63776, None_63777]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 205, 4, False)
        # Assigning a type to the variable 'self' (line 206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp2d.__init__', ['x', 'y', 'z', 'kind', 'copy', 'bounds_error', 'fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['x', 'y', 'z', 'kind', 'copy', 'bounds_error', 'fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Name (line 207):
        
        # Assigning a Call to a Name (line 207):
        
        # Call to ravel(...): (line 207)
        # Processing the call arguments (line 207)
        # Getting the type of 'x' (line 207)
        x_63779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 18), 'x', False)
        # Processing the call keyword arguments (line 207)
        kwargs_63780 = {}
        # Getting the type of 'ravel' (line 207)
        ravel_63778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 12), 'ravel', False)
        # Calling ravel(args, kwargs) (line 207)
        ravel_call_result_63781 = invoke(stypy.reporting.localization.Localization(__file__, 207, 12), ravel_63778, *[x_63779], **kwargs_63780)
        
        # Assigning a type to the variable 'x' (line 207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'x', ravel_call_result_63781)
        
        # Assigning a Call to a Name (line 208):
        
        # Assigning a Call to a Name (line 208):
        
        # Call to ravel(...): (line 208)
        # Processing the call arguments (line 208)
        # Getting the type of 'y' (line 208)
        y_63783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 18), 'y', False)
        # Processing the call keyword arguments (line 208)
        kwargs_63784 = {}
        # Getting the type of 'ravel' (line 208)
        ravel_63782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 12), 'ravel', False)
        # Calling ravel(args, kwargs) (line 208)
        ravel_call_result_63785 = invoke(stypy.reporting.localization.Localization(__file__, 208, 12), ravel_63782, *[y_63783], **kwargs_63784)
        
        # Assigning a type to the variable 'y' (line 208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 8), 'y', ravel_call_result_63785)
        
        # Assigning a Call to a Name (line 209):
        
        # Assigning a Call to a Name (line 209):
        
        # Call to asarray(...): (line 209)
        # Processing the call arguments (line 209)
        # Getting the type of 'z' (line 209)
        z_63787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 20), 'z', False)
        # Processing the call keyword arguments (line 209)
        kwargs_63788 = {}
        # Getting the type of 'asarray' (line 209)
        asarray_63786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 12), 'asarray', False)
        # Calling asarray(args, kwargs) (line 209)
        asarray_call_result_63789 = invoke(stypy.reporting.localization.Localization(__file__, 209, 12), asarray_63786, *[z_63787], **kwargs_63788)
        
        # Assigning a type to the variable 'z' (line 209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 209, 8), 'z', asarray_call_result_63789)
        
        # Assigning a Compare to a Name (line 211):
        
        # Assigning a Compare to a Name (line 211):
        
        # Getting the type of 'z' (line 211)
        z_63790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 28), 'z')
        # Obtaining the member 'size' of a type (line 211)
        size_63791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 28), z_63790, 'size')
        
        # Call to len(...): (line 211)
        # Processing the call arguments (line 211)
        # Getting the type of 'x' (line 211)
        x_63793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 42), 'x', False)
        # Processing the call keyword arguments (line 211)
        kwargs_63794 = {}
        # Getting the type of 'len' (line 211)
        len_63792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 38), 'len', False)
        # Calling len(args, kwargs) (line 211)
        len_call_result_63795 = invoke(stypy.reporting.localization.Localization(__file__, 211, 38), len_63792, *[x_63793], **kwargs_63794)
        
        
        # Call to len(...): (line 211)
        # Processing the call arguments (line 211)
        # Getting the type of 'y' (line 211)
        y_63797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 51), 'y', False)
        # Processing the call keyword arguments (line 211)
        kwargs_63798 = {}
        # Getting the type of 'len' (line 211)
        len_63796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 47), 'len', False)
        # Calling len(args, kwargs) (line 211)
        len_call_result_63799 = invoke(stypy.reporting.localization.Localization(__file__, 211, 47), len_63796, *[y_63797], **kwargs_63798)
        
        # Applying the binary operator '*' (line 211)
        result_mul_63800 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 38), '*', len_call_result_63795, len_call_result_63799)
        
        # Applying the binary operator '==' (line 211)
        result_eq_63801 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 28), '==', size_63791, result_mul_63800)
        
        # Assigning a type to the variable 'rectangular_grid' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'rectangular_grid', result_eq_63801)
        
        # Getting the type of 'rectangular_grid' (line 212)
        rectangular_grid_63802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 11), 'rectangular_grid')
        # Testing the type of an if condition (line 212)
        if_condition_63803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 212, 8), rectangular_grid_63802)
        # Assigning a type to the variable 'if_condition_63803' (line 212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 8), 'if_condition_63803', if_condition_63803)
        # SSA begins for if statement (line 212)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'z' (line 213)
        z_63804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 15), 'z')
        # Obtaining the member 'ndim' of a type (line 213)
        ndim_63805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 15), z_63804, 'ndim')
        int_63806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 25), 'int')
        # Applying the binary operator '==' (line 213)
        result_eq_63807 = python_operator(stypy.reporting.localization.Localization(__file__, 213, 15), '==', ndim_63805, int_63806)
        
        # Testing the type of an if condition (line 213)
        if_condition_63808 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 213, 12), result_eq_63807)
        # Assigning a type to the variable 'if_condition_63808' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 12), 'if_condition_63808', if_condition_63808)
        # SSA begins for if statement (line 213)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'z' (line 214)
        z_63809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 19), 'z')
        # Obtaining the member 'shape' of a type (line 214)
        shape_63810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 19), z_63809, 'shape')
        
        # Obtaining an instance of the builtin type 'tuple' (line 214)
        tuple_63811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 214)
        # Adding element type (line 214)
        
        # Call to len(...): (line 214)
        # Processing the call arguments (line 214)
        # Getting the type of 'y' (line 214)
        y_63813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 35), 'y', False)
        # Processing the call keyword arguments (line 214)
        kwargs_63814 = {}
        # Getting the type of 'len' (line 214)
        len_63812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 31), 'len', False)
        # Calling len(args, kwargs) (line 214)
        len_call_result_63815 = invoke(stypy.reporting.localization.Localization(__file__, 214, 31), len_63812, *[y_63813], **kwargs_63814)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 214, 31), tuple_63811, len_call_result_63815)
        # Adding element type (line 214)
        
        # Call to len(...): (line 214)
        # Processing the call arguments (line 214)
        # Getting the type of 'x' (line 214)
        x_63817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 43), 'x', False)
        # Processing the call keyword arguments (line 214)
        kwargs_63818 = {}
        # Getting the type of 'len' (line 214)
        len_63816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 39), 'len', False)
        # Calling len(args, kwargs) (line 214)
        len_call_result_63819 = invoke(stypy.reporting.localization.Localization(__file__, 214, 39), len_63816, *[x_63817], **kwargs_63818)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 214, 31), tuple_63811, len_call_result_63819)
        
        # Applying the binary operator '!=' (line 214)
        result_ne_63820 = python_operator(stypy.reporting.localization.Localization(__file__, 214, 19), '!=', shape_63810, tuple_63811)
        
        # Testing the type of an if condition (line 214)
        if_condition_63821 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 214, 16), result_ne_63820)
        # Assigning a type to the variable 'if_condition_63821' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 16), 'if_condition_63821', if_condition_63821)
        # SSA begins for if statement (line 214)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 215)
        # Processing the call arguments (line 215)
        str_63823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 37), 'str', 'When on a regular grid with x.size = m and y.size = n, if z.ndim == 2, then z must have shape (n, m)')
        # Processing the call keyword arguments (line 215)
        kwargs_63824 = {}
        # Getting the type of 'ValueError' (line 215)
        ValueError_63822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 215)
        ValueError_call_result_63825 = invoke(stypy.reporting.localization.Localization(__file__, 215, 26), ValueError_63822, *[str_63823], **kwargs_63824)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 215, 20), ValueError_call_result_63825, 'raise parameter', BaseException)
        # SSA join for if statement (line 214)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 213)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to all(...): (line 218)
        # Processing the call arguments (line 218)
        
        
        # Obtaining the type of the subscript
        int_63828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 28), 'int')
        slice_63829 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 218, 26), int_63828, None, None)
        # Getting the type of 'x' (line 218)
        x_63830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 26), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 218)
        getitem___63831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 26), x_63830, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 218)
        subscript_call_result_63832 = invoke(stypy.reporting.localization.Localization(__file__, 218, 26), getitem___63831, slice_63829)
        
        
        # Obtaining the type of the subscript
        int_63833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 38), 'int')
        slice_63834 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 218, 35), None, int_63833, None)
        # Getting the type of 'x' (line 218)
        x_63835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 35), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 218)
        getitem___63836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 35), x_63835, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 218)
        subscript_call_result_63837 = invoke(stypy.reporting.localization.Localization(__file__, 218, 35), getitem___63836, slice_63834)
        
        # Applying the binary operator '>=' (line 218)
        result_ge_63838 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 26), '>=', subscript_call_result_63832, subscript_call_result_63837)
        
        # Processing the call keyword arguments (line 218)
        kwargs_63839 = {}
        # Getting the type of 'np' (line 218)
        np_63826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 19), 'np', False)
        # Obtaining the member 'all' of a type (line 218)
        all_63827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 19), np_63826, 'all')
        # Calling all(args, kwargs) (line 218)
        all_call_result_63840 = invoke(stypy.reporting.localization.Localization(__file__, 218, 19), all_63827, *[result_ge_63838], **kwargs_63839)
        
        # Applying the 'not' unary operator (line 218)
        result_not__63841 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 15), 'not', all_call_result_63840)
        
        # Testing the type of an if condition (line 218)
        if_condition_63842 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 218, 12), result_not__63841)
        # Assigning a type to the variable 'if_condition_63842' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 12), 'if_condition_63842', if_condition_63842)
        # SSA begins for if statement (line 218)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 219):
        
        # Assigning a Call to a Name (line 219):
        
        # Call to argsort(...): (line 219)
        # Processing the call arguments (line 219)
        # Getting the type of 'x' (line 219)
        x_63845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 31), 'x', False)
        # Processing the call keyword arguments (line 219)
        kwargs_63846 = {}
        # Getting the type of 'np' (line 219)
        np_63843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 20), 'np', False)
        # Obtaining the member 'argsort' of a type (line 219)
        argsort_63844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 20), np_63843, 'argsort')
        # Calling argsort(args, kwargs) (line 219)
        argsort_call_result_63847 = invoke(stypy.reporting.localization.Localization(__file__, 219, 20), argsort_63844, *[x_63845], **kwargs_63846)
        
        # Assigning a type to the variable 'j' (line 219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 219, 16), 'j', argsort_call_result_63847)
        
        # Assigning a Subscript to a Name (line 220):
        
        # Assigning a Subscript to a Name (line 220):
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 220)
        j_63848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 22), 'j')
        # Getting the type of 'x' (line 220)
        x_63849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 20), 'x')
        # Obtaining the member '__getitem__' of a type (line 220)
        getitem___63850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 20), x_63849, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 220)
        subscript_call_result_63851 = invoke(stypy.reporting.localization.Localization(__file__, 220, 20), getitem___63850, j_63848)
        
        # Assigning a type to the variable 'x' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 16), 'x', subscript_call_result_63851)
        
        # Assigning a Subscript to a Name (line 221):
        
        # Assigning a Subscript to a Name (line 221):
        
        # Obtaining the type of the subscript
        slice_63852 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 221, 20), None, None, None)
        # Getting the type of 'j' (line 221)
        j_63853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 25), 'j')
        # Getting the type of 'z' (line 221)
        z_63854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 20), 'z')
        # Obtaining the member '__getitem__' of a type (line 221)
        getitem___63855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 20), z_63854, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 221)
        subscript_call_result_63856 = invoke(stypy.reporting.localization.Localization(__file__, 221, 20), getitem___63855, (slice_63852, j_63853))
        
        # Assigning a type to the variable 'z' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 16), 'z', subscript_call_result_63856)
        # SSA join for if statement (line 218)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to all(...): (line 222)
        # Processing the call arguments (line 222)
        
        
        # Obtaining the type of the subscript
        int_63859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 28), 'int')
        slice_63860 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 222, 26), int_63859, None, None)
        # Getting the type of 'y' (line 222)
        y_63861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 26), 'y', False)
        # Obtaining the member '__getitem__' of a type (line 222)
        getitem___63862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 26), y_63861, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 222)
        subscript_call_result_63863 = invoke(stypy.reporting.localization.Localization(__file__, 222, 26), getitem___63862, slice_63860)
        
        
        # Obtaining the type of the subscript
        int_63864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 38), 'int')
        slice_63865 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 222, 35), None, int_63864, None)
        # Getting the type of 'y' (line 222)
        y_63866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 35), 'y', False)
        # Obtaining the member '__getitem__' of a type (line 222)
        getitem___63867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 35), y_63866, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 222)
        subscript_call_result_63868 = invoke(stypy.reporting.localization.Localization(__file__, 222, 35), getitem___63867, slice_63865)
        
        # Applying the binary operator '>=' (line 222)
        result_ge_63869 = python_operator(stypy.reporting.localization.Localization(__file__, 222, 26), '>=', subscript_call_result_63863, subscript_call_result_63868)
        
        # Processing the call keyword arguments (line 222)
        kwargs_63870 = {}
        # Getting the type of 'np' (line 222)
        np_63857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 19), 'np', False)
        # Obtaining the member 'all' of a type (line 222)
        all_63858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 19), np_63857, 'all')
        # Calling all(args, kwargs) (line 222)
        all_call_result_63871 = invoke(stypy.reporting.localization.Localization(__file__, 222, 19), all_63858, *[result_ge_63869], **kwargs_63870)
        
        # Applying the 'not' unary operator (line 222)
        result_not__63872 = python_operator(stypy.reporting.localization.Localization(__file__, 222, 15), 'not', all_call_result_63871)
        
        # Testing the type of an if condition (line 222)
        if_condition_63873 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 222, 12), result_not__63872)
        # Assigning a type to the variable 'if_condition_63873' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 12), 'if_condition_63873', if_condition_63873)
        # SSA begins for if statement (line 222)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 223):
        
        # Assigning a Call to a Name (line 223):
        
        # Call to argsort(...): (line 223)
        # Processing the call arguments (line 223)
        # Getting the type of 'y' (line 223)
        y_63876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 31), 'y', False)
        # Processing the call keyword arguments (line 223)
        kwargs_63877 = {}
        # Getting the type of 'np' (line 223)
        np_63874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 20), 'np', False)
        # Obtaining the member 'argsort' of a type (line 223)
        argsort_63875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 20), np_63874, 'argsort')
        # Calling argsort(args, kwargs) (line 223)
        argsort_call_result_63878 = invoke(stypy.reporting.localization.Localization(__file__, 223, 20), argsort_63875, *[y_63876], **kwargs_63877)
        
        # Assigning a type to the variable 'j' (line 223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 16), 'j', argsort_call_result_63878)
        
        # Assigning a Subscript to a Name (line 224):
        
        # Assigning a Subscript to a Name (line 224):
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 224)
        j_63879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 22), 'j')
        # Getting the type of 'y' (line 224)
        y_63880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 20), 'y')
        # Obtaining the member '__getitem__' of a type (line 224)
        getitem___63881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 20), y_63880, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 224)
        subscript_call_result_63882 = invoke(stypy.reporting.localization.Localization(__file__, 224, 20), getitem___63881, j_63879)
        
        # Assigning a type to the variable 'y' (line 224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 16), 'y', subscript_call_result_63882)
        
        # Assigning a Subscript to a Name (line 225):
        
        # Assigning a Subscript to a Name (line 225):
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 225)
        j_63883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 22), 'j')
        slice_63884 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 225, 20), None, None, None)
        # Getting the type of 'z' (line 225)
        z_63885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 20), 'z')
        # Obtaining the member '__getitem__' of a type (line 225)
        getitem___63886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 20), z_63885, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 225)
        subscript_call_result_63887 = invoke(stypy.reporting.localization.Localization(__file__, 225, 20), getitem___63886, (j_63883, slice_63884))
        
        # Assigning a type to the variable 'z' (line 225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 16), 'z', subscript_call_result_63887)
        # SSA join for if statement (line 222)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 226):
        
        # Assigning a Call to a Name (line 226):
        
        # Call to ravel(...): (line 226)
        # Processing the call arguments (line 226)
        # Getting the type of 'z' (line 226)
        z_63889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 22), 'z', False)
        # Obtaining the member 'T' of a type (line 226)
        T_63890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 22), z_63889, 'T')
        # Processing the call keyword arguments (line 226)
        kwargs_63891 = {}
        # Getting the type of 'ravel' (line 226)
        ravel_63888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 16), 'ravel', False)
        # Calling ravel(args, kwargs) (line 226)
        ravel_call_result_63892 = invoke(stypy.reporting.localization.Localization(__file__, 226, 16), ravel_63888, *[T_63890], **kwargs_63891)
        
        # Assigning a type to the variable 'z' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 12), 'z', ravel_call_result_63892)
        # SSA branch for the else part of an if statement (line 212)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 228):
        
        # Assigning a Call to a Name (line 228):
        
        # Call to ravel(...): (line 228)
        # Processing the call arguments (line 228)
        # Getting the type of 'z' (line 228)
        z_63894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 22), 'z', False)
        # Processing the call keyword arguments (line 228)
        kwargs_63895 = {}
        # Getting the type of 'ravel' (line 228)
        ravel_63893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 16), 'ravel', False)
        # Calling ravel(args, kwargs) (line 228)
        ravel_call_result_63896 = invoke(stypy.reporting.localization.Localization(__file__, 228, 16), ravel_63893, *[z_63894], **kwargs_63895)
        
        # Assigning a type to the variable 'z' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 12), 'z', ravel_call_result_63896)
        
        
        
        # Call to len(...): (line 229)
        # Processing the call arguments (line 229)
        # Getting the type of 'x' (line 229)
        x_63898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 19), 'x', False)
        # Processing the call keyword arguments (line 229)
        kwargs_63899 = {}
        # Getting the type of 'len' (line 229)
        len_63897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 15), 'len', False)
        # Calling len(args, kwargs) (line 229)
        len_call_result_63900 = invoke(stypy.reporting.localization.Localization(__file__, 229, 15), len_63897, *[x_63898], **kwargs_63899)
        
        
        # Call to len(...): (line 229)
        # Processing the call arguments (line 229)
        # Getting the type of 'y' (line 229)
        y_63902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 29), 'y', False)
        # Processing the call keyword arguments (line 229)
        kwargs_63903 = {}
        # Getting the type of 'len' (line 229)
        len_63901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 25), 'len', False)
        # Calling len(args, kwargs) (line 229)
        len_call_result_63904 = invoke(stypy.reporting.localization.Localization(__file__, 229, 25), len_63901, *[y_63902], **kwargs_63903)
        
        # Applying the binary operator '!=' (line 229)
        result_ne_63905 = python_operator(stypy.reporting.localization.Localization(__file__, 229, 15), '!=', len_call_result_63900, len_call_result_63904)
        
        # Testing the type of an if condition (line 229)
        if_condition_63906 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 229, 12), result_ne_63905)
        # Assigning a type to the variable 'if_condition_63906' (line 229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 12), 'if_condition_63906', if_condition_63906)
        # SSA begins for if statement (line 229)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 230)
        # Processing the call arguments (line 230)
        str_63908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 20), 'str', 'x and y must have equal lengths for non rectangular grid')
        # Processing the call keyword arguments (line 230)
        kwargs_63909 = {}
        # Getting the type of 'ValueError' (line 230)
        ValueError_63907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 230)
        ValueError_call_result_63910 = invoke(stypy.reporting.localization.Localization(__file__, 230, 22), ValueError_63907, *[str_63908], **kwargs_63909)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 230, 16), ValueError_call_result_63910, 'raise parameter', BaseException)
        # SSA join for if statement (line 229)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 232)
        # Processing the call arguments (line 232)
        # Getting the type of 'z' (line 232)
        z_63912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 19), 'z', False)
        # Processing the call keyword arguments (line 232)
        kwargs_63913 = {}
        # Getting the type of 'len' (line 232)
        len_63911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 15), 'len', False)
        # Calling len(args, kwargs) (line 232)
        len_call_result_63914 = invoke(stypy.reporting.localization.Localization(__file__, 232, 15), len_63911, *[z_63912], **kwargs_63913)
        
        
        # Call to len(...): (line 232)
        # Processing the call arguments (line 232)
        # Getting the type of 'x' (line 232)
        x_63916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 29), 'x', False)
        # Processing the call keyword arguments (line 232)
        kwargs_63917 = {}
        # Getting the type of 'len' (line 232)
        len_63915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 25), 'len', False)
        # Calling len(args, kwargs) (line 232)
        len_call_result_63918 = invoke(stypy.reporting.localization.Localization(__file__, 232, 25), len_63915, *[x_63916], **kwargs_63917)
        
        # Applying the binary operator '!=' (line 232)
        result_ne_63919 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 15), '!=', len_call_result_63914, len_call_result_63918)
        
        # Testing the type of an if condition (line 232)
        if_condition_63920 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 232, 12), result_ne_63919)
        # Assigning a type to the variable 'if_condition_63920' (line 232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 12), 'if_condition_63920', if_condition_63920)
        # SSA begins for if statement (line 232)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 233)
        # Processing the call arguments (line 233)
        str_63922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 234, 20), 'str', 'Invalid length for input z for non rectangular grid')
        # Processing the call keyword arguments (line 233)
        kwargs_63923 = {}
        # Getting the type of 'ValueError' (line 233)
        ValueError_63921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 233)
        ValueError_call_result_63924 = invoke(stypy.reporting.localization.Localization(__file__, 233, 22), ValueError_63921, *[str_63922], **kwargs_63923)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 233, 16), ValueError_call_result_63924, 'raise parameter', BaseException)
        # SSA join for if statement (line 232)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 212)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 236)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Subscript to a Name (line 237):
        
        # Obtaining the type of the subscript
        # Getting the type of 'kind' (line 239)
        kind_63925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 37), 'kind')
        
        # Obtaining an instance of the builtin type 'dict' (line 237)
        dict_63926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 22), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 237)
        # Adding element type (key, value) (line 237)
        str_63927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 23), 'str', 'linear')
        int_63928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 33), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 237, 22), dict_63926, (str_63927, int_63928))
        # Adding element type (key, value) (line 237)
        str_63929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 23), 'str', 'cubic')
        int_63930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 32), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 237, 22), dict_63926, (str_63929, int_63930))
        # Adding element type (key, value) (line 237)
        str_63931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 239, 23), 'str', 'quintic')
        int_63932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 239, 34), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 237, 22), dict_63926, (str_63931, int_63932))
        
        # Obtaining the member '__getitem__' of a type (line 237)
        getitem___63933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 22), dict_63926, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 237)
        subscript_call_result_63934 = invoke(stypy.reporting.localization.Localization(__file__, 237, 22), getitem___63933, kind_63925)
        
        # Assigning a type to the variable 'ky' (line 237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 17), 'ky', subscript_call_result_63934)
        
        # Assigning a Name to a Name (line 237):
        # Getting the type of 'ky' (line 237)
        ky_63935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 17), 'ky')
        # Assigning a type to the variable 'kx' (line 237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 12), 'kx', ky_63935)
        # SSA branch for the except part of a try statement (line 236)
        # SSA branch for the except 'KeyError' branch of a try statement (line 236)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 241)
        # Processing the call arguments (line 241)
        str_63937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 29), 'str', 'Unsupported interpolation type.')
        # Processing the call keyword arguments (line 241)
        kwargs_63938 = {}
        # Getting the type of 'ValueError' (line 241)
        ValueError_63936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 241)
        ValueError_call_result_63939 = invoke(stypy.reporting.localization.Localization(__file__, 241, 18), ValueError_63936, *[str_63937], **kwargs_63938)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 241, 12), ValueError_call_result_63939, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 236)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'rectangular_grid' (line 243)
        rectangular_grid_63940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 15), 'rectangular_grid')
        # Applying the 'not' unary operator (line 243)
        result_not__63941 = python_operator(stypy.reporting.localization.Localization(__file__, 243, 11), 'not', rectangular_grid_63940)
        
        # Testing the type of an if condition (line 243)
        if_condition_63942 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 243, 8), result_not__63941)
        # Assigning a type to the variable 'if_condition_63942' (line 243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 8), 'if_condition_63942', if_condition_63942)
        # SSA begins for if statement (line 243)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 245):
        
        # Assigning a Call to a Attribute (line 245):
        
        # Call to bisplrep(...): (line 245)
        # Processing the call arguments (line 245)
        # Getting the type of 'x' (line 245)
        x_63945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 40), 'x', False)
        # Getting the type of 'y' (line 245)
        y_63946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 43), 'y', False)
        # Getting the type of 'z' (line 245)
        z_63947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 46), 'z', False)
        # Processing the call keyword arguments (line 245)
        # Getting the type of 'kx' (line 245)
        kx_63948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 52), 'kx', False)
        keyword_63949 = kx_63948
        # Getting the type of 'ky' (line 245)
        ky_63950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 59), 'ky', False)
        keyword_63951 = ky_63950
        float_63952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, 65), 'float')
        keyword_63953 = float_63952
        kwargs_63954 = {'ky': keyword_63951, 'kx': keyword_63949, 's': keyword_63953}
        # Getting the type of 'fitpack' (line 245)
        fitpack_63943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 23), 'fitpack', False)
        # Obtaining the member 'bisplrep' of a type (line 245)
        bisplrep_63944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 23), fitpack_63943, 'bisplrep')
        # Calling bisplrep(args, kwargs) (line 245)
        bisplrep_call_result_63955 = invoke(stypy.reporting.localization.Localization(__file__, 245, 23), bisplrep_63944, *[x_63945, y_63946, z_63947], **kwargs_63954)
        
        # Getting the type of 'self' (line 245)
        self_63956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 12), 'self')
        # Setting the type of the member 'tck' of a type (line 245)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 12), self_63956, 'tck', bisplrep_call_result_63955)
        # SSA branch for the else part of an if statement (line 243)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 247):
        
        # Assigning a Subscript to a Name (line 247):
        
        # Obtaining the type of the subscript
        int_63957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 12), 'int')
        
        # Call to regrid_smth(...): (line 247)
        # Processing the call arguments (line 247)
        # Getting the type of 'x' (line 248)
        x_63960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'x', False)
        # Getting the type of 'y' (line 248)
        y_63961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 19), 'y', False)
        # Getting the type of 'z' (line 248)
        z_63962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 22), 'z', False)
        # Getting the type of 'None' (line 248)
        None_63963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 25), 'None', False)
        # Getting the type of 'None' (line 248)
        None_63964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 31), 'None', False)
        # Getting the type of 'None' (line 248)
        None_63965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 37), 'None', False)
        # Getting the type of 'None' (line 248)
        None_63966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 43), 'None', False)
        # Processing the call keyword arguments (line 247)
        # Getting the type of 'kx' (line 249)
        kx_63967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 19), 'kx', False)
        keyword_63968 = kx_63967
        # Getting the type of 'ky' (line 249)
        ky_63969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 26), 'ky', False)
        keyword_63970 = ky_63969
        float_63971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 32), 'float')
        keyword_63972 = float_63971
        kwargs_63973 = {'ky': keyword_63970, 'kx': keyword_63968, 's': keyword_63972}
        # Getting the type of 'dfitpack' (line 247)
        dfitpack_63958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 41), 'dfitpack', False)
        # Obtaining the member 'regrid_smth' of a type (line 247)
        regrid_smth_63959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 41), dfitpack_63958, 'regrid_smth')
        # Calling regrid_smth(args, kwargs) (line 247)
        regrid_smth_call_result_63974 = invoke(stypy.reporting.localization.Localization(__file__, 247, 41), regrid_smth_63959, *[x_63960, y_63961, z_63962, None_63963, None_63964, None_63965, None_63966], **kwargs_63973)
        
        # Obtaining the member '__getitem__' of a type (line 247)
        getitem___63975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 12), regrid_smth_call_result_63974, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 247)
        subscript_call_result_63976 = invoke(stypy.reporting.localization.Localization(__file__, 247, 12), getitem___63975, int_63957)
        
        # Assigning a type to the variable 'tuple_var_assignment_63589' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63589', subscript_call_result_63976)
        
        # Assigning a Subscript to a Name (line 247):
        
        # Obtaining the type of the subscript
        int_63977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 12), 'int')
        
        # Call to regrid_smth(...): (line 247)
        # Processing the call arguments (line 247)
        # Getting the type of 'x' (line 248)
        x_63980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'x', False)
        # Getting the type of 'y' (line 248)
        y_63981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 19), 'y', False)
        # Getting the type of 'z' (line 248)
        z_63982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 22), 'z', False)
        # Getting the type of 'None' (line 248)
        None_63983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 25), 'None', False)
        # Getting the type of 'None' (line 248)
        None_63984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 31), 'None', False)
        # Getting the type of 'None' (line 248)
        None_63985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 37), 'None', False)
        # Getting the type of 'None' (line 248)
        None_63986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 43), 'None', False)
        # Processing the call keyword arguments (line 247)
        # Getting the type of 'kx' (line 249)
        kx_63987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 19), 'kx', False)
        keyword_63988 = kx_63987
        # Getting the type of 'ky' (line 249)
        ky_63989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 26), 'ky', False)
        keyword_63990 = ky_63989
        float_63991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 32), 'float')
        keyword_63992 = float_63991
        kwargs_63993 = {'ky': keyword_63990, 'kx': keyword_63988, 's': keyword_63992}
        # Getting the type of 'dfitpack' (line 247)
        dfitpack_63978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 41), 'dfitpack', False)
        # Obtaining the member 'regrid_smth' of a type (line 247)
        regrid_smth_63979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 41), dfitpack_63978, 'regrid_smth')
        # Calling regrid_smth(args, kwargs) (line 247)
        regrid_smth_call_result_63994 = invoke(stypy.reporting.localization.Localization(__file__, 247, 41), regrid_smth_63979, *[x_63980, y_63981, z_63982, None_63983, None_63984, None_63985, None_63986], **kwargs_63993)
        
        # Obtaining the member '__getitem__' of a type (line 247)
        getitem___63995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 12), regrid_smth_call_result_63994, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 247)
        subscript_call_result_63996 = invoke(stypy.reporting.localization.Localization(__file__, 247, 12), getitem___63995, int_63977)
        
        # Assigning a type to the variable 'tuple_var_assignment_63590' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63590', subscript_call_result_63996)
        
        # Assigning a Subscript to a Name (line 247):
        
        # Obtaining the type of the subscript
        int_63997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 12), 'int')
        
        # Call to regrid_smth(...): (line 247)
        # Processing the call arguments (line 247)
        # Getting the type of 'x' (line 248)
        x_64000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'x', False)
        # Getting the type of 'y' (line 248)
        y_64001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 19), 'y', False)
        # Getting the type of 'z' (line 248)
        z_64002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 22), 'z', False)
        # Getting the type of 'None' (line 248)
        None_64003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 25), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 31), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 37), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 43), 'None', False)
        # Processing the call keyword arguments (line 247)
        # Getting the type of 'kx' (line 249)
        kx_64007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 19), 'kx', False)
        keyword_64008 = kx_64007
        # Getting the type of 'ky' (line 249)
        ky_64009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 26), 'ky', False)
        keyword_64010 = ky_64009
        float_64011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 32), 'float')
        keyword_64012 = float_64011
        kwargs_64013 = {'ky': keyword_64010, 'kx': keyword_64008, 's': keyword_64012}
        # Getting the type of 'dfitpack' (line 247)
        dfitpack_63998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 41), 'dfitpack', False)
        # Obtaining the member 'regrid_smth' of a type (line 247)
        regrid_smth_63999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 41), dfitpack_63998, 'regrid_smth')
        # Calling regrid_smth(args, kwargs) (line 247)
        regrid_smth_call_result_64014 = invoke(stypy.reporting.localization.Localization(__file__, 247, 41), regrid_smth_63999, *[x_64000, y_64001, z_64002, None_64003, None_64004, None_64005, None_64006], **kwargs_64013)
        
        # Obtaining the member '__getitem__' of a type (line 247)
        getitem___64015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 12), regrid_smth_call_result_64014, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 247)
        subscript_call_result_64016 = invoke(stypy.reporting.localization.Localization(__file__, 247, 12), getitem___64015, int_63997)
        
        # Assigning a type to the variable 'tuple_var_assignment_63591' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63591', subscript_call_result_64016)
        
        # Assigning a Subscript to a Name (line 247):
        
        # Obtaining the type of the subscript
        int_64017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 12), 'int')
        
        # Call to regrid_smth(...): (line 247)
        # Processing the call arguments (line 247)
        # Getting the type of 'x' (line 248)
        x_64020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'x', False)
        # Getting the type of 'y' (line 248)
        y_64021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 19), 'y', False)
        # Getting the type of 'z' (line 248)
        z_64022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 22), 'z', False)
        # Getting the type of 'None' (line 248)
        None_64023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 25), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 31), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 37), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 43), 'None', False)
        # Processing the call keyword arguments (line 247)
        # Getting the type of 'kx' (line 249)
        kx_64027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 19), 'kx', False)
        keyword_64028 = kx_64027
        # Getting the type of 'ky' (line 249)
        ky_64029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 26), 'ky', False)
        keyword_64030 = ky_64029
        float_64031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 32), 'float')
        keyword_64032 = float_64031
        kwargs_64033 = {'ky': keyword_64030, 'kx': keyword_64028, 's': keyword_64032}
        # Getting the type of 'dfitpack' (line 247)
        dfitpack_64018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 41), 'dfitpack', False)
        # Obtaining the member 'regrid_smth' of a type (line 247)
        regrid_smth_64019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 41), dfitpack_64018, 'regrid_smth')
        # Calling regrid_smth(args, kwargs) (line 247)
        regrid_smth_call_result_64034 = invoke(stypy.reporting.localization.Localization(__file__, 247, 41), regrid_smth_64019, *[x_64020, y_64021, z_64022, None_64023, None_64024, None_64025, None_64026], **kwargs_64033)
        
        # Obtaining the member '__getitem__' of a type (line 247)
        getitem___64035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 12), regrid_smth_call_result_64034, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 247)
        subscript_call_result_64036 = invoke(stypy.reporting.localization.Localization(__file__, 247, 12), getitem___64035, int_64017)
        
        # Assigning a type to the variable 'tuple_var_assignment_63592' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63592', subscript_call_result_64036)
        
        # Assigning a Subscript to a Name (line 247):
        
        # Obtaining the type of the subscript
        int_64037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 12), 'int')
        
        # Call to regrid_smth(...): (line 247)
        # Processing the call arguments (line 247)
        # Getting the type of 'x' (line 248)
        x_64040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'x', False)
        # Getting the type of 'y' (line 248)
        y_64041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 19), 'y', False)
        # Getting the type of 'z' (line 248)
        z_64042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 22), 'z', False)
        # Getting the type of 'None' (line 248)
        None_64043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 25), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 31), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 37), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 43), 'None', False)
        # Processing the call keyword arguments (line 247)
        # Getting the type of 'kx' (line 249)
        kx_64047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 19), 'kx', False)
        keyword_64048 = kx_64047
        # Getting the type of 'ky' (line 249)
        ky_64049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 26), 'ky', False)
        keyword_64050 = ky_64049
        float_64051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 32), 'float')
        keyword_64052 = float_64051
        kwargs_64053 = {'ky': keyword_64050, 'kx': keyword_64048, 's': keyword_64052}
        # Getting the type of 'dfitpack' (line 247)
        dfitpack_64038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 41), 'dfitpack', False)
        # Obtaining the member 'regrid_smth' of a type (line 247)
        regrid_smth_64039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 41), dfitpack_64038, 'regrid_smth')
        # Calling regrid_smth(args, kwargs) (line 247)
        regrid_smth_call_result_64054 = invoke(stypy.reporting.localization.Localization(__file__, 247, 41), regrid_smth_64039, *[x_64040, y_64041, z_64042, None_64043, None_64044, None_64045, None_64046], **kwargs_64053)
        
        # Obtaining the member '__getitem__' of a type (line 247)
        getitem___64055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 12), regrid_smth_call_result_64054, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 247)
        subscript_call_result_64056 = invoke(stypy.reporting.localization.Localization(__file__, 247, 12), getitem___64055, int_64037)
        
        # Assigning a type to the variable 'tuple_var_assignment_63593' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63593', subscript_call_result_64056)
        
        # Assigning a Subscript to a Name (line 247):
        
        # Obtaining the type of the subscript
        int_64057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 12), 'int')
        
        # Call to regrid_smth(...): (line 247)
        # Processing the call arguments (line 247)
        # Getting the type of 'x' (line 248)
        x_64060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'x', False)
        # Getting the type of 'y' (line 248)
        y_64061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 19), 'y', False)
        # Getting the type of 'z' (line 248)
        z_64062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 22), 'z', False)
        # Getting the type of 'None' (line 248)
        None_64063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 25), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 31), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 37), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 43), 'None', False)
        # Processing the call keyword arguments (line 247)
        # Getting the type of 'kx' (line 249)
        kx_64067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 19), 'kx', False)
        keyword_64068 = kx_64067
        # Getting the type of 'ky' (line 249)
        ky_64069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 26), 'ky', False)
        keyword_64070 = ky_64069
        float_64071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 32), 'float')
        keyword_64072 = float_64071
        kwargs_64073 = {'ky': keyword_64070, 'kx': keyword_64068, 's': keyword_64072}
        # Getting the type of 'dfitpack' (line 247)
        dfitpack_64058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 41), 'dfitpack', False)
        # Obtaining the member 'regrid_smth' of a type (line 247)
        regrid_smth_64059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 41), dfitpack_64058, 'regrid_smth')
        # Calling regrid_smth(args, kwargs) (line 247)
        regrid_smth_call_result_64074 = invoke(stypy.reporting.localization.Localization(__file__, 247, 41), regrid_smth_64059, *[x_64060, y_64061, z_64062, None_64063, None_64064, None_64065, None_64066], **kwargs_64073)
        
        # Obtaining the member '__getitem__' of a type (line 247)
        getitem___64075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 12), regrid_smth_call_result_64074, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 247)
        subscript_call_result_64076 = invoke(stypy.reporting.localization.Localization(__file__, 247, 12), getitem___64075, int_64057)
        
        # Assigning a type to the variable 'tuple_var_assignment_63594' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63594', subscript_call_result_64076)
        
        # Assigning a Subscript to a Name (line 247):
        
        # Obtaining the type of the subscript
        int_64077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 12), 'int')
        
        # Call to regrid_smth(...): (line 247)
        # Processing the call arguments (line 247)
        # Getting the type of 'x' (line 248)
        x_64080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'x', False)
        # Getting the type of 'y' (line 248)
        y_64081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 19), 'y', False)
        # Getting the type of 'z' (line 248)
        z_64082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 22), 'z', False)
        # Getting the type of 'None' (line 248)
        None_64083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 25), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 31), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 37), 'None', False)
        # Getting the type of 'None' (line 248)
        None_64086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 43), 'None', False)
        # Processing the call keyword arguments (line 247)
        # Getting the type of 'kx' (line 249)
        kx_64087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 19), 'kx', False)
        keyword_64088 = kx_64087
        # Getting the type of 'ky' (line 249)
        ky_64089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 26), 'ky', False)
        keyword_64090 = ky_64089
        float_64091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 32), 'float')
        keyword_64092 = float_64091
        kwargs_64093 = {'ky': keyword_64090, 'kx': keyword_64088, 's': keyword_64092}
        # Getting the type of 'dfitpack' (line 247)
        dfitpack_64078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 41), 'dfitpack', False)
        # Obtaining the member 'regrid_smth' of a type (line 247)
        regrid_smth_64079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 41), dfitpack_64078, 'regrid_smth')
        # Calling regrid_smth(args, kwargs) (line 247)
        regrid_smth_call_result_64094 = invoke(stypy.reporting.localization.Localization(__file__, 247, 41), regrid_smth_64079, *[x_64080, y_64081, z_64082, None_64083, None_64084, None_64085, None_64086], **kwargs_64093)
        
        # Obtaining the member '__getitem__' of a type (line 247)
        getitem___64095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 12), regrid_smth_call_result_64094, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 247)
        subscript_call_result_64096 = invoke(stypy.reporting.localization.Localization(__file__, 247, 12), getitem___64095, int_64077)
        
        # Assigning a type to the variable 'tuple_var_assignment_63595' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63595', subscript_call_result_64096)
        
        # Assigning a Name to a Name (line 247):
        # Getting the type of 'tuple_var_assignment_63589' (line 247)
        tuple_var_assignment_63589_64097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63589')
        # Assigning a type to the variable 'nx' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'nx', tuple_var_assignment_63589_64097)
        
        # Assigning a Name to a Name (line 247):
        # Getting the type of 'tuple_var_assignment_63590' (line 247)
        tuple_var_assignment_63590_64098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63590')
        # Assigning a type to the variable 'tx' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 16), 'tx', tuple_var_assignment_63590_64098)
        
        # Assigning a Name to a Name (line 247):
        # Getting the type of 'tuple_var_assignment_63591' (line 247)
        tuple_var_assignment_63591_64099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63591')
        # Assigning a type to the variable 'ny' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 20), 'ny', tuple_var_assignment_63591_64099)
        
        # Assigning a Name to a Name (line 247):
        # Getting the type of 'tuple_var_assignment_63592' (line 247)
        tuple_var_assignment_63592_64100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63592')
        # Assigning a type to the variable 'ty' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 24), 'ty', tuple_var_assignment_63592_64100)
        
        # Assigning a Name to a Name (line 247):
        # Getting the type of 'tuple_var_assignment_63593' (line 247)
        tuple_var_assignment_63593_64101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63593')
        # Assigning a type to the variable 'c' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 28), 'c', tuple_var_assignment_63593_64101)
        
        # Assigning a Name to a Name (line 247):
        # Getting the type of 'tuple_var_assignment_63594' (line 247)
        tuple_var_assignment_63594_64102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63594')
        # Assigning a type to the variable 'fp' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 31), 'fp', tuple_var_assignment_63594_64102)
        
        # Assigning a Name to a Name (line 247):
        # Getting the type of 'tuple_var_assignment_63595' (line 247)
        tuple_var_assignment_63595_64103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'tuple_var_assignment_63595')
        # Assigning a type to the variable 'ier' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 35), 'ier', tuple_var_assignment_63595_64103)
        
        # Assigning a Tuple to a Attribute (line 250):
        
        # Assigning a Tuple to a Attribute (line 250):
        
        # Obtaining an instance of the builtin type 'tuple' (line 250)
        tuple_64104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 250)
        # Adding element type (line 250)
        
        # Obtaining the type of the subscript
        # Getting the type of 'nx' (line 250)
        nx_64105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 28), 'nx')
        slice_64106 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 250, 24), None, nx_64105, None)
        # Getting the type of 'tx' (line 250)
        tx_64107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 24), 'tx')
        # Obtaining the member '__getitem__' of a type (line 250)
        getitem___64108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 24), tx_64107, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 250)
        subscript_call_result_64109 = invoke(stypy.reporting.localization.Localization(__file__, 250, 24), getitem___64108, slice_64106)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 250, 24), tuple_64104, subscript_call_result_64109)
        # Adding element type (line 250)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ny' (line 250)
        ny_64110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 37), 'ny')
        slice_64111 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 250, 33), None, ny_64110, None)
        # Getting the type of 'ty' (line 250)
        ty_64112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 33), 'ty')
        # Obtaining the member '__getitem__' of a type (line 250)
        getitem___64113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 33), ty_64112, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 250)
        subscript_call_result_64114 = invoke(stypy.reporting.localization.Localization(__file__, 250, 33), getitem___64113, slice_64111)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 250, 24), tuple_64104, subscript_call_result_64114)
        # Adding element type (line 250)
        
        # Obtaining the type of the subscript
        # Getting the type of 'nx' (line 250)
        nx_64115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 46), 'nx')
        # Getting the type of 'kx' (line 250)
        kx_64116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 51), 'kx')
        # Applying the binary operator '-' (line 250)
        result_sub_64117 = python_operator(stypy.reporting.localization.Localization(__file__, 250, 46), '-', nx_64115, kx_64116)
        
        int_64118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 56), 'int')
        # Applying the binary operator '-' (line 250)
        result_sub_64119 = python_operator(stypy.reporting.localization.Localization(__file__, 250, 54), '-', result_sub_64117, int_64118)
        
        # Getting the type of 'ny' (line 250)
        ny_64120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 62), 'ny')
        # Getting the type of 'ky' (line 250)
        ky_64121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 67), 'ky')
        # Applying the binary operator '-' (line 250)
        result_sub_64122 = python_operator(stypy.reporting.localization.Localization(__file__, 250, 62), '-', ny_64120, ky_64121)
        
        int_64123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 72), 'int')
        # Applying the binary operator '-' (line 250)
        result_sub_64124 = python_operator(stypy.reporting.localization.Localization(__file__, 250, 70), '-', result_sub_64122, int_64123)
        
        # Applying the binary operator '*' (line 250)
        result_mul_64125 = python_operator(stypy.reporting.localization.Localization(__file__, 250, 45), '*', result_sub_64119, result_sub_64124)
        
        slice_64126 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 250, 42), None, result_mul_64125, None)
        # Getting the type of 'c' (line 250)
        c_64127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 42), 'c')
        # Obtaining the member '__getitem__' of a type (line 250)
        getitem___64128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 42), c_64127, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 250)
        subscript_call_result_64129 = invoke(stypy.reporting.localization.Localization(__file__, 250, 42), getitem___64128, slice_64126)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 250, 24), tuple_64104, subscript_call_result_64129)
        # Adding element type (line 250)
        # Getting the type of 'kx' (line 251)
        kx_64130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 24), 'kx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 250, 24), tuple_64104, kx_64130)
        # Adding element type (line 250)
        # Getting the type of 'ky' (line 251)
        ky_64131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 28), 'ky')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 250, 24), tuple_64104, ky_64131)
        
        # Getting the type of 'self' (line 250)
        self_64132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 12), 'self')
        # Setting the type of the member 'tck' of a type (line 250)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 250, 12), self_64132, 'tck', tuple_64104)
        # SSA join for if statement (line 243)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 253):
        
        # Assigning a Name to a Attribute (line 253):
        # Getting the type of 'bounds_error' (line 253)
        bounds_error_64133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 28), 'bounds_error')
        # Getting the type of 'self' (line 253)
        self_64134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 8), 'self')
        # Setting the type of the member 'bounds_error' of a type (line 253)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 8), self_64134, 'bounds_error', bounds_error_64133)
        
        # Assigning a Name to a Attribute (line 254):
        
        # Assigning a Name to a Attribute (line 254):
        # Getting the type of 'fill_value' (line 254)
        fill_value_64135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 26), 'fill_value')
        # Getting the type of 'self' (line 254)
        self_64136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'self')
        # Setting the type of the member 'fill_value' of a type (line 254)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 8), self_64136, 'fill_value', fill_value_64135)
        
        # Assigning a ListComp to a Tuple (line 255):
        
        # Assigning a Subscript to a Name (line 255):
        
        # Obtaining the type of the subscript
        int_64137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 8), 'int')
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Obtaining an instance of the builtin type 'tuple' (line 255)
        tuple_64144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 64), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 255)
        # Adding element type (line 255)
        # Getting the type of 'x' (line 255)
        x_64145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 64), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 64), tuple_64144, x_64145)
        # Adding element type (line 255)
        # Getting the type of 'y' (line 255)
        y_64146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 67), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 64), tuple_64144, y_64146)
        # Adding element type (line 255)
        # Getting the type of 'z' (line 255)
        z_64147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 70), 'z')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 64), tuple_64144, z_64147)
        
        comprehension_64148 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 34), tuple_64144)
        # Assigning a type to the variable 'a' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 34), 'a', comprehension_64148)
        
        # Call to array(...): (line 255)
        # Processing the call arguments (line 255)
        # Getting the type of 'a' (line 255)
        a_64139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 40), 'a', False)
        # Processing the call keyword arguments (line 255)
        # Getting the type of 'copy' (line 255)
        copy_64140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 48), 'copy', False)
        keyword_64141 = copy_64140
        kwargs_64142 = {'copy': keyword_64141}
        # Getting the type of 'array' (line 255)
        array_64138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 34), 'array', False)
        # Calling array(args, kwargs) (line 255)
        array_call_result_64143 = invoke(stypy.reporting.localization.Localization(__file__, 255, 34), array_64138, *[a_64139], **kwargs_64142)
        
        list_64149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 34), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 34), list_64149, array_call_result_64143)
        # Obtaining the member '__getitem__' of a type (line 255)
        getitem___64150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 8), list_64149, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 255)
        subscript_call_result_64151 = invoke(stypy.reporting.localization.Localization(__file__, 255, 8), getitem___64150, int_64137)
        
        # Assigning a type to the variable 'tuple_var_assignment_63596' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'tuple_var_assignment_63596', subscript_call_result_64151)
        
        # Assigning a Subscript to a Name (line 255):
        
        # Obtaining the type of the subscript
        int_64152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 8), 'int')
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Obtaining an instance of the builtin type 'tuple' (line 255)
        tuple_64159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 64), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 255)
        # Adding element type (line 255)
        # Getting the type of 'x' (line 255)
        x_64160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 64), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 64), tuple_64159, x_64160)
        # Adding element type (line 255)
        # Getting the type of 'y' (line 255)
        y_64161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 67), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 64), tuple_64159, y_64161)
        # Adding element type (line 255)
        # Getting the type of 'z' (line 255)
        z_64162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 70), 'z')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 64), tuple_64159, z_64162)
        
        comprehension_64163 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 34), tuple_64159)
        # Assigning a type to the variable 'a' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 34), 'a', comprehension_64163)
        
        # Call to array(...): (line 255)
        # Processing the call arguments (line 255)
        # Getting the type of 'a' (line 255)
        a_64154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 40), 'a', False)
        # Processing the call keyword arguments (line 255)
        # Getting the type of 'copy' (line 255)
        copy_64155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 48), 'copy', False)
        keyword_64156 = copy_64155
        kwargs_64157 = {'copy': keyword_64156}
        # Getting the type of 'array' (line 255)
        array_64153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 34), 'array', False)
        # Calling array(args, kwargs) (line 255)
        array_call_result_64158 = invoke(stypy.reporting.localization.Localization(__file__, 255, 34), array_64153, *[a_64154], **kwargs_64157)
        
        list_64164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 34), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 34), list_64164, array_call_result_64158)
        # Obtaining the member '__getitem__' of a type (line 255)
        getitem___64165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 8), list_64164, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 255)
        subscript_call_result_64166 = invoke(stypy.reporting.localization.Localization(__file__, 255, 8), getitem___64165, int_64152)
        
        # Assigning a type to the variable 'tuple_var_assignment_63597' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'tuple_var_assignment_63597', subscript_call_result_64166)
        
        # Assigning a Subscript to a Name (line 255):
        
        # Obtaining the type of the subscript
        int_64167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 8), 'int')
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Obtaining an instance of the builtin type 'tuple' (line 255)
        tuple_64174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 64), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 255)
        # Adding element type (line 255)
        # Getting the type of 'x' (line 255)
        x_64175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 64), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 64), tuple_64174, x_64175)
        # Adding element type (line 255)
        # Getting the type of 'y' (line 255)
        y_64176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 67), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 64), tuple_64174, y_64176)
        # Adding element type (line 255)
        # Getting the type of 'z' (line 255)
        z_64177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 70), 'z')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 64), tuple_64174, z_64177)
        
        comprehension_64178 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 34), tuple_64174)
        # Assigning a type to the variable 'a' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 34), 'a', comprehension_64178)
        
        # Call to array(...): (line 255)
        # Processing the call arguments (line 255)
        # Getting the type of 'a' (line 255)
        a_64169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 40), 'a', False)
        # Processing the call keyword arguments (line 255)
        # Getting the type of 'copy' (line 255)
        copy_64170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 48), 'copy', False)
        keyword_64171 = copy_64170
        kwargs_64172 = {'copy': keyword_64171}
        # Getting the type of 'array' (line 255)
        array_64168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 34), 'array', False)
        # Calling array(args, kwargs) (line 255)
        array_call_result_64173 = invoke(stypy.reporting.localization.Localization(__file__, 255, 34), array_64168, *[a_64169], **kwargs_64172)
        
        list_64179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 34), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 34), list_64179, array_call_result_64173)
        # Obtaining the member '__getitem__' of a type (line 255)
        getitem___64180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 8), list_64179, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 255)
        subscript_call_result_64181 = invoke(stypy.reporting.localization.Localization(__file__, 255, 8), getitem___64180, int_64167)
        
        # Assigning a type to the variable 'tuple_var_assignment_63598' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'tuple_var_assignment_63598', subscript_call_result_64181)
        
        # Assigning a Name to a Attribute (line 255):
        # Getting the type of 'tuple_var_assignment_63596' (line 255)
        tuple_var_assignment_63596_64182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'tuple_var_assignment_63596')
        # Getting the type of 'self' (line 255)
        self_64183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'self')
        # Setting the type of the member 'x' of a type (line 255)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 8), self_64183, 'x', tuple_var_assignment_63596_64182)
        
        # Assigning a Name to a Attribute (line 255):
        # Getting the type of 'tuple_var_assignment_63597' (line 255)
        tuple_var_assignment_63597_64184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'tuple_var_assignment_63597')
        # Getting the type of 'self' (line 255)
        self_64185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 16), 'self')
        # Setting the type of the member 'y' of a type (line 255)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 16), self_64185, 'y', tuple_var_assignment_63597_64184)
        
        # Assigning a Name to a Attribute (line 255):
        # Getting the type of 'tuple_var_assignment_63598' (line 255)
        tuple_var_assignment_63598_64186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'tuple_var_assignment_63598')
        # Getting the type of 'self' (line 255)
        self_64187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 24), 'self')
        # Setting the type of the member 'z' of a type (line 255)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 24), self_64187, 'z', tuple_var_assignment_63598_64186)
        
        # Assigning a Tuple to a Tuple (line 257):
        
        # Assigning a Call to a Name (line 257):
        
        # Call to amin(...): (line 257)
        # Processing the call arguments (line 257)
        # Getting the type of 'x' (line 257)
        x_64190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 41), 'x', False)
        # Processing the call keyword arguments (line 257)
        kwargs_64191 = {}
        # Getting the type of 'np' (line 257)
        np_64188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 33), 'np', False)
        # Obtaining the member 'amin' of a type (line 257)
        amin_64189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 33), np_64188, 'amin')
        # Calling amin(args, kwargs) (line 257)
        amin_call_result_64192 = invoke(stypy.reporting.localization.Localization(__file__, 257, 33), amin_64189, *[x_64190], **kwargs_64191)
        
        # Assigning a type to the variable 'tuple_assignment_63599' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'tuple_assignment_63599', amin_call_result_64192)
        
        # Assigning a Call to a Name (line 257):
        
        # Call to amax(...): (line 257)
        # Processing the call arguments (line 257)
        # Getting the type of 'x' (line 257)
        x_64195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 53), 'x', False)
        # Processing the call keyword arguments (line 257)
        kwargs_64196 = {}
        # Getting the type of 'np' (line 257)
        np_64193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 45), 'np', False)
        # Obtaining the member 'amax' of a type (line 257)
        amax_64194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 45), np_64193, 'amax')
        # Calling amax(args, kwargs) (line 257)
        amax_call_result_64197 = invoke(stypy.reporting.localization.Localization(__file__, 257, 45), amax_64194, *[x_64195], **kwargs_64196)
        
        # Assigning a type to the variable 'tuple_assignment_63600' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'tuple_assignment_63600', amax_call_result_64197)
        
        # Assigning a Name to a Attribute (line 257):
        # Getting the type of 'tuple_assignment_63599' (line 257)
        tuple_assignment_63599_64198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'tuple_assignment_63599')
        # Getting the type of 'self' (line 257)
        self_64199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'self')
        # Setting the type of the member 'x_min' of a type (line 257)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 8), self_64199, 'x_min', tuple_assignment_63599_64198)
        
        # Assigning a Name to a Attribute (line 257):
        # Getting the type of 'tuple_assignment_63600' (line 257)
        tuple_assignment_63600_64200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'tuple_assignment_63600')
        # Getting the type of 'self' (line 257)
        self_64201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 20), 'self')
        # Setting the type of the member 'x_max' of a type (line 257)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 20), self_64201, 'x_max', tuple_assignment_63600_64200)
        
        # Assigning a Tuple to a Tuple (line 258):
        
        # Assigning a Call to a Name (line 258):
        
        # Call to amin(...): (line 258)
        # Processing the call arguments (line 258)
        # Getting the type of 'y' (line 258)
        y_64204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 41), 'y', False)
        # Processing the call keyword arguments (line 258)
        kwargs_64205 = {}
        # Getting the type of 'np' (line 258)
        np_64202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 33), 'np', False)
        # Obtaining the member 'amin' of a type (line 258)
        amin_64203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 33), np_64202, 'amin')
        # Calling amin(args, kwargs) (line 258)
        amin_call_result_64206 = invoke(stypy.reporting.localization.Localization(__file__, 258, 33), amin_64203, *[y_64204], **kwargs_64205)
        
        # Assigning a type to the variable 'tuple_assignment_63601' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'tuple_assignment_63601', amin_call_result_64206)
        
        # Assigning a Call to a Name (line 258):
        
        # Call to amax(...): (line 258)
        # Processing the call arguments (line 258)
        # Getting the type of 'y' (line 258)
        y_64209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 53), 'y', False)
        # Processing the call keyword arguments (line 258)
        kwargs_64210 = {}
        # Getting the type of 'np' (line 258)
        np_64207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 45), 'np', False)
        # Obtaining the member 'amax' of a type (line 258)
        amax_64208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 45), np_64207, 'amax')
        # Calling amax(args, kwargs) (line 258)
        amax_call_result_64211 = invoke(stypy.reporting.localization.Localization(__file__, 258, 45), amax_64208, *[y_64209], **kwargs_64210)
        
        # Assigning a type to the variable 'tuple_assignment_63602' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'tuple_assignment_63602', amax_call_result_64211)
        
        # Assigning a Name to a Attribute (line 258):
        # Getting the type of 'tuple_assignment_63601' (line 258)
        tuple_assignment_63601_64212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'tuple_assignment_63601')
        # Getting the type of 'self' (line 258)
        self_64213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'self')
        # Setting the type of the member 'y_min' of a type (line 258)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 8), self_64213, 'y_min', tuple_assignment_63601_64212)
        
        # Assigning a Name to a Attribute (line 258):
        # Getting the type of 'tuple_assignment_63602' (line 258)
        tuple_assignment_63602_64214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'tuple_assignment_63602')
        # Getting the type of 'self' (line 258)
        self_64215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 20), 'self')
        # Setting the type of the member 'y_max' of a type (line 258)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 20), self_64215, 'y_max', tuple_assignment_63602_64214)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_64216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 32), 'int')
        int_64217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 38), 'int')
        # Getting the type of 'False' (line 260)
        False_64218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 55), 'False')
        defaults = [int_64216, int_64217, False_64218]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 260, 4, False)
        # Assigning a type to the variable 'self' (line 261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        interp2d.__call__.__dict__.__setitem__('stypy_localization', localization)
        interp2d.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        interp2d.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        interp2d.__call__.__dict__.__setitem__('stypy_function_name', 'interp2d.__call__')
        interp2d.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'dx', 'dy', 'assume_sorted'])
        interp2d.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        interp2d.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        interp2d.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        interp2d.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        interp2d.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        interp2d.__call__.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp2d.__call__', ['x', 'y', 'dx', 'dy', 'assume_sorted'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'y', 'dx', 'dy', 'assume_sorted'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_64219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 283, (-1)), 'str', 'Interpolate the function.\n\n        Parameters\n        ----------\n        x : 1D array\n            x-coordinates of the mesh on which to interpolate.\n        y : 1D array\n            y-coordinates of the mesh on which to interpolate.\n        dx : int >= 0, < kx\n            Order of partial derivatives in x.\n        dy : int >= 0, < ky\n            Order of partial derivatives in y.\n        assume_sorted : bool, optional\n            If False, values of `x` and `y` can be in any order and they are\n            sorted first.\n            If True, `x` and `y` have to be arrays of monotonically\n            increasing values.\n\n        Returns\n        -------\n        z : 2D array with shape (len(y), len(x))\n            The interpolated values.\n        ')
        
        # Assigning a Call to a Name (line 285):
        
        # Assigning a Call to a Name (line 285):
        
        # Call to atleast_1d(...): (line 285)
        # Processing the call arguments (line 285)
        # Getting the type of 'x' (line 285)
        x_64221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 23), 'x', False)
        # Processing the call keyword arguments (line 285)
        kwargs_64222 = {}
        # Getting the type of 'atleast_1d' (line 285)
        atleast_1d_64220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 12), 'atleast_1d', False)
        # Calling atleast_1d(args, kwargs) (line 285)
        atleast_1d_call_result_64223 = invoke(stypy.reporting.localization.Localization(__file__, 285, 12), atleast_1d_64220, *[x_64221], **kwargs_64222)
        
        # Assigning a type to the variable 'x' (line 285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 285, 8), 'x', atleast_1d_call_result_64223)
        
        # Assigning a Call to a Name (line 286):
        
        # Assigning a Call to a Name (line 286):
        
        # Call to atleast_1d(...): (line 286)
        # Processing the call arguments (line 286)
        # Getting the type of 'y' (line 286)
        y_64225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 23), 'y', False)
        # Processing the call keyword arguments (line 286)
        kwargs_64226 = {}
        # Getting the type of 'atleast_1d' (line 286)
        atleast_1d_64224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 12), 'atleast_1d', False)
        # Calling atleast_1d(args, kwargs) (line 286)
        atleast_1d_call_result_64227 = invoke(stypy.reporting.localization.Localization(__file__, 286, 12), atleast_1d_64224, *[y_64225], **kwargs_64226)
        
        # Assigning a type to the variable 'y' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 8), 'y', atleast_1d_call_result_64227)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 288)
        x_64228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 288)
        ndim_64229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 11), x_64228, 'ndim')
        int_64230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, 21), 'int')
        # Applying the binary operator '!=' (line 288)
        result_ne_64231 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 11), '!=', ndim_64229, int_64230)
        
        
        # Getting the type of 'y' (line 288)
        y_64232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 26), 'y')
        # Obtaining the member 'ndim' of a type (line 288)
        ndim_64233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 26), y_64232, 'ndim')
        int_64234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 288, 36), 'int')
        # Applying the binary operator '!=' (line 288)
        result_ne_64235 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 26), '!=', ndim_64233, int_64234)
        
        # Applying the binary operator 'or' (line 288)
        result_or_keyword_64236 = python_operator(stypy.reporting.localization.Localization(__file__, 288, 11), 'or', result_ne_64231, result_ne_64235)
        
        # Testing the type of an if condition (line 288)
        if_condition_64237 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 288, 8), result_or_keyword_64236)
        # Assigning a type to the variable 'if_condition_64237' (line 288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 8), 'if_condition_64237', if_condition_64237)
        # SSA begins for if statement (line 288)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 289)
        # Processing the call arguments (line 289)
        str_64239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 289, 29), 'str', 'x and y should both be 1-D arrays')
        # Processing the call keyword arguments (line 289)
        kwargs_64240 = {}
        # Getting the type of 'ValueError' (line 289)
        ValueError_64238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 289)
        ValueError_call_result_64241 = invoke(stypy.reporting.localization.Localization(__file__, 289, 18), ValueError_64238, *[str_64239], **kwargs_64240)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 289, 12), ValueError_call_result_64241, 'raise parameter', BaseException)
        # SSA join for if statement (line 288)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'assume_sorted' (line 291)
        assume_sorted_64242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 15), 'assume_sorted')
        # Applying the 'not' unary operator (line 291)
        result_not__64243 = python_operator(stypy.reporting.localization.Localization(__file__, 291, 11), 'not', assume_sorted_64242)
        
        # Testing the type of an if condition (line 291)
        if_condition_64244 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 291, 8), result_not__64243)
        # Assigning a type to the variable 'if_condition_64244' (line 291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 8), 'if_condition_64244', if_condition_64244)
        # SSA begins for if statement (line 291)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 292):
        
        # Assigning a Call to a Name (line 292):
        
        # Call to sort(...): (line 292)
        # Processing the call arguments (line 292)
        # Getting the type of 'x' (line 292)
        x_64247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 24), 'x', False)
        # Processing the call keyword arguments (line 292)
        kwargs_64248 = {}
        # Getting the type of 'np' (line 292)
        np_64245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 16), 'np', False)
        # Obtaining the member 'sort' of a type (line 292)
        sort_64246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 16), np_64245, 'sort')
        # Calling sort(args, kwargs) (line 292)
        sort_call_result_64249 = invoke(stypy.reporting.localization.Localization(__file__, 292, 16), sort_64246, *[x_64247], **kwargs_64248)
        
        # Assigning a type to the variable 'x' (line 292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 12), 'x', sort_call_result_64249)
        
        # Assigning a Call to a Name (line 293):
        
        # Assigning a Call to a Name (line 293):
        
        # Call to sort(...): (line 293)
        # Processing the call arguments (line 293)
        # Getting the type of 'y' (line 293)
        y_64252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 24), 'y', False)
        # Processing the call keyword arguments (line 293)
        kwargs_64253 = {}
        # Getting the type of 'np' (line 293)
        np_64250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 16), 'np', False)
        # Obtaining the member 'sort' of a type (line 293)
        sort_64251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 16), np_64250, 'sort')
        # Calling sort(args, kwargs) (line 293)
        sort_call_result_64254 = invoke(stypy.reporting.localization.Localization(__file__, 293, 16), sort_64251, *[y_64252], **kwargs_64253)
        
        # Assigning a type to the variable 'y' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 12), 'y', sort_call_result_64254)
        # SSA join for if statement (line 291)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 295)
        self_64255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 11), 'self')
        # Obtaining the member 'bounds_error' of a type (line 295)
        bounds_error_64256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 11), self_64255, 'bounds_error')
        
        # Getting the type of 'self' (line 295)
        self_64257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 32), 'self')
        # Obtaining the member 'fill_value' of a type (line 295)
        fill_value_64258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 32), self_64257, 'fill_value')
        # Getting the type of 'None' (line 295)
        None_64259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 55), 'None')
        # Applying the binary operator 'isnot' (line 295)
        result_is_not_64260 = python_operator(stypy.reporting.localization.Localization(__file__, 295, 32), 'isnot', fill_value_64258, None_64259)
        
        # Applying the binary operator 'or' (line 295)
        result_or_keyword_64261 = python_operator(stypy.reporting.localization.Localization(__file__, 295, 11), 'or', bounds_error_64256, result_is_not_64260)
        
        # Testing the type of an if condition (line 295)
        if_condition_64262 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 295, 8), result_or_keyword_64261)
        # Assigning a type to the variable 'if_condition_64262' (line 295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 8), 'if_condition_64262', if_condition_64262)
        # SSA begins for if statement (line 295)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 296):
        
        # Assigning a BinOp to a Name (line 296):
        
        # Getting the type of 'x' (line 296)
        x_64263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 31), 'x')
        # Getting the type of 'self' (line 296)
        self_64264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 35), 'self')
        # Obtaining the member 'x_min' of a type (line 296)
        x_min_64265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 35), self_64264, 'x_min')
        # Applying the binary operator '<' (line 296)
        result_lt_64266 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 31), '<', x_64263, x_min_64265)
        
        
        # Getting the type of 'x' (line 296)
        x_64267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 50), 'x')
        # Getting the type of 'self' (line 296)
        self_64268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 54), 'self')
        # Obtaining the member 'x_max' of a type (line 296)
        x_max_64269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 54), self_64268, 'x_max')
        # Applying the binary operator '>' (line 296)
        result_gt_64270 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 50), '>', x_64267, x_max_64269)
        
        # Applying the binary operator '|' (line 296)
        result_or__64271 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 30), '|', result_lt_64266, result_gt_64270)
        
        # Assigning a type to the variable 'out_of_bounds_x' (line 296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 12), 'out_of_bounds_x', result_or__64271)
        
        # Assigning a BinOp to a Name (line 297):
        
        # Assigning a BinOp to a Name (line 297):
        
        # Getting the type of 'y' (line 297)
        y_64272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 31), 'y')
        # Getting the type of 'self' (line 297)
        self_64273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 35), 'self')
        # Obtaining the member 'y_min' of a type (line 297)
        y_min_64274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 35), self_64273, 'y_min')
        # Applying the binary operator '<' (line 297)
        result_lt_64275 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 31), '<', y_64272, y_min_64274)
        
        
        # Getting the type of 'y' (line 297)
        y_64276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 50), 'y')
        # Getting the type of 'self' (line 297)
        self_64277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 54), 'self')
        # Obtaining the member 'y_max' of a type (line 297)
        y_max_64278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 54), self_64277, 'y_max')
        # Applying the binary operator '>' (line 297)
        result_gt_64279 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 50), '>', y_64276, y_max_64278)
        
        # Applying the binary operator '|' (line 297)
        result_or__64280 = python_operator(stypy.reporting.localization.Localization(__file__, 297, 30), '|', result_lt_64275, result_gt_64279)
        
        # Assigning a type to the variable 'out_of_bounds_y' (line 297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 12), 'out_of_bounds_y', result_or__64280)
        
        # Assigning a Call to a Name (line 299):
        
        # Assigning a Call to a Name (line 299):
        
        # Call to any(...): (line 299)
        # Processing the call arguments (line 299)
        # Getting the type of 'out_of_bounds_x' (line 299)
        out_of_bounds_x_64283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 41), 'out_of_bounds_x', False)
        # Processing the call keyword arguments (line 299)
        kwargs_64284 = {}
        # Getting the type of 'np' (line 299)
        np_64281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 34), 'np', False)
        # Obtaining the member 'any' of a type (line 299)
        any_64282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 34), np_64281, 'any')
        # Calling any(args, kwargs) (line 299)
        any_call_result_64285 = invoke(stypy.reporting.localization.Localization(__file__, 299, 34), any_64282, *[out_of_bounds_x_64283], **kwargs_64284)
        
        # Assigning a type to the variable 'any_out_of_bounds_x' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 12), 'any_out_of_bounds_x', any_call_result_64285)
        
        # Assigning a Call to a Name (line 300):
        
        # Assigning a Call to a Name (line 300):
        
        # Call to any(...): (line 300)
        # Processing the call arguments (line 300)
        # Getting the type of 'out_of_bounds_y' (line 300)
        out_of_bounds_y_64288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 41), 'out_of_bounds_y', False)
        # Processing the call keyword arguments (line 300)
        kwargs_64289 = {}
        # Getting the type of 'np' (line 300)
        np_64286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 34), 'np', False)
        # Obtaining the member 'any' of a type (line 300)
        any_64287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 300, 34), np_64286, 'any')
        # Calling any(args, kwargs) (line 300)
        any_call_result_64290 = invoke(stypy.reporting.localization.Localization(__file__, 300, 34), any_64287, *[out_of_bounds_y_64288], **kwargs_64289)
        
        # Assigning a type to the variable 'any_out_of_bounds_y' (line 300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 300, 12), 'any_out_of_bounds_y', any_call_result_64290)
        # SSA join for if statement (line 295)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 302)
        self_64291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 11), 'self')
        # Obtaining the member 'bounds_error' of a type (line 302)
        bounds_error_64292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 302, 11), self_64291, 'bounds_error')
        
        # Evaluating a boolean operation
        # Getting the type of 'any_out_of_bounds_x' (line 302)
        any_out_of_bounds_x_64293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 34), 'any_out_of_bounds_x')
        # Getting the type of 'any_out_of_bounds_y' (line 302)
        any_out_of_bounds_y_64294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 57), 'any_out_of_bounds_y')
        # Applying the binary operator 'or' (line 302)
        result_or_keyword_64295 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 34), 'or', any_out_of_bounds_x_64293, any_out_of_bounds_y_64294)
        
        # Applying the binary operator 'and' (line 302)
        result_and_keyword_64296 = python_operator(stypy.reporting.localization.Localization(__file__, 302, 11), 'and', bounds_error_64292, result_or_keyword_64295)
        
        # Testing the type of an if condition (line 302)
        if_condition_64297 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 302, 8), result_and_keyword_64296)
        # Assigning a type to the variable 'if_condition_64297' (line 302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 8), 'if_condition_64297', if_condition_64297)
        # SSA begins for if statement (line 302)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 303)
        # Processing the call arguments (line 303)
        str_64299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 303, 29), 'str', 'Values out of range; x must be in %r, y in %r')
        
        # Obtaining an instance of the builtin type 'tuple' (line 304)
        tuple_64300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 304)
        # Adding element type (line 304)
        
        # Obtaining an instance of the builtin type 'tuple' (line 304)
        tuple_64301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 304, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 304)
        # Adding element type (line 304)
        # Getting the type of 'self' (line 304)
        self_64302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 33), 'self', False)
        # Obtaining the member 'x_min' of a type (line 304)
        x_min_64303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 33), self_64302, 'x_min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 304, 33), tuple_64301, x_min_64303)
        # Adding element type (line 304)
        # Getting the type of 'self' (line 304)
        self_64304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 45), 'self', False)
        # Obtaining the member 'x_max' of a type (line 304)
        x_max_64305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 45), self_64304, 'x_max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 304, 33), tuple_64301, x_max_64305)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 304, 32), tuple_64300, tuple_64301)
        # Adding element type (line 304)
        
        # Obtaining an instance of the builtin type 'tuple' (line 305)
        tuple_64306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 305, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 305)
        # Adding element type (line 305)
        # Getting the type of 'self' (line 305)
        self_64307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 33), 'self', False)
        # Obtaining the member 'y_min' of a type (line 305)
        y_min_64308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 33), self_64307, 'y_min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 305, 33), tuple_64306, y_min_64308)
        # Adding element type (line 305)
        # Getting the type of 'self' (line 305)
        self_64309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 45), 'self', False)
        # Obtaining the member 'y_max' of a type (line 305)
        y_max_64310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 45), self_64309, 'y_max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 305, 33), tuple_64306, y_max_64310)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 304, 32), tuple_64300, tuple_64306)
        
        # Applying the binary operator '%' (line 303)
        result_mod_64311 = python_operator(stypy.reporting.localization.Localization(__file__, 303, 29), '%', str_64299, tuple_64300)
        
        # Processing the call keyword arguments (line 303)
        kwargs_64312 = {}
        # Getting the type of 'ValueError' (line 303)
        ValueError_64298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 303)
        ValueError_call_result_64313 = invoke(stypy.reporting.localization.Localization(__file__, 303, 18), ValueError_64298, *[result_mod_64311], **kwargs_64312)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 303, 12), ValueError_call_result_64313, 'raise parameter', BaseException)
        # SSA join for if statement (line 302)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 307):
        
        # Assigning a Call to a Name (line 307):
        
        # Call to bisplev(...): (line 307)
        # Processing the call arguments (line 307)
        # Getting the type of 'x' (line 307)
        x_64316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 28), 'x', False)
        # Getting the type of 'y' (line 307)
        y_64317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 31), 'y', False)
        # Getting the type of 'self' (line 307)
        self_64318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 34), 'self', False)
        # Obtaining the member 'tck' of a type (line 307)
        tck_64319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 34), self_64318, 'tck')
        # Getting the type of 'dx' (line 307)
        dx_64320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 44), 'dx', False)
        # Getting the type of 'dy' (line 307)
        dy_64321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 48), 'dy', False)
        # Processing the call keyword arguments (line 307)
        kwargs_64322 = {}
        # Getting the type of 'fitpack' (line 307)
        fitpack_64314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 12), 'fitpack', False)
        # Obtaining the member 'bisplev' of a type (line 307)
        bisplev_64315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 12), fitpack_64314, 'bisplev')
        # Calling bisplev(args, kwargs) (line 307)
        bisplev_call_result_64323 = invoke(stypy.reporting.localization.Localization(__file__, 307, 12), bisplev_64315, *[x_64316, y_64317, tck_64319, dx_64320, dy_64321], **kwargs_64322)
        
        # Assigning a type to the variable 'z' (line 307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 8), 'z', bisplev_call_result_64323)
        
        # Assigning a Call to a Name (line 308):
        
        # Assigning a Call to a Name (line 308):
        
        # Call to atleast_2d(...): (line 308)
        # Processing the call arguments (line 308)
        # Getting the type of 'z' (line 308)
        z_64325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 23), 'z', False)
        # Processing the call keyword arguments (line 308)
        kwargs_64326 = {}
        # Getting the type of 'atleast_2d' (line 308)
        atleast_2d_64324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 12), 'atleast_2d', False)
        # Calling atleast_2d(args, kwargs) (line 308)
        atleast_2d_call_result_64327 = invoke(stypy.reporting.localization.Localization(__file__, 308, 12), atleast_2d_64324, *[z_64325], **kwargs_64326)
        
        # Assigning a type to the variable 'z' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'z', atleast_2d_call_result_64327)
        
        # Assigning a Call to a Name (line 309):
        
        # Assigning a Call to a Name (line 309):
        
        # Call to transpose(...): (line 309)
        # Processing the call arguments (line 309)
        # Getting the type of 'z' (line 309)
        z_64329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 22), 'z', False)
        # Processing the call keyword arguments (line 309)
        kwargs_64330 = {}
        # Getting the type of 'transpose' (line 309)
        transpose_64328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 12), 'transpose', False)
        # Calling transpose(args, kwargs) (line 309)
        transpose_call_result_64331 = invoke(stypy.reporting.localization.Localization(__file__, 309, 12), transpose_64328, *[z_64329], **kwargs_64330)
        
        # Assigning a type to the variable 'z' (line 309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'z', transpose_call_result_64331)
        
        
        # Getting the type of 'self' (line 311)
        self_64332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 11), 'self')
        # Obtaining the member 'fill_value' of a type (line 311)
        fill_value_64333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 311, 11), self_64332, 'fill_value')
        # Getting the type of 'None' (line 311)
        None_64334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 34), 'None')
        # Applying the binary operator 'isnot' (line 311)
        result_is_not_64335 = python_operator(stypy.reporting.localization.Localization(__file__, 311, 11), 'isnot', fill_value_64333, None_64334)
        
        # Testing the type of an if condition (line 311)
        if_condition_64336 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 311, 8), result_is_not_64335)
        # Assigning a type to the variable 'if_condition_64336' (line 311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 8), 'if_condition_64336', if_condition_64336)
        # SSA begins for if statement (line 311)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'any_out_of_bounds_x' (line 312)
        any_out_of_bounds_x_64337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 15), 'any_out_of_bounds_x')
        # Testing the type of an if condition (line 312)
        if_condition_64338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 312, 12), any_out_of_bounds_x_64337)
        # Assigning a type to the variable 'if_condition_64338' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 12), 'if_condition_64338', if_condition_64338)
        # SSA begins for if statement (line 312)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 313):
        
        # Assigning a Attribute to a Subscript (line 313):
        # Getting the type of 'self' (line 313)
        self_64339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 40), 'self')
        # Obtaining the member 'fill_value' of a type (line 313)
        fill_value_64340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 313, 40), self_64339, 'fill_value')
        # Getting the type of 'z' (line 313)
        z_64341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 16), 'z')
        slice_64342 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 313, 16), None, None, None)
        # Getting the type of 'out_of_bounds_x' (line 313)
        out_of_bounds_x_64343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 21), 'out_of_bounds_x')
        # Storing an element on a container (line 313)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 313, 16), z_64341, ((slice_64342, out_of_bounds_x_64343), fill_value_64340))
        # SSA join for if statement (line 312)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'any_out_of_bounds_y' (line 314)
        any_out_of_bounds_y_64344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 15), 'any_out_of_bounds_y')
        # Testing the type of an if condition (line 314)
        if_condition_64345 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 314, 12), any_out_of_bounds_y_64344)
        # Assigning a type to the variable 'if_condition_64345' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 12), 'if_condition_64345', if_condition_64345)
        # SSA begins for if statement (line 314)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 315):
        
        # Assigning a Attribute to a Subscript (line 315):
        # Getting the type of 'self' (line 315)
        self_64346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 40), 'self')
        # Obtaining the member 'fill_value' of a type (line 315)
        fill_value_64347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 40), self_64346, 'fill_value')
        # Getting the type of 'z' (line 315)
        z_64348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 16), 'z')
        # Getting the type of 'out_of_bounds_y' (line 315)
        out_of_bounds_y_64349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 18), 'out_of_bounds_y')
        slice_64350 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 315, 16), None, None, None)
        # Storing an element on a container (line 315)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 315, 16), z_64348, ((out_of_bounds_y_64349, slice_64350), fill_value_64347))
        # SSA join for if statement (line 314)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 311)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 317)
        # Processing the call arguments (line 317)
        # Getting the type of 'z' (line 317)
        z_64352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 15), 'z', False)
        # Processing the call keyword arguments (line 317)
        kwargs_64353 = {}
        # Getting the type of 'len' (line 317)
        len_64351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 11), 'len', False)
        # Calling len(args, kwargs) (line 317)
        len_call_result_64354 = invoke(stypy.reporting.localization.Localization(__file__, 317, 11), len_64351, *[z_64352], **kwargs_64353)
        
        int_64355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 21), 'int')
        # Applying the binary operator '==' (line 317)
        result_eq_64356 = python_operator(stypy.reporting.localization.Localization(__file__, 317, 11), '==', len_call_result_64354, int_64355)
        
        # Testing the type of an if condition (line 317)
        if_condition_64357 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 317, 8), result_eq_64356)
        # Assigning a type to the variable 'if_condition_64357' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 8), 'if_condition_64357', if_condition_64357)
        # SSA begins for if statement (line 317)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 318):
        
        # Assigning a Subscript to a Name (line 318):
        
        # Obtaining the type of the subscript
        int_64358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 18), 'int')
        # Getting the type of 'z' (line 318)
        z_64359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 16), 'z')
        # Obtaining the member '__getitem__' of a type (line 318)
        getitem___64360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 16), z_64359, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 318)
        subscript_call_result_64361 = invoke(stypy.reporting.localization.Localization(__file__, 318, 16), getitem___64360, int_64358)
        
        # Assigning a type to the variable 'z' (line 318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 'z', subscript_call_result_64361)
        # SSA join for if statement (line 317)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to array(...): (line 319)
        # Processing the call arguments (line 319)
        # Getting the type of 'z' (line 319)
        z_64363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 21), 'z', False)
        # Processing the call keyword arguments (line 319)
        kwargs_64364 = {}
        # Getting the type of 'array' (line 319)
        array_64362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 15), 'array', False)
        # Calling array(args, kwargs) (line 319)
        array_call_result_64365 = invoke(stypy.reporting.localization.Localization(__file__, 319, 15), array_64362, *[z_64363], **kwargs_64364)
        
        # Assigning a type to the variable 'stypy_return_type' (line 319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 319, 8), 'stypy_return_type', array_call_result_64365)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 260)
        stypy_return_type_64366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64366)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_64366


# Assigning a type to the variable 'interp2d' (line 107)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 0), 'interp2d', interp2d)

@norecursion
def _check_broadcast_up_to(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_check_broadcast_up_to'
    module_type_store = module_type_store.open_function_context('_check_broadcast_up_to', 322, 0, False)
    
    # Passed parameters checking function
    _check_broadcast_up_to.stypy_localization = localization
    _check_broadcast_up_to.stypy_type_of_self = None
    _check_broadcast_up_to.stypy_type_store = module_type_store
    _check_broadcast_up_to.stypy_function_name = '_check_broadcast_up_to'
    _check_broadcast_up_to.stypy_param_names_list = ['arr_from', 'shape_to', 'name']
    _check_broadcast_up_to.stypy_varargs_param_name = None
    _check_broadcast_up_to.stypy_kwargs_param_name = None
    _check_broadcast_up_to.stypy_call_defaults = defaults
    _check_broadcast_up_to.stypy_call_varargs = varargs
    _check_broadcast_up_to.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_check_broadcast_up_to', ['arr_from', 'shape_to', 'name'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_check_broadcast_up_to', localization, ['arr_from', 'shape_to', 'name'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_check_broadcast_up_to(...)' code ##################

    str_64367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 4), 'str', 'Helper to check that arr_from broadcasts up to shape_to')
    
    # Assigning a Attribute to a Name (line 324):
    
    # Assigning a Attribute to a Name (line 324):
    # Getting the type of 'arr_from' (line 324)
    arr_from_64368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 17), 'arr_from')
    # Obtaining the member 'shape' of a type (line 324)
    shape_64369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 17), arr_from_64368, 'shape')
    # Assigning a type to the variable 'shape_from' (line 324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 4), 'shape_from', shape_64369)
    
    
    
    # Call to len(...): (line 325)
    # Processing the call arguments (line 325)
    # Getting the type of 'shape_to' (line 325)
    shape_to_64371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 11), 'shape_to', False)
    # Processing the call keyword arguments (line 325)
    kwargs_64372 = {}
    # Getting the type of 'len' (line 325)
    len_64370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 7), 'len', False)
    # Calling len(args, kwargs) (line 325)
    len_call_result_64373 = invoke(stypy.reporting.localization.Localization(__file__, 325, 7), len_64370, *[shape_to_64371], **kwargs_64372)
    
    
    # Call to len(...): (line 325)
    # Processing the call arguments (line 325)
    # Getting the type of 'shape_from' (line 325)
    shape_from_64375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 28), 'shape_from', False)
    # Processing the call keyword arguments (line 325)
    kwargs_64376 = {}
    # Getting the type of 'len' (line 325)
    len_64374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 24), 'len', False)
    # Calling len(args, kwargs) (line 325)
    len_call_result_64377 = invoke(stypy.reporting.localization.Localization(__file__, 325, 24), len_64374, *[shape_from_64375], **kwargs_64376)
    
    # Applying the binary operator '>=' (line 325)
    result_ge_64378 = python_operator(stypy.reporting.localization.Localization(__file__, 325, 7), '>=', len_call_result_64373, len_call_result_64377)
    
    # Testing the type of an if condition (line 325)
    if_condition_64379 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 325, 4), result_ge_64378)
    # Assigning a type to the variable 'if_condition_64379' (line 325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 4), 'if_condition_64379', if_condition_64379)
    # SSA begins for if statement (line 325)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to zip(...): (line 326)
    # Processing the call arguments (line 326)
    
    # Obtaining the type of the subscript
    int_64381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 35), 'int')
    slice_64382 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 326, 24), None, None, int_64381)
    # Getting the type of 'shape_to' (line 326)
    shape_to_64383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 24), 'shape_to', False)
    # Obtaining the member '__getitem__' of a type (line 326)
    getitem___64384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 24), shape_to_64383, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 326)
    subscript_call_result_64385 = invoke(stypy.reporting.localization.Localization(__file__, 326, 24), getitem___64384, slice_64382)
    
    
    # Obtaining the type of the subscript
    int_64386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 53), 'int')
    slice_64387 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 326, 40), None, None, int_64386)
    # Getting the type of 'shape_from' (line 326)
    shape_from_64388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 40), 'shape_from', False)
    # Obtaining the member '__getitem__' of a type (line 326)
    getitem___64389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 40), shape_from_64388, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 326)
    subscript_call_result_64390 = invoke(stypy.reporting.localization.Localization(__file__, 326, 40), getitem___64389, slice_64387)
    
    # Processing the call keyword arguments (line 326)
    kwargs_64391 = {}
    # Getting the type of 'zip' (line 326)
    zip_64380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 20), 'zip', False)
    # Calling zip(args, kwargs) (line 326)
    zip_call_result_64392 = invoke(stypy.reporting.localization.Localization(__file__, 326, 20), zip_64380, *[subscript_call_result_64385, subscript_call_result_64390], **kwargs_64391)
    
    # Testing the type of a for loop iterable (line 326)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 326, 8), zip_call_result_64392)
    # Getting the type of the for loop variable (line 326)
    for_loop_var_64393 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 326, 8), zip_call_result_64392)
    # Assigning a type to the variable 't' (line 326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 8), 't', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 326, 8), for_loop_var_64393))
    # Assigning a type to the variable 'f' (line 326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 8), 'f', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 326, 8), for_loop_var_64393))
    # SSA begins for a for statement (line 326)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'f' (line 327)
    f_64394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 15), 'f')
    int_64395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 20), 'int')
    # Applying the binary operator '!=' (line 327)
    result_ne_64396 = python_operator(stypy.reporting.localization.Localization(__file__, 327, 15), '!=', f_64394, int_64395)
    
    
    # Getting the type of 'f' (line 327)
    f_64397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 26), 'f')
    # Getting the type of 't' (line 327)
    t_64398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 31), 't')
    # Applying the binary operator '!=' (line 327)
    result_ne_64399 = python_operator(stypy.reporting.localization.Localization(__file__, 327, 26), '!=', f_64397, t_64398)
    
    # Applying the binary operator 'and' (line 327)
    result_and_keyword_64400 = python_operator(stypy.reporting.localization.Localization(__file__, 327, 15), 'and', result_ne_64396, result_ne_64399)
    
    # Testing the type of an if condition (line 327)
    if_condition_64401 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 327, 12), result_and_keyword_64400)
    # Assigning a type to the variable 'if_condition_64401' (line 327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 12), 'if_condition_64401', if_condition_64401)
    # SSA begins for if statement (line 327)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 327)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of a for statement (line 326)
    module_type_store.open_ssa_branch('for loop else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'arr_from' (line 330)
    arr_from_64402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 15), 'arr_from')
    # Obtaining the member 'size' of a type (line 330)
    size_64403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 330, 15), arr_from_64402, 'size')
    int_64404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 32), 'int')
    # Applying the binary operator '!=' (line 330)
    result_ne_64405 = python_operator(stypy.reporting.localization.Localization(__file__, 330, 15), '!=', size_64403, int_64404)
    
    
    # Getting the type of 'arr_from' (line 330)
    arr_from_64406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 38), 'arr_from')
    # Obtaining the member 'shape' of a type (line 330)
    shape_64407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 330, 38), arr_from_64406, 'shape')
    # Getting the type of 'shape_to' (line 330)
    shape_to_64408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 56), 'shape_to')
    # Applying the binary operator '!=' (line 330)
    result_ne_64409 = python_operator(stypy.reporting.localization.Localization(__file__, 330, 38), '!=', shape_64407, shape_to_64408)
    
    # Applying the binary operator 'and' (line 330)
    result_and_keyword_64410 = python_operator(stypy.reporting.localization.Localization(__file__, 330, 15), 'and', result_ne_64405, result_ne_64409)
    
    # Testing the type of an if condition (line 330)
    if_condition_64411 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 330, 12), result_and_keyword_64410)
    # Assigning a type to the variable 'if_condition_64411' (line 330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 12), 'if_condition_64411', if_condition_64411)
    # SSA begins for if statement (line 330)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 331):
    
    # Assigning a BinOp to a Name (line 331):
    
    # Call to ones(...): (line 331)
    # Processing the call arguments (line 331)
    # Getting the type of 'shape_to' (line 331)
    shape_to_64414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 35), 'shape_to', False)
    # Getting the type of 'arr_from' (line 331)
    arr_from_64415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 45), 'arr_from', False)
    # Obtaining the member 'dtype' of a type (line 331)
    dtype_64416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 45), arr_from_64415, 'dtype')
    # Processing the call keyword arguments (line 331)
    kwargs_64417 = {}
    # Getting the type of 'np' (line 331)
    np_64412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 27), 'np', False)
    # Obtaining the member 'ones' of a type (line 331)
    ones_64413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 27), np_64412, 'ones')
    # Calling ones(args, kwargs) (line 331)
    ones_call_result_64418 = invoke(stypy.reporting.localization.Localization(__file__, 331, 27), ones_64413, *[shape_to_64414, dtype_64416], **kwargs_64417)
    
    # Getting the type of 'arr_from' (line 331)
    arr_from_64419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 63), 'arr_from')
    # Applying the binary operator '*' (line 331)
    result_mul_64420 = python_operator(stypy.reporting.localization.Localization(__file__, 331, 27), '*', ones_call_result_64418, arr_from_64419)
    
    # Assigning a type to the variable 'arr_from' (line 331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 16), 'arr_from', result_mul_64420)
    # SSA join for if statement (line 330)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to ravel(...): (line 332)
    # Processing the call keyword arguments (line 332)
    kwargs_64423 = {}
    # Getting the type of 'arr_from' (line 332)
    arr_from_64421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 19), 'arr_from', False)
    # Obtaining the member 'ravel' of a type (line 332)
    ravel_64422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 19), arr_from_64421, 'ravel')
    # Calling ravel(args, kwargs) (line 332)
    ravel_call_result_64424 = invoke(stypy.reporting.localization.Localization(__file__, 332, 19), ravel_64422, *[], **kwargs_64423)
    
    # Assigning a type to the variable 'stypy_return_type' (line 332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 12), 'stypy_return_type', ravel_call_result_64424)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 325)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to ValueError(...): (line 334)
    # Processing the call arguments (line 334)
    str_64426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 21), 'str', '%s argument must be able to broadcast up to shape %s but had shape %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 336)
    tuple_64427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 336)
    # Adding element type (line 336)
    # Getting the type of 'name' (line 336)
    name_64428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 24), 'name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 336, 24), tuple_64427, name_64428)
    # Adding element type (line 336)
    # Getting the type of 'shape_to' (line 336)
    shape_to_64429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 30), 'shape_to', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 336, 24), tuple_64427, shape_to_64429)
    # Adding element type (line 336)
    # Getting the type of 'shape_from' (line 336)
    shape_from_64430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 40), 'shape_from', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 336, 24), tuple_64427, shape_from_64430)
    
    # Applying the binary operator '%' (line 334)
    result_mod_64431 = python_operator(stypy.reporting.localization.Localization(__file__, 334, 21), '%', str_64426, tuple_64427)
    
    # Processing the call keyword arguments (line 334)
    kwargs_64432 = {}
    # Getting the type of 'ValueError' (line 334)
    ValueError_64425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 10), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 334)
    ValueError_call_result_64433 = invoke(stypy.reporting.localization.Localization(__file__, 334, 10), ValueError_64425, *[result_mod_64431], **kwargs_64432)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 334, 4), ValueError_call_result_64433, 'raise parameter', BaseException)
    
    # ################# End of '_check_broadcast_up_to(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_check_broadcast_up_to' in the type store
    # Getting the type of 'stypy_return_type' (line 322)
    stypy_return_type_64434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_64434)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_check_broadcast_up_to'
    return stypy_return_type_64434

# Assigning a type to the variable '_check_broadcast_up_to' (line 322)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 0), '_check_broadcast_up_to', _check_broadcast_up_to)

@norecursion
def _do_extrapolate(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_do_extrapolate'
    module_type_store = module_type_store.open_function_context('_do_extrapolate', 339, 0, False)
    
    # Passed parameters checking function
    _do_extrapolate.stypy_localization = localization
    _do_extrapolate.stypy_type_of_self = None
    _do_extrapolate.stypy_type_store = module_type_store
    _do_extrapolate.stypy_function_name = '_do_extrapolate'
    _do_extrapolate.stypy_param_names_list = ['fill_value']
    _do_extrapolate.stypy_varargs_param_name = None
    _do_extrapolate.stypy_kwargs_param_name = None
    _do_extrapolate.stypy_call_defaults = defaults
    _do_extrapolate.stypy_call_varargs = varargs
    _do_extrapolate.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_do_extrapolate', ['fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_do_extrapolate', localization, ['fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_do_extrapolate(...)' code ##################

    str_64435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, 4), 'str', 'Helper to check if fill_value == "extrapolate" without warnings')
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 341)
    # Processing the call arguments (line 341)
    # Getting the type of 'fill_value' (line 341)
    fill_value_64437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 23), 'fill_value', False)
    # Getting the type of 'string_types' (line 341)
    string_types_64438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 35), 'string_types', False)
    # Processing the call keyword arguments (line 341)
    kwargs_64439 = {}
    # Getting the type of 'isinstance' (line 341)
    isinstance_64436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 12), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 341)
    isinstance_call_result_64440 = invoke(stypy.reporting.localization.Localization(__file__, 341, 12), isinstance_64436, *[fill_value_64437, string_types_64438], **kwargs_64439)
    
    
    # Getting the type of 'fill_value' (line 342)
    fill_value_64441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 12), 'fill_value')
    str_64442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 26), 'str', 'extrapolate')
    # Applying the binary operator '==' (line 342)
    result_eq_64443 = python_operator(stypy.reporting.localization.Localization(__file__, 342, 12), '==', fill_value_64441, str_64442)
    
    # Applying the binary operator 'and' (line 341)
    result_and_keyword_64444 = python_operator(stypy.reporting.localization.Localization(__file__, 341, 12), 'and', isinstance_call_result_64440, result_eq_64443)
    
    # Assigning a type to the variable 'stypy_return_type' (line 341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 4), 'stypy_return_type', result_and_keyword_64444)
    
    # ################# End of '_do_extrapolate(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_do_extrapolate' in the type store
    # Getting the type of 'stypy_return_type' (line 339)
    stypy_return_type_64445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_64445)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_do_extrapolate'
    return stypy_return_type_64445

# Assigning a type to the variable '_do_extrapolate' (line 339)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 0), '_do_extrapolate', _do_extrapolate)
# Declaration of the 'interp1d' class
# Getting the type of '_Interpolator1D' (line 345)
_Interpolator1D_64446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 15), '_Interpolator1D')

class interp1d(_Interpolator1D_64446, ):
    str_64447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 425, (-1)), 'str', '\n    Interpolate a 1-D function.\n\n    `x` and `y` are arrays of values used to approximate some function f:\n    ``y = f(x)``.  This class returns a function whose call method uses\n    interpolation to find the value of new points.\n\n    Note that calling `interp1d` with NaNs present in input values results in\n    undefined behaviour.\n\n    Parameters\n    ----------\n    x : (N,) array_like\n        A 1-D array of real values.\n    y : (...,N,...) array_like\n        A N-D array of real values. The length of `y` along the interpolation\n        axis must be equal to the length of `x`.\n    kind : str or int, optional\n        Specifies the kind of interpolation as a string\n        (\'linear\', \'nearest\', \'zero\', \'slinear\', \'quadratic\', \'cubic\'\n        where \'zero\', \'slinear\', \'quadratic\' and \'cubic\' refer to a spline\n        interpolation of zeroth, first, second or third order) or as an\n        integer specifying the order of the spline interpolator to use.\n        Default is \'linear\'.\n    axis : int, optional\n        Specifies the axis of `y` along which to interpolate.\n        Interpolation defaults to the last axis of `y`.\n    copy : bool, optional\n        If True, the class makes internal copies of x and y.\n        If False, references to `x` and `y` are used. The default is to copy.\n    bounds_error : bool, optional\n        If True, a ValueError is raised any time interpolation is attempted on\n        a value outside of the range of x (where extrapolation is\n        necessary). If False, out of bounds values are assigned `fill_value`.\n        By default, an error is raised unless `fill_value="extrapolate"`.\n    fill_value : array-like or (array-like, array_like) or "extrapolate", optional\n        - if a ndarray (or float), this value will be used to fill in for\n          requested points outside of the data range. If not provided, then\n          the default is NaN. The array-like must broadcast properly to the\n          dimensions of the non-interpolation axes.\n        - If a two-element tuple, then the first element is used as a\n          fill value for ``x_new < x[0]`` and the second element is used for\n          ``x_new > x[-1]``. Anything that is not a 2-element tuple (e.g.,\n          list or ndarray, regardless of shape) is taken to be a single\n          array-like argument meant to be used for both bounds as\n          ``below, above = fill_value, fill_value``.\n\n          .. versionadded:: 0.17.0\n        - If "extrapolate", then points outside the data range will be\n          extrapolated.\n\n          .. versionadded:: 0.17.0\n    assume_sorted : bool, optional\n        If False, values of `x` can be in any order and they are sorted first.\n        If True, `x` has to be an array of monotonically increasing values.\n\n    Methods\n    -------\n    __call__\n\n    See Also\n    --------\n    splrep, splev\n        Spline interpolation/smoothing based on FITPACK.\n    UnivariateSpline : An object-oriented wrapper of the FITPACK routines.\n    interp2d : 2-D interpolation\n\n    Examples\n    --------\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy import interpolate\n    >>> x = np.arange(0, 10)\n    >>> y = np.exp(-x/3.0)\n    >>> f = interpolate.interp1d(x, y)\n\n    >>> xnew = np.arange(0, 9, 0.1)\n    >>> ynew = f(xnew)   # use interpolation function returned by `interp1d`\n    >>> plt.plot(x, y, \'o\', xnew, ynew, \'-\')\n    >>> plt.show()\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_64448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 34), 'str', 'linear')
        int_64449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 49), 'int')
        # Getting the type of 'True' (line 428)
        True_64450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 22), 'True')
        # Getting the type of 'None' (line 428)
        None_64451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 41), 'None')
        # Getting the type of 'np' (line 428)
        np_64452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 58), 'np')
        # Obtaining the member 'nan' of a type (line 428)
        nan_64453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 58), np_64452, 'nan')
        # Getting the type of 'False' (line 429)
        False_64454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 31), 'False')
        defaults = [str_64448, int_64449, True_64450, None_64451, nan_64453, False_64454]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 427, 4, False)
        # Assigning a type to the variable 'self' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp1d.__init__', ['x', 'y', 'kind', 'axis', 'copy', 'bounds_error', 'fill_value', 'assume_sorted'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['x', 'y', 'kind', 'axis', 'copy', 'bounds_error', 'fill_value', 'assume_sorted'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_64455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 8), 'str', ' Initialize a 1D linear interpolation class.')
        
        # Call to __init__(...): (line 431)
        # Processing the call arguments (line 431)
        # Getting the type of 'self' (line 431)
        self_64458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 33), 'self', False)
        # Getting the type of 'x' (line 431)
        x_64459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 39), 'x', False)
        # Getting the type of 'y' (line 431)
        y_64460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 42), 'y', False)
        # Processing the call keyword arguments (line 431)
        # Getting the type of 'axis' (line 431)
        axis_64461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 50), 'axis', False)
        keyword_64462 = axis_64461
        kwargs_64463 = {'axis': keyword_64462}
        # Getting the type of '_Interpolator1D' (line 431)
        _Interpolator1D_64456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 8), '_Interpolator1D', False)
        # Obtaining the member '__init__' of a type (line 431)
        init___64457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 8), _Interpolator1D_64456, '__init__')
        # Calling __init__(args, kwargs) (line 431)
        init___call_result_64464 = invoke(stypy.reporting.localization.Localization(__file__, 431, 8), init___64457, *[self_64458, x_64459, y_64460], **kwargs_64463)
        
        
        # Assigning a Name to a Attribute (line 433):
        
        # Assigning a Name to a Attribute (line 433):
        # Getting the type of 'bounds_error' (line 433)
        bounds_error_64465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 28), 'bounds_error')
        # Getting the type of 'self' (line 433)
        self_64466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 8), 'self')
        # Setting the type of the member 'bounds_error' of a type (line 433)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 8), self_64466, 'bounds_error', bounds_error_64465)
        
        # Assigning a Name to a Attribute (line 434):
        
        # Assigning a Name to a Attribute (line 434):
        # Getting the type of 'copy' (line 434)
        copy_64467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 20), 'copy')
        # Getting the type of 'self' (line 434)
        self_64468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'self')
        # Setting the type of the member 'copy' of a type (line 434)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 8), self_64468, 'copy', copy_64467)
        
        
        # Getting the type of 'kind' (line 436)
        kind_64469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 11), 'kind')
        
        # Obtaining an instance of the builtin type 'list' (line 436)
        list_64470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 436)
        # Adding element type (line 436)
        str_64471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 20), 'str', 'zero')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 436, 19), list_64470, str_64471)
        # Adding element type (line 436)
        str_64472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 28), 'str', 'slinear')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 436, 19), list_64470, str_64472)
        # Adding element type (line 436)
        str_64473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 39), 'str', 'quadratic')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 436, 19), list_64470, str_64473)
        # Adding element type (line 436)
        str_64474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 52), 'str', 'cubic')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 436, 19), list_64470, str_64474)
        
        # Applying the binary operator 'in' (line 436)
        result_contains_64475 = python_operator(stypy.reporting.localization.Localization(__file__, 436, 11), 'in', kind_64469, list_64470)
        
        # Testing the type of an if condition (line 436)
        if_condition_64476 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 436, 8), result_contains_64475)
        # Assigning a type to the variable 'if_condition_64476' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'if_condition_64476', if_condition_64476)
        # SSA begins for if statement (line 436)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 437):
        
        # Assigning a Subscript to a Name (line 437):
        
        # Obtaining the type of the subscript
        # Getting the type of 'kind' (line 438)
        kind_64477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 49), 'kind')
        
        # Obtaining an instance of the builtin type 'dict' (line 437)
        dict_64478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, 20), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 437)
        # Adding element type (key, value) (line 437)
        str_64479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, 21), 'str', 'zero')
        int_64480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, 29), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 437, 20), dict_64478, (str_64479, int_64480))
        # Adding element type (key, value) (line 437)
        str_64481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, 32), 'str', 'slinear')
        int_64482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, 43), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 437, 20), dict_64478, (str_64481, int_64482))
        # Adding element type (key, value) (line 437)
        str_64483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 21), 'str', 'quadratic')
        int_64484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 34), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 437, 20), dict_64478, (str_64483, int_64484))
        # Adding element type (key, value) (line 437)
        str_64485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 37), 'str', 'cubic')
        int_64486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 46), 'int')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 437, 20), dict_64478, (str_64485, int_64486))
        
        # Obtaining the member '__getitem__' of a type (line 437)
        getitem___64487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 20), dict_64478, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 437)
        subscript_call_result_64488 = invoke(stypy.reporting.localization.Localization(__file__, 437, 20), getitem___64487, kind_64477)
        
        # Assigning a type to the variable 'order' (line 437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 12), 'order', subscript_call_result_64488)
        
        # Assigning a Str to a Name (line 439):
        
        # Assigning a Str to a Name (line 439):
        str_64489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, 19), 'str', 'spline')
        # Assigning a type to the variable 'kind' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 12), 'kind', str_64489)
        # SSA branch for the else part of an if statement (line 436)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 440)
        # Getting the type of 'int' (line 440)
        int_64490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 30), 'int')
        # Getting the type of 'kind' (line 440)
        kind_64491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 24), 'kind')
        
        (may_be_64492, more_types_in_union_64493) = may_be_subtype(int_64490, kind_64491)

        if may_be_64492:

            if more_types_in_union_64493:
                # Runtime conditional SSA (line 440)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'kind' (line 440)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 13), 'kind', remove_not_subtype_from_union(kind_64491, int))
            
            # Assigning a Name to a Name (line 441):
            
            # Assigning a Name to a Name (line 441):
            # Getting the type of 'kind' (line 441)
            kind_64494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 20), 'kind')
            # Assigning a type to the variable 'order' (line 441)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 12), 'order', kind_64494)
            
            # Assigning a Str to a Name (line 442):
            
            # Assigning a Str to a Name (line 442):
            str_64495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 442, 19), 'str', 'spline')
            # Assigning a type to the variable 'kind' (line 442)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 12), 'kind', str_64495)

            if more_types_in_union_64493:
                # Runtime conditional SSA for else branch (line 440)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_64492) or more_types_in_union_64493):
            # Assigning a type to the variable 'kind' (line 440)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 13), 'kind', remove_subtype_from_union(kind_64491, int))
            
            
            # Getting the type of 'kind' (line 443)
            kind_64496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 13), 'kind')
            
            # Obtaining an instance of the builtin type 'tuple' (line 443)
            tuple_64497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 443, 26), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 443)
            # Adding element type (line 443)
            str_64498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 443, 26), 'str', 'linear')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 443, 26), tuple_64497, str_64498)
            # Adding element type (line 443)
            str_64499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 443, 36), 'str', 'nearest')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 443, 26), tuple_64497, str_64499)
            
            # Applying the binary operator 'notin' (line 443)
            result_contains_64500 = python_operator(stypy.reporting.localization.Localization(__file__, 443, 13), 'notin', kind_64496, tuple_64497)
            
            # Testing the type of an if condition (line 443)
            if_condition_64501 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 443, 13), result_contains_64500)
            # Assigning a type to the variable 'if_condition_64501' (line 443)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 13), 'if_condition_64501', if_condition_64501)
            # SSA begins for if statement (line 443)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to NotImplementedError(...): (line 444)
            # Processing the call arguments (line 444)
            str_64503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 444, 38), 'str', '%s is unsupported: Use fitpack routines for other types.')
            # Getting the type of 'kind' (line 445)
            kind_64504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 68), 'kind', False)
            # Applying the binary operator '%' (line 444)
            result_mod_64505 = python_operator(stypy.reporting.localization.Localization(__file__, 444, 38), '%', str_64503, kind_64504)
            
            # Processing the call keyword arguments (line 444)
            kwargs_64506 = {}
            # Getting the type of 'NotImplementedError' (line 444)
            NotImplementedError_64502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 18), 'NotImplementedError', False)
            # Calling NotImplementedError(args, kwargs) (line 444)
            NotImplementedError_call_result_64507 = invoke(stypy.reporting.localization.Localization(__file__, 444, 18), NotImplementedError_64502, *[result_mod_64505], **kwargs_64506)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 444, 12), NotImplementedError_call_result_64507, 'raise parameter', BaseException)
            # SSA join for if statement (line 443)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_64492 and more_types_in_union_64493):
                # SSA join for if statement (line 440)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 436)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 446):
        
        # Assigning a Call to a Name (line 446):
        
        # Call to array(...): (line 446)
        # Processing the call arguments (line 446)
        # Getting the type of 'x' (line 446)
        x_64509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 18), 'x', False)
        # Processing the call keyword arguments (line 446)
        # Getting the type of 'self' (line 446)
        self_64510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 26), 'self', False)
        # Obtaining the member 'copy' of a type (line 446)
        copy_64511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 26), self_64510, 'copy')
        keyword_64512 = copy_64511
        kwargs_64513 = {'copy': keyword_64512}
        # Getting the type of 'array' (line 446)
        array_64508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 12), 'array', False)
        # Calling array(args, kwargs) (line 446)
        array_call_result_64514 = invoke(stypy.reporting.localization.Localization(__file__, 446, 12), array_64508, *[x_64509], **kwargs_64513)
        
        # Assigning a type to the variable 'x' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'x', array_call_result_64514)
        
        # Assigning a Call to a Name (line 447):
        
        # Assigning a Call to a Name (line 447):
        
        # Call to array(...): (line 447)
        # Processing the call arguments (line 447)
        # Getting the type of 'y' (line 447)
        y_64516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 18), 'y', False)
        # Processing the call keyword arguments (line 447)
        # Getting the type of 'self' (line 447)
        self_64517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 26), 'self', False)
        # Obtaining the member 'copy' of a type (line 447)
        copy_64518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 26), self_64517, 'copy')
        keyword_64519 = copy_64518
        kwargs_64520 = {'copy': keyword_64519}
        # Getting the type of 'array' (line 447)
        array_64515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 12), 'array', False)
        # Calling array(args, kwargs) (line 447)
        array_call_result_64521 = invoke(stypy.reporting.localization.Localization(__file__, 447, 12), array_64515, *[y_64516], **kwargs_64520)
        
        # Assigning a type to the variable 'y' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'y', array_call_result_64521)
        
        
        # Getting the type of 'assume_sorted' (line 449)
        assume_sorted_64522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 15), 'assume_sorted')
        # Applying the 'not' unary operator (line 449)
        result_not__64523 = python_operator(stypy.reporting.localization.Localization(__file__, 449, 11), 'not', assume_sorted_64522)
        
        # Testing the type of an if condition (line 449)
        if_condition_64524 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 449, 8), result_not__64523)
        # Assigning a type to the variable 'if_condition_64524' (line 449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 8), 'if_condition_64524', if_condition_64524)
        # SSA begins for if statement (line 449)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 450):
        
        # Assigning a Call to a Name (line 450):
        
        # Call to argsort(...): (line 450)
        # Processing the call arguments (line 450)
        # Getting the type of 'x' (line 450)
        x_64527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 29), 'x', False)
        # Processing the call keyword arguments (line 450)
        kwargs_64528 = {}
        # Getting the type of 'np' (line 450)
        np_64525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 18), 'np', False)
        # Obtaining the member 'argsort' of a type (line 450)
        argsort_64526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 18), np_64525, 'argsort')
        # Calling argsort(args, kwargs) (line 450)
        argsort_call_result_64529 = invoke(stypy.reporting.localization.Localization(__file__, 450, 18), argsort_64526, *[x_64527], **kwargs_64528)
        
        # Assigning a type to the variable 'ind' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 12), 'ind', argsort_call_result_64529)
        
        # Assigning a Subscript to a Name (line 451):
        
        # Assigning a Subscript to a Name (line 451):
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 451)
        ind_64530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 18), 'ind')
        # Getting the type of 'x' (line 451)
        x_64531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 16), 'x')
        # Obtaining the member '__getitem__' of a type (line 451)
        getitem___64532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 16), x_64531, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 451)
        subscript_call_result_64533 = invoke(stypy.reporting.localization.Localization(__file__, 451, 16), getitem___64532, ind_64530)
        
        # Assigning a type to the variable 'x' (line 451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 12), 'x', subscript_call_result_64533)
        
        # Assigning a Call to a Name (line 452):
        
        # Assigning a Call to a Name (line 452):
        
        # Call to take(...): (line 452)
        # Processing the call arguments (line 452)
        # Getting the type of 'y' (line 452)
        y_64536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 24), 'y', False)
        # Getting the type of 'ind' (line 452)
        ind_64537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 27), 'ind', False)
        # Processing the call keyword arguments (line 452)
        # Getting the type of 'axis' (line 452)
        axis_64538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 37), 'axis', False)
        keyword_64539 = axis_64538
        kwargs_64540 = {'axis': keyword_64539}
        # Getting the type of 'np' (line 452)
        np_64534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 16), 'np', False)
        # Obtaining the member 'take' of a type (line 452)
        take_64535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 16), np_64534, 'take')
        # Calling take(args, kwargs) (line 452)
        take_call_result_64541 = invoke(stypy.reporting.localization.Localization(__file__, 452, 16), take_64535, *[y_64536, ind_64537], **kwargs_64540)
        
        # Assigning a type to the variable 'y' (line 452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 12), 'y', take_call_result_64541)
        # SSA join for if statement (line 449)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x' (line 454)
        x_64542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 454)
        ndim_64543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 454, 11), x_64542, 'ndim')
        int_64544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 454, 21), 'int')
        # Applying the binary operator '!=' (line 454)
        result_ne_64545 = python_operator(stypy.reporting.localization.Localization(__file__, 454, 11), '!=', ndim_64543, int_64544)
        
        # Testing the type of an if condition (line 454)
        if_condition_64546 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 454, 8), result_ne_64545)
        # Assigning a type to the variable 'if_condition_64546' (line 454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 8), 'if_condition_64546', if_condition_64546)
        # SSA begins for if statement (line 454)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 455)
        # Processing the call arguments (line 455)
        str_64548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 29), 'str', 'the x array must have exactly one dimension.')
        # Processing the call keyword arguments (line 455)
        kwargs_64549 = {}
        # Getting the type of 'ValueError' (line 455)
        ValueError_64547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 455)
        ValueError_call_result_64550 = invoke(stypy.reporting.localization.Localization(__file__, 455, 18), ValueError_64547, *[str_64548], **kwargs_64549)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 455, 12), ValueError_call_result_64550, 'raise parameter', BaseException)
        # SSA join for if statement (line 454)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y' (line 456)
        y_64551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 11), 'y')
        # Obtaining the member 'ndim' of a type (line 456)
        ndim_64552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 11), y_64551, 'ndim')
        int_64553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 456, 21), 'int')
        # Applying the binary operator '==' (line 456)
        result_eq_64554 = python_operator(stypy.reporting.localization.Localization(__file__, 456, 11), '==', ndim_64552, int_64553)
        
        # Testing the type of an if condition (line 456)
        if_condition_64555 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 456, 8), result_eq_64554)
        # Assigning a type to the variable 'if_condition_64555' (line 456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 8), 'if_condition_64555', if_condition_64555)
        # SSA begins for if statement (line 456)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 457)
        # Processing the call arguments (line 457)
        str_64557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 29), 'str', 'the y array must have at least one dimension.')
        # Processing the call keyword arguments (line 457)
        kwargs_64558 = {}
        # Getting the type of 'ValueError' (line 457)
        ValueError_64556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 457)
        ValueError_call_result_64559 = invoke(stypy.reporting.localization.Localization(__file__, 457, 18), ValueError_64556, *[str_64557], **kwargs_64558)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 457, 12), ValueError_call_result_64559, 'raise parameter', BaseException)
        # SSA join for if statement (line 456)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to issubclass(...): (line 460)
        # Processing the call arguments (line 460)
        # Getting the type of 'y' (line 460)
        y_64561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 26), 'y', False)
        # Obtaining the member 'dtype' of a type (line 460)
        dtype_64562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 26), y_64561, 'dtype')
        # Obtaining the member 'type' of a type (line 460)
        type_64563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 26), dtype_64562, 'type')
        # Getting the type of 'np' (line 460)
        np_64564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 40), 'np', False)
        # Obtaining the member 'inexact' of a type (line 460)
        inexact_64565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 40), np_64564, 'inexact')
        # Processing the call keyword arguments (line 460)
        kwargs_64566 = {}
        # Getting the type of 'issubclass' (line 460)
        issubclass_64560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 15), 'issubclass', False)
        # Calling issubclass(args, kwargs) (line 460)
        issubclass_call_result_64567 = invoke(stypy.reporting.localization.Localization(__file__, 460, 15), issubclass_64560, *[type_64563, inexact_64565], **kwargs_64566)
        
        # Applying the 'not' unary operator (line 460)
        result_not__64568 = python_operator(stypy.reporting.localization.Localization(__file__, 460, 11), 'not', issubclass_call_result_64567)
        
        # Testing the type of an if condition (line 460)
        if_condition_64569 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 460, 8), result_not__64568)
        # Assigning a type to the variable 'if_condition_64569' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'if_condition_64569', if_condition_64569)
        # SSA begins for if statement (line 460)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 461):
        
        # Assigning a Call to a Name (line 461):
        
        # Call to astype(...): (line 461)
        # Processing the call arguments (line 461)
        # Getting the type of 'np' (line 461)
        np_64572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 25), 'np', False)
        # Obtaining the member 'float_' of a type (line 461)
        float__64573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 25), np_64572, 'float_')
        # Processing the call keyword arguments (line 461)
        kwargs_64574 = {}
        # Getting the type of 'y' (line 461)
        y_64570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 16), 'y', False)
        # Obtaining the member 'astype' of a type (line 461)
        astype_64571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 16), y_64570, 'astype')
        # Calling astype(args, kwargs) (line 461)
        astype_call_result_64575 = invoke(stypy.reporting.localization.Localization(__file__, 461, 16), astype_64571, *[float__64573], **kwargs_64574)
        
        # Assigning a type to the variable 'y' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 12), 'y', astype_call_result_64575)
        # SSA join for if statement (line 460)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Attribute (line 464):
        
        # Assigning a BinOp to a Attribute (line 464):
        # Getting the type of 'axis' (line 464)
        axis_64576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 20), 'axis')
        # Getting the type of 'y' (line 464)
        y_64577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 27), 'y')
        # Obtaining the member 'ndim' of a type (line 464)
        ndim_64578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 27), y_64577, 'ndim')
        # Applying the binary operator '%' (line 464)
        result_mod_64579 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 20), '%', axis_64576, ndim_64578)
        
        # Getting the type of 'self' (line 464)
        self_64580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 8), 'self')
        # Setting the type of the member 'axis' of a type (line 464)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 8), self_64580, 'axis', result_mod_64579)
        
        # Assigning a Name to a Attribute (line 467):
        
        # Assigning a Name to a Attribute (line 467):
        # Getting the type of 'y' (line 467)
        y_64581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 17), 'y')
        # Getting the type of 'self' (line 467)
        self_64582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 8), 'self')
        # Setting the type of the member 'y' of a type (line 467)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 8), self_64582, 'y', y_64581)
        
        # Assigning a Call to a Attribute (line 468):
        
        # Assigning a Call to a Attribute (line 468):
        
        # Call to _reshape_yi(...): (line 468)
        # Processing the call arguments (line 468)
        # Getting the type of 'self' (line 468)
        self_64585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 35), 'self', False)
        # Obtaining the member 'y' of a type (line 468)
        y_64586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 35), self_64585, 'y')
        # Processing the call keyword arguments (line 468)
        kwargs_64587 = {}
        # Getting the type of 'self' (line 468)
        self_64583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 18), 'self', False)
        # Obtaining the member '_reshape_yi' of a type (line 468)
        _reshape_yi_64584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 18), self_64583, '_reshape_yi')
        # Calling _reshape_yi(args, kwargs) (line 468)
        _reshape_yi_call_result_64588 = invoke(stypy.reporting.localization.Localization(__file__, 468, 18), _reshape_yi_64584, *[y_64586], **kwargs_64587)
        
        # Getting the type of 'self' (line 468)
        self_64589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'self')
        # Setting the type of the member '_y' of a type (line 468)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 8), self_64589, '_y', _reshape_yi_call_result_64588)
        
        # Assigning a Name to a Attribute (line 469):
        
        # Assigning a Name to a Attribute (line 469):
        # Getting the type of 'x' (line 469)
        x_64590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 17), 'x')
        # Getting the type of 'self' (line 469)
        self_64591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 8), 'self')
        # Setting the type of the member 'x' of a type (line 469)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 8), self_64591, 'x', x_64590)
        # Deleting a member
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 470, 8), module_type_store, 'y')
        # Deleting a member
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 470, 8), module_type_store, 'x')
        
        # Assigning a Name to a Attribute (line 471):
        
        # Assigning a Name to a Attribute (line 471):
        # Getting the type of 'kind' (line 471)
        kind_64592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 21), 'kind')
        # Getting the type of 'self' (line 471)
        self_64593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 8), 'self')
        # Setting the type of the member '_kind' of a type (line 471)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 8), self_64593, '_kind', kind_64592)
        
        # Assigning a Name to a Attribute (line 472):
        
        # Assigning a Name to a Attribute (line 472):
        # Getting the type of 'fill_value' (line 472)
        fill_value_64594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 26), 'fill_value')
        # Getting the type of 'self' (line 472)
        self_64595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'self')
        # Setting the type of the member 'fill_value' of a type (line 472)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 8), self_64595, 'fill_value', fill_value_64594)
        
        
        # Getting the type of 'kind' (line 478)
        kind_64596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 11), 'kind')
        
        # Obtaining an instance of the builtin type 'tuple' (line 478)
        tuple_64597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 478)
        # Adding element type (line 478)
        str_64598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 20), 'str', 'linear')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 478, 20), tuple_64597, str_64598)
        # Adding element type (line 478)
        str_64599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 30), 'str', 'nearest')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 478, 20), tuple_64597, str_64599)
        
        # Applying the binary operator 'in' (line 478)
        result_contains_64600 = python_operator(stypy.reporting.localization.Localization(__file__, 478, 11), 'in', kind_64596, tuple_64597)
        
        # Testing the type of an if condition (line 478)
        if_condition_64601 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 478, 8), result_contains_64600)
        # Assigning a type to the variable 'if_condition_64601' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'if_condition_64601', if_condition_64601)
        # SSA begins for if statement (line 478)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 481):
        
        # Assigning a Num to a Name (line 481):
        int_64602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 21), 'int')
        # Assigning a type to the variable 'minval' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 12), 'minval', int_64602)
        
        
        # Getting the type of 'kind' (line 482)
        kind_64603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 15), 'kind')
        str_64604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 23), 'str', 'nearest')
        # Applying the binary operator '==' (line 482)
        result_eq_64605 = python_operator(stypy.reporting.localization.Localization(__file__, 482, 15), '==', kind_64603, str_64604)
        
        # Testing the type of an if condition (line 482)
        if_condition_64606 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 482, 12), result_eq_64605)
        # Assigning a type to the variable 'if_condition_64606' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'if_condition_64606', if_condition_64606)
        # SSA begins for if statement (line 482)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Attribute (line 485):
        
        # Assigning a BinOp to a Attribute (line 485):
        # Getting the type of 'self' (line 485)
        self_64607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 29), 'self')
        # Obtaining the member 'x' of a type (line 485)
        x_64608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 29), self_64607, 'x')
        float_64609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 38), 'float')
        # Applying the binary operator 'div' (line 485)
        result_div_64610 = python_operator(stypy.reporting.localization.Localization(__file__, 485, 29), 'div', x_64608, float_64609)
        
        # Getting the type of 'self' (line 485)
        self_64611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 16), 'self')
        # Setting the type of the member 'x_bds' of a type (line 485)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 16), self_64611, 'x_bds', result_div_64610)
        
        # Assigning a BinOp to a Attribute (line 486):
        
        # Assigning a BinOp to a Attribute (line 486):
        
        # Obtaining the type of the subscript
        int_64612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 40), 'int')
        slice_64613 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 486, 29), int_64612, None, None)
        # Getting the type of 'self' (line 486)
        self_64614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 29), 'self')
        # Obtaining the member 'x_bds' of a type (line 486)
        x_bds_64615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 29), self_64614, 'x_bds')
        # Obtaining the member '__getitem__' of a type (line 486)
        getitem___64616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 29), x_bds_64615, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 486)
        subscript_call_result_64617 = invoke(stypy.reporting.localization.Localization(__file__, 486, 29), getitem___64616, slice_64613)
        
        
        # Obtaining the type of the subscript
        int_64618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 58), 'int')
        slice_64619 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 486, 46), None, int_64618, None)
        # Getting the type of 'self' (line 486)
        self_64620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 46), 'self')
        # Obtaining the member 'x_bds' of a type (line 486)
        x_bds_64621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 46), self_64620, 'x_bds')
        # Obtaining the member '__getitem__' of a type (line 486)
        getitem___64622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 46), x_bds_64621, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 486)
        subscript_call_result_64623 = invoke(stypy.reporting.localization.Localization(__file__, 486, 46), getitem___64622, slice_64619)
        
        # Applying the binary operator '+' (line 486)
        result_add_64624 = python_operator(stypy.reporting.localization.Localization(__file__, 486, 29), '+', subscript_call_result_64617, subscript_call_result_64623)
        
        # Getting the type of 'self' (line 486)
        self_64625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 16), 'self')
        # Setting the type of the member 'x_bds' of a type (line 486)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 16), self_64625, 'x_bds', result_add_64624)
        
        # Assigning a Attribute to a Attribute (line 488):
        
        # Assigning a Attribute to a Attribute (line 488):
        # Getting the type of 'self' (line 488)
        self_64626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 29), 'self')
        # Obtaining the member '__class__' of a type (line 488)
        class___64627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 29), self_64626, '__class__')
        # Obtaining the member '_call_nearest' of a type (line 488)
        _call_nearest_64628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 29), class___64627, '_call_nearest')
        # Getting the type of 'self' (line 488)
        self_64629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 16), 'self')
        # Setting the type of the member '_call' of a type (line 488)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 16), self_64629, '_call', _call_nearest_64628)
        # SSA branch for the else part of an if statement (line 482)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BoolOp to a Name (line 491):
        
        # Assigning a BoolOp to a Name (line 491):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 491)
        self_64630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 23), 'self')
        # Obtaining the member 'x' of a type (line 491)
        x_64631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 23), self_64630, 'x')
        # Obtaining the member 'dtype' of a type (line 491)
        dtype_64632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 23), x_64631, 'dtype')
        # Getting the type of 'np' (line 491)
        np_64633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 39), 'np')
        # Obtaining the member 'float_' of a type (line 491)
        float__64634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 39), np_64633, 'float_')
        # Applying the binary operator '==' (line 491)
        result_eq_64635 = python_operator(stypy.reporting.localization.Localization(__file__, 491, 23), '==', dtype_64632, float__64634)
        
        
        # Getting the type of 'self' (line 491)
        self_64636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 53), 'self')
        # Obtaining the member 'y' of a type (line 491)
        y_64637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 53), self_64636, 'y')
        # Obtaining the member 'dtype' of a type (line 491)
        dtype_64638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 53), y_64637, 'dtype')
        # Getting the type of 'np' (line 491)
        np_64639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 69), 'np')
        # Obtaining the member 'float_' of a type (line 491)
        float__64640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 69), np_64639, 'float_')
        # Applying the binary operator '==' (line 491)
        result_eq_64641 = python_operator(stypy.reporting.localization.Localization(__file__, 491, 53), '==', dtype_64638, float__64640)
        
        # Applying the binary operator 'and' (line 491)
        result_and_keyword_64642 = python_operator(stypy.reporting.localization.Localization(__file__, 491, 23), 'and', result_eq_64635, result_eq_64641)
        
        # Assigning a type to the variable 'cond' (line 491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 16), 'cond', result_and_keyword_64642)
        
        # Assigning a BoolOp to a Name (line 492):
        
        # Assigning a BoolOp to a Name (line 492):
        
        # Evaluating a boolean operation
        # Getting the type of 'cond' (line 492)
        cond_64643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 23), 'cond')
        
        # Getting the type of 'self' (line 492)
        self_64644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 32), 'self')
        # Obtaining the member 'y' of a type (line 492)
        y_64645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 32), self_64644, 'y')
        # Obtaining the member 'ndim' of a type (line 492)
        ndim_64646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 32), y_64645, 'ndim')
        int_64647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 47), 'int')
        # Applying the binary operator '==' (line 492)
        result_eq_64648 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 32), '==', ndim_64646, int_64647)
        
        # Applying the binary operator 'and' (line 492)
        result_and_keyword_64649 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 23), 'and', cond_64643, result_eq_64648)
        
        # Assigning a type to the variable 'cond' (line 492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 16), 'cond', result_and_keyword_64649)
        
        # Assigning a BoolOp to a Name (line 493):
        
        # Assigning a BoolOp to a Name (line 493):
        
        # Evaluating a boolean operation
        # Getting the type of 'cond' (line 493)
        cond_64650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 23), 'cond')
        
        
        # Call to _do_extrapolate(...): (line 493)
        # Processing the call arguments (line 493)
        # Getting the type of 'fill_value' (line 493)
        fill_value_64652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 52), 'fill_value', False)
        # Processing the call keyword arguments (line 493)
        kwargs_64653 = {}
        # Getting the type of '_do_extrapolate' (line 493)
        _do_extrapolate_64651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 36), '_do_extrapolate', False)
        # Calling _do_extrapolate(args, kwargs) (line 493)
        _do_extrapolate_call_result_64654 = invoke(stypy.reporting.localization.Localization(__file__, 493, 36), _do_extrapolate_64651, *[fill_value_64652], **kwargs_64653)
        
        # Applying the 'not' unary operator (line 493)
        result_not__64655 = python_operator(stypy.reporting.localization.Localization(__file__, 493, 32), 'not', _do_extrapolate_call_result_64654)
        
        # Applying the binary operator 'and' (line 493)
        result_and_keyword_64656 = python_operator(stypy.reporting.localization.Localization(__file__, 493, 23), 'and', cond_64650, result_not__64655)
        
        # Assigning a type to the variable 'cond' (line 493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 16), 'cond', result_and_keyword_64656)
        
        # Getting the type of 'cond' (line 495)
        cond_64657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 19), 'cond')
        # Testing the type of an if condition (line 495)
        if_condition_64658 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 495, 16), cond_64657)
        # Assigning a type to the variable 'if_condition_64658' (line 495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 16), 'if_condition_64658', if_condition_64658)
        # SSA begins for if statement (line 495)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 496):
        
        # Assigning a Attribute to a Attribute (line 496):
        # Getting the type of 'self' (line 496)
        self_64659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 33), 'self')
        # Obtaining the member '__class__' of a type (line 496)
        class___64660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 33), self_64659, '__class__')
        # Obtaining the member '_call_linear_np' of a type (line 496)
        _call_linear_np_64661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 33), class___64660, '_call_linear_np')
        # Getting the type of 'self' (line 496)
        self_64662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 20), 'self')
        # Setting the type of the member '_call' of a type (line 496)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 20), self_64662, '_call', _call_linear_np_64661)
        # SSA branch for the else part of an if statement (line 495)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Attribute (line 498):
        
        # Assigning a Attribute to a Attribute (line 498):
        # Getting the type of 'self' (line 498)
        self_64663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 33), 'self')
        # Obtaining the member '__class__' of a type (line 498)
        class___64664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 33), self_64663, '__class__')
        # Obtaining the member '_call_linear' of a type (line 498)
        _call_linear_64665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 33), class___64664, '_call_linear')
        # Getting the type of 'self' (line 498)
        self_64666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 20), 'self')
        # Setting the type of the member '_call' of a type (line 498)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 20), self_64666, '_call', _call_linear_64665)
        # SSA join for if statement (line 495)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 482)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 478)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 500):
        
        # Assigning a BinOp to a Name (line 500):
        # Getting the type of 'order' (line 500)
        order_64667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 21), 'order')
        int_64668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 29), 'int')
        # Applying the binary operator '+' (line 500)
        result_add_64669 = python_operator(stypy.reporting.localization.Localization(__file__, 500, 21), '+', order_64667, int_64668)
        
        # Assigning a type to the variable 'minval' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'minval', result_add_64669)
        
        # Assigning a Name to a Name (line 502):
        
        # Assigning a Name to a Name (line 502):
        # Getting the type of 'False' (line 502)
        False_64670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 26), 'False')
        # Assigning a type to the variable 'rewrite_nan' (line 502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 12), 'rewrite_nan', False_64670)
        
        # Assigning a Tuple to a Tuple (line 503):
        
        # Assigning a Attribute to a Name (line 503):
        # Getting the type of 'self' (line 503)
        self_64671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 21), 'self')
        # Obtaining the member 'x' of a type (line 503)
        x_64672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 21), self_64671, 'x')
        # Assigning a type to the variable 'tuple_assignment_63603' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 12), 'tuple_assignment_63603', x_64672)
        
        # Assigning a Attribute to a Name (line 503):
        # Getting the type of 'self' (line 503)
        self_64673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 29), 'self')
        # Obtaining the member '_y' of a type (line 503)
        _y_64674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 29), self_64673, '_y')
        # Assigning a type to the variable 'tuple_assignment_63604' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 12), 'tuple_assignment_63604', _y_64674)
        
        # Assigning a Name to a Name (line 503):
        # Getting the type of 'tuple_assignment_63603' (line 503)
        tuple_assignment_63603_64675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 12), 'tuple_assignment_63603')
        # Assigning a type to the variable 'xx' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 12), 'xx', tuple_assignment_63603_64675)
        
        # Assigning a Name to a Name (line 503):
        # Getting the type of 'tuple_assignment_63604' (line 503)
        tuple_assignment_63604_64676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 12), 'tuple_assignment_63604')
        # Assigning a type to the variable 'yy' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 16), 'yy', tuple_assignment_63604_64676)
        
        
        # Getting the type of 'order' (line 504)
        order_64677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 15), 'order')
        int_64678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 23), 'int')
        # Applying the binary operator '>' (line 504)
        result_gt_64679 = python_operator(stypy.reporting.localization.Localization(__file__, 504, 15), '>', order_64677, int_64678)
        
        # Testing the type of an if condition (line 504)
        if_condition_64680 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 504, 12), result_gt_64679)
        # Assigning a type to the variable 'if_condition_64680' (line 504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 504, 12), 'if_condition_64680', if_condition_64680)
        # SSA begins for if statement (line 504)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to any(...): (line 512)
        # Processing the call keyword arguments (line 512)
        kwargs_64688 = {}
        
        # Call to isnan(...): (line 512)
        # Processing the call arguments (line 512)
        # Getting the type of 'self' (line 512)
        self_64683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 28), 'self', False)
        # Obtaining the member 'x' of a type (line 512)
        x_64684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 28), self_64683, 'x')
        # Processing the call keyword arguments (line 512)
        kwargs_64685 = {}
        # Getting the type of 'np' (line 512)
        np_64681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 19), 'np', False)
        # Obtaining the member 'isnan' of a type (line 512)
        isnan_64682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 19), np_64681, 'isnan')
        # Calling isnan(args, kwargs) (line 512)
        isnan_call_result_64686 = invoke(stypy.reporting.localization.Localization(__file__, 512, 19), isnan_64682, *[x_64684], **kwargs_64685)
        
        # Obtaining the member 'any' of a type (line 512)
        any_64687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 19), isnan_call_result_64686, 'any')
        # Calling any(args, kwargs) (line 512)
        any_call_result_64689 = invoke(stypy.reporting.localization.Localization(__file__, 512, 19), any_64687, *[], **kwargs_64688)
        
        # Testing the type of an if condition (line 512)
        if_condition_64690 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 512, 16), any_call_result_64689)
        # Assigning a type to the variable 'if_condition_64690' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 16), 'if_condition_64690', if_condition_64690)
        # SSA begins for if statement (line 512)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 513):
        
        # Assigning a Call to a Name (line 513):
        
        # Call to linspace(...): (line 513)
        # Processing the call arguments (line 513)
        
        # Call to min(...): (line 513)
        # Processing the call arguments (line 513)
        # Getting the type of 'self' (line 513)
        self_64694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 41), 'self', False)
        # Obtaining the member 'x' of a type (line 513)
        x_64695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 41), self_64694, 'x')
        # Processing the call keyword arguments (line 513)
        kwargs_64696 = {}
        # Getting the type of 'min' (line 513)
        min_64693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 37), 'min', False)
        # Calling min(args, kwargs) (line 513)
        min_call_result_64697 = invoke(stypy.reporting.localization.Localization(__file__, 513, 37), min_64693, *[x_64695], **kwargs_64696)
        
        
        # Call to max(...): (line 513)
        # Processing the call arguments (line 513)
        # Getting the type of 'self' (line 513)
        self_64699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 54), 'self', False)
        # Obtaining the member 'x' of a type (line 513)
        x_64700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 54), self_64699, 'x')
        # Processing the call keyword arguments (line 513)
        kwargs_64701 = {}
        # Getting the type of 'max' (line 513)
        max_64698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 50), 'max', False)
        # Calling max(args, kwargs) (line 513)
        max_call_result_64702 = invoke(stypy.reporting.localization.Localization(__file__, 513, 50), max_64698, *[x_64700], **kwargs_64701)
        
        
        # Call to len(...): (line 513)
        # Processing the call arguments (line 513)
        # Getting the type of 'self' (line 513)
        self_64704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 67), 'self', False)
        # Obtaining the member 'x' of a type (line 513)
        x_64705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 67), self_64704, 'x')
        # Processing the call keyword arguments (line 513)
        kwargs_64706 = {}
        # Getting the type of 'len' (line 513)
        len_64703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 63), 'len', False)
        # Calling len(args, kwargs) (line 513)
        len_call_result_64707 = invoke(stypy.reporting.localization.Localization(__file__, 513, 63), len_64703, *[x_64705], **kwargs_64706)
        
        # Processing the call keyword arguments (line 513)
        kwargs_64708 = {}
        # Getting the type of 'np' (line 513)
        np_64691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 25), 'np', False)
        # Obtaining the member 'linspace' of a type (line 513)
        linspace_64692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 25), np_64691, 'linspace')
        # Calling linspace(args, kwargs) (line 513)
        linspace_call_result_64709 = invoke(stypy.reporting.localization.Localization(__file__, 513, 25), linspace_64692, *[min_call_result_64697, max_call_result_64702, len_call_result_64707], **kwargs_64708)
        
        # Assigning a type to the variable 'xx' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 20), 'xx', linspace_call_result_64709)
        
        # Assigning a Name to a Name (line 514):
        
        # Assigning a Name to a Name (line 514):
        # Getting the type of 'True' (line 514)
        True_64710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 34), 'True')
        # Assigning a type to the variable 'rewrite_nan' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 20), 'rewrite_nan', True_64710)
        # SSA join for if statement (line 512)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to any(...): (line 515)
        # Processing the call keyword arguments (line 515)
        kwargs_64718 = {}
        
        # Call to isnan(...): (line 515)
        # Processing the call arguments (line 515)
        # Getting the type of 'self' (line 515)
        self_64713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 28), 'self', False)
        # Obtaining the member '_y' of a type (line 515)
        _y_64714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 28), self_64713, '_y')
        # Processing the call keyword arguments (line 515)
        kwargs_64715 = {}
        # Getting the type of 'np' (line 515)
        np_64711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 19), 'np', False)
        # Obtaining the member 'isnan' of a type (line 515)
        isnan_64712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 19), np_64711, 'isnan')
        # Calling isnan(args, kwargs) (line 515)
        isnan_call_result_64716 = invoke(stypy.reporting.localization.Localization(__file__, 515, 19), isnan_64712, *[_y_64714], **kwargs_64715)
        
        # Obtaining the member 'any' of a type (line 515)
        any_64717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 19), isnan_call_result_64716, 'any')
        # Calling any(args, kwargs) (line 515)
        any_call_result_64719 = invoke(stypy.reporting.localization.Localization(__file__, 515, 19), any_64717, *[], **kwargs_64718)
        
        # Testing the type of an if condition (line 515)
        if_condition_64720 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 515, 16), any_call_result_64719)
        # Assigning a type to the variable 'if_condition_64720' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 16), 'if_condition_64720', if_condition_64720)
        # SSA begins for if statement (line 515)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 516):
        
        # Assigning a Call to a Name (line 516):
        
        # Call to ones_like(...): (line 516)
        # Processing the call arguments (line 516)
        # Getting the type of 'self' (line 516)
        self_64723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 38), 'self', False)
        # Obtaining the member '_y' of a type (line 516)
        _y_64724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 38), self_64723, '_y')
        # Processing the call keyword arguments (line 516)
        kwargs_64725 = {}
        # Getting the type of 'np' (line 516)
        np_64721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 25), 'np', False)
        # Obtaining the member 'ones_like' of a type (line 516)
        ones_like_64722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 25), np_64721, 'ones_like')
        # Calling ones_like(args, kwargs) (line 516)
        ones_like_call_result_64726 = invoke(stypy.reporting.localization.Localization(__file__, 516, 25), ones_like_64722, *[_y_64724], **kwargs_64725)
        
        # Assigning a type to the variable 'yy' (line 516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 516, 20), 'yy', ones_like_call_result_64726)
        
        # Assigning a Name to a Name (line 517):
        
        # Assigning a Name to a Name (line 517):
        # Getting the type of 'True' (line 517)
        True_64727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 34), 'True')
        # Assigning a type to the variable 'rewrite_nan' (line 517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 517, 20), 'rewrite_nan', True_64727)
        # SSA join for if statement (line 515)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 504)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 519):
        
        # Assigning a Call to a Attribute (line 519):
        
        # Call to make_interp_spline(...): (line 519)
        # Processing the call arguments (line 519)
        # Getting the type of 'xx' (line 519)
        xx_64729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 46), 'xx', False)
        # Getting the type of 'yy' (line 519)
        yy_64730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 50), 'yy', False)
        # Processing the call keyword arguments (line 519)
        # Getting the type of 'order' (line 519)
        order_64731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 56), 'order', False)
        keyword_64732 = order_64731
        # Getting the type of 'False' (line 520)
        False_64733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 59), 'False', False)
        keyword_64734 = False_64733
        kwargs_64735 = {'k': keyword_64732, 'check_finite': keyword_64734}
        # Getting the type of 'make_interp_spline' (line 519)
        make_interp_spline_64728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 27), 'make_interp_spline', False)
        # Calling make_interp_spline(args, kwargs) (line 519)
        make_interp_spline_call_result_64736 = invoke(stypy.reporting.localization.Localization(__file__, 519, 27), make_interp_spline_64728, *[xx_64729, yy_64730], **kwargs_64735)
        
        # Getting the type of 'self' (line 519)
        self_64737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'self')
        # Setting the type of the member '_spline' of a type (line 519)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 12), self_64737, '_spline', make_interp_spline_call_result_64736)
        
        # Getting the type of 'rewrite_nan' (line 521)
        rewrite_nan_64738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 15), 'rewrite_nan')
        # Testing the type of an if condition (line 521)
        if_condition_64739 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 521, 12), rewrite_nan_64738)
        # Assigning a type to the variable 'if_condition_64739' (line 521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 12), 'if_condition_64739', if_condition_64739)
        # SSA begins for if statement (line 521)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 522):
        
        # Assigning a Attribute to a Attribute (line 522):
        # Getting the type of 'self' (line 522)
        self_64740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 29), 'self')
        # Obtaining the member '__class__' of a type (line 522)
        class___64741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 29), self_64740, '__class__')
        # Obtaining the member '_call_nan_spline' of a type (line 522)
        _call_nan_spline_64742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 29), class___64741, '_call_nan_spline')
        # Getting the type of 'self' (line 522)
        self_64743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 16), 'self')
        # Setting the type of the member '_call' of a type (line 522)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 16), self_64743, '_call', _call_nan_spline_64742)
        # SSA branch for the else part of an if statement (line 521)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Attribute (line 524):
        
        # Assigning a Attribute to a Attribute (line 524):
        # Getting the type of 'self' (line 524)
        self_64744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 29), 'self')
        # Obtaining the member '__class__' of a type (line 524)
        class___64745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 29), self_64744, '__class__')
        # Obtaining the member '_call_spline' of a type (line 524)
        _call_spline_64746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 29), class___64745, '_call_spline')
        # Getting the type of 'self' (line 524)
        self_64747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 16), 'self')
        # Setting the type of the member '_call' of a type (line 524)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 16), self_64747, '_call', _call_spline_64746)
        # SSA join for if statement (line 521)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 478)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 526)
        # Processing the call arguments (line 526)
        # Getting the type of 'self' (line 526)
        self_64749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 15), 'self', False)
        # Obtaining the member 'x' of a type (line 526)
        x_64750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 15), self_64749, 'x')
        # Processing the call keyword arguments (line 526)
        kwargs_64751 = {}
        # Getting the type of 'len' (line 526)
        len_64748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 11), 'len', False)
        # Calling len(args, kwargs) (line 526)
        len_call_result_64752 = invoke(stypy.reporting.localization.Localization(__file__, 526, 11), len_64748, *[x_64750], **kwargs_64751)
        
        # Getting the type of 'minval' (line 526)
        minval_64753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 25), 'minval')
        # Applying the binary operator '<' (line 526)
        result_lt_64754 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 11), '<', len_call_result_64752, minval_64753)
        
        # Testing the type of an if condition (line 526)
        if_condition_64755 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 526, 8), result_lt_64754)
        # Assigning a type to the variable 'if_condition_64755' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'if_condition_64755', if_condition_64755)
        # SSA begins for if statement (line 526)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 527)
        # Processing the call arguments (line 527)
        str_64757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 527, 29), 'str', 'x and y arrays must have at least %d entries')
        # Getting the type of 'minval' (line 528)
        minval_64758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 50), 'minval', False)
        # Applying the binary operator '%' (line 527)
        result_mod_64759 = python_operator(stypy.reporting.localization.Localization(__file__, 527, 29), '%', str_64757, minval_64758)
        
        # Processing the call keyword arguments (line 527)
        kwargs_64760 = {}
        # Getting the type of 'ValueError' (line 527)
        ValueError_64756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 527)
        ValueError_call_result_64761 = invoke(stypy.reporting.localization.Localization(__file__, 527, 18), ValueError_64756, *[result_mod_64759], **kwargs_64760)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 527, 12), ValueError_call_result_64761, 'raise parameter', BaseException)
        # SSA join for if statement (line 526)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def fill_value(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fill_value'
        module_type_store = module_type_store.open_function_context('fill_value', 530, 4, False)
        # Assigning a type to the variable 'self' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        interp1d.fill_value.__dict__.__setitem__('stypy_localization', localization)
        interp1d.fill_value.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        interp1d.fill_value.__dict__.__setitem__('stypy_type_store', module_type_store)
        interp1d.fill_value.__dict__.__setitem__('stypy_function_name', 'interp1d.fill_value')
        interp1d.fill_value.__dict__.__setitem__('stypy_param_names_list', [])
        interp1d.fill_value.__dict__.__setitem__('stypy_varargs_param_name', None)
        interp1d.fill_value.__dict__.__setitem__('stypy_kwargs_param_name', None)
        interp1d.fill_value.__dict__.__setitem__('stypy_call_defaults', defaults)
        interp1d.fill_value.__dict__.__setitem__('stypy_call_varargs', varargs)
        interp1d.fill_value.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        interp1d.fill_value.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp1d.fill_value', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fill_value', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fill_value(...)' code ##################

        # Getting the type of 'self' (line 533)
        self_64762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 15), 'self')
        # Obtaining the member '_fill_value_orig' of a type (line 533)
        _fill_value_orig_64763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 15), self_64762, '_fill_value_orig')
        # Assigning a type to the variable 'stypy_return_type' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 8), 'stypy_return_type', _fill_value_orig_64763)
        
        # ################# End of 'fill_value(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fill_value' in the type store
        # Getting the type of 'stypy_return_type' (line 530)
        stypy_return_type_64764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64764)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fill_value'
        return stypy_return_type_64764


    @norecursion
    def fill_value(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fill_value'
        module_type_store = module_type_store.open_function_context('fill_value', 535, 4, False)
        # Assigning a type to the variable 'self' (line 536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        interp1d.fill_value.__dict__.__setitem__('stypy_localization', localization)
        interp1d.fill_value.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        interp1d.fill_value.__dict__.__setitem__('stypy_type_store', module_type_store)
        interp1d.fill_value.__dict__.__setitem__('stypy_function_name', 'interp1d.fill_value')
        interp1d.fill_value.__dict__.__setitem__('stypy_param_names_list', ['fill_value'])
        interp1d.fill_value.__dict__.__setitem__('stypy_varargs_param_name', None)
        interp1d.fill_value.__dict__.__setitem__('stypy_kwargs_param_name', None)
        interp1d.fill_value.__dict__.__setitem__('stypy_call_defaults', defaults)
        interp1d.fill_value.__dict__.__setitem__('stypy_call_varargs', varargs)
        interp1d.fill_value.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        interp1d.fill_value.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp1d.fill_value', ['fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fill_value', localization, ['fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fill_value(...)' code ##################

        
        
        # Call to _do_extrapolate(...): (line 538)
        # Processing the call arguments (line 538)
        # Getting the type of 'fill_value' (line 538)
        fill_value_64766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 27), 'fill_value', False)
        # Processing the call keyword arguments (line 538)
        kwargs_64767 = {}
        # Getting the type of '_do_extrapolate' (line 538)
        _do_extrapolate_64765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 11), '_do_extrapolate', False)
        # Calling _do_extrapolate(args, kwargs) (line 538)
        _do_extrapolate_call_result_64768 = invoke(stypy.reporting.localization.Localization(__file__, 538, 11), _do_extrapolate_64765, *[fill_value_64766], **kwargs_64767)
        
        # Testing the type of an if condition (line 538)
        if_condition_64769 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 538, 8), _do_extrapolate_call_result_64768)
        # Assigning a type to the variable 'if_condition_64769' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'if_condition_64769', if_condition_64769)
        # SSA begins for if statement (line 538)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 539)
        self_64770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 15), 'self')
        # Obtaining the member 'bounds_error' of a type (line 539)
        bounds_error_64771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 15), self_64770, 'bounds_error')
        # Testing the type of an if condition (line 539)
        if_condition_64772 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 539, 12), bounds_error_64771)
        # Assigning a type to the variable 'if_condition_64772' (line 539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 539, 12), 'if_condition_64772', if_condition_64772)
        # SSA begins for if statement (line 539)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 540)
        # Processing the call arguments (line 540)
        str_64774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 33), 'str', 'Cannot extrapolate and raise at the same time.')
        # Processing the call keyword arguments (line 540)
        kwargs_64775 = {}
        # Getting the type of 'ValueError' (line 540)
        ValueError_64773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 540)
        ValueError_call_result_64776 = invoke(stypy.reporting.localization.Localization(__file__, 540, 22), ValueError_64773, *[str_64774], **kwargs_64775)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 540, 16), ValueError_call_result_64776, 'raise parameter', BaseException)
        # SSA join for if statement (line 539)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 542):
        
        # Assigning a Name to a Attribute (line 542):
        # Getting the type of 'False' (line 542)
        False_64777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 32), 'False')
        # Getting the type of 'self' (line 542)
        self_64778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 12), 'self')
        # Setting the type of the member 'bounds_error' of a type (line 542)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 12), self_64778, 'bounds_error', False_64777)
        
        # Assigning a Name to a Attribute (line 543):
        
        # Assigning a Name to a Attribute (line 543):
        # Getting the type of 'True' (line 543)
        True_64779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 32), 'True')
        # Getting the type of 'self' (line 543)
        self_64780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 12), 'self')
        # Setting the type of the member '_extrapolate' of a type (line 543)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 12), self_64780, '_extrapolate', True_64779)
        # SSA branch for the else part of an if statement (line 538)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 545):
        
        # Assigning a BinOp to a Name (line 545):
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 545)
        self_64781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 45), 'self')
        # Obtaining the member 'axis' of a type (line 545)
        axis_64782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 45), self_64781, 'axis')
        slice_64783 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 545, 31), None, axis_64782, None)
        # Getting the type of 'self' (line 545)
        self_64784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 31), 'self')
        # Obtaining the member 'y' of a type (line 545)
        y_64785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 31), self_64784, 'y')
        # Obtaining the member 'shape' of a type (line 545)
        shape_64786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 31), y_64785, 'shape')
        # Obtaining the member '__getitem__' of a type (line 545)
        getitem___64787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 31), shape_64786, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 545)
        subscript_call_result_64788 = invoke(stypy.reporting.localization.Localization(__file__, 545, 31), getitem___64787, slice_64783)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 546)
        self_64789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 44), 'self')
        # Obtaining the member 'axis' of a type (line 546)
        axis_64790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 44), self_64789, 'axis')
        int_64791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 56), 'int')
        # Applying the binary operator '+' (line 546)
        result_add_64792 = python_operator(stypy.reporting.localization.Localization(__file__, 546, 44), '+', axis_64790, int_64791)
        
        slice_64793 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 546, 31), result_add_64792, None, None)
        # Getting the type of 'self' (line 546)
        self_64794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 31), 'self')
        # Obtaining the member 'y' of a type (line 546)
        y_64795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 31), self_64794, 'y')
        # Obtaining the member 'shape' of a type (line 546)
        shape_64796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 31), y_64795, 'shape')
        # Obtaining the member '__getitem__' of a type (line 546)
        getitem___64797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 31), shape_64796, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 546)
        subscript_call_result_64798 = invoke(stypy.reporting.localization.Localization(__file__, 546, 31), getitem___64797, slice_64793)
        
        # Applying the binary operator '+' (line 545)
        result_add_64799 = python_operator(stypy.reporting.localization.Localization(__file__, 545, 31), '+', subscript_call_result_64788, subscript_call_result_64798)
        
        # Assigning a type to the variable 'broadcast_shape' (line 545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 12), 'broadcast_shape', result_add_64799)
        
        
        
        # Call to len(...): (line 547)
        # Processing the call arguments (line 547)
        # Getting the type of 'broadcast_shape' (line 547)
        broadcast_shape_64801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 19), 'broadcast_shape', False)
        # Processing the call keyword arguments (line 547)
        kwargs_64802 = {}
        # Getting the type of 'len' (line 547)
        len_64800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 15), 'len', False)
        # Calling len(args, kwargs) (line 547)
        len_call_result_64803 = invoke(stypy.reporting.localization.Localization(__file__, 547, 15), len_64800, *[broadcast_shape_64801], **kwargs_64802)
        
        int_64804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 39), 'int')
        # Applying the binary operator '==' (line 547)
        result_eq_64805 = python_operator(stypy.reporting.localization.Localization(__file__, 547, 15), '==', len_call_result_64803, int_64804)
        
        # Testing the type of an if condition (line 547)
        if_condition_64806 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 547, 12), result_eq_64805)
        # Assigning a type to the variable 'if_condition_64806' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'if_condition_64806', if_condition_64806)
        # SSA begins for if statement (line 547)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Name (line 548):
        
        # Assigning a Tuple to a Name (line 548):
        
        # Obtaining an instance of the builtin type 'tuple' (line 548)
        tuple_64807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 548)
        # Adding element type (line 548)
        int_64808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 548, 35), tuple_64807, int_64808)
        
        # Assigning a type to the variable 'broadcast_shape' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 16), 'broadcast_shape', tuple_64807)
        # SSA join for if statement (line 547)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 551)
        # Processing the call arguments (line 551)
        # Getting the type of 'fill_value' (line 551)
        fill_value_64810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 26), 'fill_value', False)
        # Getting the type of 'tuple' (line 551)
        tuple_64811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 38), 'tuple', False)
        # Processing the call keyword arguments (line 551)
        kwargs_64812 = {}
        # Getting the type of 'isinstance' (line 551)
        isinstance_64809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 551)
        isinstance_call_result_64813 = invoke(stypy.reporting.localization.Localization(__file__, 551, 15), isinstance_64809, *[fill_value_64810, tuple_64811], **kwargs_64812)
        
        
        
        # Call to len(...): (line 551)
        # Processing the call arguments (line 551)
        # Getting the type of 'fill_value' (line 551)
        fill_value_64815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 53), 'fill_value', False)
        # Processing the call keyword arguments (line 551)
        kwargs_64816 = {}
        # Getting the type of 'len' (line 551)
        len_64814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 49), 'len', False)
        # Calling len(args, kwargs) (line 551)
        len_call_result_64817 = invoke(stypy.reporting.localization.Localization(__file__, 551, 49), len_64814, *[fill_value_64815], **kwargs_64816)
        
        int_64818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 68), 'int')
        # Applying the binary operator '==' (line 551)
        result_eq_64819 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 49), '==', len_call_result_64817, int_64818)
        
        # Applying the binary operator 'and' (line 551)
        result_and_keyword_64820 = python_operator(stypy.reporting.localization.Localization(__file__, 551, 15), 'and', isinstance_call_result_64813, result_eq_64819)
        
        # Testing the type of an if condition (line 551)
        if_condition_64821 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 551, 12), result_and_keyword_64820)
        # Assigning a type to the variable 'if_condition_64821' (line 551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 551, 12), 'if_condition_64821', if_condition_64821)
        # SSA begins for if statement (line 551)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 552):
        
        # Assigning a List to a Name (line 552):
        
        # Obtaining an instance of the builtin type 'list' (line 552)
        list_64822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 552)
        # Adding element type (line 552)
        
        # Call to asarray(...): (line 552)
        # Processing the call arguments (line 552)
        
        # Obtaining the type of the subscript
        int_64825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 53), 'int')
        # Getting the type of 'fill_value' (line 552)
        fill_value_64826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 42), 'fill_value', False)
        # Obtaining the member '__getitem__' of a type (line 552)
        getitem___64827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 42), fill_value_64826, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 552)
        subscript_call_result_64828 = invoke(stypy.reporting.localization.Localization(__file__, 552, 42), getitem___64827, int_64825)
        
        # Processing the call keyword arguments (line 552)
        kwargs_64829 = {}
        # Getting the type of 'np' (line 552)
        np_64823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 31), 'np', False)
        # Obtaining the member 'asarray' of a type (line 552)
        asarray_64824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 31), np_64823, 'asarray')
        # Calling asarray(args, kwargs) (line 552)
        asarray_call_result_64830 = invoke(stypy.reporting.localization.Localization(__file__, 552, 31), asarray_64824, *[subscript_call_result_64828], **kwargs_64829)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 552, 30), list_64822, asarray_call_result_64830)
        # Adding element type (line 552)
        
        # Call to asarray(...): (line 553)
        # Processing the call arguments (line 553)
        
        # Obtaining the type of the subscript
        int_64833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 53), 'int')
        # Getting the type of 'fill_value' (line 553)
        fill_value_64834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 42), 'fill_value', False)
        # Obtaining the member '__getitem__' of a type (line 553)
        getitem___64835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 42), fill_value_64834, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 553)
        subscript_call_result_64836 = invoke(stypy.reporting.localization.Localization(__file__, 553, 42), getitem___64835, int_64833)
        
        # Processing the call keyword arguments (line 553)
        kwargs_64837 = {}
        # Getting the type of 'np' (line 553)
        np_64831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 31), 'np', False)
        # Obtaining the member 'asarray' of a type (line 553)
        asarray_64832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 31), np_64831, 'asarray')
        # Calling asarray(args, kwargs) (line 553)
        asarray_call_result_64838 = invoke(stypy.reporting.localization.Localization(__file__, 553, 31), asarray_64832, *[subscript_call_result_64836], **kwargs_64837)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 552, 30), list_64822, asarray_call_result_64838)
        
        # Assigning a type to the variable 'below_above' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 16), 'below_above', list_64822)
        
        # Assigning a Tuple to a Name (line 554):
        
        # Assigning a Tuple to a Name (line 554):
        
        # Obtaining an instance of the builtin type 'tuple' (line 554)
        tuple_64839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 554)
        # Adding element type (line 554)
        str_64840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 25), 'str', 'fill_value (below)')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 554, 25), tuple_64839, str_64840)
        # Adding element type (line 554)
        str_64841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, 47), 'str', 'fill_value (above)')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 554, 25), tuple_64839, str_64841)
        
        # Assigning a type to the variable 'names' (line 554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 16), 'names', tuple_64839)
        
        
        # Call to range(...): (line 555)
        # Processing the call arguments (line 555)
        int_64843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 555, 32), 'int')
        # Processing the call keyword arguments (line 555)
        kwargs_64844 = {}
        # Getting the type of 'range' (line 555)
        range_64842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 26), 'range', False)
        # Calling range(args, kwargs) (line 555)
        range_call_result_64845 = invoke(stypy.reporting.localization.Localization(__file__, 555, 26), range_64842, *[int_64843], **kwargs_64844)
        
        # Testing the type of a for loop iterable (line 555)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 555, 16), range_call_result_64845)
        # Getting the type of the for loop variable (line 555)
        for_loop_var_64846 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 555, 16), range_call_result_64845)
        # Assigning a type to the variable 'ii' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 16), 'ii', for_loop_var_64846)
        # SSA begins for a for statement (line 555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Subscript (line 556):
        
        # Assigning a Call to a Subscript (line 556):
        
        # Call to _check_broadcast_up_to(...): (line 556)
        # Processing the call arguments (line 556)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ii' (line 557)
        ii_64848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 36), 'ii', False)
        # Getting the type of 'below_above' (line 557)
        below_above_64849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 24), 'below_above', False)
        # Obtaining the member '__getitem__' of a type (line 557)
        getitem___64850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 24), below_above_64849, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 557)
        subscript_call_result_64851 = invoke(stypy.reporting.localization.Localization(__file__, 557, 24), getitem___64850, ii_64848)
        
        # Getting the type of 'broadcast_shape' (line 557)
        broadcast_shape_64852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 41), 'broadcast_shape', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ii' (line 557)
        ii_64853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 64), 'ii', False)
        # Getting the type of 'names' (line 557)
        names_64854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 58), 'names', False)
        # Obtaining the member '__getitem__' of a type (line 557)
        getitem___64855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 58), names_64854, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 557)
        subscript_call_result_64856 = invoke(stypy.reporting.localization.Localization(__file__, 557, 58), getitem___64855, ii_64853)
        
        # Processing the call keyword arguments (line 556)
        kwargs_64857 = {}
        # Getting the type of '_check_broadcast_up_to' (line 556)
        _check_broadcast_up_to_64847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 38), '_check_broadcast_up_to', False)
        # Calling _check_broadcast_up_to(args, kwargs) (line 556)
        _check_broadcast_up_to_call_result_64858 = invoke(stypy.reporting.localization.Localization(__file__, 556, 38), _check_broadcast_up_to_64847, *[subscript_call_result_64851, broadcast_shape_64852, subscript_call_result_64856], **kwargs_64857)
        
        # Getting the type of 'below_above' (line 556)
        below_above_64859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 20), 'below_above')
        # Getting the type of 'ii' (line 556)
        ii_64860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 32), 'ii')
        # Storing an element on a container (line 556)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 556, 20), below_above_64859, (ii_64860, _check_broadcast_up_to_call_result_64858))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 551)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 559):
        
        # Assigning a Call to a Name (line 559):
        
        # Call to asarray(...): (line 559)
        # Processing the call arguments (line 559)
        # Getting the type of 'fill_value' (line 559)
        fill_value_64863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 40), 'fill_value', False)
        # Processing the call keyword arguments (line 559)
        kwargs_64864 = {}
        # Getting the type of 'np' (line 559)
        np_64861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 29), 'np', False)
        # Obtaining the member 'asarray' of a type (line 559)
        asarray_64862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 29), np_64861, 'asarray')
        # Calling asarray(args, kwargs) (line 559)
        asarray_call_result_64865 = invoke(stypy.reporting.localization.Localization(__file__, 559, 29), asarray_64862, *[fill_value_64863], **kwargs_64864)
        
        # Assigning a type to the variable 'fill_value' (line 559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 16), 'fill_value', asarray_call_result_64865)
        
        # Assigning a BinOp to a Name (line 560):
        
        # Assigning a BinOp to a Name (line 560):
        
        # Obtaining an instance of the builtin type 'list' (line 560)
        list_64866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 560)
        # Adding element type (line 560)
        
        # Call to _check_broadcast_up_to(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'fill_value' (line 561)
        fill_value_64868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 20), 'fill_value', False)
        # Getting the type of 'broadcast_shape' (line 561)
        broadcast_shape_64869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 32), 'broadcast_shape', False)
        str_64870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 49), 'str', 'fill_value')
        # Processing the call keyword arguments (line 560)
        kwargs_64871 = {}
        # Getting the type of '_check_broadcast_up_to' (line 560)
        _check_broadcast_up_to_64867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 31), '_check_broadcast_up_to', False)
        # Calling _check_broadcast_up_to(args, kwargs) (line 560)
        _check_broadcast_up_to_call_result_64872 = invoke(stypy.reporting.localization.Localization(__file__, 560, 31), _check_broadcast_up_to_64867, *[fill_value_64868, broadcast_shape_64869, str_64870], **kwargs_64871)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 560, 30), list_64866, _check_broadcast_up_to_call_result_64872)
        
        int_64873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 66), 'int')
        # Applying the binary operator '*' (line 560)
        result_mul_64874 = python_operator(stypy.reporting.localization.Localization(__file__, 560, 30), '*', list_64866, int_64873)
        
        # Assigning a type to the variable 'below_above' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'below_above', result_mul_64874)
        # SSA join for if statement (line 551)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Tuple (line 562):
        
        # Assigning a Subscript to a Name (line 562):
        
        # Obtaining the type of the subscript
        int_64875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 12), 'int')
        # Getting the type of 'below_above' (line 562)
        below_above_64876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 61), 'below_above')
        # Obtaining the member '__getitem__' of a type (line 562)
        getitem___64877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 12), below_above_64876, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 562)
        subscript_call_result_64878 = invoke(stypy.reporting.localization.Localization(__file__, 562, 12), getitem___64877, int_64875)
        
        # Assigning a type to the variable 'tuple_var_assignment_63605' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'tuple_var_assignment_63605', subscript_call_result_64878)
        
        # Assigning a Subscript to a Name (line 562):
        
        # Obtaining the type of the subscript
        int_64879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 12), 'int')
        # Getting the type of 'below_above' (line 562)
        below_above_64880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 61), 'below_above')
        # Obtaining the member '__getitem__' of a type (line 562)
        getitem___64881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 12), below_above_64880, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 562)
        subscript_call_result_64882 = invoke(stypy.reporting.localization.Localization(__file__, 562, 12), getitem___64881, int_64879)
        
        # Assigning a type to the variable 'tuple_var_assignment_63606' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'tuple_var_assignment_63606', subscript_call_result_64882)
        
        # Assigning a Name to a Attribute (line 562):
        # Getting the type of 'tuple_var_assignment_63605' (line 562)
        tuple_var_assignment_63605_64883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'tuple_var_assignment_63605')
        # Getting the type of 'self' (line 562)
        self_64884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'self')
        # Setting the type of the member '_fill_value_below' of a type (line 562)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 12), self_64884, '_fill_value_below', tuple_var_assignment_63605_64883)
        
        # Assigning a Name to a Attribute (line 562):
        # Getting the type of 'tuple_var_assignment_63606' (line 562)
        tuple_var_assignment_63606_64885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'tuple_var_assignment_63606')
        # Getting the type of 'self' (line 562)
        self_64886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 36), 'self')
        # Setting the type of the member '_fill_value_above' of a type (line 562)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 36), self_64886, '_fill_value_above', tuple_var_assignment_63606_64885)
        
        # Assigning a Name to a Attribute (line 563):
        
        # Assigning a Name to a Attribute (line 563):
        # Getting the type of 'False' (line 563)
        False_64887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 32), 'False')
        # Getting the type of 'self' (line 563)
        self_64888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 12), 'self')
        # Setting the type of the member '_extrapolate' of a type (line 563)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 12), self_64888, '_extrapolate', False_64887)
        
        # Type idiom detected: calculating its left and rigth part (line 564)
        # Getting the type of 'self' (line 564)
        self_64889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 15), 'self')
        # Obtaining the member 'bounds_error' of a type (line 564)
        bounds_error_64890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 15), self_64889, 'bounds_error')
        # Getting the type of 'None' (line 564)
        None_64891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 36), 'None')
        
        (may_be_64892, more_types_in_union_64893) = may_be_none(bounds_error_64890, None_64891)

        if may_be_64892:

            if more_types_in_union_64893:
                # Runtime conditional SSA (line 564)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 565):
            
            # Assigning a Name to a Attribute (line 565):
            # Getting the type of 'True' (line 565)
            True_64894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 36), 'True')
            # Getting the type of 'self' (line 565)
            self_64895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 16), 'self')
            # Setting the type of the member 'bounds_error' of a type (line 565)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 16), self_64895, 'bounds_error', True_64894)

            if more_types_in_union_64893:
                # SSA join for if statement (line 564)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 538)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 567):
        
        # Assigning a Name to a Attribute (line 567):
        # Getting the type of 'fill_value' (line 567)
        fill_value_64896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 32), 'fill_value')
        # Getting the type of 'self' (line 567)
        self_64897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 8), 'self')
        # Setting the type of the member '_fill_value_orig' of a type (line 567)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 8), self_64897, '_fill_value_orig', fill_value_64896)
        
        # ################# End of 'fill_value(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fill_value' in the type store
        # Getting the type of 'stypy_return_type' (line 535)
        stypy_return_type_64898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64898)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fill_value'
        return stypy_return_type_64898


    @norecursion
    def _call_linear_np(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_call_linear_np'
        module_type_store = module_type_store.open_function_context('_call_linear_np', 569, 4, False)
        # Assigning a type to the variable 'self' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        interp1d._call_linear_np.__dict__.__setitem__('stypy_localization', localization)
        interp1d._call_linear_np.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        interp1d._call_linear_np.__dict__.__setitem__('stypy_type_store', module_type_store)
        interp1d._call_linear_np.__dict__.__setitem__('stypy_function_name', 'interp1d._call_linear_np')
        interp1d._call_linear_np.__dict__.__setitem__('stypy_param_names_list', ['x_new'])
        interp1d._call_linear_np.__dict__.__setitem__('stypy_varargs_param_name', None)
        interp1d._call_linear_np.__dict__.__setitem__('stypy_kwargs_param_name', None)
        interp1d._call_linear_np.__dict__.__setitem__('stypy_call_defaults', defaults)
        interp1d._call_linear_np.__dict__.__setitem__('stypy_call_varargs', varargs)
        interp1d._call_linear_np.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        interp1d._call_linear_np.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp1d._call_linear_np', ['x_new'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_call_linear_np', localization, ['x_new'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_call_linear_np(...)' code ##################

        
        # Call to interp(...): (line 571)
        # Processing the call arguments (line 571)
        # Getting the type of 'x_new' (line 571)
        x_new_64901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 25), 'x_new', False)
        # Getting the type of 'self' (line 571)
        self_64902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 32), 'self', False)
        # Obtaining the member 'x' of a type (line 571)
        x_64903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 32), self_64902, 'x')
        # Getting the type of 'self' (line 571)
        self_64904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 40), 'self', False)
        # Obtaining the member 'y' of a type (line 571)
        y_64905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 40), self_64904, 'y')
        # Processing the call keyword arguments (line 571)
        kwargs_64906 = {}
        # Getting the type of 'np' (line 571)
        np_64899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 15), 'np', False)
        # Obtaining the member 'interp' of a type (line 571)
        interp_64900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 15), np_64899, 'interp')
        # Calling interp(args, kwargs) (line 571)
        interp_call_result_64907 = invoke(stypy.reporting.localization.Localization(__file__, 571, 15), interp_64900, *[x_new_64901, x_64903, y_64905], **kwargs_64906)
        
        # Assigning a type to the variable 'stypy_return_type' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 8), 'stypy_return_type', interp_call_result_64907)
        
        # ################# End of '_call_linear_np(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_call_linear_np' in the type store
        # Getting the type of 'stypy_return_type' (line 569)
        stypy_return_type_64908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64908)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_call_linear_np'
        return stypy_return_type_64908


    @norecursion
    def _call_linear(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_call_linear'
        module_type_store = module_type_store.open_function_context('_call_linear', 573, 4, False)
        # Assigning a type to the variable 'self' (line 574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        interp1d._call_linear.__dict__.__setitem__('stypy_localization', localization)
        interp1d._call_linear.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        interp1d._call_linear.__dict__.__setitem__('stypy_type_store', module_type_store)
        interp1d._call_linear.__dict__.__setitem__('stypy_function_name', 'interp1d._call_linear')
        interp1d._call_linear.__dict__.__setitem__('stypy_param_names_list', ['x_new'])
        interp1d._call_linear.__dict__.__setitem__('stypy_varargs_param_name', None)
        interp1d._call_linear.__dict__.__setitem__('stypy_kwargs_param_name', None)
        interp1d._call_linear.__dict__.__setitem__('stypy_call_defaults', defaults)
        interp1d._call_linear.__dict__.__setitem__('stypy_call_varargs', varargs)
        interp1d._call_linear.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        interp1d._call_linear.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp1d._call_linear', ['x_new'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_call_linear', localization, ['x_new'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_call_linear(...)' code ##################

        
        # Assigning a Call to a Name (line 577):
        
        # Assigning a Call to a Name (line 577):
        
        # Call to searchsorted(...): (line 577)
        # Processing the call arguments (line 577)
        # Getting the type of 'self' (line 577)
        self_64910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 37), 'self', False)
        # Obtaining the member 'x' of a type (line 577)
        x_64911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 37), self_64910, 'x')
        # Getting the type of 'x_new' (line 577)
        x_new_64912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 45), 'x_new', False)
        # Processing the call keyword arguments (line 577)
        kwargs_64913 = {}
        # Getting the type of 'searchsorted' (line 577)
        searchsorted_64909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 24), 'searchsorted', False)
        # Calling searchsorted(args, kwargs) (line 577)
        searchsorted_call_result_64914 = invoke(stypy.reporting.localization.Localization(__file__, 577, 24), searchsorted_64909, *[x_64911, x_new_64912], **kwargs_64913)
        
        # Assigning a type to the variable 'x_new_indices' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'x_new_indices', searchsorted_call_result_64914)
        
        # Assigning a Call to a Name (line 582):
        
        # Assigning a Call to a Name (line 582):
        
        # Call to astype(...): (line 582)
        # Processing the call arguments (line 582)
        # Getting the type of 'int' (line 582)
        int_64928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 68), 'int', False)
        # Processing the call keyword arguments (line 582)
        kwargs_64929 = {}
        
        # Call to clip(...): (line 582)
        # Processing the call arguments (line 582)
        int_64917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 43), 'int')
        
        # Call to len(...): (line 582)
        # Processing the call arguments (line 582)
        # Getting the type of 'self' (line 582)
        self_64919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 50), 'self', False)
        # Obtaining the member 'x' of a type (line 582)
        x_64920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 50), self_64919, 'x')
        # Processing the call keyword arguments (line 582)
        kwargs_64921 = {}
        # Getting the type of 'len' (line 582)
        len_64918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 46), 'len', False)
        # Calling len(args, kwargs) (line 582)
        len_call_result_64922 = invoke(stypy.reporting.localization.Localization(__file__, 582, 46), len_64918, *[x_64920], **kwargs_64921)
        
        int_64923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 58), 'int')
        # Applying the binary operator '-' (line 582)
        result_sub_64924 = python_operator(stypy.reporting.localization.Localization(__file__, 582, 46), '-', len_call_result_64922, int_64923)
        
        # Processing the call keyword arguments (line 582)
        kwargs_64925 = {}
        # Getting the type of 'x_new_indices' (line 582)
        x_new_indices_64915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 24), 'x_new_indices', False)
        # Obtaining the member 'clip' of a type (line 582)
        clip_64916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 24), x_new_indices_64915, 'clip')
        # Calling clip(args, kwargs) (line 582)
        clip_call_result_64926 = invoke(stypy.reporting.localization.Localization(__file__, 582, 24), clip_64916, *[int_64917, result_sub_64924], **kwargs_64925)
        
        # Obtaining the member 'astype' of a type (line 582)
        astype_64927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 24), clip_call_result_64926, 'astype')
        # Calling astype(args, kwargs) (line 582)
        astype_call_result_64930 = invoke(stypy.reporting.localization.Localization(__file__, 582, 24), astype_64927, *[int_64928], **kwargs_64929)
        
        # Assigning a type to the variable 'x_new_indices' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'x_new_indices', astype_call_result_64930)
        
        # Assigning a BinOp to a Name (line 585):
        
        # Assigning a BinOp to a Name (line 585):
        # Getting the type of 'x_new_indices' (line 585)
        x_new_indices_64931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 13), 'x_new_indices')
        int_64932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 585, 29), 'int')
        # Applying the binary operator '-' (line 585)
        result_sub_64933 = python_operator(stypy.reporting.localization.Localization(__file__, 585, 13), '-', x_new_indices_64931, int_64932)
        
        # Assigning a type to the variable 'lo' (line 585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 8), 'lo', result_sub_64933)
        
        # Assigning a Name to a Name (line 586):
        
        # Assigning a Name to a Name (line 586):
        # Getting the type of 'x_new_indices' (line 586)
        x_new_indices_64934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 13), 'x_new_indices')
        # Assigning a type to the variable 'hi' (line 586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 8), 'hi', x_new_indices_64934)
        
        # Assigning a Subscript to a Name (line 588):
        
        # Assigning a Subscript to a Name (line 588):
        
        # Obtaining the type of the subscript
        # Getting the type of 'lo' (line 588)
        lo_64935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 22), 'lo')
        # Getting the type of 'self' (line 588)
        self_64936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 15), 'self')
        # Obtaining the member 'x' of a type (line 588)
        x_64937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 15), self_64936, 'x')
        # Obtaining the member '__getitem__' of a type (line 588)
        getitem___64938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 15), x_64937, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 588)
        subscript_call_result_64939 = invoke(stypy.reporting.localization.Localization(__file__, 588, 15), getitem___64938, lo_64935)
        
        # Assigning a type to the variable 'x_lo' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 8), 'x_lo', subscript_call_result_64939)
        
        # Assigning a Subscript to a Name (line 589):
        
        # Assigning a Subscript to a Name (line 589):
        
        # Obtaining the type of the subscript
        # Getting the type of 'hi' (line 589)
        hi_64940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 22), 'hi')
        # Getting the type of 'self' (line 589)
        self_64941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 15), 'self')
        # Obtaining the member 'x' of a type (line 589)
        x_64942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 15), self_64941, 'x')
        # Obtaining the member '__getitem__' of a type (line 589)
        getitem___64943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 15), x_64942, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 589)
        subscript_call_result_64944 = invoke(stypy.reporting.localization.Localization(__file__, 589, 15), getitem___64943, hi_64940)
        
        # Assigning a type to the variable 'x_hi' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'x_hi', subscript_call_result_64944)
        
        # Assigning a Subscript to a Name (line 590):
        
        # Assigning a Subscript to a Name (line 590):
        
        # Obtaining the type of the subscript
        # Getting the type of 'lo' (line 590)
        lo_64945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 23), 'lo')
        # Getting the type of 'self' (line 590)
        self_64946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 15), 'self')
        # Obtaining the member '_y' of a type (line 590)
        _y_64947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 15), self_64946, '_y')
        # Obtaining the member '__getitem__' of a type (line 590)
        getitem___64948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 15), _y_64947, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 590)
        subscript_call_result_64949 = invoke(stypy.reporting.localization.Localization(__file__, 590, 15), getitem___64948, lo_64945)
        
        # Assigning a type to the variable 'y_lo' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'y_lo', subscript_call_result_64949)
        
        # Assigning a Subscript to a Name (line 591):
        
        # Assigning a Subscript to a Name (line 591):
        
        # Obtaining the type of the subscript
        # Getting the type of 'hi' (line 591)
        hi_64950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 23), 'hi')
        # Getting the type of 'self' (line 591)
        self_64951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 15), 'self')
        # Obtaining the member '_y' of a type (line 591)
        _y_64952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 15), self_64951, '_y')
        # Obtaining the member '__getitem__' of a type (line 591)
        getitem___64953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 15), _y_64952, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 591)
        subscript_call_result_64954 = invoke(stypy.reporting.localization.Localization(__file__, 591, 15), getitem___64953, hi_64950)
        
        # Assigning a type to the variable 'y_hi' (line 591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 8), 'y_hi', subscript_call_result_64954)
        
        # Assigning a BinOp to a Name (line 595):
        
        # Assigning a BinOp to a Name (line 595):
        # Getting the type of 'y_hi' (line 595)
        y_hi_64955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 17), 'y_hi')
        # Getting the type of 'y_lo' (line 595)
        y_lo_64956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 24), 'y_lo')
        # Applying the binary operator '-' (line 595)
        result_sub_64957 = python_operator(stypy.reporting.localization.Localization(__file__, 595, 17), '-', y_hi_64955, y_lo_64956)
        
        
        # Obtaining the type of the subscript
        slice_64958 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 595, 33), None, None, None)
        # Getting the type of 'None' (line 595)
        None_64959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 49), 'None')
        # Getting the type of 'x_hi' (line 595)
        x_hi_64960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 33), 'x_hi')
        # Getting the type of 'x_lo' (line 595)
        x_lo_64961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 40), 'x_lo')
        # Applying the binary operator '-' (line 595)
        result_sub_64962 = python_operator(stypy.reporting.localization.Localization(__file__, 595, 33), '-', x_hi_64960, x_lo_64961)
        
        # Obtaining the member '__getitem__' of a type (line 595)
        getitem___64963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 33), result_sub_64962, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 595)
        subscript_call_result_64964 = invoke(stypy.reporting.localization.Localization(__file__, 595, 33), getitem___64963, (slice_64958, None_64959))
        
        # Applying the binary operator 'div' (line 595)
        result_div_64965 = python_operator(stypy.reporting.localization.Localization(__file__, 595, 16), 'div', result_sub_64957, subscript_call_result_64964)
        
        # Assigning a type to the variable 'slope' (line 595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 8), 'slope', result_div_64965)
        
        # Assigning a BinOp to a Name (line 598):
        
        # Assigning a BinOp to a Name (line 598):
        # Getting the type of 'slope' (line 598)
        slope_64966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'slope')
        
        # Obtaining the type of the subscript
        slice_64967 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 598, 23), None, None, None)
        # Getting the type of 'None' (line 598)
        None_64968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 40), 'None')
        # Getting the type of 'x_new' (line 598)
        x_new_64969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 23), 'x_new')
        # Getting the type of 'x_lo' (line 598)
        x_lo_64970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 31), 'x_lo')
        # Applying the binary operator '-' (line 598)
        result_sub_64971 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 23), '-', x_new_64969, x_lo_64970)
        
        # Obtaining the member '__getitem__' of a type (line 598)
        getitem___64972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 23), result_sub_64971, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 598)
        subscript_call_result_64973 = invoke(stypy.reporting.localization.Localization(__file__, 598, 23), getitem___64972, (slice_64967, None_64968))
        
        # Applying the binary operator '*' (line 598)
        result_mul_64974 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 16), '*', slope_64966, subscript_call_result_64973)
        
        # Getting the type of 'y_lo' (line 598)
        y_lo_64975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 48), 'y_lo')
        # Applying the binary operator '+' (line 598)
        result_add_64976 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 16), '+', result_mul_64974, y_lo_64975)
        
        # Assigning a type to the variable 'y_new' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'y_new', result_add_64976)
        # Getting the type of 'y_new' (line 600)
        y_new_64977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 15), 'y_new')
        # Assigning a type to the variable 'stypy_return_type' (line 600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'stypy_return_type', y_new_64977)
        
        # ################# End of '_call_linear(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_call_linear' in the type store
        # Getting the type of 'stypy_return_type' (line 573)
        stypy_return_type_64978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64978)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_call_linear'
        return stypy_return_type_64978


    @norecursion
    def _call_nearest(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_call_nearest'
        module_type_store = module_type_store.open_function_context('_call_nearest', 602, 4, False)
        # Assigning a type to the variable 'self' (line 603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        interp1d._call_nearest.__dict__.__setitem__('stypy_localization', localization)
        interp1d._call_nearest.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        interp1d._call_nearest.__dict__.__setitem__('stypy_type_store', module_type_store)
        interp1d._call_nearest.__dict__.__setitem__('stypy_function_name', 'interp1d._call_nearest')
        interp1d._call_nearest.__dict__.__setitem__('stypy_param_names_list', ['x_new'])
        interp1d._call_nearest.__dict__.__setitem__('stypy_varargs_param_name', None)
        interp1d._call_nearest.__dict__.__setitem__('stypy_kwargs_param_name', None)
        interp1d._call_nearest.__dict__.__setitem__('stypy_call_defaults', defaults)
        interp1d._call_nearest.__dict__.__setitem__('stypy_call_varargs', varargs)
        interp1d._call_nearest.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        interp1d._call_nearest.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp1d._call_nearest', ['x_new'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_call_nearest', localization, ['x_new'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_call_nearest(...)' code ##################

        str_64979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 8), 'str', ' Find nearest neighbour interpolated y_new = f(x_new).')
        
        # Assigning a Call to a Name (line 609):
        
        # Assigning a Call to a Name (line 609):
        
        # Call to searchsorted(...): (line 609)
        # Processing the call arguments (line 609)
        # Getting the type of 'self' (line 609)
        self_64981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 37), 'self', False)
        # Obtaining the member 'x_bds' of a type (line 609)
        x_bds_64982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 37), self_64981, 'x_bds')
        # Getting the type of 'x_new' (line 609)
        x_new_64983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 49), 'x_new', False)
        # Processing the call keyword arguments (line 609)
        str_64984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 61), 'str', 'left')
        keyword_64985 = str_64984
        kwargs_64986 = {'side': keyword_64985}
        # Getting the type of 'searchsorted' (line 609)
        searchsorted_64980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 24), 'searchsorted', False)
        # Calling searchsorted(args, kwargs) (line 609)
        searchsorted_call_result_64987 = invoke(stypy.reporting.localization.Localization(__file__, 609, 24), searchsorted_64980, *[x_bds_64982, x_new_64983], **kwargs_64986)
        
        # Assigning a type to the variable 'x_new_indices' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 8), 'x_new_indices', searchsorted_call_result_64987)
        
        # Assigning a Call to a Name (line 612):
        
        # Assigning a Call to a Name (line 612):
        
        # Call to astype(...): (line 612)
        # Processing the call arguments (line 612)
        # Getting the type of 'intp' (line 612)
        intp_65001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 68), 'intp', False)
        # Processing the call keyword arguments (line 612)
        kwargs_65002 = {}
        
        # Call to clip(...): (line 612)
        # Processing the call arguments (line 612)
        int_64990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 43), 'int')
        
        # Call to len(...): (line 612)
        # Processing the call arguments (line 612)
        # Getting the type of 'self' (line 612)
        self_64992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 50), 'self', False)
        # Obtaining the member 'x' of a type (line 612)
        x_64993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 50), self_64992, 'x')
        # Processing the call keyword arguments (line 612)
        kwargs_64994 = {}
        # Getting the type of 'len' (line 612)
        len_64991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 46), 'len', False)
        # Calling len(args, kwargs) (line 612)
        len_call_result_64995 = invoke(stypy.reporting.localization.Localization(__file__, 612, 46), len_64991, *[x_64993], **kwargs_64994)
        
        int_64996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 58), 'int')
        # Applying the binary operator '-' (line 612)
        result_sub_64997 = python_operator(stypy.reporting.localization.Localization(__file__, 612, 46), '-', len_call_result_64995, int_64996)
        
        # Processing the call keyword arguments (line 612)
        kwargs_64998 = {}
        # Getting the type of 'x_new_indices' (line 612)
        x_new_indices_64988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 24), 'x_new_indices', False)
        # Obtaining the member 'clip' of a type (line 612)
        clip_64989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 24), x_new_indices_64988, 'clip')
        # Calling clip(args, kwargs) (line 612)
        clip_call_result_64999 = invoke(stypy.reporting.localization.Localization(__file__, 612, 24), clip_64989, *[int_64990, result_sub_64997], **kwargs_64998)
        
        # Obtaining the member 'astype' of a type (line 612)
        astype_65000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 24), clip_call_result_64999, 'astype')
        # Calling astype(args, kwargs) (line 612)
        astype_call_result_65003 = invoke(stypy.reporting.localization.Localization(__file__, 612, 24), astype_65000, *[intp_65001], **kwargs_65002)
        
        # Assigning a type to the variable 'x_new_indices' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'x_new_indices', astype_call_result_65003)
        
        # Assigning a Subscript to a Name (line 615):
        
        # Assigning a Subscript to a Name (line 615):
        
        # Obtaining the type of the subscript
        # Getting the type of 'x_new_indices' (line 615)
        x_new_indices_65004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 24), 'x_new_indices')
        # Getting the type of 'self' (line 615)
        self_65005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 16), 'self')
        # Obtaining the member '_y' of a type (line 615)
        _y_65006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 16), self_65005, '_y')
        # Obtaining the member '__getitem__' of a type (line 615)
        getitem___65007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 16), _y_65006, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 615)
        subscript_call_result_65008 = invoke(stypy.reporting.localization.Localization(__file__, 615, 16), getitem___65007, x_new_indices_65004)
        
        # Assigning a type to the variable 'y_new' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 8), 'y_new', subscript_call_result_65008)
        # Getting the type of 'y_new' (line 617)
        y_new_65009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 15), 'y_new')
        # Assigning a type to the variable 'stypy_return_type' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'stypy_return_type', y_new_65009)
        
        # ################# End of '_call_nearest(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_call_nearest' in the type store
        # Getting the type of 'stypy_return_type' (line 602)
        stypy_return_type_65010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65010)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_call_nearest'
        return stypy_return_type_65010


    @norecursion
    def _call_spline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_call_spline'
        module_type_store = module_type_store.open_function_context('_call_spline', 619, 4, False)
        # Assigning a type to the variable 'self' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        interp1d._call_spline.__dict__.__setitem__('stypy_localization', localization)
        interp1d._call_spline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        interp1d._call_spline.__dict__.__setitem__('stypy_type_store', module_type_store)
        interp1d._call_spline.__dict__.__setitem__('stypy_function_name', 'interp1d._call_spline')
        interp1d._call_spline.__dict__.__setitem__('stypy_param_names_list', ['x_new'])
        interp1d._call_spline.__dict__.__setitem__('stypy_varargs_param_name', None)
        interp1d._call_spline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        interp1d._call_spline.__dict__.__setitem__('stypy_call_defaults', defaults)
        interp1d._call_spline.__dict__.__setitem__('stypy_call_varargs', varargs)
        interp1d._call_spline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        interp1d._call_spline.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp1d._call_spline', ['x_new'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_call_spline', localization, ['x_new'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_call_spline(...)' code ##################

        
        # Call to _spline(...): (line 620)
        # Processing the call arguments (line 620)
        # Getting the type of 'x_new' (line 620)
        x_new_65013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 28), 'x_new', False)
        # Processing the call keyword arguments (line 620)
        kwargs_65014 = {}
        # Getting the type of 'self' (line 620)
        self_65011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 15), 'self', False)
        # Obtaining the member '_spline' of a type (line 620)
        _spline_65012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 15), self_65011, '_spline')
        # Calling _spline(args, kwargs) (line 620)
        _spline_call_result_65015 = invoke(stypy.reporting.localization.Localization(__file__, 620, 15), _spline_65012, *[x_new_65013], **kwargs_65014)
        
        # Assigning a type to the variable 'stypy_return_type' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'stypy_return_type', _spline_call_result_65015)
        
        # ################# End of '_call_spline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_call_spline' in the type store
        # Getting the type of 'stypy_return_type' (line 619)
        stypy_return_type_65016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65016)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_call_spline'
        return stypy_return_type_65016


    @norecursion
    def _call_nan_spline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_call_nan_spline'
        module_type_store = module_type_store.open_function_context('_call_nan_spline', 622, 4, False)
        # Assigning a type to the variable 'self' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        interp1d._call_nan_spline.__dict__.__setitem__('stypy_localization', localization)
        interp1d._call_nan_spline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        interp1d._call_nan_spline.__dict__.__setitem__('stypy_type_store', module_type_store)
        interp1d._call_nan_spline.__dict__.__setitem__('stypy_function_name', 'interp1d._call_nan_spline')
        interp1d._call_nan_spline.__dict__.__setitem__('stypy_param_names_list', ['x_new'])
        interp1d._call_nan_spline.__dict__.__setitem__('stypy_varargs_param_name', None)
        interp1d._call_nan_spline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        interp1d._call_nan_spline.__dict__.__setitem__('stypy_call_defaults', defaults)
        interp1d._call_nan_spline.__dict__.__setitem__('stypy_call_varargs', varargs)
        interp1d._call_nan_spline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        interp1d._call_nan_spline.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp1d._call_nan_spline', ['x_new'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_call_nan_spline', localization, ['x_new'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_call_nan_spline(...)' code ##################

        
        # Assigning a Call to a Name (line 623):
        
        # Assigning a Call to a Name (line 623):
        
        # Call to _spline(...): (line 623)
        # Processing the call arguments (line 623)
        # Getting the type of 'x_new' (line 623)
        x_new_65019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 27), 'x_new', False)
        # Processing the call keyword arguments (line 623)
        kwargs_65020 = {}
        # Getting the type of 'self' (line 623)
        self_65017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 14), 'self', False)
        # Obtaining the member '_spline' of a type (line 623)
        _spline_65018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 14), self_65017, '_spline')
        # Calling _spline(args, kwargs) (line 623)
        _spline_call_result_65021 = invoke(stypy.reporting.localization.Localization(__file__, 623, 14), _spline_65018, *[x_new_65019], **kwargs_65020)
        
        # Assigning a type to the variable 'out' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 8), 'out', _spline_call_result_65021)
        
        # Assigning a Attribute to a Subscript (line 624):
        
        # Assigning a Attribute to a Subscript (line 624):
        # Getting the type of 'np' (line 624)
        np_65022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 19), 'np')
        # Obtaining the member 'nan' of a type (line 624)
        nan_65023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 19), np_65022, 'nan')
        # Getting the type of 'out' (line 624)
        out_65024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 8), 'out')
        Ellipsis_65025 = Ellipsis
        # Storing an element on a container (line 624)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 624, 8), out_65024, (Ellipsis_65025, nan_65023))
        # Getting the type of 'out' (line 625)
        out_65026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'stypy_return_type', out_65026)
        
        # ################# End of '_call_nan_spline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_call_nan_spline' in the type store
        # Getting the type of 'stypy_return_type' (line 622)
        stypy_return_type_65027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65027)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_call_nan_spline'
        return stypy_return_type_65027


    @norecursion
    def _evaluate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_evaluate'
        module_type_store = module_type_store.open_function_context('_evaluate', 627, 4, False)
        # Assigning a type to the variable 'self' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        interp1d._evaluate.__dict__.__setitem__('stypy_localization', localization)
        interp1d._evaluate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        interp1d._evaluate.__dict__.__setitem__('stypy_type_store', module_type_store)
        interp1d._evaluate.__dict__.__setitem__('stypy_function_name', 'interp1d._evaluate')
        interp1d._evaluate.__dict__.__setitem__('stypy_param_names_list', ['x_new'])
        interp1d._evaluate.__dict__.__setitem__('stypy_varargs_param_name', None)
        interp1d._evaluate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        interp1d._evaluate.__dict__.__setitem__('stypy_call_defaults', defaults)
        interp1d._evaluate.__dict__.__setitem__('stypy_call_varargs', varargs)
        interp1d._evaluate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        interp1d._evaluate.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp1d._evaluate', ['x_new'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_evaluate', localization, ['x_new'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_evaluate(...)' code ##################

        
        # Assigning a Call to a Name (line 631):
        
        # Assigning a Call to a Name (line 631):
        
        # Call to asarray(...): (line 631)
        # Processing the call arguments (line 631)
        # Getting the type of 'x_new' (line 631)
        x_new_65029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 24), 'x_new', False)
        # Processing the call keyword arguments (line 631)
        kwargs_65030 = {}
        # Getting the type of 'asarray' (line 631)
        asarray_65028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 16), 'asarray', False)
        # Calling asarray(args, kwargs) (line 631)
        asarray_call_result_65031 = invoke(stypy.reporting.localization.Localization(__file__, 631, 16), asarray_65028, *[x_new_65029], **kwargs_65030)
        
        # Assigning a type to the variable 'x_new' (line 631)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 631, 8), 'x_new', asarray_call_result_65031)
        
        # Assigning a Call to a Name (line 632):
        
        # Assigning a Call to a Name (line 632):
        
        # Call to _call(...): (line 632)
        # Processing the call arguments (line 632)
        # Getting the type of 'self' (line 632)
        self_65034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 27), 'self', False)
        # Getting the type of 'x_new' (line 632)
        x_new_65035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 33), 'x_new', False)
        # Processing the call keyword arguments (line 632)
        kwargs_65036 = {}
        # Getting the type of 'self' (line 632)
        self_65032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 16), 'self', False)
        # Obtaining the member '_call' of a type (line 632)
        _call_65033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 632, 16), self_65032, '_call')
        # Calling _call(args, kwargs) (line 632)
        _call_call_result_65037 = invoke(stypy.reporting.localization.Localization(__file__, 632, 16), _call_65033, *[self_65034, x_new_65035], **kwargs_65036)
        
        # Assigning a type to the variable 'y_new' (line 632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 632, 8), 'y_new', _call_call_result_65037)
        
        
        # Getting the type of 'self' (line 633)
        self_65038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 15), 'self')
        # Obtaining the member '_extrapolate' of a type (line 633)
        _extrapolate_65039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 15), self_65038, '_extrapolate')
        # Applying the 'not' unary operator (line 633)
        result_not__65040 = python_operator(stypy.reporting.localization.Localization(__file__, 633, 11), 'not', _extrapolate_65039)
        
        # Testing the type of an if condition (line 633)
        if_condition_65041 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 633, 8), result_not__65040)
        # Assigning a type to the variable 'if_condition_65041' (line 633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 8), 'if_condition_65041', if_condition_65041)
        # SSA begins for if statement (line 633)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 634):
        
        # Assigning a Subscript to a Name (line 634):
        
        # Obtaining the type of the subscript
        int_65042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 12), 'int')
        
        # Call to _check_bounds(...): (line 634)
        # Processing the call arguments (line 634)
        # Getting the type of 'x_new' (line 634)
        x_new_65045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 60), 'x_new', False)
        # Processing the call keyword arguments (line 634)
        kwargs_65046 = {}
        # Getting the type of 'self' (line 634)
        self_65043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 41), 'self', False)
        # Obtaining the member '_check_bounds' of a type (line 634)
        _check_bounds_65044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 41), self_65043, '_check_bounds')
        # Calling _check_bounds(args, kwargs) (line 634)
        _check_bounds_call_result_65047 = invoke(stypy.reporting.localization.Localization(__file__, 634, 41), _check_bounds_65044, *[x_new_65045], **kwargs_65046)
        
        # Obtaining the member '__getitem__' of a type (line 634)
        getitem___65048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 12), _check_bounds_call_result_65047, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 634)
        subscript_call_result_65049 = invoke(stypy.reporting.localization.Localization(__file__, 634, 12), getitem___65048, int_65042)
        
        # Assigning a type to the variable 'tuple_var_assignment_63607' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 12), 'tuple_var_assignment_63607', subscript_call_result_65049)
        
        # Assigning a Subscript to a Name (line 634):
        
        # Obtaining the type of the subscript
        int_65050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 12), 'int')
        
        # Call to _check_bounds(...): (line 634)
        # Processing the call arguments (line 634)
        # Getting the type of 'x_new' (line 634)
        x_new_65053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 60), 'x_new', False)
        # Processing the call keyword arguments (line 634)
        kwargs_65054 = {}
        # Getting the type of 'self' (line 634)
        self_65051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 41), 'self', False)
        # Obtaining the member '_check_bounds' of a type (line 634)
        _check_bounds_65052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 41), self_65051, '_check_bounds')
        # Calling _check_bounds(args, kwargs) (line 634)
        _check_bounds_call_result_65055 = invoke(stypy.reporting.localization.Localization(__file__, 634, 41), _check_bounds_65052, *[x_new_65053], **kwargs_65054)
        
        # Obtaining the member '__getitem__' of a type (line 634)
        getitem___65056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 12), _check_bounds_call_result_65055, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 634)
        subscript_call_result_65057 = invoke(stypy.reporting.localization.Localization(__file__, 634, 12), getitem___65056, int_65050)
        
        # Assigning a type to the variable 'tuple_var_assignment_63608' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 12), 'tuple_var_assignment_63608', subscript_call_result_65057)
        
        # Assigning a Name to a Name (line 634):
        # Getting the type of 'tuple_var_assignment_63607' (line 634)
        tuple_var_assignment_63607_65058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 12), 'tuple_var_assignment_63607')
        # Assigning a type to the variable 'below_bounds' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 12), 'below_bounds', tuple_var_assignment_63607_65058)
        
        # Assigning a Name to a Name (line 634):
        # Getting the type of 'tuple_var_assignment_63608' (line 634)
        tuple_var_assignment_63608_65059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 12), 'tuple_var_assignment_63608')
        # Assigning a type to the variable 'above_bounds' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 26), 'above_bounds', tuple_var_assignment_63608_65059)
        
        
        
        # Call to len(...): (line 635)
        # Processing the call arguments (line 635)
        # Getting the type of 'y_new' (line 635)
        y_new_65061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 19), 'y_new', False)
        # Processing the call keyword arguments (line 635)
        kwargs_65062 = {}
        # Getting the type of 'len' (line 635)
        len_65060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 15), 'len', False)
        # Calling len(args, kwargs) (line 635)
        len_call_result_65063 = invoke(stypy.reporting.localization.Localization(__file__, 635, 15), len_65060, *[y_new_65061], **kwargs_65062)
        
        int_65064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, 28), 'int')
        # Applying the binary operator '>' (line 635)
        result_gt_65065 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 15), '>', len_call_result_65063, int_65064)
        
        # Testing the type of an if condition (line 635)
        if_condition_65066 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 635, 12), result_gt_65065)
        # Assigning a type to the variable 'if_condition_65066' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 12), 'if_condition_65066', if_condition_65066)
        # SSA begins for if statement (line 635)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 638):
        
        # Assigning a Attribute to a Subscript (line 638):
        # Getting the type of 'self' (line 638)
        self_65067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 38), 'self')
        # Obtaining the member '_fill_value_below' of a type (line 638)
        _fill_value_below_65068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 38), self_65067, '_fill_value_below')
        # Getting the type of 'y_new' (line 638)
        y_new_65069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 16), 'y_new')
        # Getting the type of 'below_bounds' (line 638)
        below_bounds_65070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 22), 'below_bounds')
        # Storing an element on a container (line 638)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 638, 16), y_new_65069, (below_bounds_65070, _fill_value_below_65068))
        
        # Assigning a Attribute to a Subscript (line 639):
        
        # Assigning a Attribute to a Subscript (line 639):
        # Getting the type of 'self' (line 639)
        self_65071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 38), 'self')
        # Obtaining the member '_fill_value_above' of a type (line 639)
        _fill_value_above_65072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 38), self_65071, '_fill_value_above')
        # Getting the type of 'y_new' (line 639)
        y_new_65073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 16), 'y_new')
        # Getting the type of 'above_bounds' (line 639)
        above_bounds_65074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 22), 'above_bounds')
        # Storing an element on a container (line 639)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 16), y_new_65073, (above_bounds_65074, _fill_value_above_65072))
        # SSA join for if statement (line 635)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 633)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'y_new' (line 640)
        y_new_65075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 15), 'y_new')
        # Assigning a type to the variable 'stypy_return_type' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'stypy_return_type', y_new_65075)
        
        # ################# End of '_evaluate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_evaluate' in the type store
        # Getting the type of 'stypy_return_type' (line 627)
        stypy_return_type_65076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65076)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_evaluate'
        return stypy_return_type_65076


    @norecursion
    def _check_bounds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_check_bounds'
        module_type_store = module_type_store.open_function_context('_check_bounds', 642, 4, False)
        # Assigning a type to the variable 'self' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        interp1d._check_bounds.__dict__.__setitem__('stypy_localization', localization)
        interp1d._check_bounds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        interp1d._check_bounds.__dict__.__setitem__('stypy_type_store', module_type_store)
        interp1d._check_bounds.__dict__.__setitem__('stypy_function_name', 'interp1d._check_bounds')
        interp1d._check_bounds.__dict__.__setitem__('stypy_param_names_list', ['x_new'])
        interp1d._check_bounds.__dict__.__setitem__('stypy_varargs_param_name', None)
        interp1d._check_bounds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        interp1d._check_bounds.__dict__.__setitem__('stypy_call_defaults', defaults)
        interp1d._check_bounds.__dict__.__setitem__('stypy_call_varargs', varargs)
        interp1d._check_bounds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        interp1d._check_bounds.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'interp1d._check_bounds', ['x_new'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_check_bounds', localization, ['x_new'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_check_bounds(...)' code ##################

        str_65077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 653, (-1)), 'str', 'Check the inputs for being in the bounds of the interpolated data.\n\n        Parameters\n        ----------\n        x_new : array\n\n        Returns\n        -------\n        out_of_bounds : bool array\n            The mask on x_new of values that are out of the bounds.\n        ')
        
        # Assigning a Compare to a Name (line 658):
        
        # Assigning a Compare to a Name (line 658):
        
        # Getting the type of 'x_new' (line 658)
        x_new_65078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 23), 'x_new')
        
        # Obtaining the type of the subscript
        int_65079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 38), 'int')
        # Getting the type of 'self' (line 658)
        self_65080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 31), 'self')
        # Obtaining the member 'x' of a type (line 658)
        x_65081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 31), self_65080, 'x')
        # Obtaining the member '__getitem__' of a type (line 658)
        getitem___65082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 31), x_65081, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 658)
        subscript_call_result_65083 = invoke(stypy.reporting.localization.Localization(__file__, 658, 31), getitem___65082, int_65079)
        
        # Applying the binary operator '<' (line 658)
        result_lt_65084 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 23), '<', x_new_65078, subscript_call_result_65083)
        
        # Assigning a type to the variable 'below_bounds' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 8), 'below_bounds', result_lt_65084)
        
        # Assigning a Compare to a Name (line 659):
        
        # Assigning a Compare to a Name (line 659):
        
        # Getting the type of 'x_new' (line 659)
        x_new_65085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 23), 'x_new')
        
        # Obtaining the type of the subscript
        int_65086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, 38), 'int')
        # Getting the type of 'self' (line 659)
        self_65087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 31), 'self')
        # Obtaining the member 'x' of a type (line 659)
        x_65088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 31), self_65087, 'x')
        # Obtaining the member '__getitem__' of a type (line 659)
        getitem___65089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 31), x_65088, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 659)
        subscript_call_result_65090 = invoke(stypy.reporting.localization.Localization(__file__, 659, 31), getitem___65089, int_65086)
        
        # Applying the binary operator '>' (line 659)
        result_gt_65091 = python_operator(stypy.reporting.localization.Localization(__file__, 659, 23), '>', x_new_65085, subscript_call_result_65090)
        
        # Assigning a type to the variable 'above_bounds' (line 659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 8), 'above_bounds', result_gt_65091)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 662)
        self_65092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 11), 'self')
        # Obtaining the member 'bounds_error' of a type (line 662)
        bounds_error_65093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 11), self_65092, 'bounds_error')
        
        # Call to any(...): (line 662)
        # Processing the call keyword arguments (line 662)
        kwargs_65096 = {}
        # Getting the type of 'below_bounds' (line 662)
        below_bounds_65094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 33), 'below_bounds', False)
        # Obtaining the member 'any' of a type (line 662)
        any_65095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 33), below_bounds_65094, 'any')
        # Calling any(args, kwargs) (line 662)
        any_call_result_65097 = invoke(stypy.reporting.localization.Localization(__file__, 662, 33), any_65095, *[], **kwargs_65096)
        
        # Applying the binary operator 'and' (line 662)
        result_and_keyword_65098 = python_operator(stypy.reporting.localization.Localization(__file__, 662, 11), 'and', bounds_error_65093, any_call_result_65097)
        
        # Testing the type of an if condition (line 662)
        if_condition_65099 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 662, 8), result_and_keyword_65098)
        # Assigning a type to the variable 'if_condition_65099' (line 662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'if_condition_65099', if_condition_65099)
        # SSA begins for if statement (line 662)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 663)
        # Processing the call arguments (line 663)
        str_65101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 29), 'str', 'A value in x_new is below the interpolation range.')
        # Processing the call keyword arguments (line 663)
        kwargs_65102 = {}
        # Getting the type of 'ValueError' (line 663)
        ValueError_65100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 663)
        ValueError_call_result_65103 = invoke(stypy.reporting.localization.Localization(__file__, 663, 18), ValueError_65100, *[str_65101], **kwargs_65102)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 663, 12), ValueError_call_result_65103, 'raise parameter', BaseException)
        # SSA join for if statement (line 662)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 665)
        self_65104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 11), 'self')
        # Obtaining the member 'bounds_error' of a type (line 665)
        bounds_error_65105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 11), self_65104, 'bounds_error')
        
        # Call to any(...): (line 665)
        # Processing the call keyword arguments (line 665)
        kwargs_65108 = {}
        # Getting the type of 'above_bounds' (line 665)
        above_bounds_65106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 33), 'above_bounds', False)
        # Obtaining the member 'any' of a type (line 665)
        any_65107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 33), above_bounds_65106, 'any')
        # Calling any(args, kwargs) (line 665)
        any_call_result_65109 = invoke(stypy.reporting.localization.Localization(__file__, 665, 33), any_65107, *[], **kwargs_65108)
        
        # Applying the binary operator 'and' (line 665)
        result_and_keyword_65110 = python_operator(stypy.reporting.localization.Localization(__file__, 665, 11), 'and', bounds_error_65105, any_call_result_65109)
        
        # Testing the type of an if condition (line 665)
        if_condition_65111 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 665, 8), result_and_keyword_65110)
        # Assigning a type to the variable 'if_condition_65111' (line 665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 8), 'if_condition_65111', if_condition_65111)
        # SSA begins for if statement (line 665)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 666)
        # Processing the call arguments (line 666)
        str_65113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 29), 'str', 'A value in x_new is above the interpolation range.')
        # Processing the call keyword arguments (line 666)
        kwargs_65114 = {}
        # Getting the type of 'ValueError' (line 666)
        ValueError_65112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 666)
        ValueError_call_result_65115 = invoke(stypy.reporting.localization.Localization(__file__, 666, 18), ValueError_65112, *[str_65113], **kwargs_65114)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 666, 12), ValueError_call_result_65115, 'raise parameter', BaseException)
        # SSA join for if statement (line 665)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 671)
        tuple_65116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 671)
        # Adding element type (line 671)
        # Getting the type of 'below_bounds' (line 671)
        below_bounds_65117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 15), 'below_bounds')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 671, 15), tuple_65116, below_bounds_65117)
        # Adding element type (line 671)
        # Getting the type of 'above_bounds' (line 671)
        above_bounds_65118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 29), 'above_bounds')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 671, 15), tuple_65116, above_bounds_65118)
        
        # Assigning a type to the variable 'stypy_return_type' (line 671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'stypy_return_type', tuple_65116)
        
        # ################# End of '_check_bounds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_check_bounds' in the type store
        # Getting the type of 'stypy_return_type' (line 642)
        stypy_return_type_65119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65119)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_check_bounds'
        return stypy_return_type_65119


# Assigning a type to the variable 'interp1d' (line 345)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 0), 'interp1d', interp1d)
# Declaration of the '_PPolyBase' class

class _PPolyBase(object, ):
    str_65120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 675, 4), 'str', 'Base class for piecewise polynomials.')
    
    # Assigning a Tuple to a Name (line 676):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 678)
        None_65121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 41), 'None')
        int_65122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 52), 'int')
        defaults = [None_65121, int_65122]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 678, 4, False)
        # Assigning a type to the variable 'self' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_PPolyBase.__init__', ['c', 'x', 'extrapolate', 'axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['c', 'x', 'extrapolate', 'axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 679):
        
        # Assigning a Call to a Attribute (line 679):
        
        # Call to asarray(...): (line 679)
        # Processing the call arguments (line 679)
        # Getting the type of 'c' (line 679)
        c_65125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 28), 'c', False)
        # Processing the call keyword arguments (line 679)
        kwargs_65126 = {}
        # Getting the type of 'np' (line 679)
        np_65123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 17), 'np', False)
        # Obtaining the member 'asarray' of a type (line 679)
        asarray_65124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 17), np_65123, 'asarray')
        # Calling asarray(args, kwargs) (line 679)
        asarray_call_result_65127 = invoke(stypy.reporting.localization.Localization(__file__, 679, 17), asarray_65124, *[c_65125], **kwargs_65126)
        
        # Getting the type of 'self' (line 679)
        self_65128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'self')
        # Setting the type of the member 'c' of a type (line 679)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 8), self_65128, 'c', asarray_call_result_65127)
        
        # Assigning a Call to a Attribute (line 680):
        
        # Assigning a Call to a Attribute (line 680):
        
        # Call to ascontiguousarray(...): (line 680)
        # Processing the call arguments (line 680)
        # Getting the type of 'x' (line 680)
        x_65131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 38), 'x', False)
        # Processing the call keyword arguments (line 680)
        # Getting the type of 'np' (line 680)
        np_65132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 47), 'np', False)
        # Obtaining the member 'float64' of a type (line 680)
        float64_65133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 47), np_65132, 'float64')
        keyword_65134 = float64_65133
        kwargs_65135 = {'dtype': keyword_65134}
        # Getting the type of 'np' (line 680)
        np_65129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 17), 'np', False)
        # Obtaining the member 'ascontiguousarray' of a type (line 680)
        ascontiguousarray_65130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 17), np_65129, 'ascontiguousarray')
        # Calling ascontiguousarray(args, kwargs) (line 680)
        ascontiguousarray_call_result_65136 = invoke(stypy.reporting.localization.Localization(__file__, 680, 17), ascontiguousarray_65130, *[x_65131], **kwargs_65135)
        
        # Getting the type of 'self' (line 680)
        self_65137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 8), 'self')
        # Setting the type of the member 'x' of a type (line 680)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 8), self_65137, 'x', ascontiguousarray_call_result_65136)
        
        # Type idiom detected: calculating its left and rigth part (line 682)
        # Getting the type of 'extrapolate' (line 682)
        extrapolate_65138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 11), 'extrapolate')
        # Getting the type of 'None' (line 682)
        None_65139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 26), 'None')
        
        (may_be_65140, more_types_in_union_65141) = may_be_none(extrapolate_65138, None_65139)

        if may_be_65140:

            if more_types_in_union_65141:
                # Runtime conditional SSA (line 682)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 683):
            
            # Assigning a Name to a Name (line 683):
            # Getting the type of 'True' (line 683)
            True_65142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 26), 'True')
            # Assigning a type to the variable 'extrapolate' (line 683)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 683, 12), 'extrapolate', True_65142)

            if more_types_in_union_65141:
                # Runtime conditional SSA for else branch (line 682)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_65140) or more_types_in_union_65141):
            
            
            # Getting the type of 'extrapolate' (line 684)
            extrapolate_65143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 684, 13), 'extrapolate')
            str_65144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 684, 28), 'str', 'periodic')
            # Applying the binary operator '!=' (line 684)
            result_ne_65145 = python_operator(stypy.reporting.localization.Localization(__file__, 684, 13), '!=', extrapolate_65143, str_65144)
            
            # Testing the type of an if condition (line 684)
            if_condition_65146 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 684, 13), result_ne_65145)
            # Assigning a type to the variable 'if_condition_65146' (line 684)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 684, 13), 'if_condition_65146', if_condition_65146)
            # SSA begins for if statement (line 684)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 685):
            
            # Assigning a Call to a Name (line 685):
            
            # Call to bool(...): (line 685)
            # Processing the call arguments (line 685)
            # Getting the type of 'extrapolate' (line 685)
            extrapolate_65148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 31), 'extrapolate', False)
            # Processing the call keyword arguments (line 685)
            kwargs_65149 = {}
            # Getting the type of 'bool' (line 685)
            bool_65147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 26), 'bool', False)
            # Calling bool(args, kwargs) (line 685)
            bool_call_result_65150 = invoke(stypy.reporting.localization.Localization(__file__, 685, 26), bool_65147, *[extrapolate_65148], **kwargs_65149)
            
            # Assigning a type to the variable 'extrapolate' (line 685)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 685, 12), 'extrapolate', bool_call_result_65150)
            # SSA join for if statement (line 684)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_65140 and more_types_in_union_65141):
                # SSA join for if statement (line 682)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 686):
        
        # Assigning a Name to a Attribute (line 686):
        # Getting the type of 'extrapolate' (line 686)
        extrapolate_65151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 27), 'extrapolate')
        # Getting the type of 'self' (line 686)
        self_65152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 686, 8), 'self')
        # Setting the type of the member 'extrapolate' of a type (line 686)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 686, 8), self_65152, 'extrapolate', extrapolate_65151)
        
        
        # Getting the type of 'self' (line 688)
        self_65153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 11), 'self')
        # Obtaining the member 'c' of a type (line 688)
        c_65154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 11), self_65153, 'c')
        # Obtaining the member 'ndim' of a type (line 688)
        ndim_65155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 11), c_65154, 'ndim')
        int_65156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 25), 'int')
        # Applying the binary operator '<' (line 688)
        result_lt_65157 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 11), '<', ndim_65155, int_65156)
        
        # Testing the type of an if condition (line 688)
        if_condition_65158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 688, 8), result_lt_65157)
        # Assigning a type to the variable 'if_condition_65158' (line 688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 8), 'if_condition_65158', if_condition_65158)
        # SSA begins for if statement (line 688)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 689)
        # Processing the call arguments (line 689)
        str_65160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 29), 'str', 'Coefficients array must be at least 2-dimensional.')
        # Processing the call keyword arguments (line 689)
        kwargs_65161 = {}
        # Getting the type of 'ValueError' (line 689)
        ValueError_65159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 689)
        ValueError_call_result_65162 = invoke(stypy.reporting.localization.Localization(__file__, 689, 18), ValueError_65159, *[str_65160], **kwargs_65161)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 689, 12), ValueError_call_result_65162, 'raise parameter', BaseException)
        # SSA join for if statement (line 688)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        int_65163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 16), 'int')
        # Getting the type of 'axis' (line 692)
        axis_65164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 21), 'axis')
        # Applying the binary operator '<=' (line 692)
        result_le_65165 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 16), '<=', int_65163, axis_65164)
        # Getting the type of 'self' (line 692)
        self_65166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 28), 'self')
        # Obtaining the member 'c' of a type (line 692)
        c_65167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 28), self_65166, 'c')
        # Obtaining the member 'ndim' of a type (line 692)
        ndim_65168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 28), c_65167, 'ndim')
        int_65169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 42), 'int')
        # Applying the binary operator '-' (line 692)
        result_sub_65170 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 28), '-', ndim_65168, int_65169)
        
        # Applying the binary operator '<' (line 692)
        result_lt_65171 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 16), '<', axis_65164, result_sub_65170)
        # Applying the binary operator '&' (line 692)
        result_and__65172 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 16), '&', result_le_65165, result_lt_65171)
        
        # Applying the 'not' unary operator (line 692)
        result_not__65173 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 11), 'not', result_and__65172)
        
        # Testing the type of an if condition (line 692)
        if_condition_65174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 692, 8), result_not__65173)
        # Assigning a type to the variable 'if_condition_65174' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 8), 'if_condition_65174', if_condition_65174)
        # SSA begins for if statement (line 692)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 693)
        # Processing the call arguments (line 693)
        str_65176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 693, 29), 'str', 'axis=%s must be between 0 and %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 694)
        tuple_65177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 694)
        # Adding element type (line 694)
        # Getting the type of 'axis' (line 694)
        axis_65178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 30), 'axis', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 694, 30), tuple_65177, axis_65178)
        # Adding element type (line 694)
        # Getting the type of 'self' (line 694)
        self_65179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 36), 'self', False)
        # Obtaining the member 'c' of a type (line 694)
        c_65180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 36), self_65179, 'c')
        # Obtaining the member 'ndim' of a type (line 694)
        ndim_65181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 36), c_65180, 'ndim')
        int_65182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, 48), 'int')
        # Applying the binary operator '-' (line 694)
        result_sub_65183 = python_operator(stypy.reporting.localization.Localization(__file__, 694, 36), '-', ndim_65181, int_65182)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 694, 30), tuple_65177, result_sub_65183)
        
        # Applying the binary operator '%' (line 693)
        result_mod_65184 = python_operator(stypy.reporting.localization.Localization(__file__, 693, 29), '%', str_65176, tuple_65177)
        
        # Processing the call keyword arguments (line 693)
        kwargs_65185 = {}
        # Getting the type of 'ValueError' (line 693)
        ValueError_65175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 693)
        ValueError_call_result_65186 = invoke(stypy.reporting.localization.Localization(__file__, 693, 18), ValueError_65175, *[result_mod_65184], **kwargs_65185)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 693, 12), ValueError_call_result_65186, 'raise parameter', BaseException)
        # SSA join for if statement (line 692)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 696):
        
        # Assigning a Name to a Attribute (line 696):
        # Getting the type of 'axis' (line 696)
        axis_65187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 20), 'axis')
        # Getting the type of 'self' (line 696)
        self_65188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 8), 'self')
        # Setting the type of the member 'axis' of a type (line 696)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 8), self_65188, 'axis', axis_65187)
        
        
        # Getting the type of 'axis' (line 697)
        axis_65189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 11), 'axis')
        int_65190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 19), 'int')
        # Applying the binary operator '!=' (line 697)
        result_ne_65191 = python_operator(stypy.reporting.localization.Localization(__file__, 697, 11), '!=', axis_65189, int_65190)
        
        # Testing the type of an if condition (line 697)
        if_condition_65192 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 697, 8), result_ne_65191)
        # Assigning a type to the variable 'if_condition_65192' (line 697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'if_condition_65192', if_condition_65192)
        # SSA begins for if statement (line 697)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 704):
        
        # Assigning a Call to a Attribute (line 704):
        
        # Call to rollaxis(...): (line 704)
        # Processing the call arguments (line 704)
        # Getting the type of 'self' (line 704)
        self_65195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 33), 'self', False)
        # Obtaining the member 'c' of a type (line 704)
        c_65196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 33), self_65195, 'c')
        # Getting the type of 'axis' (line 704)
        axis_65197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 41), 'axis', False)
        int_65198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 46), 'int')
        # Applying the binary operator '+' (line 704)
        result_add_65199 = python_operator(stypy.reporting.localization.Localization(__file__, 704, 41), '+', axis_65197, int_65198)
        
        # Processing the call keyword arguments (line 704)
        kwargs_65200 = {}
        # Getting the type of 'np' (line 704)
        np_65193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 21), 'np', False)
        # Obtaining the member 'rollaxis' of a type (line 704)
        rollaxis_65194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 21), np_65193, 'rollaxis')
        # Calling rollaxis(args, kwargs) (line 704)
        rollaxis_call_result_65201 = invoke(stypy.reporting.localization.Localization(__file__, 704, 21), rollaxis_65194, *[c_65196, result_add_65199], **kwargs_65200)
        
        # Getting the type of 'self' (line 704)
        self_65202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'self')
        # Setting the type of the member 'c' of a type (line 704)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 12), self_65202, 'c', rollaxis_call_result_65201)
        
        # Assigning a Call to a Attribute (line 705):
        
        # Assigning a Call to a Attribute (line 705):
        
        # Call to rollaxis(...): (line 705)
        # Processing the call arguments (line 705)
        # Getting the type of 'self' (line 705)
        self_65205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 33), 'self', False)
        # Obtaining the member 'c' of a type (line 705)
        c_65206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 33), self_65205, 'c')
        # Getting the type of 'axis' (line 705)
        axis_65207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 41), 'axis', False)
        int_65208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 46), 'int')
        # Applying the binary operator '+' (line 705)
        result_add_65209 = python_operator(stypy.reporting.localization.Localization(__file__, 705, 41), '+', axis_65207, int_65208)
        
        # Processing the call keyword arguments (line 705)
        kwargs_65210 = {}
        # Getting the type of 'np' (line 705)
        np_65203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 21), 'np', False)
        # Obtaining the member 'rollaxis' of a type (line 705)
        rollaxis_65204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 21), np_65203, 'rollaxis')
        # Calling rollaxis(args, kwargs) (line 705)
        rollaxis_call_result_65211 = invoke(stypy.reporting.localization.Localization(__file__, 705, 21), rollaxis_65204, *[c_65206, result_add_65209], **kwargs_65210)
        
        # Getting the type of 'self' (line 705)
        self_65212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 12), 'self')
        # Setting the type of the member 'c' of a type (line 705)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 12), self_65212, 'c', rollaxis_call_result_65211)
        # SSA join for if statement (line 697)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 707)
        self_65213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 11), 'self')
        # Obtaining the member 'x' of a type (line 707)
        x_65214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 11), self_65213, 'x')
        # Obtaining the member 'ndim' of a type (line 707)
        ndim_65215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 11), x_65214, 'ndim')
        int_65216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 26), 'int')
        # Applying the binary operator '!=' (line 707)
        result_ne_65217 = python_operator(stypy.reporting.localization.Localization(__file__, 707, 11), '!=', ndim_65215, int_65216)
        
        # Testing the type of an if condition (line 707)
        if_condition_65218 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 707, 8), result_ne_65217)
        # Assigning a type to the variable 'if_condition_65218' (line 707)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'if_condition_65218', if_condition_65218)
        # SSA begins for if statement (line 707)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 708)
        # Processing the call arguments (line 708)
        str_65220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, 29), 'str', 'x must be 1-dimensional')
        # Processing the call keyword arguments (line 708)
        kwargs_65221 = {}
        # Getting the type of 'ValueError' (line 708)
        ValueError_65219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 708)
        ValueError_call_result_65222 = invoke(stypy.reporting.localization.Localization(__file__, 708, 18), ValueError_65219, *[str_65220], **kwargs_65221)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 708, 12), ValueError_call_result_65222, 'raise parameter', BaseException)
        # SSA join for if statement (line 707)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 709)
        self_65223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 11), 'self')
        # Obtaining the member 'x' of a type (line 709)
        x_65224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 11), self_65223, 'x')
        # Obtaining the member 'size' of a type (line 709)
        size_65225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 11), x_65224, 'size')
        int_65226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 709, 25), 'int')
        # Applying the binary operator '<' (line 709)
        result_lt_65227 = python_operator(stypy.reporting.localization.Localization(__file__, 709, 11), '<', size_65225, int_65226)
        
        # Testing the type of an if condition (line 709)
        if_condition_65228 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 709, 8), result_lt_65227)
        # Assigning a type to the variable 'if_condition_65228' (line 709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 8), 'if_condition_65228', if_condition_65228)
        # SSA begins for if statement (line 709)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 710)
        # Processing the call arguments (line 710)
        str_65230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 29), 'str', 'at least 2 breakpoints are needed')
        # Processing the call keyword arguments (line 710)
        kwargs_65231 = {}
        # Getting the type of 'ValueError' (line 710)
        ValueError_65229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 710)
        ValueError_call_result_65232 = invoke(stypy.reporting.localization.Localization(__file__, 710, 18), ValueError_65229, *[str_65230], **kwargs_65231)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 710, 12), ValueError_call_result_65232, 'raise parameter', BaseException)
        # SSA join for if statement (line 709)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 711)
        self_65233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 11), 'self')
        # Obtaining the member 'c' of a type (line 711)
        c_65234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 11), self_65233, 'c')
        # Obtaining the member 'ndim' of a type (line 711)
        ndim_65235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 11), c_65234, 'ndim')
        int_65236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 25), 'int')
        # Applying the binary operator '<' (line 711)
        result_lt_65237 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 11), '<', ndim_65235, int_65236)
        
        # Testing the type of an if condition (line 711)
        if_condition_65238 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 711, 8), result_lt_65237)
        # Assigning a type to the variable 'if_condition_65238' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'if_condition_65238', if_condition_65238)
        # SSA begins for if statement (line 711)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 712)
        # Processing the call arguments (line 712)
        str_65240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 29), 'str', 'c must have at least 2 dimensions')
        # Processing the call keyword arguments (line 712)
        kwargs_65241 = {}
        # Getting the type of 'ValueError' (line 712)
        ValueError_65239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 712)
        ValueError_call_result_65242 = invoke(stypy.reporting.localization.Localization(__file__, 712, 18), ValueError_65239, *[str_65240], **kwargs_65241)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 712, 12), ValueError_call_result_65242, 'raise parameter', BaseException)
        # SSA join for if statement (line 711)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_65243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 24), 'int')
        # Getting the type of 'self' (line 713)
        self_65244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 11), 'self')
        # Obtaining the member 'c' of a type (line 713)
        c_65245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 11), self_65244, 'c')
        # Obtaining the member 'shape' of a type (line 713)
        shape_65246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 11), c_65245, 'shape')
        # Obtaining the member '__getitem__' of a type (line 713)
        getitem___65247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 11), shape_65246, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 713)
        subscript_call_result_65248 = invoke(stypy.reporting.localization.Localization(__file__, 713, 11), getitem___65247, int_65243)
        
        int_65249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 30), 'int')
        # Applying the binary operator '==' (line 713)
        result_eq_65250 = python_operator(stypy.reporting.localization.Localization(__file__, 713, 11), '==', subscript_call_result_65248, int_65249)
        
        # Testing the type of an if condition (line 713)
        if_condition_65251 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 713, 8), result_eq_65250)
        # Assigning a type to the variable 'if_condition_65251' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'if_condition_65251', if_condition_65251)
        # SSA begins for if statement (line 713)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 714)
        # Processing the call arguments (line 714)
        str_65253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 714, 29), 'str', 'polynomial must be at least of order 0')
        # Processing the call keyword arguments (line 714)
        kwargs_65254 = {}
        # Getting the type of 'ValueError' (line 714)
        ValueError_65252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 714)
        ValueError_call_result_65255 = invoke(stypy.reporting.localization.Localization(__file__, 714, 18), ValueError_65252, *[str_65253], **kwargs_65254)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 714, 12), ValueError_call_result_65255, 'raise parameter', BaseException)
        # SSA join for if statement (line 713)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_65256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 24), 'int')
        # Getting the type of 'self' (line 715)
        self_65257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 11), 'self')
        # Obtaining the member 'c' of a type (line 715)
        c_65258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 11), self_65257, 'c')
        # Obtaining the member 'shape' of a type (line 715)
        shape_65259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 11), c_65258, 'shape')
        # Obtaining the member '__getitem__' of a type (line 715)
        getitem___65260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 11), shape_65259, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 715)
        subscript_call_result_65261 = invoke(stypy.reporting.localization.Localization(__file__, 715, 11), getitem___65260, int_65256)
        
        # Getting the type of 'self' (line 715)
        self_65262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 30), 'self')
        # Obtaining the member 'x' of a type (line 715)
        x_65263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 30), self_65262, 'x')
        # Obtaining the member 'size' of a type (line 715)
        size_65264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 30), x_65263, 'size')
        int_65265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 42), 'int')
        # Applying the binary operator '-' (line 715)
        result_sub_65266 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 30), '-', size_65264, int_65265)
        
        # Applying the binary operator '!=' (line 715)
        result_ne_65267 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 11), '!=', subscript_call_result_65261, result_sub_65266)
        
        # Testing the type of an if condition (line 715)
        if_condition_65268 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 715, 8), result_ne_65267)
        # Assigning a type to the variable 'if_condition_65268' (line 715)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 8), 'if_condition_65268', if_condition_65268)
        # SSA begins for if statement (line 715)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 716)
        # Processing the call arguments (line 716)
        str_65270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 716, 29), 'str', 'number of coefficients != len(x)-1')
        # Processing the call keyword arguments (line 716)
        kwargs_65271 = {}
        # Getting the type of 'ValueError' (line 716)
        ValueError_65269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 716)
        ValueError_call_result_65272 = invoke(stypy.reporting.localization.Localization(__file__, 716, 18), ValueError_65269, *[str_65270], **kwargs_65271)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 716, 12), ValueError_call_result_65272, 'raise parameter', BaseException)
        # SSA join for if statement (line 715)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 717):
        
        # Assigning a Call to a Name (line 717):
        
        # Call to diff(...): (line 717)
        # Processing the call arguments (line 717)
        # Getting the type of 'self' (line 717)
        self_65275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 21), 'self', False)
        # Obtaining the member 'x' of a type (line 717)
        x_65276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 21), self_65275, 'x')
        # Processing the call keyword arguments (line 717)
        kwargs_65277 = {}
        # Getting the type of 'np' (line 717)
        np_65273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 13), 'np', False)
        # Obtaining the member 'diff' of a type (line 717)
        diff_65274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 13), np_65273, 'diff')
        # Calling diff(args, kwargs) (line 717)
        diff_call_result_65278 = invoke(stypy.reporting.localization.Localization(__file__, 717, 13), diff_65274, *[x_65276], **kwargs_65277)
        
        # Assigning a type to the variable 'dx' (line 717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'dx', diff_call_result_65278)
        
        
        
        # Evaluating a boolean operation
        
        # Call to all(...): (line 718)
        # Processing the call arguments (line 718)
        
        # Getting the type of 'dx' (line 718)
        dx_65281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 23), 'dx', False)
        int_65282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 29), 'int')
        # Applying the binary operator '>=' (line 718)
        result_ge_65283 = python_operator(stypy.reporting.localization.Localization(__file__, 718, 23), '>=', dx_65281, int_65282)
        
        # Processing the call keyword arguments (line 718)
        kwargs_65284 = {}
        # Getting the type of 'np' (line 718)
        np_65279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 16), 'np', False)
        # Obtaining the member 'all' of a type (line 718)
        all_65280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 16), np_65279, 'all')
        # Calling all(args, kwargs) (line 718)
        all_call_result_65285 = invoke(stypy.reporting.localization.Localization(__file__, 718, 16), all_65280, *[result_ge_65283], **kwargs_65284)
        
        
        # Call to all(...): (line 718)
        # Processing the call arguments (line 718)
        
        # Getting the type of 'dx' (line 718)
        dx_65288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 42), 'dx', False)
        int_65289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 48), 'int')
        # Applying the binary operator '<=' (line 718)
        result_le_65290 = python_operator(stypy.reporting.localization.Localization(__file__, 718, 42), '<=', dx_65288, int_65289)
        
        # Processing the call keyword arguments (line 718)
        kwargs_65291 = {}
        # Getting the type of 'np' (line 718)
        np_65286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 35), 'np', False)
        # Obtaining the member 'all' of a type (line 718)
        all_65287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 35), np_65286, 'all')
        # Calling all(args, kwargs) (line 718)
        all_call_result_65292 = invoke(stypy.reporting.localization.Localization(__file__, 718, 35), all_65287, *[result_le_65290], **kwargs_65291)
        
        # Applying the binary operator 'or' (line 718)
        result_or_keyword_65293 = python_operator(stypy.reporting.localization.Localization(__file__, 718, 16), 'or', all_call_result_65285, all_call_result_65292)
        
        # Applying the 'not' unary operator (line 718)
        result_not__65294 = python_operator(stypy.reporting.localization.Localization(__file__, 718, 11), 'not', result_or_keyword_65293)
        
        # Testing the type of an if condition (line 718)
        if_condition_65295 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 718, 8), result_not__65294)
        # Assigning a type to the variable 'if_condition_65295' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'if_condition_65295', if_condition_65295)
        # SSA begins for if statement (line 718)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 719)
        # Processing the call arguments (line 719)
        str_65297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 29), 'str', '`x` must be strictly increasing or decreasing.')
        # Processing the call keyword arguments (line 719)
        kwargs_65298 = {}
        # Getting the type of 'ValueError' (line 719)
        ValueError_65296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 719)
        ValueError_call_result_65299 = invoke(stypy.reporting.localization.Localization(__file__, 719, 18), ValueError_65296, *[str_65297], **kwargs_65298)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 719, 12), ValueError_call_result_65299, 'raise parameter', BaseException)
        # SSA join for if statement (line 718)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 721):
        
        # Assigning a Call to a Name (line 721):
        
        # Call to _get_dtype(...): (line 721)
        # Processing the call arguments (line 721)
        # Getting the type of 'self' (line 721)
        self_65302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 32), 'self', False)
        # Obtaining the member 'c' of a type (line 721)
        c_65303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 721, 32), self_65302, 'c')
        # Obtaining the member 'dtype' of a type (line 721)
        dtype_65304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 721, 32), c_65303, 'dtype')
        # Processing the call keyword arguments (line 721)
        kwargs_65305 = {}
        # Getting the type of 'self' (line 721)
        self_65300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 16), 'self', False)
        # Obtaining the member '_get_dtype' of a type (line 721)
        _get_dtype_65301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 721, 16), self_65300, '_get_dtype')
        # Calling _get_dtype(args, kwargs) (line 721)
        _get_dtype_call_result_65306 = invoke(stypy.reporting.localization.Localization(__file__, 721, 16), _get_dtype_65301, *[dtype_65304], **kwargs_65305)
        
        # Assigning a type to the variable 'dtype' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'dtype', _get_dtype_call_result_65306)
        
        # Assigning a Call to a Attribute (line 722):
        
        # Assigning a Call to a Attribute (line 722):
        
        # Call to ascontiguousarray(...): (line 722)
        # Processing the call arguments (line 722)
        # Getting the type of 'self' (line 722)
        self_65309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 38), 'self', False)
        # Obtaining the member 'c' of a type (line 722)
        c_65310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 38), self_65309, 'c')
        # Processing the call keyword arguments (line 722)
        # Getting the type of 'dtype' (line 722)
        dtype_65311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 52), 'dtype', False)
        keyword_65312 = dtype_65311
        kwargs_65313 = {'dtype': keyword_65312}
        # Getting the type of 'np' (line 722)
        np_65307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 17), 'np', False)
        # Obtaining the member 'ascontiguousarray' of a type (line 722)
        ascontiguousarray_65308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 17), np_65307, 'ascontiguousarray')
        # Calling ascontiguousarray(args, kwargs) (line 722)
        ascontiguousarray_call_result_65314 = invoke(stypy.reporting.localization.Localization(__file__, 722, 17), ascontiguousarray_65308, *[c_65310], **kwargs_65313)
        
        # Getting the type of 'self' (line 722)
        self_65315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'self')
        # Setting the type of the member 'c' of a type (line 722)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 8), self_65315, 'c', ascontiguousarray_call_result_65314)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _get_dtype(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_dtype'
        module_type_store = module_type_store.open_function_context('_get_dtype', 724, 4, False)
        # Assigning a type to the variable 'self' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _PPolyBase._get_dtype.__dict__.__setitem__('stypy_localization', localization)
        _PPolyBase._get_dtype.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _PPolyBase._get_dtype.__dict__.__setitem__('stypy_type_store', module_type_store)
        _PPolyBase._get_dtype.__dict__.__setitem__('stypy_function_name', '_PPolyBase._get_dtype')
        _PPolyBase._get_dtype.__dict__.__setitem__('stypy_param_names_list', ['dtype'])
        _PPolyBase._get_dtype.__dict__.__setitem__('stypy_varargs_param_name', None)
        _PPolyBase._get_dtype.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _PPolyBase._get_dtype.__dict__.__setitem__('stypy_call_defaults', defaults)
        _PPolyBase._get_dtype.__dict__.__setitem__('stypy_call_varargs', varargs)
        _PPolyBase._get_dtype.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _PPolyBase._get_dtype.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_PPolyBase._get_dtype', ['dtype'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_dtype', localization, ['dtype'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_dtype(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Call to issubdtype(...): (line 725)
        # Processing the call arguments (line 725)
        # Getting the type of 'dtype' (line 725)
        dtype_65318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 25), 'dtype', False)
        # Getting the type of 'np' (line 725)
        np_65319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 32), 'np', False)
        # Obtaining the member 'complexfloating' of a type (line 725)
        complexfloating_65320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 32), np_65319, 'complexfloating')
        # Processing the call keyword arguments (line 725)
        kwargs_65321 = {}
        # Getting the type of 'np' (line 725)
        np_65316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 11), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 725)
        issubdtype_65317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 11), np_65316, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 725)
        issubdtype_call_result_65322 = invoke(stypy.reporting.localization.Localization(__file__, 725, 11), issubdtype_65317, *[dtype_65318, complexfloating_65320], **kwargs_65321)
        
        
        # Call to issubdtype(...): (line 726)
        # Processing the call arguments (line 726)
        # Getting the type of 'self' (line 726)
        self_65325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 32), 'self', False)
        # Obtaining the member 'c' of a type (line 726)
        c_65326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 32), self_65325, 'c')
        # Obtaining the member 'dtype' of a type (line 726)
        dtype_65327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 32), c_65326, 'dtype')
        # Getting the type of 'np' (line 726)
        np_65328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 46), 'np', False)
        # Obtaining the member 'complexfloating' of a type (line 726)
        complexfloating_65329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 46), np_65328, 'complexfloating')
        # Processing the call keyword arguments (line 726)
        kwargs_65330 = {}
        # Getting the type of 'np' (line 726)
        np_65323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 18), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 726)
        issubdtype_65324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 18), np_65323, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 726)
        issubdtype_call_result_65331 = invoke(stypy.reporting.localization.Localization(__file__, 726, 18), issubdtype_65324, *[dtype_65327, complexfloating_65329], **kwargs_65330)
        
        # Applying the binary operator 'or' (line 725)
        result_or_keyword_65332 = python_operator(stypy.reporting.localization.Localization(__file__, 725, 11), 'or', issubdtype_call_result_65322, issubdtype_call_result_65331)
        
        # Testing the type of an if condition (line 725)
        if_condition_65333 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 725, 8), result_or_keyword_65332)
        # Assigning a type to the variable 'if_condition_65333' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'if_condition_65333', if_condition_65333)
        # SSA begins for if statement (line 725)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'np' (line 727)
        np_65334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 19), 'np')
        # Obtaining the member 'complex_' of a type (line 727)
        complex__65335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 19), np_65334, 'complex_')
        # Assigning a type to the variable 'stypy_return_type' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 12), 'stypy_return_type', complex__65335)
        # SSA branch for the else part of an if statement (line 725)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'np' (line 729)
        np_65336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 19), 'np')
        # Obtaining the member 'float_' of a type (line 729)
        float__65337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 19), np_65336, 'float_')
        # Assigning a type to the variable 'stypy_return_type' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 12), 'stypy_return_type', float__65337)
        # SSA join for if statement (line 725)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_get_dtype(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_dtype' in the type store
        # Getting the type of 'stypy_return_type' (line 724)
        stypy_return_type_65338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65338)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_dtype'
        return stypy_return_type_65338


    @norecursion
    def construct_fast(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 732)
        None_65339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 46), 'None')
        int_65340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 57), 'int')
        defaults = [None_65339, int_65340]
        # Create a new context for function 'construct_fast'
        module_type_store = module_type_store.open_function_context('construct_fast', 731, 4, False)
        # Assigning a type to the variable 'self' (line 732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _PPolyBase.construct_fast.__dict__.__setitem__('stypy_localization', localization)
        _PPolyBase.construct_fast.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _PPolyBase.construct_fast.__dict__.__setitem__('stypy_type_store', module_type_store)
        _PPolyBase.construct_fast.__dict__.__setitem__('stypy_function_name', '_PPolyBase.construct_fast')
        _PPolyBase.construct_fast.__dict__.__setitem__('stypy_param_names_list', ['c', 'x', 'extrapolate', 'axis'])
        _PPolyBase.construct_fast.__dict__.__setitem__('stypy_varargs_param_name', None)
        _PPolyBase.construct_fast.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _PPolyBase.construct_fast.__dict__.__setitem__('stypy_call_defaults', defaults)
        _PPolyBase.construct_fast.__dict__.__setitem__('stypy_call_varargs', varargs)
        _PPolyBase.construct_fast.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _PPolyBase.construct_fast.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_PPolyBase.construct_fast', ['c', 'x', 'extrapolate', 'axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'construct_fast', localization, ['c', 'x', 'extrapolate', 'axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'construct_fast(...)' code ##################

        str_65341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 740, (-1)), 'str', '\n        Construct the piecewise polynomial without making checks.\n\n        Takes the same parameters as the constructor. Input arguments\n        `c` and `x` must be arrays of the correct shape and type.  The\n        `c` array can only be of dtypes float and complex, and `x`\n        array must have dtype float.\n        ')
        
        # Assigning a Call to a Name (line 741):
        
        # Assigning a Call to a Name (line 741):
        
        # Call to __new__(...): (line 741)
        # Processing the call arguments (line 741)
        # Getting the type of 'cls' (line 741)
        cls_65344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 30), 'cls', False)
        # Processing the call keyword arguments (line 741)
        kwargs_65345 = {}
        # Getting the type of 'object' (line 741)
        object_65342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 15), 'object', False)
        # Obtaining the member '__new__' of a type (line 741)
        new___65343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 15), object_65342, '__new__')
        # Calling __new__(args, kwargs) (line 741)
        new___call_result_65346 = invoke(stypy.reporting.localization.Localization(__file__, 741, 15), new___65343, *[cls_65344], **kwargs_65345)
        
        # Assigning a type to the variable 'self' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'self', new___call_result_65346)
        
        # Assigning a Name to a Attribute (line 742):
        
        # Assigning a Name to a Attribute (line 742):
        # Getting the type of 'c' (line 742)
        c_65347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 17), 'c')
        # Getting the type of 'self' (line 742)
        self_65348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 8), 'self')
        # Setting the type of the member 'c' of a type (line 742)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 8), self_65348, 'c', c_65347)
        
        # Assigning a Name to a Attribute (line 743):
        
        # Assigning a Name to a Attribute (line 743):
        # Getting the type of 'x' (line 743)
        x_65349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 17), 'x')
        # Getting the type of 'self' (line 743)
        self_65350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 8), 'self')
        # Setting the type of the member 'x' of a type (line 743)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 8), self_65350, 'x', x_65349)
        
        # Assigning a Name to a Attribute (line 744):
        
        # Assigning a Name to a Attribute (line 744):
        # Getting the type of 'axis' (line 744)
        axis_65351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 20), 'axis')
        # Getting the type of 'self' (line 744)
        self_65352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 8), 'self')
        # Setting the type of the member 'axis' of a type (line 744)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 8), self_65352, 'axis', axis_65351)
        
        # Type idiom detected: calculating its left and rigth part (line 745)
        # Getting the type of 'extrapolate' (line 745)
        extrapolate_65353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 11), 'extrapolate')
        # Getting the type of 'None' (line 745)
        None_65354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 26), 'None')
        
        (may_be_65355, more_types_in_union_65356) = may_be_none(extrapolate_65353, None_65354)

        if may_be_65355:

            if more_types_in_union_65356:
                # Runtime conditional SSA (line 745)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 746):
            
            # Assigning a Name to a Name (line 746):
            # Getting the type of 'True' (line 746)
            True_65357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 26), 'True')
            # Assigning a type to the variable 'extrapolate' (line 746)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 12), 'extrapolate', True_65357)

            if more_types_in_union_65356:
                # SSA join for if statement (line 745)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 747):
        
        # Assigning a Name to a Attribute (line 747):
        # Getting the type of 'extrapolate' (line 747)
        extrapolate_65358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 27), 'extrapolate')
        # Getting the type of 'self' (line 747)
        self_65359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 8), 'self')
        # Setting the type of the member 'extrapolate' of a type (line 747)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 8), self_65359, 'extrapolate', extrapolate_65358)
        # Getting the type of 'self' (line 748)
        self_65360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'stypy_return_type', self_65360)
        
        # ################# End of 'construct_fast(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'construct_fast' in the type store
        # Getting the type of 'stypy_return_type' (line 731)
        stypy_return_type_65361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65361)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'construct_fast'
        return stypy_return_type_65361


    @norecursion
    def _ensure_c_contiguous(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_ensure_c_contiguous'
        module_type_store = module_type_store.open_function_context('_ensure_c_contiguous', 750, 4, False)
        # Assigning a type to the variable 'self' (line 751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _PPolyBase._ensure_c_contiguous.__dict__.__setitem__('stypy_localization', localization)
        _PPolyBase._ensure_c_contiguous.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _PPolyBase._ensure_c_contiguous.__dict__.__setitem__('stypy_type_store', module_type_store)
        _PPolyBase._ensure_c_contiguous.__dict__.__setitem__('stypy_function_name', '_PPolyBase._ensure_c_contiguous')
        _PPolyBase._ensure_c_contiguous.__dict__.__setitem__('stypy_param_names_list', [])
        _PPolyBase._ensure_c_contiguous.__dict__.__setitem__('stypy_varargs_param_name', None)
        _PPolyBase._ensure_c_contiguous.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _PPolyBase._ensure_c_contiguous.__dict__.__setitem__('stypy_call_defaults', defaults)
        _PPolyBase._ensure_c_contiguous.__dict__.__setitem__('stypy_call_varargs', varargs)
        _PPolyBase._ensure_c_contiguous.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _PPolyBase._ensure_c_contiguous.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_PPolyBase._ensure_c_contiguous', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_ensure_c_contiguous', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_ensure_c_contiguous(...)' code ##################

        str_65362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, (-1)), 'str', '\n        c and x may be modified by the user. The Cython code expects\n        that they are C contiguous.\n        ')
        
        
        # Getting the type of 'self' (line 755)
        self_65363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 15), 'self')
        # Obtaining the member 'x' of a type (line 755)
        x_65364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 15), self_65363, 'x')
        # Obtaining the member 'flags' of a type (line 755)
        flags_65365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 15), x_65364, 'flags')
        # Obtaining the member 'c_contiguous' of a type (line 755)
        c_contiguous_65366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 15), flags_65365, 'c_contiguous')
        # Applying the 'not' unary operator (line 755)
        result_not__65367 = python_operator(stypy.reporting.localization.Localization(__file__, 755, 11), 'not', c_contiguous_65366)
        
        # Testing the type of an if condition (line 755)
        if_condition_65368 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 755, 8), result_not__65367)
        # Assigning a type to the variable 'if_condition_65368' (line 755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 8), 'if_condition_65368', if_condition_65368)
        # SSA begins for if statement (line 755)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 756):
        
        # Assigning a Call to a Attribute (line 756):
        
        # Call to copy(...): (line 756)
        # Processing the call keyword arguments (line 756)
        kwargs_65372 = {}
        # Getting the type of 'self' (line 756)
        self_65369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 21), 'self', False)
        # Obtaining the member 'x' of a type (line 756)
        x_65370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 21), self_65369, 'x')
        # Obtaining the member 'copy' of a type (line 756)
        copy_65371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 21), x_65370, 'copy')
        # Calling copy(args, kwargs) (line 756)
        copy_call_result_65373 = invoke(stypy.reporting.localization.Localization(__file__, 756, 21), copy_65371, *[], **kwargs_65372)
        
        # Getting the type of 'self' (line 756)
        self_65374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 12), 'self')
        # Setting the type of the member 'x' of a type (line 756)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 12), self_65374, 'x', copy_call_result_65373)
        # SSA join for if statement (line 755)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 757)
        self_65375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 15), 'self')
        # Obtaining the member 'c' of a type (line 757)
        c_65376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 15), self_65375, 'c')
        # Obtaining the member 'flags' of a type (line 757)
        flags_65377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 15), c_65376, 'flags')
        # Obtaining the member 'c_contiguous' of a type (line 757)
        c_contiguous_65378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 15), flags_65377, 'c_contiguous')
        # Applying the 'not' unary operator (line 757)
        result_not__65379 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 11), 'not', c_contiguous_65378)
        
        # Testing the type of an if condition (line 757)
        if_condition_65380 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 757, 8), result_not__65379)
        # Assigning a type to the variable 'if_condition_65380' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'if_condition_65380', if_condition_65380)
        # SSA begins for if statement (line 757)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 758):
        
        # Assigning a Call to a Attribute (line 758):
        
        # Call to copy(...): (line 758)
        # Processing the call keyword arguments (line 758)
        kwargs_65384 = {}
        # Getting the type of 'self' (line 758)
        self_65381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 21), 'self', False)
        # Obtaining the member 'c' of a type (line 758)
        c_65382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 21), self_65381, 'c')
        # Obtaining the member 'copy' of a type (line 758)
        copy_65383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 21), c_65382, 'copy')
        # Calling copy(args, kwargs) (line 758)
        copy_call_result_65385 = invoke(stypy.reporting.localization.Localization(__file__, 758, 21), copy_65383, *[], **kwargs_65384)
        
        # Getting the type of 'self' (line 758)
        self_65386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 12), 'self')
        # Setting the type of the member 'c' of a type (line 758)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 12), self_65386, 'c', copy_call_result_65385)
        # SSA join for if statement (line 757)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_ensure_c_contiguous(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_ensure_c_contiguous' in the type store
        # Getting the type of 'stypy_return_type' (line 750)
        stypy_return_type_65387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65387)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_ensure_c_contiguous'
        return stypy_return_type_65387


    @norecursion
    def extend(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 760)
        None_65388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 33), 'None')
        defaults = [None_65388]
        # Create a new context for function 'extend'
        module_type_store = module_type_store.open_function_context('extend', 760, 4, False)
        # Assigning a type to the variable 'self' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _PPolyBase.extend.__dict__.__setitem__('stypy_localization', localization)
        _PPolyBase.extend.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _PPolyBase.extend.__dict__.__setitem__('stypy_type_store', module_type_store)
        _PPolyBase.extend.__dict__.__setitem__('stypy_function_name', '_PPolyBase.extend')
        _PPolyBase.extend.__dict__.__setitem__('stypy_param_names_list', ['c', 'x', 'right'])
        _PPolyBase.extend.__dict__.__setitem__('stypy_varargs_param_name', None)
        _PPolyBase.extend.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _PPolyBase.extend.__dict__.__setitem__('stypy_call_defaults', defaults)
        _PPolyBase.extend.__dict__.__setitem__('stypy_call_varargs', varargs)
        _PPolyBase.extend.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _PPolyBase.extend.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_PPolyBase.extend', ['c', 'x', 'right'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'extend', localization, ['c', 'x', 'right'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'extend(...)' code ##################

        str_65389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, (-1)), 'str', '\n        Add additional breakpoints and coefficients to the polynomial.\n\n        Parameters\n        ----------\n        c : ndarray, size (k, m, ...)\n            Additional coefficients for polynomials in intervals. Note that\n            the first additional interval will be formed using one of the\n            `self.x` end points.\n        x : ndarray, size (m,)\n            Additional breakpoints. Must be sorted in the same order as\n            `self.x` and either to the right or to the left of the current\n            breakpoints.\n        right\n            Deprecated argument. Has no effect.\n\n            .. deprecated:: 0.19\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 779)
        # Getting the type of 'right' (line 779)
        right_65390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 8), 'right')
        # Getting the type of 'None' (line 779)
        None_65391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 24), 'None')
        
        (may_be_65392, more_types_in_union_65393) = may_not_be_none(right_65390, None_65391)

        if may_be_65392:

            if more_types_in_union_65393:
                # Runtime conditional SSA (line 779)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to warn(...): (line 780)
            # Processing the call arguments (line 780)
            str_65396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 780, 26), 'str', '`right` is deprecated and will be removed.')
            # Processing the call keyword arguments (line 780)
            kwargs_65397 = {}
            # Getting the type of 'warnings' (line 780)
            warnings_65394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 12), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 780)
            warn_65395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 12), warnings_65394, 'warn')
            # Calling warn(args, kwargs) (line 780)
            warn_call_result_65398 = invoke(stypy.reporting.localization.Localization(__file__, 780, 12), warn_65395, *[str_65396], **kwargs_65397)
            

            if more_types_in_union_65393:
                # SSA join for if statement (line 779)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 782):
        
        # Assigning a Call to a Name (line 782):
        
        # Call to asarray(...): (line 782)
        # Processing the call arguments (line 782)
        # Getting the type of 'c' (line 782)
        c_65401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 23), 'c', False)
        # Processing the call keyword arguments (line 782)
        kwargs_65402 = {}
        # Getting the type of 'np' (line 782)
        np_65399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 782)
        asarray_65400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 12), np_65399, 'asarray')
        # Calling asarray(args, kwargs) (line 782)
        asarray_call_result_65403 = invoke(stypy.reporting.localization.Localization(__file__, 782, 12), asarray_65400, *[c_65401], **kwargs_65402)
        
        # Assigning a type to the variable 'c' (line 782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 8), 'c', asarray_call_result_65403)
        
        # Assigning a Call to a Name (line 783):
        
        # Assigning a Call to a Name (line 783):
        
        # Call to asarray(...): (line 783)
        # Processing the call arguments (line 783)
        # Getting the type of 'x' (line 783)
        x_65406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 23), 'x', False)
        # Processing the call keyword arguments (line 783)
        kwargs_65407 = {}
        # Getting the type of 'np' (line 783)
        np_65404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 783)
        asarray_65405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 12), np_65404, 'asarray')
        # Calling asarray(args, kwargs) (line 783)
        asarray_call_result_65408 = invoke(stypy.reporting.localization.Localization(__file__, 783, 12), asarray_65405, *[x_65406], **kwargs_65407)
        
        # Assigning a type to the variable 'x' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 8), 'x', asarray_call_result_65408)
        
        
        # Getting the type of 'c' (line 785)
        c_65409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 11), 'c')
        # Obtaining the member 'ndim' of a type (line 785)
        ndim_65410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 11), c_65409, 'ndim')
        int_65411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 20), 'int')
        # Applying the binary operator '<' (line 785)
        result_lt_65412 = python_operator(stypy.reporting.localization.Localization(__file__, 785, 11), '<', ndim_65410, int_65411)
        
        # Testing the type of an if condition (line 785)
        if_condition_65413 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 785, 8), result_lt_65412)
        # Assigning a type to the variable 'if_condition_65413' (line 785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 8), 'if_condition_65413', if_condition_65413)
        # SSA begins for if statement (line 785)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 786)
        # Processing the call arguments (line 786)
        str_65415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 29), 'str', 'invalid dimensions for c')
        # Processing the call keyword arguments (line 786)
        kwargs_65416 = {}
        # Getting the type of 'ValueError' (line 786)
        ValueError_65414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 786)
        ValueError_call_result_65417 = invoke(stypy.reporting.localization.Localization(__file__, 786, 18), ValueError_65414, *[str_65415], **kwargs_65416)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 786, 12), ValueError_call_result_65417, 'raise parameter', BaseException)
        # SSA join for if statement (line 785)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x' (line 787)
        x_65418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 787)
        ndim_65419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 11), x_65418, 'ndim')
        int_65420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 787, 21), 'int')
        # Applying the binary operator '!=' (line 787)
        result_ne_65421 = python_operator(stypy.reporting.localization.Localization(__file__, 787, 11), '!=', ndim_65419, int_65420)
        
        # Testing the type of an if condition (line 787)
        if_condition_65422 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 787, 8), result_ne_65421)
        # Assigning a type to the variable 'if_condition_65422' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'if_condition_65422', if_condition_65422)
        # SSA begins for if statement (line 787)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 788)
        # Processing the call arguments (line 788)
        str_65424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, 29), 'str', 'invalid dimensions for x')
        # Processing the call keyword arguments (line 788)
        kwargs_65425 = {}
        # Getting the type of 'ValueError' (line 788)
        ValueError_65423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 788)
        ValueError_call_result_65426 = invoke(stypy.reporting.localization.Localization(__file__, 788, 18), ValueError_65423, *[str_65424], **kwargs_65425)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 788, 12), ValueError_call_result_65426, 'raise parameter', BaseException)
        # SSA join for if statement (line 787)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_65427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 19), 'int')
        # Getting the type of 'x' (line 789)
        x_65428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 11), 'x')
        # Obtaining the member 'shape' of a type (line 789)
        shape_65429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 11), x_65428, 'shape')
        # Obtaining the member '__getitem__' of a type (line 789)
        getitem___65430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 11), shape_65429, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 789)
        subscript_call_result_65431 = invoke(stypy.reporting.localization.Localization(__file__, 789, 11), getitem___65430, int_65427)
        
        
        # Obtaining the type of the subscript
        int_65432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 33), 'int')
        # Getting the type of 'c' (line 789)
        c_65433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 25), 'c')
        # Obtaining the member 'shape' of a type (line 789)
        shape_65434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 25), c_65433, 'shape')
        # Obtaining the member '__getitem__' of a type (line 789)
        getitem___65435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 25), shape_65434, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 789)
        subscript_call_result_65436 = invoke(stypy.reporting.localization.Localization(__file__, 789, 25), getitem___65435, int_65432)
        
        # Applying the binary operator '!=' (line 789)
        result_ne_65437 = python_operator(stypy.reporting.localization.Localization(__file__, 789, 11), '!=', subscript_call_result_65431, subscript_call_result_65436)
        
        # Testing the type of an if condition (line 789)
        if_condition_65438 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 789, 8), result_ne_65437)
        # Assigning a type to the variable 'if_condition_65438' (line 789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 8), 'if_condition_65438', if_condition_65438)
        # SSA begins for if statement (line 789)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 790)
        # Processing the call arguments (line 790)
        str_65440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, 29), 'str', 'x and c have incompatible sizes')
        # Processing the call keyword arguments (line 790)
        kwargs_65441 = {}
        # Getting the type of 'ValueError' (line 790)
        ValueError_65439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 790)
        ValueError_call_result_65442 = invoke(stypy.reporting.localization.Localization(__file__, 790, 18), ValueError_65439, *[str_65440], **kwargs_65441)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 790, 12), ValueError_call_result_65442, 'raise parameter', BaseException)
        # SSA join for if statement (line 789)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        int_65443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 19), 'int')
        slice_65444 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 791, 11), int_65443, None, None)
        # Getting the type of 'c' (line 791)
        c_65445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 11), 'c')
        # Obtaining the member 'shape' of a type (line 791)
        shape_65446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 11), c_65445, 'shape')
        # Obtaining the member '__getitem__' of a type (line 791)
        getitem___65447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 11), shape_65446, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 791)
        subscript_call_result_65448 = invoke(stypy.reporting.localization.Localization(__file__, 791, 11), getitem___65447, slice_65444)
        
        
        # Obtaining the type of the subscript
        int_65449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 39), 'int')
        slice_65450 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 791, 26), int_65449, None, None)
        # Getting the type of 'self' (line 791)
        self_65451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 26), 'self')
        # Obtaining the member 'c' of a type (line 791)
        c_65452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 26), self_65451, 'c')
        # Obtaining the member 'shape' of a type (line 791)
        shape_65453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 26), c_65452, 'shape')
        # Obtaining the member '__getitem__' of a type (line 791)
        getitem___65454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 26), shape_65453, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 791)
        subscript_call_result_65455 = invoke(stypy.reporting.localization.Localization(__file__, 791, 26), getitem___65454, slice_65450)
        
        # Applying the binary operator '!=' (line 791)
        result_ne_65456 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 11), '!=', subscript_call_result_65448, subscript_call_result_65455)
        
        
        # Getting the type of 'c' (line 791)
        c_65457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 46), 'c')
        # Obtaining the member 'ndim' of a type (line 791)
        ndim_65458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 46), c_65457, 'ndim')
        # Getting the type of 'self' (line 791)
        self_65459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 56), 'self')
        # Obtaining the member 'c' of a type (line 791)
        c_65460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 56), self_65459, 'c')
        # Obtaining the member 'ndim' of a type (line 791)
        ndim_65461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 791, 56), c_65460, 'ndim')
        # Applying the binary operator '!=' (line 791)
        result_ne_65462 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 46), '!=', ndim_65458, ndim_65461)
        
        # Applying the binary operator 'or' (line 791)
        result_or_keyword_65463 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 11), 'or', result_ne_65456, result_ne_65462)
        
        # Testing the type of an if condition (line 791)
        if_condition_65464 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 791, 8), result_or_keyword_65463)
        # Assigning a type to the variable 'if_condition_65464' (line 791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 8), 'if_condition_65464', if_condition_65464)
        # SSA begins for if statement (line 791)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 792)
        # Processing the call arguments (line 792)
        str_65466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 29), 'str', 'c and self.c have incompatible shapes')
        # Processing the call keyword arguments (line 792)
        kwargs_65467 = {}
        # Getting the type of 'ValueError' (line 792)
        ValueError_65465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 792)
        ValueError_call_result_65468 = invoke(stypy.reporting.localization.Localization(__file__, 792, 18), ValueError_65465, *[str_65466], **kwargs_65467)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 792, 12), ValueError_call_result_65468, 'raise parameter', BaseException)
        # SSA join for if statement (line 791)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'c' (line 794)
        c_65469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 11), 'c')
        # Obtaining the member 'size' of a type (line 794)
        size_65470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 11), c_65469, 'size')
        int_65471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 21), 'int')
        # Applying the binary operator '==' (line 794)
        result_eq_65472 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 11), '==', size_65470, int_65471)
        
        # Testing the type of an if condition (line 794)
        if_condition_65473 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 794, 8), result_eq_65472)
        # Assigning a type to the variable 'if_condition_65473' (line 794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'if_condition_65473', if_condition_65473)
        # SSA begins for if statement (line 794)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 794)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 797):
        
        # Assigning a Call to a Name (line 797):
        
        # Call to diff(...): (line 797)
        # Processing the call arguments (line 797)
        # Getting the type of 'x' (line 797)
        x_65476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 21), 'x', False)
        # Processing the call keyword arguments (line 797)
        kwargs_65477 = {}
        # Getting the type of 'np' (line 797)
        np_65474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 13), 'np', False)
        # Obtaining the member 'diff' of a type (line 797)
        diff_65475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 13), np_65474, 'diff')
        # Calling diff(args, kwargs) (line 797)
        diff_call_result_65478 = invoke(stypy.reporting.localization.Localization(__file__, 797, 13), diff_65475, *[x_65476], **kwargs_65477)
        
        # Assigning a type to the variable 'dx' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 8), 'dx', diff_call_result_65478)
        
        
        
        # Evaluating a boolean operation
        
        # Call to all(...): (line 798)
        # Processing the call arguments (line 798)
        
        # Getting the type of 'dx' (line 798)
        dx_65481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 23), 'dx', False)
        int_65482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 29), 'int')
        # Applying the binary operator '>=' (line 798)
        result_ge_65483 = python_operator(stypy.reporting.localization.Localization(__file__, 798, 23), '>=', dx_65481, int_65482)
        
        # Processing the call keyword arguments (line 798)
        kwargs_65484 = {}
        # Getting the type of 'np' (line 798)
        np_65479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'np', False)
        # Obtaining the member 'all' of a type (line 798)
        all_65480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 16), np_65479, 'all')
        # Calling all(args, kwargs) (line 798)
        all_call_result_65485 = invoke(stypy.reporting.localization.Localization(__file__, 798, 16), all_65480, *[result_ge_65483], **kwargs_65484)
        
        
        # Call to all(...): (line 798)
        # Processing the call arguments (line 798)
        
        # Getting the type of 'dx' (line 798)
        dx_65488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 42), 'dx', False)
        int_65489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 48), 'int')
        # Applying the binary operator '<=' (line 798)
        result_le_65490 = python_operator(stypy.reporting.localization.Localization(__file__, 798, 42), '<=', dx_65488, int_65489)
        
        # Processing the call keyword arguments (line 798)
        kwargs_65491 = {}
        # Getting the type of 'np' (line 798)
        np_65486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 35), 'np', False)
        # Obtaining the member 'all' of a type (line 798)
        all_65487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 35), np_65486, 'all')
        # Calling all(args, kwargs) (line 798)
        all_call_result_65492 = invoke(stypy.reporting.localization.Localization(__file__, 798, 35), all_65487, *[result_le_65490], **kwargs_65491)
        
        # Applying the binary operator 'or' (line 798)
        result_or_keyword_65493 = python_operator(stypy.reporting.localization.Localization(__file__, 798, 16), 'or', all_call_result_65485, all_call_result_65492)
        
        # Applying the 'not' unary operator (line 798)
        result_not__65494 = python_operator(stypy.reporting.localization.Localization(__file__, 798, 11), 'not', result_or_keyword_65493)
        
        # Testing the type of an if condition (line 798)
        if_condition_65495 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 798, 8), result_not__65494)
        # Assigning a type to the variable 'if_condition_65495' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 8), 'if_condition_65495', if_condition_65495)
        # SSA begins for if statement (line 798)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 799)
        # Processing the call arguments (line 799)
        str_65497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 29), 'str', '`x` is not sorted.')
        # Processing the call keyword arguments (line 799)
        kwargs_65498 = {}
        # Getting the type of 'ValueError' (line 799)
        ValueError_65496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 799)
        ValueError_call_result_65499 = invoke(stypy.reporting.localization.Localization(__file__, 799, 18), ValueError_65496, *[str_65497], **kwargs_65498)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 799, 12), ValueError_call_result_65499, 'raise parameter', BaseException)
        # SSA join for if statement (line 798)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_65500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 801, 18), 'int')
        # Getting the type of 'self' (line 801)
        self_65501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 11), 'self')
        # Obtaining the member 'x' of a type (line 801)
        x_65502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 11), self_65501, 'x')
        # Obtaining the member '__getitem__' of a type (line 801)
        getitem___65503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 11), x_65502, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 801)
        subscript_call_result_65504 = invoke(stypy.reporting.localization.Localization(__file__, 801, 11), getitem___65503, int_65500)
        
        
        # Obtaining the type of the subscript
        int_65505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 801, 32), 'int')
        # Getting the type of 'self' (line 801)
        self_65506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 25), 'self')
        # Obtaining the member 'x' of a type (line 801)
        x_65507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 25), self_65506, 'x')
        # Obtaining the member '__getitem__' of a type (line 801)
        getitem___65508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 25), x_65507, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 801)
        subscript_call_result_65509 = invoke(stypy.reporting.localization.Localization(__file__, 801, 25), getitem___65508, int_65505)
        
        # Applying the binary operator '>=' (line 801)
        result_ge_65510 = python_operator(stypy.reporting.localization.Localization(__file__, 801, 11), '>=', subscript_call_result_65504, subscript_call_result_65509)
        
        # Testing the type of an if condition (line 801)
        if_condition_65511 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 801, 8), result_ge_65510)
        # Assigning a type to the variable 'if_condition_65511' (line 801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 8), 'if_condition_65511', if_condition_65511)
        # SSA begins for if statement (line 801)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        
        # Obtaining the type of the subscript
        int_65512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 21), 'int')
        # Getting the type of 'x' (line 802)
        x_65513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 19), 'x')
        # Obtaining the member '__getitem__' of a type (line 802)
        getitem___65514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 19), x_65513, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 802)
        subscript_call_result_65515 = invoke(stypy.reporting.localization.Localization(__file__, 802, 19), getitem___65514, int_65512)
        
        
        # Obtaining the type of the subscript
        int_65516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 30), 'int')
        # Getting the type of 'x' (line 802)
        x_65517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 28), 'x')
        # Obtaining the member '__getitem__' of a type (line 802)
        getitem___65518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 28), x_65517, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 802)
        subscript_call_result_65519 = invoke(stypy.reporting.localization.Localization(__file__, 802, 28), getitem___65518, int_65516)
        
        # Applying the binary operator '>=' (line 802)
        result_ge_65520 = python_operator(stypy.reporting.localization.Localization(__file__, 802, 19), '>=', subscript_call_result_65515, subscript_call_result_65519)
        
        # Applying the 'not' unary operator (line 802)
        result_not__65521 = python_operator(stypy.reporting.localization.Localization(__file__, 802, 15), 'not', result_ge_65520)
        
        # Testing the type of an if condition (line 802)
        if_condition_65522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 802, 12), result_not__65521)
        # Assigning a type to the variable 'if_condition_65522' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 12), 'if_condition_65522', if_condition_65522)
        # SSA begins for if statement (line 802)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 803)
        # Processing the call arguments (line 803)
        str_65524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 33), 'str', '`x` is in the different order than `self.x`.')
        # Processing the call keyword arguments (line 803)
        kwargs_65525 = {}
        # Getting the type of 'ValueError' (line 803)
        ValueError_65523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 803)
        ValueError_call_result_65526 = invoke(stypy.reporting.localization.Localization(__file__, 803, 22), ValueError_65523, *[str_65524], **kwargs_65525)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 803, 16), ValueError_call_result_65526, 'raise parameter', BaseException)
        # SSA join for if statement (line 802)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_65527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 17), 'int')
        # Getting the type of 'x' (line 806)
        x_65528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 15), 'x')
        # Obtaining the member '__getitem__' of a type (line 806)
        getitem___65529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 15), x_65528, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 806)
        subscript_call_result_65530 = invoke(stypy.reporting.localization.Localization(__file__, 806, 15), getitem___65529, int_65527)
        
        
        # Obtaining the type of the subscript
        int_65531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 30), 'int')
        # Getting the type of 'self' (line 806)
        self_65532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 23), 'self')
        # Obtaining the member 'x' of a type (line 806)
        x_65533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 23), self_65532, 'x')
        # Obtaining the member '__getitem__' of a type (line 806)
        getitem___65534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 23), x_65533, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 806)
        subscript_call_result_65535 = invoke(stypy.reporting.localization.Localization(__file__, 806, 23), getitem___65534, int_65531)
        
        # Applying the binary operator '>=' (line 806)
        result_ge_65536 = python_operator(stypy.reporting.localization.Localization(__file__, 806, 15), '>=', subscript_call_result_65530, subscript_call_result_65535)
        
        # Testing the type of an if condition (line 806)
        if_condition_65537 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 806, 12), result_ge_65536)
        # Assigning a type to the variable 'if_condition_65537' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 12), 'if_condition_65537', if_condition_65537)
        # SSA begins for if statement (line 806)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 807):
        
        # Assigning a Str to a Name (line 807):
        str_65538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 25), 'str', 'append')
        # Assigning a type to the variable 'action' (line 807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 16), 'action', str_65538)
        # SSA branch for the else part of an if statement (line 806)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        int_65539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 19), 'int')
        # Getting the type of 'x' (line 808)
        x_65540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 17), 'x')
        # Obtaining the member '__getitem__' of a type (line 808)
        getitem___65541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 17), x_65540, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 808)
        subscript_call_result_65542 = invoke(stypy.reporting.localization.Localization(__file__, 808, 17), getitem___65541, int_65539)
        
        
        # Obtaining the type of the subscript
        int_65543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 33), 'int')
        # Getting the type of 'self' (line 808)
        self_65544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 26), 'self')
        # Obtaining the member 'x' of a type (line 808)
        x_65545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 26), self_65544, 'x')
        # Obtaining the member '__getitem__' of a type (line 808)
        getitem___65546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 26), x_65545, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 808)
        subscript_call_result_65547 = invoke(stypy.reporting.localization.Localization(__file__, 808, 26), getitem___65546, int_65543)
        
        # Applying the binary operator '<=' (line 808)
        result_le_65548 = python_operator(stypy.reporting.localization.Localization(__file__, 808, 17), '<=', subscript_call_result_65542, subscript_call_result_65547)
        
        # Testing the type of an if condition (line 808)
        if_condition_65549 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 808, 17), result_le_65548)
        # Assigning a type to the variable 'if_condition_65549' (line 808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 808, 17), 'if_condition_65549', if_condition_65549)
        # SSA begins for if statement (line 808)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 809):
        
        # Assigning a Str to a Name (line 809):
        str_65550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 25), 'str', 'prepend')
        # Assigning a type to the variable 'action' (line 809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 16), 'action', str_65550)
        # SSA branch for the else part of an if statement (line 808)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 811)
        # Processing the call arguments (line 811)
        str_65552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 33), 'str', '`x` is neither on the left or on the right from `self.x`.')
        # Processing the call keyword arguments (line 811)
        kwargs_65553 = {}
        # Getting the type of 'ValueError' (line 811)
        ValueError_65551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 811)
        ValueError_call_result_65554 = invoke(stypy.reporting.localization.Localization(__file__, 811, 22), ValueError_65551, *[str_65552], **kwargs_65553)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 811, 16), ValueError_call_result_65554, 'raise parameter', BaseException)
        # SSA join for if statement (line 808)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 806)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 801)
        module_type_store.open_ssa_branch('else')
        
        
        
        
        # Obtaining the type of the subscript
        int_65555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 21), 'int')
        # Getting the type of 'x' (line 814)
        x_65556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 19), 'x')
        # Obtaining the member '__getitem__' of a type (line 814)
        getitem___65557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 19), x_65556, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 814)
        subscript_call_result_65558 = invoke(stypy.reporting.localization.Localization(__file__, 814, 19), getitem___65557, int_65555)
        
        
        # Obtaining the type of the subscript
        int_65559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 30), 'int')
        # Getting the type of 'x' (line 814)
        x_65560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 28), 'x')
        # Obtaining the member '__getitem__' of a type (line 814)
        getitem___65561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 28), x_65560, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 814)
        subscript_call_result_65562 = invoke(stypy.reporting.localization.Localization(__file__, 814, 28), getitem___65561, int_65559)
        
        # Applying the binary operator '<=' (line 814)
        result_le_65563 = python_operator(stypy.reporting.localization.Localization(__file__, 814, 19), '<=', subscript_call_result_65558, subscript_call_result_65562)
        
        # Applying the 'not' unary operator (line 814)
        result_not__65564 = python_operator(stypy.reporting.localization.Localization(__file__, 814, 15), 'not', result_le_65563)
        
        # Testing the type of an if condition (line 814)
        if_condition_65565 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 814, 12), result_not__65564)
        # Assigning a type to the variable 'if_condition_65565' (line 814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 12), 'if_condition_65565', if_condition_65565)
        # SSA begins for if statement (line 814)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 815)
        # Processing the call arguments (line 815)
        str_65567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 33), 'str', '`x` is in the different order than `self.x`.')
        # Processing the call keyword arguments (line 815)
        kwargs_65568 = {}
        # Getting the type of 'ValueError' (line 815)
        ValueError_65566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 815)
        ValueError_call_result_65569 = invoke(stypy.reporting.localization.Localization(__file__, 815, 22), ValueError_65566, *[str_65567], **kwargs_65568)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 815, 16), ValueError_call_result_65569, 'raise parameter', BaseException)
        # SSA join for if statement (line 814)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_65570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 17), 'int')
        # Getting the type of 'x' (line 818)
        x_65571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 15), 'x')
        # Obtaining the member '__getitem__' of a type (line 818)
        getitem___65572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 15), x_65571, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 818)
        subscript_call_result_65573 = invoke(stypy.reporting.localization.Localization(__file__, 818, 15), getitem___65572, int_65570)
        
        
        # Obtaining the type of the subscript
        int_65574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 30), 'int')
        # Getting the type of 'self' (line 818)
        self_65575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 23), 'self')
        # Obtaining the member 'x' of a type (line 818)
        x_65576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 23), self_65575, 'x')
        # Obtaining the member '__getitem__' of a type (line 818)
        getitem___65577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 23), x_65576, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 818)
        subscript_call_result_65578 = invoke(stypy.reporting.localization.Localization(__file__, 818, 23), getitem___65577, int_65574)
        
        # Applying the binary operator '<=' (line 818)
        result_le_65579 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 15), '<=', subscript_call_result_65573, subscript_call_result_65578)
        
        # Testing the type of an if condition (line 818)
        if_condition_65580 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 818, 12), result_le_65579)
        # Assigning a type to the variable 'if_condition_65580' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 12), 'if_condition_65580', if_condition_65580)
        # SSA begins for if statement (line 818)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 819):
        
        # Assigning a Str to a Name (line 819):
        str_65581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, 25), 'str', 'append')
        # Assigning a type to the variable 'action' (line 819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 16), 'action', str_65581)
        # SSA branch for the else part of an if statement (line 818)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        int_65582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 19), 'int')
        # Getting the type of 'x' (line 820)
        x_65583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 17), 'x')
        # Obtaining the member '__getitem__' of a type (line 820)
        getitem___65584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 17), x_65583, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 820)
        subscript_call_result_65585 = invoke(stypy.reporting.localization.Localization(__file__, 820, 17), getitem___65584, int_65582)
        
        
        # Obtaining the type of the subscript
        int_65586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 33), 'int')
        # Getting the type of 'self' (line 820)
        self_65587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 26), 'self')
        # Obtaining the member 'x' of a type (line 820)
        x_65588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 26), self_65587, 'x')
        # Obtaining the member '__getitem__' of a type (line 820)
        getitem___65589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 26), x_65588, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 820)
        subscript_call_result_65590 = invoke(stypy.reporting.localization.Localization(__file__, 820, 26), getitem___65589, int_65586)
        
        # Applying the binary operator '>=' (line 820)
        result_ge_65591 = python_operator(stypy.reporting.localization.Localization(__file__, 820, 17), '>=', subscript_call_result_65585, subscript_call_result_65590)
        
        # Testing the type of an if condition (line 820)
        if_condition_65592 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 820, 17), result_ge_65591)
        # Assigning a type to the variable 'if_condition_65592' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 17), 'if_condition_65592', if_condition_65592)
        # SSA begins for if statement (line 820)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 821):
        
        # Assigning a Str to a Name (line 821):
        str_65593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 25), 'str', 'prepend')
        # Assigning a type to the variable 'action' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 16), 'action', str_65593)
        # SSA branch for the else part of an if statement (line 820)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 823)
        # Processing the call arguments (line 823)
        str_65595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 33), 'str', '`x` is neither on the left or on the right from `self.x`.')
        # Processing the call keyword arguments (line 823)
        kwargs_65596 = {}
        # Getting the type of 'ValueError' (line 823)
        ValueError_65594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 823)
        ValueError_call_result_65597 = invoke(stypy.reporting.localization.Localization(__file__, 823, 22), ValueError_65594, *[str_65595], **kwargs_65596)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 823, 16), ValueError_call_result_65597, 'raise parameter', BaseException)
        # SSA join for if statement (line 820)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 818)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 801)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 826):
        
        # Assigning a Call to a Name (line 826):
        
        # Call to _get_dtype(...): (line 826)
        # Processing the call arguments (line 826)
        # Getting the type of 'c' (line 826)
        c_65600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 32), 'c', False)
        # Obtaining the member 'dtype' of a type (line 826)
        dtype_65601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 32), c_65600, 'dtype')
        # Processing the call keyword arguments (line 826)
        kwargs_65602 = {}
        # Getting the type of 'self' (line 826)
        self_65598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 16), 'self', False)
        # Obtaining the member '_get_dtype' of a type (line 826)
        _get_dtype_65599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 16), self_65598, '_get_dtype')
        # Calling _get_dtype(args, kwargs) (line 826)
        _get_dtype_call_result_65603 = invoke(stypy.reporting.localization.Localization(__file__, 826, 16), _get_dtype_65599, *[dtype_65601], **kwargs_65602)
        
        # Assigning a type to the variable 'dtype' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'dtype', _get_dtype_call_result_65603)
        
        # Assigning a Call to a Name (line 828):
        
        # Assigning a Call to a Name (line 828):
        
        # Call to max(...): (line 828)
        # Processing the call arguments (line 828)
        
        # Obtaining the type of the subscript
        int_65605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 25), 'int')
        # Getting the type of 'c' (line 828)
        c_65606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 17), 'c', False)
        # Obtaining the member 'shape' of a type (line 828)
        shape_65607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 17), c_65606, 'shape')
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___65608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 17), shape_65607, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 828)
        subscript_call_result_65609 = invoke(stypy.reporting.localization.Localization(__file__, 828, 17), getitem___65608, int_65605)
        
        
        # Obtaining the type of the subscript
        int_65610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 42), 'int')
        # Getting the type of 'self' (line 828)
        self_65611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 29), 'self', False)
        # Obtaining the member 'c' of a type (line 828)
        c_65612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 29), self_65611, 'c')
        # Obtaining the member 'shape' of a type (line 828)
        shape_65613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 29), c_65612, 'shape')
        # Obtaining the member '__getitem__' of a type (line 828)
        getitem___65614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 29), shape_65613, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 828)
        subscript_call_result_65615 = invoke(stypy.reporting.localization.Localization(__file__, 828, 29), getitem___65614, int_65610)
        
        # Processing the call keyword arguments (line 828)
        kwargs_65616 = {}
        # Getting the type of 'max' (line 828)
        max_65604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 13), 'max', False)
        # Calling max(args, kwargs) (line 828)
        max_call_result_65617 = invoke(stypy.reporting.localization.Localization(__file__, 828, 13), max_65604, *[subscript_call_result_65609, subscript_call_result_65615], **kwargs_65616)
        
        # Assigning a type to the variable 'k2' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'k2', max_call_result_65617)
        
        # Assigning a Call to a Name (line 829):
        
        # Assigning a Call to a Name (line 829):
        
        # Call to zeros(...): (line 829)
        # Processing the call arguments (line 829)
        
        # Obtaining an instance of the builtin type 'tuple' (line 829)
        tuple_65620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 829)
        # Adding element type (line 829)
        # Getting the type of 'k2' (line 829)
        k2_65621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 23), 'k2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 23), tuple_65620, k2_65621)
        # Adding element type (line 829)
        
        # Obtaining the type of the subscript
        int_65622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 40), 'int')
        # Getting the type of 'self' (line 829)
        self_65623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 27), 'self', False)
        # Obtaining the member 'c' of a type (line 829)
        c_65624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 27), self_65623, 'c')
        # Obtaining the member 'shape' of a type (line 829)
        shape_65625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 27), c_65624, 'shape')
        # Obtaining the member '__getitem__' of a type (line 829)
        getitem___65626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 27), shape_65625, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 829)
        subscript_call_result_65627 = invoke(stypy.reporting.localization.Localization(__file__, 829, 27), getitem___65626, int_65622)
        
        
        # Obtaining the type of the subscript
        int_65628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 53), 'int')
        # Getting the type of 'c' (line 829)
        c_65629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 45), 'c', False)
        # Obtaining the member 'shape' of a type (line 829)
        shape_65630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 45), c_65629, 'shape')
        # Obtaining the member '__getitem__' of a type (line 829)
        getitem___65631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 45), shape_65630, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 829)
        subscript_call_result_65632 = invoke(stypy.reporting.localization.Localization(__file__, 829, 45), getitem___65631, int_65628)
        
        # Applying the binary operator '+' (line 829)
        result_add_65633 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 27), '+', subscript_call_result_65627, subscript_call_result_65632)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 23), tuple_65620, result_add_65633)
        
        
        # Obtaining the type of the subscript
        int_65634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 72), 'int')
        slice_65635 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 829, 59), int_65634, None, None)
        # Getting the type of 'self' (line 829)
        self_65636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 59), 'self', False)
        # Obtaining the member 'c' of a type (line 829)
        c_65637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 59), self_65636, 'c')
        # Obtaining the member 'shape' of a type (line 829)
        shape_65638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 59), c_65637, 'shape')
        # Obtaining the member '__getitem__' of a type (line 829)
        getitem___65639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 59), shape_65638, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 829)
        subscript_call_result_65640 = invoke(stypy.reporting.localization.Localization(__file__, 829, 59), getitem___65639, slice_65635)
        
        # Applying the binary operator '+' (line 829)
        result_add_65641 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 22), '+', tuple_65620, subscript_call_result_65640)
        
        # Processing the call keyword arguments (line 829)
        # Getting the type of 'dtype' (line 830)
        dtype_65642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 28), 'dtype', False)
        keyword_65643 = dtype_65642
        kwargs_65644 = {'dtype': keyword_65643}
        # Getting the type of 'np' (line 829)
        np_65618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 13), 'np', False)
        # Obtaining the member 'zeros' of a type (line 829)
        zeros_65619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 13), np_65618, 'zeros')
        # Calling zeros(args, kwargs) (line 829)
        zeros_call_result_65645 = invoke(stypy.reporting.localization.Localization(__file__, 829, 13), zeros_65619, *[result_add_65641], **kwargs_65644)
        
        # Assigning a type to the variable 'c2' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'c2', zeros_call_result_65645)
        
        
        # Getting the type of 'action' (line 832)
        action_65646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 11), 'action')
        str_65647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 21), 'str', 'append')
        # Applying the binary operator '==' (line 832)
        result_eq_65648 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 11), '==', action_65646, str_65647)
        
        # Testing the type of an if condition (line 832)
        if_condition_65649 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 832, 8), result_eq_65648)
        # Assigning a type to the variable 'if_condition_65649' (line 832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 8), 'if_condition_65649', if_condition_65649)
        # SSA begins for if statement (line 832)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 833):
        
        # Assigning a Attribute to a Subscript (line 833):
        # Getting the type of 'self' (line 833)
        self_65650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 56), 'self')
        # Obtaining the member 'c' of a type (line 833)
        c_65651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 56), self_65650, 'c')
        # Getting the type of 'c2' (line 833)
        c2_65652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 12), 'c2')
        # Getting the type of 'k2' (line 833)
        k2_65653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 15), 'k2')
        
        # Obtaining the type of the subscript
        int_65654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 833, 31), 'int')
        # Getting the type of 'self' (line 833)
        self_65655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 18), 'self')
        # Obtaining the member 'c' of a type (line 833)
        c_65656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 18), self_65655, 'c')
        # Obtaining the member 'shape' of a type (line 833)
        shape_65657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 18), c_65656, 'shape')
        # Obtaining the member '__getitem__' of a type (line 833)
        getitem___65658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 18), shape_65657, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 833)
        subscript_call_result_65659 = invoke(stypy.reporting.localization.Localization(__file__, 833, 18), getitem___65658, int_65654)
        
        # Applying the binary operator '-' (line 833)
        result_sub_65660 = python_operator(stypy.reporting.localization.Localization(__file__, 833, 15), '-', k2_65653, subscript_call_result_65659)
        
        slice_65661 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 833, 12), result_sub_65660, None, None)
        
        # Obtaining the type of the subscript
        int_65662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 833, 50), 'int')
        # Getting the type of 'self' (line 833)
        self_65663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 37), 'self')
        # Obtaining the member 'c' of a type (line 833)
        c_65664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 37), self_65663, 'c')
        # Obtaining the member 'shape' of a type (line 833)
        shape_65665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 37), c_65664, 'shape')
        # Obtaining the member '__getitem__' of a type (line 833)
        getitem___65666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 37), shape_65665, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 833)
        subscript_call_result_65667 = invoke(stypy.reporting.localization.Localization(__file__, 833, 37), getitem___65666, int_65662)
        
        slice_65668 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 833, 12), None, subscript_call_result_65667, None)
        # Storing an element on a container (line 833)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 833, 12), c2_65652, ((slice_65661, slice_65668), c_65651))
        
        # Assigning a Name to a Subscript (line 834):
        
        # Assigning a Name to a Subscript (line 834):
        # Getting the type of 'c' (line 834)
        c_65669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 51), 'c')
        # Getting the type of 'c2' (line 834)
        c2_65670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 12), 'c2')
        # Getting the type of 'k2' (line 834)
        k2_65671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 15), 'k2')
        
        # Obtaining the type of the subscript
        int_65672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 26), 'int')
        # Getting the type of 'c' (line 834)
        c_65673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 18), 'c')
        # Obtaining the member 'shape' of a type (line 834)
        shape_65674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 18), c_65673, 'shape')
        # Obtaining the member '__getitem__' of a type (line 834)
        getitem___65675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 18), shape_65674, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 834)
        subscript_call_result_65676 = invoke(stypy.reporting.localization.Localization(__file__, 834, 18), getitem___65675, int_65672)
        
        # Applying the binary operator '-' (line 834)
        result_sub_65677 = python_operator(stypy.reporting.localization.Localization(__file__, 834, 15), '-', k2_65671, subscript_call_result_65676)
        
        slice_65678 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 834, 12), result_sub_65677, None, None)
        
        # Obtaining the type of the subscript
        int_65679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 44), 'int')
        # Getting the type of 'self' (line 834)
        self_65680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 31), 'self')
        # Obtaining the member 'c' of a type (line 834)
        c_65681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 31), self_65680, 'c')
        # Obtaining the member 'shape' of a type (line 834)
        shape_65682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 31), c_65681, 'shape')
        # Obtaining the member '__getitem__' of a type (line 834)
        getitem___65683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 31), shape_65682, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 834)
        subscript_call_result_65684 = invoke(stypy.reporting.localization.Localization(__file__, 834, 31), getitem___65683, int_65679)
        
        slice_65685 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 834, 12), subscript_call_result_65684, None, None)
        # Storing an element on a container (line 834)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 834, 12), c2_65670, ((slice_65678, slice_65685), c_65669))
        
        # Assigning a Subscript to a Attribute (line 835):
        
        # Assigning a Subscript to a Attribute (line 835):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 835)
        tuple_65686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 835)
        # Adding element type (line 835)
        # Getting the type of 'self' (line 835)
        self_65687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 27), 'self')
        # Obtaining the member 'x' of a type (line 835)
        x_65688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 27), self_65687, 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 835, 27), tuple_65686, x_65688)
        # Adding element type (line 835)
        # Getting the type of 'x' (line 835)
        x_65689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 35), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 835, 27), tuple_65686, x_65689)
        
        # Getting the type of 'np' (line 835)
        np_65690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 21), 'np')
        # Obtaining the member 'r_' of a type (line 835)
        r__65691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 21), np_65690, 'r_')
        # Obtaining the member '__getitem__' of a type (line 835)
        getitem___65692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 21), r__65691, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 835)
        subscript_call_result_65693 = invoke(stypy.reporting.localization.Localization(__file__, 835, 21), getitem___65692, tuple_65686)
        
        # Getting the type of 'self' (line 835)
        self_65694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 12), 'self')
        # Setting the type of the member 'x' of a type (line 835)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 12), self_65694, 'x', subscript_call_result_65693)
        # SSA branch for the else part of an if statement (line 832)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'action' (line 836)
        action_65695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 13), 'action')
        str_65696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 23), 'str', 'prepend')
        # Applying the binary operator '==' (line 836)
        result_eq_65697 = python_operator(stypy.reporting.localization.Localization(__file__, 836, 13), '==', action_65695, str_65696)
        
        # Testing the type of an if condition (line 836)
        if_condition_65698 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 836, 13), result_eq_65697)
        # Assigning a type to the variable 'if_condition_65698' (line 836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 13), 'if_condition_65698', if_condition_65698)
        # SSA begins for if statement (line 836)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 837):
        
        # Assigning a Name to a Subscript (line 837):
        # Getting the type of 'c' (line 837)
        c_65699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 51), 'c')
        # Getting the type of 'c2' (line 837)
        c2_65700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 12), 'c2')
        # Getting the type of 'k2' (line 837)
        k2_65701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 15), 'k2')
        
        # Obtaining the type of the subscript
        int_65702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 31), 'int')
        # Getting the type of 'self' (line 837)
        self_65703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 18), 'self')
        # Obtaining the member 'c' of a type (line 837)
        c_65704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 18), self_65703, 'c')
        # Obtaining the member 'shape' of a type (line 837)
        shape_65705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 18), c_65704, 'shape')
        # Obtaining the member '__getitem__' of a type (line 837)
        getitem___65706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 18), shape_65705, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 837)
        subscript_call_result_65707 = invoke(stypy.reporting.localization.Localization(__file__, 837, 18), getitem___65706, int_65702)
        
        # Applying the binary operator '-' (line 837)
        result_sub_65708 = python_operator(stypy.reporting.localization.Localization(__file__, 837, 15), '-', k2_65701, subscript_call_result_65707)
        
        slice_65709 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 837, 12), result_sub_65708, None, None)
        
        # Obtaining the type of the subscript
        int_65710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 45), 'int')
        # Getting the type of 'c' (line 837)
        c_65711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 37), 'c')
        # Obtaining the member 'shape' of a type (line 837)
        shape_65712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 37), c_65711, 'shape')
        # Obtaining the member '__getitem__' of a type (line 837)
        getitem___65713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 37), shape_65712, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 837)
        subscript_call_result_65714 = invoke(stypy.reporting.localization.Localization(__file__, 837, 37), getitem___65713, int_65710)
        
        slice_65715 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 837, 12), None, subscript_call_result_65714, None)
        # Storing an element on a container (line 837)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 837, 12), c2_65700, ((slice_65709, slice_65715), c_65699))
        
        # Assigning a Attribute to a Subscript (line 838):
        
        # Assigning a Attribute to a Subscript (line 838):
        # Getting the type of 'self' (line 838)
        self_65716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 46), 'self')
        # Obtaining the member 'c' of a type (line 838)
        c_65717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 46), self_65716, 'c')
        # Getting the type of 'c2' (line 838)
        c2_65718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 12), 'c2')
        # Getting the type of 'k2' (line 838)
        k2_65719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 15), 'k2')
        
        # Obtaining the type of the subscript
        int_65720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 26), 'int')
        # Getting the type of 'c' (line 838)
        c_65721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 18), 'c')
        # Obtaining the member 'shape' of a type (line 838)
        shape_65722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 18), c_65721, 'shape')
        # Obtaining the member '__getitem__' of a type (line 838)
        getitem___65723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 18), shape_65722, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 838)
        subscript_call_result_65724 = invoke(stypy.reporting.localization.Localization(__file__, 838, 18), getitem___65723, int_65720)
        
        # Applying the binary operator '-' (line 838)
        result_sub_65725 = python_operator(stypy.reporting.localization.Localization(__file__, 838, 15), '-', k2_65719, subscript_call_result_65724)
        
        slice_65726 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 838, 12), result_sub_65725, None, None)
        
        # Obtaining the type of the subscript
        int_65727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 39), 'int')
        # Getting the type of 'c' (line 838)
        c_65728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 31), 'c')
        # Obtaining the member 'shape' of a type (line 838)
        shape_65729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 31), c_65728, 'shape')
        # Obtaining the member '__getitem__' of a type (line 838)
        getitem___65730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 31), shape_65729, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 838)
        subscript_call_result_65731 = invoke(stypy.reporting.localization.Localization(__file__, 838, 31), getitem___65730, int_65727)
        
        slice_65732 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 838, 12), subscript_call_result_65731, None, None)
        # Storing an element on a container (line 838)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 838, 12), c2_65718, ((slice_65726, slice_65732), c_65717))
        
        # Assigning a Subscript to a Attribute (line 839):
        
        # Assigning a Subscript to a Attribute (line 839):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 839)
        tuple_65733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 839)
        # Adding element type (line 839)
        # Getting the type of 'x' (line 839)
        x_65734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 27), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 839, 27), tuple_65733, x_65734)
        # Adding element type (line 839)
        # Getting the type of 'self' (line 839)
        self_65735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 30), 'self')
        # Obtaining the member 'x' of a type (line 839)
        x_65736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 30), self_65735, 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 839, 27), tuple_65733, x_65736)
        
        # Getting the type of 'np' (line 839)
        np_65737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 21), 'np')
        # Obtaining the member 'r_' of a type (line 839)
        r__65738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 21), np_65737, 'r_')
        # Obtaining the member '__getitem__' of a type (line 839)
        getitem___65739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 21), r__65738, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 839)
        subscript_call_result_65740 = invoke(stypy.reporting.localization.Localization(__file__, 839, 21), getitem___65739, tuple_65733)
        
        # Getting the type of 'self' (line 839)
        self_65741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 12), 'self')
        # Setting the type of the member 'x' of a type (line 839)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 12), self_65741, 'x', subscript_call_result_65740)
        # SSA join for if statement (line 836)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 832)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 841):
        
        # Assigning a Name to a Attribute (line 841):
        # Getting the type of 'c2' (line 841)
        c2_65742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 17), 'c2')
        # Getting the type of 'self' (line 841)
        self_65743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 8), 'self')
        # Setting the type of the member 'c' of a type (line 841)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 8), self_65743, 'c', c2_65742)
        
        # ################# End of 'extend(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'extend' in the type store
        # Getting the type of 'stypy_return_type' (line 760)
        stypy_return_type_65744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65744)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'extend'
        return stypy_return_type_65744


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_65745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 29), 'int')
        # Getting the type of 'None' (line 843)
        None_65746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 44), 'None')
        defaults = [int_65745, None_65746]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 843, 4, False)
        # Assigning a type to the variable 'self' (line 844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 844, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _PPolyBase.__call__.__dict__.__setitem__('stypy_localization', localization)
        _PPolyBase.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _PPolyBase.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _PPolyBase.__call__.__dict__.__setitem__('stypy_function_name', '_PPolyBase.__call__')
        _PPolyBase.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'nu', 'extrapolate'])
        _PPolyBase.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _PPolyBase.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _PPolyBase.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _PPolyBase.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _PPolyBase.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _PPolyBase.__call__.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_PPolyBase.__call__', ['x', 'nu', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'nu', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_65747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 872, (-1)), 'str', "\n        Evaluate the piecewise polynomial or its derivative.\n\n        Parameters\n        ----------\n        x : array_like\n            Points to evaluate the interpolant at.\n        nu : int, optional\n            Order of derivative to evaluate. Must be non-negative.\n        extrapolate : {bool, 'periodic', None}, optional\n            If bool, determines whether to extrapolate to out-of-bounds points\n            based on first and last intervals, or to return NaNs.\n            If 'periodic', periodic extrapolation is used.\n            If None (default), use `self.extrapolate`.\n\n        Returns\n        -------\n        y : array_like\n            Interpolated values. Shape is determined by replacing\n            the interpolation axis in the original array with the shape of x.\n\n        Notes\n        -----\n        Derivatives are evaluated piecewise for each polynomial\n        segment, even if the polynomial is not differentiable at the\n        breakpoints. The polynomial intervals are considered half-open,\n        ``[a, b)``, except for the last interval which is closed\n        ``[a, b]``.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 873)
        # Getting the type of 'extrapolate' (line 873)
        extrapolate_65748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 11), 'extrapolate')
        # Getting the type of 'None' (line 873)
        None_65749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 26), 'None')
        
        (may_be_65750, more_types_in_union_65751) = may_be_none(extrapolate_65748, None_65749)

        if may_be_65750:

            if more_types_in_union_65751:
                # Runtime conditional SSA (line 873)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 874):
            
            # Assigning a Attribute to a Name (line 874):
            # Getting the type of 'self' (line 874)
            self_65752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 26), 'self')
            # Obtaining the member 'extrapolate' of a type (line 874)
            extrapolate_65753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 874, 26), self_65752, 'extrapolate')
            # Assigning a type to the variable 'extrapolate' (line 874)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 12), 'extrapolate', extrapolate_65753)

            if more_types_in_union_65751:
                # SSA join for if statement (line 873)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 875):
        
        # Assigning a Call to a Name (line 875):
        
        # Call to asarray(...): (line 875)
        # Processing the call arguments (line 875)
        # Getting the type of 'x' (line 875)
        x_65756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 23), 'x', False)
        # Processing the call keyword arguments (line 875)
        kwargs_65757 = {}
        # Getting the type of 'np' (line 875)
        np_65754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 875)
        asarray_65755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 12), np_65754, 'asarray')
        # Calling asarray(args, kwargs) (line 875)
        asarray_call_result_65758 = invoke(stypy.reporting.localization.Localization(__file__, 875, 12), asarray_65755, *[x_65756], **kwargs_65757)
        
        # Assigning a type to the variable 'x' (line 875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 8), 'x', asarray_call_result_65758)
        
        # Assigning a Tuple to a Tuple (line 876):
        
        # Assigning a Attribute to a Name (line 876):
        # Getting the type of 'x' (line 876)
        x_65759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 26), 'x')
        # Obtaining the member 'shape' of a type (line 876)
        shape_65760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 26), x_65759, 'shape')
        # Assigning a type to the variable 'tuple_assignment_63609' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_assignment_63609', shape_65760)
        
        # Assigning a Attribute to a Name (line 876):
        # Getting the type of 'x' (line 876)
        x_65761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 35), 'x')
        # Obtaining the member 'ndim' of a type (line 876)
        ndim_65762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 35), x_65761, 'ndim')
        # Assigning a type to the variable 'tuple_assignment_63610' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_assignment_63610', ndim_65762)
        
        # Assigning a Name to a Name (line 876):
        # Getting the type of 'tuple_assignment_63609' (line 876)
        tuple_assignment_63609_65763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_assignment_63609')
        # Assigning a type to the variable 'x_shape' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'x_shape', tuple_assignment_63609_65763)
        
        # Assigning a Name to a Name (line 876):
        # Getting the type of 'tuple_assignment_63610' (line 876)
        tuple_assignment_63610_65764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_assignment_63610')
        # Assigning a type to the variable 'x_ndim' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 17), 'x_ndim', tuple_assignment_63610_65764)
        
        # Assigning a Call to a Name (line 877):
        
        # Assigning a Call to a Name (line 877):
        
        # Call to ascontiguousarray(...): (line 877)
        # Processing the call arguments (line 877)
        
        # Call to ravel(...): (line 877)
        # Processing the call keyword arguments (line 877)
        kwargs_65769 = {}
        # Getting the type of 'x' (line 877)
        x_65767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 33), 'x', False)
        # Obtaining the member 'ravel' of a type (line 877)
        ravel_65768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 33), x_65767, 'ravel')
        # Calling ravel(args, kwargs) (line 877)
        ravel_call_result_65770 = invoke(stypy.reporting.localization.Localization(__file__, 877, 33), ravel_65768, *[], **kwargs_65769)
        
        # Processing the call keyword arguments (line 877)
        # Getting the type of 'np' (line 877)
        np_65771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 50), 'np', False)
        # Obtaining the member 'float_' of a type (line 877)
        float__65772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 50), np_65771, 'float_')
        keyword_65773 = float__65772
        kwargs_65774 = {'dtype': keyword_65773}
        # Getting the type of 'np' (line 877)
        np_65765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 12), 'np', False)
        # Obtaining the member 'ascontiguousarray' of a type (line 877)
        ascontiguousarray_65766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 12), np_65765, 'ascontiguousarray')
        # Calling ascontiguousarray(args, kwargs) (line 877)
        ascontiguousarray_call_result_65775 = invoke(stypy.reporting.localization.Localization(__file__, 877, 12), ascontiguousarray_65766, *[ravel_call_result_65770], **kwargs_65774)
        
        # Assigning a type to the variable 'x' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'x', ascontiguousarray_call_result_65775)
        
        
        # Getting the type of 'extrapolate' (line 881)
        extrapolate_65776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 11), 'extrapolate')
        str_65777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 26), 'str', 'periodic')
        # Applying the binary operator '==' (line 881)
        result_eq_65778 = python_operator(stypy.reporting.localization.Localization(__file__, 881, 11), '==', extrapolate_65776, str_65777)
        
        # Testing the type of an if condition (line 881)
        if_condition_65779 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 881, 8), result_eq_65778)
        # Assigning a type to the variable 'if_condition_65779' (line 881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'if_condition_65779', if_condition_65779)
        # SSA begins for if statement (line 881)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 882):
        
        # Assigning a BinOp to a Name (line 882):
        
        # Obtaining the type of the subscript
        int_65780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 23), 'int')
        # Getting the type of 'self' (line 882)
        self_65781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 16), 'self')
        # Obtaining the member 'x' of a type (line 882)
        x_65782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 16), self_65781, 'x')
        # Obtaining the member '__getitem__' of a type (line 882)
        getitem___65783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 16), x_65782, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 882)
        subscript_call_result_65784 = invoke(stypy.reporting.localization.Localization(__file__, 882, 16), getitem___65783, int_65780)
        
        # Getting the type of 'x' (line 882)
        x_65785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 29), 'x')
        
        # Obtaining the type of the subscript
        int_65786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 40), 'int')
        # Getting the type of 'self' (line 882)
        self_65787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 33), 'self')
        # Obtaining the member 'x' of a type (line 882)
        x_65788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 33), self_65787, 'x')
        # Obtaining the member '__getitem__' of a type (line 882)
        getitem___65789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 33), x_65788, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 882)
        subscript_call_result_65790 = invoke(stypy.reporting.localization.Localization(__file__, 882, 33), getitem___65789, int_65786)
        
        # Applying the binary operator '-' (line 882)
        result_sub_65791 = python_operator(stypy.reporting.localization.Localization(__file__, 882, 29), '-', x_65785, subscript_call_result_65790)
        
        
        # Obtaining the type of the subscript
        int_65792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 54), 'int')
        # Getting the type of 'self' (line 882)
        self_65793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 47), 'self')
        # Obtaining the member 'x' of a type (line 882)
        x_65794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 47), self_65793, 'x')
        # Obtaining the member '__getitem__' of a type (line 882)
        getitem___65795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 47), x_65794, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 882)
        subscript_call_result_65796 = invoke(stypy.reporting.localization.Localization(__file__, 882, 47), getitem___65795, int_65792)
        
        
        # Obtaining the type of the subscript
        int_65797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 67), 'int')
        # Getting the type of 'self' (line 882)
        self_65798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 60), 'self')
        # Obtaining the member 'x' of a type (line 882)
        x_65799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 60), self_65798, 'x')
        # Obtaining the member '__getitem__' of a type (line 882)
        getitem___65800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 60), x_65799, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 882)
        subscript_call_result_65801 = invoke(stypy.reporting.localization.Localization(__file__, 882, 60), getitem___65800, int_65797)
        
        # Applying the binary operator '-' (line 882)
        result_sub_65802 = python_operator(stypy.reporting.localization.Localization(__file__, 882, 47), '-', subscript_call_result_65796, subscript_call_result_65801)
        
        # Applying the binary operator '%' (line 882)
        result_mod_65803 = python_operator(stypy.reporting.localization.Localization(__file__, 882, 28), '%', result_sub_65791, result_sub_65802)
        
        # Applying the binary operator '+' (line 882)
        result_add_65804 = python_operator(stypy.reporting.localization.Localization(__file__, 882, 16), '+', subscript_call_result_65784, result_mod_65803)
        
        # Assigning a type to the variable 'x' (line 882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 12), 'x', result_add_65804)
        
        # Assigning a Name to a Name (line 883):
        
        # Assigning a Name to a Name (line 883):
        # Getting the type of 'False' (line 883)
        False_65805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 26), 'False')
        # Assigning a type to the variable 'extrapolate' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 12), 'extrapolate', False_65805)
        # SSA join for if statement (line 881)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 885):
        
        # Assigning a Call to a Name (line 885):
        
        # Call to empty(...): (line 885)
        # Processing the call arguments (line 885)
        
        # Obtaining an instance of the builtin type 'tuple' (line 885)
        tuple_65808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 885)
        # Adding element type (line 885)
        
        # Call to len(...): (line 885)
        # Processing the call arguments (line 885)
        # Getting the type of 'x' (line 885)
        x_65810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 28), 'x', False)
        # Processing the call keyword arguments (line 885)
        kwargs_65811 = {}
        # Getting the type of 'len' (line 885)
        len_65809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 24), 'len', False)
        # Calling len(args, kwargs) (line 885)
        len_call_result_65812 = invoke(stypy.reporting.localization.Localization(__file__, 885, 24), len_65809, *[x_65810], **kwargs_65811)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 885, 24), tuple_65808, len_call_result_65812)
        # Adding element type (line 885)
        
        # Call to prod(...): (line 885)
        # Processing the call arguments (line 885)
        
        # Obtaining the type of the subscript
        int_65814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 50), 'int')
        slice_65815 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 885, 37), int_65814, None, None)
        # Getting the type of 'self' (line 885)
        self_65816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 37), 'self', False)
        # Obtaining the member 'c' of a type (line 885)
        c_65817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 37), self_65816, 'c')
        # Obtaining the member 'shape' of a type (line 885)
        shape_65818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 37), c_65817, 'shape')
        # Obtaining the member '__getitem__' of a type (line 885)
        getitem___65819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 37), shape_65818, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 885)
        subscript_call_result_65820 = invoke(stypy.reporting.localization.Localization(__file__, 885, 37), getitem___65819, slice_65815)
        
        # Processing the call keyword arguments (line 885)
        kwargs_65821 = {}
        # Getting the type of 'prod' (line 885)
        prod_65813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 32), 'prod', False)
        # Calling prod(args, kwargs) (line 885)
        prod_call_result_65822 = invoke(stypy.reporting.localization.Localization(__file__, 885, 32), prod_65813, *[subscript_call_result_65820], **kwargs_65821)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 885, 24), tuple_65808, prod_call_result_65822)
        
        # Processing the call keyword arguments (line 885)
        # Getting the type of 'self' (line 885)
        self_65823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 63), 'self', False)
        # Obtaining the member 'c' of a type (line 885)
        c_65824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 63), self_65823, 'c')
        # Obtaining the member 'dtype' of a type (line 885)
        dtype_65825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 63), c_65824, 'dtype')
        keyword_65826 = dtype_65825
        kwargs_65827 = {'dtype': keyword_65826}
        # Getting the type of 'np' (line 885)
        np_65806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 14), 'np', False)
        # Obtaining the member 'empty' of a type (line 885)
        empty_65807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 14), np_65806, 'empty')
        # Calling empty(args, kwargs) (line 885)
        empty_call_result_65828 = invoke(stypy.reporting.localization.Localization(__file__, 885, 14), empty_65807, *[tuple_65808], **kwargs_65827)
        
        # Assigning a type to the variable 'out' (line 885)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 885, 8), 'out', empty_call_result_65828)
        
        # Call to _ensure_c_contiguous(...): (line 886)
        # Processing the call keyword arguments (line 886)
        kwargs_65831 = {}
        # Getting the type of 'self' (line 886)
        self_65829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 8), 'self', False)
        # Obtaining the member '_ensure_c_contiguous' of a type (line 886)
        _ensure_c_contiguous_65830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 8), self_65829, '_ensure_c_contiguous')
        # Calling _ensure_c_contiguous(args, kwargs) (line 886)
        _ensure_c_contiguous_call_result_65832 = invoke(stypy.reporting.localization.Localization(__file__, 886, 8), _ensure_c_contiguous_65830, *[], **kwargs_65831)
        
        
        # Call to _evaluate(...): (line 887)
        # Processing the call arguments (line 887)
        # Getting the type of 'x' (line 887)
        x_65835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 23), 'x', False)
        # Getting the type of 'nu' (line 887)
        nu_65836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 26), 'nu', False)
        # Getting the type of 'extrapolate' (line 887)
        extrapolate_65837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 30), 'extrapolate', False)
        # Getting the type of 'out' (line 887)
        out_65838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 43), 'out', False)
        # Processing the call keyword arguments (line 887)
        kwargs_65839 = {}
        # Getting the type of 'self' (line 887)
        self_65833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 8), 'self', False)
        # Obtaining the member '_evaluate' of a type (line 887)
        _evaluate_65834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 8), self_65833, '_evaluate')
        # Calling _evaluate(args, kwargs) (line 887)
        _evaluate_call_result_65840 = invoke(stypy.reporting.localization.Localization(__file__, 887, 8), _evaluate_65834, *[x_65835, nu_65836, extrapolate_65837, out_65838], **kwargs_65839)
        
        
        # Assigning a Call to a Name (line 888):
        
        # Assigning a Call to a Name (line 888):
        
        # Call to reshape(...): (line 888)
        # Processing the call arguments (line 888)
        # Getting the type of 'x_shape' (line 888)
        x_shape_65843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 26), 'x_shape', False)
        
        # Obtaining the type of the subscript
        int_65844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, 49), 'int')
        slice_65845 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 888, 36), int_65844, None, None)
        # Getting the type of 'self' (line 888)
        self_65846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 36), 'self', False)
        # Obtaining the member 'c' of a type (line 888)
        c_65847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 36), self_65846, 'c')
        # Obtaining the member 'shape' of a type (line 888)
        shape_65848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 36), c_65847, 'shape')
        # Obtaining the member '__getitem__' of a type (line 888)
        getitem___65849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 36), shape_65848, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 888)
        subscript_call_result_65850 = invoke(stypy.reporting.localization.Localization(__file__, 888, 36), getitem___65849, slice_65845)
        
        # Applying the binary operator '+' (line 888)
        result_add_65851 = python_operator(stypy.reporting.localization.Localization(__file__, 888, 26), '+', x_shape_65843, subscript_call_result_65850)
        
        # Processing the call keyword arguments (line 888)
        kwargs_65852 = {}
        # Getting the type of 'out' (line 888)
        out_65841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 14), 'out', False)
        # Obtaining the member 'reshape' of a type (line 888)
        reshape_65842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 888, 14), out_65841, 'reshape')
        # Calling reshape(args, kwargs) (line 888)
        reshape_call_result_65853 = invoke(stypy.reporting.localization.Localization(__file__, 888, 14), reshape_65842, *[result_add_65851], **kwargs_65852)
        
        # Assigning a type to the variable 'out' (line 888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 888, 8), 'out', reshape_call_result_65853)
        
        
        # Getting the type of 'self' (line 889)
        self_65854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 11), 'self')
        # Obtaining the member 'axis' of a type (line 889)
        axis_65855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 11), self_65854, 'axis')
        int_65856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 889, 24), 'int')
        # Applying the binary operator '!=' (line 889)
        result_ne_65857 = python_operator(stypy.reporting.localization.Localization(__file__, 889, 11), '!=', axis_65855, int_65856)
        
        # Testing the type of an if condition (line 889)
        if_condition_65858 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 889, 8), result_ne_65857)
        # Assigning a type to the variable 'if_condition_65858' (line 889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 889, 8), 'if_condition_65858', if_condition_65858)
        # SSA begins for if statement (line 889)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 891):
        
        # Assigning a Call to a Name (line 891):
        
        # Call to list(...): (line 891)
        # Processing the call arguments (line 891)
        
        # Call to range(...): (line 891)
        # Processing the call arguments (line 891)
        # Getting the type of 'out' (line 891)
        out_65861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 27), 'out', False)
        # Obtaining the member 'ndim' of a type (line 891)
        ndim_65862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 27), out_65861, 'ndim')
        # Processing the call keyword arguments (line 891)
        kwargs_65863 = {}
        # Getting the type of 'range' (line 891)
        range_65860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 21), 'range', False)
        # Calling range(args, kwargs) (line 891)
        range_call_result_65864 = invoke(stypy.reporting.localization.Localization(__file__, 891, 21), range_65860, *[ndim_65862], **kwargs_65863)
        
        # Processing the call keyword arguments (line 891)
        kwargs_65865 = {}
        # Getting the type of 'list' (line 891)
        list_65859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 16), 'list', False)
        # Calling list(args, kwargs) (line 891)
        list_call_result_65866 = invoke(stypy.reporting.localization.Localization(__file__, 891, 16), list_65859, *[range_call_result_65864], **kwargs_65865)
        
        # Assigning a type to the variable 'l' (line 891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 12), 'l', list_call_result_65866)
        
        # Assigning a BinOp to a Name (line 892):
        
        # Assigning a BinOp to a Name (line 892):
        
        # Obtaining the type of the subscript
        # Getting the type of 'x_ndim' (line 892)
        x_ndim_65867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 18), 'x_ndim')
        # Getting the type of 'x_ndim' (line 892)
        x_ndim_65868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 25), 'x_ndim')
        # Getting the type of 'self' (line 892)
        self_65869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 32), 'self')
        # Obtaining the member 'axis' of a type (line 892)
        axis_65870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 32), self_65869, 'axis')
        # Applying the binary operator '+' (line 892)
        result_add_65871 = python_operator(stypy.reporting.localization.Localization(__file__, 892, 25), '+', x_ndim_65868, axis_65870)
        
        slice_65872 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 892, 16), x_ndim_65867, result_add_65871, None)
        # Getting the type of 'l' (line 892)
        l_65873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 16), 'l')
        # Obtaining the member '__getitem__' of a type (line 892)
        getitem___65874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 16), l_65873, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 892)
        subscript_call_result_65875 = invoke(stypy.reporting.localization.Localization(__file__, 892, 16), getitem___65874, slice_65872)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'x_ndim' (line 892)
        x_ndim_65876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 48), 'x_ndim')
        slice_65877 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 892, 45), None, x_ndim_65876, None)
        # Getting the type of 'l' (line 892)
        l_65878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 45), 'l')
        # Obtaining the member '__getitem__' of a type (line 892)
        getitem___65879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 45), l_65878, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 892)
        subscript_call_result_65880 = invoke(stypy.reporting.localization.Localization(__file__, 892, 45), getitem___65879, slice_65877)
        
        # Applying the binary operator '+' (line 892)
        result_add_65881 = python_operator(stypy.reporting.localization.Localization(__file__, 892, 16), '+', subscript_call_result_65875, subscript_call_result_65880)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'x_ndim' (line 892)
        x_ndim_65882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 60), 'x_ndim')
        # Getting the type of 'self' (line 892)
        self_65883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 67), 'self')
        # Obtaining the member 'axis' of a type (line 892)
        axis_65884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 67), self_65883, 'axis')
        # Applying the binary operator '+' (line 892)
        result_add_65885 = python_operator(stypy.reporting.localization.Localization(__file__, 892, 60), '+', x_ndim_65882, axis_65884)
        
        slice_65886 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 892, 58), result_add_65885, None, None)
        # Getting the type of 'l' (line 892)
        l_65887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 58), 'l')
        # Obtaining the member '__getitem__' of a type (line 892)
        getitem___65888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 58), l_65887, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 892)
        subscript_call_result_65889 = invoke(stypy.reporting.localization.Localization(__file__, 892, 58), getitem___65888, slice_65886)
        
        # Applying the binary operator '+' (line 892)
        result_add_65890 = python_operator(stypy.reporting.localization.Localization(__file__, 892, 56), '+', result_add_65881, subscript_call_result_65889)
        
        # Assigning a type to the variable 'l' (line 892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 12), 'l', result_add_65890)
        
        # Assigning a Call to a Name (line 893):
        
        # Assigning a Call to a Name (line 893):
        
        # Call to transpose(...): (line 893)
        # Processing the call arguments (line 893)
        # Getting the type of 'l' (line 893)
        l_65893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 32), 'l', False)
        # Processing the call keyword arguments (line 893)
        kwargs_65894 = {}
        # Getting the type of 'out' (line 893)
        out_65891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 18), 'out', False)
        # Obtaining the member 'transpose' of a type (line 893)
        transpose_65892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 18), out_65891, 'transpose')
        # Calling transpose(args, kwargs) (line 893)
        transpose_call_result_65895 = invoke(stypy.reporting.localization.Localization(__file__, 893, 18), transpose_65892, *[l_65893], **kwargs_65894)
        
        # Assigning a type to the variable 'out' (line 893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 12), 'out', transpose_call_result_65895)
        # SSA join for if statement (line 889)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 894)
        out_65896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'stypy_return_type', out_65896)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 843)
        stypy_return_type_65897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65897)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_65897


# Assigning a type to the variable '_PPolyBase' (line 674)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 0), '_PPolyBase', _PPolyBase)

# Assigning a Tuple to a Name (line 676):

# Obtaining an instance of the builtin type 'tuple' (line 676)
tuple_65898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 17), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 676)
# Adding element type (line 676)
str_65899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 17), 'str', 'c')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 676, 17), tuple_65898, str_65899)
# Adding element type (line 676)
str_65900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 22), 'str', 'x')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 676, 17), tuple_65898, str_65900)
# Adding element type (line 676)
str_65901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 27), 'str', 'extrapolate')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 676, 17), tuple_65898, str_65901)
# Adding element type (line 676)
str_65902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 42), 'str', 'axis')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 676, 17), tuple_65898, str_65902)

# Getting the type of '_PPolyBase'
_PPolyBase_65903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_PPolyBase')
# Setting the type of the member '__slots__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _PPolyBase_65903, '__slots__', tuple_65898)
# Declaration of the 'PPoly' class
# Getting the type of '_PPolyBase' (line 897)
_PPolyBase_65904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 12), '_PPolyBase')

class PPoly(_PPolyBase_65904, ):
    str_65905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 955, (-1)), 'str', "\n    Piecewise polynomial in terms of coefficients and breakpoints\n\n    The polynomial between ``x[i]`` and ``x[i + 1]`` is written in the\n    local power basis::\n\n        S = sum(c[m, i] * (xp - x[i])**(k-m) for m in range(k+1))\n\n    where ``k`` is the degree of the polynomial.\n\n    Parameters\n    ----------\n    c : ndarray, shape (k, m, ...)\n        Polynomial coefficients, order `k` and `m` intervals\n    x : ndarray, shape (m+1,)\n        Polynomial breakpoints. Must be sorted in either increasing or\n        decreasing order.\n    extrapolate : bool or 'periodic', optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs. If 'periodic',\n        periodic extrapolation is used. Default is True.\n    axis : int, optional\n        Interpolation axis. Default is zero.\n\n    Attributes\n    ----------\n    x : ndarray\n        Breakpoints.\n    c : ndarray\n        Coefficients of the polynomials. They are reshaped\n        to a 3-dimensional array with the last dimension representing\n        the trailing dimensions of the original coefficient array.\n    axis : int\n        Interpolation axis.\n\n    Methods\n    -------\n    __call__\n    derivative\n    antiderivative\n    integrate\n    solve\n    roots\n    extend\n    from_spline\n    from_bernstein_basis\n    construct_fast\n\n    See also\n    --------\n    BPoly : piecewise polynomials in the Bernstein basis\n\n    Notes\n    -----\n    High-order polynomials in the power basis can be numerically\n    unstable.  Precision problems can start to appear for orders\n    larger than 20-30.\n    ")

    @norecursion
    def _evaluate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_evaluate'
        module_type_store = module_type_store.open_function_context('_evaluate', 956, 4, False)
        # Assigning a type to the variable 'self' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PPoly._evaluate.__dict__.__setitem__('stypy_localization', localization)
        PPoly._evaluate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PPoly._evaluate.__dict__.__setitem__('stypy_type_store', module_type_store)
        PPoly._evaluate.__dict__.__setitem__('stypy_function_name', 'PPoly._evaluate')
        PPoly._evaluate.__dict__.__setitem__('stypy_param_names_list', ['x', 'nu', 'extrapolate', 'out'])
        PPoly._evaluate.__dict__.__setitem__('stypy_varargs_param_name', None)
        PPoly._evaluate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PPoly._evaluate.__dict__.__setitem__('stypy_call_defaults', defaults)
        PPoly._evaluate.__dict__.__setitem__('stypy_call_varargs', varargs)
        PPoly._evaluate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PPoly._evaluate.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PPoly._evaluate', ['x', 'nu', 'extrapolate', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_evaluate', localization, ['x', 'nu', 'extrapolate', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_evaluate(...)' code ##################

        
        # Call to evaluate(...): (line 957)
        # Processing the call arguments (line 957)
        
        # Call to reshape(...): (line 957)
        # Processing the call arguments (line 957)
        
        # Obtaining the type of the subscript
        int_65911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 52), 'int')
        # Getting the type of 'self' (line 957)
        self_65912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 39), 'self', False)
        # Obtaining the member 'c' of a type (line 957)
        c_65913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 39), self_65912, 'c')
        # Obtaining the member 'shape' of a type (line 957)
        shape_65914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 39), c_65913, 'shape')
        # Obtaining the member '__getitem__' of a type (line 957)
        getitem___65915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 39), shape_65914, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 957)
        subscript_call_result_65916 = invoke(stypy.reporting.localization.Localization(__file__, 957, 39), getitem___65915, int_65911)
        
        
        # Obtaining the type of the subscript
        int_65917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 69), 'int')
        # Getting the type of 'self' (line 957)
        self_65918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 56), 'self', False)
        # Obtaining the member 'c' of a type (line 957)
        c_65919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 56), self_65918, 'c')
        # Obtaining the member 'shape' of a type (line 957)
        shape_65920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 56), c_65919, 'shape')
        # Obtaining the member '__getitem__' of a type (line 957)
        getitem___65921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 56), shape_65920, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 957)
        subscript_call_result_65922 = invoke(stypy.reporting.localization.Localization(__file__, 957, 56), getitem___65921, int_65917)
        
        int_65923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 73), 'int')
        # Processing the call keyword arguments (line 957)
        kwargs_65924 = {}
        # Getting the type of 'self' (line 957)
        self_65908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 24), 'self', False)
        # Obtaining the member 'c' of a type (line 957)
        c_65909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 24), self_65908, 'c')
        # Obtaining the member 'reshape' of a type (line 957)
        reshape_65910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 24), c_65909, 'reshape')
        # Calling reshape(args, kwargs) (line 957)
        reshape_call_result_65925 = invoke(stypy.reporting.localization.Localization(__file__, 957, 24), reshape_65910, *[subscript_call_result_65916, subscript_call_result_65922, int_65923], **kwargs_65924)
        
        # Getting the type of 'self' (line 958)
        self_65926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 24), 'self', False)
        # Obtaining the member 'x' of a type (line 958)
        x_65927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 24), self_65926, 'x')
        # Getting the type of 'x' (line 958)
        x_65928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 32), 'x', False)
        # Getting the type of 'nu' (line 958)
        nu_65929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 35), 'nu', False)
        
        # Call to bool(...): (line 958)
        # Processing the call arguments (line 958)
        # Getting the type of 'extrapolate' (line 958)
        extrapolate_65931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 44), 'extrapolate', False)
        # Processing the call keyword arguments (line 958)
        kwargs_65932 = {}
        # Getting the type of 'bool' (line 958)
        bool_65930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 39), 'bool', False)
        # Calling bool(args, kwargs) (line 958)
        bool_call_result_65933 = invoke(stypy.reporting.localization.Localization(__file__, 958, 39), bool_65930, *[extrapolate_65931], **kwargs_65932)
        
        # Getting the type of 'out' (line 958)
        out_65934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 58), 'out', False)
        # Processing the call keyword arguments (line 957)
        kwargs_65935 = {}
        # Getting the type of '_ppoly' (line 957)
        _ppoly_65906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), '_ppoly', False)
        # Obtaining the member 'evaluate' of a type (line 957)
        evaluate_65907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 8), _ppoly_65906, 'evaluate')
        # Calling evaluate(args, kwargs) (line 957)
        evaluate_call_result_65936 = invoke(stypy.reporting.localization.Localization(__file__, 957, 8), evaluate_65907, *[reshape_call_result_65925, x_65927, x_65928, nu_65929, bool_call_result_65933, out_65934], **kwargs_65935)
        
        
        # ################# End of '_evaluate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_evaluate' in the type store
        # Getting the type of 'stypy_return_type' (line 956)
        stypy_return_type_65937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65937)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_evaluate'
        return stypy_return_type_65937


    @norecursion
    def derivative(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_65938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 28), 'int')
        defaults = [int_65938]
        # Create a new context for function 'derivative'
        module_type_store = module_type_store.open_function_context('derivative', 960, 4, False)
        # Assigning a type to the variable 'self' (line 961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PPoly.derivative.__dict__.__setitem__('stypy_localization', localization)
        PPoly.derivative.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PPoly.derivative.__dict__.__setitem__('stypy_type_store', module_type_store)
        PPoly.derivative.__dict__.__setitem__('stypy_function_name', 'PPoly.derivative')
        PPoly.derivative.__dict__.__setitem__('stypy_param_names_list', ['nu'])
        PPoly.derivative.__dict__.__setitem__('stypy_varargs_param_name', None)
        PPoly.derivative.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PPoly.derivative.__dict__.__setitem__('stypy_call_defaults', defaults)
        PPoly.derivative.__dict__.__setitem__('stypy_call_varargs', varargs)
        PPoly.derivative.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PPoly.derivative.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PPoly.derivative', ['nu'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'derivative', localization, ['nu'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'derivative(...)' code ##################

        str_65939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 983, (-1)), 'str', '\n        Construct a new piecewise polynomial representing the derivative.\n\n        Parameters\n        ----------\n        nu : int, optional\n            Order of derivative to evaluate. Default is 1, i.e. compute the\n            first derivative. If negative, the antiderivative is returned.\n\n        Returns\n        -------\n        pp : PPoly\n            Piecewise polynomial of order k2 = k - n representing the derivative\n            of this polynomial.\n\n        Notes\n        -----\n        Derivatives are evaluated piecewise for each polynomial\n        segment, even if the polynomial is not differentiable at the\n        breakpoints. The polynomial intervals are considered half-open,\n        ``[a, b)``, except for the last interval which is closed\n        ``[a, b]``.\n        ')
        
        
        # Getting the type of 'nu' (line 984)
        nu_65940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 11), 'nu')
        int_65941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 16), 'int')
        # Applying the binary operator '<' (line 984)
        result_lt_65942 = python_operator(stypy.reporting.localization.Localization(__file__, 984, 11), '<', nu_65940, int_65941)
        
        # Testing the type of an if condition (line 984)
        if_condition_65943 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 984, 8), result_lt_65942)
        # Assigning a type to the variable 'if_condition_65943' (line 984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 8), 'if_condition_65943', if_condition_65943)
        # SSA begins for if statement (line 984)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to antiderivative(...): (line 985)
        # Processing the call arguments (line 985)
        
        # Getting the type of 'nu' (line 985)
        nu_65946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 40), 'nu', False)
        # Applying the 'usub' unary operator (line 985)
        result___neg___65947 = python_operator(stypy.reporting.localization.Localization(__file__, 985, 39), 'usub', nu_65946)
        
        # Processing the call keyword arguments (line 985)
        kwargs_65948 = {}
        # Getting the type of 'self' (line 985)
        self_65944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 19), 'self', False)
        # Obtaining the member 'antiderivative' of a type (line 985)
        antiderivative_65945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 19), self_65944, 'antiderivative')
        # Calling antiderivative(args, kwargs) (line 985)
        antiderivative_call_result_65949 = invoke(stypy.reporting.localization.Localization(__file__, 985, 19), antiderivative_65945, *[result___neg___65947], **kwargs_65948)
        
        # Assigning a type to the variable 'stypy_return_type' (line 985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 985, 12), 'stypy_return_type', antiderivative_call_result_65949)
        # SSA join for if statement (line 984)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'nu' (line 988)
        nu_65950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 11), 'nu')
        int_65951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 17), 'int')
        # Applying the binary operator '==' (line 988)
        result_eq_65952 = python_operator(stypy.reporting.localization.Localization(__file__, 988, 11), '==', nu_65950, int_65951)
        
        # Testing the type of an if condition (line 988)
        if_condition_65953 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 988, 8), result_eq_65952)
        # Assigning a type to the variable 'if_condition_65953' (line 988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 8), 'if_condition_65953', if_condition_65953)
        # SSA begins for if statement (line 988)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 989):
        
        # Assigning a Call to a Name (line 989):
        
        # Call to copy(...): (line 989)
        # Processing the call keyword arguments (line 989)
        kwargs_65957 = {}
        # Getting the type of 'self' (line 989)
        self_65954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 17), 'self', False)
        # Obtaining the member 'c' of a type (line 989)
        c_65955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 17), self_65954, 'c')
        # Obtaining the member 'copy' of a type (line 989)
        copy_65956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 989, 17), c_65955, 'copy')
        # Calling copy(args, kwargs) (line 989)
        copy_call_result_65958 = invoke(stypy.reporting.localization.Localization(__file__, 989, 17), copy_65956, *[], **kwargs_65957)
        
        # Assigning a type to the variable 'c2' (line 989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 12), 'c2', copy_call_result_65958)
        # SSA branch for the else part of an if statement (line 988)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 991):
        
        # Assigning a Call to a Name (line 991):
        
        # Call to copy(...): (line 991)
        # Processing the call keyword arguments (line 991)
        kwargs_65968 = {}
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'nu' (line 991)
        nu_65959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 26), 'nu', False)
        # Applying the 'usub' unary operator (line 991)
        result___neg___65960 = python_operator(stypy.reporting.localization.Localization(__file__, 991, 25), 'usub', nu_65959)
        
        slice_65961 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 991, 17), None, result___neg___65960, None)
        slice_65962 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 991, 17), None, None, None)
        # Getting the type of 'self' (line 991)
        self_65963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 17), 'self', False)
        # Obtaining the member 'c' of a type (line 991)
        c_65964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 17), self_65963, 'c')
        # Obtaining the member '__getitem__' of a type (line 991)
        getitem___65965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 17), c_65964, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 991)
        subscript_call_result_65966 = invoke(stypy.reporting.localization.Localization(__file__, 991, 17), getitem___65965, (slice_65961, slice_65962))
        
        # Obtaining the member 'copy' of a type (line 991)
        copy_65967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 17), subscript_call_result_65966, 'copy')
        # Calling copy(args, kwargs) (line 991)
        copy_call_result_65969 = invoke(stypy.reporting.localization.Localization(__file__, 991, 17), copy_65967, *[], **kwargs_65968)
        
        # Assigning a type to the variable 'c2' (line 991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 12), 'c2', copy_call_result_65969)
        # SSA join for if statement (line 988)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_65970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 20), 'int')
        # Getting the type of 'c2' (line 993)
        c2_65971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 11), 'c2')
        # Obtaining the member 'shape' of a type (line 993)
        shape_65972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 11), c2_65971, 'shape')
        # Obtaining the member '__getitem__' of a type (line 993)
        getitem___65973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 11), shape_65972, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 993)
        subscript_call_result_65974 = invoke(stypy.reporting.localization.Localization(__file__, 993, 11), getitem___65973, int_65970)
        
        int_65975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 26), 'int')
        # Applying the binary operator '==' (line 993)
        result_eq_65976 = python_operator(stypy.reporting.localization.Localization(__file__, 993, 11), '==', subscript_call_result_65974, int_65975)
        
        # Testing the type of an if condition (line 993)
        if_condition_65977 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 993, 8), result_eq_65976)
        # Assigning a type to the variable 'if_condition_65977' (line 993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), 'if_condition_65977', if_condition_65977)
        # SSA begins for if statement (line 993)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 995):
        
        # Assigning a Call to a Name (line 995):
        
        # Call to zeros(...): (line 995)
        # Processing the call arguments (line 995)
        
        # Obtaining an instance of the builtin type 'tuple' (line 995)
        tuple_65980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 995)
        # Adding element type (line 995)
        int_65981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 995, 27), tuple_65980, int_65981)
        
        
        # Obtaining the type of the subscript
        int_65982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 42), 'int')
        slice_65983 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 995, 33), int_65982, None, None)
        # Getting the type of 'c2' (line 995)
        c2_65984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 33), 'c2', False)
        # Obtaining the member 'shape' of a type (line 995)
        shape_65985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 33), c2_65984, 'shape')
        # Obtaining the member '__getitem__' of a type (line 995)
        getitem___65986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 33), shape_65985, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 995)
        subscript_call_result_65987 = invoke(stypy.reporting.localization.Localization(__file__, 995, 33), getitem___65986, slice_65983)
        
        # Applying the binary operator '+' (line 995)
        result_add_65988 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 26), '+', tuple_65980, subscript_call_result_65987)
        
        # Processing the call keyword arguments (line 995)
        # Getting the type of 'c2' (line 995)
        c2_65989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 53), 'c2', False)
        # Obtaining the member 'dtype' of a type (line 995)
        dtype_65990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 53), c2_65989, 'dtype')
        keyword_65991 = dtype_65990
        kwargs_65992 = {'dtype': keyword_65991}
        # Getting the type of 'np' (line 995)
        np_65978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 17), 'np', False)
        # Obtaining the member 'zeros' of a type (line 995)
        zeros_65979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 17), np_65978, 'zeros')
        # Calling zeros(args, kwargs) (line 995)
        zeros_call_result_65993 = invoke(stypy.reporting.localization.Localization(__file__, 995, 17), zeros_65979, *[result_add_65988], **kwargs_65992)
        
        # Assigning a type to the variable 'c2' (line 995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 12), 'c2', zeros_call_result_65993)
        # SSA join for if statement (line 993)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 998):
        
        # Assigning a Call to a Name (line 998):
        
        # Call to poch(...): (line 998)
        # Processing the call arguments (line 998)
        
        # Call to arange(...): (line 998)
        # Processing the call arguments (line 998)
        
        # Obtaining the type of the subscript
        int_65998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 46), 'int')
        # Getting the type of 'c2' (line 998)
        c2_65999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 37), 'c2', False)
        # Obtaining the member 'shape' of a type (line 998)
        shape_66000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 37), c2_65999, 'shape')
        # Obtaining the member '__getitem__' of a type (line 998)
        getitem___66001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 37), shape_66000, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 998)
        subscript_call_result_66002 = invoke(stypy.reporting.localization.Localization(__file__, 998, 37), getitem___66001, int_65998)
        
        int_66003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 50), 'int')
        int_66004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 53), 'int')
        # Processing the call keyword arguments (line 998)
        kwargs_66005 = {}
        # Getting the type of 'np' (line 998)
        np_65996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 27), 'np', False)
        # Obtaining the member 'arange' of a type (line 998)
        arange_65997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 27), np_65996, 'arange')
        # Calling arange(args, kwargs) (line 998)
        arange_call_result_66006 = invoke(stypy.reporting.localization.Localization(__file__, 998, 27), arange_65997, *[subscript_call_result_66002, int_66003, int_66004], **kwargs_66005)
        
        # Getting the type of 'nu' (line 998)
        nu_66007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 58), 'nu', False)
        # Processing the call keyword arguments (line 998)
        kwargs_66008 = {}
        # Getting the type of 'spec' (line 998)
        spec_65994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 17), 'spec', False)
        # Obtaining the member 'poch' of a type (line 998)
        poch_65995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 17), spec_65994, 'poch')
        # Calling poch(args, kwargs) (line 998)
        poch_call_result_66009 = invoke(stypy.reporting.localization.Localization(__file__, 998, 17), poch_65995, *[arange_call_result_66006, nu_66007], **kwargs_66008)
        
        # Assigning a type to the variable 'factor' (line 998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 8), 'factor', poch_call_result_66009)
        
        # Getting the type of 'c2' (line 999)
        c2_66010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 8), 'c2')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 999)
        tuple_66011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 999, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 999)
        # Adding element type (line 999)
        
        # Call to slice(...): (line 999)
        # Processing the call arguments (line 999)
        # Getting the type of 'None' (line 999)
        None_66013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 28), 'None', False)
        # Processing the call keyword arguments (line 999)
        kwargs_66014 = {}
        # Getting the type of 'slice' (line 999)
        slice_66012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 22), 'slice', False)
        # Calling slice(args, kwargs) (line 999)
        slice_call_result_66015 = invoke(stypy.reporting.localization.Localization(__file__, 999, 22), slice_66012, *[None_66013], **kwargs_66014)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 999, 22), tuple_66011, slice_call_result_66015)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 999)
        tuple_66016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 999, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 999)
        # Adding element type (line 999)
        # Getting the type of 'None' (line 999)
        None_66017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 39), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 999, 39), tuple_66016, None_66017)
        
        # Getting the type of 'c2' (line 999)
        c2_66018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 47), 'c2')
        # Obtaining the member 'ndim' of a type (line 999)
        ndim_66019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 47), c2_66018, 'ndim')
        int_66020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 999, 55), 'int')
        # Applying the binary operator '-' (line 999)
        result_sub_66021 = python_operator(stypy.reporting.localization.Localization(__file__, 999, 47), '-', ndim_66019, int_66020)
        
        # Applying the binary operator '*' (line 999)
        result_mul_66022 = python_operator(stypy.reporting.localization.Localization(__file__, 999, 38), '*', tuple_66016, result_sub_66021)
        
        # Applying the binary operator '+' (line 999)
        result_add_66023 = python_operator(stypy.reporting.localization.Localization(__file__, 999, 21), '+', tuple_66011, result_mul_66022)
        
        # Getting the type of 'factor' (line 999)
        factor_66024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 14), 'factor')
        # Obtaining the member '__getitem__' of a type (line 999)
        getitem___66025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 14), factor_66024, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 999)
        subscript_call_result_66026 = invoke(stypy.reporting.localization.Localization(__file__, 999, 14), getitem___66025, result_add_66023)
        
        # Applying the binary operator '*=' (line 999)
        result_imul_66027 = python_operator(stypy.reporting.localization.Localization(__file__, 999, 8), '*=', c2_66010, subscript_call_result_66026)
        # Assigning a type to the variable 'c2' (line 999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 8), 'c2', result_imul_66027)
        
        
        # Call to construct_fast(...): (line 1002)
        # Processing the call arguments (line 1002)
        # Getting the type of 'c2' (line 1002)
        c2_66030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 35), 'c2', False)
        # Getting the type of 'self' (line 1002)
        self_66031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 39), 'self', False)
        # Obtaining the member 'x' of a type (line 1002)
        x_66032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 39), self_66031, 'x')
        # Getting the type of 'self' (line 1002)
        self_66033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 47), 'self', False)
        # Obtaining the member 'extrapolate' of a type (line 1002)
        extrapolate_66034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 47), self_66033, 'extrapolate')
        # Getting the type of 'self' (line 1002)
        self_66035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 65), 'self', False)
        # Obtaining the member 'axis' of a type (line 1002)
        axis_66036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 65), self_66035, 'axis')
        # Processing the call keyword arguments (line 1002)
        kwargs_66037 = {}
        # Getting the type of 'self' (line 1002)
        self_66028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 15), 'self', False)
        # Obtaining the member 'construct_fast' of a type (line 1002)
        construct_fast_66029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 15), self_66028, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 1002)
        construct_fast_call_result_66038 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 15), construct_fast_66029, *[c2_66030, x_66032, extrapolate_66034, axis_66036], **kwargs_66037)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 8), 'stypy_return_type', construct_fast_call_result_66038)
        
        # ################# End of 'derivative(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'derivative' in the type store
        # Getting the type of 'stypy_return_type' (line 960)
        stypy_return_type_66039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66039)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'derivative'
        return stypy_return_type_66039


    @norecursion
    def antiderivative(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_66040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1004, 32), 'int')
        defaults = [int_66040]
        # Create a new context for function 'antiderivative'
        module_type_store = module_type_store.open_function_context('antiderivative', 1004, 4, False)
        # Assigning a type to the variable 'self' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PPoly.antiderivative.__dict__.__setitem__('stypy_localization', localization)
        PPoly.antiderivative.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PPoly.antiderivative.__dict__.__setitem__('stypy_type_store', module_type_store)
        PPoly.antiderivative.__dict__.__setitem__('stypy_function_name', 'PPoly.antiderivative')
        PPoly.antiderivative.__dict__.__setitem__('stypy_param_names_list', ['nu'])
        PPoly.antiderivative.__dict__.__setitem__('stypy_varargs_param_name', None)
        PPoly.antiderivative.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PPoly.antiderivative.__dict__.__setitem__('stypy_call_defaults', defaults)
        PPoly.antiderivative.__dict__.__setitem__('stypy_call_varargs', varargs)
        PPoly.antiderivative.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PPoly.antiderivative.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PPoly.antiderivative', ['nu'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'antiderivative', localization, ['nu'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'antiderivative(...)' code ##################

        str_66041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1033, (-1)), 'str', "\n        Construct a new piecewise polynomial representing the antiderivative.\n\n        Antiderivative is also the indefinite integral of the function,\n        and derivative is its inverse operation.\n\n        Parameters\n        ----------\n        nu : int, optional\n            Order of antiderivative to evaluate. Default is 1, i.e. compute\n            the first integral. If negative, the derivative is returned.\n\n        Returns\n        -------\n        pp : PPoly\n            Piecewise polynomial of order k2 = k + n representing\n            the antiderivative of this polynomial.\n\n        Notes\n        -----\n        The antiderivative returned by this function is continuous and\n        continuously differentiable to order n-1, up to floating point\n        rounding error.\n\n        If antiderivative is computed and ``self.extrapolate='periodic'``,\n        it will be set to False for the returned instance. This is done because\n        the antiderivative is no longer periodic and its correct evaluation\n        outside of the initially given x interval is difficult.\n        ")
        
        
        # Getting the type of 'nu' (line 1034)
        nu_66042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 11), 'nu')
        int_66043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, 17), 'int')
        # Applying the binary operator '<=' (line 1034)
        result_le_66044 = python_operator(stypy.reporting.localization.Localization(__file__, 1034, 11), '<=', nu_66042, int_66043)
        
        # Testing the type of an if condition (line 1034)
        if_condition_66045 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1034, 8), result_le_66044)
        # Assigning a type to the variable 'if_condition_66045' (line 1034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'if_condition_66045', if_condition_66045)
        # SSA begins for if statement (line 1034)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to derivative(...): (line 1035)
        # Processing the call arguments (line 1035)
        
        # Getting the type of 'nu' (line 1035)
        nu_66048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 36), 'nu', False)
        # Applying the 'usub' unary operator (line 1035)
        result___neg___66049 = python_operator(stypy.reporting.localization.Localization(__file__, 1035, 35), 'usub', nu_66048)
        
        # Processing the call keyword arguments (line 1035)
        kwargs_66050 = {}
        # Getting the type of 'self' (line 1035)
        self_66046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 19), 'self', False)
        # Obtaining the member 'derivative' of a type (line 1035)
        derivative_66047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1035, 19), self_66046, 'derivative')
        # Calling derivative(args, kwargs) (line 1035)
        derivative_call_result_66051 = invoke(stypy.reporting.localization.Localization(__file__, 1035, 19), derivative_66047, *[result___neg___66049], **kwargs_66050)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1035)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 12), 'stypy_return_type', derivative_call_result_66051)
        # SSA join for if statement (line 1034)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1037):
        
        # Assigning a Call to a Name (line 1037):
        
        # Call to zeros(...): (line 1037)
        # Processing the call arguments (line 1037)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1037)
        tuple_66054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1037)
        # Adding element type (line 1037)
        
        # Obtaining the type of the subscript
        int_66055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 35), 'int')
        # Getting the type of 'self' (line 1037)
        self_66056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 22), 'self', False)
        # Obtaining the member 'c' of a type (line 1037)
        c_66057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 22), self_66056, 'c')
        # Obtaining the member 'shape' of a type (line 1037)
        shape_66058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 22), c_66057, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1037)
        getitem___66059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 22), shape_66058, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1037)
        subscript_call_result_66060 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 22), getitem___66059, int_66055)
        
        # Getting the type of 'nu' (line 1037)
        nu_66061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 40), 'nu', False)
        # Applying the binary operator '+' (line 1037)
        result_add_66062 = python_operator(stypy.reporting.localization.Localization(__file__, 1037, 22), '+', subscript_call_result_66060, nu_66061)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1037, 22), tuple_66054, result_add_66062)
        # Adding element type (line 1037)
        
        # Obtaining the type of the subscript
        int_66063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 57), 'int')
        # Getting the type of 'self' (line 1037)
        self_66064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 44), 'self', False)
        # Obtaining the member 'c' of a type (line 1037)
        c_66065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 44), self_66064, 'c')
        # Obtaining the member 'shape' of a type (line 1037)
        shape_66066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 44), c_66065, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1037)
        getitem___66067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 44), shape_66066, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1037)
        subscript_call_result_66068 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 44), getitem___66067, int_66063)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1037, 22), tuple_66054, subscript_call_result_66068)
        
        
        # Obtaining the type of the subscript
        int_66069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 76), 'int')
        slice_66070 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1037, 63), int_66069, None, None)
        # Getting the type of 'self' (line 1037)
        self_66071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 63), 'self', False)
        # Obtaining the member 'c' of a type (line 1037)
        c_66072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 63), self_66071, 'c')
        # Obtaining the member 'shape' of a type (line 1037)
        shape_66073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 63), c_66072, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1037)
        getitem___66074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 63), shape_66073, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1037)
        subscript_call_result_66075 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 63), getitem___66074, slice_66070)
        
        # Applying the binary operator '+' (line 1037)
        result_add_66076 = python_operator(stypy.reporting.localization.Localization(__file__, 1037, 21), '+', tuple_66054, subscript_call_result_66075)
        
        # Processing the call keyword arguments (line 1037)
        # Getting the type of 'self' (line 1038)
        self_66077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 27), 'self', False)
        # Obtaining the member 'c' of a type (line 1038)
        c_66078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 27), self_66077, 'c')
        # Obtaining the member 'dtype' of a type (line 1038)
        dtype_66079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 27), c_66078, 'dtype')
        keyword_66080 = dtype_66079
        kwargs_66081 = {'dtype': keyword_66080}
        # Getting the type of 'np' (line 1037)
        np_66052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 12), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1037)
        zeros_66053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 12), np_66052, 'zeros')
        # Calling zeros(args, kwargs) (line 1037)
        zeros_call_result_66082 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 12), zeros_66053, *[result_add_66076], **kwargs_66081)
        
        # Assigning a type to the variable 'c' (line 1037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'c', zeros_call_result_66082)
        
        # Assigning a Attribute to a Subscript (line 1039):
        
        # Assigning a Attribute to a Subscript (line 1039):
        # Getting the type of 'self' (line 1039)
        self_66083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 18), 'self')
        # Obtaining the member 'c' of a type (line 1039)
        c_66084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 18), self_66083, 'c')
        # Getting the type of 'c' (line 1039)
        c_66085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'c')
        
        # Getting the type of 'nu' (line 1039)
        nu_66086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 12), 'nu')
        # Applying the 'usub' unary operator (line 1039)
        result___neg___66087 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 11), 'usub', nu_66086)
        
        slice_66088 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1039, 8), None, result___neg___66087, None)
        # Storing an element on a container (line 1039)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 8), c_66085, (slice_66088, c_66084))
        
        # Assigning a Call to a Name (line 1042):
        
        # Assigning a Call to a Name (line 1042):
        
        # Call to poch(...): (line 1042)
        # Processing the call arguments (line 1042)
        
        # Call to arange(...): (line 1042)
        # Processing the call arguments (line 1042)
        
        # Obtaining the type of the subscript
        int_66093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 50), 'int')
        # Getting the type of 'self' (line 1042)
        self_66094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 37), 'self', False)
        # Obtaining the member 'c' of a type (line 1042)
        c_66095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 37), self_66094, 'c')
        # Obtaining the member 'shape' of a type (line 1042)
        shape_66096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 37), c_66095, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1042)
        getitem___66097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 37), shape_66096, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1042)
        subscript_call_result_66098 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 37), getitem___66097, int_66093)
        
        int_66099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 54), 'int')
        int_66100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 57), 'int')
        # Processing the call keyword arguments (line 1042)
        kwargs_66101 = {}
        # Getting the type of 'np' (line 1042)
        np_66091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 27), 'np', False)
        # Obtaining the member 'arange' of a type (line 1042)
        arange_66092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 27), np_66091, 'arange')
        # Calling arange(args, kwargs) (line 1042)
        arange_call_result_66102 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 27), arange_66092, *[subscript_call_result_66098, int_66099, int_66100], **kwargs_66101)
        
        # Getting the type of 'nu' (line 1042)
        nu_66103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 62), 'nu', False)
        # Processing the call keyword arguments (line 1042)
        kwargs_66104 = {}
        # Getting the type of 'spec' (line 1042)
        spec_66089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 17), 'spec', False)
        # Obtaining the member 'poch' of a type (line 1042)
        poch_66090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 17), spec_66089, 'poch')
        # Calling poch(args, kwargs) (line 1042)
        poch_call_result_66105 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 17), poch_66090, *[arange_call_result_66102, nu_66103], **kwargs_66104)
        
        # Assigning a type to the variable 'factor' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 8), 'factor', poch_call_result_66105)
        
        # Getting the type of 'c' (line 1043)
        c_66106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'c')
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'nu' (line 1043)
        nu_66107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 12), 'nu')
        # Applying the 'usub' unary operator (line 1043)
        result___neg___66108 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 11), 'usub', nu_66107)
        
        slice_66109 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1043, 8), None, result___neg___66108, None)
        # Getting the type of 'c' (line 1043)
        c_66110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'c')
        # Obtaining the member '__getitem__' of a type (line 1043)
        getitem___66111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 8), c_66110, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1043)
        subscript_call_result_66112 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 8), getitem___66111, slice_66109)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1043)
        tuple_66113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1043)
        # Adding element type (line 1043)
        
        # Call to slice(...): (line 1043)
        # Processing the call arguments (line 1043)
        # Getting the type of 'None' (line 1043)
        None_66115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 33), 'None', False)
        # Processing the call keyword arguments (line 1043)
        kwargs_66116 = {}
        # Getting the type of 'slice' (line 1043)
        slice_66114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 27), 'slice', False)
        # Calling slice(args, kwargs) (line 1043)
        slice_call_result_66117 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 27), slice_66114, *[None_66115], **kwargs_66116)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 27), tuple_66113, slice_call_result_66117)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1043)
        tuple_66118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1043)
        # Adding element type (line 1043)
        # Getting the type of 'None' (line 1043)
        None_66119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 44), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 44), tuple_66118, None_66119)
        
        # Getting the type of 'c' (line 1043)
        c_66120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 52), 'c')
        # Obtaining the member 'ndim' of a type (line 1043)
        ndim_66121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 52), c_66120, 'ndim')
        int_66122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 59), 'int')
        # Applying the binary operator '-' (line 1043)
        result_sub_66123 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 52), '-', ndim_66121, int_66122)
        
        # Applying the binary operator '*' (line 1043)
        result_mul_66124 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 43), '*', tuple_66118, result_sub_66123)
        
        # Applying the binary operator '+' (line 1043)
        result_add_66125 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 26), '+', tuple_66113, result_mul_66124)
        
        # Getting the type of 'factor' (line 1043)
        factor_66126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 19), 'factor')
        # Obtaining the member '__getitem__' of a type (line 1043)
        getitem___66127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 19), factor_66126, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1043)
        subscript_call_result_66128 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 19), getitem___66127, result_add_66125)
        
        # Applying the binary operator 'div=' (line 1043)
        result_div_66129 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 8), 'div=', subscript_call_result_66112, subscript_call_result_66128)
        # Getting the type of 'c' (line 1043)
        c_66130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'c')
        
        # Getting the type of 'nu' (line 1043)
        nu_66131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 12), 'nu')
        # Applying the 'usub' unary operator (line 1043)
        result___neg___66132 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 11), 'usub', nu_66131)
        
        slice_66133 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1043, 8), None, result___neg___66132, None)
        # Storing an element on a container (line 1043)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1043, 8), c_66130, (slice_66133, result_div_66129))
        
        
        # Call to _ensure_c_contiguous(...): (line 1046)
        # Processing the call keyword arguments (line 1046)
        kwargs_66136 = {}
        # Getting the type of 'self' (line 1046)
        self_66134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 8), 'self', False)
        # Obtaining the member '_ensure_c_contiguous' of a type (line 1046)
        _ensure_c_contiguous_66135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 8), self_66134, '_ensure_c_contiguous')
        # Calling _ensure_c_contiguous(args, kwargs) (line 1046)
        _ensure_c_contiguous_call_result_66137 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 8), _ensure_c_contiguous_66135, *[], **kwargs_66136)
        
        
        # Call to fix_continuity(...): (line 1047)
        # Processing the call arguments (line 1047)
        
        # Call to reshape(...): (line 1047)
        # Processing the call arguments (line 1047)
        
        # Obtaining the type of the subscript
        int_66142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 48), 'int')
        # Getting the type of 'c' (line 1047)
        c_66143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 40), 'c', False)
        # Obtaining the member 'shape' of a type (line 1047)
        shape_66144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 40), c_66143, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1047)
        getitem___66145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 40), shape_66144, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1047)
        subscript_call_result_66146 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 40), getitem___66145, int_66142)
        
        
        # Obtaining the type of the subscript
        int_66147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 60), 'int')
        # Getting the type of 'c' (line 1047)
        c_66148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 52), 'c', False)
        # Obtaining the member 'shape' of a type (line 1047)
        shape_66149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 52), c_66148, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1047)
        getitem___66150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 52), shape_66149, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1047)
        subscript_call_result_66151 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 52), getitem___66150, int_66147)
        
        int_66152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 64), 'int')
        # Processing the call keyword arguments (line 1047)
        kwargs_66153 = {}
        # Getting the type of 'c' (line 1047)
        c_66140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 30), 'c', False)
        # Obtaining the member 'reshape' of a type (line 1047)
        reshape_66141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 30), c_66140, 'reshape')
        # Calling reshape(args, kwargs) (line 1047)
        reshape_call_result_66154 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 30), reshape_66141, *[subscript_call_result_66146, subscript_call_result_66151, int_66152], **kwargs_66153)
        
        # Getting the type of 'self' (line 1048)
        self_66155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 30), 'self', False)
        # Obtaining the member 'x' of a type (line 1048)
        x_66156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 30), self_66155, 'x')
        # Getting the type of 'nu' (line 1048)
        nu_66157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 38), 'nu', False)
        int_66158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 43), 'int')
        # Applying the binary operator '-' (line 1048)
        result_sub_66159 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 38), '-', nu_66157, int_66158)
        
        # Processing the call keyword arguments (line 1047)
        kwargs_66160 = {}
        # Getting the type of '_ppoly' (line 1047)
        _ppoly_66138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 8), '_ppoly', False)
        # Obtaining the member 'fix_continuity' of a type (line 1047)
        fix_continuity_66139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 8), _ppoly_66138, 'fix_continuity')
        # Calling fix_continuity(args, kwargs) (line 1047)
        fix_continuity_call_result_66161 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 8), fix_continuity_66139, *[reshape_call_result_66154, x_66156, result_sub_66159], **kwargs_66160)
        
        
        
        # Getting the type of 'self' (line 1050)
        self_66162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 11), 'self')
        # Obtaining the member 'extrapolate' of a type (line 1050)
        extrapolate_66163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 11), self_66162, 'extrapolate')
        str_66164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 31), 'str', 'periodic')
        # Applying the binary operator '==' (line 1050)
        result_eq_66165 = python_operator(stypy.reporting.localization.Localization(__file__, 1050, 11), '==', extrapolate_66163, str_66164)
        
        # Testing the type of an if condition (line 1050)
        if_condition_66166 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1050, 8), result_eq_66165)
        # Assigning a type to the variable 'if_condition_66166' (line 1050)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 8), 'if_condition_66166', if_condition_66166)
        # SSA begins for if statement (line 1050)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1051):
        
        # Assigning a Name to a Name (line 1051):
        # Getting the type of 'False' (line 1051)
        False_66167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 26), 'False')
        # Assigning a type to the variable 'extrapolate' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'extrapolate', False_66167)
        # SSA branch for the else part of an if statement (line 1050)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1053):
        
        # Assigning a Attribute to a Name (line 1053):
        # Getting the type of 'self' (line 1053)
        self_66168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 26), 'self')
        # Obtaining the member 'extrapolate' of a type (line 1053)
        extrapolate_66169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 26), self_66168, 'extrapolate')
        # Assigning a type to the variable 'extrapolate' (line 1053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 12), 'extrapolate', extrapolate_66169)
        # SSA join for if statement (line 1050)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to construct_fast(...): (line 1056)
        # Processing the call arguments (line 1056)
        # Getting the type of 'c' (line 1056)
        c_66172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 35), 'c', False)
        # Getting the type of 'self' (line 1056)
        self_66173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 38), 'self', False)
        # Obtaining the member 'x' of a type (line 1056)
        x_66174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 38), self_66173, 'x')
        # Getting the type of 'extrapolate' (line 1056)
        extrapolate_66175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 46), 'extrapolate', False)
        # Getting the type of 'self' (line 1056)
        self_66176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 59), 'self', False)
        # Obtaining the member 'axis' of a type (line 1056)
        axis_66177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 59), self_66176, 'axis')
        # Processing the call keyword arguments (line 1056)
        kwargs_66178 = {}
        # Getting the type of 'self' (line 1056)
        self_66170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 15), 'self', False)
        # Obtaining the member 'construct_fast' of a type (line 1056)
        construct_fast_66171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 15), self_66170, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 1056)
        construct_fast_call_result_66179 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 15), construct_fast_66171, *[c_66172, x_66174, extrapolate_66175, axis_66177], **kwargs_66178)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1056)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 8), 'stypy_return_type', construct_fast_call_result_66179)
        
        # ################# End of 'antiderivative(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'antiderivative' in the type store
        # Getting the type of 'stypy_return_type' (line 1004)
        stypy_return_type_66180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66180)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'antiderivative'
        return stypy_return_type_66180


    @norecursion
    def integrate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1058)
        None_66181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 42), 'None')
        defaults = [None_66181]
        # Create a new context for function 'integrate'
        module_type_store = module_type_store.open_function_context('integrate', 1058, 4, False)
        # Assigning a type to the variable 'self' (line 1059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PPoly.integrate.__dict__.__setitem__('stypy_localization', localization)
        PPoly.integrate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PPoly.integrate.__dict__.__setitem__('stypy_type_store', module_type_store)
        PPoly.integrate.__dict__.__setitem__('stypy_function_name', 'PPoly.integrate')
        PPoly.integrate.__dict__.__setitem__('stypy_param_names_list', ['a', 'b', 'extrapolate'])
        PPoly.integrate.__dict__.__setitem__('stypy_varargs_param_name', None)
        PPoly.integrate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PPoly.integrate.__dict__.__setitem__('stypy_call_defaults', defaults)
        PPoly.integrate.__dict__.__setitem__('stypy_call_varargs', varargs)
        PPoly.integrate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PPoly.integrate.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PPoly.integrate', ['a', 'b', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'integrate', localization, ['a', 'b', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'integrate(...)' code ##################

        str_66182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, (-1)), 'str', "\n        Compute a definite integral over a piecewise polynomial.\n\n        Parameters\n        ----------\n        a : float\n            Lower integration bound\n        b : float\n            Upper integration bound\n        extrapolate : {bool, 'periodic', None}, optional\n            If bool, determines whether to extrapolate to out-of-bounds points\n            based on first and last intervals, or to return NaNs.\n            If 'periodic', periodic extrapolation is used.\n            If None (default), use `self.extrapolate`.\n\n        Returns\n        -------\n        ig : array_like\n            Definite integral of the piecewise polynomial over [a, b]\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 1079)
        # Getting the type of 'extrapolate' (line 1079)
        extrapolate_66183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 11), 'extrapolate')
        # Getting the type of 'None' (line 1079)
        None_66184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 26), 'None')
        
        (may_be_66185, more_types_in_union_66186) = may_be_none(extrapolate_66183, None_66184)

        if may_be_66185:

            if more_types_in_union_66186:
                # Runtime conditional SSA (line 1079)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1080):
            
            # Assigning a Attribute to a Name (line 1080):
            # Getting the type of 'self' (line 1080)
            self_66187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 26), 'self')
            # Obtaining the member 'extrapolate' of a type (line 1080)
            extrapolate_66188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 26), self_66187, 'extrapolate')
            # Assigning a type to the variable 'extrapolate' (line 1080)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 12), 'extrapolate', extrapolate_66188)

            if more_types_in_union_66186:
                # SSA join for if statement (line 1079)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Num to a Name (line 1083):
        
        # Assigning a Num to a Name (line 1083):
        int_66189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 15), 'int')
        # Assigning a type to the variable 'sign' (line 1083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 8), 'sign', int_66189)
        
        
        # Getting the type of 'b' (line 1084)
        b_66190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 11), 'b')
        # Getting the type of 'a' (line 1084)
        a_66191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 15), 'a')
        # Applying the binary operator '<' (line 1084)
        result_lt_66192 = python_operator(stypy.reporting.localization.Localization(__file__, 1084, 11), '<', b_66190, a_66191)
        
        # Testing the type of an if condition (line 1084)
        if_condition_66193 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1084, 8), result_lt_66192)
        # Assigning a type to the variable 'if_condition_66193' (line 1084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1084, 8), 'if_condition_66193', if_condition_66193)
        # SSA begins for if statement (line 1084)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1085):
        
        # Assigning a Name to a Name (line 1085):
        # Getting the type of 'b' (line 1085)
        b_66194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 19), 'b')
        # Assigning a type to the variable 'tuple_assignment_63611' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 12), 'tuple_assignment_63611', b_66194)
        
        # Assigning a Name to a Name (line 1085):
        # Getting the type of 'a' (line 1085)
        a_66195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 22), 'a')
        # Assigning a type to the variable 'tuple_assignment_63612' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 12), 'tuple_assignment_63612', a_66195)
        
        # Assigning a Name to a Name (line 1085):
        # Getting the type of 'tuple_assignment_63611' (line 1085)
        tuple_assignment_63611_66196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 12), 'tuple_assignment_63611')
        # Assigning a type to the variable 'a' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 12), 'a', tuple_assignment_63611_66196)
        
        # Assigning a Name to a Name (line 1085):
        # Getting the type of 'tuple_assignment_63612' (line 1085)
        tuple_assignment_63612_66197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 12), 'tuple_assignment_63612')
        # Assigning a type to the variable 'b' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 15), 'b', tuple_assignment_63612_66197)
        
        # Assigning a Num to a Name (line 1086):
        
        # Assigning a Num to a Name (line 1086):
        int_66198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, 19), 'int')
        # Assigning a type to the variable 'sign' (line 1086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 12), 'sign', int_66198)
        # SSA join for if statement (line 1084)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1088):
        
        # Assigning a Call to a Name (line 1088):
        
        # Call to empty(...): (line 1088)
        # Processing the call arguments (line 1088)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1088)
        tuple_66201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1088)
        # Adding element type (line 1088)
        
        # Call to prod(...): (line 1088)
        # Processing the call arguments (line 1088)
        
        # Obtaining the type of the subscript
        int_66203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1088, 48), 'int')
        slice_66204 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1088, 35), int_66203, None, None)
        # Getting the type of 'self' (line 1088)
        self_66205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 35), 'self', False)
        # Obtaining the member 'c' of a type (line 1088)
        c_66206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 35), self_66205, 'c')
        # Obtaining the member 'shape' of a type (line 1088)
        shape_66207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 35), c_66206, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1088)
        getitem___66208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 35), shape_66207, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1088)
        subscript_call_result_66209 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 35), getitem___66208, slice_66204)
        
        # Processing the call keyword arguments (line 1088)
        kwargs_66210 = {}
        # Getting the type of 'prod' (line 1088)
        prod_66202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 30), 'prod', False)
        # Calling prod(args, kwargs) (line 1088)
        prod_call_result_66211 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 30), prod_66202, *[subscript_call_result_66209], **kwargs_66210)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1088, 30), tuple_66201, prod_call_result_66211)
        
        # Processing the call keyword arguments (line 1088)
        # Getting the type of 'self' (line 1088)
        self_66212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 62), 'self', False)
        # Obtaining the member 'c' of a type (line 1088)
        c_66213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 62), self_66212, 'c')
        # Obtaining the member 'dtype' of a type (line 1088)
        dtype_66214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 62), c_66213, 'dtype')
        keyword_66215 = dtype_66214
        kwargs_66216 = {'dtype': keyword_66215}
        # Getting the type of 'np' (line 1088)
        np_66199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 20), 'np', False)
        # Obtaining the member 'empty' of a type (line 1088)
        empty_66200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1088, 20), np_66199, 'empty')
        # Calling empty(args, kwargs) (line 1088)
        empty_call_result_66217 = invoke(stypy.reporting.localization.Localization(__file__, 1088, 20), empty_66200, *[tuple_66201], **kwargs_66216)
        
        # Assigning a type to the variable 'range_int' (line 1088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 8), 'range_int', empty_call_result_66217)
        
        # Call to _ensure_c_contiguous(...): (line 1089)
        # Processing the call keyword arguments (line 1089)
        kwargs_66220 = {}
        # Getting the type of 'self' (line 1089)
        self_66218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 8), 'self', False)
        # Obtaining the member '_ensure_c_contiguous' of a type (line 1089)
        _ensure_c_contiguous_66219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1089, 8), self_66218, '_ensure_c_contiguous')
        # Calling _ensure_c_contiguous(args, kwargs) (line 1089)
        _ensure_c_contiguous_call_result_66221 = invoke(stypy.reporting.localization.Localization(__file__, 1089, 8), _ensure_c_contiguous_66219, *[], **kwargs_66220)
        
        
        
        # Getting the type of 'extrapolate' (line 1092)
        extrapolate_66222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 11), 'extrapolate')
        str_66223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1092, 26), 'str', 'periodic')
        # Applying the binary operator '==' (line 1092)
        result_eq_66224 = python_operator(stypy.reporting.localization.Localization(__file__, 1092, 11), '==', extrapolate_66222, str_66223)
        
        # Testing the type of an if condition (line 1092)
        if_condition_66225 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1092, 8), result_eq_66224)
        # Assigning a type to the variable 'if_condition_66225' (line 1092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'if_condition_66225', if_condition_66225)
        # SSA begins for if statement (line 1092)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1096):
        
        # Assigning a Subscript to a Name (line 1096):
        
        # Obtaining the type of the subscript
        int_66226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 28), 'int')
        # Getting the type of 'self' (line 1096)
        self_66227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 21), 'self')
        # Obtaining the member 'x' of a type (line 1096)
        x_66228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 21), self_66227, 'x')
        # Obtaining the member '__getitem__' of a type (line 1096)
        getitem___66229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 21), x_66228, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1096)
        subscript_call_result_66230 = invoke(stypy.reporting.localization.Localization(__file__, 1096, 21), getitem___66229, int_66226)
        
        # Assigning a type to the variable 'tuple_assignment_63613' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 12), 'tuple_assignment_63613', subscript_call_result_66230)
        
        # Assigning a Subscript to a Name (line 1096):
        
        # Obtaining the type of the subscript
        int_66231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 39), 'int')
        # Getting the type of 'self' (line 1096)
        self_66232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 32), 'self')
        # Obtaining the member 'x' of a type (line 1096)
        x_66233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 32), self_66232, 'x')
        # Obtaining the member '__getitem__' of a type (line 1096)
        getitem___66234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 32), x_66233, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1096)
        subscript_call_result_66235 = invoke(stypy.reporting.localization.Localization(__file__, 1096, 32), getitem___66234, int_66231)
        
        # Assigning a type to the variable 'tuple_assignment_63614' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 12), 'tuple_assignment_63614', subscript_call_result_66235)
        
        # Assigning a Name to a Name (line 1096):
        # Getting the type of 'tuple_assignment_63613' (line 1096)
        tuple_assignment_63613_66236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 12), 'tuple_assignment_63613')
        # Assigning a type to the variable 'xs' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 12), 'xs', tuple_assignment_63613_66236)
        
        # Assigning a Name to a Name (line 1096):
        # Getting the type of 'tuple_assignment_63614' (line 1096)
        tuple_assignment_63614_66237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 12), 'tuple_assignment_63614')
        # Assigning a type to the variable 'xe' (line 1096)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 16), 'xe', tuple_assignment_63614_66237)
        
        # Assigning a BinOp to a Name (line 1097):
        
        # Assigning a BinOp to a Name (line 1097):
        # Getting the type of 'xe' (line 1097)
        xe_66238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 21), 'xe')
        # Getting the type of 'xs' (line 1097)
        xs_66239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 26), 'xs')
        # Applying the binary operator '-' (line 1097)
        result_sub_66240 = python_operator(stypy.reporting.localization.Localization(__file__, 1097, 21), '-', xe_66238, xs_66239)
        
        # Assigning a type to the variable 'period' (line 1097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1097, 12), 'period', result_sub_66240)
        
        # Assigning a BinOp to a Name (line 1098):
        
        # Assigning a BinOp to a Name (line 1098):
        # Getting the type of 'b' (line 1098)
        b_66241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 23), 'b')
        # Getting the type of 'a' (line 1098)
        a_66242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 27), 'a')
        # Applying the binary operator '-' (line 1098)
        result_sub_66243 = python_operator(stypy.reporting.localization.Localization(__file__, 1098, 23), '-', b_66241, a_66242)
        
        # Assigning a type to the variable 'interval' (line 1098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 12), 'interval', result_sub_66243)
        
        # Assigning a Call to a Tuple (line 1099):
        
        # Assigning a Subscript to a Name (line 1099):
        
        # Obtaining the type of the subscript
        int_66244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1099, 12), 'int')
        
        # Call to divmod(...): (line 1099)
        # Processing the call arguments (line 1099)
        # Getting the type of 'interval' (line 1099)
        interval_66246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 37), 'interval', False)
        # Getting the type of 'period' (line 1099)
        period_66247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 47), 'period', False)
        # Processing the call keyword arguments (line 1099)
        kwargs_66248 = {}
        # Getting the type of 'divmod' (line 1099)
        divmod_66245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 30), 'divmod', False)
        # Calling divmod(args, kwargs) (line 1099)
        divmod_call_result_66249 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 30), divmod_66245, *[interval_66246, period_66247], **kwargs_66248)
        
        # Obtaining the member '__getitem__' of a type (line 1099)
        getitem___66250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 12), divmod_call_result_66249, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1099)
        subscript_call_result_66251 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 12), getitem___66250, int_66244)
        
        # Assigning a type to the variable 'tuple_var_assignment_63615' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 12), 'tuple_var_assignment_63615', subscript_call_result_66251)
        
        # Assigning a Subscript to a Name (line 1099):
        
        # Obtaining the type of the subscript
        int_66252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1099, 12), 'int')
        
        # Call to divmod(...): (line 1099)
        # Processing the call arguments (line 1099)
        # Getting the type of 'interval' (line 1099)
        interval_66254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 37), 'interval', False)
        # Getting the type of 'period' (line 1099)
        period_66255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 47), 'period', False)
        # Processing the call keyword arguments (line 1099)
        kwargs_66256 = {}
        # Getting the type of 'divmod' (line 1099)
        divmod_66253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 30), 'divmod', False)
        # Calling divmod(args, kwargs) (line 1099)
        divmod_call_result_66257 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 30), divmod_66253, *[interval_66254, period_66255], **kwargs_66256)
        
        # Obtaining the member '__getitem__' of a type (line 1099)
        getitem___66258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1099, 12), divmod_call_result_66257, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1099)
        subscript_call_result_66259 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 12), getitem___66258, int_66252)
        
        # Assigning a type to the variable 'tuple_var_assignment_63616' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 12), 'tuple_var_assignment_63616', subscript_call_result_66259)
        
        # Assigning a Name to a Name (line 1099):
        # Getting the type of 'tuple_var_assignment_63615' (line 1099)
        tuple_var_assignment_63615_66260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 12), 'tuple_var_assignment_63615')
        # Assigning a type to the variable 'n_periods' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 12), 'n_periods', tuple_var_assignment_63615_66260)
        
        # Assigning a Name to a Name (line 1099):
        # Getting the type of 'tuple_var_assignment_63616' (line 1099)
        tuple_var_assignment_63616_66261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 12), 'tuple_var_assignment_63616')
        # Assigning a type to the variable 'left' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 23), 'left', tuple_var_assignment_63616_66261)
        
        
        # Getting the type of 'n_periods' (line 1101)
        n_periods_66262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 15), 'n_periods')
        int_66263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 27), 'int')
        # Applying the binary operator '>' (line 1101)
        result_gt_66264 = python_operator(stypy.reporting.localization.Localization(__file__, 1101, 15), '>', n_periods_66262, int_66263)
        
        # Testing the type of an if condition (line 1101)
        if_condition_66265 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1101, 12), result_gt_66264)
        # Assigning a type to the variable 'if_condition_66265' (line 1101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 12), 'if_condition_66265', if_condition_66265)
        # SSA begins for if statement (line 1101)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to integrate(...): (line 1102)
        # Processing the call arguments (line 1102)
        
        # Call to reshape(...): (line 1103)
        # Processing the call arguments (line 1103)
        
        # Obtaining the type of the subscript
        int_66271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1103, 48), 'int')
        # Getting the type of 'self' (line 1103)
        self_66272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 35), 'self', False)
        # Obtaining the member 'c' of a type (line 1103)
        c_66273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 35), self_66272, 'c')
        # Obtaining the member 'shape' of a type (line 1103)
        shape_66274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 35), c_66273, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1103)
        getitem___66275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 35), shape_66274, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1103)
        subscript_call_result_66276 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 35), getitem___66275, int_66271)
        
        
        # Obtaining the type of the subscript
        int_66277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1103, 65), 'int')
        # Getting the type of 'self' (line 1103)
        self_66278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 52), 'self', False)
        # Obtaining the member 'c' of a type (line 1103)
        c_66279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 52), self_66278, 'c')
        # Obtaining the member 'shape' of a type (line 1103)
        shape_66280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 52), c_66279, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1103)
        getitem___66281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 52), shape_66280, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1103)
        subscript_call_result_66282 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 52), getitem___66281, int_66277)
        
        int_66283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1103, 69), 'int')
        # Processing the call keyword arguments (line 1103)
        kwargs_66284 = {}
        # Getting the type of 'self' (line 1103)
        self_66268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 20), 'self', False)
        # Obtaining the member 'c' of a type (line 1103)
        c_66269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 20), self_66268, 'c')
        # Obtaining the member 'reshape' of a type (line 1103)
        reshape_66270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 20), c_66269, 'reshape')
        # Calling reshape(args, kwargs) (line 1103)
        reshape_call_result_66285 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 20), reshape_66270, *[subscript_call_result_66276, subscript_call_result_66282, int_66283], **kwargs_66284)
        
        # Getting the type of 'self' (line 1104)
        self_66286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 20), 'self', False)
        # Obtaining the member 'x' of a type (line 1104)
        x_66287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 20), self_66286, 'x')
        # Getting the type of 'xs' (line 1104)
        xs_66288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 28), 'xs', False)
        # Getting the type of 'xe' (line 1104)
        xe_66289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 32), 'xe', False)
        # Getting the type of 'False' (line 1104)
        False_66290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 36), 'False', False)
        # Processing the call keyword arguments (line 1102)
        # Getting the type of 'range_int' (line 1104)
        range_int_66291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 47), 'range_int', False)
        keyword_66292 = range_int_66291
        kwargs_66293 = {'out': keyword_66292}
        # Getting the type of '_ppoly' (line 1102)
        _ppoly_66266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 16), '_ppoly', False)
        # Obtaining the member 'integrate' of a type (line 1102)
        integrate_66267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 16), _ppoly_66266, 'integrate')
        # Calling integrate(args, kwargs) (line 1102)
        integrate_call_result_66294 = invoke(stypy.reporting.localization.Localization(__file__, 1102, 16), integrate_66267, *[reshape_call_result_66285, x_66287, xs_66288, xe_66289, False_66290], **kwargs_66293)
        
        
        # Getting the type of 'range_int' (line 1105)
        range_int_66295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 16), 'range_int')
        # Getting the type of 'n_periods' (line 1105)
        n_periods_66296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 29), 'n_periods')
        # Applying the binary operator '*=' (line 1105)
        result_imul_66297 = python_operator(stypy.reporting.localization.Localization(__file__, 1105, 16), '*=', range_int_66295, n_periods_66296)
        # Assigning a type to the variable 'range_int' (line 1105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 16), 'range_int', result_imul_66297)
        
        # SSA branch for the else part of an if statement (line 1101)
        module_type_store.open_ssa_branch('else')
        
        # Call to fill(...): (line 1107)
        # Processing the call arguments (line 1107)
        int_66300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 31), 'int')
        # Processing the call keyword arguments (line 1107)
        kwargs_66301 = {}
        # Getting the type of 'range_int' (line 1107)
        range_int_66298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 16), 'range_int', False)
        # Obtaining the member 'fill' of a type (line 1107)
        fill_66299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 16), range_int_66298, 'fill')
        # Calling fill(args, kwargs) (line 1107)
        fill_call_result_66302 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 16), fill_66299, *[int_66300], **kwargs_66301)
        
        # SSA join for if statement (line 1101)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1110):
        
        # Assigning a BinOp to a Name (line 1110):
        # Getting the type of 'xs' (line 1110)
        xs_66303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 16), 'xs')
        # Getting the type of 'a' (line 1110)
        a_66304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 22), 'a')
        # Getting the type of 'xs' (line 1110)
        xs_66305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 26), 'xs')
        # Applying the binary operator '-' (line 1110)
        result_sub_66306 = python_operator(stypy.reporting.localization.Localization(__file__, 1110, 22), '-', a_66304, xs_66305)
        
        # Getting the type of 'period' (line 1110)
        period_66307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 32), 'period')
        # Applying the binary operator '%' (line 1110)
        result_mod_66308 = python_operator(stypy.reporting.localization.Localization(__file__, 1110, 21), '%', result_sub_66306, period_66307)
        
        # Applying the binary operator '+' (line 1110)
        result_add_66309 = python_operator(stypy.reporting.localization.Localization(__file__, 1110, 16), '+', xs_66303, result_mod_66308)
        
        # Assigning a type to the variable 'a' (line 1110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 12), 'a', result_add_66309)
        
        # Assigning a BinOp to a Name (line 1111):
        
        # Assigning a BinOp to a Name (line 1111):
        # Getting the type of 'a' (line 1111)
        a_66310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 16), 'a')
        # Getting the type of 'left' (line 1111)
        left_66311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 20), 'left')
        # Applying the binary operator '+' (line 1111)
        result_add_66312 = python_operator(stypy.reporting.localization.Localization(__file__, 1111, 16), '+', a_66310, left_66311)
        
        # Assigning a type to the variable 'b' (line 1111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 12), 'b', result_add_66312)
        
        # Assigning a Call to a Name (line 1115):
        
        # Assigning a Call to a Name (line 1115):
        
        # Call to empty_like(...): (line 1115)
        # Processing the call arguments (line 1115)
        # Getting the type of 'range_int' (line 1115)
        range_int_66315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 42), 'range_int', False)
        # Processing the call keyword arguments (line 1115)
        kwargs_66316 = {}
        # Getting the type of 'np' (line 1115)
        np_66313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 28), 'np', False)
        # Obtaining the member 'empty_like' of a type (line 1115)
        empty_like_66314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 28), np_66313, 'empty_like')
        # Calling empty_like(args, kwargs) (line 1115)
        empty_like_call_result_66317 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 28), empty_like_66314, *[range_int_66315], **kwargs_66316)
        
        # Assigning a type to the variable 'remainder_int' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 12), 'remainder_int', empty_like_call_result_66317)
        
        
        # Getting the type of 'b' (line 1116)
        b_66318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 15), 'b')
        # Getting the type of 'xe' (line 1116)
        xe_66319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 20), 'xe')
        # Applying the binary operator '<=' (line 1116)
        result_le_66320 = python_operator(stypy.reporting.localization.Localization(__file__, 1116, 15), '<=', b_66318, xe_66319)
        
        # Testing the type of an if condition (line 1116)
        if_condition_66321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1116, 12), result_le_66320)
        # Assigning a type to the variable 'if_condition_66321' (line 1116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1116, 12), 'if_condition_66321', if_condition_66321)
        # SSA begins for if statement (line 1116)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to integrate(...): (line 1117)
        # Processing the call arguments (line 1117)
        
        # Call to reshape(...): (line 1118)
        # Processing the call arguments (line 1118)
        
        # Obtaining the type of the subscript
        int_66327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, 48), 'int')
        # Getting the type of 'self' (line 1118)
        self_66328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 35), 'self', False)
        # Obtaining the member 'c' of a type (line 1118)
        c_66329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 35), self_66328, 'c')
        # Obtaining the member 'shape' of a type (line 1118)
        shape_66330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 35), c_66329, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1118)
        getitem___66331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 35), shape_66330, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1118)
        subscript_call_result_66332 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 35), getitem___66331, int_66327)
        
        
        # Obtaining the type of the subscript
        int_66333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, 65), 'int')
        # Getting the type of 'self' (line 1118)
        self_66334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 52), 'self', False)
        # Obtaining the member 'c' of a type (line 1118)
        c_66335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 52), self_66334, 'c')
        # Obtaining the member 'shape' of a type (line 1118)
        shape_66336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 52), c_66335, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1118)
        getitem___66337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 52), shape_66336, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1118)
        subscript_call_result_66338 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 52), getitem___66337, int_66333)
        
        int_66339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, 69), 'int')
        # Processing the call keyword arguments (line 1118)
        kwargs_66340 = {}
        # Getting the type of 'self' (line 1118)
        self_66324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 20), 'self', False)
        # Obtaining the member 'c' of a type (line 1118)
        c_66325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 20), self_66324, 'c')
        # Obtaining the member 'reshape' of a type (line 1118)
        reshape_66326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 20), c_66325, 'reshape')
        # Calling reshape(args, kwargs) (line 1118)
        reshape_call_result_66341 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 20), reshape_66326, *[subscript_call_result_66332, subscript_call_result_66338, int_66339], **kwargs_66340)
        
        # Getting the type of 'self' (line 1119)
        self_66342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 20), 'self', False)
        # Obtaining the member 'x' of a type (line 1119)
        x_66343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 20), self_66342, 'x')
        # Getting the type of 'a' (line 1119)
        a_66344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 28), 'a', False)
        # Getting the type of 'b' (line 1119)
        b_66345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 31), 'b', False)
        # Getting the type of 'False' (line 1119)
        False_66346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 34), 'False', False)
        # Processing the call keyword arguments (line 1117)
        # Getting the type of 'remainder_int' (line 1119)
        remainder_int_66347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 45), 'remainder_int', False)
        keyword_66348 = remainder_int_66347
        kwargs_66349 = {'out': keyword_66348}
        # Getting the type of '_ppoly' (line 1117)
        _ppoly_66322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 16), '_ppoly', False)
        # Obtaining the member 'integrate' of a type (line 1117)
        integrate_66323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 16), _ppoly_66322, 'integrate')
        # Calling integrate(args, kwargs) (line 1117)
        integrate_call_result_66350 = invoke(stypy.reporting.localization.Localization(__file__, 1117, 16), integrate_66323, *[reshape_call_result_66341, x_66343, a_66344, b_66345, False_66346], **kwargs_66349)
        
        
        # Getting the type of 'range_int' (line 1120)
        range_int_66351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 16), 'range_int')
        # Getting the type of 'remainder_int' (line 1120)
        remainder_int_66352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 29), 'remainder_int')
        # Applying the binary operator '+=' (line 1120)
        result_iadd_66353 = python_operator(stypy.reporting.localization.Localization(__file__, 1120, 16), '+=', range_int_66351, remainder_int_66352)
        # Assigning a type to the variable 'range_int' (line 1120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 16), 'range_int', result_iadd_66353)
        
        # SSA branch for the else part of an if statement (line 1116)
        module_type_store.open_ssa_branch('else')
        
        # Call to integrate(...): (line 1122)
        # Processing the call arguments (line 1122)
        
        # Call to reshape(...): (line 1123)
        # Processing the call arguments (line 1123)
        
        # Obtaining the type of the subscript
        int_66359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 48), 'int')
        # Getting the type of 'self' (line 1123)
        self_66360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 35), 'self', False)
        # Obtaining the member 'c' of a type (line 1123)
        c_66361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 35), self_66360, 'c')
        # Obtaining the member 'shape' of a type (line 1123)
        shape_66362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 35), c_66361, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1123)
        getitem___66363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 35), shape_66362, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1123)
        subscript_call_result_66364 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 35), getitem___66363, int_66359)
        
        
        # Obtaining the type of the subscript
        int_66365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 65), 'int')
        # Getting the type of 'self' (line 1123)
        self_66366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 52), 'self', False)
        # Obtaining the member 'c' of a type (line 1123)
        c_66367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 52), self_66366, 'c')
        # Obtaining the member 'shape' of a type (line 1123)
        shape_66368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 52), c_66367, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1123)
        getitem___66369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 52), shape_66368, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1123)
        subscript_call_result_66370 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 52), getitem___66369, int_66365)
        
        int_66371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 69), 'int')
        # Processing the call keyword arguments (line 1123)
        kwargs_66372 = {}
        # Getting the type of 'self' (line 1123)
        self_66356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 20), 'self', False)
        # Obtaining the member 'c' of a type (line 1123)
        c_66357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 20), self_66356, 'c')
        # Obtaining the member 'reshape' of a type (line 1123)
        reshape_66358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 20), c_66357, 'reshape')
        # Calling reshape(args, kwargs) (line 1123)
        reshape_call_result_66373 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 20), reshape_66358, *[subscript_call_result_66364, subscript_call_result_66370, int_66371], **kwargs_66372)
        
        # Getting the type of 'self' (line 1124)
        self_66374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 20), 'self', False)
        # Obtaining the member 'x' of a type (line 1124)
        x_66375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 20), self_66374, 'x')
        # Getting the type of 'a' (line 1124)
        a_66376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 28), 'a', False)
        # Getting the type of 'xe' (line 1124)
        xe_66377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 31), 'xe', False)
        # Getting the type of 'False' (line 1124)
        False_66378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 35), 'False', False)
        # Processing the call keyword arguments (line 1122)
        # Getting the type of 'remainder_int' (line 1124)
        remainder_int_66379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 46), 'remainder_int', False)
        keyword_66380 = remainder_int_66379
        kwargs_66381 = {'out': keyword_66380}
        # Getting the type of '_ppoly' (line 1122)
        _ppoly_66354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 16), '_ppoly', False)
        # Obtaining the member 'integrate' of a type (line 1122)
        integrate_66355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 16), _ppoly_66354, 'integrate')
        # Calling integrate(args, kwargs) (line 1122)
        integrate_call_result_66382 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 16), integrate_66355, *[reshape_call_result_66373, x_66375, a_66376, xe_66377, False_66378], **kwargs_66381)
        
        
        # Getting the type of 'range_int' (line 1125)
        range_int_66383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 16), 'range_int')
        # Getting the type of 'remainder_int' (line 1125)
        remainder_int_66384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 29), 'remainder_int')
        # Applying the binary operator '+=' (line 1125)
        result_iadd_66385 = python_operator(stypy.reporting.localization.Localization(__file__, 1125, 16), '+=', range_int_66383, remainder_int_66384)
        # Assigning a type to the variable 'range_int' (line 1125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1125, 16), 'range_int', result_iadd_66385)
        
        
        # Call to integrate(...): (line 1127)
        # Processing the call arguments (line 1127)
        
        # Call to reshape(...): (line 1128)
        # Processing the call arguments (line 1128)
        
        # Obtaining the type of the subscript
        int_66391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 48), 'int')
        # Getting the type of 'self' (line 1128)
        self_66392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 35), 'self', False)
        # Obtaining the member 'c' of a type (line 1128)
        c_66393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 35), self_66392, 'c')
        # Obtaining the member 'shape' of a type (line 1128)
        shape_66394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 35), c_66393, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1128)
        getitem___66395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 35), shape_66394, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1128)
        subscript_call_result_66396 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 35), getitem___66395, int_66391)
        
        
        # Obtaining the type of the subscript
        int_66397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 65), 'int')
        # Getting the type of 'self' (line 1128)
        self_66398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 52), 'self', False)
        # Obtaining the member 'c' of a type (line 1128)
        c_66399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 52), self_66398, 'c')
        # Obtaining the member 'shape' of a type (line 1128)
        shape_66400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 52), c_66399, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1128)
        getitem___66401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 52), shape_66400, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1128)
        subscript_call_result_66402 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 52), getitem___66401, int_66397)
        
        int_66403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 69), 'int')
        # Processing the call keyword arguments (line 1128)
        kwargs_66404 = {}
        # Getting the type of 'self' (line 1128)
        self_66388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 20), 'self', False)
        # Obtaining the member 'c' of a type (line 1128)
        c_66389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 20), self_66388, 'c')
        # Obtaining the member 'reshape' of a type (line 1128)
        reshape_66390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 20), c_66389, 'reshape')
        # Calling reshape(args, kwargs) (line 1128)
        reshape_call_result_66405 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 20), reshape_66390, *[subscript_call_result_66396, subscript_call_result_66402, int_66403], **kwargs_66404)
        
        # Getting the type of 'self' (line 1129)
        self_66406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 20), 'self', False)
        # Obtaining the member 'x' of a type (line 1129)
        x_66407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 20), self_66406, 'x')
        # Getting the type of 'xs' (line 1129)
        xs_66408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 28), 'xs', False)
        # Getting the type of 'xs' (line 1129)
        xs_66409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 32), 'xs', False)
        # Getting the type of 'left' (line 1129)
        left_66410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 37), 'left', False)
        # Applying the binary operator '+' (line 1129)
        result_add_66411 = python_operator(stypy.reporting.localization.Localization(__file__, 1129, 32), '+', xs_66409, left_66410)
        
        # Getting the type of 'a' (line 1129)
        a_66412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 44), 'a', False)
        # Applying the binary operator '+' (line 1129)
        result_add_66413 = python_operator(stypy.reporting.localization.Localization(__file__, 1129, 42), '+', result_add_66411, a_66412)
        
        # Getting the type of 'xe' (line 1129)
        xe_66414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 48), 'xe', False)
        # Applying the binary operator '-' (line 1129)
        result_sub_66415 = python_operator(stypy.reporting.localization.Localization(__file__, 1129, 46), '-', result_add_66413, xe_66414)
        
        # Getting the type of 'False' (line 1129)
        False_66416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 52), 'False', False)
        # Processing the call keyword arguments (line 1127)
        # Getting the type of 'remainder_int' (line 1129)
        remainder_int_66417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 63), 'remainder_int', False)
        keyword_66418 = remainder_int_66417
        kwargs_66419 = {'out': keyword_66418}
        # Getting the type of '_ppoly' (line 1127)
        _ppoly_66386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 16), '_ppoly', False)
        # Obtaining the member 'integrate' of a type (line 1127)
        integrate_66387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 16), _ppoly_66386, 'integrate')
        # Calling integrate(args, kwargs) (line 1127)
        integrate_call_result_66420 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 16), integrate_66387, *[reshape_call_result_66405, x_66407, xs_66408, result_sub_66415, False_66416], **kwargs_66419)
        
        
        # Getting the type of 'range_int' (line 1130)
        range_int_66421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 16), 'range_int')
        # Getting the type of 'remainder_int' (line 1130)
        remainder_int_66422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 29), 'remainder_int')
        # Applying the binary operator '+=' (line 1130)
        result_iadd_66423 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 16), '+=', range_int_66421, remainder_int_66422)
        # Assigning a type to the variable 'range_int' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 16), 'range_int', result_iadd_66423)
        
        # SSA join for if statement (line 1116)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1092)
        module_type_store.open_ssa_branch('else')
        
        # Call to integrate(...): (line 1132)
        # Processing the call arguments (line 1132)
        
        # Call to reshape(...): (line 1133)
        # Processing the call arguments (line 1133)
        
        # Obtaining the type of the subscript
        int_66429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1133, 44), 'int')
        # Getting the type of 'self' (line 1133)
        self_66430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 31), 'self', False)
        # Obtaining the member 'c' of a type (line 1133)
        c_66431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 31), self_66430, 'c')
        # Obtaining the member 'shape' of a type (line 1133)
        shape_66432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 31), c_66431, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1133)
        getitem___66433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 31), shape_66432, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1133)
        subscript_call_result_66434 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 31), getitem___66433, int_66429)
        
        
        # Obtaining the type of the subscript
        int_66435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1133, 61), 'int')
        # Getting the type of 'self' (line 1133)
        self_66436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 48), 'self', False)
        # Obtaining the member 'c' of a type (line 1133)
        c_66437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 48), self_66436, 'c')
        # Obtaining the member 'shape' of a type (line 1133)
        shape_66438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 48), c_66437, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1133)
        getitem___66439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 48), shape_66438, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1133)
        subscript_call_result_66440 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 48), getitem___66439, int_66435)
        
        int_66441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1133, 65), 'int')
        # Processing the call keyword arguments (line 1133)
        kwargs_66442 = {}
        # Getting the type of 'self' (line 1133)
        self_66426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 16), 'self', False)
        # Obtaining the member 'c' of a type (line 1133)
        c_66427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 16), self_66426, 'c')
        # Obtaining the member 'reshape' of a type (line 1133)
        reshape_66428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 16), c_66427, 'reshape')
        # Calling reshape(args, kwargs) (line 1133)
        reshape_call_result_66443 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 16), reshape_66428, *[subscript_call_result_66434, subscript_call_result_66440, int_66441], **kwargs_66442)
        
        # Getting the type of 'self' (line 1134)
        self_66444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 16), 'self', False)
        # Obtaining the member 'x' of a type (line 1134)
        x_66445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 16), self_66444, 'x')
        # Getting the type of 'a' (line 1134)
        a_66446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 24), 'a', False)
        # Getting the type of 'b' (line 1134)
        b_66447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 27), 'b', False)
        
        # Call to bool(...): (line 1134)
        # Processing the call arguments (line 1134)
        # Getting the type of 'extrapolate' (line 1134)
        extrapolate_66449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 35), 'extrapolate', False)
        # Processing the call keyword arguments (line 1134)
        kwargs_66450 = {}
        # Getting the type of 'bool' (line 1134)
        bool_66448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 30), 'bool', False)
        # Calling bool(args, kwargs) (line 1134)
        bool_call_result_66451 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 30), bool_66448, *[extrapolate_66449], **kwargs_66450)
        
        # Processing the call keyword arguments (line 1132)
        # Getting the type of 'range_int' (line 1134)
        range_int_66452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 53), 'range_int', False)
        keyword_66453 = range_int_66452
        kwargs_66454 = {'out': keyword_66453}
        # Getting the type of '_ppoly' (line 1132)
        _ppoly_66424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 12), '_ppoly', False)
        # Obtaining the member 'integrate' of a type (line 1132)
        integrate_66425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 12), _ppoly_66424, 'integrate')
        # Calling integrate(args, kwargs) (line 1132)
        integrate_call_result_66455 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 12), integrate_66425, *[reshape_call_result_66443, x_66445, a_66446, b_66447, bool_call_result_66451], **kwargs_66454)
        
        # SSA join for if statement (line 1092)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'range_int' (line 1137)
        range_int_66456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 8), 'range_int')
        # Getting the type of 'sign' (line 1137)
        sign_66457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 21), 'sign')
        # Applying the binary operator '*=' (line 1137)
        result_imul_66458 = python_operator(stypy.reporting.localization.Localization(__file__, 1137, 8), '*=', range_int_66456, sign_66457)
        # Assigning a type to the variable 'range_int' (line 1137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 8), 'range_int', result_imul_66458)
        
        
        # Call to reshape(...): (line 1138)
        # Processing the call arguments (line 1138)
        
        # Obtaining the type of the subscript
        int_66461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 46), 'int')
        slice_66462 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1138, 33), int_66461, None, None)
        # Getting the type of 'self' (line 1138)
        self_66463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 33), 'self', False)
        # Obtaining the member 'c' of a type (line 1138)
        c_66464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 33), self_66463, 'c')
        # Obtaining the member 'shape' of a type (line 1138)
        shape_66465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 33), c_66464, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1138)
        getitem___66466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 33), shape_66465, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1138)
        subscript_call_result_66467 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 33), getitem___66466, slice_66462)
        
        # Processing the call keyword arguments (line 1138)
        kwargs_66468 = {}
        # Getting the type of 'range_int' (line 1138)
        range_int_66459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 15), 'range_int', False)
        # Obtaining the member 'reshape' of a type (line 1138)
        reshape_66460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 15), range_int_66459, 'reshape')
        # Calling reshape(args, kwargs) (line 1138)
        reshape_call_result_66469 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 15), reshape_66460, *[subscript_call_result_66467], **kwargs_66468)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'stypy_return_type', reshape_call_result_66469)
        
        # ################# End of 'integrate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'integrate' in the type store
        # Getting the type of 'stypy_return_type' (line 1058)
        stypy_return_type_66470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66470)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'integrate'
        return stypy_return_type_66470


    @norecursion
    def solve(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_66471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, 22), 'float')
        # Getting the type of 'True' (line 1140)
        True_66472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 40), 'True')
        # Getting the type of 'None' (line 1140)
        None_66473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 58), 'None')
        defaults = [float_66471, True_66472, None_66473]
        # Create a new context for function 'solve'
        module_type_store = module_type_store.open_function_context('solve', 1140, 4, False)
        # Assigning a type to the variable 'self' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PPoly.solve.__dict__.__setitem__('stypy_localization', localization)
        PPoly.solve.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PPoly.solve.__dict__.__setitem__('stypy_type_store', module_type_store)
        PPoly.solve.__dict__.__setitem__('stypy_function_name', 'PPoly.solve')
        PPoly.solve.__dict__.__setitem__('stypy_param_names_list', ['y', 'discontinuity', 'extrapolate'])
        PPoly.solve.__dict__.__setitem__('stypy_varargs_param_name', None)
        PPoly.solve.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PPoly.solve.__dict__.__setitem__('stypy_call_defaults', defaults)
        PPoly.solve.__dict__.__setitem__('stypy_call_varargs', varargs)
        PPoly.solve.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PPoly.solve.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PPoly.solve', ['y', 'discontinuity', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'solve', localization, ['y', 'discontinuity', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'solve(...)' code ##################

        str_66474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, (-1)), 'str', "\n        Find real solutions of the the equation ``pp(x) == y``.\n\n        Parameters\n        ----------\n        y : float, optional\n            Right-hand side. Default is zero.\n        discontinuity : bool, optional\n            Whether to report sign changes across discontinuities at\n            breakpoints as roots.\n        extrapolate : {bool, 'periodic', None}, optional\n            If bool, determines whether to return roots from the polynomial\n            extrapolated based on first and last intervals, 'periodic' works\n            the same as False. If None (default), use `self.extrapolate`.\n\n        Returns\n        -------\n        roots : ndarray\n            Roots of the polynomial(s).\n\n            If the PPoly object describes multiple polynomials, the\n            return value is an object array whose each element is an\n            ndarray containing the roots.\n\n        Notes\n        -----\n        This routine works only on real-valued polynomials.\n\n        If the piecewise polynomial contains sections that are\n        identically zero, the root list will contain the start point\n        of the corresponding interval, followed by a ``nan`` value.\n\n        If the polynomial is discontinuous across a breakpoint, and\n        there is a sign change across the breakpoint, this is reported\n        if the `discont` parameter is True.\n\n        Examples\n        --------\n\n        Finding roots of ``[x**2 - 1, (x - 1)**2]`` defined on intervals\n        ``[-2, 1], [1, 2]``:\n\n        >>> from scipy.interpolate import PPoly\n        >>> pp = PPoly(np.array([[1, -4, 3], [1, 0, 0]]).T, [-2, 1, 2])\n        >>> pp.roots()\n        array([-1.,  1.])\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 1188)
        # Getting the type of 'extrapolate' (line 1188)
        extrapolate_66475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 11), 'extrapolate')
        # Getting the type of 'None' (line 1188)
        None_66476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 26), 'None')
        
        (may_be_66477, more_types_in_union_66478) = may_be_none(extrapolate_66475, None_66476)

        if may_be_66477:

            if more_types_in_union_66478:
                # Runtime conditional SSA (line 1188)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1189):
            
            # Assigning a Attribute to a Name (line 1189):
            # Getting the type of 'self' (line 1189)
            self_66479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 26), 'self')
            # Obtaining the member 'extrapolate' of a type (line 1189)
            extrapolate_66480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 26), self_66479, 'extrapolate')
            # Assigning a type to the variable 'extrapolate' (line 1189)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 12), 'extrapolate', extrapolate_66480)

            if more_types_in_union_66478:
                # SSA join for if statement (line 1188)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to _ensure_c_contiguous(...): (line 1191)
        # Processing the call keyword arguments (line 1191)
        kwargs_66483 = {}
        # Getting the type of 'self' (line 1191)
        self_66481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'self', False)
        # Obtaining the member '_ensure_c_contiguous' of a type (line 1191)
        _ensure_c_contiguous_66482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 8), self_66481, '_ensure_c_contiguous')
        # Calling _ensure_c_contiguous(args, kwargs) (line 1191)
        _ensure_c_contiguous_call_result_66484 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 8), _ensure_c_contiguous_66482, *[], **kwargs_66483)
        
        
        
        # Call to issubdtype(...): (line 1193)
        # Processing the call arguments (line 1193)
        # Getting the type of 'self' (line 1193)
        self_66487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 25), 'self', False)
        # Obtaining the member 'c' of a type (line 1193)
        c_66488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 25), self_66487, 'c')
        # Obtaining the member 'dtype' of a type (line 1193)
        dtype_66489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 25), c_66488, 'dtype')
        # Getting the type of 'np' (line 1193)
        np_66490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 39), 'np', False)
        # Obtaining the member 'complexfloating' of a type (line 1193)
        complexfloating_66491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 39), np_66490, 'complexfloating')
        # Processing the call keyword arguments (line 1193)
        kwargs_66492 = {}
        # Getting the type of 'np' (line 1193)
        np_66485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 11), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 1193)
        issubdtype_66486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 11), np_66485, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 1193)
        issubdtype_call_result_66493 = invoke(stypy.reporting.localization.Localization(__file__, 1193, 11), issubdtype_66486, *[dtype_66489, complexfloating_66491], **kwargs_66492)
        
        # Testing the type of an if condition (line 1193)
        if_condition_66494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1193, 8), issubdtype_call_result_66493)
        # Assigning a type to the variable 'if_condition_66494' (line 1193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1193, 8), 'if_condition_66494', if_condition_66494)
        # SSA begins for if statement (line 1193)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1194)
        # Processing the call arguments (line 1194)
        str_66496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 29), 'str', 'Root finding is only for real-valued polynomials')
        # Processing the call keyword arguments (line 1194)
        kwargs_66497 = {}
        # Getting the type of 'ValueError' (line 1194)
        ValueError_66495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1194)
        ValueError_call_result_66498 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 18), ValueError_66495, *[str_66496], **kwargs_66497)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1194, 12), ValueError_call_result_66498, 'raise parameter', BaseException)
        # SSA join for if statement (line 1193)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1197):
        
        # Assigning a Call to a Name (line 1197):
        
        # Call to float(...): (line 1197)
        # Processing the call arguments (line 1197)
        # Getting the type of 'y' (line 1197)
        y_66500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 18), 'y', False)
        # Processing the call keyword arguments (line 1197)
        kwargs_66501 = {}
        # Getting the type of 'float' (line 1197)
        float_66499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 12), 'float', False)
        # Calling float(args, kwargs) (line 1197)
        float_call_result_66502 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 12), float_66499, *[y_66500], **kwargs_66501)
        
        # Assigning a type to the variable 'y' (line 1197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'y', float_call_result_66502)
        
        # Assigning a Call to a Name (line 1198):
        
        # Assigning a Call to a Name (line 1198):
        
        # Call to real_roots(...): (line 1198)
        # Processing the call arguments (line 1198)
        
        # Call to reshape(...): (line 1198)
        # Processing the call arguments (line 1198)
        
        # Obtaining the type of the subscript
        int_66508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 58), 'int')
        # Getting the type of 'self' (line 1198)
        self_66509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 45), 'self', False)
        # Obtaining the member 'c' of a type (line 1198)
        c_66510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 45), self_66509, 'c')
        # Obtaining the member 'shape' of a type (line 1198)
        shape_66511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 45), c_66510, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1198)
        getitem___66512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 45), shape_66511, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1198)
        subscript_call_result_66513 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 45), getitem___66512, int_66508)
        
        
        # Obtaining the type of the subscript
        int_66514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 75), 'int')
        # Getting the type of 'self' (line 1198)
        self_66515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 62), 'self', False)
        # Obtaining the member 'c' of a type (line 1198)
        c_66516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 62), self_66515, 'c')
        # Obtaining the member 'shape' of a type (line 1198)
        shape_66517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 62), c_66516, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1198)
        getitem___66518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 62), shape_66517, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1198)
        subscript_call_result_66519 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 62), getitem___66518, int_66514)
        
        int_66520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 79), 'int')
        # Processing the call keyword arguments (line 1198)
        kwargs_66521 = {}
        # Getting the type of 'self' (line 1198)
        self_66505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 30), 'self', False)
        # Obtaining the member 'c' of a type (line 1198)
        c_66506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 30), self_66505, 'c')
        # Obtaining the member 'reshape' of a type (line 1198)
        reshape_66507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 30), c_66506, 'reshape')
        # Calling reshape(args, kwargs) (line 1198)
        reshape_call_result_66522 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 30), reshape_66507, *[subscript_call_result_66513, subscript_call_result_66519, int_66520], **kwargs_66521)
        
        # Getting the type of 'self' (line 1199)
        self_66523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 30), 'self', False)
        # Obtaining the member 'x' of a type (line 1199)
        x_66524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 30), self_66523, 'x')
        # Getting the type of 'y' (line 1199)
        y_66525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 38), 'y', False)
        
        # Call to bool(...): (line 1199)
        # Processing the call arguments (line 1199)
        # Getting the type of 'discontinuity' (line 1199)
        discontinuity_66527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 46), 'discontinuity', False)
        # Processing the call keyword arguments (line 1199)
        kwargs_66528 = {}
        # Getting the type of 'bool' (line 1199)
        bool_66526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 41), 'bool', False)
        # Calling bool(args, kwargs) (line 1199)
        bool_call_result_66529 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 41), bool_66526, *[discontinuity_66527], **kwargs_66528)
        
        
        # Call to bool(...): (line 1200)
        # Processing the call arguments (line 1200)
        # Getting the type of 'extrapolate' (line 1200)
        extrapolate_66531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 35), 'extrapolate', False)
        # Processing the call keyword arguments (line 1200)
        kwargs_66532 = {}
        # Getting the type of 'bool' (line 1200)
        bool_66530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 30), 'bool', False)
        # Calling bool(args, kwargs) (line 1200)
        bool_call_result_66533 = invoke(stypy.reporting.localization.Localization(__file__, 1200, 30), bool_66530, *[extrapolate_66531], **kwargs_66532)
        
        # Processing the call keyword arguments (line 1198)
        kwargs_66534 = {}
        # Getting the type of '_ppoly' (line 1198)
        _ppoly_66503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 12), '_ppoly', False)
        # Obtaining the member 'real_roots' of a type (line 1198)
        real_roots_66504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 12), _ppoly_66503, 'real_roots')
        # Calling real_roots(args, kwargs) (line 1198)
        real_roots_call_result_66535 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 12), real_roots_66504, *[reshape_call_result_66522, x_66524, y_66525, bool_call_result_66529, bool_call_result_66533], **kwargs_66534)
        
        # Assigning a type to the variable 'r' (line 1198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1198, 8), 'r', real_roots_call_result_66535)
        
        
        # Getting the type of 'self' (line 1201)
        self_66536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 11), 'self')
        # Obtaining the member 'c' of a type (line 1201)
        c_66537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 11), self_66536, 'c')
        # Obtaining the member 'ndim' of a type (line 1201)
        ndim_66538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 11), c_66537, 'ndim')
        int_66539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 26), 'int')
        # Applying the binary operator '==' (line 1201)
        result_eq_66540 = python_operator(stypy.reporting.localization.Localization(__file__, 1201, 11), '==', ndim_66538, int_66539)
        
        # Testing the type of an if condition (line 1201)
        if_condition_66541 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1201, 8), result_eq_66540)
        # Assigning a type to the variable 'if_condition_66541' (line 1201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 8), 'if_condition_66541', if_condition_66541)
        # SSA begins for if statement (line 1201)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        int_66542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 21), 'int')
        # Getting the type of 'r' (line 1202)
        r_66543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 19), 'r')
        # Obtaining the member '__getitem__' of a type (line 1202)
        getitem___66544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1202, 19), r_66543, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1202)
        subscript_call_result_66545 = invoke(stypy.reporting.localization.Localization(__file__, 1202, 19), getitem___66544, int_66542)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 12), 'stypy_return_type', subscript_call_result_66545)
        # SSA branch for the else part of an if statement (line 1201)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1204):
        
        # Assigning a Call to a Name (line 1204):
        
        # Call to empty(...): (line 1204)
        # Processing the call arguments (line 1204)
        
        # Call to prod(...): (line 1204)
        # Processing the call arguments (line 1204)
        
        # Obtaining the type of the subscript
        int_66549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 44), 'int')
        slice_66550 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1204, 31), int_66549, None, None)
        # Getting the type of 'self' (line 1204)
        self_66551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 31), 'self', False)
        # Obtaining the member 'c' of a type (line 1204)
        c_66552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1204, 31), self_66551, 'c')
        # Obtaining the member 'shape' of a type (line 1204)
        shape_66553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1204, 31), c_66552, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1204)
        getitem___66554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1204, 31), shape_66553, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1204)
        subscript_call_result_66555 = invoke(stypy.reporting.localization.Localization(__file__, 1204, 31), getitem___66554, slice_66550)
        
        # Processing the call keyword arguments (line 1204)
        kwargs_66556 = {}
        # Getting the type of 'prod' (line 1204)
        prod_66548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 26), 'prod', False)
        # Calling prod(args, kwargs) (line 1204)
        prod_call_result_66557 = invoke(stypy.reporting.localization.Localization(__file__, 1204, 26), prod_66548, *[subscript_call_result_66555], **kwargs_66556)
        
        # Processing the call keyword arguments (line 1204)
        # Getting the type of 'object' (line 1204)
        object_66558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 56), 'object', False)
        keyword_66559 = object_66558
        kwargs_66560 = {'dtype': keyword_66559}
        # Getting the type of 'np' (line 1204)
        np_66546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 17), 'np', False)
        # Obtaining the member 'empty' of a type (line 1204)
        empty_66547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1204, 17), np_66546, 'empty')
        # Calling empty(args, kwargs) (line 1204)
        empty_call_result_66561 = invoke(stypy.reporting.localization.Localization(__file__, 1204, 17), empty_66547, *[prod_call_result_66557], **kwargs_66560)
        
        # Assigning a type to the variable 'r2' (line 1204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 12), 'r2', empty_call_result_66561)
        
        
        # Call to enumerate(...): (line 1207)
        # Processing the call arguments (line 1207)
        # Getting the type of 'r' (line 1207)
        r_66563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 38), 'r', False)
        # Processing the call keyword arguments (line 1207)
        kwargs_66564 = {}
        # Getting the type of 'enumerate' (line 1207)
        enumerate_66562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 28), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1207)
        enumerate_call_result_66565 = invoke(stypy.reporting.localization.Localization(__file__, 1207, 28), enumerate_66562, *[r_66563], **kwargs_66564)
        
        # Testing the type of a for loop iterable (line 1207)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1207, 12), enumerate_call_result_66565)
        # Getting the type of the for loop variable (line 1207)
        for_loop_var_66566 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1207, 12), enumerate_call_result_66565)
        # Assigning a type to the variable 'ii' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 12), 'ii', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1207, 12), for_loop_var_66566))
        # Assigning a type to the variable 'root' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 12), 'root', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1207, 12), for_loop_var_66566))
        # SSA begins for a for statement (line 1207)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Name to a Subscript (line 1208):
        
        # Assigning a Name to a Subscript (line 1208):
        # Getting the type of 'root' (line 1208)
        root_66567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 25), 'root')
        # Getting the type of 'r2' (line 1208)
        r2_66568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 16), 'r2')
        # Getting the type of 'ii' (line 1208)
        ii_66569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 19), 'ii')
        # Storing an element on a container (line 1208)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1208, 16), r2_66568, (ii_66569, root_66567))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to reshape(...): (line 1210)
        # Processing the call arguments (line 1210)
        
        # Obtaining the type of the subscript
        int_66572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 43), 'int')
        slice_66573 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1210, 30), int_66572, None, None)
        # Getting the type of 'self' (line 1210)
        self_66574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 30), 'self', False)
        # Obtaining the member 'c' of a type (line 1210)
        c_66575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 30), self_66574, 'c')
        # Obtaining the member 'shape' of a type (line 1210)
        shape_66576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 30), c_66575, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1210)
        getitem___66577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 30), shape_66576, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1210)
        subscript_call_result_66578 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 30), getitem___66577, slice_66573)
        
        # Processing the call keyword arguments (line 1210)
        kwargs_66579 = {}
        # Getting the type of 'r2' (line 1210)
        r2_66570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 19), 'r2', False)
        # Obtaining the member 'reshape' of a type (line 1210)
        reshape_66571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 19), r2_66570, 'reshape')
        # Calling reshape(args, kwargs) (line 1210)
        reshape_call_result_66580 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 19), reshape_66571, *[subscript_call_result_66578], **kwargs_66579)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 12), 'stypy_return_type', reshape_call_result_66580)
        # SSA join for if statement (line 1201)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'solve(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'solve' in the type store
        # Getting the type of 'stypy_return_type' (line 1140)
        stypy_return_type_66581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66581)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'solve'
        return stypy_return_type_66581


    @norecursion
    def roots(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 1212)
        True_66582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 34), 'True')
        # Getting the type of 'None' (line 1212)
        None_66583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 52), 'None')
        defaults = [True_66582, None_66583]
        # Create a new context for function 'roots'
        module_type_store = module_type_store.open_function_context('roots', 1212, 4, False)
        # Assigning a type to the variable 'self' (line 1213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PPoly.roots.__dict__.__setitem__('stypy_localization', localization)
        PPoly.roots.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PPoly.roots.__dict__.__setitem__('stypy_type_store', module_type_store)
        PPoly.roots.__dict__.__setitem__('stypy_function_name', 'PPoly.roots')
        PPoly.roots.__dict__.__setitem__('stypy_param_names_list', ['discontinuity', 'extrapolate'])
        PPoly.roots.__dict__.__setitem__('stypy_varargs_param_name', None)
        PPoly.roots.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PPoly.roots.__dict__.__setitem__('stypy_call_defaults', defaults)
        PPoly.roots.__dict__.__setitem__('stypy_call_varargs', varargs)
        PPoly.roots.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PPoly.roots.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PPoly.roots', ['discontinuity', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'roots', localization, ['discontinuity', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'roots(...)' code ##################

        str_66584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, (-1)), 'str', "\n        Find real roots of the the piecewise polynomial.\n\n        Parameters\n        ----------\n        discontinuity : bool, optional\n            Whether to report sign changes across discontinuities at\n            breakpoints as roots.\n        extrapolate : {bool, 'periodic', None}, optional\n            If bool, determines whether to return roots from the polynomial\n            extrapolated based on first and last intervals, 'periodic' works\n            the same as False. If None (default), use `self.extrapolate`.\n\n        Returns\n        -------\n        roots : ndarray\n            Roots of the polynomial(s).\n\n            If the PPoly object describes multiple polynomials, the\n            return value is an object array whose each element is an\n            ndarray containing the roots.\n\n        See Also\n        --------\n        PPoly.solve\n        ")
        
        # Call to solve(...): (line 1239)
        # Processing the call arguments (line 1239)
        int_66587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 26), 'int')
        # Getting the type of 'discontinuity' (line 1239)
        discontinuity_66588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 29), 'discontinuity', False)
        # Getting the type of 'extrapolate' (line 1239)
        extrapolate_66589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 44), 'extrapolate', False)
        # Processing the call keyword arguments (line 1239)
        kwargs_66590 = {}
        # Getting the type of 'self' (line 1239)
        self_66585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 15), 'self', False)
        # Obtaining the member 'solve' of a type (line 1239)
        solve_66586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 15), self_66585, 'solve')
        # Calling solve(args, kwargs) (line 1239)
        solve_call_result_66591 = invoke(stypy.reporting.localization.Localization(__file__, 1239, 15), solve_66586, *[int_66587, discontinuity_66588, extrapolate_66589], **kwargs_66590)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'stypy_return_type', solve_call_result_66591)
        
        # ################# End of 'roots(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'roots' in the type store
        # Getting the type of 'stypy_return_type' (line 1212)
        stypy_return_type_66592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66592)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'roots'
        return stypy_return_type_66592


    @norecursion
    def from_spline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1242)
        None_66593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 42), 'None')
        defaults = [None_66593]
        # Create a new context for function 'from_spline'
        module_type_store = module_type_store.open_function_context('from_spline', 1241, 4, False)
        # Assigning a type to the variable 'self' (line 1242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PPoly.from_spline.__dict__.__setitem__('stypy_localization', localization)
        PPoly.from_spline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PPoly.from_spline.__dict__.__setitem__('stypy_type_store', module_type_store)
        PPoly.from_spline.__dict__.__setitem__('stypy_function_name', 'PPoly.from_spline')
        PPoly.from_spline.__dict__.__setitem__('stypy_param_names_list', ['tck', 'extrapolate'])
        PPoly.from_spline.__dict__.__setitem__('stypy_varargs_param_name', None)
        PPoly.from_spline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PPoly.from_spline.__dict__.__setitem__('stypy_call_defaults', defaults)
        PPoly.from_spline.__dict__.__setitem__('stypy_call_varargs', varargs)
        PPoly.from_spline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PPoly.from_spline.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PPoly.from_spline', ['tck', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'from_spline', localization, ['tck', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'from_spline(...)' code ##################

        str_66594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1254, (-1)), 'str', "\n        Construct a piecewise polynomial from a spline\n\n        Parameters\n        ----------\n        tck\n            A spline, as returned by `splrep` or a BSpline object.\n        extrapolate : bool or 'periodic', optional\n            If bool, determines whether to extrapolate to out-of-bounds points\n            based on first and last intervals, or to return NaNs.\n            If 'periodic', periodic extrapolation is used. Default is True.\n        ")
        
        
        # Call to isinstance(...): (line 1255)
        # Processing the call arguments (line 1255)
        # Getting the type of 'tck' (line 1255)
        tck_66596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 22), 'tck', False)
        # Getting the type of 'BSpline' (line 1255)
        BSpline_66597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 27), 'BSpline', False)
        # Processing the call keyword arguments (line 1255)
        kwargs_66598 = {}
        # Getting the type of 'isinstance' (line 1255)
        isinstance_66595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1255)
        isinstance_call_result_66599 = invoke(stypy.reporting.localization.Localization(__file__, 1255, 11), isinstance_66595, *[tck_66596, BSpline_66597], **kwargs_66598)
        
        # Testing the type of an if condition (line 1255)
        if_condition_66600 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1255, 8), isinstance_call_result_66599)
        # Assigning a type to the variable 'if_condition_66600' (line 1255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'if_condition_66600', if_condition_66600)
        # SSA begins for if statement (line 1255)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 1256):
        
        # Assigning a Subscript to a Name (line 1256):
        
        # Obtaining the type of the subscript
        int_66601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 12), 'int')
        # Getting the type of 'tck' (line 1256)
        tck_66602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 22), 'tck')
        # Obtaining the member 'tck' of a type (line 1256)
        tck_66603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 22), tck_66602, 'tck')
        # Obtaining the member '__getitem__' of a type (line 1256)
        getitem___66604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 12), tck_66603, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1256)
        subscript_call_result_66605 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 12), getitem___66604, int_66601)
        
        # Assigning a type to the variable 'tuple_var_assignment_63617' (line 1256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 12), 'tuple_var_assignment_63617', subscript_call_result_66605)
        
        # Assigning a Subscript to a Name (line 1256):
        
        # Obtaining the type of the subscript
        int_66606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 12), 'int')
        # Getting the type of 'tck' (line 1256)
        tck_66607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 22), 'tck')
        # Obtaining the member 'tck' of a type (line 1256)
        tck_66608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 22), tck_66607, 'tck')
        # Obtaining the member '__getitem__' of a type (line 1256)
        getitem___66609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 12), tck_66608, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1256)
        subscript_call_result_66610 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 12), getitem___66609, int_66606)
        
        # Assigning a type to the variable 'tuple_var_assignment_63618' (line 1256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 12), 'tuple_var_assignment_63618', subscript_call_result_66610)
        
        # Assigning a Subscript to a Name (line 1256):
        
        # Obtaining the type of the subscript
        int_66611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 12), 'int')
        # Getting the type of 'tck' (line 1256)
        tck_66612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 22), 'tck')
        # Obtaining the member 'tck' of a type (line 1256)
        tck_66613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 22), tck_66612, 'tck')
        # Obtaining the member '__getitem__' of a type (line 1256)
        getitem___66614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 12), tck_66613, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1256)
        subscript_call_result_66615 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 12), getitem___66614, int_66611)
        
        # Assigning a type to the variable 'tuple_var_assignment_63619' (line 1256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 12), 'tuple_var_assignment_63619', subscript_call_result_66615)
        
        # Assigning a Name to a Name (line 1256):
        # Getting the type of 'tuple_var_assignment_63617' (line 1256)
        tuple_var_assignment_63617_66616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 12), 'tuple_var_assignment_63617')
        # Assigning a type to the variable 't' (line 1256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 12), 't', tuple_var_assignment_63617_66616)
        
        # Assigning a Name to a Name (line 1256):
        # Getting the type of 'tuple_var_assignment_63618' (line 1256)
        tuple_var_assignment_63618_66617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 12), 'tuple_var_assignment_63618')
        # Assigning a type to the variable 'c' (line 1256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 15), 'c', tuple_var_assignment_63618_66617)
        
        # Assigning a Name to a Name (line 1256):
        # Getting the type of 'tuple_var_assignment_63619' (line 1256)
        tuple_var_assignment_63619_66618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 12), 'tuple_var_assignment_63619')
        # Assigning a type to the variable 'k' (line 1256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 18), 'k', tuple_var_assignment_63619_66618)
        
        # Type idiom detected: calculating its left and rigth part (line 1257)
        # Getting the type of 'extrapolate' (line 1257)
        extrapolate_66619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 15), 'extrapolate')
        # Getting the type of 'None' (line 1257)
        None_66620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 30), 'None')
        
        (may_be_66621, more_types_in_union_66622) = may_be_none(extrapolate_66619, None_66620)

        if may_be_66621:

            if more_types_in_union_66622:
                # Runtime conditional SSA (line 1257)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1258):
            
            # Assigning a Attribute to a Name (line 1258):
            # Getting the type of 'tck' (line 1258)
            tck_66623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 30), 'tck')
            # Obtaining the member 'extrapolate' of a type (line 1258)
            extrapolate_66624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1258, 30), tck_66623, 'extrapolate')
            # Assigning a type to the variable 'extrapolate' (line 1258)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 16), 'extrapolate', extrapolate_66624)

            if more_types_in_union_66622:
                # SSA join for if statement (line 1257)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA branch for the else part of an if statement (line 1255)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Tuple (line 1260):
        
        # Assigning a Subscript to a Name (line 1260):
        
        # Obtaining the type of the subscript
        int_66625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1260, 12), 'int')
        # Getting the type of 'tck' (line 1260)
        tck_66626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 22), 'tck')
        # Obtaining the member '__getitem__' of a type (line 1260)
        getitem___66627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 12), tck_66626, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1260)
        subscript_call_result_66628 = invoke(stypy.reporting.localization.Localization(__file__, 1260, 12), getitem___66627, int_66625)
        
        # Assigning a type to the variable 'tuple_var_assignment_63620' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 12), 'tuple_var_assignment_63620', subscript_call_result_66628)
        
        # Assigning a Subscript to a Name (line 1260):
        
        # Obtaining the type of the subscript
        int_66629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1260, 12), 'int')
        # Getting the type of 'tck' (line 1260)
        tck_66630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 22), 'tck')
        # Obtaining the member '__getitem__' of a type (line 1260)
        getitem___66631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 12), tck_66630, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1260)
        subscript_call_result_66632 = invoke(stypy.reporting.localization.Localization(__file__, 1260, 12), getitem___66631, int_66629)
        
        # Assigning a type to the variable 'tuple_var_assignment_63621' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 12), 'tuple_var_assignment_63621', subscript_call_result_66632)
        
        # Assigning a Subscript to a Name (line 1260):
        
        # Obtaining the type of the subscript
        int_66633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1260, 12), 'int')
        # Getting the type of 'tck' (line 1260)
        tck_66634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 22), 'tck')
        # Obtaining the member '__getitem__' of a type (line 1260)
        getitem___66635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1260, 12), tck_66634, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1260)
        subscript_call_result_66636 = invoke(stypy.reporting.localization.Localization(__file__, 1260, 12), getitem___66635, int_66633)
        
        # Assigning a type to the variable 'tuple_var_assignment_63622' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 12), 'tuple_var_assignment_63622', subscript_call_result_66636)
        
        # Assigning a Name to a Name (line 1260):
        # Getting the type of 'tuple_var_assignment_63620' (line 1260)
        tuple_var_assignment_63620_66637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 12), 'tuple_var_assignment_63620')
        # Assigning a type to the variable 't' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 12), 't', tuple_var_assignment_63620_66637)
        
        # Assigning a Name to a Name (line 1260):
        # Getting the type of 'tuple_var_assignment_63621' (line 1260)
        tuple_var_assignment_63621_66638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 12), 'tuple_var_assignment_63621')
        # Assigning a type to the variable 'c' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 15), 'c', tuple_var_assignment_63621_66638)
        
        # Assigning a Name to a Name (line 1260):
        # Getting the type of 'tuple_var_assignment_63622' (line 1260)
        tuple_var_assignment_63622_66639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 12), 'tuple_var_assignment_63622')
        # Assigning a type to the variable 'k' (line 1260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1260, 18), 'k', tuple_var_assignment_63622_66639)
        # SSA join for if statement (line 1255)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1262):
        
        # Assigning a Call to a Name (line 1262):
        
        # Call to empty(...): (line 1262)
        # Processing the call arguments (line 1262)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1262)
        tuple_66642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1262, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1262)
        # Adding element type (line 1262)
        # Getting the type of 'k' (line 1262)
        k_66643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 26), 'k', False)
        int_66644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1262, 30), 'int')
        # Applying the binary operator '+' (line 1262)
        result_add_66645 = python_operator(stypy.reporting.localization.Localization(__file__, 1262, 26), '+', k_66643, int_66644)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1262, 26), tuple_66642, result_add_66645)
        # Adding element type (line 1262)
        
        # Call to len(...): (line 1262)
        # Processing the call arguments (line 1262)
        # Getting the type of 't' (line 1262)
        t_66647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 37), 't', False)
        # Processing the call keyword arguments (line 1262)
        kwargs_66648 = {}
        # Getting the type of 'len' (line 1262)
        len_66646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 33), 'len', False)
        # Calling len(args, kwargs) (line 1262)
        len_call_result_66649 = invoke(stypy.reporting.localization.Localization(__file__, 1262, 33), len_66646, *[t_66647], **kwargs_66648)
        
        int_66650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1262, 40), 'int')
        # Applying the binary operator '-' (line 1262)
        result_sub_66651 = python_operator(stypy.reporting.localization.Localization(__file__, 1262, 33), '-', len_call_result_66649, int_66650)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1262, 26), tuple_66642, result_sub_66651)
        
        # Processing the call keyword arguments (line 1262)
        # Getting the type of 'c' (line 1262)
        c_66652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 50), 'c', False)
        # Obtaining the member 'dtype' of a type (line 1262)
        dtype_66653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1262, 50), c_66652, 'dtype')
        keyword_66654 = dtype_66653
        kwargs_66655 = {'dtype': keyword_66654}
        # Getting the type of 'np' (line 1262)
        np_66640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 16), 'np', False)
        # Obtaining the member 'empty' of a type (line 1262)
        empty_66641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1262, 16), np_66640, 'empty')
        # Calling empty(args, kwargs) (line 1262)
        empty_call_result_66656 = invoke(stypy.reporting.localization.Localization(__file__, 1262, 16), empty_66641, *[tuple_66642], **kwargs_66655)
        
        # Assigning a type to the variable 'cvals' (line 1262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1262, 8), 'cvals', empty_call_result_66656)
        
        
        # Call to xrange(...): (line 1263)
        # Processing the call arguments (line 1263)
        # Getting the type of 'k' (line 1263)
        k_66658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 24), 'k', False)
        int_66659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1263, 27), 'int')
        int_66660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1263, 31), 'int')
        # Processing the call keyword arguments (line 1263)
        kwargs_66661 = {}
        # Getting the type of 'xrange' (line 1263)
        xrange_66657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 1263)
        xrange_call_result_66662 = invoke(stypy.reporting.localization.Localization(__file__, 1263, 17), xrange_66657, *[k_66658, int_66659, int_66660], **kwargs_66661)
        
        # Testing the type of a for loop iterable (line 1263)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1263, 8), xrange_call_result_66662)
        # Getting the type of the for loop variable (line 1263)
        for_loop_var_66663 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1263, 8), xrange_call_result_66662)
        # Assigning a type to the variable 'm' (line 1263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 8), 'm', for_loop_var_66663)
        # SSA begins for a for statement (line 1263)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1264):
        
        # Assigning a Call to a Name (line 1264):
        
        # Call to splev(...): (line 1264)
        # Processing the call arguments (line 1264)
        
        # Obtaining the type of the subscript
        int_66666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1264, 33), 'int')
        slice_66667 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1264, 30), None, int_66666, None)
        # Getting the type of 't' (line 1264)
        t_66668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 30), 't', False)
        # Obtaining the member '__getitem__' of a type (line 1264)
        getitem___66669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 30), t_66668, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1264)
        subscript_call_result_66670 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 30), getitem___66669, slice_66667)
        
        # Getting the type of 'tck' (line 1264)
        tck_66671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 38), 'tck', False)
        # Processing the call keyword arguments (line 1264)
        # Getting the type of 'm' (line 1264)
        m_66672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 47), 'm', False)
        keyword_66673 = m_66672
        kwargs_66674 = {'der': keyword_66673}
        # Getting the type of 'fitpack' (line 1264)
        fitpack_66664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 16), 'fitpack', False)
        # Obtaining the member 'splev' of a type (line 1264)
        splev_66665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1264, 16), fitpack_66664, 'splev')
        # Calling splev(args, kwargs) (line 1264)
        splev_call_result_66675 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 16), splev_66665, *[subscript_call_result_66670, tck_66671], **kwargs_66674)
        
        # Assigning a type to the variable 'y' (line 1264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 12), 'y', splev_call_result_66675)
        
        # Assigning a BinOp to a Subscript (line 1265):
        
        # Assigning a BinOp to a Subscript (line 1265):
        # Getting the type of 'y' (line 1265)
        y_66676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 30), 'y')
        
        # Call to gamma(...): (line 1265)
        # Processing the call arguments (line 1265)
        # Getting the type of 'm' (line 1265)
        m_66679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 43), 'm', False)
        int_66680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1265, 45), 'int')
        # Applying the binary operator '+' (line 1265)
        result_add_66681 = python_operator(stypy.reporting.localization.Localization(__file__, 1265, 43), '+', m_66679, int_66680)
        
        # Processing the call keyword arguments (line 1265)
        kwargs_66682 = {}
        # Getting the type of 'spec' (line 1265)
        spec_66677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 32), 'spec', False)
        # Obtaining the member 'gamma' of a type (line 1265)
        gamma_66678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 32), spec_66677, 'gamma')
        # Calling gamma(args, kwargs) (line 1265)
        gamma_call_result_66683 = invoke(stypy.reporting.localization.Localization(__file__, 1265, 32), gamma_66678, *[result_add_66681], **kwargs_66682)
        
        # Applying the binary operator 'div' (line 1265)
        result_div_66684 = python_operator(stypy.reporting.localization.Localization(__file__, 1265, 30), 'div', y_66676, gamma_call_result_66683)
        
        # Getting the type of 'cvals' (line 1265)
        cvals_66685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 12), 'cvals')
        # Getting the type of 'k' (line 1265)
        k_66686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 18), 'k')
        # Getting the type of 'm' (line 1265)
        m_66687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 22), 'm')
        # Applying the binary operator '-' (line 1265)
        result_sub_66688 = python_operator(stypy.reporting.localization.Localization(__file__, 1265, 18), '-', k_66686, m_66687)
        
        slice_66689 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1265, 12), None, None, None)
        # Storing an element on a container (line 1265)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1265, 12), cvals_66685, ((result_sub_66688, slice_66689), result_div_66684))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to construct_fast(...): (line 1267)
        # Processing the call arguments (line 1267)
        # Getting the type of 'cvals' (line 1267)
        cvals_66692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 34), 'cvals', False)
        # Getting the type of 't' (line 1267)
        t_66693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 41), 't', False)
        # Getting the type of 'extrapolate' (line 1267)
        extrapolate_66694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 44), 'extrapolate', False)
        # Processing the call keyword arguments (line 1267)
        kwargs_66695 = {}
        # Getting the type of 'cls' (line 1267)
        cls_66690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 15), 'cls', False)
        # Obtaining the member 'construct_fast' of a type (line 1267)
        construct_fast_66691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 15), cls_66690, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 1267)
        construct_fast_call_result_66696 = invoke(stypy.reporting.localization.Localization(__file__, 1267, 15), construct_fast_66691, *[cvals_66692, t_66693, extrapolate_66694], **kwargs_66695)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 8), 'stypy_return_type', construct_fast_call_result_66696)
        
        # ################# End of 'from_spline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'from_spline' in the type store
        # Getting the type of 'stypy_return_type' (line 1241)
        stypy_return_type_66697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66697)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'from_spline'
        return stypy_return_type_66697


    @norecursion
    def from_bernstein_basis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1270)
        None_66698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 50), 'None')
        defaults = [None_66698]
        # Create a new context for function 'from_bernstein_basis'
        module_type_store = module_type_store.open_function_context('from_bernstein_basis', 1269, 4, False)
        # Assigning a type to the variable 'self' (line 1270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PPoly.from_bernstein_basis.__dict__.__setitem__('stypy_localization', localization)
        PPoly.from_bernstein_basis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PPoly.from_bernstein_basis.__dict__.__setitem__('stypy_type_store', module_type_store)
        PPoly.from_bernstein_basis.__dict__.__setitem__('stypy_function_name', 'PPoly.from_bernstein_basis')
        PPoly.from_bernstein_basis.__dict__.__setitem__('stypy_param_names_list', ['bp', 'extrapolate'])
        PPoly.from_bernstein_basis.__dict__.__setitem__('stypy_varargs_param_name', None)
        PPoly.from_bernstein_basis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PPoly.from_bernstein_basis.__dict__.__setitem__('stypy_call_defaults', defaults)
        PPoly.from_bernstein_basis.__dict__.__setitem__('stypy_call_varargs', varargs)
        PPoly.from_bernstein_basis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PPoly.from_bernstein_basis.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PPoly.from_bernstein_basis', ['bp', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'from_bernstein_basis', localization, ['bp', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'from_bernstein_basis(...)' code ##################

        str_66699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, (-1)), 'str', "\n        Construct a piecewise polynomial in the power basis\n        from a polynomial in Bernstein basis.\n\n        Parameters\n        ----------\n        bp : BPoly\n            A Bernstein basis polynomial, as created by BPoly\n        extrapolate : bool or 'periodic', optional\n            If bool, determines whether to extrapolate to out-of-bounds points\n            based on first and last intervals, or to return NaNs.\n            If 'periodic', periodic extrapolation is used. Default is True.\n        ")
        
        # Assigning a Call to a Name (line 1284):
        
        # Assigning a Call to a Name (line 1284):
        
        # Call to diff(...): (line 1284)
        # Processing the call arguments (line 1284)
        # Getting the type of 'bp' (line 1284)
        bp_66702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 21), 'bp', False)
        # Obtaining the member 'x' of a type (line 1284)
        x_66703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 21), bp_66702, 'x')
        # Processing the call keyword arguments (line 1284)
        kwargs_66704 = {}
        # Getting the type of 'np' (line 1284)
        np_66700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 13), 'np', False)
        # Obtaining the member 'diff' of a type (line 1284)
        diff_66701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 13), np_66700, 'diff')
        # Calling diff(args, kwargs) (line 1284)
        diff_call_result_66705 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 13), diff_66701, *[x_66703], **kwargs_66704)
        
        # Assigning a type to the variable 'dx' (line 1284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1284, 8), 'dx', diff_call_result_66705)
        
        # Assigning a BinOp to a Name (line 1285):
        
        # Assigning a BinOp to a Name (line 1285):
        
        # Obtaining the type of the subscript
        int_66706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1285, 23), 'int')
        # Getting the type of 'bp' (line 1285)
        bp_66707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 12), 'bp')
        # Obtaining the member 'c' of a type (line 1285)
        c_66708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 12), bp_66707, 'c')
        # Obtaining the member 'shape' of a type (line 1285)
        shape_66709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 12), c_66708, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1285)
        getitem___66710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 12), shape_66709, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1285)
        subscript_call_result_66711 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 12), getitem___66710, int_66706)
        
        int_66712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1285, 28), 'int')
        # Applying the binary operator '-' (line 1285)
        result_sub_66713 = python_operator(stypy.reporting.localization.Localization(__file__, 1285, 12), '-', subscript_call_result_66711, int_66712)
        
        # Assigning a type to the variable 'k' (line 1285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 8), 'k', result_sub_66713)
        
        # Assigning a BinOp to a Name (line 1287):
        
        # Assigning a BinOp to a Name (line 1287):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1287)
        tuple_66714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1287)
        # Adding element type (line 1287)
        # Getting the type of 'None' (line 1287)
        None_66715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 16), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 16), tuple_66714, None_66715)
        
        # Getting the type of 'bp' (line 1287)
        bp_66716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 24), 'bp')
        # Obtaining the member 'c' of a type (line 1287)
        c_66717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 24), bp_66716, 'c')
        # Obtaining the member 'ndim' of a type (line 1287)
        ndim_66718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 24), c_66717, 'ndim')
        int_66719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 34), 'int')
        # Applying the binary operator '-' (line 1287)
        result_sub_66720 = python_operator(stypy.reporting.localization.Localization(__file__, 1287, 24), '-', ndim_66718, int_66719)
        
        # Applying the binary operator '*' (line 1287)
        result_mul_66721 = python_operator(stypy.reporting.localization.Localization(__file__, 1287, 15), '*', tuple_66714, result_sub_66720)
        
        # Assigning a type to the variable 'rest' (line 1287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 8), 'rest', result_mul_66721)
        
        # Assigning a Call to a Name (line 1289):
        
        # Assigning a Call to a Name (line 1289):
        
        # Call to zeros_like(...): (line 1289)
        # Processing the call arguments (line 1289)
        # Getting the type of 'bp' (line 1289)
        bp_66724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 26), 'bp', False)
        # Obtaining the member 'c' of a type (line 1289)
        c_66725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 26), bp_66724, 'c')
        # Processing the call keyword arguments (line 1289)
        kwargs_66726 = {}
        # Getting the type of 'np' (line 1289)
        np_66722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 12), 'np', False)
        # Obtaining the member 'zeros_like' of a type (line 1289)
        zeros_like_66723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 12), np_66722, 'zeros_like')
        # Calling zeros_like(args, kwargs) (line 1289)
        zeros_like_call_result_66727 = invoke(stypy.reporting.localization.Localization(__file__, 1289, 12), zeros_like_66723, *[c_66725], **kwargs_66726)
        
        # Assigning a type to the variable 'c' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'c', zeros_like_call_result_66727)
        
        
        # Call to range(...): (line 1290)
        # Processing the call arguments (line 1290)
        # Getting the type of 'k' (line 1290)
        k_66729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 23), 'k', False)
        int_66730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 25), 'int')
        # Applying the binary operator '+' (line 1290)
        result_add_66731 = python_operator(stypy.reporting.localization.Localization(__file__, 1290, 23), '+', k_66729, int_66730)
        
        # Processing the call keyword arguments (line 1290)
        kwargs_66732 = {}
        # Getting the type of 'range' (line 1290)
        range_66728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 17), 'range', False)
        # Calling range(args, kwargs) (line 1290)
        range_call_result_66733 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 17), range_66728, *[result_add_66731], **kwargs_66732)
        
        # Testing the type of a for loop iterable (line 1290)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1290, 8), range_call_result_66733)
        # Getting the type of the for loop variable (line 1290)
        for_loop_var_66734 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1290, 8), range_call_result_66733)
        # Assigning a type to the variable 'a' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'a', for_loop_var_66734)
        # SSA begins for a for statement (line 1290)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 1291):
        
        # Assigning a BinOp to a Name (line 1291):
        int_66735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 22), 'int')
        # Getting the type of 'a' (line 1291)
        a_66736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 27), 'a')
        # Applying the binary operator '**' (line 1291)
        result_pow_66737 = python_operator(stypy.reporting.localization.Localization(__file__, 1291, 21), '**', int_66735, a_66736)
        
        
        # Call to comb(...): (line 1291)
        # Processing the call arguments (line 1291)
        # Getting the type of 'k' (line 1291)
        k_66739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 36), 'k', False)
        # Getting the type of 'a' (line 1291)
        a_66740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 39), 'a', False)
        # Processing the call keyword arguments (line 1291)
        kwargs_66741 = {}
        # Getting the type of 'comb' (line 1291)
        comb_66738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 31), 'comb', False)
        # Calling comb(args, kwargs) (line 1291)
        comb_call_result_66742 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 31), comb_66738, *[k_66739, a_66740], **kwargs_66741)
        
        # Applying the binary operator '*' (line 1291)
        result_mul_66743 = python_operator(stypy.reporting.localization.Localization(__file__, 1291, 21), '*', result_pow_66737, comb_call_result_66742)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'a' (line 1291)
        a_66744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 49), 'a')
        # Getting the type of 'bp' (line 1291)
        bp_66745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 44), 'bp')
        # Obtaining the member 'c' of a type (line 1291)
        c_66746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 44), bp_66745, 'c')
        # Obtaining the member '__getitem__' of a type (line 1291)
        getitem___66747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 44), c_66746, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1291)
        subscript_call_result_66748 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 44), getitem___66747, a_66744)
        
        # Applying the binary operator '*' (line 1291)
        result_mul_66749 = python_operator(stypy.reporting.localization.Localization(__file__, 1291, 42), '*', result_mul_66743, subscript_call_result_66748)
        
        # Assigning a type to the variable 'factor' (line 1291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 12), 'factor', result_mul_66749)
        
        
        # Call to range(...): (line 1292)
        # Processing the call arguments (line 1292)
        # Getting the type of 'a' (line 1292)
        a_66751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 27), 'a', False)
        # Getting the type of 'k' (line 1292)
        k_66752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 30), 'k', False)
        int_66753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, 32), 'int')
        # Applying the binary operator '+' (line 1292)
        result_add_66754 = python_operator(stypy.reporting.localization.Localization(__file__, 1292, 30), '+', k_66752, int_66753)
        
        # Processing the call keyword arguments (line 1292)
        kwargs_66755 = {}
        # Getting the type of 'range' (line 1292)
        range_66750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 21), 'range', False)
        # Calling range(args, kwargs) (line 1292)
        range_call_result_66756 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 21), range_66750, *[a_66751, result_add_66754], **kwargs_66755)
        
        # Testing the type of a for loop iterable (line 1292)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1292, 12), range_call_result_66756)
        # Getting the type of the for loop variable (line 1292)
        for_loop_var_66757 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1292, 12), range_call_result_66756)
        # Assigning a type to the variable 's' (line 1292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 12), 's', for_loop_var_66757)
        # SSA begins for a for statement (line 1292)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 1293):
        
        # Assigning a BinOp to a Name (line 1293):
        
        # Call to comb(...): (line 1293)
        # Processing the call arguments (line 1293)
        # Getting the type of 'k' (line 1293)
        k_66759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 27), 'k', False)
        # Getting the type of 'a' (line 1293)
        a_66760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 29), 'a', False)
        # Applying the binary operator '-' (line 1293)
        result_sub_66761 = python_operator(stypy.reporting.localization.Localization(__file__, 1293, 27), '-', k_66759, a_66760)
        
        # Getting the type of 's' (line 1293)
        s_66762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 32), 's', False)
        # Getting the type of 'a' (line 1293)
        a_66763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 34), 'a', False)
        # Applying the binary operator '-' (line 1293)
        result_sub_66764 = python_operator(stypy.reporting.localization.Localization(__file__, 1293, 32), '-', s_66762, a_66763)
        
        # Processing the call keyword arguments (line 1293)
        kwargs_66765 = {}
        # Getting the type of 'comb' (line 1293)
        comb_66758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 22), 'comb', False)
        # Calling comb(args, kwargs) (line 1293)
        comb_call_result_66766 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 22), comb_66758, *[result_sub_66761, result_sub_66764], **kwargs_66765)
        
        int_66767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1293, 40), 'int')
        # Getting the type of 's' (line 1293)
        s_66768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 45), 's')
        # Applying the binary operator '**' (line 1293)
        result_pow_66769 = python_operator(stypy.reporting.localization.Localization(__file__, 1293, 39), '**', int_66767, s_66768)
        
        # Applying the binary operator '*' (line 1293)
        result_mul_66770 = python_operator(stypy.reporting.localization.Localization(__file__, 1293, 22), '*', comb_call_result_66766, result_pow_66769)
        
        # Assigning a type to the variable 'val' (line 1293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 16), 'val', result_mul_66770)
        
        # Getting the type of 'c' (line 1294)
        c_66771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 16), 'c')
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1294)
        k_66772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 18), 'k')
        # Getting the type of 's' (line 1294)
        s_66773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 20), 's')
        # Applying the binary operator '-' (line 1294)
        result_sub_66774 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 18), '-', k_66772, s_66773)
        
        # Getting the type of 'c' (line 1294)
        c_66775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 16), 'c')
        # Obtaining the member '__getitem__' of a type (line 1294)
        getitem___66776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 16), c_66775, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1294)
        subscript_call_result_66777 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 16), getitem___66776, result_sub_66774)
        
        # Getting the type of 'factor' (line 1294)
        factor_66778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 26), 'factor')
        # Getting the type of 'val' (line 1294)
        val_66779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 35), 'val')
        # Applying the binary operator '*' (line 1294)
        result_mul_66780 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 26), '*', factor_66778, val_66779)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1294)
        tuple_66781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1294)
        # Adding element type (line 1294)
        
        # Call to slice(...): (line 1294)
        # Processing the call arguments (line 1294)
        # Getting the type of 'None' (line 1294)
        None_66783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 51), 'None', False)
        # Processing the call keyword arguments (line 1294)
        kwargs_66784 = {}
        # Getting the type of 'slice' (line 1294)
        slice_66782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 45), 'slice', False)
        # Calling slice(args, kwargs) (line 1294)
        slice_call_result_66785 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 45), slice_66782, *[None_66783], **kwargs_66784)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1294, 45), tuple_66781, slice_call_result_66785)
        
        # Getting the type of 'rest' (line 1294)
        rest_66786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 59), 'rest')
        # Applying the binary operator '+' (line 1294)
        result_add_66787 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 44), '+', tuple_66781, rest_66786)
        
        # Getting the type of 'dx' (line 1294)
        dx_66788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 41), 'dx')
        # Obtaining the member '__getitem__' of a type (line 1294)
        getitem___66789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 41), dx_66788, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1294)
        subscript_call_result_66790 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 41), getitem___66789, result_add_66787)
        
        # Getting the type of 's' (line 1294)
        s_66791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 66), 's')
        # Applying the binary operator '**' (line 1294)
        result_pow_66792 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 41), '**', subscript_call_result_66790, s_66791)
        
        # Applying the binary operator 'div' (line 1294)
        result_div_66793 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 39), 'div', result_mul_66780, result_pow_66792)
        
        # Applying the binary operator '+=' (line 1294)
        result_iadd_66794 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 16), '+=', subscript_call_result_66777, result_div_66793)
        # Getting the type of 'c' (line 1294)
        c_66795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 16), 'c')
        # Getting the type of 'k' (line 1294)
        k_66796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 18), 'k')
        # Getting the type of 's' (line 1294)
        s_66797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 20), 's')
        # Applying the binary operator '-' (line 1294)
        result_sub_66798 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 18), '-', k_66796, s_66797)
        
        # Storing an element on a container (line 1294)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1294, 16), c_66795, (result_sub_66798, result_iadd_66794))
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1296)
        # Getting the type of 'extrapolate' (line 1296)
        extrapolate_66799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 11), 'extrapolate')
        # Getting the type of 'None' (line 1296)
        None_66800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 26), 'None')
        
        (may_be_66801, more_types_in_union_66802) = may_be_none(extrapolate_66799, None_66800)

        if may_be_66801:

            if more_types_in_union_66802:
                # Runtime conditional SSA (line 1296)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1297):
            
            # Assigning a Attribute to a Name (line 1297):
            # Getting the type of 'bp' (line 1297)
            bp_66803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 26), 'bp')
            # Obtaining the member 'extrapolate' of a type (line 1297)
            extrapolate_66804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 26), bp_66803, 'extrapolate')
            # Assigning a type to the variable 'extrapolate' (line 1297)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'extrapolate', extrapolate_66804)

            if more_types_in_union_66802:
                # SSA join for if statement (line 1296)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to construct_fast(...): (line 1299)
        # Processing the call arguments (line 1299)
        # Getting the type of 'c' (line 1299)
        c_66807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 34), 'c', False)
        # Getting the type of 'bp' (line 1299)
        bp_66808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 37), 'bp', False)
        # Obtaining the member 'x' of a type (line 1299)
        x_66809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 37), bp_66808, 'x')
        # Getting the type of 'extrapolate' (line 1299)
        extrapolate_66810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 43), 'extrapolate', False)
        # Getting the type of 'bp' (line 1299)
        bp_66811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 56), 'bp', False)
        # Obtaining the member 'axis' of a type (line 1299)
        axis_66812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 56), bp_66811, 'axis')
        # Processing the call keyword arguments (line 1299)
        kwargs_66813 = {}
        # Getting the type of 'cls' (line 1299)
        cls_66805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 15), 'cls', False)
        # Obtaining the member 'construct_fast' of a type (line 1299)
        construct_fast_66806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 15), cls_66805, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 1299)
        construct_fast_call_result_66814 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 15), construct_fast_66806, *[c_66807, x_66809, extrapolate_66810, axis_66812], **kwargs_66813)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 8), 'stypy_return_type', construct_fast_call_result_66814)
        
        # ################# End of 'from_bernstein_basis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'from_bernstein_basis' in the type store
        # Getting the type of 'stypy_return_type' (line 1269)
        stypy_return_type_66815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66815)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'from_bernstein_basis'
        return stypy_return_type_66815


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 897, 0, False)
        # Assigning a type to the variable 'self' (line 898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PPoly.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'PPoly' (line 897)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 0), 'PPoly', PPoly)
# Declaration of the 'BPoly' class
# Getting the type of '_PPolyBase' (line 1302)
_PPolyBase_66816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 12), '_PPolyBase')

class BPoly(_PPolyBase_66816, ):
    str_66817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1384, (-1)), 'str', "Piecewise polynomial in terms of coefficients and breakpoints.\n\n    The polynomial between ``x[i]`` and ``x[i + 1]`` is written in the\n    Bernstein polynomial basis::\n\n        S = sum(c[a, i] * b(a, k; x) for a in range(k+1)),\n\n    where ``k`` is the degree of the polynomial, and::\n\n        b(a, k; x) = binom(k, a) * t**a * (1 - t)**(k - a),\n\n    with ``t = (x - x[i]) / (x[i+1] - x[i])`` and ``binom`` is the binomial\n    coefficient.\n\n    Parameters\n    ----------\n    c : ndarray, shape (k, m, ...)\n        Polynomial coefficients, order `k` and `m` intervals\n    x : ndarray, shape (m+1,)\n        Polynomial breakpoints. Must be sorted in either increasing or\n        decreasing order.\n    extrapolate : bool, optional\n        If bool, determines whether to extrapolate to out-of-bounds points\n        based on first and last intervals, or to return NaNs. If 'periodic',\n        periodic extrapolation is used. Default is True.\n    axis : int, optional\n        Interpolation axis. Default is zero.\n\n    Attributes\n    ----------\n    x : ndarray\n        Breakpoints.\n    c : ndarray\n        Coefficients of the polynomials. They are reshaped\n        to a 3-dimensional array with the last dimension representing\n        the trailing dimensions of the original coefficient array.\n    axis : int\n        Interpolation axis.\n\n    Methods\n    -------\n    __call__\n    extend\n    derivative\n    antiderivative\n    integrate\n    construct_fast\n    from_power_basis\n    from_derivatives\n\n    See also\n    --------\n    PPoly : piecewise polynomials in the power basis\n\n    Notes\n    -----\n    Properties of Bernstein polynomials are well documented in the literature.\n    Here's a non-exhaustive list:\n\n    .. [1] http://en.wikipedia.org/wiki/Bernstein_polynomial\n\n    .. [2] Kenneth I. Joy, Bernstein polynomials,\n      http://www.idav.ucdavis.edu/education/CAGDNotes/Bernstein-Polynomials.pdf\n\n    .. [3] E. H. Doha, A. H. Bhrawy, and M. A. Saker, Boundary Value Problems,\n         vol 2011, article ID 829546, :doi:`10.1155/2011/829543`.\n\n    Examples\n    --------\n    >>> from scipy.interpolate import BPoly\n    >>> x = [0, 1]\n    >>> c = [[1], [2], [3]]\n    >>> bp = BPoly(c, x)\n\n    This creates a 2nd order polynomial\n\n    .. math::\n\n        B(x) = 1 \\times b_{0, 2}(x) + 2 \\times b_{1, 2}(x) + 3 \\times b_{2, 2}(x) \\\\\n             = 1 \\times (1-x)^2 + 2 \\times 2 x (1 - x) + 3 \\times x^2\n\n    ")

    @norecursion
    def _evaluate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_evaluate'
        module_type_store = module_type_store.open_function_context('_evaluate', 1386, 4, False)
        # Assigning a type to the variable 'self' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BPoly._evaluate.__dict__.__setitem__('stypy_localization', localization)
        BPoly._evaluate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BPoly._evaluate.__dict__.__setitem__('stypy_type_store', module_type_store)
        BPoly._evaluate.__dict__.__setitem__('stypy_function_name', 'BPoly._evaluate')
        BPoly._evaluate.__dict__.__setitem__('stypy_param_names_list', ['x', 'nu', 'extrapolate', 'out'])
        BPoly._evaluate.__dict__.__setitem__('stypy_varargs_param_name', None)
        BPoly._evaluate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BPoly._evaluate.__dict__.__setitem__('stypy_call_defaults', defaults)
        BPoly._evaluate.__dict__.__setitem__('stypy_call_varargs', varargs)
        BPoly._evaluate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BPoly._evaluate.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BPoly._evaluate', ['x', 'nu', 'extrapolate', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_evaluate', localization, ['x', 'nu', 'extrapolate', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_evaluate(...)' code ##################

        
        # Call to evaluate_bernstein(...): (line 1387)
        # Processing the call arguments (line 1387)
        
        # Call to reshape(...): (line 1388)
        # Processing the call arguments (line 1388)
        
        # Obtaining the type of the subscript
        int_66823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 40), 'int')
        # Getting the type of 'self' (line 1388)
        self_66824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 27), 'self', False)
        # Obtaining the member 'c' of a type (line 1388)
        c_66825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 27), self_66824, 'c')
        # Obtaining the member 'shape' of a type (line 1388)
        shape_66826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 27), c_66825, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1388)
        getitem___66827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 27), shape_66826, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1388)
        subscript_call_result_66828 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 27), getitem___66827, int_66823)
        
        
        # Obtaining the type of the subscript
        int_66829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 57), 'int')
        # Getting the type of 'self' (line 1388)
        self_66830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 44), 'self', False)
        # Obtaining the member 'c' of a type (line 1388)
        c_66831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 44), self_66830, 'c')
        # Obtaining the member 'shape' of a type (line 1388)
        shape_66832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 44), c_66831, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1388)
        getitem___66833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 44), shape_66832, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1388)
        subscript_call_result_66834 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 44), getitem___66833, int_66829)
        
        int_66835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 61), 'int')
        # Processing the call keyword arguments (line 1388)
        kwargs_66836 = {}
        # Getting the type of 'self' (line 1388)
        self_66820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 12), 'self', False)
        # Obtaining the member 'c' of a type (line 1388)
        c_66821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 12), self_66820, 'c')
        # Obtaining the member 'reshape' of a type (line 1388)
        reshape_66822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 12), c_66821, 'reshape')
        # Calling reshape(args, kwargs) (line 1388)
        reshape_call_result_66837 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 12), reshape_66822, *[subscript_call_result_66828, subscript_call_result_66834, int_66835], **kwargs_66836)
        
        # Getting the type of 'self' (line 1389)
        self_66838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 12), 'self', False)
        # Obtaining the member 'x' of a type (line 1389)
        x_66839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 12), self_66838, 'x')
        # Getting the type of 'x' (line 1389)
        x_66840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 20), 'x', False)
        # Getting the type of 'nu' (line 1389)
        nu_66841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 23), 'nu', False)
        
        # Call to bool(...): (line 1389)
        # Processing the call arguments (line 1389)
        # Getting the type of 'extrapolate' (line 1389)
        extrapolate_66843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 32), 'extrapolate', False)
        # Processing the call keyword arguments (line 1389)
        kwargs_66844 = {}
        # Getting the type of 'bool' (line 1389)
        bool_66842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 27), 'bool', False)
        # Calling bool(args, kwargs) (line 1389)
        bool_call_result_66845 = invoke(stypy.reporting.localization.Localization(__file__, 1389, 27), bool_66842, *[extrapolate_66843], **kwargs_66844)
        
        # Getting the type of 'out' (line 1389)
        out_66846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 46), 'out', False)
        # Processing the call keyword arguments (line 1387)
        kwargs_66847 = {}
        # Getting the type of '_ppoly' (line 1387)
        _ppoly_66818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), '_ppoly', False)
        # Obtaining the member 'evaluate_bernstein' of a type (line 1387)
        evaluate_bernstein_66819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 8), _ppoly_66818, 'evaluate_bernstein')
        # Calling evaluate_bernstein(args, kwargs) (line 1387)
        evaluate_bernstein_call_result_66848 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 8), evaluate_bernstein_66819, *[reshape_call_result_66837, x_66839, x_66840, nu_66841, bool_call_result_66845, out_66846], **kwargs_66847)
        
        
        # ################# End of '_evaluate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_evaluate' in the type store
        # Getting the type of 'stypy_return_type' (line 1386)
        stypy_return_type_66849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66849)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_evaluate'
        return stypy_return_type_66849


    @norecursion
    def derivative(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_66850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1391, 28), 'int')
        defaults = [int_66850]
        # Create a new context for function 'derivative'
        module_type_store = module_type_store.open_function_context('derivative', 1391, 4, False)
        # Assigning a type to the variable 'self' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BPoly.derivative.__dict__.__setitem__('stypy_localization', localization)
        BPoly.derivative.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BPoly.derivative.__dict__.__setitem__('stypy_type_store', module_type_store)
        BPoly.derivative.__dict__.__setitem__('stypy_function_name', 'BPoly.derivative')
        BPoly.derivative.__dict__.__setitem__('stypy_param_names_list', ['nu'])
        BPoly.derivative.__dict__.__setitem__('stypy_varargs_param_name', None)
        BPoly.derivative.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BPoly.derivative.__dict__.__setitem__('stypy_call_defaults', defaults)
        BPoly.derivative.__dict__.__setitem__('stypy_call_varargs', varargs)
        BPoly.derivative.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BPoly.derivative.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BPoly.derivative', ['nu'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'derivative', localization, ['nu'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'derivative(...)' code ##################

        str_66851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, (-1)), 'str', '\n        Construct a new piecewise polynomial representing the derivative.\n\n        Parameters\n        ----------\n        nu : int, optional\n            Order of derivative to evaluate. Default is 1, i.e. compute the\n            first derivative. If negative, the antiderivative is returned.\n\n        Returns\n        -------\n        bp : BPoly\n            Piecewise polynomial of order k - nu representing the derivative of\n            this polynomial.\n\n        ')
        
        
        # Getting the type of 'nu' (line 1408)
        nu_66852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 11), 'nu')
        int_66853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1408, 16), 'int')
        # Applying the binary operator '<' (line 1408)
        result_lt_66854 = python_operator(stypy.reporting.localization.Localization(__file__, 1408, 11), '<', nu_66852, int_66853)
        
        # Testing the type of an if condition (line 1408)
        if_condition_66855 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1408, 8), result_lt_66854)
        # Assigning a type to the variable 'if_condition_66855' (line 1408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 8), 'if_condition_66855', if_condition_66855)
        # SSA begins for if statement (line 1408)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to antiderivative(...): (line 1409)
        # Processing the call arguments (line 1409)
        
        # Getting the type of 'nu' (line 1409)
        nu_66858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 40), 'nu', False)
        # Applying the 'usub' unary operator (line 1409)
        result___neg___66859 = python_operator(stypy.reporting.localization.Localization(__file__, 1409, 39), 'usub', nu_66858)
        
        # Processing the call keyword arguments (line 1409)
        kwargs_66860 = {}
        # Getting the type of 'self' (line 1409)
        self_66856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 19), 'self', False)
        # Obtaining the member 'antiderivative' of a type (line 1409)
        antiderivative_66857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 19), self_66856, 'antiderivative')
        # Calling antiderivative(args, kwargs) (line 1409)
        antiderivative_call_result_66861 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 19), antiderivative_66857, *[result___neg___66859], **kwargs_66860)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 12), 'stypy_return_type', antiderivative_call_result_66861)
        # SSA join for if statement (line 1408)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'nu' (line 1411)
        nu_66862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 11), 'nu')
        int_66863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 16), 'int')
        # Applying the binary operator '>' (line 1411)
        result_gt_66864 = python_operator(stypy.reporting.localization.Localization(__file__, 1411, 11), '>', nu_66862, int_66863)
        
        # Testing the type of an if condition (line 1411)
        if_condition_66865 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1411, 8), result_gt_66864)
        # Assigning a type to the variable 'if_condition_66865' (line 1411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 8), 'if_condition_66865', if_condition_66865)
        # SSA begins for if statement (line 1411)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1412):
        
        # Assigning a Name to a Name (line 1412):
        # Getting the type of 'self' (line 1412)
        self_66866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 17), 'self')
        # Assigning a type to the variable 'bp' (line 1412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 12), 'bp', self_66866)
        
        
        # Call to range(...): (line 1413)
        # Processing the call arguments (line 1413)
        # Getting the type of 'nu' (line 1413)
        nu_66868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 27), 'nu', False)
        # Processing the call keyword arguments (line 1413)
        kwargs_66869 = {}
        # Getting the type of 'range' (line 1413)
        range_66867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 21), 'range', False)
        # Calling range(args, kwargs) (line 1413)
        range_call_result_66870 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 21), range_66867, *[nu_66868], **kwargs_66869)
        
        # Testing the type of a for loop iterable (line 1413)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1413, 12), range_call_result_66870)
        # Getting the type of the for loop variable (line 1413)
        for_loop_var_66871 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1413, 12), range_call_result_66870)
        # Assigning a type to the variable 'k' (line 1413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 12), 'k', for_loop_var_66871)
        # SSA begins for a for statement (line 1413)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1414):
        
        # Assigning a Call to a Name (line 1414):
        
        # Call to derivative(...): (line 1414)
        # Processing the call keyword arguments (line 1414)
        kwargs_66874 = {}
        # Getting the type of 'bp' (line 1414)
        bp_66872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 21), 'bp', False)
        # Obtaining the member 'derivative' of a type (line 1414)
        derivative_66873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 21), bp_66872, 'derivative')
        # Calling derivative(args, kwargs) (line 1414)
        derivative_call_result_66875 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 21), derivative_66873, *[], **kwargs_66874)
        
        # Assigning a type to the variable 'bp' (line 1414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1414, 16), 'bp', derivative_call_result_66875)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'bp' (line 1415)
        bp_66876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 19), 'bp')
        # Assigning a type to the variable 'stypy_return_type' (line 1415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1415, 12), 'stypy_return_type', bp_66876)
        # SSA join for if statement (line 1411)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'nu' (line 1418)
        nu_66877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 11), 'nu')
        int_66878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 17), 'int')
        # Applying the binary operator '==' (line 1418)
        result_eq_66879 = python_operator(stypy.reporting.localization.Localization(__file__, 1418, 11), '==', nu_66877, int_66878)
        
        # Testing the type of an if condition (line 1418)
        if_condition_66880 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1418, 8), result_eq_66879)
        # Assigning a type to the variable 'if_condition_66880' (line 1418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 8), 'if_condition_66880', if_condition_66880)
        # SSA begins for if statement (line 1418)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1419):
        
        # Assigning a Call to a Name (line 1419):
        
        # Call to copy(...): (line 1419)
        # Processing the call keyword arguments (line 1419)
        kwargs_66884 = {}
        # Getting the type of 'self' (line 1419)
        self_66881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 17), 'self', False)
        # Obtaining the member 'c' of a type (line 1419)
        c_66882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 17), self_66881, 'c')
        # Obtaining the member 'copy' of a type (line 1419)
        copy_66883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 17), c_66882, 'copy')
        # Calling copy(args, kwargs) (line 1419)
        copy_call_result_66885 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 17), copy_66883, *[], **kwargs_66884)
        
        # Assigning a type to the variable 'c2' (line 1419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 12), 'c2', copy_call_result_66885)
        # SSA branch for the else part of an if statement (line 1418)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1431):
        
        # Assigning a BinOp to a Name (line 1431):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1431)
        tuple_66886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1431)
        # Adding element type (line 1431)
        # Getting the type of 'None' (line 1431)
        None_66887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 20), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 20), tuple_66886, None_66887)
        
        # Getting the type of 'self' (line 1431)
        self_66888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 28), 'self')
        # Obtaining the member 'c' of a type (line 1431)
        c_66889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 28), self_66888, 'c')
        # Obtaining the member 'ndim' of a type (line 1431)
        ndim_66890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 28), c_66889, 'ndim')
        int_66891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 40), 'int')
        # Applying the binary operator '-' (line 1431)
        result_sub_66892 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 28), '-', ndim_66890, int_66891)
        
        # Applying the binary operator '*' (line 1431)
        result_mul_66893 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 19), '*', tuple_66886, result_sub_66892)
        
        # Assigning a type to the variable 'rest' (line 1431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 12), 'rest', result_mul_66893)
        
        # Assigning a BinOp to a Name (line 1433):
        
        # Assigning a BinOp to a Name (line 1433):
        
        # Obtaining the type of the subscript
        int_66894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 29), 'int')
        # Getting the type of 'self' (line 1433)
        self_66895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 16), 'self')
        # Obtaining the member 'c' of a type (line 1433)
        c_66896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 16), self_66895, 'c')
        # Obtaining the member 'shape' of a type (line 1433)
        shape_66897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 16), c_66896, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1433)
        getitem___66898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 16), shape_66897, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1433)
        subscript_call_result_66899 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 16), getitem___66898, int_66894)
        
        int_66900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 34), 'int')
        # Applying the binary operator '-' (line 1433)
        result_sub_66901 = python_operator(stypy.reporting.localization.Localization(__file__, 1433, 16), '-', subscript_call_result_66899, int_66900)
        
        # Assigning a type to the variable 'k' (line 1433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 12), 'k', result_sub_66901)
        
        # Assigning a Subscript to a Name (line 1434):
        
        # Assigning a Subscript to a Name (line 1434):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1434)
        tuple_66902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1434)
        # Adding element type (line 1434)
        # Getting the type of 'None' (line 1434)
        None_66903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 34), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1434, 34), tuple_66902, None_66903)
        # Adding element type (line 1434)
        
        # Call to slice(...): (line 1434)
        # Processing the call arguments (line 1434)
        # Getting the type of 'None' (line 1434)
        None_66905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 46), 'None', False)
        # Processing the call keyword arguments (line 1434)
        kwargs_66906 = {}
        # Getting the type of 'slice' (line 1434)
        slice_66904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 40), 'slice', False)
        # Calling slice(args, kwargs) (line 1434)
        slice_call_result_66907 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 40), slice_66904, *[None_66905], **kwargs_66906)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1434, 34), tuple_66902, slice_call_result_66907)
        
        # Getting the type of 'rest' (line 1434)
        rest_66908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 53), 'rest')
        # Applying the binary operator '+' (line 1434)
        result_add_66909 = python_operator(stypy.reporting.localization.Localization(__file__, 1434, 33), '+', tuple_66902, rest_66908)
        
        
        # Call to diff(...): (line 1434)
        # Processing the call arguments (line 1434)
        # Getting the type of 'self' (line 1434)
        self_66912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 25), 'self', False)
        # Obtaining the member 'x' of a type (line 1434)
        x_66913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 25), self_66912, 'x')
        # Processing the call keyword arguments (line 1434)
        kwargs_66914 = {}
        # Getting the type of 'np' (line 1434)
        np_66910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 17), 'np', False)
        # Obtaining the member 'diff' of a type (line 1434)
        diff_66911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 17), np_66910, 'diff')
        # Calling diff(args, kwargs) (line 1434)
        diff_call_result_66915 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 17), diff_66911, *[x_66913], **kwargs_66914)
        
        # Obtaining the member '__getitem__' of a type (line 1434)
        getitem___66916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 17), diff_call_result_66915, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1434)
        subscript_call_result_66917 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 17), getitem___66916, result_add_66909)
        
        # Assigning a type to the variable 'dx' (line 1434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 12), 'dx', subscript_call_result_66917)
        
        # Assigning a BinOp to a Name (line 1435):
        
        # Assigning a BinOp to a Name (line 1435):
        # Getting the type of 'k' (line 1435)
        k_66918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 17), 'k')
        
        # Call to diff(...): (line 1435)
        # Processing the call arguments (line 1435)
        # Getting the type of 'self' (line 1435)
        self_66921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 29), 'self', False)
        # Obtaining the member 'c' of a type (line 1435)
        c_66922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1435, 29), self_66921, 'c')
        # Processing the call keyword arguments (line 1435)
        int_66923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 42), 'int')
        keyword_66924 = int_66923
        kwargs_66925 = {'axis': keyword_66924}
        # Getting the type of 'np' (line 1435)
        np_66919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 21), 'np', False)
        # Obtaining the member 'diff' of a type (line 1435)
        diff_66920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1435, 21), np_66919, 'diff')
        # Calling diff(args, kwargs) (line 1435)
        diff_call_result_66926 = invoke(stypy.reporting.localization.Localization(__file__, 1435, 21), diff_66920, *[c_66922], **kwargs_66925)
        
        # Applying the binary operator '*' (line 1435)
        result_mul_66927 = python_operator(stypy.reporting.localization.Localization(__file__, 1435, 17), '*', k_66918, diff_call_result_66926)
        
        # Getting the type of 'dx' (line 1435)
        dx_66928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 47), 'dx')
        # Applying the binary operator 'div' (line 1435)
        result_div_66929 = python_operator(stypy.reporting.localization.Localization(__file__, 1435, 45), 'div', result_mul_66927, dx_66928)
        
        # Assigning a type to the variable 'c2' (line 1435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 12), 'c2', result_div_66929)
        # SSA join for if statement (line 1418)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_66930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 20), 'int')
        # Getting the type of 'c2' (line 1437)
        c2_66931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 11), 'c2')
        # Obtaining the member 'shape' of a type (line 1437)
        shape_66932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 11), c2_66931, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1437)
        getitem___66933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 11), shape_66932, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1437)
        subscript_call_result_66934 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 11), getitem___66933, int_66930)
        
        int_66935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 26), 'int')
        # Applying the binary operator '==' (line 1437)
        result_eq_66936 = python_operator(stypy.reporting.localization.Localization(__file__, 1437, 11), '==', subscript_call_result_66934, int_66935)
        
        # Testing the type of an if condition (line 1437)
        if_condition_66937 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1437, 8), result_eq_66936)
        # Assigning a type to the variable 'if_condition_66937' (line 1437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 8), 'if_condition_66937', if_condition_66937)
        # SSA begins for if statement (line 1437)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1439):
        
        # Assigning a Call to a Name (line 1439):
        
        # Call to zeros(...): (line 1439)
        # Processing the call arguments (line 1439)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1439)
        tuple_66940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1439)
        # Adding element type (line 1439)
        int_66941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1439, 27), tuple_66940, int_66941)
        
        
        # Obtaining the type of the subscript
        int_66942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 42), 'int')
        slice_66943 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1439, 33), int_66942, None, None)
        # Getting the type of 'c2' (line 1439)
        c2_66944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 33), 'c2', False)
        # Obtaining the member 'shape' of a type (line 1439)
        shape_66945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 33), c2_66944, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1439)
        getitem___66946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 33), shape_66945, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1439)
        subscript_call_result_66947 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 33), getitem___66946, slice_66943)
        
        # Applying the binary operator '+' (line 1439)
        result_add_66948 = python_operator(stypy.reporting.localization.Localization(__file__, 1439, 26), '+', tuple_66940, subscript_call_result_66947)
        
        # Processing the call keyword arguments (line 1439)
        # Getting the type of 'c2' (line 1439)
        c2_66949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 53), 'c2', False)
        # Obtaining the member 'dtype' of a type (line 1439)
        dtype_66950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 53), c2_66949, 'dtype')
        keyword_66951 = dtype_66950
        kwargs_66952 = {'dtype': keyword_66951}
        # Getting the type of 'np' (line 1439)
        np_66938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 17), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1439)
        zeros_66939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 17), np_66938, 'zeros')
        # Calling zeros(args, kwargs) (line 1439)
        zeros_call_result_66953 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 17), zeros_66939, *[result_add_66948], **kwargs_66952)
        
        # Assigning a type to the variable 'c2' (line 1439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 12), 'c2', zeros_call_result_66953)
        # SSA join for if statement (line 1437)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to construct_fast(...): (line 1442)
        # Processing the call arguments (line 1442)
        # Getting the type of 'c2' (line 1442)
        c2_66956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 35), 'c2', False)
        # Getting the type of 'self' (line 1442)
        self_66957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 39), 'self', False)
        # Obtaining the member 'x' of a type (line 1442)
        x_66958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 39), self_66957, 'x')
        # Getting the type of 'self' (line 1442)
        self_66959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 47), 'self', False)
        # Obtaining the member 'extrapolate' of a type (line 1442)
        extrapolate_66960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 47), self_66959, 'extrapolate')
        # Getting the type of 'self' (line 1442)
        self_66961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 65), 'self', False)
        # Obtaining the member 'axis' of a type (line 1442)
        axis_66962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 65), self_66961, 'axis')
        # Processing the call keyword arguments (line 1442)
        kwargs_66963 = {}
        # Getting the type of 'self' (line 1442)
        self_66954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 15), 'self', False)
        # Obtaining the member 'construct_fast' of a type (line 1442)
        construct_fast_66955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 15), self_66954, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 1442)
        construct_fast_call_result_66964 = invoke(stypy.reporting.localization.Localization(__file__, 1442, 15), construct_fast_66955, *[c2_66956, x_66958, extrapolate_66960, axis_66962], **kwargs_66963)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 8), 'stypy_return_type', construct_fast_call_result_66964)
        
        # ################# End of 'derivative(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'derivative' in the type store
        # Getting the type of 'stypy_return_type' (line 1391)
        stypy_return_type_66965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66965)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'derivative'
        return stypy_return_type_66965


    @norecursion
    def antiderivative(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_66966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 32), 'int')
        defaults = [int_66966]
        # Create a new context for function 'antiderivative'
        module_type_store = module_type_store.open_function_context('antiderivative', 1444, 4, False)
        # Assigning a type to the variable 'self' (line 1445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BPoly.antiderivative.__dict__.__setitem__('stypy_localization', localization)
        BPoly.antiderivative.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BPoly.antiderivative.__dict__.__setitem__('stypy_type_store', module_type_store)
        BPoly.antiderivative.__dict__.__setitem__('stypy_function_name', 'BPoly.antiderivative')
        BPoly.antiderivative.__dict__.__setitem__('stypy_param_names_list', ['nu'])
        BPoly.antiderivative.__dict__.__setitem__('stypy_varargs_param_name', None)
        BPoly.antiderivative.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BPoly.antiderivative.__dict__.__setitem__('stypy_call_defaults', defaults)
        BPoly.antiderivative.__dict__.__setitem__('stypy_call_varargs', varargs)
        BPoly.antiderivative.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BPoly.antiderivative.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BPoly.antiderivative', ['nu'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'antiderivative', localization, ['nu'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'antiderivative(...)' code ##################

        str_66967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1466, (-1)), 'str', "\n        Construct a new piecewise polynomial representing the antiderivative.\n\n        Parameters\n        ----------\n        nu : int, optional\n            Order of antiderivative to evaluate. Default is 1, i.e. compute\n            the first integral. If negative, the derivative is returned.\n\n        Returns\n        -------\n        bp : BPoly\n            Piecewise polynomial of order k + nu representing the\n            antiderivative of this polynomial.\n\n        Notes\n        -----\n        If antiderivative is computed and ``self.extrapolate='periodic'``,\n        it will be set to False for the returned instance. This is done because\n        the antiderivative is no longer periodic and its correct evaluation\n        outside of the initially given x interval is difficult.\n        ")
        
        
        # Getting the type of 'nu' (line 1467)
        nu_66968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 11), 'nu')
        int_66969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 17), 'int')
        # Applying the binary operator '<=' (line 1467)
        result_le_66970 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 11), '<=', nu_66968, int_66969)
        
        # Testing the type of an if condition (line 1467)
        if_condition_66971 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1467, 8), result_le_66970)
        # Assigning a type to the variable 'if_condition_66971' (line 1467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 8), 'if_condition_66971', if_condition_66971)
        # SSA begins for if statement (line 1467)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to derivative(...): (line 1468)
        # Processing the call arguments (line 1468)
        
        # Getting the type of 'nu' (line 1468)
        nu_66974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 36), 'nu', False)
        # Applying the 'usub' unary operator (line 1468)
        result___neg___66975 = python_operator(stypy.reporting.localization.Localization(__file__, 1468, 35), 'usub', nu_66974)
        
        # Processing the call keyword arguments (line 1468)
        kwargs_66976 = {}
        # Getting the type of 'self' (line 1468)
        self_66972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 19), 'self', False)
        # Obtaining the member 'derivative' of a type (line 1468)
        derivative_66973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 19), self_66972, 'derivative')
        # Calling derivative(args, kwargs) (line 1468)
        derivative_call_result_66977 = invoke(stypy.reporting.localization.Localization(__file__, 1468, 19), derivative_66973, *[result___neg___66975], **kwargs_66976)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1468, 12), 'stypy_return_type', derivative_call_result_66977)
        # SSA join for if statement (line 1467)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'nu' (line 1470)
        nu_66978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 11), 'nu')
        int_66979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 16), 'int')
        # Applying the binary operator '>' (line 1470)
        result_gt_66980 = python_operator(stypy.reporting.localization.Localization(__file__, 1470, 11), '>', nu_66978, int_66979)
        
        # Testing the type of an if condition (line 1470)
        if_condition_66981 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1470, 8), result_gt_66980)
        # Assigning a type to the variable 'if_condition_66981' (line 1470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 8), 'if_condition_66981', if_condition_66981)
        # SSA begins for if statement (line 1470)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1471):
        
        # Assigning a Name to a Name (line 1471):
        # Getting the type of 'self' (line 1471)
        self_66982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 17), 'self')
        # Assigning a type to the variable 'bp' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 12), 'bp', self_66982)
        
        
        # Call to range(...): (line 1472)
        # Processing the call arguments (line 1472)
        # Getting the type of 'nu' (line 1472)
        nu_66984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 27), 'nu', False)
        # Processing the call keyword arguments (line 1472)
        kwargs_66985 = {}
        # Getting the type of 'range' (line 1472)
        range_66983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 21), 'range', False)
        # Calling range(args, kwargs) (line 1472)
        range_call_result_66986 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 21), range_66983, *[nu_66984], **kwargs_66985)
        
        # Testing the type of a for loop iterable (line 1472)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1472, 12), range_call_result_66986)
        # Getting the type of the for loop variable (line 1472)
        for_loop_var_66987 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1472, 12), range_call_result_66986)
        # Assigning a type to the variable 'k' (line 1472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'k', for_loop_var_66987)
        # SSA begins for a for statement (line 1472)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1473):
        
        # Assigning a Call to a Name (line 1473):
        
        # Call to antiderivative(...): (line 1473)
        # Processing the call keyword arguments (line 1473)
        kwargs_66990 = {}
        # Getting the type of 'bp' (line 1473)
        bp_66988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 21), 'bp', False)
        # Obtaining the member 'antiderivative' of a type (line 1473)
        antiderivative_66989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 21), bp_66988, 'antiderivative')
        # Calling antiderivative(args, kwargs) (line 1473)
        antiderivative_call_result_66991 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 21), antiderivative_66989, *[], **kwargs_66990)
        
        # Assigning a type to the variable 'bp' (line 1473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 16), 'bp', antiderivative_call_result_66991)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'bp' (line 1474)
        bp_66992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 19), 'bp')
        # Assigning a type to the variable 'stypy_return_type' (line 1474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1474, 12), 'stypy_return_type', bp_66992)
        # SSA join for if statement (line 1470)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 1477):
        
        # Assigning a Attribute to a Name (line 1477):
        # Getting the type of 'self' (line 1477)
        self_66993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 15), 'self')
        # Obtaining the member 'c' of a type (line 1477)
        c_66994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 15), self_66993, 'c')
        # Assigning a type to the variable 'tuple_assignment_63623' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'tuple_assignment_63623', c_66994)
        
        # Assigning a Attribute to a Name (line 1477):
        # Getting the type of 'self' (line 1477)
        self_66995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 23), 'self')
        # Obtaining the member 'x' of a type (line 1477)
        x_66996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 23), self_66995, 'x')
        # Assigning a type to the variable 'tuple_assignment_63624' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'tuple_assignment_63624', x_66996)
        
        # Assigning a Name to a Name (line 1477):
        # Getting the type of 'tuple_assignment_63623' (line 1477)
        tuple_assignment_63623_66997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'tuple_assignment_63623')
        # Assigning a type to the variable 'c' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'c', tuple_assignment_63623_66997)
        
        # Assigning a Name to a Name (line 1477):
        # Getting the type of 'tuple_assignment_63624' (line 1477)
        tuple_assignment_63624_66998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 8), 'tuple_assignment_63624')
        # Assigning a type to the variable 'x' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 11), 'x', tuple_assignment_63624_66998)
        
        # Assigning a Subscript to a Name (line 1478):
        
        # Assigning a Subscript to a Name (line 1478):
        
        # Obtaining the type of the subscript
        int_66999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1478, 20), 'int')
        # Getting the type of 'c' (line 1478)
        c_67000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 12), 'c')
        # Obtaining the member 'shape' of a type (line 1478)
        shape_67001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 12), c_67000, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1478)
        getitem___67002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 12), shape_67001, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1478)
        subscript_call_result_67003 = invoke(stypy.reporting.localization.Localization(__file__, 1478, 12), getitem___67002, int_66999)
        
        # Assigning a type to the variable 'k' (line 1478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 8), 'k', subscript_call_result_67003)
        
        # Assigning a Call to a Name (line 1479):
        
        # Assigning a Call to a Name (line 1479):
        
        # Call to zeros(...): (line 1479)
        # Processing the call arguments (line 1479)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1479)
        tuple_67006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1479)
        # Adding element type (line 1479)
        # Getting the type of 'k' (line 1479)
        k_67007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 23), 'k', False)
        int_67008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 25), 'int')
        # Applying the binary operator '+' (line 1479)
        result_add_67009 = python_operator(stypy.reporting.localization.Localization(__file__, 1479, 23), '+', k_67007, int_67008)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1479, 23), tuple_67006, result_add_67009)
        
        
        # Obtaining the type of the subscript
        int_67010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 39), 'int')
        slice_67011 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1479, 31), int_67010, None, None)
        # Getting the type of 'c' (line 1479)
        c_67012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 31), 'c', False)
        # Obtaining the member 'shape' of a type (line 1479)
        shape_67013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 31), c_67012, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1479)
        getitem___67014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 31), shape_67013, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1479)
        subscript_call_result_67015 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 31), getitem___67014, slice_67011)
        
        # Applying the binary operator '+' (line 1479)
        result_add_67016 = python_operator(stypy.reporting.localization.Localization(__file__, 1479, 22), '+', tuple_67006, subscript_call_result_67015)
        
        # Processing the call keyword arguments (line 1479)
        # Getting the type of 'c' (line 1479)
        c_67017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 50), 'c', False)
        # Obtaining the member 'dtype' of a type (line 1479)
        dtype_67018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 50), c_67017, 'dtype')
        keyword_67019 = dtype_67018
        kwargs_67020 = {'dtype': keyword_67019}
        # Getting the type of 'np' (line 1479)
        np_67004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 13), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1479)
        zeros_67005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 13), np_67004, 'zeros')
        # Calling zeros(args, kwargs) (line 1479)
        zeros_call_result_67021 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 13), zeros_67005, *[result_add_67016], **kwargs_67020)
        
        # Assigning a type to the variable 'c2' (line 1479)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 8), 'c2', zeros_call_result_67021)
        
        # Assigning a BinOp to a Subscript (line 1481):
        
        # Assigning a BinOp to a Subscript (line 1481):
        
        # Call to cumsum(...): (line 1481)
        # Processing the call arguments (line 1481)
        # Getting the type of 'c' (line 1481)
        c_67024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 32), 'c', False)
        # Processing the call keyword arguments (line 1481)
        int_67025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1481, 40), 'int')
        keyword_67026 = int_67025
        kwargs_67027 = {'axis': keyword_67026}
        # Getting the type of 'np' (line 1481)
        np_67022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 22), 'np', False)
        # Obtaining the member 'cumsum' of a type (line 1481)
        cumsum_67023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 22), np_67022, 'cumsum')
        # Calling cumsum(args, kwargs) (line 1481)
        cumsum_call_result_67028 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 22), cumsum_67023, *[c_67024], **kwargs_67027)
        
        # Getting the type of 'k' (line 1481)
        k_67029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 45), 'k')
        # Applying the binary operator 'div' (line 1481)
        result_div_67030 = python_operator(stypy.reporting.localization.Localization(__file__, 1481, 22), 'div', cumsum_call_result_67028, k_67029)
        
        # Getting the type of 'c2' (line 1481)
        c2_67031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 8), 'c2')
        int_67032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1481, 11), 'int')
        slice_67033 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1481, 8), int_67032, None, None)
        Ellipsis_67034 = Ellipsis
        # Storing an element on a container (line 1481)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1481, 8), c2_67031, ((slice_67033, Ellipsis_67034), result_div_67030))
        
        # Assigning a BinOp to a Name (line 1482):
        
        # Assigning a BinOp to a Name (line 1482):
        
        # Obtaining the type of the subscript
        int_67035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 18), 'int')
        slice_67036 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1482, 16), int_67035, None, None)
        # Getting the type of 'x' (line 1482)
        x_67037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 16), 'x')
        # Obtaining the member '__getitem__' of a type (line 1482)
        getitem___67038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 16), x_67037, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1482)
        subscript_call_result_67039 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 16), getitem___67038, slice_67036)
        
        
        # Obtaining the type of the subscript
        int_67040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 27), 'int')
        slice_67041 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1482, 24), None, int_67040, None)
        # Getting the type of 'x' (line 1482)
        x_67042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 24), 'x')
        # Obtaining the member '__getitem__' of a type (line 1482)
        getitem___67043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 24), x_67042, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1482)
        subscript_call_result_67044 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 24), getitem___67043, slice_67041)
        
        # Applying the binary operator '-' (line 1482)
        result_sub_67045 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 16), '-', subscript_call_result_67039, subscript_call_result_67044)
        
        # Assigning a type to the variable 'delta' (line 1482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 8), 'delta', result_sub_67045)
        
        # Getting the type of 'c2' (line 1483)
        c2_67046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 8), 'c2')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1483)
        tuple_67047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1483)
        # Adding element type (line 1483)
        # Getting the type of 'None' (line 1483)
        None_67048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 21), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1483, 21), tuple_67047, None_67048)
        # Adding element type (line 1483)
        
        # Call to slice(...): (line 1483)
        # Processing the call arguments (line 1483)
        # Getting the type of 'None' (line 1483)
        None_67050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 33), 'None', False)
        # Processing the call keyword arguments (line 1483)
        kwargs_67051 = {}
        # Getting the type of 'slice' (line 1483)
        slice_67049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 27), 'slice', False)
        # Calling slice(args, kwargs) (line 1483)
        slice_call_result_67052 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 27), slice_67049, *[None_67050], **kwargs_67051)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1483, 21), tuple_67047, slice_call_result_67052)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1483)
        tuple_67053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1483)
        # Adding element type (line 1483)
        # Getting the type of 'None' (line 1483)
        None_67054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 43), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1483, 43), tuple_67053, None_67054)
        
        # Getting the type of 'c' (line 1483)
        c_67055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 51), 'c')
        # Obtaining the member 'ndim' of a type (line 1483)
        ndim_67056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 51), c_67055, 'ndim')
        int_67057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1483, 58), 'int')
        # Applying the binary operator '-' (line 1483)
        result_sub_67058 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 51), '-', ndim_67056, int_67057)
        
        # Applying the binary operator '*' (line 1483)
        result_mul_67059 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 42), '*', tuple_67053, result_sub_67058)
        
        # Applying the binary operator '+' (line 1483)
        result_add_67060 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 20), '+', tuple_67047, result_mul_67059)
        
        # Getting the type of 'delta' (line 1483)
        delta_67061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 14), 'delta')
        # Obtaining the member '__getitem__' of a type (line 1483)
        getitem___67062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1483, 14), delta_67061, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1483)
        subscript_call_result_67063 = invoke(stypy.reporting.localization.Localization(__file__, 1483, 14), getitem___67062, result_add_67060)
        
        # Applying the binary operator '*=' (line 1483)
        result_imul_67064 = python_operator(stypy.reporting.localization.Localization(__file__, 1483, 8), '*=', c2_67046, subscript_call_result_67063)
        # Assigning a type to the variable 'c2' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 8), 'c2', result_imul_67064)
        
        
        # Getting the type of 'c2' (line 1491)
        c2_67065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'c2')
        
        # Obtaining the type of the subscript
        slice_67066 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1491, 8), None, None, None)
        int_67067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, 13), 'int')
        slice_67068 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1491, 8), int_67067, None, None)
        # Getting the type of 'c2' (line 1491)
        c2_67069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'c2')
        # Obtaining the member '__getitem__' of a type (line 1491)
        getitem___67070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 8), c2_67069, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1491)
        subscript_call_result_67071 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 8), getitem___67070, (slice_67066, slice_67068))
        
        
        # Obtaining the type of the subscript
        int_67072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, 49), 'int')
        slice_67073 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1491, 20), None, int_67072, None)
        
        # Call to cumsum(...): (line 1491)
        # Processing the call arguments (line 1491)
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1491)
        k_67076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 33), 'k', False)
        slice_67077 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1491, 30), None, None, None)
        # Getting the type of 'c2' (line 1491)
        c2_67078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 30), 'c2', False)
        # Obtaining the member '__getitem__' of a type (line 1491)
        getitem___67079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 30), c2_67078, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1491)
        subscript_call_result_67080 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 30), getitem___67079, (k_67076, slice_67077))
        
        # Processing the call keyword arguments (line 1491)
        int_67081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, 45), 'int')
        keyword_67082 = int_67081
        kwargs_67083 = {'axis': keyword_67082}
        # Getting the type of 'np' (line 1491)
        np_67074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 20), 'np', False)
        # Obtaining the member 'cumsum' of a type (line 1491)
        cumsum_67075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 20), np_67074, 'cumsum')
        # Calling cumsum(args, kwargs) (line 1491)
        cumsum_call_result_67084 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 20), cumsum_67075, *[subscript_call_result_67080], **kwargs_67083)
        
        # Obtaining the member '__getitem__' of a type (line 1491)
        getitem___67085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 20), cumsum_call_result_67084, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1491)
        subscript_call_result_67086 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 20), getitem___67085, slice_67073)
        
        # Applying the binary operator '+=' (line 1491)
        result_iadd_67087 = python_operator(stypy.reporting.localization.Localization(__file__, 1491, 8), '+=', subscript_call_result_67071, subscript_call_result_67086)
        # Getting the type of 'c2' (line 1491)
        c2_67088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'c2')
        slice_67089 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1491, 8), None, None, None)
        int_67090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, 13), 'int')
        slice_67091 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1491, 8), int_67090, None, None)
        # Storing an element on a container (line 1491)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1491, 8), c2_67088, ((slice_67089, slice_67091), result_iadd_67087))
        
        
        
        # Getting the type of 'self' (line 1493)
        self_67092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 11), 'self')
        # Obtaining the member 'extrapolate' of a type (line 1493)
        extrapolate_67093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 11), self_67092, 'extrapolate')
        str_67094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 31), 'str', 'periodic')
        # Applying the binary operator '==' (line 1493)
        result_eq_67095 = python_operator(stypy.reporting.localization.Localization(__file__, 1493, 11), '==', extrapolate_67093, str_67094)
        
        # Testing the type of an if condition (line 1493)
        if_condition_67096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1493, 8), result_eq_67095)
        # Assigning a type to the variable 'if_condition_67096' (line 1493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 8), 'if_condition_67096', if_condition_67096)
        # SSA begins for if statement (line 1493)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1494):
        
        # Assigning a Name to a Name (line 1494):
        # Getting the type of 'False' (line 1494)
        False_67097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 26), 'False')
        # Assigning a type to the variable 'extrapolate' (line 1494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 12), 'extrapolate', False_67097)
        # SSA branch for the else part of an if statement (line 1493)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1496):
        
        # Assigning a Attribute to a Name (line 1496):
        # Getting the type of 'self' (line 1496)
        self_67098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 26), 'self')
        # Obtaining the member 'extrapolate' of a type (line 1496)
        extrapolate_67099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 26), self_67098, 'extrapolate')
        # Assigning a type to the variable 'extrapolate' (line 1496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 12), 'extrapolate', extrapolate_67099)
        # SSA join for if statement (line 1493)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to construct_fast(...): (line 1498)
        # Processing the call arguments (line 1498)
        # Getting the type of 'c2' (line 1498)
        c2_67102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 35), 'c2', False)
        # Getting the type of 'x' (line 1498)
        x_67103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 39), 'x', False)
        # Getting the type of 'extrapolate' (line 1498)
        extrapolate_67104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 42), 'extrapolate', False)
        # Processing the call keyword arguments (line 1498)
        # Getting the type of 'self' (line 1498)
        self_67105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 60), 'self', False)
        # Obtaining the member 'axis' of a type (line 1498)
        axis_67106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 60), self_67105, 'axis')
        keyword_67107 = axis_67106
        kwargs_67108 = {'axis': keyword_67107}
        # Getting the type of 'self' (line 1498)
        self_67100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 15), 'self', False)
        # Obtaining the member 'construct_fast' of a type (line 1498)
        construct_fast_67101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 15), self_67100, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 1498)
        construct_fast_call_result_67109 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 15), construct_fast_67101, *[c2_67102, x_67103, extrapolate_67104], **kwargs_67108)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 8), 'stypy_return_type', construct_fast_call_result_67109)
        
        # ################# End of 'antiderivative(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'antiderivative' in the type store
        # Getting the type of 'stypy_return_type' (line 1444)
        stypy_return_type_67110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_67110)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'antiderivative'
        return stypy_return_type_67110


    @norecursion
    def integrate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1500)
        None_67111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 42), 'None')
        defaults = [None_67111]
        # Create a new context for function 'integrate'
        module_type_store = module_type_store.open_function_context('integrate', 1500, 4, False)
        # Assigning a type to the variable 'self' (line 1501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BPoly.integrate.__dict__.__setitem__('stypy_localization', localization)
        BPoly.integrate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BPoly.integrate.__dict__.__setitem__('stypy_type_store', module_type_store)
        BPoly.integrate.__dict__.__setitem__('stypy_function_name', 'BPoly.integrate')
        BPoly.integrate.__dict__.__setitem__('stypy_param_names_list', ['a', 'b', 'extrapolate'])
        BPoly.integrate.__dict__.__setitem__('stypy_varargs_param_name', None)
        BPoly.integrate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BPoly.integrate.__dict__.__setitem__('stypy_call_defaults', defaults)
        BPoly.integrate.__dict__.__setitem__('stypy_call_varargs', varargs)
        BPoly.integrate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BPoly.integrate.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BPoly.integrate', ['a', 'b', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'integrate', localization, ['a', 'b', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'integrate(...)' code ##################

        str_67112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1520, (-1)), 'str', "\n        Compute a definite integral over a piecewise polynomial.\n\n        Parameters\n        ----------\n        a : float\n            Lower integration bound\n        b : float\n            Upper integration bound\n        extrapolate : {bool, 'periodic', None}, optional\n            Whether to extrapolate to out-of-bounds points based on first\n            and last intervals, or to return NaNs. If 'periodic', periodic\n            extrapolation is used. If None (default), use `self.extrapolate`.\n\n        Returns\n        -------\n        array_like\n            Definite integral of the piecewise polynomial over [a, b]\n\n        ")
        
        # Assigning a Call to a Name (line 1523):
        
        # Assigning a Call to a Name (line 1523):
        
        # Call to antiderivative(...): (line 1523)
        # Processing the call keyword arguments (line 1523)
        kwargs_67115 = {}
        # Getting the type of 'self' (line 1523)
        self_67113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 13), 'self', False)
        # Obtaining the member 'antiderivative' of a type (line 1523)
        antiderivative_67114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 13), self_67113, 'antiderivative')
        # Calling antiderivative(args, kwargs) (line 1523)
        antiderivative_call_result_67116 = invoke(stypy.reporting.localization.Localization(__file__, 1523, 13), antiderivative_67114, *[], **kwargs_67115)
        
        # Assigning a type to the variable 'ib' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 8), 'ib', antiderivative_call_result_67116)
        
        # Type idiom detected: calculating its left and rigth part (line 1524)
        # Getting the type of 'extrapolate' (line 1524)
        extrapolate_67117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 11), 'extrapolate')
        # Getting the type of 'None' (line 1524)
        None_67118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 26), 'None')
        
        (may_be_67119, more_types_in_union_67120) = may_be_none(extrapolate_67117, None_67118)

        if may_be_67119:

            if more_types_in_union_67120:
                # Runtime conditional SSA (line 1524)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1525):
            
            # Assigning a Attribute to a Name (line 1525):
            # Getting the type of 'self' (line 1525)
            self_67121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 26), 'self')
            # Obtaining the member 'extrapolate' of a type (line 1525)
            extrapolate_67122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 26), self_67121, 'extrapolate')
            # Assigning a type to the variable 'extrapolate' (line 1525)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 12), 'extrapolate', extrapolate_67122)

            if more_types_in_union_67120:
                # SSA join for if statement (line 1524)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'extrapolate' (line 1529)
        extrapolate_67123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 11), 'extrapolate')
        str_67124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 26), 'str', 'periodic')
        # Applying the binary operator '!=' (line 1529)
        result_ne_67125 = python_operator(stypy.reporting.localization.Localization(__file__, 1529, 11), '!=', extrapolate_67123, str_67124)
        
        # Testing the type of an if condition (line 1529)
        if_condition_67126 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1529, 8), result_ne_67125)
        # Assigning a type to the variable 'if_condition_67126' (line 1529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 8), 'if_condition_67126', if_condition_67126)
        # SSA begins for if statement (line 1529)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1530):
        
        # Assigning a Name to a Attribute (line 1530):
        # Getting the type of 'extrapolate' (line 1530)
        extrapolate_67127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 29), 'extrapolate')
        # Getting the type of 'ib' (line 1530)
        ib_67128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 12), 'ib')
        # Setting the type of the member 'extrapolate' of a type (line 1530)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 12), ib_67128, 'extrapolate', extrapolate_67127)
        # SSA join for if statement (line 1529)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'extrapolate' (line 1532)
        extrapolate_67129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 11), 'extrapolate')
        str_67130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 26), 'str', 'periodic')
        # Applying the binary operator '==' (line 1532)
        result_eq_67131 = python_operator(stypy.reporting.localization.Localization(__file__, 1532, 11), '==', extrapolate_67129, str_67130)
        
        # Testing the type of an if condition (line 1532)
        if_condition_67132 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1532, 8), result_eq_67131)
        # Assigning a type to the variable 'if_condition_67132' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'if_condition_67132', if_condition_67132)
        # SSA begins for if statement (line 1532)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'a' (line 1537)
        a_67133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 15), 'a')
        # Getting the type of 'b' (line 1537)
        b_67134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 20), 'b')
        # Applying the binary operator '<=' (line 1537)
        result_le_67135 = python_operator(stypy.reporting.localization.Localization(__file__, 1537, 15), '<=', a_67133, b_67134)
        
        # Testing the type of an if condition (line 1537)
        if_condition_67136 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1537, 12), result_le_67135)
        # Assigning a type to the variable 'if_condition_67136' (line 1537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 12), 'if_condition_67136', if_condition_67136)
        # SSA begins for if statement (line 1537)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1538):
        
        # Assigning a Num to a Name (line 1538):
        int_67137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 23), 'int')
        # Assigning a type to the variable 'sign' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 16), 'sign', int_67137)
        # SSA branch for the else part of an if statement (line 1537)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 1540):
        
        # Assigning a Name to a Name (line 1540):
        # Getting the type of 'b' (line 1540)
        b_67138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 23), 'b')
        # Assigning a type to the variable 'tuple_assignment_63625' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 16), 'tuple_assignment_63625', b_67138)
        
        # Assigning a Name to a Name (line 1540):
        # Getting the type of 'a' (line 1540)
        a_67139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 26), 'a')
        # Assigning a type to the variable 'tuple_assignment_63626' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 16), 'tuple_assignment_63626', a_67139)
        
        # Assigning a Name to a Name (line 1540):
        # Getting the type of 'tuple_assignment_63625' (line 1540)
        tuple_assignment_63625_67140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 16), 'tuple_assignment_63625')
        # Assigning a type to the variable 'a' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 16), 'a', tuple_assignment_63625_67140)
        
        # Assigning a Name to a Name (line 1540):
        # Getting the type of 'tuple_assignment_63626' (line 1540)
        tuple_assignment_63626_67141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 16), 'tuple_assignment_63626')
        # Assigning a type to the variable 'b' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 19), 'b', tuple_assignment_63626_67141)
        
        # Assigning a Num to a Name (line 1541):
        
        # Assigning a Num to a Name (line 1541):
        int_67142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1541, 23), 'int')
        # Assigning a type to the variable 'sign' (line 1541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 16), 'sign', int_67142)
        # SSA join for if statement (line 1537)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 1543):
        
        # Assigning a Subscript to a Name (line 1543):
        
        # Obtaining the type of the subscript
        int_67143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 28), 'int')
        # Getting the type of 'self' (line 1543)
        self_67144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 21), 'self')
        # Obtaining the member 'x' of a type (line 1543)
        x_67145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 21), self_67144, 'x')
        # Obtaining the member '__getitem__' of a type (line 1543)
        getitem___67146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 21), x_67145, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1543)
        subscript_call_result_67147 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 21), getitem___67146, int_67143)
        
        # Assigning a type to the variable 'tuple_assignment_63627' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 12), 'tuple_assignment_63627', subscript_call_result_67147)
        
        # Assigning a Subscript to a Name (line 1543):
        
        # Obtaining the type of the subscript
        int_67148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 39), 'int')
        # Getting the type of 'self' (line 1543)
        self_67149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 32), 'self')
        # Obtaining the member 'x' of a type (line 1543)
        x_67150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 32), self_67149, 'x')
        # Obtaining the member '__getitem__' of a type (line 1543)
        getitem___67151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1543, 32), x_67150, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1543)
        subscript_call_result_67152 = invoke(stypy.reporting.localization.Localization(__file__, 1543, 32), getitem___67151, int_67148)
        
        # Assigning a type to the variable 'tuple_assignment_63628' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 12), 'tuple_assignment_63628', subscript_call_result_67152)
        
        # Assigning a Name to a Name (line 1543):
        # Getting the type of 'tuple_assignment_63627' (line 1543)
        tuple_assignment_63627_67153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 12), 'tuple_assignment_63627')
        # Assigning a type to the variable 'xs' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 12), 'xs', tuple_assignment_63627_67153)
        
        # Assigning a Name to a Name (line 1543):
        # Getting the type of 'tuple_assignment_63628' (line 1543)
        tuple_assignment_63628_67154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1543, 12), 'tuple_assignment_63628')
        # Assigning a type to the variable 'xe' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 16), 'xe', tuple_assignment_63628_67154)
        
        # Assigning a BinOp to a Name (line 1544):
        
        # Assigning a BinOp to a Name (line 1544):
        # Getting the type of 'xe' (line 1544)
        xe_67155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 21), 'xe')
        # Getting the type of 'xs' (line 1544)
        xs_67156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1544, 26), 'xs')
        # Applying the binary operator '-' (line 1544)
        result_sub_67157 = python_operator(stypy.reporting.localization.Localization(__file__, 1544, 21), '-', xe_67155, xs_67156)
        
        # Assigning a type to the variable 'period' (line 1544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1544, 12), 'period', result_sub_67157)
        
        # Assigning a BinOp to a Name (line 1545):
        
        # Assigning a BinOp to a Name (line 1545):
        # Getting the type of 'b' (line 1545)
        b_67158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 23), 'b')
        # Getting the type of 'a' (line 1545)
        a_67159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 27), 'a')
        # Applying the binary operator '-' (line 1545)
        result_sub_67160 = python_operator(stypy.reporting.localization.Localization(__file__, 1545, 23), '-', b_67158, a_67159)
        
        # Assigning a type to the variable 'interval' (line 1545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1545, 12), 'interval', result_sub_67160)
        
        # Assigning a Call to a Tuple (line 1546):
        
        # Assigning a Subscript to a Name (line 1546):
        
        # Obtaining the type of the subscript
        int_67161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1546, 12), 'int')
        
        # Call to divmod(...): (line 1546)
        # Processing the call arguments (line 1546)
        # Getting the type of 'interval' (line 1546)
        interval_67163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 37), 'interval', False)
        # Getting the type of 'period' (line 1546)
        period_67164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 47), 'period', False)
        # Processing the call keyword arguments (line 1546)
        kwargs_67165 = {}
        # Getting the type of 'divmod' (line 1546)
        divmod_67162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 30), 'divmod', False)
        # Calling divmod(args, kwargs) (line 1546)
        divmod_call_result_67166 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 30), divmod_67162, *[interval_67163, period_67164], **kwargs_67165)
        
        # Obtaining the member '__getitem__' of a type (line 1546)
        getitem___67167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 12), divmod_call_result_67166, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1546)
        subscript_call_result_67168 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 12), getitem___67167, int_67161)
        
        # Assigning a type to the variable 'tuple_var_assignment_63629' (line 1546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 12), 'tuple_var_assignment_63629', subscript_call_result_67168)
        
        # Assigning a Subscript to a Name (line 1546):
        
        # Obtaining the type of the subscript
        int_67169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1546, 12), 'int')
        
        # Call to divmod(...): (line 1546)
        # Processing the call arguments (line 1546)
        # Getting the type of 'interval' (line 1546)
        interval_67171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 37), 'interval', False)
        # Getting the type of 'period' (line 1546)
        period_67172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 47), 'period', False)
        # Processing the call keyword arguments (line 1546)
        kwargs_67173 = {}
        # Getting the type of 'divmod' (line 1546)
        divmod_67170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 30), 'divmod', False)
        # Calling divmod(args, kwargs) (line 1546)
        divmod_call_result_67174 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 30), divmod_67170, *[interval_67171, period_67172], **kwargs_67173)
        
        # Obtaining the member '__getitem__' of a type (line 1546)
        getitem___67175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1546, 12), divmod_call_result_67174, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1546)
        subscript_call_result_67176 = invoke(stypy.reporting.localization.Localization(__file__, 1546, 12), getitem___67175, int_67169)
        
        # Assigning a type to the variable 'tuple_var_assignment_63630' (line 1546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 12), 'tuple_var_assignment_63630', subscript_call_result_67176)
        
        # Assigning a Name to a Name (line 1546):
        # Getting the type of 'tuple_var_assignment_63629' (line 1546)
        tuple_var_assignment_63629_67177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 12), 'tuple_var_assignment_63629')
        # Assigning a type to the variable 'n_periods' (line 1546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 12), 'n_periods', tuple_var_assignment_63629_67177)
        
        # Assigning a Name to a Name (line 1546):
        # Getting the type of 'tuple_var_assignment_63630' (line 1546)
        tuple_var_assignment_63630_67178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 12), 'tuple_var_assignment_63630')
        # Assigning a type to the variable 'left' (line 1546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 23), 'left', tuple_var_assignment_63630_67178)
        
        # Assigning a BinOp to a Name (line 1547):
        
        # Assigning a BinOp to a Name (line 1547):
        # Getting the type of 'n_periods' (line 1547)
        n_periods_67179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 18), 'n_periods')
        
        # Call to ib(...): (line 1547)
        # Processing the call arguments (line 1547)
        # Getting the type of 'xe' (line 1547)
        xe_67181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 34), 'xe', False)
        # Processing the call keyword arguments (line 1547)
        kwargs_67182 = {}
        # Getting the type of 'ib' (line 1547)
        ib_67180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 31), 'ib', False)
        # Calling ib(args, kwargs) (line 1547)
        ib_call_result_67183 = invoke(stypy.reporting.localization.Localization(__file__, 1547, 31), ib_67180, *[xe_67181], **kwargs_67182)
        
        
        # Call to ib(...): (line 1547)
        # Processing the call arguments (line 1547)
        # Getting the type of 'xs' (line 1547)
        xs_67185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 43), 'xs', False)
        # Processing the call keyword arguments (line 1547)
        kwargs_67186 = {}
        # Getting the type of 'ib' (line 1547)
        ib_67184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 40), 'ib', False)
        # Calling ib(args, kwargs) (line 1547)
        ib_call_result_67187 = invoke(stypy.reporting.localization.Localization(__file__, 1547, 40), ib_67184, *[xs_67185], **kwargs_67186)
        
        # Applying the binary operator '-' (line 1547)
        result_sub_67188 = python_operator(stypy.reporting.localization.Localization(__file__, 1547, 31), '-', ib_call_result_67183, ib_call_result_67187)
        
        # Applying the binary operator '*' (line 1547)
        result_mul_67189 = python_operator(stypy.reporting.localization.Localization(__file__, 1547, 18), '*', n_periods_67179, result_sub_67188)
        
        # Assigning a type to the variable 'res' (line 1547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 12), 'res', result_mul_67189)
        
        # Assigning a BinOp to a Name (line 1550):
        
        # Assigning a BinOp to a Name (line 1550):
        # Getting the type of 'xs' (line 1550)
        xs_67190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 16), 'xs')
        # Getting the type of 'a' (line 1550)
        a_67191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 22), 'a')
        # Getting the type of 'xs' (line 1550)
        xs_67192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 26), 'xs')
        # Applying the binary operator '-' (line 1550)
        result_sub_67193 = python_operator(stypy.reporting.localization.Localization(__file__, 1550, 22), '-', a_67191, xs_67192)
        
        # Getting the type of 'period' (line 1550)
        period_67194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 32), 'period')
        # Applying the binary operator '%' (line 1550)
        result_mod_67195 = python_operator(stypy.reporting.localization.Localization(__file__, 1550, 21), '%', result_sub_67193, period_67194)
        
        # Applying the binary operator '+' (line 1550)
        result_add_67196 = python_operator(stypy.reporting.localization.Localization(__file__, 1550, 16), '+', xs_67190, result_mod_67195)
        
        # Assigning a type to the variable 'a' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 12), 'a', result_add_67196)
        
        # Assigning a BinOp to a Name (line 1551):
        
        # Assigning a BinOp to a Name (line 1551):
        # Getting the type of 'a' (line 1551)
        a_67197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 16), 'a')
        # Getting the type of 'left' (line 1551)
        left_67198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 20), 'left')
        # Applying the binary operator '+' (line 1551)
        result_add_67199 = python_operator(stypy.reporting.localization.Localization(__file__, 1551, 16), '+', a_67197, left_67198)
        
        # Assigning a type to the variable 'b' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 12), 'b', result_add_67199)
        
        
        # Getting the type of 'b' (line 1555)
        b_67200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 15), 'b')
        # Getting the type of 'xe' (line 1555)
        xe_67201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 20), 'xe')
        # Applying the binary operator '<=' (line 1555)
        result_le_67202 = python_operator(stypy.reporting.localization.Localization(__file__, 1555, 15), '<=', b_67200, xe_67201)
        
        # Testing the type of an if condition (line 1555)
        if_condition_67203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1555, 12), result_le_67202)
        # Assigning a type to the variable 'if_condition_67203' (line 1555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1555, 12), 'if_condition_67203', if_condition_67203)
        # SSA begins for if statement (line 1555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'res' (line 1556)
        res_67204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 16), 'res')
        
        # Call to ib(...): (line 1556)
        # Processing the call arguments (line 1556)
        # Getting the type of 'b' (line 1556)
        b_67206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 26), 'b', False)
        # Processing the call keyword arguments (line 1556)
        kwargs_67207 = {}
        # Getting the type of 'ib' (line 1556)
        ib_67205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 23), 'ib', False)
        # Calling ib(args, kwargs) (line 1556)
        ib_call_result_67208 = invoke(stypy.reporting.localization.Localization(__file__, 1556, 23), ib_67205, *[b_67206], **kwargs_67207)
        
        
        # Call to ib(...): (line 1556)
        # Processing the call arguments (line 1556)
        # Getting the type of 'a' (line 1556)
        a_67210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 34), 'a', False)
        # Processing the call keyword arguments (line 1556)
        kwargs_67211 = {}
        # Getting the type of 'ib' (line 1556)
        ib_67209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 31), 'ib', False)
        # Calling ib(args, kwargs) (line 1556)
        ib_call_result_67212 = invoke(stypy.reporting.localization.Localization(__file__, 1556, 31), ib_67209, *[a_67210], **kwargs_67211)
        
        # Applying the binary operator '-' (line 1556)
        result_sub_67213 = python_operator(stypy.reporting.localization.Localization(__file__, 1556, 23), '-', ib_call_result_67208, ib_call_result_67212)
        
        # Applying the binary operator '+=' (line 1556)
        result_iadd_67214 = python_operator(stypy.reporting.localization.Localization(__file__, 1556, 16), '+=', res_67204, result_sub_67213)
        # Assigning a type to the variable 'res' (line 1556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1556, 16), 'res', result_iadd_67214)
        
        # SSA branch for the else part of an if statement (line 1555)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'res' (line 1558)
        res_67215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 16), 'res')
        
        # Call to ib(...): (line 1558)
        # Processing the call arguments (line 1558)
        # Getting the type of 'xe' (line 1558)
        xe_67217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 26), 'xe', False)
        # Processing the call keyword arguments (line 1558)
        kwargs_67218 = {}
        # Getting the type of 'ib' (line 1558)
        ib_67216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 23), 'ib', False)
        # Calling ib(args, kwargs) (line 1558)
        ib_call_result_67219 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 23), ib_67216, *[xe_67217], **kwargs_67218)
        
        
        # Call to ib(...): (line 1558)
        # Processing the call arguments (line 1558)
        # Getting the type of 'a' (line 1558)
        a_67221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 35), 'a', False)
        # Processing the call keyword arguments (line 1558)
        kwargs_67222 = {}
        # Getting the type of 'ib' (line 1558)
        ib_67220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 32), 'ib', False)
        # Calling ib(args, kwargs) (line 1558)
        ib_call_result_67223 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 32), ib_67220, *[a_67221], **kwargs_67222)
        
        # Applying the binary operator '-' (line 1558)
        result_sub_67224 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 23), '-', ib_call_result_67219, ib_call_result_67223)
        
        
        # Call to ib(...): (line 1558)
        # Processing the call arguments (line 1558)
        # Getting the type of 'xs' (line 1558)
        xs_67226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 43), 'xs', False)
        # Getting the type of 'left' (line 1558)
        left_67227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 48), 'left', False)
        # Applying the binary operator '+' (line 1558)
        result_add_67228 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 43), '+', xs_67226, left_67227)
        
        # Getting the type of 'a' (line 1558)
        a_67229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 55), 'a', False)
        # Applying the binary operator '+' (line 1558)
        result_add_67230 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 53), '+', result_add_67228, a_67229)
        
        # Getting the type of 'xe' (line 1558)
        xe_67231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 59), 'xe', False)
        # Applying the binary operator '-' (line 1558)
        result_sub_67232 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 57), '-', result_add_67230, xe_67231)
        
        # Processing the call keyword arguments (line 1558)
        kwargs_67233 = {}
        # Getting the type of 'ib' (line 1558)
        ib_67225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 40), 'ib', False)
        # Calling ib(args, kwargs) (line 1558)
        ib_call_result_67234 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 40), ib_67225, *[result_sub_67232], **kwargs_67233)
        
        # Applying the binary operator '+' (line 1558)
        result_add_67235 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 38), '+', result_sub_67224, ib_call_result_67234)
        
        
        # Call to ib(...): (line 1558)
        # Processing the call arguments (line 1558)
        # Getting the type of 'xs' (line 1558)
        xs_67237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 68), 'xs', False)
        # Processing the call keyword arguments (line 1558)
        kwargs_67238 = {}
        # Getting the type of 'ib' (line 1558)
        ib_67236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 65), 'ib', False)
        # Calling ib(args, kwargs) (line 1558)
        ib_call_result_67239 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 65), ib_67236, *[xs_67237], **kwargs_67238)
        
        # Applying the binary operator '-' (line 1558)
        result_sub_67240 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 63), '-', result_add_67235, ib_call_result_67239)
        
        # Applying the binary operator '+=' (line 1558)
        result_iadd_67241 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 16), '+=', res_67215, result_sub_67240)
        # Assigning a type to the variable 'res' (line 1558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 16), 'res', result_iadd_67241)
        
        # SSA join for if statement (line 1555)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'sign' (line 1560)
        sign_67242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 19), 'sign')
        # Getting the type of 'res' (line 1560)
        res_67243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 26), 'res')
        # Applying the binary operator '*' (line 1560)
        result_mul_67244 = python_operator(stypy.reporting.localization.Localization(__file__, 1560, 19), '*', sign_67242, res_67243)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1560, 12), 'stypy_return_type', result_mul_67244)
        # SSA branch for the else part of an if statement (line 1532)
        module_type_store.open_ssa_branch('else')
        
        # Call to ib(...): (line 1562)
        # Processing the call arguments (line 1562)
        # Getting the type of 'b' (line 1562)
        b_67246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 22), 'b', False)
        # Processing the call keyword arguments (line 1562)
        kwargs_67247 = {}
        # Getting the type of 'ib' (line 1562)
        ib_67245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 19), 'ib', False)
        # Calling ib(args, kwargs) (line 1562)
        ib_call_result_67248 = invoke(stypy.reporting.localization.Localization(__file__, 1562, 19), ib_67245, *[b_67246], **kwargs_67247)
        
        
        # Call to ib(...): (line 1562)
        # Processing the call arguments (line 1562)
        # Getting the type of 'a' (line 1562)
        a_67250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 30), 'a', False)
        # Processing the call keyword arguments (line 1562)
        kwargs_67251 = {}
        # Getting the type of 'ib' (line 1562)
        ib_67249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 27), 'ib', False)
        # Calling ib(args, kwargs) (line 1562)
        ib_call_result_67252 = invoke(stypy.reporting.localization.Localization(__file__, 1562, 27), ib_67249, *[a_67250], **kwargs_67251)
        
        # Applying the binary operator '-' (line 1562)
        result_sub_67253 = python_operator(stypy.reporting.localization.Localization(__file__, 1562, 19), '-', ib_call_result_67248, ib_call_result_67252)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 12), 'stypy_return_type', result_sub_67253)
        # SSA join for if statement (line 1532)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'integrate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'integrate' in the type store
        # Getting the type of 'stypy_return_type' (line 1500)
        stypy_return_type_67254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_67254)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'integrate'
        return stypy_return_type_67254


    @norecursion
    def extend(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1564)
        None_67255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 33), 'None')
        defaults = [None_67255]
        # Create a new context for function 'extend'
        module_type_store = module_type_store.open_function_context('extend', 1564, 4, False)
        # Assigning a type to the variable 'self' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BPoly.extend.__dict__.__setitem__('stypy_localization', localization)
        BPoly.extend.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BPoly.extend.__dict__.__setitem__('stypy_type_store', module_type_store)
        BPoly.extend.__dict__.__setitem__('stypy_function_name', 'BPoly.extend')
        BPoly.extend.__dict__.__setitem__('stypy_param_names_list', ['c', 'x', 'right'])
        BPoly.extend.__dict__.__setitem__('stypy_varargs_param_name', None)
        BPoly.extend.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BPoly.extend.__dict__.__setitem__('stypy_call_defaults', defaults)
        BPoly.extend.__dict__.__setitem__('stypy_call_varargs', varargs)
        BPoly.extend.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BPoly.extend.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BPoly.extend', ['c', 'x', 'right'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'extend', localization, ['c', 'x', 'right'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'extend(...)' code ##################

        
        # Assigning a Call to a Name (line 1565):
        
        # Assigning a Call to a Name (line 1565):
        
        # Call to max(...): (line 1565)
        # Processing the call arguments (line 1565)
        
        # Obtaining the type of the subscript
        int_67257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 29), 'int')
        # Getting the type of 'self' (line 1565)
        self_67258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 16), 'self', False)
        # Obtaining the member 'c' of a type (line 1565)
        c_67259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 16), self_67258, 'c')
        # Obtaining the member 'shape' of a type (line 1565)
        shape_67260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 16), c_67259, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1565)
        getitem___67261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 16), shape_67260, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1565)
        subscript_call_result_67262 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 16), getitem___67261, int_67257)
        
        
        # Obtaining the type of the subscript
        int_67263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 41), 'int')
        # Getting the type of 'c' (line 1565)
        c_67264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 33), 'c', False)
        # Obtaining the member 'shape' of a type (line 1565)
        shape_67265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 33), c_67264, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1565)
        getitem___67266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 33), shape_67265, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1565)
        subscript_call_result_67267 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 33), getitem___67266, int_67263)
        
        # Processing the call keyword arguments (line 1565)
        kwargs_67268 = {}
        # Getting the type of 'max' (line 1565)
        max_67256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 12), 'max', False)
        # Calling max(args, kwargs) (line 1565)
        max_call_result_67269 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 12), max_67256, *[subscript_call_result_67262, subscript_call_result_67267], **kwargs_67268)
        
        # Assigning a type to the variable 'k' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'k', max_call_result_67269)
        
        # Assigning a Call to a Attribute (line 1566):
        
        # Assigning a Call to a Attribute (line 1566):
        
        # Call to _raise_degree(...): (line 1566)
        # Processing the call arguments (line 1566)
        # Getting the type of 'self' (line 1566)
        self_67272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 36), 'self', False)
        # Obtaining the member 'c' of a type (line 1566)
        c_67273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 36), self_67272, 'c')
        # Getting the type of 'k' (line 1566)
        k_67274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 44), 'k', False)
        
        # Obtaining the type of the subscript
        int_67275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1566, 61), 'int')
        # Getting the type of 'self' (line 1566)
        self_67276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 48), 'self', False)
        # Obtaining the member 'c' of a type (line 1566)
        c_67277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 48), self_67276, 'c')
        # Obtaining the member 'shape' of a type (line 1566)
        shape_67278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 48), c_67277, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1566)
        getitem___67279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 48), shape_67278, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1566)
        subscript_call_result_67280 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 48), getitem___67279, int_67275)
        
        # Applying the binary operator '-' (line 1566)
        result_sub_67281 = python_operator(stypy.reporting.localization.Localization(__file__, 1566, 44), '-', k_67274, subscript_call_result_67280)
        
        # Processing the call keyword arguments (line 1566)
        kwargs_67282 = {}
        # Getting the type of 'self' (line 1566)
        self_67270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 17), 'self', False)
        # Obtaining the member '_raise_degree' of a type (line 1566)
        _raise_degree_67271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 17), self_67270, '_raise_degree')
        # Calling _raise_degree(args, kwargs) (line 1566)
        _raise_degree_call_result_67283 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 17), _raise_degree_67271, *[c_67273, result_sub_67281], **kwargs_67282)
        
        # Getting the type of 'self' (line 1566)
        self_67284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 8), 'self')
        # Setting the type of the member 'c' of a type (line 1566)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 8), self_67284, 'c', _raise_degree_call_result_67283)
        
        # Assigning a Call to a Name (line 1567):
        
        # Assigning a Call to a Name (line 1567):
        
        # Call to _raise_degree(...): (line 1567)
        # Processing the call arguments (line 1567)
        # Getting the type of 'c' (line 1567)
        c_67287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 31), 'c', False)
        # Getting the type of 'k' (line 1567)
        k_67288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 34), 'k', False)
        
        # Obtaining the type of the subscript
        int_67289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1567, 46), 'int')
        # Getting the type of 'c' (line 1567)
        c_67290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 38), 'c', False)
        # Obtaining the member 'shape' of a type (line 1567)
        shape_67291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 38), c_67290, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1567)
        getitem___67292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 38), shape_67291, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1567)
        subscript_call_result_67293 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 38), getitem___67292, int_67289)
        
        # Applying the binary operator '-' (line 1567)
        result_sub_67294 = python_operator(stypy.reporting.localization.Localization(__file__, 1567, 34), '-', k_67288, subscript_call_result_67293)
        
        # Processing the call keyword arguments (line 1567)
        kwargs_67295 = {}
        # Getting the type of 'self' (line 1567)
        self_67285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 12), 'self', False)
        # Obtaining the member '_raise_degree' of a type (line 1567)
        _raise_degree_67286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 12), self_67285, '_raise_degree')
        # Calling _raise_degree(args, kwargs) (line 1567)
        _raise_degree_call_result_67296 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 12), _raise_degree_67286, *[c_67287, result_sub_67294], **kwargs_67295)
        
        # Assigning a type to the variable 'c' (line 1567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 8), 'c', _raise_degree_call_result_67296)
        
        # Call to extend(...): (line 1568)
        # Processing the call arguments (line 1568)
        # Getting the type of 'self' (line 1568)
        self_67299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 33), 'self', False)
        # Getting the type of 'c' (line 1568)
        c_67300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 39), 'c', False)
        # Getting the type of 'x' (line 1568)
        x_67301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 42), 'x', False)
        # Getting the type of 'right' (line 1568)
        right_67302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 45), 'right', False)
        # Processing the call keyword arguments (line 1568)
        kwargs_67303 = {}
        # Getting the type of '_PPolyBase' (line 1568)
        _PPolyBase_67297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 15), '_PPolyBase', False)
        # Obtaining the member 'extend' of a type (line 1568)
        extend_67298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1568, 15), _PPolyBase_67297, 'extend')
        # Calling extend(args, kwargs) (line 1568)
        extend_call_result_67304 = invoke(stypy.reporting.localization.Localization(__file__, 1568, 15), extend_67298, *[self_67299, c_67300, x_67301, right_67302], **kwargs_67303)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1568, 8), 'stypy_return_type', extend_call_result_67304)
        
        # ################# End of 'extend(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'extend' in the type store
        # Getting the type of 'stypy_return_type' (line 1564)
        stypy_return_type_67305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_67305)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'extend'
        return stypy_return_type_67305

    
    # Assigning a Attribute to a Attribute (line 1569):

    @norecursion
    def from_power_basis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1572)
        None_67306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 46), 'None')
        defaults = [None_67306]
        # Create a new context for function 'from_power_basis'
        module_type_store = module_type_store.open_function_context('from_power_basis', 1571, 4, False)
        # Assigning a type to the variable 'self' (line 1572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BPoly.from_power_basis.__dict__.__setitem__('stypy_localization', localization)
        BPoly.from_power_basis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BPoly.from_power_basis.__dict__.__setitem__('stypy_type_store', module_type_store)
        BPoly.from_power_basis.__dict__.__setitem__('stypy_function_name', 'BPoly.from_power_basis')
        BPoly.from_power_basis.__dict__.__setitem__('stypy_param_names_list', ['pp', 'extrapolate'])
        BPoly.from_power_basis.__dict__.__setitem__('stypy_varargs_param_name', None)
        BPoly.from_power_basis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BPoly.from_power_basis.__dict__.__setitem__('stypy_call_defaults', defaults)
        BPoly.from_power_basis.__dict__.__setitem__('stypy_call_varargs', varargs)
        BPoly.from_power_basis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BPoly.from_power_basis.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BPoly.from_power_basis', ['pp', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'from_power_basis', localization, ['pp', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'from_power_basis(...)' code ##################

        str_67307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1585, (-1)), 'str', "\n        Construct a piecewise polynomial in Bernstein basis\n        from a power basis polynomial.\n\n        Parameters\n        ----------\n        pp : PPoly\n            A piecewise polynomial in the power basis\n        extrapolate : bool or 'periodic', optional\n            If bool, determines whether to extrapolate to out-of-bounds points\n            based on first and last intervals, or to return NaNs.\n            If 'periodic', periodic extrapolation is used. Default is True.\n        ")
        
        # Assigning a Call to a Name (line 1586):
        
        # Assigning a Call to a Name (line 1586):
        
        # Call to diff(...): (line 1586)
        # Processing the call arguments (line 1586)
        # Getting the type of 'pp' (line 1586)
        pp_67310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 21), 'pp', False)
        # Obtaining the member 'x' of a type (line 1586)
        x_67311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 21), pp_67310, 'x')
        # Processing the call keyword arguments (line 1586)
        kwargs_67312 = {}
        # Getting the type of 'np' (line 1586)
        np_67308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 13), 'np', False)
        # Obtaining the member 'diff' of a type (line 1586)
        diff_67309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 13), np_67308, 'diff')
        # Calling diff(args, kwargs) (line 1586)
        diff_call_result_67313 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 13), diff_67309, *[x_67311], **kwargs_67312)
        
        # Assigning a type to the variable 'dx' (line 1586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1586, 8), 'dx', diff_call_result_67313)
        
        # Assigning a BinOp to a Name (line 1587):
        
        # Assigning a BinOp to a Name (line 1587):
        
        # Obtaining the type of the subscript
        int_67314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 23), 'int')
        # Getting the type of 'pp' (line 1587)
        pp_67315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 12), 'pp')
        # Obtaining the member 'c' of a type (line 1587)
        c_67316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 12), pp_67315, 'c')
        # Obtaining the member 'shape' of a type (line 1587)
        shape_67317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 12), c_67316, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1587)
        getitem___67318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 12), shape_67317, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1587)
        subscript_call_result_67319 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 12), getitem___67318, int_67314)
        
        int_67320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 28), 'int')
        # Applying the binary operator '-' (line 1587)
        result_sub_67321 = python_operator(stypy.reporting.localization.Localization(__file__, 1587, 12), '-', subscript_call_result_67319, int_67320)
        
        # Assigning a type to the variable 'k' (line 1587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 8), 'k', result_sub_67321)
        
        # Assigning a BinOp to a Name (line 1589):
        
        # Assigning a BinOp to a Name (line 1589):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1589)
        tuple_67322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1589, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1589)
        # Adding element type (line 1589)
        # Getting the type of 'None' (line 1589)
        None_67323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 16), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1589, 16), tuple_67322, None_67323)
        
        # Getting the type of 'pp' (line 1589)
        pp_67324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 24), 'pp')
        # Obtaining the member 'c' of a type (line 1589)
        c_67325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1589, 24), pp_67324, 'c')
        # Obtaining the member 'ndim' of a type (line 1589)
        ndim_67326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1589, 24), c_67325, 'ndim')
        int_67327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1589, 34), 'int')
        # Applying the binary operator '-' (line 1589)
        result_sub_67328 = python_operator(stypy.reporting.localization.Localization(__file__, 1589, 24), '-', ndim_67326, int_67327)
        
        # Applying the binary operator '*' (line 1589)
        result_mul_67329 = python_operator(stypy.reporting.localization.Localization(__file__, 1589, 15), '*', tuple_67322, result_sub_67328)
        
        # Assigning a type to the variable 'rest' (line 1589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 8), 'rest', result_mul_67329)
        
        # Assigning a Call to a Name (line 1591):
        
        # Assigning a Call to a Name (line 1591):
        
        # Call to zeros_like(...): (line 1591)
        # Processing the call arguments (line 1591)
        # Getting the type of 'pp' (line 1591)
        pp_67332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 26), 'pp', False)
        # Obtaining the member 'c' of a type (line 1591)
        c_67333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 26), pp_67332, 'c')
        # Processing the call keyword arguments (line 1591)
        kwargs_67334 = {}
        # Getting the type of 'np' (line 1591)
        np_67330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 12), 'np', False)
        # Obtaining the member 'zeros_like' of a type (line 1591)
        zeros_like_67331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 12), np_67330, 'zeros_like')
        # Calling zeros_like(args, kwargs) (line 1591)
        zeros_like_call_result_67335 = invoke(stypy.reporting.localization.Localization(__file__, 1591, 12), zeros_like_67331, *[c_67333], **kwargs_67334)
        
        # Assigning a type to the variable 'c' (line 1591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1591, 8), 'c', zeros_like_call_result_67335)
        
        
        # Call to range(...): (line 1592)
        # Processing the call arguments (line 1592)
        # Getting the type of 'k' (line 1592)
        k_67337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 23), 'k', False)
        int_67338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1592, 25), 'int')
        # Applying the binary operator '+' (line 1592)
        result_add_67339 = python_operator(stypy.reporting.localization.Localization(__file__, 1592, 23), '+', k_67337, int_67338)
        
        # Processing the call keyword arguments (line 1592)
        kwargs_67340 = {}
        # Getting the type of 'range' (line 1592)
        range_67336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 17), 'range', False)
        # Calling range(args, kwargs) (line 1592)
        range_call_result_67341 = invoke(stypy.reporting.localization.Localization(__file__, 1592, 17), range_67336, *[result_add_67339], **kwargs_67340)
        
        # Testing the type of a for loop iterable (line 1592)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1592, 8), range_call_result_67341)
        # Getting the type of the for loop variable (line 1592)
        for_loop_var_67342 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1592, 8), range_call_result_67341)
        # Assigning a type to the variable 'a' (line 1592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 8), 'a', for_loop_var_67342)
        # SSA begins for a for statement (line 1592)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 1593):
        
        # Assigning a BinOp to a Name (line 1593):
        
        # Obtaining the type of the subscript
        # Getting the type of 'a' (line 1593)
        a_67343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 26), 'a')
        # Getting the type of 'pp' (line 1593)
        pp_67344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 21), 'pp')
        # Obtaining the member 'c' of a type (line 1593)
        c_67345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 21), pp_67344, 'c')
        # Obtaining the member '__getitem__' of a type (line 1593)
        getitem___67346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 21), c_67345, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1593)
        subscript_call_result_67347 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 21), getitem___67346, a_67343)
        
        
        # Call to comb(...): (line 1593)
        # Processing the call arguments (line 1593)
        # Getting the type of 'k' (line 1593)
        k_67349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 36), 'k', False)
        # Getting the type of 'k' (line 1593)
        k_67350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 39), 'k', False)
        # Getting the type of 'a' (line 1593)
        a_67351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 41), 'a', False)
        # Applying the binary operator '-' (line 1593)
        result_sub_67352 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 39), '-', k_67350, a_67351)
        
        # Processing the call keyword arguments (line 1593)
        kwargs_67353 = {}
        # Getting the type of 'comb' (line 1593)
        comb_67348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 31), 'comb', False)
        # Calling comb(args, kwargs) (line 1593)
        comb_call_result_67354 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 31), comb_67348, *[k_67349, result_sub_67352], **kwargs_67353)
        
        # Applying the binary operator 'div' (line 1593)
        result_div_67355 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 21), 'div', subscript_call_result_67347, comb_call_result_67354)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1593)
        tuple_67356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1593)
        # Adding element type (line 1593)
        
        # Call to slice(...): (line 1593)
        # Processing the call arguments (line 1593)
        # Getting the type of 'None' (line 1593)
        None_67358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 56), 'None', False)
        # Processing the call keyword arguments (line 1593)
        kwargs_67359 = {}
        # Getting the type of 'slice' (line 1593)
        slice_67357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 50), 'slice', False)
        # Calling slice(args, kwargs) (line 1593)
        slice_call_result_67360 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 50), slice_67357, *[None_67358], **kwargs_67359)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1593, 50), tuple_67356, slice_call_result_67360)
        
        # Getting the type of 'rest' (line 1593)
        rest_67361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 64), 'rest')
        # Applying the binary operator '+' (line 1593)
        result_add_67362 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 49), '+', tuple_67356, rest_67361)
        
        # Getting the type of 'dx' (line 1593)
        dx_67363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 46), 'dx')
        # Obtaining the member '__getitem__' of a type (line 1593)
        getitem___67364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 46), dx_67363, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1593)
        subscript_call_result_67365 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 46), getitem___67364, result_add_67362)
        
        # Getting the type of 'k' (line 1593)
        k_67366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 72), 'k')
        # Getting the type of 'a' (line 1593)
        a_67367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 74), 'a')
        # Applying the binary operator '-' (line 1593)
        result_sub_67368 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 72), '-', k_67366, a_67367)
        
        # Applying the binary operator '**' (line 1593)
        result_pow_67369 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 46), '**', subscript_call_result_67365, result_sub_67368)
        
        # Applying the binary operator '*' (line 1593)
        result_mul_67370 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 44), '*', result_div_67355, result_pow_67369)
        
        # Assigning a type to the variable 'factor' (line 1593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 12), 'factor', result_mul_67370)
        
        
        # Call to range(...): (line 1594)
        # Processing the call arguments (line 1594)
        # Getting the type of 'k' (line 1594)
        k_67372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 27), 'k', False)
        # Getting the type of 'a' (line 1594)
        a_67373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 29), 'a', False)
        # Applying the binary operator '-' (line 1594)
        result_sub_67374 = python_operator(stypy.reporting.localization.Localization(__file__, 1594, 27), '-', k_67372, a_67373)
        
        # Getting the type of 'k' (line 1594)
        k_67375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 32), 'k', False)
        int_67376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1594, 34), 'int')
        # Applying the binary operator '+' (line 1594)
        result_add_67377 = python_operator(stypy.reporting.localization.Localization(__file__, 1594, 32), '+', k_67375, int_67376)
        
        # Processing the call keyword arguments (line 1594)
        kwargs_67378 = {}
        # Getting the type of 'range' (line 1594)
        range_67371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 21), 'range', False)
        # Calling range(args, kwargs) (line 1594)
        range_call_result_67379 = invoke(stypy.reporting.localization.Localization(__file__, 1594, 21), range_67371, *[result_sub_67374, result_add_67377], **kwargs_67378)
        
        # Testing the type of a for loop iterable (line 1594)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1594, 12), range_call_result_67379)
        # Getting the type of the for loop variable (line 1594)
        for_loop_var_67380 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1594, 12), range_call_result_67379)
        # Assigning a type to the variable 'j' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'j', for_loop_var_67380)
        # SSA begins for a for statement (line 1594)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'c' (line 1595)
        c_67381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 16), 'c')
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 1595)
        j_67382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 18), 'j')
        # Getting the type of 'c' (line 1595)
        c_67383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 16), 'c')
        # Obtaining the member '__getitem__' of a type (line 1595)
        getitem___67384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1595, 16), c_67383, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1595)
        subscript_call_result_67385 = invoke(stypy.reporting.localization.Localization(__file__, 1595, 16), getitem___67384, j_67382)
        
        # Getting the type of 'factor' (line 1595)
        factor_67386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 24), 'factor')
        
        # Call to comb(...): (line 1595)
        # Processing the call arguments (line 1595)
        # Getting the type of 'j' (line 1595)
        j_67388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 38), 'j', False)
        # Getting the type of 'k' (line 1595)
        k_67389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 41), 'k', False)
        # Getting the type of 'a' (line 1595)
        a_67390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 43), 'a', False)
        # Applying the binary operator '-' (line 1595)
        result_sub_67391 = python_operator(stypy.reporting.localization.Localization(__file__, 1595, 41), '-', k_67389, a_67390)
        
        # Processing the call keyword arguments (line 1595)
        kwargs_67392 = {}
        # Getting the type of 'comb' (line 1595)
        comb_67387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 33), 'comb', False)
        # Calling comb(args, kwargs) (line 1595)
        comb_call_result_67393 = invoke(stypy.reporting.localization.Localization(__file__, 1595, 33), comb_67387, *[j_67388, result_sub_67391], **kwargs_67392)
        
        # Applying the binary operator '*' (line 1595)
        result_mul_67394 = python_operator(stypy.reporting.localization.Localization(__file__, 1595, 24), '*', factor_67386, comb_call_result_67393)
        
        # Applying the binary operator '+=' (line 1595)
        result_iadd_67395 = python_operator(stypy.reporting.localization.Localization(__file__, 1595, 16), '+=', subscript_call_result_67385, result_mul_67394)
        # Getting the type of 'c' (line 1595)
        c_67396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 16), 'c')
        # Getting the type of 'j' (line 1595)
        j_67397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 18), 'j')
        # Storing an element on a container (line 1595)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1595, 16), c_67396, (j_67397, result_iadd_67395))
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1597)
        # Getting the type of 'extrapolate' (line 1597)
        extrapolate_67398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 11), 'extrapolate')
        # Getting the type of 'None' (line 1597)
        None_67399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 26), 'None')
        
        (may_be_67400, more_types_in_union_67401) = may_be_none(extrapolate_67398, None_67399)

        if may_be_67400:

            if more_types_in_union_67401:
                # Runtime conditional SSA (line 1597)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1598):
            
            # Assigning a Attribute to a Name (line 1598):
            # Getting the type of 'pp' (line 1598)
            pp_67402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 26), 'pp')
            # Obtaining the member 'extrapolate' of a type (line 1598)
            extrapolate_67403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1598, 26), pp_67402, 'extrapolate')
            # Assigning a type to the variable 'extrapolate' (line 1598)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1598, 12), 'extrapolate', extrapolate_67403)

            if more_types_in_union_67401:
                # SSA join for if statement (line 1597)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to construct_fast(...): (line 1600)
        # Processing the call arguments (line 1600)
        # Getting the type of 'c' (line 1600)
        c_67406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 34), 'c', False)
        # Getting the type of 'pp' (line 1600)
        pp_67407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 37), 'pp', False)
        # Obtaining the member 'x' of a type (line 1600)
        x_67408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1600, 37), pp_67407, 'x')
        # Getting the type of 'extrapolate' (line 1600)
        extrapolate_67409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 43), 'extrapolate', False)
        # Getting the type of 'pp' (line 1600)
        pp_67410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 56), 'pp', False)
        # Obtaining the member 'axis' of a type (line 1600)
        axis_67411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1600, 56), pp_67410, 'axis')
        # Processing the call keyword arguments (line 1600)
        kwargs_67412 = {}
        # Getting the type of 'cls' (line 1600)
        cls_67404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 15), 'cls', False)
        # Obtaining the member 'construct_fast' of a type (line 1600)
        construct_fast_67405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1600, 15), cls_67404, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 1600)
        construct_fast_call_result_67413 = invoke(stypy.reporting.localization.Localization(__file__, 1600, 15), construct_fast_67405, *[c_67406, x_67408, extrapolate_67409, axis_67411], **kwargs_67412)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1600, 8), 'stypy_return_type', construct_fast_call_result_67413)
        
        # ################# End of 'from_power_basis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'from_power_basis' in the type store
        # Getting the type of 'stypy_return_type' (line 1571)
        stypy_return_type_67414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_67414)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'from_power_basis'
        return stypy_return_type_67414


    @norecursion
    def from_derivatives(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1603)
        None_67415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 45), 'None')
        # Getting the type of 'None' (line 1603)
        None_67416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 63), 'None')
        defaults = [None_67415, None_67416]
        # Create a new context for function 'from_derivatives'
        module_type_store = module_type_store.open_function_context('from_derivatives', 1602, 4, False)
        # Assigning a type to the variable 'self' (line 1603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1603, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BPoly.from_derivatives.__dict__.__setitem__('stypy_localization', localization)
        BPoly.from_derivatives.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BPoly.from_derivatives.__dict__.__setitem__('stypy_type_store', module_type_store)
        BPoly.from_derivatives.__dict__.__setitem__('stypy_function_name', 'BPoly.from_derivatives')
        BPoly.from_derivatives.__dict__.__setitem__('stypy_param_names_list', ['xi', 'yi', 'orders', 'extrapolate'])
        BPoly.from_derivatives.__dict__.__setitem__('stypy_varargs_param_name', None)
        BPoly.from_derivatives.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BPoly.from_derivatives.__dict__.__setitem__('stypy_call_defaults', defaults)
        BPoly.from_derivatives.__dict__.__setitem__('stypy_call_varargs', varargs)
        BPoly.from_derivatives.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BPoly.from_derivatives.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BPoly.from_derivatives', ['xi', 'yi', 'orders', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'from_derivatives', localization, ['xi', 'yi', 'orders', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'from_derivatives(...)' code ##################

        str_67417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, (-1)), 'str', "Construct a piecewise polynomial in the Bernstein basis,\n        compatible with the specified values and derivatives at breakpoints.\n\n        Parameters\n        ----------\n        xi : array_like\n            sorted 1D array of x-coordinates\n        yi : array_like or list of array_likes\n            ``yi[i][j]`` is the ``j``-th derivative known at ``xi[i]``\n        orders : None or int or array_like of ints. Default: None.\n            Specifies the degree of local polynomials. If not None, some\n            derivatives are ignored.\n        extrapolate : bool or 'periodic', optional\n            If bool, determines whether to extrapolate to out-of-bounds points\n            based on first and last intervals, or to return NaNs.\n            If 'periodic', periodic extrapolation is used. Default is True.\n\n        Notes\n        -----\n        If ``k`` derivatives are specified at a breakpoint ``x``, the\n        constructed polynomial is exactly ``k`` times continuously\n        differentiable at ``x``, unless the ``order`` is provided explicitly.\n        In the latter case, the smoothness of the polynomial at\n        the breakpoint is controlled by the ``order``.\n\n        Deduces the number of derivatives to match at each end\n        from ``order`` and the number of derivatives available. If\n        possible it uses the same number of derivatives from\n        each end; if the number is odd it tries to take the\n        extra one from y2. In any case if not enough derivatives\n        are available at one end or another it draws enough to\n        make up the total from the other end.\n\n        If the order is too high and not enough derivatives are available,\n        an exception is raised.\n\n        Examples\n        --------\n\n        >>> from scipy.interpolate import BPoly\n        >>> BPoly.from_derivatives([0, 1], [[1, 2], [3, 4]])\n\n        Creates a polynomial `f(x)` of degree 3, defined on `[0, 1]`\n        such that `f(0) = 1, df/dx(0) = 2, f(1) = 3, df/dx(1) = 4`\n\n        >>> BPoly.from_derivatives([0, 1, 2], [[0, 1], [0], [2]])\n\n        Creates a piecewise polynomial `f(x)`, such that\n        `f(0) = f(1) = 0`, `f(2) = 2`, and `df/dx(0) = 1`.\n        Based on the number of derivatives provided, the order of the\n        local polynomials is 2 on `[0, 1]` and 1 on `[1, 2]`.\n        Notice that no restriction is imposed on the derivatives at\n        `x = 1` and `x = 2`.\n\n        Indeed, the explicit form of the polynomial is::\n\n            f(x) = | x * (1 - x),  0 <= x < 1\n                   | 2 * (x - 1),  1 <= x <= 2\n\n        So that f'(1-0) = -1 and f'(1+0) = 2\n\n        ")
        
        # Assigning a Call to a Name (line 1666):
        
        # Assigning a Call to a Name (line 1666):
        
        # Call to asarray(...): (line 1666)
        # Processing the call arguments (line 1666)
        # Getting the type of 'xi' (line 1666)
        xi_67420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 24), 'xi', False)
        # Processing the call keyword arguments (line 1666)
        kwargs_67421 = {}
        # Getting the type of 'np' (line 1666)
        np_67418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 13), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1666)
        asarray_67419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1666, 13), np_67418, 'asarray')
        # Calling asarray(args, kwargs) (line 1666)
        asarray_call_result_67422 = invoke(stypy.reporting.localization.Localization(__file__, 1666, 13), asarray_67419, *[xi_67420], **kwargs_67421)
        
        # Assigning a type to the variable 'xi' (line 1666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 8), 'xi', asarray_call_result_67422)
        
        
        
        # Call to len(...): (line 1667)
        # Processing the call arguments (line 1667)
        # Getting the type of 'xi' (line 1667)
        xi_67424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 15), 'xi', False)
        # Processing the call keyword arguments (line 1667)
        kwargs_67425 = {}
        # Getting the type of 'len' (line 1667)
        len_67423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 11), 'len', False)
        # Calling len(args, kwargs) (line 1667)
        len_call_result_67426 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 11), len_67423, *[xi_67424], **kwargs_67425)
        
        
        # Call to len(...): (line 1667)
        # Processing the call arguments (line 1667)
        # Getting the type of 'yi' (line 1667)
        yi_67428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 26), 'yi', False)
        # Processing the call keyword arguments (line 1667)
        kwargs_67429 = {}
        # Getting the type of 'len' (line 1667)
        len_67427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 22), 'len', False)
        # Calling len(args, kwargs) (line 1667)
        len_call_result_67430 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 22), len_67427, *[yi_67428], **kwargs_67429)
        
        # Applying the binary operator '!=' (line 1667)
        result_ne_67431 = python_operator(stypy.reporting.localization.Localization(__file__, 1667, 11), '!=', len_call_result_67426, len_call_result_67430)
        
        # Testing the type of an if condition (line 1667)
        if_condition_67432 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1667, 8), result_ne_67431)
        # Assigning a type to the variable 'if_condition_67432' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'if_condition_67432', if_condition_67432)
        # SSA begins for if statement (line 1667)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1668)
        # Processing the call arguments (line 1668)
        str_67434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 29), 'str', 'xi and yi need to have the same length')
        # Processing the call keyword arguments (line 1668)
        kwargs_67435 = {}
        # Getting the type of 'ValueError' (line 1668)
        ValueError_67433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1668)
        ValueError_call_result_67436 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 18), ValueError_67433, *[str_67434], **kwargs_67435)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1668, 12), ValueError_call_result_67436, 'raise parameter', BaseException)
        # SSA join for if statement (line 1667)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to any(...): (line 1669)
        # Processing the call arguments (line 1669)
        
        
        # Obtaining the type of the subscript
        int_67439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1669, 21), 'int')
        slice_67440 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1669, 18), int_67439, None, None)
        # Getting the type of 'xi' (line 1669)
        xi_67441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 18), 'xi', False)
        # Obtaining the member '__getitem__' of a type (line 1669)
        getitem___67442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 18), xi_67441, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1669)
        subscript_call_result_67443 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 18), getitem___67442, slice_67440)
        
        
        # Obtaining the type of the subscript
        int_67444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1669, 31), 'int')
        slice_67445 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1669, 27), None, int_67444, None)
        # Getting the type of 'xi' (line 1669)
        xi_67446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 27), 'xi', False)
        # Obtaining the member '__getitem__' of a type (line 1669)
        getitem___67447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 27), xi_67446, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1669)
        subscript_call_result_67448 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 27), getitem___67447, slice_67445)
        
        # Applying the binary operator '-' (line 1669)
        result_sub_67449 = python_operator(stypy.reporting.localization.Localization(__file__, 1669, 18), '-', subscript_call_result_67443, subscript_call_result_67448)
        
        int_67450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1669, 37), 'int')
        # Applying the binary operator '<=' (line 1669)
        result_le_67451 = python_operator(stypy.reporting.localization.Localization(__file__, 1669, 18), '<=', result_sub_67449, int_67450)
        
        # Processing the call keyword arguments (line 1669)
        kwargs_67452 = {}
        # Getting the type of 'np' (line 1669)
        np_67437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 11), 'np', False)
        # Obtaining the member 'any' of a type (line 1669)
        any_67438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 11), np_67437, 'any')
        # Calling any(args, kwargs) (line 1669)
        any_call_result_67453 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 11), any_67438, *[result_le_67451], **kwargs_67452)
        
        # Testing the type of an if condition (line 1669)
        if_condition_67454 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1669, 8), any_call_result_67453)
        # Assigning a type to the variable 'if_condition_67454' (line 1669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 8), 'if_condition_67454', if_condition_67454)
        # SSA begins for if statement (line 1669)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1670)
        # Processing the call arguments (line 1670)
        str_67456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 29), 'str', 'x coordinates are not in increasing order')
        # Processing the call keyword arguments (line 1670)
        kwargs_67457 = {}
        # Getting the type of 'ValueError' (line 1670)
        ValueError_67455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1670)
        ValueError_call_result_67458 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 18), ValueError_67455, *[str_67456], **kwargs_67457)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1670, 12), ValueError_call_result_67458, 'raise parameter', BaseException)
        # SSA join for if statement (line 1669)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1673):
        
        # Assigning a BinOp to a Name (line 1673):
        
        # Call to len(...): (line 1673)
        # Processing the call arguments (line 1673)
        # Getting the type of 'xi' (line 1673)
        xi_67460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 16), 'xi', False)
        # Processing the call keyword arguments (line 1673)
        kwargs_67461 = {}
        # Getting the type of 'len' (line 1673)
        len_67459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 12), 'len', False)
        # Calling len(args, kwargs) (line 1673)
        len_call_result_67462 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 12), len_67459, *[xi_67460], **kwargs_67461)
        
        int_67463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1673, 22), 'int')
        # Applying the binary operator '-' (line 1673)
        result_sub_67464 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 12), '-', len_call_result_67462, int_67463)
        
        # Assigning a type to the variable 'm' (line 1673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 8), 'm', result_sub_67464)
        
        
        # SSA begins for try-except statement (line 1676)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1677):
        
        # Assigning a Call to a Name (line 1677):
        
        # Call to max(...): (line 1677)
        # Processing the call arguments (line 1677)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1677, 20, True)
        # Calculating comprehension expression
        
        # Call to range(...): (line 1677)
        # Processing the call arguments (line 1677)
        # Getting the type of 'm' (line 1677)
        m_67484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 61), 'm', False)
        # Processing the call keyword arguments (line 1677)
        kwargs_67485 = {}
        # Getting the type of 'range' (line 1677)
        range_67483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 55), 'range', False)
        # Calling range(args, kwargs) (line 1677)
        range_call_result_67486 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 55), range_67483, *[m_67484], **kwargs_67485)
        
        comprehension_67487 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1677, 20), range_call_result_67486)
        # Assigning a type to the variable 'i' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 20), 'i', comprehension_67487)
        
        # Call to len(...): (line 1677)
        # Processing the call arguments (line 1677)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1677)
        i_67467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 27), 'i', False)
        # Getting the type of 'yi' (line 1677)
        yi_67468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 24), 'yi', False)
        # Obtaining the member '__getitem__' of a type (line 1677)
        getitem___67469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 24), yi_67468, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1677)
        subscript_call_result_67470 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 24), getitem___67469, i_67467)
        
        # Processing the call keyword arguments (line 1677)
        kwargs_67471 = {}
        # Getting the type of 'len' (line 1677)
        len_67466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 20), 'len', False)
        # Calling len(args, kwargs) (line 1677)
        len_call_result_67472 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 20), len_67466, *[subscript_call_result_67470], **kwargs_67471)
        
        
        # Call to len(...): (line 1677)
        # Processing the call arguments (line 1677)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1677)
        i_67474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 40), 'i', False)
        int_67475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 42), 'int')
        # Applying the binary operator '+' (line 1677)
        result_add_67476 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 40), '+', i_67474, int_67475)
        
        # Getting the type of 'yi' (line 1677)
        yi_67477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 37), 'yi', False)
        # Obtaining the member '__getitem__' of a type (line 1677)
        getitem___67478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 37), yi_67477, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1677)
        subscript_call_result_67479 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 37), getitem___67478, result_add_67476)
        
        # Processing the call keyword arguments (line 1677)
        kwargs_67480 = {}
        # Getting the type of 'len' (line 1677)
        len_67473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 33), 'len', False)
        # Calling len(args, kwargs) (line 1677)
        len_call_result_67481 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 33), len_67473, *[subscript_call_result_67479], **kwargs_67480)
        
        # Applying the binary operator '+' (line 1677)
        result_add_67482 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 20), '+', len_call_result_67472, len_call_result_67481)
        
        list_67488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 20), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1677, 20), list_67488, result_add_67482)
        # Processing the call keyword arguments (line 1677)
        kwargs_67489 = {}
        # Getting the type of 'max' (line 1677)
        max_67465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 16), 'max', False)
        # Calling max(args, kwargs) (line 1677)
        max_call_result_67490 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 16), max_67465, *[list_67488], **kwargs_67489)
        
        # Assigning a type to the variable 'k' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 12), 'k', max_call_result_67490)
        # SSA branch for the except part of a try statement (line 1676)
        # SSA branch for the except 'TypeError' branch of a try statement (line 1676)
        module_type_store.open_ssa_branch('except')
        
        # Call to ValueError(...): (line 1679)
        # Processing the call arguments (line 1679)
        str_67492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 29), 'str', 'Using a 1D array for y? Please .reshape(-1, 1).')
        # Processing the call keyword arguments (line 1679)
        kwargs_67493 = {}
        # Getting the type of 'ValueError' (line 1679)
        ValueError_67491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1679)
        ValueError_call_result_67494 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 18), ValueError_67491, *[str_67492], **kwargs_67493)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1679, 12), ValueError_call_result_67494, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1676)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1681)
        # Getting the type of 'orders' (line 1681)
        orders_67495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 11), 'orders')
        # Getting the type of 'None' (line 1681)
        None_67496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 21), 'None')
        
        (may_be_67497, more_types_in_union_67498) = may_be_none(orders_67495, None_67496)

        if may_be_67497:

            if more_types_in_union_67498:
                # Runtime conditional SSA (line 1681)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 1682):
            
            # Assigning a BinOp to a Name (line 1682):
            
            # Obtaining an instance of the builtin type 'list' (line 1682)
            list_67499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1682, 21), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1682)
            # Adding element type (line 1682)
            # Getting the type of 'None' (line 1682)
            None_67500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 22), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1682, 21), list_67499, None_67500)
            
            # Getting the type of 'm' (line 1682)
            m_67501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 30), 'm')
            # Applying the binary operator '*' (line 1682)
            result_mul_67502 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 21), '*', list_67499, m_67501)
            
            # Assigning a type to the variable 'orders' (line 1682)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 12), 'orders', result_mul_67502)

            if more_types_in_union_67498:
                # Runtime conditional SSA for else branch (line 1681)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_67497) or more_types_in_union_67498):
            
            
            # Call to isinstance(...): (line 1684)
            # Processing the call arguments (line 1684)
            # Getting the type of 'orders' (line 1684)
            orders_67504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 26), 'orders', False)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1684)
            tuple_67505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, 35), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1684)
            # Adding element type (line 1684)
            # Getting the type of 'integer_types' (line 1684)
            integer_types_67506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 35), 'integer_types', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1684, 35), tuple_67505, integer_types_67506)
            # Adding element type (line 1684)
            # Getting the type of 'np' (line 1684)
            np_67507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 50), 'np', False)
            # Obtaining the member 'integer' of a type (line 1684)
            integer_67508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 50), np_67507, 'integer')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1684, 35), tuple_67505, integer_67508)
            
            # Processing the call keyword arguments (line 1684)
            kwargs_67509 = {}
            # Getting the type of 'isinstance' (line 1684)
            isinstance_67503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1684)
            isinstance_call_result_67510 = invoke(stypy.reporting.localization.Localization(__file__, 1684, 15), isinstance_67503, *[orders_67504, tuple_67505], **kwargs_67509)
            
            # Testing the type of an if condition (line 1684)
            if_condition_67511 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1684, 12), isinstance_call_result_67510)
            # Assigning a type to the variable 'if_condition_67511' (line 1684)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1684, 12), 'if_condition_67511', if_condition_67511)
            # SSA begins for if statement (line 1684)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 1685):
            
            # Assigning a BinOp to a Name (line 1685):
            
            # Obtaining an instance of the builtin type 'list' (line 1685)
            list_67512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1685, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1685)
            # Adding element type (line 1685)
            # Getting the type of 'orders' (line 1685)
            orders_67513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 26), 'orders')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1685, 25), list_67512, orders_67513)
            
            # Getting the type of 'm' (line 1685)
            m_67514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 36), 'm')
            # Applying the binary operator '*' (line 1685)
            result_mul_67515 = python_operator(stypy.reporting.localization.Localization(__file__, 1685, 25), '*', list_67512, m_67514)
            
            # Assigning a type to the variable 'orders' (line 1685)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 16), 'orders', result_mul_67515)
            # SSA join for if statement (line 1684)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Call to a Name (line 1686):
            
            # Assigning a Call to a Name (line 1686):
            
            # Call to max(...): (line 1686)
            # Processing the call arguments (line 1686)
            # Getting the type of 'k' (line 1686)
            k_67517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 20), 'k', False)
            
            # Call to max(...): (line 1686)
            # Processing the call arguments (line 1686)
            # Getting the type of 'orders' (line 1686)
            orders_67519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 27), 'orders', False)
            # Processing the call keyword arguments (line 1686)
            kwargs_67520 = {}
            # Getting the type of 'max' (line 1686)
            max_67518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 23), 'max', False)
            # Calling max(args, kwargs) (line 1686)
            max_call_result_67521 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 23), max_67518, *[orders_67519], **kwargs_67520)
            
            # Processing the call keyword arguments (line 1686)
            kwargs_67522 = {}
            # Getting the type of 'max' (line 1686)
            max_67516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 16), 'max', False)
            # Calling max(args, kwargs) (line 1686)
            max_call_result_67523 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 16), max_67516, *[k_67517, max_call_result_67521], **kwargs_67522)
            
            # Assigning a type to the variable 'k' (line 1686)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 12), 'k', max_call_result_67523)
            
            
            # Call to any(...): (line 1688)
            # Processing the call arguments (line 1688)
            # Calculating generator expression
            module_type_store = module_type_store.open_function_context('list comprehension expression', 1688, 19, True)
            # Calculating comprehension expression
            # Getting the type of 'orders' (line 1688)
            orders_67528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 35), 'orders', False)
            comprehension_67529 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1688, 19), orders_67528)
            # Assigning a type to the variable 'o' (line 1688)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 19), 'o', comprehension_67529)
            
            # Getting the type of 'o' (line 1688)
            o_67525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 19), 'o', False)
            int_67526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 24), 'int')
            # Applying the binary operator '<=' (line 1688)
            result_le_67527 = python_operator(stypy.reporting.localization.Localization(__file__, 1688, 19), '<=', o_67525, int_67526)
            
            list_67530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 19), 'list')
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1688, 19), list_67530, result_le_67527)
            # Processing the call keyword arguments (line 1688)
            kwargs_67531 = {}
            # Getting the type of 'any' (line 1688)
            any_67524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 15), 'any', False)
            # Calling any(args, kwargs) (line 1688)
            any_call_result_67532 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 15), any_67524, *[list_67530], **kwargs_67531)
            
            # Testing the type of an if condition (line 1688)
            if_condition_67533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1688, 12), any_call_result_67532)
            # Assigning a type to the variable 'if_condition_67533' (line 1688)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 12), 'if_condition_67533', if_condition_67533)
            # SSA begins for if statement (line 1688)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1689)
            # Processing the call arguments (line 1689)
            str_67535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1689, 33), 'str', 'Orders must be positive.')
            # Processing the call keyword arguments (line 1689)
            kwargs_67536 = {}
            # Getting the type of 'ValueError' (line 1689)
            ValueError_67534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1689)
            ValueError_call_result_67537 = invoke(stypy.reporting.localization.Localization(__file__, 1689, 22), ValueError_67534, *[str_67535], **kwargs_67536)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1689, 16), ValueError_call_result_67537, 'raise parameter', BaseException)
            # SSA join for if statement (line 1688)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_67497 and more_types_in_union_67498):
                # SSA join for if statement (line 1681)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a List to a Name (line 1691):
        
        # Assigning a List to a Name (line 1691):
        
        # Obtaining an instance of the builtin type 'list' (line 1691)
        list_67538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1691, 12), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1691)
        
        # Assigning a type to the variable 'c' (line 1691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 8), 'c', list_67538)
        
        
        # Call to range(...): (line 1692)
        # Processing the call arguments (line 1692)
        # Getting the type of 'm' (line 1692)
        m_67540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 23), 'm', False)
        # Processing the call keyword arguments (line 1692)
        kwargs_67541 = {}
        # Getting the type of 'range' (line 1692)
        range_67539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 17), 'range', False)
        # Calling range(args, kwargs) (line 1692)
        range_call_result_67542 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 17), range_67539, *[m_67540], **kwargs_67541)
        
        # Testing the type of a for loop iterable (line 1692)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1692, 8), range_call_result_67542)
        # Getting the type of the for loop variable (line 1692)
        for_loop_var_67543 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1692, 8), range_call_result_67542)
        # Assigning a type to the variable 'i' (line 1692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 8), 'i', for_loop_var_67543)
        # SSA begins for a for statement (line 1692)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Tuple to a Tuple (line 1693):
        
        # Assigning a Subscript to a Name (line 1693):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1693)
        i_67544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 24), 'i')
        # Getting the type of 'yi' (line 1693)
        yi_67545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 21), 'yi')
        # Obtaining the member '__getitem__' of a type (line 1693)
        getitem___67546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 21), yi_67545, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1693)
        subscript_call_result_67547 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 21), getitem___67546, i_67544)
        
        # Assigning a type to the variable 'tuple_assignment_63631' (line 1693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 12), 'tuple_assignment_63631', subscript_call_result_67547)
        
        # Assigning a Subscript to a Name (line 1693):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1693)
        i_67548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 31), 'i')
        int_67549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 33), 'int')
        # Applying the binary operator '+' (line 1693)
        result_add_67550 = python_operator(stypy.reporting.localization.Localization(__file__, 1693, 31), '+', i_67548, int_67549)
        
        # Getting the type of 'yi' (line 1693)
        yi_67551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 28), 'yi')
        # Obtaining the member '__getitem__' of a type (line 1693)
        getitem___67552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 28), yi_67551, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1693)
        subscript_call_result_67553 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 28), getitem___67552, result_add_67550)
        
        # Assigning a type to the variable 'tuple_assignment_63632' (line 1693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 12), 'tuple_assignment_63632', subscript_call_result_67553)
        
        # Assigning a Name to a Name (line 1693):
        # Getting the type of 'tuple_assignment_63631' (line 1693)
        tuple_assignment_63631_67554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 12), 'tuple_assignment_63631')
        # Assigning a type to the variable 'y1' (line 1693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 12), 'y1', tuple_assignment_63631_67554)
        
        # Assigning a Name to a Name (line 1693):
        # Getting the type of 'tuple_assignment_63632' (line 1693)
        tuple_assignment_63632_67555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 12), 'tuple_assignment_63632')
        # Assigning a type to the variable 'y2' (line 1693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 16), 'y2', tuple_assignment_63632_67555)
        
        # Type idiom detected: calculating its left and rigth part (line 1694)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1694)
        i_67556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 22), 'i')
        # Getting the type of 'orders' (line 1694)
        orders_67557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 15), 'orders')
        # Obtaining the member '__getitem__' of a type (line 1694)
        getitem___67558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 15), orders_67557, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1694)
        subscript_call_result_67559 = invoke(stypy.reporting.localization.Localization(__file__, 1694, 15), getitem___67558, i_67556)
        
        # Getting the type of 'None' (line 1694)
        None_67560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 28), 'None')
        
        (may_be_67561, more_types_in_union_67562) = may_be_none(subscript_call_result_67559, None_67560)

        if may_be_67561:

            if more_types_in_union_67562:
                # Runtime conditional SSA (line 1694)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Tuple to a Tuple (line 1695):
            
            # Assigning a Call to a Name (line 1695):
            
            # Call to len(...): (line 1695)
            # Processing the call arguments (line 1695)
            # Getting the type of 'y1' (line 1695)
            y1_67564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 29), 'y1', False)
            # Processing the call keyword arguments (line 1695)
            kwargs_67565 = {}
            # Getting the type of 'len' (line 1695)
            len_67563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 25), 'len', False)
            # Calling len(args, kwargs) (line 1695)
            len_call_result_67566 = invoke(stypy.reporting.localization.Localization(__file__, 1695, 25), len_67563, *[y1_67564], **kwargs_67565)
            
            # Assigning a type to the variable 'tuple_assignment_63633' (line 1695)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 16), 'tuple_assignment_63633', len_call_result_67566)
            
            # Assigning a Call to a Name (line 1695):
            
            # Call to len(...): (line 1695)
            # Processing the call arguments (line 1695)
            # Getting the type of 'y2' (line 1695)
            y2_67568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 38), 'y2', False)
            # Processing the call keyword arguments (line 1695)
            kwargs_67569 = {}
            # Getting the type of 'len' (line 1695)
            len_67567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 34), 'len', False)
            # Calling len(args, kwargs) (line 1695)
            len_call_result_67570 = invoke(stypy.reporting.localization.Localization(__file__, 1695, 34), len_67567, *[y2_67568], **kwargs_67569)
            
            # Assigning a type to the variable 'tuple_assignment_63634' (line 1695)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 16), 'tuple_assignment_63634', len_call_result_67570)
            
            # Assigning a Name to a Name (line 1695):
            # Getting the type of 'tuple_assignment_63633' (line 1695)
            tuple_assignment_63633_67571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 16), 'tuple_assignment_63633')
            # Assigning a type to the variable 'n1' (line 1695)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 16), 'n1', tuple_assignment_63633_67571)
            
            # Assigning a Name to a Name (line 1695):
            # Getting the type of 'tuple_assignment_63634' (line 1695)
            tuple_assignment_63634_67572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 16), 'tuple_assignment_63634')
            # Assigning a type to the variable 'n2' (line 1695)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 20), 'n2', tuple_assignment_63634_67572)

            if more_types_in_union_67562:
                # Runtime conditional SSA for else branch (line 1694)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_67561) or more_types_in_union_67562):
            
            # Assigning a BinOp to a Name (line 1697):
            
            # Assigning a BinOp to a Name (line 1697):
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 1697)
            i_67573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 27), 'i')
            # Getting the type of 'orders' (line 1697)
            orders_67574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 20), 'orders')
            # Obtaining the member '__getitem__' of a type (line 1697)
            getitem___67575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1697, 20), orders_67574, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1697)
            subscript_call_result_67576 = invoke(stypy.reporting.localization.Localization(__file__, 1697, 20), getitem___67575, i_67573)
            
            int_67577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1697, 30), 'int')
            # Applying the binary operator '+' (line 1697)
            result_add_67578 = python_operator(stypy.reporting.localization.Localization(__file__, 1697, 20), '+', subscript_call_result_67576, int_67577)
            
            # Assigning a type to the variable 'n' (line 1697)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 16), 'n', result_add_67578)
            
            # Assigning a Call to a Name (line 1698):
            
            # Assigning a Call to a Name (line 1698):
            
            # Call to min(...): (line 1698)
            # Processing the call arguments (line 1698)
            # Getting the type of 'n' (line 1698)
            n_67580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 25), 'n', False)
            int_67581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1698, 28), 'int')
            # Applying the binary operator '//' (line 1698)
            result_floordiv_67582 = python_operator(stypy.reporting.localization.Localization(__file__, 1698, 25), '//', n_67580, int_67581)
            
            
            # Call to len(...): (line 1698)
            # Processing the call arguments (line 1698)
            # Getting the type of 'y1' (line 1698)
            y1_67584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 35), 'y1', False)
            # Processing the call keyword arguments (line 1698)
            kwargs_67585 = {}
            # Getting the type of 'len' (line 1698)
            len_67583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 31), 'len', False)
            # Calling len(args, kwargs) (line 1698)
            len_call_result_67586 = invoke(stypy.reporting.localization.Localization(__file__, 1698, 31), len_67583, *[y1_67584], **kwargs_67585)
            
            # Processing the call keyword arguments (line 1698)
            kwargs_67587 = {}
            # Getting the type of 'min' (line 1698)
            min_67579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 21), 'min', False)
            # Calling min(args, kwargs) (line 1698)
            min_call_result_67588 = invoke(stypy.reporting.localization.Localization(__file__, 1698, 21), min_67579, *[result_floordiv_67582, len_call_result_67586], **kwargs_67587)
            
            # Assigning a type to the variable 'n1' (line 1698)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1698, 16), 'n1', min_call_result_67588)
            
            # Assigning a Call to a Name (line 1699):
            
            # Assigning a Call to a Name (line 1699):
            
            # Call to min(...): (line 1699)
            # Processing the call arguments (line 1699)
            # Getting the type of 'n' (line 1699)
            n_67590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 25), 'n', False)
            # Getting the type of 'n1' (line 1699)
            n1_67591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 29), 'n1', False)
            # Applying the binary operator '-' (line 1699)
            result_sub_67592 = python_operator(stypy.reporting.localization.Localization(__file__, 1699, 25), '-', n_67590, n1_67591)
            
            
            # Call to len(...): (line 1699)
            # Processing the call arguments (line 1699)
            # Getting the type of 'y2' (line 1699)
            y2_67594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 37), 'y2', False)
            # Processing the call keyword arguments (line 1699)
            kwargs_67595 = {}
            # Getting the type of 'len' (line 1699)
            len_67593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 33), 'len', False)
            # Calling len(args, kwargs) (line 1699)
            len_call_result_67596 = invoke(stypy.reporting.localization.Localization(__file__, 1699, 33), len_67593, *[y2_67594], **kwargs_67595)
            
            # Processing the call keyword arguments (line 1699)
            kwargs_67597 = {}
            # Getting the type of 'min' (line 1699)
            min_67589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 21), 'min', False)
            # Calling min(args, kwargs) (line 1699)
            min_call_result_67598 = invoke(stypy.reporting.localization.Localization(__file__, 1699, 21), min_67589, *[result_sub_67592, len_call_result_67596], **kwargs_67597)
            
            # Assigning a type to the variable 'n2' (line 1699)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1699, 16), 'n2', min_call_result_67598)
            
            # Assigning a Call to a Name (line 1700):
            
            # Assigning a Call to a Name (line 1700):
            
            # Call to min(...): (line 1700)
            # Processing the call arguments (line 1700)
            # Getting the type of 'n' (line 1700)
            n_67600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 25), 'n', False)
            # Getting the type of 'n2' (line 1700)
            n2_67601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 29), 'n2', False)
            # Applying the binary operator '-' (line 1700)
            result_sub_67602 = python_operator(stypy.reporting.localization.Localization(__file__, 1700, 25), '-', n_67600, n2_67601)
            
            
            # Call to len(...): (line 1700)
            # Processing the call arguments (line 1700)
            # Getting the type of 'y2' (line 1700)
            y2_67604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 37), 'y2', False)
            # Processing the call keyword arguments (line 1700)
            kwargs_67605 = {}
            # Getting the type of 'len' (line 1700)
            len_67603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 33), 'len', False)
            # Calling len(args, kwargs) (line 1700)
            len_call_result_67606 = invoke(stypy.reporting.localization.Localization(__file__, 1700, 33), len_67603, *[y2_67604], **kwargs_67605)
            
            # Processing the call keyword arguments (line 1700)
            kwargs_67607 = {}
            # Getting the type of 'min' (line 1700)
            min_67599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 21), 'min', False)
            # Calling min(args, kwargs) (line 1700)
            min_call_result_67608 = invoke(stypy.reporting.localization.Localization(__file__, 1700, 21), min_67599, *[result_sub_67602, len_call_result_67606], **kwargs_67607)
            
            # Assigning a type to the variable 'n1' (line 1700)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 16), 'n1', min_call_result_67608)
            
            
            # Getting the type of 'n1' (line 1701)
            n1_67609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 19), 'n1')
            # Getting the type of 'n2' (line 1701)
            n2_67610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 22), 'n2')
            # Applying the binary operator '+' (line 1701)
            result_add_67611 = python_operator(stypy.reporting.localization.Localization(__file__, 1701, 19), '+', n1_67609, n2_67610)
            
            # Getting the type of 'n' (line 1701)
            n_67612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 28), 'n')
            # Applying the binary operator '!=' (line 1701)
            result_ne_67613 = python_operator(stypy.reporting.localization.Localization(__file__, 1701, 19), '!=', result_add_67611, n_67612)
            
            # Testing the type of an if condition (line 1701)
            if_condition_67614 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1701, 16), result_ne_67613)
            # Assigning a type to the variable 'if_condition_67614' (line 1701)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 16), 'if_condition_67614', if_condition_67614)
            # SSA begins for if statement (line 1701)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 1702):
            
            # Assigning a BinOp to a Name (line 1702):
            str_67615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1702, 28), 'str', 'Point %g has %d derivatives, point %g has %d derivatives, but order %d requested')
            
            # Obtaining an instance of the builtin type 'tuple' (line 1704)
            tuple_67616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1704)
            # Adding element type (line 1704)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 1704)
            i_67617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 34), 'i')
            # Getting the type of 'xi' (line 1704)
            xi_67618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 31), 'xi')
            # Obtaining the member '__getitem__' of a type (line 1704)
            getitem___67619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1704, 31), xi_67618, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1704)
            subscript_call_result_67620 = invoke(stypy.reporting.localization.Localization(__file__, 1704, 31), getitem___67619, i_67617)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1704, 31), tuple_67616, subscript_call_result_67620)
            # Adding element type (line 1704)
            
            # Call to len(...): (line 1704)
            # Processing the call arguments (line 1704)
            # Getting the type of 'y1' (line 1704)
            y1_67622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 42), 'y1', False)
            # Processing the call keyword arguments (line 1704)
            kwargs_67623 = {}
            # Getting the type of 'len' (line 1704)
            len_67621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 38), 'len', False)
            # Calling len(args, kwargs) (line 1704)
            len_call_result_67624 = invoke(stypy.reporting.localization.Localization(__file__, 1704, 38), len_67621, *[y1_67622], **kwargs_67623)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1704, 31), tuple_67616, len_call_result_67624)
            # Adding element type (line 1704)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 1704)
            i_67625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 50), 'i')
            int_67626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 52), 'int')
            # Applying the binary operator '+' (line 1704)
            result_add_67627 = python_operator(stypy.reporting.localization.Localization(__file__, 1704, 50), '+', i_67625, int_67626)
            
            # Getting the type of 'xi' (line 1704)
            xi_67628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 47), 'xi')
            # Obtaining the member '__getitem__' of a type (line 1704)
            getitem___67629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1704, 47), xi_67628, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1704)
            subscript_call_result_67630 = invoke(stypy.reporting.localization.Localization(__file__, 1704, 47), getitem___67629, result_add_67627)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1704, 31), tuple_67616, subscript_call_result_67630)
            # Adding element type (line 1704)
            
            # Call to len(...): (line 1704)
            # Processing the call arguments (line 1704)
            # Getting the type of 'y2' (line 1704)
            y2_67632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 60), 'y2', False)
            # Processing the call keyword arguments (line 1704)
            kwargs_67633 = {}
            # Getting the type of 'len' (line 1704)
            len_67631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 56), 'len', False)
            # Calling len(args, kwargs) (line 1704)
            len_call_result_67634 = invoke(stypy.reporting.localization.Localization(__file__, 1704, 56), len_67631, *[y2_67632], **kwargs_67633)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1704, 31), tuple_67616, len_call_result_67634)
            # Adding element type (line 1704)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 1704)
            i_67635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 72), 'i')
            # Getting the type of 'orders' (line 1704)
            orders_67636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 65), 'orders')
            # Obtaining the member '__getitem__' of a type (line 1704)
            getitem___67637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1704, 65), orders_67636, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1704)
            subscript_call_result_67638 = invoke(stypy.reporting.localization.Localization(__file__, 1704, 65), getitem___67637, i_67635)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1704, 31), tuple_67616, subscript_call_result_67638)
            
            # Applying the binary operator '%' (line 1702)
            result_mod_67639 = python_operator(stypy.reporting.localization.Localization(__file__, 1702, 28), '%', str_67615, tuple_67616)
            
            # Assigning a type to the variable 'mesg' (line 1702)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 20), 'mesg', result_mod_67639)
            
            # Call to ValueError(...): (line 1705)
            # Processing the call arguments (line 1705)
            # Getting the type of 'mesg' (line 1705)
            mesg_67641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 37), 'mesg', False)
            # Processing the call keyword arguments (line 1705)
            kwargs_67642 = {}
            # Getting the type of 'ValueError' (line 1705)
            ValueError_67640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 26), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1705)
            ValueError_call_result_67643 = invoke(stypy.reporting.localization.Localization(__file__, 1705, 26), ValueError_67640, *[mesg_67641], **kwargs_67642)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1705, 20), ValueError_call_result_67643, 'raise parameter', BaseException)
            # SSA join for if statement (line 1701)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'n1' (line 1707)
            n1_67644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 24), 'n1')
            
            # Call to len(...): (line 1707)
            # Processing the call arguments (line 1707)
            # Getting the type of 'y1' (line 1707)
            y1_67646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 34), 'y1', False)
            # Processing the call keyword arguments (line 1707)
            kwargs_67647 = {}
            # Getting the type of 'len' (line 1707)
            len_67645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 30), 'len', False)
            # Calling len(args, kwargs) (line 1707)
            len_call_result_67648 = invoke(stypy.reporting.localization.Localization(__file__, 1707, 30), len_67645, *[y1_67646], **kwargs_67647)
            
            # Applying the binary operator '<=' (line 1707)
            result_le_67649 = python_operator(stypy.reporting.localization.Localization(__file__, 1707, 24), '<=', n1_67644, len_call_result_67648)
            
            
            # Getting the type of 'n2' (line 1707)
            n2_67650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 42), 'n2')
            
            # Call to len(...): (line 1707)
            # Processing the call arguments (line 1707)
            # Getting the type of 'y2' (line 1707)
            y2_67652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 52), 'y2', False)
            # Processing the call keyword arguments (line 1707)
            kwargs_67653 = {}
            # Getting the type of 'len' (line 1707)
            len_67651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 48), 'len', False)
            # Calling len(args, kwargs) (line 1707)
            len_call_result_67654 = invoke(stypy.reporting.localization.Localization(__file__, 1707, 48), len_67651, *[y2_67652], **kwargs_67653)
            
            # Applying the binary operator '<=' (line 1707)
            result_le_67655 = python_operator(stypy.reporting.localization.Localization(__file__, 1707, 42), '<=', n2_67650, len_call_result_67654)
            
            # Applying the binary operator 'and' (line 1707)
            result_and_keyword_67656 = python_operator(stypy.reporting.localization.Localization(__file__, 1707, 24), 'and', result_le_67649, result_le_67655)
            
            # Applying the 'not' unary operator (line 1707)
            result_not__67657 = python_operator(stypy.reporting.localization.Localization(__file__, 1707, 19), 'not', result_and_keyword_67656)
            
            # Testing the type of an if condition (line 1707)
            if_condition_67658 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1707, 16), result_not__67657)
            # Assigning a type to the variable 'if_condition_67658' (line 1707)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1707, 16), 'if_condition_67658', if_condition_67658)
            # SSA begins for if statement (line 1707)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1708)
            # Processing the call arguments (line 1708)
            str_67660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1708, 37), 'str', '`order` input incompatible with length y1 or y2.')
            # Processing the call keyword arguments (line 1708)
            kwargs_67661 = {}
            # Getting the type of 'ValueError' (line 1708)
            ValueError_67659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 26), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1708)
            ValueError_call_result_67662 = invoke(stypy.reporting.localization.Localization(__file__, 1708, 26), ValueError_67659, *[str_67660], **kwargs_67661)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1708, 20), ValueError_call_result_67662, 'raise parameter', BaseException)
            # SSA join for if statement (line 1707)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_67561 and more_types_in_union_67562):
                # SSA join for if statement (line 1694)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1711):
        
        # Assigning a Call to a Name (line 1711):
        
        # Call to _construct_from_derivatives(...): (line 1711)
        # Processing the call arguments (line 1711)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1711)
        i_67665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 53), 'i', False)
        # Getting the type of 'xi' (line 1711)
        xi_67666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 50), 'xi', False)
        # Obtaining the member '__getitem__' of a type (line 1711)
        getitem___67667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1711, 50), xi_67666, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1711)
        subscript_call_result_67668 = invoke(stypy.reporting.localization.Localization(__file__, 1711, 50), getitem___67667, i_67665)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1711)
        i_67669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 60), 'i', False)
        int_67670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, 62), 'int')
        # Applying the binary operator '+' (line 1711)
        result_add_67671 = python_operator(stypy.reporting.localization.Localization(__file__, 1711, 60), '+', i_67669, int_67670)
        
        # Getting the type of 'xi' (line 1711)
        xi_67672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 57), 'xi', False)
        # Obtaining the member '__getitem__' of a type (line 1711)
        getitem___67673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1711, 57), xi_67672, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1711)
        subscript_call_result_67674 = invoke(stypy.reporting.localization.Localization(__file__, 1711, 57), getitem___67673, result_add_67671)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'n1' (line 1712)
        n1_67675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 54), 'n1', False)
        slice_67676 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1712, 50), None, n1_67675, None)
        # Getting the type of 'y1' (line 1712)
        y1_67677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 50), 'y1', False)
        # Obtaining the member '__getitem__' of a type (line 1712)
        getitem___67678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1712, 50), y1_67677, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1712)
        subscript_call_result_67679 = invoke(stypy.reporting.localization.Localization(__file__, 1712, 50), getitem___67678, slice_67676)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'n2' (line 1712)
        n2_67680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 63), 'n2', False)
        slice_67681 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1712, 59), None, n2_67680, None)
        # Getting the type of 'y2' (line 1712)
        y2_67682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 59), 'y2', False)
        # Obtaining the member '__getitem__' of a type (line 1712)
        getitem___67683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1712, 59), y2_67682, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1712)
        subscript_call_result_67684 = invoke(stypy.reporting.localization.Localization(__file__, 1712, 59), getitem___67683, slice_67681)
        
        # Processing the call keyword arguments (line 1711)
        kwargs_67685 = {}
        # Getting the type of 'BPoly' (line 1711)
        BPoly_67663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 16), 'BPoly', False)
        # Obtaining the member '_construct_from_derivatives' of a type (line 1711)
        _construct_from_derivatives_67664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1711, 16), BPoly_67663, '_construct_from_derivatives')
        # Calling _construct_from_derivatives(args, kwargs) (line 1711)
        _construct_from_derivatives_call_result_67686 = invoke(stypy.reporting.localization.Localization(__file__, 1711, 16), _construct_from_derivatives_67664, *[subscript_call_result_67668, subscript_call_result_67674, subscript_call_result_67679, subscript_call_result_67684], **kwargs_67685)
        
        # Assigning a type to the variable 'b' (line 1711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1711, 12), 'b', _construct_from_derivatives_call_result_67686)
        
        
        
        # Call to len(...): (line 1713)
        # Processing the call arguments (line 1713)
        # Getting the type of 'b' (line 1713)
        b_67688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 19), 'b', False)
        # Processing the call keyword arguments (line 1713)
        kwargs_67689 = {}
        # Getting the type of 'len' (line 1713)
        len_67687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 15), 'len', False)
        # Calling len(args, kwargs) (line 1713)
        len_call_result_67690 = invoke(stypy.reporting.localization.Localization(__file__, 1713, 15), len_67687, *[b_67688], **kwargs_67689)
        
        # Getting the type of 'k' (line 1713)
        k_67691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 24), 'k')
        # Applying the binary operator '<' (line 1713)
        result_lt_67692 = python_operator(stypy.reporting.localization.Localization(__file__, 1713, 15), '<', len_call_result_67690, k_67691)
        
        # Testing the type of an if condition (line 1713)
        if_condition_67693 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1713, 12), result_lt_67692)
        # Assigning a type to the variable 'if_condition_67693' (line 1713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1713, 12), 'if_condition_67693', if_condition_67693)
        # SSA begins for if statement (line 1713)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1714):
        
        # Assigning a Call to a Name (line 1714):
        
        # Call to _raise_degree(...): (line 1714)
        # Processing the call arguments (line 1714)
        # Getting the type of 'b' (line 1714)
        b_67696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 40), 'b', False)
        # Getting the type of 'k' (line 1714)
        k_67697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 43), 'k', False)
        
        # Call to len(...): (line 1714)
        # Processing the call arguments (line 1714)
        # Getting the type of 'b' (line 1714)
        b_67699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 51), 'b', False)
        # Processing the call keyword arguments (line 1714)
        kwargs_67700 = {}
        # Getting the type of 'len' (line 1714)
        len_67698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 47), 'len', False)
        # Calling len(args, kwargs) (line 1714)
        len_call_result_67701 = invoke(stypy.reporting.localization.Localization(__file__, 1714, 47), len_67698, *[b_67699], **kwargs_67700)
        
        # Applying the binary operator '-' (line 1714)
        result_sub_67702 = python_operator(stypy.reporting.localization.Localization(__file__, 1714, 43), '-', k_67697, len_call_result_67701)
        
        # Processing the call keyword arguments (line 1714)
        kwargs_67703 = {}
        # Getting the type of 'BPoly' (line 1714)
        BPoly_67694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 20), 'BPoly', False)
        # Obtaining the member '_raise_degree' of a type (line 1714)
        _raise_degree_67695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1714, 20), BPoly_67694, '_raise_degree')
        # Calling _raise_degree(args, kwargs) (line 1714)
        _raise_degree_call_result_67704 = invoke(stypy.reporting.localization.Localization(__file__, 1714, 20), _raise_degree_67695, *[b_67696, result_sub_67702], **kwargs_67703)
        
        # Assigning a type to the variable 'b' (line 1714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 16), 'b', _raise_degree_call_result_67704)
        # SSA join for if statement (line 1713)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1715)
        # Processing the call arguments (line 1715)
        # Getting the type of 'b' (line 1715)
        b_67707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 21), 'b', False)
        # Processing the call keyword arguments (line 1715)
        kwargs_67708 = {}
        # Getting the type of 'c' (line 1715)
        c_67705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 12), 'c', False)
        # Obtaining the member 'append' of a type (line 1715)
        append_67706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1715, 12), c_67705, 'append')
        # Calling append(args, kwargs) (line 1715)
        append_call_result_67709 = invoke(stypy.reporting.localization.Localization(__file__, 1715, 12), append_67706, *[b_67707], **kwargs_67708)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1717):
        
        # Assigning a Call to a Name (line 1717):
        
        # Call to asarray(...): (line 1717)
        # Processing the call arguments (line 1717)
        # Getting the type of 'c' (line 1717)
        c_67712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 23), 'c', False)
        # Processing the call keyword arguments (line 1717)
        kwargs_67713 = {}
        # Getting the type of 'np' (line 1717)
        np_67710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1717)
        asarray_67711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1717, 12), np_67710, 'asarray')
        # Calling asarray(args, kwargs) (line 1717)
        asarray_call_result_67714 = invoke(stypy.reporting.localization.Localization(__file__, 1717, 12), asarray_67711, *[c_67712], **kwargs_67713)
        
        # Assigning a type to the variable 'c' (line 1717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 8), 'c', asarray_call_result_67714)
        
        # Call to cls(...): (line 1718)
        # Processing the call arguments (line 1718)
        
        # Call to swapaxes(...): (line 1718)
        # Processing the call arguments (line 1718)
        int_67718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1718, 30), 'int')
        int_67719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1718, 33), 'int')
        # Processing the call keyword arguments (line 1718)
        kwargs_67720 = {}
        # Getting the type of 'c' (line 1718)
        c_67716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 19), 'c', False)
        # Obtaining the member 'swapaxes' of a type (line 1718)
        swapaxes_67717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1718, 19), c_67716, 'swapaxes')
        # Calling swapaxes(args, kwargs) (line 1718)
        swapaxes_call_result_67721 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 19), swapaxes_67717, *[int_67718, int_67719], **kwargs_67720)
        
        # Getting the type of 'xi' (line 1718)
        xi_67722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 37), 'xi', False)
        # Getting the type of 'extrapolate' (line 1718)
        extrapolate_67723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 41), 'extrapolate', False)
        # Processing the call keyword arguments (line 1718)
        kwargs_67724 = {}
        # Getting the type of 'cls' (line 1718)
        cls_67715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 15), 'cls', False)
        # Calling cls(args, kwargs) (line 1718)
        cls_call_result_67725 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 15), cls_67715, *[swapaxes_call_result_67721, xi_67722, extrapolate_67723], **kwargs_67724)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 8), 'stypy_return_type', cls_call_result_67725)
        
        # ################# End of 'from_derivatives(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'from_derivatives' in the type store
        # Getting the type of 'stypy_return_type' (line 1602)
        stypy_return_type_67726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_67726)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'from_derivatives'
        return stypy_return_type_67726


    @staticmethod
    @norecursion
    def _construct_from_derivatives(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_construct_from_derivatives'
        module_type_store = module_type_store.open_function_context('_construct_from_derivatives', 1720, 4, False)
        
        # Passed parameters checking function
        BPoly._construct_from_derivatives.__dict__.__setitem__('stypy_localization', localization)
        BPoly._construct_from_derivatives.__dict__.__setitem__('stypy_type_of_self', None)
        BPoly._construct_from_derivatives.__dict__.__setitem__('stypy_type_store', module_type_store)
        BPoly._construct_from_derivatives.__dict__.__setitem__('stypy_function_name', '_construct_from_derivatives')
        BPoly._construct_from_derivatives.__dict__.__setitem__('stypy_param_names_list', ['xa', 'xb', 'ya', 'yb'])
        BPoly._construct_from_derivatives.__dict__.__setitem__('stypy_varargs_param_name', None)
        BPoly._construct_from_derivatives.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BPoly._construct_from_derivatives.__dict__.__setitem__('stypy_call_defaults', defaults)
        BPoly._construct_from_derivatives.__dict__.__setitem__('stypy_call_varargs', varargs)
        BPoly._construct_from_derivatives.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BPoly._construct_from_derivatives.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, None, module_type_store, '_construct_from_derivatives', ['xa', 'xb', 'ya', 'yb'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_construct_from_derivatives', localization, ['xb', 'ya', 'yb'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_construct_from_derivatives(...)' code ##################

        str_67727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1774, (-1)), 'str', "Compute the coefficients of a polynomial in the Bernstein basis\n        given the values and derivatives at the edges.\n\n        Return the coefficients of a polynomial in the Bernstein basis\n        defined on `[xa, xb]` and having the values and derivatives at the\n        endpoints ``xa`` and ``xb`` as specified by ``ya`` and ``yb``.\n        The polynomial constructed is of the minimal possible degree, i.e.,\n        if the lengths of ``ya`` and ``yb`` are ``na`` and ``nb``, the degree\n        of the polynomial is ``na + nb - 1``.\n\n        Parameters\n        ----------\n        xa : float\n            Left-hand end point of the interval\n        xb : float\n            Right-hand end point of the interval\n        ya : array_like\n            Derivatives at ``xa``. ``ya[0]`` is the value of the function, and\n            ``ya[i]`` for ``i > 0`` is the value of the ``i``-th derivative.\n        yb : array_like\n            Derivatives at ``xb``.\n\n        Returns\n        -------\n        array\n            coefficient array of a polynomial having specified derivatives\n\n        Notes\n        -----\n        This uses several facts from life of Bernstein basis functions.\n        First of all,\n\n            .. math:: b'_{a, n} = n (b_{a-1, n-1} - b_{a, n-1})\n\n        If B(x) is a linear combination of the form\n\n            .. math:: B(x) = \\sum_{a=0}^{n} c_a b_{a, n},\n\n        then :math: B'(x) = n \\sum_{a=0}^{n-1} (c_{a+1} - c_{a}) b_{a, n-1}.\n        Iterating the latter one, one finds for the q-th derivative\n\n            .. math:: B^{q}(x) = n!/(n-q)! \\sum_{a=0}^{n-q} Q_a b_{a, n-q},\n\n        with\n\n          .. math:: Q_a = \\sum_{j=0}^{q} (-)^{j+q} comb(q, j) c_{j+a}\n\n        This way, only `a=0` contributes to :math: `B^{q}(x = xa)`, and\n        `c_q` are found one by one by iterating `q = 0, ..., na`.\n\n        At `x = xb` it's the same with `a = n - q`.\n\n        ")
        
        # Assigning a Tuple to a Tuple (line 1775):
        
        # Assigning a Call to a Name (line 1775):
        
        # Call to asarray(...): (line 1775)
        # Processing the call arguments (line 1775)
        # Getting the type of 'ya' (line 1775)
        ya_67730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 28), 'ya', False)
        # Processing the call keyword arguments (line 1775)
        kwargs_67731 = {}
        # Getting the type of 'np' (line 1775)
        np_67728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 17), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1775)
        asarray_67729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1775, 17), np_67728, 'asarray')
        # Calling asarray(args, kwargs) (line 1775)
        asarray_call_result_67732 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 17), asarray_67729, *[ya_67730], **kwargs_67731)
        
        # Assigning a type to the variable 'tuple_assignment_63635' (line 1775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 8), 'tuple_assignment_63635', asarray_call_result_67732)
        
        # Assigning a Call to a Name (line 1775):
        
        # Call to asarray(...): (line 1775)
        # Processing the call arguments (line 1775)
        # Getting the type of 'yb' (line 1775)
        yb_67735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 44), 'yb', False)
        # Processing the call keyword arguments (line 1775)
        kwargs_67736 = {}
        # Getting the type of 'np' (line 1775)
        np_67733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 33), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1775)
        asarray_67734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1775, 33), np_67733, 'asarray')
        # Calling asarray(args, kwargs) (line 1775)
        asarray_call_result_67737 = invoke(stypy.reporting.localization.Localization(__file__, 1775, 33), asarray_67734, *[yb_67735], **kwargs_67736)
        
        # Assigning a type to the variable 'tuple_assignment_63636' (line 1775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 8), 'tuple_assignment_63636', asarray_call_result_67737)
        
        # Assigning a Name to a Name (line 1775):
        # Getting the type of 'tuple_assignment_63635' (line 1775)
        tuple_assignment_63635_67738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 8), 'tuple_assignment_63635')
        # Assigning a type to the variable 'ya' (line 1775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 8), 'ya', tuple_assignment_63635_67738)
        
        # Assigning a Name to a Name (line 1775):
        # Getting the type of 'tuple_assignment_63636' (line 1775)
        tuple_assignment_63636_67739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 8), 'tuple_assignment_63636')
        # Assigning a type to the variable 'yb' (line 1775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 12), 'yb', tuple_assignment_63636_67739)
        
        
        
        # Obtaining the type of the subscript
        int_67740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1776, 20), 'int')
        slice_67741 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1776, 11), int_67740, None, None)
        # Getting the type of 'ya' (line 1776)
        ya_67742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 11), 'ya')
        # Obtaining the member 'shape' of a type (line 1776)
        shape_67743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 11), ya_67742, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1776)
        getitem___67744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 11), shape_67743, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1776)
        subscript_call_result_67745 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 11), getitem___67744, slice_67741)
        
        
        # Obtaining the type of the subscript
        int_67746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1776, 36), 'int')
        slice_67747 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1776, 27), int_67746, None, None)
        # Getting the type of 'yb' (line 1776)
        yb_67748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 27), 'yb')
        # Obtaining the member 'shape' of a type (line 1776)
        shape_67749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 27), yb_67748, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1776)
        getitem___67750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 27), shape_67749, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1776)
        subscript_call_result_67751 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 27), getitem___67750, slice_67747)
        
        # Applying the binary operator '!=' (line 1776)
        result_ne_67752 = python_operator(stypy.reporting.localization.Localization(__file__, 1776, 11), '!=', subscript_call_result_67745, subscript_call_result_67751)
        
        # Testing the type of an if condition (line 1776)
        if_condition_67753 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1776, 8), result_ne_67752)
        # Assigning a type to the variable 'if_condition_67753' (line 1776)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1776, 8), 'if_condition_67753', if_condition_67753)
        # SSA begins for if statement (line 1776)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1777)
        # Processing the call arguments (line 1777)
        str_67755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, 29), 'str', 'ya and yb have incompatible dimensions.')
        # Processing the call keyword arguments (line 1777)
        kwargs_67756 = {}
        # Getting the type of 'ValueError' (line 1777)
        ValueError_67754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1777)
        ValueError_call_result_67757 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 18), ValueError_67754, *[str_67755], **kwargs_67756)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1777, 12), ValueError_call_result_67757, 'raise parameter', BaseException)
        # SSA join for if statement (line 1776)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 1779):
        
        # Assigning a Attribute to a Name (line 1779):
        # Getting the type of 'ya' (line 1779)
        ya_67758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 19), 'ya')
        # Obtaining the member 'dtype' of a type (line 1779)
        dtype_67759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 19), ya_67758, 'dtype')
        # Assigning a type to the variable 'tuple_assignment_63637' (line 1779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'tuple_assignment_63637', dtype_67759)
        
        # Assigning a Attribute to a Name (line 1779):
        # Getting the type of 'yb' (line 1779)
        yb_67760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 29), 'yb')
        # Obtaining the member 'dtype' of a type (line 1779)
        dtype_67761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 29), yb_67760, 'dtype')
        # Assigning a type to the variable 'tuple_assignment_63638' (line 1779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'tuple_assignment_63638', dtype_67761)
        
        # Assigning a Name to a Name (line 1779):
        # Getting the type of 'tuple_assignment_63637' (line 1779)
        tuple_assignment_63637_67762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'tuple_assignment_63637')
        # Assigning a type to the variable 'dta' (line 1779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'dta', tuple_assignment_63637_67762)
        
        # Assigning a Name to a Name (line 1779):
        # Getting the type of 'tuple_assignment_63638' (line 1779)
        tuple_assignment_63638_67763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'tuple_assignment_63638')
        # Assigning a type to the variable 'dtb' (line 1779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 13), 'dtb', tuple_assignment_63638_67763)
        
        
        # Evaluating a boolean operation
        
        # Call to issubdtype(...): (line 1780)
        # Processing the call arguments (line 1780)
        # Getting the type of 'dta' (line 1780)
        dta_67766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 26), 'dta', False)
        # Getting the type of 'np' (line 1780)
        np_67767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 31), 'np', False)
        # Obtaining the member 'complexfloating' of a type (line 1780)
        complexfloating_67768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1780, 31), np_67767, 'complexfloating')
        # Processing the call keyword arguments (line 1780)
        kwargs_67769 = {}
        # Getting the type of 'np' (line 1780)
        np_67764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 12), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 1780)
        issubdtype_67765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1780, 12), np_67764, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 1780)
        issubdtype_call_result_67770 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 12), issubdtype_67765, *[dta_67766, complexfloating_67768], **kwargs_67769)
        
        
        # Call to issubdtype(...): (line 1781)
        # Processing the call arguments (line 1781)
        # Getting the type of 'dtb' (line 1781)
        dtb_67773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 29), 'dtb', False)
        # Getting the type of 'np' (line 1781)
        np_67774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 34), 'np', False)
        # Obtaining the member 'complexfloating' of a type (line 1781)
        complexfloating_67775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 34), np_67774, 'complexfloating')
        # Processing the call keyword arguments (line 1781)
        kwargs_67776 = {}
        # Getting the type of 'np' (line 1781)
        np_67771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 15), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 1781)
        issubdtype_67772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 15), np_67771, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 1781)
        issubdtype_call_result_67777 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 15), issubdtype_67772, *[dtb_67773, complexfloating_67775], **kwargs_67776)
        
        # Applying the binary operator 'or' (line 1780)
        result_or_keyword_67778 = python_operator(stypy.reporting.localization.Localization(__file__, 1780, 12), 'or', issubdtype_call_result_67770, issubdtype_call_result_67777)
        
        # Testing the type of an if condition (line 1780)
        if_condition_67779 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1780, 8), result_or_keyword_67778)
        # Assigning a type to the variable 'if_condition_67779' (line 1780)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1780, 8), 'if_condition_67779', if_condition_67779)
        # SSA begins for if statement (line 1780)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1782):
        
        # Assigning a Attribute to a Name (line 1782):
        # Getting the type of 'np' (line 1782)
        np_67780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 17), 'np')
        # Obtaining the member 'complex_' of a type (line 1782)
        complex__67781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 17), np_67780, 'complex_')
        # Assigning a type to the variable 'dt' (line 1782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1782, 12), 'dt', complex__67781)
        # SSA branch for the else part of an if statement (line 1780)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1784):
        
        # Assigning a Attribute to a Name (line 1784):
        # Getting the type of 'np' (line 1784)
        np_67782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 17), 'np')
        # Obtaining the member 'float_' of a type (line 1784)
        float__67783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 17), np_67782, 'float_')
        # Assigning a type to the variable 'dt' (line 1784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'dt', float__67783)
        # SSA join for if statement (line 1780)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 1786):
        
        # Assigning a Call to a Name (line 1786):
        
        # Call to len(...): (line 1786)
        # Processing the call arguments (line 1786)
        # Getting the type of 'ya' (line 1786)
        ya_67785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 21), 'ya', False)
        # Processing the call keyword arguments (line 1786)
        kwargs_67786 = {}
        # Getting the type of 'len' (line 1786)
        len_67784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 17), 'len', False)
        # Calling len(args, kwargs) (line 1786)
        len_call_result_67787 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 17), len_67784, *[ya_67785], **kwargs_67786)
        
        # Assigning a type to the variable 'tuple_assignment_63639' (line 1786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'tuple_assignment_63639', len_call_result_67787)
        
        # Assigning a Call to a Name (line 1786):
        
        # Call to len(...): (line 1786)
        # Processing the call arguments (line 1786)
        # Getting the type of 'yb' (line 1786)
        yb_67789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 30), 'yb', False)
        # Processing the call keyword arguments (line 1786)
        kwargs_67790 = {}
        # Getting the type of 'len' (line 1786)
        len_67788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 26), 'len', False)
        # Calling len(args, kwargs) (line 1786)
        len_call_result_67791 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 26), len_67788, *[yb_67789], **kwargs_67790)
        
        # Assigning a type to the variable 'tuple_assignment_63640' (line 1786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'tuple_assignment_63640', len_call_result_67791)
        
        # Assigning a Name to a Name (line 1786):
        # Getting the type of 'tuple_assignment_63639' (line 1786)
        tuple_assignment_63639_67792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'tuple_assignment_63639')
        # Assigning a type to the variable 'na' (line 1786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'na', tuple_assignment_63639_67792)
        
        # Assigning a Name to a Name (line 1786):
        # Getting the type of 'tuple_assignment_63640' (line 1786)
        tuple_assignment_63640_67793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'tuple_assignment_63640')
        # Assigning a type to the variable 'nb' (line 1786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 12), 'nb', tuple_assignment_63640_67793)
        
        # Assigning a BinOp to a Name (line 1787):
        
        # Assigning a BinOp to a Name (line 1787):
        # Getting the type of 'na' (line 1787)
        na_67794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 12), 'na')
        # Getting the type of 'nb' (line 1787)
        nb_67795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 17), 'nb')
        # Applying the binary operator '+' (line 1787)
        result_add_67796 = python_operator(stypy.reporting.localization.Localization(__file__, 1787, 12), '+', na_67794, nb_67795)
        
        # Assigning a type to the variable 'n' (line 1787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 8), 'n', result_add_67796)
        
        # Assigning a Call to a Name (line 1789):
        
        # Assigning a Call to a Name (line 1789):
        
        # Call to empty(...): (line 1789)
        # Processing the call arguments (line 1789)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1789)
        tuple_67799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1789, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1789)
        # Adding element type (line 1789)
        # Getting the type of 'na' (line 1789)
        na_67800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 22), 'na', False)
        # Getting the type of 'nb' (line 1789)
        nb_67801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 25), 'nb', False)
        # Applying the binary operator '+' (line 1789)
        result_add_67802 = python_operator(stypy.reporting.localization.Localization(__file__, 1789, 22), '+', na_67800, nb_67801)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1789, 22), tuple_67799, result_add_67802)
        
        
        # Obtaining the type of the subscript
        int_67803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1789, 41), 'int')
        slice_67804 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1789, 32), int_67803, None, None)
        # Getting the type of 'ya' (line 1789)
        ya_67805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 32), 'ya', False)
        # Obtaining the member 'shape' of a type (line 1789)
        shape_67806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 32), ya_67805, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1789)
        getitem___67807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 32), shape_67806, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1789)
        subscript_call_result_67808 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 32), getitem___67807, slice_67804)
        
        # Applying the binary operator '+' (line 1789)
        result_add_67809 = python_operator(stypy.reporting.localization.Localization(__file__, 1789, 21), '+', tuple_67799, subscript_call_result_67808)
        
        # Processing the call keyword arguments (line 1789)
        # Getting the type of 'dt' (line 1789)
        dt_67810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 52), 'dt', False)
        keyword_67811 = dt_67810
        kwargs_67812 = {'dtype': keyword_67811}
        # Getting the type of 'np' (line 1789)
        np_67797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 12), 'np', False)
        # Obtaining the member 'empty' of a type (line 1789)
        empty_67798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1789, 12), np_67797, 'empty')
        # Calling empty(args, kwargs) (line 1789)
        empty_call_result_67813 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 12), empty_67798, *[result_add_67809], **kwargs_67812)
        
        # Assigning a type to the variable 'c' (line 1789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'c', empty_call_result_67813)
        
        
        # Call to range(...): (line 1793)
        # Processing the call arguments (line 1793)
        int_67815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, 23), 'int')
        # Getting the type of 'na' (line 1793)
        na_67816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 26), 'na', False)
        # Processing the call keyword arguments (line 1793)
        kwargs_67817 = {}
        # Getting the type of 'range' (line 1793)
        range_67814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 17), 'range', False)
        # Calling range(args, kwargs) (line 1793)
        range_call_result_67818 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 17), range_67814, *[int_67815, na_67816], **kwargs_67817)
        
        # Testing the type of a for loop iterable (line 1793)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1793, 8), range_call_result_67818)
        # Getting the type of the for loop variable (line 1793)
        for_loop_var_67819 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1793, 8), range_call_result_67818)
        # Assigning a type to the variable 'q' (line 1793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 8), 'q', for_loop_var_67819)
        # SSA begins for a for statement (line 1793)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Subscript (line 1794):
        
        # Assigning a BinOp to a Subscript (line 1794):
        
        # Obtaining the type of the subscript
        # Getting the type of 'q' (line 1794)
        q_67820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 22), 'q')
        # Getting the type of 'ya' (line 1794)
        ya_67821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 19), 'ya')
        # Obtaining the member '__getitem__' of a type (line 1794)
        getitem___67822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 19), ya_67821, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1794)
        subscript_call_result_67823 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 19), getitem___67822, q_67820)
        
        
        # Call to poch(...): (line 1794)
        # Processing the call arguments (line 1794)
        # Getting the type of 'n' (line 1794)
        n_67826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 37), 'n', False)
        # Getting the type of 'q' (line 1794)
        q_67827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 41), 'q', False)
        # Applying the binary operator '-' (line 1794)
        result_sub_67828 = python_operator(stypy.reporting.localization.Localization(__file__, 1794, 37), '-', n_67826, q_67827)
        
        # Getting the type of 'q' (line 1794)
        q_67829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 44), 'q', False)
        # Processing the call keyword arguments (line 1794)
        kwargs_67830 = {}
        # Getting the type of 'spec' (line 1794)
        spec_67824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 27), 'spec', False)
        # Obtaining the member 'poch' of a type (line 1794)
        poch_67825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 27), spec_67824, 'poch')
        # Calling poch(args, kwargs) (line 1794)
        poch_call_result_67831 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 27), poch_67825, *[result_sub_67828, q_67829], **kwargs_67830)
        
        # Applying the binary operator 'div' (line 1794)
        result_div_67832 = python_operator(stypy.reporting.localization.Localization(__file__, 1794, 19), 'div', subscript_call_result_67823, poch_call_result_67831)
        
        # Getting the type of 'xb' (line 1794)
        xb_67833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 50), 'xb')
        # Getting the type of 'xa' (line 1794)
        xa_67834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 55), 'xa')
        # Applying the binary operator '-' (line 1794)
        result_sub_67835 = python_operator(stypy.reporting.localization.Localization(__file__, 1794, 50), '-', xb_67833, xa_67834)
        
        # Getting the type of 'q' (line 1794)
        q_67836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 60), 'q')
        # Applying the binary operator '**' (line 1794)
        result_pow_67837 = python_operator(stypy.reporting.localization.Localization(__file__, 1794, 49), '**', result_sub_67835, q_67836)
        
        # Applying the binary operator '*' (line 1794)
        result_mul_67838 = python_operator(stypy.reporting.localization.Localization(__file__, 1794, 47), '*', result_div_67832, result_pow_67837)
        
        # Getting the type of 'c' (line 1794)
        c_67839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 12), 'c')
        # Getting the type of 'q' (line 1794)
        q_67840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 14), 'q')
        # Storing an element on a container (line 1794)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1794, 12), c_67839, (q_67840, result_mul_67838))
        
        
        # Call to range(...): (line 1795)
        # Processing the call arguments (line 1795)
        int_67842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, 27), 'int')
        # Getting the type of 'q' (line 1795)
        q_67843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 30), 'q', False)
        # Processing the call keyword arguments (line 1795)
        kwargs_67844 = {}
        # Getting the type of 'range' (line 1795)
        range_67841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 21), 'range', False)
        # Calling range(args, kwargs) (line 1795)
        range_call_result_67845 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 21), range_67841, *[int_67842, q_67843], **kwargs_67844)
        
        # Testing the type of a for loop iterable (line 1795)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1795, 12), range_call_result_67845)
        # Getting the type of the for loop variable (line 1795)
        for_loop_var_67846 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1795, 12), range_call_result_67845)
        # Assigning a type to the variable 'j' (line 1795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 12), 'j', for_loop_var_67846)
        # SSA begins for a for statement (line 1795)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'c' (line 1796)
        c_67847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 16), 'c')
        
        # Obtaining the type of the subscript
        # Getting the type of 'q' (line 1796)
        q_67848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 18), 'q')
        # Getting the type of 'c' (line 1796)
        c_67849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 16), 'c')
        # Obtaining the member '__getitem__' of a type (line 1796)
        getitem___67850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 16), c_67849, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1796)
        subscript_call_result_67851 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 16), getitem___67850, q_67848)
        
        int_67852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 25), 'int')
        # Getting the type of 'j' (line 1796)
        j_67853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 31), 'j')
        # Getting the type of 'q' (line 1796)
        q_67854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 33), 'q')
        # Applying the binary operator '+' (line 1796)
        result_add_67855 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 31), '+', j_67853, q_67854)
        
        # Applying the binary operator '**' (line 1796)
        result_pow_67856 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 24), '**', int_67852, result_add_67855)
        
        
        # Call to comb(...): (line 1796)
        # Processing the call arguments (line 1796)
        # Getting the type of 'q' (line 1796)
        q_67858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 43), 'q', False)
        # Getting the type of 'j' (line 1796)
        j_67859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 46), 'j', False)
        # Processing the call keyword arguments (line 1796)
        kwargs_67860 = {}
        # Getting the type of 'comb' (line 1796)
        comb_67857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 38), 'comb', False)
        # Calling comb(args, kwargs) (line 1796)
        comb_call_result_67861 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 38), comb_67857, *[q_67858, j_67859], **kwargs_67860)
        
        # Applying the binary operator '*' (line 1796)
        result_mul_67862 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 24), '*', result_pow_67856, comb_call_result_67861)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'j' (line 1796)
        j_67863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 53), 'j')
        # Getting the type of 'c' (line 1796)
        c_67864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 51), 'c')
        # Obtaining the member '__getitem__' of a type (line 1796)
        getitem___67865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 51), c_67864, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1796)
        subscript_call_result_67866 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 51), getitem___67865, j_67863)
        
        # Applying the binary operator '*' (line 1796)
        result_mul_67867 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 49), '*', result_mul_67862, subscript_call_result_67866)
        
        # Applying the binary operator '-=' (line 1796)
        result_isub_67868 = python_operator(stypy.reporting.localization.Localization(__file__, 1796, 16), '-=', subscript_call_result_67851, result_mul_67867)
        # Getting the type of 'c' (line 1796)
        c_67869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 16), 'c')
        # Getting the type of 'q' (line 1796)
        q_67870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 18), 'q')
        # Storing an element on a container (line 1796)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1796, 16), c_67869, (q_67870, result_isub_67868))
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to range(...): (line 1799)
        # Processing the call arguments (line 1799)
        int_67872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 23), 'int')
        # Getting the type of 'nb' (line 1799)
        nb_67873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 26), 'nb', False)
        # Processing the call keyword arguments (line 1799)
        kwargs_67874 = {}
        # Getting the type of 'range' (line 1799)
        range_67871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 17), 'range', False)
        # Calling range(args, kwargs) (line 1799)
        range_call_result_67875 = invoke(stypy.reporting.localization.Localization(__file__, 1799, 17), range_67871, *[int_67872, nb_67873], **kwargs_67874)
        
        # Testing the type of a for loop iterable (line 1799)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1799, 8), range_call_result_67875)
        # Getting the type of the for loop variable (line 1799)
        for_loop_var_67876 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1799, 8), range_call_result_67875)
        # Assigning a type to the variable 'q' (line 1799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 8), 'q', for_loop_var_67876)
        # SSA begins for a for statement (line 1799)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Subscript (line 1800):
        
        # Assigning a BinOp to a Subscript (line 1800):
        
        # Obtaining the type of the subscript
        # Getting the type of 'q' (line 1800)
        q_67877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 25), 'q')
        # Getting the type of 'yb' (line 1800)
        yb_67878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 22), 'yb')
        # Obtaining the member '__getitem__' of a type (line 1800)
        getitem___67879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 22), yb_67878, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1800)
        subscript_call_result_67880 = invoke(stypy.reporting.localization.Localization(__file__, 1800, 22), getitem___67879, q_67877)
        
        
        # Call to poch(...): (line 1800)
        # Processing the call arguments (line 1800)
        # Getting the type of 'n' (line 1800)
        n_67883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 40), 'n', False)
        # Getting the type of 'q' (line 1800)
        q_67884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 44), 'q', False)
        # Applying the binary operator '-' (line 1800)
        result_sub_67885 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 40), '-', n_67883, q_67884)
        
        # Getting the type of 'q' (line 1800)
        q_67886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 47), 'q', False)
        # Processing the call keyword arguments (line 1800)
        kwargs_67887 = {}
        # Getting the type of 'spec' (line 1800)
        spec_67881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 30), 'spec', False)
        # Obtaining the member 'poch' of a type (line 1800)
        poch_67882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 30), spec_67881, 'poch')
        # Calling poch(args, kwargs) (line 1800)
        poch_call_result_67888 = invoke(stypy.reporting.localization.Localization(__file__, 1800, 30), poch_67882, *[result_sub_67885, q_67886], **kwargs_67887)
        
        # Applying the binary operator 'div' (line 1800)
        result_div_67889 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 22), 'div', subscript_call_result_67880, poch_call_result_67888)
        
        int_67890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 53), 'int')
        # Getting the type of 'q' (line 1800)
        q_67891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 58), 'q')
        # Applying the binary operator '**' (line 1800)
        result_pow_67892 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 52), '**', int_67890, q_67891)
        
        # Applying the binary operator '*' (line 1800)
        result_mul_67893 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 50), '*', result_div_67889, result_pow_67892)
        
        # Getting the type of 'xb' (line 1800)
        xb_67894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 63), 'xb')
        # Getting the type of 'xa' (line 1800)
        xa_67895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 68), 'xa')
        # Applying the binary operator '-' (line 1800)
        result_sub_67896 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 63), '-', xb_67894, xa_67895)
        
        # Getting the type of 'q' (line 1800)
        q_67897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 73), 'q')
        # Applying the binary operator '**' (line 1800)
        result_pow_67898 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 62), '**', result_sub_67896, q_67897)
        
        # Applying the binary operator '*' (line 1800)
        result_mul_67899 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 60), '*', result_mul_67893, result_pow_67898)
        
        # Getting the type of 'c' (line 1800)
        c_67900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 12), 'c')
        
        # Getting the type of 'q' (line 1800)
        q_67901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 15), 'q')
        # Applying the 'usub' unary operator (line 1800)
        result___neg___67902 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 14), 'usub', q_67901)
        
        int_67903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 17), 'int')
        # Applying the binary operator '-' (line 1800)
        result_sub_67904 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 14), '-', result___neg___67902, int_67903)
        
        # Storing an element on a container (line 1800)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1800, 12), c_67900, (result_sub_67904, result_mul_67899))
        
        
        # Call to range(...): (line 1801)
        # Processing the call arguments (line 1801)
        int_67906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1801, 27), 'int')
        # Getting the type of 'q' (line 1801)
        q_67907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 30), 'q', False)
        # Processing the call keyword arguments (line 1801)
        kwargs_67908 = {}
        # Getting the type of 'range' (line 1801)
        range_67905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 21), 'range', False)
        # Calling range(args, kwargs) (line 1801)
        range_call_result_67909 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 21), range_67905, *[int_67906, q_67907], **kwargs_67908)
        
        # Testing the type of a for loop iterable (line 1801)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1801, 12), range_call_result_67909)
        # Getting the type of the for loop variable (line 1801)
        for_loop_var_67910 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1801, 12), range_call_result_67909)
        # Assigning a type to the variable 'j' (line 1801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 12), 'j', for_loop_var_67910)
        # SSA begins for a for statement (line 1801)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'c' (line 1802)
        c_67911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 16), 'c')
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'q' (line 1802)
        q_67912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 19), 'q')
        # Applying the 'usub' unary operator (line 1802)
        result___neg___67913 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 18), 'usub', q_67912)
        
        int_67914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 21), 'int')
        # Applying the binary operator '-' (line 1802)
        result_sub_67915 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 18), '-', result___neg___67913, int_67914)
        
        # Getting the type of 'c' (line 1802)
        c_67916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 16), 'c')
        # Obtaining the member '__getitem__' of a type (line 1802)
        getitem___67917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 16), c_67916, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1802)
        subscript_call_result_67918 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 16), getitem___67917, result_sub_67915)
        
        int_67919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 28), 'int')
        # Getting the type of 'j' (line 1802)
        j_67920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 34), 'j')
        int_67921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 36), 'int')
        # Applying the binary operator '+' (line 1802)
        result_add_67922 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 34), '+', j_67920, int_67921)
        
        # Applying the binary operator '**' (line 1802)
        result_pow_67923 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 27), '**', int_67919, result_add_67922)
        
        
        # Call to comb(...): (line 1802)
        # Processing the call arguments (line 1802)
        # Getting the type of 'q' (line 1802)
        q_67925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 46), 'q', False)
        # Getting the type of 'j' (line 1802)
        j_67926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 49), 'j', False)
        int_67927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 51), 'int')
        # Applying the binary operator '+' (line 1802)
        result_add_67928 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 49), '+', j_67926, int_67927)
        
        # Processing the call keyword arguments (line 1802)
        kwargs_67929 = {}
        # Getting the type of 'comb' (line 1802)
        comb_67924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 41), 'comb', False)
        # Calling comb(args, kwargs) (line 1802)
        comb_call_result_67930 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 41), comb_67924, *[q_67925, result_add_67928], **kwargs_67929)
        
        # Applying the binary operator '*' (line 1802)
        result_mul_67931 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 27), '*', result_pow_67923, comb_call_result_67930)
        
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'q' (line 1802)
        q_67932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 59), 'q')
        # Applying the 'usub' unary operator (line 1802)
        result___neg___67933 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 58), 'usub', q_67932)
        
        # Getting the type of 'j' (line 1802)
        j_67934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 61), 'j')
        # Applying the binary operator '+' (line 1802)
        result_add_67935 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 58), '+', result___neg___67933, j_67934)
        
        # Getting the type of 'c' (line 1802)
        c_67936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 56), 'c')
        # Obtaining the member '__getitem__' of a type (line 1802)
        getitem___67937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 56), c_67936, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1802)
        subscript_call_result_67938 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 56), getitem___67937, result_add_67935)
        
        # Applying the binary operator '*' (line 1802)
        result_mul_67939 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 54), '*', result_mul_67931, subscript_call_result_67938)
        
        # Applying the binary operator '-=' (line 1802)
        result_isub_67940 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 16), '-=', subscript_call_result_67918, result_mul_67939)
        # Getting the type of 'c' (line 1802)
        c_67941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 16), 'c')
        
        # Getting the type of 'q' (line 1802)
        q_67942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 19), 'q')
        # Applying the 'usub' unary operator (line 1802)
        result___neg___67943 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 18), 'usub', q_67942)
        
        int_67944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 21), 'int')
        # Applying the binary operator '-' (line 1802)
        result_sub_67945 = python_operator(stypy.reporting.localization.Localization(__file__, 1802, 18), '-', result___neg___67943, int_67944)
        
        # Storing an element on a container (line 1802)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1802, 16), c_67941, (result_sub_67945, result_isub_67940))
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'c' (line 1804)
        c_67946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 15), 'c')
        # Assigning a type to the variable 'stypy_return_type' (line 1804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 8), 'stypy_return_type', c_67946)
        
        # ################# End of '_construct_from_derivatives(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_construct_from_derivatives' in the type store
        # Getting the type of 'stypy_return_type' (line 1720)
        stypy_return_type_67947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_67947)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_construct_from_derivatives'
        return stypy_return_type_67947


    @staticmethod
    @norecursion
    def _raise_degree(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_raise_degree'
        module_type_store = module_type_store.open_function_context('_raise_degree', 1806, 4, False)
        
        # Passed parameters checking function
        BPoly._raise_degree.__dict__.__setitem__('stypy_localization', localization)
        BPoly._raise_degree.__dict__.__setitem__('stypy_type_of_self', None)
        BPoly._raise_degree.__dict__.__setitem__('stypy_type_store', module_type_store)
        BPoly._raise_degree.__dict__.__setitem__('stypy_function_name', '_raise_degree')
        BPoly._raise_degree.__dict__.__setitem__('stypy_param_names_list', ['c', 'd'])
        BPoly._raise_degree.__dict__.__setitem__('stypy_varargs_param_name', None)
        BPoly._raise_degree.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BPoly._raise_degree.__dict__.__setitem__('stypy_call_defaults', defaults)
        BPoly._raise_degree.__dict__.__setitem__('stypy_call_varargs', varargs)
        BPoly._raise_degree.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BPoly._raise_degree.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, '_raise_degree', ['c', 'd'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_raise_degree', localization, ['d'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_raise_degree(...)' code ##################

        str_67948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, (-1)), 'str', 'Raise a degree of a polynomial in the Bernstein basis.\n\n        Given the coefficients of a polynomial degree `k`, return (the\n        coefficients of) the equivalent polynomial of degree `k+d`.\n\n        Parameters\n        ----------\n        c : array_like\n            coefficient array, 1D\n        d : integer\n\n        Returns\n        -------\n        array\n            coefficient array, 1D array of length `c.shape[0] + d`\n\n        Notes\n        -----\n        This uses the fact that a Bernstein polynomial `b_{a, k}` can be\n        identically represented as a linear combination of polynomials of\n        a higher degree `k+d`:\n\n            .. math:: b_{a, k} = comb(k, a) \\sum_{j=0}^{d} b_{a+j, k+d} \\\n                                 comb(d, j) / comb(k+d, a+j)\n\n        ')
        
        
        # Getting the type of 'd' (line 1834)
        d_67949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 11), 'd')
        int_67950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 16), 'int')
        # Applying the binary operator '==' (line 1834)
        result_eq_67951 = python_operator(stypy.reporting.localization.Localization(__file__, 1834, 11), '==', d_67949, int_67950)
        
        # Testing the type of an if condition (line 1834)
        if_condition_67952 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1834, 8), result_eq_67951)
        # Assigning a type to the variable 'if_condition_67952' (line 1834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 8), 'if_condition_67952', if_condition_67952)
        # SSA begins for if statement (line 1834)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'c' (line 1835)
        c_67953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 19), 'c')
        # Assigning a type to the variable 'stypy_return_type' (line 1835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1835, 12), 'stypy_return_type', c_67953)
        # SSA join for if statement (line 1834)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1837):
        
        # Assigning a BinOp to a Name (line 1837):
        
        # Obtaining the type of the subscript
        int_67954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 20), 'int')
        # Getting the type of 'c' (line 1837)
        c_67955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 12), 'c')
        # Obtaining the member 'shape' of a type (line 1837)
        shape_67956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1837, 12), c_67955, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1837)
        getitem___67957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1837, 12), shape_67956, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1837)
        subscript_call_result_67958 = invoke(stypy.reporting.localization.Localization(__file__, 1837, 12), getitem___67957, int_67954)
        
        int_67959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 25), 'int')
        # Applying the binary operator '-' (line 1837)
        result_sub_67960 = python_operator(stypy.reporting.localization.Localization(__file__, 1837, 12), '-', subscript_call_result_67958, int_67959)
        
        # Assigning a type to the variable 'k' (line 1837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1837, 8), 'k', result_sub_67960)
        
        # Assigning a Call to a Name (line 1838):
        
        # Assigning a Call to a Name (line 1838):
        
        # Call to zeros(...): (line 1838)
        # Processing the call arguments (line 1838)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1838)
        tuple_67963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1838, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1838)
        # Adding element type (line 1838)
        
        # Obtaining the type of the subscript
        int_67964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1838, 32), 'int')
        # Getting the type of 'c' (line 1838)
        c_67965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 24), 'c', False)
        # Obtaining the member 'shape' of a type (line 1838)
        shape_67966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1838, 24), c_67965, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1838)
        getitem___67967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1838, 24), shape_67966, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1838)
        subscript_call_result_67968 = invoke(stypy.reporting.localization.Localization(__file__, 1838, 24), getitem___67967, int_67964)
        
        # Getting the type of 'd' (line 1838)
        d_67969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 37), 'd', False)
        # Applying the binary operator '+' (line 1838)
        result_add_67970 = python_operator(stypy.reporting.localization.Localization(__file__, 1838, 24), '+', subscript_call_result_67968, d_67969)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1838, 24), tuple_67963, result_add_67970)
        
        
        # Obtaining the type of the subscript
        int_67971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1838, 51), 'int')
        slice_67972 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1838, 43), int_67971, None, None)
        # Getting the type of 'c' (line 1838)
        c_67973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 43), 'c', False)
        # Obtaining the member 'shape' of a type (line 1838)
        shape_67974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1838, 43), c_67973, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1838)
        getitem___67975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1838, 43), shape_67974, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1838)
        subscript_call_result_67976 = invoke(stypy.reporting.localization.Localization(__file__, 1838, 43), getitem___67975, slice_67972)
        
        # Applying the binary operator '+' (line 1838)
        result_add_67977 = python_operator(stypy.reporting.localization.Localization(__file__, 1838, 23), '+', tuple_67963, subscript_call_result_67976)
        
        # Processing the call keyword arguments (line 1838)
        # Getting the type of 'c' (line 1838)
        c_67978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 62), 'c', False)
        # Obtaining the member 'dtype' of a type (line 1838)
        dtype_67979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1838, 62), c_67978, 'dtype')
        keyword_67980 = dtype_67979
        kwargs_67981 = {'dtype': keyword_67980}
        # Getting the type of 'np' (line 1838)
        np_67961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 14), 'np', False)
        # Obtaining the member 'zeros' of a type (line 1838)
        zeros_67962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1838, 14), np_67961, 'zeros')
        # Calling zeros(args, kwargs) (line 1838)
        zeros_call_result_67982 = invoke(stypy.reporting.localization.Localization(__file__, 1838, 14), zeros_67962, *[result_add_67977], **kwargs_67981)
        
        # Assigning a type to the variable 'out' (line 1838)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1838, 8), 'out', zeros_call_result_67982)
        
        
        # Call to range(...): (line 1840)
        # Processing the call arguments (line 1840)
        
        # Obtaining the type of the subscript
        int_67984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 31), 'int')
        # Getting the type of 'c' (line 1840)
        c_67985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 23), 'c', False)
        # Obtaining the member 'shape' of a type (line 1840)
        shape_67986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1840, 23), c_67985, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1840)
        getitem___67987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1840, 23), shape_67986, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1840)
        subscript_call_result_67988 = invoke(stypy.reporting.localization.Localization(__file__, 1840, 23), getitem___67987, int_67984)
        
        # Processing the call keyword arguments (line 1840)
        kwargs_67989 = {}
        # Getting the type of 'range' (line 1840)
        range_67983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 17), 'range', False)
        # Calling range(args, kwargs) (line 1840)
        range_call_result_67990 = invoke(stypy.reporting.localization.Localization(__file__, 1840, 17), range_67983, *[subscript_call_result_67988], **kwargs_67989)
        
        # Testing the type of a for loop iterable (line 1840)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1840, 8), range_call_result_67990)
        # Getting the type of the for loop variable (line 1840)
        for_loop_var_67991 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1840, 8), range_call_result_67990)
        # Assigning a type to the variable 'a' (line 1840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 8), 'a', for_loop_var_67991)
        # SSA begins for a for statement (line 1840)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 1841):
        
        # Assigning a BinOp to a Name (line 1841):
        
        # Obtaining the type of the subscript
        # Getting the type of 'a' (line 1841)
        a_67992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 18), 'a')
        # Getting the type of 'c' (line 1841)
        c_67993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 16), 'c')
        # Obtaining the member '__getitem__' of a type (line 1841)
        getitem___67994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 16), c_67993, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1841)
        subscript_call_result_67995 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 16), getitem___67994, a_67992)
        
        
        # Call to comb(...): (line 1841)
        # Processing the call arguments (line 1841)
        # Getting the type of 'k' (line 1841)
        k_67997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 28), 'k', False)
        # Getting the type of 'a' (line 1841)
        a_67998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 31), 'a', False)
        # Processing the call keyword arguments (line 1841)
        kwargs_67999 = {}
        # Getting the type of 'comb' (line 1841)
        comb_67996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 23), 'comb', False)
        # Calling comb(args, kwargs) (line 1841)
        comb_call_result_68000 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 23), comb_67996, *[k_67997, a_67998], **kwargs_67999)
        
        # Applying the binary operator '*' (line 1841)
        result_mul_68001 = python_operator(stypy.reporting.localization.Localization(__file__, 1841, 16), '*', subscript_call_result_67995, comb_call_result_68000)
        
        # Assigning a type to the variable 'f' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 12), 'f', result_mul_68001)
        
        
        # Call to range(...): (line 1842)
        # Processing the call arguments (line 1842)
        # Getting the type of 'd' (line 1842)
        d_68003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 27), 'd', False)
        int_68004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, 29), 'int')
        # Applying the binary operator '+' (line 1842)
        result_add_68005 = python_operator(stypy.reporting.localization.Localization(__file__, 1842, 27), '+', d_68003, int_68004)
        
        # Processing the call keyword arguments (line 1842)
        kwargs_68006 = {}
        # Getting the type of 'range' (line 1842)
        range_68002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 21), 'range', False)
        # Calling range(args, kwargs) (line 1842)
        range_call_result_68007 = invoke(stypy.reporting.localization.Localization(__file__, 1842, 21), range_68002, *[result_add_68005], **kwargs_68006)
        
        # Testing the type of a for loop iterable (line 1842)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1842, 12), range_call_result_68007)
        # Getting the type of the for loop variable (line 1842)
        for_loop_var_68008 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1842, 12), range_call_result_68007)
        # Assigning a type to the variable 'j' (line 1842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 12), 'j', for_loop_var_68008)
        # SSA begins for a for statement (line 1842)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'out' (line 1843)
        out_68009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 16), 'out')
        
        # Obtaining the type of the subscript
        # Getting the type of 'a' (line 1843)
        a_68010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 20), 'a')
        # Getting the type of 'j' (line 1843)
        j_68011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 22), 'j')
        # Applying the binary operator '+' (line 1843)
        result_add_68012 = python_operator(stypy.reporting.localization.Localization(__file__, 1843, 20), '+', a_68010, j_68011)
        
        # Getting the type of 'out' (line 1843)
        out_68013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 16), 'out')
        # Obtaining the member '__getitem__' of a type (line 1843)
        getitem___68014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1843, 16), out_68013, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1843)
        subscript_call_result_68015 = invoke(stypy.reporting.localization.Localization(__file__, 1843, 16), getitem___68014, result_add_68012)
        
        # Getting the type of 'f' (line 1843)
        f_68016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 28), 'f')
        
        # Call to comb(...): (line 1843)
        # Processing the call arguments (line 1843)
        # Getting the type of 'd' (line 1843)
        d_68018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 37), 'd', False)
        # Getting the type of 'j' (line 1843)
        j_68019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 40), 'j', False)
        # Processing the call keyword arguments (line 1843)
        kwargs_68020 = {}
        # Getting the type of 'comb' (line 1843)
        comb_68017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 32), 'comb', False)
        # Calling comb(args, kwargs) (line 1843)
        comb_call_result_68021 = invoke(stypy.reporting.localization.Localization(__file__, 1843, 32), comb_68017, *[d_68018, j_68019], **kwargs_68020)
        
        # Applying the binary operator '*' (line 1843)
        result_mul_68022 = python_operator(stypy.reporting.localization.Localization(__file__, 1843, 28), '*', f_68016, comb_call_result_68021)
        
        
        # Call to comb(...): (line 1843)
        # Processing the call arguments (line 1843)
        # Getting the type of 'k' (line 1843)
        k_68024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 50), 'k', False)
        # Getting the type of 'd' (line 1843)
        d_68025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 52), 'd', False)
        # Applying the binary operator '+' (line 1843)
        result_add_68026 = python_operator(stypy.reporting.localization.Localization(__file__, 1843, 50), '+', k_68024, d_68025)
        
        # Getting the type of 'a' (line 1843)
        a_68027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 55), 'a', False)
        # Getting the type of 'j' (line 1843)
        j_68028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 57), 'j', False)
        # Applying the binary operator '+' (line 1843)
        result_add_68029 = python_operator(stypy.reporting.localization.Localization(__file__, 1843, 55), '+', a_68027, j_68028)
        
        # Processing the call keyword arguments (line 1843)
        kwargs_68030 = {}
        # Getting the type of 'comb' (line 1843)
        comb_68023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 45), 'comb', False)
        # Calling comb(args, kwargs) (line 1843)
        comb_call_result_68031 = invoke(stypy.reporting.localization.Localization(__file__, 1843, 45), comb_68023, *[result_add_68026, result_add_68029], **kwargs_68030)
        
        # Applying the binary operator 'div' (line 1843)
        result_div_68032 = python_operator(stypy.reporting.localization.Localization(__file__, 1843, 43), 'div', result_mul_68022, comb_call_result_68031)
        
        # Applying the binary operator '+=' (line 1843)
        result_iadd_68033 = python_operator(stypy.reporting.localization.Localization(__file__, 1843, 16), '+=', subscript_call_result_68015, result_div_68032)
        # Getting the type of 'out' (line 1843)
        out_68034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 16), 'out')
        # Getting the type of 'a' (line 1843)
        a_68035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 20), 'a')
        # Getting the type of 'j' (line 1843)
        j_68036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 22), 'j')
        # Applying the binary operator '+' (line 1843)
        result_add_68037 = python_operator(stypy.reporting.localization.Localization(__file__, 1843, 20), '+', a_68035, j_68036)
        
        # Storing an element on a container (line 1843)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1843, 16), out_68034, (result_add_68037, result_iadd_68033))
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'out' (line 1844)
        out_68038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 1844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 8), 'stypy_return_type', out_68038)
        
        # ################# End of '_raise_degree(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_raise_degree' in the type store
        # Getting the type of 'stypy_return_type' (line 1806)
        stypy_return_type_68039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_68039)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_raise_degree'
        return stypy_return_type_68039


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1302, 0, False)
        # Assigning a type to the variable 'self' (line 1303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BPoly.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'BPoly' (line 1302)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 0), 'BPoly', BPoly)

# Assigning a Attribute to a Attribute (line 1569):
# Getting the type of '_PPolyBase' (line 1569)
_PPolyBase_68040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 21), '_PPolyBase')
# Obtaining the member 'extend' of a type (line 1569)
extend_68041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 21), _PPolyBase_68040, 'extend')
# Obtaining the member '__doc__' of a type (line 1569)
doc___68042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 21), extend_68041, '__doc__')
# Getting the type of 'BPoly'
BPoly_68043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'BPoly')
# Obtaining the member 'extend' of a type
extend_68044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), BPoly_68043, 'extend')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), extend_68044, '__doc__', doc___68042)
# Declaration of the 'NdPPoly' class

class NdPPoly(object, ):
    str_68045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1904, (-1)), 'str', "\n    Piecewise tensor product polynomial\n\n    The value at point `xp = (x', y', z', ...)` is evaluated by first\n    computing the interval indices `i` such that::\n\n        x[0][i[0]] <= x' < x[0][i[0]+1]\n        x[1][i[1]] <= y' < x[1][i[1]+1]\n        ...\n\n    and then computing::\n\n        S = sum(c[k0-m0-1,...,kn-mn-1,i[0],...,i[n]]\n                * (xp[0] - x[0][i[0]])**m0\n                * ...\n                * (xp[n] - x[n][i[n]])**mn\n                for m0 in range(k[0]+1)\n                ...\n                for mn in range(k[n]+1))\n\n    where ``k[j]`` is the degree of the polynomial in dimension j. This\n    representation is the piecewise multivariate power basis.\n\n    Parameters\n    ----------\n    c : ndarray, shape (k0, ..., kn, m0, ..., mn, ...)\n        Polynomial coefficients, with polynomial order `kj` and\n        `mj+1` intervals for each dimension `j`.\n    x : ndim-tuple of ndarrays, shapes (mj+1,)\n        Polynomial breakpoints for each dimension. These must be\n        sorted in increasing order.\n    extrapolate : bool, optional\n        Whether to extrapolate to out-of-bounds points based on first\n        and last intervals, or to return NaNs. Default: True.\n\n    Attributes\n    ----------\n    x : tuple of ndarrays\n        Breakpoints.\n    c : ndarray\n        Coefficients of the polynomials.\n\n    Methods\n    -------\n    __call__\n    construct_fast\n\n    See also\n    --------\n    PPoly : piecewise polynomials in 1D\n\n    Notes\n    -----\n    High-order polynomials in the power basis can be numerically\n    unstable.\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1906)
        None_68046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 41), 'None')
        defaults = [None_68046]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1906, 4, False)
        # Assigning a type to the variable 'self' (line 1907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NdPPoly.__init__', ['c', 'x', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['c', 'x', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1907):
        
        # Assigning a Call to a Attribute (line 1907):
        
        # Call to tuple(...): (line 1907)
        # Processing the call arguments (line 1907)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1907, 23, True)
        # Calculating comprehension expression
        # Getting the type of 'x' (line 1907)
        x_68056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 74), 'x', False)
        comprehension_68057 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 23), x_68056)
        # Assigning a type to the variable 'v' (line 1907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 23), 'v', comprehension_68057)
        
        # Call to ascontiguousarray(...): (line 1907)
        # Processing the call arguments (line 1907)
        # Getting the type of 'v' (line 1907)
        v_68050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 44), 'v', False)
        # Processing the call keyword arguments (line 1907)
        # Getting the type of 'np' (line 1907)
        np_68051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 53), 'np', False)
        # Obtaining the member 'float64' of a type (line 1907)
        float64_68052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1907, 53), np_68051, 'float64')
        keyword_68053 = float64_68052
        kwargs_68054 = {'dtype': keyword_68053}
        # Getting the type of 'np' (line 1907)
        np_68048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 23), 'np', False)
        # Obtaining the member 'ascontiguousarray' of a type (line 1907)
        ascontiguousarray_68049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1907, 23), np_68048, 'ascontiguousarray')
        # Calling ascontiguousarray(args, kwargs) (line 1907)
        ascontiguousarray_call_result_68055 = invoke(stypy.reporting.localization.Localization(__file__, 1907, 23), ascontiguousarray_68049, *[v_68050], **kwargs_68054)
        
        list_68058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 23), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 23), list_68058, ascontiguousarray_call_result_68055)
        # Processing the call keyword arguments (line 1907)
        kwargs_68059 = {}
        # Getting the type of 'tuple' (line 1907)
        tuple_68047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 17), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1907)
        tuple_call_result_68060 = invoke(stypy.reporting.localization.Localization(__file__, 1907, 17), tuple_68047, *[list_68058], **kwargs_68059)
        
        # Getting the type of 'self' (line 1907)
        self_68061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 8), 'self')
        # Setting the type of the member 'x' of a type (line 1907)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1907, 8), self_68061, 'x', tuple_call_result_68060)
        
        # Assigning a Call to a Attribute (line 1908):
        
        # Assigning a Call to a Attribute (line 1908):
        
        # Call to asarray(...): (line 1908)
        # Processing the call arguments (line 1908)
        # Getting the type of 'c' (line 1908)
        c_68064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 28), 'c', False)
        # Processing the call keyword arguments (line 1908)
        kwargs_68065 = {}
        # Getting the type of 'np' (line 1908)
        np_68062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 17), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1908)
        asarray_68063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1908, 17), np_68062, 'asarray')
        # Calling asarray(args, kwargs) (line 1908)
        asarray_call_result_68066 = invoke(stypy.reporting.localization.Localization(__file__, 1908, 17), asarray_68063, *[c_68064], **kwargs_68065)
        
        # Getting the type of 'self' (line 1908)
        self_68067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 8), 'self')
        # Setting the type of the member 'c' of a type (line 1908)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1908, 8), self_68067, 'c', asarray_call_result_68066)
        
        # Type idiom detected: calculating its left and rigth part (line 1909)
        # Getting the type of 'extrapolate' (line 1909)
        extrapolate_68068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 11), 'extrapolate')
        # Getting the type of 'None' (line 1909)
        None_68069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 26), 'None')
        
        (may_be_68070, more_types_in_union_68071) = may_be_none(extrapolate_68068, None_68069)

        if may_be_68070:

            if more_types_in_union_68071:
                # Runtime conditional SSA (line 1909)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 1910):
            
            # Assigning a Name to a Name (line 1910):
            # Getting the type of 'True' (line 1910)
            True_68072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 26), 'True')
            # Assigning a type to the variable 'extrapolate' (line 1910)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1910, 12), 'extrapolate', True_68072)

            if more_types_in_union_68071:
                # SSA join for if statement (line 1909)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 1911):
        
        # Assigning a Call to a Attribute (line 1911):
        
        # Call to bool(...): (line 1911)
        # Processing the call arguments (line 1911)
        # Getting the type of 'extrapolate' (line 1911)
        extrapolate_68074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 32), 'extrapolate', False)
        # Processing the call keyword arguments (line 1911)
        kwargs_68075 = {}
        # Getting the type of 'bool' (line 1911)
        bool_68073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 27), 'bool', False)
        # Calling bool(args, kwargs) (line 1911)
        bool_call_result_68076 = invoke(stypy.reporting.localization.Localization(__file__, 1911, 27), bool_68073, *[extrapolate_68074], **kwargs_68075)
        
        # Getting the type of 'self' (line 1911)
        self_68077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 8), 'self')
        # Setting the type of the member 'extrapolate' of a type (line 1911)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1911, 8), self_68077, 'extrapolate', bool_call_result_68076)
        
        # Assigning a Call to a Name (line 1913):
        
        # Assigning a Call to a Name (line 1913):
        
        # Call to len(...): (line 1913)
        # Processing the call arguments (line 1913)
        # Getting the type of 'self' (line 1913)
        self_68079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 19), 'self', False)
        # Obtaining the member 'x' of a type (line 1913)
        x_68080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 19), self_68079, 'x')
        # Processing the call keyword arguments (line 1913)
        kwargs_68081 = {}
        # Getting the type of 'len' (line 1913)
        len_68078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 15), 'len', False)
        # Calling len(args, kwargs) (line 1913)
        len_call_result_68082 = invoke(stypy.reporting.localization.Localization(__file__, 1913, 15), len_68078, *[x_68080], **kwargs_68081)
        
        # Assigning a type to the variable 'ndim' (line 1913)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1913, 8), 'ndim', len_call_result_68082)
        
        
        # Call to any(...): (line 1914)
        # Processing the call arguments (line 1914)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1914, 15, True)
        # Calculating comprehension expression
        # Getting the type of 'self' (line 1914)
        self_68088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 36), 'self', False)
        # Obtaining the member 'x' of a type (line 1914)
        x_68089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1914, 36), self_68088, 'x')
        comprehension_68090 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1914, 15), x_68089)
        # Assigning a type to the variable 'v' (line 1914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 15), 'v', comprehension_68090)
        
        # Getting the type of 'v' (line 1914)
        v_68084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 15), 'v', False)
        # Obtaining the member 'ndim' of a type (line 1914)
        ndim_68085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1914, 15), v_68084, 'ndim')
        int_68086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1914, 25), 'int')
        # Applying the binary operator '!=' (line 1914)
        result_ne_68087 = python_operator(stypy.reporting.localization.Localization(__file__, 1914, 15), '!=', ndim_68085, int_68086)
        
        list_68091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1914, 15), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1914, 15), list_68091, result_ne_68087)
        # Processing the call keyword arguments (line 1914)
        kwargs_68092 = {}
        # Getting the type of 'any' (line 1914)
        any_68083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 11), 'any', False)
        # Calling any(args, kwargs) (line 1914)
        any_call_result_68093 = invoke(stypy.reporting.localization.Localization(__file__, 1914, 11), any_68083, *[list_68091], **kwargs_68092)
        
        # Testing the type of an if condition (line 1914)
        if_condition_68094 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1914, 8), any_call_result_68093)
        # Assigning a type to the variable 'if_condition_68094' (line 1914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 8), 'if_condition_68094', if_condition_68094)
        # SSA begins for if statement (line 1914)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1915)
        # Processing the call arguments (line 1915)
        str_68096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1915, 29), 'str', 'x arrays must all be 1-dimensional')
        # Processing the call keyword arguments (line 1915)
        kwargs_68097 = {}
        # Getting the type of 'ValueError' (line 1915)
        ValueError_68095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1915)
        ValueError_call_result_68098 = invoke(stypy.reporting.localization.Localization(__file__, 1915, 18), ValueError_68095, *[str_68096], **kwargs_68097)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1915, 12), ValueError_call_result_68098, 'raise parameter', BaseException)
        # SSA join for if statement (line 1914)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to any(...): (line 1916)
        # Processing the call arguments (line 1916)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1916, 15, True)
        # Calculating comprehension expression
        # Getting the type of 'self' (line 1916)
        self_68104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 35), 'self', False)
        # Obtaining the member 'x' of a type (line 1916)
        x_68105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 35), self_68104, 'x')
        comprehension_68106 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1916, 15), x_68105)
        # Assigning a type to the variable 'v' (line 1916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 15), 'v', comprehension_68106)
        
        # Getting the type of 'v' (line 1916)
        v_68100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 15), 'v', False)
        # Obtaining the member 'size' of a type (line 1916)
        size_68101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 15), v_68100, 'size')
        int_68102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 24), 'int')
        # Applying the binary operator '<' (line 1916)
        result_lt_68103 = python_operator(stypy.reporting.localization.Localization(__file__, 1916, 15), '<', size_68101, int_68102)
        
        list_68107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 15), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1916, 15), list_68107, result_lt_68103)
        # Processing the call keyword arguments (line 1916)
        kwargs_68108 = {}
        # Getting the type of 'any' (line 1916)
        any_68099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 11), 'any', False)
        # Calling any(args, kwargs) (line 1916)
        any_call_result_68109 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 11), any_68099, *[list_68107], **kwargs_68108)
        
        # Testing the type of an if condition (line 1916)
        if_condition_68110 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1916, 8), any_call_result_68109)
        # Assigning a type to the variable 'if_condition_68110' (line 1916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 8), 'if_condition_68110', if_condition_68110)
        # SSA begins for if statement (line 1916)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1917)
        # Processing the call arguments (line 1917)
        str_68112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 29), 'str', 'x arrays must all contain at least 2 points')
        # Processing the call keyword arguments (line 1917)
        kwargs_68113 = {}
        # Getting the type of 'ValueError' (line 1917)
        ValueError_68111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1917)
        ValueError_call_result_68114 = invoke(stypy.reporting.localization.Localization(__file__, 1917, 18), ValueError_68111, *[str_68112], **kwargs_68113)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1917, 12), ValueError_call_result_68114, 'raise parameter', BaseException)
        # SSA join for if statement (line 1916)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'c' (line 1918)
        c_68115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 11), 'c')
        # Obtaining the member 'ndim' of a type (line 1918)
        ndim_68116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1918, 11), c_68115, 'ndim')
        int_68117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1918, 20), 'int')
        # Getting the type of 'ndim' (line 1918)
        ndim_68118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 22), 'ndim')
        # Applying the binary operator '*' (line 1918)
        result_mul_68119 = python_operator(stypy.reporting.localization.Localization(__file__, 1918, 20), '*', int_68117, ndim_68118)
        
        # Applying the binary operator '<' (line 1918)
        result_lt_68120 = python_operator(stypy.reporting.localization.Localization(__file__, 1918, 11), '<', ndim_68116, result_mul_68119)
        
        # Testing the type of an if condition (line 1918)
        if_condition_68121 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1918, 8), result_lt_68120)
        # Assigning a type to the variable 'if_condition_68121' (line 1918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1918, 8), 'if_condition_68121', if_condition_68121)
        # SSA begins for if statement (line 1918)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1919)
        # Processing the call arguments (line 1919)
        str_68123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, 29), 'str', 'c must have at least 2*len(x) dimensions')
        # Processing the call keyword arguments (line 1919)
        kwargs_68124 = {}
        # Getting the type of 'ValueError' (line 1919)
        ValueError_68122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1919)
        ValueError_call_result_68125 = invoke(stypy.reporting.localization.Localization(__file__, 1919, 18), ValueError_68122, *[str_68123], **kwargs_68124)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1919, 12), ValueError_call_result_68125, 'raise parameter', BaseException)
        # SSA join for if statement (line 1918)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to any(...): (line 1920)
        # Processing the call arguments (line 1920)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1920, 15, True)
        # Calculating comprehension expression
        # Getting the type of 'self' (line 1920)
        self_68144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 51), 'self', False)
        # Obtaining the member 'x' of a type (line 1920)
        x_68145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 51), self_68144, 'x')
        comprehension_68146 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1920, 15), x_68145)
        # Assigning a type to the variable 'v' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 15), 'v', comprehension_68146)
        
        # Call to any(...): (line 1920)
        # Processing the call arguments (line 1920)
        
        
        # Obtaining the type of the subscript
        int_68129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 24), 'int')
        slice_68130 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1920, 22), int_68129, None, None)
        # Getting the type of 'v' (line 1920)
        v_68131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 22), 'v', False)
        # Obtaining the member '__getitem__' of a type (line 1920)
        getitem___68132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 22), v_68131, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1920)
        subscript_call_result_68133 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 22), getitem___68132, slice_68130)
        
        
        # Obtaining the type of the subscript
        int_68134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 33), 'int')
        slice_68135 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1920, 30), None, int_68134, None)
        # Getting the type of 'v' (line 1920)
        v_68136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 30), 'v', False)
        # Obtaining the member '__getitem__' of a type (line 1920)
        getitem___68137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 30), v_68136, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1920)
        subscript_call_result_68138 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 30), getitem___68137, slice_68135)
        
        # Applying the binary operator '-' (line 1920)
        result_sub_68139 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 22), '-', subscript_call_result_68133, subscript_call_result_68138)
        
        int_68140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 39), 'int')
        # Applying the binary operator '<' (line 1920)
        result_lt_68141 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 22), '<', result_sub_68139, int_68140)
        
        # Processing the call keyword arguments (line 1920)
        kwargs_68142 = {}
        # Getting the type of 'np' (line 1920)
        np_68127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 15), 'np', False)
        # Obtaining the member 'any' of a type (line 1920)
        any_68128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 15), np_68127, 'any')
        # Calling any(args, kwargs) (line 1920)
        any_call_result_68143 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 15), any_68128, *[result_lt_68141], **kwargs_68142)
        
        list_68147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 15), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1920, 15), list_68147, any_call_result_68143)
        # Processing the call keyword arguments (line 1920)
        kwargs_68148 = {}
        # Getting the type of 'any' (line 1920)
        any_68126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 11), 'any', False)
        # Calling any(args, kwargs) (line 1920)
        any_call_result_68149 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 11), any_68126, *[list_68147], **kwargs_68148)
        
        # Testing the type of an if condition (line 1920)
        if_condition_68150 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1920, 8), any_call_result_68149)
        # Assigning a type to the variable 'if_condition_68150' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 8), 'if_condition_68150', if_condition_68150)
        # SSA begins for if statement (line 1920)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1921)
        # Processing the call arguments (line 1921)
        str_68152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 29), 'str', 'x-coordinates are not in increasing order')
        # Processing the call keyword arguments (line 1921)
        kwargs_68153 = {}
        # Getting the type of 'ValueError' (line 1921)
        ValueError_68151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1921)
        ValueError_call_result_68154 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 18), ValueError_68151, *[str_68152], **kwargs_68153)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1921, 12), ValueError_call_result_68154, 'raise parameter', BaseException)
        # SSA join for if statement (line 1920)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to any(...): (line 1922)
        # Processing the call arguments (line 1922)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1922, 15, True)
        # Calculating comprehension expression
        
        # Call to zip(...): (line 1922)
        # Processing the call arguments (line 1922)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ndim' (line 1922)
        ndim_68163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 55), 'ndim', False)
        int_68164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1922, 60), 'int')
        # Getting the type of 'ndim' (line 1922)
        ndim_68165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 62), 'ndim', False)
        # Applying the binary operator '*' (line 1922)
        result_mul_68166 = python_operator(stypy.reporting.localization.Localization(__file__, 1922, 60), '*', int_68164, ndim_68165)
        
        slice_68167 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1922, 47), ndim_68163, result_mul_68166, None)
        # Getting the type of 'c' (line 1922)
        c_68168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 47), 'c', False)
        # Obtaining the member 'shape' of a type (line 1922)
        shape_68169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 47), c_68168, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1922)
        getitem___68170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 47), shape_68169, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1922)
        subscript_call_result_68171 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 47), getitem___68170, slice_68167)
        
        # Getting the type of 'self' (line 1922)
        self_68172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 69), 'self', False)
        # Obtaining the member 'x' of a type (line 1922)
        x_68173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 69), self_68172, 'x')
        # Processing the call keyword arguments (line 1922)
        kwargs_68174 = {}
        # Getting the type of 'zip' (line 1922)
        zip_68162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 43), 'zip', False)
        # Calling zip(args, kwargs) (line 1922)
        zip_call_result_68175 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 43), zip_68162, *[subscript_call_result_68171, x_68173], **kwargs_68174)
        
        comprehension_68176 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1922, 15), zip_call_result_68175)
        # Assigning a type to the variable 'a' (line 1922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1922, 15), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1922, 15), comprehension_68176))
        # Assigning a type to the variable 'b' (line 1922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1922, 15), 'b', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1922, 15), comprehension_68176))
        
        # Getting the type of 'a' (line 1922)
        a_68156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 15), 'a', False)
        # Getting the type of 'b' (line 1922)
        b_68157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 20), 'b', False)
        # Obtaining the member 'size' of a type (line 1922)
        size_68158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 20), b_68157, 'size')
        int_68159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1922, 29), 'int')
        # Applying the binary operator '-' (line 1922)
        result_sub_68160 = python_operator(stypy.reporting.localization.Localization(__file__, 1922, 20), '-', size_68158, int_68159)
        
        # Applying the binary operator '!=' (line 1922)
        result_ne_68161 = python_operator(stypy.reporting.localization.Localization(__file__, 1922, 15), '!=', a_68156, result_sub_68160)
        
        list_68177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1922, 15), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1922, 15), list_68177, result_ne_68161)
        # Processing the call keyword arguments (line 1922)
        kwargs_68178 = {}
        # Getting the type of 'any' (line 1922)
        any_68155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 11), 'any', False)
        # Calling any(args, kwargs) (line 1922)
        any_call_result_68179 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 11), any_68155, *[list_68177], **kwargs_68178)
        
        # Testing the type of an if condition (line 1922)
        if_condition_68180 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1922, 8), any_call_result_68179)
        # Assigning a type to the variable 'if_condition_68180' (line 1922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1922, 8), 'if_condition_68180', if_condition_68180)
        # SSA begins for if statement (line 1922)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1923)
        # Processing the call arguments (line 1923)
        str_68182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1923, 29), 'str', 'x and c do not agree on the number of intervals')
        # Processing the call keyword arguments (line 1923)
        kwargs_68183 = {}
        # Getting the type of 'ValueError' (line 1923)
        ValueError_68181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1923)
        ValueError_call_result_68184 = invoke(stypy.reporting.localization.Localization(__file__, 1923, 18), ValueError_68181, *[str_68182], **kwargs_68183)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1923, 12), ValueError_call_result_68184, 'raise parameter', BaseException)
        # SSA join for if statement (line 1922)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1925):
        
        # Assigning a Call to a Name (line 1925):
        
        # Call to _get_dtype(...): (line 1925)
        # Processing the call arguments (line 1925)
        # Getting the type of 'self' (line 1925)
        self_68187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 32), 'self', False)
        # Obtaining the member 'c' of a type (line 1925)
        c_68188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1925, 32), self_68187, 'c')
        # Obtaining the member 'dtype' of a type (line 1925)
        dtype_68189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1925, 32), c_68188, 'dtype')
        # Processing the call keyword arguments (line 1925)
        kwargs_68190 = {}
        # Getting the type of 'self' (line 1925)
        self_68185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 16), 'self', False)
        # Obtaining the member '_get_dtype' of a type (line 1925)
        _get_dtype_68186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1925, 16), self_68185, '_get_dtype')
        # Calling _get_dtype(args, kwargs) (line 1925)
        _get_dtype_call_result_68191 = invoke(stypy.reporting.localization.Localization(__file__, 1925, 16), _get_dtype_68186, *[dtype_68189], **kwargs_68190)
        
        # Assigning a type to the variable 'dtype' (line 1925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1925, 8), 'dtype', _get_dtype_call_result_68191)
        
        # Assigning a Call to a Attribute (line 1926):
        
        # Assigning a Call to a Attribute (line 1926):
        
        # Call to ascontiguousarray(...): (line 1926)
        # Processing the call arguments (line 1926)
        # Getting the type of 'self' (line 1926)
        self_68194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 38), 'self', False)
        # Obtaining the member 'c' of a type (line 1926)
        c_68195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 38), self_68194, 'c')
        # Processing the call keyword arguments (line 1926)
        # Getting the type of 'dtype' (line 1926)
        dtype_68196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 52), 'dtype', False)
        keyword_68197 = dtype_68196
        kwargs_68198 = {'dtype': keyword_68197}
        # Getting the type of 'np' (line 1926)
        np_68192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 17), 'np', False)
        # Obtaining the member 'ascontiguousarray' of a type (line 1926)
        ascontiguousarray_68193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 17), np_68192, 'ascontiguousarray')
        # Calling ascontiguousarray(args, kwargs) (line 1926)
        ascontiguousarray_call_result_68199 = invoke(stypy.reporting.localization.Localization(__file__, 1926, 17), ascontiguousarray_68193, *[c_68195], **kwargs_68198)
        
        # Getting the type of 'self' (line 1926)
        self_68200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'self')
        # Setting the type of the member 'c' of a type (line 1926)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1926, 8), self_68200, 'c', ascontiguousarray_call_result_68199)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def construct_fast(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1929)
        None_68201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 46), 'None')
        defaults = [None_68201]
        # Create a new context for function 'construct_fast'
        module_type_store = module_type_store.open_function_context('construct_fast', 1928, 4, False)
        # Assigning a type to the variable 'self' (line 1929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1929, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NdPPoly.construct_fast.__dict__.__setitem__('stypy_localization', localization)
        NdPPoly.construct_fast.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NdPPoly.construct_fast.__dict__.__setitem__('stypy_type_store', module_type_store)
        NdPPoly.construct_fast.__dict__.__setitem__('stypy_function_name', 'NdPPoly.construct_fast')
        NdPPoly.construct_fast.__dict__.__setitem__('stypy_param_names_list', ['c', 'x', 'extrapolate'])
        NdPPoly.construct_fast.__dict__.__setitem__('stypy_varargs_param_name', None)
        NdPPoly.construct_fast.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NdPPoly.construct_fast.__dict__.__setitem__('stypy_call_defaults', defaults)
        NdPPoly.construct_fast.__dict__.__setitem__('stypy_call_varargs', varargs)
        NdPPoly.construct_fast.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NdPPoly.construct_fast.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NdPPoly.construct_fast', ['c', 'x', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'construct_fast', localization, ['c', 'x', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'construct_fast(...)' code ##################

        str_68202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1938, (-1)), 'str', '\n        Construct the piecewise polynomial without making checks.\n\n        Takes the same parameters as the constructor. Input arguments\n        `c` and `x` must be arrays of the correct shape and type.  The\n        `c` array can only be of dtypes float and complex, and `x`\n        array must have dtype float.\n\n        ')
        
        # Assigning a Call to a Name (line 1939):
        
        # Assigning a Call to a Name (line 1939):
        
        # Call to __new__(...): (line 1939)
        # Processing the call arguments (line 1939)
        # Getting the type of 'cls' (line 1939)
        cls_68205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 30), 'cls', False)
        # Processing the call keyword arguments (line 1939)
        kwargs_68206 = {}
        # Getting the type of 'object' (line 1939)
        object_68203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 15), 'object', False)
        # Obtaining the member '__new__' of a type (line 1939)
        new___68204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 15), object_68203, '__new__')
        # Calling __new__(args, kwargs) (line 1939)
        new___call_result_68207 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 15), new___68204, *[cls_68205], **kwargs_68206)
        
        # Assigning a type to the variable 'self' (line 1939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1939, 8), 'self', new___call_result_68207)
        
        # Assigning a Name to a Attribute (line 1940):
        
        # Assigning a Name to a Attribute (line 1940):
        # Getting the type of 'c' (line 1940)
        c_68208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 17), 'c')
        # Getting the type of 'self' (line 1940)
        self_68209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 8), 'self')
        # Setting the type of the member 'c' of a type (line 1940)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1940, 8), self_68209, 'c', c_68208)
        
        # Assigning a Name to a Attribute (line 1941):
        
        # Assigning a Name to a Attribute (line 1941):
        # Getting the type of 'x' (line 1941)
        x_68210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 17), 'x')
        # Getting the type of 'self' (line 1941)
        self_68211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 8), 'self')
        # Setting the type of the member 'x' of a type (line 1941)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1941, 8), self_68211, 'x', x_68210)
        
        # Type idiom detected: calculating its left and rigth part (line 1942)
        # Getting the type of 'extrapolate' (line 1942)
        extrapolate_68212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 11), 'extrapolate')
        # Getting the type of 'None' (line 1942)
        None_68213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 26), 'None')
        
        (may_be_68214, more_types_in_union_68215) = may_be_none(extrapolate_68212, None_68213)

        if may_be_68214:

            if more_types_in_union_68215:
                # Runtime conditional SSA (line 1942)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 1943):
            
            # Assigning a Name to a Name (line 1943):
            # Getting the type of 'True' (line 1943)
            True_68216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 26), 'True')
            # Assigning a type to the variable 'extrapolate' (line 1943)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1943, 12), 'extrapolate', True_68216)

            if more_types_in_union_68215:
                # SSA join for if statement (line 1942)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1944):
        
        # Assigning a Name to a Attribute (line 1944):
        # Getting the type of 'extrapolate' (line 1944)
        extrapolate_68217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 27), 'extrapolate')
        # Getting the type of 'self' (line 1944)
        self_68218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 8), 'self')
        # Setting the type of the member 'extrapolate' of a type (line 1944)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1944, 8), self_68218, 'extrapolate', extrapolate_68217)
        # Getting the type of 'self' (line 1945)
        self_68219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 1945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1945, 8), 'stypy_return_type', self_68219)
        
        # ################# End of 'construct_fast(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'construct_fast' in the type store
        # Getting the type of 'stypy_return_type' (line 1928)
        stypy_return_type_68220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_68220)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'construct_fast'
        return stypy_return_type_68220


    @norecursion
    def _get_dtype(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_dtype'
        module_type_store = module_type_store.open_function_context('_get_dtype', 1947, 4, False)
        # Assigning a type to the variable 'self' (line 1948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1948, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NdPPoly._get_dtype.__dict__.__setitem__('stypy_localization', localization)
        NdPPoly._get_dtype.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NdPPoly._get_dtype.__dict__.__setitem__('stypy_type_store', module_type_store)
        NdPPoly._get_dtype.__dict__.__setitem__('stypy_function_name', 'NdPPoly._get_dtype')
        NdPPoly._get_dtype.__dict__.__setitem__('stypy_param_names_list', ['dtype'])
        NdPPoly._get_dtype.__dict__.__setitem__('stypy_varargs_param_name', None)
        NdPPoly._get_dtype.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NdPPoly._get_dtype.__dict__.__setitem__('stypy_call_defaults', defaults)
        NdPPoly._get_dtype.__dict__.__setitem__('stypy_call_varargs', varargs)
        NdPPoly._get_dtype.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NdPPoly._get_dtype.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NdPPoly._get_dtype', ['dtype'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_dtype', localization, ['dtype'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_dtype(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Call to issubdtype(...): (line 1948)
        # Processing the call arguments (line 1948)
        # Getting the type of 'dtype' (line 1948)
        dtype_68223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 25), 'dtype', False)
        # Getting the type of 'np' (line 1948)
        np_68224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 32), 'np', False)
        # Obtaining the member 'complexfloating' of a type (line 1948)
        complexfloating_68225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1948, 32), np_68224, 'complexfloating')
        # Processing the call keyword arguments (line 1948)
        kwargs_68226 = {}
        # Getting the type of 'np' (line 1948)
        np_68221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 11), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 1948)
        issubdtype_68222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1948, 11), np_68221, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 1948)
        issubdtype_call_result_68227 = invoke(stypy.reporting.localization.Localization(__file__, 1948, 11), issubdtype_68222, *[dtype_68223, complexfloating_68225], **kwargs_68226)
        
        
        # Call to issubdtype(...): (line 1949)
        # Processing the call arguments (line 1949)
        # Getting the type of 'self' (line 1949)
        self_68230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 32), 'self', False)
        # Obtaining the member 'c' of a type (line 1949)
        c_68231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1949, 32), self_68230, 'c')
        # Obtaining the member 'dtype' of a type (line 1949)
        dtype_68232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1949, 32), c_68231, 'dtype')
        # Getting the type of 'np' (line 1949)
        np_68233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 46), 'np', False)
        # Obtaining the member 'complexfloating' of a type (line 1949)
        complexfloating_68234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1949, 46), np_68233, 'complexfloating')
        # Processing the call keyword arguments (line 1949)
        kwargs_68235 = {}
        # Getting the type of 'np' (line 1949)
        np_68228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 18), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 1949)
        issubdtype_68229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1949, 18), np_68228, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 1949)
        issubdtype_call_result_68236 = invoke(stypy.reporting.localization.Localization(__file__, 1949, 18), issubdtype_68229, *[dtype_68232, complexfloating_68234], **kwargs_68235)
        
        # Applying the binary operator 'or' (line 1948)
        result_or_keyword_68237 = python_operator(stypy.reporting.localization.Localization(__file__, 1948, 11), 'or', issubdtype_call_result_68227, issubdtype_call_result_68236)
        
        # Testing the type of an if condition (line 1948)
        if_condition_68238 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1948, 8), result_or_keyword_68237)
        # Assigning a type to the variable 'if_condition_68238' (line 1948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1948, 8), 'if_condition_68238', if_condition_68238)
        # SSA begins for if statement (line 1948)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'np' (line 1950)
        np_68239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 19), 'np')
        # Obtaining the member 'complex_' of a type (line 1950)
        complex__68240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1950, 19), np_68239, 'complex_')
        # Assigning a type to the variable 'stypy_return_type' (line 1950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1950, 12), 'stypy_return_type', complex__68240)
        # SSA branch for the else part of an if statement (line 1948)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'np' (line 1952)
        np_68241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 19), 'np')
        # Obtaining the member 'float_' of a type (line 1952)
        float__68242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 19), np_68241, 'float_')
        # Assigning a type to the variable 'stypy_return_type' (line 1952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 12), 'stypy_return_type', float__68242)
        # SSA join for if statement (line 1948)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_get_dtype(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_dtype' in the type store
        # Getting the type of 'stypy_return_type' (line 1947)
        stypy_return_type_68243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_68243)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_dtype'
        return stypy_return_type_68243


    @norecursion
    def _ensure_c_contiguous(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_ensure_c_contiguous'
        module_type_store = module_type_store.open_function_context('_ensure_c_contiguous', 1954, 4, False)
        # Assigning a type to the variable 'self' (line 1955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1955, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NdPPoly._ensure_c_contiguous.__dict__.__setitem__('stypy_localization', localization)
        NdPPoly._ensure_c_contiguous.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NdPPoly._ensure_c_contiguous.__dict__.__setitem__('stypy_type_store', module_type_store)
        NdPPoly._ensure_c_contiguous.__dict__.__setitem__('stypy_function_name', 'NdPPoly._ensure_c_contiguous')
        NdPPoly._ensure_c_contiguous.__dict__.__setitem__('stypy_param_names_list', [])
        NdPPoly._ensure_c_contiguous.__dict__.__setitem__('stypy_varargs_param_name', None)
        NdPPoly._ensure_c_contiguous.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NdPPoly._ensure_c_contiguous.__dict__.__setitem__('stypy_call_defaults', defaults)
        NdPPoly._ensure_c_contiguous.__dict__.__setitem__('stypy_call_varargs', varargs)
        NdPPoly._ensure_c_contiguous.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NdPPoly._ensure_c_contiguous.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NdPPoly._ensure_c_contiguous', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_ensure_c_contiguous', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_ensure_c_contiguous(...)' code ##################

        
        
        # Getting the type of 'self' (line 1955)
        self_68244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1955, 15), 'self')
        # Obtaining the member 'c' of a type (line 1955)
        c_68245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1955, 15), self_68244, 'c')
        # Obtaining the member 'flags' of a type (line 1955)
        flags_68246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1955, 15), c_68245, 'flags')
        # Obtaining the member 'c_contiguous' of a type (line 1955)
        c_contiguous_68247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1955, 15), flags_68246, 'c_contiguous')
        # Applying the 'not' unary operator (line 1955)
        result_not__68248 = python_operator(stypy.reporting.localization.Localization(__file__, 1955, 11), 'not', c_contiguous_68247)
        
        # Testing the type of an if condition (line 1955)
        if_condition_68249 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1955, 8), result_not__68248)
        # Assigning a type to the variable 'if_condition_68249' (line 1955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1955, 8), 'if_condition_68249', if_condition_68249)
        # SSA begins for if statement (line 1955)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 1956):
        
        # Assigning a Call to a Attribute (line 1956):
        
        # Call to copy(...): (line 1956)
        # Processing the call keyword arguments (line 1956)
        kwargs_68253 = {}
        # Getting the type of 'self' (line 1956)
        self_68250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 21), 'self', False)
        # Obtaining the member 'c' of a type (line 1956)
        c_68251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 21), self_68250, 'c')
        # Obtaining the member 'copy' of a type (line 1956)
        copy_68252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 21), c_68251, 'copy')
        # Calling copy(args, kwargs) (line 1956)
        copy_call_result_68254 = invoke(stypy.reporting.localization.Localization(__file__, 1956, 21), copy_68252, *[], **kwargs_68253)
        
        # Getting the type of 'self' (line 1956)
        self_68255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 12), 'self')
        # Setting the type of the member 'c' of a type (line 1956)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 12), self_68255, 'c', copy_call_result_68254)
        # SSA join for if statement (line 1955)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1957)
        # Getting the type of 'tuple' (line 1957)
        tuple_68256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 34), 'tuple')
        # Getting the type of 'self' (line 1957)
        self_68257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 26), 'self')
        # Obtaining the member 'x' of a type (line 1957)
        x_68258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1957, 26), self_68257, 'x')
        
        (may_be_68259, more_types_in_union_68260) = may_not_be_subtype(tuple_68256, x_68258)

        if may_be_68259:

            if more_types_in_union_68260:
                # Runtime conditional SSA (line 1957)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'self' (line 1957)
            self_68261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 8), 'self')
            # Obtaining the member 'x' of a type (line 1957)
            x_68262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1957, 8), self_68261, 'x')
            # Setting the type of the member 'x' of a type (line 1957)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1957, 8), self_68261, 'x', remove_subtype_from_union(x_68258, tuple))
            
            # Assigning a Call to a Attribute (line 1958):
            
            # Assigning a Call to a Attribute (line 1958):
            
            # Call to tuple(...): (line 1958)
            # Processing the call arguments (line 1958)
            # Getting the type of 'self' (line 1958)
            self_68264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 27), 'self', False)
            # Obtaining the member 'x' of a type (line 1958)
            x_68265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 27), self_68264, 'x')
            # Processing the call keyword arguments (line 1958)
            kwargs_68266 = {}
            # Getting the type of 'tuple' (line 1958)
            tuple_68263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 21), 'tuple', False)
            # Calling tuple(args, kwargs) (line 1958)
            tuple_call_result_68267 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 21), tuple_68263, *[x_68265], **kwargs_68266)
            
            # Getting the type of 'self' (line 1958)
            self_68268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 12), 'self')
            # Setting the type of the member 'x' of a type (line 1958)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 12), self_68268, 'x', tuple_call_result_68267)

            if more_types_in_union_68260:
                # SSA join for if statement (line 1957)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '_ensure_c_contiguous(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_ensure_c_contiguous' in the type store
        # Getting the type of 'stypy_return_type' (line 1954)
        stypy_return_type_68269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1954, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_68269)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_ensure_c_contiguous'
        return stypy_return_type_68269


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1960)
        None_68270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 29), 'None')
        # Getting the type of 'None' (line 1960)
        None_68271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 47), 'None')
        defaults = [None_68270, None_68271]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 1960, 4, False)
        # Assigning a type to the variable 'self' (line 1961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1961, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NdPPoly.__call__.__dict__.__setitem__('stypy_localization', localization)
        NdPPoly.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NdPPoly.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        NdPPoly.__call__.__dict__.__setitem__('stypy_function_name', 'NdPPoly.__call__')
        NdPPoly.__call__.__dict__.__setitem__('stypy_param_names_list', ['x', 'nu', 'extrapolate'])
        NdPPoly.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        NdPPoly.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NdPPoly.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        NdPPoly.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        NdPPoly.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NdPPoly.__call__.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NdPPoly.__call__', ['x', 'nu', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x', 'nu', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_68272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1988, (-1)), 'str', '\n        Evaluate the piecewise polynomial or its derivative\n\n        Parameters\n        ----------\n        x : array-like\n            Points to evaluate the interpolant at.\n        nu : tuple, optional\n            Orders of derivatives to evaluate. Each must be non-negative.\n        extrapolate : bool, optional\n            Whether to extrapolate to out-of-bounds points based on first\n            and last intervals, or to return NaNs.\n\n        Returns\n        -------\n        y : array-like\n            Interpolated values. Shape is determined by replacing\n            the interpolation axis in the original array with the shape of x.\n\n        Notes\n        -----\n        Derivatives are evaluated piecewise for each polynomial\n        segment, even if the polynomial is not differentiable at the\n        breakpoints. The polynomial intervals are considered half-open,\n        ``[a, b)``, except for the last interval which is closed\n        ``[a, b]``.\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1989)
        # Getting the type of 'extrapolate' (line 1989)
        extrapolate_68273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 11), 'extrapolate')
        # Getting the type of 'None' (line 1989)
        None_68274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 26), 'None')
        
        (may_be_68275, more_types_in_union_68276) = may_be_none(extrapolate_68273, None_68274)

        if may_be_68275:

            if more_types_in_union_68276:
                # Runtime conditional SSA (line 1989)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1990):
            
            # Assigning a Attribute to a Name (line 1990):
            # Getting the type of 'self' (line 1990)
            self_68277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 26), 'self')
            # Obtaining the member 'extrapolate' of a type (line 1990)
            extrapolate_68278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1990, 26), self_68277, 'extrapolate')
            # Assigning a type to the variable 'extrapolate' (line 1990)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1990, 12), 'extrapolate', extrapolate_68278)

            if more_types_in_union_68276:
                # Runtime conditional SSA for else branch (line 1989)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_68275) or more_types_in_union_68276):
            
            # Assigning a Call to a Name (line 1992):
            
            # Assigning a Call to a Name (line 1992):
            
            # Call to bool(...): (line 1992)
            # Processing the call arguments (line 1992)
            # Getting the type of 'extrapolate' (line 1992)
            extrapolate_68280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 31), 'extrapolate', False)
            # Processing the call keyword arguments (line 1992)
            kwargs_68281 = {}
            # Getting the type of 'bool' (line 1992)
            bool_68279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 26), 'bool', False)
            # Calling bool(args, kwargs) (line 1992)
            bool_call_result_68282 = invoke(stypy.reporting.localization.Localization(__file__, 1992, 26), bool_68279, *[extrapolate_68280], **kwargs_68281)
            
            # Assigning a type to the variable 'extrapolate' (line 1992)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1992, 12), 'extrapolate', bool_call_result_68282)

            if (may_be_68275 and more_types_in_union_68276):
                # SSA join for if statement (line 1989)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1994):
        
        # Assigning a Call to a Name (line 1994):
        
        # Call to len(...): (line 1994)
        # Processing the call arguments (line 1994)
        # Getting the type of 'self' (line 1994)
        self_68284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 19), 'self', False)
        # Obtaining the member 'x' of a type (line 1994)
        x_68285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 19), self_68284, 'x')
        # Processing the call keyword arguments (line 1994)
        kwargs_68286 = {}
        # Getting the type of 'len' (line 1994)
        len_68283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 15), 'len', False)
        # Calling len(args, kwargs) (line 1994)
        len_call_result_68287 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 15), len_68283, *[x_68285], **kwargs_68286)
        
        # Assigning a type to the variable 'ndim' (line 1994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 8), 'ndim', len_call_result_68287)
        
        # Assigning a Call to a Name (line 1996):
        
        # Assigning a Call to a Name (line 1996):
        
        # Call to _ndim_coords_from_arrays(...): (line 1996)
        # Processing the call arguments (line 1996)
        # Getting the type of 'x' (line 1996)
        x_68289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 37), 'x', False)
        # Processing the call keyword arguments (line 1996)
        kwargs_68290 = {}
        # Getting the type of '_ndim_coords_from_arrays' (line 1996)
        _ndim_coords_from_arrays_68288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 12), '_ndim_coords_from_arrays', False)
        # Calling _ndim_coords_from_arrays(args, kwargs) (line 1996)
        _ndim_coords_from_arrays_call_result_68291 = invoke(stypy.reporting.localization.Localization(__file__, 1996, 12), _ndim_coords_from_arrays_68288, *[x_68289], **kwargs_68290)
        
        # Assigning a type to the variable 'x' (line 1996)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1996, 8), 'x', _ndim_coords_from_arrays_call_result_68291)
        
        # Assigning a Attribute to a Name (line 1997):
        
        # Assigning a Attribute to a Name (line 1997):
        # Getting the type of 'x' (line 1997)
        x_68292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 18), 'x')
        # Obtaining the member 'shape' of a type (line 1997)
        shape_68293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1997, 18), x_68292, 'shape')
        # Assigning a type to the variable 'x_shape' (line 1997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1997, 8), 'x_shape', shape_68293)
        
        # Assigning a Call to a Name (line 1998):
        
        # Assigning a Call to a Name (line 1998):
        
        # Call to ascontiguousarray(...): (line 1998)
        # Processing the call arguments (line 1998)
        
        # Call to reshape(...): (line 1998)
        # Processing the call arguments (line 1998)
        int_68298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1998, 43), 'int')
        
        # Obtaining the type of the subscript
        int_68299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1998, 55), 'int')
        # Getting the type of 'x' (line 1998)
        x_68300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 47), 'x', False)
        # Obtaining the member 'shape' of a type (line 1998)
        shape_68301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1998, 47), x_68300, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1998)
        getitem___68302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1998, 47), shape_68301, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1998)
        subscript_call_result_68303 = invoke(stypy.reporting.localization.Localization(__file__, 1998, 47), getitem___68302, int_68299)
        
        # Processing the call keyword arguments (line 1998)
        kwargs_68304 = {}
        # Getting the type of 'x' (line 1998)
        x_68296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 33), 'x', False)
        # Obtaining the member 'reshape' of a type (line 1998)
        reshape_68297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1998, 33), x_68296, 'reshape')
        # Calling reshape(args, kwargs) (line 1998)
        reshape_call_result_68305 = invoke(stypy.reporting.localization.Localization(__file__, 1998, 33), reshape_68297, *[int_68298, subscript_call_result_68303], **kwargs_68304)
        
        # Processing the call keyword arguments (line 1998)
        # Getting the type of 'np' (line 1998)
        np_68306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 67), 'np', False)
        # Obtaining the member 'float_' of a type (line 1998)
        float__68307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1998, 67), np_68306, 'float_')
        keyword_68308 = float__68307
        kwargs_68309 = {'dtype': keyword_68308}
        # Getting the type of 'np' (line 1998)
        np_68294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 12), 'np', False)
        # Obtaining the member 'ascontiguousarray' of a type (line 1998)
        ascontiguousarray_68295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1998, 12), np_68294, 'ascontiguousarray')
        # Calling ascontiguousarray(args, kwargs) (line 1998)
        ascontiguousarray_call_result_68310 = invoke(stypy.reporting.localization.Localization(__file__, 1998, 12), ascontiguousarray_68295, *[reshape_call_result_68305], **kwargs_68309)
        
        # Assigning a type to the variable 'x' (line 1998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1998, 8), 'x', ascontiguousarray_call_result_68310)
        
        # Type idiom detected: calculating its left and rigth part (line 2000)
        # Getting the type of 'nu' (line 2000)
        nu_68311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 11), 'nu')
        # Getting the type of 'None' (line 2000)
        None_68312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 17), 'None')
        
        (may_be_68313, more_types_in_union_68314) = may_be_none(nu_68311, None_68312)

        if may_be_68313:

            if more_types_in_union_68314:
                # Runtime conditional SSA (line 2000)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2001):
            
            # Assigning a Call to a Name (line 2001):
            
            # Call to zeros(...): (line 2001)
            # Processing the call arguments (line 2001)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2001)
            tuple_68317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2001, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2001)
            # Adding element type (line 2001)
            # Getting the type of 'ndim' (line 2001)
            ndim_68318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 27), 'ndim', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2001, 27), tuple_68317, ndim_68318)
            
            # Processing the call keyword arguments (line 2001)
            # Getting the type of 'np' (line 2001)
            np_68319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 41), 'np', False)
            # Obtaining the member 'intc' of a type (line 2001)
            intc_68320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2001, 41), np_68319, 'intc')
            keyword_68321 = intc_68320
            kwargs_68322 = {'dtype': keyword_68321}
            # Getting the type of 'np' (line 2001)
            np_68315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 17), 'np', False)
            # Obtaining the member 'zeros' of a type (line 2001)
            zeros_68316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2001, 17), np_68315, 'zeros')
            # Calling zeros(args, kwargs) (line 2001)
            zeros_call_result_68323 = invoke(stypy.reporting.localization.Localization(__file__, 2001, 17), zeros_68316, *[tuple_68317], **kwargs_68322)
            
            # Assigning a type to the variable 'nu' (line 2001)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2001, 12), 'nu', zeros_call_result_68323)

            if more_types_in_union_68314:
                # Runtime conditional SSA for else branch (line 2000)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_68313) or more_types_in_union_68314):
            
            # Assigning a Call to a Name (line 2003):
            
            # Assigning a Call to a Name (line 2003):
            
            # Call to asarray(...): (line 2003)
            # Processing the call arguments (line 2003)
            # Getting the type of 'nu' (line 2003)
            nu_68326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 28), 'nu', False)
            # Processing the call keyword arguments (line 2003)
            # Getting the type of 'np' (line 2003)
            np_68327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 38), 'np', False)
            # Obtaining the member 'intc' of a type (line 2003)
            intc_68328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2003, 38), np_68327, 'intc')
            keyword_68329 = intc_68328
            kwargs_68330 = {'dtype': keyword_68329}
            # Getting the type of 'np' (line 2003)
            np_68324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 17), 'np', False)
            # Obtaining the member 'asarray' of a type (line 2003)
            asarray_68325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2003, 17), np_68324, 'asarray')
            # Calling asarray(args, kwargs) (line 2003)
            asarray_call_result_68331 = invoke(stypy.reporting.localization.Localization(__file__, 2003, 17), asarray_68325, *[nu_68326], **kwargs_68330)
            
            # Assigning a type to the variable 'nu' (line 2003)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2003, 12), 'nu', asarray_call_result_68331)
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'nu' (line 2004)
            nu_68332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 15), 'nu')
            # Obtaining the member 'ndim' of a type (line 2004)
            ndim_68333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 15), nu_68332, 'ndim')
            int_68334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 26), 'int')
            # Applying the binary operator '!=' (line 2004)
            result_ne_68335 = python_operator(stypy.reporting.localization.Localization(__file__, 2004, 15), '!=', ndim_68333, int_68334)
            
            
            
            # Obtaining the type of the subscript
            int_68336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 40), 'int')
            # Getting the type of 'nu' (line 2004)
            nu_68337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 31), 'nu')
            # Obtaining the member 'shape' of a type (line 2004)
            shape_68338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 31), nu_68337, 'shape')
            # Obtaining the member '__getitem__' of a type (line 2004)
            getitem___68339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 31), shape_68338, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2004)
            subscript_call_result_68340 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 31), getitem___68339, int_68336)
            
            # Getting the type of 'ndim' (line 2004)
            ndim_68341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 46), 'ndim')
            # Applying the binary operator '!=' (line 2004)
            result_ne_68342 = python_operator(stypy.reporting.localization.Localization(__file__, 2004, 31), '!=', subscript_call_result_68340, ndim_68341)
            
            # Applying the binary operator 'or' (line 2004)
            result_or_keyword_68343 = python_operator(stypy.reporting.localization.Localization(__file__, 2004, 15), 'or', result_ne_68335, result_ne_68342)
            
            # Testing the type of an if condition (line 2004)
            if_condition_68344 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2004, 12), result_or_keyword_68343)
            # Assigning a type to the variable 'if_condition_68344' (line 2004)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2004, 12), 'if_condition_68344', if_condition_68344)
            # SSA begins for if statement (line 2004)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 2005)
            # Processing the call arguments (line 2005)
            str_68346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2005, 33), 'str', 'invalid number of derivative orders nu')
            # Processing the call keyword arguments (line 2005)
            kwargs_68347 = {}
            # Getting the type of 'ValueError' (line 2005)
            ValueError_68345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 2005)
            ValueError_call_result_68348 = invoke(stypy.reporting.localization.Localization(__file__, 2005, 22), ValueError_68345, *[str_68346], **kwargs_68347)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2005, 16), ValueError_call_result_68348, 'raise parameter', BaseException)
            # SSA join for if statement (line 2004)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_68313 and more_types_in_union_68314):
                # SSA join for if statement (line 2000)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2007):
        
        # Assigning a Call to a Name (line 2007):
        
        # Call to prod(...): (line 2007)
        # Processing the call arguments (line 2007)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ndim' (line 2007)
        ndim_68350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 34), 'ndim', False)
        slice_68351 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2007, 20), None, ndim_68350, None)
        # Getting the type of 'self' (line 2007)
        self_68352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 20), 'self', False)
        # Obtaining the member 'c' of a type (line 2007)
        c_68353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2007, 20), self_68352, 'c')
        # Obtaining the member 'shape' of a type (line 2007)
        shape_68354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2007, 20), c_68353, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2007)
        getitem___68355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2007, 20), shape_68354, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2007)
        subscript_call_result_68356 = invoke(stypy.reporting.localization.Localization(__file__, 2007, 20), getitem___68355, slice_68351)
        
        # Processing the call keyword arguments (line 2007)
        kwargs_68357 = {}
        # Getting the type of 'prod' (line 2007)
        prod_68349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 15), 'prod', False)
        # Calling prod(args, kwargs) (line 2007)
        prod_call_result_68358 = invoke(stypy.reporting.localization.Localization(__file__, 2007, 15), prod_68349, *[subscript_call_result_68356], **kwargs_68357)
        
        # Assigning a type to the variable 'dim1' (line 2007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2007, 8), 'dim1', prod_call_result_68358)
        
        # Assigning a Call to a Name (line 2008):
        
        # Assigning a Call to a Name (line 2008):
        
        # Call to prod(...): (line 2008)
        # Processing the call arguments (line 2008)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ndim' (line 2008)
        ndim_68360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 33), 'ndim', False)
        int_68361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2008, 38), 'int')
        # Getting the type of 'ndim' (line 2008)
        ndim_68362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 40), 'ndim', False)
        # Applying the binary operator '*' (line 2008)
        result_mul_68363 = python_operator(stypy.reporting.localization.Localization(__file__, 2008, 38), '*', int_68361, ndim_68362)
        
        slice_68364 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2008, 20), ndim_68360, result_mul_68363, None)
        # Getting the type of 'self' (line 2008)
        self_68365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 20), 'self', False)
        # Obtaining the member 'c' of a type (line 2008)
        c_68366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2008, 20), self_68365, 'c')
        # Obtaining the member 'shape' of a type (line 2008)
        shape_68367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2008, 20), c_68366, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2008)
        getitem___68368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2008, 20), shape_68367, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2008)
        subscript_call_result_68369 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 20), getitem___68368, slice_68364)
        
        # Processing the call keyword arguments (line 2008)
        kwargs_68370 = {}
        # Getting the type of 'prod' (line 2008)
        prod_68359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 15), 'prod', False)
        # Calling prod(args, kwargs) (line 2008)
        prod_call_result_68371 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 15), prod_68359, *[subscript_call_result_68369], **kwargs_68370)
        
        # Assigning a type to the variable 'dim2' (line 2008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2008, 8), 'dim2', prod_call_result_68371)
        
        # Assigning a Call to a Name (line 2009):
        
        # Assigning a Call to a Name (line 2009):
        
        # Call to prod(...): (line 2009)
        # Processing the call arguments (line 2009)
        
        # Obtaining the type of the subscript
        int_68373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2009, 33), 'int')
        # Getting the type of 'ndim' (line 2009)
        ndim_68374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 35), 'ndim', False)
        # Applying the binary operator '*' (line 2009)
        result_mul_68375 = python_operator(stypy.reporting.localization.Localization(__file__, 2009, 33), '*', int_68373, ndim_68374)
        
        slice_68376 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2009, 20), result_mul_68375, None, None)
        # Getting the type of 'self' (line 2009)
        self_68377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 20), 'self', False)
        # Obtaining the member 'c' of a type (line 2009)
        c_68378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 20), self_68377, 'c')
        # Obtaining the member 'shape' of a type (line 2009)
        shape_68379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 20), c_68378, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2009)
        getitem___68380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 20), shape_68379, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2009)
        subscript_call_result_68381 = invoke(stypy.reporting.localization.Localization(__file__, 2009, 20), getitem___68380, slice_68376)
        
        # Processing the call keyword arguments (line 2009)
        kwargs_68382 = {}
        # Getting the type of 'prod' (line 2009)
        prod_68372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 15), 'prod', False)
        # Calling prod(args, kwargs) (line 2009)
        prod_call_result_68383 = invoke(stypy.reporting.localization.Localization(__file__, 2009, 15), prod_68372, *[subscript_call_result_68381], **kwargs_68382)
        
        # Assigning a type to the variable 'dim3' (line 2009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2009, 8), 'dim3', prod_call_result_68383)
        
        # Assigning a Call to a Name (line 2010):
        
        # Assigning a Call to a Name (line 2010):
        
        # Call to array(...): (line 2010)
        # Processing the call arguments (line 2010)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ndim' (line 2010)
        ndim_68386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 36), 'ndim', False)
        slice_68387 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2010, 22), None, ndim_68386, None)
        # Getting the type of 'self' (line 2010)
        self_68388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 22), 'self', False)
        # Obtaining the member 'c' of a type (line 2010)
        c_68389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 22), self_68388, 'c')
        # Obtaining the member 'shape' of a type (line 2010)
        shape_68390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 22), c_68389, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2010)
        getitem___68391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 22), shape_68390, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2010)
        subscript_call_result_68392 = invoke(stypy.reporting.localization.Localization(__file__, 2010, 22), getitem___68391, slice_68387)
        
        # Processing the call keyword arguments (line 2010)
        # Getting the type of 'np' (line 2010)
        np_68393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 49), 'np', False)
        # Obtaining the member 'intc' of a type (line 2010)
        intc_68394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 49), np_68393, 'intc')
        keyword_68395 = intc_68394
        kwargs_68396 = {'dtype': keyword_68395}
        # Getting the type of 'np' (line 2010)
        np_68384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 13), 'np', False)
        # Obtaining the member 'array' of a type (line 2010)
        array_68385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 13), np_68384, 'array')
        # Calling array(args, kwargs) (line 2010)
        array_call_result_68397 = invoke(stypy.reporting.localization.Localization(__file__, 2010, 13), array_68385, *[subscript_call_result_68392], **kwargs_68396)
        
        # Assigning a type to the variable 'ks' (line 2010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2010, 8), 'ks', array_call_result_68397)
        
        # Assigning a Call to a Name (line 2012):
        
        # Assigning a Call to a Name (line 2012):
        
        # Call to empty(...): (line 2012)
        # Processing the call arguments (line 2012)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2012)
        tuple_68400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2012, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2012)
        # Adding element type (line 2012)
        
        # Obtaining the type of the subscript
        int_68401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2012, 32), 'int')
        # Getting the type of 'x' (line 2012)
        x_68402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 24), 'x', False)
        # Obtaining the member 'shape' of a type (line 2012)
        shape_68403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2012, 24), x_68402, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2012)
        getitem___68404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2012, 24), shape_68403, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2012)
        subscript_call_result_68405 = invoke(stypy.reporting.localization.Localization(__file__, 2012, 24), getitem___68404, int_68401)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2012, 24), tuple_68400, subscript_call_result_68405)
        # Adding element type (line 2012)
        # Getting the type of 'dim3' (line 2012)
        dim3_68406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 36), 'dim3', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2012, 24), tuple_68400, dim3_68406)
        
        # Processing the call keyword arguments (line 2012)
        # Getting the type of 'self' (line 2012)
        self_68407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 49), 'self', False)
        # Obtaining the member 'c' of a type (line 2012)
        c_68408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2012, 49), self_68407, 'c')
        # Obtaining the member 'dtype' of a type (line 2012)
        dtype_68409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2012, 49), c_68408, 'dtype')
        keyword_68410 = dtype_68409
        kwargs_68411 = {'dtype': keyword_68410}
        # Getting the type of 'np' (line 2012)
        np_68398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 14), 'np', False)
        # Obtaining the member 'empty' of a type (line 2012)
        empty_68399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2012, 14), np_68398, 'empty')
        # Calling empty(args, kwargs) (line 2012)
        empty_call_result_68412 = invoke(stypy.reporting.localization.Localization(__file__, 2012, 14), empty_68399, *[tuple_68400], **kwargs_68411)
        
        # Assigning a type to the variable 'out' (line 2012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2012, 8), 'out', empty_call_result_68412)
        
        # Call to _ensure_c_contiguous(...): (line 2013)
        # Processing the call keyword arguments (line 2013)
        kwargs_68415 = {}
        # Getting the type of 'self' (line 2013)
        self_68413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2013, 8), 'self', False)
        # Obtaining the member '_ensure_c_contiguous' of a type (line 2013)
        _ensure_c_contiguous_68414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2013, 8), self_68413, '_ensure_c_contiguous')
        # Calling _ensure_c_contiguous(args, kwargs) (line 2013)
        _ensure_c_contiguous_call_result_68416 = invoke(stypy.reporting.localization.Localization(__file__, 2013, 8), _ensure_c_contiguous_68414, *[], **kwargs_68415)
        
        
        # Call to evaluate_nd(...): (line 2015)
        # Processing the call arguments (line 2015)
        
        # Call to reshape(...): (line 2015)
        # Processing the call arguments (line 2015)
        # Getting the type of 'dim1' (line 2015)
        dim1_68422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 42), 'dim1', False)
        # Getting the type of 'dim2' (line 2015)
        dim2_68423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 48), 'dim2', False)
        # Getting the type of 'dim3' (line 2015)
        dim3_68424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 54), 'dim3', False)
        # Processing the call keyword arguments (line 2015)
        kwargs_68425 = {}
        # Getting the type of 'self' (line 2015)
        self_68419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 27), 'self', False)
        # Obtaining the member 'c' of a type (line 2015)
        c_68420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2015, 27), self_68419, 'c')
        # Obtaining the member 'reshape' of a type (line 2015)
        reshape_68421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2015, 27), c_68420, 'reshape')
        # Calling reshape(args, kwargs) (line 2015)
        reshape_call_result_68426 = invoke(stypy.reporting.localization.Localization(__file__, 2015, 27), reshape_68421, *[dim1_68422, dim2_68423, dim3_68424], **kwargs_68425)
        
        # Getting the type of 'self' (line 2016)
        self_68427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 27), 'self', False)
        # Obtaining the member 'x' of a type (line 2016)
        x_68428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2016, 27), self_68427, 'x')
        # Getting the type of 'ks' (line 2017)
        ks_68429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 27), 'ks', False)
        # Getting the type of 'x' (line 2018)
        x_68430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 27), 'x', False)
        # Getting the type of 'nu' (line 2019)
        nu_68431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2019, 27), 'nu', False)
        
        # Call to bool(...): (line 2020)
        # Processing the call arguments (line 2020)
        # Getting the type of 'extrapolate' (line 2020)
        extrapolate_68433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 32), 'extrapolate', False)
        # Processing the call keyword arguments (line 2020)
        kwargs_68434 = {}
        # Getting the type of 'bool' (line 2020)
        bool_68432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 27), 'bool', False)
        # Calling bool(args, kwargs) (line 2020)
        bool_call_result_68435 = invoke(stypy.reporting.localization.Localization(__file__, 2020, 27), bool_68432, *[extrapolate_68433], **kwargs_68434)
        
        # Getting the type of 'out' (line 2021)
        out_68436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 27), 'out', False)
        # Processing the call keyword arguments (line 2015)
        kwargs_68437 = {}
        # Getting the type of '_ppoly' (line 2015)
        _ppoly_68417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 8), '_ppoly', False)
        # Obtaining the member 'evaluate_nd' of a type (line 2015)
        evaluate_nd_68418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2015, 8), _ppoly_68417, 'evaluate_nd')
        # Calling evaluate_nd(args, kwargs) (line 2015)
        evaluate_nd_call_result_68438 = invoke(stypy.reporting.localization.Localization(__file__, 2015, 8), evaluate_nd_68418, *[reshape_call_result_68426, x_68428, ks_68429, x_68430, nu_68431, bool_call_result_68435, out_68436], **kwargs_68437)
        
        
        # Call to reshape(...): (line 2023)
        # Processing the call arguments (line 2023)
        
        # Obtaining the type of the subscript
        int_68441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 36), 'int')
        slice_68442 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2023, 27), None, int_68441, None)
        # Getting the type of 'x_shape' (line 2023)
        x_shape_68443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 27), 'x_shape', False)
        # Obtaining the member '__getitem__' of a type (line 2023)
        getitem___68444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2023, 27), x_shape_68443, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2023)
        subscript_call_result_68445 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 27), getitem___68444, slice_68442)
        
        
        # Obtaining the type of the subscript
        int_68446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 55), 'int')
        # Getting the type of 'ndim' (line 2023)
        ndim_68447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 57), 'ndim', False)
        # Applying the binary operator '*' (line 2023)
        result_mul_68448 = python_operator(stypy.reporting.localization.Localization(__file__, 2023, 55), '*', int_68446, ndim_68447)
        
        slice_68449 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2023, 42), result_mul_68448, None, None)
        # Getting the type of 'self' (line 2023)
        self_68450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 42), 'self', False)
        # Obtaining the member 'c' of a type (line 2023)
        c_68451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2023, 42), self_68450, 'c')
        # Obtaining the member 'shape' of a type (line 2023)
        shape_68452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2023, 42), c_68451, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2023)
        getitem___68453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2023, 42), shape_68452, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2023)
        subscript_call_result_68454 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 42), getitem___68453, slice_68449)
        
        # Applying the binary operator '+' (line 2023)
        result_add_68455 = python_operator(stypy.reporting.localization.Localization(__file__, 2023, 27), '+', subscript_call_result_68445, subscript_call_result_68454)
        
        # Processing the call keyword arguments (line 2023)
        kwargs_68456 = {}
        # Getting the type of 'out' (line 2023)
        out_68439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 15), 'out', False)
        # Obtaining the member 'reshape' of a type (line 2023)
        reshape_68440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2023, 15), out_68439, 'reshape')
        # Calling reshape(args, kwargs) (line 2023)
        reshape_call_result_68457 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 15), reshape_68440, *[result_add_68455], **kwargs_68456)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2023)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2023, 8), 'stypy_return_type', reshape_call_result_68457)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 1960)
        stypy_return_type_68458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_68458)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_68458


    @norecursion
    def _derivative_inplace(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_derivative_inplace'
        module_type_store = module_type_store.open_function_context('_derivative_inplace', 2025, 4, False)
        # Assigning a type to the variable 'self' (line 2026)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2026, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NdPPoly._derivative_inplace.__dict__.__setitem__('stypy_localization', localization)
        NdPPoly._derivative_inplace.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NdPPoly._derivative_inplace.__dict__.__setitem__('stypy_type_store', module_type_store)
        NdPPoly._derivative_inplace.__dict__.__setitem__('stypy_function_name', 'NdPPoly._derivative_inplace')
        NdPPoly._derivative_inplace.__dict__.__setitem__('stypy_param_names_list', ['nu', 'axis'])
        NdPPoly._derivative_inplace.__dict__.__setitem__('stypy_varargs_param_name', None)
        NdPPoly._derivative_inplace.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NdPPoly._derivative_inplace.__dict__.__setitem__('stypy_call_defaults', defaults)
        NdPPoly._derivative_inplace.__dict__.__setitem__('stypy_call_varargs', varargs)
        NdPPoly._derivative_inplace.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NdPPoly._derivative_inplace.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NdPPoly._derivative_inplace', ['nu', 'axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_derivative_inplace', localization, ['nu', 'axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_derivative_inplace(...)' code ##################

        str_68459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2029, (-1)), 'str', '\n        Compute 1D derivative along a selected dimension in-place\n        May result to non-contiguous c array.\n        ')
        
        
        # Getting the type of 'nu' (line 2030)
        nu_68460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 11), 'nu')
        int_68461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2030, 16), 'int')
        # Applying the binary operator '<' (line 2030)
        result_lt_68462 = python_operator(stypy.reporting.localization.Localization(__file__, 2030, 11), '<', nu_68460, int_68461)
        
        # Testing the type of an if condition (line 2030)
        if_condition_68463 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2030, 8), result_lt_68462)
        # Assigning a type to the variable 'if_condition_68463' (line 2030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2030, 8), 'if_condition_68463', if_condition_68463)
        # SSA begins for if statement (line 2030)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _antiderivative_inplace(...): (line 2031)
        # Processing the call arguments (line 2031)
        
        # Getting the type of 'nu' (line 2031)
        nu_68466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 49), 'nu', False)
        # Applying the 'usub' unary operator (line 2031)
        result___neg___68467 = python_operator(stypy.reporting.localization.Localization(__file__, 2031, 48), 'usub', nu_68466)
        
        # Getting the type of 'axis' (line 2031)
        axis_68468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 53), 'axis', False)
        # Processing the call keyword arguments (line 2031)
        kwargs_68469 = {}
        # Getting the type of 'self' (line 2031)
        self_68464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 19), 'self', False)
        # Obtaining the member '_antiderivative_inplace' of a type (line 2031)
        _antiderivative_inplace_68465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2031, 19), self_68464, '_antiderivative_inplace')
        # Calling _antiderivative_inplace(args, kwargs) (line 2031)
        _antiderivative_inplace_call_result_68470 = invoke(stypy.reporting.localization.Localization(__file__, 2031, 19), _antiderivative_inplace_68465, *[result___neg___68467, axis_68468], **kwargs_68469)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2031, 12), 'stypy_return_type', _antiderivative_inplace_call_result_68470)
        # SSA join for if statement (line 2030)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2033):
        
        # Assigning a Call to a Name (line 2033):
        
        # Call to len(...): (line 2033)
        # Processing the call arguments (line 2033)
        # Getting the type of 'self' (line 2033)
        self_68472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 19), 'self', False)
        # Obtaining the member 'x' of a type (line 2033)
        x_68473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2033, 19), self_68472, 'x')
        # Processing the call keyword arguments (line 2033)
        kwargs_68474 = {}
        # Getting the type of 'len' (line 2033)
        len_68471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 15), 'len', False)
        # Calling len(args, kwargs) (line 2033)
        len_call_result_68475 = invoke(stypy.reporting.localization.Localization(__file__, 2033, 15), len_68471, *[x_68473], **kwargs_68474)
        
        # Assigning a type to the variable 'ndim' (line 2033)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2033, 8), 'ndim', len_call_result_68475)
        
        # Assigning a BinOp to a Name (line 2034):
        
        # Assigning a BinOp to a Name (line 2034):
        # Getting the type of 'axis' (line 2034)
        axis_68476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 15), 'axis')
        # Getting the type of 'ndim' (line 2034)
        ndim_68477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 22), 'ndim')
        # Applying the binary operator '%' (line 2034)
        result_mod_68478 = python_operator(stypy.reporting.localization.Localization(__file__, 2034, 15), '%', axis_68476, ndim_68477)
        
        # Assigning a type to the variable 'axis' (line 2034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2034, 8), 'axis', result_mod_68478)
        
        
        # Getting the type of 'nu' (line 2037)
        nu_68479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 11), 'nu')
        int_68480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2037, 17), 'int')
        # Applying the binary operator '==' (line 2037)
        result_eq_68481 = python_operator(stypy.reporting.localization.Localization(__file__, 2037, 11), '==', nu_68479, int_68480)
        
        # Testing the type of an if condition (line 2037)
        if_condition_68482 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2037, 8), result_eq_68481)
        # Assigning a type to the variable 'if_condition_68482' (line 2037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 8), 'if_condition_68482', if_condition_68482)
        # SSA begins for if statement (line 2037)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2039, 12), 'stypy_return_type', types.NoneType)
        # SSA branch for the else part of an if statement (line 2037)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 2041):
        
        # Assigning a BinOp to a Name (line 2041):
        
        # Obtaining an instance of the builtin type 'list' (line 2041)
        list_68483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2041, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2041)
        # Adding element type (line 2041)
        
        # Call to slice(...): (line 2041)
        # Processing the call arguments (line 2041)
        # Getting the type of 'None' (line 2041)
        None_68485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 24), 'None', False)
        # Processing the call keyword arguments (line 2041)
        kwargs_68486 = {}
        # Getting the type of 'slice' (line 2041)
        slice_68484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 18), 'slice', False)
        # Calling slice(args, kwargs) (line 2041)
        slice_call_result_68487 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 18), slice_68484, *[None_68485], **kwargs_68486)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2041, 17), list_68483, slice_call_result_68487)
        
        # Getting the type of 'ndim' (line 2041)
        ndim_68488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 31), 'ndim')
        # Applying the binary operator '*' (line 2041)
        result_mul_68489 = python_operator(stypy.reporting.localization.Localization(__file__, 2041, 17), '*', list_68483, ndim_68488)
        
        # Assigning a type to the variable 'sl' (line 2041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 12), 'sl', result_mul_68489)
        
        # Assigning a Call to a Subscript (line 2042):
        
        # Assigning a Call to a Subscript (line 2042):
        
        # Call to slice(...): (line 2042)
        # Processing the call arguments (line 2042)
        # Getting the type of 'None' (line 2042)
        None_68491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 29), 'None', False)
        
        # Getting the type of 'nu' (line 2042)
        nu_68492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 36), 'nu', False)
        # Applying the 'usub' unary operator (line 2042)
        result___neg___68493 = python_operator(stypy.reporting.localization.Localization(__file__, 2042, 35), 'usub', nu_68492)
        
        # Getting the type of 'None' (line 2042)
        None_68494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 40), 'None', False)
        # Processing the call keyword arguments (line 2042)
        kwargs_68495 = {}
        # Getting the type of 'slice' (line 2042)
        slice_68490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 23), 'slice', False)
        # Calling slice(args, kwargs) (line 2042)
        slice_call_result_68496 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 23), slice_68490, *[None_68491, result___neg___68493, None_68494], **kwargs_68495)
        
        # Getting the type of 'sl' (line 2042)
        sl_68497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 12), 'sl')
        # Getting the type of 'axis' (line 2042)
        axis_68498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 15), 'axis')
        # Storing an element on a container (line 2042)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2042, 12), sl_68497, (axis_68498, slice_call_result_68496))
        
        # Assigning a Subscript to a Name (line 2043):
        
        # Assigning a Subscript to a Name (line 2043):
        
        # Obtaining the type of the subscript
        # Getting the type of 'sl' (line 2043)
        sl_68499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 24), 'sl')
        # Getting the type of 'self' (line 2043)
        self_68500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 17), 'self')
        # Obtaining the member 'c' of a type (line 2043)
        c_68501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2043, 17), self_68500, 'c')
        # Obtaining the member '__getitem__' of a type (line 2043)
        getitem___68502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2043, 17), c_68501, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2043)
        subscript_call_result_68503 = invoke(stypy.reporting.localization.Localization(__file__, 2043, 17), getitem___68502, sl_68499)
        
        # Assigning a type to the variable 'c2' (line 2043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2043, 12), 'c2', subscript_call_result_68503)
        # SSA join for if statement (line 2037)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 2045)
        axis_68504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 20), 'axis')
        # Getting the type of 'c2' (line 2045)
        c2_68505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 11), 'c2')
        # Obtaining the member 'shape' of a type (line 2045)
        shape_68506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2045, 11), c2_68505, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2045)
        getitem___68507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2045, 11), shape_68506, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2045)
        subscript_call_result_68508 = invoke(stypy.reporting.localization.Localization(__file__, 2045, 11), getitem___68507, axis_68504)
        
        int_68509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2045, 29), 'int')
        # Applying the binary operator '==' (line 2045)
        result_eq_68510 = python_operator(stypy.reporting.localization.Localization(__file__, 2045, 11), '==', subscript_call_result_68508, int_68509)
        
        # Testing the type of an if condition (line 2045)
        if_condition_68511 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2045, 8), result_eq_68510)
        # Assigning a type to the variable 'if_condition_68511' (line 2045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2045, 8), 'if_condition_68511', if_condition_68511)
        # SSA begins for if statement (line 2045)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2047):
        
        # Assigning a Call to a Name (line 2047):
        
        # Call to list(...): (line 2047)
        # Processing the call arguments (line 2047)
        # Getting the type of 'c2' (line 2047)
        c2_68513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 23), 'c2', False)
        # Obtaining the member 'shape' of a type (line 2047)
        shape_68514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2047, 23), c2_68513, 'shape')
        # Processing the call keyword arguments (line 2047)
        kwargs_68515 = {}
        # Getting the type of 'list' (line 2047)
        list_68512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 18), 'list', False)
        # Calling list(args, kwargs) (line 2047)
        list_call_result_68516 = invoke(stypy.reporting.localization.Localization(__file__, 2047, 18), list_68512, *[shape_68514], **kwargs_68515)
        
        # Assigning a type to the variable 'shp' (line 2047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2047, 12), 'shp', list_call_result_68516)
        
        # Assigning a Num to a Subscript (line 2048):
        
        # Assigning a Num to a Subscript (line 2048):
        int_68517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 24), 'int')
        # Getting the type of 'shp' (line 2048)
        shp_68518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 12), 'shp')
        # Getting the type of 'axis' (line 2048)
        axis_68519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 16), 'axis')
        # Storing an element on a container (line 2048)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2048, 12), shp_68518, (axis_68519, int_68517))
        
        # Assigning a Call to a Name (line 2049):
        
        # Assigning a Call to a Name (line 2049):
        
        # Call to zeros(...): (line 2049)
        # Processing the call arguments (line 2049)
        # Getting the type of 'shp' (line 2049)
        shp_68522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 26), 'shp', False)
        # Processing the call keyword arguments (line 2049)
        # Getting the type of 'c2' (line 2049)
        c2_68523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 37), 'c2', False)
        # Obtaining the member 'dtype' of a type (line 2049)
        dtype_68524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2049, 37), c2_68523, 'dtype')
        keyword_68525 = dtype_68524
        kwargs_68526 = {'dtype': keyword_68525}
        # Getting the type of 'np' (line 2049)
        np_68520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 17), 'np', False)
        # Obtaining the member 'zeros' of a type (line 2049)
        zeros_68521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2049, 17), np_68520, 'zeros')
        # Calling zeros(args, kwargs) (line 2049)
        zeros_call_result_68527 = invoke(stypy.reporting.localization.Localization(__file__, 2049, 17), zeros_68521, *[shp_68522], **kwargs_68526)
        
        # Assigning a type to the variable 'c2' (line 2049)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2049, 12), 'c2', zeros_call_result_68527)
        # SSA join for if statement (line 2045)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2052):
        
        # Assigning a Call to a Name (line 2052):
        
        # Call to poch(...): (line 2052)
        # Processing the call arguments (line 2052)
        
        # Call to arange(...): (line 2052)
        # Processing the call arguments (line 2052)
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 2052)
        axis_68532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 46), 'axis', False)
        # Getting the type of 'c2' (line 2052)
        c2_68533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 37), 'c2', False)
        # Obtaining the member 'shape' of a type (line 2052)
        shape_68534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 37), c2_68533, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2052)
        getitem___68535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 37), shape_68534, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2052)
        subscript_call_result_68536 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 37), getitem___68535, axis_68532)
        
        int_68537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2052, 53), 'int')
        int_68538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2052, 56), 'int')
        # Processing the call keyword arguments (line 2052)
        kwargs_68539 = {}
        # Getting the type of 'np' (line 2052)
        np_68530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 27), 'np', False)
        # Obtaining the member 'arange' of a type (line 2052)
        arange_68531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 27), np_68530, 'arange')
        # Calling arange(args, kwargs) (line 2052)
        arange_call_result_68540 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 27), arange_68531, *[subscript_call_result_68536, int_68537, int_68538], **kwargs_68539)
        
        # Getting the type of 'nu' (line 2052)
        nu_68541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 61), 'nu', False)
        # Processing the call keyword arguments (line 2052)
        kwargs_68542 = {}
        # Getting the type of 'spec' (line 2052)
        spec_68528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 17), 'spec', False)
        # Obtaining the member 'poch' of a type (line 2052)
        poch_68529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 17), spec_68528, 'poch')
        # Calling poch(args, kwargs) (line 2052)
        poch_call_result_68543 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 17), poch_68529, *[arange_call_result_68540, nu_68541], **kwargs_68542)
        
        # Assigning a type to the variable 'factor' (line 2052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2052, 8), 'factor', poch_call_result_68543)
        
        # Assigning a BinOp to a Name (line 2053):
        
        # Assigning a BinOp to a Name (line 2053):
        
        # Obtaining an instance of the builtin type 'list' (line 2053)
        list_68544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2053, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2053)
        # Adding element type (line 2053)
        # Getting the type of 'None' (line 2053)
        None_68545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 14), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2053, 13), list_68544, None_68545)
        
        # Getting the type of 'c2' (line 2053)
        c2_68546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 20), 'c2')
        # Obtaining the member 'ndim' of a type (line 2053)
        ndim_68547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2053, 20), c2_68546, 'ndim')
        # Applying the binary operator '*' (line 2053)
        result_mul_68548 = python_operator(stypy.reporting.localization.Localization(__file__, 2053, 13), '*', list_68544, ndim_68547)
        
        # Assigning a type to the variable 'sl' (line 2053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2053, 8), 'sl', result_mul_68548)
        
        # Assigning a Call to a Subscript (line 2054):
        
        # Assigning a Call to a Subscript (line 2054):
        
        # Call to slice(...): (line 2054)
        # Processing the call arguments (line 2054)
        # Getting the type of 'None' (line 2054)
        None_68550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 25), 'None', False)
        # Processing the call keyword arguments (line 2054)
        kwargs_68551 = {}
        # Getting the type of 'slice' (line 2054)
        slice_68549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 19), 'slice', False)
        # Calling slice(args, kwargs) (line 2054)
        slice_call_result_68552 = invoke(stypy.reporting.localization.Localization(__file__, 2054, 19), slice_68549, *[None_68550], **kwargs_68551)
        
        # Getting the type of 'sl' (line 2054)
        sl_68553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 8), 'sl')
        # Getting the type of 'axis' (line 2054)
        axis_68554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 11), 'axis')
        # Storing an element on a container (line 2054)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2054, 8), sl_68553, (axis_68554, slice_call_result_68552))
        
        # Getting the type of 'c2' (line 2055)
        c2_68555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 8), 'c2')
        
        # Obtaining the type of the subscript
        # Getting the type of 'sl' (line 2055)
        sl_68556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 21), 'sl')
        # Getting the type of 'factor' (line 2055)
        factor_68557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 14), 'factor')
        # Obtaining the member '__getitem__' of a type (line 2055)
        getitem___68558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2055, 14), factor_68557, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2055)
        subscript_call_result_68559 = invoke(stypy.reporting.localization.Localization(__file__, 2055, 14), getitem___68558, sl_68556)
        
        # Applying the binary operator '*=' (line 2055)
        result_imul_68560 = python_operator(stypy.reporting.localization.Localization(__file__, 2055, 8), '*=', c2_68555, subscript_call_result_68559)
        # Assigning a type to the variable 'c2' (line 2055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 8), 'c2', result_imul_68560)
        
        
        # Assigning a Name to a Attribute (line 2057):
        
        # Assigning a Name to a Attribute (line 2057):
        # Getting the type of 'c2' (line 2057)
        c2_68561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 17), 'c2')
        # Getting the type of 'self' (line 2057)
        self_68562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 8), 'self')
        # Setting the type of the member 'c' of a type (line 2057)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2057, 8), self_68562, 'c', c2_68561)
        
        # ################# End of '_derivative_inplace(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_derivative_inplace' in the type store
        # Getting the type of 'stypy_return_type' (line 2025)
        stypy_return_type_68563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_68563)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_derivative_inplace'
        return stypy_return_type_68563


    @norecursion
    def _antiderivative_inplace(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_antiderivative_inplace'
        module_type_store = module_type_store.open_function_context('_antiderivative_inplace', 2059, 4, False)
        # Assigning a type to the variable 'self' (line 2060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2060, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NdPPoly._antiderivative_inplace.__dict__.__setitem__('stypy_localization', localization)
        NdPPoly._antiderivative_inplace.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NdPPoly._antiderivative_inplace.__dict__.__setitem__('stypy_type_store', module_type_store)
        NdPPoly._antiderivative_inplace.__dict__.__setitem__('stypy_function_name', 'NdPPoly._antiderivative_inplace')
        NdPPoly._antiderivative_inplace.__dict__.__setitem__('stypy_param_names_list', ['nu', 'axis'])
        NdPPoly._antiderivative_inplace.__dict__.__setitem__('stypy_varargs_param_name', None)
        NdPPoly._antiderivative_inplace.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NdPPoly._antiderivative_inplace.__dict__.__setitem__('stypy_call_defaults', defaults)
        NdPPoly._antiderivative_inplace.__dict__.__setitem__('stypy_call_varargs', varargs)
        NdPPoly._antiderivative_inplace.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NdPPoly._antiderivative_inplace.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NdPPoly._antiderivative_inplace', ['nu', 'axis'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_antiderivative_inplace', localization, ['nu', 'axis'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_antiderivative_inplace(...)' code ##################

        str_68564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, (-1)), 'str', '\n        Compute 1D antiderivative along a selected dimension\n        May result to non-contiguous c array.\n        ')
        
        
        # Getting the type of 'nu' (line 2064)
        nu_68565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 11), 'nu')
        int_68566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2064, 17), 'int')
        # Applying the binary operator '<=' (line 2064)
        result_le_68567 = python_operator(stypy.reporting.localization.Localization(__file__, 2064, 11), '<=', nu_68565, int_68566)
        
        # Testing the type of an if condition (line 2064)
        if_condition_68568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2064, 8), result_le_68567)
        # Assigning a type to the variable 'if_condition_68568' (line 2064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 8), 'if_condition_68568', if_condition_68568)
        # SSA begins for if statement (line 2064)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _derivative_inplace(...): (line 2065)
        # Processing the call arguments (line 2065)
        
        # Getting the type of 'nu' (line 2065)
        nu_68571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2065, 45), 'nu', False)
        # Applying the 'usub' unary operator (line 2065)
        result___neg___68572 = python_operator(stypy.reporting.localization.Localization(__file__, 2065, 44), 'usub', nu_68571)
        
        # Getting the type of 'axis' (line 2065)
        axis_68573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2065, 49), 'axis', False)
        # Processing the call keyword arguments (line 2065)
        kwargs_68574 = {}
        # Getting the type of 'self' (line 2065)
        self_68569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2065, 19), 'self', False)
        # Obtaining the member '_derivative_inplace' of a type (line 2065)
        _derivative_inplace_68570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2065, 19), self_68569, '_derivative_inplace')
        # Calling _derivative_inplace(args, kwargs) (line 2065)
        _derivative_inplace_call_result_68575 = invoke(stypy.reporting.localization.Localization(__file__, 2065, 19), _derivative_inplace_68570, *[result___neg___68572, axis_68573], **kwargs_68574)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2065, 12), 'stypy_return_type', _derivative_inplace_call_result_68575)
        # SSA join for if statement (line 2064)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2067):
        
        # Assigning a Call to a Name (line 2067):
        
        # Call to len(...): (line 2067)
        # Processing the call arguments (line 2067)
        # Getting the type of 'self' (line 2067)
        self_68577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 19), 'self', False)
        # Obtaining the member 'x' of a type (line 2067)
        x_68578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 19), self_68577, 'x')
        # Processing the call keyword arguments (line 2067)
        kwargs_68579 = {}
        # Getting the type of 'len' (line 2067)
        len_68576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 15), 'len', False)
        # Calling len(args, kwargs) (line 2067)
        len_call_result_68580 = invoke(stypy.reporting.localization.Localization(__file__, 2067, 15), len_68576, *[x_68578], **kwargs_68579)
        
        # Assigning a type to the variable 'ndim' (line 2067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'ndim', len_call_result_68580)
        
        # Assigning a BinOp to a Name (line 2068):
        
        # Assigning a BinOp to a Name (line 2068):
        # Getting the type of 'axis' (line 2068)
        axis_68581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 15), 'axis')
        # Getting the type of 'ndim' (line 2068)
        ndim_68582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 22), 'ndim')
        # Applying the binary operator '%' (line 2068)
        result_mod_68583 = python_operator(stypy.reporting.localization.Localization(__file__, 2068, 15), '%', axis_68581, ndim_68582)
        
        # Assigning a type to the variable 'axis' (line 2068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'axis', result_mod_68583)
        
        # Assigning a Call to a Name (line 2070):
        
        # Assigning a Call to a Name (line 2070):
        
        # Call to list(...): (line 2070)
        # Processing the call arguments (line 2070)
        
        # Call to range(...): (line 2070)
        # Processing the call arguments (line 2070)
        # Getting the type of 'ndim' (line 2070)
        ndim_68586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 26), 'ndim', False)
        # Processing the call keyword arguments (line 2070)
        kwargs_68587 = {}
        # Getting the type of 'range' (line 2070)
        range_68585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 20), 'range', False)
        # Calling range(args, kwargs) (line 2070)
        range_call_result_68588 = invoke(stypy.reporting.localization.Localization(__file__, 2070, 20), range_68585, *[ndim_68586], **kwargs_68587)
        
        # Processing the call keyword arguments (line 2070)
        kwargs_68589 = {}
        # Getting the type of 'list' (line 2070)
        list_68584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 15), 'list', False)
        # Calling list(args, kwargs) (line 2070)
        list_call_result_68590 = invoke(stypy.reporting.localization.Localization(__file__, 2070, 15), list_68584, *[range_call_result_68588], **kwargs_68589)
        
        # Assigning a type to the variable 'perm' (line 2070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2070, 8), 'perm', list_call_result_68590)
        
        # Assigning a Tuple to a Tuple (line 2071):
        
        # Assigning a Subscript to a Name (line 2071):
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 2071)
        axis_68591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 35), 'axis')
        # Getting the type of 'perm' (line 2071)
        perm_68592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 30), 'perm')
        # Obtaining the member '__getitem__' of a type (line 2071)
        getitem___68593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2071, 30), perm_68592, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2071)
        subscript_call_result_68594 = invoke(stypy.reporting.localization.Localization(__file__, 2071, 30), getitem___68593, axis_68591)
        
        # Assigning a type to the variable 'tuple_assignment_63641' (line 2071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2071, 8), 'tuple_assignment_63641', subscript_call_result_68594)
        
        # Assigning a Subscript to a Name (line 2071):
        
        # Obtaining the type of the subscript
        int_68595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2071, 47), 'int')
        # Getting the type of 'perm' (line 2071)
        perm_68596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 42), 'perm')
        # Obtaining the member '__getitem__' of a type (line 2071)
        getitem___68597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2071, 42), perm_68596, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2071)
        subscript_call_result_68598 = invoke(stypy.reporting.localization.Localization(__file__, 2071, 42), getitem___68597, int_68595)
        
        # Assigning a type to the variable 'tuple_assignment_63642' (line 2071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2071, 8), 'tuple_assignment_63642', subscript_call_result_68598)
        
        # Assigning a Name to a Subscript (line 2071):
        # Getting the type of 'tuple_assignment_63641' (line 2071)
        tuple_assignment_63641_68599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 8), 'tuple_assignment_63641')
        # Getting the type of 'perm' (line 2071)
        perm_68600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 8), 'perm')
        int_68601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2071, 13), 'int')
        # Storing an element on a container (line 2071)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2071, 8), perm_68600, (int_68601, tuple_assignment_63641_68599))
        
        # Assigning a Name to a Subscript (line 2071):
        # Getting the type of 'tuple_assignment_63642' (line 2071)
        tuple_assignment_63642_68602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 8), 'tuple_assignment_63642')
        # Getting the type of 'perm' (line 2071)
        perm_68603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 17), 'perm')
        # Getting the type of 'axis' (line 2071)
        axis_68604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 22), 'axis')
        # Storing an element on a container (line 2071)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2071, 17), perm_68603, (axis_68604, tuple_assignment_63642_68602))
        
        # Assigning a BinOp to a Name (line 2072):
        
        # Assigning a BinOp to a Name (line 2072):
        # Getting the type of 'perm' (line 2072)
        perm_68605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 15), 'perm')
        
        # Call to list(...): (line 2072)
        # Processing the call arguments (line 2072)
        
        # Call to range(...): (line 2072)
        # Processing the call arguments (line 2072)
        # Getting the type of 'ndim' (line 2072)
        ndim_68608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 33), 'ndim', False)
        # Getting the type of 'self' (line 2072)
        self_68609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 39), 'self', False)
        # Obtaining the member 'c' of a type (line 2072)
        c_68610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2072, 39), self_68609, 'c')
        # Obtaining the member 'ndim' of a type (line 2072)
        ndim_68611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2072, 39), c_68610, 'ndim')
        # Processing the call keyword arguments (line 2072)
        kwargs_68612 = {}
        # Getting the type of 'range' (line 2072)
        range_68607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 27), 'range', False)
        # Calling range(args, kwargs) (line 2072)
        range_call_result_68613 = invoke(stypy.reporting.localization.Localization(__file__, 2072, 27), range_68607, *[ndim_68608, ndim_68611], **kwargs_68612)
        
        # Processing the call keyword arguments (line 2072)
        kwargs_68614 = {}
        # Getting the type of 'list' (line 2072)
        list_68606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 22), 'list', False)
        # Calling list(args, kwargs) (line 2072)
        list_call_result_68615 = invoke(stypy.reporting.localization.Localization(__file__, 2072, 22), list_68606, *[range_call_result_68613], **kwargs_68614)
        
        # Applying the binary operator '+' (line 2072)
        result_add_68616 = python_operator(stypy.reporting.localization.Localization(__file__, 2072, 15), '+', perm_68605, list_call_result_68615)
        
        # Assigning a type to the variable 'perm' (line 2072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2072, 8), 'perm', result_add_68616)
        
        # Assigning a Call to a Name (line 2074):
        
        # Assigning a Call to a Name (line 2074):
        
        # Call to transpose(...): (line 2074)
        # Processing the call arguments (line 2074)
        # Getting the type of 'perm' (line 2074)
        perm_68620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2074, 29), 'perm', False)
        # Processing the call keyword arguments (line 2074)
        kwargs_68621 = {}
        # Getting the type of 'self' (line 2074)
        self_68617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2074, 12), 'self', False)
        # Obtaining the member 'c' of a type (line 2074)
        c_68618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2074, 12), self_68617, 'c')
        # Obtaining the member 'transpose' of a type (line 2074)
        transpose_68619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2074, 12), c_68618, 'transpose')
        # Calling transpose(args, kwargs) (line 2074)
        transpose_call_result_68622 = invoke(stypy.reporting.localization.Localization(__file__, 2074, 12), transpose_68619, *[perm_68620], **kwargs_68621)
        
        # Assigning a type to the variable 'c' (line 2074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2074, 8), 'c', transpose_call_result_68622)
        
        # Assigning a Call to a Name (line 2076):
        
        # Assigning a Call to a Name (line 2076):
        
        # Call to zeros(...): (line 2076)
        # Processing the call arguments (line 2076)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2076)
        tuple_68625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2076, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2076)
        # Adding element type (line 2076)
        
        # Obtaining the type of the subscript
        int_68626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2076, 31), 'int')
        # Getting the type of 'c' (line 2076)
        c_68627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 23), 'c', False)
        # Obtaining the member 'shape' of a type (line 2076)
        shape_68628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2076, 23), c_68627, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2076)
        getitem___68629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2076, 23), shape_68628, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2076)
        subscript_call_result_68630 = invoke(stypy.reporting.localization.Localization(__file__, 2076, 23), getitem___68629, int_68626)
        
        # Getting the type of 'nu' (line 2076)
        nu_68631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 36), 'nu', False)
        # Applying the binary operator '+' (line 2076)
        result_add_68632 = python_operator(stypy.reporting.localization.Localization(__file__, 2076, 23), '+', subscript_call_result_68630, nu_68631)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2076, 23), tuple_68625, result_add_68632)
        
        
        # Obtaining the type of the subscript
        int_68633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2076, 51), 'int')
        slice_68634 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2076, 43), int_68633, None, None)
        # Getting the type of 'c' (line 2076)
        c_68635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 43), 'c', False)
        # Obtaining the member 'shape' of a type (line 2076)
        shape_68636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2076, 43), c_68635, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2076)
        getitem___68637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2076, 43), shape_68636, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2076)
        subscript_call_result_68638 = invoke(stypy.reporting.localization.Localization(__file__, 2076, 43), getitem___68637, slice_68634)
        
        # Applying the binary operator '+' (line 2076)
        result_add_68639 = python_operator(stypy.reporting.localization.Localization(__file__, 2076, 22), '+', tuple_68625, subscript_call_result_68638)
        
        # Processing the call keyword arguments (line 2076)
        # Getting the type of 'c' (line 2077)
        c_68640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 27), 'c', False)
        # Obtaining the member 'dtype' of a type (line 2077)
        dtype_68641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2077, 27), c_68640, 'dtype')
        keyword_68642 = dtype_68641
        kwargs_68643 = {'dtype': keyword_68642}
        # Getting the type of 'np' (line 2076)
        np_68623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 13), 'np', False)
        # Obtaining the member 'zeros' of a type (line 2076)
        zeros_68624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2076, 13), np_68623, 'zeros')
        # Calling zeros(args, kwargs) (line 2076)
        zeros_call_result_68644 = invoke(stypy.reporting.localization.Localization(__file__, 2076, 13), zeros_68624, *[result_add_68639], **kwargs_68643)
        
        # Assigning a type to the variable 'c2' (line 2076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2076, 8), 'c2', zeros_call_result_68644)
        
        # Assigning a Name to a Subscript (line 2078):
        
        # Assigning a Name to a Subscript (line 2078):
        # Getting the type of 'c' (line 2078)
        c_68645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 19), 'c')
        # Getting the type of 'c2' (line 2078)
        c2_68646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 8), 'c2')
        
        # Getting the type of 'nu' (line 2078)
        nu_68647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 13), 'nu')
        # Applying the 'usub' unary operator (line 2078)
        result___neg___68648 = python_operator(stypy.reporting.localization.Localization(__file__, 2078, 12), 'usub', nu_68647)
        
        slice_68649 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2078, 8), None, result___neg___68648, None)
        # Storing an element on a container (line 2078)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2078, 8), c2_68646, (slice_68649, c_68645))
        
        # Assigning a Call to a Name (line 2081):
        
        # Assigning a Call to a Name (line 2081):
        
        # Call to poch(...): (line 2081)
        # Processing the call arguments (line 2081)
        
        # Call to arange(...): (line 2081)
        # Processing the call arguments (line 2081)
        
        # Obtaining the type of the subscript
        int_68654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2081, 45), 'int')
        # Getting the type of 'c' (line 2081)
        c_68655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 37), 'c', False)
        # Obtaining the member 'shape' of a type (line 2081)
        shape_68656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2081, 37), c_68655, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2081)
        getitem___68657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2081, 37), shape_68656, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2081)
        subscript_call_result_68658 = invoke(stypy.reporting.localization.Localization(__file__, 2081, 37), getitem___68657, int_68654)
        
        int_68659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2081, 49), 'int')
        int_68660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2081, 52), 'int')
        # Processing the call keyword arguments (line 2081)
        kwargs_68661 = {}
        # Getting the type of 'np' (line 2081)
        np_68652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 27), 'np', False)
        # Obtaining the member 'arange' of a type (line 2081)
        arange_68653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2081, 27), np_68652, 'arange')
        # Calling arange(args, kwargs) (line 2081)
        arange_call_result_68662 = invoke(stypy.reporting.localization.Localization(__file__, 2081, 27), arange_68653, *[subscript_call_result_68658, int_68659, int_68660], **kwargs_68661)
        
        # Getting the type of 'nu' (line 2081)
        nu_68663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 57), 'nu', False)
        # Processing the call keyword arguments (line 2081)
        kwargs_68664 = {}
        # Getting the type of 'spec' (line 2081)
        spec_68650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 17), 'spec', False)
        # Obtaining the member 'poch' of a type (line 2081)
        poch_68651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2081, 17), spec_68650, 'poch')
        # Calling poch(args, kwargs) (line 2081)
        poch_call_result_68665 = invoke(stypy.reporting.localization.Localization(__file__, 2081, 17), poch_68651, *[arange_call_result_68662, nu_68663], **kwargs_68664)
        
        # Assigning a type to the variable 'factor' (line 2081)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2081, 8), 'factor', poch_call_result_68665)
        
        # Getting the type of 'c2' (line 2082)
        c2_68666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 8), 'c2')
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'nu' (line 2082)
        nu_68667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 13), 'nu')
        # Applying the 'usub' unary operator (line 2082)
        result___neg___68668 = python_operator(stypy.reporting.localization.Localization(__file__, 2082, 12), 'usub', nu_68667)
        
        slice_68669 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2082, 8), None, result___neg___68668, None)
        # Getting the type of 'c2' (line 2082)
        c2_68670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 8), 'c2')
        # Obtaining the member '__getitem__' of a type (line 2082)
        getitem___68671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2082, 8), c2_68670, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2082)
        subscript_call_result_68672 = invoke(stypy.reporting.localization.Localization(__file__, 2082, 8), getitem___68671, slice_68669)
        
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 2082)
        tuple_68673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2082, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2082)
        # Adding element type (line 2082)
        
        # Call to slice(...): (line 2082)
        # Processing the call arguments (line 2082)
        # Getting the type of 'None' (line 2082)
        None_68675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 34), 'None', False)
        # Processing the call keyword arguments (line 2082)
        kwargs_68676 = {}
        # Getting the type of 'slice' (line 2082)
        slice_68674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 28), 'slice', False)
        # Calling slice(args, kwargs) (line 2082)
        slice_call_result_68677 = invoke(stypy.reporting.localization.Localization(__file__, 2082, 28), slice_68674, *[None_68675], **kwargs_68676)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2082, 28), tuple_68673, slice_call_result_68677)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2082)
        tuple_68678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2082, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2082)
        # Adding element type (line 2082)
        # Getting the type of 'None' (line 2082)
        None_68679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 45), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2082, 45), tuple_68678, None_68679)
        
        # Getting the type of 'c' (line 2082)
        c_68680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 53), 'c')
        # Obtaining the member 'ndim' of a type (line 2082)
        ndim_68681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2082, 53), c_68680, 'ndim')
        int_68682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2082, 60), 'int')
        # Applying the binary operator '-' (line 2082)
        result_sub_68683 = python_operator(stypy.reporting.localization.Localization(__file__, 2082, 53), '-', ndim_68681, int_68682)
        
        # Applying the binary operator '*' (line 2082)
        result_mul_68684 = python_operator(stypy.reporting.localization.Localization(__file__, 2082, 44), '*', tuple_68678, result_sub_68683)
        
        # Applying the binary operator '+' (line 2082)
        result_add_68685 = python_operator(stypy.reporting.localization.Localization(__file__, 2082, 27), '+', tuple_68673, result_mul_68684)
        
        # Getting the type of 'factor' (line 2082)
        factor_68686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 20), 'factor')
        # Obtaining the member '__getitem__' of a type (line 2082)
        getitem___68687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2082, 20), factor_68686, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2082)
        subscript_call_result_68688 = invoke(stypy.reporting.localization.Localization(__file__, 2082, 20), getitem___68687, result_add_68685)
        
        # Applying the binary operator 'div=' (line 2082)
        result_div_68689 = python_operator(stypy.reporting.localization.Localization(__file__, 2082, 8), 'div=', subscript_call_result_68672, subscript_call_result_68688)
        # Getting the type of 'c2' (line 2082)
        c2_68690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 8), 'c2')
        
        # Getting the type of 'nu' (line 2082)
        nu_68691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 13), 'nu')
        # Applying the 'usub' unary operator (line 2082)
        result___neg___68692 = python_operator(stypy.reporting.localization.Localization(__file__, 2082, 12), 'usub', nu_68691)
        
        slice_68693 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2082, 8), None, result___neg___68692, None)
        # Storing an element on a container (line 2082)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2082, 8), c2_68690, (slice_68693, result_div_68689))
        
        
        # Assigning a Call to a Name (line 2085):
        
        # Assigning a Call to a Name (line 2085):
        
        # Call to list(...): (line 2085)
        # Processing the call arguments (line 2085)
        
        # Call to range(...): (line 2085)
        # Processing the call arguments (line 2085)
        # Getting the type of 'c2' (line 2085)
        c2_68696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 27), 'c2', False)
        # Obtaining the member 'ndim' of a type (line 2085)
        ndim_68697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2085, 27), c2_68696, 'ndim')
        # Processing the call keyword arguments (line 2085)
        kwargs_68698 = {}
        # Getting the type of 'range' (line 2085)
        range_68695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 21), 'range', False)
        # Calling range(args, kwargs) (line 2085)
        range_call_result_68699 = invoke(stypy.reporting.localization.Localization(__file__, 2085, 21), range_68695, *[ndim_68697], **kwargs_68698)
        
        # Processing the call keyword arguments (line 2085)
        kwargs_68700 = {}
        # Getting the type of 'list' (line 2085)
        list_68694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 16), 'list', False)
        # Calling list(args, kwargs) (line 2085)
        list_call_result_68701 = invoke(stypy.reporting.localization.Localization(__file__, 2085, 16), list_68694, *[range_call_result_68699], **kwargs_68700)
        
        # Assigning a type to the variable 'perm2' (line 2085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2085, 8), 'perm2', list_call_result_68701)
        
        # Assigning a Tuple to a Tuple (line 2086):
        
        # Assigning a Subscript to a Name (line 2086):
        
        # Obtaining the type of the subscript
        # Getting the type of 'ndim' (line 2086)
        ndim_68702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 43), 'ndim')
        # Getting the type of 'axis' (line 2086)
        axis_68703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 48), 'axis')
        # Applying the binary operator '+' (line 2086)
        result_add_68704 = python_operator(stypy.reporting.localization.Localization(__file__, 2086, 43), '+', ndim_68702, axis_68703)
        
        # Getting the type of 'perm2' (line 2086)
        perm2_68705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 37), 'perm2')
        # Obtaining the member '__getitem__' of a type (line 2086)
        getitem___68706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2086, 37), perm2_68705, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2086)
        subscript_call_result_68707 = invoke(stypy.reporting.localization.Localization(__file__, 2086, 37), getitem___68706, result_add_68704)
        
        # Assigning a type to the variable 'tuple_assignment_63643' (line 2086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2086, 8), 'tuple_assignment_63643', subscript_call_result_68707)
        
        # Assigning a Subscript to a Name (line 2086):
        
        # Obtaining the type of the subscript
        int_68708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2086, 61), 'int')
        # Getting the type of 'perm2' (line 2086)
        perm2_68709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 55), 'perm2')
        # Obtaining the member '__getitem__' of a type (line 2086)
        getitem___68710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2086, 55), perm2_68709, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2086)
        subscript_call_result_68711 = invoke(stypy.reporting.localization.Localization(__file__, 2086, 55), getitem___68710, int_68708)
        
        # Assigning a type to the variable 'tuple_assignment_63644' (line 2086)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2086, 8), 'tuple_assignment_63644', subscript_call_result_68711)
        
        # Assigning a Name to a Subscript (line 2086):
        # Getting the type of 'tuple_assignment_63643' (line 2086)
        tuple_assignment_63643_68712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 8), 'tuple_assignment_63643')
        # Getting the type of 'perm2' (line 2086)
        perm2_68713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 8), 'perm2')
        int_68714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2086, 14), 'int')
        # Storing an element on a container (line 2086)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2086, 8), perm2_68713, (int_68714, tuple_assignment_63643_68712))
        
        # Assigning a Name to a Subscript (line 2086):
        # Getting the type of 'tuple_assignment_63644' (line 2086)
        tuple_assignment_63644_68715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 8), 'tuple_assignment_63644')
        # Getting the type of 'perm2' (line 2086)
        perm2_68716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 18), 'perm2')
        # Getting the type of 'ndim' (line 2086)
        ndim_68717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 24), 'ndim')
        # Getting the type of 'axis' (line 2086)
        axis_68718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 29), 'axis')
        # Applying the binary operator '+' (line 2086)
        result_add_68719 = python_operator(stypy.reporting.localization.Localization(__file__, 2086, 24), '+', ndim_68717, axis_68718)
        
        # Storing an element on a container (line 2086)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2086, 18), perm2_68716, (result_add_68719, tuple_assignment_63644_68715))
        
        # Assigning a Call to a Name (line 2088):
        
        # Assigning a Call to a Name (line 2088):
        
        # Call to transpose(...): (line 2088)
        # Processing the call arguments (line 2088)
        # Getting the type of 'perm2' (line 2088)
        perm2_68722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 26), 'perm2', False)
        # Processing the call keyword arguments (line 2088)
        kwargs_68723 = {}
        # Getting the type of 'c2' (line 2088)
        c2_68720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 13), 'c2', False)
        # Obtaining the member 'transpose' of a type (line 2088)
        transpose_68721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2088, 13), c2_68720, 'transpose')
        # Calling transpose(args, kwargs) (line 2088)
        transpose_call_result_68724 = invoke(stypy.reporting.localization.Localization(__file__, 2088, 13), transpose_68721, *[perm2_68722], **kwargs_68723)
        
        # Assigning a type to the variable 'c2' (line 2088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 8), 'c2', transpose_call_result_68724)
        
        # Assigning a Call to a Name (line 2089):
        
        # Assigning a Call to a Name (line 2089):
        
        # Call to copy(...): (line 2089)
        # Processing the call keyword arguments (line 2089)
        kwargs_68727 = {}
        # Getting the type of 'c2' (line 2089)
        c2_68725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 13), 'c2', False)
        # Obtaining the member 'copy' of a type (line 2089)
        copy_68726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 13), c2_68725, 'copy')
        # Calling copy(args, kwargs) (line 2089)
        copy_call_result_68728 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 13), copy_68726, *[], **kwargs_68727)
        
        # Assigning a type to the variable 'c2' (line 2089)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2089, 8), 'c2', copy_call_result_68728)
        
        # Call to fix_continuity(...): (line 2090)
        # Processing the call arguments (line 2090)
        
        # Call to reshape(...): (line 2090)
        # Processing the call arguments (line 2090)
        
        # Obtaining the type of the subscript
        int_68733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2090, 50), 'int')
        # Getting the type of 'c2' (line 2090)
        c2_68734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 41), 'c2', False)
        # Obtaining the member 'shape' of a type (line 2090)
        shape_68735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2090, 41), c2_68734, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2090)
        getitem___68736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2090, 41), shape_68735, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2090)
        subscript_call_result_68737 = invoke(stypy.reporting.localization.Localization(__file__, 2090, 41), getitem___68736, int_68733)
        
        
        # Obtaining the type of the subscript
        int_68738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2090, 63), 'int')
        # Getting the type of 'c2' (line 2090)
        c2_68739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 54), 'c2', False)
        # Obtaining the member 'shape' of a type (line 2090)
        shape_68740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2090, 54), c2_68739, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2090)
        getitem___68741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2090, 54), shape_68740, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2090)
        subscript_call_result_68742 = invoke(stypy.reporting.localization.Localization(__file__, 2090, 54), getitem___68741, int_68738)
        
        int_68743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2090, 67), 'int')
        # Processing the call keyword arguments (line 2090)
        kwargs_68744 = {}
        # Getting the type of 'c2' (line 2090)
        c2_68731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 30), 'c2', False)
        # Obtaining the member 'reshape' of a type (line 2090)
        reshape_68732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2090, 30), c2_68731, 'reshape')
        # Calling reshape(args, kwargs) (line 2090)
        reshape_call_result_68745 = invoke(stypy.reporting.localization.Localization(__file__, 2090, 30), reshape_68732, *[subscript_call_result_68737, subscript_call_result_68742, int_68743], **kwargs_68744)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 2091)
        axis_68746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 37), 'axis', False)
        # Getting the type of 'self' (line 2091)
        self_68747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 30), 'self', False)
        # Obtaining the member 'x' of a type (line 2091)
        x_68748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2091, 30), self_68747, 'x')
        # Obtaining the member '__getitem__' of a type (line 2091)
        getitem___68749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2091, 30), x_68748, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2091)
        subscript_call_result_68750 = invoke(stypy.reporting.localization.Localization(__file__, 2091, 30), getitem___68749, axis_68746)
        
        # Getting the type of 'nu' (line 2091)
        nu_68751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 44), 'nu', False)
        int_68752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2091, 47), 'int')
        # Applying the binary operator '-' (line 2091)
        result_sub_68753 = python_operator(stypy.reporting.localization.Localization(__file__, 2091, 44), '-', nu_68751, int_68752)
        
        # Processing the call keyword arguments (line 2090)
        kwargs_68754 = {}
        # Getting the type of '_ppoly' (line 2090)
        _ppoly_68729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 8), '_ppoly', False)
        # Obtaining the member 'fix_continuity' of a type (line 2090)
        fix_continuity_68730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2090, 8), _ppoly_68729, 'fix_continuity')
        # Calling fix_continuity(args, kwargs) (line 2090)
        fix_continuity_call_result_68755 = invoke(stypy.reporting.localization.Localization(__file__, 2090, 8), fix_continuity_68730, *[reshape_call_result_68745, subscript_call_result_68750, result_sub_68753], **kwargs_68754)
        
        
        # Assigning a Call to a Name (line 2093):
        
        # Assigning a Call to a Name (line 2093):
        
        # Call to transpose(...): (line 2093)
        # Processing the call arguments (line 2093)
        # Getting the type of 'perm2' (line 2093)
        perm2_68758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 26), 'perm2', False)
        # Processing the call keyword arguments (line 2093)
        kwargs_68759 = {}
        # Getting the type of 'c2' (line 2093)
        c2_68756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 13), 'c2', False)
        # Obtaining the member 'transpose' of a type (line 2093)
        transpose_68757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2093, 13), c2_68756, 'transpose')
        # Calling transpose(args, kwargs) (line 2093)
        transpose_call_result_68760 = invoke(stypy.reporting.localization.Localization(__file__, 2093, 13), transpose_68757, *[perm2_68758], **kwargs_68759)
        
        # Assigning a type to the variable 'c2' (line 2093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2093, 8), 'c2', transpose_call_result_68760)
        
        # Assigning a Call to a Name (line 2094):
        
        # Assigning a Call to a Name (line 2094):
        
        # Call to transpose(...): (line 2094)
        # Processing the call arguments (line 2094)
        # Getting the type of 'perm' (line 2094)
        perm_68763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 26), 'perm', False)
        # Processing the call keyword arguments (line 2094)
        kwargs_68764 = {}
        # Getting the type of 'c2' (line 2094)
        c2_68761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 13), 'c2', False)
        # Obtaining the member 'transpose' of a type (line 2094)
        transpose_68762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 13), c2_68761, 'transpose')
        # Calling transpose(args, kwargs) (line 2094)
        transpose_call_result_68765 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 13), transpose_68762, *[perm_68763], **kwargs_68764)
        
        # Assigning a type to the variable 'c2' (line 2094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'c2', transpose_call_result_68765)
        
        # Assigning a Name to a Attribute (line 2097):
        
        # Assigning a Name to a Attribute (line 2097):
        # Getting the type of 'c2' (line 2097)
        c2_68766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 17), 'c2')
        # Getting the type of 'self' (line 2097)
        self_68767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 8), 'self')
        # Setting the type of the member 'c' of a type (line 2097)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2097, 8), self_68767, 'c', c2_68766)
        
        # ################# End of '_antiderivative_inplace(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_antiderivative_inplace' in the type store
        # Getting the type of 'stypy_return_type' (line 2059)
        stypy_return_type_68768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_68768)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_antiderivative_inplace'
        return stypy_return_type_68768


    @norecursion
    def derivative(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'derivative'
        module_type_store = module_type_store.open_function_context('derivative', 2099, 4, False)
        # Assigning a type to the variable 'self' (line 2100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NdPPoly.derivative.__dict__.__setitem__('stypy_localization', localization)
        NdPPoly.derivative.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NdPPoly.derivative.__dict__.__setitem__('stypy_type_store', module_type_store)
        NdPPoly.derivative.__dict__.__setitem__('stypy_function_name', 'NdPPoly.derivative')
        NdPPoly.derivative.__dict__.__setitem__('stypy_param_names_list', ['nu'])
        NdPPoly.derivative.__dict__.__setitem__('stypy_varargs_param_name', None)
        NdPPoly.derivative.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NdPPoly.derivative.__dict__.__setitem__('stypy_call_defaults', defaults)
        NdPPoly.derivative.__dict__.__setitem__('stypy_call_varargs', varargs)
        NdPPoly.derivative.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NdPPoly.derivative.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NdPPoly.derivative', ['nu'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'derivative', localization, ['nu'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'derivative(...)' code ##################

        str_68769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2123, (-1)), 'str', '\n        Construct a new piecewise polynomial representing the derivative.\n\n        Parameters\n        ----------\n        nu : ndim-tuple of int\n            Order of derivatives to evaluate for each dimension.\n            If negative, the antiderivative is returned.\n\n        Returns\n        -------\n        pp : NdPPoly\n            Piecewise polynomial of orders (k[0] - nu[0], ..., k[n] - nu[n])\n            representing the derivative of this polynomial.\n\n        Notes\n        -----\n        Derivatives are evaluated piecewise for each polynomial\n        segment, even if the polynomial is not differentiable at the\n        breakpoints. The polynomial intervals in each dimension are\n        considered half-open, ``[a, b)``, except for the last interval\n        which is closed ``[a, b]``.\n\n        ')
        
        # Assigning a Call to a Name (line 2124):
        
        # Assigning a Call to a Name (line 2124):
        
        # Call to construct_fast(...): (line 2124)
        # Processing the call arguments (line 2124)
        
        # Call to copy(...): (line 2124)
        # Processing the call keyword arguments (line 2124)
        kwargs_68775 = {}
        # Getting the type of 'self' (line 2124)
        self_68772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2124, 32), 'self', False)
        # Obtaining the member 'c' of a type (line 2124)
        c_68773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2124, 32), self_68772, 'c')
        # Obtaining the member 'copy' of a type (line 2124)
        copy_68774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2124, 32), c_68773, 'copy')
        # Calling copy(args, kwargs) (line 2124)
        copy_call_result_68776 = invoke(stypy.reporting.localization.Localization(__file__, 2124, 32), copy_68774, *[], **kwargs_68775)
        
        # Getting the type of 'self' (line 2124)
        self_68777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2124, 47), 'self', False)
        # Obtaining the member 'x' of a type (line 2124)
        x_68778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2124, 47), self_68777, 'x')
        # Getting the type of 'self' (line 2124)
        self_68779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2124, 55), 'self', False)
        # Obtaining the member 'extrapolate' of a type (line 2124)
        extrapolate_68780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2124, 55), self_68779, 'extrapolate')
        # Processing the call keyword arguments (line 2124)
        kwargs_68781 = {}
        # Getting the type of 'self' (line 2124)
        self_68770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2124, 12), 'self', False)
        # Obtaining the member 'construct_fast' of a type (line 2124)
        construct_fast_68771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2124, 12), self_68770, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 2124)
        construct_fast_call_result_68782 = invoke(stypy.reporting.localization.Localization(__file__, 2124, 12), construct_fast_68771, *[copy_call_result_68776, x_68778, extrapolate_68780], **kwargs_68781)
        
        # Assigning a type to the variable 'p' (line 2124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2124, 8), 'p', construct_fast_call_result_68782)
        
        
        # Call to enumerate(...): (line 2126)
        # Processing the call arguments (line 2126)
        # Getting the type of 'nu' (line 2126)
        nu_68784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2126, 33), 'nu', False)
        # Processing the call keyword arguments (line 2126)
        kwargs_68785 = {}
        # Getting the type of 'enumerate' (line 2126)
        enumerate_68783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2126, 23), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 2126)
        enumerate_call_result_68786 = invoke(stypy.reporting.localization.Localization(__file__, 2126, 23), enumerate_68783, *[nu_68784], **kwargs_68785)
        
        # Testing the type of a for loop iterable (line 2126)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2126, 8), enumerate_call_result_68786)
        # Getting the type of the for loop variable (line 2126)
        for_loop_var_68787 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2126, 8), enumerate_call_result_68786)
        # Assigning a type to the variable 'axis' (line 2126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2126, 8), 'axis', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2126, 8), for_loop_var_68787))
        # Assigning a type to the variable 'n' (line 2126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2126, 8), 'n', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2126, 8), for_loop_var_68787))
        # SSA begins for a for statement (line 2126)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to _derivative_inplace(...): (line 2127)
        # Processing the call arguments (line 2127)
        # Getting the type of 'n' (line 2127)
        n_68790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 34), 'n', False)
        # Getting the type of 'axis' (line 2127)
        axis_68791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 37), 'axis', False)
        # Processing the call keyword arguments (line 2127)
        kwargs_68792 = {}
        # Getting the type of 'p' (line 2127)
        p_68788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 12), 'p', False)
        # Obtaining the member '_derivative_inplace' of a type (line 2127)
        _derivative_inplace_68789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2127, 12), p_68788, '_derivative_inplace')
        # Calling _derivative_inplace(args, kwargs) (line 2127)
        _derivative_inplace_call_result_68793 = invoke(stypy.reporting.localization.Localization(__file__, 2127, 12), _derivative_inplace_68789, *[n_68790, axis_68791], **kwargs_68792)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _ensure_c_contiguous(...): (line 2129)
        # Processing the call keyword arguments (line 2129)
        kwargs_68796 = {}
        # Getting the type of 'p' (line 2129)
        p_68794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 8), 'p', False)
        # Obtaining the member '_ensure_c_contiguous' of a type (line 2129)
        _ensure_c_contiguous_68795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2129, 8), p_68794, '_ensure_c_contiguous')
        # Calling _ensure_c_contiguous(args, kwargs) (line 2129)
        _ensure_c_contiguous_call_result_68797 = invoke(stypy.reporting.localization.Localization(__file__, 2129, 8), _ensure_c_contiguous_68795, *[], **kwargs_68796)
        
        # Getting the type of 'p' (line 2130)
        p_68798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 15), 'p')
        # Assigning a type to the variable 'stypy_return_type' (line 2130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2130, 8), 'stypy_return_type', p_68798)
        
        # ################# End of 'derivative(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'derivative' in the type store
        # Getting the type of 'stypy_return_type' (line 2099)
        stypy_return_type_68799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_68799)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'derivative'
        return stypy_return_type_68799


    @norecursion
    def antiderivative(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'antiderivative'
        module_type_store = module_type_store.open_function_context('antiderivative', 2132, 4, False)
        # Assigning a type to the variable 'self' (line 2133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2133, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NdPPoly.antiderivative.__dict__.__setitem__('stypy_localization', localization)
        NdPPoly.antiderivative.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NdPPoly.antiderivative.__dict__.__setitem__('stypy_type_store', module_type_store)
        NdPPoly.antiderivative.__dict__.__setitem__('stypy_function_name', 'NdPPoly.antiderivative')
        NdPPoly.antiderivative.__dict__.__setitem__('stypy_param_names_list', ['nu'])
        NdPPoly.antiderivative.__dict__.__setitem__('stypy_varargs_param_name', None)
        NdPPoly.antiderivative.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NdPPoly.antiderivative.__dict__.__setitem__('stypy_call_defaults', defaults)
        NdPPoly.antiderivative.__dict__.__setitem__('stypy_call_varargs', varargs)
        NdPPoly.antiderivative.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NdPPoly.antiderivative.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NdPPoly.antiderivative', ['nu'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'antiderivative', localization, ['nu'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'antiderivative(...)' code ##################

        str_68800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2157, (-1)), 'str', '\n        Construct a new piecewise polynomial representing the antiderivative.\n\n        Antiderivative is also the indefinite integral of the function,\n        and derivative is its inverse operation.\n\n        Parameters\n        ----------\n        nu : ndim-tuple of int\n            Order of derivatives to evaluate for each dimension.\n            If negative, the derivative is returned.\n\n        Returns\n        -------\n        pp : PPoly\n            Piecewise polynomial of order k2 = k + n representing\n            the antiderivative of this polynomial.\n\n        Notes\n        -----\n        The antiderivative returned by this function is continuous and\n        continuously differentiable to order n-1, up to floating point\n        rounding error.\n\n        ')
        
        # Assigning a Call to a Name (line 2158):
        
        # Assigning a Call to a Name (line 2158):
        
        # Call to construct_fast(...): (line 2158)
        # Processing the call arguments (line 2158)
        
        # Call to copy(...): (line 2158)
        # Processing the call keyword arguments (line 2158)
        kwargs_68806 = {}
        # Getting the type of 'self' (line 2158)
        self_68803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 32), 'self', False)
        # Obtaining the member 'c' of a type (line 2158)
        c_68804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 32), self_68803, 'c')
        # Obtaining the member 'copy' of a type (line 2158)
        copy_68805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 32), c_68804, 'copy')
        # Calling copy(args, kwargs) (line 2158)
        copy_call_result_68807 = invoke(stypy.reporting.localization.Localization(__file__, 2158, 32), copy_68805, *[], **kwargs_68806)
        
        # Getting the type of 'self' (line 2158)
        self_68808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 47), 'self', False)
        # Obtaining the member 'x' of a type (line 2158)
        x_68809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 47), self_68808, 'x')
        # Getting the type of 'self' (line 2158)
        self_68810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 55), 'self', False)
        # Obtaining the member 'extrapolate' of a type (line 2158)
        extrapolate_68811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 55), self_68810, 'extrapolate')
        # Processing the call keyword arguments (line 2158)
        kwargs_68812 = {}
        # Getting the type of 'self' (line 2158)
        self_68801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 12), 'self', False)
        # Obtaining the member 'construct_fast' of a type (line 2158)
        construct_fast_68802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 12), self_68801, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 2158)
        construct_fast_call_result_68813 = invoke(stypy.reporting.localization.Localization(__file__, 2158, 12), construct_fast_68802, *[copy_call_result_68807, x_68809, extrapolate_68811], **kwargs_68812)
        
        # Assigning a type to the variable 'p' (line 2158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 8), 'p', construct_fast_call_result_68813)
        
        
        # Call to enumerate(...): (line 2160)
        # Processing the call arguments (line 2160)
        # Getting the type of 'nu' (line 2160)
        nu_68815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 33), 'nu', False)
        # Processing the call keyword arguments (line 2160)
        kwargs_68816 = {}
        # Getting the type of 'enumerate' (line 2160)
        enumerate_68814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 23), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 2160)
        enumerate_call_result_68817 = invoke(stypy.reporting.localization.Localization(__file__, 2160, 23), enumerate_68814, *[nu_68815], **kwargs_68816)
        
        # Testing the type of a for loop iterable (line 2160)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2160, 8), enumerate_call_result_68817)
        # Getting the type of the for loop variable (line 2160)
        for_loop_var_68818 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2160, 8), enumerate_call_result_68817)
        # Assigning a type to the variable 'axis' (line 2160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 8), 'axis', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2160, 8), for_loop_var_68818))
        # Assigning a type to the variable 'n' (line 2160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 8), 'n', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2160, 8), for_loop_var_68818))
        # SSA begins for a for statement (line 2160)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to _antiderivative_inplace(...): (line 2161)
        # Processing the call arguments (line 2161)
        # Getting the type of 'n' (line 2161)
        n_68821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 38), 'n', False)
        # Getting the type of 'axis' (line 2161)
        axis_68822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 41), 'axis', False)
        # Processing the call keyword arguments (line 2161)
        kwargs_68823 = {}
        # Getting the type of 'p' (line 2161)
        p_68819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 12), 'p', False)
        # Obtaining the member '_antiderivative_inplace' of a type (line 2161)
        _antiderivative_inplace_68820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2161, 12), p_68819, '_antiderivative_inplace')
        # Calling _antiderivative_inplace(args, kwargs) (line 2161)
        _antiderivative_inplace_call_result_68824 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 12), _antiderivative_inplace_68820, *[n_68821, axis_68822], **kwargs_68823)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _ensure_c_contiguous(...): (line 2163)
        # Processing the call keyword arguments (line 2163)
        kwargs_68827 = {}
        # Getting the type of 'p' (line 2163)
        p_68825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 8), 'p', False)
        # Obtaining the member '_ensure_c_contiguous' of a type (line 2163)
        _ensure_c_contiguous_68826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2163, 8), p_68825, '_ensure_c_contiguous')
        # Calling _ensure_c_contiguous(args, kwargs) (line 2163)
        _ensure_c_contiguous_call_result_68828 = invoke(stypy.reporting.localization.Localization(__file__, 2163, 8), _ensure_c_contiguous_68826, *[], **kwargs_68827)
        
        # Getting the type of 'p' (line 2164)
        p_68829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 15), 'p')
        # Assigning a type to the variable 'stypy_return_type' (line 2164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2164, 8), 'stypy_return_type', p_68829)
        
        # ################# End of 'antiderivative(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'antiderivative' in the type store
        # Getting the type of 'stypy_return_type' (line 2132)
        stypy_return_type_68830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_68830)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'antiderivative'
        return stypy_return_type_68830


    @norecursion
    def integrate_1d(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2166)
        None_68831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 51), 'None')
        defaults = [None_68831]
        # Create a new context for function 'integrate_1d'
        module_type_store = module_type_store.open_function_context('integrate_1d', 2166, 4, False)
        # Assigning a type to the variable 'self' (line 2167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2167, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NdPPoly.integrate_1d.__dict__.__setitem__('stypy_localization', localization)
        NdPPoly.integrate_1d.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NdPPoly.integrate_1d.__dict__.__setitem__('stypy_type_store', module_type_store)
        NdPPoly.integrate_1d.__dict__.__setitem__('stypy_function_name', 'NdPPoly.integrate_1d')
        NdPPoly.integrate_1d.__dict__.__setitem__('stypy_param_names_list', ['a', 'b', 'axis', 'extrapolate'])
        NdPPoly.integrate_1d.__dict__.__setitem__('stypy_varargs_param_name', None)
        NdPPoly.integrate_1d.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NdPPoly.integrate_1d.__dict__.__setitem__('stypy_call_defaults', defaults)
        NdPPoly.integrate_1d.__dict__.__setitem__('stypy_call_varargs', varargs)
        NdPPoly.integrate_1d.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NdPPoly.integrate_1d.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NdPPoly.integrate_1d', ['a', 'b', 'axis', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'integrate_1d', localization, ['a', 'b', 'axis', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'integrate_1d(...)' code ##################

        str_68832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2196, (-1)), 'str', '\n        Compute NdPPoly representation for one dimensional definite integral\n\n        The result is a piecewise polynomial representing the integral:\n\n        .. math::\n\n           p(y, z, ...) = \\int_a^b dx\\, p(x, y, z, ...)\n\n        where the dimension integrated over is specified with the\n        `axis` parameter.\n\n        Parameters\n        ----------\n        a, b : float\n            Lower and upper bound for integration.\n        axis : int\n            Dimension over which to compute the 1D integrals\n        extrapolate : bool, optional\n            Whether to extrapolate to out-of-bounds points based on first\n            and last intervals, or to return NaNs.\n\n        Returns\n        -------\n        ig : NdPPoly or array-like\n            Definite integral of the piecewise polynomial over [a, b].\n            If the polynomial was 1-dimensional, an array is returned,\n            otherwise, an NdPPoly object.\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 2197)
        # Getting the type of 'extrapolate' (line 2197)
        extrapolate_68833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 11), 'extrapolate')
        # Getting the type of 'None' (line 2197)
        None_68834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 26), 'None')
        
        (may_be_68835, more_types_in_union_68836) = may_be_none(extrapolate_68833, None_68834)

        if may_be_68835:

            if more_types_in_union_68836:
                # Runtime conditional SSA (line 2197)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 2198):
            
            # Assigning a Attribute to a Name (line 2198):
            # Getting the type of 'self' (line 2198)
            self_68837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 26), 'self')
            # Obtaining the member 'extrapolate' of a type (line 2198)
            extrapolate_68838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 26), self_68837, 'extrapolate')
            # Assigning a type to the variable 'extrapolate' (line 2198)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2198, 12), 'extrapolate', extrapolate_68838)

            if more_types_in_union_68836:
                # Runtime conditional SSA for else branch (line 2197)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_68835) or more_types_in_union_68836):
            
            # Assigning a Call to a Name (line 2200):
            
            # Assigning a Call to a Name (line 2200):
            
            # Call to bool(...): (line 2200)
            # Processing the call arguments (line 2200)
            # Getting the type of 'extrapolate' (line 2200)
            extrapolate_68840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 31), 'extrapolate', False)
            # Processing the call keyword arguments (line 2200)
            kwargs_68841 = {}
            # Getting the type of 'bool' (line 2200)
            bool_68839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 26), 'bool', False)
            # Calling bool(args, kwargs) (line 2200)
            bool_call_result_68842 = invoke(stypy.reporting.localization.Localization(__file__, 2200, 26), bool_68839, *[extrapolate_68840], **kwargs_68841)
            
            # Assigning a type to the variable 'extrapolate' (line 2200)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 12), 'extrapolate', bool_call_result_68842)

            if (may_be_68835 and more_types_in_union_68836):
                # SSA join for if statement (line 2197)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2202):
        
        # Assigning a Call to a Name (line 2202):
        
        # Call to len(...): (line 2202)
        # Processing the call arguments (line 2202)
        # Getting the type of 'self' (line 2202)
        self_68844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 19), 'self', False)
        # Obtaining the member 'x' of a type (line 2202)
        x_68845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2202, 19), self_68844, 'x')
        # Processing the call keyword arguments (line 2202)
        kwargs_68846 = {}
        # Getting the type of 'len' (line 2202)
        len_68843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 15), 'len', False)
        # Calling len(args, kwargs) (line 2202)
        len_call_result_68847 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 15), len_68843, *[x_68845], **kwargs_68846)
        
        # Assigning a type to the variable 'ndim' (line 2202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 8), 'ndim', len_call_result_68847)
        
        # Assigning a BinOp to a Name (line 2203):
        
        # Assigning a BinOp to a Name (line 2203):
        
        # Call to int(...): (line 2203)
        # Processing the call arguments (line 2203)
        # Getting the type of 'axis' (line 2203)
        axis_68849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 19), 'axis', False)
        # Processing the call keyword arguments (line 2203)
        kwargs_68850 = {}
        # Getting the type of 'int' (line 2203)
        int_68848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 15), 'int', False)
        # Calling int(args, kwargs) (line 2203)
        int_call_result_68851 = invoke(stypy.reporting.localization.Localization(__file__, 2203, 15), int_68848, *[axis_68849], **kwargs_68850)
        
        # Getting the type of 'ndim' (line 2203)
        ndim_68852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 27), 'ndim')
        # Applying the binary operator '%' (line 2203)
        result_mod_68853 = python_operator(stypy.reporting.localization.Localization(__file__, 2203, 15), '%', int_call_result_68851, ndim_68852)
        
        # Assigning a type to the variable 'axis' (line 2203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2203, 8), 'axis', result_mod_68853)
        
        # Assigning a Attribute to a Name (line 2206):
        
        # Assigning a Attribute to a Name (line 2206):
        # Getting the type of 'self' (line 2206)
        self_68854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 12), 'self')
        # Obtaining the member 'c' of a type (line 2206)
        c_68855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2206, 12), self_68854, 'c')
        # Assigning a type to the variable 'c' (line 2206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2206, 8), 'c', c_68855)
        
        # Assigning a Call to a Name (line 2207):
        
        # Assigning a Call to a Name (line 2207):
        
        # Call to list(...): (line 2207)
        # Processing the call arguments (line 2207)
        
        # Call to range(...): (line 2207)
        # Processing the call arguments (line 2207)
        # Getting the type of 'c' (line 2207)
        c_68858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 26), 'c', False)
        # Obtaining the member 'ndim' of a type (line 2207)
        ndim_68859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2207, 26), c_68858, 'ndim')
        # Processing the call keyword arguments (line 2207)
        kwargs_68860 = {}
        # Getting the type of 'range' (line 2207)
        range_68857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 20), 'range', False)
        # Calling range(args, kwargs) (line 2207)
        range_call_result_68861 = invoke(stypy.reporting.localization.Localization(__file__, 2207, 20), range_68857, *[ndim_68859], **kwargs_68860)
        
        # Processing the call keyword arguments (line 2207)
        kwargs_68862 = {}
        # Getting the type of 'list' (line 2207)
        list_68856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 15), 'list', False)
        # Calling list(args, kwargs) (line 2207)
        list_call_result_68863 = invoke(stypy.reporting.localization.Localization(__file__, 2207, 15), list_68856, *[range_call_result_68861], **kwargs_68862)
        
        # Assigning a type to the variable 'swap' (line 2207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 8), 'swap', list_call_result_68863)
        
        # Call to insert(...): (line 2208)
        # Processing the call arguments (line 2208)
        int_68866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2208, 20), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 2208)
        axis_68867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 28), 'axis', False)
        # Getting the type of 'swap' (line 2208)
        swap_68868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 23), 'swap', False)
        # Obtaining the member '__getitem__' of a type (line 2208)
        getitem___68869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2208, 23), swap_68868, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2208)
        subscript_call_result_68870 = invoke(stypy.reporting.localization.Localization(__file__, 2208, 23), getitem___68869, axis_68867)
        
        # Processing the call keyword arguments (line 2208)
        kwargs_68871 = {}
        # Getting the type of 'swap' (line 2208)
        swap_68864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 8), 'swap', False)
        # Obtaining the member 'insert' of a type (line 2208)
        insert_68865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2208, 8), swap_68864, 'insert')
        # Calling insert(args, kwargs) (line 2208)
        insert_call_result_68872 = invoke(stypy.reporting.localization.Localization(__file__, 2208, 8), insert_68865, *[int_68866, subscript_call_result_68870], **kwargs_68871)
        
        # Deleting a member
        # Getting the type of 'swap' (line 2209)
        swap_68873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 12), 'swap')
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 2209)
        axis_68874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 17), 'axis')
        int_68875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2209, 24), 'int')
        # Applying the binary operator '+' (line 2209)
        result_add_68876 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 17), '+', axis_68874, int_68875)
        
        # Getting the type of 'swap' (line 2209)
        swap_68877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 12), 'swap')
        # Obtaining the member '__getitem__' of a type (line 2209)
        getitem___68878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2209, 12), swap_68877, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2209)
        subscript_call_result_68879 = invoke(stypy.reporting.localization.Localization(__file__, 2209, 12), getitem___68878, result_add_68876)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2209, 8), swap_68873, subscript_call_result_68879)
        
        # Call to insert(...): (line 2210)
        # Processing the call arguments (line 2210)
        int_68882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2210, 20), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ndim' (line 2210)
        ndim_68883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 28), 'ndim', False)
        # Getting the type of 'axis' (line 2210)
        axis_68884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 35), 'axis', False)
        # Applying the binary operator '+' (line 2210)
        result_add_68885 = python_operator(stypy.reporting.localization.Localization(__file__, 2210, 28), '+', ndim_68883, axis_68884)
        
        # Getting the type of 'swap' (line 2210)
        swap_68886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 23), 'swap', False)
        # Obtaining the member '__getitem__' of a type (line 2210)
        getitem___68887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2210, 23), swap_68886, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2210)
        subscript_call_result_68888 = invoke(stypy.reporting.localization.Localization(__file__, 2210, 23), getitem___68887, result_add_68885)
        
        # Processing the call keyword arguments (line 2210)
        kwargs_68889 = {}
        # Getting the type of 'swap' (line 2210)
        swap_68880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 8), 'swap', False)
        # Obtaining the member 'insert' of a type (line 2210)
        insert_68881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2210, 8), swap_68880, 'insert')
        # Calling insert(args, kwargs) (line 2210)
        insert_call_result_68890 = invoke(stypy.reporting.localization.Localization(__file__, 2210, 8), insert_68881, *[int_68882, subscript_call_result_68888], **kwargs_68889)
        
        # Deleting a member
        # Getting the type of 'swap' (line 2211)
        swap_68891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 12), 'swap')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ndim' (line 2211)
        ndim_68892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 17), 'ndim')
        # Getting the type of 'axis' (line 2211)
        axis_68893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 24), 'axis')
        # Applying the binary operator '+' (line 2211)
        result_add_68894 = python_operator(stypy.reporting.localization.Localization(__file__, 2211, 17), '+', ndim_68892, axis_68893)
        
        int_68895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 31), 'int')
        # Applying the binary operator '+' (line 2211)
        result_add_68896 = python_operator(stypy.reporting.localization.Localization(__file__, 2211, 29), '+', result_add_68894, int_68895)
        
        # Getting the type of 'swap' (line 2211)
        swap_68897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 12), 'swap')
        # Obtaining the member '__getitem__' of a type (line 2211)
        getitem___68898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2211, 12), swap_68897, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2211)
        subscript_call_result_68899 = invoke(stypy.reporting.localization.Localization(__file__, 2211, 12), getitem___68898, result_add_68896)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2211, 8), swap_68891, subscript_call_result_68899)
        
        # Assigning a Call to a Name (line 2213):
        
        # Assigning a Call to a Name (line 2213):
        
        # Call to transpose(...): (line 2213)
        # Processing the call arguments (line 2213)
        # Getting the type of 'swap' (line 2213)
        swap_68902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 24), 'swap', False)
        # Processing the call keyword arguments (line 2213)
        kwargs_68903 = {}
        # Getting the type of 'c' (line 2213)
        c_68900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 12), 'c', False)
        # Obtaining the member 'transpose' of a type (line 2213)
        transpose_68901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2213, 12), c_68900, 'transpose')
        # Calling transpose(args, kwargs) (line 2213)
        transpose_call_result_68904 = invoke(stypy.reporting.localization.Localization(__file__, 2213, 12), transpose_68901, *[swap_68902], **kwargs_68903)
        
        # Assigning a type to the variable 'c' (line 2213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2213, 8), 'c', transpose_call_result_68904)
        
        # Assigning a Call to a Name (line 2214):
        
        # Assigning a Call to a Name (line 2214):
        
        # Call to construct_fast(...): (line 2214)
        # Processing the call arguments (line 2214)
        
        # Call to reshape(...): (line 2214)
        # Processing the call arguments (line 2214)
        
        # Obtaining the type of the subscript
        int_68909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 51), 'int')
        # Getting the type of 'c' (line 2214)
        c_68910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 43), 'c', False)
        # Obtaining the member 'shape' of a type (line 2214)
        shape_68911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 43), c_68910, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2214)
        getitem___68912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 43), shape_68911, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2214)
        subscript_call_result_68913 = invoke(stypy.reporting.localization.Localization(__file__, 2214, 43), getitem___68912, int_68909)
        
        
        # Obtaining the type of the subscript
        int_68914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 63), 'int')
        # Getting the type of 'c' (line 2214)
        c_68915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 55), 'c', False)
        # Obtaining the member 'shape' of a type (line 2214)
        shape_68916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 55), c_68915, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2214)
        getitem___68917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 55), shape_68916, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2214)
        subscript_call_result_68918 = invoke(stypy.reporting.localization.Localization(__file__, 2214, 55), getitem___68917, int_68914)
        
        int_68919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 67), 'int')
        # Processing the call keyword arguments (line 2214)
        kwargs_68920 = {}
        # Getting the type of 'c' (line 2214)
        c_68907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 33), 'c', False)
        # Obtaining the member 'reshape' of a type (line 2214)
        reshape_68908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 33), c_68907, 'reshape')
        # Calling reshape(args, kwargs) (line 2214)
        reshape_call_result_68921 = invoke(stypy.reporting.localization.Localization(__file__, 2214, 33), reshape_68908, *[subscript_call_result_68913, subscript_call_result_68918, int_68919], **kwargs_68920)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 2215)
        axis_68922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 40), 'axis', False)
        # Getting the type of 'self' (line 2215)
        self_68923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 33), 'self', False)
        # Obtaining the member 'x' of a type (line 2215)
        x_68924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2215, 33), self_68923, 'x')
        # Obtaining the member '__getitem__' of a type (line 2215)
        getitem___68925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2215, 33), x_68924, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2215)
        subscript_call_result_68926 = invoke(stypy.reporting.localization.Localization(__file__, 2215, 33), getitem___68925, axis_68922)
        
        # Processing the call keyword arguments (line 2214)
        # Getting the type of 'extrapolate' (line 2216)
        extrapolate_68927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 45), 'extrapolate', False)
        keyword_68928 = extrapolate_68927
        kwargs_68929 = {'extrapolate': keyword_68928}
        # Getting the type of 'PPoly' (line 2214)
        PPoly_68905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 12), 'PPoly', False)
        # Obtaining the member 'construct_fast' of a type (line 2214)
        construct_fast_68906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2214, 12), PPoly_68905, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 2214)
        construct_fast_call_result_68930 = invoke(stypy.reporting.localization.Localization(__file__, 2214, 12), construct_fast_68906, *[reshape_call_result_68921, subscript_call_result_68926], **kwargs_68929)
        
        # Assigning a type to the variable 'p' (line 2214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2214, 8), 'p', construct_fast_call_result_68930)
        
        # Assigning a Call to a Name (line 2217):
        
        # Assigning a Call to a Name (line 2217):
        
        # Call to integrate(...): (line 2217)
        # Processing the call arguments (line 2217)
        # Getting the type of 'a' (line 2217)
        a_68933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 26), 'a', False)
        # Getting the type of 'b' (line 2217)
        b_68934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 29), 'b', False)
        # Processing the call keyword arguments (line 2217)
        # Getting the type of 'extrapolate' (line 2217)
        extrapolate_68935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 44), 'extrapolate', False)
        keyword_68936 = extrapolate_68935
        kwargs_68937 = {'extrapolate': keyword_68936}
        # Getting the type of 'p' (line 2217)
        p_68931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 14), 'p', False)
        # Obtaining the member 'integrate' of a type (line 2217)
        integrate_68932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2217, 14), p_68931, 'integrate')
        # Calling integrate(args, kwargs) (line 2217)
        integrate_call_result_68938 = invoke(stypy.reporting.localization.Localization(__file__, 2217, 14), integrate_68932, *[a_68933, b_68934], **kwargs_68937)
        
        # Assigning a type to the variable 'out' (line 2217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 8), 'out', integrate_call_result_68938)
        
        
        # Getting the type of 'ndim' (line 2220)
        ndim_68939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 11), 'ndim')
        int_68940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2220, 19), 'int')
        # Applying the binary operator '==' (line 2220)
        result_eq_68941 = python_operator(stypy.reporting.localization.Localization(__file__, 2220, 11), '==', ndim_68939, int_68940)
        
        # Testing the type of an if condition (line 2220)
        if_condition_68942 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2220, 8), result_eq_68941)
        # Assigning a type to the variable 'if_condition_68942' (line 2220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2220, 8), 'if_condition_68942', if_condition_68942)
        # SSA begins for if statement (line 2220)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to reshape(...): (line 2221)
        # Processing the call arguments (line 2221)
        
        # Obtaining the type of the subscript
        int_68945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2221, 39), 'int')
        slice_68946 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2221, 31), int_68945, None, None)
        # Getting the type of 'c' (line 2221)
        c_68947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 31), 'c', False)
        # Obtaining the member 'shape' of a type (line 2221)
        shape_68948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 31), c_68947, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2221)
        getitem___68949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 31), shape_68948, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2221)
        subscript_call_result_68950 = invoke(stypy.reporting.localization.Localization(__file__, 2221, 31), getitem___68949, slice_68946)
        
        # Processing the call keyword arguments (line 2221)
        kwargs_68951 = {}
        # Getting the type of 'out' (line 2221)
        out_68943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 19), 'out', False)
        # Obtaining the member 'reshape' of a type (line 2221)
        reshape_68944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 19), out_68943, 'reshape')
        # Calling reshape(args, kwargs) (line 2221)
        reshape_call_result_68952 = invoke(stypy.reporting.localization.Localization(__file__, 2221, 19), reshape_68944, *[subscript_call_result_68950], **kwargs_68951)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'stypy_return_type', reshape_call_result_68952)
        # SSA branch for the else part of an if statement (line 2220)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2223):
        
        # Assigning a Call to a Name (line 2223):
        
        # Call to reshape(...): (line 2223)
        # Processing the call arguments (line 2223)
        
        # Obtaining the type of the subscript
        int_68955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 36), 'int')
        slice_68956 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2223, 28), int_68955, None, None)
        # Getting the type of 'c' (line 2223)
        c_68957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 28), 'c', False)
        # Obtaining the member 'shape' of a type (line 2223)
        shape_68958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2223, 28), c_68957, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2223)
        getitem___68959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2223, 28), shape_68958, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2223)
        subscript_call_result_68960 = invoke(stypy.reporting.localization.Localization(__file__, 2223, 28), getitem___68959, slice_68956)
        
        # Processing the call keyword arguments (line 2223)
        kwargs_68961 = {}
        # Getting the type of 'out' (line 2223)
        out_68953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 16), 'out', False)
        # Obtaining the member 'reshape' of a type (line 2223)
        reshape_68954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2223, 16), out_68953, 'reshape')
        # Calling reshape(args, kwargs) (line 2223)
        reshape_call_result_68962 = invoke(stypy.reporting.localization.Localization(__file__, 2223, 16), reshape_68954, *[subscript_call_result_68960], **kwargs_68961)
        
        # Assigning a type to the variable 'c' (line 2223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2223, 12), 'c', reshape_call_result_68962)
        
        # Assigning a BinOp to a Name (line 2224):
        
        # Assigning a BinOp to a Name (line 2224):
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 2224)
        axis_68963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 24), 'axis')
        slice_68964 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2224, 16), None, axis_68963, None)
        # Getting the type of 'self' (line 2224)
        self_68965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 16), 'self')
        # Obtaining the member 'x' of a type (line 2224)
        x_68966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2224, 16), self_68965, 'x')
        # Obtaining the member '__getitem__' of a type (line 2224)
        getitem___68967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2224, 16), x_68966, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2224)
        subscript_call_result_68968 = invoke(stypy.reporting.localization.Localization(__file__, 2224, 16), getitem___68967, slice_68964)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 2224)
        axis_68969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 39), 'axis')
        int_68970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2224, 44), 'int')
        # Applying the binary operator '+' (line 2224)
        result_add_68971 = python_operator(stypy.reporting.localization.Localization(__file__, 2224, 39), '+', axis_68969, int_68970)
        
        slice_68972 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2224, 32), result_add_68971, None, None)
        # Getting the type of 'self' (line 2224)
        self_68973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 32), 'self')
        # Obtaining the member 'x' of a type (line 2224)
        x_68974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2224, 32), self_68973, 'x')
        # Obtaining the member '__getitem__' of a type (line 2224)
        getitem___68975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2224, 32), x_68974, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2224)
        subscript_call_result_68976 = invoke(stypy.reporting.localization.Localization(__file__, 2224, 32), getitem___68975, slice_68972)
        
        # Applying the binary operator '+' (line 2224)
        result_add_68977 = python_operator(stypy.reporting.localization.Localization(__file__, 2224, 16), '+', subscript_call_result_68968, subscript_call_result_68976)
        
        # Assigning a type to the variable 'x' (line 2224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2224, 12), 'x', result_add_68977)
        
        # Call to construct_fast(...): (line 2225)
        # Processing the call arguments (line 2225)
        # Getting the type of 'c' (line 2225)
        c_68980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 39), 'c', False)
        # Getting the type of 'x' (line 2225)
        x_68981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 42), 'x', False)
        # Processing the call keyword arguments (line 2225)
        # Getting the type of 'extrapolate' (line 2225)
        extrapolate_68982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 57), 'extrapolate', False)
        keyword_68983 = extrapolate_68982
        kwargs_68984 = {'extrapolate': keyword_68983}
        # Getting the type of 'self' (line 2225)
        self_68978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 19), 'self', False)
        # Obtaining the member 'construct_fast' of a type (line 2225)
        construct_fast_68979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2225, 19), self_68978, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 2225)
        construct_fast_call_result_68985 = invoke(stypy.reporting.localization.Localization(__file__, 2225, 19), construct_fast_68979, *[c_68980, x_68981], **kwargs_68984)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2225, 12), 'stypy_return_type', construct_fast_call_result_68985)
        # SSA join for if statement (line 2220)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'integrate_1d(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'integrate_1d' in the type store
        # Getting the type of 'stypy_return_type' (line 2166)
        stypy_return_type_68986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_68986)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'integrate_1d'
        return stypy_return_type_68986


    @norecursion
    def integrate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2227)
        None_68987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 44), 'None')
        defaults = [None_68987]
        # Create a new context for function 'integrate'
        module_type_store = module_type_store.open_function_context('integrate', 2227, 4, False)
        # Assigning a type to the variable 'self' (line 2228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NdPPoly.integrate.__dict__.__setitem__('stypy_localization', localization)
        NdPPoly.integrate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NdPPoly.integrate.__dict__.__setitem__('stypy_type_store', module_type_store)
        NdPPoly.integrate.__dict__.__setitem__('stypy_function_name', 'NdPPoly.integrate')
        NdPPoly.integrate.__dict__.__setitem__('stypy_param_names_list', ['ranges', 'extrapolate'])
        NdPPoly.integrate.__dict__.__setitem__('stypy_varargs_param_name', None)
        NdPPoly.integrate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NdPPoly.integrate.__dict__.__setitem__('stypy_call_defaults', defaults)
        NdPPoly.integrate.__dict__.__setitem__('stypy_call_varargs', varargs)
        NdPPoly.integrate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NdPPoly.integrate.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NdPPoly.integrate', ['ranges', 'extrapolate'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'integrate', localization, ['ranges', 'extrapolate'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'integrate(...)' code ##################

        str_68988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2246, (-1)), 'str', '\n        Compute a definite integral over a piecewise polynomial.\n\n        Parameters\n        ----------\n        ranges : ndim-tuple of 2-tuples float\n            Sequence of lower and upper bounds for each dimension,\n            ``[(a[0], b[0]), ..., (a[ndim-1], b[ndim-1])]``\n        extrapolate : bool, optional\n            Whether to extrapolate to out-of-bounds points based on first\n            and last intervals, or to return NaNs.\n\n        Returns\n        -------\n        ig : array_like\n            Definite integral of the piecewise polynomial over\n            [a[0], b[0]] x ... x [a[ndim-1], b[ndim-1]]\n\n        ')
        
        # Assigning a Call to a Name (line 2248):
        
        # Assigning a Call to a Name (line 2248):
        
        # Call to len(...): (line 2248)
        # Processing the call arguments (line 2248)
        # Getting the type of 'self' (line 2248)
        self_68990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 19), 'self', False)
        # Obtaining the member 'x' of a type (line 2248)
        x_68991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2248, 19), self_68990, 'x')
        # Processing the call keyword arguments (line 2248)
        kwargs_68992 = {}
        # Getting the type of 'len' (line 2248)
        len_68989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2248, 15), 'len', False)
        # Calling len(args, kwargs) (line 2248)
        len_call_result_68993 = invoke(stypy.reporting.localization.Localization(__file__, 2248, 15), len_68989, *[x_68991], **kwargs_68992)
        
        # Assigning a type to the variable 'ndim' (line 2248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2248, 8), 'ndim', len_call_result_68993)
        
        # Type idiom detected: calculating its left and rigth part (line 2250)
        # Getting the type of 'extrapolate' (line 2250)
        extrapolate_68994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 11), 'extrapolate')
        # Getting the type of 'None' (line 2250)
        None_68995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 26), 'None')
        
        (may_be_68996, more_types_in_union_68997) = may_be_none(extrapolate_68994, None_68995)

        if may_be_68996:

            if more_types_in_union_68997:
                # Runtime conditional SSA (line 2250)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 2251):
            
            # Assigning a Attribute to a Name (line 2251):
            # Getting the type of 'self' (line 2251)
            self_68998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 26), 'self')
            # Obtaining the member 'extrapolate' of a type (line 2251)
            extrapolate_68999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2251, 26), self_68998, 'extrapolate')
            # Assigning a type to the variable 'extrapolate' (line 2251)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2251, 12), 'extrapolate', extrapolate_68999)

            if more_types_in_union_68997:
                # Runtime conditional SSA for else branch (line 2250)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_68996) or more_types_in_union_68997):
            
            # Assigning a Call to a Name (line 2253):
            
            # Assigning a Call to a Name (line 2253):
            
            # Call to bool(...): (line 2253)
            # Processing the call arguments (line 2253)
            # Getting the type of 'extrapolate' (line 2253)
            extrapolate_69001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 31), 'extrapolate', False)
            # Processing the call keyword arguments (line 2253)
            kwargs_69002 = {}
            # Getting the type of 'bool' (line 2253)
            bool_69000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 26), 'bool', False)
            # Calling bool(args, kwargs) (line 2253)
            bool_call_result_69003 = invoke(stypy.reporting.localization.Localization(__file__, 2253, 26), bool_69000, *[extrapolate_69001], **kwargs_69002)
            
            # Assigning a type to the variable 'extrapolate' (line 2253)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2253, 12), 'extrapolate', bool_call_result_69003)

            if (may_be_68996 and more_types_in_union_68997):
                # SSA join for if statement (line 2250)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        
        
        # Call to hasattr(...): (line 2255)
        # Processing the call arguments (line 2255)
        # Getting the type of 'ranges' (line 2255)
        ranges_69005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 23), 'ranges', False)
        str_69006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2255, 31), 'str', '__len__')
        # Processing the call keyword arguments (line 2255)
        kwargs_69007 = {}
        # Getting the type of 'hasattr' (line 2255)
        hasattr_69004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 15), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 2255)
        hasattr_call_result_69008 = invoke(stypy.reporting.localization.Localization(__file__, 2255, 15), hasattr_69004, *[ranges_69005, str_69006], **kwargs_69007)
        
        # Applying the 'not' unary operator (line 2255)
        result_not__69009 = python_operator(stypy.reporting.localization.Localization(__file__, 2255, 11), 'not', hasattr_call_result_69008)
        
        
        
        # Call to len(...): (line 2255)
        # Processing the call arguments (line 2255)
        # Getting the type of 'ranges' (line 2255)
        ranges_69011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 49), 'ranges', False)
        # Processing the call keyword arguments (line 2255)
        kwargs_69012 = {}
        # Getting the type of 'len' (line 2255)
        len_69010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 45), 'len', False)
        # Calling len(args, kwargs) (line 2255)
        len_call_result_69013 = invoke(stypy.reporting.localization.Localization(__file__, 2255, 45), len_69010, *[ranges_69011], **kwargs_69012)
        
        # Getting the type of 'ndim' (line 2255)
        ndim_69014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 60), 'ndim')
        # Applying the binary operator '!=' (line 2255)
        result_ne_69015 = python_operator(stypy.reporting.localization.Localization(__file__, 2255, 45), '!=', len_call_result_69013, ndim_69014)
        
        # Applying the binary operator 'or' (line 2255)
        result_or_keyword_69016 = python_operator(stypy.reporting.localization.Localization(__file__, 2255, 11), 'or', result_not__69009, result_ne_69015)
        
        # Testing the type of an if condition (line 2255)
        if_condition_69017 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2255, 8), result_or_keyword_69016)
        # Assigning a type to the variable 'if_condition_69017' (line 2255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2255, 8), 'if_condition_69017', if_condition_69017)
        # SSA begins for if statement (line 2255)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2256)
        # Processing the call arguments (line 2256)
        str_69019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2256, 29), 'str', 'Range not a sequence of correct length')
        # Processing the call keyword arguments (line 2256)
        kwargs_69020 = {}
        # Getting the type of 'ValueError' (line 2256)
        ValueError_69018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2256)
        ValueError_call_result_69021 = invoke(stypy.reporting.localization.Localization(__file__, 2256, 18), ValueError_69018, *[str_69019], **kwargs_69020)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2256, 12), ValueError_call_result_69021, 'raise parameter', BaseException)
        # SSA join for if statement (line 2255)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _ensure_c_contiguous(...): (line 2258)
        # Processing the call keyword arguments (line 2258)
        kwargs_69024 = {}
        # Getting the type of 'self' (line 2258)
        self_69022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 8), 'self', False)
        # Obtaining the member '_ensure_c_contiguous' of a type (line 2258)
        _ensure_c_contiguous_69023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2258, 8), self_69022, '_ensure_c_contiguous')
        # Calling _ensure_c_contiguous(args, kwargs) (line 2258)
        _ensure_c_contiguous_call_result_69025 = invoke(stypy.reporting.localization.Localization(__file__, 2258, 8), _ensure_c_contiguous_69023, *[], **kwargs_69024)
        
        
        # Assigning a Attribute to a Name (line 2261):
        
        # Assigning a Attribute to a Name (line 2261):
        # Getting the type of 'self' (line 2261)
        self_69026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 12), 'self')
        # Obtaining the member 'c' of a type (line 2261)
        c_69027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 12), self_69026, 'c')
        # Assigning a type to the variable 'c' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'c', c_69027)
        
        
        # Call to enumerate(...): (line 2262)
        # Processing the call arguments (line 2262)
        # Getting the type of 'ranges' (line 2262)
        ranges_69029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 35), 'ranges', False)
        # Processing the call keyword arguments (line 2262)
        kwargs_69030 = {}
        # Getting the type of 'enumerate' (line 2262)
        enumerate_69028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 25), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 2262)
        enumerate_call_result_69031 = invoke(stypy.reporting.localization.Localization(__file__, 2262, 25), enumerate_69028, *[ranges_69029], **kwargs_69030)
        
        # Testing the type of a for loop iterable (line 2262)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2262, 8), enumerate_call_result_69031)
        # Getting the type of the for loop variable (line 2262)
        for_loop_var_69032 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2262, 8), enumerate_call_result_69031)
        # Assigning a type to the variable 'n' (line 2262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2262, 8), 'n', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2262, 8), for_loop_var_69032))
        # Assigning a type to the variable 'a' (line 2262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2262, 8), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2262, 8), for_loop_var_69032))
        # Assigning a type to the variable 'b' (line 2262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2262, 8), 'b', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2262, 8), for_loop_var_69032))
        # SSA begins for a for statement (line 2262)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 2263):
        
        # Assigning a Call to a Name (line 2263):
        
        # Call to list(...): (line 2263)
        # Processing the call arguments (line 2263)
        
        # Call to range(...): (line 2263)
        # Processing the call arguments (line 2263)
        # Getting the type of 'c' (line 2263)
        c_69035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 30), 'c', False)
        # Obtaining the member 'ndim' of a type (line 2263)
        ndim_69036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2263, 30), c_69035, 'ndim')
        # Processing the call keyword arguments (line 2263)
        kwargs_69037 = {}
        # Getting the type of 'range' (line 2263)
        range_69034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 24), 'range', False)
        # Calling range(args, kwargs) (line 2263)
        range_call_result_69038 = invoke(stypy.reporting.localization.Localization(__file__, 2263, 24), range_69034, *[ndim_69036], **kwargs_69037)
        
        # Processing the call keyword arguments (line 2263)
        kwargs_69039 = {}
        # Getting the type of 'list' (line 2263)
        list_69033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 19), 'list', False)
        # Calling list(args, kwargs) (line 2263)
        list_call_result_69040 = invoke(stypy.reporting.localization.Localization(__file__, 2263, 19), list_69033, *[range_call_result_69038], **kwargs_69039)
        
        # Assigning a type to the variable 'swap' (line 2263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 12), 'swap', list_call_result_69040)
        
        # Call to insert(...): (line 2264)
        # Processing the call arguments (line 2264)
        int_69043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2264, 24), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ndim' (line 2264)
        ndim_69044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 32), 'ndim', False)
        # Getting the type of 'n' (line 2264)
        n_69045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 39), 'n', False)
        # Applying the binary operator '-' (line 2264)
        result_sub_69046 = python_operator(stypy.reporting.localization.Localization(__file__, 2264, 32), '-', ndim_69044, n_69045)
        
        # Getting the type of 'swap' (line 2264)
        swap_69047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 27), 'swap', False)
        # Obtaining the member '__getitem__' of a type (line 2264)
        getitem___69048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 27), swap_69047, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2264)
        subscript_call_result_69049 = invoke(stypy.reporting.localization.Localization(__file__, 2264, 27), getitem___69048, result_sub_69046)
        
        # Processing the call keyword arguments (line 2264)
        kwargs_69050 = {}
        # Getting the type of 'swap' (line 2264)
        swap_69041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 12), 'swap', False)
        # Obtaining the member 'insert' of a type (line 2264)
        insert_69042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2264, 12), swap_69041, 'insert')
        # Calling insert(args, kwargs) (line 2264)
        insert_call_result_69051 = invoke(stypy.reporting.localization.Localization(__file__, 2264, 12), insert_69042, *[int_69043, subscript_call_result_69049], **kwargs_69050)
        
        # Deleting a member
        # Getting the type of 'swap' (line 2265)
        swap_69052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 16), 'swap')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ndim' (line 2265)
        ndim_69053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 21), 'ndim')
        # Getting the type of 'n' (line 2265)
        n_69054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 28), 'n')
        # Applying the binary operator '-' (line 2265)
        result_sub_69055 = python_operator(stypy.reporting.localization.Localization(__file__, 2265, 21), '-', ndim_69053, n_69054)
        
        int_69056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2265, 32), 'int')
        # Applying the binary operator '+' (line 2265)
        result_add_69057 = python_operator(stypy.reporting.localization.Localization(__file__, 2265, 30), '+', result_sub_69055, int_69056)
        
        # Getting the type of 'swap' (line 2265)
        swap_69058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 16), 'swap')
        # Obtaining the member '__getitem__' of a type (line 2265)
        getitem___69059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2265, 16), swap_69058, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2265)
        subscript_call_result_69060 = invoke(stypy.reporting.localization.Localization(__file__, 2265, 16), getitem___69059, result_add_69057)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2265, 12), swap_69052, subscript_call_result_69060)
        
        # Assigning a Call to a Name (line 2267):
        
        # Assigning a Call to a Name (line 2267):
        
        # Call to transpose(...): (line 2267)
        # Processing the call arguments (line 2267)
        # Getting the type of 'swap' (line 2267)
        swap_69063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 28), 'swap', False)
        # Processing the call keyword arguments (line 2267)
        kwargs_69064 = {}
        # Getting the type of 'c' (line 2267)
        c_69061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 16), 'c', False)
        # Obtaining the member 'transpose' of a type (line 2267)
        transpose_69062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2267, 16), c_69061, 'transpose')
        # Calling transpose(args, kwargs) (line 2267)
        transpose_call_result_69065 = invoke(stypy.reporting.localization.Localization(__file__, 2267, 16), transpose_69062, *[swap_69063], **kwargs_69064)
        
        # Assigning a type to the variable 'c' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 12), 'c', transpose_call_result_69065)
        
        # Assigning a Call to a Name (line 2269):
        
        # Assigning a Call to a Name (line 2269):
        
        # Call to construct_fast(...): (line 2269)
        # Processing the call arguments (line 2269)
        # Getting the type of 'c' (line 2269)
        c_69068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 37), 'c', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'n' (line 2269)
        n_69069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 47), 'n', False)
        # Getting the type of 'self' (line 2269)
        self_69070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 40), 'self', False)
        # Obtaining the member 'x' of a type (line 2269)
        x_69071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 40), self_69070, 'x')
        # Obtaining the member '__getitem__' of a type (line 2269)
        getitem___69072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 40), x_69071, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2269)
        subscript_call_result_69073 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 40), getitem___69072, n_69069)
        
        # Processing the call keyword arguments (line 2269)
        # Getting the type of 'extrapolate' (line 2269)
        extrapolate_69074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 63), 'extrapolate', False)
        keyword_69075 = extrapolate_69074
        kwargs_69076 = {'extrapolate': keyword_69075}
        # Getting the type of 'PPoly' (line 2269)
        PPoly_69066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 16), 'PPoly', False)
        # Obtaining the member 'construct_fast' of a type (line 2269)
        construct_fast_69067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 16), PPoly_69066, 'construct_fast')
        # Calling construct_fast(args, kwargs) (line 2269)
        construct_fast_call_result_69077 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 16), construct_fast_69067, *[c_69068, subscript_call_result_69073], **kwargs_69076)
        
        # Assigning a type to the variable 'p' (line 2269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 12), 'p', construct_fast_call_result_69077)
        
        # Assigning a Call to a Name (line 2270):
        
        # Assigning a Call to a Name (line 2270):
        
        # Call to integrate(...): (line 2270)
        # Processing the call arguments (line 2270)
        # Getting the type of 'a' (line 2270)
        a_69080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 30), 'a', False)
        # Getting the type of 'b' (line 2270)
        b_69081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 33), 'b', False)
        # Processing the call keyword arguments (line 2270)
        # Getting the type of 'extrapolate' (line 2270)
        extrapolate_69082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 48), 'extrapolate', False)
        keyword_69083 = extrapolate_69082
        kwargs_69084 = {'extrapolate': keyword_69083}
        # Getting the type of 'p' (line 2270)
        p_69078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 18), 'p', False)
        # Obtaining the member 'integrate' of a type (line 2270)
        integrate_69079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 18), p_69078, 'integrate')
        # Calling integrate(args, kwargs) (line 2270)
        integrate_call_result_69085 = invoke(stypy.reporting.localization.Localization(__file__, 2270, 18), integrate_69079, *[a_69080, b_69081], **kwargs_69084)
        
        # Assigning a type to the variable 'out' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 12), 'out', integrate_call_result_69085)
        
        # Assigning a Call to a Name (line 2271):
        
        # Assigning a Call to a Name (line 2271):
        
        # Call to reshape(...): (line 2271)
        # Processing the call arguments (line 2271)
        
        # Obtaining the type of the subscript
        int_69088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2271, 36), 'int')
        slice_69089 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2271, 28), int_69088, None, None)
        # Getting the type of 'c' (line 2271)
        c_69090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2271, 28), 'c', False)
        # Obtaining the member 'shape' of a type (line 2271)
        shape_69091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2271, 28), c_69090, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2271)
        getitem___69092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2271, 28), shape_69091, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2271)
        subscript_call_result_69093 = invoke(stypy.reporting.localization.Localization(__file__, 2271, 28), getitem___69092, slice_69089)
        
        # Processing the call keyword arguments (line 2271)
        kwargs_69094 = {}
        # Getting the type of 'out' (line 2271)
        out_69086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2271, 16), 'out', False)
        # Obtaining the member 'reshape' of a type (line 2271)
        reshape_69087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2271, 16), out_69086, 'reshape')
        # Calling reshape(args, kwargs) (line 2271)
        reshape_call_result_69095 = invoke(stypy.reporting.localization.Localization(__file__, 2271, 16), reshape_69087, *[subscript_call_result_69093], **kwargs_69094)
        
        # Assigning a type to the variable 'c' (line 2271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2271, 12), 'c', reshape_call_result_69095)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'c' (line 2273)
        c_69096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 15), 'c')
        # Assigning a type to the variable 'stypy_return_type' (line 2273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2273, 8), 'stypy_return_type', c_69096)
        
        # ################# End of 'integrate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'integrate' in the type store
        # Getting the type of 'stypy_return_type' (line 2227)
        stypy_return_type_69097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_69097)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'integrate'
        return stypy_return_type_69097


# Assigning a type to the variable 'NdPPoly' (line 1847)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1847, 0), 'NdPPoly', NdPPoly)
# Declaration of the 'RegularGridInterpolator' class

class RegularGridInterpolator(object, ):
    str_69098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2371, (-1)), 'str', '\n    Interpolation on a regular grid in arbitrary dimensions\n\n    The data must be defined on a regular grid; the grid spacing however may be\n    uneven.  Linear and nearest-neighbour interpolation are supported. After\n    setting up the interpolator object, the interpolation method (*linear* or\n    *nearest*) may be chosen at each evaluation.\n\n    Parameters\n    ----------\n    points : tuple of ndarray of float, with shapes (m1, ), ..., (mn, )\n        The points defining the regular grid in n dimensions.\n\n    values : array_like, shape (m1, ..., mn, ...)\n        The data on the regular grid in n dimensions.\n\n    method : str, optional\n        The method of interpolation to perform. Supported are "linear" and\n        "nearest". This parameter will become the default for the object\'s\n        ``__call__`` method. Default is "linear".\n\n    bounds_error : bool, optional\n        If True, when interpolated values are requested outside of the\n        domain of the input data, a ValueError is raised.\n        If False, then `fill_value` is used.\n\n    fill_value : number, optional\n        If provided, the value to use for points outside of the\n        interpolation domain. If None, values outside\n        the domain are extrapolated.\n\n    Methods\n    -------\n    __call__\n\n    Notes\n    -----\n    Contrary to LinearNDInterpolator and NearestNDInterpolator, this class\n    avoids expensive triangulation of the input data by taking advantage of the\n    regular grid structure.\n\n    If any of `points` have a dimension of size 1, linear interpolation will\n    return an array of `nan` values. Nearest-neighbor interpolation will work\n    as usual in this case.\n\n    .. versionadded:: 0.14\n\n    Examples\n    --------\n    Evaluate a simple example function on the points of a 3D grid:\n\n    >>> from scipy.interpolate import RegularGridInterpolator\n    >>> def f(x, y, z):\n    ...     return 2 * x**3 + 3 * y**2 - z\n    >>> x = np.linspace(1, 4, 11)\n    >>> y = np.linspace(4, 7, 22)\n    >>> z = np.linspace(7, 9, 33)\n    >>> data = f(*np.meshgrid(x, y, z, indexing=\'ij\', sparse=True))\n\n    ``data`` is now a 3D array with ``data[i,j,k] = f(x[i], y[j], z[k])``.\n    Next, define an interpolating function from this data:\n\n    >>> my_interpolating_function = RegularGridInterpolator((x, y, z), data)\n\n    Evaluate the interpolating function at the two points\n    ``(x,y,z) = (2.1, 6.2, 8.3)`` and ``(3.3, 5.2, 7.1)``:\n\n    >>> pts = np.array([[2.1, 6.2, 8.3], [3.3, 5.2, 7.1]])\n    >>> my_interpolating_function(pts)\n    array([ 125.80469388,  146.30069388])\n\n    which is indeed a close approximation to\n    ``[f(2.1, 6.2, 8.3), f(3.3, 5.2, 7.1)]``.\n\n    See also\n    --------\n    NearestNDInterpolator : Nearest neighbour interpolation on unstructured\n                            data in N dimensions\n\n    LinearNDInterpolator : Piecewise linear interpolant on unstructured data\n                           in N dimensions\n\n    References\n    ----------\n    .. [1] Python package *regulargrid* by Johannes Buchner, see\n           https://pypi.python.org/pypi/regulargrid/\n    .. [2] Trilinear interpolation. (2013, January 17). In Wikipedia, The Free\n           Encyclopedia. Retrieved 27 Feb 2013 01:28.\n           http://en.wikipedia.org/w/index.php?title=Trilinear_interpolation&oldid=533448871\n    .. [3] Weiser, Alan, and Sergio E. Zarantonello. "A note on piecewise linear\n           and multilinear table interpolation in many dimensions." MATH.\n           COMPUT. 50.181 (1988): 189-196.\n           http://www.ams.org/journals/mcom/1988-50-181/S0025-5718-1988-0917826-0/S0025-5718-1988-0917826-0.pdf\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_69099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2375, 46), 'str', 'linear')
        # Getting the type of 'True' (line 2375)
        True_69100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 69), 'True')
        # Getting the type of 'np' (line 2376)
        np_69101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 28), 'np')
        # Obtaining the member 'nan' of a type (line 2376)
        nan_69102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2376, 28), np_69101, 'nan')
        defaults = [str_69099, True_69100, nan_69102]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2375, 4, False)
        # Assigning a type to the variable 'self' (line 2376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2376, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularGridInterpolator.__init__', ['points', 'values', 'method', 'bounds_error', 'fill_value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['points', 'values', 'method', 'bounds_error', 'fill_value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Getting the type of 'method' (line 2377)
        method_69103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 11), 'method')
        
        # Obtaining an instance of the builtin type 'list' (line 2377)
        list_69104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2377, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2377)
        # Adding element type (line 2377)
        str_69105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2377, 26), 'str', 'linear')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2377, 25), list_69104, str_69105)
        # Adding element type (line 2377)
        str_69106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2377, 36), 'str', 'nearest')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2377, 25), list_69104, str_69106)
        
        # Applying the binary operator 'notin' (line 2377)
        result_contains_69107 = python_operator(stypy.reporting.localization.Localization(__file__, 2377, 11), 'notin', method_69103, list_69104)
        
        # Testing the type of an if condition (line 2377)
        if_condition_69108 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2377, 8), result_contains_69107)
        # Assigning a type to the variable 'if_condition_69108' (line 2377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2377, 8), 'if_condition_69108', if_condition_69108)
        # SSA begins for if statement (line 2377)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2378)
        # Processing the call arguments (line 2378)
        str_69110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2378, 29), 'str', "Method '%s' is not defined")
        # Getting the type of 'method' (line 2378)
        method_69111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 60), 'method', False)
        # Applying the binary operator '%' (line 2378)
        result_mod_69112 = python_operator(stypy.reporting.localization.Localization(__file__, 2378, 29), '%', str_69110, method_69111)
        
        # Processing the call keyword arguments (line 2378)
        kwargs_69113 = {}
        # Getting the type of 'ValueError' (line 2378)
        ValueError_69109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2378)
        ValueError_call_result_69114 = invoke(stypy.reporting.localization.Localization(__file__, 2378, 18), ValueError_69109, *[result_mod_69112], **kwargs_69113)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2378, 12), ValueError_call_result_69114, 'raise parameter', BaseException)
        # SSA join for if statement (line 2377)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2379):
        
        # Assigning a Name to a Attribute (line 2379):
        # Getting the type of 'method' (line 2379)
        method_69115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 22), 'method')
        # Getting the type of 'self' (line 2379)
        self_69116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 8), 'self')
        # Setting the type of the member 'method' of a type (line 2379)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2379, 8), self_69116, 'method', method_69115)
        
        # Assigning a Name to a Attribute (line 2380):
        
        # Assigning a Name to a Attribute (line 2380):
        # Getting the type of 'bounds_error' (line 2380)
        bounds_error_69117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 28), 'bounds_error')
        # Getting the type of 'self' (line 2380)
        self_69118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 8), 'self')
        # Setting the type of the member 'bounds_error' of a type (line 2380)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2380, 8), self_69118, 'bounds_error', bounds_error_69117)
        
        # Type idiom detected: calculating its left and rigth part (line 2382)
        str_69119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 31), 'str', 'ndim')
        # Getting the type of 'values' (line 2382)
        values_69120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 23), 'values')
        
        (may_be_69121, more_types_in_union_69122) = may_not_provide_member(str_69119, values_69120)

        if may_be_69121:

            if more_types_in_union_69122:
                # Runtime conditional SSA (line 2382)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'values' (line 2382)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 8), 'values', remove_member_provider_from_union(values_69120, 'ndim'))
            
            # Assigning a Call to a Name (line 2384):
            
            # Assigning a Call to a Name (line 2384):
            
            # Call to asarray(...): (line 2384)
            # Processing the call arguments (line 2384)
            # Getting the type of 'values' (line 2384)
            values_69125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 32), 'values', False)
            # Processing the call keyword arguments (line 2384)
            kwargs_69126 = {}
            # Getting the type of 'np' (line 2384)
            np_69123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 21), 'np', False)
            # Obtaining the member 'asarray' of a type (line 2384)
            asarray_69124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2384, 21), np_69123, 'asarray')
            # Calling asarray(args, kwargs) (line 2384)
            asarray_call_result_69127 = invoke(stypy.reporting.localization.Localization(__file__, 2384, 21), asarray_69124, *[values_69125], **kwargs_69126)
            
            # Assigning a type to the variable 'values' (line 2384)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2384, 12), 'values', asarray_call_result_69127)

            if more_types_in_union_69122:
                # SSA join for if statement (line 2382)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to len(...): (line 2386)
        # Processing the call arguments (line 2386)
        # Getting the type of 'points' (line 2386)
        points_69129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 15), 'points', False)
        # Processing the call keyword arguments (line 2386)
        kwargs_69130 = {}
        # Getting the type of 'len' (line 2386)
        len_69128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 11), 'len', False)
        # Calling len(args, kwargs) (line 2386)
        len_call_result_69131 = invoke(stypy.reporting.localization.Localization(__file__, 2386, 11), len_69128, *[points_69129], **kwargs_69130)
        
        # Getting the type of 'values' (line 2386)
        values_69132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 25), 'values')
        # Obtaining the member 'ndim' of a type (line 2386)
        ndim_69133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2386, 25), values_69132, 'ndim')
        # Applying the binary operator '>' (line 2386)
        result_gt_69134 = python_operator(stypy.reporting.localization.Localization(__file__, 2386, 11), '>', len_call_result_69131, ndim_69133)
        
        # Testing the type of an if condition (line 2386)
        if_condition_69135 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2386, 8), result_gt_69134)
        # Assigning a type to the variable 'if_condition_69135' (line 2386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2386, 8), 'if_condition_69135', if_condition_69135)
        # SSA begins for if statement (line 2386)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2387)
        # Processing the call arguments (line 2387)
        str_69137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2387, 29), 'str', 'There are %d point arrays, but values has %d dimensions')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2388)
        tuple_69138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2388, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2388)
        # Adding element type (line 2388)
        
        # Call to len(...): (line 2388)
        # Processing the call arguments (line 2388)
        # Getting the type of 'points' (line 2388)
        points_69140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 49), 'points', False)
        # Processing the call keyword arguments (line 2388)
        kwargs_69141 = {}
        # Getting the type of 'len' (line 2388)
        len_69139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 45), 'len', False)
        # Calling len(args, kwargs) (line 2388)
        len_call_result_69142 = invoke(stypy.reporting.localization.Localization(__file__, 2388, 45), len_69139, *[points_69140], **kwargs_69141)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2388, 45), tuple_69138, len_call_result_69142)
        # Adding element type (line 2388)
        # Getting the type of 'values' (line 2388)
        values_69143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 58), 'values', False)
        # Obtaining the member 'ndim' of a type (line 2388)
        ndim_69144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2388, 58), values_69143, 'ndim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2388, 45), tuple_69138, ndim_69144)
        
        # Applying the binary operator '%' (line 2387)
        result_mod_69145 = python_operator(stypy.reporting.localization.Localization(__file__, 2387, 29), '%', str_69137, tuple_69138)
        
        # Processing the call keyword arguments (line 2387)
        kwargs_69146 = {}
        # Getting the type of 'ValueError' (line 2387)
        ValueError_69136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2387)
        ValueError_call_result_69147 = invoke(stypy.reporting.localization.Localization(__file__, 2387, 18), ValueError_69136, *[result_mod_69145], **kwargs_69146)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2387, 12), ValueError_call_result_69147, 'raise parameter', BaseException)
        # SSA join for if statement (line 2386)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Call to hasattr(...): (line 2390)
        # Processing the call arguments (line 2390)
        # Getting the type of 'values' (line 2390)
        values_69149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 19), 'values', False)
        str_69150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2390, 27), 'str', 'dtype')
        # Processing the call keyword arguments (line 2390)
        kwargs_69151 = {}
        # Getting the type of 'hasattr' (line 2390)
        hasattr_69148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 11), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 2390)
        hasattr_call_result_69152 = invoke(stypy.reporting.localization.Localization(__file__, 2390, 11), hasattr_69148, *[values_69149, str_69150], **kwargs_69151)
        
        
        # Call to hasattr(...): (line 2390)
        # Processing the call arguments (line 2390)
        # Getting the type of 'values' (line 2390)
        values_69154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 48), 'values', False)
        str_69155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2390, 56), 'str', 'astype')
        # Processing the call keyword arguments (line 2390)
        kwargs_69156 = {}
        # Getting the type of 'hasattr' (line 2390)
        hasattr_69153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 40), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 2390)
        hasattr_call_result_69157 = invoke(stypy.reporting.localization.Localization(__file__, 2390, 40), hasattr_69153, *[values_69154, str_69155], **kwargs_69156)
        
        # Applying the binary operator 'and' (line 2390)
        result_and_keyword_69158 = python_operator(stypy.reporting.localization.Localization(__file__, 2390, 11), 'and', hasattr_call_result_69152, hasattr_call_result_69157)
        
        # Testing the type of an if condition (line 2390)
        if_condition_69159 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2390, 8), result_and_keyword_69158)
        # Assigning a type to the variable 'if_condition_69159' (line 2390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2390, 8), 'if_condition_69159', if_condition_69159)
        # SSA begins for if statement (line 2390)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to issubdtype(...): (line 2391)
        # Processing the call arguments (line 2391)
        # Getting the type of 'values' (line 2391)
        values_69162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 33), 'values', False)
        # Obtaining the member 'dtype' of a type (line 2391)
        dtype_69163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2391, 33), values_69162, 'dtype')
        # Getting the type of 'np' (line 2391)
        np_69164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 47), 'np', False)
        # Obtaining the member 'inexact' of a type (line 2391)
        inexact_69165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2391, 47), np_69164, 'inexact')
        # Processing the call keyword arguments (line 2391)
        kwargs_69166 = {}
        # Getting the type of 'np' (line 2391)
        np_69160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 19), 'np', False)
        # Obtaining the member 'issubdtype' of a type (line 2391)
        issubdtype_69161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2391, 19), np_69160, 'issubdtype')
        # Calling issubdtype(args, kwargs) (line 2391)
        issubdtype_call_result_69167 = invoke(stypy.reporting.localization.Localization(__file__, 2391, 19), issubdtype_69161, *[dtype_69163, inexact_69165], **kwargs_69166)
        
        # Applying the 'not' unary operator (line 2391)
        result_not__69168 = python_operator(stypy.reporting.localization.Localization(__file__, 2391, 15), 'not', issubdtype_call_result_69167)
        
        # Testing the type of an if condition (line 2391)
        if_condition_69169 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2391, 12), result_not__69168)
        # Assigning a type to the variable 'if_condition_69169' (line 2391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2391, 12), 'if_condition_69169', if_condition_69169)
        # SSA begins for if statement (line 2391)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2392):
        
        # Assigning a Call to a Name (line 2392):
        
        # Call to astype(...): (line 2392)
        # Processing the call arguments (line 2392)
        # Getting the type of 'float' (line 2392)
        float_69172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 39), 'float', False)
        # Processing the call keyword arguments (line 2392)
        kwargs_69173 = {}
        # Getting the type of 'values' (line 2392)
        values_69170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 25), 'values', False)
        # Obtaining the member 'astype' of a type (line 2392)
        astype_69171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2392, 25), values_69170, 'astype')
        # Calling astype(args, kwargs) (line 2392)
        astype_call_result_69174 = invoke(stypy.reporting.localization.Localization(__file__, 2392, 25), astype_69171, *[float_69172], **kwargs_69173)
        
        # Assigning a type to the variable 'values' (line 2392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 16), 'values', astype_call_result_69174)
        # SSA join for if statement (line 2391)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2390)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2394):
        
        # Assigning a Name to a Attribute (line 2394):
        # Getting the type of 'fill_value' (line 2394)
        fill_value_69175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 26), 'fill_value')
        # Getting the type of 'self' (line 2394)
        self_69176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'self')
        # Setting the type of the member 'fill_value' of a type (line 2394)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2394, 8), self_69176, 'fill_value', fill_value_69175)
        
        # Type idiom detected: calculating its left and rigth part (line 2395)
        # Getting the type of 'fill_value' (line 2395)
        fill_value_69177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 8), 'fill_value')
        # Getting the type of 'None' (line 2395)
        None_69178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 29), 'None')
        
        (may_be_69179, more_types_in_union_69180) = may_not_be_none(fill_value_69177, None_69178)

        if may_be_69179:

            if more_types_in_union_69180:
                # Runtime conditional SSA (line 2395)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 2396):
            
            # Assigning a Attribute to a Name (line 2396):
            
            # Call to asarray(...): (line 2396)
            # Processing the call arguments (line 2396)
            # Getting the type of 'fill_value' (line 2396)
            fill_value_69183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 42), 'fill_value', False)
            # Processing the call keyword arguments (line 2396)
            kwargs_69184 = {}
            # Getting the type of 'np' (line 2396)
            np_69181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 31), 'np', False)
            # Obtaining the member 'asarray' of a type (line 2396)
            asarray_69182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2396, 31), np_69181, 'asarray')
            # Calling asarray(args, kwargs) (line 2396)
            asarray_call_result_69185 = invoke(stypy.reporting.localization.Localization(__file__, 2396, 31), asarray_69182, *[fill_value_69183], **kwargs_69184)
            
            # Obtaining the member 'dtype' of a type (line 2396)
            dtype_69186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2396, 31), asarray_call_result_69185, 'dtype')
            # Assigning a type to the variable 'fill_value_dtype' (line 2396)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2396, 12), 'fill_value_dtype', dtype_69186)
            
            
            # Evaluating a boolean operation
            
            # Call to hasattr(...): (line 2397)
            # Processing the call arguments (line 2397)
            # Getting the type of 'values' (line 2397)
            values_69188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 24), 'values', False)
            str_69189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2397, 32), 'str', 'dtype')
            # Processing the call keyword arguments (line 2397)
            kwargs_69190 = {}
            # Getting the type of 'hasattr' (line 2397)
            hasattr_69187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 16), 'hasattr', False)
            # Calling hasattr(args, kwargs) (line 2397)
            hasattr_call_result_69191 = invoke(stypy.reporting.localization.Localization(__file__, 2397, 16), hasattr_69187, *[values_69188, str_69189], **kwargs_69190)
            
            
            
            # Call to can_cast(...): (line 2398)
            # Processing the call arguments (line 2398)
            # Getting the type of 'fill_value_dtype' (line 2398)
            fill_value_dtype_69194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 32), 'fill_value_dtype', False)
            # Getting the type of 'values' (line 2398)
            values_69195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 50), 'values', False)
            # Obtaining the member 'dtype' of a type (line 2398)
            dtype_69196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2398, 50), values_69195, 'dtype')
            # Processing the call keyword arguments (line 2398)
            str_69197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2399, 40), 'str', 'same_kind')
            keyword_69198 = str_69197
            kwargs_69199 = {'casting': keyword_69198}
            # Getting the type of 'np' (line 2398)
            np_69192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 20), 'np', False)
            # Obtaining the member 'can_cast' of a type (line 2398)
            can_cast_69193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2398, 20), np_69192, 'can_cast')
            # Calling can_cast(args, kwargs) (line 2398)
            can_cast_call_result_69200 = invoke(stypy.reporting.localization.Localization(__file__, 2398, 20), can_cast_69193, *[fill_value_dtype_69194, dtype_69196], **kwargs_69199)
            
            # Applying the 'not' unary operator (line 2397)
            result_not__69201 = python_operator(stypy.reporting.localization.Localization(__file__, 2397, 45), 'not', can_cast_call_result_69200)
            
            # Applying the binary operator 'and' (line 2397)
            result_and_keyword_69202 = python_operator(stypy.reporting.localization.Localization(__file__, 2397, 16), 'and', hasattr_call_result_69191, result_not__69201)
            
            # Testing the type of an if condition (line 2397)
            if_condition_69203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2397, 12), result_and_keyword_69202)
            # Assigning a type to the variable 'if_condition_69203' (line 2397)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2397, 12), 'if_condition_69203', if_condition_69203)
            # SSA begins for if statement (line 2397)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 2400)
            # Processing the call arguments (line 2400)
            str_69205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2400, 33), 'str', "fill_value must be either 'None' or of a type compatible with values")
            # Processing the call keyword arguments (line 2400)
            kwargs_69206 = {}
            # Getting the type of 'ValueError' (line 2400)
            ValueError_69204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 2400)
            ValueError_call_result_69207 = invoke(stypy.reporting.localization.Localization(__file__, 2400, 22), ValueError_69204, *[str_69205], **kwargs_69206)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2400, 16), ValueError_call_result_69207, 'raise parameter', BaseException)
            # SSA join for if statement (line 2397)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_69180:
                # SSA join for if statement (line 2395)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to enumerate(...): (line 2403)
        # Processing the call arguments (line 2403)
        # Getting the type of 'points' (line 2403)
        points_69209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 30), 'points', False)
        # Processing the call keyword arguments (line 2403)
        kwargs_69210 = {}
        # Getting the type of 'enumerate' (line 2403)
        enumerate_69208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 20), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 2403)
        enumerate_call_result_69211 = invoke(stypy.reporting.localization.Localization(__file__, 2403, 20), enumerate_69208, *[points_69209], **kwargs_69210)
        
        # Testing the type of a for loop iterable (line 2403)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2403, 8), enumerate_call_result_69211)
        # Getting the type of the for loop variable (line 2403)
        for_loop_var_69212 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2403, 8), enumerate_call_result_69211)
        # Assigning a type to the variable 'i' (line 2403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2403, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2403, 8), for_loop_var_69212))
        # Assigning a type to the variable 'p' (line 2403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2403, 8), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2403, 8), for_loop_var_69212))
        # SSA begins for a for statement (line 2403)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Call to all(...): (line 2404)
        # Processing the call arguments (line 2404)
        
        
        # Call to diff(...): (line 2404)
        # Processing the call arguments (line 2404)
        # Getting the type of 'p' (line 2404)
        p_69217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2404, 34), 'p', False)
        # Processing the call keyword arguments (line 2404)
        kwargs_69218 = {}
        # Getting the type of 'np' (line 2404)
        np_69215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2404, 26), 'np', False)
        # Obtaining the member 'diff' of a type (line 2404)
        diff_69216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2404, 26), np_69215, 'diff')
        # Calling diff(args, kwargs) (line 2404)
        diff_call_result_69219 = invoke(stypy.reporting.localization.Localization(__file__, 2404, 26), diff_69216, *[p_69217], **kwargs_69218)
        
        float_69220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2404, 39), 'float')
        # Applying the binary operator '>' (line 2404)
        result_gt_69221 = python_operator(stypy.reporting.localization.Localization(__file__, 2404, 26), '>', diff_call_result_69219, float_69220)
        
        # Processing the call keyword arguments (line 2404)
        kwargs_69222 = {}
        # Getting the type of 'np' (line 2404)
        np_69213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2404, 19), 'np', False)
        # Obtaining the member 'all' of a type (line 2404)
        all_69214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2404, 19), np_69213, 'all')
        # Calling all(args, kwargs) (line 2404)
        all_call_result_69223 = invoke(stypy.reporting.localization.Localization(__file__, 2404, 19), all_69214, *[result_gt_69221], **kwargs_69222)
        
        # Applying the 'not' unary operator (line 2404)
        result_not__69224 = python_operator(stypy.reporting.localization.Localization(__file__, 2404, 15), 'not', all_call_result_69223)
        
        # Testing the type of an if condition (line 2404)
        if_condition_69225 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2404, 12), result_not__69224)
        # Assigning a type to the variable 'if_condition_69225' (line 2404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2404, 12), 'if_condition_69225', if_condition_69225)
        # SSA begins for if statement (line 2404)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2405)
        # Processing the call arguments (line 2405)
        str_69227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2405, 33), 'str', 'The points in dimension %d must be strictly ascending')
        # Getting the type of 'i' (line 2406)
        i_69228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 47), 'i', False)
        # Applying the binary operator '%' (line 2405)
        result_mod_69229 = python_operator(stypy.reporting.localization.Localization(__file__, 2405, 33), '%', str_69227, i_69228)
        
        # Processing the call keyword arguments (line 2405)
        kwargs_69230 = {}
        # Getting the type of 'ValueError' (line 2405)
        ValueError_69226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2405)
        ValueError_call_result_69231 = invoke(stypy.reporting.localization.Localization(__file__, 2405, 22), ValueError_69226, *[result_mod_69229], **kwargs_69230)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2405, 16), ValueError_call_result_69231, 'raise parameter', BaseException)
        # SSA join for if statement (line 2404)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        
        # Call to asarray(...): (line 2407)
        # Processing the call arguments (line 2407)
        # Getting the type of 'p' (line 2407)
        p_69234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2407, 30), 'p', False)
        # Processing the call keyword arguments (line 2407)
        kwargs_69235 = {}
        # Getting the type of 'np' (line 2407)
        np_69232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2407, 19), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2407)
        asarray_69233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2407, 19), np_69232, 'asarray')
        # Calling asarray(args, kwargs) (line 2407)
        asarray_call_result_69236 = invoke(stypy.reporting.localization.Localization(__file__, 2407, 19), asarray_69233, *[p_69234], **kwargs_69235)
        
        # Obtaining the member 'ndim' of a type (line 2407)
        ndim_69237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2407, 19), asarray_call_result_69236, 'ndim')
        int_69238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2407, 41), 'int')
        # Applying the binary operator '==' (line 2407)
        result_eq_69239 = python_operator(stypy.reporting.localization.Localization(__file__, 2407, 19), '==', ndim_69237, int_69238)
        
        # Applying the 'not' unary operator (line 2407)
        result_not__69240 = python_operator(stypy.reporting.localization.Localization(__file__, 2407, 15), 'not', result_eq_69239)
        
        # Testing the type of an if condition (line 2407)
        if_condition_69241 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2407, 12), result_not__69240)
        # Assigning a type to the variable 'if_condition_69241' (line 2407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2407, 12), 'if_condition_69241', if_condition_69241)
        # SSA begins for if statement (line 2407)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2408)
        # Processing the call arguments (line 2408)
        str_69243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2408, 33), 'str', 'The points in dimension %d must be 1-dimensional')
        # Getting the type of 'i' (line 2409)
        i_69244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 51), 'i', False)
        # Applying the binary operator '%' (line 2408)
        result_mod_69245 = python_operator(stypy.reporting.localization.Localization(__file__, 2408, 33), '%', str_69243, i_69244)
        
        # Processing the call keyword arguments (line 2408)
        kwargs_69246 = {}
        # Getting the type of 'ValueError' (line 2408)
        ValueError_69242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2408)
        ValueError_call_result_69247 = invoke(stypy.reporting.localization.Localization(__file__, 2408, 22), ValueError_69242, *[result_mod_69245], **kwargs_69246)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2408, 16), ValueError_call_result_69247, 'raise parameter', BaseException)
        # SSA join for if statement (line 2407)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 2410)
        i_69248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 32), 'i')
        # Getting the type of 'values' (line 2410)
        values_69249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 19), 'values')
        # Obtaining the member 'shape' of a type (line 2410)
        shape_69250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2410, 19), values_69249, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2410)
        getitem___69251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2410, 19), shape_69250, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2410)
        subscript_call_result_69252 = invoke(stypy.reporting.localization.Localization(__file__, 2410, 19), getitem___69251, i_69248)
        
        
        # Call to len(...): (line 2410)
        # Processing the call arguments (line 2410)
        # Getting the type of 'p' (line 2410)
        p_69254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 42), 'p', False)
        # Processing the call keyword arguments (line 2410)
        kwargs_69255 = {}
        # Getting the type of 'len' (line 2410)
        len_69253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 38), 'len', False)
        # Calling len(args, kwargs) (line 2410)
        len_call_result_69256 = invoke(stypy.reporting.localization.Localization(__file__, 2410, 38), len_69253, *[p_69254], **kwargs_69255)
        
        # Applying the binary operator '==' (line 2410)
        result_eq_69257 = python_operator(stypy.reporting.localization.Localization(__file__, 2410, 19), '==', subscript_call_result_69252, len_call_result_69256)
        
        # Applying the 'not' unary operator (line 2410)
        result_not__69258 = python_operator(stypy.reporting.localization.Localization(__file__, 2410, 15), 'not', result_eq_69257)
        
        # Testing the type of an if condition (line 2410)
        if_condition_69259 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2410, 12), result_not__69258)
        # Assigning a type to the variable 'if_condition_69259' (line 2410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2410, 12), 'if_condition_69259', if_condition_69259)
        # SSA begins for if statement (line 2410)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2411)
        # Processing the call arguments (line 2411)
        str_69261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2411, 33), 'str', 'There are %d points and %d values in dimension %d')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2412)
        tuple_69262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2412, 51), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2412)
        # Adding element type (line 2412)
        
        # Call to len(...): (line 2412)
        # Processing the call arguments (line 2412)
        # Getting the type of 'p' (line 2412)
        p_69264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 55), 'p', False)
        # Processing the call keyword arguments (line 2412)
        kwargs_69265 = {}
        # Getting the type of 'len' (line 2412)
        len_69263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 51), 'len', False)
        # Calling len(args, kwargs) (line 2412)
        len_call_result_69266 = invoke(stypy.reporting.localization.Localization(__file__, 2412, 51), len_69263, *[p_69264], **kwargs_69265)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2412, 51), tuple_69262, len_call_result_69266)
        # Adding element type (line 2412)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 2412)
        i_69267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 72), 'i', False)
        # Getting the type of 'values' (line 2412)
        values_69268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 59), 'values', False)
        # Obtaining the member 'shape' of a type (line 2412)
        shape_69269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2412, 59), values_69268, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2412)
        getitem___69270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2412, 59), shape_69269, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2412)
        subscript_call_result_69271 = invoke(stypy.reporting.localization.Localization(__file__, 2412, 59), getitem___69270, i_69267)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2412, 51), tuple_69262, subscript_call_result_69271)
        # Adding element type (line 2412)
        # Getting the type of 'i' (line 2412)
        i_69272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 76), 'i', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2412, 51), tuple_69262, i_69272)
        
        # Applying the binary operator '%' (line 2411)
        result_mod_69273 = python_operator(stypy.reporting.localization.Localization(__file__, 2411, 33), '%', str_69261, tuple_69262)
        
        # Processing the call keyword arguments (line 2411)
        kwargs_69274 = {}
        # Getting the type of 'ValueError' (line 2411)
        ValueError_69260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2411)
        ValueError_call_result_69275 = invoke(stypy.reporting.localization.Localization(__file__, 2411, 22), ValueError_69260, *[result_mod_69273], **kwargs_69274)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2411, 16), ValueError_call_result_69275, 'raise parameter', BaseException)
        # SSA join for if statement (line 2410)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 2413):
        
        # Assigning a Call to a Attribute (line 2413):
        
        # Call to tuple(...): (line 2413)
        # Processing the call arguments (line 2413)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'points' (line 2413)
        points_69282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 50), 'points', False)
        comprehension_69283 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2413, 27), points_69282)
        # Assigning a type to the variable 'p' (line 2413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 27), 'p', comprehension_69283)
        
        # Call to asarray(...): (line 2413)
        # Processing the call arguments (line 2413)
        # Getting the type of 'p' (line 2413)
        p_69279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 38), 'p', False)
        # Processing the call keyword arguments (line 2413)
        kwargs_69280 = {}
        # Getting the type of 'np' (line 2413)
        np_69277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 27), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2413)
        asarray_69278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2413, 27), np_69277, 'asarray')
        # Calling asarray(args, kwargs) (line 2413)
        asarray_call_result_69281 = invoke(stypy.reporting.localization.Localization(__file__, 2413, 27), asarray_69278, *[p_69279], **kwargs_69280)
        
        list_69284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2413, 27), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2413, 27), list_69284, asarray_call_result_69281)
        # Processing the call keyword arguments (line 2413)
        kwargs_69285 = {}
        # Getting the type of 'tuple' (line 2413)
        tuple_69276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 20), 'tuple', False)
        # Calling tuple(args, kwargs) (line 2413)
        tuple_call_result_69286 = invoke(stypy.reporting.localization.Localization(__file__, 2413, 20), tuple_69276, *[list_69284], **kwargs_69285)
        
        # Getting the type of 'self' (line 2413)
        self_69287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 8), 'self')
        # Setting the type of the member 'grid' of a type (line 2413)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2413, 8), self_69287, 'grid', tuple_call_result_69286)
        
        # Assigning a Name to a Attribute (line 2414):
        
        # Assigning a Name to a Attribute (line 2414):
        # Getting the type of 'values' (line 2414)
        values_69288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 22), 'values')
        # Getting the type of 'self' (line 2414)
        self_69289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 8), 'self')
        # Setting the type of the member 'values' of a type (line 2414)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2414, 8), self_69289, 'values', values_69288)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 2416)
        None_69290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 34), 'None')
        defaults = [None_69290]
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 2416, 4, False)
        # Assigning a type to the variable 'self' (line 2417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2417, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularGridInterpolator.__call__.__dict__.__setitem__('stypy_localization', localization)
        RegularGridInterpolator.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularGridInterpolator.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularGridInterpolator.__call__.__dict__.__setitem__('stypy_function_name', 'RegularGridInterpolator.__call__')
        RegularGridInterpolator.__call__.__dict__.__setitem__('stypy_param_names_list', ['xi', 'method'])
        RegularGridInterpolator.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularGridInterpolator.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularGridInterpolator.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularGridInterpolator.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularGridInterpolator.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularGridInterpolator.__call__.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularGridInterpolator.__call__', ['xi', 'method'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['xi', 'method'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_69291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2429, (-1)), 'str', '\n        Interpolation at coordinates\n\n        Parameters\n        ----------\n        xi : ndarray of shape (..., ndim)\n            The coordinates to sample the gridded data at\n\n        method : str\n            The method of interpolation to perform. Supported are "linear" and\n            "nearest".\n\n        ')
        
        # Assigning a IfExp to a Name (line 2430):
        
        # Assigning a IfExp to a Name (line 2430):
        
        
        # Getting the type of 'method' (line 2430)
        method_69292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 32), 'method')
        # Getting the type of 'None' (line 2430)
        None_69293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 42), 'None')
        # Applying the binary operator 'is' (line 2430)
        result_is__69294 = python_operator(stypy.reporting.localization.Localization(__file__, 2430, 32), 'is', method_69292, None_69293)
        
        # Testing the type of an if expression (line 2430)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2430, 17), result_is__69294)
        # SSA begins for if expression (line 2430)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'self' (line 2430)
        self_69295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 17), 'self')
        # Obtaining the member 'method' of a type (line 2430)
        method_69296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2430, 17), self_69295, 'method')
        # SSA branch for the else part of an if expression (line 2430)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'method' (line 2430)
        method_69297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 52), 'method')
        # SSA join for if expression (line 2430)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_69298 = union_type.UnionType.add(method_69296, method_69297)
        
        # Assigning a type to the variable 'method' (line 2430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 8), 'method', if_exp_69298)
        
        
        # Getting the type of 'method' (line 2431)
        method_69299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 11), 'method')
        
        # Obtaining an instance of the builtin type 'list' (line 2431)
        list_69300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2431, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2431)
        # Adding element type (line 2431)
        str_69301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2431, 26), 'str', 'linear')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2431, 25), list_69300, str_69301)
        # Adding element type (line 2431)
        str_69302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2431, 36), 'str', 'nearest')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2431, 25), list_69300, str_69302)
        
        # Applying the binary operator 'notin' (line 2431)
        result_contains_69303 = python_operator(stypy.reporting.localization.Localization(__file__, 2431, 11), 'notin', method_69299, list_69300)
        
        # Testing the type of an if condition (line 2431)
        if_condition_69304 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2431, 8), result_contains_69303)
        # Assigning a type to the variable 'if_condition_69304' (line 2431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2431, 8), 'if_condition_69304', if_condition_69304)
        # SSA begins for if statement (line 2431)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2432)
        # Processing the call arguments (line 2432)
        str_69306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2432, 29), 'str', "Method '%s' is not defined")
        # Getting the type of 'method' (line 2432)
        method_69307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 60), 'method', False)
        # Applying the binary operator '%' (line 2432)
        result_mod_69308 = python_operator(stypy.reporting.localization.Localization(__file__, 2432, 29), '%', str_69306, method_69307)
        
        # Processing the call keyword arguments (line 2432)
        kwargs_69309 = {}
        # Getting the type of 'ValueError' (line 2432)
        ValueError_69305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2432)
        ValueError_call_result_69310 = invoke(stypy.reporting.localization.Localization(__file__, 2432, 18), ValueError_69305, *[result_mod_69308], **kwargs_69309)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2432, 12), ValueError_call_result_69310, 'raise parameter', BaseException)
        # SSA join for if statement (line 2431)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2434):
        
        # Assigning a Call to a Name (line 2434):
        
        # Call to len(...): (line 2434)
        # Processing the call arguments (line 2434)
        # Getting the type of 'self' (line 2434)
        self_69312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 19), 'self', False)
        # Obtaining the member 'grid' of a type (line 2434)
        grid_69313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2434, 19), self_69312, 'grid')
        # Processing the call keyword arguments (line 2434)
        kwargs_69314 = {}
        # Getting the type of 'len' (line 2434)
        len_69311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 15), 'len', False)
        # Calling len(args, kwargs) (line 2434)
        len_call_result_69315 = invoke(stypy.reporting.localization.Localization(__file__, 2434, 15), len_69311, *[grid_69313], **kwargs_69314)
        
        # Assigning a type to the variable 'ndim' (line 2434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2434, 8), 'ndim', len_call_result_69315)
        
        # Assigning a Call to a Name (line 2435):
        
        # Assigning a Call to a Name (line 2435):
        
        # Call to _ndim_coords_from_arrays(...): (line 2435)
        # Processing the call arguments (line 2435)
        # Getting the type of 'xi' (line 2435)
        xi_69317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 38), 'xi', False)
        # Processing the call keyword arguments (line 2435)
        # Getting the type of 'ndim' (line 2435)
        ndim_69318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 47), 'ndim', False)
        keyword_69319 = ndim_69318
        kwargs_69320 = {'ndim': keyword_69319}
        # Getting the type of '_ndim_coords_from_arrays' (line 2435)
        _ndim_coords_from_arrays_69316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 13), '_ndim_coords_from_arrays', False)
        # Calling _ndim_coords_from_arrays(args, kwargs) (line 2435)
        _ndim_coords_from_arrays_call_result_69321 = invoke(stypy.reporting.localization.Localization(__file__, 2435, 13), _ndim_coords_from_arrays_69316, *[xi_69317], **kwargs_69320)
        
        # Assigning a type to the variable 'xi' (line 2435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2435, 8), 'xi', _ndim_coords_from_arrays_call_result_69321)
        
        
        
        # Obtaining the type of the subscript
        int_69322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2436, 20), 'int')
        # Getting the type of 'xi' (line 2436)
        xi_69323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 11), 'xi')
        # Obtaining the member 'shape' of a type (line 2436)
        shape_69324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2436, 11), xi_69323, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2436)
        getitem___69325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2436, 11), shape_69324, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2436)
        subscript_call_result_69326 = invoke(stypy.reporting.localization.Localization(__file__, 2436, 11), getitem___69325, int_69322)
        
        
        # Call to len(...): (line 2436)
        # Processing the call arguments (line 2436)
        # Getting the type of 'self' (line 2436)
        self_69328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 31), 'self', False)
        # Obtaining the member 'grid' of a type (line 2436)
        grid_69329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2436, 31), self_69328, 'grid')
        # Processing the call keyword arguments (line 2436)
        kwargs_69330 = {}
        # Getting the type of 'len' (line 2436)
        len_69327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 27), 'len', False)
        # Calling len(args, kwargs) (line 2436)
        len_call_result_69331 = invoke(stypy.reporting.localization.Localization(__file__, 2436, 27), len_69327, *[grid_69329], **kwargs_69330)
        
        # Applying the binary operator '!=' (line 2436)
        result_ne_69332 = python_operator(stypy.reporting.localization.Localization(__file__, 2436, 11), '!=', subscript_call_result_69326, len_call_result_69331)
        
        # Testing the type of an if condition (line 2436)
        if_condition_69333 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2436, 8), result_ne_69332)
        # Assigning a type to the variable 'if_condition_69333' (line 2436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2436, 8), 'if_condition_69333', if_condition_69333)
        # SSA begins for if statement (line 2436)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2437)
        # Processing the call arguments (line 2437)
        str_69335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2437, 29), 'str', 'The requested sample points xi have dimension %d, but this RegularGridInterpolator has dimension %d')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2439)
        tuple_69336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2439, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2439)
        # Adding element type (line 2439)
        
        # Obtaining the type of the subscript
        int_69337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2439, 56), 'int')
        # Getting the type of 'xi' (line 2439)
        xi_69338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 47), 'xi', False)
        # Obtaining the member 'shape' of a type (line 2439)
        shape_69339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 47), xi_69338, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2439)
        getitem___69340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 47), shape_69339, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2439)
        subscript_call_result_69341 = invoke(stypy.reporting.localization.Localization(__file__, 2439, 47), getitem___69340, int_69337)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2439, 47), tuple_69336, subscript_call_result_69341)
        # Adding element type (line 2439)
        # Getting the type of 'ndim' (line 2439)
        ndim_69342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 60), 'ndim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2439, 47), tuple_69336, ndim_69342)
        
        # Applying the binary operator '%' (line 2437)
        result_mod_69343 = python_operator(stypy.reporting.localization.Localization(__file__, 2437, 29), '%', str_69335, tuple_69336)
        
        # Processing the call keyword arguments (line 2437)
        kwargs_69344 = {}
        # Getting the type of 'ValueError' (line 2437)
        ValueError_69334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2437)
        ValueError_call_result_69345 = invoke(stypy.reporting.localization.Localization(__file__, 2437, 18), ValueError_69334, *[result_mod_69343], **kwargs_69344)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2437, 12), ValueError_call_result_69345, 'raise parameter', BaseException)
        # SSA join for if statement (line 2436)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 2441):
        
        # Assigning a Attribute to a Name (line 2441):
        # Getting the type of 'xi' (line 2441)
        xi_69346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 19), 'xi')
        # Obtaining the member 'shape' of a type (line 2441)
        shape_69347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2441, 19), xi_69346, 'shape')
        # Assigning a type to the variable 'xi_shape' (line 2441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2441, 8), 'xi_shape', shape_69347)
        
        # Assigning a Call to a Name (line 2442):
        
        # Assigning a Call to a Name (line 2442):
        
        # Call to reshape(...): (line 2442)
        # Processing the call arguments (line 2442)
        int_69350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2442, 24), 'int')
        
        # Obtaining the type of the subscript
        int_69351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2442, 37), 'int')
        # Getting the type of 'xi_shape' (line 2442)
        xi_shape_69352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 28), 'xi_shape', False)
        # Obtaining the member '__getitem__' of a type (line 2442)
        getitem___69353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 28), xi_shape_69352, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2442)
        subscript_call_result_69354 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 28), getitem___69353, int_69351)
        
        # Processing the call keyword arguments (line 2442)
        kwargs_69355 = {}
        # Getting the type of 'xi' (line 2442)
        xi_69348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 13), 'xi', False)
        # Obtaining the member 'reshape' of a type (line 2442)
        reshape_69349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 13), xi_69348, 'reshape')
        # Calling reshape(args, kwargs) (line 2442)
        reshape_call_result_69356 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 13), reshape_69349, *[int_69350, subscript_call_result_69354], **kwargs_69355)
        
        # Assigning a type to the variable 'xi' (line 2442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 8), 'xi', reshape_call_result_69356)
        
        # Getting the type of 'self' (line 2444)
        self_69357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 11), 'self')
        # Obtaining the member 'bounds_error' of a type (line 2444)
        bounds_error_69358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2444, 11), self_69357, 'bounds_error')
        # Testing the type of an if condition (line 2444)
        if_condition_69359 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2444, 8), bounds_error_69358)
        # Assigning a type to the variable 'if_condition_69359' (line 2444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2444, 8), 'if_condition_69359', if_condition_69359)
        # SSA begins for if statement (line 2444)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to enumerate(...): (line 2445)
        # Processing the call arguments (line 2445)
        # Getting the type of 'xi' (line 2445)
        xi_69361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 34), 'xi', False)
        # Obtaining the member 'T' of a type (line 2445)
        T_69362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2445, 34), xi_69361, 'T')
        # Processing the call keyword arguments (line 2445)
        kwargs_69363 = {}
        # Getting the type of 'enumerate' (line 2445)
        enumerate_69360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 24), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 2445)
        enumerate_call_result_69364 = invoke(stypy.reporting.localization.Localization(__file__, 2445, 24), enumerate_69360, *[T_69362], **kwargs_69363)
        
        # Testing the type of a for loop iterable (line 2445)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2445, 12), enumerate_call_result_69364)
        # Getting the type of the for loop variable (line 2445)
        for_loop_var_69365 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2445, 12), enumerate_call_result_69364)
        # Assigning a type to the variable 'i' (line 2445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2445, 12), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2445, 12), for_loop_var_69365))
        # Assigning a type to the variable 'p' (line 2445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2445, 12), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2445, 12), for_loop_var_69365))
        # SSA begins for a for statement (line 2445)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Call to logical_and(...): (line 2446)
        # Processing the call arguments (line 2446)
        
        # Call to all(...): (line 2446)
        # Processing the call arguments (line 2446)
        
        
        # Obtaining the type of the subscript
        int_69370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2446, 58), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 2446)
        i_69371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 55), 'i', False)
        # Getting the type of 'self' (line 2446)
        self_69372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 45), 'self', False)
        # Obtaining the member 'grid' of a type (line 2446)
        grid_69373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2446, 45), self_69372, 'grid')
        # Obtaining the member '__getitem__' of a type (line 2446)
        getitem___69374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2446, 45), grid_69373, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2446)
        subscript_call_result_69375 = invoke(stypy.reporting.localization.Localization(__file__, 2446, 45), getitem___69374, i_69371)
        
        # Obtaining the member '__getitem__' of a type (line 2446)
        getitem___69376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2446, 45), subscript_call_result_69375, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2446)
        subscript_call_result_69377 = invoke(stypy.reporting.localization.Localization(__file__, 2446, 45), getitem___69376, int_69370)
        
        # Getting the type of 'p' (line 2446)
        p_69378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 64), 'p', False)
        # Applying the binary operator '<=' (line 2446)
        result_le_69379 = python_operator(stypy.reporting.localization.Localization(__file__, 2446, 45), '<=', subscript_call_result_69377, p_69378)
        
        # Processing the call keyword arguments (line 2446)
        kwargs_69380 = {}
        # Getting the type of 'np' (line 2446)
        np_69368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 38), 'np', False)
        # Obtaining the member 'all' of a type (line 2446)
        all_69369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2446, 38), np_69368, 'all')
        # Calling all(args, kwargs) (line 2446)
        all_call_result_69381 = invoke(stypy.reporting.localization.Localization(__file__, 2446, 38), all_69369, *[result_le_69379], **kwargs_69380)
        
        
        # Call to all(...): (line 2447)
        # Processing the call arguments (line 2447)
        
        # Getting the type of 'p' (line 2447)
        p_69384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 45), 'p', False)
        
        # Obtaining the type of the subscript
        int_69385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2447, 63), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 2447)
        i_69386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 60), 'i', False)
        # Getting the type of 'self' (line 2447)
        self_69387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 50), 'self', False)
        # Obtaining the member 'grid' of a type (line 2447)
        grid_69388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 50), self_69387, 'grid')
        # Obtaining the member '__getitem__' of a type (line 2447)
        getitem___69389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 50), grid_69388, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2447)
        subscript_call_result_69390 = invoke(stypy.reporting.localization.Localization(__file__, 2447, 50), getitem___69389, i_69386)
        
        # Obtaining the member '__getitem__' of a type (line 2447)
        getitem___69391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 50), subscript_call_result_69390, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2447)
        subscript_call_result_69392 = invoke(stypy.reporting.localization.Localization(__file__, 2447, 50), getitem___69391, int_69385)
        
        # Applying the binary operator '<=' (line 2447)
        result_le_69393 = python_operator(stypy.reporting.localization.Localization(__file__, 2447, 45), '<=', p_69384, subscript_call_result_69392)
        
        # Processing the call keyword arguments (line 2447)
        kwargs_69394 = {}
        # Getting the type of 'np' (line 2447)
        np_69382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 38), 'np', False)
        # Obtaining the member 'all' of a type (line 2447)
        all_69383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 38), np_69382, 'all')
        # Calling all(args, kwargs) (line 2447)
        all_call_result_69395 = invoke(stypy.reporting.localization.Localization(__file__, 2447, 38), all_69383, *[result_le_69393], **kwargs_69394)
        
        # Processing the call keyword arguments (line 2446)
        kwargs_69396 = {}
        # Getting the type of 'np' (line 2446)
        np_69366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 23), 'np', False)
        # Obtaining the member 'logical_and' of a type (line 2446)
        logical_and_69367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2446, 23), np_69366, 'logical_and')
        # Calling logical_and(args, kwargs) (line 2446)
        logical_and_call_result_69397 = invoke(stypy.reporting.localization.Localization(__file__, 2446, 23), logical_and_69367, *[all_call_result_69381, all_call_result_69395], **kwargs_69396)
        
        # Applying the 'not' unary operator (line 2446)
        result_not__69398 = python_operator(stypy.reporting.localization.Localization(__file__, 2446, 19), 'not', logical_and_call_result_69397)
        
        # Testing the type of an if condition (line 2446)
        if_condition_69399 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2446, 16), result_not__69398)
        # Assigning a type to the variable 'if_condition_69399' (line 2446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2446, 16), 'if_condition_69399', if_condition_69399)
        # SSA begins for if statement (line 2446)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2448)
        # Processing the call arguments (line 2448)
        str_69401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2448, 37), 'str', 'One of the requested xi is out of bounds in dimension %d')
        # Getting the type of 'i' (line 2449)
        i_69402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 57), 'i', False)
        # Applying the binary operator '%' (line 2448)
        result_mod_69403 = python_operator(stypy.reporting.localization.Localization(__file__, 2448, 37), '%', str_69401, i_69402)
        
        # Processing the call keyword arguments (line 2448)
        kwargs_69404 = {}
        # Getting the type of 'ValueError' (line 2448)
        ValueError_69400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2448)
        ValueError_call_result_69405 = invoke(stypy.reporting.localization.Localization(__file__, 2448, 26), ValueError_69400, *[result_mod_69403], **kwargs_69404)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2448, 20), ValueError_call_result_69405, 'raise parameter', BaseException)
        # SSA join for if statement (line 2446)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2444)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 2451):
        
        # Assigning a Subscript to a Name (line 2451):
        
        # Obtaining the type of the subscript
        int_69406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 8), 'int')
        
        # Call to _find_indices(...): (line 2451)
        # Processing the call arguments (line 2451)
        # Getting the type of 'xi' (line 2451)
        xi_69409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 68), 'xi', False)
        # Obtaining the member 'T' of a type (line 2451)
        T_69410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 68), xi_69409, 'T')
        # Processing the call keyword arguments (line 2451)
        kwargs_69411 = {}
        # Getting the type of 'self' (line 2451)
        self_69407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 49), 'self', False)
        # Obtaining the member '_find_indices' of a type (line 2451)
        _find_indices_69408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 49), self_69407, '_find_indices')
        # Calling _find_indices(args, kwargs) (line 2451)
        _find_indices_call_result_69412 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 49), _find_indices_69408, *[T_69410], **kwargs_69411)
        
        # Obtaining the member '__getitem__' of a type (line 2451)
        getitem___69413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 8), _find_indices_call_result_69412, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2451)
        subscript_call_result_69414 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 8), getitem___69413, int_69406)
        
        # Assigning a type to the variable 'tuple_var_assignment_63645' (line 2451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 8), 'tuple_var_assignment_63645', subscript_call_result_69414)
        
        # Assigning a Subscript to a Name (line 2451):
        
        # Obtaining the type of the subscript
        int_69415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 8), 'int')
        
        # Call to _find_indices(...): (line 2451)
        # Processing the call arguments (line 2451)
        # Getting the type of 'xi' (line 2451)
        xi_69418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 68), 'xi', False)
        # Obtaining the member 'T' of a type (line 2451)
        T_69419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 68), xi_69418, 'T')
        # Processing the call keyword arguments (line 2451)
        kwargs_69420 = {}
        # Getting the type of 'self' (line 2451)
        self_69416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 49), 'self', False)
        # Obtaining the member '_find_indices' of a type (line 2451)
        _find_indices_69417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 49), self_69416, '_find_indices')
        # Calling _find_indices(args, kwargs) (line 2451)
        _find_indices_call_result_69421 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 49), _find_indices_69417, *[T_69419], **kwargs_69420)
        
        # Obtaining the member '__getitem__' of a type (line 2451)
        getitem___69422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 8), _find_indices_call_result_69421, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2451)
        subscript_call_result_69423 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 8), getitem___69422, int_69415)
        
        # Assigning a type to the variable 'tuple_var_assignment_63646' (line 2451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 8), 'tuple_var_assignment_63646', subscript_call_result_69423)
        
        # Assigning a Subscript to a Name (line 2451):
        
        # Obtaining the type of the subscript
        int_69424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 8), 'int')
        
        # Call to _find_indices(...): (line 2451)
        # Processing the call arguments (line 2451)
        # Getting the type of 'xi' (line 2451)
        xi_69427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 68), 'xi', False)
        # Obtaining the member 'T' of a type (line 2451)
        T_69428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 68), xi_69427, 'T')
        # Processing the call keyword arguments (line 2451)
        kwargs_69429 = {}
        # Getting the type of 'self' (line 2451)
        self_69425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 49), 'self', False)
        # Obtaining the member '_find_indices' of a type (line 2451)
        _find_indices_69426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 49), self_69425, '_find_indices')
        # Calling _find_indices(args, kwargs) (line 2451)
        _find_indices_call_result_69430 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 49), _find_indices_69426, *[T_69428], **kwargs_69429)
        
        # Obtaining the member '__getitem__' of a type (line 2451)
        getitem___69431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 8), _find_indices_call_result_69430, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2451)
        subscript_call_result_69432 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 8), getitem___69431, int_69424)
        
        # Assigning a type to the variable 'tuple_var_assignment_63647' (line 2451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 8), 'tuple_var_assignment_63647', subscript_call_result_69432)
        
        # Assigning a Name to a Name (line 2451):
        # Getting the type of 'tuple_var_assignment_63645' (line 2451)
        tuple_var_assignment_63645_69433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 8), 'tuple_var_assignment_63645')
        # Assigning a type to the variable 'indices' (line 2451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 8), 'indices', tuple_var_assignment_63645_69433)
        
        # Assigning a Name to a Name (line 2451):
        # Getting the type of 'tuple_var_assignment_63646' (line 2451)
        tuple_var_assignment_63646_69434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 8), 'tuple_var_assignment_63646')
        # Assigning a type to the variable 'norm_distances' (line 2451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 17), 'norm_distances', tuple_var_assignment_63646_69434)
        
        # Assigning a Name to a Name (line 2451):
        # Getting the type of 'tuple_var_assignment_63647' (line 2451)
        tuple_var_assignment_63647_69435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 8), 'tuple_var_assignment_63647')
        # Assigning a type to the variable 'out_of_bounds' (line 2451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 33), 'out_of_bounds', tuple_var_assignment_63647_69435)
        
        
        # Getting the type of 'method' (line 2452)
        method_69436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 11), 'method')
        str_69437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2452, 21), 'str', 'linear')
        # Applying the binary operator '==' (line 2452)
        result_eq_69438 = python_operator(stypy.reporting.localization.Localization(__file__, 2452, 11), '==', method_69436, str_69437)
        
        # Testing the type of an if condition (line 2452)
        if_condition_69439 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2452, 8), result_eq_69438)
        # Assigning a type to the variable 'if_condition_69439' (line 2452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2452, 8), 'if_condition_69439', if_condition_69439)
        # SSA begins for if statement (line 2452)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2453):
        
        # Assigning a Call to a Name (line 2453):
        
        # Call to _evaluate_linear(...): (line 2453)
        # Processing the call arguments (line 2453)
        # Getting the type of 'indices' (line 2453)
        indices_69442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 43), 'indices', False)
        # Getting the type of 'norm_distances' (line 2454)
        norm_distances_69443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 43), 'norm_distances', False)
        # Getting the type of 'out_of_bounds' (line 2455)
        out_of_bounds_69444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 43), 'out_of_bounds', False)
        # Processing the call keyword arguments (line 2453)
        kwargs_69445 = {}
        # Getting the type of 'self' (line 2453)
        self_69440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2453, 21), 'self', False)
        # Obtaining the member '_evaluate_linear' of a type (line 2453)
        _evaluate_linear_69441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2453, 21), self_69440, '_evaluate_linear')
        # Calling _evaluate_linear(args, kwargs) (line 2453)
        _evaluate_linear_call_result_69446 = invoke(stypy.reporting.localization.Localization(__file__, 2453, 21), _evaluate_linear_69441, *[indices_69442, norm_distances_69443, out_of_bounds_69444], **kwargs_69445)
        
        # Assigning a type to the variable 'result' (line 2453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2453, 12), 'result', _evaluate_linear_call_result_69446)
        # SSA branch for the else part of an if statement (line 2452)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'method' (line 2456)
        method_69447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2456, 13), 'method')
        str_69448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2456, 23), 'str', 'nearest')
        # Applying the binary operator '==' (line 2456)
        result_eq_69449 = python_operator(stypy.reporting.localization.Localization(__file__, 2456, 13), '==', method_69447, str_69448)
        
        # Testing the type of an if condition (line 2456)
        if_condition_69450 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2456, 13), result_eq_69449)
        # Assigning a type to the variable 'if_condition_69450' (line 2456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2456, 13), 'if_condition_69450', if_condition_69450)
        # SSA begins for if statement (line 2456)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2457):
        
        # Assigning a Call to a Name (line 2457):
        
        # Call to _evaluate_nearest(...): (line 2457)
        # Processing the call arguments (line 2457)
        # Getting the type of 'indices' (line 2457)
        indices_69453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2457, 44), 'indices', False)
        # Getting the type of 'norm_distances' (line 2458)
        norm_distances_69454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 44), 'norm_distances', False)
        # Getting the type of 'out_of_bounds' (line 2459)
        out_of_bounds_69455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2459, 44), 'out_of_bounds', False)
        # Processing the call keyword arguments (line 2457)
        kwargs_69456 = {}
        # Getting the type of 'self' (line 2457)
        self_69451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2457, 21), 'self', False)
        # Obtaining the member '_evaluate_nearest' of a type (line 2457)
        _evaluate_nearest_69452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2457, 21), self_69451, '_evaluate_nearest')
        # Calling _evaluate_nearest(args, kwargs) (line 2457)
        _evaluate_nearest_call_result_69457 = invoke(stypy.reporting.localization.Localization(__file__, 2457, 21), _evaluate_nearest_69452, *[indices_69453, norm_distances_69454, out_of_bounds_69455], **kwargs_69456)
        
        # Assigning a type to the variable 'result' (line 2457)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2457, 12), 'result', _evaluate_nearest_call_result_69457)
        # SSA join for if statement (line 2456)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2452)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 2460)
        self_69458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 15), 'self')
        # Obtaining the member 'bounds_error' of a type (line 2460)
        bounds_error_69459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 15), self_69458, 'bounds_error')
        # Applying the 'not' unary operator (line 2460)
        result_not__69460 = python_operator(stypy.reporting.localization.Localization(__file__, 2460, 11), 'not', bounds_error_69459)
        
        
        # Getting the type of 'self' (line 2460)
        self_69461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 37), 'self')
        # Obtaining the member 'fill_value' of a type (line 2460)
        fill_value_69462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 37), self_69461, 'fill_value')
        # Getting the type of 'None' (line 2460)
        None_69463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 60), 'None')
        # Applying the binary operator 'isnot' (line 2460)
        result_is_not_69464 = python_operator(stypy.reporting.localization.Localization(__file__, 2460, 37), 'isnot', fill_value_69462, None_69463)
        
        # Applying the binary operator 'and' (line 2460)
        result_and_keyword_69465 = python_operator(stypy.reporting.localization.Localization(__file__, 2460, 11), 'and', result_not__69460, result_is_not_69464)
        
        # Testing the type of an if condition (line 2460)
        if_condition_69466 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2460, 8), result_and_keyword_69465)
        # Assigning a type to the variable 'if_condition_69466' (line 2460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2460, 8), 'if_condition_69466', if_condition_69466)
        # SSA begins for if statement (line 2460)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 2461):
        
        # Assigning a Attribute to a Subscript (line 2461):
        # Getting the type of 'self' (line 2461)
        self_69467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 36), 'self')
        # Obtaining the member 'fill_value' of a type (line 2461)
        fill_value_69468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2461, 36), self_69467, 'fill_value')
        # Getting the type of 'result' (line 2461)
        result_69469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 12), 'result')
        # Getting the type of 'out_of_bounds' (line 2461)
        out_of_bounds_69470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2461, 19), 'out_of_bounds')
        # Storing an element on a container (line 2461)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2461, 12), result_69469, (out_of_bounds_69470, fill_value_69468))
        # SSA join for if statement (line 2460)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to reshape(...): (line 2463)
        # Processing the call arguments (line 2463)
        
        # Obtaining the type of the subscript
        int_69473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2463, 40), 'int')
        slice_69474 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2463, 30), None, int_69473, None)
        # Getting the type of 'xi_shape' (line 2463)
        xi_shape_69475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 30), 'xi_shape', False)
        # Obtaining the member '__getitem__' of a type (line 2463)
        getitem___69476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2463, 30), xi_shape_69475, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2463)
        subscript_call_result_69477 = invoke(stypy.reporting.localization.Localization(__file__, 2463, 30), getitem___69476, slice_69474)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'ndim' (line 2463)
        ndim_69478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 64), 'ndim', False)
        slice_69479 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2463, 46), ndim_69478, None, None)
        # Getting the type of 'self' (line 2463)
        self_69480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 46), 'self', False)
        # Obtaining the member 'values' of a type (line 2463)
        values_69481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2463, 46), self_69480, 'values')
        # Obtaining the member 'shape' of a type (line 2463)
        shape_69482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2463, 46), values_69481, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2463)
        getitem___69483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2463, 46), shape_69482, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2463)
        subscript_call_result_69484 = invoke(stypy.reporting.localization.Localization(__file__, 2463, 46), getitem___69483, slice_69479)
        
        # Applying the binary operator '+' (line 2463)
        result_add_69485 = python_operator(stypy.reporting.localization.Localization(__file__, 2463, 30), '+', subscript_call_result_69477, subscript_call_result_69484)
        
        # Processing the call keyword arguments (line 2463)
        kwargs_69486 = {}
        # Getting the type of 'result' (line 2463)
        result_69471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 15), 'result', False)
        # Obtaining the member 'reshape' of a type (line 2463)
        reshape_69472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2463, 15), result_69471, 'reshape')
        # Calling reshape(args, kwargs) (line 2463)
        reshape_call_result_69487 = invoke(stypy.reporting.localization.Localization(__file__, 2463, 15), reshape_69472, *[result_add_69485], **kwargs_69486)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2463, 8), 'stypy_return_type', reshape_call_result_69487)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 2416)
        stypy_return_type_69488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_69488)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_69488


    @norecursion
    def _evaluate_linear(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_evaluate_linear'
        module_type_store = module_type_store.open_function_context('_evaluate_linear', 2465, 4, False)
        # Assigning a type to the variable 'self' (line 2466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2466, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularGridInterpolator._evaluate_linear.__dict__.__setitem__('stypy_localization', localization)
        RegularGridInterpolator._evaluate_linear.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularGridInterpolator._evaluate_linear.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularGridInterpolator._evaluate_linear.__dict__.__setitem__('stypy_function_name', 'RegularGridInterpolator._evaluate_linear')
        RegularGridInterpolator._evaluate_linear.__dict__.__setitem__('stypy_param_names_list', ['indices', 'norm_distances', 'out_of_bounds'])
        RegularGridInterpolator._evaluate_linear.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularGridInterpolator._evaluate_linear.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularGridInterpolator._evaluate_linear.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularGridInterpolator._evaluate_linear.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularGridInterpolator._evaluate_linear.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularGridInterpolator._evaluate_linear.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularGridInterpolator._evaluate_linear', ['indices', 'norm_distances', 'out_of_bounds'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_evaluate_linear', localization, ['indices', 'norm_distances', 'out_of_bounds'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_evaluate_linear(...)' code ##################

        
        # Assigning a BinOp to a Name (line 2467):
        
        # Assigning a BinOp to a Name (line 2467):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2467)
        tuple_69489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2467, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2467)
        # Adding element type (line 2467)
        
        # Call to slice(...): (line 2467)
        # Processing the call arguments (line 2467)
        # Getting the type of 'None' (line 2467)
        None_69491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 24), 'None', False)
        # Processing the call keyword arguments (line 2467)
        kwargs_69492 = {}
        # Getting the type of 'slice' (line 2467)
        slice_69490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 18), 'slice', False)
        # Calling slice(args, kwargs) (line 2467)
        slice_call_result_69493 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 18), slice_69490, *[None_69491], **kwargs_69492)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2467, 18), tuple_69489, slice_call_result_69493)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2467)
        tuple_69494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2467, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2467)
        # Adding element type (line 2467)
        # Getting the type of 'None' (line 2467)
        None_69495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 35), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2467, 35), tuple_69494, None_69495)
        
        # Getting the type of 'self' (line 2467)
        self_69496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 43), 'self')
        # Obtaining the member 'values' of a type (line 2467)
        values_69497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 43), self_69496, 'values')
        # Obtaining the member 'ndim' of a type (line 2467)
        ndim_69498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 43), values_69497, 'ndim')
        
        # Call to len(...): (line 2467)
        # Processing the call arguments (line 2467)
        # Getting the type of 'indices' (line 2467)
        indices_69500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 66), 'indices', False)
        # Processing the call keyword arguments (line 2467)
        kwargs_69501 = {}
        # Getting the type of 'len' (line 2467)
        len_69499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 62), 'len', False)
        # Calling len(args, kwargs) (line 2467)
        len_call_result_69502 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 62), len_69499, *[indices_69500], **kwargs_69501)
        
        # Applying the binary operator '-' (line 2467)
        result_sub_69503 = python_operator(stypy.reporting.localization.Localization(__file__, 2467, 43), '-', ndim_69498, len_call_result_69502)
        
        # Applying the binary operator '*' (line 2467)
        result_mul_69504 = python_operator(stypy.reporting.localization.Localization(__file__, 2467, 34), '*', tuple_69494, result_sub_69503)
        
        # Applying the binary operator '+' (line 2467)
        result_add_69505 = python_operator(stypy.reporting.localization.Localization(__file__, 2467, 17), '+', tuple_69489, result_mul_69504)
        
        # Assigning a type to the variable 'vslice' (line 2467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2467, 8), 'vslice', result_add_69505)
        
        # Assigning a Call to a Name (line 2471):
        
        # Assigning a Call to a Name (line 2471):
        
        # Call to product(...): (line 2471)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'indices' (line 2471)
        indices_69513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 56), 'indices', False)
        comprehension_69514 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2471, 36), indices_69513)
        # Assigning a type to the variable 'i' (line 2471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2471, 36), 'i', comprehension_69514)
        
        # Obtaining an instance of the builtin type 'list' (line 2471)
        list_69508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2471, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2471)
        # Adding element type (line 2471)
        # Getting the type of 'i' (line 2471)
        i_69509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 37), 'i', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2471, 36), list_69508, i_69509)
        # Adding element type (line 2471)
        # Getting the type of 'i' (line 2471)
        i_69510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 40), 'i', False)
        int_69511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2471, 44), 'int')
        # Applying the binary operator '+' (line 2471)
        result_add_69512 = python_operator(stypy.reporting.localization.Localization(__file__, 2471, 40), '+', i_69510, int_69511)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2471, 36), list_69508, result_add_69512)
        
        list_69515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2471, 36), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2471, 36), list_69515, list_69508)
        # Processing the call keyword arguments (line 2471)
        kwargs_69516 = {}
        # Getting the type of 'itertools' (line 2471)
        itertools_69506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 16), 'itertools', False)
        # Obtaining the member 'product' of a type (line 2471)
        product_69507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2471, 16), itertools_69506, 'product')
        # Calling product(args, kwargs) (line 2471)
        product_call_result_69517 = invoke(stypy.reporting.localization.Localization(__file__, 2471, 16), product_69507, *[list_69515], **kwargs_69516)
        
        # Assigning a type to the variable 'edges' (line 2471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2471, 8), 'edges', product_call_result_69517)
        
        # Assigning a Num to a Name (line 2472):
        
        # Assigning a Num to a Name (line 2472):
        float_69518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2472, 17), 'float')
        # Assigning a type to the variable 'values' (line 2472)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2472, 8), 'values', float_69518)
        
        # Getting the type of 'edges' (line 2473)
        edges_69519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 28), 'edges')
        # Testing the type of a for loop iterable (line 2473)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2473, 8), edges_69519)
        # Getting the type of the for loop variable (line 2473)
        for_loop_var_69520 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2473, 8), edges_69519)
        # Assigning a type to the variable 'edge_indices' (line 2473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2473, 8), 'edge_indices', for_loop_var_69520)
        # SSA begins for a for statement (line 2473)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Num to a Name (line 2474):
        
        # Assigning a Num to a Name (line 2474):
        float_69521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2474, 21), 'float')
        # Assigning a type to the variable 'weight' (line 2474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2474, 12), 'weight', float_69521)
        
        
        # Call to zip(...): (line 2475)
        # Processing the call arguments (line 2475)
        # Getting the type of 'edge_indices' (line 2475)
        edge_indices_69523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 33), 'edge_indices', False)
        # Getting the type of 'indices' (line 2475)
        indices_69524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 47), 'indices', False)
        # Getting the type of 'norm_distances' (line 2475)
        norm_distances_69525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 56), 'norm_distances', False)
        # Processing the call keyword arguments (line 2475)
        kwargs_69526 = {}
        # Getting the type of 'zip' (line 2475)
        zip_69522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 29), 'zip', False)
        # Calling zip(args, kwargs) (line 2475)
        zip_call_result_69527 = invoke(stypy.reporting.localization.Localization(__file__, 2475, 29), zip_69522, *[edge_indices_69523, indices_69524, norm_distances_69525], **kwargs_69526)
        
        # Testing the type of a for loop iterable (line 2475)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2475, 12), zip_call_result_69527)
        # Getting the type of the for loop variable (line 2475)
        for_loop_var_69528 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2475, 12), zip_call_result_69527)
        # Assigning a type to the variable 'ei' (line 2475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2475, 12), 'ei', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2475, 12), for_loop_var_69528))
        # Assigning a type to the variable 'i' (line 2475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2475, 12), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2475, 12), for_loop_var_69528))
        # Assigning a type to the variable 'yi' (line 2475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2475, 12), 'yi', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2475, 12), for_loop_var_69528))
        # SSA begins for a for statement (line 2475)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'weight' (line 2476)
        weight_69529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 16), 'weight')
        
        # Call to where(...): (line 2476)
        # Processing the call arguments (line 2476)
        
        # Getting the type of 'ei' (line 2476)
        ei_69532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 35), 'ei', False)
        # Getting the type of 'i' (line 2476)
        i_69533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 41), 'i', False)
        # Applying the binary operator '==' (line 2476)
        result_eq_69534 = python_operator(stypy.reporting.localization.Localization(__file__, 2476, 35), '==', ei_69532, i_69533)
        
        int_69535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2476, 44), 'int')
        # Getting the type of 'yi' (line 2476)
        yi_69536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 48), 'yi', False)
        # Applying the binary operator '-' (line 2476)
        result_sub_69537 = python_operator(stypy.reporting.localization.Localization(__file__, 2476, 44), '-', int_69535, yi_69536)
        
        # Getting the type of 'yi' (line 2476)
        yi_69538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 52), 'yi', False)
        # Processing the call keyword arguments (line 2476)
        kwargs_69539 = {}
        # Getting the type of 'np' (line 2476)
        np_69530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 26), 'np', False)
        # Obtaining the member 'where' of a type (line 2476)
        where_69531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2476, 26), np_69530, 'where')
        # Calling where(args, kwargs) (line 2476)
        where_call_result_69540 = invoke(stypy.reporting.localization.Localization(__file__, 2476, 26), where_69531, *[result_eq_69534, result_sub_69537, yi_69538], **kwargs_69539)
        
        # Applying the binary operator '*=' (line 2476)
        result_imul_69541 = python_operator(stypy.reporting.localization.Localization(__file__, 2476, 16), '*=', weight_69529, where_call_result_69540)
        # Assigning a type to the variable 'weight' (line 2476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2476, 16), 'weight', result_imul_69541)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'values' (line 2477)
        values_69542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 12), 'values')
        
        # Call to asarray(...): (line 2477)
        # Processing the call arguments (line 2477)
        
        # Obtaining the type of the subscript
        # Getting the type of 'edge_indices' (line 2477)
        edge_indices_69545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 45), 'edge_indices', False)
        # Getting the type of 'self' (line 2477)
        self_69546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 33), 'self', False)
        # Obtaining the member 'values' of a type (line 2477)
        values_69547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 33), self_69546, 'values')
        # Obtaining the member '__getitem__' of a type (line 2477)
        getitem___69548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 33), values_69547, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2477)
        subscript_call_result_69549 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 33), getitem___69548, edge_indices_69545)
        
        # Processing the call keyword arguments (line 2477)
        kwargs_69550 = {}
        # Getting the type of 'np' (line 2477)
        np_69543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 22), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2477)
        asarray_69544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 22), np_69543, 'asarray')
        # Calling asarray(args, kwargs) (line 2477)
        asarray_call_result_69551 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 22), asarray_69544, *[subscript_call_result_69549], **kwargs_69550)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'vslice' (line 2477)
        vslice_69552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 69), 'vslice')
        # Getting the type of 'weight' (line 2477)
        weight_69553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 62), 'weight')
        # Obtaining the member '__getitem__' of a type (line 2477)
        getitem___69554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 62), weight_69553, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2477)
        subscript_call_result_69555 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 62), getitem___69554, vslice_69552)
        
        # Applying the binary operator '*' (line 2477)
        result_mul_69556 = python_operator(stypy.reporting.localization.Localization(__file__, 2477, 22), '*', asarray_call_result_69551, subscript_call_result_69555)
        
        # Applying the binary operator '+=' (line 2477)
        result_iadd_69557 = python_operator(stypy.reporting.localization.Localization(__file__, 2477, 12), '+=', values_69542, result_mul_69556)
        # Assigning a type to the variable 'values' (line 2477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 12), 'values', result_iadd_69557)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'values' (line 2478)
        values_69558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 15), 'values')
        # Assigning a type to the variable 'stypy_return_type' (line 2478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2478, 8), 'stypy_return_type', values_69558)
        
        # ################# End of '_evaluate_linear(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_evaluate_linear' in the type store
        # Getting the type of 'stypy_return_type' (line 2465)
        stypy_return_type_69559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_69559)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_evaluate_linear'
        return stypy_return_type_69559


    @norecursion
    def _evaluate_nearest(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_evaluate_nearest'
        module_type_store = module_type_store.open_function_context('_evaluate_nearest', 2480, 4, False)
        # Assigning a type to the variable 'self' (line 2481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2481, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularGridInterpolator._evaluate_nearest.__dict__.__setitem__('stypy_localization', localization)
        RegularGridInterpolator._evaluate_nearest.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularGridInterpolator._evaluate_nearest.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularGridInterpolator._evaluate_nearest.__dict__.__setitem__('stypy_function_name', 'RegularGridInterpolator._evaluate_nearest')
        RegularGridInterpolator._evaluate_nearest.__dict__.__setitem__('stypy_param_names_list', ['indices', 'norm_distances', 'out_of_bounds'])
        RegularGridInterpolator._evaluate_nearest.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularGridInterpolator._evaluate_nearest.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularGridInterpolator._evaluate_nearest.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularGridInterpolator._evaluate_nearest.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularGridInterpolator._evaluate_nearest.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularGridInterpolator._evaluate_nearest.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularGridInterpolator._evaluate_nearest', ['indices', 'norm_distances', 'out_of_bounds'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_evaluate_nearest', localization, ['indices', 'norm_distances', 'out_of_bounds'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_evaluate_nearest(...)' code ##################

        
        # Assigning a List to a Name (line 2481):
        
        # Assigning a List to a Name (line 2481):
        
        # Obtaining an instance of the builtin type 'list' (line 2481)
        list_69560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2481, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2481)
        
        # Assigning a type to the variable 'idx_res' (line 2481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2481, 8), 'idx_res', list_69560)
        
        
        # Call to zip(...): (line 2482)
        # Processing the call arguments (line 2482)
        # Getting the type of 'indices' (line 2482)
        indices_69562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 25), 'indices', False)
        # Getting the type of 'norm_distances' (line 2482)
        norm_distances_69563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 34), 'norm_distances', False)
        # Processing the call keyword arguments (line 2482)
        kwargs_69564 = {}
        # Getting the type of 'zip' (line 2482)
        zip_69561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 21), 'zip', False)
        # Calling zip(args, kwargs) (line 2482)
        zip_call_result_69565 = invoke(stypy.reporting.localization.Localization(__file__, 2482, 21), zip_69561, *[indices_69562, norm_distances_69563], **kwargs_69564)
        
        # Testing the type of a for loop iterable (line 2482)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2482, 8), zip_call_result_69565)
        # Getting the type of the for loop variable (line 2482)
        for_loop_var_69566 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2482, 8), zip_call_result_69565)
        # Assigning a type to the variable 'i' (line 2482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2482, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2482, 8), for_loop_var_69566))
        # Assigning a type to the variable 'yi' (line 2482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2482, 8), 'yi', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2482, 8), for_loop_var_69566))
        # SSA begins for a for statement (line 2482)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 2483)
        # Processing the call arguments (line 2483)
        
        # Call to where(...): (line 2483)
        # Processing the call arguments (line 2483)
        
        # Getting the type of 'yi' (line 2483)
        yi_69571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 36), 'yi', False)
        float_69572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 42), 'float')
        # Applying the binary operator '<=' (line 2483)
        result_le_69573 = python_operator(stypy.reporting.localization.Localization(__file__, 2483, 36), '<=', yi_69571, float_69572)
        
        # Getting the type of 'i' (line 2483)
        i_69574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 46), 'i', False)
        # Getting the type of 'i' (line 2483)
        i_69575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 49), 'i', False)
        int_69576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 53), 'int')
        # Applying the binary operator '+' (line 2483)
        result_add_69577 = python_operator(stypy.reporting.localization.Localization(__file__, 2483, 49), '+', i_69575, int_69576)
        
        # Processing the call keyword arguments (line 2483)
        kwargs_69578 = {}
        # Getting the type of 'np' (line 2483)
        np_69569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 27), 'np', False)
        # Obtaining the member 'where' of a type (line 2483)
        where_69570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2483, 27), np_69569, 'where')
        # Calling where(args, kwargs) (line 2483)
        where_call_result_69579 = invoke(stypy.reporting.localization.Localization(__file__, 2483, 27), where_69570, *[result_le_69573, i_69574, result_add_69577], **kwargs_69578)
        
        # Processing the call keyword arguments (line 2483)
        kwargs_69580 = {}
        # Getting the type of 'idx_res' (line 2483)
        idx_res_69567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 12), 'idx_res', False)
        # Obtaining the member 'append' of a type (line 2483)
        append_69568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2483, 12), idx_res_69567, 'append')
        # Calling append(args, kwargs) (line 2483)
        append_call_result_69581 = invoke(stypy.reporting.localization.Localization(__file__, 2483, 12), append_69568, *[where_call_result_69579], **kwargs_69580)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'idx_res' (line 2484)
        idx_res_69582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 27), 'idx_res')
        # Getting the type of 'self' (line 2484)
        self_69583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 15), 'self')
        # Obtaining the member 'values' of a type (line 2484)
        values_69584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2484, 15), self_69583, 'values')
        # Obtaining the member '__getitem__' of a type (line 2484)
        getitem___69585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2484, 15), values_69584, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2484)
        subscript_call_result_69586 = invoke(stypy.reporting.localization.Localization(__file__, 2484, 15), getitem___69585, idx_res_69582)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2484, 8), 'stypy_return_type', subscript_call_result_69586)
        
        # ################# End of '_evaluate_nearest(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_evaluate_nearest' in the type store
        # Getting the type of 'stypy_return_type' (line 2480)
        stypy_return_type_69587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_69587)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_evaluate_nearest'
        return stypy_return_type_69587


    @norecursion
    def _find_indices(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_find_indices'
        module_type_store = module_type_store.open_function_context('_find_indices', 2486, 4, False)
        # Assigning a type to the variable 'self' (line 2487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2487, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        RegularGridInterpolator._find_indices.__dict__.__setitem__('stypy_localization', localization)
        RegularGridInterpolator._find_indices.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        RegularGridInterpolator._find_indices.__dict__.__setitem__('stypy_type_store', module_type_store)
        RegularGridInterpolator._find_indices.__dict__.__setitem__('stypy_function_name', 'RegularGridInterpolator._find_indices')
        RegularGridInterpolator._find_indices.__dict__.__setitem__('stypy_param_names_list', ['xi'])
        RegularGridInterpolator._find_indices.__dict__.__setitem__('stypy_varargs_param_name', None)
        RegularGridInterpolator._find_indices.__dict__.__setitem__('stypy_kwargs_param_name', None)
        RegularGridInterpolator._find_indices.__dict__.__setitem__('stypy_call_defaults', defaults)
        RegularGridInterpolator._find_indices.__dict__.__setitem__('stypy_call_varargs', varargs)
        RegularGridInterpolator._find_indices.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        RegularGridInterpolator._find_indices.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'RegularGridInterpolator._find_indices', ['xi'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_find_indices', localization, ['xi'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_find_indices(...)' code ##################

        
        # Assigning a List to a Name (line 2488):
        
        # Assigning a List to a Name (line 2488):
        
        # Obtaining an instance of the builtin type 'list' (line 2488)
        list_69588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2488, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2488)
        
        # Assigning a type to the variable 'indices' (line 2488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2488, 8), 'indices', list_69588)
        
        # Assigning a List to a Name (line 2490):
        
        # Assigning a List to a Name (line 2490):
        
        # Obtaining an instance of the builtin type 'list' (line 2490)
        list_69589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2490, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2490)
        
        # Assigning a type to the variable 'norm_distances' (line 2490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2490, 8), 'norm_distances', list_69589)
        
        # Assigning a Call to a Name (line 2492):
        
        # Assigning a Call to a Name (line 2492):
        
        # Call to zeros(...): (line 2492)
        # Processing the call arguments (line 2492)
        
        # Obtaining the type of the subscript
        int_69592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2492, 43), 'int')
        # Getting the type of 'xi' (line 2492)
        xi_69593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 34), 'xi', False)
        # Obtaining the member 'shape' of a type (line 2492)
        shape_69594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2492, 34), xi_69593, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2492)
        getitem___69595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2492, 34), shape_69594, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2492)
        subscript_call_result_69596 = invoke(stypy.reporting.localization.Localization(__file__, 2492, 34), getitem___69595, int_69592)
        
        # Processing the call keyword arguments (line 2492)
        # Getting the type of 'bool' (line 2492)
        bool_69597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 54), 'bool', False)
        keyword_69598 = bool_69597
        kwargs_69599 = {'dtype': keyword_69598}
        # Getting the type of 'np' (line 2492)
        np_69590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 24), 'np', False)
        # Obtaining the member 'zeros' of a type (line 2492)
        zeros_69591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2492, 24), np_69590, 'zeros')
        # Calling zeros(args, kwargs) (line 2492)
        zeros_call_result_69600 = invoke(stypy.reporting.localization.Localization(__file__, 2492, 24), zeros_69591, *[subscript_call_result_69596], **kwargs_69599)
        
        # Assigning a type to the variable 'out_of_bounds' (line 2492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2492, 8), 'out_of_bounds', zeros_call_result_69600)
        
        
        # Call to zip(...): (line 2494)
        # Processing the call arguments (line 2494)
        # Getting the type of 'xi' (line 2494)
        xi_69602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 27), 'xi', False)
        # Getting the type of 'self' (line 2494)
        self_69603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 31), 'self', False)
        # Obtaining the member 'grid' of a type (line 2494)
        grid_69604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2494, 31), self_69603, 'grid')
        # Processing the call keyword arguments (line 2494)
        kwargs_69605 = {}
        # Getting the type of 'zip' (line 2494)
        zip_69601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 23), 'zip', False)
        # Calling zip(args, kwargs) (line 2494)
        zip_call_result_69606 = invoke(stypy.reporting.localization.Localization(__file__, 2494, 23), zip_69601, *[xi_69602, grid_69604], **kwargs_69605)
        
        # Testing the type of a for loop iterable (line 2494)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2494, 8), zip_call_result_69606)
        # Getting the type of the for loop variable (line 2494)
        for_loop_var_69607 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2494, 8), zip_call_result_69606)
        # Assigning a type to the variable 'x' (line 2494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2494, 8), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2494, 8), for_loop_var_69607))
        # Assigning a type to the variable 'grid' (line 2494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2494, 8), 'grid', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2494, 8), for_loop_var_69607))
        # SSA begins for a for statement (line 2494)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Name (line 2495):
        
        # Assigning a BinOp to a Name (line 2495):
        
        # Call to searchsorted(...): (line 2495)
        # Processing the call arguments (line 2495)
        # Getting the type of 'grid' (line 2495)
        grid_69610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 32), 'grid', False)
        # Getting the type of 'x' (line 2495)
        x_69611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 38), 'x', False)
        # Processing the call keyword arguments (line 2495)
        kwargs_69612 = {}
        # Getting the type of 'np' (line 2495)
        np_69608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 16), 'np', False)
        # Obtaining the member 'searchsorted' of a type (line 2495)
        searchsorted_69609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2495, 16), np_69608, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 2495)
        searchsorted_call_result_69613 = invoke(stypy.reporting.localization.Localization(__file__, 2495, 16), searchsorted_69609, *[grid_69610, x_69611], **kwargs_69612)
        
        int_69614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2495, 43), 'int')
        # Applying the binary operator '-' (line 2495)
        result_sub_69615 = python_operator(stypy.reporting.localization.Localization(__file__, 2495, 16), '-', searchsorted_call_result_69613, int_69614)
        
        # Assigning a type to the variable 'i' (line 2495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2495, 12), 'i', result_sub_69615)
        
        # Assigning a Num to a Subscript (line 2496):
        
        # Assigning a Num to a Subscript (line 2496):
        int_69616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2496, 23), 'int')
        # Getting the type of 'i' (line 2496)
        i_69617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 12), 'i')
        
        # Getting the type of 'i' (line 2496)
        i_69618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 14), 'i')
        int_69619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2496, 18), 'int')
        # Applying the binary operator '<' (line 2496)
        result_lt_69620 = python_operator(stypy.reporting.localization.Localization(__file__, 2496, 14), '<', i_69618, int_69619)
        
        # Storing an element on a container (line 2496)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2496, 12), i_69617, (result_lt_69620, int_69616))
        
        # Assigning a BinOp to a Subscript (line 2497):
        
        # Assigning a BinOp to a Subscript (line 2497):
        # Getting the type of 'grid' (line 2497)
        grid_69621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 35), 'grid')
        # Obtaining the member 'size' of a type (line 2497)
        size_69622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2497, 35), grid_69621, 'size')
        int_69623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2497, 47), 'int')
        # Applying the binary operator '-' (line 2497)
        result_sub_69624 = python_operator(stypy.reporting.localization.Localization(__file__, 2497, 35), '-', size_69622, int_69623)
        
        # Getting the type of 'i' (line 2497)
        i_69625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 12), 'i')
        
        # Getting the type of 'i' (line 2497)
        i_69626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 14), 'i')
        # Getting the type of 'grid' (line 2497)
        grid_69627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 18), 'grid')
        # Obtaining the member 'size' of a type (line 2497)
        size_69628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2497, 18), grid_69627, 'size')
        int_69629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2497, 30), 'int')
        # Applying the binary operator '-' (line 2497)
        result_sub_69630 = python_operator(stypy.reporting.localization.Localization(__file__, 2497, 18), '-', size_69628, int_69629)
        
        # Applying the binary operator '>' (line 2497)
        result_gt_69631 = python_operator(stypy.reporting.localization.Localization(__file__, 2497, 14), '>', i_69626, result_sub_69630)
        
        # Storing an element on a container (line 2497)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2497, 12), i_69625, (result_gt_69631, result_sub_69624))
        
        # Call to append(...): (line 2498)
        # Processing the call arguments (line 2498)
        # Getting the type of 'i' (line 2498)
        i_69634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 27), 'i', False)
        # Processing the call keyword arguments (line 2498)
        kwargs_69635 = {}
        # Getting the type of 'indices' (line 2498)
        indices_69632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 12), 'indices', False)
        # Obtaining the member 'append' of a type (line 2498)
        append_69633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2498, 12), indices_69632, 'append')
        # Calling append(args, kwargs) (line 2498)
        append_call_result_69636 = invoke(stypy.reporting.localization.Localization(__file__, 2498, 12), append_69633, *[i_69634], **kwargs_69635)
        
        
        # Call to append(...): (line 2499)
        # Processing the call arguments (line 2499)
        # Getting the type of 'x' (line 2499)
        x_69639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 35), 'x', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 2499)
        i_69640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 44), 'i', False)
        # Getting the type of 'grid' (line 2499)
        grid_69641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 39), 'grid', False)
        # Obtaining the member '__getitem__' of a type (line 2499)
        getitem___69642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2499, 39), grid_69641, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2499)
        subscript_call_result_69643 = invoke(stypy.reporting.localization.Localization(__file__, 2499, 39), getitem___69642, i_69640)
        
        # Applying the binary operator '-' (line 2499)
        result_sub_69644 = python_operator(stypy.reporting.localization.Localization(__file__, 2499, 35), '-', x_69639, subscript_call_result_69643)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 2500)
        i_69645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 40), 'i', False)
        int_69646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2500, 44), 'int')
        # Applying the binary operator '+' (line 2500)
        result_add_69647 = python_operator(stypy.reporting.localization.Localization(__file__, 2500, 40), '+', i_69645, int_69646)
        
        # Getting the type of 'grid' (line 2500)
        grid_69648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 35), 'grid', False)
        # Obtaining the member '__getitem__' of a type (line 2500)
        getitem___69649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2500, 35), grid_69648, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2500)
        subscript_call_result_69650 = invoke(stypy.reporting.localization.Localization(__file__, 2500, 35), getitem___69649, result_add_69647)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 2500)
        i_69651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 54), 'i', False)
        # Getting the type of 'grid' (line 2500)
        grid_69652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 49), 'grid', False)
        # Obtaining the member '__getitem__' of a type (line 2500)
        getitem___69653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2500, 49), grid_69652, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2500)
        subscript_call_result_69654 = invoke(stypy.reporting.localization.Localization(__file__, 2500, 49), getitem___69653, i_69651)
        
        # Applying the binary operator '-' (line 2500)
        result_sub_69655 = python_operator(stypy.reporting.localization.Localization(__file__, 2500, 35), '-', subscript_call_result_69650, subscript_call_result_69654)
        
        # Applying the binary operator 'div' (line 2499)
        result_div_69656 = python_operator(stypy.reporting.localization.Localization(__file__, 2499, 34), 'div', result_sub_69644, result_sub_69655)
        
        # Processing the call keyword arguments (line 2499)
        kwargs_69657 = {}
        # Getting the type of 'norm_distances' (line 2499)
        norm_distances_69637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 12), 'norm_distances', False)
        # Obtaining the member 'append' of a type (line 2499)
        append_69638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2499, 12), norm_distances_69637, 'append')
        # Calling append(args, kwargs) (line 2499)
        append_call_result_69658 = invoke(stypy.reporting.localization.Localization(__file__, 2499, 12), append_69638, *[result_div_69656], **kwargs_69657)
        
        
        
        # Getting the type of 'self' (line 2501)
        self_69659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 19), 'self')
        # Obtaining the member 'bounds_error' of a type (line 2501)
        bounds_error_69660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2501, 19), self_69659, 'bounds_error')
        # Applying the 'not' unary operator (line 2501)
        result_not__69661 = python_operator(stypy.reporting.localization.Localization(__file__, 2501, 15), 'not', bounds_error_69660)
        
        # Testing the type of an if condition (line 2501)
        if_condition_69662 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2501, 12), result_not__69661)
        # Assigning a type to the variable 'if_condition_69662' (line 2501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2501, 12), 'if_condition_69662', if_condition_69662)
        # SSA begins for if statement (line 2501)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'out_of_bounds' (line 2502)
        out_of_bounds_69663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 16), 'out_of_bounds')
        
        # Getting the type of 'x' (line 2502)
        x_69664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 33), 'x')
        
        # Obtaining the type of the subscript
        int_69665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2502, 42), 'int')
        # Getting the type of 'grid' (line 2502)
        grid_69666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 37), 'grid')
        # Obtaining the member '__getitem__' of a type (line 2502)
        getitem___69667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2502, 37), grid_69666, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2502)
        subscript_call_result_69668 = invoke(stypy.reporting.localization.Localization(__file__, 2502, 37), getitem___69667, int_69665)
        
        # Applying the binary operator '<' (line 2502)
        result_lt_69669 = python_operator(stypy.reporting.localization.Localization(__file__, 2502, 33), '<', x_69664, subscript_call_result_69668)
        
        # Applying the binary operator '+=' (line 2502)
        result_iadd_69670 = python_operator(stypy.reporting.localization.Localization(__file__, 2502, 16), '+=', out_of_bounds_69663, result_lt_69669)
        # Assigning a type to the variable 'out_of_bounds' (line 2502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2502, 16), 'out_of_bounds', result_iadd_69670)
        
        
        # Getting the type of 'out_of_bounds' (line 2503)
        out_of_bounds_69671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 16), 'out_of_bounds')
        
        # Getting the type of 'x' (line 2503)
        x_69672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 33), 'x')
        
        # Obtaining the type of the subscript
        int_69673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2503, 42), 'int')
        # Getting the type of 'grid' (line 2503)
        grid_69674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 37), 'grid')
        # Obtaining the member '__getitem__' of a type (line 2503)
        getitem___69675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2503, 37), grid_69674, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2503)
        subscript_call_result_69676 = invoke(stypy.reporting.localization.Localization(__file__, 2503, 37), getitem___69675, int_69673)
        
        # Applying the binary operator '>' (line 2503)
        result_gt_69677 = python_operator(stypy.reporting.localization.Localization(__file__, 2503, 33), '>', x_69672, subscript_call_result_69676)
        
        # Applying the binary operator '+=' (line 2503)
        result_iadd_69678 = python_operator(stypy.reporting.localization.Localization(__file__, 2503, 16), '+=', out_of_bounds_69671, result_gt_69677)
        # Assigning a type to the variable 'out_of_bounds' (line 2503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2503, 16), 'out_of_bounds', result_iadd_69678)
        
        # SSA join for if statement (line 2501)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2504)
        tuple_69679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2504, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2504)
        # Adding element type (line 2504)
        # Getting the type of 'indices' (line 2504)
        indices_69680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2504, 15), 'indices')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2504, 15), tuple_69679, indices_69680)
        # Adding element type (line 2504)
        # Getting the type of 'norm_distances' (line 2504)
        norm_distances_69681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2504, 24), 'norm_distances')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2504, 15), tuple_69679, norm_distances_69681)
        # Adding element type (line 2504)
        # Getting the type of 'out_of_bounds' (line 2504)
        out_of_bounds_69682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2504, 40), 'out_of_bounds')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2504, 15), tuple_69679, out_of_bounds_69682)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2504, 8), 'stypy_return_type', tuple_69679)
        
        # ################# End of '_find_indices(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_find_indices' in the type store
        # Getting the type of 'stypy_return_type' (line 2486)
        stypy_return_type_69683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_69683)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_find_indices'
        return stypy_return_type_69683


# Assigning a type to the variable 'RegularGridInterpolator' (line 2276)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 0), 'RegularGridInterpolator', RegularGridInterpolator)

@norecursion
def interpn(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_69684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2507, 39), 'str', 'linear')
    # Getting the type of 'True' (line 2507)
    True_69685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 62), 'True')
    # Getting the type of 'np' (line 2508)
    np_69686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2508, 23), 'np')
    # Obtaining the member 'nan' of a type (line 2508)
    nan_69687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2508, 23), np_69686, 'nan')
    defaults = [str_69684, True_69685, nan_69687]
    # Create a new context for function 'interpn'
    module_type_store = module_type_store.open_function_context('interpn', 2507, 0, False)
    
    # Passed parameters checking function
    interpn.stypy_localization = localization
    interpn.stypy_type_of_self = None
    interpn.stypy_type_store = module_type_store
    interpn.stypy_function_name = 'interpn'
    interpn.stypy_param_names_list = ['points', 'values', 'xi', 'method', 'bounds_error', 'fill_value']
    interpn.stypy_varargs_param_name = None
    interpn.stypy_kwargs_param_name = None
    interpn.stypy_call_defaults = defaults
    interpn.stypy_call_varargs = varargs
    interpn.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'interpn', ['points', 'values', 'xi', 'method', 'bounds_error', 'fill_value'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'interpn', localization, ['points', 'values', 'xi', 'method', 'bounds_error', 'fill_value'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'interpn(...)' code ##################

    str_69688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2562, (-1)), 'str', '\n    Multidimensional interpolation on regular grids.\n\n    Parameters\n    ----------\n    points : tuple of ndarray of float, with shapes (m1, ), ..., (mn, )\n        The points defining the regular grid in n dimensions.\n\n    values : array_like, shape (m1, ..., mn, ...)\n        The data on the regular grid in n dimensions.\n\n    xi : ndarray of shape (..., ndim)\n        The coordinates to sample the gridded data at\n\n    method : str, optional\n        The method of interpolation to perform. Supported are "linear" and\n        "nearest", and "splinef2d". "splinef2d" is only supported for\n        2-dimensional data.\n\n    bounds_error : bool, optional\n        If True, when interpolated values are requested outside of the\n        domain of the input data, a ValueError is raised.\n        If False, then `fill_value` is used.\n\n    fill_value : number, optional\n        If provided, the value to use for points outside of the\n        interpolation domain. If None, values outside\n        the domain are extrapolated.  Extrapolation is not supported by method\n        "splinef2d".\n\n    Returns\n    -------\n    values_x : ndarray, shape xi.shape[:-1] + values.shape[ndim:]\n        Interpolated values at input coordinates.\n\n    Notes\n    -----\n\n    .. versionadded:: 0.14\n\n    See also\n    --------\n    NearestNDInterpolator : Nearest neighbour interpolation on unstructured\n                            data in N dimensions\n\n    LinearNDInterpolator : Piecewise linear interpolant on unstructured data\n                           in N dimensions\n\n    RegularGridInterpolator : Linear and nearest-neighbor Interpolation on a\n                              regular grid in arbitrary dimensions\n\n    RectBivariateSpline : Bivariate spline approximation over a rectangular mesh\n\n    ')
    
    
    # Getting the type of 'method' (line 2564)
    method_69689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 7), 'method')
    
    # Obtaining an instance of the builtin type 'list' (line 2564)
    list_69690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2564)
    # Adding element type (line 2564)
    str_69691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 22), 'str', 'linear')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 21), list_69690, str_69691)
    # Adding element type (line 2564)
    str_69692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 32), 'str', 'nearest')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 21), list_69690, str_69692)
    # Adding element type (line 2564)
    str_69693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 43), 'str', 'splinef2d')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 21), list_69690, str_69693)
    
    # Applying the binary operator 'notin' (line 2564)
    result_contains_69694 = python_operator(stypy.reporting.localization.Localization(__file__, 2564, 7), 'notin', method_69689, list_69690)
    
    # Testing the type of an if condition (line 2564)
    if_condition_69695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2564, 4), result_contains_69694)
    # Assigning a type to the variable 'if_condition_69695' (line 2564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2564, 4), 'if_condition_69695', if_condition_69695)
    # SSA begins for if statement (line 2564)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2565)
    # Processing the call arguments (line 2565)
    str_69697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2565, 25), 'str', "interpn only understands the methods 'linear', 'nearest', and 'splinef2d'. You provided %s.")
    # Getting the type of 'method' (line 2567)
    method_69698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 25), 'method', False)
    # Applying the binary operator '%' (line 2565)
    result_mod_69699 = python_operator(stypy.reporting.localization.Localization(__file__, 2565, 25), '%', str_69697, method_69698)
    
    # Processing the call keyword arguments (line 2565)
    kwargs_69700 = {}
    # Getting the type of 'ValueError' (line 2565)
    ValueError_69696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2565, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2565)
    ValueError_call_result_69701 = invoke(stypy.reporting.localization.Localization(__file__, 2565, 14), ValueError_69696, *[result_mod_69699], **kwargs_69700)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2565, 8), ValueError_call_result_69701, 'raise parameter', BaseException)
    # SSA join for if statement (line 2564)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2569)
    str_69702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2569, 27), 'str', 'ndim')
    # Getting the type of 'values' (line 2569)
    values_69703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2569, 19), 'values')
    
    (may_be_69704, more_types_in_union_69705) = may_not_provide_member(str_69702, values_69703)

    if may_be_69704:

        if more_types_in_union_69705:
            # Runtime conditional SSA (line 2569)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'values' (line 2569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2569, 4), 'values', remove_member_provider_from_union(values_69703, 'ndim'))
        
        # Assigning a Call to a Name (line 2570):
        
        # Assigning a Call to a Name (line 2570):
        
        # Call to asarray(...): (line 2570)
        # Processing the call arguments (line 2570)
        # Getting the type of 'values' (line 2570)
        values_69708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 28), 'values', False)
        # Processing the call keyword arguments (line 2570)
        kwargs_69709 = {}
        # Getting the type of 'np' (line 2570)
        np_69706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 17), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2570)
        asarray_69707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2570, 17), np_69706, 'asarray')
        # Calling asarray(args, kwargs) (line 2570)
        asarray_call_result_69710 = invoke(stypy.reporting.localization.Localization(__file__, 2570, 17), asarray_69707, *[values_69708], **kwargs_69709)
        
        # Assigning a type to the variable 'values' (line 2570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2570, 8), 'values', asarray_call_result_69710)

        if more_types_in_union_69705:
            # SSA join for if statement (line 2569)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Attribute to a Name (line 2572):
    
    # Assigning a Attribute to a Name (line 2572):
    # Getting the type of 'values' (line 2572)
    values_69711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 11), 'values')
    # Obtaining the member 'ndim' of a type (line 2572)
    ndim_69712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2572, 11), values_69711, 'ndim')
    # Assigning a type to the variable 'ndim' (line 2572)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2572, 4), 'ndim', ndim_69712)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'ndim' (line 2573)
    ndim_69713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 7), 'ndim')
    int_69714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2573, 14), 'int')
    # Applying the binary operator '>' (line 2573)
    result_gt_69715 = python_operator(stypy.reporting.localization.Localization(__file__, 2573, 7), '>', ndim_69713, int_69714)
    
    
    # Getting the type of 'method' (line 2573)
    method_69716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 20), 'method')
    str_69717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2573, 30), 'str', 'splinef2d')
    # Applying the binary operator '==' (line 2573)
    result_eq_69718 = python_operator(stypy.reporting.localization.Localization(__file__, 2573, 20), '==', method_69716, str_69717)
    
    # Applying the binary operator 'and' (line 2573)
    result_and_keyword_69719 = python_operator(stypy.reporting.localization.Localization(__file__, 2573, 7), 'and', result_gt_69715, result_eq_69718)
    
    # Testing the type of an if condition (line 2573)
    if_condition_69720 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2573, 4), result_and_keyword_69719)
    # Assigning a type to the variable 'if_condition_69720' (line 2573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2573, 4), 'if_condition_69720', if_condition_69720)
    # SSA begins for if statement (line 2573)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2574)
    # Processing the call arguments (line 2574)
    str_69722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, 25), 'str', 'The method spline2fd can only be used for 2-dimensional input data')
    # Processing the call keyword arguments (line 2574)
    kwargs_69723 = {}
    # Getting the type of 'ValueError' (line 2574)
    ValueError_69721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2574)
    ValueError_call_result_69724 = invoke(stypy.reporting.localization.Localization(__file__, 2574, 14), ValueError_69721, *[str_69722], **kwargs_69723)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2574, 8), ValueError_call_result_69724, 'raise parameter', BaseException)
    # SSA join for if statement (line 2573)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'bounds_error' (line 2576)
    bounds_error_69725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 11), 'bounds_error')
    # Applying the 'not' unary operator (line 2576)
    result_not__69726 = python_operator(stypy.reporting.localization.Localization(__file__, 2576, 7), 'not', bounds_error_69725)
    
    
    # Getting the type of 'fill_value' (line 2576)
    fill_value_69727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 28), 'fill_value')
    # Getting the type of 'None' (line 2576)
    None_69728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 42), 'None')
    # Applying the binary operator 'is' (line 2576)
    result_is__69729 = python_operator(stypy.reporting.localization.Localization(__file__, 2576, 28), 'is', fill_value_69727, None_69728)
    
    # Applying the binary operator 'and' (line 2576)
    result_and_keyword_69730 = python_operator(stypy.reporting.localization.Localization(__file__, 2576, 7), 'and', result_not__69726, result_is__69729)
    
    # Getting the type of 'method' (line 2576)
    method_69731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 51), 'method')
    str_69732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2576, 61), 'str', 'splinef2d')
    # Applying the binary operator '==' (line 2576)
    result_eq_69733 = python_operator(stypy.reporting.localization.Localization(__file__, 2576, 51), '==', method_69731, str_69732)
    
    # Applying the binary operator 'and' (line 2576)
    result_and_keyword_69734 = python_operator(stypy.reporting.localization.Localization(__file__, 2576, 7), 'and', result_and_keyword_69730, result_eq_69733)
    
    # Testing the type of an if condition (line 2576)
    if_condition_69735 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2576, 4), result_and_keyword_69734)
    # Assigning a type to the variable 'if_condition_69735' (line 2576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2576, 4), 'if_condition_69735', if_condition_69735)
    # SSA begins for if statement (line 2576)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2577)
    # Processing the call arguments (line 2577)
    str_69737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2577, 25), 'str', 'The method spline2fd does not support extrapolation.')
    # Processing the call keyword arguments (line 2577)
    kwargs_69738 = {}
    # Getting the type of 'ValueError' (line 2577)
    ValueError_69736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2577)
    ValueError_call_result_69739 = invoke(stypy.reporting.localization.Localization(__file__, 2577, 14), ValueError_69736, *[str_69737], **kwargs_69738)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2577, 8), ValueError_call_result_69739, 'raise parameter', BaseException)
    # SSA join for if statement (line 2576)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 2580)
    # Processing the call arguments (line 2580)
    # Getting the type of 'points' (line 2580)
    points_69741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 11), 'points', False)
    # Processing the call keyword arguments (line 2580)
    kwargs_69742 = {}
    # Getting the type of 'len' (line 2580)
    len_69740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 7), 'len', False)
    # Calling len(args, kwargs) (line 2580)
    len_call_result_69743 = invoke(stypy.reporting.localization.Localization(__file__, 2580, 7), len_69740, *[points_69741], **kwargs_69742)
    
    # Getting the type of 'ndim' (line 2580)
    ndim_69744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 21), 'ndim')
    # Applying the binary operator '>' (line 2580)
    result_gt_69745 = python_operator(stypy.reporting.localization.Localization(__file__, 2580, 7), '>', len_call_result_69743, ndim_69744)
    
    # Testing the type of an if condition (line 2580)
    if_condition_69746 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2580, 4), result_gt_69745)
    # Assigning a type to the variable 'if_condition_69746' (line 2580)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2580, 4), 'if_condition_69746', if_condition_69746)
    # SSA begins for if statement (line 2580)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2581)
    # Processing the call arguments (line 2581)
    str_69748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2581, 25), 'str', 'There are %d point arrays, but values has %d dimensions')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2582)
    tuple_69749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2582, 41), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2582)
    # Adding element type (line 2582)
    
    # Call to len(...): (line 2582)
    # Processing the call arguments (line 2582)
    # Getting the type of 'points' (line 2582)
    points_69751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 45), 'points', False)
    # Processing the call keyword arguments (line 2582)
    kwargs_69752 = {}
    # Getting the type of 'len' (line 2582)
    len_69750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 41), 'len', False)
    # Calling len(args, kwargs) (line 2582)
    len_call_result_69753 = invoke(stypy.reporting.localization.Localization(__file__, 2582, 41), len_69750, *[points_69751], **kwargs_69752)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2582, 41), tuple_69749, len_call_result_69753)
    # Adding element type (line 2582)
    # Getting the type of 'ndim' (line 2582)
    ndim_69754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 54), 'ndim', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2582, 41), tuple_69749, ndim_69754)
    
    # Applying the binary operator '%' (line 2581)
    result_mod_69755 = python_operator(stypy.reporting.localization.Localization(__file__, 2581, 25), '%', str_69748, tuple_69749)
    
    # Processing the call keyword arguments (line 2581)
    kwargs_69756 = {}
    # Getting the type of 'ValueError' (line 2581)
    ValueError_69747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2581, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2581)
    ValueError_call_result_69757 = invoke(stypy.reporting.localization.Localization(__file__, 2581, 14), ValueError_69747, *[result_mod_69755], **kwargs_69756)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2581, 8), ValueError_call_result_69757, 'raise parameter', BaseException)
    # SSA join for if statement (line 2580)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 2583)
    # Processing the call arguments (line 2583)
    # Getting the type of 'points' (line 2583)
    points_69759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 11), 'points', False)
    # Processing the call keyword arguments (line 2583)
    kwargs_69760 = {}
    # Getting the type of 'len' (line 2583)
    len_69758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 7), 'len', False)
    # Calling len(args, kwargs) (line 2583)
    len_call_result_69761 = invoke(stypy.reporting.localization.Localization(__file__, 2583, 7), len_69758, *[points_69759], **kwargs_69760)
    
    # Getting the type of 'ndim' (line 2583)
    ndim_69762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 22), 'ndim')
    # Applying the binary operator '!=' (line 2583)
    result_ne_69763 = python_operator(stypy.reporting.localization.Localization(__file__, 2583, 7), '!=', len_call_result_69761, ndim_69762)
    
    
    # Getting the type of 'method' (line 2583)
    method_69764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 31), 'method')
    str_69765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2583, 41), 'str', 'splinef2d')
    # Applying the binary operator '==' (line 2583)
    result_eq_69766 = python_operator(stypy.reporting.localization.Localization(__file__, 2583, 31), '==', method_69764, str_69765)
    
    # Applying the binary operator 'and' (line 2583)
    result_and_keyword_69767 = python_operator(stypy.reporting.localization.Localization(__file__, 2583, 7), 'and', result_ne_69763, result_eq_69766)
    
    # Testing the type of an if condition (line 2583)
    if_condition_69768 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2583, 4), result_and_keyword_69767)
    # Assigning a type to the variable 'if_condition_69768' (line 2583)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2583, 4), 'if_condition_69768', if_condition_69768)
    # SSA begins for if statement (line 2583)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2584)
    # Processing the call arguments (line 2584)
    str_69770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2584, 25), 'str', 'The method spline2fd can only be used for scalar data with one point per coordinate')
    # Processing the call keyword arguments (line 2584)
    kwargs_69771 = {}
    # Getting the type of 'ValueError' (line 2584)
    ValueError_69769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2584, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2584)
    ValueError_call_result_69772 = invoke(stypy.reporting.localization.Localization(__file__, 2584, 14), ValueError_69769, *[str_69770], **kwargs_69771)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2584, 8), ValueError_call_result_69772, 'raise parameter', BaseException)
    # SSA join for if statement (line 2583)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to enumerate(...): (line 2588)
    # Processing the call arguments (line 2588)
    # Getting the type of 'points' (line 2588)
    points_69774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 26), 'points', False)
    # Processing the call keyword arguments (line 2588)
    kwargs_69775 = {}
    # Getting the type of 'enumerate' (line 2588)
    enumerate_69773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 16), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 2588)
    enumerate_call_result_69776 = invoke(stypy.reporting.localization.Localization(__file__, 2588, 16), enumerate_69773, *[points_69774], **kwargs_69775)
    
    # Testing the type of a for loop iterable (line 2588)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2588, 4), enumerate_call_result_69776)
    # Getting the type of the for loop variable (line 2588)
    for_loop_var_69777 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2588, 4), enumerate_call_result_69776)
    # Assigning a type to the variable 'i' (line 2588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2588, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2588, 4), for_loop_var_69777))
    # Assigning a type to the variable 'p' (line 2588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2588, 4), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2588, 4), for_loop_var_69777))
    # SSA begins for a for statement (line 2588)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to all(...): (line 2589)
    # Processing the call arguments (line 2589)
    
    
    # Call to diff(...): (line 2589)
    # Processing the call arguments (line 2589)
    # Getting the type of 'p' (line 2589)
    p_69782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 30), 'p', False)
    # Processing the call keyword arguments (line 2589)
    kwargs_69783 = {}
    # Getting the type of 'np' (line 2589)
    np_69780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 22), 'np', False)
    # Obtaining the member 'diff' of a type (line 2589)
    diff_69781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 22), np_69780, 'diff')
    # Calling diff(args, kwargs) (line 2589)
    diff_call_result_69784 = invoke(stypy.reporting.localization.Localization(__file__, 2589, 22), diff_69781, *[p_69782], **kwargs_69783)
    
    float_69785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2589, 35), 'float')
    # Applying the binary operator '>' (line 2589)
    result_gt_69786 = python_operator(stypy.reporting.localization.Localization(__file__, 2589, 22), '>', diff_call_result_69784, float_69785)
    
    # Processing the call keyword arguments (line 2589)
    kwargs_69787 = {}
    # Getting the type of 'np' (line 2589)
    np_69778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 15), 'np', False)
    # Obtaining the member 'all' of a type (line 2589)
    all_69779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 15), np_69778, 'all')
    # Calling all(args, kwargs) (line 2589)
    all_call_result_69788 = invoke(stypy.reporting.localization.Localization(__file__, 2589, 15), all_69779, *[result_gt_69786], **kwargs_69787)
    
    # Applying the 'not' unary operator (line 2589)
    result_not__69789 = python_operator(stypy.reporting.localization.Localization(__file__, 2589, 11), 'not', all_call_result_69788)
    
    # Testing the type of an if condition (line 2589)
    if_condition_69790 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2589, 8), result_not__69789)
    # Assigning a type to the variable 'if_condition_69790' (line 2589)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2589, 8), 'if_condition_69790', if_condition_69790)
    # SSA begins for if statement (line 2589)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2590)
    # Processing the call arguments (line 2590)
    str_69792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2590, 29), 'str', 'The points in dimension %d must be strictly ascending')
    # Getting the type of 'i' (line 2591)
    i_69793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2591, 43), 'i', False)
    # Applying the binary operator '%' (line 2590)
    result_mod_69794 = python_operator(stypy.reporting.localization.Localization(__file__, 2590, 29), '%', str_69792, i_69793)
    
    # Processing the call keyword arguments (line 2590)
    kwargs_69795 = {}
    # Getting the type of 'ValueError' (line 2590)
    ValueError_69791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2590)
    ValueError_call_result_69796 = invoke(stypy.reporting.localization.Localization(__file__, 2590, 18), ValueError_69791, *[result_mod_69794], **kwargs_69795)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2590, 12), ValueError_call_result_69796, 'raise parameter', BaseException)
    # SSA join for if statement (line 2589)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    
    # Call to asarray(...): (line 2592)
    # Processing the call arguments (line 2592)
    # Getting the type of 'p' (line 2592)
    p_69799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 26), 'p', False)
    # Processing the call keyword arguments (line 2592)
    kwargs_69800 = {}
    # Getting the type of 'np' (line 2592)
    np_69797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 15), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2592)
    asarray_69798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 15), np_69797, 'asarray')
    # Calling asarray(args, kwargs) (line 2592)
    asarray_call_result_69801 = invoke(stypy.reporting.localization.Localization(__file__, 2592, 15), asarray_69798, *[p_69799], **kwargs_69800)
    
    # Obtaining the member 'ndim' of a type (line 2592)
    ndim_69802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 15), asarray_call_result_69801, 'ndim')
    int_69803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2592, 37), 'int')
    # Applying the binary operator '==' (line 2592)
    result_eq_69804 = python_operator(stypy.reporting.localization.Localization(__file__, 2592, 15), '==', ndim_69802, int_69803)
    
    # Applying the 'not' unary operator (line 2592)
    result_not__69805 = python_operator(stypy.reporting.localization.Localization(__file__, 2592, 11), 'not', result_eq_69804)
    
    # Testing the type of an if condition (line 2592)
    if_condition_69806 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2592, 8), result_not__69805)
    # Assigning a type to the variable 'if_condition_69806' (line 2592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2592, 8), 'if_condition_69806', if_condition_69806)
    # SSA begins for if statement (line 2592)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2593)
    # Processing the call arguments (line 2593)
    str_69808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2593, 29), 'str', 'The points in dimension %d must be 1-dimensional')
    # Getting the type of 'i' (line 2594)
    i_69809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 47), 'i', False)
    # Applying the binary operator '%' (line 2593)
    result_mod_69810 = python_operator(stypy.reporting.localization.Localization(__file__, 2593, 29), '%', str_69808, i_69809)
    
    # Processing the call keyword arguments (line 2593)
    kwargs_69811 = {}
    # Getting the type of 'ValueError' (line 2593)
    ValueError_69807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2593)
    ValueError_call_result_69812 = invoke(stypy.reporting.localization.Localization(__file__, 2593, 18), ValueError_69807, *[result_mod_69810], **kwargs_69811)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2593, 12), ValueError_call_result_69812, 'raise parameter', BaseException)
    # SSA join for if statement (line 2592)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2595)
    i_69813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 28), 'i')
    # Getting the type of 'values' (line 2595)
    values_69814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 15), 'values')
    # Obtaining the member 'shape' of a type (line 2595)
    shape_69815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 15), values_69814, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2595)
    getitem___69816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 15), shape_69815, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2595)
    subscript_call_result_69817 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 15), getitem___69816, i_69813)
    
    
    # Call to len(...): (line 2595)
    # Processing the call arguments (line 2595)
    # Getting the type of 'p' (line 2595)
    p_69819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 38), 'p', False)
    # Processing the call keyword arguments (line 2595)
    kwargs_69820 = {}
    # Getting the type of 'len' (line 2595)
    len_69818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 34), 'len', False)
    # Calling len(args, kwargs) (line 2595)
    len_call_result_69821 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 34), len_69818, *[p_69819], **kwargs_69820)
    
    # Applying the binary operator '==' (line 2595)
    result_eq_69822 = python_operator(stypy.reporting.localization.Localization(__file__, 2595, 15), '==', subscript_call_result_69817, len_call_result_69821)
    
    # Applying the 'not' unary operator (line 2595)
    result_not__69823 = python_operator(stypy.reporting.localization.Localization(__file__, 2595, 11), 'not', result_eq_69822)
    
    # Testing the type of an if condition (line 2595)
    if_condition_69824 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2595, 8), result_not__69823)
    # Assigning a type to the variable 'if_condition_69824' (line 2595)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2595, 8), 'if_condition_69824', if_condition_69824)
    # SSA begins for if statement (line 2595)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2596)
    # Processing the call arguments (line 2596)
    str_69826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2596, 29), 'str', 'There are %d points and %d values in dimension %d')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2597)
    tuple_69827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2597, 47), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2597)
    # Adding element type (line 2597)
    
    # Call to len(...): (line 2597)
    # Processing the call arguments (line 2597)
    # Getting the type of 'p' (line 2597)
    p_69829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 51), 'p', False)
    # Processing the call keyword arguments (line 2597)
    kwargs_69830 = {}
    # Getting the type of 'len' (line 2597)
    len_69828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 47), 'len', False)
    # Calling len(args, kwargs) (line 2597)
    len_call_result_69831 = invoke(stypy.reporting.localization.Localization(__file__, 2597, 47), len_69828, *[p_69829], **kwargs_69830)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2597, 47), tuple_69827, len_call_result_69831)
    # Adding element type (line 2597)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2597)
    i_69832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 68), 'i', False)
    # Getting the type of 'values' (line 2597)
    values_69833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 55), 'values', False)
    # Obtaining the member 'shape' of a type (line 2597)
    shape_69834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2597, 55), values_69833, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2597)
    getitem___69835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2597, 55), shape_69834, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2597)
    subscript_call_result_69836 = invoke(stypy.reporting.localization.Localization(__file__, 2597, 55), getitem___69835, i_69832)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2597, 47), tuple_69827, subscript_call_result_69836)
    # Adding element type (line 2597)
    # Getting the type of 'i' (line 2597)
    i_69837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 72), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2597, 47), tuple_69827, i_69837)
    
    # Applying the binary operator '%' (line 2596)
    result_mod_69838 = python_operator(stypy.reporting.localization.Localization(__file__, 2596, 29), '%', str_69826, tuple_69827)
    
    # Processing the call keyword arguments (line 2596)
    kwargs_69839 = {}
    # Getting the type of 'ValueError' (line 2596)
    ValueError_69825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2596)
    ValueError_call_result_69840 = invoke(stypy.reporting.localization.Localization(__file__, 2596, 18), ValueError_69825, *[result_mod_69838], **kwargs_69839)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2596, 12), ValueError_call_result_69840, 'raise parameter', BaseException)
    # SSA join for if statement (line 2595)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2598):
    
    # Assigning a Call to a Name (line 2598):
    
    # Call to tuple(...): (line 2598)
    # Processing the call arguments (line 2598)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'points' (line 2598)
    points_69847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 41), 'points', False)
    comprehension_69848 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2598, 18), points_69847)
    # Assigning a type to the variable 'p' (line 2598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2598, 18), 'p', comprehension_69848)
    
    # Call to asarray(...): (line 2598)
    # Processing the call arguments (line 2598)
    # Getting the type of 'p' (line 2598)
    p_69844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 29), 'p', False)
    # Processing the call keyword arguments (line 2598)
    kwargs_69845 = {}
    # Getting the type of 'np' (line 2598)
    np_69842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 18), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2598)
    asarray_69843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2598, 18), np_69842, 'asarray')
    # Calling asarray(args, kwargs) (line 2598)
    asarray_call_result_69846 = invoke(stypy.reporting.localization.Localization(__file__, 2598, 18), asarray_69843, *[p_69844], **kwargs_69845)
    
    list_69849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2598, 18), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2598, 18), list_69849, asarray_call_result_69846)
    # Processing the call keyword arguments (line 2598)
    kwargs_69850 = {}
    # Getting the type of 'tuple' (line 2598)
    tuple_69841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 11), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2598)
    tuple_call_result_69851 = invoke(stypy.reporting.localization.Localization(__file__, 2598, 11), tuple_69841, *[list_69849], **kwargs_69850)
    
    # Assigning a type to the variable 'grid' (line 2598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2598, 4), 'grid', tuple_call_result_69851)
    
    # Assigning a Call to a Name (line 2601):
    
    # Assigning a Call to a Name (line 2601):
    
    # Call to _ndim_coords_from_arrays(...): (line 2601)
    # Processing the call arguments (line 2601)
    # Getting the type of 'xi' (line 2601)
    xi_69853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 34), 'xi', False)
    # Processing the call keyword arguments (line 2601)
    
    # Call to len(...): (line 2601)
    # Processing the call arguments (line 2601)
    # Getting the type of 'grid' (line 2601)
    grid_69855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 47), 'grid', False)
    # Processing the call keyword arguments (line 2601)
    kwargs_69856 = {}
    # Getting the type of 'len' (line 2601)
    len_69854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 43), 'len', False)
    # Calling len(args, kwargs) (line 2601)
    len_call_result_69857 = invoke(stypy.reporting.localization.Localization(__file__, 2601, 43), len_69854, *[grid_69855], **kwargs_69856)
    
    keyword_69858 = len_call_result_69857
    kwargs_69859 = {'ndim': keyword_69858}
    # Getting the type of '_ndim_coords_from_arrays' (line 2601)
    _ndim_coords_from_arrays_69852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 9), '_ndim_coords_from_arrays', False)
    # Calling _ndim_coords_from_arrays(args, kwargs) (line 2601)
    _ndim_coords_from_arrays_call_result_69860 = invoke(stypy.reporting.localization.Localization(__file__, 2601, 9), _ndim_coords_from_arrays_69852, *[xi_69853], **kwargs_69859)
    
    # Assigning a type to the variable 'xi' (line 2601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2601, 4), 'xi', _ndim_coords_from_arrays_call_result_69860)
    
    
    
    # Obtaining the type of the subscript
    int_69861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2602, 16), 'int')
    # Getting the type of 'xi' (line 2602)
    xi_69862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 7), 'xi')
    # Obtaining the member 'shape' of a type (line 2602)
    shape_69863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 7), xi_69862, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2602)
    getitem___69864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 7), shape_69863, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2602)
    subscript_call_result_69865 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 7), getitem___69864, int_69861)
    
    
    # Call to len(...): (line 2602)
    # Processing the call arguments (line 2602)
    # Getting the type of 'grid' (line 2602)
    grid_69867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 27), 'grid', False)
    # Processing the call keyword arguments (line 2602)
    kwargs_69868 = {}
    # Getting the type of 'len' (line 2602)
    len_69866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 23), 'len', False)
    # Calling len(args, kwargs) (line 2602)
    len_call_result_69869 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 23), len_69866, *[grid_69867], **kwargs_69868)
    
    # Applying the binary operator '!=' (line 2602)
    result_ne_69870 = python_operator(stypy.reporting.localization.Localization(__file__, 2602, 7), '!=', subscript_call_result_69865, len_call_result_69869)
    
    # Testing the type of an if condition (line 2602)
    if_condition_69871 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2602, 4), result_ne_69870)
    # Assigning a type to the variable 'if_condition_69871' (line 2602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 4), 'if_condition_69871', if_condition_69871)
    # SSA begins for if statement (line 2602)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2603)
    # Processing the call arguments (line 2603)
    str_69873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 25), 'str', 'The requested sample points xi have dimension %d, but this RegularGridInterpolator has dimension %d')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2605)
    tuple_69874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2605, 43), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2605)
    # Adding element type (line 2605)
    
    # Obtaining the type of the subscript
    int_69875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2605, 52), 'int')
    # Getting the type of 'xi' (line 2605)
    xi_69876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 43), 'xi', False)
    # Obtaining the member 'shape' of a type (line 2605)
    shape_69877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 43), xi_69876, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2605)
    getitem___69878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 43), shape_69877, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2605)
    subscript_call_result_69879 = invoke(stypy.reporting.localization.Localization(__file__, 2605, 43), getitem___69878, int_69875)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2605, 43), tuple_69874, subscript_call_result_69879)
    # Adding element type (line 2605)
    
    # Call to len(...): (line 2605)
    # Processing the call arguments (line 2605)
    # Getting the type of 'grid' (line 2605)
    grid_69881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 60), 'grid', False)
    # Processing the call keyword arguments (line 2605)
    kwargs_69882 = {}
    # Getting the type of 'len' (line 2605)
    len_69880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 56), 'len', False)
    # Calling len(args, kwargs) (line 2605)
    len_call_result_69883 = invoke(stypy.reporting.localization.Localization(__file__, 2605, 56), len_69880, *[grid_69881], **kwargs_69882)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2605, 43), tuple_69874, len_call_result_69883)
    
    # Applying the binary operator '%' (line 2603)
    result_mod_69884 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 25), '%', str_69873, tuple_69874)
    
    # Processing the call keyword arguments (line 2603)
    kwargs_69885 = {}
    # Getting the type of 'ValueError' (line 2603)
    ValueError_69872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2603)
    ValueError_call_result_69886 = invoke(stypy.reporting.localization.Localization(__file__, 2603, 14), ValueError_69872, *[result_mod_69884], **kwargs_69885)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2603, 8), ValueError_call_result_69886, 'raise parameter', BaseException)
    # SSA join for if statement (line 2602)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to enumerate(...): (line 2607)
    # Processing the call arguments (line 2607)
    # Getting the type of 'xi' (line 2607)
    xi_69888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 26), 'xi', False)
    # Obtaining the member 'T' of a type (line 2607)
    T_69889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2607, 26), xi_69888, 'T')
    # Processing the call keyword arguments (line 2607)
    kwargs_69890 = {}
    # Getting the type of 'enumerate' (line 2607)
    enumerate_69887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 16), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 2607)
    enumerate_call_result_69891 = invoke(stypy.reporting.localization.Localization(__file__, 2607, 16), enumerate_69887, *[T_69889], **kwargs_69890)
    
    # Testing the type of a for loop iterable (line 2607)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2607, 4), enumerate_call_result_69891)
    # Getting the type of the for loop variable (line 2607)
    for_loop_var_69892 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2607, 4), enumerate_call_result_69891)
    # Assigning a type to the variable 'i' (line 2607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2607, 4), for_loop_var_69892))
    # Assigning a type to the variable 'p' (line 2607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 4), 'p', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2607, 4), for_loop_var_69892))
    # SSA begins for a for statement (line 2607)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    # Getting the type of 'bounds_error' (line 2608)
    bounds_error_69893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 11), 'bounds_error')
    
    
    # Call to logical_and(...): (line 2608)
    # Processing the call arguments (line 2608)
    
    # Call to all(...): (line 2608)
    # Processing the call arguments (line 2608)
    
    
    # Obtaining the type of the subscript
    int_69898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 62), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2608)
    i_69899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 59), 'i', False)
    # Getting the type of 'grid' (line 2608)
    grid_69900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 54), 'grid', False)
    # Obtaining the member '__getitem__' of a type (line 2608)
    getitem___69901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 54), grid_69900, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2608)
    subscript_call_result_69902 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 54), getitem___69901, i_69899)
    
    # Obtaining the member '__getitem__' of a type (line 2608)
    getitem___69903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 54), subscript_call_result_69902, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2608)
    subscript_call_result_69904 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 54), getitem___69903, int_69898)
    
    # Getting the type of 'p' (line 2608)
    p_69905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 68), 'p', False)
    # Applying the binary operator '<=' (line 2608)
    result_le_69906 = python_operator(stypy.reporting.localization.Localization(__file__, 2608, 54), '<=', subscript_call_result_69904, p_69905)
    
    # Processing the call keyword arguments (line 2608)
    kwargs_69907 = {}
    # Getting the type of 'np' (line 2608)
    np_69896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 47), 'np', False)
    # Obtaining the member 'all' of a type (line 2608)
    all_69897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 47), np_69896, 'all')
    # Calling all(args, kwargs) (line 2608)
    all_call_result_69908 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 47), all_69897, *[result_le_69906], **kwargs_69907)
    
    
    # Call to all(...): (line 2609)
    # Processing the call arguments (line 2609)
    
    # Getting the type of 'p' (line 2609)
    p_69911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 54), 'p', False)
    
    # Obtaining the type of the subscript
    int_69912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2609, 67), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2609)
    i_69913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 64), 'i', False)
    # Getting the type of 'grid' (line 2609)
    grid_69914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 59), 'grid', False)
    # Obtaining the member '__getitem__' of a type (line 2609)
    getitem___69915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2609, 59), grid_69914, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2609)
    subscript_call_result_69916 = invoke(stypy.reporting.localization.Localization(__file__, 2609, 59), getitem___69915, i_69913)
    
    # Obtaining the member '__getitem__' of a type (line 2609)
    getitem___69917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2609, 59), subscript_call_result_69916, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2609)
    subscript_call_result_69918 = invoke(stypy.reporting.localization.Localization(__file__, 2609, 59), getitem___69917, int_69912)
    
    # Applying the binary operator '<=' (line 2609)
    result_le_69919 = python_operator(stypy.reporting.localization.Localization(__file__, 2609, 54), '<=', p_69911, subscript_call_result_69918)
    
    # Processing the call keyword arguments (line 2609)
    kwargs_69920 = {}
    # Getting the type of 'np' (line 2609)
    np_69909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 47), 'np', False)
    # Obtaining the member 'all' of a type (line 2609)
    all_69910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2609, 47), np_69909, 'all')
    # Calling all(args, kwargs) (line 2609)
    all_call_result_69921 = invoke(stypy.reporting.localization.Localization(__file__, 2609, 47), all_69910, *[result_le_69919], **kwargs_69920)
    
    # Processing the call keyword arguments (line 2608)
    kwargs_69922 = {}
    # Getting the type of 'np' (line 2608)
    np_69894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 32), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 2608)
    logical_and_69895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 32), np_69894, 'logical_and')
    # Calling logical_and(args, kwargs) (line 2608)
    logical_and_call_result_69923 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 32), logical_and_69895, *[all_call_result_69908, all_call_result_69921], **kwargs_69922)
    
    # Applying the 'not' unary operator (line 2608)
    result_not__69924 = python_operator(stypy.reporting.localization.Localization(__file__, 2608, 28), 'not', logical_and_call_result_69923)
    
    # Applying the binary operator 'and' (line 2608)
    result_and_keyword_69925 = python_operator(stypy.reporting.localization.Localization(__file__, 2608, 11), 'and', bounds_error_69893, result_not__69924)
    
    # Testing the type of an if condition (line 2608)
    if_condition_69926 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2608, 8), result_and_keyword_69925)
    # Assigning a type to the variable 'if_condition_69926' (line 2608)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2608, 8), 'if_condition_69926', if_condition_69926)
    # SSA begins for if statement (line 2608)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2610)
    # Processing the call arguments (line 2610)
    str_69928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2610, 29), 'str', 'One of the requested xi is out of bounds in dimension %d')
    # Getting the type of 'i' (line 2611)
    i_69929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 49), 'i', False)
    # Applying the binary operator '%' (line 2610)
    result_mod_69930 = python_operator(stypy.reporting.localization.Localization(__file__, 2610, 29), '%', str_69928, i_69929)
    
    # Processing the call keyword arguments (line 2610)
    kwargs_69931 = {}
    # Getting the type of 'ValueError' (line 2610)
    ValueError_69927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2610)
    ValueError_call_result_69932 = invoke(stypy.reporting.localization.Localization(__file__, 2610, 18), ValueError_69927, *[result_mod_69930], **kwargs_69931)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2610, 12), ValueError_call_result_69932, 'raise parameter', BaseException)
    # SSA join for if statement (line 2608)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'method' (line 2614)
    method_69933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 7), 'method')
    str_69934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2614, 17), 'str', 'linear')
    # Applying the binary operator '==' (line 2614)
    result_eq_69935 = python_operator(stypy.reporting.localization.Localization(__file__, 2614, 7), '==', method_69933, str_69934)
    
    # Testing the type of an if condition (line 2614)
    if_condition_69936 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2614, 4), result_eq_69935)
    # Assigning a type to the variable 'if_condition_69936' (line 2614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2614, 4), 'if_condition_69936', if_condition_69936)
    # SSA begins for if statement (line 2614)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2615):
    
    # Assigning a Call to a Name (line 2615):
    
    # Call to RegularGridInterpolator(...): (line 2615)
    # Processing the call arguments (line 2615)
    # Getting the type of 'points' (line 2615)
    points_69938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2615, 41), 'points', False)
    # Getting the type of 'values' (line 2615)
    values_69939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2615, 49), 'values', False)
    # Processing the call keyword arguments (line 2615)
    str_69940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2615, 64), 'str', 'linear')
    keyword_69941 = str_69940
    # Getting the type of 'bounds_error' (line 2616)
    bounds_error_69942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 54), 'bounds_error', False)
    keyword_69943 = bounds_error_69942
    # Getting the type of 'fill_value' (line 2617)
    fill_value_69944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 52), 'fill_value', False)
    keyword_69945 = fill_value_69944
    kwargs_69946 = {'bounds_error': keyword_69943, 'fill_value': keyword_69945, 'method': keyword_69941}
    # Getting the type of 'RegularGridInterpolator' (line 2615)
    RegularGridInterpolator_69937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2615, 17), 'RegularGridInterpolator', False)
    # Calling RegularGridInterpolator(args, kwargs) (line 2615)
    RegularGridInterpolator_call_result_69947 = invoke(stypy.reporting.localization.Localization(__file__, 2615, 17), RegularGridInterpolator_69937, *[points_69938, values_69939], **kwargs_69946)
    
    # Assigning a type to the variable 'interp' (line 2615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2615, 8), 'interp', RegularGridInterpolator_call_result_69947)
    
    # Call to interp(...): (line 2618)
    # Processing the call arguments (line 2618)
    # Getting the type of 'xi' (line 2618)
    xi_69949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 22), 'xi', False)
    # Processing the call keyword arguments (line 2618)
    kwargs_69950 = {}
    # Getting the type of 'interp' (line 2618)
    interp_69948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 15), 'interp', False)
    # Calling interp(args, kwargs) (line 2618)
    interp_call_result_69951 = invoke(stypy.reporting.localization.Localization(__file__, 2618, 15), interp_69948, *[xi_69949], **kwargs_69950)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2618)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2618, 8), 'stypy_return_type', interp_call_result_69951)
    # SSA branch for the else part of an if statement (line 2614)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'method' (line 2619)
    method_69952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 9), 'method')
    str_69953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2619, 19), 'str', 'nearest')
    # Applying the binary operator '==' (line 2619)
    result_eq_69954 = python_operator(stypy.reporting.localization.Localization(__file__, 2619, 9), '==', method_69952, str_69953)
    
    # Testing the type of an if condition (line 2619)
    if_condition_69955 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2619, 9), result_eq_69954)
    # Assigning a type to the variable 'if_condition_69955' (line 2619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2619, 9), 'if_condition_69955', if_condition_69955)
    # SSA begins for if statement (line 2619)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2620):
    
    # Assigning a Call to a Name (line 2620):
    
    # Call to RegularGridInterpolator(...): (line 2620)
    # Processing the call arguments (line 2620)
    # Getting the type of 'points' (line 2620)
    points_69957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 41), 'points', False)
    # Getting the type of 'values' (line 2620)
    values_69958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 49), 'values', False)
    # Processing the call keyword arguments (line 2620)
    str_69959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2620, 64), 'str', 'nearest')
    keyword_69960 = str_69959
    # Getting the type of 'bounds_error' (line 2621)
    bounds_error_69961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 54), 'bounds_error', False)
    keyword_69962 = bounds_error_69961
    # Getting the type of 'fill_value' (line 2622)
    fill_value_69963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 52), 'fill_value', False)
    keyword_69964 = fill_value_69963
    kwargs_69965 = {'bounds_error': keyword_69962, 'fill_value': keyword_69964, 'method': keyword_69960}
    # Getting the type of 'RegularGridInterpolator' (line 2620)
    RegularGridInterpolator_69956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 17), 'RegularGridInterpolator', False)
    # Calling RegularGridInterpolator(args, kwargs) (line 2620)
    RegularGridInterpolator_call_result_69966 = invoke(stypy.reporting.localization.Localization(__file__, 2620, 17), RegularGridInterpolator_69956, *[points_69957, values_69958], **kwargs_69965)
    
    # Assigning a type to the variable 'interp' (line 2620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2620, 8), 'interp', RegularGridInterpolator_call_result_69966)
    
    # Call to interp(...): (line 2623)
    # Processing the call arguments (line 2623)
    # Getting the type of 'xi' (line 2623)
    xi_69968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 22), 'xi', False)
    # Processing the call keyword arguments (line 2623)
    kwargs_69969 = {}
    # Getting the type of 'interp' (line 2623)
    interp_69967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 15), 'interp', False)
    # Calling interp(args, kwargs) (line 2623)
    interp_call_result_69970 = invoke(stypy.reporting.localization.Localization(__file__, 2623, 15), interp_69967, *[xi_69968], **kwargs_69969)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2623, 8), 'stypy_return_type', interp_call_result_69970)
    # SSA branch for the else part of an if statement (line 2619)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'method' (line 2624)
    method_69971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 9), 'method')
    str_69972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2624, 19), 'str', 'splinef2d')
    # Applying the binary operator '==' (line 2624)
    result_eq_69973 = python_operator(stypy.reporting.localization.Localization(__file__, 2624, 9), '==', method_69971, str_69972)
    
    # Testing the type of an if condition (line 2624)
    if_condition_69974 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2624, 9), result_eq_69973)
    # Assigning a type to the variable 'if_condition_69974' (line 2624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2624, 9), 'if_condition_69974', if_condition_69974)
    # SSA begins for if statement (line 2624)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 2625):
    
    # Assigning a Attribute to a Name (line 2625):
    # Getting the type of 'xi' (line 2625)
    xi_69975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2625, 19), 'xi')
    # Obtaining the member 'shape' of a type (line 2625)
    shape_69976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2625, 19), xi_69975, 'shape')
    # Assigning a type to the variable 'xi_shape' (line 2625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2625, 8), 'xi_shape', shape_69976)
    
    # Assigning a Call to a Name (line 2626):
    
    # Assigning a Call to a Name (line 2626):
    
    # Call to reshape(...): (line 2626)
    # Processing the call arguments (line 2626)
    int_69979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2626, 24), 'int')
    
    # Obtaining the type of the subscript
    int_69980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2626, 37), 'int')
    # Getting the type of 'xi' (line 2626)
    xi_69981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 28), 'xi', False)
    # Obtaining the member 'shape' of a type (line 2626)
    shape_69982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2626, 28), xi_69981, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2626)
    getitem___69983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2626, 28), shape_69982, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2626)
    subscript_call_result_69984 = invoke(stypy.reporting.localization.Localization(__file__, 2626, 28), getitem___69983, int_69980)
    
    # Processing the call keyword arguments (line 2626)
    kwargs_69985 = {}
    # Getting the type of 'xi' (line 2626)
    xi_69977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 13), 'xi', False)
    # Obtaining the member 'reshape' of a type (line 2626)
    reshape_69978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2626, 13), xi_69977, 'reshape')
    # Calling reshape(args, kwargs) (line 2626)
    reshape_call_result_69986 = invoke(stypy.reporting.localization.Localization(__file__, 2626, 13), reshape_69978, *[int_69979, subscript_call_result_69984], **kwargs_69985)
    
    # Assigning a type to the variable 'xi' (line 2626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2626, 8), 'xi', reshape_call_result_69986)
    
    # Assigning a Call to a Name (line 2629):
    
    # Assigning a Call to a Name (line 2629):
    
    # Call to all(...): (line 2629)
    # Processing the call arguments (line 2629)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2629)
    tuple_69989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2629)
    # Adding element type (line 2629)
    
    
    # Obtaining the type of the subscript
    int_69990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 36), 'int')
    
    # Obtaining the type of the subscript
    int_69991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 33), 'int')
    # Getting the type of 'grid' (line 2629)
    grid_69992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 28), 'grid', False)
    # Obtaining the member '__getitem__' of a type (line 2629)
    getitem___69993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 28), grid_69992, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2629)
    subscript_call_result_69994 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 28), getitem___69993, int_69991)
    
    # Obtaining the member '__getitem__' of a type (line 2629)
    getitem___69995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 28), subscript_call_result_69994, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2629)
    subscript_call_result_69996 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 28), getitem___69995, int_69990)
    
    
    # Obtaining the type of the subscript
    slice_69997 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2629, 42), None, None, None)
    int_69998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 48), 'int')
    # Getting the type of 'xi' (line 2629)
    xi_69999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 42), 'xi', False)
    # Obtaining the member '__getitem__' of a type (line 2629)
    getitem___70000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 42), xi_69999, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2629)
    subscript_call_result_70001 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 42), getitem___70000, (slice_69997, int_69998))
    
    # Applying the binary operator '<=' (line 2629)
    result_le_70002 = python_operator(stypy.reporting.localization.Localization(__file__, 2629, 28), '<=', subscript_call_result_69996, subscript_call_result_70001)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2629, 28), tuple_69989, result_le_70002)
    # Adding element type (line 2629)
    
    
    # Obtaining the type of the subscript
    slice_70003 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2629, 52), None, None, None)
    int_70004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 58), 'int')
    # Getting the type of 'xi' (line 2629)
    xi_70005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 52), 'xi', False)
    # Obtaining the member '__getitem__' of a type (line 2629)
    getitem___70006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 52), xi_70005, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2629)
    subscript_call_result_70007 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 52), getitem___70006, (slice_70003, int_70004))
    
    
    # Obtaining the type of the subscript
    int_70008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 72), 'int')
    
    # Obtaining the type of the subscript
    int_70009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 69), 'int')
    # Getting the type of 'grid' (line 2629)
    grid_70010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 64), 'grid', False)
    # Obtaining the member '__getitem__' of a type (line 2629)
    getitem___70011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 64), grid_70010, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2629)
    subscript_call_result_70012 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 64), getitem___70011, int_70009)
    
    # Obtaining the member '__getitem__' of a type (line 2629)
    getitem___70013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 64), subscript_call_result_70012, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2629)
    subscript_call_result_70014 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 64), getitem___70013, int_70008)
    
    # Applying the binary operator '<=' (line 2629)
    result_le_70015 = python_operator(stypy.reporting.localization.Localization(__file__, 2629, 52), '<=', subscript_call_result_70007, subscript_call_result_70014)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2629, 28), tuple_69989, result_le_70015)
    # Adding element type (line 2629)
    
    
    # Obtaining the type of the subscript
    int_70016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2630, 36), 'int')
    
    # Obtaining the type of the subscript
    int_70017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2630, 33), 'int')
    # Getting the type of 'grid' (line 2630)
    grid_70018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 28), 'grid', False)
    # Obtaining the member '__getitem__' of a type (line 2630)
    getitem___70019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2630, 28), grid_70018, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2630)
    subscript_call_result_70020 = invoke(stypy.reporting.localization.Localization(__file__, 2630, 28), getitem___70019, int_70017)
    
    # Obtaining the member '__getitem__' of a type (line 2630)
    getitem___70021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2630, 28), subscript_call_result_70020, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2630)
    subscript_call_result_70022 = invoke(stypy.reporting.localization.Localization(__file__, 2630, 28), getitem___70021, int_70016)
    
    
    # Obtaining the type of the subscript
    slice_70023 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2630, 42), None, None, None)
    int_70024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2630, 48), 'int')
    # Getting the type of 'xi' (line 2630)
    xi_70025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 42), 'xi', False)
    # Obtaining the member '__getitem__' of a type (line 2630)
    getitem___70026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2630, 42), xi_70025, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2630)
    subscript_call_result_70027 = invoke(stypy.reporting.localization.Localization(__file__, 2630, 42), getitem___70026, (slice_70023, int_70024))
    
    # Applying the binary operator '<=' (line 2630)
    result_le_70028 = python_operator(stypy.reporting.localization.Localization(__file__, 2630, 28), '<=', subscript_call_result_70022, subscript_call_result_70027)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2629, 28), tuple_69989, result_le_70028)
    # Adding element type (line 2629)
    
    
    # Obtaining the type of the subscript
    slice_70029 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2630, 52), None, None, None)
    int_70030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2630, 58), 'int')
    # Getting the type of 'xi' (line 2630)
    xi_70031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 52), 'xi', False)
    # Obtaining the member '__getitem__' of a type (line 2630)
    getitem___70032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2630, 52), xi_70031, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2630)
    subscript_call_result_70033 = invoke(stypy.reporting.localization.Localization(__file__, 2630, 52), getitem___70032, (slice_70029, int_70030))
    
    
    # Obtaining the type of the subscript
    int_70034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2630, 72), 'int')
    
    # Obtaining the type of the subscript
    int_70035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2630, 69), 'int')
    # Getting the type of 'grid' (line 2630)
    grid_70036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 64), 'grid', False)
    # Obtaining the member '__getitem__' of a type (line 2630)
    getitem___70037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2630, 64), grid_70036, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2630)
    subscript_call_result_70038 = invoke(stypy.reporting.localization.Localization(__file__, 2630, 64), getitem___70037, int_70035)
    
    # Obtaining the member '__getitem__' of a type (line 2630)
    getitem___70039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2630, 64), subscript_call_result_70038, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2630)
    subscript_call_result_70040 = invoke(stypy.reporting.localization.Localization(__file__, 2630, 64), getitem___70039, int_70034)
    
    # Applying the binary operator '<=' (line 2630)
    result_le_70041 = python_operator(stypy.reporting.localization.Localization(__file__, 2630, 52), '<=', subscript_call_result_70033, subscript_call_result_70040)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2629, 28), tuple_69989, result_le_70041)
    
    # Processing the call keyword arguments (line 2629)
    int_70042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2631, 32), 'int')
    keyword_70043 = int_70042
    kwargs_70044 = {'axis': keyword_70043}
    # Getting the type of 'np' (line 2629)
    np_69987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 20), 'np', False)
    # Obtaining the member 'all' of a type (line 2629)
    all_69988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 20), np_69987, 'all')
    # Calling all(args, kwargs) (line 2629)
    all_call_result_70045 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 20), all_69988, *[tuple_69989], **kwargs_70044)
    
    # Assigning a type to the variable 'idx_valid' (line 2629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2629, 8), 'idx_valid', all_call_result_70045)
    
    # Assigning a Call to a Name (line 2632):
    
    # Assigning a Call to a Name (line 2632):
    
    # Call to empty_like(...): (line 2632)
    # Processing the call arguments (line 2632)
    
    # Obtaining the type of the subscript
    slice_70048 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2632, 31), None, None, None)
    int_70049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2632, 37), 'int')
    # Getting the type of 'xi' (line 2632)
    xi_70050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 31), 'xi', False)
    # Obtaining the member '__getitem__' of a type (line 2632)
    getitem___70051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2632, 31), xi_70050, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2632)
    subscript_call_result_70052 = invoke(stypy.reporting.localization.Localization(__file__, 2632, 31), getitem___70051, (slice_70048, int_70049))
    
    # Processing the call keyword arguments (line 2632)
    kwargs_70053 = {}
    # Getting the type of 'np' (line 2632)
    np_70046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 17), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 2632)
    empty_like_70047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2632, 17), np_70046, 'empty_like')
    # Calling empty_like(args, kwargs) (line 2632)
    empty_like_call_result_70054 = invoke(stypy.reporting.localization.Localization(__file__, 2632, 17), empty_like_70047, *[subscript_call_result_70052], **kwargs_70053)
    
    # Assigning a type to the variable 'result' (line 2632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2632, 8), 'result', empty_like_call_result_70054)
    
    # Assigning a Call to a Name (line 2635):
    
    # Assigning a Call to a Name (line 2635):
    
    # Call to RectBivariateSpline(...): (line 2635)
    # Processing the call arguments (line 2635)
    
    # Obtaining the type of the subscript
    int_70056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2635, 44), 'int')
    # Getting the type of 'points' (line 2635)
    points_70057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 37), 'points', False)
    # Obtaining the member '__getitem__' of a type (line 2635)
    getitem___70058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2635, 37), points_70057, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2635)
    subscript_call_result_70059 = invoke(stypy.reporting.localization.Localization(__file__, 2635, 37), getitem___70058, int_70056)
    
    
    # Obtaining the type of the subscript
    int_70060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2635, 55), 'int')
    # Getting the type of 'points' (line 2635)
    points_70061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 48), 'points', False)
    # Obtaining the member '__getitem__' of a type (line 2635)
    getitem___70062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2635, 48), points_70061, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2635)
    subscript_call_result_70063 = invoke(stypy.reporting.localization.Localization(__file__, 2635, 48), getitem___70062, int_70060)
    
    
    # Obtaining the type of the subscript
    slice_70064 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2635, 59), None, None, None)
    # Getting the type of 'values' (line 2635)
    values_70065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 59), 'values', False)
    # Obtaining the member '__getitem__' of a type (line 2635)
    getitem___70066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2635, 59), values_70065, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2635)
    subscript_call_result_70067 = invoke(stypy.reporting.localization.Localization(__file__, 2635, 59), getitem___70066, slice_70064)
    
    # Processing the call keyword arguments (line 2635)
    kwargs_70068 = {}
    # Getting the type of 'RectBivariateSpline' (line 2635)
    RectBivariateSpline_70055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 17), 'RectBivariateSpline', False)
    # Calling RectBivariateSpline(args, kwargs) (line 2635)
    RectBivariateSpline_call_result_70069 = invoke(stypy.reporting.localization.Localization(__file__, 2635, 17), RectBivariateSpline_70055, *[subscript_call_result_70059, subscript_call_result_70063, subscript_call_result_70067], **kwargs_70068)
    
    # Assigning a type to the variable 'interp' (line 2635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2635, 8), 'interp', RectBivariateSpline_call_result_70069)
    
    # Assigning a Call to a Subscript (line 2636):
    
    # Assigning a Call to a Subscript (line 2636):
    
    # Call to ev(...): (line 2636)
    # Processing the call arguments (line 2636)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2636)
    tuple_70072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2636, 41), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2636)
    # Adding element type (line 2636)
    # Getting the type of 'idx_valid' (line 2636)
    idx_valid_70073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 41), 'idx_valid', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2636, 41), tuple_70072, idx_valid_70073)
    # Adding element type (line 2636)
    int_70074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2636, 52), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2636, 41), tuple_70072, int_70074)
    
    # Getting the type of 'xi' (line 2636)
    xi_70075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 38), 'xi', False)
    # Obtaining the member '__getitem__' of a type (line 2636)
    getitem___70076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 38), xi_70075, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2636)
    subscript_call_result_70077 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 38), getitem___70076, tuple_70072)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2636)
    tuple_70078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2636, 59), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2636)
    # Adding element type (line 2636)
    # Getting the type of 'idx_valid' (line 2636)
    idx_valid_70079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 59), 'idx_valid', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2636, 59), tuple_70078, idx_valid_70079)
    # Adding element type (line 2636)
    int_70080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2636, 70), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2636, 59), tuple_70078, int_70080)
    
    # Getting the type of 'xi' (line 2636)
    xi_70081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 56), 'xi', False)
    # Obtaining the member '__getitem__' of a type (line 2636)
    getitem___70082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 56), xi_70081, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2636)
    subscript_call_result_70083 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 56), getitem___70082, tuple_70078)
    
    # Processing the call keyword arguments (line 2636)
    kwargs_70084 = {}
    # Getting the type of 'interp' (line 2636)
    interp_70070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 28), 'interp', False)
    # Obtaining the member 'ev' of a type (line 2636)
    ev_70071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 28), interp_70070, 'ev')
    # Calling ev(args, kwargs) (line 2636)
    ev_call_result_70085 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 28), ev_70071, *[subscript_call_result_70077, subscript_call_result_70083], **kwargs_70084)
    
    # Getting the type of 'result' (line 2636)
    result_70086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 8), 'result')
    # Getting the type of 'idx_valid' (line 2636)
    idx_valid_70087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 15), 'idx_valid')
    # Storing an element on a container (line 2636)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2636, 8), result_70086, (idx_valid_70087, ev_call_result_70085))
    
    # Assigning a Name to a Subscript (line 2637):
    
    # Assigning a Name to a Subscript (line 2637):
    # Getting the type of 'fill_value' (line 2637)
    fill_value_70088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 44), 'fill_value')
    # Getting the type of 'result' (line 2637)
    result_70089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 8), 'result')
    
    # Call to logical_not(...): (line 2637)
    # Processing the call arguments (line 2637)
    # Getting the type of 'idx_valid' (line 2637)
    idx_valid_70092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 30), 'idx_valid', False)
    # Processing the call keyword arguments (line 2637)
    kwargs_70093 = {}
    # Getting the type of 'np' (line 2637)
    np_70090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 15), 'np', False)
    # Obtaining the member 'logical_not' of a type (line 2637)
    logical_not_70091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2637, 15), np_70090, 'logical_not')
    # Calling logical_not(args, kwargs) (line 2637)
    logical_not_call_result_70094 = invoke(stypy.reporting.localization.Localization(__file__, 2637, 15), logical_not_70091, *[idx_valid_70092], **kwargs_70093)
    
    # Storing an element on a container (line 2637)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2637, 8), result_70089, (logical_not_call_result_70094, fill_value_70088))
    
    # Call to reshape(...): (line 2639)
    # Processing the call arguments (line 2639)
    
    # Obtaining the type of the subscript
    int_70097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2639, 40), 'int')
    slice_70098 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2639, 30), None, int_70097, None)
    # Getting the type of 'xi_shape' (line 2639)
    xi_shape_70099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 30), 'xi_shape', False)
    # Obtaining the member '__getitem__' of a type (line 2639)
    getitem___70100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2639, 30), xi_shape_70099, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2639)
    subscript_call_result_70101 = invoke(stypy.reporting.localization.Localization(__file__, 2639, 30), getitem___70100, slice_70098)
    
    # Processing the call keyword arguments (line 2639)
    kwargs_70102 = {}
    # Getting the type of 'result' (line 2639)
    result_70095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 15), 'result', False)
    # Obtaining the member 'reshape' of a type (line 2639)
    reshape_70096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2639, 15), result_70095, 'reshape')
    # Calling reshape(args, kwargs) (line 2639)
    reshape_call_result_70103 = invoke(stypy.reporting.localization.Localization(__file__, 2639, 15), reshape_70096, *[subscript_call_result_70101], **kwargs_70102)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2639, 8), 'stypy_return_type', reshape_call_result_70103)
    # SSA join for if statement (line 2624)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2619)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2614)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'interpn(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'interpn' in the type store
    # Getting the type of 'stypy_return_type' (line 2507)
    stypy_return_type_70104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_70104)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'interpn'
    return stypy_return_type_70104

# Assigning a type to the variable 'interpn' (line 2507)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2507, 0), 'interpn', interpn)
# Declaration of the '_ppform' class
# Getting the type of 'PPoly' (line 2643)
PPoly_70105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 14), 'PPoly')

class _ppform(PPoly_70105, ):
    str_70106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2649, (-1)), 'str', '\n    Deprecated piecewise polynomial class.\n\n    New code should use the `PPoly` class instead.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_70107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2651, 44), 'float')
        # Getting the type of 'False' (line 2651)
        False_70108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 54), 'False')
        defaults = [float_70107, False_70108]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2651, 4, False)
        # Assigning a type to the variable 'self' (line 2652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2652, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ppform.__init__', ['coeffs', 'breaks', 'fill', 'sort'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['coeffs', 'breaks', 'fill', 'sort'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to warn(...): (line 2652)
        # Processing the call arguments (line 2652)
        str_70111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2652, 22), 'str', '_ppform is deprecated -- use PPoly instead')
        # Processing the call keyword arguments (line 2652)
        # Getting the type of 'DeprecationWarning' (line 2653)
        DeprecationWarning_70112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 31), 'DeprecationWarning', False)
        keyword_70113 = DeprecationWarning_70112
        kwargs_70114 = {'category': keyword_70113}
        # Getting the type of 'warnings' (line 2652)
        warnings_70109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2652, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2652)
        warn_70110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2652, 8), warnings_70109, 'warn')
        # Calling warn(args, kwargs) (line 2652)
        warn_call_result_70115 = invoke(stypy.reporting.localization.Localization(__file__, 2652, 8), warn_70110, *[str_70111], **kwargs_70114)
        
        
        # Getting the type of 'sort' (line 2655)
        sort_70116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2655, 11), 'sort')
        # Testing the type of an if condition (line 2655)
        if_condition_70117 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2655, 8), sort_70116)
        # Assigning a type to the variable 'if_condition_70117' (line 2655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2655, 8), 'if_condition_70117', if_condition_70117)
        # SSA begins for if statement (line 2655)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2656):
        
        # Assigning a Call to a Name (line 2656):
        
        # Call to sort(...): (line 2656)
        # Processing the call arguments (line 2656)
        # Getting the type of 'breaks' (line 2656)
        breaks_70120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2656, 29), 'breaks', False)
        # Processing the call keyword arguments (line 2656)
        kwargs_70121 = {}
        # Getting the type of 'np' (line 2656)
        np_70118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2656, 21), 'np', False)
        # Obtaining the member 'sort' of a type (line 2656)
        sort_70119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2656, 21), np_70118, 'sort')
        # Calling sort(args, kwargs) (line 2656)
        sort_call_result_70122 = invoke(stypy.reporting.localization.Localization(__file__, 2656, 21), sort_70119, *[breaks_70120], **kwargs_70121)
        
        # Assigning a type to the variable 'breaks' (line 2656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2656, 12), 'breaks', sort_call_result_70122)
        # SSA branch for the else part of an if statement (line 2655)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2658):
        
        # Assigning a Call to a Name (line 2658):
        
        # Call to asarray(...): (line 2658)
        # Processing the call arguments (line 2658)
        # Getting the type of 'breaks' (line 2658)
        breaks_70125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 32), 'breaks', False)
        # Processing the call keyword arguments (line 2658)
        kwargs_70126 = {}
        # Getting the type of 'np' (line 2658)
        np_70123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 21), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2658)
        asarray_70124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2658, 21), np_70123, 'asarray')
        # Calling asarray(args, kwargs) (line 2658)
        asarray_call_result_70127 = invoke(stypy.reporting.localization.Localization(__file__, 2658, 21), asarray_70124, *[breaks_70125], **kwargs_70126)
        
        # Assigning a type to the variable 'breaks' (line 2658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2658, 12), 'breaks', asarray_call_result_70127)
        # SSA join for if statement (line 2655)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 2660)
        # Processing the call arguments (line 2660)
        # Getting the type of 'self' (line 2660)
        self_70130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 23), 'self', False)
        # Getting the type of 'coeffs' (line 2660)
        coeffs_70131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 29), 'coeffs', False)
        # Getting the type of 'breaks' (line 2660)
        breaks_70132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 37), 'breaks', False)
        # Processing the call keyword arguments (line 2660)
        kwargs_70133 = {}
        # Getting the type of 'PPoly' (line 2660)
        PPoly_70128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 8), 'PPoly', False)
        # Obtaining the member '__init__' of a type (line 2660)
        init___70129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2660, 8), PPoly_70128, '__init__')
        # Calling __init__(args, kwargs) (line 2660)
        init___call_result_70134 = invoke(stypy.reporting.localization.Localization(__file__, 2660, 8), init___70129, *[self_70130, coeffs_70131, breaks_70132], **kwargs_70133)
        
        
        # Assigning a Attribute to a Attribute (line 2662):
        
        # Assigning a Attribute to a Attribute (line 2662):
        # Getting the type of 'self' (line 2662)
        self_70135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 22), 'self')
        # Obtaining the member 'c' of a type (line 2662)
        c_70136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2662, 22), self_70135, 'c')
        # Getting the type of 'self' (line 2662)
        self_70137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 8), 'self')
        # Setting the type of the member 'coeffs' of a type (line 2662)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2662, 8), self_70137, 'coeffs', c_70136)
        
        # Assigning a Attribute to a Attribute (line 2663):
        
        # Assigning a Attribute to a Attribute (line 2663):
        # Getting the type of 'self' (line 2663)
        self_70138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 22), 'self')
        # Obtaining the member 'x' of a type (line 2663)
        x_70139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 22), self_70138, 'x')
        # Getting the type of 'self' (line 2663)
        self_70140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 8), 'self')
        # Setting the type of the member 'breaks' of a type (line 2663)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 8), self_70140, 'breaks', x_70139)
        
        # Assigning a Subscript to a Attribute (line 2664):
        
        # Assigning a Subscript to a Attribute (line 2664):
        
        # Obtaining the type of the subscript
        int_70141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2664, 35), 'int')
        # Getting the type of 'self' (line 2664)
        self_70142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 17), 'self')
        # Obtaining the member 'coeffs' of a type (line 2664)
        coeffs_70143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2664, 17), self_70142, 'coeffs')
        # Obtaining the member 'shape' of a type (line 2664)
        shape_70144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2664, 17), coeffs_70143, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2664)
        getitem___70145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2664, 17), shape_70144, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2664)
        subscript_call_result_70146 = invoke(stypy.reporting.localization.Localization(__file__, 2664, 17), getitem___70145, int_70141)
        
        # Getting the type of 'self' (line 2664)
        self_70147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 8), 'self')
        # Setting the type of the member 'K' of a type (line 2664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2664, 8), self_70147, 'K', subscript_call_result_70146)
        
        # Assigning a Name to a Attribute (line 2665):
        
        # Assigning a Name to a Attribute (line 2665):
        # Getting the type of 'fill' (line 2665)
        fill_70148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 20), 'fill')
        # Getting the type of 'self' (line 2665)
        self_70149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 8), 'self')
        # Setting the type of the member 'fill' of a type (line 2665)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2665, 8), self_70149, 'fill', fill_70148)
        
        # Assigning a Subscript to a Attribute (line 2666):
        
        # Assigning a Subscript to a Attribute (line 2666):
        
        # Obtaining the type of the subscript
        int_70150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2666, 29), 'int')
        # Getting the type of 'self' (line 2666)
        self_70151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 17), 'self')
        # Obtaining the member 'breaks' of a type (line 2666)
        breaks_70152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2666, 17), self_70151, 'breaks')
        # Obtaining the member '__getitem__' of a type (line 2666)
        getitem___70153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2666, 17), breaks_70152, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2666)
        subscript_call_result_70154 = invoke(stypy.reporting.localization.Localization(__file__, 2666, 17), getitem___70153, int_70150)
        
        # Getting the type of 'self' (line 2666)
        self_70155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 8), 'self')
        # Setting the type of the member 'a' of a type (line 2666)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2666, 8), self_70155, 'a', subscript_call_result_70154)
        
        # Assigning a Subscript to a Attribute (line 2667):
        
        # Assigning a Subscript to a Attribute (line 2667):
        
        # Obtaining the type of the subscript
        int_70156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2667, 29), 'int')
        # Getting the type of 'self' (line 2667)
        self_70157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 17), 'self')
        # Obtaining the member 'breaks' of a type (line 2667)
        breaks_70158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 17), self_70157, 'breaks')
        # Obtaining the member '__getitem__' of a type (line 2667)
        getitem___70159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 17), breaks_70158, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
        subscript_call_result_70160 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 17), getitem___70159, int_70156)
        
        # Getting the type of 'self' (line 2667)
        self_70161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 8), 'self')
        # Setting the type of the member 'b' of a type (line 2667)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 8), self_70161, 'b', subscript_call_result_70160)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 2669, 4, False)
        # Assigning a type to the variable 'self' (line 2670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2670, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ppform.__call__.__dict__.__setitem__('stypy_localization', localization)
        _ppform.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ppform.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ppform.__call__.__dict__.__setitem__('stypy_function_name', '_ppform.__call__')
        _ppform.__call__.__dict__.__setitem__('stypy_param_names_list', ['x'])
        _ppform.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ppform.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ppform.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ppform.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ppform.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ppform.__call__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ppform.__call__', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Call to __call__(...): (line 2670)
        # Processing the call arguments (line 2670)
        # Getting the type of 'self' (line 2670)
        self_70164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 30), 'self', False)
        # Getting the type of 'x' (line 2670)
        x_70165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 36), 'x', False)
        int_70166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2670, 39), 'int')
        # Getting the type of 'False' (line 2670)
        False_70167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 42), 'False', False)
        # Processing the call keyword arguments (line 2670)
        kwargs_70168 = {}
        # Getting the type of 'PPoly' (line 2670)
        PPoly_70162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2670, 15), 'PPoly', False)
        # Obtaining the member '__call__' of a type (line 2670)
        call___70163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2670, 15), PPoly_70162, '__call__')
        # Calling __call__(args, kwargs) (line 2670)
        call___call_result_70169 = invoke(stypy.reporting.localization.Localization(__file__, 2670, 15), call___70163, *[self_70164, x_70165, int_70166, False_70167], **kwargs_70168)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2670, 8), 'stypy_return_type', call___call_result_70169)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 2669)
        stypy_return_type_70170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_70170)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_70170


    @norecursion
    def _evaluate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_evaluate'
        module_type_store = module_type_store.open_function_context('_evaluate', 2672, 4, False)
        # Assigning a type to the variable 'self' (line 2673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2673, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ppform._evaluate.__dict__.__setitem__('stypy_localization', localization)
        _ppform._evaluate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ppform._evaluate.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ppform._evaluate.__dict__.__setitem__('stypy_function_name', '_ppform._evaluate')
        _ppform._evaluate.__dict__.__setitem__('stypy_param_names_list', ['x', 'nu', 'extrapolate', 'out'])
        _ppform._evaluate.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ppform._evaluate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ppform._evaluate.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ppform._evaluate.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ppform._evaluate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ppform._evaluate.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ppform._evaluate', ['x', 'nu', 'extrapolate', 'out'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_evaluate', localization, ['x', 'nu', 'extrapolate', 'out'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_evaluate(...)' code ##################

        
        # Call to _evaluate(...): (line 2673)
        # Processing the call arguments (line 2673)
        # Getting the type of 'self' (line 2673)
        self_70173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 24), 'self', False)
        # Getting the type of 'x' (line 2673)
        x_70174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 30), 'x', False)
        # Getting the type of 'nu' (line 2673)
        nu_70175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 33), 'nu', False)
        # Getting the type of 'extrapolate' (line 2673)
        extrapolate_70176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 37), 'extrapolate', False)
        # Getting the type of 'out' (line 2673)
        out_70177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 50), 'out', False)
        # Processing the call keyword arguments (line 2673)
        kwargs_70178 = {}
        # Getting the type of 'PPoly' (line 2673)
        PPoly_70171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 8), 'PPoly', False)
        # Obtaining the member '_evaluate' of a type (line 2673)
        _evaluate_70172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2673, 8), PPoly_70171, '_evaluate')
        # Calling _evaluate(args, kwargs) (line 2673)
        _evaluate_call_result_70179 = invoke(stypy.reporting.localization.Localization(__file__, 2673, 8), _evaluate_70172, *[self_70173, x_70174, nu_70175, extrapolate_70176, out_70177], **kwargs_70178)
        
        
        # Assigning a Attribute to a Subscript (line 2674):
        
        # Assigning a Attribute to a Subscript (line 2674):
        # Getting the type of 'self' (line 2674)
        self_70180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 48), 'self')
        # Obtaining the member 'fill' of a type (line 2674)
        fill_70181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 48), self_70180, 'fill')
        # Getting the type of 'out' (line 2674)
        out_70182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 8), 'out')
        
        
        # Getting the type of 'x' (line 2674)
        x_70183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 15), 'x')
        # Getting the type of 'self' (line 2674)
        self_70184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 20), 'self')
        # Obtaining the member 'a' of a type (line 2674)
        a_70185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 20), self_70184, 'a')
        # Applying the binary operator '>=' (line 2674)
        result_ge_70186 = python_operator(stypy.reporting.localization.Localization(__file__, 2674, 15), '>=', x_70183, a_70185)
        
        
        # Getting the type of 'x' (line 2674)
        x_70187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 31), 'x')
        # Getting the type of 'self' (line 2674)
        self_70188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 36), 'self')
        # Obtaining the member 'b' of a type (line 2674)
        b_70189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2674, 36), self_70188, 'b')
        # Applying the binary operator '<=' (line 2674)
        result_le_70190 = python_operator(stypy.reporting.localization.Localization(__file__, 2674, 31), '<=', x_70187, b_70189)
        
        # Applying the binary operator '&' (line 2674)
        result_and__70191 = python_operator(stypy.reporting.localization.Localization(__file__, 2674, 14), '&', result_ge_70186, result_le_70190)
        
        # Applying the '~' unary operator (line 2674)
        result_inv_70192 = python_operator(stypy.reporting.localization.Localization(__file__, 2674, 12), '~', result_and__70191)
        
        # Storing an element on a container (line 2674)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2674, 8), out_70182, (result_inv_70192, fill_70181))
        # Getting the type of 'out' (line 2675)
        out_70193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2675, 15), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 2675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2675, 8), 'stypy_return_type', out_70193)
        
        # ################# End of '_evaluate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_evaluate' in the type store
        # Getting the type of 'stypy_return_type' (line 2672)
        stypy_return_type_70194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2672, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_70194)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_evaluate'
        return stypy_return_type_70194


    @norecursion
    def fromspline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_70195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2678, 47), 'float')
        defaults = [float_70195]
        # Create a new context for function 'fromspline'
        module_type_store = module_type_store.open_function_context('fromspline', 2677, 4, False)
        # Assigning a type to the variable 'self' (line 2678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2678, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ppform.fromspline.__dict__.__setitem__('stypy_localization', localization)
        _ppform.fromspline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ppform.fromspline.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ppform.fromspline.__dict__.__setitem__('stypy_function_name', '_ppform.fromspline')
        _ppform.fromspline.__dict__.__setitem__('stypy_param_names_list', ['xk', 'cvals', 'order', 'fill'])
        _ppform.fromspline.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ppform.fromspline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ppform.fromspline.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ppform.fromspline.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ppform.fromspline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ppform.fromspline.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ppform.fromspline', ['xk', 'cvals', 'order', 'fill'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fromspline', localization, ['xk', 'cvals', 'order', 'fill'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fromspline(...)' code ##################

        
        # Assigning a BinOp to a Name (line 2680):
        
        # Assigning a BinOp to a Name (line 2680):
        
        # Call to len(...): (line 2680)
        # Processing the call arguments (line 2680)
        # Getting the type of 'xk' (line 2680)
        xk_70197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2680, 16), 'xk', False)
        # Processing the call keyword arguments (line 2680)
        kwargs_70198 = {}
        # Getting the type of 'len' (line 2680)
        len_70196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2680, 12), 'len', False)
        # Calling len(args, kwargs) (line 2680)
        len_call_result_70199 = invoke(stypy.reporting.localization.Localization(__file__, 2680, 12), len_70196, *[xk_70197], **kwargs_70198)
        
        int_70200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2680, 20), 'int')
        # Applying the binary operator '-' (line 2680)
        result_sub_70201 = python_operator(stypy.reporting.localization.Localization(__file__, 2680, 12), '-', len_call_result_70199, int_70200)
        
        # Assigning a type to the variable 'N' (line 2680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2680, 8), 'N', result_sub_70201)
        
        # Assigning a Call to a Name (line 2681):
        
        # Assigning a Call to a Name (line 2681):
        
        # Call to empty(...): (line 2681)
        # Processing the call arguments (line 2681)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2681)
        tuple_70204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2681, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2681)
        # Adding element type (line 2681)
        # Getting the type of 'order' (line 2681)
        order_70205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 27), 'order', False)
        int_70206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2681, 33), 'int')
        # Applying the binary operator '+' (line 2681)
        result_add_70207 = python_operator(stypy.reporting.localization.Localization(__file__, 2681, 27), '+', order_70205, int_70206)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2681, 27), tuple_70204, result_add_70207)
        # Adding element type (line 2681)
        # Getting the type of 'N' (line 2681)
        N_70208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 36), 'N', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2681, 27), tuple_70204, N_70208)
        
        # Processing the call keyword arguments (line 2681)
        # Getting the type of 'float' (line 2681)
        float_70209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 46), 'float', False)
        keyword_70210 = float_70209
        kwargs_70211 = {'dtype': keyword_70210}
        # Getting the type of 'np' (line 2681)
        np_70202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 17), 'np', False)
        # Obtaining the member 'empty' of a type (line 2681)
        empty_70203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2681, 17), np_70202, 'empty')
        # Calling empty(args, kwargs) (line 2681)
        empty_call_result_70212 = invoke(stypy.reporting.localization.Localization(__file__, 2681, 17), empty_70203, *[tuple_70204], **kwargs_70211)
        
        # Assigning a type to the variable 'sivals' (line 2681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2681, 8), 'sivals', empty_call_result_70212)
        
        
        # Call to xrange(...): (line 2682)
        # Processing the call arguments (line 2682)
        # Getting the type of 'order' (line 2682)
        order_70214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 24), 'order', False)
        int_70215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2682, 31), 'int')
        int_70216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2682, 35), 'int')
        # Processing the call keyword arguments (line 2682)
        kwargs_70217 = {}
        # Getting the type of 'xrange' (line 2682)
        xrange_70213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 17), 'xrange', False)
        # Calling xrange(args, kwargs) (line 2682)
        xrange_call_result_70218 = invoke(stypy.reporting.localization.Localization(__file__, 2682, 17), xrange_70213, *[order_70214, int_70215, int_70216], **kwargs_70217)
        
        # Testing the type of a for loop iterable (line 2682)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2682, 8), xrange_call_result_70218)
        # Getting the type of the for loop variable (line 2682)
        for_loop_var_70219 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2682, 8), xrange_call_result_70218)
        # Assigning a type to the variable 'm' (line 2682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2682, 8), 'm', for_loop_var_70219)
        # SSA begins for a for statement (line 2682)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 2683):
        
        # Assigning a Call to a Name (line 2683):
        
        # Call to gamma(...): (line 2683)
        # Processing the call arguments (line 2683)
        # Getting the type of 'm' (line 2683)
        m_70222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 30), 'm', False)
        int_70223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2683, 32), 'int')
        # Applying the binary operator '+' (line 2683)
        result_add_70224 = python_operator(stypy.reporting.localization.Localization(__file__, 2683, 30), '+', m_70222, int_70223)
        
        # Processing the call keyword arguments (line 2683)
        kwargs_70225 = {}
        # Getting the type of 'spec' (line 2683)
        spec_70220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 19), 'spec', False)
        # Obtaining the member 'gamma' of a type (line 2683)
        gamma_70221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2683, 19), spec_70220, 'gamma')
        # Calling gamma(args, kwargs) (line 2683)
        gamma_call_result_70226 = invoke(stypy.reporting.localization.Localization(__file__, 2683, 19), gamma_70221, *[result_add_70224], **kwargs_70225)
        
        # Assigning a type to the variable 'fact' (line 2683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2683, 12), 'fact', gamma_call_result_70226)
        
        # Assigning a Call to a Name (line 2684):
        
        # Assigning a Call to a Name (line 2684):
        
        # Call to _bspleval(...): (line 2684)
        # Processing the call arguments (line 2684)
        
        # Obtaining the type of the subscript
        int_70229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2684, 41), 'int')
        slice_70230 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2684, 37), None, int_70229, None)
        # Getting the type of 'xk' (line 2684)
        xk_70231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 37), 'xk', False)
        # Obtaining the member '__getitem__' of a type (line 2684)
        getitem___70232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2684, 37), xk_70231, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2684)
        subscript_call_result_70233 = invoke(stypy.reporting.localization.Localization(__file__, 2684, 37), getitem___70232, slice_70230)
        
        # Getting the type of 'xk' (line 2684)
        xk_70234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 46), 'xk', False)
        # Getting the type of 'cvals' (line 2684)
        cvals_70235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 50), 'cvals', False)
        # Getting the type of 'order' (line 2684)
        order_70236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 57), 'order', False)
        # Getting the type of 'm' (line 2684)
        m_70237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 64), 'm', False)
        # Processing the call keyword arguments (line 2684)
        kwargs_70238 = {}
        # Getting the type of '_fitpack' (line 2684)
        _fitpack_70227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 18), '_fitpack', False)
        # Obtaining the member '_bspleval' of a type (line 2684)
        _bspleval_70228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2684, 18), _fitpack_70227, '_bspleval')
        # Calling _bspleval(args, kwargs) (line 2684)
        _bspleval_call_result_70239 = invoke(stypy.reporting.localization.Localization(__file__, 2684, 18), _bspleval_70228, *[subscript_call_result_70233, xk_70234, cvals_70235, order_70236, m_70237], **kwargs_70238)
        
        # Assigning a type to the variable 'res' (line 2684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2684, 12), 'res', _bspleval_call_result_70239)
        
        # Getting the type of 'res' (line 2685)
        res_70240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2685, 12), 'res')
        # Getting the type of 'fact' (line 2685)
        fact_70241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2685, 19), 'fact')
        # Applying the binary operator 'div=' (line 2685)
        result_div_70242 = python_operator(stypy.reporting.localization.Localization(__file__, 2685, 12), 'div=', res_70240, fact_70241)
        # Assigning a type to the variable 'res' (line 2685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2685, 12), 'res', result_div_70242)
        
        
        # Assigning a Name to a Subscript (line 2686):
        
        # Assigning a Name to a Subscript (line 2686):
        # Getting the type of 'res' (line 2686)
        res_70243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2686, 33), 'res')
        # Getting the type of 'sivals' (line 2686)
        sivals_70244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2686, 12), 'sivals')
        # Getting the type of 'order' (line 2686)
        order_70245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2686, 19), 'order')
        # Getting the type of 'm' (line 2686)
        m_70246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2686, 25), 'm')
        # Applying the binary operator '-' (line 2686)
        result_sub_70247 = python_operator(stypy.reporting.localization.Localization(__file__, 2686, 19), '-', order_70245, m_70246)
        
        slice_70248 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2686, 12), None, None, None)
        # Storing an element on a container (line 2686)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2686, 12), sivals_70244, ((result_sub_70247, slice_70248), res_70243))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to cls(...): (line 2687)
        # Processing the call arguments (line 2687)
        # Getting the type of 'sivals' (line 2687)
        sivals_70250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2687, 19), 'sivals', False)
        # Getting the type of 'xk' (line 2687)
        xk_70251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2687, 27), 'xk', False)
        # Processing the call keyword arguments (line 2687)
        # Getting the type of 'fill' (line 2687)
        fill_70252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2687, 36), 'fill', False)
        keyword_70253 = fill_70252
        kwargs_70254 = {'fill': keyword_70253}
        # Getting the type of 'cls' (line 2687)
        cls_70249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2687, 15), 'cls', False)
        # Calling cls(args, kwargs) (line 2687)
        cls_call_result_70255 = invoke(stypy.reporting.localization.Localization(__file__, 2687, 15), cls_70249, *[sivals_70250, xk_70251], **kwargs_70254)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2687, 8), 'stypy_return_type', cls_call_result_70255)
        
        # ################# End of 'fromspline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fromspline' in the type store
        # Getting the type of 'stypy_return_type' (line 2677)
        stypy_return_type_70256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_70256)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fromspline'
        return stypy_return_type_70256


# Assigning a type to the variable '_ppform' (line 2643)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2643, 0), '_ppform', _ppform)

@norecursion
def _dot0(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_dot0'
    module_type_store = module_type_store.open_function_context('_dot0', 2693, 0, False)
    
    # Passed parameters checking function
    _dot0.stypy_localization = localization
    _dot0.stypy_type_of_self = None
    _dot0.stypy_type_store = module_type_store
    _dot0.stypy_function_name = '_dot0'
    _dot0.stypy_param_names_list = ['a', 'b']
    _dot0.stypy_varargs_param_name = None
    _dot0.stypy_kwargs_param_name = None
    _dot0.stypy_call_defaults = defaults
    _dot0.stypy_call_varargs = varargs
    _dot0.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_dot0', ['a', 'b'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_dot0', localization, ['a', 'b'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_dot0(...)' code ##################

    str_70257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2694, 4), 'str', 'Similar to numpy.dot, but sum over last axis of a and 1st axis of b')
    
    
    # Getting the type of 'b' (line 2695)
    b_70258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2695, 7), 'b')
    # Obtaining the member 'ndim' of a type (line 2695)
    ndim_70259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2695, 7), b_70258, 'ndim')
    int_70260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2695, 17), 'int')
    # Applying the binary operator '<=' (line 2695)
    result_le_70261 = python_operator(stypy.reporting.localization.Localization(__file__, 2695, 7), '<=', ndim_70259, int_70260)
    
    # Testing the type of an if condition (line 2695)
    if_condition_70262 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2695, 4), result_le_70261)
    # Assigning a type to the variable 'if_condition_70262' (line 2695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2695, 4), 'if_condition_70262', if_condition_70262)
    # SSA begins for if statement (line 2695)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to dot(...): (line 2696)
    # Processing the call arguments (line 2696)
    # Getting the type of 'a' (line 2696)
    a_70264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 19), 'a', False)
    # Getting the type of 'b' (line 2696)
    b_70265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 22), 'b', False)
    # Processing the call keyword arguments (line 2696)
    kwargs_70266 = {}
    # Getting the type of 'dot' (line 2696)
    dot_70263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 15), 'dot', False)
    # Calling dot(args, kwargs) (line 2696)
    dot_call_result_70267 = invoke(stypy.reporting.localization.Localization(__file__, 2696, 15), dot_70263, *[a_70264, b_70265], **kwargs_70266)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2696)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2696, 8), 'stypy_return_type', dot_call_result_70267)
    # SSA branch for the else part of an if statement (line 2695)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2698):
    
    # Assigning a Call to a Name (line 2698):
    
    # Call to list(...): (line 2698)
    # Processing the call arguments (line 2698)
    
    # Call to range(...): (line 2698)
    # Processing the call arguments (line 2698)
    # Getting the type of 'b' (line 2698)
    b_70270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 26), 'b', False)
    # Obtaining the member 'ndim' of a type (line 2698)
    ndim_70271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2698, 26), b_70270, 'ndim')
    # Processing the call keyword arguments (line 2698)
    kwargs_70272 = {}
    # Getting the type of 'range' (line 2698)
    range_70269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 20), 'range', False)
    # Calling range(args, kwargs) (line 2698)
    range_call_result_70273 = invoke(stypy.reporting.localization.Localization(__file__, 2698, 20), range_70269, *[ndim_70271], **kwargs_70272)
    
    # Processing the call keyword arguments (line 2698)
    kwargs_70274 = {}
    # Getting the type of 'list' (line 2698)
    list_70268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 15), 'list', False)
    # Calling list(args, kwargs) (line 2698)
    list_call_result_70275 = invoke(stypy.reporting.localization.Localization(__file__, 2698, 15), list_70268, *[range_call_result_70273], **kwargs_70274)
    
    # Assigning a type to the variable 'axes' (line 2698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2698, 8), 'axes', list_call_result_70275)
    
    # Call to insert(...): (line 2699)
    # Processing the call arguments (line 2699)
    int_70278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2699, 20), 'int')
    int_70279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2699, 24), 'int')
    # Processing the call keyword arguments (line 2699)
    kwargs_70280 = {}
    # Getting the type of 'axes' (line 2699)
    axes_70276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2699, 8), 'axes', False)
    # Obtaining the member 'insert' of a type (line 2699)
    insert_70277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2699, 8), axes_70276, 'insert')
    # Calling insert(args, kwargs) (line 2699)
    insert_call_result_70281 = invoke(stypy.reporting.localization.Localization(__file__, 2699, 8), insert_70277, *[int_70278, int_70279], **kwargs_70280)
    
    
    # Call to pop(...): (line 2700)
    # Processing the call arguments (line 2700)
    int_70284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2700, 17), 'int')
    # Processing the call keyword arguments (line 2700)
    kwargs_70285 = {}
    # Getting the type of 'axes' (line 2700)
    axes_70282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 8), 'axes', False)
    # Obtaining the member 'pop' of a type (line 2700)
    pop_70283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2700, 8), axes_70282, 'pop')
    # Calling pop(args, kwargs) (line 2700)
    pop_call_result_70286 = invoke(stypy.reporting.localization.Localization(__file__, 2700, 8), pop_70283, *[int_70284], **kwargs_70285)
    
    
    # Call to dot(...): (line 2701)
    # Processing the call arguments (line 2701)
    # Getting the type of 'a' (line 2701)
    a_70288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 19), 'a', False)
    
    # Call to transpose(...): (line 2701)
    # Processing the call arguments (line 2701)
    # Getting the type of 'axes' (line 2701)
    axes_70291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 34), 'axes', False)
    # Processing the call keyword arguments (line 2701)
    kwargs_70292 = {}
    # Getting the type of 'b' (line 2701)
    b_70289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 22), 'b', False)
    # Obtaining the member 'transpose' of a type (line 2701)
    transpose_70290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2701, 22), b_70289, 'transpose')
    # Calling transpose(args, kwargs) (line 2701)
    transpose_call_result_70293 = invoke(stypy.reporting.localization.Localization(__file__, 2701, 22), transpose_70290, *[axes_70291], **kwargs_70292)
    
    # Processing the call keyword arguments (line 2701)
    kwargs_70294 = {}
    # Getting the type of 'dot' (line 2701)
    dot_70287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 15), 'dot', False)
    # Calling dot(args, kwargs) (line 2701)
    dot_call_result_70295 = invoke(stypy.reporting.localization.Localization(__file__, 2701, 15), dot_70287, *[a_70288, transpose_call_result_70293], **kwargs_70294)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2701)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2701, 8), 'stypy_return_type', dot_call_result_70295)
    # SSA join for if statement (line 2695)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_dot0(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_dot0' in the type store
    # Getting the type of 'stypy_return_type' (line 2693)
    stypy_return_type_70296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_70296)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_dot0'
    return stypy_return_type_70296

# Assigning a type to the variable '_dot0' (line 2693)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2693, 0), '_dot0', _dot0)

@norecursion
def _find_smoothest(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2704)
    None_70297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 41), 'None')
    # Getting the type of 'None' (line 2704)
    None_70298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 49), 'None')
    defaults = [None_70297, None_70298]
    # Create a new context for function '_find_smoothest'
    module_type_store = module_type_store.open_function_context('_find_smoothest', 2704, 0, False)
    
    # Passed parameters checking function
    _find_smoothest.stypy_localization = localization
    _find_smoothest.stypy_type_of_self = None
    _find_smoothest.stypy_type_store = module_type_store
    _find_smoothest.stypy_function_name = '_find_smoothest'
    _find_smoothest.stypy_param_names_list = ['xk', 'yk', 'order', 'conds', 'B']
    _find_smoothest.stypy_varargs_param_name = None
    _find_smoothest.stypy_kwargs_param_name = None
    _find_smoothest.stypy_call_defaults = defaults
    _find_smoothest.stypy_call_varargs = varargs
    _find_smoothest.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_find_smoothest', ['xk', 'yk', 'order', 'conds', 'B'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_find_smoothest', localization, ['xk', 'yk', 'order', 'conds', 'B'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_find_smoothest(...)' code ##################

    
    # Assigning a BinOp to a Name (line 2710):
    
    # Assigning a BinOp to a Name (line 2710):
    
    # Call to len(...): (line 2710)
    # Processing the call arguments (line 2710)
    # Getting the type of 'xk' (line 2710)
    xk_70300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 12), 'xk', False)
    # Processing the call keyword arguments (line 2710)
    kwargs_70301 = {}
    # Getting the type of 'len' (line 2710)
    len_70299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 8), 'len', False)
    # Calling len(args, kwargs) (line 2710)
    len_call_result_70302 = invoke(stypy.reporting.localization.Localization(__file__, 2710, 8), len_70299, *[xk_70300], **kwargs_70301)
    
    int_70303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2710, 16), 'int')
    # Applying the binary operator '-' (line 2710)
    result_sub_70304 = python_operator(stypy.reporting.localization.Localization(__file__, 2710, 8), '-', len_call_result_70302, int_70303)
    
    # Assigning a type to the variable 'N' (line 2710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2710, 4), 'N', result_sub_70304)
    
    # Assigning a Name to a Name (line 2711):
    
    # Assigning a Name to a Name (line 2711):
    # Getting the type of 'order' (line 2711)
    order_70305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2711, 8), 'order')
    # Assigning a type to the variable 'K' (line 2711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2711, 4), 'K', order_70305)
    
    # Type idiom detected: calculating its left and rigth part (line 2712)
    # Getting the type of 'B' (line 2712)
    B_70306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2712, 7), 'B')
    # Getting the type of 'None' (line 2712)
    None_70307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2712, 12), 'None')
    
    (may_be_70308, more_types_in_union_70309) = may_be_none(B_70306, None_70307)

    if may_be_70308:

        if more_types_in_union_70309:
            # Runtime conditional SSA (line 2712)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2713):
        
        # Assigning a Call to a Name (line 2713):
        
        # Call to _bsplmat(...): (line 2713)
        # Processing the call arguments (line 2713)
        # Getting the type of 'order' (line 2713)
        order_70312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2713, 30), 'order', False)
        # Getting the type of 'xk' (line 2713)
        xk_70313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2713, 37), 'xk', False)
        # Processing the call keyword arguments (line 2713)
        kwargs_70314 = {}
        # Getting the type of '_fitpack' (line 2713)
        _fitpack_70310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2713, 12), '_fitpack', False)
        # Obtaining the member '_bsplmat' of a type (line 2713)
        _bsplmat_70311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2713, 12), _fitpack_70310, '_bsplmat')
        # Calling _bsplmat(args, kwargs) (line 2713)
        _bsplmat_call_result_70315 = invoke(stypy.reporting.localization.Localization(__file__, 2713, 12), _bsplmat_70311, *[order_70312, xk_70313], **kwargs_70314)
        
        # Assigning a type to the variable 'B' (line 2713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2713, 8), 'B', _bsplmat_call_result_70315)

        if more_types_in_union_70309:
            # SSA join for if statement (line 2712)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2714):
    
    # Assigning a Call to a Name (line 2714):
    
    # Call to _bspldismat(...): (line 2714)
    # Processing the call arguments (line 2714)
    # Getting the type of 'order' (line 2714)
    order_70318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 29), 'order', False)
    # Getting the type of 'xk' (line 2714)
    xk_70319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 36), 'xk', False)
    # Processing the call keyword arguments (line 2714)
    kwargs_70320 = {}
    # Getting the type of '_fitpack' (line 2714)
    _fitpack_70316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 8), '_fitpack', False)
    # Obtaining the member '_bspldismat' of a type (line 2714)
    _bspldismat_70317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2714, 8), _fitpack_70316, '_bspldismat')
    # Calling _bspldismat(args, kwargs) (line 2714)
    _bspldismat_call_result_70321 = invoke(stypy.reporting.localization.Localization(__file__, 2714, 8), _bspldismat_70317, *[order_70318, xk_70319], **kwargs_70320)
    
    # Assigning a type to the variable 'J' (line 2714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2714, 4), 'J', _bspldismat_call_result_70321)
    
    # Assigning a Call to a Tuple (line 2715):
    
    # Assigning a Subscript to a Name (line 2715):
    
    # Obtaining the type of the subscript
    int_70322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2715, 4), 'int')
    
    # Call to svd(...): (line 2715)
    # Processing the call arguments (line 2715)
    # Getting the type of 'B' (line 2715)
    B_70326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 32), 'B', False)
    # Processing the call keyword arguments (line 2715)
    kwargs_70327 = {}
    # Getting the type of 'scipy' (line 2715)
    scipy_70323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 15), 'scipy', False)
    # Obtaining the member 'linalg' of a type (line 2715)
    linalg_70324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2715, 15), scipy_70323, 'linalg')
    # Obtaining the member 'svd' of a type (line 2715)
    svd_70325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2715, 15), linalg_70324, 'svd')
    # Calling svd(args, kwargs) (line 2715)
    svd_call_result_70328 = invoke(stypy.reporting.localization.Localization(__file__, 2715, 15), svd_70325, *[B_70326], **kwargs_70327)
    
    # Obtaining the member '__getitem__' of a type (line 2715)
    getitem___70329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2715, 4), svd_call_result_70328, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2715)
    subscript_call_result_70330 = invoke(stypy.reporting.localization.Localization(__file__, 2715, 4), getitem___70329, int_70322)
    
    # Assigning a type to the variable 'tuple_var_assignment_63648' (line 2715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2715, 4), 'tuple_var_assignment_63648', subscript_call_result_70330)
    
    # Assigning a Subscript to a Name (line 2715):
    
    # Obtaining the type of the subscript
    int_70331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2715, 4), 'int')
    
    # Call to svd(...): (line 2715)
    # Processing the call arguments (line 2715)
    # Getting the type of 'B' (line 2715)
    B_70335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 32), 'B', False)
    # Processing the call keyword arguments (line 2715)
    kwargs_70336 = {}
    # Getting the type of 'scipy' (line 2715)
    scipy_70332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 15), 'scipy', False)
    # Obtaining the member 'linalg' of a type (line 2715)
    linalg_70333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2715, 15), scipy_70332, 'linalg')
    # Obtaining the member 'svd' of a type (line 2715)
    svd_70334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2715, 15), linalg_70333, 'svd')
    # Calling svd(args, kwargs) (line 2715)
    svd_call_result_70337 = invoke(stypy.reporting.localization.Localization(__file__, 2715, 15), svd_70334, *[B_70335], **kwargs_70336)
    
    # Obtaining the member '__getitem__' of a type (line 2715)
    getitem___70338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2715, 4), svd_call_result_70337, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2715)
    subscript_call_result_70339 = invoke(stypy.reporting.localization.Localization(__file__, 2715, 4), getitem___70338, int_70331)
    
    # Assigning a type to the variable 'tuple_var_assignment_63649' (line 2715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2715, 4), 'tuple_var_assignment_63649', subscript_call_result_70339)
    
    # Assigning a Subscript to a Name (line 2715):
    
    # Obtaining the type of the subscript
    int_70340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2715, 4), 'int')
    
    # Call to svd(...): (line 2715)
    # Processing the call arguments (line 2715)
    # Getting the type of 'B' (line 2715)
    B_70344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 32), 'B', False)
    # Processing the call keyword arguments (line 2715)
    kwargs_70345 = {}
    # Getting the type of 'scipy' (line 2715)
    scipy_70341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 15), 'scipy', False)
    # Obtaining the member 'linalg' of a type (line 2715)
    linalg_70342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2715, 15), scipy_70341, 'linalg')
    # Obtaining the member 'svd' of a type (line 2715)
    svd_70343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2715, 15), linalg_70342, 'svd')
    # Calling svd(args, kwargs) (line 2715)
    svd_call_result_70346 = invoke(stypy.reporting.localization.Localization(__file__, 2715, 15), svd_70343, *[B_70344], **kwargs_70345)
    
    # Obtaining the member '__getitem__' of a type (line 2715)
    getitem___70347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2715, 4), svd_call_result_70346, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2715)
    subscript_call_result_70348 = invoke(stypy.reporting.localization.Localization(__file__, 2715, 4), getitem___70347, int_70340)
    
    # Assigning a type to the variable 'tuple_var_assignment_63650' (line 2715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2715, 4), 'tuple_var_assignment_63650', subscript_call_result_70348)
    
    # Assigning a Name to a Name (line 2715):
    # Getting the type of 'tuple_var_assignment_63648' (line 2715)
    tuple_var_assignment_63648_70349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 4), 'tuple_var_assignment_63648')
    # Assigning a type to the variable 'u' (line 2715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2715, 4), 'u', tuple_var_assignment_63648_70349)
    
    # Assigning a Name to a Name (line 2715):
    # Getting the type of 'tuple_var_assignment_63649' (line 2715)
    tuple_var_assignment_63649_70350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 4), 'tuple_var_assignment_63649')
    # Assigning a type to the variable 's' (line 2715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2715, 7), 's', tuple_var_assignment_63649_70350)
    
    # Assigning a Name to a Name (line 2715):
    # Getting the type of 'tuple_var_assignment_63650' (line 2715)
    tuple_var_assignment_63650_70351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2715, 4), 'tuple_var_assignment_63650')
    # Assigning a type to the variable 'vh' (line 2715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2715, 10), 'vh', tuple_var_assignment_63650_70351)
    
    # Assigning a BinOp to a Name (line 2716):
    
    # Assigning a BinOp to a Name (line 2716):
    # Getting the type of 'K' (line 2716)
    K_70352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 10), 'K')
    int_70353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2716, 12), 'int')
    # Applying the binary operator '-' (line 2716)
    result_sub_70354 = python_operator(stypy.reporting.localization.Localization(__file__, 2716, 10), '-', K_70352, int_70353)
    
    # Assigning a type to the variable 'ind' (line 2716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2716, 4), 'ind', result_sub_70354)
    
    # Assigning a Attribute to a Name (line 2717):
    
    # Assigning a Attribute to a Name (line 2717):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'ind' (line 2717)
    ind_70355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 13), 'ind')
    # Applying the 'usub' unary operator (line 2717)
    result___neg___70356 = python_operator(stypy.reporting.localization.Localization(__file__, 2717, 12), 'usub', ind_70355)
    
    slice_70357 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2717, 9), result___neg___70356, None, None)
    slice_70358 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2717, 9), None, None, None)
    # Getting the type of 'vh' (line 2717)
    vh_70359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 9), 'vh')
    # Obtaining the member '__getitem__' of a type (line 2717)
    getitem___70360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2717, 9), vh_70359, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2717)
    subscript_call_result_70361 = invoke(stypy.reporting.localization.Localization(__file__, 2717, 9), getitem___70360, (slice_70357, slice_70358))
    
    # Obtaining the member 'T' of a type (line 2717)
    T_70362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2717, 9), subscript_call_result_70361, 'T')
    # Assigning a type to the variable 'V2' (line 2717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2717, 4), 'V2', T_70362)
    
    # Assigning a Attribute to a Name (line 2718):
    
    # Assigning a Attribute to a Name (line 2718):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'ind' (line 2718)
    ind_70363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 14), 'ind')
    # Applying the 'usub' unary operator (line 2718)
    result___neg___70364 = python_operator(stypy.reporting.localization.Localization(__file__, 2718, 13), 'usub', ind_70363)
    
    slice_70365 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2718, 9), None, result___neg___70364, None)
    slice_70366 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2718, 9), None, None, None)
    # Getting the type of 'vh' (line 2718)
    vh_70367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 9), 'vh')
    # Obtaining the member '__getitem__' of a type (line 2718)
    getitem___70368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2718, 9), vh_70367, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2718)
    subscript_call_result_70369 = invoke(stypy.reporting.localization.Localization(__file__, 2718, 9), getitem___70368, (slice_70365, slice_70366))
    
    # Obtaining the member 'T' of a type (line 2718)
    T_70370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2718, 9), subscript_call_result_70369, 'T')
    # Assigning a type to the variable 'V1' (line 2718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2718, 4), 'V1', T_70370)
    
    # Assigning a Call to a Name (line 2719):
    
    # Assigning a Call to a Name (line 2719):
    
    # Call to dot(...): (line 2719)
    # Processing the call arguments (line 2719)
    # Getting the type of 'J' (line 2719)
    J_70372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 12), 'J', False)
    # Obtaining the member 'T' of a type (line 2719)
    T_70373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2719, 12), J_70372, 'T')
    # Getting the type of 'J' (line 2719)
    J_70374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 16), 'J', False)
    # Processing the call keyword arguments (line 2719)
    kwargs_70375 = {}
    # Getting the type of 'dot' (line 2719)
    dot_70371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 8), 'dot', False)
    # Calling dot(args, kwargs) (line 2719)
    dot_call_result_70376 = invoke(stypy.reporting.localization.Localization(__file__, 2719, 8), dot_70371, *[T_70373, J_70374], **kwargs_70375)
    
    # Assigning a type to the variable 'A' (line 2719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2719, 4), 'A', dot_call_result_70376)
    
    # Assigning a Call to a Name (line 2720):
    
    # Assigning a Call to a Name (line 2720):
    
    # Call to dot(...): (line 2720)
    # Processing the call arguments (line 2720)
    # Getting the type of 'V2' (line 2720)
    V2_70378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 14), 'V2', False)
    # Obtaining the member 'T' of a type (line 2720)
    T_70379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2720, 14), V2_70378, 'T')
    # Getting the type of 'A' (line 2720)
    A_70380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 19), 'A', False)
    # Processing the call keyword arguments (line 2720)
    kwargs_70381 = {}
    # Getting the type of 'dot' (line 2720)
    dot_70377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 10), 'dot', False)
    # Calling dot(args, kwargs) (line 2720)
    dot_call_result_70382 = invoke(stypy.reporting.localization.Localization(__file__, 2720, 10), dot_70377, *[T_70379, A_70380], **kwargs_70381)
    
    # Assigning a type to the variable 'tmp' (line 2720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2720, 4), 'tmp', dot_call_result_70382)
    
    # Assigning a Call to a Name (line 2721):
    
    # Assigning a Call to a Name (line 2721):
    
    # Call to dot(...): (line 2721)
    # Processing the call arguments (line 2721)
    # Getting the type of 'tmp' (line 2721)
    tmp_70384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2721, 12), 'tmp', False)
    # Getting the type of 'V2' (line 2721)
    V2_70385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2721, 16), 'V2', False)
    # Processing the call keyword arguments (line 2721)
    kwargs_70386 = {}
    # Getting the type of 'dot' (line 2721)
    dot_70383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2721, 8), 'dot', False)
    # Calling dot(args, kwargs) (line 2721)
    dot_call_result_70387 = invoke(stypy.reporting.localization.Localization(__file__, 2721, 8), dot_70383, *[tmp_70384, V2_70385], **kwargs_70386)
    
    # Assigning a type to the variable 'Q' (line 2721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2721, 4), 'Q', dot_call_result_70387)
    
    # Assigning a Call to a Name (line 2722):
    
    # Assigning a Call to a Name (line 2722):
    
    # Call to solve(...): (line 2722)
    # Processing the call arguments (line 2722)
    # Getting the type of 'Q' (line 2722)
    Q_70391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2722, 27), 'Q', False)
    # Getting the type of 'tmp' (line 2722)
    tmp_70392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2722, 30), 'tmp', False)
    # Processing the call keyword arguments (line 2722)
    kwargs_70393 = {}
    # Getting the type of 'scipy' (line 2722)
    scipy_70388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2722, 8), 'scipy', False)
    # Obtaining the member 'linalg' of a type (line 2722)
    linalg_70389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2722, 8), scipy_70388, 'linalg')
    # Obtaining the member 'solve' of a type (line 2722)
    solve_70390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2722, 8), linalg_70389, 'solve')
    # Calling solve(args, kwargs) (line 2722)
    solve_call_result_70394 = invoke(stypy.reporting.localization.Localization(__file__, 2722, 8), solve_70390, *[Q_70391, tmp_70392], **kwargs_70393)
    
    # Assigning a type to the variable 'p' (line 2722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2722, 4), 'p', solve_call_result_70394)
    
    # Assigning a Call to a Name (line 2723):
    
    # Assigning a Call to a Name (line 2723):
    
    # Call to dot(...): (line 2723)
    # Processing the call arguments (line 2723)
    # Getting the type of 'V2' (line 2723)
    V2_70396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 14), 'V2', False)
    # Getting the type of 'p' (line 2723)
    p_70397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 17), 'p', False)
    # Processing the call keyword arguments (line 2723)
    kwargs_70398 = {}
    # Getting the type of 'dot' (line 2723)
    dot_70395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 10), 'dot', False)
    # Calling dot(args, kwargs) (line 2723)
    dot_call_result_70399 = invoke(stypy.reporting.localization.Localization(__file__, 2723, 10), dot_70395, *[V2_70396, p_70397], **kwargs_70398)
    
    # Assigning a type to the variable 'tmp' (line 2723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2723, 4), 'tmp', dot_call_result_70399)
    
    # Assigning a BinOp to a Name (line 2724):
    
    # Assigning a BinOp to a Name (line 2724):
    
    # Call to eye(...): (line 2724)
    # Processing the call arguments (line 2724)
    # Getting the type of 'N' (line 2724)
    N_70402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 17), 'N', False)
    # Getting the type of 'K' (line 2724)
    K_70403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 19), 'K', False)
    # Applying the binary operator '+' (line 2724)
    result_add_70404 = python_operator(stypy.reporting.localization.Localization(__file__, 2724, 17), '+', N_70402, K_70403)
    
    # Processing the call keyword arguments (line 2724)
    kwargs_70405 = {}
    # Getting the type of 'np' (line 2724)
    np_70400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 10), 'np', False)
    # Obtaining the member 'eye' of a type (line 2724)
    eye_70401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2724, 10), np_70400, 'eye')
    # Calling eye(args, kwargs) (line 2724)
    eye_call_result_70406 = invoke(stypy.reporting.localization.Localization(__file__, 2724, 10), eye_70401, *[result_add_70404], **kwargs_70405)
    
    # Getting the type of 'tmp' (line 2724)
    tmp_70407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 24), 'tmp')
    # Applying the binary operator '-' (line 2724)
    result_sub_70408 = python_operator(stypy.reporting.localization.Localization(__file__, 2724, 10), '-', eye_call_result_70406, tmp_70407)
    
    # Assigning a type to the variable 'tmp' (line 2724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2724, 4), 'tmp', result_sub_70408)
    
    # Assigning a Call to a Name (line 2725):
    
    # Assigning a Call to a Name (line 2725):
    
    # Call to dot(...): (line 2725)
    # Processing the call arguments (line 2725)
    # Getting the type of 'tmp' (line 2725)
    tmp_70410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2725, 14), 'tmp', False)
    # Getting the type of 'V1' (line 2725)
    V1_70411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2725, 18), 'V1', False)
    # Processing the call keyword arguments (line 2725)
    kwargs_70412 = {}
    # Getting the type of 'dot' (line 2725)
    dot_70409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2725, 10), 'dot', False)
    # Calling dot(args, kwargs) (line 2725)
    dot_call_result_70413 = invoke(stypy.reporting.localization.Localization(__file__, 2725, 10), dot_70409, *[tmp_70410, V1_70411], **kwargs_70412)
    
    # Assigning a type to the variable 'tmp' (line 2725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2725, 4), 'tmp', dot_call_result_70413)
    
    # Assigning a Call to a Name (line 2726):
    
    # Assigning a Call to a Name (line 2726):
    
    # Call to dot(...): (line 2726)
    # Processing the call arguments (line 2726)
    # Getting the type of 'tmp' (line 2726)
    tmp_70415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 14), 'tmp', False)
    
    # Call to diag(...): (line 2726)
    # Processing the call arguments (line 2726)
    float_70418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2726, 26), 'float')
    # Getting the type of 's' (line 2726)
    s_70419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 30), 's', False)
    # Applying the binary operator 'div' (line 2726)
    result_div_70420 = python_operator(stypy.reporting.localization.Localization(__file__, 2726, 26), 'div', float_70418, s_70419)
    
    # Processing the call keyword arguments (line 2726)
    kwargs_70421 = {}
    # Getting the type of 'np' (line 2726)
    np_70416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 18), 'np', False)
    # Obtaining the member 'diag' of a type (line 2726)
    diag_70417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2726, 18), np_70416, 'diag')
    # Calling diag(args, kwargs) (line 2726)
    diag_call_result_70422 = invoke(stypy.reporting.localization.Localization(__file__, 2726, 18), diag_70417, *[result_div_70420], **kwargs_70421)
    
    # Processing the call keyword arguments (line 2726)
    kwargs_70423 = {}
    # Getting the type of 'dot' (line 2726)
    dot_70414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 10), 'dot', False)
    # Calling dot(args, kwargs) (line 2726)
    dot_call_result_70424 = invoke(stypy.reporting.localization.Localization(__file__, 2726, 10), dot_70414, *[tmp_70415, diag_call_result_70422], **kwargs_70423)
    
    # Assigning a type to the variable 'tmp' (line 2726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2726, 4), 'tmp', dot_call_result_70424)
    
    # Assigning a Call to a Name (line 2727):
    
    # Assigning a Call to a Name (line 2727):
    
    # Call to dot(...): (line 2727)
    # Processing the call arguments (line 2727)
    # Getting the type of 'tmp' (line 2727)
    tmp_70426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 14), 'tmp', False)
    # Getting the type of 'u' (line 2727)
    u_70427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 18), 'u', False)
    # Obtaining the member 'T' of a type (line 2727)
    T_70428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2727, 18), u_70427, 'T')
    # Processing the call keyword arguments (line 2727)
    kwargs_70429 = {}
    # Getting the type of 'dot' (line 2727)
    dot_70425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 10), 'dot', False)
    # Calling dot(args, kwargs) (line 2727)
    dot_call_result_70430 = invoke(stypy.reporting.localization.Localization(__file__, 2727, 10), dot_70425, *[tmp_70426, T_70428], **kwargs_70429)
    
    # Assigning a type to the variable 'tmp' (line 2727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2727, 4), 'tmp', dot_call_result_70430)
    
    # Call to _dot0(...): (line 2728)
    # Processing the call arguments (line 2728)
    # Getting the type of 'tmp' (line 2728)
    tmp_70432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 17), 'tmp', False)
    # Getting the type of 'yk' (line 2728)
    yk_70433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 22), 'yk', False)
    # Processing the call keyword arguments (line 2728)
    kwargs_70434 = {}
    # Getting the type of '_dot0' (line 2728)
    _dot0_70431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 11), '_dot0', False)
    # Calling _dot0(args, kwargs) (line 2728)
    _dot0_call_result_70435 = invoke(stypy.reporting.localization.Localization(__file__, 2728, 11), _dot0_70431, *[tmp_70432, yk_70433], **kwargs_70434)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2728, 4), 'stypy_return_type', _dot0_call_result_70435)
    
    # ################# End of '_find_smoothest(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_find_smoothest' in the type store
    # Getting the type of 'stypy_return_type' (line 2704)
    stypy_return_type_70436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_70436)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_find_smoothest'
    return stypy_return_type_70436

# Assigning a type to the variable '_find_smoothest' (line 2704)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2704, 0), '_find_smoothest', _find_smoothest)

@norecursion
def _find_user(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_find_user'
    module_type_store = module_type_store.open_function_context('_find_user', 2736, 0, False)
    
    # Passed parameters checking function
    _find_user.stypy_localization = localization
    _find_user.stypy_type_of_self = None
    _find_user.stypy_type_store = module_type_store
    _find_user.stypy_function_name = '_find_user'
    _find_user.stypy_param_names_list = ['xk', 'yk', 'order', 'conds', 'B']
    _find_user.stypy_varargs_param_name = None
    _find_user.stypy_kwargs_param_name = None
    _find_user.stypy_call_defaults = defaults
    _find_user.stypy_call_varargs = varargs
    _find_user.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_find_user', ['xk', 'yk', 'order', 'conds', 'B'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_find_user', localization, ['xk', 'yk', 'order', 'conds', 'B'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_find_user(...)' code ##################

    
    # Assigning a Subscript to a Name (line 2737):
    
    # Assigning a Subscript to a Name (line 2737):
    
    # Obtaining the type of the subscript
    int_70437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2737, 15), 'int')
    # Getting the type of 'conds' (line 2737)
    conds_70438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 9), 'conds')
    # Obtaining the member '__getitem__' of a type (line 2737)
    getitem___70439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2737, 9), conds_70438, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2737)
    subscript_call_result_70440 = invoke(stypy.reporting.localization.Localization(__file__, 2737, 9), getitem___70439, int_70437)
    
    # Assigning a type to the variable 'lh' (line 2737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2737, 4), 'lh', subscript_call_result_70440)
    
    # Assigning a Subscript to a Name (line 2738):
    
    # Assigning a Subscript to a Name (line 2738):
    
    # Obtaining the type of the subscript
    int_70441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2738, 15), 'int')
    # Getting the type of 'conds' (line 2738)
    conds_70442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 9), 'conds')
    # Obtaining the member '__getitem__' of a type (line 2738)
    getitem___70443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2738, 9), conds_70442, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2738)
    subscript_call_result_70444 = invoke(stypy.reporting.localization.Localization(__file__, 2738, 9), getitem___70443, int_70441)
    
    # Assigning a type to the variable 'rh' (line 2738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2738, 4), 'rh', subscript_call_result_70444)
    
    # Assigning a Call to a Name (line 2739):
    
    # Assigning a Call to a Name (line 2739):
    
    # Call to concatenate(...): (line 2739)
    # Processing the call arguments (line 2739)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2739)
    tuple_70447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2739, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2739)
    # Adding element type (line 2739)
    # Getting the type of 'B' (line 2739)
    B_70448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 24), 'B', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2739, 24), tuple_70447, B_70448)
    # Adding element type (line 2739)
    # Getting the type of 'lh' (line 2739)
    lh_70449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 27), 'lh', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2739, 24), tuple_70447, lh_70449)
    
    # Processing the call keyword arguments (line 2739)
    int_70450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2739, 37), 'int')
    keyword_70451 = int_70450
    kwargs_70452 = {'axis': keyword_70451}
    # Getting the type of 'np' (line 2739)
    np_70445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 2739)
    concatenate_70446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2739, 8), np_70445, 'concatenate')
    # Calling concatenate(args, kwargs) (line 2739)
    concatenate_call_result_70453 = invoke(stypy.reporting.localization.Localization(__file__, 2739, 8), concatenate_70446, *[tuple_70447], **kwargs_70452)
    
    # Assigning a type to the variable 'B' (line 2739)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2739, 4), 'B', concatenate_call_result_70453)
    
    # Assigning a Call to a Name (line 2740):
    
    # Assigning a Call to a Name (line 2740):
    
    # Call to concatenate(...): (line 2740)
    # Processing the call arguments (line 2740)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2740)
    tuple_70456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2740, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2740)
    # Adding element type (line 2740)
    # Getting the type of 'yk' (line 2740)
    yk_70457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 24), 'yk', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2740, 24), tuple_70456, yk_70457)
    # Adding element type (line 2740)
    # Getting the type of 'rh' (line 2740)
    rh_70458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 28), 'rh', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2740, 24), tuple_70456, rh_70458)
    
    # Processing the call keyword arguments (line 2740)
    int_70459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2740, 38), 'int')
    keyword_70460 = int_70459
    kwargs_70461 = {'axis': keyword_70460}
    # Getting the type of 'np' (line 2740)
    np_70454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 2740)
    concatenate_70455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2740, 8), np_70454, 'concatenate')
    # Calling concatenate(args, kwargs) (line 2740)
    concatenate_call_result_70462 = invoke(stypy.reporting.localization.Localization(__file__, 2740, 8), concatenate_70455, *[tuple_70456], **kwargs_70461)
    
    # Assigning a type to the variable 'w' (line 2740)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2740, 4), 'w', concatenate_call_result_70462)
    
    # Assigning a Attribute to a Tuple (line 2741):
    
    # Assigning a Subscript to a Name (line 2741):
    
    # Obtaining the type of the subscript
    int_70463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2741, 4), 'int')
    # Getting the type of 'B' (line 2741)
    B_70464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 11), 'B')
    # Obtaining the member 'shape' of a type (line 2741)
    shape_70465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 11), B_70464, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2741)
    getitem___70466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 4), shape_70465, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2741)
    subscript_call_result_70467 = invoke(stypy.reporting.localization.Localization(__file__, 2741, 4), getitem___70466, int_70463)
    
    # Assigning a type to the variable 'tuple_var_assignment_63651' (line 2741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 4), 'tuple_var_assignment_63651', subscript_call_result_70467)
    
    # Assigning a Subscript to a Name (line 2741):
    
    # Obtaining the type of the subscript
    int_70468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2741, 4), 'int')
    # Getting the type of 'B' (line 2741)
    B_70469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 11), 'B')
    # Obtaining the member 'shape' of a type (line 2741)
    shape_70470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 11), B_70469, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2741)
    getitem___70471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2741, 4), shape_70470, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2741)
    subscript_call_result_70472 = invoke(stypy.reporting.localization.Localization(__file__, 2741, 4), getitem___70471, int_70468)
    
    # Assigning a type to the variable 'tuple_var_assignment_63652' (line 2741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 4), 'tuple_var_assignment_63652', subscript_call_result_70472)
    
    # Assigning a Name to a Name (line 2741):
    # Getting the type of 'tuple_var_assignment_63651' (line 2741)
    tuple_var_assignment_63651_70473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 4), 'tuple_var_assignment_63651')
    # Assigning a type to the variable 'M' (line 2741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 4), 'M', tuple_var_assignment_63651_70473)
    
    # Assigning a Name to a Name (line 2741):
    # Getting the type of 'tuple_var_assignment_63652' (line 2741)
    tuple_var_assignment_63652_70474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 4), 'tuple_var_assignment_63652')
    # Assigning a type to the variable 'N' (line 2741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2741, 7), 'N', tuple_var_assignment_63652_70474)
    
    
    # Getting the type of 'M' (line 2742)
    M_70475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 8), 'M')
    # Getting the type of 'N' (line 2742)
    N_70476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 12), 'N')
    # Applying the binary operator '>' (line 2742)
    result_gt_70477 = python_operator(stypy.reporting.localization.Localization(__file__, 2742, 8), '>', M_70475, N_70476)
    
    # Testing the type of an if condition (line 2742)
    if_condition_70478 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2742, 4), result_gt_70477)
    # Assigning a type to the variable 'if_condition_70478' (line 2742)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2742, 4), 'if_condition_70478', if_condition_70478)
    # SSA begins for if statement (line 2742)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2743)
    # Processing the call arguments (line 2743)
    str_70480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2743, 25), 'str', 'over-specification of conditions')
    # Processing the call keyword arguments (line 2743)
    kwargs_70481 = {}
    # Getting the type of 'ValueError' (line 2743)
    ValueError_70479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2743, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2743)
    ValueError_call_result_70482 = invoke(stypy.reporting.localization.Localization(__file__, 2743, 14), ValueError_70479, *[str_70480], **kwargs_70481)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2743, 8), ValueError_call_result_70482, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 2742)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'M' (line 2744)
    M_70483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 10), 'M')
    # Getting the type of 'N' (line 2744)
    N_70484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 14), 'N')
    # Applying the binary operator '<' (line 2744)
    result_lt_70485 = python_operator(stypy.reporting.localization.Localization(__file__, 2744, 10), '<', M_70483, N_70484)
    
    # Testing the type of an if condition (line 2744)
    if_condition_70486 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2744, 9), result_lt_70485)
    # Assigning a type to the variable 'if_condition_70486' (line 2744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2744, 9), 'if_condition_70486', if_condition_70486)
    # SSA begins for if statement (line 2744)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _find_smoothest(...): (line 2745)
    # Processing the call arguments (line 2745)
    # Getting the type of 'xk' (line 2745)
    xk_70488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 31), 'xk', False)
    # Getting the type of 'yk' (line 2745)
    yk_70489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 35), 'yk', False)
    # Getting the type of 'order' (line 2745)
    order_70490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 39), 'order', False)
    # Getting the type of 'None' (line 2745)
    None_70491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 46), 'None', False)
    # Getting the type of 'B' (line 2745)
    B_70492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 52), 'B', False)
    # Processing the call keyword arguments (line 2745)
    kwargs_70493 = {}
    # Getting the type of '_find_smoothest' (line 2745)
    _find_smoothest_70487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 15), '_find_smoothest', False)
    # Calling _find_smoothest(args, kwargs) (line 2745)
    _find_smoothest_call_result_70494 = invoke(stypy.reporting.localization.Localization(__file__, 2745, 15), _find_smoothest_70487, *[xk_70488, yk_70489, order_70490, None_70491, B_70492], **kwargs_70493)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2745, 8), 'stypy_return_type', _find_smoothest_call_result_70494)
    # SSA branch for the else part of an if statement (line 2744)
    module_type_store.open_ssa_branch('else')
    
    # Call to solve(...): (line 2747)
    # Processing the call arguments (line 2747)
    # Getting the type of 'B' (line 2747)
    B_70498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 34), 'B', False)
    # Getting the type of 'w' (line 2747)
    w_70499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 37), 'w', False)
    # Processing the call keyword arguments (line 2747)
    kwargs_70500 = {}
    # Getting the type of 'scipy' (line 2747)
    scipy_70495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 15), 'scipy', False)
    # Obtaining the member 'linalg' of a type (line 2747)
    linalg_70496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2747, 15), scipy_70495, 'linalg')
    # Obtaining the member 'solve' of a type (line 2747)
    solve_70497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2747, 15), linalg_70496, 'solve')
    # Calling solve(args, kwargs) (line 2747)
    solve_call_result_70501 = invoke(stypy.reporting.localization.Localization(__file__, 2747, 15), solve_70497, *[B_70498, w_70499], **kwargs_70500)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2747)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2747, 8), 'stypy_return_type', solve_call_result_70501)
    # SSA join for if statement (line 2744)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2742)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_find_user(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_find_user' in the type store
    # Getting the type of 'stypy_return_type' (line 2736)
    stypy_return_type_70502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_70502)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_find_user'
    return stypy_return_type_70502

# Assigning a type to the variable '_find_user' (line 2736)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2736, 0), '_find_user', _find_user)

@norecursion
def splmake(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_70503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2753, 26), 'int')
    str_70504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2753, 34), 'str', 'smoothest')
    # Getting the type of 'None' (line 2753)
    None_70505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 53), 'None')
    defaults = [int_70503, str_70504, None_70505]
    # Create a new context for function 'splmake'
    module_type_store = module_type_store.open_function_context('splmake', 2751, 0, False)
    
    # Passed parameters checking function
    splmake.stypy_localization = localization
    splmake.stypy_type_of_self = None
    splmake.stypy_type_store = module_type_store
    splmake.stypy_function_name = 'splmake'
    splmake.stypy_param_names_list = ['xk', 'yk', 'order', 'kind', 'conds']
    splmake.stypy_varargs_param_name = None
    splmake.stypy_kwargs_param_name = None
    splmake.stypy_call_defaults = defaults
    splmake.stypy_call_varargs = varargs
    splmake.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'splmake', ['xk', 'yk', 'order', 'kind', 'conds'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'splmake', localization, ['xk', 'yk', 'order', 'kind', 'conds'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'splmake(...)' code ##################

    str_70506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2780, (-1)), 'str', "\n    Return a representation of a spline given data-points at internal knots\n\n    Parameters\n    ----------\n    xk : array_like\n        The input array of x values of rank 1\n    yk : array_like\n        The input array of y values of rank N. `yk` can be an N-d array to\n        represent more than one curve, through the same `xk` points. The first\n        dimension is assumed to be the interpolating dimension and is the same\n        length of `xk`.\n    order : int, optional\n        Order of the spline\n    kind : str, optional\n        Can be 'smoothest', 'not_a_knot', 'fixed', 'clamped', 'natural',\n        'periodic', 'symmetric', 'user', 'mixed' and it is ignored if order < 2\n    conds : optional\n        Conds\n\n    Returns\n    -------\n    splmake : tuple\n        Return a (`xk`, `cvals`, `k`) representation of a spline given\n        data-points where the (internal) knots are at the data-points.\n\n    ")
    
    # Assigning a Call to a Name (line 2781):
    
    # Assigning a Call to a Name (line 2781):
    
    # Call to asanyarray(...): (line 2781)
    # Processing the call arguments (line 2781)
    # Getting the type of 'yk' (line 2781)
    yk_70509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 23), 'yk', False)
    # Processing the call keyword arguments (line 2781)
    kwargs_70510 = {}
    # Getting the type of 'np' (line 2781)
    np_70507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 9), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 2781)
    asanyarray_70508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2781, 9), np_70507, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 2781)
    asanyarray_call_result_70511 = invoke(stypy.reporting.localization.Localization(__file__, 2781, 9), asanyarray_70508, *[yk_70509], **kwargs_70510)
    
    # Assigning a type to the variable 'yk' (line 2781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2781, 4), 'yk', asanyarray_call_result_70511)
    
    # Assigning a Call to a Name (line 2783):
    
    # Assigning a Call to a Name (line 2783):
    
    # Call to int(...): (line 2783)
    # Processing the call arguments (line 2783)
    # Getting the type of 'order' (line 2783)
    order_70513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2783, 16), 'order', False)
    # Processing the call keyword arguments (line 2783)
    kwargs_70514 = {}
    # Getting the type of 'int' (line 2783)
    int_70512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2783, 12), 'int', False)
    # Calling int(args, kwargs) (line 2783)
    int_call_result_70515 = invoke(stypy.reporting.localization.Localization(__file__, 2783, 12), int_70512, *[order_70513], **kwargs_70514)
    
    # Assigning a type to the variable 'order' (line 2783)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2783, 4), 'order', int_call_result_70515)
    
    
    # Getting the type of 'order' (line 2784)
    order_70516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 7), 'order')
    int_70517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2784, 15), 'int')
    # Applying the binary operator '<' (line 2784)
    result_lt_70518 = python_operator(stypy.reporting.localization.Localization(__file__, 2784, 7), '<', order_70516, int_70517)
    
    # Testing the type of an if condition (line 2784)
    if_condition_70519 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2784, 4), result_lt_70518)
    # Assigning a type to the variable 'if_condition_70519' (line 2784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 4), 'if_condition_70519', if_condition_70519)
    # SSA begins for if statement (line 2784)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2785)
    # Processing the call arguments (line 2785)
    str_70521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2785, 25), 'str', 'order must not be negative')
    # Processing the call keyword arguments (line 2785)
    kwargs_70522 = {}
    # Getting the type of 'ValueError' (line 2785)
    ValueError_70520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2785)
    ValueError_call_result_70523 = invoke(stypy.reporting.localization.Localization(__file__, 2785, 14), ValueError_70520, *[str_70521], **kwargs_70522)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2785, 8), ValueError_call_result_70523, 'raise parameter', BaseException)
    # SSA join for if statement (line 2784)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'order' (line 2786)
    order_70524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 7), 'order')
    int_70525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2786, 16), 'int')
    # Applying the binary operator '==' (line 2786)
    result_eq_70526 = python_operator(stypy.reporting.localization.Localization(__file__, 2786, 7), '==', order_70524, int_70525)
    
    # Testing the type of an if condition (line 2786)
    if_condition_70527 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2786, 4), result_eq_70526)
    # Assigning a type to the variable 'if_condition_70527' (line 2786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2786, 4), 'if_condition_70527', if_condition_70527)
    # SSA begins for if statement (line 2786)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2787)
    tuple_70528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2787, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2787)
    # Adding element type (line 2787)
    # Getting the type of 'xk' (line 2787)
    xk_70529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 15), 'xk')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2787, 15), tuple_70528, xk_70529)
    # Adding element type (line 2787)
    
    # Obtaining the type of the subscript
    int_70530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2787, 23), 'int')
    slice_70531 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2787, 19), None, int_70530, None)
    # Getting the type of 'yk' (line 2787)
    yk_70532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 19), 'yk')
    # Obtaining the member '__getitem__' of a type (line 2787)
    getitem___70533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2787, 19), yk_70532, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2787)
    subscript_call_result_70534 = invoke(stypy.reporting.localization.Localization(__file__, 2787, 19), getitem___70533, slice_70531)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2787, 15), tuple_70528, subscript_call_result_70534)
    # Adding element type (line 2787)
    # Getting the type of 'order' (line 2787)
    order_70535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 28), 'order')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2787, 15), tuple_70528, order_70535)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2787, 8), 'stypy_return_type', tuple_70528)
    # SSA branch for the else part of an if statement (line 2786)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'order' (line 2788)
    order_70536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 9), 'order')
    int_70537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2788, 18), 'int')
    # Applying the binary operator '==' (line 2788)
    result_eq_70538 = python_operator(stypy.reporting.localization.Localization(__file__, 2788, 9), '==', order_70536, int_70537)
    
    # Testing the type of an if condition (line 2788)
    if_condition_70539 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2788, 9), result_eq_70538)
    # Assigning a type to the variable 'if_condition_70539' (line 2788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2788, 9), 'if_condition_70539', if_condition_70539)
    # SSA begins for if statement (line 2788)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2789)
    tuple_70540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2789, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2789)
    # Adding element type (line 2789)
    # Getting the type of 'xk' (line 2789)
    xk_70541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 15), 'xk')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2789, 15), tuple_70540, xk_70541)
    # Adding element type (line 2789)
    # Getting the type of 'yk' (line 2789)
    yk_70542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 19), 'yk')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2789, 15), tuple_70540, yk_70542)
    # Adding element type (line 2789)
    # Getting the type of 'order' (line 2789)
    order_70543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 23), 'order')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2789, 15), tuple_70540, order_70543)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2789, 8), 'stypy_return_type', tuple_70540)
    # SSA join for if statement (line 2788)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2786)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 2791)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 2792):
    
    # Assigning a Call to a Name (line 2792):
    
    # Call to eval(...): (line 2792)
    # Processing the call arguments (line 2792)
    str_70545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2792, 20), 'str', '_find_%s')
    # Getting the type of 'kind' (line 2792)
    kind_70546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 33), 'kind', False)
    # Applying the binary operator '%' (line 2792)
    result_mod_70547 = python_operator(stypy.reporting.localization.Localization(__file__, 2792, 20), '%', str_70545, kind_70546)
    
    # Processing the call keyword arguments (line 2792)
    kwargs_70548 = {}
    # Getting the type of 'eval' (line 2792)
    eval_70544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 15), 'eval', False)
    # Calling eval(args, kwargs) (line 2792)
    eval_call_result_70549 = invoke(stypy.reporting.localization.Localization(__file__, 2792, 15), eval_70544, *[result_mod_70547], **kwargs_70548)
    
    # Assigning a type to the variable 'func' (line 2792)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2792, 8), 'func', eval_call_result_70549)
    # SSA branch for the except part of a try statement (line 2791)
    # SSA branch for the except '<any exception>' branch of a try statement (line 2791)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'NotImplementedError' (line 2794)
    NotImplementedError_70550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 14), 'NotImplementedError')
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2794, 8), NotImplementedError_70550, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 2791)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2797):
    
    # Assigning a Call to a Name (line 2797):
    
    # Call to _bsplmat(...): (line 2797)
    # Processing the call arguments (line 2797)
    # Getting the type of 'order' (line 2797)
    order_70553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 26), 'order', False)
    # Getting the type of 'xk' (line 2797)
    xk_70554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 33), 'xk', False)
    # Processing the call keyword arguments (line 2797)
    kwargs_70555 = {}
    # Getting the type of '_fitpack' (line 2797)
    _fitpack_70551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 8), '_fitpack', False)
    # Obtaining the member '_bsplmat' of a type (line 2797)
    _bsplmat_70552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2797, 8), _fitpack_70551, '_bsplmat')
    # Calling _bsplmat(args, kwargs) (line 2797)
    _bsplmat_call_result_70556 = invoke(stypy.reporting.localization.Localization(__file__, 2797, 8), _bsplmat_70552, *[order_70553, xk_70554], **kwargs_70555)
    
    # Assigning a type to the variable 'B' (line 2797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2797, 4), 'B', _bsplmat_call_result_70556)
    
    # Assigning a Call to a Name (line 2798):
    
    # Assigning a Call to a Name (line 2798):
    
    # Call to func(...): (line 2798)
    # Processing the call arguments (line 2798)
    # Getting the type of 'xk' (line 2798)
    xk_70558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 17), 'xk', False)
    # Getting the type of 'yk' (line 2798)
    yk_70559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 21), 'yk', False)
    # Getting the type of 'order' (line 2798)
    order_70560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 25), 'order', False)
    # Getting the type of 'conds' (line 2798)
    conds_70561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 32), 'conds', False)
    # Getting the type of 'B' (line 2798)
    B_70562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 39), 'B', False)
    # Processing the call keyword arguments (line 2798)
    kwargs_70563 = {}
    # Getting the type of 'func' (line 2798)
    func_70557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2798, 12), 'func', False)
    # Calling func(args, kwargs) (line 2798)
    func_call_result_70564 = invoke(stypy.reporting.localization.Localization(__file__, 2798, 12), func_70557, *[xk_70558, yk_70559, order_70560, conds_70561, B_70562], **kwargs_70563)
    
    # Assigning a type to the variable 'coefs' (line 2798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2798, 4), 'coefs', func_call_result_70564)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2799)
    tuple_70565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2799, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2799)
    # Adding element type (line 2799)
    # Getting the type of 'xk' (line 2799)
    xk_70566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2799, 11), 'xk')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2799, 11), tuple_70565, xk_70566)
    # Adding element type (line 2799)
    # Getting the type of 'coefs' (line 2799)
    coefs_70567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2799, 15), 'coefs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2799, 11), tuple_70565, coefs_70567)
    # Adding element type (line 2799)
    # Getting the type of 'order' (line 2799)
    order_70568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2799, 22), 'order')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2799, 11), tuple_70565, order_70568)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2799, 4), 'stypy_return_type', tuple_70565)
    
    # ################# End of 'splmake(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'splmake' in the type store
    # Getting the type of 'stypy_return_type' (line 2751)
    stypy_return_type_70569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2751, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_70569)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'splmake'
    return stypy_return_type_70569

# Assigning a type to the variable 'splmake' (line 2751)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2751, 0), 'splmake', splmake)

@norecursion
def spleval(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_70570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2804, 29), 'int')
    defaults = [int_70570]
    # Create a new context for function 'spleval'
    module_type_store = module_type_store.open_function_context('spleval', 2802, 0, False)
    
    # Passed parameters checking function
    spleval.stypy_localization = localization
    spleval.stypy_type_of_self = None
    spleval.stypy_type_store = module_type_store
    spleval.stypy_function_name = 'spleval'
    spleval.stypy_param_names_list = ['xck', 'xnew', 'deriv']
    spleval.stypy_varargs_param_name = None
    spleval.stypy_kwargs_param_name = None
    spleval.stypy_call_defaults = defaults
    spleval.stypy_call_varargs = varargs
    spleval.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'spleval', ['xck', 'xnew', 'deriv'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'spleval', localization, ['xck', 'xnew', 'deriv'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'spleval(...)' code ##################

    str_70571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2839, (-1)), 'str', '\n    Evaluate a fixed spline represented by the given tuple at the new x-values\n\n    The `xj` values are the interior knot points.  The approximation\n    region is `xj[0]` to `xj[-1]`.  If N+1 is the length of `xj`, then `cvals`\n    should have length N+k where `k` is the order of the spline.\n\n    Parameters\n    ----------\n    (xj, cvals, k) : tuple\n        Parameters that define the fixed spline\n    xj : array_like\n        Interior knot points\n    cvals : array_like\n        Curvature\n    k : int\n        Order of the spline\n    xnew : array_like\n        Locations to calculate spline\n    deriv : int\n        Deriv\n\n    Returns\n    -------\n    spleval : ndarray\n        If `cvals` represents more than one curve (`cvals.ndim` > 1) and/or\n        `xnew` is N-d, then the result is `xnew.shape` + `cvals.shape[1:]`\n        providing the interpolation of multiple curves.\n\n    Notes\n    -----\n    Internally, an additional `k`-1 knot points are added on either side of\n    the spline.\n\n    ')
    
    # Assigning a Name to a Tuple (line 2840):
    
    # Assigning a Subscript to a Name (line 2840):
    
    # Obtaining the type of the subscript
    int_70572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2840, 4), 'int')
    # Getting the type of 'xck' (line 2840)
    xck_70573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 21), 'xck')
    # Obtaining the member '__getitem__' of a type (line 2840)
    getitem___70574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2840, 4), xck_70573, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2840)
    subscript_call_result_70575 = invoke(stypy.reporting.localization.Localization(__file__, 2840, 4), getitem___70574, int_70572)
    
    # Assigning a type to the variable 'tuple_var_assignment_63653' (line 2840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2840, 4), 'tuple_var_assignment_63653', subscript_call_result_70575)
    
    # Assigning a Subscript to a Name (line 2840):
    
    # Obtaining the type of the subscript
    int_70576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2840, 4), 'int')
    # Getting the type of 'xck' (line 2840)
    xck_70577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 21), 'xck')
    # Obtaining the member '__getitem__' of a type (line 2840)
    getitem___70578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2840, 4), xck_70577, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2840)
    subscript_call_result_70579 = invoke(stypy.reporting.localization.Localization(__file__, 2840, 4), getitem___70578, int_70576)
    
    # Assigning a type to the variable 'tuple_var_assignment_63654' (line 2840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2840, 4), 'tuple_var_assignment_63654', subscript_call_result_70579)
    
    # Assigning a Subscript to a Name (line 2840):
    
    # Obtaining the type of the subscript
    int_70580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2840, 4), 'int')
    # Getting the type of 'xck' (line 2840)
    xck_70581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 21), 'xck')
    # Obtaining the member '__getitem__' of a type (line 2840)
    getitem___70582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2840, 4), xck_70581, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2840)
    subscript_call_result_70583 = invoke(stypy.reporting.localization.Localization(__file__, 2840, 4), getitem___70582, int_70580)
    
    # Assigning a type to the variable 'tuple_var_assignment_63655' (line 2840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2840, 4), 'tuple_var_assignment_63655', subscript_call_result_70583)
    
    # Assigning a Name to a Name (line 2840):
    # Getting the type of 'tuple_var_assignment_63653' (line 2840)
    tuple_var_assignment_63653_70584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 4), 'tuple_var_assignment_63653')
    # Assigning a type to the variable 'xj' (line 2840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2840, 5), 'xj', tuple_var_assignment_63653_70584)
    
    # Assigning a Name to a Name (line 2840):
    # Getting the type of 'tuple_var_assignment_63654' (line 2840)
    tuple_var_assignment_63654_70585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 4), 'tuple_var_assignment_63654')
    # Assigning a type to the variable 'cvals' (line 2840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2840, 9), 'cvals', tuple_var_assignment_63654_70585)
    
    # Assigning a Name to a Name (line 2840):
    # Getting the type of 'tuple_var_assignment_63655' (line 2840)
    tuple_var_assignment_63655_70586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 4), 'tuple_var_assignment_63655')
    # Assigning a type to the variable 'k' (line 2840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2840, 16), 'k', tuple_var_assignment_63655_70586)
    
    # Assigning a Call to a Name (line 2841):
    
    # Assigning a Call to a Name (line 2841):
    
    # Call to shape(...): (line 2841)
    # Processing the call arguments (line 2841)
    # Getting the type of 'xnew' (line 2841)
    xnew_70589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 24), 'xnew', False)
    # Processing the call keyword arguments (line 2841)
    kwargs_70590 = {}
    # Getting the type of 'np' (line 2841)
    np_70587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 15), 'np', False)
    # Obtaining the member 'shape' of a type (line 2841)
    shape_70588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2841, 15), np_70587, 'shape')
    # Calling shape(args, kwargs) (line 2841)
    shape_call_result_70591 = invoke(stypy.reporting.localization.Localization(__file__, 2841, 15), shape_70588, *[xnew_70589], **kwargs_70590)
    
    # Assigning a type to the variable 'oldshape' (line 2841)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2841, 4), 'oldshape', shape_call_result_70591)
    
    # Assigning a Call to a Name (line 2842):
    
    # Assigning a Call to a Name (line 2842):
    
    # Call to ravel(...): (line 2842)
    # Processing the call arguments (line 2842)
    # Getting the type of 'xnew' (line 2842)
    xnew_70594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 18), 'xnew', False)
    # Processing the call keyword arguments (line 2842)
    kwargs_70595 = {}
    # Getting the type of 'np' (line 2842)
    np_70592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 9), 'np', False)
    # Obtaining the member 'ravel' of a type (line 2842)
    ravel_70593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 9), np_70592, 'ravel')
    # Calling ravel(args, kwargs) (line 2842)
    ravel_call_result_70596 = invoke(stypy.reporting.localization.Localization(__file__, 2842, 9), ravel_70593, *[xnew_70594], **kwargs_70595)
    
    # Assigning a type to the variable 'xx' (line 2842)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2842, 4), 'xx', ravel_call_result_70596)
    
    # Assigning a Subscript to a Name (line 2843):
    
    # Assigning a Subscript to a Name (line 2843):
    
    # Obtaining the type of the subscript
    int_70597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2843, 21), 'int')
    slice_70598 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2843, 9), int_70597, None, None)
    # Getting the type of 'cvals' (line 2843)
    cvals_70599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 9), 'cvals')
    # Obtaining the member 'shape' of a type (line 2843)
    shape_70600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2843, 9), cvals_70599, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2843)
    getitem___70601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2843, 9), shape_70600, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2843)
    subscript_call_result_70602 = invoke(stypy.reporting.localization.Localization(__file__, 2843, 9), getitem___70601, slice_70598)
    
    # Assigning a type to the variable 'sh' (line 2843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 4), 'sh', subscript_call_result_70602)
    
    # Assigning a Call to a Name (line 2844):
    
    # Assigning a Call to a Name (line 2844):
    
    # Call to empty(...): (line 2844)
    # Processing the call arguments (line 2844)
    # Getting the type of 'xx' (line 2844)
    xx_70605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 19), 'xx', False)
    # Obtaining the member 'shape' of a type (line 2844)
    shape_70606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2844, 19), xx_70605, 'shape')
    # Getting the type of 'sh' (line 2844)
    sh_70607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 30), 'sh', False)
    # Applying the binary operator '+' (line 2844)
    result_add_70608 = python_operator(stypy.reporting.localization.Localization(__file__, 2844, 19), '+', shape_70606, sh_70607)
    
    # Processing the call keyword arguments (line 2844)
    # Getting the type of 'cvals' (line 2844)
    cvals_70609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 40), 'cvals', False)
    # Obtaining the member 'dtype' of a type (line 2844)
    dtype_70610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2844, 40), cvals_70609, 'dtype')
    keyword_70611 = dtype_70610
    kwargs_70612 = {'dtype': keyword_70611}
    # Getting the type of 'np' (line 2844)
    np_70603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 10), 'np', False)
    # Obtaining the member 'empty' of a type (line 2844)
    empty_70604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2844, 10), np_70603, 'empty')
    # Calling empty(args, kwargs) (line 2844)
    empty_call_result_70613 = invoke(stypy.reporting.localization.Localization(__file__, 2844, 10), empty_70604, *[result_add_70608], **kwargs_70612)
    
    # Assigning a type to the variable 'res' (line 2844)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2844, 4), 'res', empty_call_result_70613)
    
    
    # Call to ndindex(...): (line 2845)
    # Getting the type of 'sh' (line 2845)
    sh_70616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 29), 'sh', False)
    # Processing the call keyword arguments (line 2845)
    kwargs_70617 = {}
    # Getting the type of 'np' (line 2845)
    np_70614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 17), 'np', False)
    # Obtaining the member 'ndindex' of a type (line 2845)
    ndindex_70615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2845, 17), np_70614, 'ndindex')
    # Calling ndindex(args, kwargs) (line 2845)
    ndindex_call_result_70618 = invoke(stypy.reporting.localization.Localization(__file__, 2845, 17), ndindex_70615, *[sh_70616], **kwargs_70617)
    
    # Testing the type of a for loop iterable (line 2845)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2845, 4), ndindex_call_result_70618)
    # Getting the type of the for loop variable (line 2845)
    for_loop_var_70619 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2845, 4), ndindex_call_result_70618)
    # Assigning a type to the variable 'index' (line 2845)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2845, 4), 'index', for_loop_var_70619)
    # SSA begins for a for statement (line 2845)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 2846):
    
    # Assigning a BinOp to a Name (line 2846):
    
    # Obtaining an instance of the builtin type 'tuple' (line 2846)
    tuple_70620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2846, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2846)
    # Adding element type (line 2846)
    
    # Call to slice(...): (line 2846)
    # Processing the call arguments (line 2846)
    # Getting the type of 'None' (line 2846)
    None_70622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2846, 20), 'None', False)
    # Processing the call keyword arguments (line 2846)
    kwargs_70623 = {}
    # Getting the type of 'slice' (line 2846)
    slice_70621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2846, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 2846)
    slice_call_result_70624 = invoke(stypy.reporting.localization.Localization(__file__, 2846, 14), slice_70621, *[None_70622], **kwargs_70623)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2846, 14), tuple_70620, slice_call_result_70624)
    
    # Getting the type of 'index' (line 2846)
    index_70625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2846, 30), 'index')
    # Applying the binary operator '+' (line 2846)
    result_add_70626 = python_operator(stypy.reporting.localization.Localization(__file__, 2846, 13), '+', tuple_70620, index_70625)
    
    # Assigning a type to the variable 'sl' (line 2846)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2846, 8), 'sl', result_add_70626)
    
    
    # Call to issubclass(...): (line 2847)
    # Processing the call arguments (line 2847)
    # Getting the type of 'cvals' (line 2847)
    cvals_70628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 22), 'cvals', False)
    # Obtaining the member 'dtype' of a type (line 2847)
    dtype_70629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2847, 22), cvals_70628, 'dtype')
    # Obtaining the member 'type' of a type (line 2847)
    type_70630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2847, 22), dtype_70629, 'type')
    # Getting the type of 'np' (line 2847)
    np_70631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 40), 'np', False)
    # Obtaining the member 'complexfloating' of a type (line 2847)
    complexfloating_70632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2847, 40), np_70631, 'complexfloating')
    # Processing the call keyword arguments (line 2847)
    kwargs_70633 = {}
    # Getting the type of 'issubclass' (line 2847)
    issubclass_70627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 11), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 2847)
    issubclass_call_result_70634 = invoke(stypy.reporting.localization.Localization(__file__, 2847, 11), issubclass_70627, *[type_70630, complexfloating_70632], **kwargs_70633)
    
    # Testing the type of an if condition (line 2847)
    if_condition_70635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2847, 8), issubclass_call_result_70634)
    # Assigning a type to the variable 'if_condition_70635' (line 2847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2847, 8), 'if_condition_70635', if_condition_70635)
    # SSA begins for if statement (line 2847)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Attribute (line 2848):
    
    # Assigning a Call to a Attribute (line 2848):
    
    # Call to _bspleval(...): (line 2848)
    # Processing the call arguments (line 2848)
    # Getting the type of 'xx' (line 2848)
    xx_70638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 46), 'xx', False)
    # Getting the type of 'xj' (line 2848)
    xj_70639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 49), 'xj', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2848)
    sl_70640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 64), 'sl', False)
    # Getting the type of 'cvals' (line 2848)
    cvals_70641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 53), 'cvals', False)
    # Obtaining the member 'real' of a type (line 2848)
    real_70642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2848, 53), cvals_70641, 'real')
    # Obtaining the member '__getitem__' of a type (line 2848)
    getitem___70643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2848, 53), real_70642, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2848)
    subscript_call_result_70644 = invoke(stypy.reporting.localization.Localization(__file__, 2848, 53), getitem___70643, sl_70640)
    
    # Getting the type of 'k' (line 2848)
    k_70645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 69), 'k', False)
    # Getting the type of 'deriv' (line 2848)
    deriv_70646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 72), 'deriv', False)
    # Processing the call keyword arguments (line 2848)
    kwargs_70647 = {}
    # Getting the type of '_fitpack' (line 2848)
    _fitpack_70636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 27), '_fitpack', False)
    # Obtaining the member '_bspleval' of a type (line 2848)
    _bspleval_70637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2848, 27), _fitpack_70636, '_bspleval')
    # Calling _bspleval(args, kwargs) (line 2848)
    _bspleval_call_result_70648 = invoke(stypy.reporting.localization.Localization(__file__, 2848, 27), _bspleval_70637, *[xx_70638, xj_70639, subscript_call_result_70644, k_70645, deriv_70646], **kwargs_70647)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2848)
    sl_70649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 16), 'sl')
    # Getting the type of 'res' (line 2848)
    res_70650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 12), 'res')
    # Obtaining the member '__getitem__' of a type (line 2848)
    getitem___70651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2848, 12), res_70650, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2848)
    subscript_call_result_70652 = invoke(stypy.reporting.localization.Localization(__file__, 2848, 12), getitem___70651, sl_70649)
    
    # Setting the type of the member 'real' of a type (line 2848)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2848, 12), subscript_call_result_70652, 'real', _bspleval_call_result_70648)
    
    # Assigning a Call to a Attribute (line 2849):
    
    # Assigning a Call to a Attribute (line 2849):
    
    # Call to _bspleval(...): (line 2849)
    # Processing the call arguments (line 2849)
    # Getting the type of 'xx' (line 2849)
    xx_70655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 46), 'xx', False)
    # Getting the type of 'xj' (line 2849)
    xj_70656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 49), 'xj', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2849)
    sl_70657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 64), 'sl', False)
    # Getting the type of 'cvals' (line 2849)
    cvals_70658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 53), 'cvals', False)
    # Obtaining the member 'imag' of a type (line 2849)
    imag_70659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2849, 53), cvals_70658, 'imag')
    # Obtaining the member '__getitem__' of a type (line 2849)
    getitem___70660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2849, 53), imag_70659, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2849)
    subscript_call_result_70661 = invoke(stypy.reporting.localization.Localization(__file__, 2849, 53), getitem___70660, sl_70657)
    
    # Getting the type of 'k' (line 2849)
    k_70662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 69), 'k', False)
    # Getting the type of 'deriv' (line 2849)
    deriv_70663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 72), 'deriv', False)
    # Processing the call keyword arguments (line 2849)
    kwargs_70664 = {}
    # Getting the type of '_fitpack' (line 2849)
    _fitpack_70653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 27), '_fitpack', False)
    # Obtaining the member '_bspleval' of a type (line 2849)
    _bspleval_70654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2849, 27), _fitpack_70653, '_bspleval')
    # Calling _bspleval(args, kwargs) (line 2849)
    _bspleval_call_result_70665 = invoke(stypy.reporting.localization.Localization(__file__, 2849, 27), _bspleval_70654, *[xx_70655, xj_70656, subscript_call_result_70661, k_70662, deriv_70663], **kwargs_70664)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2849)
    sl_70666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 16), 'sl')
    # Getting the type of 'res' (line 2849)
    res_70667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 12), 'res')
    # Obtaining the member '__getitem__' of a type (line 2849)
    getitem___70668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2849, 12), res_70667, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2849)
    subscript_call_result_70669 = invoke(stypy.reporting.localization.Localization(__file__, 2849, 12), getitem___70668, sl_70666)
    
    # Setting the type of the member 'imag' of a type (line 2849)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2849, 12), subscript_call_result_70669, 'imag', _bspleval_call_result_70665)
    # SSA branch for the else part of an if statement (line 2847)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Subscript (line 2851):
    
    # Assigning a Call to a Subscript (line 2851):
    
    # Call to _bspleval(...): (line 2851)
    # Processing the call arguments (line 2851)
    # Getting the type of 'xx' (line 2851)
    xx_70672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 41), 'xx', False)
    # Getting the type of 'xj' (line 2851)
    xj_70673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 45), 'xj', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2851)
    sl_70674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 55), 'sl', False)
    # Getting the type of 'cvals' (line 2851)
    cvals_70675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 49), 'cvals', False)
    # Obtaining the member '__getitem__' of a type (line 2851)
    getitem___70676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2851, 49), cvals_70675, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2851)
    subscript_call_result_70677 = invoke(stypy.reporting.localization.Localization(__file__, 2851, 49), getitem___70676, sl_70674)
    
    # Getting the type of 'k' (line 2851)
    k_70678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 60), 'k', False)
    # Getting the type of 'deriv' (line 2851)
    deriv_70679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 63), 'deriv', False)
    # Processing the call keyword arguments (line 2851)
    kwargs_70680 = {}
    # Getting the type of '_fitpack' (line 2851)
    _fitpack_70670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 22), '_fitpack', False)
    # Obtaining the member '_bspleval' of a type (line 2851)
    _bspleval_70671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2851, 22), _fitpack_70670, '_bspleval')
    # Calling _bspleval(args, kwargs) (line 2851)
    _bspleval_call_result_70681 = invoke(stypy.reporting.localization.Localization(__file__, 2851, 22), _bspleval_70671, *[xx_70672, xj_70673, subscript_call_result_70677, k_70678, deriv_70679], **kwargs_70680)
    
    # Getting the type of 'res' (line 2851)
    res_70682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 12), 'res')
    # Getting the type of 'sl' (line 2851)
    sl_70683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 16), 'sl')
    # Storing an element on a container (line 2851)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2851, 12), res_70682, (sl_70683, _bspleval_call_result_70681))
    # SSA join for if statement (line 2847)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Attribute (line 2852):
    
    # Assigning a BinOp to a Attribute (line 2852):
    # Getting the type of 'oldshape' (line 2852)
    oldshape_70684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 16), 'oldshape')
    # Getting the type of 'sh' (line 2852)
    sh_70685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 27), 'sh')
    # Applying the binary operator '+' (line 2852)
    result_add_70686 = python_operator(stypy.reporting.localization.Localization(__file__, 2852, 16), '+', oldshape_70684, sh_70685)
    
    # Getting the type of 'res' (line 2852)
    res_70687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 4), 'res')
    # Setting the type of the member 'shape' of a type (line 2852)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2852, 4), res_70687, 'shape', result_add_70686)
    # Getting the type of 'res' (line 2853)
    res_70688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 2853)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2853, 4), 'stypy_return_type', res_70688)
    
    # ################# End of 'spleval(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'spleval' in the type store
    # Getting the type of 'stypy_return_type' (line 2802)
    stypy_return_type_70689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_70689)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'spleval'
    return stypy_return_type_70689

# Assigning a type to the variable 'spleval' (line 2802)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2802, 0), 'spleval', spleval)

@norecursion
def spltopp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'spltopp'
    module_type_store = module_type_store.open_function_context('spltopp', 2857, 0, False)
    
    # Passed parameters checking function
    spltopp.stypy_localization = localization
    spltopp.stypy_type_of_self = None
    spltopp.stypy_type_store = module_type_store
    spltopp.stypy_function_name = 'spltopp'
    spltopp.stypy_param_names_list = ['xk', 'cvals', 'k']
    spltopp.stypy_varargs_param_name = None
    spltopp.stypy_kwargs_param_name = None
    spltopp.stypy_call_defaults = defaults
    spltopp.stypy_call_varargs = varargs
    spltopp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'spltopp', ['xk', 'cvals', 'k'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'spltopp', localization, ['xk', 'cvals', 'k'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'spltopp(...)' code ##################

    str_70690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2860, 4), 'str', 'Return a piece-wise polynomial object from a fixed-spline tuple.')
    
    # Call to fromspline(...): (line 2861)
    # Processing the call arguments (line 2861)
    # Getting the type of 'xk' (line 2861)
    xk_70693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 30), 'xk', False)
    # Getting the type of 'cvals' (line 2861)
    cvals_70694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 34), 'cvals', False)
    # Getting the type of 'k' (line 2861)
    k_70695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 41), 'k', False)
    # Processing the call keyword arguments (line 2861)
    kwargs_70696 = {}
    # Getting the type of '_ppform' (line 2861)
    _ppform_70691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 11), '_ppform', False)
    # Obtaining the member 'fromspline' of a type (line 2861)
    fromspline_70692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2861, 11), _ppform_70691, 'fromspline')
    # Calling fromspline(args, kwargs) (line 2861)
    fromspline_call_result_70697 = invoke(stypy.reporting.localization.Localization(__file__, 2861, 11), fromspline_70692, *[xk_70693, cvals_70694, k_70695], **kwargs_70696)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2861)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2861, 4), 'stypy_return_type', fromspline_call_result_70697)
    
    # ################# End of 'spltopp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'spltopp' in the type store
    # Getting the type of 'stypy_return_type' (line 2857)
    stypy_return_type_70698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_70698)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'spltopp'
    return stypy_return_type_70698

# Assigning a type to the variable 'spltopp' (line 2857)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2857, 0), 'spltopp', spltopp)

@norecursion
def spline(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_70699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2866, 31), 'int')
    str_70700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2866, 39), 'str', 'smoothest')
    # Getting the type of 'None' (line 2866)
    None_70701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2866, 58), 'None')
    defaults = [int_70699, str_70700, None_70701]
    # Create a new context for function 'spline'
    module_type_store = module_type_store.open_function_context('spline', 2864, 0, False)
    
    # Passed parameters checking function
    spline.stypy_localization = localization
    spline.stypy_type_of_self = None
    spline.stypy_type_store = module_type_store
    spline.stypy_function_name = 'spline'
    spline.stypy_param_names_list = ['xk', 'yk', 'xnew', 'order', 'kind', 'conds']
    spline.stypy_varargs_param_name = None
    spline.stypy_kwargs_param_name = None
    spline.stypy_call_defaults = defaults
    spline.stypy_call_varargs = varargs
    spline.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'spline', ['xk', 'yk', 'xnew', 'order', 'kind', 'conds'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'spline', localization, ['xk', 'yk', 'xnew', 'order', 'kind', 'conds'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'spline(...)' code ##################

    str_70702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2888, (-1)), 'str', "\n    Interpolate a curve at new points using a spline fit\n\n    Parameters\n    ----------\n    xk, yk : array_like\n        The x and y values that define the curve.\n    xnew : array_like\n        The x values where spline should estimate the y values.\n    order : int\n        Default is 3.\n    kind : string\n        One of {'smoothest'}\n    conds : Don't know\n        Don't know\n\n    Returns\n    -------\n    spline : ndarray\n        An array of y values; the spline evaluated at the positions `xnew`.\n\n    ")
    
    # Call to spleval(...): (line 2889)
    # Processing the call arguments (line 2889)
    
    # Call to splmake(...): (line 2889)
    # Processing the call arguments (line 2889)
    # Getting the type of 'xk' (line 2889)
    xk_70705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2889, 27), 'xk', False)
    # Getting the type of 'yk' (line 2889)
    yk_70706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2889, 31), 'yk', False)
    # Processing the call keyword arguments (line 2889)
    # Getting the type of 'order' (line 2889)
    order_70707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2889, 41), 'order', False)
    keyword_70708 = order_70707
    # Getting the type of 'kind' (line 2889)
    kind_70709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2889, 53), 'kind', False)
    keyword_70710 = kind_70709
    # Getting the type of 'conds' (line 2889)
    conds_70711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2889, 65), 'conds', False)
    keyword_70712 = conds_70711
    kwargs_70713 = {'kind': keyword_70710, 'order': keyword_70708, 'conds': keyword_70712}
    # Getting the type of 'splmake' (line 2889)
    splmake_70704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2889, 19), 'splmake', False)
    # Calling splmake(args, kwargs) (line 2889)
    splmake_call_result_70714 = invoke(stypy.reporting.localization.Localization(__file__, 2889, 19), splmake_70704, *[xk_70705, yk_70706], **kwargs_70713)
    
    # Getting the type of 'xnew' (line 2889)
    xnew_70715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2889, 73), 'xnew', False)
    # Processing the call keyword arguments (line 2889)
    kwargs_70716 = {}
    # Getting the type of 'spleval' (line 2889)
    spleval_70703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2889, 11), 'spleval', False)
    # Calling spleval(args, kwargs) (line 2889)
    spleval_call_result_70717 = invoke(stypy.reporting.localization.Localization(__file__, 2889, 11), spleval_70703, *[splmake_call_result_70714, xnew_70715], **kwargs_70716)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2889, 4), 'stypy_return_type', spleval_call_result_70717)
    
    # ################# End of 'spline(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'spline' in the type store
    # Getting the type of 'stypy_return_type' (line 2864)
    stypy_return_type_70718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2864, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_70718)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'spline'
    return stypy_return_type_70718

# Assigning a type to the variable 'spline' (line 2864)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2864, 0), 'spline', spline)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
