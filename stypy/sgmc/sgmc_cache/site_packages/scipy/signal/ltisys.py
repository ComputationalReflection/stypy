
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: ltisys -- a collection of classes and functions for modeling linear
3: time invariant systems.
4: '''
5: from __future__ import division, print_function, absolute_import
6: 
7: #
8: # Author: Travis Oliphant 2001
9: #
10: # Feb 2010: Warren Weckesser
11: #   Rewrote lsim2 and added impulse2.
12: # Apr 2011: Jeffrey Armstrong <jeff@approximatrix.com>
13: #   Added dlsim, dstep, dimpulse, cont2discrete
14: # Aug 2013: Juan Luis Cano
15: #   Rewrote abcd_normalize.
16: # Jan 2015: Irvin Probst irvin DOT probst AT ensta-bretagne DOT fr
17: #   Added pole placement
18: # Mar 2015: Clancy Rowley
19: #   Rewrote lsim
20: # May 2015: Felix Berkenkamp
21: #   Split lti class into subclasses
22: #   Merged discrete systems and added dlti
23: 
24: import warnings
25: 
26: # np.linalg.qr fails on some tests with LinAlgError: zgeqrf returns -7
27: # use scipy's qr until this is solved
28: 
29: from scipy.linalg import qr as s_qr
30: from scipy import integrate, interpolate, linalg
31: from scipy.interpolate import interp1d
32: from scipy._lib.six import xrange
33: from .filter_design import (tf2zpk, zpk2tf, normalize, freqs, freqz, freqs_zpk,
34:                             freqz_zpk)
35: from .lti_conversion import (tf2ss, abcd_normalize, ss2tf, zpk2ss, ss2zpk,
36:                              cont2discrete)
37: 
38: import numpy
39: import numpy as np
40: from numpy import (real, atleast_1d, atleast_2d, squeeze, asarray, zeros,
41:                    dot, transpose, ones, zeros_like, linspace, nan_to_num)
42: import copy
43: 
44: __all__ = ['lti', 'dlti', 'TransferFunction', 'ZerosPolesGain', 'StateSpace',
45:            'lsim', 'lsim2', 'impulse', 'impulse2', 'step', 'step2', 'bode',
46:            'freqresp', 'place_poles', 'dlsim', 'dstep', 'dimpulse',
47:            'dfreqresp', 'dbode']
48: 
49: 
50: class LinearTimeInvariant(object):
51:     def __new__(cls, *system, **kwargs):
52:         '''Create a new object, don't allow direct instances.'''
53:         if cls is LinearTimeInvariant:
54:             raise NotImplementedError('The LinearTimeInvariant class is not '
55:                                       'meant to be used directly, use `lti` '
56:                                       'or `dlti` instead.')
57:         return super(LinearTimeInvariant, cls).__new__(cls)
58: 
59:     def __init__(self):
60:         '''
61:         Initialize the `lti` baseclass.
62: 
63:         The heavy lifting is done by the subclasses.
64:         '''
65:         super(LinearTimeInvariant, self).__init__()
66: 
67:         self.inputs = None
68:         self.outputs = None
69:         self._dt = None
70: 
71:     @property
72:     def dt(self):
73:         '''Return the sampling time of the system, `None` for `lti` systems.'''
74:         return self._dt
75: 
76:     @property
77:     def _dt_dict(self):
78:         if self.dt is None:
79:             return {}
80:         else:
81:             return {'dt': self.dt}
82: 
83:     @property
84:     def zeros(self):
85:         '''Zeros of the system.'''
86:         return self.to_zpk().zeros
87: 
88:     @property
89:     def poles(self):
90:         '''Poles of the system.'''
91:         return self.to_zpk().poles
92: 
93:     def _as_ss(self):
94:         '''Convert to `StateSpace` system, without copying.
95: 
96:         Returns
97:         -------
98:         sys: StateSpace
99:             The `StateSpace` system. If the class is already an instance of
100:             `StateSpace` then this instance is returned.
101:         '''
102:         if isinstance(self, StateSpace):
103:             return self
104:         else:
105:             return self.to_ss()
106: 
107:     def _as_zpk(self):
108:         '''Convert to `ZerosPolesGain` system, without copying.
109: 
110:         Returns
111:         -------
112:         sys: ZerosPolesGain
113:             The `ZerosPolesGain` system. If the class is already an instance of
114:             `ZerosPolesGain` then this instance is returned.
115:         '''
116:         if isinstance(self, ZerosPolesGain):
117:             return self
118:         else:
119:             return self.to_zpk()
120: 
121:     def _as_tf(self):
122:         '''Convert to `TransferFunction` system, without copying.
123: 
124:         Returns
125:         -------
126:         sys: ZerosPolesGain
127:             The `TransferFunction` system. If the class is already an instance of
128:             `TransferFunction` then this instance is returned.
129:         '''
130:         if isinstance(self, TransferFunction):
131:             return self
132:         else:
133:             return self.to_tf()
134: 
135: 
136: class lti(LinearTimeInvariant):
137:     '''
138:     Continuous-time linear time invariant system base class.
139: 
140:     Parameters
141:     ----------
142:     *system : arguments
143:         The `lti` class can be instantiated with either 2, 3 or 4 arguments.
144:         The following gives the number of arguments and the corresponding
145:         continuous-time subclass that is created:
146: 
147:             * 2: `TransferFunction`:  (numerator, denominator)
148:             * 3: `ZerosPolesGain`: (zeros, poles, gain)
149:             * 4: `StateSpace`:  (A, B, C, D)
150: 
151:         Each argument can be an array or a sequence.
152: 
153:     See Also
154:     --------
155:     ZerosPolesGain, StateSpace, TransferFunction, dlti
156: 
157:     Notes
158:     -----
159:     `lti` instances do not exist directly. Instead, `lti` creates an instance
160:     of one of its subclasses: `StateSpace`, `TransferFunction` or
161:     `ZerosPolesGain`.
162: 
163:     If (numerator, denominator) is passed in for ``*system``, coefficients for
164:     both the numerator and denominator should be specified in descending
165:     exponent order (e.g., ``s^2 + 3s + 5`` would be represented as ``[1, 3,
166:     5]``).
167: 
168:     Changing the value of properties that are not directly part of the current
169:     system representation (such as the `zeros` of a `StateSpace` system) is
170:     very inefficient and may lead to numerical inaccuracies. It is better to
171:     convert to the specific system representation first. For example, call
172:     ``sys = sys.to_zpk()`` before accessing/changing the zeros, poles or gain.
173: 
174:     Examples
175:     --------
176:     >>> from scipy import signal
177: 
178:     >>> signal.lti(1, 2, 3, 4)
179:     StateSpaceContinuous(
180:     array([[1]]),
181:     array([[2]]),
182:     array([[3]]),
183:     array([[4]]),
184:     dt: None
185:     )
186: 
187:     >>> signal.lti([1, 2], [3, 4], 5)
188:     ZerosPolesGainContinuous(
189:     array([1, 2]),
190:     array([3, 4]),
191:     5,
192:     dt: None
193:     )
194: 
195:     >>> signal.lti([3, 4], [1, 2])
196:     TransferFunctionContinuous(
197:     array([ 3.,  4.]),
198:     array([ 1.,  2.]),
199:     dt: None
200:     )
201: 
202:     '''
203:     def __new__(cls, *system):
204:         '''Create an instance of the appropriate subclass.'''
205:         if cls is lti:
206:             N = len(system)
207:             if N == 2:
208:                 return TransferFunctionContinuous.__new__(
209:                     TransferFunctionContinuous, *system)
210:             elif N == 3:
211:                 return ZerosPolesGainContinuous.__new__(
212:                     ZerosPolesGainContinuous, *system)
213:             elif N == 4:
214:                 return StateSpaceContinuous.__new__(StateSpaceContinuous,
215:                                                     *system)
216:             else:
217:                 raise ValueError("`system` needs to be an instance of `lti` "
218:                                  "or have 2, 3 or 4 arguments.")
219:         # __new__ was called from a subclass, let it call its own functions
220:         return super(lti, cls).__new__(cls)
221: 
222:     def __init__(self, *system):
223:         '''
224:         Initialize the `lti` baseclass.
225: 
226:         The heavy lifting is done by the subclasses.
227:         '''
228:         super(lti, self).__init__(*system)
229: 
230:     def impulse(self, X0=None, T=None, N=None):
231:         '''
232:         Return the impulse response of a continuous-time system.
233:         See `impulse` for details.
234:         '''
235:         return impulse(self, X0=X0, T=T, N=N)
236: 
237:     def step(self, X0=None, T=None, N=None):
238:         '''
239:         Return the step response of a continuous-time system.
240:         See `step` for details.
241:         '''
242:         return step(self, X0=X0, T=T, N=N)
243: 
244:     def output(self, U, T, X0=None):
245:         '''
246:         Return the response of a continuous-time system to input `U`.
247:         See `lsim` for details.
248:         '''
249:         return lsim(self, U, T, X0=X0)
250: 
251:     def bode(self, w=None, n=100):
252:         '''
253:         Calculate Bode magnitude and phase data of a continuous-time system.
254: 
255:         Returns a 3-tuple containing arrays of frequencies [rad/s], magnitude
256:         [dB] and phase [deg]. See `bode` for details.
257: 
258:         Examples
259:         --------
260:         >>> from scipy import signal
261:         >>> import matplotlib.pyplot as plt
262: 
263:         >>> sys = signal.TransferFunction([1], [1, 1])
264:         >>> w, mag, phase = sys.bode()
265: 
266:         >>> plt.figure()
267:         >>> plt.semilogx(w, mag)    # Bode magnitude plot
268:         >>> plt.figure()
269:         >>> plt.semilogx(w, phase)  # Bode phase plot
270:         >>> plt.show()
271: 
272:         '''
273:         return bode(self, w=w, n=n)
274: 
275:     def freqresp(self, w=None, n=10000):
276:         '''
277:         Calculate the frequency response of a continuous-time system.
278: 
279:         Returns a 2-tuple containing arrays of frequencies [rad/s] and
280:         complex magnitude.
281:         See `freqresp` for details.
282:         '''
283:         return freqresp(self, w=w, n=n)
284: 
285:     def to_discrete(self, dt, method='zoh', alpha=None):
286:         '''Return a discretized version of the current system.
287: 
288:         Parameters: See `cont2discrete` for details.
289: 
290:         Returns
291:         -------
292:         sys: instance of `dlti`
293:         '''
294:         raise NotImplementedError('to_discrete is not implemented for this '
295:                                   'system class.')
296: 
297: 
298: class dlti(LinearTimeInvariant):
299:     '''
300:     Discrete-time linear time invariant system base class.
301: 
302:     Parameters
303:     ----------
304:     *system: arguments
305:         The `dlti` class can be instantiated with either 2, 3 or 4 arguments.
306:         The following gives the number of arguments and the corresponding
307:         discrete-time subclass that is created:
308: 
309:             * 2: `TransferFunction`:  (numerator, denominator)
310:             * 3: `ZerosPolesGain`: (zeros, poles, gain)
311:             * 4: `StateSpace`:  (A, B, C, D)
312: 
313:         Each argument can be an array or a sequence.
314:     dt: float, optional
315:         Sampling time [s] of the discrete-time systems. Defaults to ``True``
316:         (unspecified sampling time). Must be specified as a keyword argument,
317:         for example, ``dt=0.1``.
318: 
319:     See Also
320:     --------
321:     ZerosPolesGain, StateSpace, TransferFunction, lti
322: 
323:     Notes
324:     -----
325:     `dlti` instances do not exist directly. Instead, `dlti` creates an instance
326:     of one of its subclasses: `StateSpace`, `TransferFunction` or
327:     `ZerosPolesGain`.
328: 
329:     Changing the value of properties that are not directly part of the current
330:     system representation (such as the `zeros` of a `StateSpace` system) is
331:     very inefficient and may lead to numerical inaccuracies.  It is better to
332:     convert to the specific system representation first. For example, call
333:     ``sys = sys.to_zpk()`` before accessing/changing the zeros, poles or gain.
334: 
335:     If (numerator, denominator) is passed in for ``*system``, coefficients for
336:     both the numerator and denominator should be specified in descending
337:     exponent order (e.g., ``z^2 + 3z + 5`` would be represented as ``[1, 3,
338:     5]``).
339: 
340:     .. versionadded:: 0.18.0
341: 
342:     Examples
343:     --------
344:     >>> from scipy import signal
345: 
346:     >>> signal.dlti(1, 2, 3, 4)
347:     StateSpaceDiscrete(
348:     array([[1]]),
349:     array([[2]]),
350:     array([[3]]),
351:     array([[4]]),
352:     dt: True
353:     )
354: 
355:     >>> signal.dlti(1, 2, 3, 4, dt=0.1)
356:     StateSpaceDiscrete(
357:     array([[1]]),
358:     array([[2]]),
359:     array([[3]]),
360:     array([[4]]),
361:     dt: 0.1
362:     )
363: 
364:     >>> signal.dlti([1, 2], [3, 4], 5, dt=0.1)
365:     ZerosPolesGainDiscrete(
366:     array([1, 2]),
367:     array([3, 4]),
368:     5,
369:     dt: 0.1
370:     )
371: 
372:     >>> signal.dlti([3, 4], [1, 2], dt=0.1)
373:     TransferFunctionDiscrete(
374:     array([ 3.,  4.]),
375:     array([ 1.,  2.]),
376:     dt: 0.1
377:     )
378: 
379:     '''
380:     def __new__(cls, *system, **kwargs):
381:         '''Create an instance of the appropriate subclass.'''
382:         if cls is dlti:
383:             N = len(system)
384:             if N == 2:
385:                 return TransferFunctionDiscrete.__new__(
386:                     TransferFunctionDiscrete, *system, **kwargs)
387:             elif N == 3:
388:                 return ZerosPolesGainDiscrete.__new__(ZerosPolesGainDiscrete,
389:                                                       *system, **kwargs)
390:             elif N == 4:
391:                 return StateSpaceDiscrete.__new__(StateSpaceDiscrete, *system,
392:                                                   **kwargs)
393:             else:
394:                 raise ValueError("`system` needs to be an instance of `dlti` "
395:                                  "or have 2, 3 or 4 arguments.")
396:         # __new__ was called from a subclass, let it call its own functions
397:         return super(dlti, cls).__new__(cls)
398: 
399:     def __init__(self, *system, **kwargs):
400:         '''
401:         Initialize the `lti` baseclass.
402: 
403:         The heavy lifting is done by the subclasses.
404:         '''
405:         dt = kwargs.pop('dt', True)
406:         super(dlti, self).__init__(*system, **kwargs)
407: 
408:         self.dt = dt
409: 
410:     @property
411:     def dt(self):
412:         '''Return the sampling time of the system.'''
413:         return self._dt
414: 
415:     @dt.setter
416:     def dt(self, dt):
417:         self._dt = dt
418: 
419:     def impulse(self, x0=None, t=None, n=None):
420:         '''
421:         Return the impulse response of the discrete-time `dlti` system.
422:         See `dimpulse` for details.
423:         '''
424:         return dimpulse(self, x0=x0, t=t, n=n)
425: 
426:     def step(self, x0=None, t=None, n=None):
427:         '''
428:         Return the step response of the discrete-time `dlti` system.
429:         See `dstep` for details.
430:         '''
431:         return dstep(self, x0=x0, t=t, n=n)
432: 
433:     def output(self, u, t, x0=None):
434:         '''
435:         Return the response of the discrete-time system to input `u`.
436:         See `dlsim` for details.
437:         '''
438:         return dlsim(self, u, t, x0=x0)
439: 
440:     def bode(self, w=None, n=100):
441:         '''
442:         Calculate Bode magnitude and phase data of a discrete-time system.
443: 
444:         Returns a 3-tuple containing arrays of frequencies [rad/s], magnitude
445:         [dB] and phase [deg]. See `dbode` for details.
446: 
447:         Examples
448:         --------
449:         >>> from scipy import signal
450:         >>> import matplotlib.pyplot as plt
451: 
452:         Transfer function: H(z) = 1 / (z^2 + 2z + 3) with sampling time 0.5s
453: 
454:         >>> sys = signal.TransferFunction([1], [1, 2, 3], dt=0.5)
455: 
456:         Equivalent: signal.dbode(sys)
457: 
458:         >>> w, mag, phase = sys.bode()
459: 
460:         >>> plt.figure()
461:         >>> plt.semilogx(w, mag)    # Bode magnitude plot
462:         >>> plt.figure()
463:         >>> plt.semilogx(w, phase)  # Bode phase plot
464:         >>> plt.show()
465: 
466:         '''
467:         return dbode(self, w=w, n=n)
468: 
469:     def freqresp(self, w=None, n=10000, whole=False):
470:         '''
471:         Calculate the frequency response of a discrete-time system.
472: 
473:         Returns a 2-tuple containing arrays of frequencies [rad/s] and
474:         complex magnitude.
475:         See `dfreqresp` for details.
476: 
477:         '''
478:         return dfreqresp(self, w=w, n=n, whole=whole)
479: 
480: 
481: class TransferFunction(LinearTimeInvariant):
482:     r'''Linear Time Invariant system class in transfer function form.
483: 
484:     Represents the system as the continuous-time transfer function
485:     :math:`H(s)=\sum_{i=0}^N b[N-i] s^i / \sum_{j=0}^M a[M-j] s^j` or the
486:     discrete-time transfer function
487:     :math:`H(s)=\sum_{i=0}^N b[N-i] z^i / \sum_{j=0}^M a[M-j] z^j`, where
488:     :math:`b` are elements of the numerator `num`, :math:`a` are elements of
489:     the denominator `den`, and ``N == len(b) - 1``, ``M == len(a) - 1``.
490:     `TransferFunction` systems inherit additional
491:     functionality from the `lti`, respectively the `dlti` classes, depending on
492:     which system representation is used.
493: 
494:     Parameters
495:     ----------
496:     *system: arguments
497:         The `TransferFunction` class can be instantiated with 1 or 2
498:         arguments. The following gives the number of input arguments and their
499:         interpretation:
500: 
501:             * 1: `lti` or `dlti` system: (`StateSpace`, `TransferFunction` or
502:               `ZerosPolesGain`)
503:             * 2: array_like: (numerator, denominator)
504:     dt: float, optional
505:         Sampling time [s] of the discrete-time systems. Defaults to `None`
506:         (continuous-time). Must be specified as a keyword argument, for
507:         example, ``dt=0.1``.
508: 
509:     See Also
510:     --------
511:     ZerosPolesGain, StateSpace, lti, dlti
512:     tf2ss, tf2zpk, tf2sos
513: 
514:     Notes
515:     -----
516:     Changing the value of properties that are not part of the
517:     `TransferFunction` system representation (such as the `A`, `B`, `C`, `D`
518:     state-space matrices) is very inefficient and may lead to numerical
519:     inaccuracies.  It is better to convert to the specific system
520:     representation first. For example, call ``sys = sys.to_ss()`` before
521:     accessing/changing the A, B, C, D system matrices.
522: 
523:     If (numerator, denominator) is passed in for ``*system``, coefficients
524:     for both the numerator and denominator should be specified in descending
525:     exponent order (e.g. ``s^2 + 3s + 5`` or ``z^2 + 3z + 5`` would be
526:     represented as ``[1, 3, 5]``)
527: 
528:     Examples
529:     --------
530:     Construct the transfer function:
531: 
532:     .. math:: H(s) = \frac{s^2 + 3s + 3}{s^2 + 2s + 1}
533: 
534:     >>> from scipy import signal
535: 
536:     >>> num = [1, 3, 3]
537:     >>> den = [1, 2, 1]
538: 
539:     >>> signal.TransferFunction(num, den)
540:     TransferFunctionContinuous(
541:     array([ 1.,  3.,  3.]),
542:     array([ 1.,  2.,  1.]),
543:     dt: None
544:     )
545: 
546:     Contruct the transfer function with a sampling time of 0.1 seconds:
547: 
548:     .. math:: H(z) = \frac{z^2 + 3z + 3}{z^2 + 2z + 1}
549: 
550:     >>> signal.TransferFunction(num, den, dt=0.1)
551:     TransferFunctionDiscrete(
552:     array([ 1.,  3.,  3.]),
553:     array([ 1.,  2.,  1.]),
554:     dt: 0.1
555:     )
556: 
557:     '''
558:     def __new__(cls, *system, **kwargs):
559:         '''Handle object conversion if input is an instance of lti.'''
560:         if len(system) == 1 and isinstance(system[0], LinearTimeInvariant):
561:             return system[0].to_tf()
562: 
563:         # Choose whether to inherit from `lti` or from `dlti`
564:         if cls is TransferFunction:
565:             if kwargs.get('dt') is None:
566:                 return TransferFunctionContinuous.__new__(
567:                     TransferFunctionContinuous,
568:                     *system,
569:                     **kwargs)
570:             else:
571:                 return TransferFunctionDiscrete.__new__(
572:                     TransferFunctionDiscrete,
573:                     *system,
574:                     **kwargs)
575: 
576:         # No special conversion needed
577:         return super(TransferFunction, cls).__new__(cls)
578: 
579:     def __init__(self, *system, **kwargs):
580:         '''Initialize the state space LTI system.'''
581:         # Conversion of lti instances is handled in __new__
582:         if isinstance(system[0], LinearTimeInvariant):
583:             return
584: 
585:         # Remove system arguments, not needed by parents anymore
586:         super(TransferFunction, self).__init__(**kwargs)
587: 
588:         self._num = None
589:         self._den = None
590: 
591:         self.num, self.den = normalize(*system)
592: 
593:     def __repr__(self):
594:         '''Return representation of the system's transfer function'''
595:         return '{0}(\n{1},\n{2},\ndt: {3}\n)'.format(
596:             self.__class__.__name__,
597:             repr(self.num),
598:             repr(self.den),
599:             repr(self.dt),
600:             )
601: 
602:     @property
603:     def num(self):
604:         '''Numerator of the `TransferFunction` system.'''
605:         return self._num
606: 
607:     @num.setter
608:     def num(self, num):
609:         self._num = atleast_1d(num)
610: 
611:         # Update dimensions
612:         if len(self.num.shape) > 1:
613:             self.outputs, self.inputs = self.num.shape
614:         else:
615:             self.outputs = 1
616:             self.inputs = 1
617: 
618:     @property
619:     def den(self):
620:         '''Denominator of the `TransferFunction` system.'''
621:         return self._den
622: 
623:     @den.setter
624:     def den(self, den):
625:         self._den = atleast_1d(den)
626: 
627:     def _copy(self, system):
628:         '''
629:         Copy the parameters of another `TransferFunction` object
630: 
631:         Parameters
632:         ----------
633:         system : `TransferFunction`
634:             The `StateSpace` system that is to be copied
635: 
636:         '''
637:         self.num = system.num
638:         self.den = system.den
639: 
640:     def to_tf(self):
641:         '''
642:         Return a copy of the current `TransferFunction` system.
643: 
644:         Returns
645:         -------
646:         sys : instance of `TransferFunction`
647:             The current system (copy)
648: 
649:         '''
650:         return copy.deepcopy(self)
651: 
652:     def to_zpk(self):
653:         '''
654:         Convert system representation to `ZerosPolesGain`.
655: 
656:         Returns
657:         -------
658:         sys : instance of `ZerosPolesGain`
659:             Zeros, poles, gain representation of the current system
660: 
661:         '''
662:         return ZerosPolesGain(*tf2zpk(self.num, self.den),
663:                               **self._dt_dict)
664: 
665:     def to_ss(self):
666:         '''
667:         Convert system representation to `StateSpace`.
668: 
669:         Returns
670:         -------
671:         sys : instance of `StateSpace`
672:             State space model of the current system
673: 
674:         '''
675:         return StateSpace(*tf2ss(self.num, self.den),
676:                           **self._dt_dict)
677: 
678:     @staticmethod
679:     def _z_to_zinv(num, den):
680:         '''Change a transfer function from the variable `z` to `z**-1`.
681: 
682:         Parameters
683:         ----------
684:         num, den: 1d array_like
685:             Sequences representing the coefficients of the numerator and
686:             denominator polynomials, in order of descending degree of 'z'.
687:             That is, ``5z**2 + 3z + 2`` is presented as ``[5, 3, 2]``.
688: 
689:         Returns
690:         -------
691:         num, den: 1d array_like
692:             Sequences representing the coefficients of the numerator and
693:             denominator polynomials, in order of ascending degree of 'z**-1'.
694:             That is, ``5 + 3 z**-1 + 2 z**-2`` is presented as ``[5, 3, 2]``.
695:         '''
696:         diff = len(num) - len(den)
697:         if diff > 0:
698:             den = np.hstack((np.zeros(diff), den))
699:         elif diff < 0:
700:             num = np.hstack((np.zeros(-diff), num))
701:         return num, den
702: 
703:     @staticmethod
704:     def _zinv_to_z(num, den):
705:         '''Change a transfer function from the variable `z` to `z**-1`.
706: 
707:         Parameters
708:         ----------
709:         num, den: 1d array_like
710:             Sequences representing the coefficients of the numerator and
711:             denominator polynomials, in order of ascending degree of 'z**-1'.
712:             That is, ``5 + 3 z**-1 + 2 z**-2`` is presented as ``[5, 3, 2]``.
713: 
714:         Returns
715:         -------
716:         num, den: 1d array_like
717:             Sequences representing the coefficients of the numerator and
718:             denominator polynomials, in order of descending degree of 'z'.
719:             That is, ``5z**2 + 3z + 2`` is presented as ``[5, 3, 2]``.
720:         '''
721:         diff = len(num) - len(den)
722:         if diff > 0:
723:             den = np.hstack((den, np.zeros(diff)))
724:         elif diff < 0:
725:             num = np.hstack((num, np.zeros(-diff)))
726:         return num, den
727: 
728: 
729: class TransferFunctionContinuous(TransferFunction, lti):
730:     r'''
731:     Continuous-time Linear Time Invariant system in transfer function form.
732: 
733:     Represents the system as the transfer function
734:     :math:`H(s)=\sum_{i=0}^N b[N-i] s^i / \sum_{j=0}^M a[M-j] s^j`, where
735:     :math:`b` are elements of the numerator `num`, :math:`a` are elements of
736:     the denominator `den`, and ``N == len(b) - 1``, ``M == len(a) - 1``.
737:     Continuous-time `TransferFunction` systems inherit additional
738:     functionality from the `lti` class.
739: 
740:     Parameters
741:     ----------
742:     *system: arguments
743:         The `TransferFunction` class can be instantiated with 1 or 2
744:         arguments. The following gives the number of input arguments and their
745:         interpretation:
746: 
747:             * 1: `lti` system: (`StateSpace`, `TransferFunction` or
748:               `ZerosPolesGain`)
749:             * 2: array_like: (numerator, denominator)
750: 
751:     See Also
752:     --------
753:     ZerosPolesGain, StateSpace, lti
754:     tf2ss, tf2zpk, tf2sos
755: 
756:     Notes
757:     -----
758:     Changing the value of properties that are not part of the
759:     `TransferFunction` system representation (such as the `A`, `B`, `C`, `D`
760:     state-space matrices) is very inefficient and may lead to numerical
761:     inaccuracies.  It is better to convert to the specific system
762:     representation first. For example, call ``sys = sys.to_ss()`` before
763:     accessing/changing the A, B, C, D system matrices.
764: 
765:     If (numerator, denominator) is passed in for ``*system``, coefficients
766:     for both the numerator and denominator should be specified in descending
767:     exponent order (e.g. ``s^2 + 3s + 5`` would be represented as
768:     ``[1, 3, 5]``)
769: 
770:     Examples
771:     --------
772:     Construct the transfer function:
773: 
774:     .. math:: H(s) = \frac{s^2 + 3s + 3}{s^2 + 2s + 1}
775: 
776:     >>> from scipy import signal
777: 
778:     >>> num = [1, 3, 3]
779:     >>> den = [1, 2, 1]
780: 
781:     >>> signal.TransferFunction(num, den)
782:     TransferFunctionContinuous(
783:     array([ 1.,  3.,  3.]),
784:     array([ 1.,  2.,  1.]),
785:     dt: None
786:     )
787: 
788:     '''
789:     def to_discrete(self, dt, method='zoh', alpha=None):
790:         '''
791:         Returns the discretized `TransferFunction` system.
792: 
793:         Parameters: See `cont2discrete` for details.
794: 
795:         Returns
796:         -------
797:         sys: instance of `dlti` and `StateSpace`
798:         '''
799:         return TransferFunction(*cont2discrete((self.num, self.den),
800:                                                dt,
801:                                                method=method,
802:                                                alpha=alpha)[:-1],
803:                                 dt=dt)
804: 
805: 
806: class TransferFunctionDiscrete(TransferFunction, dlti):
807:     r'''
808:     Discrete-time Linear Time Invariant system in transfer function form.
809: 
810:     Represents the system as the transfer function
811:     :math:`H(z)=\sum_{i=0}^N b[N-i] z^i / \sum_{j=0}^M a[M-j] z^j`, where
812:     :math:`b` are elements of the numerator `num`, :math:`a` are elements of
813:     the denominator `den`, and ``N == len(b) - 1``, ``M == len(a) - 1``.
814:     Discrete-time `TransferFunction` systems inherit additional functionality
815:     from the `dlti` class.
816: 
817:     Parameters
818:     ----------
819:     *system: arguments
820:         The `TransferFunction` class can be instantiated with 1 or 2
821:         arguments. The following gives the number of input arguments and their
822:         interpretation:
823: 
824:             * 1: `dlti` system: (`StateSpace`, `TransferFunction` or
825:               `ZerosPolesGain`)
826:             * 2: array_like: (numerator, denominator)
827:     dt: float, optional
828:         Sampling time [s] of the discrete-time systems. Defaults to `True`
829:         (unspecified sampling time). Must be specified as a keyword argument,
830:         for example, ``dt=0.1``.
831: 
832:     See Also
833:     --------
834:     ZerosPolesGain, StateSpace, dlti
835:     tf2ss, tf2zpk, tf2sos
836: 
837:     Notes
838:     -----
839:     Changing the value of properties that are not part of the
840:     `TransferFunction` system representation (such as the `A`, `B`, `C`, `D`
841:     state-space matrices) is very inefficient and may lead to numerical
842:     inaccuracies.
843: 
844:     If (numerator, denominator) is passed in for ``*system``, coefficients
845:     for both the numerator and denominator should be specified in descending
846:     exponent order (e.g., ``z^2 + 3z + 5`` would be represented as
847:     ``[1, 3, 5]``).
848: 
849:     Examples
850:     --------
851:     Construct the transfer function with a sampling time of 0.5 seconds:
852: 
853:     .. math:: H(z) = \frac{z^2 + 3z + 3}{z^2 + 2z + 1}
854: 
855:     >>> from scipy import signal
856: 
857:     >>> num = [1, 3, 3]
858:     >>> den = [1, 2, 1]
859: 
860:     >>> signal.TransferFunction(num, den, 0.5)
861:     TransferFunctionDiscrete(
862:     array([ 1.,  3.,  3.]),
863:     array([ 1.,  2.,  1.]),
864:     dt: 0.5
865:     )
866: 
867:     '''
868:     pass
869: 
870: 
871: class ZerosPolesGain(LinearTimeInvariant):
872:     r'''
873:     Linear Time Invariant system class in zeros, poles, gain form.
874: 
875:     Represents the system as the continuous- or discrete-time transfer function
876:     :math:`H(s)=k \prod_i (s - z[i]) / \prod_j (s - p[j])`, where :math:`k` is
877:     the `gain`, :math:`z` are the `zeros` and :math:`p` are the `poles`.
878:     `ZerosPolesGain` systems inherit additional functionality from the `lti`,
879:     respectively the `dlti` classes, depending on which system representation
880:     is used.
881: 
882:     Parameters
883:     ----------
884:     *system : arguments
885:         The `ZerosPolesGain` class can be instantiated with 1 or 3
886:         arguments. The following gives the number of input arguments and their
887:         interpretation:
888: 
889:             * 1: `lti` or `dlti` system: (`StateSpace`, `TransferFunction` or
890:               `ZerosPolesGain`)
891:             * 3: array_like: (zeros, poles, gain)
892:     dt: float, optional
893:         Sampling time [s] of the discrete-time systems. Defaults to `None`
894:         (continuous-time). Must be specified as a keyword argument, for
895:         example, ``dt=0.1``.
896: 
897: 
898:     See Also
899:     --------
900:     TransferFunction, StateSpace, lti, dlti
901:     zpk2ss, zpk2tf, zpk2sos
902: 
903:     Notes
904:     -----
905:     Changing the value of properties that are not part of the
906:     `ZerosPolesGain` system representation (such as the `A`, `B`, `C`, `D`
907:     state-space matrices) is very inefficient and may lead to numerical
908:     inaccuracies.  It is better to convert to the specific system
909:     representation first. For example, call ``sys = sys.to_ss()`` before
910:     accessing/changing the A, B, C, D system matrices.
911: 
912:     Examples
913:     --------
914:     >>> from scipy import signal
915: 
916:     Transfer function: H(s) = 5(s - 1)(s - 2) / (s - 3)(s - 4)
917: 
918:     >>> signal.ZerosPolesGain([1, 2], [3, 4], 5)
919:     ZerosPolesGainContinuous(
920:     array([1, 2]),
921:     array([3, 4]),
922:     5,
923:     dt: None
924:     )
925: 
926:     Transfer function: H(z) = 5(z - 1)(z - 2) / (z - 3)(z - 4)
927: 
928:     >>> signal.ZerosPolesGain([1, 2], [3, 4], 5, dt=0.1)
929:     ZerosPolesGainDiscrete(
930:     array([1, 2]),
931:     array([3, 4]),
932:     5,
933:     dt: 0.1
934:     )
935: 
936:     '''
937:     def __new__(cls, *system, **kwargs):
938:         '''Handle object conversion if input is an instance of `lti`'''
939:         if len(system) == 1 and isinstance(system[0], LinearTimeInvariant):
940:             return system[0].to_zpk()
941: 
942:         # Choose whether to inherit from `lti` or from `dlti`
943:         if cls is ZerosPolesGain:
944:             if kwargs.get('dt') is None:
945:                 return ZerosPolesGainContinuous.__new__(
946:                     ZerosPolesGainContinuous,
947:                     *system,
948:                     **kwargs)
949:             else:
950:                 return ZerosPolesGainDiscrete.__new__(
951:                     ZerosPolesGainDiscrete,
952:                     *system,
953:                     **kwargs
954:                     )
955: 
956:         # No special conversion needed
957:         return super(ZerosPolesGain, cls).__new__(cls)
958: 
959:     def __init__(self, *system, **kwargs):
960:         '''Initialize the zeros, poles, gain system.'''
961:         # Conversion of lti instances is handled in __new__
962:         if isinstance(system[0], LinearTimeInvariant):
963:             return
964: 
965:         super(ZerosPolesGain, self).__init__(**kwargs)
966: 
967:         self._zeros = None
968:         self._poles = None
969:         self._gain = None
970: 
971:         self.zeros, self.poles, self.gain = system
972: 
973:     def __repr__(self):
974:         '''Return representation of the `ZerosPolesGain` system.'''
975:         return '{0}(\n{1},\n{2},\n{3},\ndt: {4}\n)'.format(
976:             self.__class__.__name__,
977:             repr(self.zeros),
978:             repr(self.poles),
979:             repr(self.gain),
980:             repr(self.dt),
981:             )
982: 
983:     @property
984:     def zeros(self):
985:         '''Zeros of the `ZerosPolesGain` system.'''
986:         return self._zeros
987: 
988:     @zeros.setter
989:     def zeros(self, zeros):
990:         self._zeros = atleast_1d(zeros)
991: 
992:         # Update dimensions
993:         if len(self.zeros.shape) > 1:
994:             self.outputs, self.inputs = self.zeros.shape
995:         else:
996:             self.outputs = 1
997:             self.inputs = 1
998: 
999:     @property
1000:     def poles(self):
1001:         '''Poles of the `ZerosPolesGain` system.'''
1002:         return self._poles
1003: 
1004:     @poles.setter
1005:     def poles(self, poles):
1006:         self._poles = atleast_1d(poles)
1007: 
1008:     @property
1009:     def gain(self):
1010:         '''Gain of the `ZerosPolesGain` system.'''
1011:         return self._gain
1012: 
1013:     @gain.setter
1014:     def gain(self, gain):
1015:         self._gain = gain
1016: 
1017:     def _copy(self, system):
1018:         '''
1019:         Copy the parameters of another `ZerosPolesGain` system.
1020: 
1021:         Parameters
1022:         ----------
1023:         system : instance of `ZerosPolesGain`
1024:             The zeros, poles gain system that is to be copied
1025: 
1026:         '''
1027:         self.poles = system.poles
1028:         self.zeros = system.zeros
1029:         self.gain = system.gain
1030: 
1031:     def to_tf(self):
1032:         '''
1033:         Convert system representation to `TransferFunction`.
1034: 
1035:         Returns
1036:         -------
1037:         sys : instance of `TransferFunction`
1038:             Transfer function of the current system
1039: 
1040:         '''
1041:         return TransferFunction(*zpk2tf(self.zeros, self.poles, self.gain),
1042:                                 **self._dt_dict)
1043: 
1044:     def to_zpk(self):
1045:         '''
1046:         Return a copy of the current 'ZerosPolesGain' system.
1047: 
1048:         Returns
1049:         -------
1050:         sys : instance of `ZerosPolesGain`
1051:             The current system (copy)
1052: 
1053:         '''
1054:         return copy.deepcopy(self)
1055: 
1056:     def to_ss(self):
1057:         '''
1058:         Convert system representation to `StateSpace`.
1059: 
1060:         Returns
1061:         -------
1062:         sys : instance of `StateSpace`
1063:             State space model of the current system
1064: 
1065:         '''
1066:         return StateSpace(*zpk2ss(self.zeros, self.poles, self.gain),
1067:                           **self._dt_dict)
1068: 
1069: 
1070: class ZerosPolesGainContinuous(ZerosPolesGain, lti):
1071:     r'''
1072:     Continuous-time Linear Time Invariant system in zeros, poles, gain form.
1073: 
1074:     Represents the system as the continuous time transfer function
1075:     :math:`H(s)=k \prod_i (s - z[i]) / \prod_j (s - p[j])`, where :math:`k` is
1076:     the `gain`, :math:`z` are the `zeros` and :math:`p` are the `poles`.
1077:     Continuous-time `ZerosPolesGain` systems inherit additional functionality
1078:     from the `lti` class.
1079: 
1080:     Parameters
1081:     ----------
1082:     *system : arguments
1083:         The `ZerosPolesGain` class can be instantiated with 1 or 3
1084:         arguments. The following gives the number of input arguments and their
1085:         interpretation:
1086: 
1087:             * 1: `lti` system: (`StateSpace`, `TransferFunction` or
1088:               `ZerosPolesGain`)
1089:             * 3: array_like: (zeros, poles, gain)
1090: 
1091:     See Also
1092:     --------
1093:     TransferFunction, StateSpace, lti
1094:     zpk2ss, zpk2tf, zpk2sos
1095: 
1096:     Notes
1097:     -----
1098:     Changing the value of properties that are not part of the
1099:     `ZerosPolesGain` system representation (such as the `A`, `B`, `C`, `D`
1100:     state-space matrices) is very inefficient and may lead to numerical
1101:     inaccuracies.  It is better to convert to the specific system
1102:     representation first. For example, call ``sys = sys.to_ss()`` before
1103:     accessing/changing the A, B, C, D system matrices.
1104: 
1105:     Examples
1106:     --------
1107:     >>> from scipy import signal
1108: 
1109:     Transfer function: H(s) = 5(s - 1)(s - 2) / (s - 3)(s - 4)
1110: 
1111:     >>> signal.ZerosPolesGain([1, 2], [3, 4], 5)
1112:     ZerosPolesGainContinuous(
1113:     array([1, 2]),
1114:     array([3, 4]),
1115:     5,
1116:     dt: None
1117:     )
1118: 
1119:     '''
1120:     def to_discrete(self, dt, method='zoh', alpha=None):
1121:         '''
1122:         Returns the discretized `ZerosPolesGain` system.
1123: 
1124:         Parameters: See `cont2discrete` for details.
1125: 
1126:         Returns
1127:         -------
1128:         sys: instance of `dlti` and `ZerosPolesGain`
1129:         '''
1130:         return ZerosPolesGain(
1131:             *cont2discrete((self.zeros, self.poles, self.gain),
1132:                            dt,
1133:                            method=method,
1134:                            alpha=alpha)[:-1],
1135:             dt=dt)
1136: 
1137: 
1138: class ZerosPolesGainDiscrete(ZerosPolesGain, dlti):
1139:     r'''
1140:     Discrete-time Linear Time Invariant system in zeros, poles, gain form.
1141: 
1142:     Represents the system as the discrete-time transfer function
1143:     :math:`H(s)=k \prod_i (s - z[i]) / \prod_j (s - p[j])`, where :math:`k` is
1144:     the `gain`, :math:`z` are the `zeros` and :math:`p` are the `poles`.
1145:     Discrete-time `ZerosPolesGain` systems inherit additional functionality
1146:     from the `dlti` class.
1147: 
1148:     Parameters
1149:     ----------
1150:     *system : arguments
1151:         The `ZerosPolesGain` class can be instantiated with 1 or 3
1152:         arguments. The following gives the number of input arguments and their
1153:         interpretation:
1154: 
1155:             * 1: `dlti` system: (`StateSpace`, `TransferFunction` or
1156:               `ZerosPolesGain`)
1157:             * 3: array_like: (zeros, poles, gain)
1158:     dt: float, optional
1159:         Sampling time [s] of the discrete-time systems. Defaults to `True`
1160:         (unspecified sampling time). Must be specified as a keyword argument,
1161:         for example, ``dt=0.1``.
1162: 
1163:     See Also
1164:     --------
1165:     TransferFunction, StateSpace, dlti
1166:     zpk2ss, zpk2tf, zpk2sos
1167: 
1168:     Notes
1169:     -----
1170:     Changing the value of properties that are not part of the
1171:     `ZerosPolesGain` system representation (such as the `A`, `B`, `C`, `D`
1172:     state-space matrices) is very inefficient and may lead to numerical
1173:     inaccuracies.  It is better to convert to the specific system
1174:     representation first. For example, call ``sys = sys.to_ss()`` before
1175:     accessing/changing the A, B, C, D system matrices.
1176: 
1177:     Examples
1178:     --------
1179:     >>> from scipy import signal
1180: 
1181:     Transfer function: H(s) = 5(s - 1)(s - 2) / (s - 3)(s - 4)
1182: 
1183:     >>> signal.ZerosPolesGain([1, 2], [3, 4], 5)
1184:     ZerosPolesGainContinuous(
1185:     array([1, 2]),
1186:     array([3, 4]),
1187:     5,
1188:     dt: None
1189:     )
1190: 
1191:     Transfer function: H(z) = 5(z - 1)(z - 2) / (z - 3)(z - 4)
1192: 
1193:     >>> signal.ZerosPolesGain([1, 2], [3, 4], 5, dt=0.1)
1194:     ZerosPolesGainDiscrete(
1195:     array([1, 2]),
1196:     array([3, 4]),
1197:     5,
1198:     dt: 0.1
1199:     )
1200: 
1201:     '''
1202:     pass
1203: 
1204: 
1205: def _atleast_2d_or_none(arg):
1206:     if arg is not None:
1207:         return atleast_2d(arg)
1208: 
1209: 
1210: class StateSpace(LinearTimeInvariant):
1211:     r'''
1212:     Linear Time Invariant system in state-space form.
1213: 
1214:     Represents the system as the continuous-time, first order differential
1215:     equation :math:`\dot{x} = A x + B u` or the discrete-time difference
1216:     equation :math:`x[k+1] = A x[k] + B u[k]`. `StateSpace` systems
1217:     inherit additional functionality from the `lti`, respectively the `dlti`
1218:     classes, depending on which system representation is used.
1219: 
1220:     Parameters
1221:     ----------
1222:     *system: arguments
1223:         The `StateSpace` class can be instantiated with 1 or 3 arguments.
1224:         The following gives the number of input arguments and their
1225:         interpretation:
1226: 
1227:             * 1: `lti` or `dlti` system: (`StateSpace`, `TransferFunction` or
1228:               `ZerosPolesGain`)
1229:             * 4: array_like: (A, B, C, D)
1230:     dt: float, optional
1231:         Sampling time [s] of the discrete-time systems. Defaults to `None`
1232:         (continuous-time). Must be specified as a keyword argument, for
1233:         example, ``dt=0.1``.
1234: 
1235:     See Also
1236:     --------
1237:     TransferFunction, ZerosPolesGain, lti, dlti
1238:     ss2zpk, ss2tf, zpk2sos
1239: 
1240:     Notes
1241:     -----
1242:     Changing the value of properties that are not part of the
1243:     `StateSpace` system representation (such as `zeros` or `poles`) is very
1244:     inefficient and may lead to numerical inaccuracies.  It is better to
1245:     convert to the specific system representation first. For example, call
1246:     ``sys = sys.to_zpk()`` before accessing/changing the zeros, poles or gain.
1247: 
1248:     Examples
1249:     --------
1250:     >>> from scipy import signal
1251: 
1252:     >>> a = np.array([[0, 1], [0, 0]])
1253:     >>> b = np.array([[0], [1]])
1254:     >>> c = np.array([[1, 0]])
1255:     >>> d = np.array([[0]])
1256: 
1257:     >>> sys = signal.StateSpace(a, b, c, d)
1258:     >>> print(sys)
1259:     StateSpaceContinuous(
1260:     array([[0, 1],
1261:            [0, 0]]),
1262:     array([[0],
1263:            [1]]),
1264:     array([[1, 0]]),
1265:     array([[0]]),
1266:     dt: None
1267:     )
1268: 
1269:     >>> sys.to_discrete(0.1)
1270:     StateSpaceDiscrete(
1271:     array([[ 1. ,  0.1],
1272:            [ 0. ,  1. ]]),
1273:     array([[ 0.005],
1274:            [ 0.1  ]]),
1275:     array([[1, 0]]),
1276:     array([[0]]),
1277:     dt: 0.1
1278:     )
1279: 
1280:     >>> a = np.array([[1, 0.1], [0, 1]])
1281:     >>> b = np.array([[0.005], [0.1]])
1282: 
1283:     >>> signal.StateSpace(a, b, c, d, dt=0.1)
1284:     StateSpaceDiscrete(
1285:     array([[ 1. ,  0.1],
1286:            [ 0. ,  1. ]]),
1287:     array([[ 0.005],
1288:            [ 0.1  ]]),
1289:     array([[1, 0]]),
1290:     array([[0]]),
1291:     dt: 0.1
1292:     )
1293: 
1294:     '''
1295:     def __new__(cls, *system, **kwargs):
1296:         '''Create new StateSpace object and settle inheritance.'''
1297:         # Handle object conversion if input is an instance of `lti`
1298:         if len(system) == 1 and isinstance(system[0], LinearTimeInvariant):
1299:             return system[0].to_ss()
1300: 
1301:         # Choose whether to inherit from `lti` or from `dlti`
1302:         if cls is StateSpace:
1303:             if kwargs.get('dt') is None:
1304:                 return StateSpaceContinuous.__new__(StateSpaceContinuous,
1305:                                                     *system, **kwargs)
1306:             else:
1307:                 return StateSpaceDiscrete.__new__(StateSpaceDiscrete,
1308:                                                   *system, **kwargs)
1309: 
1310:         # No special conversion needed
1311:         return super(StateSpace, cls).__new__(cls)
1312: 
1313:     def __init__(self, *system, **kwargs):
1314:         '''Initialize the state space lti/dlti system.'''
1315:         # Conversion of lti instances is handled in __new__
1316:         if isinstance(system[0], LinearTimeInvariant):
1317:             return
1318: 
1319:         # Remove system arguments, not needed by parents anymore
1320:         super(StateSpace, self).__init__(**kwargs)
1321: 
1322:         self._A = None
1323:         self._B = None
1324:         self._C = None
1325:         self._D = None
1326: 
1327:         self.A, self.B, self.C, self.D = abcd_normalize(*system)
1328: 
1329:     def __repr__(self):
1330:         '''Return representation of the `StateSpace` system.'''
1331:         return '{0}(\n{1},\n{2},\n{3},\n{4},\ndt: {5}\n)'.format(
1332:             self.__class__.__name__,
1333:             repr(self.A),
1334:             repr(self.B),
1335:             repr(self.C),
1336:             repr(self.D),
1337:             repr(self.dt),
1338:             )
1339: 
1340:     @property
1341:     def A(self):
1342:         '''State matrix of the `StateSpace` system.'''
1343:         return self._A
1344: 
1345:     @A.setter
1346:     def A(self, A):
1347:         self._A = _atleast_2d_or_none(A)
1348: 
1349:     @property
1350:     def B(self):
1351:         '''Input matrix of the `StateSpace` system.'''
1352:         return self._B
1353: 
1354:     @B.setter
1355:     def B(self, B):
1356:         self._B = _atleast_2d_or_none(B)
1357:         self.inputs = self.B.shape[-1]
1358: 
1359:     @property
1360:     def C(self):
1361:         '''Output matrix of the `StateSpace` system.'''
1362:         return self._C
1363: 
1364:     @C.setter
1365:     def C(self, C):
1366:         self._C = _atleast_2d_or_none(C)
1367:         self.outputs = self.C.shape[0]
1368: 
1369:     @property
1370:     def D(self):
1371:         '''Feedthrough matrix of the `StateSpace` system.'''
1372:         return self._D
1373: 
1374:     @D.setter
1375:     def D(self, D):
1376:         self._D = _atleast_2d_or_none(D)
1377: 
1378:     def _copy(self, system):
1379:         '''
1380:         Copy the parameters of another `StateSpace` system.
1381: 
1382:         Parameters
1383:         ----------
1384:         system : instance of `StateSpace`
1385:             The state-space system that is to be copied
1386: 
1387:         '''
1388:         self.A = system.A
1389:         self.B = system.B
1390:         self.C = system.C
1391:         self.D = system.D
1392: 
1393:     def to_tf(self, **kwargs):
1394:         '''
1395:         Convert system representation to `TransferFunction`.
1396: 
1397:         Parameters
1398:         ----------
1399:         kwargs : dict, optional
1400:             Additional keywords passed to `ss2zpk`
1401: 
1402:         Returns
1403:         -------
1404:         sys : instance of `TransferFunction`
1405:             Transfer function of the current system
1406: 
1407:         '''
1408:         return TransferFunction(*ss2tf(self._A, self._B, self._C, self._D,
1409:                                        **kwargs), **self._dt_dict)
1410: 
1411:     def to_zpk(self, **kwargs):
1412:         '''
1413:         Convert system representation to `ZerosPolesGain`.
1414: 
1415:         Parameters
1416:         ----------
1417:         kwargs : dict, optional
1418:             Additional keywords passed to `ss2zpk`
1419: 
1420:         Returns
1421:         -------
1422:         sys : instance of `ZerosPolesGain`
1423:             Zeros, poles, gain representation of the current system
1424: 
1425:         '''
1426:         return ZerosPolesGain(*ss2zpk(self._A, self._B, self._C, self._D,
1427:                                       **kwargs), **self._dt_dict)
1428: 
1429:     def to_ss(self):
1430:         '''
1431:         Return a copy of the current `StateSpace` system.
1432: 
1433:         Returns
1434:         -------
1435:         sys : instance of `StateSpace`
1436:             The current system (copy)
1437: 
1438:         '''
1439:         return copy.deepcopy(self)
1440: 
1441: 
1442: class StateSpaceContinuous(StateSpace, lti):
1443:     r'''
1444:     Continuous-time Linear Time Invariant system in state-space form.
1445: 
1446:     Represents the system as the continuous-time, first order differential
1447:     equation :math:`\dot{x} = A x + B u`.
1448:     Continuous-time `StateSpace` systems inherit additional functionality
1449:     from the `lti` class.
1450: 
1451:     Parameters
1452:     ----------
1453:     *system: arguments
1454:         The `StateSpace` class can be instantiated with 1 or 3 arguments.
1455:         The following gives the number of input arguments and their
1456:         interpretation:
1457: 
1458:             * 1: `lti` system: (`StateSpace`, `TransferFunction` or
1459:               `ZerosPolesGain`)
1460:             * 4: array_like: (A, B, C, D)
1461: 
1462:     See Also
1463:     --------
1464:     TransferFunction, ZerosPolesGain, lti
1465:     ss2zpk, ss2tf, zpk2sos
1466: 
1467:     Notes
1468:     -----
1469:     Changing the value of properties that are not part of the
1470:     `StateSpace` system representation (such as `zeros` or `poles`) is very
1471:     inefficient and may lead to numerical inaccuracies.  It is better to
1472:     convert to the specific system representation first. For example, call
1473:     ``sys = sys.to_zpk()`` before accessing/changing the zeros, poles or gain.
1474: 
1475:     Examples
1476:     --------
1477:     >>> from scipy import signal
1478: 
1479:     >>> a = np.array([[0, 1], [0, 0]])
1480:     >>> b = np.array([[0], [1]])
1481:     >>> c = np.array([[1, 0]])
1482:     >>> d = np.array([[0]])
1483: 
1484:     >>> sys = signal.StateSpace(a, b, c, d)
1485:     >>> print(sys)
1486:     StateSpaceContinuous(
1487:     array([[0, 1],
1488:            [0, 0]]),
1489:     array([[0],
1490:            [1]]),
1491:     array([[1, 0]]),
1492:     array([[0]]),
1493:     dt: None
1494:     )
1495: 
1496:     '''
1497:     def to_discrete(self, dt, method='zoh', alpha=None):
1498:         '''
1499:         Returns the discretized `StateSpace` system.
1500: 
1501:         Parameters: See `cont2discrete` for details.
1502: 
1503:         Returns
1504:         -------
1505:         sys: instance of `dlti` and `StateSpace`
1506:         '''
1507:         return StateSpace(*cont2discrete((self.A, self.B, self.C, self.D),
1508:                                          dt,
1509:                                          method=method,
1510:                                          alpha=alpha)[:-1],
1511:                           dt=dt)
1512: 
1513: 
1514: class StateSpaceDiscrete(StateSpace, dlti):
1515:     r'''
1516:     Discrete-time Linear Time Invariant system in state-space form.
1517: 
1518:     Represents the system as the discrete-time difference equation
1519:     :math:`x[k+1] = A x[k] + B u[k]`.
1520:     `StateSpace` systems inherit additional functionality from the `dlti`
1521:     class.
1522: 
1523:     Parameters
1524:     ----------
1525:     *system: arguments
1526:         The `StateSpace` class can be instantiated with 1 or 3 arguments.
1527:         The following gives the number of input arguments and their
1528:         interpretation:
1529: 
1530:             * 1: `dlti` system: (`StateSpace`, `TransferFunction` or
1531:               `ZerosPolesGain`)
1532:             * 4: array_like: (A, B, C, D)
1533:     dt: float, optional
1534:         Sampling time [s] of the discrete-time systems. Defaults to `True`
1535:         (unspecified sampling time). Must be specified as a keyword argument,
1536:         for example, ``dt=0.1``.
1537: 
1538:     See Also
1539:     --------
1540:     TransferFunction, ZerosPolesGain, dlti
1541:     ss2zpk, ss2tf, zpk2sos
1542: 
1543:     Notes
1544:     -----
1545:     Changing the value of properties that are not part of the
1546:     `StateSpace` system representation (such as `zeros` or `poles`) is very
1547:     inefficient and may lead to numerical inaccuracies.  It is better to
1548:     convert to the specific system representation first. For example, call
1549:     ``sys = sys.to_zpk()`` before accessing/changing the zeros, poles or gain.
1550: 
1551:     Examples
1552:     --------
1553:     >>> from scipy import signal
1554: 
1555:     >>> a = np.array([[1, 0.1], [0, 1]])
1556:     >>> b = np.array([[0.005], [0.1]])
1557:     >>> c = np.array([[1, 0]])
1558:     >>> d = np.array([[0]])
1559: 
1560:     >>> signal.StateSpace(a, b, c, d, dt=0.1)
1561:     StateSpaceDiscrete(
1562:     array([[ 1. ,  0.1],
1563:            [ 0. ,  1. ]]),
1564:     array([[ 0.005],
1565:            [ 0.1  ]]),
1566:     array([[1, 0]]),
1567:     array([[0]]),
1568:     dt: 0.1
1569:     )
1570: 
1571:     '''
1572:     pass
1573: 
1574: 
1575: def lsim2(system, U=None, T=None, X0=None, **kwargs):
1576:     '''
1577:     Simulate output of a continuous-time linear system, by using
1578:     the ODE solver `scipy.integrate.odeint`.
1579: 
1580:     Parameters
1581:     ----------
1582:     system : an instance of the `lti` class or a tuple describing the system.
1583:         The following gives the number of elements in the tuple and
1584:         the interpretation:
1585: 
1586:         * 1: (instance of `lti`)
1587:         * 2: (num, den)
1588:         * 3: (zeros, poles, gain)
1589:         * 4: (A, B, C, D)
1590: 
1591:     U : array_like (1D or 2D), optional
1592:         An input array describing the input at each time T.  Linear
1593:         interpolation is used between given times.  If there are
1594:         multiple inputs, then each column of the rank-2 array
1595:         represents an input.  If U is not given, the input is assumed
1596:         to be zero.
1597:     T : array_like (1D or 2D), optional
1598:         The time steps at which the input is defined and at which the
1599:         output is desired.  The default is 101 evenly spaced points on
1600:         the interval [0,10.0].
1601:     X0 : array_like (1D), optional
1602:         The initial condition of the state vector.  If `X0` is not
1603:         given, the initial conditions are assumed to be 0.
1604:     kwargs : dict
1605:         Additional keyword arguments are passed on to the function
1606:         `odeint`.  See the notes below for more details.
1607: 
1608:     Returns
1609:     -------
1610:     T : 1D ndarray
1611:         The time values for the output.
1612:     yout : ndarray
1613:         The response of the system.
1614:     xout : ndarray
1615:         The time-evolution of the state-vector.
1616: 
1617:     Notes
1618:     -----
1619:     This function uses `scipy.integrate.odeint` to solve the
1620:     system's differential equations.  Additional keyword arguments
1621:     given to `lsim2` are passed on to `odeint`.  See the documentation
1622:     for `scipy.integrate.odeint` for the full list of arguments.
1623: 
1624:     If (num, den) is passed in for ``system``, coefficients for both the
1625:     numerator and denominator should be specified in descending exponent
1626:     order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).
1627: 
1628:     '''
1629:     if isinstance(system, lti):
1630:         sys = system._as_ss()
1631:     elif isinstance(system, dlti):
1632:         raise AttributeError('lsim2 can only be used with continuous-time '
1633:                              'systems.')
1634:     else:
1635:         sys = lti(*system)._as_ss()
1636: 
1637:     if X0 is None:
1638:         X0 = zeros(sys.B.shape[0], sys.A.dtype)
1639: 
1640:     if T is None:
1641:         # XXX T should really be a required argument, but U was
1642:         # changed from a required positional argument to a keyword,
1643:         # and T is after U in the argument list.  So we either: change
1644:         # the API and move T in front of U; check here for T being
1645:         # None and raise an exception; or assign a default value to T
1646:         # here.  This code implements the latter.
1647:         T = linspace(0, 10.0, 101)
1648: 
1649:     T = atleast_1d(T)
1650:     if len(T.shape) != 1:
1651:         raise ValueError("T must be a rank-1 array.")
1652: 
1653:     if U is not None:
1654:         U = atleast_1d(U)
1655:         if len(U.shape) == 1:
1656:             U = U.reshape(-1, 1)
1657:         sU = U.shape
1658:         if sU[0] != len(T):
1659:             raise ValueError("U must have the same number of rows "
1660:                              "as elements in T.")
1661: 
1662:         if sU[1] != sys.inputs:
1663:             raise ValueError("The number of inputs in U (%d) is not "
1664:                              "compatible with the number of system "
1665:                              "inputs (%d)" % (sU[1], sys.inputs))
1666:         # Create a callable that uses linear interpolation to
1667:         # calculate the input at any time.
1668:         ufunc = interpolate.interp1d(T, U, kind='linear',
1669:                                      axis=0, bounds_error=False)
1670: 
1671:         def fprime(x, t, sys, ufunc):
1672:             '''The vector field of the linear system.'''
1673:             return dot(sys.A, x) + squeeze(dot(sys.B, nan_to_num(ufunc([t]))))
1674:         xout = integrate.odeint(fprime, X0, T, args=(sys, ufunc), **kwargs)
1675:         yout = dot(sys.C, transpose(xout)) + dot(sys.D, transpose(U))
1676:     else:
1677:         def fprime(x, t, sys):
1678:             '''The vector field of the linear system.'''
1679:             return dot(sys.A, x)
1680:         xout = integrate.odeint(fprime, X0, T, args=(sys,), **kwargs)
1681:         yout = dot(sys.C, transpose(xout))
1682: 
1683:     return T, squeeze(transpose(yout)), xout
1684: 
1685: 
1686: def _cast_to_array_dtype(in1, in2):
1687:     '''Cast array to dtype of other array, while avoiding ComplexWarning.
1688: 
1689:     Those can be raised when casting complex to real.
1690:     '''
1691:     if numpy.issubdtype(in2.dtype, numpy.float):
1692:         # dtype to cast to is not complex, so use .real
1693:         in1 = in1.real.astype(in2.dtype)
1694:     else:
1695:         in1 = in1.astype(in2.dtype)
1696: 
1697:     return in1
1698: 
1699: 
1700: def lsim(system, U, T, X0=None, interp=True):
1701:     '''
1702:     Simulate output of a continuous-time linear system.
1703: 
1704:     Parameters
1705:     ----------
1706:     system : an instance of the LTI class or a tuple describing the system.
1707:         The following gives the number of elements in the tuple and
1708:         the interpretation:
1709: 
1710:         * 1: (instance of `lti`)
1711:         * 2: (num, den)
1712:         * 3: (zeros, poles, gain)
1713:         * 4: (A, B, C, D)
1714: 
1715:     U : array_like
1716:         An input array describing the input at each time `T`
1717:         (interpolation is assumed between given times).  If there are
1718:         multiple inputs, then each column of the rank-2 array
1719:         represents an input.  If U = 0 or None, a zero input is used.
1720:     T : array_like
1721:         The time steps at which the input is defined and at which the
1722:         output is desired.  Must be nonnegative, increasing, and equally spaced.
1723:     X0 : array_like, optional
1724:         The initial conditions on the state vector (zero by default).
1725:     interp : bool, optional
1726:         Whether to use linear (True, the default) or zero-order-hold (False)
1727:         interpolation for the input array.
1728: 
1729:     Returns
1730:     -------
1731:     T : 1D ndarray
1732:         Time values for the output.
1733:     yout : 1D ndarray
1734:         System response.
1735:     xout : ndarray
1736:         Time evolution of the state vector.
1737: 
1738:     Notes
1739:     -----
1740:     If (num, den) is passed in for ``system``, coefficients for both the
1741:     numerator and denominator should be specified in descending exponent
1742:     order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).
1743: 
1744:     Examples
1745:     --------
1746:     Simulate a double integrator y'' = u, with a constant input u = 1
1747: 
1748:     >>> from scipy import signal
1749:     >>> system = signal.lti([[0., 1.], [0., 0.]], [[0.], [1.]], [[1., 0.]], 0.)
1750:     >>> t = np.linspace(0, 5)
1751:     >>> u = np.ones_like(t)
1752:     >>> tout, y, x = signal.lsim(system, u, t)
1753:     >>> import matplotlib.pyplot as plt
1754:     >>> plt.plot(t, y)
1755:     '''
1756:     if isinstance(system, lti):
1757:         sys = system._as_ss()
1758:     elif isinstance(system, dlti):
1759:         raise AttributeError('lsim can only be used with continuous-time '
1760:                              'systems.')
1761:     else:
1762:         sys = lti(*system)._as_ss()
1763:     T = atleast_1d(T)
1764:     if len(T.shape) != 1:
1765:         raise ValueError("T must be a rank-1 array.")
1766: 
1767:     A, B, C, D = map(np.asarray, (sys.A, sys.B, sys.C, sys.D))
1768:     n_states = A.shape[0]
1769:     n_inputs = B.shape[1]
1770: 
1771:     n_steps = T.size
1772:     if X0 is None:
1773:         X0 = zeros(n_states, sys.A.dtype)
1774:     xout = zeros((n_steps, n_states), sys.A.dtype)
1775: 
1776:     if T[0] == 0:
1777:         xout[0] = X0
1778:     elif T[0] > 0:
1779:         # step forward to initial time, with zero input
1780:         xout[0] = dot(X0, linalg.expm(transpose(A) * T[0]))
1781:     else:
1782:         raise ValueError("Initial time must be nonnegative")
1783: 
1784:     no_input = (U is None or
1785:                 (isinstance(U, (int, float)) and U == 0.) or
1786:                 not np.any(U))
1787: 
1788:     if n_steps == 1:
1789:         yout = squeeze(dot(xout, transpose(C)))
1790:         if not no_input:
1791:             yout += squeeze(dot(U, transpose(D)))
1792:         return T, squeeze(yout), squeeze(xout)
1793: 
1794:     dt = T[1] - T[0]
1795:     if not np.allclose((T[1:] - T[:-1]) / dt, 1.0):
1796:         warnings.warn("Non-uniform timesteps are deprecated. Results may be "
1797:                       "slow and/or inaccurate.", DeprecationWarning)
1798:         return lsim2(system, U, T, X0)
1799: 
1800:     if no_input:
1801:         # Zero input: just use matrix exponential
1802:         # take transpose because state is a row vector
1803:         expAT_dt = linalg.expm(transpose(A) * dt)
1804:         for i in xrange(1, n_steps):
1805:             xout[i] = dot(xout[i-1], expAT_dt)
1806:         yout = squeeze(dot(xout, transpose(C)))
1807:         return T, squeeze(yout), squeeze(xout)
1808: 
1809:     # Nonzero input
1810:     U = atleast_1d(U)
1811:     if U.ndim == 1:
1812:         U = U[:, np.newaxis]
1813: 
1814:     if U.shape[0] != n_steps:
1815:         raise ValueError("U must have the same number of rows "
1816:                          "as elements in T.")
1817: 
1818:     if U.shape[1] != n_inputs:
1819:         raise ValueError("System does not define that many inputs.")
1820: 
1821:     if not interp:
1822:         # Zero-order hold
1823:         # Algorithm: to integrate from time 0 to time dt, we solve
1824:         #   xdot = A x + B u,  x(0) = x0
1825:         #   udot = 0,          u(0) = u0.
1826:         #
1827:         # Solution is
1828:         #   [ x(dt) ]       [ A*dt   B*dt ] [ x0 ]
1829:         #   [ u(dt) ] = exp [  0     0    ] [ u0 ]
1830:         M = np.vstack([np.hstack([A * dt, B * dt]),
1831:                        np.zeros((n_inputs, n_states + n_inputs))])
1832:         # transpose everything because the state and input are row vectors
1833:         expMT = linalg.expm(transpose(M))
1834:         Ad = expMT[:n_states, :n_states]
1835:         Bd = expMT[n_states:, :n_states]
1836:         for i in xrange(1, n_steps):
1837:             xout[i] = dot(xout[i-1], Ad) + dot(U[i-1], Bd)
1838:     else:
1839:         # Linear interpolation between steps
1840:         # Algorithm: to integrate from time 0 to time dt, with linear
1841:         # interpolation between inputs u(0) = u0 and u(dt) = u1, we solve
1842:         #   xdot = A x + B u,        x(0) = x0
1843:         #   udot = (u1 - u0) / dt,   u(0) = u0.
1844:         #
1845:         # Solution is
1846:         #   [ x(dt) ]       [ A*dt  B*dt  0 ] [  x0   ]
1847:         #   [ u(dt) ] = exp [  0     0    I ] [  u0   ]
1848:         #   [u1 - u0]       [  0     0    0 ] [u1 - u0]
1849:         M = np.vstack([np.hstack([A * dt, B * dt,
1850:                                   np.zeros((n_states, n_inputs))]),
1851:                        np.hstack([np.zeros((n_inputs, n_states + n_inputs)),
1852:                                   np.identity(n_inputs)]),
1853:                        np.zeros((n_inputs, n_states + 2 * n_inputs))])
1854:         expMT = linalg.expm(transpose(M))
1855:         Ad = expMT[:n_states, :n_states]
1856:         Bd1 = expMT[n_states+n_inputs:, :n_states]
1857:         Bd0 = expMT[n_states:n_states + n_inputs, :n_states] - Bd1
1858:         for i in xrange(1, n_steps):
1859:             xout[i] = (dot(xout[i-1], Ad) + dot(U[i-1], Bd0) + dot(U[i], Bd1))
1860: 
1861:     yout = (squeeze(dot(xout, transpose(C))) + squeeze(dot(U, transpose(D))))
1862:     return T, squeeze(yout), squeeze(xout)
1863: 
1864: 
1865: def _default_response_times(A, n):
1866:     '''Compute a reasonable set of time samples for the response time.
1867: 
1868:     This function is used by `impulse`, `impulse2`, `step` and `step2`
1869:     to compute the response time when the `T` argument to the function
1870:     is None.
1871: 
1872:     Parameters
1873:     ----------
1874:     A : array_like
1875:         The system matrix, which is square.
1876:     n : int
1877:         The number of time samples to generate.
1878: 
1879:     Returns
1880:     -------
1881:     t : ndarray
1882:         The 1-D array of length `n` of time samples at which the response
1883:         is to be computed.
1884:     '''
1885:     # Create a reasonable time interval.
1886:     # TODO: This could use some more work.
1887:     # For example, what is expected when the system is unstable?
1888:     vals = linalg.eigvals(A)
1889:     r = min(abs(real(vals)))
1890:     if r == 0.0:
1891:         r = 1.0
1892:     tc = 1.0 / r
1893:     t = linspace(0.0, 7 * tc, n)
1894:     return t
1895: 
1896: 
1897: def impulse(system, X0=None, T=None, N=None):
1898:     '''Impulse response of continuous-time system.
1899: 
1900:     Parameters
1901:     ----------
1902:     system : an instance of the LTI class or a tuple of array_like
1903:         describing the system.
1904:         The following gives the number of elements in the tuple and
1905:         the interpretation:
1906: 
1907:             * 1 (instance of `lti`)
1908:             * 2 (num, den)
1909:             * 3 (zeros, poles, gain)
1910:             * 4 (A, B, C, D)
1911: 
1912:     X0 : array_like, optional
1913:         Initial state-vector.  Defaults to zero.
1914:     T : array_like, optional
1915:         Time points.  Computed if not given.
1916:     N : int, optional
1917:         The number of time points to compute (if `T` is not given).
1918: 
1919:     Returns
1920:     -------
1921:     T : ndarray
1922:         A 1-D array of time points.
1923:     yout : ndarray
1924:         A 1-D array containing the impulse response of the system (except for
1925:         singularities at zero).
1926: 
1927:     Notes
1928:     -----
1929:     If (num, den) is passed in for ``system``, coefficients for both the
1930:     numerator and denominator should be specified in descending exponent
1931:     order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).
1932: 
1933:     '''
1934:     if isinstance(system, lti):
1935:         sys = system._as_ss()
1936:     elif isinstance(system, dlti):
1937:         raise AttributeError('impulse can only be used with continuous-time '
1938:                              'systems.')
1939:     else:
1940:         sys = lti(*system)._as_ss()
1941:     if X0 is None:
1942:         X = squeeze(sys.B)
1943:     else:
1944:         X = squeeze(sys.B + X0)
1945:     if N is None:
1946:         N = 100
1947:     if T is None:
1948:         T = _default_response_times(sys.A, N)
1949:     else:
1950:         T = asarray(T)
1951: 
1952:     _, h, _ = lsim(sys, 0., T, X, interp=False)
1953:     return T, h
1954: 
1955: 
1956: def impulse2(system, X0=None, T=None, N=None, **kwargs):
1957:     '''
1958:     Impulse response of a single-input, continuous-time linear system.
1959: 
1960:     Parameters
1961:     ----------
1962:     system : an instance of the LTI class or a tuple of array_like
1963:         describing the system.
1964:         The following gives the number of elements in the tuple and
1965:         the interpretation:
1966: 
1967:             * 1 (instance of `lti`)
1968:             * 2 (num, den)
1969:             * 3 (zeros, poles, gain)
1970:             * 4 (A, B, C, D)
1971: 
1972:     X0 : 1-D array_like, optional
1973:         The initial condition of the state vector.  Default: 0 (the
1974:         zero vector).
1975:     T : 1-D array_like, optional
1976:         The time steps at which the input is defined and at which the
1977:         output is desired.  If `T` is not given, the function will
1978:         generate a set of time samples automatically.
1979:     N : int, optional
1980:         Number of time points to compute.  Default: 100.
1981:     kwargs : various types
1982:         Additional keyword arguments are passed on to the function
1983:         `scipy.signal.lsim2`, which in turn passes them on to
1984:         `scipy.integrate.odeint`; see the latter's documentation for
1985:         information about these arguments.
1986: 
1987:     Returns
1988:     -------
1989:     T : ndarray
1990:         The time values for the output.
1991:     yout : ndarray
1992:         The output response of the system.
1993: 
1994:     See Also
1995:     --------
1996:     impulse, lsim2, integrate.odeint
1997: 
1998:     Notes
1999:     -----
2000:     The solution is generated by calling `scipy.signal.lsim2`, which uses
2001:     the differential equation solver `scipy.integrate.odeint`.
2002: 
2003:     If (num, den) is passed in for ``system``, coefficients for both the
2004:     numerator and denominator should be specified in descending exponent
2005:     order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).
2006: 
2007:     .. versionadded:: 0.8.0
2008: 
2009:     Examples
2010:     --------
2011:     Second order system with a repeated root: x''(t) + 2*x(t) + x(t) = u(t)
2012: 
2013:     >>> from scipy import signal
2014:     >>> system = ([1.0], [1.0, 2.0, 1.0])
2015:     >>> t, y = signal.impulse2(system)
2016:     >>> import matplotlib.pyplot as plt
2017:     >>> plt.plot(t, y)
2018: 
2019:     '''
2020:     if isinstance(system, lti):
2021:         sys = system._as_ss()
2022:     elif isinstance(system, dlti):
2023:         raise AttributeError('impulse2 can only be used with continuous-time '
2024:                              'systems.')
2025:     else:
2026:         sys = lti(*system)._as_ss()
2027:     B = sys.B
2028:     if B.shape[-1] != 1:
2029:         raise ValueError("impulse2() requires a single-input system.")
2030:     B = B.squeeze()
2031:     if X0 is None:
2032:         X0 = zeros_like(B)
2033:     if N is None:
2034:         N = 100
2035:     if T is None:
2036:         T = _default_response_times(sys.A, N)
2037: 
2038:     # Move the impulse in the input to the initial conditions, and then
2039:     # solve using lsim2().
2040:     ic = B + X0
2041:     Tr, Yr, Xr = lsim2(sys, T=T, X0=ic, **kwargs)
2042:     return Tr, Yr
2043: 
2044: 
2045: def step(system, X0=None, T=None, N=None):
2046:     '''Step response of continuous-time system.
2047: 
2048:     Parameters
2049:     ----------
2050:     system : an instance of the LTI class or a tuple of array_like
2051:         describing the system.
2052:         The following gives the number of elements in the tuple and
2053:         the interpretation:
2054: 
2055:             * 1 (instance of `lti`)
2056:             * 2 (num, den)
2057:             * 3 (zeros, poles, gain)
2058:             * 4 (A, B, C, D)
2059: 
2060:     X0 : array_like, optional
2061:         Initial state-vector (default is zero).
2062:     T : array_like, optional
2063:         Time points (computed if not given).
2064:     N : int, optional
2065:         Number of time points to compute if `T` is not given.
2066: 
2067:     Returns
2068:     -------
2069:     T : 1D ndarray
2070:         Output time points.
2071:     yout : 1D ndarray
2072:         Step response of system.
2073: 
2074:     See also
2075:     --------
2076:     scipy.signal.step2
2077: 
2078:     Notes
2079:     -----
2080:     If (num, den) is passed in for ``system``, coefficients for both the
2081:     numerator and denominator should be specified in descending exponent
2082:     order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).
2083: 
2084:     '''
2085:     if isinstance(system, lti):
2086:         sys = system._as_ss()
2087:     elif isinstance(system, dlti):
2088:         raise AttributeError('step can only be used with continuous-time '
2089:                              'systems.')
2090:     else:
2091:         sys = lti(*system)._as_ss()
2092:     if N is None:
2093:         N = 100
2094:     if T is None:
2095:         T = _default_response_times(sys.A, N)
2096:     else:
2097:         T = asarray(T)
2098:     U = ones(T.shape, sys.A.dtype)
2099:     vals = lsim(sys, U, T, X0=X0, interp=False)
2100:     return vals[0], vals[1]
2101: 
2102: 
2103: def step2(system, X0=None, T=None, N=None, **kwargs):
2104:     '''Step response of continuous-time system.
2105: 
2106:     This function is functionally the same as `scipy.signal.step`, but
2107:     it uses the function `scipy.signal.lsim2` to compute the step
2108:     response.
2109: 
2110:     Parameters
2111:     ----------
2112:     system : an instance of the LTI class or a tuple of array_like
2113:         describing the system.
2114:         The following gives the number of elements in the tuple and
2115:         the interpretation:
2116: 
2117:             * 1 (instance of `lti`)
2118:             * 2 (num, den)
2119:             * 3 (zeros, poles, gain)
2120:             * 4 (A, B, C, D)
2121: 
2122:     X0 : array_like, optional
2123:         Initial state-vector (default is zero).
2124:     T : array_like, optional
2125:         Time points (computed if not given).
2126:     N : int, optional
2127:         Number of time points to compute if `T` is not given.
2128:     kwargs : various types
2129:         Additional keyword arguments are passed on the function
2130:         `scipy.signal.lsim2`, which in turn passes them on to
2131:         `scipy.integrate.odeint`.  See the documentation for
2132:         `scipy.integrate.odeint` for information about these arguments.
2133: 
2134:     Returns
2135:     -------
2136:     T : 1D ndarray
2137:         Output time points.
2138:     yout : 1D ndarray
2139:         Step response of system.
2140: 
2141:     See also
2142:     --------
2143:     scipy.signal.step
2144: 
2145:     Notes
2146:     -----
2147:     If (num, den) is passed in for ``system``, coefficients for both the
2148:     numerator and denominator should be specified in descending exponent
2149:     order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).
2150: 
2151:     .. versionadded:: 0.8.0
2152:     '''
2153:     if isinstance(system, lti):
2154:         sys = system._as_ss()
2155:     elif isinstance(system, dlti):
2156:         raise AttributeError('step2 can only be used with continuous-time '
2157:                              'systems.')
2158:     else:
2159:         sys = lti(*system)._as_ss()
2160:     if N is None:
2161:         N = 100
2162:     if T is None:
2163:         T = _default_response_times(sys.A, N)
2164:     else:
2165:         T = asarray(T)
2166:     U = ones(T.shape, sys.A.dtype)
2167:     vals = lsim2(sys, U, T, X0=X0, **kwargs)
2168:     return vals[0], vals[1]
2169: 
2170: 
2171: def bode(system, w=None, n=100):
2172:     '''
2173:     Calculate Bode magnitude and phase data of a continuous-time system.
2174: 
2175:     Parameters
2176:     ----------
2177:     system : an instance of the LTI class or a tuple describing the system.
2178:         The following gives the number of elements in the tuple and
2179:         the interpretation:
2180: 
2181:             * 1 (instance of `lti`)
2182:             * 2 (num, den)
2183:             * 3 (zeros, poles, gain)
2184:             * 4 (A, B, C, D)
2185: 
2186:     w : array_like, optional
2187:         Array of frequencies (in rad/s). Magnitude and phase data is calculated
2188:         for every value in this array. If not given a reasonable set will be
2189:         calculated.
2190:     n : int, optional
2191:         Number of frequency points to compute if `w` is not given. The `n`
2192:         frequencies are logarithmically spaced in an interval chosen to
2193:         include the influence of the poles and zeros of the system.
2194: 
2195:     Returns
2196:     -------
2197:     w : 1D ndarray
2198:         Frequency array [rad/s]
2199:     mag : 1D ndarray
2200:         Magnitude array [dB]
2201:     phase : 1D ndarray
2202:         Phase array [deg]
2203: 
2204:     Notes
2205:     -----
2206:     If (num, den) is passed in for ``system``, coefficients for both the
2207:     numerator and denominator should be specified in descending exponent
2208:     order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).
2209: 
2210:     .. versionadded:: 0.11.0
2211: 
2212:     Examples
2213:     --------
2214:     >>> from scipy import signal
2215:     >>> import matplotlib.pyplot as plt
2216: 
2217:     >>> sys = signal.TransferFunction([1], [1, 1])
2218:     >>> w, mag, phase = signal.bode(sys)
2219: 
2220:     >>> plt.figure()
2221:     >>> plt.semilogx(w, mag)    # Bode magnitude plot
2222:     >>> plt.figure()
2223:     >>> plt.semilogx(w, phase)  # Bode phase plot
2224:     >>> plt.show()
2225: 
2226:     '''
2227:     w, y = freqresp(system, w=w, n=n)
2228: 
2229:     mag = 20.0 * numpy.log10(abs(y))
2230:     phase = numpy.unwrap(numpy.arctan2(y.imag, y.real)) * 180.0 / numpy.pi
2231: 
2232:     return w, mag, phase
2233: 
2234: 
2235: def freqresp(system, w=None, n=10000):
2236:     '''Calculate the frequency response of a continuous-time system.
2237: 
2238:     Parameters
2239:     ----------
2240:     system : an instance of the `lti` class or a tuple describing the system.
2241:         The following gives the number of elements in the tuple and
2242:         the interpretation:
2243: 
2244:             * 1 (instance of `lti`)
2245:             * 2 (num, den)
2246:             * 3 (zeros, poles, gain)
2247:             * 4 (A, B, C, D)
2248: 
2249:     w : array_like, optional
2250:         Array of frequencies (in rad/s). Magnitude and phase data is
2251:         calculated for every value in this array. If not given, a reasonable
2252:         set will be calculated.
2253:     n : int, optional
2254:         Number of frequency points to compute if `w` is not given. The `n`
2255:         frequencies are logarithmically spaced in an interval chosen to
2256:         include the influence of the poles and zeros of the system.
2257: 
2258:     Returns
2259:     -------
2260:     w : 1D ndarray
2261:         Frequency array [rad/s]
2262:     H : 1D ndarray
2263:         Array of complex magnitude values
2264: 
2265:     Notes
2266:     -----
2267:     If (num, den) is passed in for ``system``, coefficients for both the
2268:     numerator and denominator should be specified in descending exponent
2269:     order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).
2270: 
2271:     Examples
2272:     --------
2273:     Generating the Nyquist plot of a transfer function
2274: 
2275:     >>> from scipy import signal
2276:     >>> import matplotlib.pyplot as plt
2277: 
2278:     Transfer function: H(s) = 5 / (s-1)^3
2279: 
2280:     >>> s1 = signal.ZerosPolesGain([], [1, 1, 1], [5])
2281: 
2282:     >>> w, H = signal.freqresp(s1)
2283: 
2284:     >>> plt.figure()
2285:     >>> plt.plot(H.real, H.imag, "b")
2286:     >>> plt.plot(H.real, -H.imag, "r")
2287:     >>> plt.show()
2288:     '''
2289:     if isinstance(system, lti):
2290:         if isinstance(system, (TransferFunction, ZerosPolesGain)):
2291:             sys = system
2292:         else:
2293:             sys = system._as_zpk()
2294:     elif isinstance(system, dlti):
2295:         raise AttributeError('freqresp can only be used with continuous-time '
2296:                              'systems.')
2297:     else:
2298:         sys = lti(*system)._as_zpk()
2299: 
2300:     if sys.inputs != 1 or sys.outputs != 1:
2301:         raise ValueError("freqresp() requires a SISO (single input, single "
2302:                          "output) system.")
2303: 
2304:     if w is not None:
2305:         worN = w
2306:     else:
2307:         worN = n
2308: 
2309:     if isinstance(sys, TransferFunction):
2310:         # In the call to freqs(), sys.num.ravel() is used because there are
2311:         # cases where sys.num is a 2-D array with a single row.
2312:         w, h = freqs(sys.num.ravel(), sys.den, worN=worN)
2313: 
2314:     elif isinstance(sys, ZerosPolesGain):
2315:         w, h = freqs_zpk(sys.zeros, sys.poles, sys.gain, worN=worN)
2316: 
2317:     return w, h
2318: 
2319: 
2320: # This class will be used by place_poles to return its results
2321: # see http://code.activestate.com/recipes/52308/
2322: class Bunch:
2323:     def __init__(self, **kwds):
2324:         self.__dict__.update(kwds)
2325: 
2326: 
2327: def _valid_inputs(A, B, poles, method, rtol, maxiter):
2328:     '''
2329:     Check the poles come in complex conjugage pairs
2330:     Check shapes of A, B and poles are compatible.
2331:     Check the method chosen is compatible with provided poles
2332:     Return update method to use and ordered poles
2333: 
2334:     '''
2335:     poles = np.asarray(poles)
2336:     if poles.ndim > 1:
2337:         raise ValueError("Poles must be a 1D array like.")
2338:     # Will raise ValueError if poles do not come in complex conjugates pairs
2339:     poles = _order_complex_poles(poles)
2340:     if A.ndim > 2:
2341:         raise ValueError("A must be a 2D array/matrix.")
2342:     if B.ndim > 2:
2343:         raise ValueError("B must be a 2D array/matrix")
2344:     if A.shape[0] != A.shape[1]:
2345:         raise ValueError("A must be square")
2346:     if len(poles) > A.shape[0]:
2347:         raise ValueError("maximum number of poles is %d but you asked for %d" %
2348:                          (A.shape[0], len(poles)))
2349:     if len(poles) < A.shape[0]:
2350:         raise ValueError("number of poles is %d but you should provide %d" %
2351:                          (len(poles), A.shape[0]))
2352:     r = np.linalg.matrix_rank(B)
2353:     for p in poles:
2354:         if sum(p == poles) > r:
2355:             raise ValueError("at least one of the requested pole is repeated "
2356:                              "more than rank(B) times")
2357:     # Choose update method
2358:     update_loop = _YT_loop
2359:     if method not in ('KNV0','YT'):
2360:         raise ValueError("The method keyword must be one of 'YT' or 'KNV0'")
2361: 
2362:     if method == "KNV0":
2363:         update_loop = _KNV0_loop
2364:         if not all(np.isreal(poles)):
2365:             raise ValueError("Complex poles are not supported by KNV0")
2366: 
2367:     if maxiter < 1:
2368:         raise ValueError("maxiter must be at least equal to 1")
2369: 
2370:     # We do not check rtol <= 0 as the user can use a negative rtol to
2371:     # force maxiter iterations
2372:     if rtol > 1:
2373:         raise ValueError("rtol can not be greater than 1")
2374: 
2375:     return update_loop, poles
2376: 
2377: 
2378: def _order_complex_poles(poles):
2379:     '''
2380:     Check we have complex conjugates pairs and reorder P according to YT, ie
2381:     real_poles, complex_i, conjugate complex_i, ....
2382:     The lexicographic sort on the complex poles is added to help the user to
2383:     compare sets of poles.
2384:     '''
2385:     ordered_poles = np.sort(poles[np.isreal(poles)])
2386:     im_poles = []
2387:     for p in np.sort(poles[np.imag(poles) < 0]):
2388:         if np.conj(p) in poles:
2389:             im_poles.extend((p, np.conj(p)))
2390: 
2391:     ordered_poles = np.hstack((ordered_poles, im_poles))
2392: 
2393:     if poles.shape[0] != len(ordered_poles):
2394:         raise ValueError("Complex poles must come with their conjugates")
2395:     return ordered_poles
2396: 
2397: 
2398: def _KNV0(B, ker_pole, transfer_matrix, j, poles):
2399:     '''
2400:     Algorithm "KNV0" Kautsky et Al. Robust pole
2401:     assignment in linear state feedback, Int journal of Control
2402:     1985, vol 41 p 1129->1155
2403:     http://la.epfl.ch/files/content/sites/la/files/
2404:         users/105941/public/KautskyNicholsDooren
2405: 
2406:     '''
2407:     # Remove xj form the base
2408:     transfer_matrix_not_j = np.delete(transfer_matrix, j, axis=1)
2409:     # If we QR this matrix in full mode Q=Q0|Q1
2410:     # then Q1 will be a single column orthogonnal to
2411:     # Q0, that's what we are looking for !
2412: 
2413:     # After merge of gh-4249 great speed improvements could be achieved
2414:     # using QR updates instead of full QR in the line below
2415: 
2416:     # To debug with numpy qr uncomment the line below
2417:     # Q, R = np.linalg.qr(transfer_matrix_not_j, mode="complete")
2418:     Q, R = s_qr(transfer_matrix_not_j, mode="full")
2419: 
2420:     mat_ker_pj = np.dot(ker_pole[j], ker_pole[j].T)
2421:     yj = np.dot(mat_ker_pj, Q[:, -1])
2422: 
2423:     # If Q[:, -1] is "almost" orthogonal to ker_pole[j] its
2424:     # projection into ker_pole[j] will yield a vector
2425:     # close to 0.  As we are looking for a vector in ker_pole[j]
2426:     # simply stick with transfer_matrix[:, j] (unless someone provides me with
2427:     # a better choice ?)
2428: 
2429:     if not np.allclose(yj, 0):
2430:         xj = yj/np.linalg.norm(yj)
2431:         transfer_matrix[:, j] = xj
2432: 
2433:         # KNV does not support complex poles, using YT technique the two lines
2434:         # below seem to work 9 out of 10 times but it is not reliable enough:
2435:         # transfer_matrix[:, j]=real(xj)
2436:         # transfer_matrix[:, j+1]=imag(xj)
2437: 
2438:         # Add this at the beginning of this function if you wish to test
2439:         # complex support:
2440:         #    if ~np.isreal(P[j]) and (j>=B.shape[0]-1 or P[j]!=np.conj(P[j+1])):
2441:         #        return
2442:         # Problems arise when imag(xj)=>0 I have no idea on how to fix this
2443: 
2444: 
2445: def _YT_real(ker_pole, Q, transfer_matrix, i, j):
2446:     '''
2447:     Applies algorithm from YT section 6.1 page 19 related to real pairs
2448:     '''
2449:     # step 1 page 19
2450:     u = Q[:, -2, np.newaxis]
2451:     v = Q[:, -1, np.newaxis]
2452: 
2453:     # step 2 page 19
2454:     m = np.dot(np.dot(ker_pole[i].T, np.dot(u, v.T) -
2455:         np.dot(v, u.T)), ker_pole[j])
2456: 
2457:     # step 3 page 19
2458:     um, sm, vm = np.linalg.svd(m)
2459:     # mu1, mu2 two first columns of U => 2 first lines of U.T
2460:     mu1, mu2 = um.T[:2, :, np.newaxis]
2461:     # VM is V.T with numpy we want the first two lines of V.T
2462:     nu1, nu2 = vm[:2, :, np.newaxis]
2463: 
2464:     # what follows is a rough python translation of the formulas
2465:     # in section 6.2 page 20 (step 4)
2466:     transfer_matrix_j_mo_transfer_matrix_j = np.vstack((
2467:             transfer_matrix[:, i, np.newaxis],
2468:             transfer_matrix[:, j, np.newaxis]))
2469: 
2470:     if not np.allclose(sm[0], sm[1]):
2471:         ker_pole_imo_mu1 = np.dot(ker_pole[i], mu1)
2472:         ker_pole_i_nu1 = np.dot(ker_pole[j], nu1)
2473:         ker_pole_mu_nu = np.vstack((ker_pole_imo_mu1, ker_pole_i_nu1))
2474:     else:
2475:         ker_pole_ij = np.vstack((
2476:                                 np.hstack((ker_pole[i],
2477:                                            np.zeros(ker_pole[i].shape))),
2478:                                 np.hstack((np.zeros(ker_pole[j].shape),
2479:                                                     ker_pole[j]))
2480:                                 ))
2481:         mu_nu_matrix = np.vstack(
2482:             (np.hstack((mu1, mu2)), np.hstack((nu1, nu2)))
2483:             )
2484:         ker_pole_mu_nu = np.dot(ker_pole_ij, mu_nu_matrix)
2485:     transfer_matrix_ij = np.dot(np.dot(ker_pole_mu_nu, ker_pole_mu_nu.T),
2486:                              transfer_matrix_j_mo_transfer_matrix_j)
2487:     if not np.allclose(transfer_matrix_ij, 0):
2488:         transfer_matrix_ij = (np.sqrt(2)*transfer_matrix_ij /
2489:                               np.linalg.norm(transfer_matrix_ij))
2490:         transfer_matrix[:, i] = transfer_matrix_ij[
2491:             :transfer_matrix[:, i].shape[0], 0
2492:             ]
2493:         transfer_matrix[:, j] = transfer_matrix_ij[
2494:             transfer_matrix[:, i].shape[0]:, 0
2495:             ]
2496:     else:
2497:         # As in knv0 if transfer_matrix_j_mo_transfer_matrix_j is orthogonal to
2498:         # Vect{ker_pole_mu_nu} assign transfer_matrixi/transfer_matrix_j to
2499:         # ker_pole_mu_nu and iterate. As we are looking for a vector in
2500:         # Vect{Matker_pole_MU_NU} (see section 6.1 page 19) this might help
2501:         # (that's a guess, not a claim !)
2502:         transfer_matrix[:, i] = ker_pole_mu_nu[
2503:             :transfer_matrix[:, i].shape[0], 0
2504:             ]
2505:         transfer_matrix[:, j] = ker_pole_mu_nu[
2506:             transfer_matrix[:, i].shape[0]:, 0
2507:             ]
2508: 
2509: 
2510: def _YT_complex(ker_pole, Q, transfer_matrix, i, j):
2511:     '''
2512:     Applies algorithm from YT section 6.2 page 20 related to complex pairs
2513:     '''
2514:     # step 1 page 20
2515:     ur = np.sqrt(2)*Q[:, -2, np.newaxis]
2516:     ui = np.sqrt(2)*Q[:, -1, np.newaxis]
2517:     u = ur + 1j*ui
2518: 
2519:     # step 2 page 20
2520:     ker_pole_ij = ker_pole[i]
2521:     m = np.dot(np.dot(np.conj(ker_pole_ij.T), np.dot(u, np.conj(u).T) -
2522:                np.dot(np.conj(u), u.T)), ker_pole_ij)
2523: 
2524:     # step 3 page 20
2525:     e_val, e_vec = np.linalg.eig(m)
2526:     # sort eigenvalues according to their module
2527:     e_val_idx = np.argsort(np.abs(e_val))
2528:     mu1 = e_vec[:, e_val_idx[-1], np.newaxis]
2529:     mu2 = e_vec[:, e_val_idx[-2], np.newaxis]
2530: 
2531:     # what follows is a rough python translation of the formulas
2532:     # in section 6.2 page 20 (step 4)
2533: 
2534:     # remember transfer_matrix_i has been split as
2535:     # transfer_matrix[i]=real(transfer_matrix_i) and
2536:     # transfer_matrix[j]=imag(transfer_matrix_i)
2537:     transfer_matrix_j_mo_transfer_matrix_j = (
2538:         transfer_matrix[:, i, np.newaxis] +
2539:         1j*transfer_matrix[:, j, np.newaxis]
2540:         )
2541:     if not np.allclose(np.abs(e_val[e_val_idx[-1]]),
2542:                               np.abs(e_val[e_val_idx[-2]])):
2543:         ker_pole_mu = np.dot(ker_pole_ij, mu1)
2544:     else:
2545:         mu1_mu2_matrix = np.hstack((mu1, mu2))
2546:         ker_pole_mu = np.dot(ker_pole_ij, mu1_mu2_matrix)
2547:     transfer_matrix_i_j = np.dot(np.dot(ker_pole_mu, np.conj(ker_pole_mu.T)),
2548:                               transfer_matrix_j_mo_transfer_matrix_j)
2549: 
2550:     if not np.allclose(transfer_matrix_i_j, 0):
2551:         transfer_matrix_i_j = (transfer_matrix_i_j /
2552:             np.linalg.norm(transfer_matrix_i_j))
2553:         transfer_matrix[:, i] = np.real(transfer_matrix_i_j[:, 0])
2554:         transfer_matrix[:, j] = np.imag(transfer_matrix_i_j[:, 0])
2555:     else:
2556:         # same idea as in YT_real
2557:         transfer_matrix[:, i] = np.real(ker_pole_mu[:, 0])
2558:         transfer_matrix[:, j] = np.imag(ker_pole_mu[:, 0])
2559: 
2560: 
2561: def _YT_loop(ker_pole, transfer_matrix, poles, B, maxiter, rtol):
2562:     '''
2563:     Algorithm "YT" Tits, Yang. Globally Convergent
2564:     Algorithms for Robust Pole Assignment by State Feedback
2565:     http://drum.lib.umd.edu/handle/1903/5598
2566:     The poles P have to be sorted accordingly to section 6.2 page 20
2567: 
2568:     '''
2569:     # The IEEE edition of the YT paper gives useful information on the
2570:     # optimal update order for the real poles in order to minimize the number
2571:     # of times we have to loop over all poles, see page 1442
2572:     nb_real = poles[np.isreal(poles)].shape[0]
2573:     # hnb => Half Nb Real
2574:     hnb = nb_real // 2
2575: 
2576:     # Stick to the indices in the paper and then remove one to get numpy array
2577:     # index it is a bit easier to link the code to the paper this way even if it
2578:     # is not very clean. The paper is unclear about what should be done when
2579:     # there is only one real pole => use KNV0 on this real pole seem to work
2580:     if nb_real > 0:
2581:         #update the biggest real pole with the smallest one
2582:         update_order = [[nb_real], [1]]
2583:     else:
2584:         update_order = [[],[]]
2585: 
2586:     r_comp = np.arange(nb_real+1, len(poles)+1, 2)
2587:     # step 1.a
2588:     r_p = np.arange(1, hnb+nb_real % 2)
2589:     update_order[0].extend(2*r_p)
2590:     update_order[1].extend(2*r_p+1)
2591:     # step 1.b
2592:     update_order[0].extend(r_comp)
2593:     update_order[1].extend(r_comp+1)
2594:     # step 1.c
2595:     r_p = np.arange(1, hnb+1)
2596:     update_order[0].extend(2*r_p-1)
2597:     update_order[1].extend(2*r_p)
2598:     # step 1.d
2599:     if hnb == 0 and np.isreal(poles[0]):
2600:         update_order[0].append(1)
2601:         update_order[1].append(1)
2602:     update_order[0].extend(r_comp)
2603:     update_order[1].extend(r_comp+1)
2604:     # step 2.a
2605:     r_j = np.arange(2, hnb+nb_real % 2)
2606:     for j in r_j:
2607:         for i in range(1, hnb+1):
2608:             update_order[0].append(i)
2609:             update_order[1].append(i+j)
2610:     # step 2.b
2611:     if hnb == 0 and np.isreal(poles[0]):
2612:         update_order[0].append(1)
2613:         update_order[1].append(1)
2614:     update_order[0].extend(r_comp)
2615:     update_order[1].extend(r_comp+1)
2616:     # step 2.c
2617:     r_j = np.arange(2, hnb+nb_real % 2)
2618:     for j in r_j:
2619:         for i in range(hnb+1, nb_real+1):
2620:             idx_1 = i+j
2621:             if idx_1 > nb_real:
2622:                 idx_1 = i+j-nb_real
2623:             update_order[0].append(i)
2624:             update_order[1].append(idx_1)
2625:     # step 2.d
2626:     if hnb == 0 and np.isreal(poles[0]):
2627:         update_order[0].append(1)
2628:         update_order[1].append(1)
2629:     update_order[0].extend(r_comp)
2630:     update_order[1].extend(r_comp+1)
2631:     # step 3.a
2632:     for i in range(1, hnb+1):
2633:         update_order[0].append(i)
2634:         update_order[1].append(i+hnb)
2635:     # step 3.b
2636:     if hnb == 0 and np.isreal(poles[0]):
2637:         update_order[0].append(1)
2638:         update_order[1].append(1)
2639:     update_order[0].extend(r_comp)
2640:     update_order[1].extend(r_comp+1)
2641: 
2642:     update_order = np.array(update_order).T-1
2643:     stop = False
2644:     nb_try = 0
2645:     while nb_try < maxiter and not stop:
2646:         det_transfer_matrixb = np.abs(np.linalg.det(transfer_matrix))
2647:         for i, j in update_order:
2648:             if i == j:
2649:                 assert i == 0, "i!=0 for KNV call in YT"
2650:                 assert np.isreal(poles[i]), "calling KNV on a complex pole"
2651:                 _KNV0(B, ker_pole, transfer_matrix, i, poles)
2652:             else:
2653:                 transfer_matrix_not_i_j = np.delete(transfer_matrix, (i, j),
2654:                                                     axis=1)
2655:                 # after merge of gh-4249 great speed improvements could be
2656:                 # achieved using QR updates instead of full QR in the line below
2657: 
2658:                 #to debug with numpy qr uncomment the line below
2659:                 #Q, _ = np.linalg.qr(transfer_matrix_not_i_j, mode="complete")
2660:                 Q, _ = s_qr(transfer_matrix_not_i_j, mode="full")
2661: 
2662:                 if np.isreal(poles[i]):
2663:                     assert np.isreal(poles[j]), "mixing real and complex " + \
2664:                         "in YT_real" + str(poles)
2665:                     _YT_real(ker_pole, Q, transfer_matrix, i, j)
2666:                 else:
2667:                     assert ~np.isreal(poles[i]), "mixing real and complex " + \
2668:                         "in YT_real" + str(poles)
2669:                     _YT_complex(ker_pole, Q, transfer_matrix, i, j)
2670: 
2671:         det_transfer_matrix = np.max((np.sqrt(np.spacing(1)),
2672:                                   np.abs(np.linalg.det(transfer_matrix))))
2673:         cur_rtol = np.abs(
2674:             (det_transfer_matrix -
2675:              det_transfer_matrixb) /
2676:             det_transfer_matrix)
2677:         if cur_rtol < rtol and det_transfer_matrix > np.sqrt(np.spacing(1)):
2678:             # Convergence test from YT page 21
2679:             stop = True
2680:         nb_try += 1
2681:     return stop, cur_rtol, nb_try
2682: 
2683: 
2684: def _KNV0_loop(ker_pole, transfer_matrix, poles, B, maxiter, rtol):
2685:     '''
2686:     Loop over all poles one by one and apply KNV method 0 algorithm
2687:     '''
2688:     # This method is useful only because we need to be able to call
2689:     # _KNV0 from YT without looping over all poles, otherwise it would
2690:     # have been fine to mix _KNV0_loop and _KNV0 in a single function
2691:     stop = False
2692:     nb_try = 0
2693:     while nb_try < maxiter and not stop:
2694:         det_transfer_matrixb = np.abs(np.linalg.det(transfer_matrix))
2695:         for j in range(B.shape[0]):
2696:             _KNV0(B, ker_pole, transfer_matrix, j, poles)
2697: 
2698:         det_transfer_matrix = np.max((np.sqrt(np.spacing(1)),
2699:                                   np.abs(np.linalg.det(transfer_matrix))))
2700:         cur_rtol = np.abs((det_transfer_matrix - det_transfer_matrixb) /
2701:                        det_transfer_matrix)
2702:         if cur_rtol < rtol and det_transfer_matrix > np.sqrt(np.spacing(1)):
2703:             # Convergence test from YT page 21
2704:             stop = True
2705: 
2706:         nb_try += 1
2707:     return stop, cur_rtol, nb_try
2708: 
2709: 
2710: def place_poles(A, B, poles, method="YT", rtol=1e-3, maxiter=30):
2711:     '''
2712:     Compute K such that eigenvalues (A - dot(B, K))=poles.
2713: 
2714:     K is the gain matrix such as the plant described by the linear system
2715:     ``AX+BU`` will have its closed-loop poles, i.e the eigenvalues ``A - B*K``,
2716:     as close as possible to those asked for in poles.
2717: 
2718:     SISO, MISO and MIMO systems are supported.
2719: 
2720:     Parameters
2721:     ----------
2722:     A, B : ndarray
2723:         State-space representation of linear system ``AX + BU``.
2724:     poles : array_like
2725:         Desired real poles and/or complex conjugates poles.
2726:         Complex poles are only supported with ``method="YT"`` (default).
2727:     method: {'YT', 'KNV0'}, optional
2728:         Which method to choose to find the gain matrix K. One of:
2729: 
2730:             - 'YT': Yang Tits
2731:             - 'KNV0': Kautsky, Nichols, Van Dooren update method 0
2732: 
2733:         See References and Notes for details on the algorithms.
2734:     rtol: float, optional
2735:         After each iteration the determinant of the eigenvectors of
2736:         ``A - B*K`` is compared to its previous value, when the relative
2737:         error between these two values becomes lower than `rtol` the algorithm
2738:         stops.  Default is 1e-3.
2739:     maxiter: int, optional
2740:         Maximum number of iterations to compute the gain matrix.
2741:         Default is 30.
2742: 
2743:     Returns
2744:     -------
2745:     full_state_feedback : Bunch object
2746:         full_state_feedback is composed of:
2747:             gain_matrix : 1-D ndarray
2748:                 The closed loop matrix K such as the eigenvalues of ``A-BK``
2749:                 are as close as possible to the requested poles.
2750:             computed_poles : 1-D ndarray
2751:                 The poles corresponding to ``A-BK`` sorted as first the real
2752:                 poles in increasing order, then the complex congugates in
2753:                 lexicographic order.
2754:             requested_poles : 1-D ndarray
2755:                 The poles the algorithm was asked to place sorted as above,
2756:                 they may differ from what was achieved.
2757:             X : 2-D ndarray
2758:                 The transfer matrix such as ``X * diag(poles) = (A - B*K)*X``
2759:                 (see Notes)
2760:             rtol : float
2761:                 The relative tolerance achieved on ``det(X)`` (see Notes).
2762:                 `rtol` will be NaN if it is possible to solve the system
2763:                 ``diag(poles) = (A - B*K)``, or 0 when the optimization
2764:                 algorithms can't do anything i.e when ``B.shape[1] == 1``.
2765:             nb_iter : int
2766:                 The number of iterations performed before converging.
2767:                 `nb_iter` will be NaN if it is possible to solve the system
2768:                 ``diag(poles) = (A - B*K)``, or 0 when the optimization
2769:                 algorithms can't do anything i.e when ``B.shape[1] == 1``.
2770: 
2771:     Notes
2772:     -----
2773:     The Tits and Yang (YT), [2]_ paper is an update of the original Kautsky et
2774:     al. (KNV) paper [1]_.  KNV relies on rank-1 updates to find the transfer
2775:     matrix X such that ``X * diag(poles) = (A - B*K)*X``, whereas YT uses
2776:     rank-2 updates. This yields on average more robust solutions (see [2]_
2777:     pp 21-22), furthermore the YT algorithm supports complex poles whereas KNV
2778:     does not in its original version.  Only update method 0 proposed by KNV has
2779:     been implemented here, hence the name ``'KNV0'``.
2780: 
2781:     KNV extended to complex poles is used in Matlab's ``place`` function, YT is
2782:     distributed under a non-free licence by Slicot under the name ``robpole``.
2783:     It is unclear and undocumented how KNV0 has been extended to complex poles
2784:     (Tits and Yang claim on page 14 of their paper that their method can not be
2785:     used to extend KNV to complex poles), therefore only YT supports them in
2786:     this implementation.
2787: 
2788:     As the solution to the problem of pole placement is not unique for MIMO
2789:     systems, both methods start with a tentative transfer matrix which is
2790:     altered in various way to increase its determinant.  Both methods have been
2791:     proven to converge to a stable solution, however depending on the way the
2792:     initial transfer matrix is chosen they will converge to different
2793:     solutions and therefore there is absolutely no guarantee that using
2794:     ``'KNV0'`` will yield results similar to Matlab's or any other
2795:     implementation of these algorithms.
2796: 
2797:     Using the default method ``'YT'`` should be fine in most cases; ``'KNV0'``
2798:     is only provided because it is needed by ``'YT'`` in some specific cases.
2799:     Furthermore ``'YT'`` gives on average more robust results than ``'KNV0'``
2800:     when ``abs(det(X))`` is used as a robustness indicator.
2801: 
2802:     [2]_ is available as a technical report on the following URL:
2803:     http://drum.lib.umd.edu/handle/1903/5598
2804: 
2805:     References
2806:     ----------
2807:     .. [1] J. Kautsky, N.K. Nichols and P. van Dooren, "Robust pole assignment
2808:            in linear state feedback", International Journal of Control, Vol. 41
2809:            pp. 1129-1155, 1985.
2810:     .. [2] A.L. Tits and Y. Yang, "Globally convergent algorithms for robust
2811:            pole assignment by state feedback, IEEE Transactions on Automatic
2812:            Control, Vol. 41, pp. 1432-1452, 1996.
2813: 
2814:     Examples
2815:     --------
2816:     A simple example demonstrating real pole placement using both KNV and YT
2817:     algorithms.  This is example number 1 from section 4 of the reference KNV
2818:     publication ([1]_):
2819: 
2820:     >>> from scipy import signal
2821:     >>> import matplotlib.pyplot as plt
2822: 
2823:     >>> A = np.array([[ 1.380,  -0.2077,  6.715, -5.676  ],
2824:     ...               [-0.5814, -4.290,   0,      0.6750 ],
2825:     ...               [ 1.067,   4.273,  -6.654,  5.893  ],
2826:     ...               [ 0.0480,  4.273,   1.343, -2.104  ]])
2827:     >>> B = np.array([[ 0,      5.679 ],
2828:     ...               [ 1.136,  1.136 ],
2829:     ...               [ 0,      0,    ],
2830:     ...               [-3.146,  0     ]])
2831:     >>> P = np.array([-0.2, -0.5, -5.0566, -8.6659])
2832: 
2833:     Now compute K with KNV method 0, with the default YT method and with the YT
2834:     method while forcing 100 iterations of the algorithm and print some results
2835:     after each call.
2836: 
2837:     >>> fsf1 = signal.place_poles(A, B, P, method='KNV0')
2838:     >>> fsf1.gain_matrix
2839:     array([[ 0.20071427, -0.96665799,  0.24066128, -0.10279785],
2840:            [ 0.50587268,  0.57779091,  0.51795763, -0.41991442]])
2841: 
2842:     >>> fsf2 = signal.place_poles(A, B, P)  # uses YT method
2843:     >>> fsf2.computed_poles
2844:     array([-8.6659, -5.0566, -0.5   , -0.2   ])
2845: 
2846:     >>> fsf3 = signal.place_poles(A, B, P, rtol=-1, maxiter=100)
2847:     >>> fsf3.X
2848:     array([[ 0.52072442+0.j, -0.08409372+0.j, -0.56847937+0.j,  0.74823657+0.j],
2849:            [-0.04977751+0.j, -0.80872954+0.j,  0.13566234+0.j, -0.29322906+0.j],
2850:            [-0.82266932+0.j, -0.19168026+0.j, -0.56348322+0.j, -0.43815060+0.j],
2851:            [ 0.22267347+0.j,  0.54967577+0.j, -0.58387806+0.j, -0.40271926+0.j]])
2852: 
2853:     The absolute value of the determinant of X is a good indicator to check the
2854:     robustness of the results, both ``'KNV0'`` and ``'YT'`` aim at maximizing
2855:     it.  Below a comparison of the robustness of the results above:
2856: 
2857:     >>> abs(np.linalg.det(fsf1.X)) < abs(np.linalg.det(fsf2.X))
2858:     True
2859:     >>> abs(np.linalg.det(fsf2.X)) < abs(np.linalg.det(fsf3.X))
2860:     True
2861: 
2862:     Now a simple example for complex poles:
2863: 
2864:     >>> A = np.array([[ 0,  7/3.,  0,   0   ],
2865:     ...               [ 0,   0,    0,  7/9. ],
2866:     ...               [ 0,   0,    0,   0   ],
2867:     ...               [ 0,   0,    0,   0   ]])
2868:     >>> B = np.array([[ 0,  0 ],
2869:     ...               [ 0,  0 ],
2870:     ...               [ 1,  0 ],
2871:     ...               [ 0,  1 ]])
2872:     >>> P = np.array([-3, -1, -2-1j, -2+1j]) / 3.
2873:     >>> fsf = signal.place_poles(A, B, P, method='YT')
2874: 
2875:     We can plot the desired and computed poles in the complex plane:
2876: 
2877:     >>> t = np.linspace(0, 2*np.pi, 401)
2878:     >>> plt.plot(np.cos(t), np.sin(t), 'k--')  # unit circle
2879:     >>> plt.plot(fsf.requested_poles.real, fsf.requested_poles.imag,
2880:     ...          'wo', label='Desired')
2881:     >>> plt.plot(fsf.computed_poles.real, fsf.computed_poles.imag, 'bx',
2882:     ...          label='Placed')
2883:     >>> plt.grid()
2884:     >>> plt.axis('image')
2885:     >>> plt.axis([-1.1, 1.1, -1.1, 1.1])
2886:     >>> plt.legend(bbox_to_anchor=(1.05, 1), loc=2, numpoints=1)
2887: 
2888:     '''
2889:     # Move away all the inputs checking, it only adds noise to the code
2890:     update_loop, poles = _valid_inputs(A, B, poles, method, rtol, maxiter)
2891: 
2892:     # The current value of the relative tolerance we achieved
2893:     cur_rtol = 0
2894:     # The number of iterations needed before converging
2895:     nb_iter = 0
2896: 
2897:     # Step A: QR decomposition of B page 1132 KN
2898:     # to debug with numpy qr uncomment the line below
2899:     # u, z = np.linalg.qr(B, mode="complete")
2900:     u, z = s_qr(B, mode="full")
2901:     rankB = np.linalg.matrix_rank(B)
2902:     u0 = u[:, :rankB]
2903:     u1 = u[:, rankB:]
2904:     z = z[:rankB, :]
2905: 
2906:     # If we can use the identity matrix as X the solution is obvious
2907:     if B.shape[0] == rankB:
2908:         # if B is square and full rank there is only one solution
2909:         # such as (A+BK)=inv(X)*diag(P)*X with X=eye(A.shape[0])
2910:         # i.e K=inv(B)*(diag(P)-A)
2911:         # if B has as many lines as its rank (but not square) there are many
2912:         # solutions and we can choose one using least squares
2913:         # => use lstsq in both cases.
2914:         # In both cases the transfer matrix X will be eye(A.shape[0]) and I
2915:         # can hardly think of a better one so there is nothing to optimize
2916:         #
2917:         # for complex poles we use the following trick
2918:         #
2919:         # |a -b| has for eigenvalues a+b and a-b
2920:         # |b a|
2921:         #
2922:         # |a+bi 0| has the obvious eigenvalues a+bi and a-bi
2923:         # |0 a-bi|
2924:         #
2925:         # e.g solving the first one in R gives the solution
2926:         # for the second one in C
2927:         diag_poles = np.zeros(A.shape)
2928:         idx = 0
2929:         while idx < poles.shape[0]:
2930:             p = poles[idx]
2931:             diag_poles[idx, idx] = np.real(p)
2932:             if ~np.isreal(p):
2933:                 diag_poles[idx, idx+1] = -np.imag(p)
2934:                 diag_poles[idx+1, idx+1] = np.real(p)
2935:                 diag_poles[idx+1, idx] = np.imag(p)
2936:                 idx += 1  # skip next one
2937:             idx += 1
2938:         gain_matrix = np.linalg.lstsq(B, diag_poles-A, rcond=-1)[0]
2939:         transfer_matrix = np.eye(A.shape[0])
2940:         cur_rtol = np.nan
2941:         nb_iter = np.nan
2942:     else:
2943:         # step A (p1144 KNV) and begining of step F: decompose
2944:         # dot(U1.T, A-P[i]*I).T and build our set of transfer_matrix vectors
2945:         # in the same loop
2946:         ker_pole = []
2947: 
2948:         # flag to skip the conjugate of a complex pole
2949:         skip_conjugate = False
2950:         # select orthonormal base ker_pole for each Pole and vectors for
2951:         # transfer_matrix
2952:         for j in range(B.shape[0]):
2953:             if skip_conjugate:
2954:                 skip_conjugate = False
2955:                 continue
2956:             pole_space_j = np.dot(u1.T, A-poles[j]*np.eye(B.shape[0])).T
2957: 
2958:             # after QR Q=Q0|Q1
2959:             # only Q0 is used to reconstruct  the qr'ed (dot Q, R) matrix.
2960:             # Q1 is orthogonnal to Q0 and will be multiplied by the zeros in
2961:             # R when using mode "complete". In default mode Q1 and the zeros
2962:             # in R are not computed
2963: 
2964:             # To debug with numpy qr uncomment the line below
2965:             # Q, _ = np.linalg.qr(pole_space_j, mode="complete")
2966:             Q, _ = s_qr(pole_space_j, mode="full")
2967: 
2968:             ker_pole_j = Q[:, pole_space_j.shape[1]:]
2969: 
2970:             # We want to select one vector in ker_pole_j to build the transfer
2971:             # matrix, however qr returns sometimes vectors with zeros on the
2972:             # same line for each pole and this yields very long convergence
2973:             # times.
2974:             # Or some other times a set of vectors, one with zero imaginary
2975:             # part and one (or several) with imaginary parts. After trying
2976:             # many ways to select the best possible one (eg ditch vectors
2977:             # with zero imaginary part for complex poles) I ended up summing
2978:             # all vectors in ker_pole_j, this solves 100% of the problems and
2979:             # is a valid choice for transfer_matrix.
2980:             # This way for complex poles we are sure to have a non zero
2981:             # imaginary part that way, and the problem of lines full of zeros
2982:             # in transfer_matrix is solved too as when a vector from
2983:             # ker_pole_j has a zero the other one(s) when
2984:             # ker_pole_j.shape[1]>1) for sure won't have a zero there.
2985: 
2986:             transfer_matrix_j = np.sum(ker_pole_j, axis=1)[:, np.newaxis]
2987:             transfer_matrix_j = (transfer_matrix_j /
2988:                                  np.linalg.norm(transfer_matrix_j))
2989:             if ~np.isreal(poles[j]):  # complex pole
2990:                 transfer_matrix_j = np.hstack([np.real(transfer_matrix_j),
2991:                                                np.imag(transfer_matrix_j)])
2992:                 ker_pole.extend([ker_pole_j, ker_pole_j])
2993: 
2994:                 # Skip next pole as it is the conjugate
2995:                 skip_conjugate = True
2996:             else:  # real pole, nothing to do
2997:                 ker_pole.append(ker_pole_j)
2998: 
2999:             if j == 0:
3000:                 transfer_matrix = transfer_matrix_j
3001:             else:
3002:                 transfer_matrix = np.hstack((transfer_matrix, transfer_matrix_j))
3003: 
3004:         if rankB > 1:  # otherwise there is nothing we can optimize
3005:             stop, cur_rtol, nb_iter = update_loop(ker_pole, transfer_matrix,
3006:                                                   poles, B, maxiter, rtol)
3007:             if not stop and rtol > 0:
3008:                 # if rtol<=0 the user has probably done that on purpose,
3009:                 # don't annoy him
3010:                 err_msg = (
3011:                     "Convergence was not reached after maxiter iterations.\n"
3012:                     "You asked for a relative tolerance of %f we got %f" %
3013:                     (rtol, cur_rtol)
3014:                     )
3015:                 warnings.warn(err_msg)
3016: 
3017:         # reconstruct transfer_matrix to match complex conjugate pairs,
3018:         # ie transfer_matrix_j/transfer_matrix_j+1 are
3019:         # Re(Complex_pole), Im(Complex_pole) now and will be Re-Im/Re+Im after
3020:         transfer_matrix = transfer_matrix.astype(complex)
3021:         idx = 0
3022:         while idx < poles.shape[0]-1:
3023:             if ~np.isreal(poles[idx]):
3024:                 rel = transfer_matrix[:, idx].copy()
3025:                 img = transfer_matrix[:, idx+1]
3026:                 # rel will be an array referencing a column of transfer_matrix
3027:                 # if we don't copy() it will changer after the next line and
3028:                 # and the line after will not yield the correct value
3029:                 transfer_matrix[:, idx] = rel-1j*img
3030:                 transfer_matrix[:, idx+1] = rel+1j*img
3031:                 idx += 1  # skip next one
3032:             idx += 1
3033: 
3034:         try:
3035:             m = np.linalg.solve(transfer_matrix.T, np.dot(np.diag(poles),
3036:                                                           transfer_matrix.T)).T
3037:             gain_matrix = np.linalg.solve(z, np.dot(u0.T, m-A))
3038:         except np.linalg.LinAlgError:
3039:             raise ValueError("The poles you've chosen can't be placed. "
3040:                              "Check the controllability matrix and try "
3041:                              "another set of poles")
3042: 
3043:     # Beware: Kautsky solves A+BK but the usual form is A-BK
3044:     gain_matrix = -gain_matrix
3045:     # K still contains complex with ~=0j imaginary parts, get rid of them
3046:     gain_matrix = np.real(gain_matrix)
3047: 
3048:     full_state_feedback = Bunch()
3049:     full_state_feedback.gain_matrix = gain_matrix
3050:     full_state_feedback.computed_poles = _order_complex_poles(
3051:         np.linalg.eig(A - np.dot(B, gain_matrix))[0]
3052:         )
3053:     full_state_feedback.requested_poles = poles
3054:     full_state_feedback.X = transfer_matrix
3055:     full_state_feedback.rtol = cur_rtol
3056:     full_state_feedback.nb_iter = nb_iter
3057: 
3058:     return full_state_feedback
3059: 
3060: 
3061: def dlsim(system, u, t=None, x0=None):
3062:     '''
3063:     Simulate output of a discrete-time linear system.
3064: 
3065:     Parameters
3066:     ----------
3067:     system : tuple of array_like or instance of `dlti`
3068:         A tuple describing the system.
3069:         The following gives the number of elements in the tuple and
3070:         the interpretation:
3071: 
3072:             * 1: (instance of `dlti`)
3073:             * 3: (num, den, dt)
3074:             * 4: (zeros, poles, gain, dt)
3075:             * 5: (A, B, C, D, dt)
3076: 
3077:     u : array_like
3078:         An input array describing the input at each time `t` (interpolation is
3079:         assumed between given times).  If there are multiple inputs, then each
3080:         column of the rank-2 array represents an input.
3081:     t : array_like, optional
3082:         The time steps at which the input is defined.  If `t` is given, it
3083:         must be the same length as `u`, and the final value in `t` determines
3084:         the number of steps returned in the output.
3085:     x0 : array_like, optional
3086:         The initial conditions on the state vector (zero by default).
3087: 
3088:     Returns
3089:     -------
3090:     tout : ndarray
3091:         Time values for the output, as a 1-D array.
3092:     yout : ndarray
3093:         System response, as a 1-D array.
3094:     xout : ndarray, optional
3095:         Time-evolution of the state-vector.  Only generated if the input is a
3096:         `StateSpace` system.
3097: 
3098:     See Also
3099:     --------
3100:     lsim, dstep, dimpulse, cont2discrete
3101: 
3102:     Examples
3103:     --------
3104:     A simple integrator transfer function with a discrete time step of 1.0
3105:     could be implemented as:
3106: 
3107:     >>> from scipy import signal
3108:     >>> tf = ([1.0,], [1.0, -1.0], 1.0)
3109:     >>> t_in = [0.0, 1.0, 2.0, 3.0]
3110:     >>> u = np.asarray([0.0, 0.0, 1.0, 1.0])
3111:     >>> t_out, y = signal.dlsim(tf, u, t=t_in)
3112:     >>> y.T
3113:     array([[ 0.,  0.,  0.,  1.]])
3114: 
3115:     '''
3116:     # Convert system to dlti-StateSpace
3117:     if isinstance(system, lti):
3118:         raise AttributeError('dlsim can only be used with discrete-time dlti '
3119:                              'systems.')
3120:     elif not isinstance(system, dlti):
3121:         system = dlti(*system[:-1], dt=system[-1])
3122: 
3123:     # Condition needed to ensure output remains compatible
3124:     is_ss_input = isinstance(system, StateSpace)
3125:     system = system._as_ss()
3126: 
3127:     u = np.atleast_1d(u)
3128: 
3129:     if u.ndim == 1:
3130:         u = np.atleast_2d(u).T
3131: 
3132:     if t is None:
3133:         out_samples = len(u)
3134:         stoptime = (out_samples - 1) * system.dt
3135:     else:
3136:         stoptime = t[-1]
3137:         out_samples = int(np.floor(stoptime / system.dt)) + 1
3138: 
3139:     # Pre-build output arrays
3140:     xout = np.zeros((out_samples, system.A.shape[0]))
3141:     yout = np.zeros((out_samples, system.C.shape[0]))
3142:     tout = np.linspace(0.0, stoptime, num=out_samples)
3143: 
3144:     # Check initial condition
3145:     if x0 is None:
3146:         xout[0, :] = np.zeros((system.A.shape[1],))
3147:     else:
3148:         xout[0, :] = np.asarray(x0)
3149: 
3150:     # Pre-interpolate inputs into the desired time steps
3151:     if t is None:
3152:         u_dt = u
3153:     else:
3154:         if len(u.shape) == 1:
3155:             u = u[:, np.newaxis]
3156: 
3157:         u_dt_interp = interp1d(t, u.transpose(), copy=False, bounds_error=True)
3158:         u_dt = u_dt_interp(tout).transpose()
3159: 
3160:     # Simulate the system
3161:     for i in range(0, out_samples - 1):
3162:         xout[i+1, :] = (np.dot(system.A, xout[i, :]) +
3163:                         np.dot(system.B, u_dt[i, :]))
3164:         yout[i, :] = (np.dot(system.C, xout[i, :]) +
3165:                       np.dot(system.D, u_dt[i, :]))
3166: 
3167:     # Last point
3168:     yout[out_samples-1, :] = (np.dot(system.C, xout[out_samples-1, :]) +
3169:                               np.dot(system.D, u_dt[out_samples-1, :]))
3170: 
3171:     if is_ss_input:
3172:         return tout, yout, xout
3173:     else:
3174:         return tout, yout
3175: 
3176: 
3177: def dimpulse(system, x0=None, t=None, n=None):
3178:     '''
3179:     Impulse response of discrete-time system.
3180: 
3181:     Parameters
3182:     ----------
3183:     system : tuple of array_like or instance of `dlti`
3184:         A tuple describing the system.
3185:         The following gives the number of elements in the tuple and
3186:         the interpretation:
3187: 
3188:             * 1: (instance of `dlti`)
3189:             * 3: (num, den, dt)
3190:             * 4: (zeros, poles, gain, dt)
3191:             * 5: (A, B, C, D, dt)
3192: 
3193:     x0 : array_like, optional
3194:         Initial state-vector.  Defaults to zero.
3195:     t : array_like, optional
3196:         Time points.  Computed if not given.
3197:     n : int, optional
3198:         The number of time points to compute (if `t` is not given).
3199: 
3200:     Returns
3201:     -------
3202:     tout : ndarray
3203:         Time values for the output, as a 1-D array.
3204:     yout : ndarray
3205:         Impulse response of system.  Each element of the tuple represents
3206:         the output of the system based on an impulse in each input.
3207: 
3208:     See Also
3209:     --------
3210:     impulse, dstep, dlsim, cont2discrete
3211: 
3212:     '''
3213:     # Convert system to dlti-StateSpace
3214:     if isinstance(system, dlti):
3215:         system = system._as_ss()
3216:     elif isinstance(system, lti):
3217:         raise AttributeError('dimpulse can only be used with discrete-time '
3218:                              'dlti systems.')
3219:     else:
3220:         system = dlti(*system[:-1], dt=system[-1])._as_ss()
3221: 
3222:     # Default to 100 samples if unspecified
3223:     if n is None:
3224:         n = 100
3225: 
3226:     # If time is not specified, use the number of samples
3227:     # and system dt
3228:     if t is None:
3229:         t = np.linspace(0, n * system.dt, n, endpoint=False)
3230:     else:
3231:         t = np.asarray(t)
3232: 
3233:     # For each input, implement a step change
3234:     yout = None
3235:     for i in range(0, system.inputs):
3236:         u = np.zeros((t.shape[0], system.inputs))
3237:         u[0, i] = 1.0
3238: 
3239:         one_output = dlsim(system, u, t=t, x0=x0)
3240: 
3241:         if yout is None:
3242:             yout = (one_output[1],)
3243:         else:
3244:             yout = yout + (one_output[1],)
3245: 
3246:         tout = one_output[0]
3247: 
3248:     return tout, yout
3249: 
3250: 
3251: def dstep(system, x0=None, t=None, n=None):
3252:     '''
3253:     Step response of discrete-time system.
3254: 
3255:     Parameters
3256:     ----------
3257:     system : tuple of array_like
3258:         A tuple describing the system.
3259:         The following gives the number of elements in the tuple and
3260:         the interpretation:
3261: 
3262:             * 1: (instance of `dlti`)
3263:             * 3: (num, den, dt)
3264:             * 4: (zeros, poles, gain, dt)
3265:             * 5: (A, B, C, D, dt)
3266: 
3267:     x0 : array_like, optional
3268:         Initial state-vector.  Defaults to zero.
3269:     t : array_like, optional
3270:         Time points.  Computed if not given.
3271:     n : int, optional
3272:         The number of time points to compute (if `t` is not given).
3273: 
3274:     Returns
3275:     -------
3276:     tout : ndarray
3277:         Output time points, as a 1-D array.
3278:     yout : ndarray
3279:         Step response of system.  Each element of the tuple represents
3280:         the output of the system based on a step response to each input.
3281: 
3282:     See Also
3283:     --------
3284:     step, dimpulse, dlsim, cont2discrete
3285: 
3286:     '''
3287:     # Convert system to dlti-StateSpace
3288:     if isinstance(system, dlti):
3289:         system = system._as_ss()
3290:     elif isinstance(system, lti):
3291:         raise AttributeError('dstep can only be used with discrete-time dlti '
3292:                              'systems.')
3293:     else:
3294:         system = dlti(*system[:-1], dt=system[-1])._as_ss()
3295: 
3296:     # Default to 100 samples if unspecified
3297:     if n is None:
3298:         n = 100
3299: 
3300:     # If time is not specified, use the number of samples
3301:     # and system dt
3302:     if t is None:
3303:         t = np.linspace(0, n * system.dt, n, endpoint=False)
3304:     else:
3305:         t = np.asarray(t)
3306: 
3307:     # For each input, implement a step change
3308:     yout = None
3309:     for i in range(0, system.inputs):
3310:         u = np.zeros((t.shape[0], system.inputs))
3311:         u[:, i] = np.ones((t.shape[0],))
3312: 
3313:         one_output = dlsim(system, u, t=t, x0=x0)
3314: 
3315:         if yout is None:
3316:             yout = (one_output[1],)
3317:         else:
3318:             yout = yout + (one_output[1],)
3319: 
3320:         tout = one_output[0]
3321: 
3322:     return tout, yout
3323: 
3324: 
3325: def dfreqresp(system, w=None, n=10000, whole=False):
3326:     '''
3327:     Calculate the frequency response of a discrete-time system.
3328: 
3329:     Parameters
3330:     ----------
3331:     system : an instance of the `dlti` class or a tuple describing the system.
3332:         The following gives the number of elements in the tuple and
3333:         the interpretation:
3334: 
3335:             * 1 (instance of `dlti`)
3336:             * 2 (numerator, denominator, dt)
3337:             * 3 (zeros, poles, gain, dt)
3338:             * 4 (A, B, C, D, dt)
3339: 
3340:     w : array_like, optional
3341:         Array of frequencies (in radians/sample). Magnitude and phase data is
3342:         calculated for every value in this array. If not given a reasonable
3343:         set will be calculated.
3344:     n : int, optional
3345:         Number of frequency points to compute if `w` is not given. The `n`
3346:         frequencies are logarithmically spaced in an interval chosen to
3347:         include the influence of the poles and zeros of the system.
3348:     whole : bool, optional
3349:         Normally, if 'w' is not given, frequencies are computed from 0 to the
3350:         Nyquist frequency, pi radians/sample (upper-half of unit-circle). If
3351:         `whole` is True, compute frequencies from 0 to 2*pi radians/sample.
3352: 
3353:     Returns
3354:     -------
3355:     w : 1D ndarray
3356:         Frequency array [radians/sample]
3357:     H : 1D ndarray
3358:         Array of complex magnitude values
3359: 
3360:     Notes
3361:     -----
3362:     If (num, den) is passed in for ``system``, coefficients for both the
3363:     numerator and denominator should be specified in descending exponent
3364:     order (e.g. ``z^2 + 3z + 5`` would be represented as ``[1, 3, 5]``).
3365: 
3366:     .. versionadded:: 0.18.0
3367: 
3368:     Examples
3369:     --------
3370:     Generating the Nyquist plot of a transfer function
3371: 
3372:     >>> from scipy import signal
3373:     >>> import matplotlib.pyplot as plt
3374: 
3375:     Transfer function: H(z) = 1 / (z^2 + 2z + 3)
3376: 
3377:     >>> sys = signal.TransferFunction([1], [1, 2, 3], dt=0.05)
3378: 
3379:     >>> w, H = signal.dfreqresp(sys)
3380: 
3381:     >>> plt.figure()
3382:     >>> plt.plot(H.real, H.imag, "b")
3383:     >>> plt.plot(H.real, -H.imag, "r")
3384:     >>> plt.show()
3385: 
3386:     '''
3387:     if not isinstance(system, dlti):
3388:         if isinstance(system, lti):
3389:             raise AttributeError('dfreqresp can only be used with '
3390:                                  'discrete-time systems.')
3391: 
3392:         system = dlti(*system[:-1], dt=system[-1])
3393: 
3394:     if isinstance(system, StateSpace):
3395:         # No SS->ZPK code exists right now, just SS->TF->ZPK
3396:         system = system._as_tf()
3397: 
3398:     if not isinstance(system, (TransferFunction, ZerosPolesGain)):
3399:         raise ValueError('Unknown system type')
3400: 
3401:     if system.inputs != 1 or system.outputs != 1:
3402:         raise ValueError("dfreqresp requires a SISO (single input, single "
3403:                          "output) system.")
3404: 
3405:     if w is not None:
3406:         worN = w
3407:     else:
3408:         worN = n
3409: 
3410:     if isinstance(system, TransferFunction):
3411:         # Convert numerator and denominator from polynomials in the variable
3412:         # 'z' to polynomials in the variable 'z^-1', as freqz expects.
3413:         num, den = TransferFunction._z_to_zinv(system.num.ravel(), system.den)
3414:         w, h = freqz(num, den, worN=worN, whole=whole)
3415: 
3416:     elif isinstance(system, ZerosPolesGain):
3417:         w, h = freqz_zpk(system.zeros, system.poles, system.gain, worN=worN,
3418:                          whole=whole)
3419: 
3420:     return w, h
3421: 
3422: 
3423: def dbode(system, w=None, n=100):
3424:     '''
3425:     Calculate Bode magnitude and phase data of a discrete-time system.
3426: 
3427:     Parameters
3428:     ----------
3429:     system : an instance of the LTI class or a tuple describing the system.
3430:         The following gives the number of elements in the tuple and
3431:         the interpretation:
3432: 
3433:             * 1 (instance of `dlti`)
3434:             * 2 (num, den, dt)
3435:             * 3 (zeros, poles, gain, dt)
3436:             * 4 (A, B, C, D, dt)
3437: 
3438:     w : array_like, optional
3439:         Array of frequencies (in radians/sample). Magnitude and phase data is
3440:         calculated for every value in this array. If not given a reasonable
3441:         set will be calculated.
3442:     n : int, optional
3443:         Number of frequency points to compute if `w` is not given. The `n`
3444:         frequencies are logarithmically spaced in an interval chosen to
3445:         include the influence of the poles and zeros of the system.
3446: 
3447:     Returns
3448:     -------
3449:     w : 1D ndarray
3450:         Frequency array [rad/time_unit]
3451:     mag : 1D ndarray
3452:         Magnitude array [dB]
3453:     phase : 1D ndarray
3454:         Phase array [deg]
3455: 
3456:     Notes
3457:     -----
3458:     If (num, den) is passed in for ``system``, coefficients for both the
3459:     numerator and denominator should be specified in descending exponent
3460:     order (e.g. ``z^2 + 3z + 5`` would be represented as ``[1, 3, 5]``).
3461: 
3462:     .. versionadded:: 0.18.0
3463: 
3464:     Examples
3465:     --------
3466:     >>> from scipy import signal
3467:     >>> import matplotlib.pyplot as plt
3468: 
3469:     Transfer function: H(z) = 1 / (z^2 + 2z + 3)
3470: 
3471:     >>> sys = signal.TransferFunction([1], [1, 2, 3], dt=0.05)
3472: 
3473:     Equivalent: sys.bode()
3474: 
3475:     >>> w, mag, phase = signal.dbode(sys)
3476: 
3477:     >>> plt.figure()
3478:     >>> plt.semilogx(w, mag)    # Bode magnitude plot
3479:     >>> plt.figure()
3480:     >>> plt.semilogx(w, phase)  # Bode phase plot
3481:     >>> plt.show()
3482: 
3483:     '''
3484:     w, y = dfreqresp(system, w=w, n=n)
3485: 
3486:     if isinstance(system, dlti):
3487:         dt = system.dt
3488:     else:
3489:         dt = system[-1]
3490: 
3491:     mag = 20.0 * numpy.log10(abs(y))
3492:     phase = numpy.rad2deg(numpy.unwrap(numpy.angle(y)))
3493:     
3494:     return w / dt, mag, phase
3495: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_267164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4, (-1)), 'str', '\nltisys -- a collection of classes and functions for modeling linear\ntime invariant systems.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'import warnings' statement (line 24)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from scipy.linalg import s_qr' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_267165 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.linalg')

if (type(import_267165) is not StypyTypeError):

    if (import_267165 != 'pyd_module'):
        __import__(import_267165)
        sys_modules_267166 = sys.modules[import_267165]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.linalg', sys_modules_267166.module_type_store, module_type_store, ['qr'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_267166, sys_modules_267166.module_type_store, module_type_store)
    else:
        from scipy.linalg import qr as s_qr

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.linalg', None, module_type_store, ['qr'], [s_qr])

else:
    # Assigning a type to the variable 'scipy.linalg' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.linalg', import_267165)

# Adding an alias
module_type_store.add_alias('s_qr', 'qr')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'from scipy import integrate, interpolate, linalg' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_267167 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'scipy')

if (type(import_267167) is not StypyTypeError):

    if (import_267167 != 'pyd_module'):
        __import__(import_267167)
        sys_modules_267168 = sys.modules[import_267167]
        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'scipy', sys_modules_267168.module_type_store, module_type_store, ['integrate', 'interpolate', 'linalg'])
        nest_module(stypy.reporting.localization.Localization(__file__, 30, 0), __file__, sys_modules_267168, sys_modules_267168.module_type_store, module_type_store)
    else:
        from scipy import integrate, interpolate, linalg

        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'scipy', None, module_type_store, ['integrate', 'interpolate', 'linalg'], [integrate, interpolate, linalg])

else:
    # Assigning a type to the variable 'scipy' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'scipy', import_267167)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'from scipy.interpolate import interp1d' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_267169 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'scipy.interpolate')

if (type(import_267169) is not StypyTypeError):

    if (import_267169 != 'pyd_module'):
        __import__(import_267169)
        sys_modules_267170 = sys.modules[import_267169]
        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'scipy.interpolate', sys_modules_267170.module_type_store, module_type_store, ['interp1d'])
        nest_module(stypy.reporting.localization.Localization(__file__, 31, 0), __file__, sys_modules_267170, sys_modules_267170.module_type_store, module_type_store)
    else:
        from scipy.interpolate import interp1d

        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'scipy.interpolate', None, module_type_store, ['interp1d'], [interp1d])

else:
    # Assigning a type to the variable 'scipy.interpolate' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'scipy.interpolate', import_267169)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'from scipy._lib.six import xrange' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_267171 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'scipy._lib.six')

if (type(import_267171) is not StypyTypeError):

    if (import_267171 != 'pyd_module'):
        __import__(import_267171)
        sys_modules_267172 = sys.modules[import_267171]
        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'scipy._lib.six', sys_modules_267172.module_type_store, module_type_store, ['xrange'])
        nest_module(stypy.reporting.localization.Localization(__file__, 32, 0), __file__, sys_modules_267172, sys_modules_267172.module_type_store, module_type_store)
    else:
        from scipy._lib.six import xrange

        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'scipy._lib.six', None, module_type_store, ['xrange'], [xrange])

else:
    # Assigning a type to the variable 'scipy._lib.six' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'scipy._lib.six', import_267171)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 0))

# 'from scipy.signal.filter_design import tf2zpk, zpk2tf, normalize, freqs, freqz, freqs_zpk, freqz_zpk' statement (line 33)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_267173 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy.signal.filter_design')

if (type(import_267173) is not StypyTypeError):

    if (import_267173 != 'pyd_module'):
        __import__(import_267173)
        sys_modules_267174 = sys.modules[import_267173]
        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy.signal.filter_design', sys_modules_267174.module_type_store, module_type_store, ['tf2zpk', 'zpk2tf', 'normalize', 'freqs', 'freqz', 'freqs_zpk', 'freqz_zpk'])
        nest_module(stypy.reporting.localization.Localization(__file__, 33, 0), __file__, sys_modules_267174, sys_modules_267174.module_type_store, module_type_store)
    else:
        from scipy.signal.filter_design import tf2zpk, zpk2tf, normalize, freqs, freqz, freqs_zpk, freqz_zpk

        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy.signal.filter_design', None, module_type_store, ['tf2zpk', 'zpk2tf', 'normalize', 'freqs', 'freqz', 'freqs_zpk', 'freqz_zpk'], [tf2zpk, zpk2tf, normalize, freqs, freqz, freqs_zpk, freqz_zpk])

else:
    # Assigning a type to the variable 'scipy.signal.filter_design' (line 33)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'scipy.signal.filter_design', import_267173)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 35, 0))

# 'from scipy.signal.lti_conversion import tf2ss, abcd_normalize, ss2tf, zpk2ss, ss2zpk, cont2discrete' statement (line 35)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_267175 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'scipy.signal.lti_conversion')

if (type(import_267175) is not StypyTypeError):

    if (import_267175 != 'pyd_module'):
        __import__(import_267175)
        sys_modules_267176 = sys.modules[import_267175]
        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'scipy.signal.lti_conversion', sys_modules_267176.module_type_store, module_type_store, ['tf2ss', 'abcd_normalize', 'ss2tf', 'zpk2ss', 'ss2zpk', 'cont2discrete'])
        nest_module(stypy.reporting.localization.Localization(__file__, 35, 0), __file__, sys_modules_267176, sys_modules_267176.module_type_store, module_type_store)
    else:
        from scipy.signal.lti_conversion import tf2ss, abcd_normalize, ss2tf, zpk2ss, ss2zpk, cont2discrete

        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'scipy.signal.lti_conversion', None, module_type_store, ['tf2ss', 'abcd_normalize', 'ss2tf', 'zpk2ss', 'ss2zpk', 'cont2discrete'], [tf2ss, abcd_normalize, ss2tf, zpk2ss, ss2zpk, cont2discrete])

else:
    # Assigning a type to the variable 'scipy.signal.lti_conversion' (line 35)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'scipy.signal.lti_conversion', import_267175)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'import numpy' statement (line 38)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_267177 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy')

if (type(import_267177) is not StypyTypeError):

    if (import_267177 != 'pyd_module'):
        __import__(import_267177)
        sys_modules_267178 = sys.modules[import_267177]
        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy', sys_modules_267178.module_type_store, module_type_store)
    else:
        import numpy

        import_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'numpy', import_267177)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 0))

# 'import numpy' statement (line 39)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_267179 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy')

if (type(import_267179) is not StypyTypeError):

    if (import_267179 != 'pyd_module'):
        __import__(import_267179)
        sys_modules_267180 = sys.modules[import_267179]
        import_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'np', sys_modules_267180.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'numpy', import_267179)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 40, 0))

# 'from numpy import real, atleast_1d, atleast_2d, squeeze, asarray, zeros, dot, transpose, ones, zeros_like, linspace, nan_to_num' statement (line 40)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_267181 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'numpy')

if (type(import_267181) is not StypyTypeError):

    if (import_267181 != 'pyd_module'):
        __import__(import_267181)
        sys_modules_267182 = sys.modules[import_267181]
        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'numpy', sys_modules_267182.module_type_store, module_type_store, ['real', 'atleast_1d', 'atleast_2d', 'squeeze', 'asarray', 'zeros', 'dot', 'transpose', 'ones', 'zeros_like', 'linspace', 'nan_to_num'])
        nest_module(stypy.reporting.localization.Localization(__file__, 40, 0), __file__, sys_modules_267182, sys_modules_267182.module_type_store, module_type_store)
    else:
        from numpy import real, atleast_1d, atleast_2d, squeeze, asarray, zeros, dot, transpose, ones, zeros_like, linspace, nan_to_num

        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'numpy', None, module_type_store, ['real', 'atleast_1d', 'atleast_2d', 'squeeze', 'asarray', 'zeros', 'dot', 'transpose', 'ones', 'zeros_like', 'linspace', 'nan_to_num'], [real, atleast_1d, atleast_2d, squeeze, asarray, zeros, dot, transpose, ones, zeros_like, linspace, nan_to_num])

else:
    # Assigning a type to the variable 'numpy' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'numpy', import_267181)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 42, 0))

# 'import copy' statement (line 42)
import copy

import_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'copy', copy, module_type_store)


# Assigning a List to a Name (line 44):

# Assigning a List to a Name (line 44):
__all__ = ['lti', 'dlti', 'TransferFunction', 'ZerosPolesGain', 'StateSpace', 'lsim', 'lsim2', 'impulse', 'impulse2', 'step', 'step2', 'bode', 'freqresp', 'place_poles', 'dlsim', 'dstep', 'dimpulse', 'dfreqresp', 'dbode']
module_type_store.set_exportable_members(['lti', 'dlti', 'TransferFunction', 'ZerosPolesGain', 'StateSpace', 'lsim', 'lsim2', 'impulse', 'impulse2', 'step', 'step2', 'bode', 'freqresp', 'place_poles', 'dlsim', 'dstep', 'dimpulse', 'dfreqresp', 'dbode'])

# Obtaining an instance of the builtin type 'list' (line 44)
list_267183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 44)
# Adding element type (line 44)
str_267184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 11), 'str', 'lti')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267184)
# Adding element type (line 44)
str_267185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 18), 'str', 'dlti')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267185)
# Adding element type (line 44)
str_267186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 26), 'str', 'TransferFunction')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267186)
# Adding element type (line 44)
str_267187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 46), 'str', 'ZerosPolesGain')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267187)
# Adding element type (line 44)
str_267188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 64), 'str', 'StateSpace')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267188)
# Adding element type (line 44)
str_267189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 11), 'str', 'lsim')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267189)
# Adding element type (line 44)
str_267190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 19), 'str', 'lsim2')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267190)
# Adding element type (line 44)
str_267191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 28), 'str', 'impulse')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267191)
# Adding element type (line 44)
str_267192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 39), 'str', 'impulse2')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267192)
# Adding element type (line 44)
str_267193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 51), 'str', 'step')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267193)
# Adding element type (line 44)
str_267194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 59), 'str', 'step2')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267194)
# Adding element type (line 44)
str_267195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 68), 'str', 'bode')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267195)
# Adding element type (line 44)
str_267196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 11), 'str', 'freqresp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267196)
# Adding element type (line 44)
str_267197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 23), 'str', 'place_poles')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267197)
# Adding element type (line 44)
str_267198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 38), 'str', 'dlsim')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267198)
# Adding element type (line 44)
str_267199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 47), 'str', 'dstep')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267199)
# Adding element type (line 44)
str_267200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 56), 'str', 'dimpulse')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267200)
# Adding element type (line 44)
str_267201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 11), 'str', 'dfreqresp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267201)
# Adding element type (line 44)
str_267202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 24), 'str', 'dbode')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 44, 10), list_267183, str_267202)

# Assigning a type to the variable '__all__' (line 44)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), '__all__', list_267183)
# Declaration of the 'LinearTimeInvariant' class

class LinearTimeInvariant(object, ):

    @norecursion
    def __new__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__new__'
        module_type_store = module_type_store.open_function_context('__new__', 51, 4, False)
        # Assigning a type to the variable 'self' (line 52)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearTimeInvariant.__new__.__dict__.__setitem__('stypy_localization', localization)
        LinearTimeInvariant.__new__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearTimeInvariant.__new__.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearTimeInvariant.__new__.__dict__.__setitem__('stypy_function_name', 'LinearTimeInvariant.__new__')
        LinearTimeInvariant.__new__.__dict__.__setitem__('stypy_param_names_list', [])
        LinearTimeInvariant.__new__.__dict__.__setitem__('stypy_varargs_param_name', 'system')
        LinearTimeInvariant.__new__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        LinearTimeInvariant.__new__.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearTimeInvariant.__new__.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearTimeInvariant.__new__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearTimeInvariant.__new__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearTimeInvariant.__new__', [], 'system', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__new__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__new__(...)' code ##################

        str_267203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 8), 'str', "Create a new object, don't allow direct instances.")
        
        
        # Getting the type of 'cls' (line 53)
        cls_267204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 11), 'cls')
        # Getting the type of 'LinearTimeInvariant' (line 53)
        LinearTimeInvariant_267205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 18), 'LinearTimeInvariant')
        # Applying the binary operator 'is' (line 53)
        result_is__267206 = python_operator(stypy.reporting.localization.Localization(__file__, 53, 11), 'is', cls_267204, LinearTimeInvariant_267205)
        
        # Testing the type of an if condition (line 53)
        if_condition_267207 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 53, 8), result_is__267206)
        # Assigning a type to the variable 'if_condition_267207' (line 53)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 8), 'if_condition_267207', if_condition_267207)
        # SSA begins for if statement (line 53)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to NotImplementedError(...): (line 54)
        # Processing the call arguments (line 54)
        str_267209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 38), 'str', 'The LinearTimeInvariant class is not meant to be used directly, use `lti` or `dlti` instead.')
        # Processing the call keyword arguments (line 54)
        kwargs_267210 = {}
        # Getting the type of 'NotImplementedError' (line 54)
        NotImplementedError_267208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 18), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 54)
        NotImplementedError_call_result_267211 = invoke(stypy.reporting.localization.Localization(__file__, 54, 18), NotImplementedError_267208, *[str_267209], **kwargs_267210)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 54, 12), NotImplementedError_call_result_267211, 'raise parameter', BaseException)
        # SSA join for if statement (line 53)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __new__(...): (line 57)
        # Processing the call arguments (line 57)
        # Getting the type of 'cls' (line 57)
        cls_267218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 55), 'cls', False)
        # Processing the call keyword arguments (line 57)
        kwargs_267219 = {}
        
        # Call to super(...): (line 57)
        # Processing the call arguments (line 57)
        # Getting the type of 'LinearTimeInvariant' (line 57)
        LinearTimeInvariant_267213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 21), 'LinearTimeInvariant', False)
        # Getting the type of 'cls' (line 57)
        cls_267214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 42), 'cls', False)
        # Processing the call keyword arguments (line 57)
        kwargs_267215 = {}
        # Getting the type of 'super' (line 57)
        super_267212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 15), 'super', False)
        # Calling super(args, kwargs) (line 57)
        super_call_result_267216 = invoke(stypy.reporting.localization.Localization(__file__, 57, 15), super_267212, *[LinearTimeInvariant_267213, cls_267214], **kwargs_267215)
        
        # Obtaining the member '__new__' of a type (line 57)
        new___267217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 57, 15), super_call_result_267216, '__new__')
        # Calling __new__(args, kwargs) (line 57)
        new___call_result_267220 = invoke(stypy.reporting.localization.Localization(__file__, 57, 15), new___267217, *[cls_267218], **kwargs_267219)
        
        # Assigning a type to the variable 'stypy_return_type' (line 57)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 8), 'stypy_return_type', new___call_result_267220)
        
        # ################# End of '__new__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__new__' in the type store
        # Getting the type of 'stypy_return_type' (line 51)
        stypy_return_type_267221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267221)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__new__'
        return stypy_return_type_267221


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 59, 4, False)
        # Assigning a type to the variable 'self' (line 60)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearTimeInvariant.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_267222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, (-1)), 'str', '\n        Initialize the `lti` baseclass.\n\n        The heavy lifting is done by the subclasses.\n        ')
        
        # Call to __init__(...): (line 65)
        # Processing the call keyword arguments (line 65)
        kwargs_267229 = {}
        
        # Call to super(...): (line 65)
        # Processing the call arguments (line 65)
        # Getting the type of 'LinearTimeInvariant' (line 65)
        LinearTimeInvariant_267224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 14), 'LinearTimeInvariant', False)
        # Getting the type of 'self' (line 65)
        self_267225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 35), 'self', False)
        # Processing the call keyword arguments (line 65)
        kwargs_267226 = {}
        # Getting the type of 'super' (line 65)
        super_267223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 8), 'super', False)
        # Calling super(args, kwargs) (line 65)
        super_call_result_267227 = invoke(stypy.reporting.localization.Localization(__file__, 65, 8), super_267223, *[LinearTimeInvariant_267224, self_267225], **kwargs_267226)
        
        # Obtaining the member '__init__' of a type (line 65)
        init___267228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 65, 8), super_call_result_267227, '__init__')
        # Calling __init__(args, kwargs) (line 65)
        init___call_result_267230 = invoke(stypy.reporting.localization.Localization(__file__, 65, 8), init___267228, *[], **kwargs_267229)
        
        
        # Assigning a Name to a Attribute (line 67):
        
        # Assigning a Name to a Attribute (line 67):
        # Getting the type of 'None' (line 67)
        None_267231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 22), 'None')
        # Getting the type of 'self' (line 67)
        self_267232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 8), 'self')
        # Setting the type of the member 'inputs' of a type (line 67)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 67, 8), self_267232, 'inputs', None_267231)
        
        # Assigning a Name to a Attribute (line 68):
        
        # Assigning a Name to a Attribute (line 68):
        # Getting the type of 'None' (line 68)
        None_267233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 23), 'None')
        # Getting the type of 'self' (line 68)
        self_267234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 8), 'self')
        # Setting the type of the member 'outputs' of a type (line 68)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 68, 8), self_267234, 'outputs', None_267233)
        
        # Assigning a Name to a Attribute (line 69):
        
        # Assigning a Name to a Attribute (line 69):
        # Getting the type of 'None' (line 69)
        None_267235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 19), 'None')
        # Getting the type of 'self' (line 69)
        self_267236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 8), 'self')
        # Setting the type of the member '_dt' of a type (line 69)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 69, 8), self_267236, '_dt', None_267235)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def dt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dt'
        module_type_store = module_type_store.open_function_context('dt', 71, 4, False)
        # Assigning a type to the variable 'self' (line 72)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 72, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearTimeInvariant.dt.__dict__.__setitem__('stypy_localization', localization)
        LinearTimeInvariant.dt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearTimeInvariant.dt.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearTimeInvariant.dt.__dict__.__setitem__('stypy_function_name', 'LinearTimeInvariant.dt')
        LinearTimeInvariant.dt.__dict__.__setitem__('stypy_param_names_list', [])
        LinearTimeInvariant.dt.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearTimeInvariant.dt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearTimeInvariant.dt.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearTimeInvariant.dt.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearTimeInvariant.dt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearTimeInvariant.dt.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearTimeInvariant.dt', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dt', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dt(...)' code ##################

        str_267237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 8), 'str', 'Return the sampling time of the system, `None` for `lti` systems.')
        # Getting the type of 'self' (line 74)
        self_267238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 15), 'self')
        # Obtaining the member '_dt' of a type (line 74)
        _dt_267239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 74, 15), self_267238, '_dt')
        # Assigning a type to the variable 'stypy_return_type' (line 74)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 74, 8), 'stypy_return_type', _dt_267239)
        
        # ################# End of 'dt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dt' in the type store
        # Getting the type of 'stypy_return_type' (line 71)
        stypy_return_type_267240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267240)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dt'
        return stypy_return_type_267240


    @norecursion
    def _dt_dict(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_dt_dict'
        module_type_store = module_type_store.open_function_context('_dt_dict', 76, 4, False)
        # Assigning a type to the variable 'self' (line 77)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearTimeInvariant._dt_dict.__dict__.__setitem__('stypy_localization', localization)
        LinearTimeInvariant._dt_dict.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearTimeInvariant._dt_dict.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearTimeInvariant._dt_dict.__dict__.__setitem__('stypy_function_name', 'LinearTimeInvariant._dt_dict')
        LinearTimeInvariant._dt_dict.__dict__.__setitem__('stypy_param_names_list', [])
        LinearTimeInvariant._dt_dict.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearTimeInvariant._dt_dict.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearTimeInvariant._dt_dict.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearTimeInvariant._dt_dict.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearTimeInvariant._dt_dict.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearTimeInvariant._dt_dict.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearTimeInvariant._dt_dict', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_dt_dict', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_dt_dict(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 78)
        # Getting the type of 'self' (line 78)
        self_267241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 11), 'self')
        # Obtaining the member 'dt' of a type (line 78)
        dt_267242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 78, 11), self_267241, 'dt')
        # Getting the type of 'None' (line 78)
        None_267243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 22), 'None')
        
        (may_be_267244, more_types_in_union_267245) = may_be_none(dt_267242, None_267243)

        if may_be_267244:

            if more_types_in_union_267245:
                # Runtime conditional SSA (line 78)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Obtaining an instance of the builtin type 'dict' (line 79)
            dict_267246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 19), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 79)
            
            # Assigning a type to the variable 'stypy_return_type' (line 79)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 79, 12), 'stypy_return_type', dict_267246)

            if more_types_in_union_267245:
                # Runtime conditional SSA for else branch (line 78)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_267244) or more_types_in_union_267245):
            
            # Obtaining an instance of the builtin type 'dict' (line 81)
            dict_267247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 19), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 81)
            # Adding element type (key, value) (line 81)
            str_267248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 20), 'str', 'dt')
            # Getting the type of 'self' (line 81)
            self_267249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 26), 'self')
            # Obtaining the member 'dt' of a type (line 81)
            dt_267250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 81, 26), self_267249, 'dt')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 81, 19), dict_267247, (str_267248, dt_267250))
            
            # Assigning a type to the variable 'stypy_return_type' (line 81)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 81, 12), 'stypy_return_type', dict_267247)

            if (may_be_267244 and more_types_in_union_267245):
                # SSA join for if statement (line 78)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '_dt_dict(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_dt_dict' in the type store
        # Getting the type of 'stypy_return_type' (line 76)
        stypy_return_type_267251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267251)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_dt_dict'
        return stypy_return_type_267251


    @norecursion
    def zeros(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'zeros'
        module_type_store = module_type_store.open_function_context('zeros', 83, 4, False)
        # Assigning a type to the variable 'self' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearTimeInvariant.zeros.__dict__.__setitem__('stypy_localization', localization)
        LinearTimeInvariant.zeros.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearTimeInvariant.zeros.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearTimeInvariant.zeros.__dict__.__setitem__('stypy_function_name', 'LinearTimeInvariant.zeros')
        LinearTimeInvariant.zeros.__dict__.__setitem__('stypy_param_names_list', [])
        LinearTimeInvariant.zeros.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearTimeInvariant.zeros.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearTimeInvariant.zeros.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearTimeInvariant.zeros.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearTimeInvariant.zeros.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearTimeInvariant.zeros.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearTimeInvariant.zeros', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'zeros', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'zeros(...)' code ##################

        str_267252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 8), 'str', 'Zeros of the system.')
        
        # Call to to_zpk(...): (line 86)
        # Processing the call keyword arguments (line 86)
        kwargs_267255 = {}
        # Getting the type of 'self' (line 86)
        self_267253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 15), 'self', False)
        # Obtaining the member 'to_zpk' of a type (line 86)
        to_zpk_267254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 86, 15), self_267253, 'to_zpk')
        # Calling to_zpk(args, kwargs) (line 86)
        to_zpk_call_result_267256 = invoke(stypy.reporting.localization.Localization(__file__, 86, 15), to_zpk_267254, *[], **kwargs_267255)
        
        # Obtaining the member 'zeros' of a type (line 86)
        zeros_267257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 86, 15), to_zpk_call_result_267256, 'zeros')
        # Assigning a type to the variable 'stypy_return_type' (line 86)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 8), 'stypy_return_type', zeros_267257)
        
        # ################# End of 'zeros(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'zeros' in the type store
        # Getting the type of 'stypy_return_type' (line 83)
        stypy_return_type_267258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267258)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'zeros'
        return stypy_return_type_267258


    @norecursion
    def poles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'poles'
        module_type_store = module_type_store.open_function_context('poles', 88, 4, False)
        # Assigning a type to the variable 'self' (line 89)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearTimeInvariant.poles.__dict__.__setitem__('stypy_localization', localization)
        LinearTimeInvariant.poles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearTimeInvariant.poles.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearTimeInvariant.poles.__dict__.__setitem__('stypy_function_name', 'LinearTimeInvariant.poles')
        LinearTimeInvariant.poles.__dict__.__setitem__('stypy_param_names_list', [])
        LinearTimeInvariant.poles.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearTimeInvariant.poles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearTimeInvariant.poles.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearTimeInvariant.poles.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearTimeInvariant.poles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearTimeInvariant.poles.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearTimeInvariant.poles', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'poles', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'poles(...)' code ##################

        str_267259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 8), 'str', 'Poles of the system.')
        
        # Call to to_zpk(...): (line 91)
        # Processing the call keyword arguments (line 91)
        kwargs_267262 = {}
        # Getting the type of 'self' (line 91)
        self_267260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 15), 'self', False)
        # Obtaining the member 'to_zpk' of a type (line 91)
        to_zpk_267261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 15), self_267260, 'to_zpk')
        # Calling to_zpk(args, kwargs) (line 91)
        to_zpk_call_result_267263 = invoke(stypy.reporting.localization.Localization(__file__, 91, 15), to_zpk_267261, *[], **kwargs_267262)
        
        # Obtaining the member 'poles' of a type (line 91)
        poles_267264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 15), to_zpk_call_result_267263, 'poles')
        # Assigning a type to the variable 'stypy_return_type' (line 91)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 8), 'stypy_return_type', poles_267264)
        
        # ################# End of 'poles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'poles' in the type store
        # Getting the type of 'stypy_return_type' (line 88)
        stypy_return_type_267265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267265)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'poles'
        return stypy_return_type_267265


    @norecursion
    def _as_ss(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_as_ss'
        module_type_store = module_type_store.open_function_context('_as_ss', 93, 4, False)
        # Assigning a type to the variable 'self' (line 94)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearTimeInvariant._as_ss.__dict__.__setitem__('stypy_localization', localization)
        LinearTimeInvariant._as_ss.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearTimeInvariant._as_ss.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearTimeInvariant._as_ss.__dict__.__setitem__('stypy_function_name', 'LinearTimeInvariant._as_ss')
        LinearTimeInvariant._as_ss.__dict__.__setitem__('stypy_param_names_list', [])
        LinearTimeInvariant._as_ss.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearTimeInvariant._as_ss.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearTimeInvariant._as_ss.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearTimeInvariant._as_ss.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearTimeInvariant._as_ss.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearTimeInvariant._as_ss.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearTimeInvariant._as_ss', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_as_ss', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_as_ss(...)' code ##################

        str_267266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, (-1)), 'str', 'Convert to `StateSpace` system, without copying.\n\n        Returns\n        -------\n        sys: StateSpace\n            The `StateSpace` system. If the class is already an instance of\n            `StateSpace` then this instance is returned.\n        ')
        
        
        # Call to isinstance(...): (line 102)
        # Processing the call arguments (line 102)
        # Getting the type of 'self' (line 102)
        self_267268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 22), 'self', False)
        # Getting the type of 'StateSpace' (line 102)
        StateSpace_267269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 28), 'StateSpace', False)
        # Processing the call keyword arguments (line 102)
        kwargs_267270 = {}
        # Getting the type of 'isinstance' (line 102)
        isinstance_267267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 102)
        isinstance_call_result_267271 = invoke(stypy.reporting.localization.Localization(__file__, 102, 11), isinstance_267267, *[self_267268, StateSpace_267269], **kwargs_267270)
        
        # Testing the type of an if condition (line 102)
        if_condition_267272 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 102, 8), isinstance_call_result_267271)
        # Assigning a type to the variable 'if_condition_267272' (line 102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 8), 'if_condition_267272', if_condition_267272)
        # SSA begins for if statement (line 102)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 103)
        self_267273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 19), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 12), 'stypy_return_type', self_267273)
        # SSA branch for the else part of an if statement (line 102)
        module_type_store.open_ssa_branch('else')
        
        # Call to to_ss(...): (line 105)
        # Processing the call keyword arguments (line 105)
        kwargs_267276 = {}
        # Getting the type of 'self' (line 105)
        self_267274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 19), 'self', False)
        # Obtaining the member 'to_ss' of a type (line 105)
        to_ss_267275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 19), self_267274, 'to_ss')
        # Calling to_ss(args, kwargs) (line 105)
        to_ss_call_result_267277 = invoke(stypy.reporting.localization.Localization(__file__, 105, 19), to_ss_267275, *[], **kwargs_267276)
        
        # Assigning a type to the variable 'stypy_return_type' (line 105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 12), 'stypy_return_type', to_ss_call_result_267277)
        # SSA join for if statement (line 102)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_as_ss(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_as_ss' in the type store
        # Getting the type of 'stypy_return_type' (line 93)
        stypy_return_type_267278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267278)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_as_ss'
        return stypy_return_type_267278


    @norecursion
    def _as_zpk(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_as_zpk'
        module_type_store = module_type_store.open_function_context('_as_zpk', 107, 4, False)
        # Assigning a type to the variable 'self' (line 108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearTimeInvariant._as_zpk.__dict__.__setitem__('stypy_localization', localization)
        LinearTimeInvariant._as_zpk.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearTimeInvariant._as_zpk.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearTimeInvariant._as_zpk.__dict__.__setitem__('stypy_function_name', 'LinearTimeInvariant._as_zpk')
        LinearTimeInvariant._as_zpk.__dict__.__setitem__('stypy_param_names_list', [])
        LinearTimeInvariant._as_zpk.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearTimeInvariant._as_zpk.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearTimeInvariant._as_zpk.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearTimeInvariant._as_zpk.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearTimeInvariant._as_zpk.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearTimeInvariant._as_zpk.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearTimeInvariant._as_zpk', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_as_zpk', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_as_zpk(...)' code ##################

        str_267279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, (-1)), 'str', 'Convert to `ZerosPolesGain` system, without copying.\n\n        Returns\n        -------\n        sys: ZerosPolesGain\n            The `ZerosPolesGain` system. If the class is already an instance of\n            `ZerosPolesGain` then this instance is returned.\n        ')
        
        
        # Call to isinstance(...): (line 116)
        # Processing the call arguments (line 116)
        # Getting the type of 'self' (line 116)
        self_267281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 22), 'self', False)
        # Getting the type of 'ZerosPolesGain' (line 116)
        ZerosPolesGain_267282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 28), 'ZerosPolesGain', False)
        # Processing the call keyword arguments (line 116)
        kwargs_267283 = {}
        # Getting the type of 'isinstance' (line 116)
        isinstance_267280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 116)
        isinstance_call_result_267284 = invoke(stypy.reporting.localization.Localization(__file__, 116, 11), isinstance_267280, *[self_267281, ZerosPolesGain_267282], **kwargs_267283)
        
        # Testing the type of an if condition (line 116)
        if_condition_267285 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 116, 8), isinstance_call_result_267284)
        # Assigning a type to the variable 'if_condition_267285' (line 116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 8), 'if_condition_267285', if_condition_267285)
        # SSA begins for if statement (line 116)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 117)
        self_267286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 19), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 12), 'stypy_return_type', self_267286)
        # SSA branch for the else part of an if statement (line 116)
        module_type_store.open_ssa_branch('else')
        
        # Call to to_zpk(...): (line 119)
        # Processing the call keyword arguments (line 119)
        kwargs_267289 = {}
        # Getting the type of 'self' (line 119)
        self_267287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 19), 'self', False)
        # Obtaining the member 'to_zpk' of a type (line 119)
        to_zpk_267288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 19), self_267287, 'to_zpk')
        # Calling to_zpk(args, kwargs) (line 119)
        to_zpk_call_result_267290 = invoke(stypy.reporting.localization.Localization(__file__, 119, 19), to_zpk_267288, *[], **kwargs_267289)
        
        # Assigning a type to the variable 'stypy_return_type' (line 119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 12), 'stypy_return_type', to_zpk_call_result_267290)
        # SSA join for if statement (line 116)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_as_zpk(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_as_zpk' in the type store
        # Getting the type of 'stypy_return_type' (line 107)
        stypy_return_type_267291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267291)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_as_zpk'
        return stypy_return_type_267291


    @norecursion
    def _as_tf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_as_tf'
        module_type_store = module_type_store.open_function_context('_as_tf', 121, 4, False)
        # Assigning a type to the variable 'self' (line 122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinearTimeInvariant._as_tf.__dict__.__setitem__('stypy_localization', localization)
        LinearTimeInvariant._as_tf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinearTimeInvariant._as_tf.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinearTimeInvariant._as_tf.__dict__.__setitem__('stypy_function_name', 'LinearTimeInvariant._as_tf')
        LinearTimeInvariant._as_tf.__dict__.__setitem__('stypy_param_names_list', [])
        LinearTimeInvariant._as_tf.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinearTimeInvariant._as_tf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinearTimeInvariant._as_tf.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinearTimeInvariant._as_tf.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinearTimeInvariant._as_tf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinearTimeInvariant._as_tf.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinearTimeInvariant._as_tf', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_as_tf', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_as_tf(...)' code ##################

        str_267292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, (-1)), 'str', 'Convert to `TransferFunction` system, without copying.\n\n        Returns\n        -------\n        sys: ZerosPolesGain\n            The `TransferFunction` system. If the class is already an instance of\n            `TransferFunction` then this instance is returned.\n        ')
        
        
        # Call to isinstance(...): (line 130)
        # Processing the call arguments (line 130)
        # Getting the type of 'self' (line 130)
        self_267294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 22), 'self', False)
        # Getting the type of 'TransferFunction' (line 130)
        TransferFunction_267295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 28), 'TransferFunction', False)
        # Processing the call keyword arguments (line 130)
        kwargs_267296 = {}
        # Getting the type of 'isinstance' (line 130)
        isinstance_267293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 130)
        isinstance_call_result_267297 = invoke(stypy.reporting.localization.Localization(__file__, 130, 11), isinstance_267293, *[self_267294, TransferFunction_267295], **kwargs_267296)
        
        # Testing the type of an if condition (line 130)
        if_condition_267298 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 130, 8), isinstance_call_result_267297)
        # Assigning a type to the variable 'if_condition_267298' (line 130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 8), 'if_condition_267298', if_condition_267298)
        # SSA begins for if statement (line 130)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 131)
        self_267299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 19), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 12), 'stypy_return_type', self_267299)
        # SSA branch for the else part of an if statement (line 130)
        module_type_store.open_ssa_branch('else')
        
        # Call to to_tf(...): (line 133)
        # Processing the call keyword arguments (line 133)
        kwargs_267302 = {}
        # Getting the type of 'self' (line 133)
        self_267300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 19), 'self', False)
        # Obtaining the member 'to_tf' of a type (line 133)
        to_tf_267301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 19), self_267300, 'to_tf')
        # Calling to_tf(args, kwargs) (line 133)
        to_tf_call_result_267303 = invoke(stypy.reporting.localization.Localization(__file__, 133, 19), to_tf_267301, *[], **kwargs_267302)
        
        # Assigning a type to the variable 'stypy_return_type' (line 133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 12), 'stypy_return_type', to_tf_call_result_267303)
        # SSA join for if statement (line 130)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_as_tf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_as_tf' in the type store
        # Getting the type of 'stypy_return_type' (line 121)
        stypy_return_type_267304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267304)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_as_tf'
        return stypy_return_type_267304


# Assigning a type to the variable 'LinearTimeInvariant' (line 50)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 0), 'LinearTimeInvariant', LinearTimeInvariant)
# Declaration of the 'lti' class
# Getting the type of 'LinearTimeInvariant' (line 136)
LinearTimeInvariant_267305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 10), 'LinearTimeInvariant')

class lti(LinearTimeInvariant_267305, ):
    str_267306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, (-1)), 'str', '\n    Continuous-time linear time invariant system base class.\n\n    Parameters\n    ----------\n    *system : arguments\n        The `lti` class can be instantiated with either 2, 3 or 4 arguments.\n        The following gives the number of arguments and the corresponding\n        continuous-time subclass that is created:\n\n            * 2: `TransferFunction`:  (numerator, denominator)\n            * 3: `ZerosPolesGain`: (zeros, poles, gain)\n            * 4: `StateSpace`:  (A, B, C, D)\n\n        Each argument can be an array or a sequence.\n\n    See Also\n    --------\n    ZerosPolesGain, StateSpace, TransferFunction, dlti\n\n    Notes\n    -----\n    `lti` instances do not exist directly. Instead, `lti` creates an instance\n    of one of its subclasses: `StateSpace`, `TransferFunction` or\n    `ZerosPolesGain`.\n\n    If (numerator, denominator) is passed in for ``*system``, coefficients for\n    both the numerator and denominator should be specified in descending\n    exponent order (e.g., ``s^2 + 3s + 5`` would be represented as ``[1, 3,\n    5]``).\n\n    Changing the value of properties that are not directly part of the current\n    system representation (such as the `zeros` of a `StateSpace` system) is\n    very inefficient and may lead to numerical inaccuracies. It is better to\n    convert to the specific system representation first. For example, call\n    ``sys = sys.to_zpk()`` before accessing/changing the zeros, poles or gain.\n\n    Examples\n    --------\n    >>> from scipy import signal\n\n    >>> signal.lti(1, 2, 3, 4)\n    StateSpaceContinuous(\n    array([[1]]),\n    array([[2]]),\n    array([[3]]),\n    array([[4]]),\n    dt: None\n    )\n\n    >>> signal.lti([1, 2], [3, 4], 5)\n    ZerosPolesGainContinuous(\n    array([1, 2]),\n    array([3, 4]),\n    5,\n    dt: None\n    )\n\n    >>> signal.lti([3, 4], [1, 2])\n    TransferFunctionContinuous(\n    array([ 3.,  4.]),\n    array([ 1.,  2.]),\n    dt: None\n    )\n\n    ')

    @norecursion
    def __new__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__new__'
        module_type_store = module_type_store.open_function_context('__new__', 203, 4, False)
        # Assigning a type to the variable 'self' (line 204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lti.__new__.__dict__.__setitem__('stypy_localization', localization)
        lti.__new__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lti.__new__.__dict__.__setitem__('stypy_type_store', module_type_store)
        lti.__new__.__dict__.__setitem__('stypy_function_name', 'lti.__new__')
        lti.__new__.__dict__.__setitem__('stypy_param_names_list', [])
        lti.__new__.__dict__.__setitem__('stypy_varargs_param_name', 'system')
        lti.__new__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lti.__new__.__dict__.__setitem__('stypy_call_defaults', defaults)
        lti.__new__.__dict__.__setitem__('stypy_call_varargs', varargs)
        lti.__new__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lti.__new__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lti.__new__', [], 'system', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__new__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__new__(...)' code ##################

        str_267307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 8), 'str', 'Create an instance of the appropriate subclass.')
        
        
        # Getting the type of 'cls' (line 205)
        cls_267308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 11), 'cls')
        # Getting the type of 'lti' (line 205)
        lti_267309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 18), 'lti')
        # Applying the binary operator 'is' (line 205)
        result_is__267310 = python_operator(stypy.reporting.localization.Localization(__file__, 205, 11), 'is', cls_267308, lti_267309)
        
        # Testing the type of an if condition (line 205)
        if_condition_267311 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 205, 8), result_is__267310)
        # Assigning a type to the variable 'if_condition_267311' (line 205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 8), 'if_condition_267311', if_condition_267311)
        # SSA begins for if statement (line 205)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 206):
        
        # Assigning a Call to a Name (line 206):
        
        # Call to len(...): (line 206)
        # Processing the call arguments (line 206)
        # Getting the type of 'system' (line 206)
        system_267313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 20), 'system', False)
        # Processing the call keyword arguments (line 206)
        kwargs_267314 = {}
        # Getting the type of 'len' (line 206)
        len_267312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 16), 'len', False)
        # Calling len(args, kwargs) (line 206)
        len_call_result_267315 = invoke(stypy.reporting.localization.Localization(__file__, 206, 16), len_267312, *[system_267313], **kwargs_267314)
        
        # Assigning a type to the variable 'N' (line 206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 12), 'N', len_call_result_267315)
        
        
        # Getting the type of 'N' (line 207)
        N_267316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 15), 'N')
        int_267317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 20), 'int')
        # Applying the binary operator '==' (line 207)
        result_eq_267318 = python_operator(stypy.reporting.localization.Localization(__file__, 207, 15), '==', N_267316, int_267317)
        
        # Testing the type of an if condition (line 207)
        if_condition_267319 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 207, 12), result_eq_267318)
        # Assigning a type to the variable 'if_condition_267319' (line 207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 12), 'if_condition_267319', if_condition_267319)
        # SSA begins for if statement (line 207)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __new__(...): (line 208)
        # Processing the call arguments (line 208)
        # Getting the type of 'TransferFunctionContinuous' (line 209)
        TransferFunctionContinuous_267322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 20), 'TransferFunctionContinuous', False)
        # Getting the type of 'system' (line 209)
        system_267323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 49), 'system', False)
        # Processing the call keyword arguments (line 208)
        kwargs_267324 = {}
        # Getting the type of 'TransferFunctionContinuous' (line 208)
        TransferFunctionContinuous_267320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 23), 'TransferFunctionContinuous', False)
        # Obtaining the member '__new__' of a type (line 208)
        new___267321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 208, 23), TransferFunctionContinuous_267320, '__new__')
        # Calling __new__(args, kwargs) (line 208)
        new___call_result_267325 = invoke(stypy.reporting.localization.Localization(__file__, 208, 23), new___267321, *[TransferFunctionContinuous_267322, system_267323], **kwargs_267324)
        
        # Assigning a type to the variable 'stypy_return_type' (line 208)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 16), 'stypy_return_type', new___call_result_267325)
        # SSA branch for the else part of an if statement (line 207)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'N' (line 210)
        N_267326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 17), 'N')
        int_267327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 22), 'int')
        # Applying the binary operator '==' (line 210)
        result_eq_267328 = python_operator(stypy.reporting.localization.Localization(__file__, 210, 17), '==', N_267326, int_267327)
        
        # Testing the type of an if condition (line 210)
        if_condition_267329 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 210, 17), result_eq_267328)
        # Assigning a type to the variable 'if_condition_267329' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 17), 'if_condition_267329', if_condition_267329)
        # SSA begins for if statement (line 210)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __new__(...): (line 211)
        # Processing the call arguments (line 211)
        # Getting the type of 'ZerosPolesGainContinuous' (line 212)
        ZerosPolesGainContinuous_267332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 20), 'ZerosPolesGainContinuous', False)
        # Getting the type of 'system' (line 212)
        system_267333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 47), 'system', False)
        # Processing the call keyword arguments (line 211)
        kwargs_267334 = {}
        # Getting the type of 'ZerosPolesGainContinuous' (line 211)
        ZerosPolesGainContinuous_267330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 23), 'ZerosPolesGainContinuous', False)
        # Obtaining the member '__new__' of a type (line 211)
        new___267331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 23), ZerosPolesGainContinuous_267330, '__new__')
        # Calling __new__(args, kwargs) (line 211)
        new___call_result_267335 = invoke(stypy.reporting.localization.Localization(__file__, 211, 23), new___267331, *[ZerosPolesGainContinuous_267332, system_267333], **kwargs_267334)
        
        # Assigning a type to the variable 'stypy_return_type' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 16), 'stypy_return_type', new___call_result_267335)
        # SSA branch for the else part of an if statement (line 210)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'N' (line 213)
        N_267336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 17), 'N')
        int_267337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 22), 'int')
        # Applying the binary operator '==' (line 213)
        result_eq_267338 = python_operator(stypy.reporting.localization.Localization(__file__, 213, 17), '==', N_267336, int_267337)
        
        # Testing the type of an if condition (line 213)
        if_condition_267339 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 213, 17), result_eq_267338)
        # Assigning a type to the variable 'if_condition_267339' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 17), 'if_condition_267339', if_condition_267339)
        # SSA begins for if statement (line 213)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __new__(...): (line 214)
        # Processing the call arguments (line 214)
        # Getting the type of 'StateSpaceContinuous' (line 214)
        StateSpaceContinuous_267342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 52), 'StateSpaceContinuous', False)
        # Getting the type of 'system' (line 215)
        system_267343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 53), 'system', False)
        # Processing the call keyword arguments (line 214)
        kwargs_267344 = {}
        # Getting the type of 'StateSpaceContinuous' (line 214)
        StateSpaceContinuous_267340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 23), 'StateSpaceContinuous', False)
        # Obtaining the member '__new__' of a type (line 214)
        new___267341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 23), StateSpaceContinuous_267340, '__new__')
        # Calling __new__(args, kwargs) (line 214)
        new___call_result_267345 = invoke(stypy.reporting.localization.Localization(__file__, 214, 23), new___267341, *[StateSpaceContinuous_267342, system_267343], **kwargs_267344)
        
        # Assigning a type to the variable 'stypy_return_type' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 16), 'stypy_return_type', new___call_result_267345)
        # SSA branch for the else part of an if statement (line 213)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 217)
        # Processing the call arguments (line 217)
        str_267347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 33), 'str', '`system` needs to be an instance of `lti` or have 2, 3 or 4 arguments.')
        # Processing the call keyword arguments (line 217)
        kwargs_267348 = {}
        # Getting the type of 'ValueError' (line 217)
        ValueError_267346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 217)
        ValueError_call_result_267349 = invoke(stypy.reporting.localization.Localization(__file__, 217, 22), ValueError_267346, *[str_267347], **kwargs_267348)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 217, 16), ValueError_call_result_267349, 'raise parameter', BaseException)
        # SSA join for if statement (line 213)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 210)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 207)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 205)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __new__(...): (line 220)
        # Processing the call arguments (line 220)
        # Getting the type of 'cls' (line 220)
        cls_267356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 39), 'cls', False)
        # Processing the call keyword arguments (line 220)
        kwargs_267357 = {}
        
        # Call to super(...): (line 220)
        # Processing the call arguments (line 220)
        # Getting the type of 'lti' (line 220)
        lti_267351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 21), 'lti', False)
        # Getting the type of 'cls' (line 220)
        cls_267352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 26), 'cls', False)
        # Processing the call keyword arguments (line 220)
        kwargs_267353 = {}
        # Getting the type of 'super' (line 220)
        super_267350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 15), 'super', False)
        # Calling super(args, kwargs) (line 220)
        super_call_result_267354 = invoke(stypy.reporting.localization.Localization(__file__, 220, 15), super_267350, *[lti_267351, cls_267352], **kwargs_267353)
        
        # Obtaining the member '__new__' of a type (line 220)
        new___267355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 15), super_call_result_267354, '__new__')
        # Calling __new__(args, kwargs) (line 220)
        new___call_result_267358 = invoke(stypy.reporting.localization.Localization(__file__, 220, 15), new___267355, *[cls_267356], **kwargs_267357)
        
        # Assigning a type to the variable 'stypy_return_type' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 8), 'stypy_return_type', new___call_result_267358)
        
        # ################# End of '__new__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__new__' in the type store
        # Getting the type of 'stypy_return_type' (line 203)
        stypy_return_type_267359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267359)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__new__'
        return stypy_return_type_267359


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 222, 4, False)
        # Assigning a type to the variable 'self' (line 223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lti.__init__', [], 'system', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_267360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, (-1)), 'str', '\n        Initialize the `lti` baseclass.\n\n        The heavy lifting is done by the subclasses.\n        ')
        
        # Call to __init__(...): (line 228)
        # Getting the type of 'system' (line 228)
        system_267367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 35), 'system', False)
        # Processing the call keyword arguments (line 228)
        kwargs_267368 = {}
        
        # Call to super(...): (line 228)
        # Processing the call arguments (line 228)
        # Getting the type of 'lti' (line 228)
        lti_267362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 14), 'lti', False)
        # Getting the type of 'self' (line 228)
        self_267363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 19), 'self', False)
        # Processing the call keyword arguments (line 228)
        kwargs_267364 = {}
        # Getting the type of 'super' (line 228)
        super_267361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'super', False)
        # Calling super(args, kwargs) (line 228)
        super_call_result_267365 = invoke(stypy.reporting.localization.Localization(__file__, 228, 8), super_267361, *[lti_267362, self_267363], **kwargs_267364)
        
        # Obtaining the member '__init__' of a type (line 228)
        init___267366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 8), super_call_result_267365, '__init__')
        # Calling __init__(args, kwargs) (line 228)
        init___call_result_267369 = invoke(stypy.reporting.localization.Localization(__file__, 228, 8), init___267366, *[system_267367], **kwargs_267368)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def impulse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 230)
        None_267370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 25), 'None')
        # Getting the type of 'None' (line 230)
        None_267371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 33), 'None')
        # Getting the type of 'None' (line 230)
        None_267372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 41), 'None')
        defaults = [None_267370, None_267371, None_267372]
        # Create a new context for function 'impulse'
        module_type_store = module_type_store.open_function_context('impulse', 230, 4, False)
        # Assigning a type to the variable 'self' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lti.impulse.__dict__.__setitem__('stypy_localization', localization)
        lti.impulse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lti.impulse.__dict__.__setitem__('stypy_type_store', module_type_store)
        lti.impulse.__dict__.__setitem__('stypy_function_name', 'lti.impulse')
        lti.impulse.__dict__.__setitem__('stypy_param_names_list', ['X0', 'T', 'N'])
        lti.impulse.__dict__.__setitem__('stypy_varargs_param_name', None)
        lti.impulse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lti.impulse.__dict__.__setitem__('stypy_call_defaults', defaults)
        lti.impulse.__dict__.__setitem__('stypy_call_varargs', varargs)
        lti.impulse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lti.impulse.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lti.impulse', ['X0', 'T', 'N'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'impulse', localization, ['X0', 'T', 'N'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'impulse(...)' code ##################

        str_267373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 234, (-1)), 'str', '\n        Return the impulse response of a continuous-time system.\n        See `impulse` for details.\n        ')
        
        # Call to impulse(...): (line 235)
        # Processing the call arguments (line 235)
        # Getting the type of 'self' (line 235)
        self_267375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 23), 'self', False)
        # Processing the call keyword arguments (line 235)
        # Getting the type of 'X0' (line 235)
        X0_267376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 32), 'X0', False)
        keyword_267377 = X0_267376
        # Getting the type of 'T' (line 235)
        T_267378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 38), 'T', False)
        keyword_267379 = T_267378
        # Getting the type of 'N' (line 235)
        N_267380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 43), 'N', False)
        keyword_267381 = N_267380
        kwargs_267382 = {'X0': keyword_267377, 'T': keyword_267379, 'N': keyword_267381}
        # Getting the type of 'impulse' (line 235)
        impulse_267374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 15), 'impulse', False)
        # Calling impulse(args, kwargs) (line 235)
        impulse_call_result_267383 = invoke(stypy.reporting.localization.Localization(__file__, 235, 15), impulse_267374, *[self_267375], **kwargs_267382)
        
        # Assigning a type to the variable 'stypy_return_type' (line 235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 8), 'stypy_return_type', impulse_call_result_267383)
        
        # ################# End of 'impulse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'impulse' in the type store
        # Getting the type of 'stypy_return_type' (line 230)
        stypy_return_type_267384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267384)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'impulse'
        return stypy_return_type_267384


    @norecursion
    def step(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 237)
        None_267385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 22), 'None')
        # Getting the type of 'None' (line 237)
        None_267386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 30), 'None')
        # Getting the type of 'None' (line 237)
        None_267387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 38), 'None')
        defaults = [None_267385, None_267386, None_267387]
        # Create a new context for function 'step'
        module_type_store = module_type_store.open_function_context('step', 237, 4, False)
        # Assigning a type to the variable 'self' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lti.step.__dict__.__setitem__('stypy_localization', localization)
        lti.step.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lti.step.__dict__.__setitem__('stypy_type_store', module_type_store)
        lti.step.__dict__.__setitem__('stypy_function_name', 'lti.step')
        lti.step.__dict__.__setitem__('stypy_param_names_list', ['X0', 'T', 'N'])
        lti.step.__dict__.__setitem__('stypy_varargs_param_name', None)
        lti.step.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lti.step.__dict__.__setitem__('stypy_call_defaults', defaults)
        lti.step.__dict__.__setitem__('stypy_call_varargs', varargs)
        lti.step.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lti.step.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lti.step', ['X0', 'T', 'N'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'step', localization, ['X0', 'T', 'N'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'step(...)' code ##################

        str_267388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, (-1)), 'str', '\n        Return the step response of a continuous-time system.\n        See `step` for details.\n        ')
        
        # Call to step(...): (line 242)
        # Processing the call arguments (line 242)
        # Getting the type of 'self' (line 242)
        self_267390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 20), 'self', False)
        # Processing the call keyword arguments (line 242)
        # Getting the type of 'X0' (line 242)
        X0_267391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 29), 'X0', False)
        keyword_267392 = X0_267391
        # Getting the type of 'T' (line 242)
        T_267393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 35), 'T', False)
        keyword_267394 = T_267393
        # Getting the type of 'N' (line 242)
        N_267395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 40), 'N', False)
        keyword_267396 = N_267395
        kwargs_267397 = {'X0': keyword_267392, 'T': keyword_267394, 'N': keyword_267396}
        # Getting the type of 'step' (line 242)
        step_267389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 15), 'step', False)
        # Calling step(args, kwargs) (line 242)
        step_call_result_267398 = invoke(stypy.reporting.localization.Localization(__file__, 242, 15), step_267389, *[self_267390], **kwargs_267397)
        
        # Assigning a type to the variable 'stypy_return_type' (line 242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'stypy_return_type', step_call_result_267398)
        
        # ################# End of 'step(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'step' in the type store
        # Getting the type of 'stypy_return_type' (line 237)
        stypy_return_type_267399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267399)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'step'
        return stypy_return_type_267399


    @norecursion
    def output(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 244)
        None_267400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 30), 'None')
        defaults = [None_267400]
        # Create a new context for function 'output'
        module_type_store = module_type_store.open_function_context('output', 244, 4, False)
        # Assigning a type to the variable 'self' (line 245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lti.output.__dict__.__setitem__('stypy_localization', localization)
        lti.output.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lti.output.__dict__.__setitem__('stypy_type_store', module_type_store)
        lti.output.__dict__.__setitem__('stypy_function_name', 'lti.output')
        lti.output.__dict__.__setitem__('stypy_param_names_list', ['U', 'T', 'X0'])
        lti.output.__dict__.__setitem__('stypy_varargs_param_name', None)
        lti.output.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lti.output.__dict__.__setitem__('stypy_call_defaults', defaults)
        lti.output.__dict__.__setitem__('stypy_call_varargs', varargs)
        lti.output.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lti.output.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lti.output', ['U', 'T', 'X0'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'output', localization, ['U', 'T', 'X0'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'output(...)' code ##################

        str_267401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, (-1)), 'str', '\n        Return the response of a continuous-time system to input `U`.\n        See `lsim` for details.\n        ')
        
        # Call to lsim(...): (line 249)
        # Processing the call arguments (line 249)
        # Getting the type of 'self' (line 249)
        self_267403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 20), 'self', False)
        # Getting the type of 'U' (line 249)
        U_267404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 26), 'U', False)
        # Getting the type of 'T' (line 249)
        T_267405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 29), 'T', False)
        # Processing the call keyword arguments (line 249)
        # Getting the type of 'X0' (line 249)
        X0_267406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 35), 'X0', False)
        keyword_267407 = X0_267406
        kwargs_267408 = {'X0': keyword_267407}
        # Getting the type of 'lsim' (line 249)
        lsim_267402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 15), 'lsim', False)
        # Calling lsim(args, kwargs) (line 249)
        lsim_call_result_267409 = invoke(stypy.reporting.localization.Localization(__file__, 249, 15), lsim_267402, *[self_267403, U_267404, T_267405], **kwargs_267408)
        
        # Assigning a type to the variable 'stypy_return_type' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 8), 'stypy_return_type', lsim_call_result_267409)
        
        # ################# End of 'output(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'output' in the type store
        # Getting the type of 'stypy_return_type' (line 244)
        stypy_return_type_267410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267410)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'output'
        return stypy_return_type_267410


    @norecursion
    def bode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 251)
        None_267411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 21), 'None')
        int_267412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 29), 'int')
        defaults = [None_267411, int_267412]
        # Create a new context for function 'bode'
        module_type_store = module_type_store.open_function_context('bode', 251, 4, False)
        # Assigning a type to the variable 'self' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lti.bode.__dict__.__setitem__('stypy_localization', localization)
        lti.bode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lti.bode.__dict__.__setitem__('stypy_type_store', module_type_store)
        lti.bode.__dict__.__setitem__('stypy_function_name', 'lti.bode')
        lti.bode.__dict__.__setitem__('stypy_param_names_list', ['w', 'n'])
        lti.bode.__dict__.__setitem__('stypy_varargs_param_name', None)
        lti.bode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lti.bode.__dict__.__setitem__('stypy_call_defaults', defaults)
        lti.bode.__dict__.__setitem__('stypy_call_varargs', varargs)
        lti.bode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lti.bode.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lti.bode', ['w', 'n'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'bode', localization, ['w', 'n'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'bode(...)' code ##################

        str_267413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, (-1)), 'str', '\n        Calculate Bode magnitude and phase data of a continuous-time system.\n\n        Returns a 3-tuple containing arrays of frequencies [rad/s], magnitude\n        [dB] and phase [deg]. See `bode` for details.\n\n        Examples\n        --------\n        >>> from scipy import signal\n        >>> import matplotlib.pyplot as plt\n\n        >>> sys = signal.TransferFunction([1], [1, 1])\n        >>> w, mag, phase = sys.bode()\n\n        >>> plt.figure()\n        >>> plt.semilogx(w, mag)    # Bode magnitude plot\n        >>> plt.figure()\n        >>> plt.semilogx(w, phase)  # Bode phase plot\n        >>> plt.show()\n\n        ')
        
        # Call to bode(...): (line 273)
        # Processing the call arguments (line 273)
        # Getting the type of 'self' (line 273)
        self_267415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 20), 'self', False)
        # Processing the call keyword arguments (line 273)
        # Getting the type of 'w' (line 273)
        w_267416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 28), 'w', False)
        keyword_267417 = w_267416
        # Getting the type of 'n' (line 273)
        n_267418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 33), 'n', False)
        keyword_267419 = n_267418
        kwargs_267420 = {'w': keyword_267417, 'n': keyword_267419}
        # Getting the type of 'bode' (line 273)
        bode_267414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 15), 'bode', False)
        # Calling bode(args, kwargs) (line 273)
        bode_call_result_267421 = invoke(stypy.reporting.localization.Localization(__file__, 273, 15), bode_267414, *[self_267415], **kwargs_267420)
        
        # Assigning a type to the variable 'stypy_return_type' (line 273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'stypy_return_type', bode_call_result_267421)
        
        # ################# End of 'bode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'bode' in the type store
        # Getting the type of 'stypy_return_type' (line 251)
        stypy_return_type_267422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267422)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'bode'
        return stypy_return_type_267422


    @norecursion
    def freqresp(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 275)
        None_267423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 25), 'None')
        int_267424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 33), 'int')
        defaults = [None_267423, int_267424]
        # Create a new context for function 'freqresp'
        module_type_store = module_type_store.open_function_context('freqresp', 275, 4, False)
        # Assigning a type to the variable 'self' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lti.freqresp.__dict__.__setitem__('stypy_localization', localization)
        lti.freqresp.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lti.freqresp.__dict__.__setitem__('stypy_type_store', module_type_store)
        lti.freqresp.__dict__.__setitem__('stypy_function_name', 'lti.freqresp')
        lti.freqresp.__dict__.__setitem__('stypy_param_names_list', ['w', 'n'])
        lti.freqresp.__dict__.__setitem__('stypy_varargs_param_name', None)
        lti.freqresp.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lti.freqresp.__dict__.__setitem__('stypy_call_defaults', defaults)
        lti.freqresp.__dict__.__setitem__('stypy_call_varargs', varargs)
        lti.freqresp.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lti.freqresp.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lti.freqresp', ['w', 'n'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'freqresp', localization, ['w', 'n'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'freqresp(...)' code ##################

        str_267425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 282, (-1)), 'str', '\n        Calculate the frequency response of a continuous-time system.\n\n        Returns a 2-tuple containing arrays of frequencies [rad/s] and\n        complex magnitude.\n        See `freqresp` for details.\n        ')
        
        # Call to freqresp(...): (line 283)
        # Processing the call arguments (line 283)
        # Getting the type of 'self' (line 283)
        self_267427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 24), 'self', False)
        # Processing the call keyword arguments (line 283)
        # Getting the type of 'w' (line 283)
        w_267428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 32), 'w', False)
        keyword_267429 = w_267428
        # Getting the type of 'n' (line 283)
        n_267430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 37), 'n', False)
        keyword_267431 = n_267430
        kwargs_267432 = {'w': keyword_267429, 'n': keyword_267431}
        # Getting the type of 'freqresp' (line 283)
        freqresp_267426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 15), 'freqresp', False)
        # Calling freqresp(args, kwargs) (line 283)
        freqresp_call_result_267433 = invoke(stypy.reporting.localization.Localization(__file__, 283, 15), freqresp_267426, *[self_267427], **kwargs_267432)
        
        # Assigning a type to the variable 'stypy_return_type' (line 283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 283, 8), 'stypy_return_type', freqresp_call_result_267433)
        
        # ################# End of 'freqresp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'freqresp' in the type store
        # Getting the type of 'stypy_return_type' (line 275)
        stypy_return_type_267434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267434)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'freqresp'
        return stypy_return_type_267434


    @norecursion
    def to_discrete(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_267435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 285, 37), 'str', 'zoh')
        # Getting the type of 'None' (line 285)
        None_267436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 50), 'None')
        defaults = [str_267435, None_267436]
        # Create a new context for function 'to_discrete'
        module_type_store = module_type_store.open_function_context('to_discrete', 285, 4, False)
        # Assigning a type to the variable 'self' (line 286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lti.to_discrete.__dict__.__setitem__('stypy_localization', localization)
        lti.to_discrete.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lti.to_discrete.__dict__.__setitem__('stypy_type_store', module_type_store)
        lti.to_discrete.__dict__.__setitem__('stypy_function_name', 'lti.to_discrete')
        lti.to_discrete.__dict__.__setitem__('stypy_param_names_list', ['dt', 'method', 'alpha'])
        lti.to_discrete.__dict__.__setitem__('stypy_varargs_param_name', None)
        lti.to_discrete.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lti.to_discrete.__dict__.__setitem__('stypy_call_defaults', defaults)
        lti.to_discrete.__dict__.__setitem__('stypy_call_varargs', varargs)
        lti.to_discrete.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lti.to_discrete.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lti.to_discrete', ['dt', 'method', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_discrete', localization, ['dt', 'method', 'alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_discrete(...)' code ##################

        str_267437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, (-1)), 'str', 'Return a discretized version of the current system.\n\n        Parameters: See `cont2discrete` for details.\n\n        Returns\n        -------\n        sys: instance of `dlti`\n        ')
        
        # Call to NotImplementedError(...): (line 294)
        # Processing the call arguments (line 294)
        str_267439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, 34), 'str', 'to_discrete is not implemented for this system class.')
        # Processing the call keyword arguments (line 294)
        kwargs_267440 = {}
        # Getting the type of 'NotImplementedError' (line 294)
        NotImplementedError_267438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 294)
        NotImplementedError_call_result_267441 = invoke(stypy.reporting.localization.Localization(__file__, 294, 14), NotImplementedError_267438, *[str_267439], **kwargs_267440)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 294, 8), NotImplementedError_call_result_267441, 'raise parameter', BaseException)
        
        # ################# End of 'to_discrete(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_discrete' in the type store
        # Getting the type of 'stypy_return_type' (line 285)
        stypy_return_type_267442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267442)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_discrete'
        return stypy_return_type_267442


# Assigning a type to the variable 'lti' (line 136)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 0), 'lti', lti)
# Declaration of the 'dlti' class
# Getting the type of 'LinearTimeInvariant' (line 298)
LinearTimeInvariant_267443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 11), 'LinearTimeInvariant')

class dlti(LinearTimeInvariant_267443, ):
    str_267444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, (-1)), 'str', '\n    Discrete-time linear time invariant system base class.\n\n    Parameters\n    ----------\n    *system: arguments\n        The `dlti` class can be instantiated with either 2, 3 or 4 arguments.\n        The following gives the number of arguments and the corresponding\n        discrete-time subclass that is created:\n\n            * 2: `TransferFunction`:  (numerator, denominator)\n            * 3: `ZerosPolesGain`: (zeros, poles, gain)\n            * 4: `StateSpace`:  (A, B, C, D)\n\n        Each argument can be an array or a sequence.\n    dt: float, optional\n        Sampling time [s] of the discrete-time systems. Defaults to ``True``\n        (unspecified sampling time). Must be specified as a keyword argument,\n        for example, ``dt=0.1``.\n\n    See Also\n    --------\n    ZerosPolesGain, StateSpace, TransferFunction, lti\n\n    Notes\n    -----\n    `dlti` instances do not exist directly. Instead, `dlti` creates an instance\n    of one of its subclasses: `StateSpace`, `TransferFunction` or\n    `ZerosPolesGain`.\n\n    Changing the value of properties that are not directly part of the current\n    system representation (such as the `zeros` of a `StateSpace` system) is\n    very inefficient and may lead to numerical inaccuracies.  It is better to\n    convert to the specific system representation first. For example, call\n    ``sys = sys.to_zpk()`` before accessing/changing the zeros, poles or gain.\n\n    If (numerator, denominator) is passed in for ``*system``, coefficients for\n    both the numerator and denominator should be specified in descending\n    exponent order (e.g., ``z^2 + 3z + 5`` would be represented as ``[1, 3,\n    5]``).\n\n    .. versionadded:: 0.18.0\n\n    Examples\n    --------\n    >>> from scipy import signal\n\n    >>> signal.dlti(1, 2, 3, 4)\n    StateSpaceDiscrete(\n    array([[1]]),\n    array([[2]]),\n    array([[3]]),\n    array([[4]]),\n    dt: True\n    )\n\n    >>> signal.dlti(1, 2, 3, 4, dt=0.1)\n    StateSpaceDiscrete(\n    array([[1]]),\n    array([[2]]),\n    array([[3]]),\n    array([[4]]),\n    dt: 0.1\n    )\n\n    >>> signal.dlti([1, 2], [3, 4], 5, dt=0.1)\n    ZerosPolesGainDiscrete(\n    array([1, 2]),\n    array([3, 4]),\n    5,\n    dt: 0.1\n    )\n\n    >>> signal.dlti([3, 4], [1, 2], dt=0.1)\n    TransferFunctionDiscrete(\n    array([ 3.,  4.]),\n    array([ 1.,  2.]),\n    dt: 0.1\n    )\n\n    ')

    @norecursion
    def __new__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__new__'
        module_type_store = module_type_store.open_function_context('__new__', 380, 4, False)
        # Assigning a type to the variable 'self' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dlti.__new__.__dict__.__setitem__('stypy_localization', localization)
        dlti.__new__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dlti.__new__.__dict__.__setitem__('stypy_type_store', module_type_store)
        dlti.__new__.__dict__.__setitem__('stypy_function_name', 'dlti.__new__')
        dlti.__new__.__dict__.__setitem__('stypy_param_names_list', [])
        dlti.__new__.__dict__.__setitem__('stypy_varargs_param_name', 'system')
        dlti.__new__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        dlti.__new__.__dict__.__setitem__('stypy_call_defaults', defaults)
        dlti.__new__.__dict__.__setitem__('stypy_call_varargs', varargs)
        dlti.__new__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dlti.__new__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dlti.__new__', [], 'system', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__new__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__new__(...)' code ##################

        str_267445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, 8), 'str', 'Create an instance of the appropriate subclass.')
        
        
        # Getting the type of 'cls' (line 382)
        cls_267446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 11), 'cls')
        # Getting the type of 'dlti' (line 382)
        dlti_267447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 18), 'dlti')
        # Applying the binary operator 'is' (line 382)
        result_is__267448 = python_operator(stypy.reporting.localization.Localization(__file__, 382, 11), 'is', cls_267446, dlti_267447)
        
        # Testing the type of an if condition (line 382)
        if_condition_267449 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 382, 8), result_is__267448)
        # Assigning a type to the variable 'if_condition_267449' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'if_condition_267449', if_condition_267449)
        # SSA begins for if statement (line 382)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 383):
        
        # Assigning a Call to a Name (line 383):
        
        # Call to len(...): (line 383)
        # Processing the call arguments (line 383)
        # Getting the type of 'system' (line 383)
        system_267451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 20), 'system', False)
        # Processing the call keyword arguments (line 383)
        kwargs_267452 = {}
        # Getting the type of 'len' (line 383)
        len_267450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 16), 'len', False)
        # Calling len(args, kwargs) (line 383)
        len_call_result_267453 = invoke(stypy.reporting.localization.Localization(__file__, 383, 16), len_267450, *[system_267451], **kwargs_267452)
        
        # Assigning a type to the variable 'N' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 12), 'N', len_call_result_267453)
        
        
        # Getting the type of 'N' (line 384)
        N_267454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 15), 'N')
        int_267455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 20), 'int')
        # Applying the binary operator '==' (line 384)
        result_eq_267456 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 15), '==', N_267454, int_267455)
        
        # Testing the type of an if condition (line 384)
        if_condition_267457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 384, 12), result_eq_267456)
        # Assigning a type to the variable 'if_condition_267457' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 12), 'if_condition_267457', if_condition_267457)
        # SSA begins for if statement (line 384)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __new__(...): (line 385)
        # Processing the call arguments (line 385)
        # Getting the type of 'TransferFunctionDiscrete' (line 386)
        TransferFunctionDiscrete_267460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 20), 'TransferFunctionDiscrete', False)
        # Getting the type of 'system' (line 386)
        system_267461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 47), 'system', False)
        # Processing the call keyword arguments (line 385)
        # Getting the type of 'kwargs' (line 386)
        kwargs_267462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 57), 'kwargs', False)
        kwargs_267463 = {'kwargs_267462': kwargs_267462}
        # Getting the type of 'TransferFunctionDiscrete' (line 385)
        TransferFunctionDiscrete_267458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 23), 'TransferFunctionDiscrete', False)
        # Obtaining the member '__new__' of a type (line 385)
        new___267459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 23), TransferFunctionDiscrete_267458, '__new__')
        # Calling __new__(args, kwargs) (line 385)
        new___call_result_267464 = invoke(stypy.reporting.localization.Localization(__file__, 385, 23), new___267459, *[TransferFunctionDiscrete_267460, system_267461], **kwargs_267463)
        
        # Assigning a type to the variable 'stypy_return_type' (line 385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 16), 'stypy_return_type', new___call_result_267464)
        # SSA branch for the else part of an if statement (line 384)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'N' (line 387)
        N_267465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 17), 'N')
        int_267466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 22), 'int')
        # Applying the binary operator '==' (line 387)
        result_eq_267467 = python_operator(stypy.reporting.localization.Localization(__file__, 387, 17), '==', N_267465, int_267466)
        
        # Testing the type of an if condition (line 387)
        if_condition_267468 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 387, 17), result_eq_267467)
        # Assigning a type to the variable 'if_condition_267468' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 17), 'if_condition_267468', if_condition_267468)
        # SSA begins for if statement (line 387)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __new__(...): (line 388)
        # Processing the call arguments (line 388)
        # Getting the type of 'ZerosPolesGainDiscrete' (line 388)
        ZerosPolesGainDiscrete_267471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 54), 'ZerosPolesGainDiscrete', False)
        # Getting the type of 'system' (line 389)
        system_267472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 55), 'system', False)
        # Processing the call keyword arguments (line 388)
        # Getting the type of 'kwargs' (line 389)
        kwargs_267473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 65), 'kwargs', False)
        kwargs_267474 = {'kwargs_267473': kwargs_267473}
        # Getting the type of 'ZerosPolesGainDiscrete' (line 388)
        ZerosPolesGainDiscrete_267469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 23), 'ZerosPolesGainDiscrete', False)
        # Obtaining the member '__new__' of a type (line 388)
        new___267470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 23), ZerosPolesGainDiscrete_267469, '__new__')
        # Calling __new__(args, kwargs) (line 388)
        new___call_result_267475 = invoke(stypy.reporting.localization.Localization(__file__, 388, 23), new___267470, *[ZerosPolesGainDiscrete_267471, system_267472], **kwargs_267474)
        
        # Assigning a type to the variable 'stypy_return_type' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 16), 'stypy_return_type', new___call_result_267475)
        # SSA branch for the else part of an if statement (line 387)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'N' (line 390)
        N_267476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 17), 'N')
        int_267477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 22), 'int')
        # Applying the binary operator '==' (line 390)
        result_eq_267478 = python_operator(stypy.reporting.localization.Localization(__file__, 390, 17), '==', N_267476, int_267477)
        
        # Testing the type of an if condition (line 390)
        if_condition_267479 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 390, 17), result_eq_267478)
        # Assigning a type to the variable 'if_condition_267479' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 17), 'if_condition_267479', if_condition_267479)
        # SSA begins for if statement (line 390)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to __new__(...): (line 391)
        # Processing the call arguments (line 391)
        # Getting the type of 'StateSpaceDiscrete' (line 391)
        StateSpaceDiscrete_267482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 50), 'StateSpaceDiscrete', False)
        # Getting the type of 'system' (line 391)
        system_267483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 71), 'system', False)
        # Processing the call keyword arguments (line 391)
        # Getting the type of 'kwargs' (line 392)
        kwargs_267484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 52), 'kwargs', False)
        kwargs_267485 = {'kwargs_267484': kwargs_267484}
        # Getting the type of 'StateSpaceDiscrete' (line 391)
        StateSpaceDiscrete_267480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 23), 'StateSpaceDiscrete', False)
        # Obtaining the member '__new__' of a type (line 391)
        new___267481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 23), StateSpaceDiscrete_267480, '__new__')
        # Calling __new__(args, kwargs) (line 391)
        new___call_result_267486 = invoke(stypy.reporting.localization.Localization(__file__, 391, 23), new___267481, *[StateSpaceDiscrete_267482, system_267483], **kwargs_267485)
        
        # Assigning a type to the variable 'stypy_return_type' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 16), 'stypy_return_type', new___call_result_267486)
        # SSA branch for the else part of an if statement (line 390)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 394)
        # Processing the call arguments (line 394)
        str_267488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 33), 'str', '`system` needs to be an instance of `dlti` or have 2, 3 or 4 arguments.')
        # Processing the call keyword arguments (line 394)
        kwargs_267489 = {}
        # Getting the type of 'ValueError' (line 394)
        ValueError_267487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 394)
        ValueError_call_result_267490 = invoke(stypy.reporting.localization.Localization(__file__, 394, 22), ValueError_267487, *[str_267488], **kwargs_267489)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 394, 16), ValueError_call_result_267490, 'raise parameter', BaseException)
        # SSA join for if statement (line 390)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 387)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 384)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 382)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __new__(...): (line 397)
        # Processing the call arguments (line 397)
        # Getting the type of 'cls' (line 397)
        cls_267497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 40), 'cls', False)
        # Processing the call keyword arguments (line 397)
        kwargs_267498 = {}
        
        # Call to super(...): (line 397)
        # Processing the call arguments (line 397)
        # Getting the type of 'dlti' (line 397)
        dlti_267492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 21), 'dlti', False)
        # Getting the type of 'cls' (line 397)
        cls_267493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 27), 'cls', False)
        # Processing the call keyword arguments (line 397)
        kwargs_267494 = {}
        # Getting the type of 'super' (line 397)
        super_267491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 15), 'super', False)
        # Calling super(args, kwargs) (line 397)
        super_call_result_267495 = invoke(stypy.reporting.localization.Localization(__file__, 397, 15), super_267491, *[dlti_267492, cls_267493], **kwargs_267494)
        
        # Obtaining the member '__new__' of a type (line 397)
        new___267496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 15), super_call_result_267495, '__new__')
        # Calling __new__(args, kwargs) (line 397)
        new___call_result_267499 = invoke(stypy.reporting.localization.Localization(__file__, 397, 15), new___267496, *[cls_267497], **kwargs_267498)
        
        # Assigning a type to the variable 'stypy_return_type' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 8), 'stypy_return_type', new___call_result_267499)
        
        # ################# End of '__new__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__new__' in the type store
        # Getting the type of 'stypy_return_type' (line 380)
        stypy_return_type_267500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267500)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__new__'
        return stypy_return_type_267500


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 399, 4, False)
        # Assigning a type to the variable 'self' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dlti.__init__', [], 'system', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_267501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, (-1)), 'str', '\n        Initialize the `lti` baseclass.\n\n        The heavy lifting is done by the subclasses.\n        ')
        
        # Assigning a Call to a Name (line 405):
        
        # Assigning a Call to a Name (line 405):
        
        # Call to pop(...): (line 405)
        # Processing the call arguments (line 405)
        str_267504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 24), 'str', 'dt')
        # Getting the type of 'True' (line 405)
        True_267505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 30), 'True', False)
        # Processing the call keyword arguments (line 405)
        kwargs_267506 = {}
        # Getting the type of 'kwargs' (line 405)
        kwargs_267502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 13), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 405)
        pop_267503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 13), kwargs_267502, 'pop')
        # Calling pop(args, kwargs) (line 405)
        pop_call_result_267507 = invoke(stypy.reporting.localization.Localization(__file__, 405, 13), pop_267503, *[str_267504, True_267505], **kwargs_267506)
        
        # Assigning a type to the variable 'dt' (line 405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 8), 'dt', pop_call_result_267507)
        
        # Call to __init__(...): (line 406)
        # Getting the type of 'system' (line 406)
        system_267514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 36), 'system', False)
        # Processing the call keyword arguments (line 406)
        # Getting the type of 'kwargs' (line 406)
        kwargs_267515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 46), 'kwargs', False)
        kwargs_267516 = {'kwargs_267515': kwargs_267515}
        
        # Call to super(...): (line 406)
        # Processing the call arguments (line 406)
        # Getting the type of 'dlti' (line 406)
        dlti_267509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 14), 'dlti', False)
        # Getting the type of 'self' (line 406)
        self_267510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 20), 'self', False)
        # Processing the call keyword arguments (line 406)
        kwargs_267511 = {}
        # Getting the type of 'super' (line 406)
        super_267508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 8), 'super', False)
        # Calling super(args, kwargs) (line 406)
        super_call_result_267512 = invoke(stypy.reporting.localization.Localization(__file__, 406, 8), super_267508, *[dlti_267509, self_267510], **kwargs_267511)
        
        # Obtaining the member '__init__' of a type (line 406)
        init___267513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 8), super_call_result_267512, '__init__')
        # Calling __init__(args, kwargs) (line 406)
        init___call_result_267517 = invoke(stypy.reporting.localization.Localization(__file__, 406, 8), init___267513, *[system_267514], **kwargs_267516)
        
        
        # Assigning a Name to a Attribute (line 408):
        
        # Assigning a Name to a Attribute (line 408):
        # Getting the type of 'dt' (line 408)
        dt_267518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 18), 'dt')
        # Getting the type of 'self' (line 408)
        self_267519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'self')
        # Setting the type of the member 'dt' of a type (line 408)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 8), self_267519, 'dt', dt_267518)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def dt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dt'
        module_type_store = module_type_store.open_function_context('dt', 410, 4, False)
        # Assigning a type to the variable 'self' (line 411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dlti.dt.__dict__.__setitem__('stypy_localization', localization)
        dlti.dt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dlti.dt.__dict__.__setitem__('stypy_type_store', module_type_store)
        dlti.dt.__dict__.__setitem__('stypy_function_name', 'dlti.dt')
        dlti.dt.__dict__.__setitem__('stypy_param_names_list', [])
        dlti.dt.__dict__.__setitem__('stypy_varargs_param_name', None)
        dlti.dt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dlti.dt.__dict__.__setitem__('stypy_call_defaults', defaults)
        dlti.dt.__dict__.__setitem__('stypy_call_varargs', varargs)
        dlti.dt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dlti.dt.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dlti.dt', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dt', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dt(...)' code ##################

        str_267520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 8), 'str', 'Return the sampling time of the system.')
        # Getting the type of 'self' (line 413)
        self_267521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 15), 'self')
        # Obtaining the member '_dt' of a type (line 413)
        _dt_267522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 15), self_267521, '_dt')
        # Assigning a type to the variable 'stypy_return_type' (line 413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'stypy_return_type', _dt_267522)
        
        # ################# End of 'dt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dt' in the type store
        # Getting the type of 'stypy_return_type' (line 410)
        stypy_return_type_267523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267523)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dt'
        return stypy_return_type_267523


    @norecursion
    def dt(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'dt'
        module_type_store = module_type_store.open_function_context('dt', 415, 4, False)
        # Assigning a type to the variable 'self' (line 416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dlti.dt.__dict__.__setitem__('stypy_localization', localization)
        dlti.dt.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dlti.dt.__dict__.__setitem__('stypy_type_store', module_type_store)
        dlti.dt.__dict__.__setitem__('stypy_function_name', 'dlti.dt')
        dlti.dt.__dict__.__setitem__('stypy_param_names_list', ['dt'])
        dlti.dt.__dict__.__setitem__('stypy_varargs_param_name', None)
        dlti.dt.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dlti.dt.__dict__.__setitem__('stypy_call_defaults', defaults)
        dlti.dt.__dict__.__setitem__('stypy_call_varargs', varargs)
        dlti.dt.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dlti.dt.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dlti.dt', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'dt', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'dt(...)' code ##################

        
        # Assigning a Name to a Attribute (line 417):
        
        # Assigning a Name to a Attribute (line 417):
        # Getting the type of 'dt' (line 417)
        dt_267524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 19), 'dt')
        # Getting the type of 'self' (line 417)
        self_267525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'self')
        # Setting the type of the member '_dt' of a type (line 417)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 8), self_267525, '_dt', dt_267524)
        
        # ################# End of 'dt(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'dt' in the type store
        # Getting the type of 'stypy_return_type' (line 415)
        stypy_return_type_267526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267526)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'dt'
        return stypy_return_type_267526


    @norecursion
    def impulse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 419)
        None_267527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 25), 'None')
        # Getting the type of 'None' (line 419)
        None_267528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 33), 'None')
        # Getting the type of 'None' (line 419)
        None_267529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 41), 'None')
        defaults = [None_267527, None_267528, None_267529]
        # Create a new context for function 'impulse'
        module_type_store = module_type_store.open_function_context('impulse', 419, 4, False)
        # Assigning a type to the variable 'self' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dlti.impulse.__dict__.__setitem__('stypy_localization', localization)
        dlti.impulse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dlti.impulse.__dict__.__setitem__('stypy_type_store', module_type_store)
        dlti.impulse.__dict__.__setitem__('stypy_function_name', 'dlti.impulse')
        dlti.impulse.__dict__.__setitem__('stypy_param_names_list', ['x0', 't', 'n'])
        dlti.impulse.__dict__.__setitem__('stypy_varargs_param_name', None)
        dlti.impulse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dlti.impulse.__dict__.__setitem__('stypy_call_defaults', defaults)
        dlti.impulse.__dict__.__setitem__('stypy_call_varargs', varargs)
        dlti.impulse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dlti.impulse.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dlti.impulse', ['x0', 't', 'n'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'impulse', localization, ['x0', 't', 'n'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'impulse(...)' code ##################

        str_267530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 423, (-1)), 'str', '\n        Return the impulse response of the discrete-time `dlti` system.\n        See `dimpulse` for details.\n        ')
        
        # Call to dimpulse(...): (line 424)
        # Processing the call arguments (line 424)
        # Getting the type of 'self' (line 424)
        self_267532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 24), 'self', False)
        # Processing the call keyword arguments (line 424)
        # Getting the type of 'x0' (line 424)
        x0_267533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 33), 'x0', False)
        keyword_267534 = x0_267533
        # Getting the type of 't' (line 424)
        t_267535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 39), 't', False)
        keyword_267536 = t_267535
        # Getting the type of 'n' (line 424)
        n_267537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 44), 'n', False)
        keyword_267538 = n_267537
        kwargs_267539 = {'x0': keyword_267534, 't': keyword_267536, 'n': keyword_267538}
        # Getting the type of 'dimpulse' (line 424)
        dimpulse_267531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 15), 'dimpulse', False)
        # Calling dimpulse(args, kwargs) (line 424)
        dimpulse_call_result_267540 = invoke(stypy.reporting.localization.Localization(__file__, 424, 15), dimpulse_267531, *[self_267532], **kwargs_267539)
        
        # Assigning a type to the variable 'stypy_return_type' (line 424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 424, 8), 'stypy_return_type', dimpulse_call_result_267540)
        
        # ################# End of 'impulse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'impulse' in the type store
        # Getting the type of 'stypy_return_type' (line 419)
        stypy_return_type_267541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267541)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'impulse'
        return stypy_return_type_267541


    @norecursion
    def step(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 426)
        None_267542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 22), 'None')
        # Getting the type of 'None' (line 426)
        None_267543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 30), 'None')
        # Getting the type of 'None' (line 426)
        None_267544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 38), 'None')
        defaults = [None_267542, None_267543, None_267544]
        # Create a new context for function 'step'
        module_type_store = module_type_store.open_function_context('step', 426, 4, False)
        # Assigning a type to the variable 'self' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dlti.step.__dict__.__setitem__('stypy_localization', localization)
        dlti.step.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dlti.step.__dict__.__setitem__('stypy_type_store', module_type_store)
        dlti.step.__dict__.__setitem__('stypy_function_name', 'dlti.step')
        dlti.step.__dict__.__setitem__('stypy_param_names_list', ['x0', 't', 'n'])
        dlti.step.__dict__.__setitem__('stypy_varargs_param_name', None)
        dlti.step.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dlti.step.__dict__.__setitem__('stypy_call_defaults', defaults)
        dlti.step.__dict__.__setitem__('stypy_call_varargs', varargs)
        dlti.step.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dlti.step.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dlti.step', ['x0', 't', 'n'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'step', localization, ['x0', 't', 'n'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'step(...)' code ##################

        str_267545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, (-1)), 'str', '\n        Return the step response of the discrete-time `dlti` system.\n        See `dstep` for details.\n        ')
        
        # Call to dstep(...): (line 431)
        # Processing the call arguments (line 431)
        # Getting the type of 'self' (line 431)
        self_267547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 21), 'self', False)
        # Processing the call keyword arguments (line 431)
        # Getting the type of 'x0' (line 431)
        x0_267548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 30), 'x0', False)
        keyword_267549 = x0_267548
        # Getting the type of 't' (line 431)
        t_267550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 36), 't', False)
        keyword_267551 = t_267550
        # Getting the type of 'n' (line 431)
        n_267552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 41), 'n', False)
        keyword_267553 = n_267552
        kwargs_267554 = {'x0': keyword_267549, 't': keyword_267551, 'n': keyword_267553}
        # Getting the type of 'dstep' (line 431)
        dstep_267546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 15), 'dstep', False)
        # Calling dstep(args, kwargs) (line 431)
        dstep_call_result_267555 = invoke(stypy.reporting.localization.Localization(__file__, 431, 15), dstep_267546, *[self_267547], **kwargs_267554)
        
        # Assigning a type to the variable 'stypy_return_type' (line 431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 8), 'stypy_return_type', dstep_call_result_267555)
        
        # ################# End of 'step(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'step' in the type store
        # Getting the type of 'stypy_return_type' (line 426)
        stypy_return_type_267556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267556)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'step'
        return stypy_return_type_267556


    @norecursion
    def output(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 433)
        None_267557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 30), 'None')
        defaults = [None_267557]
        # Create a new context for function 'output'
        module_type_store = module_type_store.open_function_context('output', 433, 4, False)
        # Assigning a type to the variable 'self' (line 434)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dlti.output.__dict__.__setitem__('stypy_localization', localization)
        dlti.output.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dlti.output.__dict__.__setitem__('stypy_type_store', module_type_store)
        dlti.output.__dict__.__setitem__('stypy_function_name', 'dlti.output')
        dlti.output.__dict__.__setitem__('stypy_param_names_list', ['u', 't', 'x0'])
        dlti.output.__dict__.__setitem__('stypy_varargs_param_name', None)
        dlti.output.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dlti.output.__dict__.__setitem__('stypy_call_defaults', defaults)
        dlti.output.__dict__.__setitem__('stypy_call_varargs', varargs)
        dlti.output.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dlti.output.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dlti.output', ['u', 't', 'x0'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'output', localization, ['u', 't', 'x0'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'output(...)' code ##################

        str_267558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, (-1)), 'str', '\n        Return the response of the discrete-time system to input `u`.\n        See `dlsim` for details.\n        ')
        
        # Call to dlsim(...): (line 438)
        # Processing the call arguments (line 438)
        # Getting the type of 'self' (line 438)
        self_267560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 21), 'self', False)
        # Getting the type of 'u' (line 438)
        u_267561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 27), 'u', False)
        # Getting the type of 't' (line 438)
        t_267562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 30), 't', False)
        # Processing the call keyword arguments (line 438)
        # Getting the type of 'x0' (line 438)
        x0_267563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 36), 'x0', False)
        keyword_267564 = x0_267563
        kwargs_267565 = {'x0': keyword_267564}
        # Getting the type of 'dlsim' (line 438)
        dlsim_267559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 15), 'dlsim', False)
        # Calling dlsim(args, kwargs) (line 438)
        dlsim_call_result_267566 = invoke(stypy.reporting.localization.Localization(__file__, 438, 15), dlsim_267559, *[self_267560, u_267561, t_267562], **kwargs_267565)
        
        # Assigning a type to the variable 'stypy_return_type' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 8), 'stypy_return_type', dlsim_call_result_267566)
        
        # ################# End of 'output(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'output' in the type store
        # Getting the type of 'stypy_return_type' (line 433)
        stypy_return_type_267567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267567)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'output'
        return stypy_return_type_267567


    @norecursion
    def bode(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 440)
        None_267568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 21), 'None')
        int_267569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 440, 29), 'int')
        defaults = [None_267568, int_267569]
        # Create a new context for function 'bode'
        module_type_store = module_type_store.open_function_context('bode', 440, 4, False)
        # Assigning a type to the variable 'self' (line 441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dlti.bode.__dict__.__setitem__('stypy_localization', localization)
        dlti.bode.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dlti.bode.__dict__.__setitem__('stypy_type_store', module_type_store)
        dlti.bode.__dict__.__setitem__('stypy_function_name', 'dlti.bode')
        dlti.bode.__dict__.__setitem__('stypy_param_names_list', ['w', 'n'])
        dlti.bode.__dict__.__setitem__('stypy_varargs_param_name', None)
        dlti.bode.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dlti.bode.__dict__.__setitem__('stypy_call_defaults', defaults)
        dlti.bode.__dict__.__setitem__('stypy_call_varargs', varargs)
        dlti.bode.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dlti.bode.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dlti.bode', ['w', 'n'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'bode', localization, ['w', 'n'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'bode(...)' code ##################

        str_267570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, (-1)), 'str', '\n        Calculate Bode magnitude and phase data of a discrete-time system.\n\n        Returns a 3-tuple containing arrays of frequencies [rad/s], magnitude\n        [dB] and phase [deg]. See `dbode` for details.\n\n        Examples\n        --------\n        >>> from scipy import signal\n        >>> import matplotlib.pyplot as plt\n\n        Transfer function: H(z) = 1 / (z^2 + 2z + 3) with sampling time 0.5s\n\n        >>> sys = signal.TransferFunction([1], [1, 2, 3], dt=0.5)\n\n        Equivalent: signal.dbode(sys)\n\n        >>> w, mag, phase = sys.bode()\n\n        >>> plt.figure()\n        >>> plt.semilogx(w, mag)    # Bode magnitude plot\n        >>> plt.figure()\n        >>> plt.semilogx(w, phase)  # Bode phase plot\n        >>> plt.show()\n\n        ')
        
        # Call to dbode(...): (line 467)
        # Processing the call arguments (line 467)
        # Getting the type of 'self' (line 467)
        self_267572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 21), 'self', False)
        # Processing the call keyword arguments (line 467)
        # Getting the type of 'w' (line 467)
        w_267573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 29), 'w', False)
        keyword_267574 = w_267573
        # Getting the type of 'n' (line 467)
        n_267575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 34), 'n', False)
        keyword_267576 = n_267575
        kwargs_267577 = {'w': keyword_267574, 'n': keyword_267576}
        # Getting the type of 'dbode' (line 467)
        dbode_267571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 15), 'dbode', False)
        # Calling dbode(args, kwargs) (line 467)
        dbode_call_result_267578 = invoke(stypy.reporting.localization.Localization(__file__, 467, 15), dbode_267571, *[self_267572], **kwargs_267577)
        
        # Assigning a type to the variable 'stypy_return_type' (line 467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 8), 'stypy_return_type', dbode_call_result_267578)
        
        # ################# End of 'bode(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'bode' in the type store
        # Getting the type of 'stypy_return_type' (line 440)
        stypy_return_type_267579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267579)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'bode'
        return stypy_return_type_267579


    @norecursion
    def freqresp(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 469)
        None_267580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 25), 'None')
        int_267581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 33), 'int')
        # Getting the type of 'False' (line 469)
        False_267582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 46), 'False')
        defaults = [None_267580, int_267581, False_267582]
        # Create a new context for function 'freqresp'
        module_type_store = module_type_store.open_function_context('freqresp', 469, 4, False)
        # Assigning a type to the variable 'self' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        dlti.freqresp.__dict__.__setitem__('stypy_localization', localization)
        dlti.freqresp.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        dlti.freqresp.__dict__.__setitem__('stypy_type_store', module_type_store)
        dlti.freqresp.__dict__.__setitem__('stypy_function_name', 'dlti.freqresp')
        dlti.freqresp.__dict__.__setitem__('stypy_param_names_list', ['w', 'n', 'whole'])
        dlti.freqresp.__dict__.__setitem__('stypy_varargs_param_name', None)
        dlti.freqresp.__dict__.__setitem__('stypy_kwargs_param_name', None)
        dlti.freqresp.__dict__.__setitem__('stypy_call_defaults', defaults)
        dlti.freqresp.__dict__.__setitem__('stypy_call_varargs', varargs)
        dlti.freqresp.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        dlti.freqresp.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dlti.freqresp', ['w', 'n', 'whole'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'freqresp', localization, ['w', 'n', 'whole'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'freqresp(...)' code ##################

        str_267583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, (-1)), 'str', '\n        Calculate the frequency response of a discrete-time system.\n\n        Returns a 2-tuple containing arrays of frequencies [rad/s] and\n        complex magnitude.\n        See `dfreqresp` for details.\n\n        ')
        
        # Call to dfreqresp(...): (line 478)
        # Processing the call arguments (line 478)
        # Getting the type of 'self' (line 478)
        self_267585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 25), 'self', False)
        # Processing the call keyword arguments (line 478)
        # Getting the type of 'w' (line 478)
        w_267586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 33), 'w', False)
        keyword_267587 = w_267586
        # Getting the type of 'n' (line 478)
        n_267588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 38), 'n', False)
        keyword_267589 = n_267588
        # Getting the type of 'whole' (line 478)
        whole_267590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 47), 'whole', False)
        keyword_267591 = whole_267590
        kwargs_267592 = {'whole': keyword_267591, 'w': keyword_267587, 'n': keyword_267589}
        # Getting the type of 'dfreqresp' (line 478)
        dfreqresp_267584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 15), 'dfreqresp', False)
        # Calling dfreqresp(args, kwargs) (line 478)
        dfreqresp_call_result_267593 = invoke(stypy.reporting.localization.Localization(__file__, 478, 15), dfreqresp_267584, *[self_267585], **kwargs_267592)
        
        # Assigning a type to the variable 'stypy_return_type' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'stypy_return_type', dfreqresp_call_result_267593)
        
        # ################# End of 'freqresp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'freqresp' in the type store
        # Getting the type of 'stypy_return_type' (line 469)
        stypy_return_type_267594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267594)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'freqresp'
        return stypy_return_type_267594


# Assigning a type to the variable 'dlti' (line 298)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 0), 'dlti', dlti)
# Declaration of the 'TransferFunction' class
# Getting the type of 'LinearTimeInvariant' (line 481)
LinearTimeInvariant_267595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 23), 'LinearTimeInvariant')

class TransferFunction(LinearTimeInvariant_267595, ):
    str_267596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, (-1)), 'str', 'Linear Time Invariant system class in transfer function form.\n\n    Represents the system as the continuous-time transfer function\n    :math:`H(s)=\\sum_{i=0}^N b[N-i] s^i / \\sum_{j=0}^M a[M-j] s^j` or the\n    discrete-time transfer function\n    :math:`H(s)=\\sum_{i=0}^N b[N-i] z^i / \\sum_{j=0}^M a[M-j] z^j`, where\n    :math:`b` are elements of the numerator `num`, :math:`a` are elements of\n    the denominator `den`, and ``N == len(b) - 1``, ``M == len(a) - 1``.\n    `TransferFunction` systems inherit additional\n    functionality from the `lti`, respectively the `dlti` classes, depending on\n    which system representation is used.\n\n    Parameters\n    ----------\n    *system: arguments\n        The `TransferFunction` class can be instantiated with 1 or 2\n        arguments. The following gives the number of input arguments and their\n        interpretation:\n\n            * 1: `lti` or `dlti` system: (`StateSpace`, `TransferFunction` or\n              `ZerosPolesGain`)\n            * 2: array_like: (numerator, denominator)\n    dt: float, optional\n        Sampling time [s] of the discrete-time systems. Defaults to `None`\n        (continuous-time). Must be specified as a keyword argument, for\n        example, ``dt=0.1``.\n\n    See Also\n    --------\n    ZerosPolesGain, StateSpace, lti, dlti\n    tf2ss, tf2zpk, tf2sos\n\n    Notes\n    -----\n    Changing the value of properties that are not part of the\n    `TransferFunction` system representation (such as the `A`, `B`, `C`, `D`\n    state-space matrices) is very inefficient and may lead to numerical\n    inaccuracies.  It is better to convert to the specific system\n    representation first. For example, call ``sys = sys.to_ss()`` before\n    accessing/changing the A, B, C, D system matrices.\n\n    If (numerator, denominator) is passed in for ``*system``, coefficients\n    for both the numerator and denominator should be specified in descending\n    exponent order (e.g. ``s^2 + 3s + 5`` or ``z^2 + 3z + 5`` would be\n    represented as ``[1, 3, 5]``)\n\n    Examples\n    --------\n    Construct the transfer function:\n\n    .. math:: H(s) = \\frac{s^2 + 3s + 3}{s^2 + 2s + 1}\n\n    >>> from scipy import signal\n\n    >>> num = [1, 3, 3]\n    >>> den = [1, 2, 1]\n\n    >>> signal.TransferFunction(num, den)\n    TransferFunctionContinuous(\n    array([ 1.,  3.,  3.]),\n    array([ 1.,  2.,  1.]),\n    dt: None\n    )\n\n    Contruct the transfer function with a sampling time of 0.1 seconds:\n\n    .. math:: H(z) = \\frac{z^2 + 3z + 3}{z^2 + 2z + 1}\n\n    >>> signal.TransferFunction(num, den, dt=0.1)\n    TransferFunctionDiscrete(\n    array([ 1.,  3.,  3.]),\n    array([ 1.,  2.,  1.]),\n    dt: 0.1\n    )\n\n    ')

    @norecursion
    def __new__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__new__'
        module_type_store = module_type_store.open_function_context('__new__', 558, 4, False)
        # Assigning a type to the variable 'self' (line 559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransferFunction.__new__.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction.__new__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransferFunction.__new__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction.__new__.__dict__.__setitem__('stypy_function_name', 'TransferFunction.__new__')
        TransferFunction.__new__.__dict__.__setitem__('stypy_param_names_list', [])
        TransferFunction.__new__.__dict__.__setitem__('stypy_varargs_param_name', 'system')
        TransferFunction.__new__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        TransferFunction.__new__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction.__new__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction.__new__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction.__new__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunction.__new__', [], 'system', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__new__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__new__(...)' code ##################

        str_267597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 8), 'str', 'Handle object conversion if input is an instance of lti.')
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'system' (line 560)
        system_267599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 15), 'system', False)
        # Processing the call keyword arguments (line 560)
        kwargs_267600 = {}
        # Getting the type of 'len' (line 560)
        len_267598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 11), 'len', False)
        # Calling len(args, kwargs) (line 560)
        len_call_result_267601 = invoke(stypy.reporting.localization.Localization(__file__, 560, 11), len_267598, *[system_267599], **kwargs_267600)
        
        int_267602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 26), 'int')
        # Applying the binary operator '==' (line 560)
        result_eq_267603 = python_operator(stypy.reporting.localization.Localization(__file__, 560, 11), '==', len_call_result_267601, int_267602)
        
        
        # Call to isinstance(...): (line 560)
        # Processing the call arguments (line 560)
        
        # Obtaining the type of the subscript
        int_267605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 50), 'int')
        # Getting the type of 'system' (line 560)
        system_267606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 43), 'system', False)
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___267607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 43), system_267606, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_267608 = invoke(stypy.reporting.localization.Localization(__file__, 560, 43), getitem___267607, int_267605)
        
        # Getting the type of 'LinearTimeInvariant' (line 560)
        LinearTimeInvariant_267609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 54), 'LinearTimeInvariant', False)
        # Processing the call keyword arguments (line 560)
        kwargs_267610 = {}
        # Getting the type of 'isinstance' (line 560)
        isinstance_267604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 32), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 560)
        isinstance_call_result_267611 = invoke(stypy.reporting.localization.Localization(__file__, 560, 32), isinstance_267604, *[subscript_call_result_267608, LinearTimeInvariant_267609], **kwargs_267610)
        
        # Applying the binary operator 'and' (line 560)
        result_and_keyword_267612 = python_operator(stypy.reporting.localization.Localization(__file__, 560, 11), 'and', result_eq_267603, isinstance_call_result_267611)
        
        # Testing the type of an if condition (line 560)
        if_condition_267613 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 560, 8), result_and_keyword_267612)
        # Assigning a type to the variable 'if_condition_267613' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'if_condition_267613', if_condition_267613)
        # SSA begins for if statement (line 560)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to to_tf(...): (line 561)
        # Processing the call keyword arguments (line 561)
        kwargs_267619 = {}
        
        # Obtaining the type of the subscript
        int_267614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 26), 'int')
        # Getting the type of 'system' (line 561)
        system_267615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 19), 'system', False)
        # Obtaining the member '__getitem__' of a type (line 561)
        getitem___267616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 19), system_267615, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 561)
        subscript_call_result_267617 = invoke(stypy.reporting.localization.Localization(__file__, 561, 19), getitem___267616, int_267614)
        
        # Obtaining the member 'to_tf' of a type (line 561)
        to_tf_267618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 19), subscript_call_result_267617, 'to_tf')
        # Calling to_tf(args, kwargs) (line 561)
        to_tf_call_result_267620 = invoke(stypy.reporting.localization.Localization(__file__, 561, 19), to_tf_267618, *[], **kwargs_267619)
        
        # Assigning a type to the variable 'stypy_return_type' (line 561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'stypy_return_type', to_tf_call_result_267620)
        # SSA join for if statement (line 560)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'cls' (line 564)
        cls_267621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 11), 'cls')
        # Getting the type of 'TransferFunction' (line 564)
        TransferFunction_267622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 18), 'TransferFunction')
        # Applying the binary operator 'is' (line 564)
        result_is__267623 = python_operator(stypy.reporting.localization.Localization(__file__, 564, 11), 'is', cls_267621, TransferFunction_267622)
        
        # Testing the type of an if condition (line 564)
        if_condition_267624 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 564, 8), result_is__267623)
        # Assigning a type to the variable 'if_condition_267624' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'if_condition_267624', if_condition_267624)
        # SSA begins for if statement (line 564)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 565)
        
        # Call to get(...): (line 565)
        # Processing the call arguments (line 565)
        str_267627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 26), 'str', 'dt')
        # Processing the call keyword arguments (line 565)
        kwargs_267628 = {}
        # Getting the type of 'kwargs' (line 565)
        kwargs_267625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 15), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 565)
        get_267626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 15), kwargs_267625, 'get')
        # Calling get(args, kwargs) (line 565)
        get_call_result_267629 = invoke(stypy.reporting.localization.Localization(__file__, 565, 15), get_267626, *[str_267627], **kwargs_267628)
        
        # Getting the type of 'None' (line 565)
        None_267630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 35), 'None')
        
        (may_be_267631, more_types_in_union_267632) = may_be_none(get_call_result_267629, None_267630)

        if may_be_267631:

            if more_types_in_union_267632:
                # Runtime conditional SSA (line 565)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to __new__(...): (line 566)
            # Processing the call arguments (line 566)
            # Getting the type of 'TransferFunctionContinuous' (line 567)
            TransferFunctionContinuous_267635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 20), 'TransferFunctionContinuous', False)
            # Getting the type of 'system' (line 568)
            system_267636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 21), 'system', False)
            # Processing the call keyword arguments (line 566)
            # Getting the type of 'kwargs' (line 569)
            kwargs_267637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 22), 'kwargs', False)
            kwargs_267638 = {'kwargs_267637': kwargs_267637}
            # Getting the type of 'TransferFunctionContinuous' (line 566)
            TransferFunctionContinuous_267633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 23), 'TransferFunctionContinuous', False)
            # Obtaining the member '__new__' of a type (line 566)
            new___267634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 23), TransferFunctionContinuous_267633, '__new__')
            # Calling __new__(args, kwargs) (line 566)
            new___call_result_267639 = invoke(stypy.reporting.localization.Localization(__file__, 566, 23), new___267634, *[TransferFunctionContinuous_267635, system_267636], **kwargs_267638)
            
            # Assigning a type to the variable 'stypy_return_type' (line 566)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 16), 'stypy_return_type', new___call_result_267639)

            if more_types_in_union_267632:
                # Runtime conditional SSA for else branch (line 565)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_267631) or more_types_in_union_267632):
            
            # Call to __new__(...): (line 571)
            # Processing the call arguments (line 571)
            # Getting the type of 'TransferFunctionDiscrete' (line 572)
            TransferFunctionDiscrete_267642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 20), 'TransferFunctionDiscrete', False)
            # Getting the type of 'system' (line 573)
            system_267643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 21), 'system', False)
            # Processing the call keyword arguments (line 571)
            # Getting the type of 'kwargs' (line 574)
            kwargs_267644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 22), 'kwargs', False)
            kwargs_267645 = {'kwargs_267644': kwargs_267644}
            # Getting the type of 'TransferFunctionDiscrete' (line 571)
            TransferFunctionDiscrete_267640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 23), 'TransferFunctionDiscrete', False)
            # Obtaining the member '__new__' of a type (line 571)
            new___267641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 23), TransferFunctionDiscrete_267640, '__new__')
            # Calling __new__(args, kwargs) (line 571)
            new___call_result_267646 = invoke(stypy.reporting.localization.Localization(__file__, 571, 23), new___267641, *[TransferFunctionDiscrete_267642, system_267643], **kwargs_267645)
            
            # Assigning a type to the variable 'stypy_return_type' (line 571)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 16), 'stypy_return_type', new___call_result_267646)

            if (may_be_267631 and more_types_in_union_267632):
                # SSA join for if statement (line 565)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 564)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __new__(...): (line 577)
        # Processing the call arguments (line 577)
        # Getting the type of 'cls' (line 577)
        cls_267653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 52), 'cls', False)
        # Processing the call keyword arguments (line 577)
        kwargs_267654 = {}
        
        # Call to super(...): (line 577)
        # Processing the call arguments (line 577)
        # Getting the type of 'TransferFunction' (line 577)
        TransferFunction_267648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 21), 'TransferFunction', False)
        # Getting the type of 'cls' (line 577)
        cls_267649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 39), 'cls', False)
        # Processing the call keyword arguments (line 577)
        kwargs_267650 = {}
        # Getting the type of 'super' (line 577)
        super_267647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 15), 'super', False)
        # Calling super(args, kwargs) (line 577)
        super_call_result_267651 = invoke(stypy.reporting.localization.Localization(__file__, 577, 15), super_267647, *[TransferFunction_267648, cls_267649], **kwargs_267650)
        
        # Obtaining the member '__new__' of a type (line 577)
        new___267652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 15), super_call_result_267651, '__new__')
        # Calling __new__(args, kwargs) (line 577)
        new___call_result_267655 = invoke(stypy.reporting.localization.Localization(__file__, 577, 15), new___267652, *[cls_267653], **kwargs_267654)
        
        # Assigning a type to the variable 'stypy_return_type' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'stypy_return_type', new___call_result_267655)
        
        # ################# End of '__new__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__new__' in the type store
        # Getting the type of 'stypy_return_type' (line 558)
        stypy_return_type_267656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267656)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__new__'
        return stypy_return_type_267656


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 579, 4, False)
        # Assigning a type to the variable 'self' (line 580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunction.__init__', [], 'system', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_267657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 8), 'str', 'Initialize the state space LTI system.')
        
        
        # Call to isinstance(...): (line 582)
        # Processing the call arguments (line 582)
        
        # Obtaining the type of the subscript
        int_267659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 29), 'int')
        # Getting the type of 'system' (line 582)
        system_267660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 22), 'system', False)
        # Obtaining the member '__getitem__' of a type (line 582)
        getitem___267661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 22), system_267660, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 582)
        subscript_call_result_267662 = invoke(stypy.reporting.localization.Localization(__file__, 582, 22), getitem___267661, int_267659)
        
        # Getting the type of 'LinearTimeInvariant' (line 582)
        LinearTimeInvariant_267663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 33), 'LinearTimeInvariant', False)
        # Processing the call keyword arguments (line 582)
        kwargs_267664 = {}
        # Getting the type of 'isinstance' (line 582)
        isinstance_267658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 582)
        isinstance_call_result_267665 = invoke(stypy.reporting.localization.Localization(__file__, 582, 11), isinstance_267658, *[subscript_call_result_267662, LinearTimeInvariant_267663], **kwargs_267664)
        
        # Testing the type of an if condition (line 582)
        if_condition_267666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 582, 8), isinstance_call_result_267665)
        # Assigning a type to the variable 'if_condition_267666' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'if_condition_267666', if_condition_267666)
        # SSA begins for if statement (line 582)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 582)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 586)
        # Processing the call keyword arguments (line 586)
        # Getting the type of 'kwargs' (line 586)
        kwargs_267673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 49), 'kwargs', False)
        kwargs_267674 = {'kwargs_267673': kwargs_267673}
        
        # Call to super(...): (line 586)
        # Processing the call arguments (line 586)
        # Getting the type of 'TransferFunction' (line 586)
        TransferFunction_267668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 14), 'TransferFunction', False)
        # Getting the type of 'self' (line 586)
        self_267669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 32), 'self', False)
        # Processing the call keyword arguments (line 586)
        kwargs_267670 = {}
        # Getting the type of 'super' (line 586)
        super_267667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 8), 'super', False)
        # Calling super(args, kwargs) (line 586)
        super_call_result_267671 = invoke(stypy.reporting.localization.Localization(__file__, 586, 8), super_267667, *[TransferFunction_267668, self_267669], **kwargs_267670)
        
        # Obtaining the member '__init__' of a type (line 586)
        init___267672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 8), super_call_result_267671, '__init__')
        # Calling __init__(args, kwargs) (line 586)
        init___call_result_267675 = invoke(stypy.reporting.localization.Localization(__file__, 586, 8), init___267672, *[], **kwargs_267674)
        
        
        # Assigning a Name to a Attribute (line 588):
        
        # Assigning a Name to a Attribute (line 588):
        # Getting the type of 'None' (line 588)
        None_267676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 20), 'None')
        # Getting the type of 'self' (line 588)
        self_267677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 8), 'self')
        # Setting the type of the member '_num' of a type (line 588)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 8), self_267677, '_num', None_267676)
        
        # Assigning a Name to a Attribute (line 589):
        
        # Assigning a Name to a Attribute (line 589):
        # Getting the type of 'None' (line 589)
        None_267678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 20), 'None')
        # Getting the type of 'self' (line 589)
        self_267679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'self')
        # Setting the type of the member '_den' of a type (line 589)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 8), self_267679, '_den', None_267678)
        
        # Assigning a Call to a Tuple (line 591):
        
        # Assigning a Subscript to a Name (line 591):
        
        # Obtaining the type of the subscript
        int_267680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 8), 'int')
        
        # Call to normalize(...): (line 591)
        # Getting the type of 'system' (line 591)
        system_267682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 40), 'system', False)
        # Processing the call keyword arguments (line 591)
        kwargs_267683 = {}
        # Getting the type of 'normalize' (line 591)
        normalize_267681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 29), 'normalize', False)
        # Calling normalize(args, kwargs) (line 591)
        normalize_call_result_267684 = invoke(stypy.reporting.localization.Localization(__file__, 591, 29), normalize_267681, *[system_267682], **kwargs_267683)
        
        # Obtaining the member '__getitem__' of a type (line 591)
        getitem___267685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 8), normalize_call_result_267684, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 591)
        subscript_call_result_267686 = invoke(stypy.reporting.localization.Localization(__file__, 591, 8), getitem___267685, int_267680)
        
        # Assigning a type to the variable 'tuple_var_assignment_267105' (line 591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 8), 'tuple_var_assignment_267105', subscript_call_result_267686)
        
        # Assigning a Subscript to a Name (line 591):
        
        # Obtaining the type of the subscript
        int_267687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 8), 'int')
        
        # Call to normalize(...): (line 591)
        # Getting the type of 'system' (line 591)
        system_267689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 40), 'system', False)
        # Processing the call keyword arguments (line 591)
        kwargs_267690 = {}
        # Getting the type of 'normalize' (line 591)
        normalize_267688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 29), 'normalize', False)
        # Calling normalize(args, kwargs) (line 591)
        normalize_call_result_267691 = invoke(stypy.reporting.localization.Localization(__file__, 591, 29), normalize_267688, *[system_267689], **kwargs_267690)
        
        # Obtaining the member '__getitem__' of a type (line 591)
        getitem___267692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 8), normalize_call_result_267691, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 591)
        subscript_call_result_267693 = invoke(stypy.reporting.localization.Localization(__file__, 591, 8), getitem___267692, int_267687)
        
        # Assigning a type to the variable 'tuple_var_assignment_267106' (line 591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 8), 'tuple_var_assignment_267106', subscript_call_result_267693)
        
        # Assigning a Name to a Attribute (line 591):
        # Getting the type of 'tuple_var_assignment_267105' (line 591)
        tuple_var_assignment_267105_267694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 8), 'tuple_var_assignment_267105')
        # Getting the type of 'self' (line 591)
        self_267695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 8), 'self')
        # Setting the type of the member 'num' of a type (line 591)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 8), self_267695, 'num', tuple_var_assignment_267105_267694)
        
        # Assigning a Name to a Attribute (line 591):
        # Getting the type of 'tuple_var_assignment_267106' (line 591)
        tuple_var_assignment_267106_267696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 8), 'tuple_var_assignment_267106')
        # Getting the type of 'self' (line 591)
        self_267697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 18), 'self')
        # Setting the type of the member 'den' of a type (line 591)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 18), self_267697, 'den', tuple_var_assignment_267106_267696)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 593, 4, False)
        # Assigning a type to the variable 'self' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransferFunction.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransferFunction.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'TransferFunction.stypy__repr__')
        TransferFunction.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        TransferFunction.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunction.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunction.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunction.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_267698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 8), 'str', "Return representation of the system's transfer function")
        
        # Call to format(...): (line 595)
        # Processing the call arguments (line 595)
        # Getting the type of 'self' (line 596)
        self_267701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 12), 'self', False)
        # Obtaining the member '__class__' of a type (line 596)
        class___267702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 12), self_267701, '__class__')
        # Obtaining the member '__name__' of a type (line 596)
        name___267703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 12), class___267702, '__name__')
        
        # Call to repr(...): (line 597)
        # Processing the call arguments (line 597)
        # Getting the type of 'self' (line 597)
        self_267705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 17), 'self', False)
        # Obtaining the member 'num' of a type (line 597)
        num_267706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 17), self_267705, 'num')
        # Processing the call keyword arguments (line 597)
        kwargs_267707 = {}
        # Getting the type of 'repr' (line 597)
        repr_267704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 597)
        repr_call_result_267708 = invoke(stypy.reporting.localization.Localization(__file__, 597, 12), repr_267704, *[num_267706], **kwargs_267707)
        
        
        # Call to repr(...): (line 598)
        # Processing the call arguments (line 598)
        # Getting the type of 'self' (line 598)
        self_267710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 17), 'self', False)
        # Obtaining the member 'den' of a type (line 598)
        den_267711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 17), self_267710, 'den')
        # Processing the call keyword arguments (line 598)
        kwargs_267712 = {}
        # Getting the type of 'repr' (line 598)
        repr_267709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 598)
        repr_call_result_267713 = invoke(stypy.reporting.localization.Localization(__file__, 598, 12), repr_267709, *[den_267711], **kwargs_267712)
        
        
        # Call to repr(...): (line 599)
        # Processing the call arguments (line 599)
        # Getting the type of 'self' (line 599)
        self_267715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 17), 'self', False)
        # Obtaining the member 'dt' of a type (line 599)
        dt_267716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 17), self_267715, 'dt')
        # Processing the call keyword arguments (line 599)
        kwargs_267717 = {}
        # Getting the type of 'repr' (line 599)
        repr_267714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 599)
        repr_call_result_267718 = invoke(stypy.reporting.localization.Localization(__file__, 599, 12), repr_267714, *[dt_267716], **kwargs_267717)
        
        # Processing the call keyword arguments (line 595)
        kwargs_267719 = {}
        str_267699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 15), 'str', '{0}(\n{1},\n{2},\ndt: {3}\n)')
        # Obtaining the member 'format' of a type (line 595)
        format_267700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 15), str_267699, 'format')
        # Calling format(args, kwargs) (line 595)
        format_call_result_267720 = invoke(stypy.reporting.localization.Localization(__file__, 595, 15), format_267700, *[name___267703, repr_call_result_267708, repr_call_result_267713, repr_call_result_267718], **kwargs_267719)
        
        # Assigning a type to the variable 'stypy_return_type' (line 595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 8), 'stypy_return_type', format_call_result_267720)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 593)
        stypy_return_type_267721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267721)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_267721


    @norecursion
    def num(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'num'
        module_type_store = module_type_store.open_function_context('num', 602, 4, False)
        # Assigning a type to the variable 'self' (line 603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransferFunction.num.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction.num.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransferFunction.num.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction.num.__dict__.__setitem__('stypy_function_name', 'TransferFunction.num')
        TransferFunction.num.__dict__.__setitem__('stypy_param_names_list', [])
        TransferFunction.num.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunction.num.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunction.num.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction.num.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction.num.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction.num.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunction.num', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'num', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'num(...)' code ##################

        str_267722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 8), 'str', 'Numerator of the `TransferFunction` system.')
        # Getting the type of 'self' (line 605)
        self_267723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 15), 'self')
        # Obtaining the member '_num' of a type (line 605)
        _num_267724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 15), self_267723, '_num')
        # Assigning a type to the variable 'stypy_return_type' (line 605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'stypy_return_type', _num_267724)
        
        # ################# End of 'num(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'num' in the type store
        # Getting the type of 'stypy_return_type' (line 602)
        stypy_return_type_267725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267725)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'num'
        return stypy_return_type_267725


    @norecursion
    def num(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'num'
        module_type_store = module_type_store.open_function_context('num', 607, 4, False)
        # Assigning a type to the variable 'self' (line 608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransferFunction.num.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction.num.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransferFunction.num.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction.num.__dict__.__setitem__('stypy_function_name', 'TransferFunction.num')
        TransferFunction.num.__dict__.__setitem__('stypy_param_names_list', ['num'])
        TransferFunction.num.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunction.num.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunction.num.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction.num.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction.num.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction.num.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunction.num', ['num'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'num', localization, ['num'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'num(...)' code ##################

        
        # Assigning a Call to a Attribute (line 609):
        
        # Assigning a Call to a Attribute (line 609):
        
        # Call to atleast_1d(...): (line 609)
        # Processing the call arguments (line 609)
        # Getting the type of 'num' (line 609)
        num_267727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 31), 'num', False)
        # Processing the call keyword arguments (line 609)
        kwargs_267728 = {}
        # Getting the type of 'atleast_1d' (line 609)
        atleast_1d_267726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 20), 'atleast_1d', False)
        # Calling atleast_1d(args, kwargs) (line 609)
        atleast_1d_call_result_267729 = invoke(stypy.reporting.localization.Localization(__file__, 609, 20), atleast_1d_267726, *[num_267727], **kwargs_267728)
        
        # Getting the type of 'self' (line 609)
        self_267730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 8), 'self')
        # Setting the type of the member '_num' of a type (line 609)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 8), self_267730, '_num', atleast_1d_call_result_267729)
        
        
        
        # Call to len(...): (line 612)
        # Processing the call arguments (line 612)
        # Getting the type of 'self' (line 612)
        self_267732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 15), 'self', False)
        # Obtaining the member 'num' of a type (line 612)
        num_267733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 15), self_267732, 'num')
        # Obtaining the member 'shape' of a type (line 612)
        shape_267734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 15), num_267733, 'shape')
        # Processing the call keyword arguments (line 612)
        kwargs_267735 = {}
        # Getting the type of 'len' (line 612)
        len_267731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 11), 'len', False)
        # Calling len(args, kwargs) (line 612)
        len_call_result_267736 = invoke(stypy.reporting.localization.Localization(__file__, 612, 11), len_267731, *[shape_267734], **kwargs_267735)
        
        int_267737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 33), 'int')
        # Applying the binary operator '>' (line 612)
        result_gt_267738 = python_operator(stypy.reporting.localization.Localization(__file__, 612, 11), '>', len_call_result_267736, int_267737)
        
        # Testing the type of an if condition (line 612)
        if_condition_267739 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 612, 8), result_gt_267738)
        # Assigning a type to the variable 'if_condition_267739' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'if_condition_267739', if_condition_267739)
        # SSA begins for if statement (line 612)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 613):
        
        # Assigning a Subscript to a Name (line 613):
        
        # Obtaining the type of the subscript
        int_267740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 12), 'int')
        # Getting the type of 'self' (line 613)
        self_267741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 40), 'self')
        # Obtaining the member 'num' of a type (line 613)
        num_267742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 40), self_267741, 'num')
        # Obtaining the member 'shape' of a type (line 613)
        shape_267743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 40), num_267742, 'shape')
        # Obtaining the member '__getitem__' of a type (line 613)
        getitem___267744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 12), shape_267743, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 613)
        subscript_call_result_267745 = invoke(stypy.reporting.localization.Localization(__file__, 613, 12), getitem___267744, int_267740)
        
        # Assigning a type to the variable 'tuple_var_assignment_267107' (line 613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 12), 'tuple_var_assignment_267107', subscript_call_result_267745)
        
        # Assigning a Subscript to a Name (line 613):
        
        # Obtaining the type of the subscript
        int_267746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 12), 'int')
        # Getting the type of 'self' (line 613)
        self_267747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 40), 'self')
        # Obtaining the member 'num' of a type (line 613)
        num_267748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 40), self_267747, 'num')
        # Obtaining the member 'shape' of a type (line 613)
        shape_267749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 40), num_267748, 'shape')
        # Obtaining the member '__getitem__' of a type (line 613)
        getitem___267750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 12), shape_267749, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 613)
        subscript_call_result_267751 = invoke(stypy.reporting.localization.Localization(__file__, 613, 12), getitem___267750, int_267746)
        
        # Assigning a type to the variable 'tuple_var_assignment_267108' (line 613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 12), 'tuple_var_assignment_267108', subscript_call_result_267751)
        
        # Assigning a Name to a Attribute (line 613):
        # Getting the type of 'tuple_var_assignment_267107' (line 613)
        tuple_var_assignment_267107_267752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 12), 'tuple_var_assignment_267107')
        # Getting the type of 'self' (line 613)
        self_267753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 12), 'self')
        # Setting the type of the member 'outputs' of a type (line 613)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 12), self_267753, 'outputs', tuple_var_assignment_267107_267752)
        
        # Assigning a Name to a Attribute (line 613):
        # Getting the type of 'tuple_var_assignment_267108' (line 613)
        tuple_var_assignment_267108_267754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 12), 'tuple_var_assignment_267108')
        # Getting the type of 'self' (line 613)
        self_267755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 26), 'self')
        # Setting the type of the member 'inputs' of a type (line 613)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 26), self_267755, 'inputs', tuple_var_assignment_267108_267754)
        # SSA branch for the else part of an if statement (line 612)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Attribute (line 615):
        
        # Assigning a Num to a Attribute (line 615):
        int_267756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 27), 'int')
        # Getting the type of 'self' (line 615)
        self_267757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 12), 'self')
        # Setting the type of the member 'outputs' of a type (line 615)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 12), self_267757, 'outputs', int_267756)
        
        # Assigning a Num to a Attribute (line 616):
        
        # Assigning a Num to a Attribute (line 616):
        int_267758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 26), 'int')
        # Getting the type of 'self' (line 616)
        self_267759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 12), 'self')
        # Setting the type of the member 'inputs' of a type (line 616)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 12), self_267759, 'inputs', int_267758)
        # SSA join for if statement (line 612)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'num(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'num' in the type store
        # Getting the type of 'stypy_return_type' (line 607)
        stypy_return_type_267760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267760)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'num'
        return stypy_return_type_267760


    @norecursion
    def den(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'den'
        module_type_store = module_type_store.open_function_context('den', 618, 4, False)
        # Assigning a type to the variable 'self' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransferFunction.den.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction.den.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransferFunction.den.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction.den.__dict__.__setitem__('stypy_function_name', 'TransferFunction.den')
        TransferFunction.den.__dict__.__setitem__('stypy_param_names_list', [])
        TransferFunction.den.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunction.den.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunction.den.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction.den.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction.den.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction.den.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunction.den', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'den', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'den(...)' code ##################

        str_267761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 8), 'str', 'Denominator of the `TransferFunction` system.')
        # Getting the type of 'self' (line 621)
        self_267762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 15), 'self')
        # Obtaining the member '_den' of a type (line 621)
        _den_267763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 15), self_267762, '_den')
        # Assigning a type to the variable 'stypy_return_type' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 8), 'stypy_return_type', _den_267763)
        
        # ################# End of 'den(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'den' in the type store
        # Getting the type of 'stypy_return_type' (line 618)
        stypy_return_type_267764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267764)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'den'
        return stypy_return_type_267764


    @norecursion
    def den(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'den'
        module_type_store = module_type_store.open_function_context('den', 623, 4, False)
        # Assigning a type to the variable 'self' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransferFunction.den.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction.den.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransferFunction.den.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction.den.__dict__.__setitem__('stypy_function_name', 'TransferFunction.den')
        TransferFunction.den.__dict__.__setitem__('stypy_param_names_list', ['den'])
        TransferFunction.den.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunction.den.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunction.den.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction.den.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction.den.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction.den.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunction.den', ['den'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'den', localization, ['den'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'den(...)' code ##################

        
        # Assigning a Call to a Attribute (line 625):
        
        # Assigning a Call to a Attribute (line 625):
        
        # Call to atleast_1d(...): (line 625)
        # Processing the call arguments (line 625)
        # Getting the type of 'den' (line 625)
        den_267766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 31), 'den', False)
        # Processing the call keyword arguments (line 625)
        kwargs_267767 = {}
        # Getting the type of 'atleast_1d' (line 625)
        atleast_1d_267765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 20), 'atleast_1d', False)
        # Calling atleast_1d(args, kwargs) (line 625)
        atleast_1d_call_result_267768 = invoke(stypy.reporting.localization.Localization(__file__, 625, 20), atleast_1d_267765, *[den_267766], **kwargs_267767)
        
        # Getting the type of 'self' (line 625)
        self_267769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'self')
        # Setting the type of the member '_den' of a type (line 625)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 8), self_267769, '_den', atleast_1d_call_result_267768)
        
        # ################# End of 'den(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'den' in the type store
        # Getting the type of 'stypy_return_type' (line 623)
        stypy_return_type_267770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267770)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'den'
        return stypy_return_type_267770


    @norecursion
    def _copy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_copy'
        module_type_store = module_type_store.open_function_context('_copy', 627, 4, False)
        # Assigning a type to the variable 'self' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransferFunction._copy.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction._copy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransferFunction._copy.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction._copy.__dict__.__setitem__('stypy_function_name', 'TransferFunction._copy')
        TransferFunction._copy.__dict__.__setitem__('stypy_param_names_list', ['system'])
        TransferFunction._copy.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunction._copy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunction._copy.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction._copy.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction._copy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction._copy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunction._copy', ['system'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_copy', localization, ['system'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_copy(...)' code ##################

        str_267771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, (-1)), 'str', '\n        Copy the parameters of another `TransferFunction` object\n\n        Parameters\n        ----------\n        system : `TransferFunction`\n            The `StateSpace` system that is to be copied\n\n        ')
        
        # Assigning a Attribute to a Attribute (line 637):
        
        # Assigning a Attribute to a Attribute (line 637):
        # Getting the type of 'system' (line 637)
        system_267772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 19), 'system')
        # Obtaining the member 'num' of a type (line 637)
        num_267773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 19), system_267772, 'num')
        # Getting the type of 'self' (line 637)
        self_267774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 8), 'self')
        # Setting the type of the member 'num' of a type (line 637)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 8), self_267774, 'num', num_267773)
        
        # Assigning a Attribute to a Attribute (line 638):
        
        # Assigning a Attribute to a Attribute (line 638):
        # Getting the type of 'system' (line 638)
        system_267775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 19), 'system')
        # Obtaining the member 'den' of a type (line 638)
        den_267776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 19), system_267775, 'den')
        # Getting the type of 'self' (line 638)
        self_267777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'self')
        # Setting the type of the member 'den' of a type (line 638)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 8), self_267777, 'den', den_267776)
        
        # ################# End of '_copy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_copy' in the type store
        # Getting the type of 'stypy_return_type' (line 627)
        stypy_return_type_267778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267778)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_copy'
        return stypy_return_type_267778


    @norecursion
    def to_tf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'to_tf'
        module_type_store = module_type_store.open_function_context('to_tf', 640, 4, False)
        # Assigning a type to the variable 'self' (line 641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransferFunction.to_tf.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction.to_tf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransferFunction.to_tf.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction.to_tf.__dict__.__setitem__('stypy_function_name', 'TransferFunction.to_tf')
        TransferFunction.to_tf.__dict__.__setitem__('stypy_param_names_list', [])
        TransferFunction.to_tf.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunction.to_tf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunction.to_tf.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction.to_tf.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction.to_tf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction.to_tf.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunction.to_tf', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_tf', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_tf(...)' code ##################

        str_267779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, (-1)), 'str', '\n        Return a copy of the current `TransferFunction` system.\n\n        Returns\n        -------\n        sys : instance of `TransferFunction`\n            The current system (copy)\n\n        ')
        
        # Call to deepcopy(...): (line 650)
        # Processing the call arguments (line 650)
        # Getting the type of 'self' (line 650)
        self_267782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 29), 'self', False)
        # Processing the call keyword arguments (line 650)
        kwargs_267783 = {}
        # Getting the type of 'copy' (line 650)
        copy_267780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 15), 'copy', False)
        # Obtaining the member 'deepcopy' of a type (line 650)
        deepcopy_267781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 15), copy_267780, 'deepcopy')
        # Calling deepcopy(args, kwargs) (line 650)
        deepcopy_call_result_267784 = invoke(stypy.reporting.localization.Localization(__file__, 650, 15), deepcopy_267781, *[self_267782], **kwargs_267783)
        
        # Assigning a type to the variable 'stypy_return_type' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'stypy_return_type', deepcopy_call_result_267784)
        
        # ################# End of 'to_tf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_tf' in the type store
        # Getting the type of 'stypy_return_type' (line 640)
        stypy_return_type_267785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267785)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_tf'
        return stypy_return_type_267785


    @norecursion
    def to_zpk(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'to_zpk'
        module_type_store = module_type_store.open_function_context('to_zpk', 652, 4, False)
        # Assigning a type to the variable 'self' (line 653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 653, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransferFunction.to_zpk.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction.to_zpk.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransferFunction.to_zpk.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction.to_zpk.__dict__.__setitem__('stypy_function_name', 'TransferFunction.to_zpk')
        TransferFunction.to_zpk.__dict__.__setitem__('stypy_param_names_list', [])
        TransferFunction.to_zpk.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunction.to_zpk.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunction.to_zpk.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction.to_zpk.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction.to_zpk.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction.to_zpk.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunction.to_zpk', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_zpk', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_zpk(...)' code ##################

        str_267786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, (-1)), 'str', '\n        Convert system representation to `ZerosPolesGain`.\n\n        Returns\n        -------\n        sys : instance of `ZerosPolesGain`\n            Zeros, poles, gain representation of the current system\n\n        ')
        
        # Call to ZerosPolesGain(...): (line 662)
        
        # Call to tf2zpk(...): (line 662)
        # Processing the call arguments (line 662)
        # Getting the type of 'self' (line 662)
        self_267789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 38), 'self', False)
        # Obtaining the member 'num' of a type (line 662)
        num_267790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 38), self_267789, 'num')
        # Getting the type of 'self' (line 662)
        self_267791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 48), 'self', False)
        # Obtaining the member 'den' of a type (line 662)
        den_267792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 48), self_267791, 'den')
        # Processing the call keyword arguments (line 662)
        kwargs_267793 = {}
        # Getting the type of 'tf2zpk' (line 662)
        tf2zpk_267788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 31), 'tf2zpk', False)
        # Calling tf2zpk(args, kwargs) (line 662)
        tf2zpk_call_result_267794 = invoke(stypy.reporting.localization.Localization(__file__, 662, 31), tf2zpk_267788, *[num_267790, den_267792], **kwargs_267793)
        
        # Processing the call keyword arguments (line 662)
        # Getting the type of 'self' (line 663)
        self_267795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 32), 'self', False)
        # Obtaining the member '_dt_dict' of a type (line 663)
        _dt_dict_267796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 32), self_267795, '_dt_dict')
        kwargs_267797 = {'_dt_dict_267796': _dt_dict_267796}
        # Getting the type of 'ZerosPolesGain' (line 662)
        ZerosPolesGain_267787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 15), 'ZerosPolesGain', False)
        # Calling ZerosPolesGain(args, kwargs) (line 662)
        ZerosPolesGain_call_result_267798 = invoke(stypy.reporting.localization.Localization(__file__, 662, 15), ZerosPolesGain_267787, *[tf2zpk_call_result_267794], **kwargs_267797)
        
        # Assigning a type to the variable 'stypy_return_type' (line 662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 8), 'stypy_return_type', ZerosPolesGain_call_result_267798)
        
        # ################# End of 'to_zpk(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_zpk' in the type store
        # Getting the type of 'stypy_return_type' (line 652)
        stypy_return_type_267799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267799)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_zpk'
        return stypy_return_type_267799


    @norecursion
    def to_ss(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'to_ss'
        module_type_store = module_type_store.open_function_context('to_ss', 665, 4, False)
        # Assigning a type to the variable 'self' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransferFunction.to_ss.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction.to_ss.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransferFunction.to_ss.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction.to_ss.__dict__.__setitem__('stypy_function_name', 'TransferFunction.to_ss')
        TransferFunction.to_ss.__dict__.__setitem__('stypy_param_names_list', [])
        TransferFunction.to_ss.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunction.to_ss.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunction.to_ss.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction.to_ss.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction.to_ss.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction.to_ss.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunction.to_ss', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_ss', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_ss(...)' code ##################

        str_267800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, (-1)), 'str', '\n        Convert system representation to `StateSpace`.\n\n        Returns\n        -------\n        sys : instance of `StateSpace`\n            State space model of the current system\n\n        ')
        
        # Call to StateSpace(...): (line 675)
        
        # Call to tf2ss(...): (line 675)
        # Processing the call arguments (line 675)
        # Getting the type of 'self' (line 675)
        self_267803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 33), 'self', False)
        # Obtaining the member 'num' of a type (line 675)
        num_267804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 33), self_267803, 'num')
        # Getting the type of 'self' (line 675)
        self_267805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 43), 'self', False)
        # Obtaining the member 'den' of a type (line 675)
        den_267806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 43), self_267805, 'den')
        # Processing the call keyword arguments (line 675)
        kwargs_267807 = {}
        # Getting the type of 'tf2ss' (line 675)
        tf2ss_267802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 27), 'tf2ss', False)
        # Calling tf2ss(args, kwargs) (line 675)
        tf2ss_call_result_267808 = invoke(stypy.reporting.localization.Localization(__file__, 675, 27), tf2ss_267802, *[num_267804, den_267806], **kwargs_267807)
        
        # Processing the call keyword arguments (line 675)
        # Getting the type of 'self' (line 676)
        self_267809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 28), 'self', False)
        # Obtaining the member '_dt_dict' of a type (line 676)
        _dt_dict_267810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 28), self_267809, '_dt_dict')
        kwargs_267811 = {'_dt_dict_267810': _dt_dict_267810}
        # Getting the type of 'StateSpace' (line 675)
        StateSpace_267801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 15), 'StateSpace', False)
        # Calling StateSpace(args, kwargs) (line 675)
        StateSpace_call_result_267812 = invoke(stypy.reporting.localization.Localization(__file__, 675, 15), StateSpace_267801, *[tf2ss_call_result_267808], **kwargs_267811)
        
        # Assigning a type to the variable 'stypy_return_type' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'stypy_return_type', StateSpace_call_result_267812)
        
        # ################# End of 'to_ss(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_ss' in the type store
        # Getting the type of 'stypy_return_type' (line 665)
        stypy_return_type_267813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267813)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_ss'
        return stypy_return_type_267813


    @staticmethod
    @norecursion
    def _z_to_zinv(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_z_to_zinv'
        module_type_store = module_type_store.open_function_context('_z_to_zinv', 678, 4, False)
        
        # Passed parameters checking function
        TransferFunction._z_to_zinv.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction._z_to_zinv.__dict__.__setitem__('stypy_type_of_self', None)
        TransferFunction._z_to_zinv.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction._z_to_zinv.__dict__.__setitem__('stypy_function_name', '_z_to_zinv')
        TransferFunction._z_to_zinv.__dict__.__setitem__('stypy_param_names_list', ['num', 'den'])
        TransferFunction._z_to_zinv.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunction._z_to_zinv.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunction._z_to_zinv.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction._z_to_zinv.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction._z_to_zinv.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction._z_to_zinv.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, '_z_to_zinv', ['num', 'den'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_z_to_zinv', localization, ['den'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_z_to_zinv(...)' code ##################

        str_267814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, (-1)), 'str', "Change a transfer function from the variable `z` to `z**-1`.\n\n        Parameters\n        ----------\n        num, den: 1d array_like\n            Sequences representing the coefficients of the numerator and\n            denominator polynomials, in order of descending degree of 'z'.\n            That is, ``5z**2 + 3z + 2`` is presented as ``[5, 3, 2]``.\n\n        Returns\n        -------\n        num, den: 1d array_like\n            Sequences representing the coefficients of the numerator and\n            denominator polynomials, in order of ascending degree of 'z**-1'.\n            That is, ``5 + 3 z**-1 + 2 z**-2`` is presented as ``[5, 3, 2]``.\n        ")
        
        # Assigning a BinOp to a Name (line 696):
        
        # Assigning a BinOp to a Name (line 696):
        
        # Call to len(...): (line 696)
        # Processing the call arguments (line 696)
        # Getting the type of 'num' (line 696)
        num_267816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 19), 'num', False)
        # Processing the call keyword arguments (line 696)
        kwargs_267817 = {}
        # Getting the type of 'len' (line 696)
        len_267815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 15), 'len', False)
        # Calling len(args, kwargs) (line 696)
        len_call_result_267818 = invoke(stypy.reporting.localization.Localization(__file__, 696, 15), len_267815, *[num_267816], **kwargs_267817)
        
        
        # Call to len(...): (line 696)
        # Processing the call arguments (line 696)
        # Getting the type of 'den' (line 696)
        den_267820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 30), 'den', False)
        # Processing the call keyword arguments (line 696)
        kwargs_267821 = {}
        # Getting the type of 'len' (line 696)
        len_267819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 26), 'len', False)
        # Calling len(args, kwargs) (line 696)
        len_call_result_267822 = invoke(stypy.reporting.localization.Localization(__file__, 696, 26), len_267819, *[den_267820], **kwargs_267821)
        
        # Applying the binary operator '-' (line 696)
        result_sub_267823 = python_operator(stypy.reporting.localization.Localization(__file__, 696, 15), '-', len_call_result_267818, len_call_result_267822)
        
        # Assigning a type to the variable 'diff' (line 696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 8), 'diff', result_sub_267823)
        
        
        # Getting the type of 'diff' (line 697)
        diff_267824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 11), 'diff')
        int_267825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 18), 'int')
        # Applying the binary operator '>' (line 697)
        result_gt_267826 = python_operator(stypy.reporting.localization.Localization(__file__, 697, 11), '>', diff_267824, int_267825)
        
        # Testing the type of an if condition (line 697)
        if_condition_267827 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 697, 8), result_gt_267826)
        # Assigning a type to the variable 'if_condition_267827' (line 697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'if_condition_267827', if_condition_267827)
        # SSA begins for if statement (line 697)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 698):
        
        # Assigning a Call to a Name (line 698):
        
        # Call to hstack(...): (line 698)
        # Processing the call arguments (line 698)
        
        # Obtaining an instance of the builtin type 'tuple' (line 698)
        tuple_267830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 698)
        # Adding element type (line 698)
        
        # Call to zeros(...): (line 698)
        # Processing the call arguments (line 698)
        # Getting the type of 'diff' (line 698)
        diff_267833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 38), 'diff', False)
        # Processing the call keyword arguments (line 698)
        kwargs_267834 = {}
        # Getting the type of 'np' (line 698)
        np_267831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 29), 'np', False)
        # Obtaining the member 'zeros' of a type (line 698)
        zeros_267832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 29), np_267831, 'zeros')
        # Calling zeros(args, kwargs) (line 698)
        zeros_call_result_267835 = invoke(stypy.reporting.localization.Localization(__file__, 698, 29), zeros_267832, *[diff_267833], **kwargs_267834)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 29), tuple_267830, zeros_call_result_267835)
        # Adding element type (line 698)
        # Getting the type of 'den' (line 698)
        den_267836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 45), 'den', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 29), tuple_267830, den_267836)
        
        # Processing the call keyword arguments (line 698)
        kwargs_267837 = {}
        # Getting the type of 'np' (line 698)
        np_267828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 18), 'np', False)
        # Obtaining the member 'hstack' of a type (line 698)
        hstack_267829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 18), np_267828, 'hstack')
        # Calling hstack(args, kwargs) (line 698)
        hstack_call_result_267838 = invoke(stypy.reporting.localization.Localization(__file__, 698, 18), hstack_267829, *[tuple_267830], **kwargs_267837)
        
        # Assigning a type to the variable 'den' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'den', hstack_call_result_267838)
        # SSA branch for the else part of an if statement (line 697)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'diff' (line 699)
        diff_267839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 13), 'diff')
        int_267840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 20), 'int')
        # Applying the binary operator '<' (line 699)
        result_lt_267841 = python_operator(stypy.reporting.localization.Localization(__file__, 699, 13), '<', diff_267839, int_267840)
        
        # Testing the type of an if condition (line 699)
        if_condition_267842 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 699, 13), result_lt_267841)
        # Assigning a type to the variable 'if_condition_267842' (line 699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 13), 'if_condition_267842', if_condition_267842)
        # SSA begins for if statement (line 699)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 700):
        
        # Assigning a Call to a Name (line 700):
        
        # Call to hstack(...): (line 700)
        # Processing the call arguments (line 700)
        
        # Obtaining an instance of the builtin type 'tuple' (line 700)
        tuple_267845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 700)
        # Adding element type (line 700)
        
        # Call to zeros(...): (line 700)
        # Processing the call arguments (line 700)
        
        # Getting the type of 'diff' (line 700)
        diff_267848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 39), 'diff', False)
        # Applying the 'usub' unary operator (line 700)
        result___neg___267849 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 38), 'usub', diff_267848)
        
        # Processing the call keyword arguments (line 700)
        kwargs_267850 = {}
        # Getting the type of 'np' (line 700)
        np_267846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 29), 'np', False)
        # Obtaining the member 'zeros' of a type (line 700)
        zeros_267847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 29), np_267846, 'zeros')
        # Calling zeros(args, kwargs) (line 700)
        zeros_call_result_267851 = invoke(stypy.reporting.localization.Localization(__file__, 700, 29), zeros_267847, *[result___neg___267849], **kwargs_267850)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 700, 29), tuple_267845, zeros_call_result_267851)
        # Adding element type (line 700)
        # Getting the type of 'num' (line 700)
        num_267852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 46), 'num', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 700, 29), tuple_267845, num_267852)
        
        # Processing the call keyword arguments (line 700)
        kwargs_267853 = {}
        # Getting the type of 'np' (line 700)
        np_267843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 18), 'np', False)
        # Obtaining the member 'hstack' of a type (line 700)
        hstack_267844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 18), np_267843, 'hstack')
        # Calling hstack(args, kwargs) (line 700)
        hstack_call_result_267854 = invoke(stypy.reporting.localization.Localization(__file__, 700, 18), hstack_267844, *[tuple_267845], **kwargs_267853)
        
        # Assigning a type to the variable 'num' (line 700)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 12), 'num', hstack_call_result_267854)
        # SSA join for if statement (line 699)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 697)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 701)
        tuple_267855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 701)
        # Adding element type (line 701)
        # Getting the type of 'num' (line 701)
        num_267856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 15), 'num')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 15), tuple_267855, num_267856)
        # Adding element type (line 701)
        # Getting the type of 'den' (line 701)
        den_267857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 20), 'den')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 15), tuple_267855, den_267857)
        
        # Assigning a type to the variable 'stypy_return_type' (line 701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 8), 'stypy_return_type', tuple_267855)
        
        # ################# End of '_z_to_zinv(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_z_to_zinv' in the type store
        # Getting the type of 'stypy_return_type' (line 678)
        stypy_return_type_267858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267858)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_z_to_zinv'
        return stypy_return_type_267858


    @staticmethod
    @norecursion
    def _zinv_to_z(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_zinv_to_z'
        module_type_store = module_type_store.open_function_context('_zinv_to_z', 703, 4, False)
        
        # Passed parameters checking function
        TransferFunction._zinv_to_z.__dict__.__setitem__('stypy_localization', localization)
        TransferFunction._zinv_to_z.__dict__.__setitem__('stypy_type_of_self', None)
        TransferFunction._zinv_to_z.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunction._zinv_to_z.__dict__.__setitem__('stypy_function_name', '_zinv_to_z')
        TransferFunction._zinv_to_z.__dict__.__setitem__('stypy_param_names_list', ['num', 'den'])
        TransferFunction._zinv_to_z.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunction._zinv_to_z.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunction._zinv_to_z.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunction._zinv_to_z.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunction._zinv_to_z.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunction._zinv_to_z.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, '_zinv_to_z', ['num', 'den'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_zinv_to_z', localization, ['den'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_zinv_to_z(...)' code ##################

        str_267859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, (-1)), 'str', "Change a transfer function from the variable `z` to `z**-1`.\n\n        Parameters\n        ----------\n        num, den: 1d array_like\n            Sequences representing the coefficients of the numerator and\n            denominator polynomials, in order of ascending degree of 'z**-1'.\n            That is, ``5 + 3 z**-1 + 2 z**-2`` is presented as ``[5, 3, 2]``.\n\n        Returns\n        -------\n        num, den: 1d array_like\n            Sequences representing the coefficients of the numerator and\n            denominator polynomials, in order of descending degree of 'z'.\n            That is, ``5z**2 + 3z + 2`` is presented as ``[5, 3, 2]``.\n        ")
        
        # Assigning a BinOp to a Name (line 721):
        
        # Assigning a BinOp to a Name (line 721):
        
        # Call to len(...): (line 721)
        # Processing the call arguments (line 721)
        # Getting the type of 'num' (line 721)
        num_267861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 19), 'num', False)
        # Processing the call keyword arguments (line 721)
        kwargs_267862 = {}
        # Getting the type of 'len' (line 721)
        len_267860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 15), 'len', False)
        # Calling len(args, kwargs) (line 721)
        len_call_result_267863 = invoke(stypy.reporting.localization.Localization(__file__, 721, 15), len_267860, *[num_267861], **kwargs_267862)
        
        
        # Call to len(...): (line 721)
        # Processing the call arguments (line 721)
        # Getting the type of 'den' (line 721)
        den_267865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 30), 'den', False)
        # Processing the call keyword arguments (line 721)
        kwargs_267866 = {}
        # Getting the type of 'len' (line 721)
        len_267864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 26), 'len', False)
        # Calling len(args, kwargs) (line 721)
        len_call_result_267867 = invoke(stypy.reporting.localization.Localization(__file__, 721, 26), len_267864, *[den_267865], **kwargs_267866)
        
        # Applying the binary operator '-' (line 721)
        result_sub_267868 = python_operator(stypy.reporting.localization.Localization(__file__, 721, 15), '-', len_call_result_267863, len_call_result_267867)
        
        # Assigning a type to the variable 'diff' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 8), 'diff', result_sub_267868)
        
        
        # Getting the type of 'diff' (line 722)
        diff_267869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 11), 'diff')
        int_267870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 722, 18), 'int')
        # Applying the binary operator '>' (line 722)
        result_gt_267871 = python_operator(stypy.reporting.localization.Localization(__file__, 722, 11), '>', diff_267869, int_267870)
        
        # Testing the type of an if condition (line 722)
        if_condition_267872 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 722, 8), result_gt_267871)
        # Assigning a type to the variable 'if_condition_267872' (line 722)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'if_condition_267872', if_condition_267872)
        # SSA begins for if statement (line 722)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 723):
        
        # Assigning a Call to a Name (line 723):
        
        # Call to hstack(...): (line 723)
        # Processing the call arguments (line 723)
        
        # Obtaining an instance of the builtin type 'tuple' (line 723)
        tuple_267875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 723)
        # Adding element type (line 723)
        # Getting the type of 'den' (line 723)
        den_267876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 29), 'den', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 723, 29), tuple_267875, den_267876)
        # Adding element type (line 723)
        
        # Call to zeros(...): (line 723)
        # Processing the call arguments (line 723)
        # Getting the type of 'diff' (line 723)
        diff_267879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 43), 'diff', False)
        # Processing the call keyword arguments (line 723)
        kwargs_267880 = {}
        # Getting the type of 'np' (line 723)
        np_267877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 34), 'np', False)
        # Obtaining the member 'zeros' of a type (line 723)
        zeros_267878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 34), np_267877, 'zeros')
        # Calling zeros(args, kwargs) (line 723)
        zeros_call_result_267881 = invoke(stypy.reporting.localization.Localization(__file__, 723, 34), zeros_267878, *[diff_267879], **kwargs_267880)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 723, 29), tuple_267875, zeros_call_result_267881)
        
        # Processing the call keyword arguments (line 723)
        kwargs_267882 = {}
        # Getting the type of 'np' (line 723)
        np_267873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 18), 'np', False)
        # Obtaining the member 'hstack' of a type (line 723)
        hstack_267874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 723, 18), np_267873, 'hstack')
        # Calling hstack(args, kwargs) (line 723)
        hstack_call_result_267883 = invoke(stypy.reporting.localization.Localization(__file__, 723, 18), hstack_267874, *[tuple_267875], **kwargs_267882)
        
        # Assigning a type to the variable 'den' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 12), 'den', hstack_call_result_267883)
        # SSA branch for the else part of an if statement (line 722)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'diff' (line 724)
        diff_267884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 13), 'diff')
        int_267885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 724, 20), 'int')
        # Applying the binary operator '<' (line 724)
        result_lt_267886 = python_operator(stypy.reporting.localization.Localization(__file__, 724, 13), '<', diff_267884, int_267885)
        
        # Testing the type of an if condition (line 724)
        if_condition_267887 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 724, 13), result_lt_267886)
        # Assigning a type to the variable 'if_condition_267887' (line 724)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 13), 'if_condition_267887', if_condition_267887)
        # SSA begins for if statement (line 724)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 725):
        
        # Assigning a Call to a Name (line 725):
        
        # Call to hstack(...): (line 725)
        # Processing the call arguments (line 725)
        
        # Obtaining an instance of the builtin type 'tuple' (line 725)
        tuple_267890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 725)
        # Adding element type (line 725)
        # Getting the type of 'num' (line 725)
        num_267891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 29), 'num', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 725, 29), tuple_267890, num_267891)
        # Adding element type (line 725)
        
        # Call to zeros(...): (line 725)
        # Processing the call arguments (line 725)
        
        # Getting the type of 'diff' (line 725)
        diff_267894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 44), 'diff', False)
        # Applying the 'usub' unary operator (line 725)
        result___neg___267895 = python_operator(stypy.reporting.localization.Localization(__file__, 725, 43), 'usub', diff_267894)
        
        # Processing the call keyword arguments (line 725)
        kwargs_267896 = {}
        # Getting the type of 'np' (line 725)
        np_267892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 34), 'np', False)
        # Obtaining the member 'zeros' of a type (line 725)
        zeros_267893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 34), np_267892, 'zeros')
        # Calling zeros(args, kwargs) (line 725)
        zeros_call_result_267897 = invoke(stypy.reporting.localization.Localization(__file__, 725, 34), zeros_267893, *[result___neg___267895], **kwargs_267896)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 725, 29), tuple_267890, zeros_call_result_267897)
        
        # Processing the call keyword arguments (line 725)
        kwargs_267898 = {}
        # Getting the type of 'np' (line 725)
        np_267888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 18), 'np', False)
        # Obtaining the member 'hstack' of a type (line 725)
        hstack_267889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 725, 18), np_267888, 'hstack')
        # Calling hstack(args, kwargs) (line 725)
        hstack_call_result_267899 = invoke(stypy.reporting.localization.Localization(__file__, 725, 18), hstack_267889, *[tuple_267890], **kwargs_267898)
        
        # Assigning a type to the variable 'num' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 12), 'num', hstack_call_result_267899)
        # SSA join for if statement (line 724)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 722)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 726)
        tuple_267900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 726)
        # Adding element type (line 726)
        # Getting the type of 'num' (line 726)
        num_267901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 15), 'num')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 726, 15), tuple_267900, num_267901)
        # Adding element type (line 726)
        # Getting the type of 'den' (line 726)
        den_267902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 20), 'den')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 726, 15), tuple_267900, den_267902)
        
        # Assigning a type to the variable 'stypy_return_type' (line 726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 8), 'stypy_return_type', tuple_267900)
        
        # ################# End of '_zinv_to_z(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_zinv_to_z' in the type store
        # Getting the type of 'stypy_return_type' (line 703)
        stypy_return_type_267903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267903)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_zinv_to_z'
        return stypy_return_type_267903


# Assigning a type to the variable 'TransferFunction' (line 481)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 0), 'TransferFunction', TransferFunction)
# Declaration of the 'TransferFunctionContinuous' class
# Getting the type of 'TransferFunction' (line 729)
TransferFunction_267904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 33), 'TransferFunction')
# Getting the type of 'lti' (line 729)
lti_267905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 51), 'lti')

class TransferFunctionContinuous(TransferFunction_267904, lti_267905, ):
    str_267906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, (-1)), 'str', '\n    Continuous-time Linear Time Invariant system in transfer function form.\n\n    Represents the system as the transfer function\n    :math:`H(s)=\\sum_{i=0}^N b[N-i] s^i / \\sum_{j=0}^M a[M-j] s^j`, where\n    :math:`b` are elements of the numerator `num`, :math:`a` are elements of\n    the denominator `den`, and ``N == len(b) - 1``, ``M == len(a) - 1``.\n    Continuous-time `TransferFunction` systems inherit additional\n    functionality from the `lti` class.\n\n    Parameters\n    ----------\n    *system: arguments\n        The `TransferFunction` class can be instantiated with 1 or 2\n        arguments. The following gives the number of input arguments and their\n        interpretation:\n\n            * 1: `lti` system: (`StateSpace`, `TransferFunction` or\n              `ZerosPolesGain`)\n            * 2: array_like: (numerator, denominator)\n\n    See Also\n    --------\n    ZerosPolesGain, StateSpace, lti\n    tf2ss, tf2zpk, tf2sos\n\n    Notes\n    -----\n    Changing the value of properties that are not part of the\n    `TransferFunction` system representation (such as the `A`, `B`, `C`, `D`\n    state-space matrices) is very inefficient and may lead to numerical\n    inaccuracies.  It is better to convert to the specific system\n    representation first. For example, call ``sys = sys.to_ss()`` before\n    accessing/changing the A, B, C, D system matrices.\n\n    If (numerator, denominator) is passed in for ``*system``, coefficients\n    for both the numerator and denominator should be specified in descending\n    exponent order (e.g. ``s^2 + 3s + 5`` would be represented as\n    ``[1, 3, 5]``)\n\n    Examples\n    --------\n    Construct the transfer function:\n\n    .. math:: H(s) = \\frac{s^2 + 3s + 3}{s^2 + 2s + 1}\n\n    >>> from scipy import signal\n\n    >>> num = [1, 3, 3]\n    >>> den = [1, 2, 1]\n\n    >>> signal.TransferFunction(num, den)\n    TransferFunctionContinuous(\n    array([ 1.,  3.,  3.]),\n    array([ 1.,  2.,  1.]),\n    dt: None\n    )\n\n    ')

    @norecursion
    def to_discrete(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_267907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 37), 'str', 'zoh')
        # Getting the type of 'None' (line 789)
        None_267908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 50), 'None')
        defaults = [str_267907, None_267908]
        # Create a new context for function 'to_discrete'
        module_type_store = module_type_store.open_function_context('to_discrete', 789, 4, False)
        # Assigning a type to the variable 'self' (line 790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        TransferFunctionContinuous.to_discrete.__dict__.__setitem__('stypy_localization', localization)
        TransferFunctionContinuous.to_discrete.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        TransferFunctionContinuous.to_discrete.__dict__.__setitem__('stypy_type_store', module_type_store)
        TransferFunctionContinuous.to_discrete.__dict__.__setitem__('stypy_function_name', 'TransferFunctionContinuous.to_discrete')
        TransferFunctionContinuous.to_discrete.__dict__.__setitem__('stypy_param_names_list', ['dt', 'method', 'alpha'])
        TransferFunctionContinuous.to_discrete.__dict__.__setitem__('stypy_varargs_param_name', None)
        TransferFunctionContinuous.to_discrete.__dict__.__setitem__('stypy_kwargs_param_name', None)
        TransferFunctionContinuous.to_discrete.__dict__.__setitem__('stypy_call_defaults', defaults)
        TransferFunctionContinuous.to_discrete.__dict__.__setitem__('stypy_call_varargs', varargs)
        TransferFunctionContinuous.to_discrete.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        TransferFunctionContinuous.to_discrete.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunctionContinuous.to_discrete', ['dt', 'method', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_discrete', localization, ['dt', 'method', 'alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_discrete(...)' code ##################

        str_267909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, (-1)), 'str', '\n        Returns the discretized `TransferFunction` system.\n\n        Parameters: See `cont2discrete` for details.\n\n        Returns\n        -------\n        sys: instance of `dlti` and `StateSpace`\n        ')
        
        # Call to TransferFunction(...): (line 799)
        
        # Obtaining the type of the subscript
        int_267911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 61), 'int')
        slice_267912 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 799, 33), None, int_267911, None)
        
        # Call to cont2discrete(...): (line 799)
        # Processing the call arguments (line 799)
        
        # Obtaining an instance of the builtin type 'tuple' (line 799)
        tuple_267914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 48), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 799)
        # Adding element type (line 799)
        # Getting the type of 'self' (line 799)
        self_267915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 48), 'self', False)
        # Obtaining the member 'num' of a type (line 799)
        num_267916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 48), self_267915, 'num')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 799, 48), tuple_267914, num_267916)
        # Adding element type (line 799)
        # Getting the type of 'self' (line 799)
        self_267917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 58), 'self', False)
        # Obtaining the member 'den' of a type (line 799)
        den_267918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 58), self_267917, 'den')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 799, 48), tuple_267914, den_267918)
        
        # Getting the type of 'dt' (line 800)
        dt_267919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 47), 'dt', False)
        # Processing the call keyword arguments (line 799)
        # Getting the type of 'method' (line 801)
        method_267920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 54), 'method', False)
        keyword_267921 = method_267920
        # Getting the type of 'alpha' (line 802)
        alpha_267922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 53), 'alpha', False)
        keyword_267923 = alpha_267922
        kwargs_267924 = {'alpha': keyword_267923, 'method': keyword_267921}
        # Getting the type of 'cont2discrete' (line 799)
        cont2discrete_267913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 33), 'cont2discrete', False)
        # Calling cont2discrete(args, kwargs) (line 799)
        cont2discrete_call_result_267925 = invoke(stypy.reporting.localization.Localization(__file__, 799, 33), cont2discrete_267913, *[tuple_267914, dt_267919], **kwargs_267924)
        
        # Obtaining the member '__getitem__' of a type (line 799)
        getitem___267926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 33), cont2discrete_call_result_267925, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 799)
        subscript_call_result_267927 = invoke(stypy.reporting.localization.Localization(__file__, 799, 33), getitem___267926, slice_267912)
        
        # Processing the call keyword arguments (line 799)
        # Getting the type of 'dt' (line 803)
        dt_267928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 35), 'dt', False)
        keyword_267929 = dt_267928
        kwargs_267930 = {'dt': keyword_267929}
        # Getting the type of 'TransferFunction' (line 799)
        TransferFunction_267910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 15), 'TransferFunction', False)
        # Calling TransferFunction(args, kwargs) (line 799)
        TransferFunction_call_result_267931 = invoke(stypy.reporting.localization.Localization(__file__, 799, 15), TransferFunction_267910, *[subscript_call_result_267927], **kwargs_267930)
        
        # Assigning a type to the variable 'stypy_return_type' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 8), 'stypy_return_type', TransferFunction_call_result_267931)
        
        # ################# End of 'to_discrete(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_discrete' in the type store
        # Getting the type of 'stypy_return_type' (line 789)
        stypy_return_type_267932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267932)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_discrete'
        return stypy_return_type_267932


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 729, 0, False)
        # Assigning a type to the variable 'self' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunctionContinuous.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'TransferFunctionContinuous' (line 729)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 0), 'TransferFunctionContinuous', TransferFunctionContinuous)
# Declaration of the 'TransferFunctionDiscrete' class
# Getting the type of 'TransferFunction' (line 806)
TransferFunction_267933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 31), 'TransferFunction')
# Getting the type of 'dlti' (line 806)
dlti_267934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 49), 'dlti')

class TransferFunctionDiscrete(TransferFunction_267933, dlti_267934, ):
    str_267935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, (-1)), 'str', '\n    Discrete-time Linear Time Invariant system in transfer function form.\n\n    Represents the system as the transfer function\n    :math:`H(z)=\\sum_{i=0}^N b[N-i] z^i / \\sum_{j=0}^M a[M-j] z^j`, where\n    :math:`b` are elements of the numerator `num`, :math:`a` are elements of\n    the denominator `den`, and ``N == len(b) - 1``, ``M == len(a) - 1``.\n    Discrete-time `TransferFunction` systems inherit additional functionality\n    from the `dlti` class.\n\n    Parameters\n    ----------\n    *system: arguments\n        The `TransferFunction` class can be instantiated with 1 or 2\n        arguments. The following gives the number of input arguments and their\n        interpretation:\n\n            * 1: `dlti` system: (`StateSpace`, `TransferFunction` or\n              `ZerosPolesGain`)\n            * 2: array_like: (numerator, denominator)\n    dt: float, optional\n        Sampling time [s] of the discrete-time systems. Defaults to `True`\n        (unspecified sampling time). Must be specified as a keyword argument,\n        for example, ``dt=0.1``.\n\n    See Also\n    --------\n    ZerosPolesGain, StateSpace, dlti\n    tf2ss, tf2zpk, tf2sos\n\n    Notes\n    -----\n    Changing the value of properties that are not part of the\n    `TransferFunction` system representation (such as the `A`, `B`, `C`, `D`\n    state-space matrices) is very inefficient and may lead to numerical\n    inaccuracies.\n\n    If (numerator, denominator) is passed in for ``*system``, coefficients\n    for both the numerator and denominator should be specified in descending\n    exponent order (e.g., ``z^2 + 3z + 5`` would be represented as\n    ``[1, 3, 5]``).\n\n    Examples\n    --------\n    Construct the transfer function with a sampling time of 0.5 seconds:\n\n    .. math:: H(z) = \\frac{z^2 + 3z + 3}{z^2 + 2z + 1}\n\n    >>> from scipy import signal\n\n    >>> num = [1, 3, 3]\n    >>> den = [1, 2, 1]\n\n    >>> signal.TransferFunction(num, den, 0.5)\n    TransferFunctionDiscrete(\n    array([ 1.,  3.,  3.]),\n    array([ 1.,  2.,  1.]),\n    dt: 0.5\n    )\n\n    ')
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 806, 0, False)
        # Assigning a type to the variable 'self' (line 807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'TransferFunctionDiscrete.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'TransferFunctionDiscrete' (line 806)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 0), 'TransferFunctionDiscrete', TransferFunctionDiscrete)
# Declaration of the 'ZerosPolesGain' class
# Getting the type of 'LinearTimeInvariant' (line 871)
LinearTimeInvariant_267936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 21), 'LinearTimeInvariant')

class ZerosPolesGain(LinearTimeInvariant_267936, ):
    str_267937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, (-1)), 'str', '\n    Linear Time Invariant system class in zeros, poles, gain form.\n\n    Represents the system as the continuous- or discrete-time transfer function\n    :math:`H(s)=k \\prod_i (s - z[i]) / \\prod_j (s - p[j])`, where :math:`k` is\n    the `gain`, :math:`z` are the `zeros` and :math:`p` are the `poles`.\n    `ZerosPolesGain` systems inherit additional functionality from the `lti`,\n    respectively the `dlti` classes, depending on which system representation\n    is used.\n\n    Parameters\n    ----------\n    *system : arguments\n        The `ZerosPolesGain` class can be instantiated with 1 or 3\n        arguments. The following gives the number of input arguments and their\n        interpretation:\n\n            * 1: `lti` or `dlti` system: (`StateSpace`, `TransferFunction` or\n              `ZerosPolesGain`)\n            * 3: array_like: (zeros, poles, gain)\n    dt: float, optional\n        Sampling time [s] of the discrete-time systems. Defaults to `None`\n        (continuous-time). Must be specified as a keyword argument, for\n        example, ``dt=0.1``.\n\n\n    See Also\n    --------\n    TransferFunction, StateSpace, lti, dlti\n    zpk2ss, zpk2tf, zpk2sos\n\n    Notes\n    -----\n    Changing the value of properties that are not part of the\n    `ZerosPolesGain` system representation (such as the `A`, `B`, `C`, `D`\n    state-space matrices) is very inefficient and may lead to numerical\n    inaccuracies.  It is better to convert to the specific system\n    representation first. For example, call ``sys = sys.to_ss()`` before\n    accessing/changing the A, B, C, D system matrices.\n\n    Examples\n    --------\n    >>> from scipy import signal\n\n    Transfer function: H(s) = 5(s - 1)(s - 2) / (s - 3)(s - 4)\n\n    >>> signal.ZerosPolesGain([1, 2], [3, 4], 5)\n    ZerosPolesGainContinuous(\n    array([1, 2]),\n    array([3, 4]),\n    5,\n    dt: None\n    )\n\n    Transfer function: H(z) = 5(z - 1)(z - 2) / (z - 3)(z - 4)\n\n    >>> signal.ZerosPolesGain([1, 2], [3, 4], 5, dt=0.1)\n    ZerosPolesGainDiscrete(\n    array([1, 2]),\n    array([3, 4]),\n    5,\n    dt: 0.1\n    )\n\n    ')

    @norecursion
    def __new__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__new__'
        module_type_store = module_type_store.open_function_context('__new__', 937, 4, False)
        # Assigning a type to the variable 'self' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain.__new__.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain.__new__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain.__new__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain.__new__.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain.__new__')
        ZerosPolesGain.__new__.__dict__.__setitem__('stypy_param_names_list', [])
        ZerosPolesGain.__new__.__dict__.__setitem__('stypy_varargs_param_name', 'system')
        ZerosPolesGain.__new__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        ZerosPolesGain.__new__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain.__new__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain.__new__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain.__new__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.__new__', [], 'system', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__new__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__new__(...)' code ##################

        str_267938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 8), 'str', 'Handle object conversion if input is an instance of `lti`')
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 939)
        # Processing the call arguments (line 939)
        # Getting the type of 'system' (line 939)
        system_267940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 15), 'system', False)
        # Processing the call keyword arguments (line 939)
        kwargs_267941 = {}
        # Getting the type of 'len' (line 939)
        len_267939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 11), 'len', False)
        # Calling len(args, kwargs) (line 939)
        len_call_result_267942 = invoke(stypy.reporting.localization.Localization(__file__, 939, 11), len_267939, *[system_267940], **kwargs_267941)
        
        int_267943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 26), 'int')
        # Applying the binary operator '==' (line 939)
        result_eq_267944 = python_operator(stypy.reporting.localization.Localization(__file__, 939, 11), '==', len_call_result_267942, int_267943)
        
        
        # Call to isinstance(...): (line 939)
        # Processing the call arguments (line 939)
        
        # Obtaining the type of the subscript
        int_267946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 50), 'int')
        # Getting the type of 'system' (line 939)
        system_267947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 43), 'system', False)
        # Obtaining the member '__getitem__' of a type (line 939)
        getitem___267948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 43), system_267947, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 939)
        subscript_call_result_267949 = invoke(stypy.reporting.localization.Localization(__file__, 939, 43), getitem___267948, int_267946)
        
        # Getting the type of 'LinearTimeInvariant' (line 939)
        LinearTimeInvariant_267950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 54), 'LinearTimeInvariant', False)
        # Processing the call keyword arguments (line 939)
        kwargs_267951 = {}
        # Getting the type of 'isinstance' (line 939)
        isinstance_267945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 32), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 939)
        isinstance_call_result_267952 = invoke(stypy.reporting.localization.Localization(__file__, 939, 32), isinstance_267945, *[subscript_call_result_267949, LinearTimeInvariant_267950], **kwargs_267951)
        
        # Applying the binary operator 'and' (line 939)
        result_and_keyword_267953 = python_operator(stypy.reporting.localization.Localization(__file__, 939, 11), 'and', result_eq_267944, isinstance_call_result_267952)
        
        # Testing the type of an if condition (line 939)
        if_condition_267954 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 939, 8), result_and_keyword_267953)
        # Assigning a type to the variable 'if_condition_267954' (line 939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 8), 'if_condition_267954', if_condition_267954)
        # SSA begins for if statement (line 939)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to to_zpk(...): (line 940)
        # Processing the call keyword arguments (line 940)
        kwargs_267960 = {}
        
        # Obtaining the type of the subscript
        int_267955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 26), 'int')
        # Getting the type of 'system' (line 940)
        system_267956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 19), 'system', False)
        # Obtaining the member '__getitem__' of a type (line 940)
        getitem___267957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 19), system_267956, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 940)
        subscript_call_result_267958 = invoke(stypy.reporting.localization.Localization(__file__, 940, 19), getitem___267957, int_267955)
        
        # Obtaining the member 'to_zpk' of a type (line 940)
        to_zpk_267959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 19), subscript_call_result_267958, 'to_zpk')
        # Calling to_zpk(args, kwargs) (line 940)
        to_zpk_call_result_267961 = invoke(stypy.reporting.localization.Localization(__file__, 940, 19), to_zpk_267959, *[], **kwargs_267960)
        
        # Assigning a type to the variable 'stypy_return_type' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 12), 'stypy_return_type', to_zpk_call_result_267961)
        # SSA join for if statement (line 939)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'cls' (line 943)
        cls_267962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 11), 'cls')
        # Getting the type of 'ZerosPolesGain' (line 943)
        ZerosPolesGain_267963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 18), 'ZerosPolesGain')
        # Applying the binary operator 'is' (line 943)
        result_is__267964 = python_operator(stypy.reporting.localization.Localization(__file__, 943, 11), 'is', cls_267962, ZerosPolesGain_267963)
        
        # Testing the type of an if condition (line 943)
        if_condition_267965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 943, 8), result_is__267964)
        # Assigning a type to the variable 'if_condition_267965' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'if_condition_267965', if_condition_267965)
        # SSA begins for if statement (line 943)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 944)
        
        # Call to get(...): (line 944)
        # Processing the call arguments (line 944)
        str_267968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, 26), 'str', 'dt')
        # Processing the call keyword arguments (line 944)
        kwargs_267969 = {}
        # Getting the type of 'kwargs' (line 944)
        kwargs_267966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 15), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 944)
        get_267967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 15), kwargs_267966, 'get')
        # Calling get(args, kwargs) (line 944)
        get_call_result_267970 = invoke(stypy.reporting.localization.Localization(__file__, 944, 15), get_267967, *[str_267968], **kwargs_267969)
        
        # Getting the type of 'None' (line 944)
        None_267971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 35), 'None')
        
        (may_be_267972, more_types_in_union_267973) = may_be_none(get_call_result_267970, None_267971)

        if may_be_267972:

            if more_types_in_union_267973:
                # Runtime conditional SSA (line 944)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to __new__(...): (line 945)
            # Processing the call arguments (line 945)
            # Getting the type of 'ZerosPolesGainContinuous' (line 946)
            ZerosPolesGainContinuous_267976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 20), 'ZerosPolesGainContinuous', False)
            # Getting the type of 'system' (line 947)
            system_267977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 21), 'system', False)
            # Processing the call keyword arguments (line 945)
            # Getting the type of 'kwargs' (line 948)
            kwargs_267978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 22), 'kwargs', False)
            kwargs_267979 = {'kwargs_267978': kwargs_267978}
            # Getting the type of 'ZerosPolesGainContinuous' (line 945)
            ZerosPolesGainContinuous_267974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 23), 'ZerosPolesGainContinuous', False)
            # Obtaining the member '__new__' of a type (line 945)
            new___267975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 23), ZerosPolesGainContinuous_267974, '__new__')
            # Calling __new__(args, kwargs) (line 945)
            new___call_result_267980 = invoke(stypy.reporting.localization.Localization(__file__, 945, 23), new___267975, *[ZerosPolesGainContinuous_267976, system_267977], **kwargs_267979)
            
            # Assigning a type to the variable 'stypy_return_type' (line 945)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 16), 'stypy_return_type', new___call_result_267980)

            if more_types_in_union_267973:
                # Runtime conditional SSA for else branch (line 944)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_267972) or more_types_in_union_267973):
            
            # Call to __new__(...): (line 950)
            # Processing the call arguments (line 950)
            # Getting the type of 'ZerosPolesGainDiscrete' (line 951)
            ZerosPolesGainDiscrete_267983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 20), 'ZerosPolesGainDiscrete', False)
            # Getting the type of 'system' (line 952)
            system_267984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 21), 'system', False)
            # Processing the call keyword arguments (line 950)
            # Getting the type of 'kwargs' (line 953)
            kwargs_267985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 22), 'kwargs', False)
            kwargs_267986 = {'kwargs_267985': kwargs_267985}
            # Getting the type of 'ZerosPolesGainDiscrete' (line 950)
            ZerosPolesGainDiscrete_267981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 23), 'ZerosPolesGainDiscrete', False)
            # Obtaining the member '__new__' of a type (line 950)
            new___267982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 23), ZerosPolesGainDiscrete_267981, '__new__')
            # Calling __new__(args, kwargs) (line 950)
            new___call_result_267987 = invoke(stypy.reporting.localization.Localization(__file__, 950, 23), new___267982, *[ZerosPolesGainDiscrete_267983, system_267984], **kwargs_267986)
            
            # Assigning a type to the variable 'stypy_return_type' (line 950)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 16), 'stypy_return_type', new___call_result_267987)

            if (may_be_267972 and more_types_in_union_267973):
                # SSA join for if statement (line 944)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 943)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __new__(...): (line 957)
        # Processing the call arguments (line 957)
        # Getting the type of 'cls' (line 957)
        cls_267994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 50), 'cls', False)
        # Processing the call keyword arguments (line 957)
        kwargs_267995 = {}
        
        # Call to super(...): (line 957)
        # Processing the call arguments (line 957)
        # Getting the type of 'ZerosPolesGain' (line 957)
        ZerosPolesGain_267989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 21), 'ZerosPolesGain', False)
        # Getting the type of 'cls' (line 957)
        cls_267990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 37), 'cls', False)
        # Processing the call keyword arguments (line 957)
        kwargs_267991 = {}
        # Getting the type of 'super' (line 957)
        super_267988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 15), 'super', False)
        # Calling super(args, kwargs) (line 957)
        super_call_result_267992 = invoke(stypy.reporting.localization.Localization(__file__, 957, 15), super_267988, *[ZerosPolesGain_267989, cls_267990], **kwargs_267991)
        
        # Obtaining the member '__new__' of a type (line 957)
        new___267993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 15), super_call_result_267992, '__new__')
        # Calling __new__(args, kwargs) (line 957)
        new___call_result_267996 = invoke(stypy.reporting.localization.Localization(__file__, 957, 15), new___267993, *[cls_267994], **kwargs_267995)
        
        # Assigning a type to the variable 'stypy_return_type' (line 957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'stypy_return_type', new___call_result_267996)
        
        # ################# End of '__new__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__new__' in the type store
        # Getting the type of 'stypy_return_type' (line 937)
        stypy_return_type_267997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_267997)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__new__'
        return stypy_return_type_267997


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 959, 4, False)
        # Assigning a type to the variable 'self' (line 960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.__init__', [], 'system', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_267998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 8), 'str', 'Initialize the zeros, poles, gain system.')
        
        
        # Call to isinstance(...): (line 962)
        # Processing the call arguments (line 962)
        
        # Obtaining the type of the subscript
        int_268000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 29), 'int')
        # Getting the type of 'system' (line 962)
        system_268001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 22), 'system', False)
        # Obtaining the member '__getitem__' of a type (line 962)
        getitem___268002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 22), system_268001, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 962)
        subscript_call_result_268003 = invoke(stypy.reporting.localization.Localization(__file__, 962, 22), getitem___268002, int_268000)
        
        # Getting the type of 'LinearTimeInvariant' (line 962)
        LinearTimeInvariant_268004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 33), 'LinearTimeInvariant', False)
        # Processing the call keyword arguments (line 962)
        kwargs_268005 = {}
        # Getting the type of 'isinstance' (line 962)
        isinstance_267999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 962)
        isinstance_call_result_268006 = invoke(stypy.reporting.localization.Localization(__file__, 962, 11), isinstance_267999, *[subscript_call_result_268003, LinearTimeInvariant_268004], **kwargs_268005)
        
        # Testing the type of an if condition (line 962)
        if_condition_268007 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 962, 8), isinstance_call_result_268006)
        # Assigning a type to the variable 'if_condition_268007' (line 962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 8), 'if_condition_268007', if_condition_268007)
        # SSA begins for if statement (line 962)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 962)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 965)
        # Processing the call keyword arguments (line 965)
        # Getting the type of 'kwargs' (line 965)
        kwargs_268014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 47), 'kwargs', False)
        kwargs_268015 = {'kwargs_268014': kwargs_268014}
        
        # Call to super(...): (line 965)
        # Processing the call arguments (line 965)
        # Getting the type of 'ZerosPolesGain' (line 965)
        ZerosPolesGain_268009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 14), 'ZerosPolesGain', False)
        # Getting the type of 'self' (line 965)
        self_268010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 30), 'self', False)
        # Processing the call keyword arguments (line 965)
        kwargs_268011 = {}
        # Getting the type of 'super' (line 965)
        super_268008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 8), 'super', False)
        # Calling super(args, kwargs) (line 965)
        super_call_result_268012 = invoke(stypy.reporting.localization.Localization(__file__, 965, 8), super_268008, *[ZerosPolesGain_268009, self_268010], **kwargs_268011)
        
        # Obtaining the member '__init__' of a type (line 965)
        init___268013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 8), super_call_result_268012, '__init__')
        # Calling __init__(args, kwargs) (line 965)
        init___call_result_268016 = invoke(stypy.reporting.localization.Localization(__file__, 965, 8), init___268013, *[], **kwargs_268015)
        
        
        # Assigning a Name to a Attribute (line 967):
        
        # Assigning a Name to a Attribute (line 967):
        # Getting the type of 'None' (line 967)
        None_268017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 22), 'None')
        # Getting the type of 'self' (line 967)
        self_268018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 8), 'self')
        # Setting the type of the member '_zeros' of a type (line 967)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 967, 8), self_268018, '_zeros', None_268017)
        
        # Assigning a Name to a Attribute (line 968):
        
        # Assigning a Name to a Attribute (line 968):
        # Getting the type of 'None' (line 968)
        None_268019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 22), 'None')
        # Getting the type of 'self' (line 968)
        self_268020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 8), 'self')
        # Setting the type of the member '_poles' of a type (line 968)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 8), self_268020, '_poles', None_268019)
        
        # Assigning a Name to a Attribute (line 969):
        
        # Assigning a Name to a Attribute (line 969):
        # Getting the type of 'None' (line 969)
        None_268021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 21), 'None')
        # Getting the type of 'self' (line 969)
        self_268022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 8), 'self')
        # Setting the type of the member '_gain' of a type (line 969)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 969, 8), self_268022, '_gain', None_268021)
        
        # Assigning a Name to a Tuple (line 971):
        
        # Assigning a Subscript to a Name (line 971):
        
        # Obtaining the type of the subscript
        int_268023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 8), 'int')
        # Getting the type of 'system' (line 971)
        system_268024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 44), 'system')
        # Obtaining the member '__getitem__' of a type (line 971)
        getitem___268025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 8), system_268024, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 971)
        subscript_call_result_268026 = invoke(stypy.reporting.localization.Localization(__file__, 971, 8), getitem___268025, int_268023)
        
        # Assigning a type to the variable 'tuple_var_assignment_267109' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'tuple_var_assignment_267109', subscript_call_result_268026)
        
        # Assigning a Subscript to a Name (line 971):
        
        # Obtaining the type of the subscript
        int_268027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 8), 'int')
        # Getting the type of 'system' (line 971)
        system_268028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 44), 'system')
        # Obtaining the member '__getitem__' of a type (line 971)
        getitem___268029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 8), system_268028, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 971)
        subscript_call_result_268030 = invoke(stypy.reporting.localization.Localization(__file__, 971, 8), getitem___268029, int_268027)
        
        # Assigning a type to the variable 'tuple_var_assignment_267110' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'tuple_var_assignment_267110', subscript_call_result_268030)
        
        # Assigning a Subscript to a Name (line 971):
        
        # Obtaining the type of the subscript
        int_268031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 8), 'int')
        # Getting the type of 'system' (line 971)
        system_268032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 44), 'system')
        # Obtaining the member '__getitem__' of a type (line 971)
        getitem___268033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 8), system_268032, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 971)
        subscript_call_result_268034 = invoke(stypy.reporting.localization.Localization(__file__, 971, 8), getitem___268033, int_268031)
        
        # Assigning a type to the variable 'tuple_var_assignment_267111' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'tuple_var_assignment_267111', subscript_call_result_268034)
        
        # Assigning a Name to a Attribute (line 971):
        # Getting the type of 'tuple_var_assignment_267109' (line 971)
        tuple_var_assignment_267109_268035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'tuple_var_assignment_267109')
        # Getting the type of 'self' (line 971)
        self_268036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'self')
        # Setting the type of the member 'zeros' of a type (line 971)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 8), self_268036, 'zeros', tuple_var_assignment_267109_268035)
        
        # Assigning a Name to a Attribute (line 971):
        # Getting the type of 'tuple_var_assignment_267110' (line 971)
        tuple_var_assignment_267110_268037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'tuple_var_assignment_267110')
        # Getting the type of 'self' (line 971)
        self_268038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 20), 'self')
        # Setting the type of the member 'poles' of a type (line 971)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 20), self_268038, 'poles', tuple_var_assignment_267110_268037)
        
        # Assigning a Name to a Attribute (line 971):
        # Getting the type of 'tuple_var_assignment_267111' (line 971)
        tuple_var_assignment_267111_268039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'tuple_var_assignment_267111')
        # Getting the type of 'self' (line 971)
        self_268040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 32), 'self')
        # Setting the type of the member 'gain' of a type (line 971)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 32), self_268040, 'gain', tuple_var_assignment_267111_268039)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 973, 4, False)
        # Assigning a type to the variable 'self' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain.stypy__repr__')
        ZerosPolesGain.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        ZerosPolesGain.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGain.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGain.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_268041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 974, 8), 'str', 'Return representation of the `ZerosPolesGain` system.')
        
        # Call to format(...): (line 975)
        # Processing the call arguments (line 975)
        # Getting the type of 'self' (line 976)
        self_268044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'self', False)
        # Obtaining the member '__class__' of a type (line 976)
        class___268045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 12), self_268044, '__class__')
        # Obtaining the member '__name__' of a type (line 976)
        name___268046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 12), class___268045, '__name__')
        
        # Call to repr(...): (line 977)
        # Processing the call arguments (line 977)
        # Getting the type of 'self' (line 977)
        self_268048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 17), 'self', False)
        # Obtaining the member 'zeros' of a type (line 977)
        zeros_268049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 17), self_268048, 'zeros')
        # Processing the call keyword arguments (line 977)
        kwargs_268050 = {}
        # Getting the type of 'repr' (line 977)
        repr_268047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 977)
        repr_call_result_268051 = invoke(stypy.reporting.localization.Localization(__file__, 977, 12), repr_268047, *[zeros_268049], **kwargs_268050)
        
        
        # Call to repr(...): (line 978)
        # Processing the call arguments (line 978)
        # Getting the type of 'self' (line 978)
        self_268053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 17), 'self', False)
        # Obtaining the member 'poles' of a type (line 978)
        poles_268054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 17), self_268053, 'poles')
        # Processing the call keyword arguments (line 978)
        kwargs_268055 = {}
        # Getting the type of 'repr' (line 978)
        repr_268052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 978)
        repr_call_result_268056 = invoke(stypy.reporting.localization.Localization(__file__, 978, 12), repr_268052, *[poles_268054], **kwargs_268055)
        
        
        # Call to repr(...): (line 979)
        # Processing the call arguments (line 979)
        # Getting the type of 'self' (line 979)
        self_268058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 17), 'self', False)
        # Obtaining the member 'gain' of a type (line 979)
        gain_268059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 979, 17), self_268058, 'gain')
        # Processing the call keyword arguments (line 979)
        kwargs_268060 = {}
        # Getting the type of 'repr' (line 979)
        repr_268057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 979)
        repr_call_result_268061 = invoke(stypy.reporting.localization.Localization(__file__, 979, 12), repr_268057, *[gain_268059], **kwargs_268060)
        
        
        # Call to repr(...): (line 980)
        # Processing the call arguments (line 980)
        # Getting the type of 'self' (line 980)
        self_268063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 17), 'self', False)
        # Obtaining the member 'dt' of a type (line 980)
        dt_268064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 17), self_268063, 'dt')
        # Processing the call keyword arguments (line 980)
        kwargs_268065 = {}
        # Getting the type of 'repr' (line 980)
        repr_268062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 980)
        repr_call_result_268066 = invoke(stypy.reporting.localization.Localization(__file__, 980, 12), repr_268062, *[dt_268064], **kwargs_268065)
        
        # Processing the call keyword arguments (line 975)
        kwargs_268067 = {}
        str_268042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 975, 15), 'str', '{0}(\n{1},\n{2},\n{3},\ndt: {4}\n)')
        # Obtaining the member 'format' of a type (line 975)
        format_268043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 15), str_268042, 'format')
        # Calling format(args, kwargs) (line 975)
        format_call_result_268068 = invoke(stypy.reporting.localization.Localization(__file__, 975, 15), format_268043, *[name___268046, repr_call_result_268051, repr_call_result_268056, repr_call_result_268061, repr_call_result_268066], **kwargs_268067)
        
        # Assigning a type to the variable 'stypy_return_type' (line 975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 8), 'stypy_return_type', format_call_result_268068)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 973)
        stypy_return_type_268069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268069)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_268069


    @norecursion
    def zeros(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'zeros'
        module_type_store = module_type_store.open_function_context('zeros', 983, 4, False)
        # Assigning a type to the variable 'self' (line 984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain.zeros')
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_param_names_list', [])
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.zeros', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'zeros', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'zeros(...)' code ##################

        str_268070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 8), 'str', 'Zeros of the `ZerosPolesGain` system.')
        # Getting the type of 'self' (line 986)
        self_268071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 15), 'self')
        # Obtaining the member '_zeros' of a type (line 986)
        _zeros_268072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 15), self_268071, '_zeros')
        # Assigning a type to the variable 'stypy_return_type' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'stypy_return_type', _zeros_268072)
        
        # ################# End of 'zeros(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'zeros' in the type store
        # Getting the type of 'stypy_return_type' (line 983)
        stypy_return_type_268073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268073)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'zeros'
        return stypy_return_type_268073


    @norecursion
    def zeros(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'zeros'
        module_type_store = module_type_store.open_function_context('zeros', 988, 4, False)
        # Assigning a type to the variable 'self' (line 989)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 989, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain.zeros')
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_param_names_list', ['zeros'])
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain.zeros.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.zeros', ['zeros'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'zeros', localization, ['zeros'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'zeros(...)' code ##################

        
        # Assigning a Call to a Attribute (line 990):
        
        # Assigning a Call to a Attribute (line 990):
        
        # Call to atleast_1d(...): (line 990)
        # Processing the call arguments (line 990)
        # Getting the type of 'zeros' (line 990)
        zeros_268075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 33), 'zeros', False)
        # Processing the call keyword arguments (line 990)
        kwargs_268076 = {}
        # Getting the type of 'atleast_1d' (line 990)
        atleast_1d_268074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 22), 'atleast_1d', False)
        # Calling atleast_1d(args, kwargs) (line 990)
        atleast_1d_call_result_268077 = invoke(stypy.reporting.localization.Localization(__file__, 990, 22), atleast_1d_268074, *[zeros_268075], **kwargs_268076)
        
        # Getting the type of 'self' (line 990)
        self_268078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 8), 'self')
        # Setting the type of the member '_zeros' of a type (line 990)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 8), self_268078, '_zeros', atleast_1d_call_result_268077)
        
        
        
        # Call to len(...): (line 993)
        # Processing the call arguments (line 993)
        # Getting the type of 'self' (line 993)
        self_268080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 15), 'self', False)
        # Obtaining the member 'zeros' of a type (line 993)
        zeros_268081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 15), self_268080, 'zeros')
        # Obtaining the member 'shape' of a type (line 993)
        shape_268082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 15), zeros_268081, 'shape')
        # Processing the call keyword arguments (line 993)
        kwargs_268083 = {}
        # Getting the type of 'len' (line 993)
        len_268079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 11), 'len', False)
        # Calling len(args, kwargs) (line 993)
        len_call_result_268084 = invoke(stypy.reporting.localization.Localization(__file__, 993, 11), len_268079, *[shape_268082], **kwargs_268083)
        
        int_268085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 35), 'int')
        # Applying the binary operator '>' (line 993)
        result_gt_268086 = python_operator(stypy.reporting.localization.Localization(__file__, 993, 11), '>', len_call_result_268084, int_268085)
        
        # Testing the type of an if condition (line 993)
        if_condition_268087 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 993, 8), result_gt_268086)
        # Assigning a type to the variable 'if_condition_268087' (line 993)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 8), 'if_condition_268087', if_condition_268087)
        # SSA begins for if statement (line 993)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 994):
        
        # Assigning a Subscript to a Name (line 994):
        
        # Obtaining the type of the subscript
        int_268088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 12), 'int')
        # Getting the type of 'self' (line 994)
        self_268089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 40), 'self')
        # Obtaining the member 'zeros' of a type (line 994)
        zeros_268090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 40), self_268089, 'zeros')
        # Obtaining the member 'shape' of a type (line 994)
        shape_268091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 40), zeros_268090, 'shape')
        # Obtaining the member '__getitem__' of a type (line 994)
        getitem___268092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 12), shape_268091, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 994)
        subscript_call_result_268093 = invoke(stypy.reporting.localization.Localization(__file__, 994, 12), getitem___268092, int_268088)
        
        # Assigning a type to the variable 'tuple_var_assignment_267112' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 12), 'tuple_var_assignment_267112', subscript_call_result_268093)
        
        # Assigning a Subscript to a Name (line 994):
        
        # Obtaining the type of the subscript
        int_268094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 12), 'int')
        # Getting the type of 'self' (line 994)
        self_268095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 40), 'self')
        # Obtaining the member 'zeros' of a type (line 994)
        zeros_268096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 40), self_268095, 'zeros')
        # Obtaining the member 'shape' of a type (line 994)
        shape_268097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 40), zeros_268096, 'shape')
        # Obtaining the member '__getitem__' of a type (line 994)
        getitem___268098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 12), shape_268097, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 994)
        subscript_call_result_268099 = invoke(stypy.reporting.localization.Localization(__file__, 994, 12), getitem___268098, int_268094)
        
        # Assigning a type to the variable 'tuple_var_assignment_267113' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 12), 'tuple_var_assignment_267113', subscript_call_result_268099)
        
        # Assigning a Name to a Attribute (line 994):
        # Getting the type of 'tuple_var_assignment_267112' (line 994)
        tuple_var_assignment_267112_268100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 12), 'tuple_var_assignment_267112')
        # Getting the type of 'self' (line 994)
        self_268101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 12), 'self')
        # Setting the type of the member 'outputs' of a type (line 994)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 12), self_268101, 'outputs', tuple_var_assignment_267112_268100)
        
        # Assigning a Name to a Attribute (line 994):
        # Getting the type of 'tuple_var_assignment_267113' (line 994)
        tuple_var_assignment_267113_268102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 12), 'tuple_var_assignment_267113')
        # Getting the type of 'self' (line 994)
        self_268103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 26), 'self')
        # Setting the type of the member 'inputs' of a type (line 994)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 26), self_268103, 'inputs', tuple_var_assignment_267113_268102)
        # SSA branch for the else part of an if statement (line 993)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Attribute (line 996):
        
        # Assigning a Num to a Attribute (line 996):
        int_268104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 27), 'int')
        # Getting the type of 'self' (line 996)
        self_268105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 12), 'self')
        # Setting the type of the member 'outputs' of a type (line 996)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 12), self_268105, 'outputs', int_268104)
        
        # Assigning a Num to a Attribute (line 997):
        
        # Assigning a Num to a Attribute (line 997):
        int_268106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 997, 26), 'int')
        # Getting the type of 'self' (line 997)
        self_268107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 12), 'self')
        # Setting the type of the member 'inputs' of a type (line 997)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 12), self_268107, 'inputs', int_268106)
        # SSA join for if statement (line 993)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'zeros(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'zeros' in the type store
        # Getting the type of 'stypy_return_type' (line 988)
        stypy_return_type_268108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268108)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'zeros'
        return stypy_return_type_268108


    @norecursion
    def poles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'poles'
        module_type_store = module_type_store.open_function_context('poles', 999, 4, False)
        # Assigning a type to the variable 'self' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain.poles')
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_param_names_list', [])
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.poles', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'poles', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'poles(...)' code ##################

        str_268109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 8), 'str', 'Poles of the `ZerosPolesGain` system.')
        # Getting the type of 'self' (line 1002)
        self_268110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 15), 'self')
        # Obtaining the member '_poles' of a type (line 1002)
        _poles_268111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 15), self_268110, '_poles')
        # Assigning a type to the variable 'stypy_return_type' (line 1002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 8), 'stypy_return_type', _poles_268111)
        
        # ################# End of 'poles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'poles' in the type store
        # Getting the type of 'stypy_return_type' (line 999)
        stypy_return_type_268112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268112)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'poles'
        return stypy_return_type_268112


    @norecursion
    def poles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'poles'
        module_type_store = module_type_store.open_function_context('poles', 1004, 4, False)
        # Assigning a type to the variable 'self' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain.poles')
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_param_names_list', ['poles'])
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain.poles.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.poles', ['poles'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'poles', localization, ['poles'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'poles(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1006):
        
        # Assigning a Call to a Attribute (line 1006):
        
        # Call to atleast_1d(...): (line 1006)
        # Processing the call arguments (line 1006)
        # Getting the type of 'poles' (line 1006)
        poles_268114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 33), 'poles', False)
        # Processing the call keyword arguments (line 1006)
        kwargs_268115 = {}
        # Getting the type of 'atleast_1d' (line 1006)
        atleast_1d_268113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 22), 'atleast_1d', False)
        # Calling atleast_1d(args, kwargs) (line 1006)
        atleast_1d_call_result_268116 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 22), atleast_1d_268113, *[poles_268114], **kwargs_268115)
        
        # Getting the type of 'self' (line 1006)
        self_268117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 8), 'self')
        # Setting the type of the member '_poles' of a type (line 1006)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 8), self_268117, '_poles', atleast_1d_call_result_268116)
        
        # ################# End of 'poles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'poles' in the type store
        # Getting the type of 'stypy_return_type' (line 1004)
        stypy_return_type_268118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268118)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'poles'
        return stypy_return_type_268118


    @norecursion
    def gain(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'gain'
        module_type_store = module_type_store.open_function_context('gain', 1008, 4, False)
        # Assigning a type to the variable 'self' (line 1009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain.gain')
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_param_names_list', [])
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.gain', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'gain', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'gain(...)' code ##################

        str_268119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, 8), 'str', 'Gain of the `ZerosPolesGain` system.')
        # Getting the type of 'self' (line 1011)
        self_268120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 15), 'self')
        # Obtaining the member '_gain' of a type (line 1011)
        _gain_268121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1011, 15), self_268120, '_gain')
        # Assigning a type to the variable 'stypy_return_type' (line 1011)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1011, 8), 'stypy_return_type', _gain_268121)
        
        # ################# End of 'gain(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'gain' in the type store
        # Getting the type of 'stypy_return_type' (line 1008)
        stypy_return_type_268122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268122)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'gain'
        return stypy_return_type_268122


    @norecursion
    def gain(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'gain'
        module_type_store = module_type_store.open_function_context('gain', 1013, 4, False)
        # Assigning a type to the variable 'self' (line 1014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain.gain')
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_param_names_list', ['gain'])
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain.gain.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.gain', ['gain'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'gain', localization, ['gain'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'gain(...)' code ##################

        
        # Assigning a Name to a Attribute (line 1015):
        
        # Assigning a Name to a Attribute (line 1015):
        # Getting the type of 'gain' (line 1015)
        gain_268123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 21), 'gain')
        # Getting the type of 'self' (line 1015)
        self_268124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 8), 'self')
        # Setting the type of the member '_gain' of a type (line 1015)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 8), self_268124, '_gain', gain_268123)
        
        # ################# End of 'gain(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'gain' in the type store
        # Getting the type of 'stypy_return_type' (line 1013)
        stypy_return_type_268125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268125)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'gain'
        return stypy_return_type_268125


    @norecursion
    def _copy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_copy'
        module_type_store = module_type_store.open_function_context('_copy', 1017, 4, False)
        # Assigning a type to the variable 'self' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain._copy.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain._copy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain._copy.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain._copy.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain._copy')
        ZerosPolesGain._copy.__dict__.__setitem__('stypy_param_names_list', ['system'])
        ZerosPolesGain._copy.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGain._copy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGain._copy.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain._copy.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain._copy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain._copy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain._copy', ['system'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_copy', localization, ['system'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_copy(...)' code ##################

        str_268126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, (-1)), 'str', '\n        Copy the parameters of another `ZerosPolesGain` system.\n\n        Parameters\n        ----------\n        system : instance of `ZerosPolesGain`\n            The zeros, poles gain system that is to be copied\n\n        ')
        
        # Assigning a Attribute to a Attribute (line 1027):
        
        # Assigning a Attribute to a Attribute (line 1027):
        # Getting the type of 'system' (line 1027)
        system_268127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 21), 'system')
        # Obtaining the member 'poles' of a type (line 1027)
        poles_268128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 21), system_268127, 'poles')
        # Getting the type of 'self' (line 1027)
        self_268129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 8), 'self')
        # Setting the type of the member 'poles' of a type (line 1027)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 8), self_268129, 'poles', poles_268128)
        
        # Assigning a Attribute to a Attribute (line 1028):
        
        # Assigning a Attribute to a Attribute (line 1028):
        # Getting the type of 'system' (line 1028)
        system_268130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 21), 'system')
        # Obtaining the member 'zeros' of a type (line 1028)
        zeros_268131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 21), system_268130, 'zeros')
        # Getting the type of 'self' (line 1028)
        self_268132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 8), 'self')
        # Setting the type of the member 'zeros' of a type (line 1028)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 8), self_268132, 'zeros', zeros_268131)
        
        # Assigning a Attribute to a Attribute (line 1029):
        
        # Assigning a Attribute to a Attribute (line 1029):
        # Getting the type of 'system' (line 1029)
        system_268133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 20), 'system')
        # Obtaining the member 'gain' of a type (line 1029)
        gain_268134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 20), system_268133, 'gain')
        # Getting the type of 'self' (line 1029)
        self_268135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 8), 'self')
        # Setting the type of the member 'gain' of a type (line 1029)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 8), self_268135, 'gain', gain_268134)
        
        # ################# End of '_copy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_copy' in the type store
        # Getting the type of 'stypy_return_type' (line 1017)
        stypy_return_type_268136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268136)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_copy'
        return stypy_return_type_268136


    @norecursion
    def to_tf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'to_tf'
        module_type_store = module_type_store.open_function_context('to_tf', 1031, 4, False)
        # Assigning a type to the variable 'self' (line 1032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain.to_tf.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain.to_tf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain.to_tf.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain.to_tf.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain.to_tf')
        ZerosPolesGain.to_tf.__dict__.__setitem__('stypy_param_names_list', [])
        ZerosPolesGain.to_tf.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGain.to_tf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGain.to_tf.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain.to_tf.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain.to_tf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain.to_tf.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.to_tf', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_tf', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_tf(...)' code ##################

        str_268137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, (-1)), 'str', '\n        Convert system representation to `TransferFunction`.\n\n        Returns\n        -------\n        sys : instance of `TransferFunction`\n            Transfer function of the current system\n\n        ')
        
        # Call to TransferFunction(...): (line 1041)
        
        # Call to zpk2tf(...): (line 1041)
        # Processing the call arguments (line 1041)
        # Getting the type of 'self' (line 1041)
        self_268140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 40), 'self', False)
        # Obtaining the member 'zeros' of a type (line 1041)
        zeros_268141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 40), self_268140, 'zeros')
        # Getting the type of 'self' (line 1041)
        self_268142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 52), 'self', False)
        # Obtaining the member 'poles' of a type (line 1041)
        poles_268143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 52), self_268142, 'poles')
        # Getting the type of 'self' (line 1041)
        self_268144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 64), 'self', False)
        # Obtaining the member 'gain' of a type (line 1041)
        gain_268145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 64), self_268144, 'gain')
        # Processing the call keyword arguments (line 1041)
        kwargs_268146 = {}
        # Getting the type of 'zpk2tf' (line 1041)
        zpk2tf_268139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 33), 'zpk2tf', False)
        # Calling zpk2tf(args, kwargs) (line 1041)
        zpk2tf_call_result_268147 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 33), zpk2tf_268139, *[zeros_268141, poles_268143, gain_268145], **kwargs_268146)
        
        # Processing the call keyword arguments (line 1041)
        # Getting the type of 'self' (line 1042)
        self_268148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 34), 'self', False)
        # Obtaining the member '_dt_dict' of a type (line 1042)
        _dt_dict_268149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 34), self_268148, '_dt_dict')
        kwargs_268150 = {'_dt_dict_268149': _dt_dict_268149}
        # Getting the type of 'TransferFunction' (line 1041)
        TransferFunction_268138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 15), 'TransferFunction', False)
        # Calling TransferFunction(args, kwargs) (line 1041)
        TransferFunction_call_result_268151 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 15), TransferFunction_268138, *[zpk2tf_call_result_268147], **kwargs_268150)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'stypy_return_type', TransferFunction_call_result_268151)
        
        # ################# End of 'to_tf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_tf' in the type store
        # Getting the type of 'stypy_return_type' (line 1031)
        stypy_return_type_268152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268152)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_tf'
        return stypy_return_type_268152


    @norecursion
    def to_zpk(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'to_zpk'
        module_type_store = module_type_store.open_function_context('to_zpk', 1044, 4, False)
        # Assigning a type to the variable 'self' (line 1045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain.to_zpk.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain.to_zpk.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain.to_zpk.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain.to_zpk.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain.to_zpk')
        ZerosPolesGain.to_zpk.__dict__.__setitem__('stypy_param_names_list', [])
        ZerosPolesGain.to_zpk.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGain.to_zpk.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGain.to_zpk.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain.to_zpk.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain.to_zpk.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain.to_zpk.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.to_zpk', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_zpk', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_zpk(...)' code ##################

        str_268153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1053, (-1)), 'str', "\n        Return a copy of the current 'ZerosPolesGain' system.\n\n        Returns\n        -------\n        sys : instance of `ZerosPolesGain`\n            The current system (copy)\n\n        ")
        
        # Call to deepcopy(...): (line 1054)
        # Processing the call arguments (line 1054)
        # Getting the type of 'self' (line 1054)
        self_268156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 29), 'self', False)
        # Processing the call keyword arguments (line 1054)
        kwargs_268157 = {}
        # Getting the type of 'copy' (line 1054)
        copy_268154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 15), 'copy', False)
        # Obtaining the member 'deepcopy' of a type (line 1054)
        deepcopy_268155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 15), copy_268154, 'deepcopy')
        # Calling deepcopy(args, kwargs) (line 1054)
        deepcopy_call_result_268158 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 15), deepcopy_268155, *[self_268156], **kwargs_268157)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1054)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1054, 8), 'stypy_return_type', deepcopy_call_result_268158)
        
        # ################# End of 'to_zpk(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_zpk' in the type store
        # Getting the type of 'stypy_return_type' (line 1044)
        stypy_return_type_268159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268159)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_zpk'
        return stypy_return_type_268159


    @norecursion
    def to_ss(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'to_ss'
        module_type_store = module_type_store.open_function_context('to_ss', 1056, 4, False)
        # Assigning a type to the variable 'self' (line 1057)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGain.to_ss.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGain.to_ss.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGain.to_ss.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGain.to_ss.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGain.to_ss')
        ZerosPolesGain.to_ss.__dict__.__setitem__('stypy_param_names_list', [])
        ZerosPolesGain.to_ss.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGain.to_ss.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGain.to_ss.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGain.to_ss.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGain.to_ss.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGain.to_ss.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGain.to_ss', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_ss', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_ss(...)' code ##################

        str_268160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, (-1)), 'str', '\n        Convert system representation to `StateSpace`.\n\n        Returns\n        -------\n        sys : instance of `StateSpace`\n            State space model of the current system\n\n        ')
        
        # Call to StateSpace(...): (line 1066)
        
        # Call to zpk2ss(...): (line 1066)
        # Processing the call arguments (line 1066)
        # Getting the type of 'self' (line 1066)
        self_268163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 34), 'self', False)
        # Obtaining the member 'zeros' of a type (line 1066)
        zeros_268164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 34), self_268163, 'zeros')
        # Getting the type of 'self' (line 1066)
        self_268165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 46), 'self', False)
        # Obtaining the member 'poles' of a type (line 1066)
        poles_268166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 46), self_268165, 'poles')
        # Getting the type of 'self' (line 1066)
        self_268167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 58), 'self', False)
        # Obtaining the member 'gain' of a type (line 1066)
        gain_268168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1066, 58), self_268167, 'gain')
        # Processing the call keyword arguments (line 1066)
        kwargs_268169 = {}
        # Getting the type of 'zpk2ss' (line 1066)
        zpk2ss_268162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 27), 'zpk2ss', False)
        # Calling zpk2ss(args, kwargs) (line 1066)
        zpk2ss_call_result_268170 = invoke(stypy.reporting.localization.Localization(__file__, 1066, 27), zpk2ss_268162, *[zeros_268164, poles_268166, gain_268168], **kwargs_268169)
        
        # Processing the call keyword arguments (line 1066)
        # Getting the type of 'self' (line 1067)
        self_268171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 28), 'self', False)
        # Obtaining the member '_dt_dict' of a type (line 1067)
        _dt_dict_268172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 28), self_268171, '_dt_dict')
        kwargs_268173 = {'_dt_dict_268172': _dt_dict_268172}
        # Getting the type of 'StateSpace' (line 1066)
        StateSpace_268161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 15), 'StateSpace', False)
        # Calling StateSpace(args, kwargs) (line 1066)
        StateSpace_call_result_268174 = invoke(stypy.reporting.localization.Localization(__file__, 1066, 15), StateSpace_268161, *[zpk2ss_call_result_268170], **kwargs_268173)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1066, 8), 'stypy_return_type', StateSpace_call_result_268174)
        
        # ################# End of 'to_ss(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_ss' in the type store
        # Getting the type of 'stypy_return_type' (line 1056)
        stypy_return_type_268175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268175)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_ss'
        return stypy_return_type_268175


# Assigning a type to the variable 'ZerosPolesGain' (line 871)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 0), 'ZerosPolesGain', ZerosPolesGain)
# Declaration of the 'ZerosPolesGainContinuous' class
# Getting the type of 'ZerosPolesGain' (line 1070)
ZerosPolesGain_268176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 31), 'ZerosPolesGain')
# Getting the type of 'lti' (line 1070)
lti_268177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 47), 'lti')

class ZerosPolesGainContinuous(ZerosPolesGain_268176, lti_268177, ):
    str_268178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, (-1)), 'str', '\n    Continuous-time Linear Time Invariant system in zeros, poles, gain form.\n\n    Represents the system as the continuous time transfer function\n    :math:`H(s)=k \\prod_i (s - z[i]) / \\prod_j (s - p[j])`, where :math:`k` is\n    the `gain`, :math:`z` are the `zeros` and :math:`p` are the `poles`.\n    Continuous-time `ZerosPolesGain` systems inherit additional functionality\n    from the `lti` class.\n\n    Parameters\n    ----------\n    *system : arguments\n        The `ZerosPolesGain` class can be instantiated with 1 or 3\n        arguments. The following gives the number of input arguments and their\n        interpretation:\n\n            * 1: `lti` system: (`StateSpace`, `TransferFunction` or\n              `ZerosPolesGain`)\n            * 3: array_like: (zeros, poles, gain)\n\n    See Also\n    --------\n    TransferFunction, StateSpace, lti\n    zpk2ss, zpk2tf, zpk2sos\n\n    Notes\n    -----\n    Changing the value of properties that are not part of the\n    `ZerosPolesGain` system representation (such as the `A`, `B`, `C`, `D`\n    state-space matrices) is very inefficient and may lead to numerical\n    inaccuracies.  It is better to convert to the specific system\n    representation first. For example, call ``sys = sys.to_ss()`` before\n    accessing/changing the A, B, C, D system matrices.\n\n    Examples\n    --------\n    >>> from scipy import signal\n\n    Transfer function: H(s) = 5(s - 1)(s - 2) / (s - 3)(s - 4)\n\n    >>> signal.ZerosPolesGain([1, 2], [3, 4], 5)\n    ZerosPolesGainContinuous(\n    array([1, 2]),\n    array([3, 4]),\n    5,\n    dt: None\n    )\n\n    ')

    @norecursion
    def to_discrete(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_268179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1120, 37), 'str', 'zoh')
        # Getting the type of 'None' (line 1120)
        None_268180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 50), 'None')
        defaults = [str_268179, None_268180]
        # Create a new context for function 'to_discrete'
        module_type_store = module_type_store.open_function_context('to_discrete', 1120, 4, False)
        # Assigning a type to the variable 'self' (line 1121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ZerosPolesGainContinuous.to_discrete.__dict__.__setitem__('stypy_localization', localization)
        ZerosPolesGainContinuous.to_discrete.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ZerosPolesGainContinuous.to_discrete.__dict__.__setitem__('stypy_type_store', module_type_store)
        ZerosPolesGainContinuous.to_discrete.__dict__.__setitem__('stypy_function_name', 'ZerosPolesGainContinuous.to_discrete')
        ZerosPolesGainContinuous.to_discrete.__dict__.__setitem__('stypy_param_names_list', ['dt', 'method', 'alpha'])
        ZerosPolesGainContinuous.to_discrete.__dict__.__setitem__('stypy_varargs_param_name', None)
        ZerosPolesGainContinuous.to_discrete.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ZerosPolesGainContinuous.to_discrete.__dict__.__setitem__('stypy_call_defaults', defaults)
        ZerosPolesGainContinuous.to_discrete.__dict__.__setitem__('stypy_call_varargs', varargs)
        ZerosPolesGainContinuous.to_discrete.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ZerosPolesGainContinuous.to_discrete.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGainContinuous.to_discrete', ['dt', 'method', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_discrete', localization, ['dt', 'method', 'alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_discrete(...)' code ##################

        str_268181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1129, (-1)), 'str', '\n        Returns the discretized `ZerosPolesGain` system.\n\n        Parameters: See `cont2discrete` for details.\n\n        Returns\n        -------\n        sys: instance of `dlti` and `ZerosPolesGain`\n        ')
        
        # Call to ZerosPolesGain(...): (line 1130)
        
        # Obtaining the type of the subscript
        int_268183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 41), 'int')
        slice_268184 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1131, 13), None, int_268183, None)
        
        # Call to cont2discrete(...): (line 1131)
        # Processing the call arguments (line 1131)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1131)
        tuple_268186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1131, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1131)
        # Adding element type (line 1131)
        # Getting the type of 'self' (line 1131)
        self_268187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 28), 'self', False)
        # Obtaining the member 'zeros' of a type (line 1131)
        zeros_268188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 28), self_268187, 'zeros')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1131, 28), tuple_268186, zeros_268188)
        # Adding element type (line 1131)
        # Getting the type of 'self' (line 1131)
        self_268189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 40), 'self', False)
        # Obtaining the member 'poles' of a type (line 1131)
        poles_268190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 40), self_268189, 'poles')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1131, 28), tuple_268186, poles_268190)
        # Adding element type (line 1131)
        # Getting the type of 'self' (line 1131)
        self_268191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 52), 'self', False)
        # Obtaining the member 'gain' of a type (line 1131)
        gain_268192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 52), self_268191, 'gain')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1131, 28), tuple_268186, gain_268192)
        
        # Getting the type of 'dt' (line 1132)
        dt_268193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 27), 'dt', False)
        # Processing the call keyword arguments (line 1131)
        # Getting the type of 'method' (line 1133)
        method_268194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 34), 'method', False)
        keyword_268195 = method_268194
        # Getting the type of 'alpha' (line 1134)
        alpha_268196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 33), 'alpha', False)
        keyword_268197 = alpha_268196
        kwargs_268198 = {'alpha': keyword_268197, 'method': keyword_268195}
        # Getting the type of 'cont2discrete' (line 1131)
        cont2discrete_268185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 13), 'cont2discrete', False)
        # Calling cont2discrete(args, kwargs) (line 1131)
        cont2discrete_call_result_268199 = invoke(stypy.reporting.localization.Localization(__file__, 1131, 13), cont2discrete_268185, *[tuple_268186, dt_268193], **kwargs_268198)
        
        # Obtaining the member '__getitem__' of a type (line 1131)
        getitem___268200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 13), cont2discrete_call_result_268199, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1131)
        subscript_call_result_268201 = invoke(stypy.reporting.localization.Localization(__file__, 1131, 13), getitem___268200, slice_268184)
        
        # Processing the call keyword arguments (line 1130)
        # Getting the type of 'dt' (line 1135)
        dt_268202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 15), 'dt', False)
        keyword_268203 = dt_268202
        kwargs_268204 = {'dt': keyword_268203}
        # Getting the type of 'ZerosPolesGain' (line 1130)
        ZerosPolesGain_268182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 15), 'ZerosPolesGain', False)
        # Calling ZerosPolesGain(args, kwargs) (line 1130)
        ZerosPolesGain_call_result_268205 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 15), ZerosPolesGain_268182, *[subscript_call_result_268201], **kwargs_268204)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'stypy_return_type', ZerosPolesGain_call_result_268205)
        
        # ################# End of 'to_discrete(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_discrete' in the type store
        # Getting the type of 'stypy_return_type' (line 1120)
        stypy_return_type_268206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268206)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_discrete'
        return stypy_return_type_268206


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1070, 0, False)
        # Assigning a type to the variable 'self' (line 1071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1071, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGainContinuous.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ZerosPolesGainContinuous' (line 1070)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 0), 'ZerosPolesGainContinuous', ZerosPolesGainContinuous)
# Declaration of the 'ZerosPolesGainDiscrete' class
# Getting the type of 'ZerosPolesGain' (line 1138)
ZerosPolesGain_268207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 29), 'ZerosPolesGain')
# Getting the type of 'dlti' (line 1138)
dlti_268208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 45), 'dlti')

class ZerosPolesGainDiscrete(ZerosPolesGain_268207, dlti_268208, ):
    str_268209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, (-1)), 'str', '\n    Discrete-time Linear Time Invariant system in zeros, poles, gain form.\n\n    Represents the system as the discrete-time transfer function\n    :math:`H(s)=k \\prod_i (s - z[i]) / \\prod_j (s - p[j])`, where :math:`k` is\n    the `gain`, :math:`z` are the `zeros` and :math:`p` are the `poles`.\n    Discrete-time `ZerosPolesGain` systems inherit additional functionality\n    from the `dlti` class.\n\n    Parameters\n    ----------\n    *system : arguments\n        The `ZerosPolesGain` class can be instantiated with 1 or 3\n        arguments. The following gives the number of input arguments and their\n        interpretation:\n\n            * 1: `dlti` system: (`StateSpace`, `TransferFunction` or\n              `ZerosPolesGain`)\n            * 3: array_like: (zeros, poles, gain)\n    dt: float, optional\n        Sampling time [s] of the discrete-time systems. Defaults to `True`\n        (unspecified sampling time). Must be specified as a keyword argument,\n        for example, ``dt=0.1``.\n\n    See Also\n    --------\n    TransferFunction, StateSpace, dlti\n    zpk2ss, zpk2tf, zpk2sos\n\n    Notes\n    -----\n    Changing the value of properties that are not part of the\n    `ZerosPolesGain` system representation (such as the `A`, `B`, `C`, `D`\n    state-space matrices) is very inefficient and may lead to numerical\n    inaccuracies.  It is better to convert to the specific system\n    representation first. For example, call ``sys = sys.to_ss()`` before\n    accessing/changing the A, B, C, D system matrices.\n\n    Examples\n    --------\n    >>> from scipy import signal\n\n    Transfer function: H(s) = 5(s - 1)(s - 2) / (s - 3)(s - 4)\n\n    >>> signal.ZerosPolesGain([1, 2], [3, 4], 5)\n    ZerosPolesGainContinuous(\n    array([1, 2]),\n    array([3, 4]),\n    5,\n    dt: None\n    )\n\n    Transfer function: H(z) = 5(z - 1)(z - 2) / (z - 3)(z - 4)\n\n    >>> signal.ZerosPolesGain([1, 2], [3, 4], 5, dt=0.1)\n    ZerosPolesGainDiscrete(\n    array([1, 2]),\n    array([3, 4]),\n    5,\n    dt: 0.1\n    )\n\n    ')
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1138, 0, False)
        # Assigning a type to the variable 'self' (line 1139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ZerosPolesGainDiscrete.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ZerosPolesGainDiscrete' (line 1138)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 0), 'ZerosPolesGainDiscrete', ZerosPolesGainDiscrete)

@norecursion
def _atleast_2d_or_none(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_atleast_2d_or_none'
    module_type_store = module_type_store.open_function_context('_atleast_2d_or_none', 1205, 0, False)
    
    # Passed parameters checking function
    _atleast_2d_or_none.stypy_localization = localization
    _atleast_2d_or_none.stypy_type_of_self = None
    _atleast_2d_or_none.stypy_type_store = module_type_store
    _atleast_2d_or_none.stypy_function_name = '_atleast_2d_or_none'
    _atleast_2d_or_none.stypy_param_names_list = ['arg']
    _atleast_2d_or_none.stypy_varargs_param_name = None
    _atleast_2d_or_none.stypy_kwargs_param_name = None
    _atleast_2d_or_none.stypy_call_defaults = defaults
    _atleast_2d_or_none.stypy_call_varargs = varargs
    _atleast_2d_or_none.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_atleast_2d_or_none', ['arg'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_atleast_2d_or_none', localization, ['arg'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_atleast_2d_or_none(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 1206)
    # Getting the type of 'arg' (line 1206)
    arg_268210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 4), 'arg')
    # Getting the type of 'None' (line 1206)
    None_268211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 18), 'None')
    
    (may_be_268212, more_types_in_union_268213) = may_not_be_none(arg_268210, None_268211)

    if may_be_268212:

        if more_types_in_union_268213:
            # Runtime conditional SSA (line 1206)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to atleast_2d(...): (line 1207)
        # Processing the call arguments (line 1207)
        # Getting the type of 'arg' (line 1207)
        arg_268215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 26), 'arg', False)
        # Processing the call keyword arguments (line 1207)
        kwargs_268216 = {}
        # Getting the type of 'atleast_2d' (line 1207)
        atleast_2d_268214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 15), 'atleast_2d', False)
        # Calling atleast_2d(args, kwargs) (line 1207)
        atleast_2d_call_result_268217 = invoke(stypy.reporting.localization.Localization(__file__, 1207, 15), atleast_2d_268214, *[arg_268215], **kwargs_268216)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 8), 'stypy_return_type', atleast_2d_call_result_268217)

        if more_types_in_union_268213:
            # SSA join for if statement (line 1206)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of '_atleast_2d_or_none(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_atleast_2d_or_none' in the type store
    # Getting the type of 'stypy_return_type' (line 1205)
    stypy_return_type_268218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_268218)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_atleast_2d_or_none'
    return stypy_return_type_268218

# Assigning a type to the variable '_atleast_2d_or_none' (line 1205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 0), '_atleast_2d_or_none', _atleast_2d_or_none)
# Declaration of the 'StateSpace' class
# Getting the type of 'LinearTimeInvariant' (line 1210)
LinearTimeInvariant_268219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 17), 'LinearTimeInvariant')

class StateSpace(LinearTimeInvariant_268219, ):
    str_268220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, (-1)), 'str', '\n    Linear Time Invariant system in state-space form.\n\n    Represents the system as the continuous-time, first order differential\n    equation :math:`\\dot{x} = A x + B u` or the discrete-time difference\n    equation :math:`x[k+1] = A x[k] + B u[k]`. `StateSpace` systems\n    inherit additional functionality from the `lti`, respectively the `dlti`\n    classes, depending on which system representation is used.\n\n    Parameters\n    ----------\n    *system: arguments\n        The `StateSpace` class can be instantiated with 1 or 3 arguments.\n        The following gives the number of input arguments and their\n        interpretation:\n\n            * 1: `lti` or `dlti` system: (`StateSpace`, `TransferFunction` or\n              `ZerosPolesGain`)\n            * 4: array_like: (A, B, C, D)\n    dt: float, optional\n        Sampling time [s] of the discrete-time systems. Defaults to `None`\n        (continuous-time). Must be specified as a keyword argument, for\n        example, ``dt=0.1``.\n\n    See Also\n    --------\n    TransferFunction, ZerosPolesGain, lti, dlti\n    ss2zpk, ss2tf, zpk2sos\n\n    Notes\n    -----\n    Changing the value of properties that are not part of the\n    `StateSpace` system representation (such as `zeros` or `poles`) is very\n    inefficient and may lead to numerical inaccuracies.  It is better to\n    convert to the specific system representation first. For example, call\n    ``sys = sys.to_zpk()`` before accessing/changing the zeros, poles or gain.\n\n    Examples\n    --------\n    >>> from scipy import signal\n\n    >>> a = np.array([[0, 1], [0, 0]])\n    >>> b = np.array([[0], [1]])\n    >>> c = np.array([[1, 0]])\n    >>> d = np.array([[0]])\n\n    >>> sys = signal.StateSpace(a, b, c, d)\n    >>> print(sys)\n    StateSpaceContinuous(\n    array([[0, 1],\n           [0, 0]]),\n    array([[0],\n           [1]]),\n    array([[1, 0]]),\n    array([[0]]),\n    dt: None\n    )\n\n    >>> sys.to_discrete(0.1)\n    StateSpaceDiscrete(\n    array([[ 1. ,  0.1],\n           [ 0. ,  1. ]]),\n    array([[ 0.005],\n           [ 0.1  ]]),\n    array([[1, 0]]),\n    array([[0]]),\n    dt: 0.1\n    )\n\n    >>> a = np.array([[1, 0.1], [0, 1]])\n    >>> b = np.array([[0.005], [0.1]])\n\n    >>> signal.StateSpace(a, b, c, d, dt=0.1)\n    StateSpaceDiscrete(\n    array([[ 1. ,  0.1],\n           [ 0. ,  1. ]]),\n    array([[ 0.005],\n           [ 0.1  ]]),\n    array([[1, 0]]),\n    array([[0]]),\n    dt: 0.1\n    )\n\n    ')

    @norecursion
    def __new__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__new__'
        module_type_store = module_type_store.open_function_context('__new__', 1295, 4, False)
        # Assigning a type to the variable 'self' (line 1296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.__new__.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.__new__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.__new__.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.__new__.__dict__.__setitem__('stypy_function_name', 'StateSpace.__new__')
        StateSpace.__new__.__dict__.__setitem__('stypy_param_names_list', [])
        StateSpace.__new__.__dict__.__setitem__('stypy_varargs_param_name', 'system')
        StateSpace.__new__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        StateSpace.__new__.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.__new__.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.__new__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.__new__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.__new__', [], 'system', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__new__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__new__(...)' code ##################

        str_268221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1296, 8), 'str', 'Create new StateSpace object and settle inheritance.')
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 1298)
        # Processing the call arguments (line 1298)
        # Getting the type of 'system' (line 1298)
        system_268223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 15), 'system', False)
        # Processing the call keyword arguments (line 1298)
        kwargs_268224 = {}
        # Getting the type of 'len' (line 1298)
        len_268222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 11), 'len', False)
        # Calling len(args, kwargs) (line 1298)
        len_call_result_268225 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 11), len_268222, *[system_268223], **kwargs_268224)
        
        int_268226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 26), 'int')
        # Applying the binary operator '==' (line 1298)
        result_eq_268227 = python_operator(stypy.reporting.localization.Localization(__file__, 1298, 11), '==', len_call_result_268225, int_268226)
        
        
        # Call to isinstance(...): (line 1298)
        # Processing the call arguments (line 1298)
        
        # Obtaining the type of the subscript
        int_268229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 50), 'int')
        # Getting the type of 'system' (line 1298)
        system_268230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 43), 'system', False)
        # Obtaining the member '__getitem__' of a type (line 1298)
        getitem___268231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 43), system_268230, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1298)
        subscript_call_result_268232 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 43), getitem___268231, int_268229)
        
        # Getting the type of 'LinearTimeInvariant' (line 1298)
        LinearTimeInvariant_268233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 54), 'LinearTimeInvariant', False)
        # Processing the call keyword arguments (line 1298)
        kwargs_268234 = {}
        # Getting the type of 'isinstance' (line 1298)
        isinstance_268228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 32), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1298)
        isinstance_call_result_268235 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 32), isinstance_268228, *[subscript_call_result_268232, LinearTimeInvariant_268233], **kwargs_268234)
        
        # Applying the binary operator 'and' (line 1298)
        result_and_keyword_268236 = python_operator(stypy.reporting.localization.Localization(__file__, 1298, 11), 'and', result_eq_268227, isinstance_call_result_268235)
        
        # Testing the type of an if condition (line 1298)
        if_condition_268237 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1298, 8), result_and_keyword_268236)
        # Assigning a type to the variable 'if_condition_268237' (line 1298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 8), 'if_condition_268237', if_condition_268237)
        # SSA begins for if statement (line 1298)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to to_ss(...): (line 1299)
        # Processing the call keyword arguments (line 1299)
        kwargs_268243 = {}
        
        # Obtaining the type of the subscript
        int_268238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 26), 'int')
        # Getting the type of 'system' (line 1299)
        system_268239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 19), 'system', False)
        # Obtaining the member '__getitem__' of a type (line 1299)
        getitem___268240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 19), system_268239, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1299)
        subscript_call_result_268241 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 19), getitem___268240, int_268238)
        
        # Obtaining the member 'to_ss' of a type (line 1299)
        to_ss_268242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 19), subscript_call_result_268241, 'to_ss')
        # Calling to_ss(args, kwargs) (line 1299)
        to_ss_call_result_268244 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 19), to_ss_268242, *[], **kwargs_268243)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 12), 'stypy_return_type', to_ss_call_result_268244)
        # SSA join for if statement (line 1298)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'cls' (line 1302)
        cls_268245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 11), 'cls')
        # Getting the type of 'StateSpace' (line 1302)
        StateSpace_268246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 18), 'StateSpace')
        # Applying the binary operator 'is' (line 1302)
        result_is__268247 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 11), 'is', cls_268245, StateSpace_268246)
        
        # Testing the type of an if condition (line 1302)
        if_condition_268248 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1302, 8), result_is__268247)
        # Assigning a type to the variable 'if_condition_268248' (line 1302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 8), 'if_condition_268248', if_condition_268248)
        # SSA begins for if statement (line 1302)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 1303)
        
        # Call to get(...): (line 1303)
        # Processing the call arguments (line 1303)
        str_268251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 26), 'str', 'dt')
        # Processing the call keyword arguments (line 1303)
        kwargs_268252 = {}
        # Getting the type of 'kwargs' (line 1303)
        kwargs_268249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 15), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 1303)
        get_268250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1303, 15), kwargs_268249, 'get')
        # Calling get(args, kwargs) (line 1303)
        get_call_result_268253 = invoke(stypy.reporting.localization.Localization(__file__, 1303, 15), get_268250, *[str_268251], **kwargs_268252)
        
        # Getting the type of 'None' (line 1303)
        None_268254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 35), 'None')
        
        (may_be_268255, more_types_in_union_268256) = may_be_none(get_call_result_268253, None_268254)

        if may_be_268255:

            if more_types_in_union_268256:
                # Runtime conditional SSA (line 1303)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to __new__(...): (line 1304)
            # Processing the call arguments (line 1304)
            # Getting the type of 'StateSpaceContinuous' (line 1304)
            StateSpaceContinuous_268259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 52), 'StateSpaceContinuous', False)
            # Getting the type of 'system' (line 1305)
            system_268260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 53), 'system', False)
            # Processing the call keyword arguments (line 1304)
            # Getting the type of 'kwargs' (line 1305)
            kwargs_268261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 63), 'kwargs', False)
            kwargs_268262 = {'kwargs_268261': kwargs_268261}
            # Getting the type of 'StateSpaceContinuous' (line 1304)
            StateSpaceContinuous_268257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 23), 'StateSpaceContinuous', False)
            # Obtaining the member '__new__' of a type (line 1304)
            new___268258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 23), StateSpaceContinuous_268257, '__new__')
            # Calling __new__(args, kwargs) (line 1304)
            new___call_result_268263 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 23), new___268258, *[StateSpaceContinuous_268259, system_268260], **kwargs_268262)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1304)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 16), 'stypy_return_type', new___call_result_268263)

            if more_types_in_union_268256:
                # Runtime conditional SSA for else branch (line 1303)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_268255) or more_types_in_union_268256):
            
            # Call to __new__(...): (line 1307)
            # Processing the call arguments (line 1307)
            # Getting the type of 'StateSpaceDiscrete' (line 1307)
            StateSpaceDiscrete_268266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 50), 'StateSpaceDiscrete', False)
            # Getting the type of 'system' (line 1308)
            system_268267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 51), 'system', False)
            # Processing the call keyword arguments (line 1307)
            # Getting the type of 'kwargs' (line 1308)
            kwargs_268268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 61), 'kwargs', False)
            kwargs_268269 = {'kwargs_268268': kwargs_268268}
            # Getting the type of 'StateSpaceDiscrete' (line 1307)
            StateSpaceDiscrete_268264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 23), 'StateSpaceDiscrete', False)
            # Obtaining the member '__new__' of a type (line 1307)
            new___268265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 23), StateSpaceDiscrete_268264, '__new__')
            # Calling __new__(args, kwargs) (line 1307)
            new___call_result_268270 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 23), new___268265, *[StateSpaceDiscrete_268266, system_268267], **kwargs_268269)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1307)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 16), 'stypy_return_type', new___call_result_268270)

            if (may_be_268255 and more_types_in_union_268256):
                # SSA join for if statement (line 1303)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 1302)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __new__(...): (line 1311)
        # Processing the call arguments (line 1311)
        # Getting the type of 'cls' (line 1311)
        cls_268277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 46), 'cls', False)
        # Processing the call keyword arguments (line 1311)
        kwargs_268278 = {}
        
        # Call to super(...): (line 1311)
        # Processing the call arguments (line 1311)
        # Getting the type of 'StateSpace' (line 1311)
        StateSpace_268272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 21), 'StateSpace', False)
        # Getting the type of 'cls' (line 1311)
        cls_268273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 33), 'cls', False)
        # Processing the call keyword arguments (line 1311)
        kwargs_268274 = {}
        # Getting the type of 'super' (line 1311)
        super_268271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 15), 'super', False)
        # Calling super(args, kwargs) (line 1311)
        super_call_result_268275 = invoke(stypy.reporting.localization.Localization(__file__, 1311, 15), super_268271, *[StateSpace_268272, cls_268273], **kwargs_268274)
        
        # Obtaining the member '__new__' of a type (line 1311)
        new___268276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 15), super_call_result_268275, '__new__')
        # Calling __new__(args, kwargs) (line 1311)
        new___call_result_268279 = invoke(stypy.reporting.localization.Localization(__file__, 1311, 15), new___268276, *[cls_268277], **kwargs_268278)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 8), 'stypy_return_type', new___call_result_268279)
        
        # ################# End of '__new__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__new__' in the type store
        # Getting the type of 'stypy_return_type' (line 1295)
        stypy_return_type_268280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268280)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__new__'
        return stypy_return_type_268280


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1313, 4, False)
        # Assigning a type to the variable 'self' (line 1314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.__init__', [], 'system', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        str_268281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1314, 8), 'str', 'Initialize the state space lti/dlti system.')
        
        
        # Call to isinstance(...): (line 1316)
        # Processing the call arguments (line 1316)
        
        # Obtaining the type of the subscript
        int_268283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1316, 29), 'int')
        # Getting the type of 'system' (line 1316)
        system_268284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 22), 'system', False)
        # Obtaining the member '__getitem__' of a type (line 1316)
        getitem___268285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 22), system_268284, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1316)
        subscript_call_result_268286 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 22), getitem___268285, int_268283)
        
        # Getting the type of 'LinearTimeInvariant' (line 1316)
        LinearTimeInvariant_268287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 33), 'LinearTimeInvariant', False)
        # Processing the call keyword arguments (line 1316)
        kwargs_268288 = {}
        # Getting the type of 'isinstance' (line 1316)
        isinstance_268282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1316)
        isinstance_call_result_268289 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 11), isinstance_268282, *[subscript_call_result_268286, LinearTimeInvariant_268287], **kwargs_268288)
        
        # Testing the type of an if condition (line 1316)
        if_condition_268290 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1316, 8), isinstance_call_result_268289)
        # Assigning a type to the variable 'if_condition_268290' (line 1316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 8), 'if_condition_268290', if_condition_268290)
        # SSA begins for if statement (line 1316)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1316)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 1320)
        # Processing the call keyword arguments (line 1320)
        # Getting the type of 'kwargs' (line 1320)
        kwargs_268297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 43), 'kwargs', False)
        kwargs_268298 = {'kwargs_268297': kwargs_268297}
        
        # Call to super(...): (line 1320)
        # Processing the call arguments (line 1320)
        # Getting the type of 'StateSpace' (line 1320)
        StateSpace_268292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 14), 'StateSpace', False)
        # Getting the type of 'self' (line 1320)
        self_268293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 26), 'self', False)
        # Processing the call keyword arguments (line 1320)
        kwargs_268294 = {}
        # Getting the type of 'super' (line 1320)
        super_268291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 8), 'super', False)
        # Calling super(args, kwargs) (line 1320)
        super_call_result_268295 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 8), super_268291, *[StateSpace_268292, self_268293], **kwargs_268294)
        
        # Obtaining the member '__init__' of a type (line 1320)
        init___268296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 8), super_call_result_268295, '__init__')
        # Calling __init__(args, kwargs) (line 1320)
        init___call_result_268299 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 8), init___268296, *[], **kwargs_268298)
        
        
        # Assigning a Name to a Attribute (line 1322):
        
        # Assigning a Name to a Attribute (line 1322):
        # Getting the type of 'None' (line 1322)
        None_268300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 18), 'None')
        # Getting the type of 'self' (line 1322)
        self_268301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 8), 'self')
        # Setting the type of the member '_A' of a type (line 1322)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1322, 8), self_268301, '_A', None_268300)
        
        # Assigning a Name to a Attribute (line 1323):
        
        # Assigning a Name to a Attribute (line 1323):
        # Getting the type of 'None' (line 1323)
        None_268302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 18), 'None')
        # Getting the type of 'self' (line 1323)
        self_268303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 8), 'self')
        # Setting the type of the member '_B' of a type (line 1323)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1323, 8), self_268303, '_B', None_268302)
        
        # Assigning a Name to a Attribute (line 1324):
        
        # Assigning a Name to a Attribute (line 1324):
        # Getting the type of 'None' (line 1324)
        None_268304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 18), 'None')
        # Getting the type of 'self' (line 1324)
        self_268305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 8), 'self')
        # Setting the type of the member '_C' of a type (line 1324)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1324, 8), self_268305, '_C', None_268304)
        
        # Assigning a Name to a Attribute (line 1325):
        
        # Assigning a Name to a Attribute (line 1325):
        # Getting the type of 'None' (line 1325)
        None_268306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 18), 'None')
        # Getting the type of 'self' (line 1325)
        self_268307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 8), 'self')
        # Setting the type of the member '_D' of a type (line 1325)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 8), self_268307, '_D', None_268306)
        
        # Assigning a Call to a Tuple (line 1327):
        
        # Assigning a Subscript to a Name (line 1327):
        
        # Obtaining the type of the subscript
        int_268308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 8), 'int')
        
        # Call to abcd_normalize(...): (line 1327)
        # Getting the type of 'system' (line 1327)
        system_268310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 57), 'system', False)
        # Processing the call keyword arguments (line 1327)
        kwargs_268311 = {}
        # Getting the type of 'abcd_normalize' (line 1327)
        abcd_normalize_268309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 41), 'abcd_normalize', False)
        # Calling abcd_normalize(args, kwargs) (line 1327)
        abcd_normalize_call_result_268312 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 41), abcd_normalize_268309, *[system_268310], **kwargs_268311)
        
        # Obtaining the member '__getitem__' of a type (line 1327)
        getitem___268313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 8), abcd_normalize_call_result_268312, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1327)
        subscript_call_result_268314 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 8), getitem___268313, int_268308)
        
        # Assigning a type to the variable 'tuple_var_assignment_267114' (line 1327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'tuple_var_assignment_267114', subscript_call_result_268314)
        
        # Assigning a Subscript to a Name (line 1327):
        
        # Obtaining the type of the subscript
        int_268315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 8), 'int')
        
        # Call to abcd_normalize(...): (line 1327)
        # Getting the type of 'system' (line 1327)
        system_268317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 57), 'system', False)
        # Processing the call keyword arguments (line 1327)
        kwargs_268318 = {}
        # Getting the type of 'abcd_normalize' (line 1327)
        abcd_normalize_268316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 41), 'abcd_normalize', False)
        # Calling abcd_normalize(args, kwargs) (line 1327)
        abcd_normalize_call_result_268319 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 41), abcd_normalize_268316, *[system_268317], **kwargs_268318)
        
        # Obtaining the member '__getitem__' of a type (line 1327)
        getitem___268320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 8), abcd_normalize_call_result_268319, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1327)
        subscript_call_result_268321 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 8), getitem___268320, int_268315)
        
        # Assigning a type to the variable 'tuple_var_assignment_267115' (line 1327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'tuple_var_assignment_267115', subscript_call_result_268321)
        
        # Assigning a Subscript to a Name (line 1327):
        
        # Obtaining the type of the subscript
        int_268322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 8), 'int')
        
        # Call to abcd_normalize(...): (line 1327)
        # Getting the type of 'system' (line 1327)
        system_268324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 57), 'system', False)
        # Processing the call keyword arguments (line 1327)
        kwargs_268325 = {}
        # Getting the type of 'abcd_normalize' (line 1327)
        abcd_normalize_268323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 41), 'abcd_normalize', False)
        # Calling abcd_normalize(args, kwargs) (line 1327)
        abcd_normalize_call_result_268326 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 41), abcd_normalize_268323, *[system_268324], **kwargs_268325)
        
        # Obtaining the member '__getitem__' of a type (line 1327)
        getitem___268327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 8), abcd_normalize_call_result_268326, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1327)
        subscript_call_result_268328 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 8), getitem___268327, int_268322)
        
        # Assigning a type to the variable 'tuple_var_assignment_267116' (line 1327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'tuple_var_assignment_267116', subscript_call_result_268328)
        
        # Assigning a Subscript to a Name (line 1327):
        
        # Obtaining the type of the subscript
        int_268329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1327, 8), 'int')
        
        # Call to abcd_normalize(...): (line 1327)
        # Getting the type of 'system' (line 1327)
        system_268331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 57), 'system', False)
        # Processing the call keyword arguments (line 1327)
        kwargs_268332 = {}
        # Getting the type of 'abcd_normalize' (line 1327)
        abcd_normalize_268330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 41), 'abcd_normalize', False)
        # Calling abcd_normalize(args, kwargs) (line 1327)
        abcd_normalize_call_result_268333 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 41), abcd_normalize_268330, *[system_268331], **kwargs_268332)
        
        # Obtaining the member '__getitem__' of a type (line 1327)
        getitem___268334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 8), abcd_normalize_call_result_268333, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1327)
        subscript_call_result_268335 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 8), getitem___268334, int_268329)
        
        # Assigning a type to the variable 'tuple_var_assignment_267117' (line 1327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'tuple_var_assignment_267117', subscript_call_result_268335)
        
        # Assigning a Name to a Attribute (line 1327):
        # Getting the type of 'tuple_var_assignment_267114' (line 1327)
        tuple_var_assignment_267114_268336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'tuple_var_assignment_267114')
        # Getting the type of 'self' (line 1327)
        self_268337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'self')
        # Setting the type of the member 'A' of a type (line 1327)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 8), self_268337, 'A', tuple_var_assignment_267114_268336)
        
        # Assigning a Name to a Attribute (line 1327):
        # Getting the type of 'tuple_var_assignment_267115' (line 1327)
        tuple_var_assignment_267115_268338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'tuple_var_assignment_267115')
        # Getting the type of 'self' (line 1327)
        self_268339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 16), 'self')
        # Setting the type of the member 'B' of a type (line 1327)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 16), self_268339, 'B', tuple_var_assignment_267115_268338)
        
        # Assigning a Name to a Attribute (line 1327):
        # Getting the type of 'tuple_var_assignment_267116' (line 1327)
        tuple_var_assignment_267116_268340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'tuple_var_assignment_267116')
        # Getting the type of 'self' (line 1327)
        self_268341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 24), 'self')
        # Setting the type of the member 'C' of a type (line 1327)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 24), self_268341, 'C', tuple_var_assignment_267116_268340)
        
        # Assigning a Name to a Attribute (line 1327):
        # Getting the type of 'tuple_var_assignment_267117' (line 1327)
        tuple_var_assignment_267117_268342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'tuple_var_assignment_267117')
        # Getting the type of 'self' (line 1327)
        self_268343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 32), 'self')
        # Setting the type of the member 'D' of a type (line 1327)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 32), self_268343, 'D', tuple_var_assignment_267117_268342)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def stypy__repr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__repr__'
        module_type_store = module_type_store.open_function_context('__repr__', 1329, 4, False)
        # Assigning a type to the variable 'self' (line 1330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1330, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.stypy__repr__.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.stypy__repr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.stypy__repr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.stypy__repr__.__dict__.__setitem__('stypy_function_name', 'StateSpace.stypy__repr__')
        StateSpace.stypy__repr__.__dict__.__setitem__('stypy_param_names_list', [])
        StateSpace.stypy__repr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.stypy__repr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpace.stypy__repr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.stypy__repr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.stypy__repr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.stypy__repr__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.stypy__repr__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__repr__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__repr__(...)' code ##################

        str_268344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1330, 8), 'str', 'Return representation of the `StateSpace` system.')
        
        # Call to format(...): (line 1331)
        # Processing the call arguments (line 1331)
        # Getting the type of 'self' (line 1332)
        self_268347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 12), 'self', False)
        # Obtaining the member '__class__' of a type (line 1332)
        class___268348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 12), self_268347, '__class__')
        # Obtaining the member '__name__' of a type (line 1332)
        name___268349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 12), class___268348, '__name__')
        
        # Call to repr(...): (line 1333)
        # Processing the call arguments (line 1333)
        # Getting the type of 'self' (line 1333)
        self_268351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 17), 'self', False)
        # Obtaining the member 'A' of a type (line 1333)
        A_268352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1333, 17), self_268351, 'A')
        # Processing the call keyword arguments (line 1333)
        kwargs_268353 = {}
        # Getting the type of 'repr' (line 1333)
        repr_268350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 1333)
        repr_call_result_268354 = invoke(stypy.reporting.localization.Localization(__file__, 1333, 12), repr_268350, *[A_268352], **kwargs_268353)
        
        
        # Call to repr(...): (line 1334)
        # Processing the call arguments (line 1334)
        # Getting the type of 'self' (line 1334)
        self_268356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 17), 'self', False)
        # Obtaining the member 'B' of a type (line 1334)
        B_268357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 17), self_268356, 'B')
        # Processing the call keyword arguments (line 1334)
        kwargs_268358 = {}
        # Getting the type of 'repr' (line 1334)
        repr_268355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 1334)
        repr_call_result_268359 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 12), repr_268355, *[B_268357], **kwargs_268358)
        
        
        # Call to repr(...): (line 1335)
        # Processing the call arguments (line 1335)
        # Getting the type of 'self' (line 1335)
        self_268361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 17), 'self', False)
        # Obtaining the member 'C' of a type (line 1335)
        C_268362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 17), self_268361, 'C')
        # Processing the call keyword arguments (line 1335)
        kwargs_268363 = {}
        # Getting the type of 'repr' (line 1335)
        repr_268360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 1335)
        repr_call_result_268364 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 12), repr_268360, *[C_268362], **kwargs_268363)
        
        
        # Call to repr(...): (line 1336)
        # Processing the call arguments (line 1336)
        # Getting the type of 'self' (line 1336)
        self_268366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 17), 'self', False)
        # Obtaining the member 'D' of a type (line 1336)
        D_268367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 17), self_268366, 'D')
        # Processing the call keyword arguments (line 1336)
        kwargs_268368 = {}
        # Getting the type of 'repr' (line 1336)
        repr_268365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 1336)
        repr_call_result_268369 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 12), repr_268365, *[D_268367], **kwargs_268368)
        
        
        # Call to repr(...): (line 1337)
        # Processing the call arguments (line 1337)
        # Getting the type of 'self' (line 1337)
        self_268371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 17), 'self', False)
        # Obtaining the member 'dt' of a type (line 1337)
        dt_268372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 17), self_268371, 'dt')
        # Processing the call keyword arguments (line 1337)
        kwargs_268373 = {}
        # Getting the type of 'repr' (line 1337)
        repr_268370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 12), 'repr', False)
        # Calling repr(args, kwargs) (line 1337)
        repr_call_result_268374 = invoke(stypy.reporting.localization.Localization(__file__, 1337, 12), repr_268370, *[dt_268372], **kwargs_268373)
        
        # Processing the call keyword arguments (line 1331)
        kwargs_268375 = {}
        str_268345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1331, 15), 'str', '{0}(\n{1},\n{2},\n{3},\n{4},\ndt: {5}\n)')
        # Obtaining the member 'format' of a type (line 1331)
        format_268346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1331, 15), str_268345, 'format')
        # Calling format(args, kwargs) (line 1331)
        format_call_result_268376 = invoke(stypy.reporting.localization.Localization(__file__, 1331, 15), format_268346, *[name___268349, repr_call_result_268354, repr_call_result_268359, repr_call_result_268364, repr_call_result_268369, repr_call_result_268374], **kwargs_268375)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1331, 8), 'stypy_return_type', format_call_result_268376)
        
        # ################# End of '__repr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__repr__' in the type store
        # Getting the type of 'stypy_return_type' (line 1329)
        stypy_return_type_268377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268377)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__repr__'
        return stypy_return_type_268377


    @norecursion
    def A(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'A'
        module_type_store = module_type_store.open_function_context('A', 1340, 4, False)
        # Assigning a type to the variable 'self' (line 1341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.A.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.A.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.A.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.A.__dict__.__setitem__('stypy_function_name', 'StateSpace.A')
        StateSpace.A.__dict__.__setitem__('stypy_param_names_list', [])
        StateSpace.A.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.A.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpace.A.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.A.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.A.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.A.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.A', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'A', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'A(...)' code ##################

        str_268378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, 8), 'str', 'State matrix of the `StateSpace` system.')
        # Getting the type of 'self' (line 1343)
        self_268379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 15), 'self')
        # Obtaining the member '_A' of a type (line 1343)
        _A_268380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 15), self_268379, '_A')
        # Assigning a type to the variable 'stypy_return_type' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'stypy_return_type', _A_268380)
        
        # ################# End of 'A(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'A' in the type store
        # Getting the type of 'stypy_return_type' (line 1340)
        stypy_return_type_268381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268381)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'A'
        return stypy_return_type_268381


    @norecursion
    def A(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'A'
        module_type_store = module_type_store.open_function_context('A', 1345, 4, False)
        # Assigning a type to the variable 'self' (line 1346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.A.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.A.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.A.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.A.__dict__.__setitem__('stypy_function_name', 'StateSpace.A')
        StateSpace.A.__dict__.__setitem__('stypy_param_names_list', ['A'])
        StateSpace.A.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.A.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpace.A.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.A.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.A.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.A.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.A', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'A', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'A(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1347):
        
        # Assigning a Call to a Attribute (line 1347):
        
        # Call to _atleast_2d_or_none(...): (line 1347)
        # Processing the call arguments (line 1347)
        # Getting the type of 'A' (line 1347)
        A_268383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 38), 'A', False)
        # Processing the call keyword arguments (line 1347)
        kwargs_268384 = {}
        # Getting the type of '_atleast_2d_or_none' (line 1347)
        _atleast_2d_or_none_268382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 18), '_atleast_2d_or_none', False)
        # Calling _atleast_2d_or_none(args, kwargs) (line 1347)
        _atleast_2d_or_none_call_result_268385 = invoke(stypy.reporting.localization.Localization(__file__, 1347, 18), _atleast_2d_or_none_268382, *[A_268383], **kwargs_268384)
        
        # Getting the type of 'self' (line 1347)
        self_268386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'self')
        # Setting the type of the member '_A' of a type (line 1347)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 8), self_268386, '_A', _atleast_2d_or_none_call_result_268385)
        
        # ################# End of 'A(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'A' in the type store
        # Getting the type of 'stypy_return_type' (line 1345)
        stypy_return_type_268387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268387)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'A'
        return stypy_return_type_268387


    @norecursion
    def B(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'B'
        module_type_store = module_type_store.open_function_context('B', 1349, 4, False)
        # Assigning a type to the variable 'self' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.B.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.B.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.B.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.B.__dict__.__setitem__('stypy_function_name', 'StateSpace.B')
        StateSpace.B.__dict__.__setitem__('stypy_param_names_list', [])
        StateSpace.B.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.B.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpace.B.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.B.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.B.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.B.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.B', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'B', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'B(...)' code ##################

        str_268388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, 8), 'str', 'Input matrix of the `StateSpace` system.')
        # Getting the type of 'self' (line 1352)
        self_268389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 15), 'self')
        # Obtaining the member '_B' of a type (line 1352)
        _B_268390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 15), self_268389, '_B')
        # Assigning a type to the variable 'stypy_return_type' (line 1352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1352, 8), 'stypy_return_type', _B_268390)
        
        # ################# End of 'B(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'B' in the type store
        # Getting the type of 'stypy_return_type' (line 1349)
        stypy_return_type_268391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268391)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'B'
        return stypy_return_type_268391


    @norecursion
    def B(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'B'
        module_type_store = module_type_store.open_function_context('B', 1354, 4, False)
        # Assigning a type to the variable 'self' (line 1355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1355, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.B.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.B.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.B.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.B.__dict__.__setitem__('stypy_function_name', 'StateSpace.B')
        StateSpace.B.__dict__.__setitem__('stypy_param_names_list', ['B'])
        StateSpace.B.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.B.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpace.B.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.B.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.B.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.B.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.B', ['B'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'B', localization, ['B'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'B(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1356):
        
        # Assigning a Call to a Attribute (line 1356):
        
        # Call to _atleast_2d_or_none(...): (line 1356)
        # Processing the call arguments (line 1356)
        # Getting the type of 'B' (line 1356)
        B_268393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 38), 'B', False)
        # Processing the call keyword arguments (line 1356)
        kwargs_268394 = {}
        # Getting the type of '_atleast_2d_or_none' (line 1356)
        _atleast_2d_or_none_268392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 18), '_atleast_2d_or_none', False)
        # Calling _atleast_2d_or_none(args, kwargs) (line 1356)
        _atleast_2d_or_none_call_result_268395 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 18), _atleast_2d_or_none_268392, *[B_268393], **kwargs_268394)
        
        # Getting the type of 'self' (line 1356)
        self_268396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 8), 'self')
        # Setting the type of the member '_B' of a type (line 1356)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 8), self_268396, '_B', _atleast_2d_or_none_call_result_268395)
        
        # Assigning a Subscript to a Attribute (line 1357):
        
        # Assigning a Subscript to a Attribute (line 1357):
        
        # Obtaining the type of the subscript
        int_268397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1357, 35), 'int')
        # Getting the type of 'self' (line 1357)
        self_268398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 22), 'self')
        # Obtaining the member 'B' of a type (line 1357)
        B_268399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1357, 22), self_268398, 'B')
        # Obtaining the member 'shape' of a type (line 1357)
        shape_268400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1357, 22), B_268399, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1357)
        getitem___268401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1357, 22), shape_268400, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1357)
        subscript_call_result_268402 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 22), getitem___268401, int_268397)
        
        # Getting the type of 'self' (line 1357)
        self_268403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 8), 'self')
        # Setting the type of the member 'inputs' of a type (line 1357)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1357, 8), self_268403, 'inputs', subscript_call_result_268402)
        
        # ################# End of 'B(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'B' in the type store
        # Getting the type of 'stypy_return_type' (line 1354)
        stypy_return_type_268404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268404)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'B'
        return stypy_return_type_268404


    @norecursion
    def C(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'C'
        module_type_store = module_type_store.open_function_context('C', 1359, 4, False)
        # Assigning a type to the variable 'self' (line 1360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.C.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.C.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.C.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.C.__dict__.__setitem__('stypy_function_name', 'StateSpace.C')
        StateSpace.C.__dict__.__setitem__('stypy_param_names_list', [])
        StateSpace.C.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.C.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpace.C.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.C.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.C.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.C.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.C', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'C', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'C(...)' code ##################

        str_268405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 8), 'str', 'Output matrix of the `StateSpace` system.')
        # Getting the type of 'self' (line 1362)
        self_268406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 15), 'self')
        # Obtaining the member '_C' of a type (line 1362)
        _C_268407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 15), self_268406, '_C')
        # Assigning a type to the variable 'stypy_return_type' (line 1362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'stypy_return_type', _C_268407)
        
        # ################# End of 'C(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'C' in the type store
        # Getting the type of 'stypy_return_type' (line 1359)
        stypy_return_type_268408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268408)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'C'
        return stypy_return_type_268408


    @norecursion
    def C(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'C'
        module_type_store = module_type_store.open_function_context('C', 1364, 4, False)
        # Assigning a type to the variable 'self' (line 1365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.C.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.C.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.C.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.C.__dict__.__setitem__('stypy_function_name', 'StateSpace.C')
        StateSpace.C.__dict__.__setitem__('stypy_param_names_list', ['C'])
        StateSpace.C.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.C.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpace.C.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.C.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.C.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.C.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.C', ['C'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'C', localization, ['C'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'C(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1366):
        
        # Assigning a Call to a Attribute (line 1366):
        
        # Call to _atleast_2d_or_none(...): (line 1366)
        # Processing the call arguments (line 1366)
        # Getting the type of 'C' (line 1366)
        C_268410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 38), 'C', False)
        # Processing the call keyword arguments (line 1366)
        kwargs_268411 = {}
        # Getting the type of '_atleast_2d_or_none' (line 1366)
        _atleast_2d_or_none_268409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 18), '_atleast_2d_or_none', False)
        # Calling _atleast_2d_or_none(args, kwargs) (line 1366)
        _atleast_2d_or_none_call_result_268412 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 18), _atleast_2d_or_none_268409, *[C_268410], **kwargs_268411)
        
        # Getting the type of 'self' (line 1366)
        self_268413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 8), 'self')
        # Setting the type of the member '_C' of a type (line 1366)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 8), self_268413, '_C', _atleast_2d_or_none_call_result_268412)
        
        # Assigning a Subscript to a Attribute (line 1367):
        
        # Assigning a Subscript to a Attribute (line 1367):
        
        # Obtaining the type of the subscript
        int_268414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1367, 36), 'int')
        # Getting the type of 'self' (line 1367)
        self_268415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 23), 'self')
        # Obtaining the member 'C' of a type (line 1367)
        C_268416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 23), self_268415, 'C')
        # Obtaining the member 'shape' of a type (line 1367)
        shape_268417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 23), C_268416, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1367)
        getitem___268418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 23), shape_268417, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1367)
        subscript_call_result_268419 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 23), getitem___268418, int_268414)
        
        # Getting the type of 'self' (line 1367)
        self_268420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 8), 'self')
        # Setting the type of the member 'outputs' of a type (line 1367)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 8), self_268420, 'outputs', subscript_call_result_268419)
        
        # ################# End of 'C(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'C' in the type store
        # Getting the type of 'stypy_return_type' (line 1364)
        stypy_return_type_268421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268421)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'C'
        return stypy_return_type_268421


    @norecursion
    def D(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'D'
        module_type_store = module_type_store.open_function_context('D', 1369, 4, False)
        # Assigning a type to the variable 'self' (line 1370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.D.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.D.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.D.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.D.__dict__.__setitem__('stypy_function_name', 'StateSpace.D')
        StateSpace.D.__dict__.__setitem__('stypy_param_names_list', [])
        StateSpace.D.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.D.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpace.D.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.D.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.D.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.D.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.D', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'D', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'D(...)' code ##################

        str_268422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 8), 'str', 'Feedthrough matrix of the `StateSpace` system.')
        # Getting the type of 'self' (line 1372)
        self_268423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 15), 'self')
        # Obtaining the member '_D' of a type (line 1372)
        _D_268424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1372, 15), self_268423, '_D')
        # Assigning a type to the variable 'stypy_return_type' (line 1372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 8), 'stypy_return_type', _D_268424)
        
        # ################# End of 'D(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'D' in the type store
        # Getting the type of 'stypy_return_type' (line 1369)
        stypy_return_type_268425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268425)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'D'
        return stypy_return_type_268425


    @norecursion
    def D(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'D'
        module_type_store = module_type_store.open_function_context('D', 1374, 4, False)
        # Assigning a type to the variable 'self' (line 1375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.D.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.D.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.D.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.D.__dict__.__setitem__('stypy_function_name', 'StateSpace.D')
        StateSpace.D.__dict__.__setitem__('stypy_param_names_list', ['D'])
        StateSpace.D.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.D.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpace.D.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.D.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.D.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.D.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.D', ['D'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'D', localization, ['D'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'D(...)' code ##################

        
        # Assigning a Call to a Attribute (line 1376):
        
        # Assigning a Call to a Attribute (line 1376):
        
        # Call to _atleast_2d_or_none(...): (line 1376)
        # Processing the call arguments (line 1376)
        # Getting the type of 'D' (line 1376)
        D_268427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 38), 'D', False)
        # Processing the call keyword arguments (line 1376)
        kwargs_268428 = {}
        # Getting the type of '_atleast_2d_or_none' (line 1376)
        _atleast_2d_or_none_268426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 18), '_atleast_2d_or_none', False)
        # Calling _atleast_2d_or_none(args, kwargs) (line 1376)
        _atleast_2d_or_none_call_result_268429 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 18), _atleast_2d_or_none_268426, *[D_268427], **kwargs_268428)
        
        # Getting the type of 'self' (line 1376)
        self_268430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 8), 'self')
        # Setting the type of the member '_D' of a type (line 1376)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 8), self_268430, '_D', _atleast_2d_or_none_call_result_268429)
        
        # ################# End of 'D(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'D' in the type store
        # Getting the type of 'stypy_return_type' (line 1374)
        stypy_return_type_268431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268431)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'D'
        return stypy_return_type_268431


    @norecursion
    def _copy(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_copy'
        module_type_store = module_type_store.open_function_context('_copy', 1378, 4, False)
        # Assigning a type to the variable 'self' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace._copy.__dict__.__setitem__('stypy_localization', localization)
        StateSpace._copy.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace._copy.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace._copy.__dict__.__setitem__('stypy_function_name', 'StateSpace._copy')
        StateSpace._copy.__dict__.__setitem__('stypy_param_names_list', ['system'])
        StateSpace._copy.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace._copy.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpace._copy.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace._copy.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace._copy.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace._copy.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace._copy', ['system'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_copy', localization, ['system'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_copy(...)' code ##################

        str_268432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1387, (-1)), 'str', '\n        Copy the parameters of another `StateSpace` system.\n\n        Parameters\n        ----------\n        system : instance of `StateSpace`\n            The state-space system that is to be copied\n\n        ')
        
        # Assigning a Attribute to a Attribute (line 1388):
        
        # Assigning a Attribute to a Attribute (line 1388):
        # Getting the type of 'system' (line 1388)
        system_268433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 17), 'system')
        # Obtaining the member 'A' of a type (line 1388)
        A_268434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 17), system_268433, 'A')
        # Getting the type of 'self' (line 1388)
        self_268435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 8), 'self')
        # Setting the type of the member 'A' of a type (line 1388)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 8), self_268435, 'A', A_268434)
        
        # Assigning a Attribute to a Attribute (line 1389):
        
        # Assigning a Attribute to a Attribute (line 1389):
        # Getting the type of 'system' (line 1389)
        system_268436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 17), 'system')
        # Obtaining the member 'B' of a type (line 1389)
        B_268437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 17), system_268436, 'B')
        # Getting the type of 'self' (line 1389)
        self_268438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 8), 'self')
        # Setting the type of the member 'B' of a type (line 1389)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 8), self_268438, 'B', B_268437)
        
        # Assigning a Attribute to a Attribute (line 1390):
        
        # Assigning a Attribute to a Attribute (line 1390):
        # Getting the type of 'system' (line 1390)
        system_268439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 17), 'system')
        # Obtaining the member 'C' of a type (line 1390)
        C_268440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1390, 17), system_268439, 'C')
        # Getting the type of 'self' (line 1390)
        self_268441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 8), 'self')
        # Setting the type of the member 'C' of a type (line 1390)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1390, 8), self_268441, 'C', C_268440)
        
        # Assigning a Attribute to a Attribute (line 1391):
        
        # Assigning a Attribute to a Attribute (line 1391):
        # Getting the type of 'system' (line 1391)
        system_268442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 17), 'system')
        # Obtaining the member 'D' of a type (line 1391)
        D_268443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1391, 17), system_268442, 'D')
        # Getting the type of 'self' (line 1391)
        self_268444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 8), 'self')
        # Setting the type of the member 'D' of a type (line 1391)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1391, 8), self_268444, 'D', D_268443)
        
        # ################# End of '_copy(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_copy' in the type store
        # Getting the type of 'stypy_return_type' (line 1378)
        stypy_return_type_268445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268445)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_copy'
        return stypy_return_type_268445


    @norecursion
    def to_tf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'to_tf'
        module_type_store = module_type_store.open_function_context('to_tf', 1393, 4, False)
        # Assigning a type to the variable 'self' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.to_tf.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.to_tf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.to_tf.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.to_tf.__dict__.__setitem__('stypy_function_name', 'StateSpace.to_tf')
        StateSpace.to_tf.__dict__.__setitem__('stypy_param_names_list', [])
        StateSpace.to_tf.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.to_tf.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        StateSpace.to_tf.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.to_tf.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.to_tf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.to_tf.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.to_tf', [], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_tf', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_tf(...)' code ##################

        str_268446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, (-1)), 'str', '\n        Convert system representation to `TransferFunction`.\n\n        Parameters\n        ----------\n        kwargs : dict, optional\n            Additional keywords passed to `ss2zpk`\n\n        Returns\n        -------\n        sys : instance of `TransferFunction`\n            Transfer function of the current system\n\n        ')
        
        # Call to TransferFunction(...): (line 1408)
        
        # Call to ss2tf(...): (line 1408)
        # Processing the call arguments (line 1408)
        # Getting the type of 'self' (line 1408)
        self_268449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 39), 'self', False)
        # Obtaining the member '_A' of a type (line 1408)
        _A_268450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 39), self_268449, '_A')
        # Getting the type of 'self' (line 1408)
        self_268451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 48), 'self', False)
        # Obtaining the member '_B' of a type (line 1408)
        _B_268452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 48), self_268451, '_B')
        # Getting the type of 'self' (line 1408)
        self_268453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 57), 'self', False)
        # Obtaining the member '_C' of a type (line 1408)
        _C_268454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 57), self_268453, '_C')
        # Getting the type of 'self' (line 1408)
        self_268455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 66), 'self', False)
        # Obtaining the member '_D' of a type (line 1408)
        _D_268456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 66), self_268455, '_D')
        # Processing the call keyword arguments (line 1408)
        # Getting the type of 'kwargs' (line 1409)
        kwargs_268457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 41), 'kwargs', False)
        kwargs_268458 = {'kwargs_268457': kwargs_268457}
        # Getting the type of 'ss2tf' (line 1408)
        ss2tf_268448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 33), 'ss2tf', False)
        # Calling ss2tf(args, kwargs) (line 1408)
        ss2tf_call_result_268459 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 33), ss2tf_268448, *[_A_268450, _B_268452, _C_268454, _D_268456], **kwargs_268458)
        
        # Processing the call keyword arguments (line 1408)
        # Getting the type of 'self' (line 1409)
        self_268460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 52), 'self', False)
        # Obtaining the member '_dt_dict' of a type (line 1409)
        _dt_dict_268461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 52), self_268460, '_dt_dict')
        kwargs_268462 = {'_dt_dict_268461': _dt_dict_268461}
        # Getting the type of 'TransferFunction' (line 1408)
        TransferFunction_268447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 15), 'TransferFunction', False)
        # Calling TransferFunction(args, kwargs) (line 1408)
        TransferFunction_call_result_268463 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 15), TransferFunction_268447, *[ss2tf_call_result_268459], **kwargs_268462)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 8), 'stypy_return_type', TransferFunction_call_result_268463)
        
        # ################# End of 'to_tf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_tf' in the type store
        # Getting the type of 'stypy_return_type' (line 1393)
        stypy_return_type_268464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268464)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_tf'
        return stypy_return_type_268464


    @norecursion
    def to_zpk(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'to_zpk'
        module_type_store = module_type_store.open_function_context('to_zpk', 1411, 4, False)
        # Assigning a type to the variable 'self' (line 1412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.to_zpk.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.to_zpk.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.to_zpk.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.to_zpk.__dict__.__setitem__('stypy_function_name', 'StateSpace.to_zpk')
        StateSpace.to_zpk.__dict__.__setitem__('stypy_param_names_list', [])
        StateSpace.to_zpk.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.to_zpk.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        StateSpace.to_zpk.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.to_zpk.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.to_zpk.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.to_zpk.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.to_zpk', [], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_zpk', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_zpk(...)' code ##################

        str_268465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, (-1)), 'str', '\n        Convert system representation to `ZerosPolesGain`.\n\n        Parameters\n        ----------\n        kwargs : dict, optional\n            Additional keywords passed to `ss2zpk`\n\n        Returns\n        -------\n        sys : instance of `ZerosPolesGain`\n            Zeros, poles, gain representation of the current system\n\n        ')
        
        # Call to ZerosPolesGain(...): (line 1426)
        
        # Call to ss2zpk(...): (line 1426)
        # Processing the call arguments (line 1426)
        # Getting the type of 'self' (line 1426)
        self_268468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 38), 'self', False)
        # Obtaining the member '_A' of a type (line 1426)
        _A_268469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 38), self_268468, '_A')
        # Getting the type of 'self' (line 1426)
        self_268470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 47), 'self', False)
        # Obtaining the member '_B' of a type (line 1426)
        _B_268471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 47), self_268470, '_B')
        # Getting the type of 'self' (line 1426)
        self_268472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 56), 'self', False)
        # Obtaining the member '_C' of a type (line 1426)
        _C_268473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 56), self_268472, '_C')
        # Getting the type of 'self' (line 1426)
        self_268474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 65), 'self', False)
        # Obtaining the member '_D' of a type (line 1426)
        _D_268475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 65), self_268474, '_D')
        # Processing the call keyword arguments (line 1426)
        # Getting the type of 'kwargs' (line 1427)
        kwargs_268476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 40), 'kwargs', False)
        kwargs_268477 = {'kwargs_268476': kwargs_268476}
        # Getting the type of 'ss2zpk' (line 1426)
        ss2zpk_268467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 31), 'ss2zpk', False)
        # Calling ss2zpk(args, kwargs) (line 1426)
        ss2zpk_call_result_268478 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 31), ss2zpk_268467, *[_A_268469, _B_268471, _C_268473, _D_268475], **kwargs_268477)
        
        # Processing the call keyword arguments (line 1426)
        # Getting the type of 'self' (line 1427)
        self_268479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 51), 'self', False)
        # Obtaining the member '_dt_dict' of a type (line 1427)
        _dt_dict_268480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1427, 51), self_268479, '_dt_dict')
        kwargs_268481 = {'_dt_dict_268480': _dt_dict_268480}
        # Getting the type of 'ZerosPolesGain' (line 1426)
        ZerosPolesGain_268466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 15), 'ZerosPolesGain', False)
        # Calling ZerosPolesGain(args, kwargs) (line 1426)
        ZerosPolesGain_call_result_268482 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 15), ZerosPolesGain_268466, *[ss2zpk_call_result_268478], **kwargs_268481)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'stypy_return_type', ZerosPolesGain_call_result_268482)
        
        # ################# End of 'to_zpk(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_zpk' in the type store
        # Getting the type of 'stypy_return_type' (line 1411)
        stypy_return_type_268483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268483)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_zpk'
        return stypy_return_type_268483


    @norecursion
    def to_ss(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'to_ss'
        module_type_store = module_type_store.open_function_context('to_ss', 1429, 4, False)
        # Assigning a type to the variable 'self' (line 1430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1430, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpace.to_ss.__dict__.__setitem__('stypy_localization', localization)
        StateSpace.to_ss.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpace.to_ss.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpace.to_ss.__dict__.__setitem__('stypy_function_name', 'StateSpace.to_ss')
        StateSpace.to_ss.__dict__.__setitem__('stypy_param_names_list', [])
        StateSpace.to_ss.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpace.to_ss.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpace.to_ss.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpace.to_ss.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpace.to_ss.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpace.to_ss.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpace.to_ss', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_ss', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_ss(...)' code ##################

        str_268484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1438, (-1)), 'str', '\n        Return a copy of the current `StateSpace` system.\n\n        Returns\n        -------\n        sys : instance of `StateSpace`\n            The current system (copy)\n\n        ')
        
        # Call to deepcopy(...): (line 1439)
        # Processing the call arguments (line 1439)
        # Getting the type of 'self' (line 1439)
        self_268487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 29), 'self', False)
        # Processing the call keyword arguments (line 1439)
        kwargs_268488 = {}
        # Getting the type of 'copy' (line 1439)
        copy_268485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 15), 'copy', False)
        # Obtaining the member 'deepcopy' of a type (line 1439)
        deepcopy_268486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 15), copy_268485, 'deepcopy')
        # Calling deepcopy(args, kwargs) (line 1439)
        deepcopy_call_result_268489 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 15), deepcopy_268486, *[self_268487], **kwargs_268488)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 8), 'stypy_return_type', deepcopy_call_result_268489)
        
        # ################# End of 'to_ss(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_ss' in the type store
        # Getting the type of 'stypy_return_type' (line 1429)
        stypy_return_type_268490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268490)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_ss'
        return stypy_return_type_268490


# Assigning a type to the variable 'StateSpace' (line 1210)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 0), 'StateSpace', StateSpace)
# Declaration of the 'StateSpaceContinuous' class
# Getting the type of 'StateSpace' (line 1442)
StateSpace_268491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 27), 'StateSpace')
# Getting the type of 'lti' (line 1442)
lti_268492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 39), 'lti')

class StateSpaceContinuous(StateSpace_268491, lti_268492, ):
    str_268493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1496, (-1)), 'str', '\n    Continuous-time Linear Time Invariant system in state-space form.\n\n    Represents the system as the continuous-time, first order differential\n    equation :math:`\\dot{x} = A x + B u`.\n    Continuous-time `StateSpace` systems inherit additional functionality\n    from the `lti` class.\n\n    Parameters\n    ----------\n    *system: arguments\n        The `StateSpace` class can be instantiated with 1 or 3 arguments.\n        The following gives the number of input arguments and their\n        interpretation:\n\n            * 1: `lti` system: (`StateSpace`, `TransferFunction` or\n              `ZerosPolesGain`)\n            * 4: array_like: (A, B, C, D)\n\n    See Also\n    --------\n    TransferFunction, ZerosPolesGain, lti\n    ss2zpk, ss2tf, zpk2sos\n\n    Notes\n    -----\n    Changing the value of properties that are not part of the\n    `StateSpace` system representation (such as `zeros` or `poles`) is very\n    inefficient and may lead to numerical inaccuracies.  It is better to\n    convert to the specific system representation first. For example, call\n    ``sys = sys.to_zpk()`` before accessing/changing the zeros, poles or gain.\n\n    Examples\n    --------\n    >>> from scipy import signal\n\n    >>> a = np.array([[0, 1], [0, 0]])\n    >>> b = np.array([[0], [1]])\n    >>> c = np.array([[1, 0]])\n    >>> d = np.array([[0]])\n\n    >>> sys = signal.StateSpace(a, b, c, d)\n    >>> print(sys)\n    StateSpaceContinuous(\n    array([[0, 1],\n           [0, 0]]),\n    array([[0],\n           [1]]),\n    array([[1, 0]]),\n    array([[0]]),\n    dt: None\n    )\n\n    ')

    @norecursion
    def to_discrete(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_268494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1497, 37), 'str', 'zoh')
        # Getting the type of 'None' (line 1497)
        None_268495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 50), 'None')
        defaults = [str_268494, None_268495]
        # Create a new context for function 'to_discrete'
        module_type_store = module_type_store.open_function_context('to_discrete', 1497, 4, False)
        # Assigning a type to the variable 'self' (line 1498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        StateSpaceContinuous.to_discrete.__dict__.__setitem__('stypy_localization', localization)
        StateSpaceContinuous.to_discrete.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        StateSpaceContinuous.to_discrete.__dict__.__setitem__('stypy_type_store', module_type_store)
        StateSpaceContinuous.to_discrete.__dict__.__setitem__('stypy_function_name', 'StateSpaceContinuous.to_discrete')
        StateSpaceContinuous.to_discrete.__dict__.__setitem__('stypy_param_names_list', ['dt', 'method', 'alpha'])
        StateSpaceContinuous.to_discrete.__dict__.__setitem__('stypy_varargs_param_name', None)
        StateSpaceContinuous.to_discrete.__dict__.__setitem__('stypy_kwargs_param_name', None)
        StateSpaceContinuous.to_discrete.__dict__.__setitem__('stypy_call_defaults', defaults)
        StateSpaceContinuous.to_discrete.__dict__.__setitem__('stypy_call_varargs', varargs)
        StateSpaceContinuous.to_discrete.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        StateSpaceContinuous.to_discrete.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpaceContinuous.to_discrete', ['dt', 'method', 'alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'to_discrete', localization, ['dt', 'method', 'alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'to_discrete(...)' code ##################

        str_268496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1506, (-1)), 'str', '\n        Returns the discretized `StateSpace` system.\n\n        Parameters: See `cont2discrete` for details.\n\n        Returns\n        -------\n        sys: instance of `dlti` and `StateSpace`\n        ')
        
        # Call to StateSpace(...): (line 1507)
        
        # Obtaining the type of the subscript
        int_268498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1510, 55), 'int')
        slice_268499 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1507, 27), None, int_268498, None)
        
        # Call to cont2discrete(...): (line 1507)
        # Processing the call arguments (line 1507)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1507)
        tuple_268501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1507)
        # Adding element type (line 1507)
        # Getting the type of 'self' (line 1507)
        self_268502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 42), 'self', False)
        # Obtaining the member 'A' of a type (line 1507)
        A_268503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 42), self_268502, 'A')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1507, 42), tuple_268501, A_268503)
        # Adding element type (line 1507)
        # Getting the type of 'self' (line 1507)
        self_268504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 50), 'self', False)
        # Obtaining the member 'B' of a type (line 1507)
        B_268505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 50), self_268504, 'B')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1507, 42), tuple_268501, B_268505)
        # Adding element type (line 1507)
        # Getting the type of 'self' (line 1507)
        self_268506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 58), 'self', False)
        # Obtaining the member 'C' of a type (line 1507)
        C_268507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 58), self_268506, 'C')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1507, 42), tuple_268501, C_268507)
        # Adding element type (line 1507)
        # Getting the type of 'self' (line 1507)
        self_268508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 66), 'self', False)
        # Obtaining the member 'D' of a type (line 1507)
        D_268509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 66), self_268508, 'D')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1507, 42), tuple_268501, D_268509)
        
        # Getting the type of 'dt' (line 1508)
        dt_268510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 41), 'dt', False)
        # Processing the call keyword arguments (line 1507)
        # Getting the type of 'method' (line 1509)
        method_268511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 48), 'method', False)
        keyword_268512 = method_268511
        # Getting the type of 'alpha' (line 1510)
        alpha_268513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 47), 'alpha', False)
        keyword_268514 = alpha_268513
        kwargs_268515 = {'alpha': keyword_268514, 'method': keyword_268512}
        # Getting the type of 'cont2discrete' (line 1507)
        cont2discrete_268500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 27), 'cont2discrete', False)
        # Calling cont2discrete(args, kwargs) (line 1507)
        cont2discrete_call_result_268516 = invoke(stypy.reporting.localization.Localization(__file__, 1507, 27), cont2discrete_268500, *[tuple_268501, dt_268510], **kwargs_268515)
        
        # Obtaining the member '__getitem__' of a type (line 1507)
        getitem___268517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 27), cont2discrete_call_result_268516, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1507)
        subscript_call_result_268518 = invoke(stypy.reporting.localization.Localization(__file__, 1507, 27), getitem___268517, slice_268499)
        
        # Processing the call keyword arguments (line 1507)
        # Getting the type of 'dt' (line 1511)
        dt_268519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 29), 'dt', False)
        keyword_268520 = dt_268519
        kwargs_268521 = {'dt': keyword_268520}
        # Getting the type of 'StateSpace' (line 1507)
        StateSpace_268497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 15), 'StateSpace', False)
        # Calling StateSpace(args, kwargs) (line 1507)
        StateSpace_call_result_268522 = invoke(stypy.reporting.localization.Localization(__file__, 1507, 15), StateSpace_268497, *[subscript_call_result_268518], **kwargs_268521)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 8), 'stypy_return_type', StateSpace_call_result_268522)
        
        # ################# End of 'to_discrete(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'to_discrete' in the type store
        # Getting the type of 'stypy_return_type' (line 1497)
        stypy_return_type_268523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_268523)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'to_discrete'
        return stypy_return_type_268523


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1442, 0, False)
        # Assigning a type to the variable 'self' (line 1443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpaceContinuous.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'StateSpaceContinuous' (line 1442)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 0), 'StateSpaceContinuous', StateSpaceContinuous)
# Declaration of the 'StateSpaceDiscrete' class
# Getting the type of 'StateSpace' (line 1514)
StateSpace_268524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 25), 'StateSpace')
# Getting the type of 'dlti' (line 1514)
dlti_268525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 37), 'dlti')

class StateSpaceDiscrete(StateSpace_268524, dlti_268525, ):
    str_268526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, (-1)), 'str', '\n    Discrete-time Linear Time Invariant system in state-space form.\n\n    Represents the system as the discrete-time difference equation\n    :math:`x[k+1] = A x[k] + B u[k]`.\n    `StateSpace` systems inherit additional functionality from the `dlti`\n    class.\n\n    Parameters\n    ----------\n    *system: arguments\n        The `StateSpace` class can be instantiated with 1 or 3 arguments.\n        The following gives the number of input arguments and their\n        interpretation:\n\n            * 1: `dlti` system: (`StateSpace`, `TransferFunction` or\n              `ZerosPolesGain`)\n            * 4: array_like: (A, B, C, D)\n    dt: float, optional\n        Sampling time [s] of the discrete-time systems. Defaults to `True`\n        (unspecified sampling time). Must be specified as a keyword argument,\n        for example, ``dt=0.1``.\n\n    See Also\n    --------\n    TransferFunction, ZerosPolesGain, dlti\n    ss2zpk, ss2tf, zpk2sos\n\n    Notes\n    -----\n    Changing the value of properties that are not part of the\n    `StateSpace` system representation (such as `zeros` or `poles`) is very\n    inefficient and may lead to numerical inaccuracies.  It is better to\n    convert to the specific system representation first. For example, call\n    ``sys = sys.to_zpk()`` before accessing/changing the zeros, poles or gain.\n\n    Examples\n    --------\n    >>> from scipy import signal\n\n    >>> a = np.array([[1, 0.1], [0, 1]])\n    >>> b = np.array([[0.005], [0.1]])\n    >>> c = np.array([[1, 0]])\n    >>> d = np.array([[0]])\n\n    >>> signal.StateSpace(a, b, c, d, dt=0.1)\n    StateSpaceDiscrete(\n    array([[ 1. ,  0.1],\n           [ 0. ,  1. ]]),\n    array([[ 0.005],\n           [ 0.1  ]]),\n    array([[1, 0]]),\n    array([[0]]),\n    dt: 0.1\n    )\n\n    ')
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1514, 0, False)
        # Assigning a type to the variable 'self' (line 1515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1515, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'StateSpaceDiscrete.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'StateSpaceDiscrete' (line 1514)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 0), 'StateSpaceDiscrete', StateSpaceDiscrete)

@norecursion
def lsim2(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1575)
    None_268527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 20), 'None')
    # Getting the type of 'None' (line 1575)
    None_268528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 28), 'None')
    # Getting the type of 'None' (line 1575)
    None_268529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 37), 'None')
    defaults = [None_268527, None_268528, None_268529]
    # Create a new context for function 'lsim2'
    module_type_store = module_type_store.open_function_context('lsim2', 1575, 0, False)
    
    # Passed parameters checking function
    lsim2.stypy_localization = localization
    lsim2.stypy_type_of_self = None
    lsim2.stypy_type_store = module_type_store
    lsim2.stypy_function_name = 'lsim2'
    lsim2.stypy_param_names_list = ['system', 'U', 'T', 'X0']
    lsim2.stypy_varargs_param_name = None
    lsim2.stypy_kwargs_param_name = 'kwargs'
    lsim2.stypy_call_defaults = defaults
    lsim2.stypy_call_varargs = varargs
    lsim2.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lsim2', ['system', 'U', 'T', 'X0'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lsim2', localization, ['system', 'U', 'T', 'X0'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lsim2(...)' code ##################

    str_268530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, (-1)), 'str', "\n    Simulate output of a continuous-time linear system, by using\n    the ODE solver `scipy.integrate.odeint`.\n\n    Parameters\n    ----------\n    system : an instance of the `lti` class or a tuple describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n        * 1: (instance of `lti`)\n        * 2: (num, den)\n        * 3: (zeros, poles, gain)\n        * 4: (A, B, C, D)\n\n    U : array_like (1D or 2D), optional\n        An input array describing the input at each time T.  Linear\n        interpolation is used between given times.  If there are\n        multiple inputs, then each column of the rank-2 array\n        represents an input.  If U is not given, the input is assumed\n        to be zero.\n    T : array_like (1D or 2D), optional\n        The time steps at which the input is defined and at which the\n        output is desired.  The default is 101 evenly spaced points on\n        the interval [0,10.0].\n    X0 : array_like (1D), optional\n        The initial condition of the state vector.  If `X0` is not\n        given, the initial conditions are assumed to be 0.\n    kwargs : dict\n        Additional keyword arguments are passed on to the function\n        `odeint`.  See the notes below for more details.\n\n    Returns\n    -------\n    T : 1D ndarray\n        The time values for the output.\n    yout : ndarray\n        The response of the system.\n    xout : ndarray\n        The time-evolution of the state-vector.\n\n    Notes\n    -----\n    This function uses `scipy.integrate.odeint` to solve the\n    system's differential equations.  Additional keyword arguments\n    given to `lsim2` are passed on to `odeint`.  See the documentation\n    for `scipy.integrate.odeint` for the full list of arguments.\n\n    If (num, den) is passed in for ``system``, coefficients for both the\n    numerator and denominator should be specified in descending exponent\n    order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).\n\n    ")
    
    
    # Call to isinstance(...): (line 1629)
    # Processing the call arguments (line 1629)
    # Getting the type of 'system' (line 1629)
    system_268532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 18), 'system', False)
    # Getting the type of 'lti' (line 1629)
    lti_268533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 26), 'lti', False)
    # Processing the call keyword arguments (line 1629)
    kwargs_268534 = {}
    # Getting the type of 'isinstance' (line 1629)
    isinstance_268531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1629)
    isinstance_call_result_268535 = invoke(stypy.reporting.localization.Localization(__file__, 1629, 7), isinstance_268531, *[system_268532, lti_268533], **kwargs_268534)
    
    # Testing the type of an if condition (line 1629)
    if_condition_268536 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1629, 4), isinstance_call_result_268535)
    # Assigning a type to the variable 'if_condition_268536' (line 1629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1629, 4), 'if_condition_268536', if_condition_268536)
    # SSA begins for if statement (line 1629)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1630):
    
    # Assigning a Call to a Name (line 1630):
    
    # Call to _as_ss(...): (line 1630)
    # Processing the call keyword arguments (line 1630)
    kwargs_268539 = {}
    # Getting the type of 'system' (line 1630)
    system_268537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 14), 'system', False)
    # Obtaining the member '_as_ss' of a type (line 1630)
    _as_ss_268538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 14), system_268537, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 1630)
    _as_ss_call_result_268540 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 14), _as_ss_268538, *[], **kwargs_268539)
    
    # Assigning a type to the variable 'sys' (line 1630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 8), 'sys', _as_ss_call_result_268540)
    # SSA branch for the else part of an if statement (line 1629)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 1631)
    # Processing the call arguments (line 1631)
    # Getting the type of 'system' (line 1631)
    system_268542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 20), 'system', False)
    # Getting the type of 'dlti' (line 1631)
    dlti_268543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 28), 'dlti', False)
    # Processing the call keyword arguments (line 1631)
    kwargs_268544 = {}
    # Getting the type of 'isinstance' (line 1631)
    isinstance_268541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1631)
    isinstance_call_result_268545 = invoke(stypy.reporting.localization.Localization(__file__, 1631, 9), isinstance_268541, *[system_268542, dlti_268543], **kwargs_268544)
    
    # Testing the type of an if condition (line 1631)
    if_condition_268546 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1631, 9), isinstance_call_result_268545)
    # Assigning a type to the variable 'if_condition_268546' (line 1631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1631, 9), 'if_condition_268546', if_condition_268546)
    # SSA begins for if statement (line 1631)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 1632)
    # Processing the call arguments (line 1632)
    str_268548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1632, 29), 'str', 'lsim2 can only be used with continuous-time systems.')
    # Processing the call keyword arguments (line 1632)
    kwargs_268549 = {}
    # Getting the type of 'AttributeError' (line 1632)
    AttributeError_268547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 14), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 1632)
    AttributeError_call_result_268550 = invoke(stypy.reporting.localization.Localization(__file__, 1632, 14), AttributeError_268547, *[str_268548], **kwargs_268549)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1632, 8), AttributeError_call_result_268550, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 1631)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1635):
    
    # Assigning a Call to a Name (line 1635):
    
    # Call to _as_ss(...): (line 1635)
    # Processing the call keyword arguments (line 1635)
    kwargs_268556 = {}
    
    # Call to lti(...): (line 1635)
    # Getting the type of 'system' (line 1635)
    system_268552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 19), 'system', False)
    # Processing the call keyword arguments (line 1635)
    kwargs_268553 = {}
    # Getting the type of 'lti' (line 1635)
    lti_268551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 14), 'lti', False)
    # Calling lti(args, kwargs) (line 1635)
    lti_call_result_268554 = invoke(stypy.reporting.localization.Localization(__file__, 1635, 14), lti_268551, *[system_268552], **kwargs_268553)
    
    # Obtaining the member '_as_ss' of a type (line 1635)
    _as_ss_268555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1635, 14), lti_call_result_268554, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 1635)
    _as_ss_call_result_268557 = invoke(stypy.reporting.localization.Localization(__file__, 1635, 14), _as_ss_268555, *[], **kwargs_268556)
    
    # Assigning a type to the variable 'sys' (line 1635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 8), 'sys', _as_ss_call_result_268557)
    # SSA join for if statement (line 1631)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1629)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1637)
    # Getting the type of 'X0' (line 1637)
    X0_268558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 7), 'X0')
    # Getting the type of 'None' (line 1637)
    None_268559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 13), 'None')
    
    (may_be_268560, more_types_in_union_268561) = may_be_none(X0_268558, None_268559)

    if may_be_268560:

        if more_types_in_union_268561:
            # Runtime conditional SSA (line 1637)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1638):
        
        # Assigning a Call to a Name (line 1638):
        
        # Call to zeros(...): (line 1638)
        # Processing the call arguments (line 1638)
        
        # Obtaining the type of the subscript
        int_268563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1638, 31), 'int')
        # Getting the type of 'sys' (line 1638)
        sys_268564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 19), 'sys', False)
        # Obtaining the member 'B' of a type (line 1638)
        B_268565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 19), sys_268564, 'B')
        # Obtaining the member 'shape' of a type (line 1638)
        shape_268566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 19), B_268565, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1638)
        getitem___268567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 19), shape_268566, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1638)
        subscript_call_result_268568 = invoke(stypy.reporting.localization.Localization(__file__, 1638, 19), getitem___268567, int_268563)
        
        # Getting the type of 'sys' (line 1638)
        sys_268569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 35), 'sys', False)
        # Obtaining the member 'A' of a type (line 1638)
        A_268570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 35), sys_268569, 'A')
        # Obtaining the member 'dtype' of a type (line 1638)
        dtype_268571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 35), A_268570, 'dtype')
        # Processing the call keyword arguments (line 1638)
        kwargs_268572 = {}
        # Getting the type of 'zeros' (line 1638)
        zeros_268562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 13), 'zeros', False)
        # Calling zeros(args, kwargs) (line 1638)
        zeros_call_result_268573 = invoke(stypy.reporting.localization.Localization(__file__, 1638, 13), zeros_268562, *[subscript_call_result_268568, dtype_268571], **kwargs_268572)
        
        # Assigning a type to the variable 'X0' (line 1638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1638, 8), 'X0', zeros_call_result_268573)

        if more_types_in_union_268561:
            # SSA join for if statement (line 1637)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1640)
    # Getting the type of 'T' (line 1640)
    T_268574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 7), 'T')
    # Getting the type of 'None' (line 1640)
    None_268575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 12), 'None')
    
    (may_be_268576, more_types_in_union_268577) = may_be_none(T_268574, None_268575)

    if may_be_268576:

        if more_types_in_union_268577:
            # Runtime conditional SSA (line 1640)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1647):
        
        # Assigning a Call to a Name (line 1647):
        
        # Call to linspace(...): (line 1647)
        # Processing the call arguments (line 1647)
        int_268579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1647, 21), 'int')
        float_268580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1647, 24), 'float')
        int_268581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1647, 30), 'int')
        # Processing the call keyword arguments (line 1647)
        kwargs_268582 = {}
        # Getting the type of 'linspace' (line 1647)
        linspace_268578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 12), 'linspace', False)
        # Calling linspace(args, kwargs) (line 1647)
        linspace_call_result_268583 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 12), linspace_268578, *[int_268579, float_268580, int_268581], **kwargs_268582)
        
        # Assigning a type to the variable 'T' (line 1647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 8), 'T', linspace_call_result_268583)

        if more_types_in_union_268577:
            # SSA join for if statement (line 1640)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1649):
    
    # Assigning a Call to a Name (line 1649):
    
    # Call to atleast_1d(...): (line 1649)
    # Processing the call arguments (line 1649)
    # Getting the type of 'T' (line 1649)
    T_268585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 19), 'T', False)
    # Processing the call keyword arguments (line 1649)
    kwargs_268586 = {}
    # Getting the type of 'atleast_1d' (line 1649)
    atleast_1d_268584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1649)
    atleast_1d_call_result_268587 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 8), atleast_1d_268584, *[T_268585], **kwargs_268586)
    
    # Assigning a type to the variable 'T' (line 1649)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 4), 'T', atleast_1d_call_result_268587)
    
    
    
    # Call to len(...): (line 1650)
    # Processing the call arguments (line 1650)
    # Getting the type of 'T' (line 1650)
    T_268589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 11), 'T', False)
    # Obtaining the member 'shape' of a type (line 1650)
    shape_268590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 11), T_268589, 'shape')
    # Processing the call keyword arguments (line 1650)
    kwargs_268591 = {}
    # Getting the type of 'len' (line 1650)
    len_268588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 7), 'len', False)
    # Calling len(args, kwargs) (line 1650)
    len_call_result_268592 = invoke(stypy.reporting.localization.Localization(__file__, 1650, 7), len_268588, *[shape_268590], **kwargs_268591)
    
    int_268593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1650, 23), 'int')
    # Applying the binary operator '!=' (line 1650)
    result_ne_268594 = python_operator(stypy.reporting.localization.Localization(__file__, 1650, 7), '!=', len_call_result_268592, int_268593)
    
    # Testing the type of an if condition (line 1650)
    if_condition_268595 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1650, 4), result_ne_268594)
    # Assigning a type to the variable 'if_condition_268595' (line 1650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 4), 'if_condition_268595', if_condition_268595)
    # SSA begins for if statement (line 1650)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1651)
    # Processing the call arguments (line 1651)
    str_268597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1651, 25), 'str', 'T must be a rank-1 array.')
    # Processing the call keyword arguments (line 1651)
    kwargs_268598 = {}
    # Getting the type of 'ValueError' (line 1651)
    ValueError_268596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1651)
    ValueError_call_result_268599 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 14), ValueError_268596, *[str_268597], **kwargs_268598)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1651, 8), ValueError_call_result_268599, 'raise parameter', BaseException)
    # SSA join for if statement (line 1650)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1653)
    # Getting the type of 'U' (line 1653)
    U_268600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 4), 'U')
    # Getting the type of 'None' (line 1653)
    None_268601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 16), 'None')
    
    (may_be_268602, more_types_in_union_268603) = may_not_be_none(U_268600, None_268601)

    if may_be_268602:

        if more_types_in_union_268603:
            # Runtime conditional SSA (line 1653)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1654):
        
        # Assigning a Call to a Name (line 1654):
        
        # Call to atleast_1d(...): (line 1654)
        # Processing the call arguments (line 1654)
        # Getting the type of 'U' (line 1654)
        U_268605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 23), 'U', False)
        # Processing the call keyword arguments (line 1654)
        kwargs_268606 = {}
        # Getting the type of 'atleast_1d' (line 1654)
        atleast_1d_268604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 12), 'atleast_1d', False)
        # Calling atleast_1d(args, kwargs) (line 1654)
        atleast_1d_call_result_268607 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 12), atleast_1d_268604, *[U_268605], **kwargs_268606)
        
        # Assigning a type to the variable 'U' (line 1654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 8), 'U', atleast_1d_call_result_268607)
        
        
        
        # Call to len(...): (line 1655)
        # Processing the call arguments (line 1655)
        # Getting the type of 'U' (line 1655)
        U_268609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 15), 'U', False)
        # Obtaining the member 'shape' of a type (line 1655)
        shape_268610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 15), U_268609, 'shape')
        # Processing the call keyword arguments (line 1655)
        kwargs_268611 = {}
        # Getting the type of 'len' (line 1655)
        len_268608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 11), 'len', False)
        # Calling len(args, kwargs) (line 1655)
        len_call_result_268612 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 11), len_268608, *[shape_268610], **kwargs_268611)
        
        int_268613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1655, 27), 'int')
        # Applying the binary operator '==' (line 1655)
        result_eq_268614 = python_operator(stypy.reporting.localization.Localization(__file__, 1655, 11), '==', len_call_result_268612, int_268613)
        
        # Testing the type of an if condition (line 1655)
        if_condition_268615 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1655, 8), result_eq_268614)
        # Assigning a type to the variable 'if_condition_268615' (line 1655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1655, 8), 'if_condition_268615', if_condition_268615)
        # SSA begins for if statement (line 1655)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1656):
        
        # Assigning a Call to a Name (line 1656):
        
        # Call to reshape(...): (line 1656)
        # Processing the call arguments (line 1656)
        int_268618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1656, 26), 'int')
        int_268619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1656, 30), 'int')
        # Processing the call keyword arguments (line 1656)
        kwargs_268620 = {}
        # Getting the type of 'U' (line 1656)
        U_268616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 16), 'U', False)
        # Obtaining the member 'reshape' of a type (line 1656)
        reshape_268617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 16), U_268616, 'reshape')
        # Calling reshape(args, kwargs) (line 1656)
        reshape_call_result_268621 = invoke(stypy.reporting.localization.Localization(__file__, 1656, 16), reshape_268617, *[int_268618, int_268619], **kwargs_268620)
        
        # Assigning a type to the variable 'U' (line 1656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 12), 'U', reshape_call_result_268621)
        # SSA join for if statement (line 1655)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 1657):
        
        # Assigning a Attribute to a Name (line 1657):
        # Getting the type of 'U' (line 1657)
        U_268622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 13), 'U')
        # Obtaining the member 'shape' of a type (line 1657)
        shape_268623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1657, 13), U_268622, 'shape')
        # Assigning a type to the variable 'sU' (line 1657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1657, 8), 'sU', shape_268623)
        
        
        
        # Obtaining the type of the subscript
        int_268624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1658, 14), 'int')
        # Getting the type of 'sU' (line 1658)
        sU_268625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 11), 'sU')
        # Obtaining the member '__getitem__' of a type (line 1658)
        getitem___268626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 11), sU_268625, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1658)
        subscript_call_result_268627 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 11), getitem___268626, int_268624)
        
        
        # Call to len(...): (line 1658)
        # Processing the call arguments (line 1658)
        # Getting the type of 'T' (line 1658)
        T_268629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 24), 'T', False)
        # Processing the call keyword arguments (line 1658)
        kwargs_268630 = {}
        # Getting the type of 'len' (line 1658)
        len_268628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 20), 'len', False)
        # Calling len(args, kwargs) (line 1658)
        len_call_result_268631 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 20), len_268628, *[T_268629], **kwargs_268630)
        
        # Applying the binary operator '!=' (line 1658)
        result_ne_268632 = python_operator(stypy.reporting.localization.Localization(__file__, 1658, 11), '!=', subscript_call_result_268627, len_call_result_268631)
        
        # Testing the type of an if condition (line 1658)
        if_condition_268633 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1658, 8), result_ne_268632)
        # Assigning a type to the variable 'if_condition_268633' (line 1658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 8), 'if_condition_268633', if_condition_268633)
        # SSA begins for if statement (line 1658)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1659)
        # Processing the call arguments (line 1659)
        str_268635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1659, 29), 'str', 'U must have the same number of rows as elements in T.')
        # Processing the call keyword arguments (line 1659)
        kwargs_268636 = {}
        # Getting the type of 'ValueError' (line 1659)
        ValueError_268634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1659)
        ValueError_call_result_268637 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 18), ValueError_268634, *[str_268635], **kwargs_268636)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1659, 12), ValueError_call_result_268637, 'raise parameter', BaseException)
        # SSA join for if statement (line 1658)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_268638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 14), 'int')
        # Getting the type of 'sU' (line 1662)
        sU_268639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 11), 'sU')
        # Obtaining the member '__getitem__' of a type (line 1662)
        getitem___268640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 11), sU_268639, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1662)
        subscript_call_result_268641 = invoke(stypy.reporting.localization.Localization(__file__, 1662, 11), getitem___268640, int_268638)
        
        # Getting the type of 'sys' (line 1662)
        sys_268642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 20), 'sys')
        # Obtaining the member 'inputs' of a type (line 1662)
        inputs_268643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 20), sys_268642, 'inputs')
        # Applying the binary operator '!=' (line 1662)
        result_ne_268644 = python_operator(stypy.reporting.localization.Localization(__file__, 1662, 11), '!=', subscript_call_result_268641, inputs_268643)
        
        # Testing the type of an if condition (line 1662)
        if_condition_268645 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1662, 8), result_ne_268644)
        # Assigning a type to the variable 'if_condition_268645' (line 1662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1662, 8), 'if_condition_268645', if_condition_268645)
        # SSA begins for if statement (line 1662)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1663)
        # Processing the call arguments (line 1663)
        str_268647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 29), 'str', 'The number of inputs in U (%d) is not compatible with the number of system inputs (%d)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1665)
        tuple_268648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1665)
        # Adding element type (line 1665)
        
        # Obtaining the type of the subscript
        int_268649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, 49), 'int')
        # Getting the type of 'sU' (line 1665)
        sU_268650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 46), 'sU', False)
        # Obtaining the member '__getitem__' of a type (line 1665)
        getitem___268651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1665, 46), sU_268650, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1665)
        subscript_call_result_268652 = invoke(stypy.reporting.localization.Localization(__file__, 1665, 46), getitem___268651, int_268649)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1665, 46), tuple_268648, subscript_call_result_268652)
        # Adding element type (line 1665)
        # Getting the type of 'sys' (line 1665)
        sys_268653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 53), 'sys', False)
        # Obtaining the member 'inputs' of a type (line 1665)
        inputs_268654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1665, 53), sys_268653, 'inputs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1665, 46), tuple_268648, inputs_268654)
        
        # Applying the binary operator '%' (line 1663)
        result_mod_268655 = python_operator(stypy.reporting.localization.Localization(__file__, 1663, 29), '%', str_268647, tuple_268648)
        
        # Processing the call keyword arguments (line 1663)
        kwargs_268656 = {}
        # Getting the type of 'ValueError' (line 1663)
        ValueError_268646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1663)
        ValueError_call_result_268657 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 18), ValueError_268646, *[result_mod_268655], **kwargs_268656)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1663, 12), ValueError_call_result_268657, 'raise parameter', BaseException)
        # SSA join for if statement (line 1662)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1668):
        
        # Assigning a Call to a Name (line 1668):
        
        # Call to interp1d(...): (line 1668)
        # Processing the call arguments (line 1668)
        # Getting the type of 'T' (line 1668)
        T_268660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 37), 'T', False)
        # Getting the type of 'U' (line 1668)
        U_268661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 40), 'U', False)
        # Processing the call keyword arguments (line 1668)
        str_268662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 48), 'str', 'linear')
        keyword_268663 = str_268662
        int_268664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1669, 42), 'int')
        keyword_268665 = int_268664
        # Getting the type of 'False' (line 1669)
        False_268666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 58), 'False', False)
        keyword_268667 = False_268666
        kwargs_268668 = {'bounds_error': keyword_268667, 'kind': keyword_268663, 'axis': keyword_268665}
        # Getting the type of 'interpolate' (line 1668)
        interpolate_268658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 16), 'interpolate', False)
        # Obtaining the member 'interp1d' of a type (line 1668)
        interp1d_268659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 16), interpolate_268658, 'interp1d')
        # Calling interp1d(args, kwargs) (line 1668)
        interp1d_call_result_268669 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 16), interp1d_268659, *[T_268660, U_268661], **kwargs_268668)
        
        # Assigning a type to the variable 'ufunc' (line 1668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 8), 'ufunc', interp1d_call_result_268669)

        @norecursion
        def fprime(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'fprime'
            module_type_store = module_type_store.open_function_context('fprime', 1671, 8, False)
            
            # Passed parameters checking function
            fprime.stypy_localization = localization
            fprime.stypy_type_of_self = None
            fprime.stypy_type_store = module_type_store
            fprime.stypy_function_name = 'fprime'
            fprime.stypy_param_names_list = ['x', 't', 'sys', 'ufunc']
            fprime.stypy_varargs_param_name = None
            fprime.stypy_kwargs_param_name = None
            fprime.stypy_call_defaults = defaults
            fprime.stypy_call_varargs = varargs
            fprime.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'fprime', ['x', 't', 'sys', 'ufunc'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'fprime', localization, ['x', 't', 'sys', 'ufunc'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'fprime(...)' code ##################

            str_268670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 12), 'str', 'The vector field of the linear system.')
            
            # Call to dot(...): (line 1673)
            # Processing the call arguments (line 1673)
            # Getting the type of 'sys' (line 1673)
            sys_268672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 23), 'sys', False)
            # Obtaining the member 'A' of a type (line 1673)
            A_268673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1673, 23), sys_268672, 'A')
            # Getting the type of 'x' (line 1673)
            x_268674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 30), 'x', False)
            # Processing the call keyword arguments (line 1673)
            kwargs_268675 = {}
            # Getting the type of 'dot' (line 1673)
            dot_268671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 19), 'dot', False)
            # Calling dot(args, kwargs) (line 1673)
            dot_call_result_268676 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 19), dot_268671, *[A_268673, x_268674], **kwargs_268675)
            
            
            # Call to squeeze(...): (line 1673)
            # Processing the call arguments (line 1673)
            
            # Call to dot(...): (line 1673)
            # Processing the call arguments (line 1673)
            # Getting the type of 'sys' (line 1673)
            sys_268679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 47), 'sys', False)
            # Obtaining the member 'B' of a type (line 1673)
            B_268680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1673, 47), sys_268679, 'B')
            
            # Call to nan_to_num(...): (line 1673)
            # Processing the call arguments (line 1673)
            
            # Call to ufunc(...): (line 1673)
            # Processing the call arguments (line 1673)
            
            # Obtaining an instance of the builtin type 'list' (line 1673)
            list_268683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1673, 71), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1673)
            # Adding element type (line 1673)
            # Getting the type of 't' (line 1673)
            t_268684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 72), 't', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1673, 71), list_268683, t_268684)
            
            # Processing the call keyword arguments (line 1673)
            kwargs_268685 = {}
            # Getting the type of 'ufunc' (line 1673)
            ufunc_268682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 65), 'ufunc', False)
            # Calling ufunc(args, kwargs) (line 1673)
            ufunc_call_result_268686 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 65), ufunc_268682, *[list_268683], **kwargs_268685)
            
            # Processing the call keyword arguments (line 1673)
            kwargs_268687 = {}
            # Getting the type of 'nan_to_num' (line 1673)
            nan_to_num_268681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 54), 'nan_to_num', False)
            # Calling nan_to_num(args, kwargs) (line 1673)
            nan_to_num_call_result_268688 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 54), nan_to_num_268681, *[ufunc_call_result_268686], **kwargs_268687)
            
            # Processing the call keyword arguments (line 1673)
            kwargs_268689 = {}
            # Getting the type of 'dot' (line 1673)
            dot_268678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 43), 'dot', False)
            # Calling dot(args, kwargs) (line 1673)
            dot_call_result_268690 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 43), dot_268678, *[B_268680, nan_to_num_call_result_268688], **kwargs_268689)
            
            # Processing the call keyword arguments (line 1673)
            kwargs_268691 = {}
            # Getting the type of 'squeeze' (line 1673)
            squeeze_268677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 35), 'squeeze', False)
            # Calling squeeze(args, kwargs) (line 1673)
            squeeze_call_result_268692 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 35), squeeze_268677, *[dot_call_result_268690], **kwargs_268691)
            
            # Applying the binary operator '+' (line 1673)
            result_add_268693 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 19), '+', dot_call_result_268676, squeeze_call_result_268692)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1673)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 12), 'stypy_return_type', result_add_268693)
            
            # ################# End of 'fprime(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'fprime' in the type store
            # Getting the type of 'stypy_return_type' (line 1671)
            stypy_return_type_268694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_268694)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'fprime'
            return stypy_return_type_268694

        # Assigning a type to the variable 'fprime' (line 1671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 8), 'fprime', fprime)
        
        # Assigning a Call to a Name (line 1674):
        
        # Assigning a Call to a Name (line 1674):
        
        # Call to odeint(...): (line 1674)
        # Processing the call arguments (line 1674)
        # Getting the type of 'fprime' (line 1674)
        fprime_268697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 32), 'fprime', False)
        # Getting the type of 'X0' (line 1674)
        X0_268698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 40), 'X0', False)
        # Getting the type of 'T' (line 1674)
        T_268699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 44), 'T', False)
        # Processing the call keyword arguments (line 1674)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1674)
        tuple_268700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 53), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1674)
        # Adding element type (line 1674)
        # Getting the type of 'sys' (line 1674)
        sys_268701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 53), 'sys', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 53), tuple_268700, sys_268701)
        # Adding element type (line 1674)
        # Getting the type of 'ufunc' (line 1674)
        ufunc_268702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 58), 'ufunc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 53), tuple_268700, ufunc_268702)
        
        keyword_268703 = tuple_268700
        # Getting the type of 'kwargs' (line 1674)
        kwargs_268704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 68), 'kwargs', False)
        kwargs_268705 = {'kwargs_268704': kwargs_268704, 'args': keyword_268703}
        # Getting the type of 'integrate' (line 1674)
        integrate_268695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 15), 'integrate', False)
        # Obtaining the member 'odeint' of a type (line 1674)
        odeint_268696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 15), integrate_268695, 'odeint')
        # Calling odeint(args, kwargs) (line 1674)
        odeint_call_result_268706 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 15), odeint_268696, *[fprime_268697, X0_268698, T_268699], **kwargs_268705)
        
        # Assigning a type to the variable 'xout' (line 1674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 8), 'xout', odeint_call_result_268706)
        
        # Assigning a BinOp to a Name (line 1675):
        
        # Assigning a BinOp to a Name (line 1675):
        
        # Call to dot(...): (line 1675)
        # Processing the call arguments (line 1675)
        # Getting the type of 'sys' (line 1675)
        sys_268708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 19), 'sys', False)
        # Obtaining the member 'C' of a type (line 1675)
        C_268709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 19), sys_268708, 'C')
        
        # Call to transpose(...): (line 1675)
        # Processing the call arguments (line 1675)
        # Getting the type of 'xout' (line 1675)
        xout_268711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 36), 'xout', False)
        # Processing the call keyword arguments (line 1675)
        kwargs_268712 = {}
        # Getting the type of 'transpose' (line 1675)
        transpose_268710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 26), 'transpose', False)
        # Calling transpose(args, kwargs) (line 1675)
        transpose_call_result_268713 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 26), transpose_268710, *[xout_268711], **kwargs_268712)
        
        # Processing the call keyword arguments (line 1675)
        kwargs_268714 = {}
        # Getting the type of 'dot' (line 1675)
        dot_268707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 15), 'dot', False)
        # Calling dot(args, kwargs) (line 1675)
        dot_call_result_268715 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 15), dot_268707, *[C_268709, transpose_call_result_268713], **kwargs_268714)
        
        
        # Call to dot(...): (line 1675)
        # Processing the call arguments (line 1675)
        # Getting the type of 'sys' (line 1675)
        sys_268717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 49), 'sys', False)
        # Obtaining the member 'D' of a type (line 1675)
        D_268718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 49), sys_268717, 'D')
        
        # Call to transpose(...): (line 1675)
        # Processing the call arguments (line 1675)
        # Getting the type of 'U' (line 1675)
        U_268720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 66), 'U', False)
        # Processing the call keyword arguments (line 1675)
        kwargs_268721 = {}
        # Getting the type of 'transpose' (line 1675)
        transpose_268719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 56), 'transpose', False)
        # Calling transpose(args, kwargs) (line 1675)
        transpose_call_result_268722 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 56), transpose_268719, *[U_268720], **kwargs_268721)
        
        # Processing the call keyword arguments (line 1675)
        kwargs_268723 = {}
        # Getting the type of 'dot' (line 1675)
        dot_268716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 45), 'dot', False)
        # Calling dot(args, kwargs) (line 1675)
        dot_call_result_268724 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 45), dot_268716, *[D_268718, transpose_call_result_268722], **kwargs_268723)
        
        # Applying the binary operator '+' (line 1675)
        result_add_268725 = python_operator(stypy.reporting.localization.Localization(__file__, 1675, 15), '+', dot_call_result_268715, dot_call_result_268724)
        
        # Assigning a type to the variable 'yout' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 8), 'yout', result_add_268725)

        if more_types_in_union_268603:
            # Runtime conditional SSA for else branch (line 1653)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_268602) or more_types_in_union_268603):

        @norecursion
        def fprime(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'fprime'
            module_type_store = module_type_store.open_function_context('fprime', 1677, 8, False)
            
            # Passed parameters checking function
            fprime.stypy_localization = localization
            fprime.stypy_type_of_self = None
            fprime.stypy_type_store = module_type_store
            fprime.stypy_function_name = 'fprime'
            fprime.stypy_param_names_list = ['x', 't', 'sys']
            fprime.stypy_varargs_param_name = None
            fprime.stypy_kwargs_param_name = None
            fprime.stypy_call_defaults = defaults
            fprime.stypy_call_varargs = varargs
            fprime.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'fprime', ['x', 't', 'sys'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'fprime', localization, ['x', 't', 'sys'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'fprime(...)' code ##################

            str_268726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1678, 12), 'str', 'The vector field of the linear system.')
            
            # Call to dot(...): (line 1679)
            # Processing the call arguments (line 1679)
            # Getting the type of 'sys' (line 1679)
            sys_268728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 23), 'sys', False)
            # Obtaining the member 'A' of a type (line 1679)
            A_268729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 23), sys_268728, 'A')
            # Getting the type of 'x' (line 1679)
            x_268730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 30), 'x', False)
            # Processing the call keyword arguments (line 1679)
            kwargs_268731 = {}
            # Getting the type of 'dot' (line 1679)
            dot_268727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 19), 'dot', False)
            # Calling dot(args, kwargs) (line 1679)
            dot_call_result_268732 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 19), dot_268727, *[A_268729, x_268730], **kwargs_268731)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1679)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 12), 'stypy_return_type', dot_call_result_268732)
            
            # ################# End of 'fprime(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'fprime' in the type store
            # Getting the type of 'stypy_return_type' (line 1677)
            stypy_return_type_268733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_268733)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'fprime'
            return stypy_return_type_268733

        # Assigning a type to the variable 'fprime' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 8), 'fprime', fprime)
        
        # Assigning a Call to a Name (line 1680):
        
        # Assigning a Call to a Name (line 1680):
        
        # Call to odeint(...): (line 1680)
        # Processing the call arguments (line 1680)
        # Getting the type of 'fprime' (line 1680)
        fprime_268736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 32), 'fprime', False)
        # Getting the type of 'X0' (line 1680)
        X0_268737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 40), 'X0', False)
        # Getting the type of 'T' (line 1680)
        T_268738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 44), 'T', False)
        # Processing the call keyword arguments (line 1680)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1680)
        tuple_268739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 53), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1680)
        # Adding element type (line 1680)
        # Getting the type of 'sys' (line 1680)
        sys_268740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 53), 'sys', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1680, 53), tuple_268739, sys_268740)
        
        keyword_268741 = tuple_268739
        # Getting the type of 'kwargs' (line 1680)
        kwargs_268742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 62), 'kwargs', False)
        kwargs_268743 = {'kwargs_268742': kwargs_268742, 'args': keyword_268741}
        # Getting the type of 'integrate' (line 1680)
        integrate_268734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 15), 'integrate', False)
        # Obtaining the member 'odeint' of a type (line 1680)
        odeint_268735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 15), integrate_268734, 'odeint')
        # Calling odeint(args, kwargs) (line 1680)
        odeint_call_result_268744 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 15), odeint_268735, *[fprime_268736, X0_268737, T_268738], **kwargs_268743)
        
        # Assigning a type to the variable 'xout' (line 1680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 8), 'xout', odeint_call_result_268744)
        
        # Assigning a Call to a Name (line 1681):
        
        # Assigning a Call to a Name (line 1681):
        
        # Call to dot(...): (line 1681)
        # Processing the call arguments (line 1681)
        # Getting the type of 'sys' (line 1681)
        sys_268746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 19), 'sys', False)
        # Obtaining the member 'C' of a type (line 1681)
        C_268747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 19), sys_268746, 'C')
        
        # Call to transpose(...): (line 1681)
        # Processing the call arguments (line 1681)
        # Getting the type of 'xout' (line 1681)
        xout_268749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 36), 'xout', False)
        # Processing the call keyword arguments (line 1681)
        kwargs_268750 = {}
        # Getting the type of 'transpose' (line 1681)
        transpose_268748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 26), 'transpose', False)
        # Calling transpose(args, kwargs) (line 1681)
        transpose_call_result_268751 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 26), transpose_268748, *[xout_268749], **kwargs_268750)
        
        # Processing the call keyword arguments (line 1681)
        kwargs_268752 = {}
        # Getting the type of 'dot' (line 1681)
        dot_268745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 15), 'dot', False)
        # Calling dot(args, kwargs) (line 1681)
        dot_call_result_268753 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 15), dot_268745, *[C_268747, transpose_call_result_268751], **kwargs_268752)
        
        # Assigning a type to the variable 'yout' (line 1681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 8), 'yout', dot_call_result_268753)

        if (may_be_268602 and more_types_in_union_268603):
            # SSA join for if statement (line 1653)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1683)
    tuple_268754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1683, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1683)
    # Adding element type (line 1683)
    # Getting the type of 'T' (line 1683)
    T_268755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 11), 'T')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1683, 11), tuple_268754, T_268755)
    # Adding element type (line 1683)
    
    # Call to squeeze(...): (line 1683)
    # Processing the call arguments (line 1683)
    
    # Call to transpose(...): (line 1683)
    # Processing the call arguments (line 1683)
    # Getting the type of 'yout' (line 1683)
    yout_268758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 32), 'yout', False)
    # Processing the call keyword arguments (line 1683)
    kwargs_268759 = {}
    # Getting the type of 'transpose' (line 1683)
    transpose_268757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 22), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1683)
    transpose_call_result_268760 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 22), transpose_268757, *[yout_268758], **kwargs_268759)
    
    # Processing the call keyword arguments (line 1683)
    kwargs_268761 = {}
    # Getting the type of 'squeeze' (line 1683)
    squeeze_268756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 14), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1683)
    squeeze_call_result_268762 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 14), squeeze_268756, *[transpose_call_result_268760], **kwargs_268761)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1683, 11), tuple_268754, squeeze_call_result_268762)
    # Adding element type (line 1683)
    # Getting the type of 'xout' (line 1683)
    xout_268763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 40), 'xout')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1683, 11), tuple_268754, xout_268763)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1683)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1683, 4), 'stypy_return_type', tuple_268754)
    
    # ################# End of 'lsim2(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lsim2' in the type store
    # Getting the type of 'stypy_return_type' (line 1575)
    stypy_return_type_268764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_268764)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lsim2'
    return stypy_return_type_268764

# Assigning a type to the variable 'lsim2' (line 1575)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 0), 'lsim2', lsim2)

@norecursion
def _cast_to_array_dtype(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_cast_to_array_dtype'
    module_type_store = module_type_store.open_function_context('_cast_to_array_dtype', 1686, 0, False)
    
    # Passed parameters checking function
    _cast_to_array_dtype.stypy_localization = localization
    _cast_to_array_dtype.stypy_type_of_self = None
    _cast_to_array_dtype.stypy_type_store = module_type_store
    _cast_to_array_dtype.stypy_function_name = '_cast_to_array_dtype'
    _cast_to_array_dtype.stypy_param_names_list = ['in1', 'in2']
    _cast_to_array_dtype.stypy_varargs_param_name = None
    _cast_to_array_dtype.stypy_kwargs_param_name = None
    _cast_to_array_dtype.stypy_call_defaults = defaults
    _cast_to_array_dtype.stypy_call_varargs = varargs
    _cast_to_array_dtype.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_cast_to_array_dtype', ['in1', 'in2'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_cast_to_array_dtype', localization, ['in1', 'in2'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_cast_to_array_dtype(...)' code ##################

    str_268765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, (-1)), 'str', 'Cast array to dtype of other array, while avoiding ComplexWarning.\n\n    Those can be raised when casting complex to real.\n    ')
    
    
    # Call to issubdtype(...): (line 1691)
    # Processing the call arguments (line 1691)
    # Getting the type of 'in2' (line 1691)
    in2_268768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 24), 'in2', False)
    # Obtaining the member 'dtype' of a type (line 1691)
    dtype_268769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 24), in2_268768, 'dtype')
    # Getting the type of 'numpy' (line 1691)
    numpy_268770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 35), 'numpy', False)
    # Obtaining the member 'float' of a type (line 1691)
    float_268771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 35), numpy_268770, 'float')
    # Processing the call keyword arguments (line 1691)
    kwargs_268772 = {}
    # Getting the type of 'numpy' (line 1691)
    numpy_268766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 7), 'numpy', False)
    # Obtaining the member 'issubdtype' of a type (line 1691)
    issubdtype_268767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 7), numpy_268766, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 1691)
    issubdtype_call_result_268773 = invoke(stypy.reporting.localization.Localization(__file__, 1691, 7), issubdtype_268767, *[dtype_268769, float_268771], **kwargs_268772)
    
    # Testing the type of an if condition (line 1691)
    if_condition_268774 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1691, 4), issubdtype_call_result_268773)
    # Assigning a type to the variable 'if_condition_268774' (line 1691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 4), 'if_condition_268774', if_condition_268774)
    # SSA begins for if statement (line 1691)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1693):
    
    # Assigning a Call to a Name (line 1693):
    
    # Call to astype(...): (line 1693)
    # Processing the call arguments (line 1693)
    # Getting the type of 'in2' (line 1693)
    in2_268778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 30), 'in2', False)
    # Obtaining the member 'dtype' of a type (line 1693)
    dtype_268779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 30), in2_268778, 'dtype')
    # Processing the call keyword arguments (line 1693)
    kwargs_268780 = {}
    # Getting the type of 'in1' (line 1693)
    in1_268775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 14), 'in1', False)
    # Obtaining the member 'real' of a type (line 1693)
    real_268776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 14), in1_268775, 'real')
    # Obtaining the member 'astype' of a type (line 1693)
    astype_268777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 14), real_268776, 'astype')
    # Calling astype(args, kwargs) (line 1693)
    astype_call_result_268781 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 14), astype_268777, *[dtype_268779], **kwargs_268780)
    
    # Assigning a type to the variable 'in1' (line 1693)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 8), 'in1', astype_call_result_268781)
    # SSA branch for the else part of an if statement (line 1691)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1695):
    
    # Assigning a Call to a Name (line 1695):
    
    # Call to astype(...): (line 1695)
    # Processing the call arguments (line 1695)
    # Getting the type of 'in2' (line 1695)
    in2_268784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 25), 'in2', False)
    # Obtaining the member 'dtype' of a type (line 1695)
    dtype_268785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1695, 25), in2_268784, 'dtype')
    # Processing the call keyword arguments (line 1695)
    kwargs_268786 = {}
    # Getting the type of 'in1' (line 1695)
    in1_268782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 14), 'in1', False)
    # Obtaining the member 'astype' of a type (line 1695)
    astype_268783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1695, 14), in1_268782, 'astype')
    # Calling astype(args, kwargs) (line 1695)
    astype_call_result_268787 = invoke(stypy.reporting.localization.Localization(__file__, 1695, 14), astype_268783, *[dtype_268785], **kwargs_268786)
    
    # Assigning a type to the variable 'in1' (line 1695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 8), 'in1', astype_call_result_268787)
    # SSA join for if statement (line 1691)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'in1' (line 1697)
    in1_268788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 11), 'in1')
    # Assigning a type to the variable 'stypy_return_type' (line 1697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 4), 'stypy_return_type', in1_268788)
    
    # ################# End of '_cast_to_array_dtype(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_cast_to_array_dtype' in the type store
    # Getting the type of 'stypy_return_type' (line 1686)
    stypy_return_type_268789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_268789)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_cast_to_array_dtype'
    return stypy_return_type_268789

# Assigning a type to the variable '_cast_to_array_dtype' (line 1686)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 0), '_cast_to_array_dtype', _cast_to_array_dtype)

@norecursion
def lsim(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1700)
    None_268790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 26), 'None')
    # Getting the type of 'True' (line 1700)
    True_268791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 39), 'True')
    defaults = [None_268790, True_268791]
    # Create a new context for function 'lsim'
    module_type_store = module_type_store.open_function_context('lsim', 1700, 0, False)
    
    # Passed parameters checking function
    lsim.stypy_localization = localization
    lsim.stypy_type_of_self = None
    lsim.stypy_type_store = module_type_store
    lsim.stypy_function_name = 'lsim'
    lsim.stypy_param_names_list = ['system', 'U', 'T', 'X0', 'interp']
    lsim.stypy_varargs_param_name = None
    lsim.stypy_kwargs_param_name = None
    lsim.stypy_call_defaults = defaults
    lsim.stypy_call_varargs = varargs
    lsim.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lsim', ['system', 'U', 'T', 'X0', 'interp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lsim', localization, ['system', 'U', 'T', 'X0', 'interp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lsim(...)' code ##################

    str_268792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1755, (-1)), 'str', "\n    Simulate output of a continuous-time linear system.\n\n    Parameters\n    ----------\n    system : an instance of the LTI class or a tuple describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n        * 1: (instance of `lti`)\n        * 2: (num, den)\n        * 3: (zeros, poles, gain)\n        * 4: (A, B, C, D)\n\n    U : array_like\n        An input array describing the input at each time `T`\n        (interpolation is assumed between given times).  If there are\n        multiple inputs, then each column of the rank-2 array\n        represents an input.  If U = 0 or None, a zero input is used.\n    T : array_like\n        The time steps at which the input is defined and at which the\n        output is desired.  Must be nonnegative, increasing, and equally spaced.\n    X0 : array_like, optional\n        The initial conditions on the state vector (zero by default).\n    interp : bool, optional\n        Whether to use linear (True, the default) or zero-order-hold (False)\n        interpolation for the input array.\n\n    Returns\n    -------\n    T : 1D ndarray\n        Time values for the output.\n    yout : 1D ndarray\n        System response.\n    xout : ndarray\n        Time evolution of the state vector.\n\n    Notes\n    -----\n    If (num, den) is passed in for ``system``, coefficients for both the\n    numerator and denominator should be specified in descending exponent\n    order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).\n\n    Examples\n    --------\n    Simulate a double integrator y'' = u, with a constant input u = 1\n\n    >>> from scipy import signal\n    >>> system = signal.lti([[0., 1.], [0., 0.]], [[0.], [1.]], [[1., 0.]], 0.)\n    >>> t = np.linspace(0, 5)\n    >>> u = np.ones_like(t)\n    >>> tout, y, x = signal.lsim(system, u, t)\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(t, y)\n    ")
    
    
    # Call to isinstance(...): (line 1756)
    # Processing the call arguments (line 1756)
    # Getting the type of 'system' (line 1756)
    system_268794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 18), 'system', False)
    # Getting the type of 'lti' (line 1756)
    lti_268795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 26), 'lti', False)
    # Processing the call keyword arguments (line 1756)
    kwargs_268796 = {}
    # Getting the type of 'isinstance' (line 1756)
    isinstance_268793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1756)
    isinstance_call_result_268797 = invoke(stypy.reporting.localization.Localization(__file__, 1756, 7), isinstance_268793, *[system_268794, lti_268795], **kwargs_268796)
    
    # Testing the type of an if condition (line 1756)
    if_condition_268798 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1756, 4), isinstance_call_result_268797)
    # Assigning a type to the variable 'if_condition_268798' (line 1756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 4), 'if_condition_268798', if_condition_268798)
    # SSA begins for if statement (line 1756)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1757):
    
    # Assigning a Call to a Name (line 1757):
    
    # Call to _as_ss(...): (line 1757)
    # Processing the call keyword arguments (line 1757)
    kwargs_268801 = {}
    # Getting the type of 'system' (line 1757)
    system_268799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 14), 'system', False)
    # Obtaining the member '_as_ss' of a type (line 1757)
    _as_ss_268800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1757, 14), system_268799, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 1757)
    _as_ss_call_result_268802 = invoke(stypy.reporting.localization.Localization(__file__, 1757, 14), _as_ss_268800, *[], **kwargs_268801)
    
    # Assigning a type to the variable 'sys' (line 1757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1757, 8), 'sys', _as_ss_call_result_268802)
    # SSA branch for the else part of an if statement (line 1756)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 1758)
    # Processing the call arguments (line 1758)
    # Getting the type of 'system' (line 1758)
    system_268804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 20), 'system', False)
    # Getting the type of 'dlti' (line 1758)
    dlti_268805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 28), 'dlti', False)
    # Processing the call keyword arguments (line 1758)
    kwargs_268806 = {}
    # Getting the type of 'isinstance' (line 1758)
    isinstance_268803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1758)
    isinstance_call_result_268807 = invoke(stypy.reporting.localization.Localization(__file__, 1758, 9), isinstance_268803, *[system_268804, dlti_268805], **kwargs_268806)
    
    # Testing the type of an if condition (line 1758)
    if_condition_268808 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1758, 9), isinstance_call_result_268807)
    # Assigning a type to the variable 'if_condition_268808' (line 1758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1758, 9), 'if_condition_268808', if_condition_268808)
    # SSA begins for if statement (line 1758)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 1759)
    # Processing the call arguments (line 1759)
    str_268810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1759, 29), 'str', 'lsim can only be used with continuous-time systems.')
    # Processing the call keyword arguments (line 1759)
    kwargs_268811 = {}
    # Getting the type of 'AttributeError' (line 1759)
    AttributeError_268809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 14), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 1759)
    AttributeError_call_result_268812 = invoke(stypy.reporting.localization.Localization(__file__, 1759, 14), AttributeError_268809, *[str_268810], **kwargs_268811)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1759, 8), AttributeError_call_result_268812, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 1758)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1762):
    
    # Assigning a Call to a Name (line 1762):
    
    # Call to _as_ss(...): (line 1762)
    # Processing the call keyword arguments (line 1762)
    kwargs_268818 = {}
    
    # Call to lti(...): (line 1762)
    # Getting the type of 'system' (line 1762)
    system_268814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 19), 'system', False)
    # Processing the call keyword arguments (line 1762)
    kwargs_268815 = {}
    # Getting the type of 'lti' (line 1762)
    lti_268813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 14), 'lti', False)
    # Calling lti(args, kwargs) (line 1762)
    lti_call_result_268816 = invoke(stypy.reporting.localization.Localization(__file__, 1762, 14), lti_268813, *[system_268814], **kwargs_268815)
    
    # Obtaining the member '_as_ss' of a type (line 1762)
    _as_ss_268817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 14), lti_call_result_268816, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 1762)
    _as_ss_call_result_268819 = invoke(stypy.reporting.localization.Localization(__file__, 1762, 14), _as_ss_268817, *[], **kwargs_268818)
    
    # Assigning a type to the variable 'sys' (line 1762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'sys', _as_ss_call_result_268819)
    # SSA join for if statement (line 1758)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1756)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1763):
    
    # Assigning a Call to a Name (line 1763):
    
    # Call to atleast_1d(...): (line 1763)
    # Processing the call arguments (line 1763)
    # Getting the type of 'T' (line 1763)
    T_268821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 19), 'T', False)
    # Processing the call keyword arguments (line 1763)
    kwargs_268822 = {}
    # Getting the type of 'atleast_1d' (line 1763)
    atleast_1d_268820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1763)
    atleast_1d_call_result_268823 = invoke(stypy.reporting.localization.Localization(__file__, 1763, 8), atleast_1d_268820, *[T_268821], **kwargs_268822)
    
    # Assigning a type to the variable 'T' (line 1763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 4), 'T', atleast_1d_call_result_268823)
    
    
    
    # Call to len(...): (line 1764)
    # Processing the call arguments (line 1764)
    # Getting the type of 'T' (line 1764)
    T_268825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 11), 'T', False)
    # Obtaining the member 'shape' of a type (line 1764)
    shape_268826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 11), T_268825, 'shape')
    # Processing the call keyword arguments (line 1764)
    kwargs_268827 = {}
    # Getting the type of 'len' (line 1764)
    len_268824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 7), 'len', False)
    # Calling len(args, kwargs) (line 1764)
    len_call_result_268828 = invoke(stypy.reporting.localization.Localization(__file__, 1764, 7), len_268824, *[shape_268826], **kwargs_268827)
    
    int_268829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1764, 23), 'int')
    # Applying the binary operator '!=' (line 1764)
    result_ne_268830 = python_operator(stypy.reporting.localization.Localization(__file__, 1764, 7), '!=', len_call_result_268828, int_268829)
    
    # Testing the type of an if condition (line 1764)
    if_condition_268831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1764, 4), result_ne_268830)
    # Assigning a type to the variable 'if_condition_268831' (line 1764)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 4), 'if_condition_268831', if_condition_268831)
    # SSA begins for if statement (line 1764)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1765)
    # Processing the call arguments (line 1765)
    str_268833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1765, 25), 'str', 'T must be a rank-1 array.')
    # Processing the call keyword arguments (line 1765)
    kwargs_268834 = {}
    # Getting the type of 'ValueError' (line 1765)
    ValueError_268832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1765)
    ValueError_call_result_268835 = invoke(stypy.reporting.localization.Localization(__file__, 1765, 14), ValueError_268832, *[str_268833], **kwargs_268834)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1765, 8), ValueError_call_result_268835, 'raise parameter', BaseException)
    # SSA join for if statement (line 1764)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1767):
    
    # Assigning a Subscript to a Name (line 1767):
    
    # Obtaining the type of the subscript
    int_268836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1767, 4), 'int')
    
    # Call to map(...): (line 1767)
    # Processing the call arguments (line 1767)
    # Getting the type of 'np' (line 1767)
    np_268838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 21), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1767)
    asarray_268839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 21), np_268838, 'asarray')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1767)
    tuple_268840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1767, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1767)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 34), 'sys', False)
    # Obtaining the member 'A' of a type (line 1767)
    A_268842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 34), sys_268841, 'A')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268840, A_268842)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 41), 'sys', False)
    # Obtaining the member 'B' of a type (line 1767)
    B_268844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 41), sys_268843, 'B')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268840, B_268844)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 48), 'sys', False)
    # Obtaining the member 'C' of a type (line 1767)
    C_268846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 48), sys_268845, 'C')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268840, C_268846)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 55), 'sys', False)
    # Obtaining the member 'D' of a type (line 1767)
    D_268848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 55), sys_268847, 'D')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268840, D_268848)
    
    # Processing the call keyword arguments (line 1767)
    kwargs_268849 = {}
    # Getting the type of 'map' (line 1767)
    map_268837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 17), 'map', False)
    # Calling map(args, kwargs) (line 1767)
    map_call_result_268850 = invoke(stypy.reporting.localization.Localization(__file__, 1767, 17), map_268837, *[asarray_268839, tuple_268840], **kwargs_268849)
    
    # Obtaining the member '__getitem__' of a type (line 1767)
    getitem___268851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 4), map_call_result_268850, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1767)
    subscript_call_result_268852 = invoke(stypy.reporting.localization.Localization(__file__, 1767, 4), getitem___268851, int_268836)
    
    # Assigning a type to the variable 'tuple_var_assignment_267118' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'tuple_var_assignment_267118', subscript_call_result_268852)
    
    # Assigning a Subscript to a Name (line 1767):
    
    # Obtaining the type of the subscript
    int_268853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1767, 4), 'int')
    
    # Call to map(...): (line 1767)
    # Processing the call arguments (line 1767)
    # Getting the type of 'np' (line 1767)
    np_268855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 21), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1767)
    asarray_268856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 21), np_268855, 'asarray')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1767)
    tuple_268857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1767, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1767)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 34), 'sys', False)
    # Obtaining the member 'A' of a type (line 1767)
    A_268859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 34), sys_268858, 'A')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268857, A_268859)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 41), 'sys', False)
    # Obtaining the member 'B' of a type (line 1767)
    B_268861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 41), sys_268860, 'B')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268857, B_268861)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 48), 'sys', False)
    # Obtaining the member 'C' of a type (line 1767)
    C_268863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 48), sys_268862, 'C')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268857, C_268863)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 55), 'sys', False)
    # Obtaining the member 'D' of a type (line 1767)
    D_268865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 55), sys_268864, 'D')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268857, D_268865)
    
    # Processing the call keyword arguments (line 1767)
    kwargs_268866 = {}
    # Getting the type of 'map' (line 1767)
    map_268854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 17), 'map', False)
    # Calling map(args, kwargs) (line 1767)
    map_call_result_268867 = invoke(stypy.reporting.localization.Localization(__file__, 1767, 17), map_268854, *[asarray_268856, tuple_268857], **kwargs_268866)
    
    # Obtaining the member '__getitem__' of a type (line 1767)
    getitem___268868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 4), map_call_result_268867, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1767)
    subscript_call_result_268869 = invoke(stypy.reporting.localization.Localization(__file__, 1767, 4), getitem___268868, int_268853)
    
    # Assigning a type to the variable 'tuple_var_assignment_267119' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'tuple_var_assignment_267119', subscript_call_result_268869)
    
    # Assigning a Subscript to a Name (line 1767):
    
    # Obtaining the type of the subscript
    int_268870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1767, 4), 'int')
    
    # Call to map(...): (line 1767)
    # Processing the call arguments (line 1767)
    # Getting the type of 'np' (line 1767)
    np_268872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 21), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1767)
    asarray_268873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 21), np_268872, 'asarray')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1767)
    tuple_268874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1767, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1767)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 34), 'sys', False)
    # Obtaining the member 'A' of a type (line 1767)
    A_268876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 34), sys_268875, 'A')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268874, A_268876)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 41), 'sys', False)
    # Obtaining the member 'B' of a type (line 1767)
    B_268878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 41), sys_268877, 'B')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268874, B_268878)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 48), 'sys', False)
    # Obtaining the member 'C' of a type (line 1767)
    C_268880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 48), sys_268879, 'C')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268874, C_268880)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 55), 'sys', False)
    # Obtaining the member 'D' of a type (line 1767)
    D_268882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 55), sys_268881, 'D')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268874, D_268882)
    
    # Processing the call keyword arguments (line 1767)
    kwargs_268883 = {}
    # Getting the type of 'map' (line 1767)
    map_268871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 17), 'map', False)
    # Calling map(args, kwargs) (line 1767)
    map_call_result_268884 = invoke(stypy.reporting.localization.Localization(__file__, 1767, 17), map_268871, *[asarray_268873, tuple_268874], **kwargs_268883)
    
    # Obtaining the member '__getitem__' of a type (line 1767)
    getitem___268885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 4), map_call_result_268884, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1767)
    subscript_call_result_268886 = invoke(stypy.reporting.localization.Localization(__file__, 1767, 4), getitem___268885, int_268870)
    
    # Assigning a type to the variable 'tuple_var_assignment_267120' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'tuple_var_assignment_267120', subscript_call_result_268886)
    
    # Assigning a Subscript to a Name (line 1767):
    
    # Obtaining the type of the subscript
    int_268887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1767, 4), 'int')
    
    # Call to map(...): (line 1767)
    # Processing the call arguments (line 1767)
    # Getting the type of 'np' (line 1767)
    np_268889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 21), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1767)
    asarray_268890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 21), np_268889, 'asarray')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1767)
    tuple_268891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1767, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1767)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 34), 'sys', False)
    # Obtaining the member 'A' of a type (line 1767)
    A_268893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 34), sys_268892, 'A')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268891, A_268893)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 41), 'sys', False)
    # Obtaining the member 'B' of a type (line 1767)
    B_268895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 41), sys_268894, 'B')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268891, B_268895)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 48), 'sys', False)
    # Obtaining the member 'C' of a type (line 1767)
    C_268897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 48), sys_268896, 'C')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268891, C_268897)
    # Adding element type (line 1767)
    # Getting the type of 'sys' (line 1767)
    sys_268898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 55), 'sys', False)
    # Obtaining the member 'D' of a type (line 1767)
    D_268899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 55), sys_268898, 'D')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1767, 34), tuple_268891, D_268899)
    
    # Processing the call keyword arguments (line 1767)
    kwargs_268900 = {}
    # Getting the type of 'map' (line 1767)
    map_268888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 17), 'map', False)
    # Calling map(args, kwargs) (line 1767)
    map_call_result_268901 = invoke(stypy.reporting.localization.Localization(__file__, 1767, 17), map_268888, *[asarray_268890, tuple_268891], **kwargs_268900)
    
    # Obtaining the member '__getitem__' of a type (line 1767)
    getitem___268902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1767, 4), map_call_result_268901, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1767)
    subscript_call_result_268903 = invoke(stypy.reporting.localization.Localization(__file__, 1767, 4), getitem___268902, int_268887)
    
    # Assigning a type to the variable 'tuple_var_assignment_267121' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'tuple_var_assignment_267121', subscript_call_result_268903)
    
    # Assigning a Name to a Name (line 1767):
    # Getting the type of 'tuple_var_assignment_267118' (line 1767)
    tuple_var_assignment_267118_268904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'tuple_var_assignment_267118')
    # Assigning a type to the variable 'A' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'A', tuple_var_assignment_267118_268904)
    
    # Assigning a Name to a Name (line 1767):
    # Getting the type of 'tuple_var_assignment_267119' (line 1767)
    tuple_var_assignment_267119_268905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'tuple_var_assignment_267119')
    # Assigning a type to the variable 'B' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 7), 'B', tuple_var_assignment_267119_268905)
    
    # Assigning a Name to a Name (line 1767):
    # Getting the type of 'tuple_var_assignment_267120' (line 1767)
    tuple_var_assignment_267120_268906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'tuple_var_assignment_267120')
    # Assigning a type to the variable 'C' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 10), 'C', tuple_var_assignment_267120_268906)
    
    # Assigning a Name to a Name (line 1767):
    # Getting the type of 'tuple_var_assignment_267121' (line 1767)
    tuple_var_assignment_267121_268907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1767, 4), 'tuple_var_assignment_267121')
    # Assigning a type to the variable 'D' (line 1767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1767, 13), 'D', tuple_var_assignment_267121_268907)
    
    # Assigning a Subscript to a Name (line 1768):
    
    # Assigning a Subscript to a Name (line 1768):
    
    # Obtaining the type of the subscript
    int_268908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1768, 23), 'int')
    # Getting the type of 'A' (line 1768)
    A_268909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 15), 'A')
    # Obtaining the member 'shape' of a type (line 1768)
    shape_268910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 15), A_268909, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1768)
    getitem___268911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1768, 15), shape_268910, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1768)
    subscript_call_result_268912 = invoke(stypy.reporting.localization.Localization(__file__, 1768, 15), getitem___268911, int_268908)
    
    # Assigning a type to the variable 'n_states' (line 1768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 4), 'n_states', subscript_call_result_268912)
    
    # Assigning a Subscript to a Name (line 1769):
    
    # Assigning a Subscript to a Name (line 1769):
    
    # Obtaining the type of the subscript
    int_268913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1769, 23), 'int')
    # Getting the type of 'B' (line 1769)
    B_268914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 15), 'B')
    # Obtaining the member 'shape' of a type (line 1769)
    shape_268915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1769, 15), B_268914, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1769)
    getitem___268916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1769, 15), shape_268915, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1769)
    subscript_call_result_268917 = invoke(stypy.reporting.localization.Localization(__file__, 1769, 15), getitem___268916, int_268913)
    
    # Assigning a type to the variable 'n_inputs' (line 1769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1769, 4), 'n_inputs', subscript_call_result_268917)
    
    # Assigning a Attribute to a Name (line 1771):
    
    # Assigning a Attribute to a Name (line 1771):
    # Getting the type of 'T' (line 1771)
    T_268918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 14), 'T')
    # Obtaining the member 'size' of a type (line 1771)
    size_268919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 14), T_268918, 'size')
    # Assigning a type to the variable 'n_steps' (line 1771)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 4), 'n_steps', size_268919)
    
    # Type idiom detected: calculating its left and rigth part (line 1772)
    # Getting the type of 'X0' (line 1772)
    X0_268920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 7), 'X0')
    # Getting the type of 'None' (line 1772)
    None_268921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 13), 'None')
    
    (may_be_268922, more_types_in_union_268923) = may_be_none(X0_268920, None_268921)

    if may_be_268922:

        if more_types_in_union_268923:
            # Runtime conditional SSA (line 1772)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1773):
        
        # Assigning a Call to a Name (line 1773):
        
        # Call to zeros(...): (line 1773)
        # Processing the call arguments (line 1773)
        # Getting the type of 'n_states' (line 1773)
        n_states_268925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 19), 'n_states', False)
        # Getting the type of 'sys' (line 1773)
        sys_268926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 29), 'sys', False)
        # Obtaining the member 'A' of a type (line 1773)
        A_268927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 29), sys_268926, 'A')
        # Obtaining the member 'dtype' of a type (line 1773)
        dtype_268928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 29), A_268927, 'dtype')
        # Processing the call keyword arguments (line 1773)
        kwargs_268929 = {}
        # Getting the type of 'zeros' (line 1773)
        zeros_268924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 13), 'zeros', False)
        # Calling zeros(args, kwargs) (line 1773)
        zeros_call_result_268930 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 13), zeros_268924, *[n_states_268925, dtype_268928], **kwargs_268929)
        
        # Assigning a type to the variable 'X0' (line 1773)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1773, 8), 'X0', zeros_call_result_268930)

        if more_types_in_union_268923:
            # SSA join for if statement (line 1772)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1774):
    
    # Assigning a Call to a Name (line 1774):
    
    # Call to zeros(...): (line 1774)
    # Processing the call arguments (line 1774)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1774)
    tuple_268932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1774, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1774)
    # Adding element type (line 1774)
    # Getting the type of 'n_steps' (line 1774)
    n_steps_268933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 18), 'n_steps', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1774, 18), tuple_268932, n_steps_268933)
    # Adding element type (line 1774)
    # Getting the type of 'n_states' (line 1774)
    n_states_268934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 27), 'n_states', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1774, 18), tuple_268932, n_states_268934)
    
    # Getting the type of 'sys' (line 1774)
    sys_268935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 38), 'sys', False)
    # Obtaining the member 'A' of a type (line 1774)
    A_268936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 38), sys_268935, 'A')
    # Obtaining the member 'dtype' of a type (line 1774)
    dtype_268937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1774, 38), A_268936, 'dtype')
    # Processing the call keyword arguments (line 1774)
    kwargs_268938 = {}
    # Getting the type of 'zeros' (line 1774)
    zeros_268931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 11), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1774)
    zeros_call_result_268939 = invoke(stypy.reporting.localization.Localization(__file__, 1774, 11), zeros_268931, *[tuple_268932, dtype_268937], **kwargs_268938)
    
    # Assigning a type to the variable 'xout' (line 1774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'xout', zeros_call_result_268939)
    
    
    
    # Obtaining the type of the subscript
    int_268940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1776, 9), 'int')
    # Getting the type of 'T' (line 1776)
    T_268941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 7), 'T')
    # Obtaining the member '__getitem__' of a type (line 1776)
    getitem___268942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 7), T_268941, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1776)
    subscript_call_result_268943 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 7), getitem___268942, int_268940)
    
    int_268944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1776, 15), 'int')
    # Applying the binary operator '==' (line 1776)
    result_eq_268945 = python_operator(stypy.reporting.localization.Localization(__file__, 1776, 7), '==', subscript_call_result_268943, int_268944)
    
    # Testing the type of an if condition (line 1776)
    if_condition_268946 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1776, 4), result_eq_268945)
    # Assigning a type to the variable 'if_condition_268946' (line 1776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1776, 4), 'if_condition_268946', if_condition_268946)
    # SSA begins for if statement (line 1776)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 1777):
    
    # Assigning a Name to a Subscript (line 1777):
    # Getting the type of 'X0' (line 1777)
    X0_268947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 18), 'X0')
    # Getting the type of 'xout' (line 1777)
    xout_268948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 8), 'xout')
    int_268949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, 13), 'int')
    # Storing an element on a container (line 1777)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1777, 8), xout_268948, (int_268949, X0_268947))
    # SSA branch for the else part of an if statement (line 1776)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Obtaining the type of the subscript
    int_268950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1778, 11), 'int')
    # Getting the type of 'T' (line 1778)
    T_268951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 9), 'T')
    # Obtaining the member '__getitem__' of a type (line 1778)
    getitem___268952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 9), T_268951, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1778)
    subscript_call_result_268953 = invoke(stypy.reporting.localization.Localization(__file__, 1778, 9), getitem___268952, int_268950)
    
    int_268954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1778, 16), 'int')
    # Applying the binary operator '>' (line 1778)
    result_gt_268955 = python_operator(stypy.reporting.localization.Localization(__file__, 1778, 9), '>', subscript_call_result_268953, int_268954)
    
    # Testing the type of an if condition (line 1778)
    if_condition_268956 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1778, 9), result_gt_268955)
    # Assigning a type to the variable 'if_condition_268956' (line 1778)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 9), 'if_condition_268956', if_condition_268956)
    # SSA begins for if statement (line 1778)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 1780):
    
    # Assigning a Call to a Subscript (line 1780):
    
    # Call to dot(...): (line 1780)
    # Processing the call arguments (line 1780)
    # Getting the type of 'X0' (line 1780)
    X0_268958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 22), 'X0', False)
    
    # Call to expm(...): (line 1780)
    # Processing the call arguments (line 1780)
    
    # Call to transpose(...): (line 1780)
    # Processing the call arguments (line 1780)
    # Getting the type of 'A' (line 1780)
    A_268962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 48), 'A', False)
    # Processing the call keyword arguments (line 1780)
    kwargs_268963 = {}
    # Getting the type of 'transpose' (line 1780)
    transpose_268961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 38), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1780)
    transpose_call_result_268964 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 38), transpose_268961, *[A_268962], **kwargs_268963)
    
    
    # Obtaining the type of the subscript
    int_268965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1780, 55), 'int')
    # Getting the type of 'T' (line 1780)
    T_268966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 53), 'T', False)
    # Obtaining the member '__getitem__' of a type (line 1780)
    getitem___268967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1780, 53), T_268966, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1780)
    subscript_call_result_268968 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 53), getitem___268967, int_268965)
    
    # Applying the binary operator '*' (line 1780)
    result_mul_268969 = python_operator(stypy.reporting.localization.Localization(__file__, 1780, 38), '*', transpose_call_result_268964, subscript_call_result_268968)
    
    # Processing the call keyword arguments (line 1780)
    kwargs_268970 = {}
    # Getting the type of 'linalg' (line 1780)
    linalg_268959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 26), 'linalg', False)
    # Obtaining the member 'expm' of a type (line 1780)
    expm_268960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1780, 26), linalg_268959, 'expm')
    # Calling expm(args, kwargs) (line 1780)
    expm_call_result_268971 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 26), expm_268960, *[result_mul_268969], **kwargs_268970)
    
    # Processing the call keyword arguments (line 1780)
    kwargs_268972 = {}
    # Getting the type of 'dot' (line 1780)
    dot_268957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 18), 'dot', False)
    # Calling dot(args, kwargs) (line 1780)
    dot_call_result_268973 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 18), dot_268957, *[X0_268958, expm_call_result_268971], **kwargs_268972)
    
    # Getting the type of 'xout' (line 1780)
    xout_268974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 8), 'xout')
    int_268975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1780, 13), 'int')
    # Storing an element on a container (line 1780)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1780, 8), xout_268974, (int_268975, dot_call_result_268973))
    # SSA branch for the else part of an if statement (line 1778)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1782)
    # Processing the call arguments (line 1782)
    str_268977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1782, 25), 'str', 'Initial time must be nonnegative')
    # Processing the call keyword arguments (line 1782)
    kwargs_268978 = {}
    # Getting the type of 'ValueError' (line 1782)
    ValueError_268976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1782)
    ValueError_call_result_268979 = invoke(stypy.reporting.localization.Localization(__file__, 1782, 14), ValueError_268976, *[str_268977], **kwargs_268978)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1782, 8), ValueError_call_result_268979, 'raise parameter', BaseException)
    # SSA join for if statement (line 1778)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1776)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BoolOp to a Name (line 1784):
    
    # Assigning a BoolOp to a Name (line 1784):
    
    # Evaluating a boolean operation
    
    # Getting the type of 'U' (line 1784)
    U_268980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 16), 'U')
    # Getting the type of 'None' (line 1784)
    None_268981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 21), 'None')
    # Applying the binary operator 'is' (line 1784)
    result_is__268982 = python_operator(stypy.reporting.localization.Localization(__file__, 1784, 16), 'is', U_268980, None_268981)
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 1785)
    # Processing the call arguments (line 1785)
    # Getting the type of 'U' (line 1785)
    U_268984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 28), 'U', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1785)
    tuple_268985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1785, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1785)
    # Adding element type (line 1785)
    # Getting the type of 'int' (line 1785)
    int_268986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 32), 'int', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1785, 32), tuple_268985, int_268986)
    # Adding element type (line 1785)
    # Getting the type of 'float' (line 1785)
    float_268987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 37), 'float', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1785, 32), tuple_268985, float_268987)
    
    # Processing the call keyword arguments (line 1785)
    kwargs_268988 = {}
    # Getting the type of 'isinstance' (line 1785)
    isinstance_268983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 17), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1785)
    isinstance_call_result_268989 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 17), isinstance_268983, *[U_268984, tuple_268985], **kwargs_268988)
    
    
    # Getting the type of 'U' (line 1785)
    U_268990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 49), 'U')
    float_268991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1785, 54), 'float')
    # Applying the binary operator '==' (line 1785)
    result_eq_268992 = python_operator(stypy.reporting.localization.Localization(__file__, 1785, 49), '==', U_268990, float_268991)
    
    # Applying the binary operator 'and' (line 1785)
    result_and_keyword_268993 = python_operator(stypy.reporting.localization.Localization(__file__, 1785, 17), 'and', isinstance_call_result_268989, result_eq_268992)
    
    # Applying the binary operator 'or' (line 1784)
    result_or_keyword_268994 = python_operator(stypy.reporting.localization.Localization(__file__, 1784, 16), 'or', result_is__268982, result_and_keyword_268993)
    
    
    # Call to any(...): (line 1786)
    # Processing the call arguments (line 1786)
    # Getting the type of 'U' (line 1786)
    U_268997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 27), 'U', False)
    # Processing the call keyword arguments (line 1786)
    kwargs_268998 = {}
    # Getting the type of 'np' (line 1786)
    np_268995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 20), 'np', False)
    # Obtaining the member 'any' of a type (line 1786)
    any_268996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 20), np_268995, 'any')
    # Calling any(args, kwargs) (line 1786)
    any_call_result_268999 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 20), any_268996, *[U_268997], **kwargs_268998)
    
    # Applying the 'not' unary operator (line 1786)
    result_not__269000 = python_operator(stypy.reporting.localization.Localization(__file__, 1786, 16), 'not', any_call_result_268999)
    
    # Applying the binary operator 'or' (line 1784)
    result_or_keyword_269001 = python_operator(stypy.reporting.localization.Localization(__file__, 1784, 16), 'or', result_or_keyword_268994, result_not__269000)
    
    # Assigning a type to the variable 'no_input' (line 1784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 4), 'no_input', result_or_keyword_269001)
    
    
    # Getting the type of 'n_steps' (line 1788)
    n_steps_269002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 7), 'n_steps')
    int_269003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 18), 'int')
    # Applying the binary operator '==' (line 1788)
    result_eq_269004 = python_operator(stypy.reporting.localization.Localization(__file__, 1788, 7), '==', n_steps_269002, int_269003)
    
    # Testing the type of an if condition (line 1788)
    if_condition_269005 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1788, 4), result_eq_269004)
    # Assigning a type to the variable 'if_condition_269005' (line 1788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 4), 'if_condition_269005', if_condition_269005)
    # SSA begins for if statement (line 1788)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1789):
    
    # Assigning a Call to a Name (line 1789):
    
    # Call to squeeze(...): (line 1789)
    # Processing the call arguments (line 1789)
    
    # Call to dot(...): (line 1789)
    # Processing the call arguments (line 1789)
    # Getting the type of 'xout' (line 1789)
    xout_269008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 27), 'xout', False)
    
    # Call to transpose(...): (line 1789)
    # Processing the call arguments (line 1789)
    # Getting the type of 'C' (line 1789)
    C_269010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 43), 'C', False)
    # Processing the call keyword arguments (line 1789)
    kwargs_269011 = {}
    # Getting the type of 'transpose' (line 1789)
    transpose_269009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 33), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1789)
    transpose_call_result_269012 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 33), transpose_269009, *[C_269010], **kwargs_269011)
    
    # Processing the call keyword arguments (line 1789)
    kwargs_269013 = {}
    # Getting the type of 'dot' (line 1789)
    dot_269007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 23), 'dot', False)
    # Calling dot(args, kwargs) (line 1789)
    dot_call_result_269014 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 23), dot_269007, *[xout_269008, transpose_call_result_269012], **kwargs_269013)
    
    # Processing the call keyword arguments (line 1789)
    kwargs_269015 = {}
    # Getting the type of 'squeeze' (line 1789)
    squeeze_269006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 15), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1789)
    squeeze_call_result_269016 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 15), squeeze_269006, *[dot_call_result_269014], **kwargs_269015)
    
    # Assigning a type to the variable 'yout' (line 1789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 8), 'yout', squeeze_call_result_269016)
    
    
    # Getting the type of 'no_input' (line 1790)
    no_input_269017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 15), 'no_input')
    # Applying the 'not' unary operator (line 1790)
    result_not__269018 = python_operator(stypy.reporting.localization.Localization(__file__, 1790, 11), 'not', no_input_269017)
    
    # Testing the type of an if condition (line 1790)
    if_condition_269019 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1790, 8), result_not__269018)
    # Assigning a type to the variable 'if_condition_269019' (line 1790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1790, 8), 'if_condition_269019', if_condition_269019)
    # SSA begins for if statement (line 1790)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'yout' (line 1791)
    yout_269020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 12), 'yout')
    
    # Call to squeeze(...): (line 1791)
    # Processing the call arguments (line 1791)
    
    # Call to dot(...): (line 1791)
    # Processing the call arguments (line 1791)
    # Getting the type of 'U' (line 1791)
    U_269023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 32), 'U', False)
    
    # Call to transpose(...): (line 1791)
    # Processing the call arguments (line 1791)
    # Getting the type of 'D' (line 1791)
    D_269025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 45), 'D', False)
    # Processing the call keyword arguments (line 1791)
    kwargs_269026 = {}
    # Getting the type of 'transpose' (line 1791)
    transpose_269024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 35), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1791)
    transpose_call_result_269027 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 35), transpose_269024, *[D_269025], **kwargs_269026)
    
    # Processing the call keyword arguments (line 1791)
    kwargs_269028 = {}
    # Getting the type of 'dot' (line 1791)
    dot_269022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 28), 'dot', False)
    # Calling dot(args, kwargs) (line 1791)
    dot_call_result_269029 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 28), dot_269022, *[U_269023, transpose_call_result_269027], **kwargs_269028)
    
    # Processing the call keyword arguments (line 1791)
    kwargs_269030 = {}
    # Getting the type of 'squeeze' (line 1791)
    squeeze_269021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 20), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1791)
    squeeze_call_result_269031 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 20), squeeze_269021, *[dot_call_result_269029], **kwargs_269030)
    
    # Applying the binary operator '+=' (line 1791)
    result_iadd_269032 = python_operator(stypy.reporting.localization.Localization(__file__, 1791, 12), '+=', yout_269020, squeeze_call_result_269031)
    # Assigning a type to the variable 'yout' (line 1791)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1791, 12), 'yout', result_iadd_269032)
    
    # SSA join for if statement (line 1790)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1792)
    tuple_269033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1792, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1792)
    # Adding element type (line 1792)
    # Getting the type of 'T' (line 1792)
    T_269034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 15), 'T')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1792, 15), tuple_269033, T_269034)
    # Adding element type (line 1792)
    
    # Call to squeeze(...): (line 1792)
    # Processing the call arguments (line 1792)
    # Getting the type of 'yout' (line 1792)
    yout_269036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 26), 'yout', False)
    # Processing the call keyword arguments (line 1792)
    kwargs_269037 = {}
    # Getting the type of 'squeeze' (line 1792)
    squeeze_269035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 18), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1792)
    squeeze_call_result_269038 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 18), squeeze_269035, *[yout_269036], **kwargs_269037)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1792, 15), tuple_269033, squeeze_call_result_269038)
    # Adding element type (line 1792)
    
    # Call to squeeze(...): (line 1792)
    # Processing the call arguments (line 1792)
    # Getting the type of 'xout' (line 1792)
    xout_269040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 41), 'xout', False)
    # Processing the call keyword arguments (line 1792)
    kwargs_269041 = {}
    # Getting the type of 'squeeze' (line 1792)
    squeeze_269039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 33), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1792)
    squeeze_call_result_269042 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 33), squeeze_269039, *[xout_269040], **kwargs_269041)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1792, 15), tuple_269033, squeeze_call_result_269042)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1792)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 8), 'stypy_return_type', tuple_269033)
    # SSA join for if statement (line 1788)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1794):
    
    # Assigning a BinOp to a Name (line 1794):
    
    # Obtaining the type of the subscript
    int_269043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1794, 11), 'int')
    # Getting the type of 'T' (line 1794)
    T_269044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 9), 'T')
    # Obtaining the member '__getitem__' of a type (line 1794)
    getitem___269045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 9), T_269044, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1794)
    subscript_call_result_269046 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 9), getitem___269045, int_269043)
    
    
    # Obtaining the type of the subscript
    int_269047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1794, 18), 'int')
    # Getting the type of 'T' (line 1794)
    T_269048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 16), 'T')
    # Obtaining the member '__getitem__' of a type (line 1794)
    getitem___269049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 16), T_269048, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1794)
    subscript_call_result_269050 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 16), getitem___269049, int_269047)
    
    # Applying the binary operator '-' (line 1794)
    result_sub_269051 = python_operator(stypy.reporting.localization.Localization(__file__, 1794, 9), '-', subscript_call_result_269046, subscript_call_result_269050)
    
    # Assigning a type to the variable 'dt' (line 1794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1794, 4), 'dt', result_sub_269051)
    
    
    
    # Call to allclose(...): (line 1795)
    # Processing the call arguments (line 1795)
    
    # Obtaining the type of the subscript
    int_269054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, 26), 'int')
    slice_269055 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1795, 24), int_269054, None, None)
    # Getting the type of 'T' (line 1795)
    T_269056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 24), 'T', False)
    # Obtaining the member '__getitem__' of a type (line 1795)
    getitem___269057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 24), T_269056, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1795)
    subscript_call_result_269058 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 24), getitem___269057, slice_269055)
    
    
    # Obtaining the type of the subscript
    int_269059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, 35), 'int')
    slice_269060 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1795, 32), None, int_269059, None)
    # Getting the type of 'T' (line 1795)
    T_269061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 32), 'T', False)
    # Obtaining the member '__getitem__' of a type (line 1795)
    getitem___269062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 32), T_269061, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1795)
    subscript_call_result_269063 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 32), getitem___269062, slice_269060)
    
    # Applying the binary operator '-' (line 1795)
    result_sub_269064 = python_operator(stypy.reporting.localization.Localization(__file__, 1795, 24), '-', subscript_call_result_269058, subscript_call_result_269063)
    
    # Getting the type of 'dt' (line 1795)
    dt_269065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 42), 'dt', False)
    # Applying the binary operator 'div' (line 1795)
    result_div_269066 = python_operator(stypy.reporting.localization.Localization(__file__, 1795, 23), 'div', result_sub_269064, dt_269065)
    
    float_269067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, 46), 'float')
    # Processing the call keyword arguments (line 1795)
    kwargs_269068 = {}
    # Getting the type of 'np' (line 1795)
    np_269052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 11), 'np', False)
    # Obtaining the member 'allclose' of a type (line 1795)
    allclose_269053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 11), np_269052, 'allclose')
    # Calling allclose(args, kwargs) (line 1795)
    allclose_call_result_269069 = invoke(stypy.reporting.localization.Localization(__file__, 1795, 11), allclose_269053, *[result_div_269066, float_269067], **kwargs_269068)
    
    # Applying the 'not' unary operator (line 1795)
    result_not__269070 = python_operator(stypy.reporting.localization.Localization(__file__, 1795, 7), 'not', allclose_call_result_269069)
    
    # Testing the type of an if condition (line 1795)
    if_condition_269071 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1795, 4), result_not__269070)
    # Assigning a type to the variable 'if_condition_269071' (line 1795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 4), 'if_condition_269071', if_condition_269071)
    # SSA begins for if statement (line 1795)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1796)
    # Processing the call arguments (line 1796)
    str_269074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1796, 22), 'str', 'Non-uniform timesteps are deprecated. Results may be slow and/or inaccurate.')
    # Getting the type of 'DeprecationWarning' (line 1797)
    DeprecationWarning_269075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 49), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 1796)
    kwargs_269076 = {}
    # Getting the type of 'warnings' (line 1796)
    warnings_269072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1796)
    warn_269073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 8), warnings_269072, 'warn')
    # Calling warn(args, kwargs) (line 1796)
    warn_call_result_269077 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 8), warn_269073, *[str_269074, DeprecationWarning_269075], **kwargs_269076)
    
    
    # Call to lsim2(...): (line 1798)
    # Processing the call arguments (line 1798)
    # Getting the type of 'system' (line 1798)
    system_269079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 21), 'system', False)
    # Getting the type of 'U' (line 1798)
    U_269080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 29), 'U', False)
    # Getting the type of 'T' (line 1798)
    T_269081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 32), 'T', False)
    # Getting the type of 'X0' (line 1798)
    X0_269082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 35), 'X0', False)
    # Processing the call keyword arguments (line 1798)
    kwargs_269083 = {}
    # Getting the type of 'lsim2' (line 1798)
    lsim2_269078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 15), 'lsim2', False)
    # Calling lsim2(args, kwargs) (line 1798)
    lsim2_call_result_269084 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 15), lsim2_269078, *[system_269079, U_269080, T_269081, X0_269082], **kwargs_269083)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 8), 'stypy_return_type', lsim2_call_result_269084)
    # SSA join for if statement (line 1795)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'no_input' (line 1800)
    no_input_269085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 7), 'no_input')
    # Testing the type of an if condition (line 1800)
    if_condition_269086 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1800, 4), no_input_269085)
    # Assigning a type to the variable 'if_condition_269086' (line 1800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 4), 'if_condition_269086', if_condition_269086)
    # SSA begins for if statement (line 1800)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1803):
    
    # Assigning a Call to a Name (line 1803):
    
    # Call to expm(...): (line 1803)
    # Processing the call arguments (line 1803)
    
    # Call to transpose(...): (line 1803)
    # Processing the call arguments (line 1803)
    # Getting the type of 'A' (line 1803)
    A_269090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 41), 'A', False)
    # Processing the call keyword arguments (line 1803)
    kwargs_269091 = {}
    # Getting the type of 'transpose' (line 1803)
    transpose_269089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 31), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1803)
    transpose_call_result_269092 = invoke(stypy.reporting.localization.Localization(__file__, 1803, 31), transpose_269089, *[A_269090], **kwargs_269091)
    
    # Getting the type of 'dt' (line 1803)
    dt_269093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 46), 'dt', False)
    # Applying the binary operator '*' (line 1803)
    result_mul_269094 = python_operator(stypy.reporting.localization.Localization(__file__, 1803, 31), '*', transpose_call_result_269092, dt_269093)
    
    # Processing the call keyword arguments (line 1803)
    kwargs_269095 = {}
    # Getting the type of 'linalg' (line 1803)
    linalg_269087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 19), 'linalg', False)
    # Obtaining the member 'expm' of a type (line 1803)
    expm_269088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1803, 19), linalg_269087, 'expm')
    # Calling expm(args, kwargs) (line 1803)
    expm_call_result_269096 = invoke(stypy.reporting.localization.Localization(__file__, 1803, 19), expm_269088, *[result_mul_269094], **kwargs_269095)
    
    # Assigning a type to the variable 'expAT_dt' (line 1803)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1803, 8), 'expAT_dt', expm_call_result_269096)
    
    
    # Call to xrange(...): (line 1804)
    # Processing the call arguments (line 1804)
    int_269098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1804, 24), 'int')
    # Getting the type of 'n_steps' (line 1804)
    n_steps_269099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 27), 'n_steps', False)
    # Processing the call keyword arguments (line 1804)
    kwargs_269100 = {}
    # Getting the type of 'xrange' (line 1804)
    xrange_269097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 17), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1804)
    xrange_call_result_269101 = invoke(stypy.reporting.localization.Localization(__file__, 1804, 17), xrange_269097, *[int_269098, n_steps_269099], **kwargs_269100)
    
    # Testing the type of a for loop iterable (line 1804)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1804, 8), xrange_call_result_269101)
    # Getting the type of the for loop variable (line 1804)
    for_loop_var_269102 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1804, 8), xrange_call_result_269101)
    # Assigning a type to the variable 'i' (line 1804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1804, 8), 'i', for_loop_var_269102)
    # SSA begins for a for statement (line 1804)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 1805):
    
    # Assigning a Call to a Subscript (line 1805):
    
    # Call to dot(...): (line 1805)
    # Processing the call arguments (line 1805)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1805)
    i_269104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 31), 'i', False)
    int_269105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1805, 33), 'int')
    # Applying the binary operator '-' (line 1805)
    result_sub_269106 = python_operator(stypy.reporting.localization.Localization(__file__, 1805, 31), '-', i_269104, int_269105)
    
    # Getting the type of 'xout' (line 1805)
    xout_269107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 26), 'xout', False)
    # Obtaining the member '__getitem__' of a type (line 1805)
    getitem___269108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 26), xout_269107, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1805)
    subscript_call_result_269109 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 26), getitem___269108, result_sub_269106)
    
    # Getting the type of 'expAT_dt' (line 1805)
    expAT_dt_269110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 37), 'expAT_dt', False)
    # Processing the call keyword arguments (line 1805)
    kwargs_269111 = {}
    # Getting the type of 'dot' (line 1805)
    dot_269103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 22), 'dot', False)
    # Calling dot(args, kwargs) (line 1805)
    dot_call_result_269112 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 22), dot_269103, *[subscript_call_result_269109, expAT_dt_269110], **kwargs_269111)
    
    # Getting the type of 'xout' (line 1805)
    xout_269113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 12), 'xout')
    # Getting the type of 'i' (line 1805)
    i_269114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 17), 'i')
    # Storing an element on a container (line 1805)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1805, 12), xout_269113, (i_269114, dot_call_result_269112))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1806):
    
    # Assigning a Call to a Name (line 1806):
    
    # Call to squeeze(...): (line 1806)
    # Processing the call arguments (line 1806)
    
    # Call to dot(...): (line 1806)
    # Processing the call arguments (line 1806)
    # Getting the type of 'xout' (line 1806)
    xout_269117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 27), 'xout', False)
    
    # Call to transpose(...): (line 1806)
    # Processing the call arguments (line 1806)
    # Getting the type of 'C' (line 1806)
    C_269119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 43), 'C', False)
    # Processing the call keyword arguments (line 1806)
    kwargs_269120 = {}
    # Getting the type of 'transpose' (line 1806)
    transpose_269118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 33), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1806)
    transpose_call_result_269121 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 33), transpose_269118, *[C_269119], **kwargs_269120)
    
    # Processing the call keyword arguments (line 1806)
    kwargs_269122 = {}
    # Getting the type of 'dot' (line 1806)
    dot_269116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 23), 'dot', False)
    # Calling dot(args, kwargs) (line 1806)
    dot_call_result_269123 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 23), dot_269116, *[xout_269117, transpose_call_result_269121], **kwargs_269122)
    
    # Processing the call keyword arguments (line 1806)
    kwargs_269124 = {}
    # Getting the type of 'squeeze' (line 1806)
    squeeze_269115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 15), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1806)
    squeeze_call_result_269125 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 15), squeeze_269115, *[dot_call_result_269123], **kwargs_269124)
    
    # Assigning a type to the variable 'yout' (line 1806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1806, 8), 'yout', squeeze_call_result_269125)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1807)
    tuple_269126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1807)
    # Adding element type (line 1807)
    # Getting the type of 'T' (line 1807)
    T_269127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 15), 'T')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 15), tuple_269126, T_269127)
    # Adding element type (line 1807)
    
    # Call to squeeze(...): (line 1807)
    # Processing the call arguments (line 1807)
    # Getting the type of 'yout' (line 1807)
    yout_269129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 26), 'yout', False)
    # Processing the call keyword arguments (line 1807)
    kwargs_269130 = {}
    # Getting the type of 'squeeze' (line 1807)
    squeeze_269128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 18), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1807)
    squeeze_call_result_269131 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 18), squeeze_269128, *[yout_269129], **kwargs_269130)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 15), tuple_269126, squeeze_call_result_269131)
    # Adding element type (line 1807)
    
    # Call to squeeze(...): (line 1807)
    # Processing the call arguments (line 1807)
    # Getting the type of 'xout' (line 1807)
    xout_269133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 41), 'xout', False)
    # Processing the call keyword arguments (line 1807)
    kwargs_269134 = {}
    # Getting the type of 'squeeze' (line 1807)
    squeeze_269132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 33), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1807)
    squeeze_call_result_269135 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 33), squeeze_269132, *[xout_269133], **kwargs_269134)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1807, 15), tuple_269126, squeeze_call_result_269135)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1807)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1807, 8), 'stypy_return_type', tuple_269126)
    # SSA join for if statement (line 1800)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1810):
    
    # Assigning a Call to a Name (line 1810):
    
    # Call to atleast_1d(...): (line 1810)
    # Processing the call arguments (line 1810)
    # Getting the type of 'U' (line 1810)
    U_269137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 19), 'U', False)
    # Processing the call keyword arguments (line 1810)
    kwargs_269138 = {}
    # Getting the type of 'atleast_1d' (line 1810)
    atleast_1d_269136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1810)
    atleast_1d_call_result_269139 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 8), atleast_1d_269136, *[U_269137], **kwargs_269138)
    
    # Assigning a type to the variable 'U' (line 1810)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 4), 'U', atleast_1d_call_result_269139)
    
    
    # Getting the type of 'U' (line 1811)
    U_269140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 7), 'U')
    # Obtaining the member 'ndim' of a type (line 1811)
    ndim_269141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 7), U_269140, 'ndim')
    int_269142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 17), 'int')
    # Applying the binary operator '==' (line 1811)
    result_eq_269143 = python_operator(stypy.reporting.localization.Localization(__file__, 1811, 7), '==', ndim_269141, int_269142)
    
    # Testing the type of an if condition (line 1811)
    if_condition_269144 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1811, 4), result_eq_269143)
    # Assigning a type to the variable 'if_condition_269144' (line 1811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 4), 'if_condition_269144', if_condition_269144)
    # SSA begins for if statement (line 1811)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1812):
    
    # Assigning a Subscript to a Name (line 1812):
    
    # Obtaining the type of the subscript
    slice_269145 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1812, 12), None, None, None)
    # Getting the type of 'np' (line 1812)
    np_269146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 17), 'np')
    # Obtaining the member 'newaxis' of a type (line 1812)
    newaxis_269147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 17), np_269146, 'newaxis')
    # Getting the type of 'U' (line 1812)
    U_269148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 12), 'U')
    # Obtaining the member '__getitem__' of a type (line 1812)
    getitem___269149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 12), U_269148, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1812)
    subscript_call_result_269150 = invoke(stypy.reporting.localization.Localization(__file__, 1812, 12), getitem___269149, (slice_269145, newaxis_269147))
    
    # Assigning a type to the variable 'U' (line 1812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 8), 'U', subscript_call_result_269150)
    # SSA join for if statement (line 1811)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_269151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 15), 'int')
    # Getting the type of 'U' (line 1814)
    U_269152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 7), 'U')
    # Obtaining the member 'shape' of a type (line 1814)
    shape_269153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 7), U_269152, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1814)
    getitem___269154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 7), shape_269153, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1814)
    subscript_call_result_269155 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 7), getitem___269154, int_269151)
    
    # Getting the type of 'n_steps' (line 1814)
    n_steps_269156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 21), 'n_steps')
    # Applying the binary operator '!=' (line 1814)
    result_ne_269157 = python_operator(stypy.reporting.localization.Localization(__file__, 1814, 7), '!=', subscript_call_result_269155, n_steps_269156)
    
    # Testing the type of an if condition (line 1814)
    if_condition_269158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1814, 4), result_ne_269157)
    # Assigning a type to the variable 'if_condition_269158' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 4), 'if_condition_269158', if_condition_269158)
    # SSA begins for if statement (line 1814)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1815)
    # Processing the call arguments (line 1815)
    str_269160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 25), 'str', 'U must have the same number of rows as elements in T.')
    # Processing the call keyword arguments (line 1815)
    kwargs_269161 = {}
    # Getting the type of 'ValueError' (line 1815)
    ValueError_269159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1815)
    ValueError_call_result_269162 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 14), ValueError_269159, *[str_269160], **kwargs_269161)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1815, 8), ValueError_call_result_269162, 'raise parameter', BaseException)
    # SSA join for if statement (line 1814)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_269163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1818, 15), 'int')
    # Getting the type of 'U' (line 1818)
    U_269164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 7), 'U')
    # Obtaining the member 'shape' of a type (line 1818)
    shape_269165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1818, 7), U_269164, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1818)
    getitem___269166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1818, 7), shape_269165, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1818)
    subscript_call_result_269167 = invoke(stypy.reporting.localization.Localization(__file__, 1818, 7), getitem___269166, int_269163)
    
    # Getting the type of 'n_inputs' (line 1818)
    n_inputs_269168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 21), 'n_inputs')
    # Applying the binary operator '!=' (line 1818)
    result_ne_269169 = python_operator(stypy.reporting.localization.Localization(__file__, 1818, 7), '!=', subscript_call_result_269167, n_inputs_269168)
    
    # Testing the type of an if condition (line 1818)
    if_condition_269170 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1818, 4), result_ne_269169)
    # Assigning a type to the variable 'if_condition_269170' (line 1818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 4), 'if_condition_269170', if_condition_269170)
    # SSA begins for if statement (line 1818)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1819)
    # Processing the call arguments (line 1819)
    str_269172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1819, 25), 'str', 'System does not define that many inputs.')
    # Processing the call keyword arguments (line 1819)
    kwargs_269173 = {}
    # Getting the type of 'ValueError' (line 1819)
    ValueError_269171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1819)
    ValueError_call_result_269174 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 14), ValueError_269171, *[str_269172], **kwargs_269173)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1819, 8), ValueError_call_result_269174, 'raise parameter', BaseException)
    # SSA join for if statement (line 1818)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'interp' (line 1821)
    interp_269175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 11), 'interp')
    # Applying the 'not' unary operator (line 1821)
    result_not__269176 = python_operator(stypy.reporting.localization.Localization(__file__, 1821, 7), 'not', interp_269175)
    
    # Testing the type of an if condition (line 1821)
    if_condition_269177 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1821, 4), result_not__269176)
    # Assigning a type to the variable 'if_condition_269177' (line 1821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1821, 4), 'if_condition_269177', if_condition_269177)
    # SSA begins for if statement (line 1821)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1830):
    
    # Assigning a Call to a Name (line 1830):
    
    # Call to vstack(...): (line 1830)
    # Processing the call arguments (line 1830)
    
    # Obtaining an instance of the builtin type 'list' (line 1830)
    list_269180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1830)
    # Adding element type (line 1830)
    
    # Call to hstack(...): (line 1830)
    # Processing the call arguments (line 1830)
    
    # Obtaining an instance of the builtin type 'list' (line 1830)
    list_269183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 33), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1830)
    # Adding element type (line 1830)
    # Getting the type of 'A' (line 1830)
    A_269184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 34), 'A', False)
    # Getting the type of 'dt' (line 1830)
    dt_269185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 38), 'dt', False)
    # Applying the binary operator '*' (line 1830)
    result_mul_269186 = python_operator(stypy.reporting.localization.Localization(__file__, 1830, 34), '*', A_269184, dt_269185)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1830, 33), list_269183, result_mul_269186)
    # Adding element type (line 1830)
    # Getting the type of 'B' (line 1830)
    B_269187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 42), 'B', False)
    # Getting the type of 'dt' (line 1830)
    dt_269188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 46), 'dt', False)
    # Applying the binary operator '*' (line 1830)
    result_mul_269189 = python_operator(stypy.reporting.localization.Localization(__file__, 1830, 42), '*', B_269187, dt_269188)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1830, 33), list_269183, result_mul_269189)
    
    # Processing the call keyword arguments (line 1830)
    kwargs_269190 = {}
    # Getting the type of 'np' (line 1830)
    np_269181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 23), 'np', False)
    # Obtaining the member 'hstack' of a type (line 1830)
    hstack_269182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1830, 23), np_269181, 'hstack')
    # Calling hstack(args, kwargs) (line 1830)
    hstack_call_result_269191 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 23), hstack_269182, *[list_269183], **kwargs_269190)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1830, 22), list_269180, hstack_call_result_269191)
    # Adding element type (line 1830)
    
    # Call to zeros(...): (line 1831)
    # Processing the call arguments (line 1831)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1831)
    tuple_269194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1831)
    # Adding element type (line 1831)
    # Getting the type of 'n_inputs' (line 1831)
    n_inputs_269195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 33), 'n_inputs', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1831, 33), tuple_269194, n_inputs_269195)
    # Adding element type (line 1831)
    # Getting the type of 'n_states' (line 1831)
    n_states_269196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 43), 'n_states', False)
    # Getting the type of 'n_inputs' (line 1831)
    n_inputs_269197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 54), 'n_inputs', False)
    # Applying the binary operator '+' (line 1831)
    result_add_269198 = python_operator(stypy.reporting.localization.Localization(__file__, 1831, 43), '+', n_states_269196, n_inputs_269197)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1831, 33), tuple_269194, result_add_269198)
    
    # Processing the call keyword arguments (line 1831)
    kwargs_269199 = {}
    # Getting the type of 'np' (line 1831)
    np_269192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 23), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1831)
    zeros_269193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1831, 23), np_269192, 'zeros')
    # Calling zeros(args, kwargs) (line 1831)
    zeros_call_result_269200 = invoke(stypy.reporting.localization.Localization(__file__, 1831, 23), zeros_269193, *[tuple_269194], **kwargs_269199)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1830, 22), list_269180, zeros_call_result_269200)
    
    # Processing the call keyword arguments (line 1830)
    kwargs_269201 = {}
    # Getting the type of 'np' (line 1830)
    np_269178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 12), 'np', False)
    # Obtaining the member 'vstack' of a type (line 1830)
    vstack_269179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1830, 12), np_269178, 'vstack')
    # Calling vstack(args, kwargs) (line 1830)
    vstack_call_result_269202 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 12), vstack_269179, *[list_269180], **kwargs_269201)
    
    # Assigning a type to the variable 'M' (line 1830)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1830, 8), 'M', vstack_call_result_269202)
    
    # Assigning a Call to a Name (line 1833):
    
    # Assigning a Call to a Name (line 1833):
    
    # Call to expm(...): (line 1833)
    # Processing the call arguments (line 1833)
    
    # Call to transpose(...): (line 1833)
    # Processing the call arguments (line 1833)
    # Getting the type of 'M' (line 1833)
    M_269206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 38), 'M', False)
    # Processing the call keyword arguments (line 1833)
    kwargs_269207 = {}
    # Getting the type of 'transpose' (line 1833)
    transpose_269205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 28), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1833)
    transpose_call_result_269208 = invoke(stypy.reporting.localization.Localization(__file__, 1833, 28), transpose_269205, *[M_269206], **kwargs_269207)
    
    # Processing the call keyword arguments (line 1833)
    kwargs_269209 = {}
    # Getting the type of 'linalg' (line 1833)
    linalg_269203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 16), 'linalg', False)
    # Obtaining the member 'expm' of a type (line 1833)
    expm_269204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1833, 16), linalg_269203, 'expm')
    # Calling expm(args, kwargs) (line 1833)
    expm_call_result_269210 = invoke(stypy.reporting.localization.Localization(__file__, 1833, 16), expm_269204, *[transpose_call_result_269208], **kwargs_269209)
    
    # Assigning a type to the variable 'expMT' (line 1833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1833, 8), 'expMT', expm_call_result_269210)
    
    # Assigning a Subscript to a Name (line 1834):
    
    # Assigning a Subscript to a Name (line 1834):
    
    # Obtaining the type of the subscript
    # Getting the type of 'n_states' (line 1834)
    n_states_269211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 20), 'n_states')
    slice_269212 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1834, 13), None, n_states_269211, None)
    # Getting the type of 'n_states' (line 1834)
    n_states_269213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 31), 'n_states')
    slice_269214 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1834, 13), None, n_states_269213, None)
    # Getting the type of 'expMT' (line 1834)
    expMT_269215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 13), 'expMT')
    # Obtaining the member '__getitem__' of a type (line 1834)
    getitem___269216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1834, 13), expMT_269215, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1834)
    subscript_call_result_269217 = invoke(stypy.reporting.localization.Localization(__file__, 1834, 13), getitem___269216, (slice_269212, slice_269214))
    
    # Assigning a type to the variable 'Ad' (line 1834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 8), 'Ad', subscript_call_result_269217)
    
    # Assigning a Subscript to a Name (line 1835):
    
    # Assigning a Subscript to a Name (line 1835):
    
    # Obtaining the type of the subscript
    # Getting the type of 'n_states' (line 1835)
    n_states_269218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 19), 'n_states')
    slice_269219 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1835, 13), n_states_269218, None, None)
    # Getting the type of 'n_states' (line 1835)
    n_states_269220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 31), 'n_states')
    slice_269221 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1835, 13), None, n_states_269220, None)
    # Getting the type of 'expMT' (line 1835)
    expMT_269222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 13), 'expMT')
    # Obtaining the member '__getitem__' of a type (line 1835)
    getitem___269223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1835, 13), expMT_269222, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1835)
    subscript_call_result_269224 = invoke(stypy.reporting.localization.Localization(__file__, 1835, 13), getitem___269223, (slice_269219, slice_269221))
    
    # Assigning a type to the variable 'Bd' (line 1835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1835, 8), 'Bd', subscript_call_result_269224)
    
    
    # Call to xrange(...): (line 1836)
    # Processing the call arguments (line 1836)
    int_269226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1836, 24), 'int')
    # Getting the type of 'n_steps' (line 1836)
    n_steps_269227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 27), 'n_steps', False)
    # Processing the call keyword arguments (line 1836)
    kwargs_269228 = {}
    # Getting the type of 'xrange' (line 1836)
    xrange_269225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 17), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1836)
    xrange_call_result_269229 = invoke(stypy.reporting.localization.Localization(__file__, 1836, 17), xrange_269225, *[int_269226, n_steps_269227], **kwargs_269228)
    
    # Testing the type of a for loop iterable (line 1836)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1836, 8), xrange_call_result_269229)
    # Getting the type of the for loop variable (line 1836)
    for_loop_var_269230 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1836, 8), xrange_call_result_269229)
    # Assigning a type to the variable 'i' (line 1836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'i', for_loop_var_269230)
    # SSA begins for a for statement (line 1836)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Subscript (line 1837):
    
    # Assigning a BinOp to a Subscript (line 1837):
    
    # Call to dot(...): (line 1837)
    # Processing the call arguments (line 1837)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1837)
    i_269232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 31), 'i', False)
    int_269233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 33), 'int')
    # Applying the binary operator '-' (line 1837)
    result_sub_269234 = python_operator(stypy.reporting.localization.Localization(__file__, 1837, 31), '-', i_269232, int_269233)
    
    # Getting the type of 'xout' (line 1837)
    xout_269235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 26), 'xout', False)
    # Obtaining the member '__getitem__' of a type (line 1837)
    getitem___269236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1837, 26), xout_269235, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1837)
    subscript_call_result_269237 = invoke(stypy.reporting.localization.Localization(__file__, 1837, 26), getitem___269236, result_sub_269234)
    
    # Getting the type of 'Ad' (line 1837)
    Ad_269238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 37), 'Ad', False)
    # Processing the call keyword arguments (line 1837)
    kwargs_269239 = {}
    # Getting the type of 'dot' (line 1837)
    dot_269231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 22), 'dot', False)
    # Calling dot(args, kwargs) (line 1837)
    dot_call_result_269240 = invoke(stypy.reporting.localization.Localization(__file__, 1837, 22), dot_269231, *[subscript_call_result_269237, Ad_269238], **kwargs_269239)
    
    
    # Call to dot(...): (line 1837)
    # Processing the call arguments (line 1837)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1837)
    i_269242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 49), 'i', False)
    int_269243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 51), 'int')
    # Applying the binary operator '-' (line 1837)
    result_sub_269244 = python_operator(stypy.reporting.localization.Localization(__file__, 1837, 49), '-', i_269242, int_269243)
    
    # Getting the type of 'U' (line 1837)
    U_269245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 47), 'U', False)
    # Obtaining the member '__getitem__' of a type (line 1837)
    getitem___269246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1837, 47), U_269245, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1837)
    subscript_call_result_269247 = invoke(stypy.reporting.localization.Localization(__file__, 1837, 47), getitem___269246, result_sub_269244)
    
    # Getting the type of 'Bd' (line 1837)
    Bd_269248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 55), 'Bd', False)
    # Processing the call keyword arguments (line 1837)
    kwargs_269249 = {}
    # Getting the type of 'dot' (line 1837)
    dot_269241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 43), 'dot', False)
    # Calling dot(args, kwargs) (line 1837)
    dot_call_result_269250 = invoke(stypy.reporting.localization.Localization(__file__, 1837, 43), dot_269241, *[subscript_call_result_269247, Bd_269248], **kwargs_269249)
    
    # Applying the binary operator '+' (line 1837)
    result_add_269251 = python_operator(stypy.reporting.localization.Localization(__file__, 1837, 22), '+', dot_call_result_269240, dot_call_result_269250)
    
    # Getting the type of 'xout' (line 1837)
    xout_269252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 12), 'xout')
    # Getting the type of 'i' (line 1837)
    i_269253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 17), 'i')
    # Storing an element on a container (line 1837)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1837, 12), xout_269252, (i_269253, result_add_269251))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1821)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1849):
    
    # Assigning a Call to a Name (line 1849):
    
    # Call to vstack(...): (line 1849)
    # Processing the call arguments (line 1849)
    
    # Obtaining an instance of the builtin type 'list' (line 1849)
    list_269256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1849)
    # Adding element type (line 1849)
    
    # Call to hstack(...): (line 1849)
    # Processing the call arguments (line 1849)
    
    # Obtaining an instance of the builtin type 'list' (line 1849)
    list_269259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 33), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1849)
    # Adding element type (line 1849)
    # Getting the type of 'A' (line 1849)
    A_269260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 34), 'A', False)
    # Getting the type of 'dt' (line 1849)
    dt_269261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 38), 'dt', False)
    # Applying the binary operator '*' (line 1849)
    result_mul_269262 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 34), '*', A_269260, dt_269261)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 33), list_269259, result_mul_269262)
    # Adding element type (line 1849)
    # Getting the type of 'B' (line 1849)
    B_269263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 42), 'B', False)
    # Getting the type of 'dt' (line 1849)
    dt_269264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 46), 'dt', False)
    # Applying the binary operator '*' (line 1849)
    result_mul_269265 = python_operator(stypy.reporting.localization.Localization(__file__, 1849, 42), '*', B_269263, dt_269264)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 33), list_269259, result_mul_269265)
    # Adding element type (line 1849)
    
    # Call to zeros(...): (line 1850)
    # Processing the call arguments (line 1850)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1850)
    tuple_269268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1850, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1850)
    # Adding element type (line 1850)
    # Getting the type of 'n_states' (line 1850)
    n_states_269269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 44), 'n_states', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1850, 44), tuple_269268, n_states_269269)
    # Adding element type (line 1850)
    # Getting the type of 'n_inputs' (line 1850)
    n_inputs_269270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 54), 'n_inputs', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1850, 44), tuple_269268, n_inputs_269270)
    
    # Processing the call keyword arguments (line 1850)
    kwargs_269271 = {}
    # Getting the type of 'np' (line 1850)
    np_269266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 34), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1850)
    zeros_269267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1850, 34), np_269266, 'zeros')
    # Calling zeros(args, kwargs) (line 1850)
    zeros_call_result_269272 = invoke(stypy.reporting.localization.Localization(__file__, 1850, 34), zeros_269267, *[tuple_269268], **kwargs_269271)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 33), list_269259, zeros_call_result_269272)
    
    # Processing the call keyword arguments (line 1849)
    kwargs_269273 = {}
    # Getting the type of 'np' (line 1849)
    np_269257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 23), 'np', False)
    # Obtaining the member 'hstack' of a type (line 1849)
    hstack_269258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 23), np_269257, 'hstack')
    # Calling hstack(args, kwargs) (line 1849)
    hstack_call_result_269274 = invoke(stypy.reporting.localization.Localization(__file__, 1849, 23), hstack_269258, *[list_269259], **kwargs_269273)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 22), list_269256, hstack_call_result_269274)
    # Adding element type (line 1849)
    
    # Call to hstack(...): (line 1851)
    # Processing the call arguments (line 1851)
    
    # Obtaining an instance of the builtin type 'list' (line 1851)
    list_269277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 33), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1851)
    # Adding element type (line 1851)
    
    # Call to zeros(...): (line 1851)
    # Processing the call arguments (line 1851)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1851)
    tuple_269280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1851)
    # Adding element type (line 1851)
    # Getting the type of 'n_inputs' (line 1851)
    n_inputs_269281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 44), 'n_inputs', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1851, 44), tuple_269280, n_inputs_269281)
    # Adding element type (line 1851)
    # Getting the type of 'n_states' (line 1851)
    n_states_269282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 54), 'n_states', False)
    # Getting the type of 'n_inputs' (line 1851)
    n_inputs_269283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 65), 'n_inputs', False)
    # Applying the binary operator '+' (line 1851)
    result_add_269284 = python_operator(stypy.reporting.localization.Localization(__file__, 1851, 54), '+', n_states_269282, n_inputs_269283)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1851, 44), tuple_269280, result_add_269284)
    
    # Processing the call keyword arguments (line 1851)
    kwargs_269285 = {}
    # Getting the type of 'np' (line 1851)
    np_269278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 34), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1851)
    zeros_269279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 34), np_269278, 'zeros')
    # Calling zeros(args, kwargs) (line 1851)
    zeros_call_result_269286 = invoke(stypy.reporting.localization.Localization(__file__, 1851, 34), zeros_269279, *[tuple_269280], **kwargs_269285)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1851, 33), list_269277, zeros_call_result_269286)
    # Adding element type (line 1851)
    
    # Call to identity(...): (line 1852)
    # Processing the call arguments (line 1852)
    # Getting the type of 'n_inputs' (line 1852)
    n_inputs_269289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 46), 'n_inputs', False)
    # Processing the call keyword arguments (line 1852)
    kwargs_269290 = {}
    # Getting the type of 'np' (line 1852)
    np_269287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 34), 'np', False)
    # Obtaining the member 'identity' of a type (line 1852)
    identity_269288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 34), np_269287, 'identity')
    # Calling identity(args, kwargs) (line 1852)
    identity_call_result_269291 = invoke(stypy.reporting.localization.Localization(__file__, 1852, 34), identity_269288, *[n_inputs_269289], **kwargs_269290)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1851, 33), list_269277, identity_call_result_269291)
    
    # Processing the call keyword arguments (line 1851)
    kwargs_269292 = {}
    # Getting the type of 'np' (line 1851)
    np_269275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 23), 'np', False)
    # Obtaining the member 'hstack' of a type (line 1851)
    hstack_269276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 23), np_269275, 'hstack')
    # Calling hstack(args, kwargs) (line 1851)
    hstack_call_result_269293 = invoke(stypy.reporting.localization.Localization(__file__, 1851, 23), hstack_269276, *[list_269277], **kwargs_269292)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 22), list_269256, hstack_call_result_269293)
    # Adding element type (line 1849)
    
    # Call to zeros(...): (line 1853)
    # Processing the call arguments (line 1853)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1853)
    tuple_269296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1853, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1853)
    # Adding element type (line 1853)
    # Getting the type of 'n_inputs' (line 1853)
    n_inputs_269297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 33), 'n_inputs', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1853, 33), tuple_269296, n_inputs_269297)
    # Adding element type (line 1853)
    # Getting the type of 'n_states' (line 1853)
    n_states_269298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 43), 'n_states', False)
    int_269299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1853, 54), 'int')
    # Getting the type of 'n_inputs' (line 1853)
    n_inputs_269300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 58), 'n_inputs', False)
    # Applying the binary operator '*' (line 1853)
    result_mul_269301 = python_operator(stypy.reporting.localization.Localization(__file__, 1853, 54), '*', int_269299, n_inputs_269300)
    
    # Applying the binary operator '+' (line 1853)
    result_add_269302 = python_operator(stypy.reporting.localization.Localization(__file__, 1853, 43), '+', n_states_269298, result_mul_269301)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1853, 33), tuple_269296, result_add_269302)
    
    # Processing the call keyword arguments (line 1853)
    kwargs_269303 = {}
    # Getting the type of 'np' (line 1853)
    np_269294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 23), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1853)
    zeros_269295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1853, 23), np_269294, 'zeros')
    # Calling zeros(args, kwargs) (line 1853)
    zeros_call_result_269304 = invoke(stypy.reporting.localization.Localization(__file__, 1853, 23), zeros_269295, *[tuple_269296], **kwargs_269303)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 22), list_269256, zeros_call_result_269304)
    
    # Processing the call keyword arguments (line 1849)
    kwargs_269305 = {}
    # Getting the type of 'np' (line 1849)
    np_269254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'np', False)
    # Obtaining the member 'vstack' of a type (line 1849)
    vstack_269255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 12), np_269254, 'vstack')
    # Calling vstack(args, kwargs) (line 1849)
    vstack_call_result_269306 = invoke(stypy.reporting.localization.Localization(__file__, 1849, 12), vstack_269255, *[list_269256], **kwargs_269305)
    
    # Assigning a type to the variable 'M' (line 1849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 8), 'M', vstack_call_result_269306)
    
    # Assigning a Call to a Name (line 1854):
    
    # Assigning a Call to a Name (line 1854):
    
    # Call to expm(...): (line 1854)
    # Processing the call arguments (line 1854)
    
    # Call to transpose(...): (line 1854)
    # Processing the call arguments (line 1854)
    # Getting the type of 'M' (line 1854)
    M_269310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 38), 'M', False)
    # Processing the call keyword arguments (line 1854)
    kwargs_269311 = {}
    # Getting the type of 'transpose' (line 1854)
    transpose_269309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 28), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1854)
    transpose_call_result_269312 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 28), transpose_269309, *[M_269310], **kwargs_269311)
    
    # Processing the call keyword arguments (line 1854)
    kwargs_269313 = {}
    # Getting the type of 'linalg' (line 1854)
    linalg_269307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 16), 'linalg', False)
    # Obtaining the member 'expm' of a type (line 1854)
    expm_269308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 16), linalg_269307, 'expm')
    # Calling expm(args, kwargs) (line 1854)
    expm_call_result_269314 = invoke(stypy.reporting.localization.Localization(__file__, 1854, 16), expm_269308, *[transpose_call_result_269312], **kwargs_269313)
    
    # Assigning a type to the variable 'expMT' (line 1854)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 8), 'expMT', expm_call_result_269314)
    
    # Assigning a Subscript to a Name (line 1855):
    
    # Assigning a Subscript to a Name (line 1855):
    
    # Obtaining the type of the subscript
    # Getting the type of 'n_states' (line 1855)
    n_states_269315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 20), 'n_states')
    slice_269316 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1855, 13), None, n_states_269315, None)
    # Getting the type of 'n_states' (line 1855)
    n_states_269317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 31), 'n_states')
    slice_269318 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1855, 13), None, n_states_269317, None)
    # Getting the type of 'expMT' (line 1855)
    expMT_269319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 13), 'expMT')
    # Obtaining the member '__getitem__' of a type (line 1855)
    getitem___269320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 13), expMT_269319, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1855)
    subscript_call_result_269321 = invoke(stypy.reporting.localization.Localization(__file__, 1855, 13), getitem___269320, (slice_269316, slice_269318))
    
    # Assigning a type to the variable 'Ad' (line 1855)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 8), 'Ad', subscript_call_result_269321)
    
    # Assigning a Subscript to a Name (line 1856):
    
    # Assigning a Subscript to a Name (line 1856):
    
    # Obtaining the type of the subscript
    # Getting the type of 'n_states' (line 1856)
    n_states_269322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 20), 'n_states')
    # Getting the type of 'n_inputs' (line 1856)
    n_inputs_269323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 29), 'n_inputs')
    # Applying the binary operator '+' (line 1856)
    result_add_269324 = python_operator(stypy.reporting.localization.Localization(__file__, 1856, 20), '+', n_states_269322, n_inputs_269323)
    
    slice_269325 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1856, 14), result_add_269324, None, None)
    # Getting the type of 'n_states' (line 1856)
    n_states_269326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 41), 'n_states')
    slice_269327 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1856, 14), None, n_states_269326, None)
    # Getting the type of 'expMT' (line 1856)
    expMT_269328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 14), 'expMT')
    # Obtaining the member '__getitem__' of a type (line 1856)
    getitem___269329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 14), expMT_269328, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1856)
    subscript_call_result_269330 = invoke(stypy.reporting.localization.Localization(__file__, 1856, 14), getitem___269329, (slice_269325, slice_269327))
    
    # Assigning a type to the variable 'Bd1' (line 1856)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1856, 8), 'Bd1', subscript_call_result_269330)
    
    # Assigning a BinOp to a Name (line 1857):
    
    # Assigning a BinOp to a Name (line 1857):
    
    # Obtaining the type of the subscript
    # Getting the type of 'n_states' (line 1857)
    n_states_269331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 20), 'n_states')
    # Getting the type of 'n_states' (line 1857)
    n_states_269332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 29), 'n_states')
    # Getting the type of 'n_inputs' (line 1857)
    n_inputs_269333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 40), 'n_inputs')
    # Applying the binary operator '+' (line 1857)
    result_add_269334 = python_operator(stypy.reporting.localization.Localization(__file__, 1857, 29), '+', n_states_269332, n_inputs_269333)
    
    slice_269335 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1857, 14), n_states_269331, result_add_269334, None)
    # Getting the type of 'n_states' (line 1857)
    n_states_269336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 51), 'n_states')
    slice_269337 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1857, 14), None, n_states_269336, None)
    # Getting the type of 'expMT' (line 1857)
    expMT_269338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 14), 'expMT')
    # Obtaining the member '__getitem__' of a type (line 1857)
    getitem___269339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1857, 14), expMT_269338, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1857)
    subscript_call_result_269340 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 14), getitem___269339, (slice_269335, slice_269337))
    
    # Getting the type of 'Bd1' (line 1857)
    Bd1_269341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 63), 'Bd1')
    # Applying the binary operator '-' (line 1857)
    result_sub_269342 = python_operator(stypy.reporting.localization.Localization(__file__, 1857, 14), '-', subscript_call_result_269340, Bd1_269341)
    
    # Assigning a type to the variable 'Bd0' (line 1857)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1857, 8), 'Bd0', result_sub_269342)
    
    
    # Call to xrange(...): (line 1858)
    # Processing the call arguments (line 1858)
    int_269344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1858, 24), 'int')
    # Getting the type of 'n_steps' (line 1858)
    n_steps_269345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 27), 'n_steps', False)
    # Processing the call keyword arguments (line 1858)
    kwargs_269346 = {}
    # Getting the type of 'xrange' (line 1858)
    xrange_269343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 17), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1858)
    xrange_call_result_269347 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 17), xrange_269343, *[int_269344, n_steps_269345], **kwargs_269346)
    
    # Testing the type of a for loop iterable (line 1858)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1858, 8), xrange_call_result_269347)
    # Getting the type of the for loop variable (line 1858)
    for_loop_var_269348 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1858, 8), xrange_call_result_269347)
    # Assigning a type to the variable 'i' (line 1858)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1858, 8), 'i', for_loop_var_269348)
    # SSA begins for a for statement (line 1858)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Subscript (line 1859):
    
    # Assigning a BinOp to a Subscript (line 1859):
    
    # Call to dot(...): (line 1859)
    # Processing the call arguments (line 1859)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1859)
    i_269350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 32), 'i', False)
    int_269351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1859, 34), 'int')
    # Applying the binary operator '-' (line 1859)
    result_sub_269352 = python_operator(stypy.reporting.localization.Localization(__file__, 1859, 32), '-', i_269350, int_269351)
    
    # Getting the type of 'xout' (line 1859)
    xout_269353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 27), 'xout', False)
    # Obtaining the member '__getitem__' of a type (line 1859)
    getitem___269354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1859, 27), xout_269353, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1859)
    subscript_call_result_269355 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 27), getitem___269354, result_sub_269352)
    
    # Getting the type of 'Ad' (line 1859)
    Ad_269356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 38), 'Ad', False)
    # Processing the call keyword arguments (line 1859)
    kwargs_269357 = {}
    # Getting the type of 'dot' (line 1859)
    dot_269349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 23), 'dot', False)
    # Calling dot(args, kwargs) (line 1859)
    dot_call_result_269358 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 23), dot_269349, *[subscript_call_result_269355, Ad_269356], **kwargs_269357)
    
    
    # Call to dot(...): (line 1859)
    # Processing the call arguments (line 1859)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1859)
    i_269360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 50), 'i', False)
    int_269361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1859, 52), 'int')
    # Applying the binary operator '-' (line 1859)
    result_sub_269362 = python_operator(stypy.reporting.localization.Localization(__file__, 1859, 50), '-', i_269360, int_269361)
    
    # Getting the type of 'U' (line 1859)
    U_269363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 48), 'U', False)
    # Obtaining the member '__getitem__' of a type (line 1859)
    getitem___269364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1859, 48), U_269363, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1859)
    subscript_call_result_269365 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 48), getitem___269364, result_sub_269362)
    
    # Getting the type of 'Bd0' (line 1859)
    Bd0_269366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 56), 'Bd0', False)
    # Processing the call keyword arguments (line 1859)
    kwargs_269367 = {}
    # Getting the type of 'dot' (line 1859)
    dot_269359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 44), 'dot', False)
    # Calling dot(args, kwargs) (line 1859)
    dot_call_result_269368 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 44), dot_269359, *[subscript_call_result_269365, Bd0_269366], **kwargs_269367)
    
    # Applying the binary operator '+' (line 1859)
    result_add_269369 = python_operator(stypy.reporting.localization.Localization(__file__, 1859, 23), '+', dot_call_result_269358, dot_call_result_269368)
    
    
    # Call to dot(...): (line 1859)
    # Processing the call arguments (line 1859)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1859)
    i_269371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 69), 'i', False)
    # Getting the type of 'U' (line 1859)
    U_269372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 67), 'U', False)
    # Obtaining the member '__getitem__' of a type (line 1859)
    getitem___269373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1859, 67), U_269372, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1859)
    subscript_call_result_269374 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 67), getitem___269373, i_269371)
    
    # Getting the type of 'Bd1' (line 1859)
    Bd1_269375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 73), 'Bd1', False)
    # Processing the call keyword arguments (line 1859)
    kwargs_269376 = {}
    # Getting the type of 'dot' (line 1859)
    dot_269370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 63), 'dot', False)
    # Calling dot(args, kwargs) (line 1859)
    dot_call_result_269377 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 63), dot_269370, *[subscript_call_result_269374, Bd1_269375], **kwargs_269376)
    
    # Applying the binary operator '+' (line 1859)
    result_add_269378 = python_operator(stypy.reporting.localization.Localization(__file__, 1859, 61), '+', result_add_269369, dot_call_result_269377)
    
    # Getting the type of 'xout' (line 1859)
    xout_269379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 12), 'xout')
    # Getting the type of 'i' (line 1859)
    i_269380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 17), 'i')
    # Storing an element on a container (line 1859)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1859, 12), xout_269379, (i_269380, result_add_269378))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1821)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1861):
    
    # Assigning a BinOp to a Name (line 1861):
    
    # Call to squeeze(...): (line 1861)
    # Processing the call arguments (line 1861)
    
    # Call to dot(...): (line 1861)
    # Processing the call arguments (line 1861)
    # Getting the type of 'xout' (line 1861)
    xout_269383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 24), 'xout', False)
    
    # Call to transpose(...): (line 1861)
    # Processing the call arguments (line 1861)
    # Getting the type of 'C' (line 1861)
    C_269385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 40), 'C', False)
    # Processing the call keyword arguments (line 1861)
    kwargs_269386 = {}
    # Getting the type of 'transpose' (line 1861)
    transpose_269384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 30), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1861)
    transpose_call_result_269387 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 30), transpose_269384, *[C_269385], **kwargs_269386)
    
    # Processing the call keyword arguments (line 1861)
    kwargs_269388 = {}
    # Getting the type of 'dot' (line 1861)
    dot_269382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 20), 'dot', False)
    # Calling dot(args, kwargs) (line 1861)
    dot_call_result_269389 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 20), dot_269382, *[xout_269383, transpose_call_result_269387], **kwargs_269388)
    
    # Processing the call keyword arguments (line 1861)
    kwargs_269390 = {}
    # Getting the type of 'squeeze' (line 1861)
    squeeze_269381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 12), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1861)
    squeeze_call_result_269391 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 12), squeeze_269381, *[dot_call_result_269389], **kwargs_269390)
    
    
    # Call to squeeze(...): (line 1861)
    # Processing the call arguments (line 1861)
    
    # Call to dot(...): (line 1861)
    # Processing the call arguments (line 1861)
    # Getting the type of 'U' (line 1861)
    U_269394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 59), 'U', False)
    
    # Call to transpose(...): (line 1861)
    # Processing the call arguments (line 1861)
    # Getting the type of 'D' (line 1861)
    D_269396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 72), 'D', False)
    # Processing the call keyword arguments (line 1861)
    kwargs_269397 = {}
    # Getting the type of 'transpose' (line 1861)
    transpose_269395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 62), 'transpose', False)
    # Calling transpose(args, kwargs) (line 1861)
    transpose_call_result_269398 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 62), transpose_269395, *[D_269396], **kwargs_269397)
    
    # Processing the call keyword arguments (line 1861)
    kwargs_269399 = {}
    # Getting the type of 'dot' (line 1861)
    dot_269393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 55), 'dot', False)
    # Calling dot(args, kwargs) (line 1861)
    dot_call_result_269400 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 55), dot_269393, *[U_269394, transpose_call_result_269398], **kwargs_269399)
    
    # Processing the call keyword arguments (line 1861)
    kwargs_269401 = {}
    # Getting the type of 'squeeze' (line 1861)
    squeeze_269392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 47), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1861)
    squeeze_call_result_269402 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 47), squeeze_269392, *[dot_call_result_269400], **kwargs_269401)
    
    # Applying the binary operator '+' (line 1861)
    result_add_269403 = python_operator(stypy.reporting.localization.Localization(__file__, 1861, 12), '+', squeeze_call_result_269391, squeeze_call_result_269402)
    
    # Assigning a type to the variable 'yout' (line 1861)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1861, 4), 'yout', result_add_269403)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1862)
    tuple_269404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1862, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1862)
    # Adding element type (line 1862)
    # Getting the type of 'T' (line 1862)
    T_269405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 11), 'T')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1862, 11), tuple_269404, T_269405)
    # Adding element type (line 1862)
    
    # Call to squeeze(...): (line 1862)
    # Processing the call arguments (line 1862)
    # Getting the type of 'yout' (line 1862)
    yout_269407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 22), 'yout', False)
    # Processing the call keyword arguments (line 1862)
    kwargs_269408 = {}
    # Getting the type of 'squeeze' (line 1862)
    squeeze_269406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 14), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1862)
    squeeze_call_result_269409 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 14), squeeze_269406, *[yout_269407], **kwargs_269408)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1862, 11), tuple_269404, squeeze_call_result_269409)
    # Adding element type (line 1862)
    
    # Call to squeeze(...): (line 1862)
    # Processing the call arguments (line 1862)
    # Getting the type of 'xout' (line 1862)
    xout_269411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 37), 'xout', False)
    # Processing the call keyword arguments (line 1862)
    kwargs_269412 = {}
    # Getting the type of 'squeeze' (line 1862)
    squeeze_269410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 29), 'squeeze', False)
    # Calling squeeze(args, kwargs) (line 1862)
    squeeze_call_result_269413 = invoke(stypy.reporting.localization.Localization(__file__, 1862, 29), squeeze_269410, *[xout_269411], **kwargs_269412)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1862, 11), tuple_269404, squeeze_call_result_269413)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1862)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 4), 'stypy_return_type', tuple_269404)
    
    # ################# End of 'lsim(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lsim' in the type store
    # Getting the type of 'stypy_return_type' (line 1700)
    stypy_return_type_269414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_269414)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lsim'
    return stypy_return_type_269414

# Assigning a type to the variable 'lsim' (line 1700)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1700, 0), 'lsim', lsim)

@norecursion
def _default_response_times(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_default_response_times'
    module_type_store = module_type_store.open_function_context('_default_response_times', 1865, 0, False)
    
    # Passed parameters checking function
    _default_response_times.stypy_localization = localization
    _default_response_times.stypy_type_of_self = None
    _default_response_times.stypy_type_store = module_type_store
    _default_response_times.stypy_function_name = '_default_response_times'
    _default_response_times.stypy_param_names_list = ['A', 'n']
    _default_response_times.stypy_varargs_param_name = None
    _default_response_times.stypy_kwargs_param_name = None
    _default_response_times.stypy_call_defaults = defaults
    _default_response_times.stypy_call_varargs = varargs
    _default_response_times.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_default_response_times', ['A', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_default_response_times', localization, ['A', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_default_response_times(...)' code ##################

    str_269415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, (-1)), 'str', 'Compute a reasonable set of time samples for the response time.\n\n    This function is used by `impulse`, `impulse2`, `step` and `step2`\n    to compute the response time when the `T` argument to the function\n    is None.\n\n    Parameters\n    ----------\n    A : array_like\n        The system matrix, which is square.\n    n : int\n        The number of time samples to generate.\n\n    Returns\n    -------\n    t : ndarray\n        The 1-D array of length `n` of time samples at which the response\n        is to be computed.\n    ')
    
    # Assigning a Call to a Name (line 1888):
    
    # Assigning a Call to a Name (line 1888):
    
    # Call to eigvals(...): (line 1888)
    # Processing the call arguments (line 1888)
    # Getting the type of 'A' (line 1888)
    A_269418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 26), 'A', False)
    # Processing the call keyword arguments (line 1888)
    kwargs_269419 = {}
    # Getting the type of 'linalg' (line 1888)
    linalg_269416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 11), 'linalg', False)
    # Obtaining the member 'eigvals' of a type (line 1888)
    eigvals_269417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1888, 11), linalg_269416, 'eigvals')
    # Calling eigvals(args, kwargs) (line 1888)
    eigvals_call_result_269420 = invoke(stypy.reporting.localization.Localization(__file__, 1888, 11), eigvals_269417, *[A_269418], **kwargs_269419)
    
    # Assigning a type to the variable 'vals' (line 1888)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1888, 4), 'vals', eigvals_call_result_269420)
    
    # Assigning a Call to a Name (line 1889):
    
    # Assigning a Call to a Name (line 1889):
    
    # Call to min(...): (line 1889)
    # Processing the call arguments (line 1889)
    
    # Call to abs(...): (line 1889)
    # Processing the call arguments (line 1889)
    
    # Call to real(...): (line 1889)
    # Processing the call arguments (line 1889)
    # Getting the type of 'vals' (line 1889)
    vals_269424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 21), 'vals', False)
    # Processing the call keyword arguments (line 1889)
    kwargs_269425 = {}
    # Getting the type of 'real' (line 1889)
    real_269423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 16), 'real', False)
    # Calling real(args, kwargs) (line 1889)
    real_call_result_269426 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 16), real_269423, *[vals_269424], **kwargs_269425)
    
    # Processing the call keyword arguments (line 1889)
    kwargs_269427 = {}
    # Getting the type of 'abs' (line 1889)
    abs_269422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 12), 'abs', False)
    # Calling abs(args, kwargs) (line 1889)
    abs_call_result_269428 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 12), abs_269422, *[real_call_result_269426], **kwargs_269427)
    
    # Processing the call keyword arguments (line 1889)
    kwargs_269429 = {}
    # Getting the type of 'min' (line 1889)
    min_269421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 8), 'min', False)
    # Calling min(args, kwargs) (line 1889)
    min_call_result_269430 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 8), min_269421, *[abs_call_result_269428], **kwargs_269429)
    
    # Assigning a type to the variable 'r' (line 1889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 4), 'r', min_call_result_269430)
    
    
    # Getting the type of 'r' (line 1890)
    r_269431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 7), 'r')
    float_269432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1890, 12), 'float')
    # Applying the binary operator '==' (line 1890)
    result_eq_269433 = python_operator(stypy.reporting.localization.Localization(__file__, 1890, 7), '==', r_269431, float_269432)
    
    # Testing the type of an if condition (line 1890)
    if_condition_269434 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1890, 4), result_eq_269433)
    # Assigning a type to the variable 'if_condition_269434' (line 1890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1890, 4), 'if_condition_269434', if_condition_269434)
    # SSA begins for if statement (line 1890)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 1891):
    
    # Assigning a Num to a Name (line 1891):
    float_269435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1891, 12), 'float')
    # Assigning a type to the variable 'r' (line 1891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1891, 8), 'r', float_269435)
    # SSA join for if statement (line 1890)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1892):
    
    # Assigning a BinOp to a Name (line 1892):
    float_269436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 9), 'float')
    # Getting the type of 'r' (line 1892)
    r_269437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 15), 'r')
    # Applying the binary operator 'div' (line 1892)
    result_div_269438 = python_operator(stypy.reporting.localization.Localization(__file__, 1892, 9), 'div', float_269436, r_269437)
    
    # Assigning a type to the variable 'tc' (line 1892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 4), 'tc', result_div_269438)
    
    # Assigning a Call to a Name (line 1893):
    
    # Assigning a Call to a Name (line 1893):
    
    # Call to linspace(...): (line 1893)
    # Processing the call arguments (line 1893)
    float_269440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1893, 17), 'float')
    int_269441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1893, 22), 'int')
    # Getting the type of 'tc' (line 1893)
    tc_269442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 26), 'tc', False)
    # Applying the binary operator '*' (line 1893)
    result_mul_269443 = python_operator(stypy.reporting.localization.Localization(__file__, 1893, 22), '*', int_269441, tc_269442)
    
    # Getting the type of 'n' (line 1893)
    n_269444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 30), 'n', False)
    # Processing the call keyword arguments (line 1893)
    kwargs_269445 = {}
    # Getting the type of 'linspace' (line 1893)
    linspace_269439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 8), 'linspace', False)
    # Calling linspace(args, kwargs) (line 1893)
    linspace_call_result_269446 = invoke(stypy.reporting.localization.Localization(__file__, 1893, 8), linspace_269439, *[float_269440, result_mul_269443, n_269444], **kwargs_269445)
    
    # Assigning a type to the variable 't' (line 1893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1893, 4), 't', linspace_call_result_269446)
    # Getting the type of 't' (line 1894)
    t_269447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 11), 't')
    # Assigning a type to the variable 'stypy_return_type' (line 1894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 4), 'stypy_return_type', t_269447)
    
    # ################# End of '_default_response_times(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_default_response_times' in the type store
    # Getting the type of 'stypy_return_type' (line 1865)
    stypy_return_type_269448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_269448)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_default_response_times'
    return stypy_return_type_269448

# Assigning a type to the variable '_default_response_times' (line 1865)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 0), '_default_response_times', _default_response_times)

@norecursion
def impulse(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1897)
    None_269449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 23), 'None')
    # Getting the type of 'None' (line 1897)
    None_269450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 31), 'None')
    # Getting the type of 'None' (line 1897)
    None_269451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 39), 'None')
    defaults = [None_269449, None_269450, None_269451]
    # Create a new context for function 'impulse'
    module_type_store = module_type_store.open_function_context('impulse', 1897, 0, False)
    
    # Passed parameters checking function
    impulse.stypy_localization = localization
    impulse.stypy_type_of_self = None
    impulse.stypy_type_store = module_type_store
    impulse.stypy_function_name = 'impulse'
    impulse.stypy_param_names_list = ['system', 'X0', 'T', 'N']
    impulse.stypy_varargs_param_name = None
    impulse.stypy_kwargs_param_name = None
    impulse.stypy_call_defaults = defaults
    impulse.stypy_call_varargs = varargs
    impulse.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'impulse', ['system', 'X0', 'T', 'N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'impulse', localization, ['system', 'X0', 'T', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'impulse(...)' code ##################

    str_269452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1933, (-1)), 'str', 'Impulse response of continuous-time system.\n\n    Parameters\n    ----------\n    system : an instance of the LTI class or a tuple of array_like\n        describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n            * 1 (instance of `lti`)\n            * 2 (num, den)\n            * 3 (zeros, poles, gain)\n            * 4 (A, B, C, D)\n\n    X0 : array_like, optional\n        Initial state-vector.  Defaults to zero.\n    T : array_like, optional\n        Time points.  Computed if not given.\n    N : int, optional\n        The number of time points to compute (if `T` is not given).\n\n    Returns\n    -------\n    T : ndarray\n        A 1-D array of time points.\n    yout : ndarray\n        A 1-D array containing the impulse response of the system (except for\n        singularities at zero).\n\n    Notes\n    -----\n    If (num, den) is passed in for ``system``, coefficients for both the\n    numerator and denominator should be specified in descending exponent\n    order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).\n\n    ')
    
    
    # Call to isinstance(...): (line 1934)
    # Processing the call arguments (line 1934)
    # Getting the type of 'system' (line 1934)
    system_269454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 18), 'system', False)
    # Getting the type of 'lti' (line 1934)
    lti_269455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 26), 'lti', False)
    # Processing the call keyword arguments (line 1934)
    kwargs_269456 = {}
    # Getting the type of 'isinstance' (line 1934)
    isinstance_269453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1934)
    isinstance_call_result_269457 = invoke(stypy.reporting.localization.Localization(__file__, 1934, 7), isinstance_269453, *[system_269454, lti_269455], **kwargs_269456)
    
    # Testing the type of an if condition (line 1934)
    if_condition_269458 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1934, 4), isinstance_call_result_269457)
    # Assigning a type to the variable 'if_condition_269458' (line 1934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1934, 4), 'if_condition_269458', if_condition_269458)
    # SSA begins for if statement (line 1934)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1935):
    
    # Assigning a Call to a Name (line 1935):
    
    # Call to _as_ss(...): (line 1935)
    # Processing the call keyword arguments (line 1935)
    kwargs_269461 = {}
    # Getting the type of 'system' (line 1935)
    system_269459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 14), 'system', False)
    # Obtaining the member '_as_ss' of a type (line 1935)
    _as_ss_269460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1935, 14), system_269459, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 1935)
    _as_ss_call_result_269462 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 14), _as_ss_269460, *[], **kwargs_269461)
    
    # Assigning a type to the variable 'sys' (line 1935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'sys', _as_ss_call_result_269462)
    # SSA branch for the else part of an if statement (line 1934)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 1936)
    # Processing the call arguments (line 1936)
    # Getting the type of 'system' (line 1936)
    system_269464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 20), 'system', False)
    # Getting the type of 'dlti' (line 1936)
    dlti_269465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 28), 'dlti', False)
    # Processing the call keyword arguments (line 1936)
    kwargs_269466 = {}
    # Getting the type of 'isinstance' (line 1936)
    isinstance_269463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1936)
    isinstance_call_result_269467 = invoke(stypy.reporting.localization.Localization(__file__, 1936, 9), isinstance_269463, *[system_269464, dlti_269465], **kwargs_269466)
    
    # Testing the type of an if condition (line 1936)
    if_condition_269468 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1936, 9), isinstance_call_result_269467)
    # Assigning a type to the variable 'if_condition_269468' (line 1936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 9), 'if_condition_269468', if_condition_269468)
    # SSA begins for if statement (line 1936)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 1937)
    # Processing the call arguments (line 1937)
    str_269470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1937, 29), 'str', 'impulse can only be used with continuous-time systems.')
    # Processing the call keyword arguments (line 1937)
    kwargs_269471 = {}
    # Getting the type of 'AttributeError' (line 1937)
    AttributeError_269469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 14), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 1937)
    AttributeError_call_result_269472 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 14), AttributeError_269469, *[str_269470], **kwargs_269471)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1937, 8), AttributeError_call_result_269472, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 1936)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1940):
    
    # Assigning a Call to a Name (line 1940):
    
    # Call to _as_ss(...): (line 1940)
    # Processing the call keyword arguments (line 1940)
    kwargs_269478 = {}
    
    # Call to lti(...): (line 1940)
    # Getting the type of 'system' (line 1940)
    system_269474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 19), 'system', False)
    # Processing the call keyword arguments (line 1940)
    kwargs_269475 = {}
    # Getting the type of 'lti' (line 1940)
    lti_269473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 14), 'lti', False)
    # Calling lti(args, kwargs) (line 1940)
    lti_call_result_269476 = invoke(stypy.reporting.localization.Localization(__file__, 1940, 14), lti_269473, *[system_269474], **kwargs_269475)
    
    # Obtaining the member '_as_ss' of a type (line 1940)
    _as_ss_269477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1940, 14), lti_call_result_269476, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 1940)
    _as_ss_call_result_269479 = invoke(stypy.reporting.localization.Localization(__file__, 1940, 14), _as_ss_269477, *[], **kwargs_269478)
    
    # Assigning a type to the variable 'sys' (line 1940)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1940, 8), 'sys', _as_ss_call_result_269479)
    # SSA join for if statement (line 1936)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1934)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1941)
    # Getting the type of 'X0' (line 1941)
    X0_269480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 7), 'X0')
    # Getting the type of 'None' (line 1941)
    None_269481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 13), 'None')
    
    (may_be_269482, more_types_in_union_269483) = may_be_none(X0_269480, None_269481)

    if may_be_269482:

        if more_types_in_union_269483:
            # Runtime conditional SSA (line 1941)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1942):
        
        # Assigning a Call to a Name (line 1942):
        
        # Call to squeeze(...): (line 1942)
        # Processing the call arguments (line 1942)
        # Getting the type of 'sys' (line 1942)
        sys_269485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 20), 'sys', False)
        # Obtaining the member 'B' of a type (line 1942)
        B_269486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1942, 20), sys_269485, 'B')
        # Processing the call keyword arguments (line 1942)
        kwargs_269487 = {}
        # Getting the type of 'squeeze' (line 1942)
        squeeze_269484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 12), 'squeeze', False)
        # Calling squeeze(args, kwargs) (line 1942)
        squeeze_call_result_269488 = invoke(stypy.reporting.localization.Localization(__file__, 1942, 12), squeeze_269484, *[B_269486], **kwargs_269487)
        
        # Assigning a type to the variable 'X' (line 1942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 8), 'X', squeeze_call_result_269488)

        if more_types_in_union_269483:
            # Runtime conditional SSA for else branch (line 1941)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_269482) or more_types_in_union_269483):
        
        # Assigning a Call to a Name (line 1944):
        
        # Assigning a Call to a Name (line 1944):
        
        # Call to squeeze(...): (line 1944)
        # Processing the call arguments (line 1944)
        # Getting the type of 'sys' (line 1944)
        sys_269490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 20), 'sys', False)
        # Obtaining the member 'B' of a type (line 1944)
        B_269491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1944, 20), sys_269490, 'B')
        # Getting the type of 'X0' (line 1944)
        X0_269492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 28), 'X0', False)
        # Applying the binary operator '+' (line 1944)
        result_add_269493 = python_operator(stypy.reporting.localization.Localization(__file__, 1944, 20), '+', B_269491, X0_269492)
        
        # Processing the call keyword arguments (line 1944)
        kwargs_269494 = {}
        # Getting the type of 'squeeze' (line 1944)
        squeeze_269489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 12), 'squeeze', False)
        # Calling squeeze(args, kwargs) (line 1944)
        squeeze_call_result_269495 = invoke(stypy.reporting.localization.Localization(__file__, 1944, 12), squeeze_269489, *[result_add_269493], **kwargs_269494)
        
        # Assigning a type to the variable 'X' (line 1944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1944, 8), 'X', squeeze_call_result_269495)

        if (may_be_269482 and more_types_in_union_269483):
            # SSA join for if statement (line 1941)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1945)
    # Getting the type of 'N' (line 1945)
    N_269496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 7), 'N')
    # Getting the type of 'None' (line 1945)
    None_269497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 12), 'None')
    
    (may_be_269498, more_types_in_union_269499) = may_be_none(N_269496, None_269497)

    if may_be_269498:

        if more_types_in_union_269499:
            # Runtime conditional SSA (line 1945)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 1946):
        
        # Assigning a Num to a Name (line 1946):
        int_269500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1946, 12), 'int')
        # Assigning a type to the variable 'N' (line 1946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1946, 8), 'N', int_269500)

        if more_types_in_union_269499:
            # SSA join for if statement (line 1945)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1947)
    # Getting the type of 'T' (line 1947)
    T_269501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 7), 'T')
    # Getting the type of 'None' (line 1947)
    None_269502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 12), 'None')
    
    (may_be_269503, more_types_in_union_269504) = may_be_none(T_269501, None_269502)

    if may_be_269503:

        if more_types_in_union_269504:
            # Runtime conditional SSA (line 1947)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1948):
        
        # Assigning a Call to a Name (line 1948):
        
        # Call to _default_response_times(...): (line 1948)
        # Processing the call arguments (line 1948)
        # Getting the type of 'sys' (line 1948)
        sys_269506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 36), 'sys', False)
        # Obtaining the member 'A' of a type (line 1948)
        A_269507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1948, 36), sys_269506, 'A')
        # Getting the type of 'N' (line 1948)
        N_269508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 43), 'N', False)
        # Processing the call keyword arguments (line 1948)
        kwargs_269509 = {}
        # Getting the type of '_default_response_times' (line 1948)
        _default_response_times_269505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 12), '_default_response_times', False)
        # Calling _default_response_times(args, kwargs) (line 1948)
        _default_response_times_call_result_269510 = invoke(stypy.reporting.localization.Localization(__file__, 1948, 12), _default_response_times_269505, *[A_269507, N_269508], **kwargs_269509)
        
        # Assigning a type to the variable 'T' (line 1948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1948, 8), 'T', _default_response_times_call_result_269510)

        if more_types_in_union_269504:
            # Runtime conditional SSA for else branch (line 1947)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_269503) or more_types_in_union_269504):
        
        # Assigning a Call to a Name (line 1950):
        
        # Assigning a Call to a Name (line 1950):
        
        # Call to asarray(...): (line 1950)
        # Processing the call arguments (line 1950)
        # Getting the type of 'T' (line 1950)
        T_269512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 20), 'T', False)
        # Processing the call keyword arguments (line 1950)
        kwargs_269513 = {}
        # Getting the type of 'asarray' (line 1950)
        asarray_269511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 12), 'asarray', False)
        # Calling asarray(args, kwargs) (line 1950)
        asarray_call_result_269514 = invoke(stypy.reporting.localization.Localization(__file__, 1950, 12), asarray_269511, *[T_269512], **kwargs_269513)
        
        # Assigning a type to the variable 'T' (line 1950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1950, 8), 'T', asarray_call_result_269514)

        if (may_be_269503 and more_types_in_union_269504):
            # SSA join for if statement (line 1947)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 1952):
    
    # Assigning a Subscript to a Name (line 1952):
    
    # Obtaining the type of the subscript
    int_269515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 4), 'int')
    
    # Call to lsim(...): (line 1952)
    # Processing the call arguments (line 1952)
    # Getting the type of 'sys' (line 1952)
    sys_269517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 19), 'sys', False)
    float_269518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 24), 'float')
    # Getting the type of 'T' (line 1952)
    T_269519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 28), 'T', False)
    # Getting the type of 'X' (line 1952)
    X_269520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 31), 'X', False)
    # Processing the call keyword arguments (line 1952)
    # Getting the type of 'False' (line 1952)
    False_269521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 41), 'False', False)
    keyword_269522 = False_269521
    kwargs_269523 = {'interp': keyword_269522}
    # Getting the type of 'lsim' (line 1952)
    lsim_269516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 14), 'lsim', False)
    # Calling lsim(args, kwargs) (line 1952)
    lsim_call_result_269524 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 14), lsim_269516, *[sys_269517, float_269518, T_269519, X_269520], **kwargs_269523)
    
    # Obtaining the member '__getitem__' of a type (line 1952)
    getitem___269525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 4), lsim_call_result_269524, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1952)
    subscript_call_result_269526 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 4), getitem___269525, int_269515)
    
    # Assigning a type to the variable 'tuple_var_assignment_267122' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 4), 'tuple_var_assignment_267122', subscript_call_result_269526)
    
    # Assigning a Subscript to a Name (line 1952):
    
    # Obtaining the type of the subscript
    int_269527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 4), 'int')
    
    # Call to lsim(...): (line 1952)
    # Processing the call arguments (line 1952)
    # Getting the type of 'sys' (line 1952)
    sys_269529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 19), 'sys', False)
    float_269530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 24), 'float')
    # Getting the type of 'T' (line 1952)
    T_269531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 28), 'T', False)
    # Getting the type of 'X' (line 1952)
    X_269532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 31), 'X', False)
    # Processing the call keyword arguments (line 1952)
    # Getting the type of 'False' (line 1952)
    False_269533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 41), 'False', False)
    keyword_269534 = False_269533
    kwargs_269535 = {'interp': keyword_269534}
    # Getting the type of 'lsim' (line 1952)
    lsim_269528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 14), 'lsim', False)
    # Calling lsim(args, kwargs) (line 1952)
    lsim_call_result_269536 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 14), lsim_269528, *[sys_269529, float_269530, T_269531, X_269532], **kwargs_269535)
    
    # Obtaining the member '__getitem__' of a type (line 1952)
    getitem___269537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 4), lsim_call_result_269536, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1952)
    subscript_call_result_269538 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 4), getitem___269537, int_269527)
    
    # Assigning a type to the variable 'tuple_var_assignment_267123' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 4), 'tuple_var_assignment_267123', subscript_call_result_269538)
    
    # Assigning a Subscript to a Name (line 1952):
    
    # Obtaining the type of the subscript
    int_269539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 4), 'int')
    
    # Call to lsim(...): (line 1952)
    # Processing the call arguments (line 1952)
    # Getting the type of 'sys' (line 1952)
    sys_269541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 19), 'sys', False)
    float_269542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 24), 'float')
    # Getting the type of 'T' (line 1952)
    T_269543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 28), 'T', False)
    # Getting the type of 'X' (line 1952)
    X_269544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 31), 'X', False)
    # Processing the call keyword arguments (line 1952)
    # Getting the type of 'False' (line 1952)
    False_269545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 41), 'False', False)
    keyword_269546 = False_269545
    kwargs_269547 = {'interp': keyword_269546}
    # Getting the type of 'lsim' (line 1952)
    lsim_269540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 14), 'lsim', False)
    # Calling lsim(args, kwargs) (line 1952)
    lsim_call_result_269548 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 14), lsim_269540, *[sys_269541, float_269542, T_269543, X_269544], **kwargs_269547)
    
    # Obtaining the member '__getitem__' of a type (line 1952)
    getitem___269549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 4), lsim_call_result_269548, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1952)
    subscript_call_result_269550 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 4), getitem___269549, int_269539)
    
    # Assigning a type to the variable 'tuple_var_assignment_267124' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 4), 'tuple_var_assignment_267124', subscript_call_result_269550)
    
    # Assigning a Name to a Name (line 1952):
    # Getting the type of 'tuple_var_assignment_267122' (line 1952)
    tuple_var_assignment_267122_269551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 4), 'tuple_var_assignment_267122')
    # Assigning a type to the variable '_' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 4), '_', tuple_var_assignment_267122_269551)
    
    # Assigning a Name to a Name (line 1952):
    # Getting the type of 'tuple_var_assignment_267123' (line 1952)
    tuple_var_assignment_267123_269552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 4), 'tuple_var_assignment_267123')
    # Assigning a type to the variable 'h' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 7), 'h', tuple_var_assignment_267123_269552)
    
    # Assigning a Name to a Name (line 1952):
    # Getting the type of 'tuple_var_assignment_267124' (line 1952)
    tuple_var_assignment_267124_269553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 4), 'tuple_var_assignment_267124')
    # Assigning a type to the variable '_' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 10), '_', tuple_var_assignment_267124_269553)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1953)
    tuple_269554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1953, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1953)
    # Adding element type (line 1953)
    # Getting the type of 'T' (line 1953)
    T_269555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 11), 'T')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1953, 11), tuple_269554, T_269555)
    # Adding element type (line 1953)
    # Getting the type of 'h' (line 1953)
    h_269556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 14), 'h')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1953, 11), tuple_269554, h_269556)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1953, 4), 'stypy_return_type', tuple_269554)
    
    # ################# End of 'impulse(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'impulse' in the type store
    # Getting the type of 'stypy_return_type' (line 1897)
    stypy_return_type_269557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_269557)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'impulse'
    return stypy_return_type_269557

# Assigning a type to the variable 'impulse' (line 1897)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1897, 0), 'impulse', impulse)

@norecursion
def impulse2(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1956)
    None_269558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 24), 'None')
    # Getting the type of 'None' (line 1956)
    None_269559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 32), 'None')
    # Getting the type of 'None' (line 1956)
    None_269560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 40), 'None')
    defaults = [None_269558, None_269559, None_269560]
    # Create a new context for function 'impulse2'
    module_type_store = module_type_store.open_function_context('impulse2', 1956, 0, False)
    
    # Passed parameters checking function
    impulse2.stypy_localization = localization
    impulse2.stypy_type_of_self = None
    impulse2.stypy_type_store = module_type_store
    impulse2.stypy_function_name = 'impulse2'
    impulse2.stypy_param_names_list = ['system', 'X0', 'T', 'N']
    impulse2.stypy_varargs_param_name = None
    impulse2.stypy_kwargs_param_name = 'kwargs'
    impulse2.stypy_call_defaults = defaults
    impulse2.stypy_call_varargs = varargs
    impulse2.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'impulse2', ['system', 'X0', 'T', 'N'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'impulse2', localization, ['system', 'X0', 'T', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'impulse2(...)' code ##################

    str_269561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2019, (-1)), 'str', "\n    Impulse response of a single-input, continuous-time linear system.\n\n    Parameters\n    ----------\n    system : an instance of the LTI class or a tuple of array_like\n        describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n            * 1 (instance of `lti`)\n            * 2 (num, den)\n            * 3 (zeros, poles, gain)\n            * 4 (A, B, C, D)\n\n    X0 : 1-D array_like, optional\n        The initial condition of the state vector.  Default: 0 (the\n        zero vector).\n    T : 1-D array_like, optional\n        The time steps at which the input is defined and at which the\n        output is desired.  If `T` is not given, the function will\n        generate a set of time samples automatically.\n    N : int, optional\n        Number of time points to compute.  Default: 100.\n    kwargs : various types\n        Additional keyword arguments are passed on to the function\n        `scipy.signal.lsim2`, which in turn passes them on to\n        `scipy.integrate.odeint`; see the latter's documentation for\n        information about these arguments.\n\n    Returns\n    -------\n    T : ndarray\n        The time values for the output.\n    yout : ndarray\n        The output response of the system.\n\n    See Also\n    --------\n    impulse, lsim2, integrate.odeint\n\n    Notes\n    -----\n    The solution is generated by calling `scipy.signal.lsim2`, which uses\n    the differential equation solver `scipy.integrate.odeint`.\n\n    If (num, den) is passed in for ``system``, coefficients for both the\n    numerator and denominator should be specified in descending exponent\n    order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).\n\n    .. versionadded:: 0.8.0\n\n    Examples\n    --------\n    Second order system with a repeated root: x''(t) + 2*x(t) + x(t) = u(t)\n\n    >>> from scipy import signal\n    >>> system = ([1.0], [1.0, 2.0, 1.0])\n    >>> t, y = signal.impulse2(system)\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(t, y)\n\n    ")
    
    
    # Call to isinstance(...): (line 2020)
    # Processing the call arguments (line 2020)
    # Getting the type of 'system' (line 2020)
    system_269563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 18), 'system', False)
    # Getting the type of 'lti' (line 2020)
    lti_269564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 26), 'lti', False)
    # Processing the call keyword arguments (line 2020)
    kwargs_269565 = {}
    # Getting the type of 'isinstance' (line 2020)
    isinstance_269562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2020)
    isinstance_call_result_269566 = invoke(stypy.reporting.localization.Localization(__file__, 2020, 7), isinstance_269562, *[system_269563, lti_269564], **kwargs_269565)
    
    # Testing the type of an if condition (line 2020)
    if_condition_269567 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2020, 4), isinstance_call_result_269566)
    # Assigning a type to the variable 'if_condition_269567' (line 2020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 4), 'if_condition_269567', if_condition_269567)
    # SSA begins for if statement (line 2020)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2021):
    
    # Assigning a Call to a Name (line 2021):
    
    # Call to _as_ss(...): (line 2021)
    # Processing the call keyword arguments (line 2021)
    kwargs_269570 = {}
    # Getting the type of 'system' (line 2021)
    system_269568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 14), 'system', False)
    # Obtaining the member '_as_ss' of a type (line 2021)
    _as_ss_269569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2021, 14), system_269568, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 2021)
    _as_ss_call_result_269571 = invoke(stypy.reporting.localization.Localization(__file__, 2021, 14), _as_ss_269569, *[], **kwargs_269570)
    
    # Assigning a type to the variable 'sys' (line 2021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 8), 'sys', _as_ss_call_result_269571)
    # SSA branch for the else part of an if statement (line 2020)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 2022)
    # Processing the call arguments (line 2022)
    # Getting the type of 'system' (line 2022)
    system_269573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2022, 20), 'system', False)
    # Getting the type of 'dlti' (line 2022)
    dlti_269574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2022, 28), 'dlti', False)
    # Processing the call keyword arguments (line 2022)
    kwargs_269575 = {}
    # Getting the type of 'isinstance' (line 2022)
    isinstance_269572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2022, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2022)
    isinstance_call_result_269576 = invoke(stypy.reporting.localization.Localization(__file__, 2022, 9), isinstance_269572, *[system_269573, dlti_269574], **kwargs_269575)
    
    # Testing the type of an if condition (line 2022)
    if_condition_269577 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2022, 9), isinstance_call_result_269576)
    # Assigning a type to the variable 'if_condition_269577' (line 2022)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2022, 9), 'if_condition_269577', if_condition_269577)
    # SSA begins for if statement (line 2022)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 2023)
    # Processing the call arguments (line 2023)
    str_269579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 29), 'str', 'impulse2 can only be used with continuous-time systems.')
    # Processing the call keyword arguments (line 2023)
    kwargs_269580 = {}
    # Getting the type of 'AttributeError' (line 2023)
    AttributeError_269578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 14), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 2023)
    AttributeError_call_result_269581 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 14), AttributeError_269578, *[str_269579], **kwargs_269580)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2023, 8), AttributeError_call_result_269581, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 2022)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2026):
    
    # Assigning a Call to a Name (line 2026):
    
    # Call to _as_ss(...): (line 2026)
    # Processing the call keyword arguments (line 2026)
    kwargs_269587 = {}
    
    # Call to lti(...): (line 2026)
    # Getting the type of 'system' (line 2026)
    system_269583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 19), 'system', False)
    # Processing the call keyword arguments (line 2026)
    kwargs_269584 = {}
    # Getting the type of 'lti' (line 2026)
    lti_269582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 14), 'lti', False)
    # Calling lti(args, kwargs) (line 2026)
    lti_call_result_269585 = invoke(stypy.reporting.localization.Localization(__file__, 2026, 14), lti_269582, *[system_269583], **kwargs_269584)
    
    # Obtaining the member '_as_ss' of a type (line 2026)
    _as_ss_269586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2026, 14), lti_call_result_269585, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 2026)
    _as_ss_call_result_269588 = invoke(stypy.reporting.localization.Localization(__file__, 2026, 14), _as_ss_269586, *[], **kwargs_269587)
    
    # Assigning a type to the variable 'sys' (line 2026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2026, 8), 'sys', _as_ss_call_result_269588)
    # SSA join for if statement (line 2022)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2020)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 2027):
    
    # Assigning a Attribute to a Name (line 2027):
    # Getting the type of 'sys' (line 2027)
    sys_269589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 8), 'sys')
    # Obtaining the member 'B' of a type (line 2027)
    B_269590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2027, 8), sys_269589, 'B')
    # Assigning a type to the variable 'B' (line 2027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 4), 'B', B_269590)
    
    
    
    # Obtaining the type of the subscript
    int_269591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2028, 15), 'int')
    # Getting the type of 'B' (line 2028)
    B_269592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 7), 'B')
    # Obtaining the member 'shape' of a type (line 2028)
    shape_269593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2028, 7), B_269592, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2028)
    getitem___269594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2028, 7), shape_269593, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2028)
    subscript_call_result_269595 = invoke(stypy.reporting.localization.Localization(__file__, 2028, 7), getitem___269594, int_269591)
    
    int_269596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2028, 22), 'int')
    # Applying the binary operator '!=' (line 2028)
    result_ne_269597 = python_operator(stypy.reporting.localization.Localization(__file__, 2028, 7), '!=', subscript_call_result_269595, int_269596)
    
    # Testing the type of an if condition (line 2028)
    if_condition_269598 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2028, 4), result_ne_269597)
    # Assigning a type to the variable 'if_condition_269598' (line 2028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2028, 4), 'if_condition_269598', if_condition_269598)
    # SSA begins for if statement (line 2028)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2029)
    # Processing the call arguments (line 2029)
    str_269600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2029, 25), 'str', 'impulse2() requires a single-input system.')
    # Processing the call keyword arguments (line 2029)
    kwargs_269601 = {}
    # Getting the type of 'ValueError' (line 2029)
    ValueError_269599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2029)
    ValueError_call_result_269602 = invoke(stypy.reporting.localization.Localization(__file__, 2029, 14), ValueError_269599, *[str_269600], **kwargs_269601)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2029, 8), ValueError_call_result_269602, 'raise parameter', BaseException)
    # SSA join for if statement (line 2028)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2030):
    
    # Assigning a Call to a Name (line 2030):
    
    # Call to squeeze(...): (line 2030)
    # Processing the call keyword arguments (line 2030)
    kwargs_269605 = {}
    # Getting the type of 'B' (line 2030)
    B_269603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 8), 'B', False)
    # Obtaining the member 'squeeze' of a type (line 2030)
    squeeze_269604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2030, 8), B_269603, 'squeeze')
    # Calling squeeze(args, kwargs) (line 2030)
    squeeze_call_result_269606 = invoke(stypy.reporting.localization.Localization(__file__, 2030, 8), squeeze_269604, *[], **kwargs_269605)
    
    # Assigning a type to the variable 'B' (line 2030)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2030, 4), 'B', squeeze_call_result_269606)
    
    # Type idiom detected: calculating its left and rigth part (line 2031)
    # Getting the type of 'X0' (line 2031)
    X0_269607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 7), 'X0')
    # Getting the type of 'None' (line 2031)
    None_269608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 13), 'None')
    
    (may_be_269609, more_types_in_union_269610) = may_be_none(X0_269607, None_269608)

    if may_be_269609:

        if more_types_in_union_269610:
            # Runtime conditional SSA (line 2031)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2032):
        
        # Assigning a Call to a Name (line 2032):
        
        # Call to zeros_like(...): (line 2032)
        # Processing the call arguments (line 2032)
        # Getting the type of 'B' (line 2032)
        B_269612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 24), 'B', False)
        # Processing the call keyword arguments (line 2032)
        kwargs_269613 = {}
        # Getting the type of 'zeros_like' (line 2032)
        zeros_like_269611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 13), 'zeros_like', False)
        # Calling zeros_like(args, kwargs) (line 2032)
        zeros_like_call_result_269614 = invoke(stypy.reporting.localization.Localization(__file__, 2032, 13), zeros_like_269611, *[B_269612], **kwargs_269613)
        
        # Assigning a type to the variable 'X0' (line 2032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2032, 8), 'X0', zeros_like_call_result_269614)

        if more_types_in_union_269610:
            # SSA join for if statement (line 2031)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2033)
    # Getting the type of 'N' (line 2033)
    N_269615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 7), 'N')
    # Getting the type of 'None' (line 2033)
    None_269616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 12), 'None')
    
    (may_be_269617, more_types_in_union_269618) = may_be_none(N_269615, None_269616)

    if may_be_269617:

        if more_types_in_union_269618:
            # Runtime conditional SSA (line 2033)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 2034):
        
        # Assigning a Num to a Name (line 2034):
        int_269619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2034, 12), 'int')
        # Assigning a type to the variable 'N' (line 2034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2034, 8), 'N', int_269619)

        if more_types_in_union_269618:
            # SSA join for if statement (line 2033)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2035)
    # Getting the type of 'T' (line 2035)
    T_269620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 7), 'T')
    # Getting the type of 'None' (line 2035)
    None_269621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 12), 'None')
    
    (may_be_269622, more_types_in_union_269623) = may_be_none(T_269620, None_269621)

    if may_be_269622:

        if more_types_in_union_269623:
            # Runtime conditional SSA (line 2035)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2036):
        
        # Assigning a Call to a Name (line 2036):
        
        # Call to _default_response_times(...): (line 2036)
        # Processing the call arguments (line 2036)
        # Getting the type of 'sys' (line 2036)
        sys_269625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 36), 'sys', False)
        # Obtaining the member 'A' of a type (line 2036)
        A_269626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2036, 36), sys_269625, 'A')
        # Getting the type of 'N' (line 2036)
        N_269627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 43), 'N', False)
        # Processing the call keyword arguments (line 2036)
        kwargs_269628 = {}
        # Getting the type of '_default_response_times' (line 2036)
        _default_response_times_269624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 12), '_default_response_times', False)
        # Calling _default_response_times(args, kwargs) (line 2036)
        _default_response_times_call_result_269629 = invoke(stypy.reporting.localization.Localization(__file__, 2036, 12), _default_response_times_269624, *[A_269626, N_269627], **kwargs_269628)
        
        # Assigning a type to the variable 'T' (line 2036)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2036, 8), 'T', _default_response_times_call_result_269629)

        if more_types_in_union_269623:
            # SSA join for if statement (line 2035)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 2040):
    
    # Assigning a BinOp to a Name (line 2040):
    # Getting the type of 'B' (line 2040)
    B_269630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 9), 'B')
    # Getting the type of 'X0' (line 2040)
    X0_269631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 13), 'X0')
    # Applying the binary operator '+' (line 2040)
    result_add_269632 = python_operator(stypy.reporting.localization.Localization(__file__, 2040, 9), '+', B_269630, X0_269631)
    
    # Assigning a type to the variable 'ic' (line 2040)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2040, 4), 'ic', result_add_269632)
    
    # Assigning a Call to a Tuple (line 2041):
    
    # Assigning a Subscript to a Name (line 2041):
    
    # Obtaining the type of the subscript
    int_269633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2041, 4), 'int')
    
    # Call to lsim2(...): (line 2041)
    # Processing the call arguments (line 2041)
    # Getting the type of 'sys' (line 2041)
    sys_269635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 23), 'sys', False)
    # Processing the call keyword arguments (line 2041)
    # Getting the type of 'T' (line 2041)
    T_269636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 30), 'T', False)
    keyword_269637 = T_269636
    # Getting the type of 'ic' (line 2041)
    ic_269638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 36), 'ic', False)
    keyword_269639 = ic_269638
    # Getting the type of 'kwargs' (line 2041)
    kwargs_269640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 42), 'kwargs', False)
    kwargs_269641 = {'kwargs_269640': kwargs_269640, 'X0': keyword_269639, 'T': keyword_269637}
    # Getting the type of 'lsim2' (line 2041)
    lsim2_269634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 17), 'lsim2', False)
    # Calling lsim2(args, kwargs) (line 2041)
    lsim2_call_result_269642 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 17), lsim2_269634, *[sys_269635], **kwargs_269641)
    
    # Obtaining the member '__getitem__' of a type (line 2041)
    getitem___269643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2041, 4), lsim2_call_result_269642, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2041)
    subscript_call_result_269644 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 4), getitem___269643, int_269633)
    
    # Assigning a type to the variable 'tuple_var_assignment_267125' (line 2041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 4), 'tuple_var_assignment_267125', subscript_call_result_269644)
    
    # Assigning a Subscript to a Name (line 2041):
    
    # Obtaining the type of the subscript
    int_269645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2041, 4), 'int')
    
    # Call to lsim2(...): (line 2041)
    # Processing the call arguments (line 2041)
    # Getting the type of 'sys' (line 2041)
    sys_269647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 23), 'sys', False)
    # Processing the call keyword arguments (line 2041)
    # Getting the type of 'T' (line 2041)
    T_269648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 30), 'T', False)
    keyword_269649 = T_269648
    # Getting the type of 'ic' (line 2041)
    ic_269650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 36), 'ic', False)
    keyword_269651 = ic_269650
    # Getting the type of 'kwargs' (line 2041)
    kwargs_269652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 42), 'kwargs', False)
    kwargs_269653 = {'X0': keyword_269651, 'T': keyword_269649, 'kwargs_269652': kwargs_269652}
    # Getting the type of 'lsim2' (line 2041)
    lsim2_269646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 17), 'lsim2', False)
    # Calling lsim2(args, kwargs) (line 2041)
    lsim2_call_result_269654 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 17), lsim2_269646, *[sys_269647], **kwargs_269653)
    
    # Obtaining the member '__getitem__' of a type (line 2041)
    getitem___269655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2041, 4), lsim2_call_result_269654, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2041)
    subscript_call_result_269656 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 4), getitem___269655, int_269645)
    
    # Assigning a type to the variable 'tuple_var_assignment_267126' (line 2041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 4), 'tuple_var_assignment_267126', subscript_call_result_269656)
    
    # Assigning a Subscript to a Name (line 2041):
    
    # Obtaining the type of the subscript
    int_269657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2041, 4), 'int')
    
    # Call to lsim2(...): (line 2041)
    # Processing the call arguments (line 2041)
    # Getting the type of 'sys' (line 2041)
    sys_269659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 23), 'sys', False)
    # Processing the call keyword arguments (line 2041)
    # Getting the type of 'T' (line 2041)
    T_269660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 30), 'T', False)
    keyword_269661 = T_269660
    # Getting the type of 'ic' (line 2041)
    ic_269662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 36), 'ic', False)
    keyword_269663 = ic_269662
    # Getting the type of 'kwargs' (line 2041)
    kwargs_269664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 42), 'kwargs', False)
    kwargs_269665 = {'X0': keyword_269663, 'T': keyword_269661, 'kwargs_269664': kwargs_269664}
    # Getting the type of 'lsim2' (line 2041)
    lsim2_269658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 17), 'lsim2', False)
    # Calling lsim2(args, kwargs) (line 2041)
    lsim2_call_result_269666 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 17), lsim2_269658, *[sys_269659], **kwargs_269665)
    
    # Obtaining the member '__getitem__' of a type (line 2041)
    getitem___269667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2041, 4), lsim2_call_result_269666, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2041)
    subscript_call_result_269668 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 4), getitem___269667, int_269657)
    
    # Assigning a type to the variable 'tuple_var_assignment_267127' (line 2041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 4), 'tuple_var_assignment_267127', subscript_call_result_269668)
    
    # Assigning a Name to a Name (line 2041):
    # Getting the type of 'tuple_var_assignment_267125' (line 2041)
    tuple_var_assignment_267125_269669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 4), 'tuple_var_assignment_267125')
    # Assigning a type to the variable 'Tr' (line 2041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 4), 'Tr', tuple_var_assignment_267125_269669)
    
    # Assigning a Name to a Name (line 2041):
    # Getting the type of 'tuple_var_assignment_267126' (line 2041)
    tuple_var_assignment_267126_269670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 4), 'tuple_var_assignment_267126')
    # Assigning a type to the variable 'Yr' (line 2041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 8), 'Yr', tuple_var_assignment_267126_269670)
    
    # Assigning a Name to a Name (line 2041):
    # Getting the type of 'tuple_var_assignment_267127' (line 2041)
    tuple_var_assignment_267127_269671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 4), 'tuple_var_assignment_267127')
    # Assigning a type to the variable 'Xr' (line 2041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 12), 'Xr', tuple_var_assignment_267127_269671)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2042)
    tuple_269672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2042)
    # Adding element type (line 2042)
    # Getting the type of 'Tr' (line 2042)
    Tr_269673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 11), 'Tr')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2042, 11), tuple_269672, Tr_269673)
    # Adding element type (line 2042)
    # Getting the type of 'Yr' (line 2042)
    Yr_269674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 15), 'Yr')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2042, 11), tuple_269672, Yr_269674)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 4), 'stypy_return_type', tuple_269672)
    
    # ################# End of 'impulse2(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'impulse2' in the type store
    # Getting the type of 'stypy_return_type' (line 1956)
    stypy_return_type_269675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_269675)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'impulse2'
    return stypy_return_type_269675

# Assigning a type to the variable 'impulse2' (line 1956)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 0), 'impulse2', impulse2)

@norecursion
def step(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2045)
    None_269676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 20), 'None')
    # Getting the type of 'None' (line 2045)
    None_269677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 28), 'None')
    # Getting the type of 'None' (line 2045)
    None_269678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 36), 'None')
    defaults = [None_269676, None_269677, None_269678]
    # Create a new context for function 'step'
    module_type_store = module_type_store.open_function_context('step', 2045, 0, False)
    
    # Passed parameters checking function
    step.stypy_localization = localization
    step.stypy_type_of_self = None
    step.stypy_type_store = module_type_store
    step.stypy_function_name = 'step'
    step.stypy_param_names_list = ['system', 'X0', 'T', 'N']
    step.stypy_varargs_param_name = None
    step.stypy_kwargs_param_name = None
    step.stypy_call_defaults = defaults
    step.stypy_call_varargs = varargs
    step.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'step', ['system', 'X0', 'T', 'N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'step', localization, ['system', 'X0', 'T', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'step(...)' code ##################

    str_269679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, (-1)), 'str', 'Step response of continuous-time system.\n\n    Parameters\n    ----------\n    system : an instance of the LTI class or a tuple of array_like\n        describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n            * 1 (instance of `lti`)\n            * 2 (num, den)\n            * 3 (zeros, poles, gain)\n            * 4 (A, B, C, D)\n\n    X0 : array_like, optional\n        Initial state-vector (default is zero).\n    T : array_like, optional\n        Time points (computed if not given).\n    N : int, optional\n        Number of time points to compute if `T` is not given.\n\n    Returns\n    -------\n    T : 1D ndarray\n        Output time points.\n    yout : 1D ndarray\n        Step response of system.\n\n    See also\n    --------\n    scipy.signal.step2\n\n    Notes\n    -----\n    If (num, den) is passed in for ``system``, coefficients for both the\n    numerator and denominator should be specified in descending exponent\n    order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).\n\n    ')
    
    
    # Call to isinstance(...): (line 2085)
    # Processing the call arguments (line 2085)
    # Getting the type of 'system' (line 2085)
    system_269681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 18), 'system', False)
    # Getting the type of 'lti' (line 2085)
    lti_269682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 26), 'lti', False)
    # Processing the call keyword arguments (line 2085)
    kwargs_269683 = {}
    # Getting the type of 'isinstance' (line 2085)
    isinstance_269680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2085)
    isinstance_call_result_269684 = invoke(stypy.reporting.localization.Localization(__file__, 2085, 7), isinstance_269680, *[system_269681, lti_269682], **kwargs_269683)
    
    # Testing the type of an if condition (line 2085)
    if_condition_269685 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2085, 4), isinstance_call_result_269684)
    # Assigning a type to the variable 'if_condition_269685' (line 2085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2085, 4), 'if_condition_269685', if_condition_269685)
    # SSA begins for if statement (line 2085)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2086):
    
    # Assigning a Call to a Name (line 2086):
    
    # Call to _as_ss(...): (line 2086)
    # Processing the call keyword arguments (line 2086)
    kwargs_269688 = {}
    # Getting the type of 'system' (line 2086)
    system_269686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 14), 'system', False)
    # Obtaining the member '_as_ss' of a type (line 2086)
    _as_ss_269687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2086, 14), system_269686, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 2086)
    _as_ss_call_result_269689 = invoke(stypy.reporting.localization.Localization(__file__, 2086, 14), _as_ss_269687, *[], **kwargs_269688)
    
    # Assigning a type to the variable 'sys' (line 2086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2086, 8), 'sys', _as_ss_call_result_269689)
    # SSA branch for the else part of an if statement (line 2085)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 2087)
    # Processing the call arguments (line 2087)
    # Getting the type of 'system' (line 2087)
    system_269691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2087, 20), 'system', False)
    # Getting the type of 'dlti' (line 2087)
    dlti_269692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2087, 28), 'dlti', False)
    # Processing the call keyword arguments (line 2087)
    kwargs_269693 = {}
    # Getting the type of 'isinstance' (line 2087)
    isinstance_269690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2087, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2087)
    isinstance_call_result_269694 = invoke(stypy.reporting.localization.Localization(__file__, 2087, 9), isinstance_269690, *[system_269691, dlti_269692], **kwargs_269693)
    
    # Testing the type of an if condition (line 2087)
    if_condition_269695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2087, 9), isinstance_call_result_269694)
    # Assigning a type to the variable 'if_condition_269695' (line 2087)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2087, 9), 'if_condition_269695', if_condition_269695)
    # SSA begins for if statement (line 2087)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 2088)
    # Processing the call arguments (line 2088)
    str_269697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2088, 29), 'str', 'step can only be used with continuous-time systems.')
    # Processing the call keyword arguments (line 2088)
    kwargs_269698 = {}
    # Getting the type of 'AttributeError' (line 2088)
    AttributeError_269696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 14), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 2088)
    AttributeError_call_result_269699 = invoke(stypy.reporting.localization.Localization(__file__, 2088, 14), AttributeError_269696, *[str_269697], **kwargs_269698)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2088, 8), AttributeError_call_result_269699, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 2087)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2091):
    
    # Assigning a Call to a Name (line 2091):
    
    # Call to _as_ss(...): (line 2091)
    # Processing the call keyword arguments (line 2091)
    kwargs_269705 = {}
    
    # Call to lti(...): (line 2091)
    # Getting the type of 'system' (line 2091)
    system_269701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 19), 'system', False)
    # Processing the call keyword arguments (line 2091)
    kwargs_269702 = {}
    # Getting the type of 'lti' (line 2091)
    lti_269700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 14), 'lti', False)
    # Calling lti(args, kwargs) (line 2091)
    lti_call_result_269703 = invoke(stypy.reporting.localization.Localization(__file__, 2091, 14), lti_269700, *[system_269701], **kwargs_269702)
    
    # Obtaining the member '_as_ss' of a type (line 2091)
    _as_ss_269704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2091, 14), lti_call_result_269703, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 2091)
    _as_ss_call_result_269706 = invoke(stypy.reporting.localization.Localization(__file__, 2091, 14), _as_ss_269704, *[], **kwargs_269705)
    
    # Assigning a type to the variable 'sys' (line 2091)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2091, 8), 'sys', _as_ss_call_result_269706)
    # SSA join for if statement (line 2087)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2085)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2092)
    # Getting the type of 'N' (line 2092)
    N_269707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 7), 'N')
    # Getting the type of 'None' (line 2092)
    None_269708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 12), 'None')
    
    (may_be_269709, more_types_in_union_269710) = may_be_none(N_269707, None_269708)

    if may_be_269709:

        if more_types_in_union_269710:
            # Runtime conditional SSA (line 2092)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 2093):
        
        # Assigning a Num to a Name (line 2093):
        int_269711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2093, 12), 'int')
        # Assigning a type to the variable 'N' (line 2093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2093, 8), 'N', int_269711)

        if more_types_in_union_269710:
            # SSA join for if statement (line 2092)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2094)
    # Getting the type of 'T' (line 2094)
    T_269712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 7), 'T')
    # Getting the type of 'None' (line 2094)
    None_269713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 12), 'None')
    
    (may_be_269714, more_types_in_union_269715) = may_be_none(T_269712, None_269713)

    if may_be_269714:

        if more_types_in_union_269715:
            # Runtime conditional SSA (line 2094)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2095):
        
        # Assigning a Call to a Name (line 2095):
        
        # Call to _default_response_times(...): (line 2095)
        # Processing the call arguments (line 2095)
        # Getting the type of 'sys' (line 2095)
        sys_269717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'sys', False)
        # Obtaining the member 'A' of a type (line 2095)
        A_269718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 36), sys_269717, 'A')
        # Getting the type of 'N' (line 2095)
        N_269719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 43), 'N', False)
        # Processing the call keyword arguments (line 2095)
        kwargs_269720 = {}
        # Getting the type of '_default_response_times' (line 2095)
        _default_response_times_269716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 12), '_default_response_times', False)
        # Calling _default_response_times(args, kwargs) (line 2095)
        _default_response_times_call_result_269721 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 12), _default_response_times_269716, *[A_269718, N_269719], **kwargs_269720)
        
        # Assigning a type to the variable 'T' (line 2095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2095, 8), 'T', _default_response_times_call_result_269721)

        if more_types_in_union_269715:
            # Runtime conditional SSA for else branch (line 2094)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_269714) or more_types_in_union_269715):
        
        # Assigning a Call to a Name (line 2097):
        
        # Assigning a Call to a Name (line 2097):
        
        # Call to asarray(...): (line 2097)
        # Processing the call arguments (line 2097)
        # Getting the type of 'T' (line 2097)
        T_269723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 20), 'T', False)
        # Processing the call keyword arguments (line 2097)
        kwargs_269724 = {}
        # Getting the type of 'asarray' (line 2097)
        asarray_269722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 12), 'asarray', False)
        # Calling asarray(args, kwargs) (line 2097)
        asarray_call_result_269725 = invoke(stypy.reporting.localization.Localization(__file__, 2097, 12), asarray_269722, *[T_269723], **kwargs_269724)
        
        # Assigning a type to the variable 'T' (line 2097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2097, 8), 'T', asarray_call_result_269725)

        if (may_be_269714 and more_types_in_union_269715):
            # SSA join for if statement (line 2094)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2098):
    
    # Assigning a Call to a Name (line 2098):
    
    # Call to ones(...): (line 2098)
    # Processing the call arguments (line 2098)
    # Getting the type of 'T' (line 2098)
    T_269727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 13), 'T', False)
    # Obtaining the member 'shape' of a type (line 2098)
    shape_269728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2098, 13), T_269727, 'shape')
    # Getting the type of 'sys' (line 2098)
    sys_269729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 22), 'sys', False)
    # Obtaining the member 'A' of a type (line 2098)
    A_269730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2098, 22), sys_269729, 'A')
    # Obtaining the member 'dtype' of a type (line 2098)
    dtype_269731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2098, 22), A_269730, 'dtype')
    # Processing the call keyword arguments (line 2098)
    kwargs_269732 = {}
    # Getting the type of 'ones' (line 2098)
    ones_269726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 8), 'ones', False)
    # Calling ones(args, kwargs) (line 2098)
    ones_call_result_269733 = invoke(stypy.reporting.localization.Localization(__file__, 2098, 8), ones_269726, *[shape_269728, dtype_269731], **kwargs_269732)
    
    # Assigning a type to the variable 'U' (line 2098)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2098, 4), 'U', ones_call_result_269733)
    
    # Assigning a Call to a Name (line 2099):
    
    # Assigning a Call to a Name (line 2099):
    
    # Call to lsim(...): (line 2099)
    # Processing the call arguments (line 2099)
    # Getting the type of 'sys' (line 2099)
    sys_269735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 16), 'sys', False)
    # Getting the type of 'U' (line 2099)
    U_269736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 21), 'U', False)
    # Getting the type of 'T' (line 2099)
    T_269737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 24), 'T', False)
    # Processing the call keyword arguments (line 2099)
    # Getting the type of 'X0' (line 2099)
    X0_269738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 30), 'X0', False)
    keyword_269739 = X0_269738
    # Getting the type of 'False' (line 2099)
    False_269740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 41), 'False', False)
    keyword_269741 = False_269740
    kwargs_269742 = {'X0': keyword_269739, 'interp': keyword_269741}
    # Getting the type of 'lsim' (line 2099)
    lsim_269734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 11), 'lsim', False)
    # Calling lsim(args, kwargs) (line 2099)
    lsim_call_result_269743 = invoke(stypy.reporting.localization.Localization(__file__, 2099, 11), lsim_269734, *[sys_269735, U_269736, T_269737], **kwargs_269742)
    
    # Assigning a type to the variable 'vals' (line 2099)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2099, 4), 'vals', lsim_call_result_269743)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2100)
    tuple_269744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2100)
    # Adding element type (line 2100)
    
    # Obtaining the type of the subscript
    int_269745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 16), 'int')
    # Getting the type of 'vals' (line 2100)
    vals_269746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 11), 'vals')
    # Obtaining the member '__getitem__' of a type (line 2100)
    getitem___269747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 11), vals_269746, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2100)
    subscript_call_result_269748 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 11), getitem___269747, int_269745)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2100, 11), tuple_269744, subscript_call_result_269748)
    # Adding element type (line 2100)
    
    # Obtaining the type of the subscript
    int_269749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 25), 'int')
    # Getting the type of 'vals' (line 2100)
    vals_269750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2100, 20), 'vals')
    # Obtaining the member '__getitem__' of a type (line 2100)
    getitem___269751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2100, 20), vals_269750, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2100)
    subscript_call_result_269752 = invoke(stypy.reporting.localization.Localization(__file__, 2100, 20), getitem___269751, int_269749)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2100, 11), tuple_269744, subscript_call_result_269752)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2100, 4), 'stypy_return_type', tuple_269744)
    
    # ################# End of 'step(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'step' in the type store
    # Getting the type of 'stypy_return_type' (line 2045)
    stypy_return_type_269753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_269753)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'step'
    return stypy_return_type_269753

# Assigning a type to the variable 'step' (line 2045)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2045, 0), 'step', step)

@norecursion
def step2(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2103)
    None_269754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 21), 'None')
    # Getting the type of 'None' (line 2103)
    None_269755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 29), 'None')
    # Getting the type of 'None' (line 2103)
    None_269756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 37), 'None')
    defaults = [None_269754, None_269755, None_269756]
    # Create a new context for function 'step2'
    module_type_store = module_type_store.open_function_context('step2', 2103, 0, False)
    
    # Passed parameters checking function
    step2.stypy_localization = localization
    step2.stypy_type_of_self = None
    step2.stypy_type_store = module_type_store
    step2.stypy_function_name = 'step2'
    step2.stypy_param_names_list = ['system', 'X0', 'T', 'N']
    step2.stypy_varargs_param_name = None
    step2.stypy_kwargs_param_name = 'kwargs'
    step2.stypy_call_defaults = defaults
    step2.stypy_call_varargs = varargs
    step2.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'step2', ['system', 'X0', 'T', 'N'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'step2', localization, ['system', 'X0', 'T', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'step2(...)' code ##################

    str_269757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2152, (-1)), 'str', 'Step response of continuous-time system.\n\n    This function is functionally the same as `scipy.signal.step`, but\n    it uses the function `scipy.signal.lsim2` to compute the step\n    response.\n\n    Parameters\n    ----------\n    system : an instance of the LTI class or a tuple of array_like\n        describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n            * 1 (instance of `lti`)\n            * 2 (num, den)\n            * 3 (zeros, poles, gain)\n            * 4 (A, B, C, D)\n\n    X0 : array_like, optional\n        Initial state-vector (default is zero).\n    T : array_like, optional\n        Time points (computed if not given).\n    N : int, optional\n        Number of time points to compute if `T` is not given.\n    kwargs : various types\n        Additional keyword arguments are passed on the function\n        `scipy.signal.lsim2`, which in turn passes them on to\n        `scipy.integrate.odeint`.  See the documentation for\n        `scipy.integrate.odeint` for information about these arguments.\n\n    Returns\n    -------\n    T : 1D ndarray\n        Output time points.\n    yout : 1D ndarray\n        Step response of system.\n\n    See also\n    --------\n    scipy.signal.step\n\n    Notes\n    -----\n    If (num, den) is passed in for ``system``, coefficients for both the\n    numerator and denominator should be specified in descending exponent\n    order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).\n\n    .. versionadded:: 0.8.0\n    ')
    
    
    # Call to isinstance(...): (line 2153)
    # Processing the call arguments (line 2153)
    # Getting the type of 'system' (line 2153)
    system_269759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 18), 'system', False)
    # Getting the type of 'lti' (line 2153)
    lti_269760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 26), 'lti', False)
    # Processing the call keyword arguments (line 2153)
    kwargs_269761 = {}
    # Getting the type of 'isinstance' (line 2153)
    isinstance_269758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2153)
    isinstance_call_result_269762 = invoke(stypy.reporting.localization.Localization(__file__, 2153, 7), isinstance_269758, *[system_269759, lti_269760], **kwargs_269761)
    
    # Testing the type of an if condition (line 2153)
    if_condition_269763 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2153, 4), isinstance_call_result_269762)
    # Assigning a type to the variable 'if_condition_269763' (line 2153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2153, 4), 'if_condition_269763', if_condition_269763)
    # SSA begins for if statement (line 2153)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2154):
    
    # Assigning a Call to a Name (line 2154):
    
    # Call to _as_ss(...): (line 2154)
    # Processing the call keyword arguments (line 2154)
    kwargs_269766 = {}
    # Getting the type of 'system' (line 2154)
    system_269764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 14), 'system', False)
    # Obtaining the member '_as_ss' of a type (line 2154)
    _as_ss_269765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 14), system_269764, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 2154)
    _as_ss_call_result_269767 = invoke(stypy.reporting.localization.Localization(__file__, 2154, 14), _as_ss_269765, *[], **kwargs_269766)
    
    # Assigning a type to the variable 'sys' (line 2154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2154, 8), 'sys', _as_ss_call_result_269767)
    # SSA branch for the else part of an if statement (line 2153)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 2155)
    # Processing the call arguments (line 2155)
    # Getting the type of 'system' (line 2155)
    system_269769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 20), 'system', False)
    # Getting the type of 'dlti' (line 2155)
    dlti_269770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 28), 'dlti', False)
    # Processing the call keyword arguments (line 2155)
    kwargs_269771 = {}
    # Getting the type of 'isinstance' (line 2155)
    isinstance_269768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2155)
    isinstance_call_result_269772 = invoke(stypy.reporting.localization.Localization(__file__, 2155, 9), isinstance_269768, *[system_269769, dlti_269770], **kwargs_269771)
    
    # Testing the type of an if condition (line 2155)
    if_condition_269773 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2155, 9), isinstance_call_result_269772)
    # Assigning a type to the variable 'if_condition_269773' (line 2155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2155, 9), 'if_condition_269773', if_condition_269773)
    # SSA begins for if statement (line 2155)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 2156)
    # Processing the call arguments (line 2156)
    str_269775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2156, 29), 'str', 'step2 can only be used with continuous-time systems.')
    # Processing the call keyword arguments (line 2156)
    kwargs_269776 = {}
    # Getting the type of 'AttributeError' (line 2156)
    AttributeError_269774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 14), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 2156)
    AttributeError_call_result_269777 = invoke(stypy.reporting.localization.Localization(__file__, 2156, 14), AttributeError_269774, *[str_269775], **kwargs_269776)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2156, 8), AttributeError_call_result_269777, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 2155)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2159):
    
    # Assigning a Call to a Name (line 2159):
    
    # Call to _as_ss(...): (line 2159)
    # Processing the call keyword arguments (line 2159)
    kwargs_269783 = {}
    
    # Call to lti(...): (line 2159)
    # Getting the type of 'system' (line 2159)
    system_269779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 19), 'system', False)
    # Processing the call keyword arguments (line 2159)
    kwargs_269780 = {}
    # Getting the type of 'lti' (line 2159)
    lti_269778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 14), 'lti', False)
    # Calling lti(args, kwargs) (line 2159)
    lti_call_result_269781 = invoke(stypy.reporting.localization.Localization(__file__, 2159, 14), lti_269778, *[system_269779], **kwargs_269780)
    
    # Obtaining the member '_as_ss' of a type (line 2159)
    _as_ss_269782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2159, 14), lti_call_result_269781, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 2159)
    _as_ss_call_result_269784 = invoke(stypy.reporting.localization.Localization(__file__, 2159, 14), _as_ss_269782, *[], **kwargs_269783)
    
    # Assigning a type to the variable 'sys' (line 2159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2159, 8), 'sys', _as_ss_call_result_269784)
    # SSA join for if statement (line 2155)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2153)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2160)
    # Getting the type of 'N' (line 2160)
    N_269785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 7), 'N')
    # Getting the type of 'None' (line 2160)
    None_269786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 12), 'None')
    
    (may_be_269787, more_types_in_union_269788) = may_be_none(N_269785, None_269786)

    if may_be_269787:

        if more_types_in_union_269788:
            # Runtime conditional SSA (line 2160)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 2161):
        
        # Assigning a Num to a Name (line 2161):
        int_269789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2161, 12), 'int')
        # Assigning a type to the variable 'N' (line 2161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2161, 8), 'N', int_269789)

        if more_types_in_union_269788:
            # SSA join for if statement (line 2160)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2162)
    # Getting the type of 'T' (line 2162)
    T_269790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 7), 'T')
    # Getting the type of 'None' (line 2162)
    None_269791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 12), 'None')
    
    (may_be_269792, more_types_in_union_269793) = may_be_none(T_269790, None_269791)

    if may_be_269792:

        if more_types_in_union_269793:
            # Runtime conditional SSA (line 2162)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2163):
        
        # Assigning a Call to a Name (line 2163):
        
        # Call to _default_response_times(...): (line 2163)
        # Processing the call arguments (line 2163)
        # Getting the type of 'sys' (line 2163)
        sys_269795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 36), 'sys', False)
        # Obtaining the member 'A' of a type (line 2163)
        A_269796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2163, 36), sys_269795, 'A')
        # Getting the type of 'N' (line 2163)
        N_269797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 43), 'N', False)
        # Processing the call keyword arguments (line 2163)
        kwargs_269798 = {}
        # Getting the type of '_default_response_times' (line 2163)
        _default_response_times_269794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 12), '_default_response_times', False)
        # Calling _default_response_times(args, kwargs) (line 2163)
        _default_response_times_call_result_269799 = invoke(stypy.reporting.localization.Localization(__file__, 2163, 12), _default_response_times_269794, *[A_269796, N_269797], **kwargs_269798)
        
        # Assigning a type to the variable 'T' (line 2163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2163, 8), 'T', _default_response_times_call_result_269799)

        if more_types_in_union_269793:
            # Runtime conditional SSA for else branch (line 2162)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_269792) or more_types_in_union_269793):
        
        # Assigning a Call to a Name (line 2165):
        
        # Assigning a Call to a Name (line 2165):
        
        # Call to asarray(...): (line 2165)
        # Processing the call arguments (line 2165)
        # Getting the type of 'T' (line 2165)
        T_269801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 20), 'T', False)
        # Processing the call keyword arguments (line 2165)
        kwargs_269802 = {}
        # Getting the type of 'asarray' (line 2165)
        asarray_269800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 12), 'asarray', False)
        # Calling asarray(args, kwargs) (line 2165)
        asarray_call_result_269803 = invoke(stypy.reporting.localization.Localization(__file__, 2165, 12), asarray_269800, *[T_269801], **kwargs_269802)
        
        # Assigning a type to the variable 'T' (line 2165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2165, 8), 'T', asarray_call_result_269803)

        if (may_be_269792 and more_types_in_union_269793):
            # SSA join for if statement (line 2162)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2166):
    
    # Assigning a Call to a Name (line 2166):
    
    # Call to ones(...): (line 2166)
    # Processing the call arguments (line 2166)
    # Getting the type of 'T' (line 2166)
    T_269805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 13), 'T', False)
    # Obtaining the member 'shape' of a type (line 2166)
    shape_269806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2166, 13), T_269805, 'shape')
    # Getting the type of 'sys' (line 2166)
    sys_269807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 22), 'sys', False)
    # Obtaining the member 'A' of a type (line 2166)
    A_269808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2166, 22), sys_269807, 'A')
    # Obtaining the member 'dtype' of a type (line 2166)
    dtype_269809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2166, 22), A_269808, 'dtype')
    # Processing the call keyword arguments (line 2166)
    kwargs_269810 = {}
    # Getting the type of 'ones' (line 2166)
    ones_269804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 8), 'ones', False)
    # Calling ones(args, kwargs) (line 2166)
    ones_call_result_269811 = invoke(stypy.reporting.localization.Localization(__file__, 2166, 8), ones_269804, *[shape_269806, dtype_269809], **kwargs_269810)
    
    # Assigning a type to the variable 'U' (line 2166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 4), 'U', ones_call_result_269811)
    
    # Assigning a Call to a Name (line 2167):
    
    # Assigning a Call to a Name (line 2167):
    
    # Call to lsim2(...): (line 2167)
    # Processing the call arguments (line 2167)
    # Getting the type of 'sys' (line 2167)
    sys_269813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 17), 'sys', False)
    # Getting the type of 'U' (line 2167)
    U_269814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 22), 'U', False)
    # Getting the type of 'T' (line 2167)
    T_269815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 25), 'T', False)
    # Processing the call keyword arguments (line 2167)
    # Getting the type of 'X0' (line 2167)
    X0_269816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 31), 'X0', False)
    keyword_269817 = X0_269816
    # Getting the type of 'kwargs' (line 2167)
    kwargs_269818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 37), 'kwargs', False)
    kwargs_269819 = {'kwargs_269818': kwargs_269818, 'X0': keyword_269817}
    # Getting the type of 'lsim2' (line 2167)
    lsim2_269812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 11), 'lsim2', False)
    # Calling lsim2(args, kwargs) (line 2167)
    lsim2_call_result_269820 = invoke(stypy.reporting.localization.Localization(__file__, 2167, 11), lsim2_269812, *[sys_269813, U_269814, T_269815], **kwargs_269819)
    
    # Assigning a type to the variable 'vals' (line 2167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2167, 4), 'vals', lsim2_call_result_269820)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2168)
    tuple_269821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2168, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2168)
    # Adding element type (line 2168)
    
    # Obtaining the type of the subscript
    int_269822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2168, 16), 'int')
    # Getting the type of 'vals' (line 2168)
    vals_269823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 11), 'vals')
    # Obtaining the member '__getitem__' of a type (line 2168)
    getitem___269824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2168, 11), vals_269823, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2168)
    subscript_call_result_269825 = invoke(stypy.reporting.localization.Localization(__file__, 2168, 11), getitem___269824, int_269822)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2168, 11), tuple_269821, subscript_call_result_269825)
    # Adding element type (line 2168)
    
    # Obtaining the type of the subscript
    int_269826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2168, 25), 'int')
    # Getting the type of 'vals' (line 2168)
    vals_269827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 20), 'vals')
    # Obtaining the member '__getitem__' of a type (line 2168)
    getitem___269828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2168, 20), vals_269827, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2168)
    subscript_call_result_269829 = invoke(stypy.reporting.localization.Localization(__file__, 2168, 20), getitem___269828, int_269826)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2168, 11), tuple_269821, subscript_call_result_269829)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2168, 4), 'stypy_return_type', tuple_269821)
    
    # ################# End of 'step2(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'step2' in the type store
    # Getting the type of 'stypy_return_type' (line 2103)
    stypy_return_type_269830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_269830)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'step2'
    return stypy_return_type_269830

# Assigning a type to the variable 'step2' (line 2103)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2103, 0), 'step2', step2)

@norecursion
def bode(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2171)
    None_269831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 19), 'None')
    int_269832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2171, 27), 'int')
    defaults = [None_269831, int_269832]
    # Create a new context for function 'bode'
    module_type_store = module_type_store.open_function_context('bode', 2171, 0, False)
    
    # Passed parameters checking function
    bode.stypy_localization = localization
    bode.stypy_type_of_self = None
    bode.stypy_type_store = module_type_store
    bode.stypy_function_name = 'bode'
    bode.stypy_param_names_list = ['system', 'w', 'n']
    bode.stypy_varargs_param_name = None
    bode.stypy_kwargs_param_name = None
    bode.stypy_call_defaults = defaults
    bode.stypy_call_varargs = varargs
    bode.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bode', ['system', 'w', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bode', localization, ['system', 'w', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bode(...)' code ##################

    str_269833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, (-1)), 'str', '\n    Calculate Bode magnitude and phase data of a continuous-time system.\n\n    Parameters\n    ----------\n    system : an instance of the LTI class or a tuple describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n            * 1 (instance of `lti`)\n            * 2 (num, den)\n            * 3 (zeros, poles, gain)\n            * 4 (A, B, C, D)\n\n    w : array_like, optional\n        Array of frequencies (in rad/s). Magnitude and phase data is calculated\n        for every value in this array. If not given a reasonable set will be\n        calculated.\n    n : int, optional\n        Number of frequency points to compute if `w` is not given. The `n`\n        frequencies are logarithmically spaced in an interval chosen to\n        include the influence of the poles and zeros of the system.\n\n    Returns\n    -------\n    w : 1D ndarray\n        Frequency array [rad/s]\n    mag : 1D ndarray\n        Magnitude array [dB]\n    phase : 1D ndarray\n        Phase array [deg]\n\n    Notes\n    -----\n    If (num, den) is passed in for ``system``, coefficients for both the\n    numerator and denominator should be specified in descending exponent\n    order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).\n\n    .. versionadded:: 0.11.0\n\n    Examples\n    --------\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> sys = signal.TransferFunction([1], [1, 1])\n    >>> w, mag, phase = signal.bode(sys)\n\n    >>> plt.figure()\n    >>> plt.semilogx(w, mag)    # Bode magnitude plot\n    >>> plt.figure()\n    >>> plt.semilogx(w, phase)  # Bode phase plot\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Tuple (line 2227):
    
    # Assigning a Subscript to a Name (line 2227):
    
    # Obtaining the type of the subscript
    int_269834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2227, 4), 'int')
    
    # Call to freqresp(...): (line 2227)
    # Processing the call arguments (line 2227)
    # Getting the type of 'system' (line 2227)
    system_269836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 20), 'system', False)
    # Processing the call keyword arguments (line 2227)
    # Getting the type of 'w' (line 2227)
    w_269837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 30), 'w', False)
    keyword_269838 = w_269837
    # Getting the type of 'n' (line 2227)
    n_269839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 35), 'n', False)
    keyword_269840 = n_269839
    kwargs_269841 = {'w': keyword_269838, 'n': keyword_269840}
    # Getting the type of 'freqresp' (line 2227)
    freqresp_269835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 11), 'freqresp', False)
    # Calling freqresp(args, kwargs) (line 2227)
    freqresp_call_result_269842 = invoke(stypy.reporting.localization.Localization(__file__, 2227, 11), freqresp_269835, *[system_269836], **kwargs_269841)
    
    # Obtaining the member '__getitem__' of a type (line 2227)
    getitem___269843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2227, 4), freqresp_call_result_269842, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2227)
    subscript_call_result_269844 = invoke(stypy.reporting.localization.Localization(__file__, 2227, 4), getitem___269843, int_269834)
    
    # Assigning a type to the variable 'tuple_var_assignment_267128' (line 2227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 4), 'tuple_var_assignment_267128', subscript_call_result_269844)
    
    # Assigning a Subscript to a Name (line 2227):
    
    # Obtaining the type of the subscript
    int_269845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2227, 4), 'int')
    
    # Call to freqresp(...): (line 2227)
    # Processing the call arguments (line 2227)
    # Getting the type of 'system' (line 2227)
    system_269847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 20), 'system', False)
    # Processing the call keyword arguments (line 2227)
    # Getting the type of 'w' (line 2227)
    w_269848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 30), 'w', False)
    keyword_269849 = w_269848
    # Getting the type of 'n' (line 2227)
    n_269850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 35), 'n', False)
    keyword_269851 = n_269850
    kwargs_269852 = {'w': keyword_269849, 'n': keyword_269851}
    # Getting the type of 'freqresp' (line 2227)
    freqresp_269846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 11), 'freqresp', False)
    # Calling freqresp(args, kwargs) (line 2227)
    freqresp_call_result_269853 = invoke(stypy.reporting.localization.Localization(__file__, 2227, 11), freqresp_269846, *[system_269847], **kwargs_269852)
    
    # Obtaining the member '__getitem__' of a type (line 2227)
    getitem___269854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2227, 4), freqresp_call_result_269853, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2227)
    subscript_call_result_269855 = invoke(stypy.reporting.localization.Localization(__file__, 2227, 4), getitem___269854, int_269845)
    
    # Assigning a type to the variable 'tuple_var_assignment_267129' (line 2227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 4), 'tuple_var_assignment_267129', subscript_call_result_269855)
    
    # Assigning a Name to a Name (line 2227):
    # Getting the type of 'tuple_var_assignment_267128' (line 2227)
    tuple_var_assignment_267128_269856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 4), 'tuple_var_assignment_267128')
    # Assigning a type to the variable 'w' (line 2227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 4), 'w', tuple_var_assignment_267128_269856)
    
    # Assigning a Name to a Name (line 2227):
    # Getting the type of 'tuple_var_assignment_267129' (line 2227)
    tuple_var_assignment_267129_269857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 4), 'tuple_var_assignment_267129')
    # Assigning a type to the variable 'y' (line 2227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2227, 7), 'y', tuple_var_assignment_267129_269857)
    
    # Assigning a BinOp to a Name (line 2229):
    
    # Assigning a BinOp to a Name (line 2229):
    float_269858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2229, 10), 'float')
    
    # Call to log10(...): (line 2229)
    # Processing the call arguments (line 2229)
    
    # Call to abs(...): (line 2229)
    # Processing the call arguments (line 2229)
    # Getting the type of 'y' (line 2229)
    y_269862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 33), 'y', False)
    # Processing the call keyword arguments (line 2229)
    kwargs_269863 = {}
    # Getting the type of 'abs' (line 2229)
    abs_269861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 2229)
    abs_call_result_269864 = invoke(stypy.reporting.localization.Localization(__file__, 2229, 29), abs_269861, *[y_269862], **kwargs_269863)
    
    # Processing the call keyword arguments (line 2229)
    kwargs_269865 = {}
    # Getting the type of 'numpy' (line 2229)
    numpy_269859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 17), 'numpy', False)
    # Obtaining the member 'log10' of a type (line 2229)
    log10_269860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2229, 17), numpy_269859, 'log10')
    # Calling log10(args, kwargs) (line 2229)
    log10_call_result_269866 = invoke(stypy.reporting.localization.Localization(__file__, 2229, 17), log10_269860, *[abs_call_result_269864], **kwargs_269865)
    
    # Applying the binary operator '*' (line 2229)
    result_mul_269867 = python_operator(stypy.reporting.localization.Localization(__file__, 2229, 10), '*', float_269858, log10_call_result_269866)
    
    # Assigning a type to the variable 'mag' (line 2229)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 4), 'mag', result_mul_269867)
    
    # Assigning a BinOp to a Name (line 2230):
    
    # Assigning a BinOp to a Name (line 2230):
    
    # Call to unwrap(...): (line 2230)
    # Processing the call arguments (line 2230)
    
    # Call to arctan2(...): (line 2230)
    # Processing the call arguments (line 2230)
    # Getting the type of 'y' (line 2230)
    y_269872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 39), 'y', False)
    # Obtaining the member 'imag' of a type (line 2230)
    imag_269873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2230, 39), y_269872, 'imag')
    # Getting the type of 'y' (line 2230)
    y_269874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 47), 'y', False)
    # Obtaining the member 'real' of a type (line 2230)
    real_269875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2230, 47), y_269874, 'real')
    # Processing the call keyword arguments (line 2230)
    kwargs_269876 = {}
    # Getting the type of 'numpy' (line 2230)
    numpy_269870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 25), 'numpy', False)
    # Obtaining the member 'arctan2' of a type (line 2230)
    arctan2_269871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2230, 25), numpy_269870, 'arctan2')
    # Calling arctan2(args, kwargs) (line 2230)
    arctan2_call_result_269877 = invoke(stypy.reporting.localization.Localization(__file__, 2230, 25), arctan2_269871, *[imag_269873, real_269875], **kwargs_269876)
    
    # Processing the call keyword arguments (line 2230)
    kwargs_269878 = {}
    # Getting the type of 'numpy' (line 2230)
    numpy_269868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 12), 'numpy', False)
    # Obtaining the member 'unwrap' of a type (line 2230)
    unwrap_269869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2230, 12), numpy_269868, 'unwrap')
    # Calling unwrap(args, kwargs) (line 2230)
    unwrap_call_result_269879 = invoke(stypy.reporting.localization.Localization(__file__, 2230, 12), unwrap_269869, *[arctan2_call_result_269877], **kwargs_269878)
    
    float_269880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2230, 58), 'float')
    # Applying the binary operator '*' (line 2230)
    result_mul_269881 = python_operator(stypy.reporting.localization.Localization(__file__, 2230, 12), '*', unwrap_call_result_269879, float_269880)
    
    # Getting the type of 'numpy' (line 2230)
    numpy_269882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2230, 66), 'numpy')
    # Obtaining the member 'pi' of a type (line 2230)
    pi_269883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2230, 66), numpy_269882, 'pi')
    # Applying the binary operator 'div' (line 2230)
    result_div_269884 = python_operator(stypy.reporting.localization.Localization(__file__, 2230, 64), 'div', result_mul_269881, pi_269883)
    
    # Assigning a type to the variable 'phase' (line 2230)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2230, 4), 'phase', result_div_269884)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2232)
    tuple_269885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2232, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2232)
    # Adding element type (line 2232)
    # Getting the type of 'w' (line 2232)
    w_269886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 11), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2232, 11), tuple_269885, w_269886)
    # Adding element type (line 2232)
    # Getting the type of 'mag' (line 2232)
    mag_269887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 14), 'mag')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2232, 11), tuple_269885, mag_269887)
    # Adding element type (line 2232)
    # Getting the type of 'phase' (line 2232)
    phase_269888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 19), 'phase')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2232, 11), tuple_269885, phase_269888)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 4), 'stypy_return_type', tuple_269885)
    
    # ################# End of 'bode(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bode' in the type store
    # Getting the type of 'stypy_return_type' (line 2171)
    stypy_return_type_269889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_269889)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bode'
    return stypy_return_type_269889

# Assigning a type to the variable 'bode' (line 2171)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2171, 0), 'bode', bode)

@norecursion
def freqresp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2235)
    None_269890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 23), 'None')
    int_269891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2235, 31), 'int')
    defaults = [None_269890, int_269891]
    # Create a new context for function 'freqresp'
    module_type_store = module_type_store.open_function_context('freqresp', 2235, 0, False)
    
    # Passed parameters checking function
    freqresp.stypy_localization = localization
    freqresp.stypy_type_of_self = None
    freqresp.stypy_type_store = module_type_store
    freqresp.stypy_function_name = 'freqresp'
    freqresp.stypy_param_names_list = ['system', 'w', 'n']
    freqresp.stypy_varargs_param_name = None
    freqresp.stypy_kwargs_param_name = None
    freqresp.stypy_call_defaults = defaults
    freqresp.stypy_call_varargs = varargs
    freqresp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'freqresp', ['system', 'w', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'freqresp', localization, ['system', 'w', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'freqresp(...)' code ##################

    str_269892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2288, (-1)), 'str', 'Calculate the frequency response of a continuous-time system.\n\n    Parameters\n    ----------\n    system : an instance of the `lti` class or a tuple describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n            * 1 (instance of `lti`)\n            * 2 (num, den)\n            * 3 (zeros, poles, gain)\n            * 4 (A, B, C, D)\n\n    w : array_like, optional\n        Array of frequencies (in rad/s). Magnitude and phase data is\n        calculated for every value in this array. If not given, a reasonable\n        set will be calculated.\n    n : int, optional\n        Number of frequency points to compute if `w` is not given. The `n`\n        frequencies are logarithmically spaced in an interval chosen to\n        include the influence of the poles and zeros of the system.\n\n    Returns\n    -------\n    w : 1D ndarray\n        Frequency array [rad/s]\n    H : 1D ndarray\n        Array of complex magnitude values\n\n    Notes\n    -----\n    If (num, den) is passed in for ``system``, coefficients for both the\n    numerator and denominator should be specified in descending exponent\n    order (e.g. ``s^2 + 3s + 5`` would be represented as ``[1, 3, 5]``).\n\n    Examples\n    --------\n    Generating the Nyquist plot of a transfer function\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    Transfer function: H(s) = 5 / (s-1)^3\n\n    >>> s1 = signal.ZerosPolesGain([], [1, 1, 1], [5])\n\n    >>> w, H = signal.freqresp(s1)\n\n    >>> plt.figure()\n    >>> plt.plot(H.real, H.imag, "b")\n    >>> plt.plot(H.real, -H.imag, "r")\n    >>> plt.show()\n    ')
    
    
    # Call to isinstance(...): (line 2289)
    # Processing the call arguments (line 2289)
    # Getting the type of 'system' (line 2289)
    system_269894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 18), 'system', False)
    # Getting the type of 'lti' (line 2289)
    lti_269895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 26), 'lti', False)
    # Processing the call keyword arguments (line 2289)
    kwargs_269896 = {}
    # Getting the type of 'isinstance' (line 2289)
    isinstance_269893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2289, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2289)
    isinstance_call_result_269897 = invoke(stypy.reporting.localization.Localization(__file__, 2289, 7), isinstance_269893, *[system_269894, lti_269895], **kwargs_269896)
    
    # Testing the type of an if condition (line 2289)
    if_condition_269898 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2289, 4), isinstance_call_result_269897)
    # Assigning a type to the variable 'if_condition_269898' (line 2289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2289, 4), 'if_condition_269898', if_condition_269898)
    # SSA begins for if statement (line 2289)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isinstance(...): (line 2290)
    # Processing the call arguments (line 2290)
    # Getting the type of 'system' (line 2290)
    system_269900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 22), 'system', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2290)
    tuple_269901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2290, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2290)
    # Adding element type (line 2290)
    # Getting the type of 'TransferFunction' (line 2290)
    TransferFunction_269902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 31), 'TransferFunction', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2290, 31), tuple_269901, TransferFunction_269902)
    # Adding element type (line 2290)
    # Getting the type of 'ZerosPolesGain' (line 2290)
    ZerosPolesGain_269903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 49), 'ZerosPolesGain', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2290, 31), tuple_269901, ZerosPolesGain_269903)
    
    # Processing the call keyword arguments (line 2290)
    kwargs_269904 = {}
    # Getting the type of 'isinstance' (line 2290)
    isinstance_269899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2290)
    isinstance_call_result_269905 = invoke(stypy.reporting.localization.Localization(__file__, 2290, 11), isinstance_269899, *[system_269900, tuple_269901], **kwargs_269904)
    
    # Testing the type of an if condition (line 2290)
    if_condition_269906 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2290, 8), isinstance_call_result_269905)
    # Assigning a type to the variable 'if_condition_269906' (line 2290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 8), 'if_condition_269906', if_condition_269906)
    # SSA begins for if statement (line 2290)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2291):
    
    # Assigning a Name to a Name (line 2291):
    # Getting the type of 'system' (line 2291)
    system_269907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 18), 'system')
    # Assigning a type to the variable 'sys' (line 2291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2291, 12), 'sys', system_269907)
    # SSA branch for the else part of an if statement (line 2290)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2293):
    
    # Assigning a Call to a Name (line 2293):
    
    # Call to _as_zpk(...): (line 2293)
    # Processing the call keyword arguments (line 2293)
    kwargs_269910 = {}
    # Getting the type of 'system' (line 2293)
    system_269908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 18), 'system', False)
    # Obtaining the member '_as_zpk' of a type (line 2293)
    _as_zpk_269909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 18), system_269908, '_as_zpk')
    # Calling _as_zpk(args, kwargs) (line 2293)
    _as_zpk_call_result_269911 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 18), _as_zpk_269909, *[], **kwargs_269910)
    
    # Assigning a type to the variable 'sys' (line 2293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 12), 'sys', _as_zpk_call_result_269911)
    # SSA join for if statement (line 2290)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2289)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 2294)
    # Processing the call arguments (line 2294)
    # Getting the type of 'system' (line 2294)
    system_269913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 20), 'system', False)
    # Getting the type of 'dlti' (line 2294)
    dlti_269914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 28), 'dlti', False)
    # Processing the call keyword arguments (line 2294)
    kwargs_269915 = {}
    # Getting the type of 'isinstance' (line 2294)
    isinstance_269912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2294)
    isinstance_call_result_269916 = invoke(stypy.reporting.localization.Localization(__file__, 2294, 9), isinstance_269912, *[system_269913, dlti_269914], **kwargs_269915)
    
    # Testing the type of an if condition (line 2294)
    if_condition_269917 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2294, 9), isinstance_call_result_269916)
    # Assigning a type to the variable 'if_condition_269917' (line 2294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 9), 'if_condition_269917', if_condition_269917)
    # SSA begins for if statement (line 2294)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 2295)
    # Processing the call arguments (line 2295)
    str_269919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2295, 29), 'str', 'freqresp can only be used with continuous-time systems.')
    # Processing the call keyword arguments (line 2295)
    kwargs_269920 = {}
    # Getting the type of 'AttributeError' (line 2295)
    AttributeError_269918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 14), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 2295)
    AttributeError_call_result_269921 = invoke(stypy.reporting.localization.Localization(__file__, 2295, 14), AttributeError_269918, *[str_269919], **kwargs_269920)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2295, 8), AttributeError_call_result_269921, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 2294)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2298):
    
    # Assigning a Call to a Name (line 2298):
    
    # Call to _as_zpk(...): (line 2298)
    # Processing the call keyword arguments (line 2298)
    kwargs_269927 = {}
    
    # Call to lti(...): (line 2298)
    # Getting the type of 'system' (line 2298)
    system_269923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 19), 'system', False)
    # Processing the call keyword arguments (line 2298)
    kwargs_269924 = {}
    # Getting the type of 'lti' (line 2298)
    lti_269922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 14), 'lti', False)
    # Calling lti(args, kwargs) (line 2298)
    lti_call_result_269925 = invoke(stypy.reporting.localization.Localization(__file__, 2298, 14), lti_269922, *[system_269923], **kwargs_269924)
    
    # Obtaining the member '_as_zpk' of a type (line 2298)
    _as_zpk_269926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 14), lti_call_result_269925, '_as_zpk')
    # Calling _as_zpk(args, kwargs) (line 2298)
    _as_zpk_call_result_269928 = invoke(stypy.reporting.localization.Localization(__file__, 2298, 14), _as_zpk_269926, *[], **kwargs_269927)
    
    # Assigning a type to the variable 'sys' (line 2298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2298, 8), 'sys', _as_zpk_call_result_269928)
    # SSA join for if statement (line 2294)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2289)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'sys' (line 2300)
    sys_269929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 7), 'sys')
    # Obtaining the member 'inputs' of a type (line 2300)
    inputs_269930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2300, 7), sys_269929, 'inputs')
    int_269931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2300, 21), 'int')
    # Applying the binary operator '!=' (line 2300)
    result_ne_269932 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 7), '!=', inputs_269930, int_269931)
    
    
    # Getting the type of 'sys' (line 2300)
    sys_269933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 26), 'sys')
    # Obtaining the member 'outputs' of a type (line 2300)
    outputs_269934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2300, 26), sys_269933, 'outputs')
    int_269935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2300, 41), 'int')
    # Applying the binary operator '!=' (line 2300)
    result_ne_269936 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 26), '!=', outputs_269934, int_269935)
    
    # Applying the binary operator 'or' (line 2300)
    result_or_keyword_269937 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 7), 'or', result_ne_269932, result_ne_269936)
    
    # Testing the type of an if condition (line 2300)
    if_condition_269938 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2300, 4), result_or_keyword_269937)
    # Assigning a type to the variable 'if_condition_269938' (line 2300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2300, 4), 'if_condition_269938', if_condition_269938)
    # SSA begins for if statement (line 2300)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2301)
    # Processing the call arguments (line 2301)
    str_269940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2301, 25), 'str', 'freqresp() requires a SISO (single input, single output) system.')
    # Processing the call keyword arguments (line 2301)
    kwargs_269941 = {}
    # Getting the type of 'ValueError' (line 2301)
    ValueError_269939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2301)
    ValueError_call_result_269942 = invoke(stypy.reporting.localization.Localization(__file__, 2301, 14), ValueError_269939, *[str_269940], **kwargs_269941)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2301, 8), ValueError_call_result_269942, 'raise parameter', BaseException)
    # SSA join for if statement (line 2300)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2304)
    # Getting the type of 'w' (line 2304)
    w_269943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 4), 'w')
    # Getting the type of 'None' (line 2304)
    None_269944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 16), 'None')
    
    (may_be_269945, more_types_in_union_269946) = may_not_be_none(w_269943, None_269944)

    if may_be_269945:

        if more_types_in_union_269946:
            # Runtime conditional SSA (line 2304)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 2305):
        
        # Assigning a Name to a Name (line 2305):
        # Getting the type of 'w' (line 2305)
        w_269947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 15), 'w')
        # Assigning a type to the variable 'worN' (line 2305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2305, 8), 'worN', w_269947)

        if more_types_in_union_269946:
            # Runtime conditional SSA for else branch (line 2304)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_269945) or more_types_in_union_269946):
        
        # Assigning a Name to a Name (line 2307):
        
        # Assigning a Name to a Name (line 2307):
        # Getting the type of 'n' (line 2307)
        n_269948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 15), 'n')
        # Assigning a type to the variable 'worN' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'worN', n_269948)

        if (may_be_269945 and more_types_in_union_269946):
            # SSA join for if statement (line 2304)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to isinstance(...): (line 2309)
    # Processing the call arguments (line 2309)
    # Getting the type of 'sys' (line 2309)
    sys_269950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 18), 'sys', False)
    # Getting the type of 'TransferFunction' (line 2309)
    TransferFunction_269951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 23), 'TransferFunction', False)
    # Processing the call keyword arguments (line 2309)
    kwargs_269952 = {}
    # Getting the type of 'isinstance' (line 2309)
    isinstance_269949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2309)
    isinstance_call_result_269953 = invoke(stypy.reporting.localization.Localization(__file__, 2309, 7), isinstance_269949, *[sys_269950, TransferFunction_269951], **kwargs_269952)
    
    # Testing the type of an if condition (line 2309)
    if_condition_269954 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2309, 4), isinstance_call_result_269953)
    # Assigning a type to the variable 'if_condition_269954' (line 2309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2309, 4), 'if_condition_269954', if_condition_269954)
    # SSA begins for if statement (line 2309)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 2312):
    
    # Assigning a Subscript to a Name (line 2312):
    
    # Obtaining the type of the subscript
    int_269955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2312, 8), 'int')
    
    # Call to freqs(...): (line 2312)
    # Processing the call arguments (line 2312)
    
    # Call to ravel(...): (line 2312)
    # Processing the call keyword arguments (line 2312)
    kwargs_269960 = {}
    # Getting the type of 'sys' (line 2312)
    sys_269957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 21), 'sys', False)
    # Obtaining the member 'num' of a type (line 2312)
    num_269958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 21), sys_269957, 'num')
    # Obtaining the member 'ravel' of a type (line 2312)
    ravel_269959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 21), num_269958, 'ravel')
    # Calling ravel(args, kwargs) (line 2312)
    ravel_call_result_269961 = invoke(stypy.reporting.localization.Localization(__file__, 2312, 21), ravel_269959, *[], **kwargs_269960)
    
    # Getting the type of 'sys' (line 2312)
    sys_269962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 38), 'sys', False)
    # Obtaining the member 'den' of a type (line 2312)
    den_269963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 38), sys_269962, 'den')
    # Processing the call keyword arguments (line 2312)
    # Getting the type of 'worN' (line 2312)
    worN_269964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 52), 'worN', False)
    keyword_269965 = worN_269964
    kwargs_269966 = {'worN': keyword_269965}
    # Getting the type of 'freqs' (line 2312)
    freqs_269956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 15), 'freqs', False)
    # Calling freqs(args, kwargs) (line 2312)
    freqs_call_result_269967 = invoke(stypy.reporting.localization.Localization(__file__, 2312, 15), freqs_269956, *[ravel_call_result_269961, den_269963], **kwargs_269966)
    
    # Obtaining the member '__getitem__' of a type (line 2312)
    getitem___269968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 8), freqs_call_result_269967, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2312)
    subscript_call_result_269969 = invoke(stypy.reporting.localization.Localization(__file__, 2312, 8), getitem___269968, int_269955)
    
    # Assigning a type to the variable 'tuple_var_assignment_267130' (line 2312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2312, 8), 'tuple_var_assignment_267130', subscript_call_result_269969)
    
    # Assigning a Subscript to a Name (line 2312):
    
    # Obtaining the type of the subscript
    int_269970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2312, 8), 'int')
    
    # Call to freqs(...): (line 2312)
    # Processing the call arguments (line 2312)
    
    # Call to ravel(...): (line 2312)
    # Processing the call keyword arguments (line 2312)
    kwargs_269975 = {}
    # Getting the type of 'sys' (line 2312)
    sys_269972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 21), 'sys', False)
    # Obtaining the member 'num' of a type (line 2312)
    num_269973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 21), sys_269972, 'num')
    # Obtaining the member 'ravel' of a type (line 2312)
    ravel_269974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 21), num_269973, 'ravel')
    # Calling ravel(args, kwargs) (line 2312)
    ravel_call_result_269976 = invoke(stypy.reporting.localization.Localization(__file__, 2312, 21), ravel_269974, *[], **kwargs_269975)
    
    # Getting the type of 'sys' (line 2312)
    sys_269977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 38), 'sys', False)
    # Obtaining the member 'den' of a type (line 2312)
    den_269978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 38), sys_269977, 'den')
    # Processing the call keyword arguments (line 2312)
    # Getting the type of 'worN' (line 2312)
    worN_269979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 52), 'worN', False)
    keyword_269980 = worN_269979
    kwargs_269981 = {'worN': keyword_269980}
    # Getting the type of 'freqs' (line 2312)
    freqs_269971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 15), 'freqs', False)
    # Calling freqs(args, kwargs) (line 2312)
    freqs_call_result_269982 = invoke(stypy.reporting.localization.Localization(__file__, 2312, 15), freqs_269971, *[ravel_call_result_269976, den_269978], **kwargs_269981)
    
    # Obtaining the member '__getitem__' of a type (line 2312)
    getitem___269983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2312, 8), freqs_call_result_269982, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2312)
    subscript_call_result_269984 = invoke(stypy.reporting.localization.Localization(__file__, 2312, 8), getitem___269983, int_269970)
    
    # Assigning a type to the variable 'tuple_var_assignment_267131' (line 2312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2312, 8), 'tuple_var_assignment_267131', subscript_call_result_269984)
    
    # Assigning a Name to a Name (line 2312):
    # Getting the type of 'tuple_var_assignment_267130' (line 2312)
    tuple_var_assignment_267130_269985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 8), 'tuple_var_assignment_267130')
    # Assigning a type to the variable 'w' (line 2312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2312, 8), 'w', tuple_var_assignment_267130_269985)
    
    # Assigning a Name to a Name (line 2312):
    # Getting the type of 'tuple_var_assignment_267131' (line 2312)
    tuple_var_assignment_267131_269986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2312, 8), 'tuple_var_assignment_267131')
    # Assigning a type to the variable 'h' (line 2312)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2312, 11), 'h', tuple_var_assignment_267131_269986)
    # SSA branch for the else part of an if statement (line 2309)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 2314)
    # Processing the call arguments (line 2314)
    # Getting the type of 'sys' (line 2314)
    sys_269988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 20), 'sys', False)
    # Getting the type of 'ZerosPolesGain' (line 2314)
    ZerosPolesGain_269989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 25), 'ZerosPolesGain', False)
    # Processing the call keyword arguments (line 2314)
    kwargs_269990 = {}
    # Getting the type of 'isinstance' (line 2314)
    isinstance_269987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2314)
    isinstance_call_result_269991 = invoke(stypy.reporting.localization.Localization(__file__, 2314, 9), isinstance_269987, *[sys_269988, ZerosPolesGain_269989], **kwargs_269990)
    
    # Testing the type of an if condition (line 2314)
    if_condition_269992 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2314, 9), isinstance_call_result_269991)
    # Assigning a type to the variable 'if_condition_269992' (line 2314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2314, 9), 'if_condition_269992', if_condition_269992)
    # SSA begins for if statement (line 2314)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 2315):
    
    # Assigning a Subscript to a Name (line 2315):
    
    # Obtaining the type of the subscript
    int_269993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2315, 8), 'int')
    
    # Call to freqs_zpk(...): (line 2315)
    # Processing the call arguments (line 2315)
    # Getting the type of 'sys' (line 2315)
    sys_269995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 25), 'sys', False)
    # Obtaining the member 'zeros' of a type (line 2315)
    zeros_269996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2315, 25), sys_269995, 'zeros')
    # Getting the type of 'sys' (line 2315)
    sys_269997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 36), 'sys', False)
    # Obtaining the member 'poles' of a type (line 2315)
    poles_269998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2315, 36), sys_269997, 'poles')
    # Getting the type of 'sys' (line 2315)
    sys_269999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 47), 'sys', False)
    # Obtaining the member 'gain' of a type (line 2315)
    gain_270000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2315, 47), sys_269999, 'gain')
    # Processing the call keyword arguments (line 2315)
    # Getting the type of 'worN' (line 2315)
    worN_270001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 62), 'worN', False)
    keyword_270002 = worN_270001
    kwargs_270003 = {'worN': keyword_270002}
    # Getting the type of 'freqs_zpk' (line 2315)
    freqs_zpk_269994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 15), 'freqs_zpk', False)
    # Calling freqs_zpk(args, kwargs) (line 2315)
    freqs_zpk_call_result_270004 = invoke(stypy.reporting.localization.Localization(__file__, 2315, 15), freqs_zpk_269994, *[zeros_269996, poles_269998, gain_270000], **kwargs_270003)
    
    # Obtaining the member '__getitem__' of a type (line 2315)
    getitem___270005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2315, 8), freqs_zpk_call_result_270004, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2315)
    subscript_call_result_270006 = invoke(stypy.reporting.localization.Localization(__file__, 2315, 8), getitem___270005, int_269993)
    
    # Assigning a type to the variable 'tuple_var_assignment_267132' (line 2315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2315, 8), 'tuple_var_assignment_267132', subscript_call_result_270006)
    
    # Assigning a Subscript to a Name (line 2315):
    
    # Obtaining the type of the subscript
    int_270007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2315, 8), 'int')
    
    # Call to freqs_zpk(...): (line 2315)
    # Processing the call arguments (line 2315)
    # Getting the type of 'sys' (line 2315)
    sys_270009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 25), 'sys', False)
    # Obtaining the member 'zeros' of a type (line 2315)
    zeros_270010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2315, 25), sys_270009, 'zeros')
    # Getting the type of 'sys' (line 2315)
    sys_270011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 36), 'sys', False)
    # Obtaining the member 'poles' of a type (line 2315)
    poles_270012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2315, 36), sys_270011, 'poles')
    # Getting the type of 'sys' (line 2315)
    sys_270013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 47), 'sys', False)
    # Obtaining the member 'gain' of a type (line 2315)
    gain_270014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2315, 47), sys_270013, 'gain')
    # Processing the call keyword arguments (line 2315)
    # Getting the type of 'worN' (line 2315)
    worN_270015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 62), 'worN', False)
    keyword_270016 = worN_270015
    kwargs_270017 = {'worN': keyword_270016}
    # Getting the type of 'freqs_zpk' (line 2315)
    freqs_zpk_270008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 15), 'freqs_zpk', False)
    # Calling freqs_zpk(args, kwargs) (line 2315)
    freqs_zpk_call_result_270018 = invoke(stypy.reporting.localization.Localization(__file__, 2315, 15), freqs_zpk_270008, *[zeros_270010, poles_270012, gain_270014], **kwargs_270017)
    
    # Obtaining the member '__getitem__' of a type (line 2315)
    getitem___270019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2315, 8), freqs_zpk_call_result_270018, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2315)
    subscript_call_result_270020 = invoke(stypy.reporting.localization.Localization(__file__, 2315, 8), getitem___270019, int_270007)
    
    # Assigning a type to the variable 'tuple_var_assignment_267133' (line 2315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2315, 8), 'tuple_var_assignment_267133', subscript_call_result_270020)
    
    # Assigning a Name to a Name (line 2315):
    # Getting the type of 'tuple_var_assignment_267132' (line 2315)
    tuple_var_assignment_267132_270021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 8), 'tuple_var_assignment_267132')
    # Assigning a type to the variable 'w' (line 2315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2315, 8), 'w', tuple_var_assignment_267132_270021)
    
    # Assigning a Name to a Name (line 2315):
    # Getting the type of 'tuple_var_assignment_267133' (line 2315)
    tuple_var_assignment_267133_270022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 8), 'tuple_var_assignment_267133')
    # Assigning a type to the variable 'h' (line 2315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2315, 11), 'h', tuple_var_assignment_267133_270022)
    # SSA join for if statement (line 2314)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2309)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2317)
    tuple_270023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2317, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2317)
    # Adding element type (line 2317)
    # Getting the type of 'w' (line 2317)
    w_270024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 11), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2317, 11), tuple_270023, w_270024)
    # Adding element type (line 2317)
    # Getting the type of 'h' (line 2317)
    h_270025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 14), 'h')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2317, 11), tuple_270023, h_270025)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2317)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2317, 4), 'stypy_return_type', tuple_270023)
    
    # ################# End of 'freqresp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'freqresp' in the type store
    # Getting the type of 'stypy_return_type' (line 2235)
    stypy_return_type_270026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_270026)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'freqresp'
    return stypy_return_type_270026

# Assigning a type to the variable 'freqresp' (line 2235)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 0), 'freqresp', freqresp)
# Declaration of the 'Bunch' class

class Bunch:

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2323, 4, False)
        # Assigning a type to the variable 'self' (line 2324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2324, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Bunch.__init__', [], None, 'kwds', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to update(...): (line 2324)
        # Processing the call arguments (line 2324)
        # Getting the type of 'kwds' (line 2324)
        kwds_270030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2324, 29), 'kwds', False)
        # Processing the call keyword arguments (line 2324)
        kwargs_270031 = {}
        # Getting the type of 'self' (line 2324)
        self_270027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2324, 8), 'self', False)
        # Obtaining the member '__dict__' of a type (line 2324)
        dict___270028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2324, 8), self_270027, '__dict__')
        # Obtaining the member 'update' of a type (line 2324)
        update_270029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2324, 8), dict___270028, 'update')
        # Calling update(args, kwargs) (line 2324)
        update_call_result_270032 = invoke(stypy.reporting.localization.Localization(__file__, 2324, 8), update_270029, *[kwds_270030], **kwargs_270031)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Bunch' (line 2322)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2322, 0), 'Bunch', Bunch)

@norecursion
def _valid_inputs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_valid_inputs'
    module_type_store = module_type_store.open_function_context('_valid_inputs', 2327, 0, False)
    
    # Passed parameters checking function
    _valid_inputs.stypy_localization = localization
    _valid_inputs.stypy_type_of_self = None
    _valid_inputs.stypy_type_store = module_type_store
    _valid_inputs.stypy_function_name = '_valid_inputs'
    _valid_inputs.stypy_param_names_list = ['A', 'B', 'poles', 'method', 'rtol', 'maxiter']
    _valid_inputs.stypy_varargs_param_name = None
    _valid_inputs.stypy_kwargs_param_name = None
    _valid_inputs.stypy_call_defaults = defaults
    _valid_inputs.stypy_call_varargs = varargs
    _valid_inputs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_valid_inputs', ['A', 'B', 'poles', 'method', 'rtol', 'maxiter'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_valid_inputs', localization, ['A', 'B', 'poles', 'method', 'rtol', 'maxiter'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_valid_inputs(...)' code ##################

    str_270033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2334, (-1)), 'str', '\n    Check the poles come in complex conjugage pairs\n    Check shapes of A, B and poles are compatible.\n    Check the method chosen is compatible with provided poles\n    Return update method to use and ordered poles\n\n    ')
    
    # Assigning a Call to a Name (line 2335):
    
    # Assigning a Call to a Name (line 2335):
    
    # Call to asarray(...): (line 2335)
    # Processing the call arguments (line 2335)
    # Getting the type of 'poles' (line 2335)
    poles_270036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 23), 'poles', False)
    # Processing the call keyword arguments (line 2335)
    kwargs_270037 = {}
    # Getting the type of 'np' (line 2335)
    np_270034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2335)
    asarray_270035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2335, 12), np_270034, 'asarray')
    # Calling asarray(args, kwargs) (line 2335)
    asarray_call_result_270038 = invoke(stypy.reporting.localization.Localization(__file__, 2335, 12), asarray_270035, *[poles_270036], **kwargs_270037)
    
    # Assigning a type to the variable 'poles' (line 2335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2335, 4), 'poles', asarray_call_result_270038)
    
    
    # Getting the type of 'poles' (line 2336)
    poles_270039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 7), 'poles')
    # Obtaining the member 'ndim' of a type (line 2336)
    ndim_270040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2336, 7), poles_270039, 'ndim')
    int_270041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2336, 20), 'int')
    # Applying the binary operator '>' (line 2336)
    result_gt_270042 = python_operator(stypy.reporting.localization.Localization(__file__, 2336, 7), '>', ndim_270040, int_270041)
    
    # Testing the type of an if condition (line 2336)
    if_condition_270043 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2336, 4), result_gt_270042)
    # Assigning a type to the variable 'if_condition_270043' (line 2336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2336, 4), 'if_condition_270043', if_condition_270043)
    # SSA begins for if statement (line 2336)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2337)
    # Processing the call arguments (line 2337)
    str_270045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 25), 'str', 'Poles must be a 1D array like.')
    # Processing the call keyword arguments (line 2337)
    kwargs_270046 = {}
    # Getting the type of 'ValueError' (line 2337)
    ValueError_270044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2337)
    ValueError_call_result_270047 = invoke(stypy.reporting.localization.Localization(__file__, 2337, 14), ValueError_270044, *[str_270045], **kwargs_270046)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2337, 8), ValueError_call_result_270047, 'raise parameter', BaseException)
    # SSA join for if statement (line 2336)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2339):
    
    # Assigning a Call to a Name (line 2339):
    
    # Call to _order_complex_poles(...): (line 2339)
    # Processing the call arguments (line 2339)
    # Getting the type of 'poles' (line 2339)
    poles_270049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 33), 'poles', False)
    # Processing the call keyword arguments (line 2339)
    kwargs_270050 = {}
    # Getting the type of '_order_complex_poles' (line 2339)
    _order_complex_poles_270048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 12), '_order_complex_poles', False)
    # Calling _order_complex_poles(args, kwargs) (line 2339)
    _order_complex_poles_call_result_270051 = invoke(stypy.reporting.localization.Localization(__file__, 2339, 12), _order_complex_poles_270048, *[poles_270049], **kwargs_270050)
    
    # Assigning a type to the variable 'poles' (line 2339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2339, 4), 'poles', _order_complex_poles_call_result_270051)
    
    
    # Getting the type of 'A' (line 2340)
    A_270052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 7), 'A')
    # Obtaining the member 'ndim' of a type (line 2340)
    ndim_270053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 7), A_270052, 'ndim')
    int_270054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2340, 16), 'int')
    # Applying the binary operator '>' (line 2340)
    result_gt_270055 = python_operator(stypy.reporting.localization.Localization(__file__, 2340, 7), '>', ndim_270053, int_270054)
    
    # Testing the type of an if condition (line 2340)
    if_condition_270056 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2340, 4), result_gt_270055)
    # Assigning a type to the variable 'if_condition_270056' (line 2340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2340, 4), 'if_condition_270056', if_condition_270056)
    # SSA begins for if statement (line 2340)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2341)
    # Processing the call arguments (line 2341)
    str_270058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2341, 25), 'str', 'A must be a 2D array/matrix.')
    # Processing the call keyword arguments (line 2341)
    kwargs_270059 = {}
    # Getting the type of 'ValueError' (line 2341)
    ValueError_270057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2341)
    ValueError_call_result_270060 = invoke(stypy.reporting.localization.Localization(__file__, 2341, 14), ValueError_270057, *[str_270058], **kwargs_270059)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2341, 8), ValueError_call_result_270060, 'raise parameter', BaseException)
    # SSA join for if statement (line 2340)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'B' (line 2342)
    B_270061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 7), 'B')
    # Obtaining the member 'ndim' of a type (line 2342)
    ndim_270062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2342, 7), B_270061, 'ndim')
    int_270063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2342, 16), 'int')
    # Applying the binary operator '>' (line 2342)
    result_gt_270064 = python_operator(stypy.reporting.localization.Localization(__file__, 2342, 7), '>', ndim_270062, int_270063)
    
    # Testing the type of an if condition (line 2342)
    if_condition_270065 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2342, 4), result_gt_270064)
    # Assigning a type to the variable 'if_condition_270065' (line 2342)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2342, 4), 'if_condition_270065', if_condition_270065)
    # SSA begins for if statement (line 2342)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2343)
    # Processing the call arguments (line 2343)
    str_270067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2343, 25), 'str', 'B must be a 2D array/matrix')
    # Processing the call keyword arguments (line 2343)
    kwargs_270068 = {}
    # Getting the type of 'ValueError' (line 2343)
    ValueError_270066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2343, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2343)
    ValueError_call_result_270069 = invoke(stypy.reporting.localization.Localization(__file__, 2343, 14), ValueError_270066, *[str_270067], **kwargs_270068)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2343, 8), ValueError_call_result_270069, 'raise parameter', BaseException)
    # SSA join for if statement (line 2342)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_270070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2344, 15), 'int')
    # Getting the type of 'A' (line 2344)
    A_270071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 7), 'A')
    # Obtaining the member 'shape' of a type (line 2344)
    shape_270072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 7), A_270071, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2344)
    getitem___270073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 7), shape_270072, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2344)
    subscript_call_result_270074 = invoke(stypy.reporting.localization.Localization(__file__, 2344, 7), getitem___270073, int_270070)
    
    
    # Obtaining the type of the subscript
    int_270075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2344, 29), 'int')
    # Getting the type of 'A' (line 2344)
    A_270076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 21), 'A')
    # Obtaining the member 'shape' of a type (line 2344)
    shape_270077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 21), A_270076, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2344)
    getitem___270078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 21), shape_270077, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2344)
    subscript_call_result_270079 = invoke(stypy.reporting.localization.Localization(__file__, 2344, 21), getitem___270078, int_270075)
    
    # Applying the binary operator '!=' (line 2344)
    result_ne_270080 = python_operator(stypy.reporting.localization.Localization(__file__, 2344, 7), '!=', subscript_call_result_270074, subscript_call_result_270079)
    
    # Testing the type of an if condition (line 2344)
    if_condition_270081 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2344, 4), result_ne_270080)
    # Assigning a type to the variable 'if_condition_270081' (line 2344)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2344, 4), 'if_condition_270081', if_condition_270081)
    # SSA begins for if statement (line 2344)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2345)
    # Processing the call arguments (line 2345)
    str_270083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2345, 25), 'str', 'A must be square')
    # Processing the call keyword arguments (line 2345)
    kwargs_270084 = {}
    # Getting the type of 'ValueError' (line 2345)
    ValueError_270082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2345)
    ValueError_call_result_270085 = invoke(stypy.reporting.localization.Localization(__file__, 2345, 14), ValueError_270082, *[str_270083], **kwargs_270084)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2345, 8), ValueError_call_result_270085, 'raise parameter', BaseException)
    # SSA join for if statement (line 2344)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 2346)
    # Processing the call arguments (line 2346)
    # Getting the type of 'poles' (line 2346)
    poles_270087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 11), 'poles', False)
    # Processing the call keyword arguments (line 2346)
    kwargs_270088 = {}
    # Getting the type of 'len' (line 2346)
    len_270086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 7), 'len', False)
    # Calling len(args, kwargs) (line 2346)
    len_call_result_270089 = invoke(stypy.reporting.localization.Localization(__file__, 2346, 7), len_270086, *[poles_270087], **kwargs_270088)
    
    
    # Obtaining the type of the subscript
    int_270090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2346, 28), 'int')
    # Getting the type of 'A' (line 2346)
    A_270091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 20), 'A')
    # Obtaining the member 'shape' of a type (line 2346)
    shape_270092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 20), A_270091, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2346)
    getitem___270093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2346, 20), shape_270092, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2346)
    subscript_call_result_270094 = invoke(stypy.reporting.localization.Localization(__file__, 2346, 20), getitem___270093, int_270090)
    
    # Applying the binary operator '>' (line 2346)
    result_gt_270095 = python_operator(stypy.reporting.localization.Localization(__file__, 2346, 7), '>', len_call_result_270089, subscript_call_result_270094)
    
    # Testing the type of an if condition (line 2346)
    if_condition_270096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2346, 4), result_gt_270095)
    # Assigning a type to the variable 'if_condition_270096' (line 2346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2346, 4), 'if_condition_270096', if_condition_270096)
    # SSA begins for if statement (line 2346)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2347)
    # Processing the call arguments (line 2347)
    str_270098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2347, 25), 'str', 'maximum number of poles is %d but you asked for %d')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2348)
    tuple_270099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2348, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2348)
    # Adding element type (line 2348)
    
    # Obtaining the type of the subscript
    int_270100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2348, 34), 'int')
    # Getting the type of 'A' (line 2348)
    A_270101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 26), 'A', False)
    # Obtaining the member 'shape' of a type (line 2348)
    shape_270102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2348, 26), A_270101, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2348)
    getitem___270103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2348, 26), shape_270102, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2348)
    subscript_call_result_270104 = invoke(stypy.reporting.localization.Localization(__file__, 2348, 26), getitem___270103, int_270100)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2348, 26), tuple_270099, subscript_call_result_270104)
    # Adding element type (line 2348)
    
    # Call to len(...): (line 2348)
    # Processing the call arguments (line 2348)
    # Getting the type of 'poles' (line 2348)
    poles_270106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 42), 'poles', False)
    # Processing the call keyword arguments (line 2348)
    kwargs_270107 = {}
    # Getting the type of 'len' (line 2348)
    len_270105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 38), 'len', False)
    # Calling len(args, kwargs) (line 2348)
    len_call_result_270108 = invoke(stypy.reporting.localization.Localization(__file__, 2348, 38), len_270105, *[poles_270106], **kwargs_270107)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2348, 26), tuple_270099, len_call_result_270108)
    
    # Applying the binary operator '%' (line 2347)
    result_mod_270109 = python_operator(stypy.reporting.localization.Localization(__file__, 2347, 25), '%', str_270098, tuple_270099)
    
    # Processing the call keyword arguments (line 2347)
    kwargs_270110 = {}
    # Getting the type of 'ValueError' (line 2347)
    ValueError_270097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2347)
    ValueError_call_result_270111 = invoke(stypy.reporting.localization.Localization(__file__, 2347, 14), ValueError_270097, *[result_mod_270109], **kwargs_270110)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2347, 8), ValueError_call_result_270111, 'raise parameter', BaseException)
    # SSA join for if statement (line 2346)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 2349)
    # Processing the call arguments (line 2349)
    # Getting the type of 'poles' (line 2349)
    poles_270113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 11), 'poles', False)
    # Processing the call keyword arguments (line 2349)
    kwargs_270114 = {}
    # Getting the type of 'len' (line 2349)
    len_270112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 7), 'len', False)
    # Calling len(args, kwargs) (line 2349)
    len_call_result_270115 = invoke(stypy.reporting.localization.Localization(__file__, 2349, 7), len_270112, *[poles_270113], **kwargs_270114)
    
    
    # Obtaining the type of the subscript
    int_270116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2349, 28), 'int')
    # Getting the type of 'A' (line 2349)
    A_270117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 20), 'A')
    # Obtaining the member 'shape' of a type (line 2349)
    shape_270118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2349, 20), A_270117, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2349)
    getitem___270119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2349, 20), shape_270118, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2349)
    subscript_call_result_270120 = invoke(stypy.reporting.localization.Localization(__file__, 2349, 20), getitem___270119, int_270116)
    
    # Applying the binary operator '<' (line 2349)
    result_lt_270121 = python_operator(stypy.reporting.localization.Localization(__file__, 2349, 7), '<', len_call_result_270115, subscript_call_result_270120)
    
    # Testing the type of an if condition (line 2349)
    if_condition_270122 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2349, 4), result_lt_270121)
    # Assigning a type to the variable 'if_condition_270122' (line 2349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2349, 4), 'if_condition_270122', if_condition_270122)
    # SSA begins for if statement (line 2349)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2350)
    # Processing the call arguments (line 2350)
    str_270124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2350, 25), 'str', 'number of poles is %d but you should provide %d')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2351)
    tuple_270125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2351, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2351)
    # Adding element type (line 2351)
    
    # Call to len(...): (line 2351)
    # Processing the call arguments (line 2351)
    # Getting the type of 'poles' (line 2351)
    poles_270127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 30), 'poles', False)
    # Processing the call keyword arguments (line 2351)
    kwargs_270128 = {}
    # Getting the type of 'len' (line 2351)
    len_270126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 26), 'len', False)
    # Calling len(args, kwargs) (line 2351)
    len_call_result_270129 = invoke(stypy.reporting.localization.Localization(__file__, 2351, 26), len_270126, *[poles_270127], **kwargs_270128)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2351, 26), tuple_270125, len_call_result_270129)
    # Adding element type (line 2351)
    
    # Obtaining the type of the subscript
    int_270130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2351, 46), 'int')
    # Getting the type of 'A' (line 2351)
    A_270131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 38), 'A', False)
    # Obtaining the member 'shape' of a type (line 2351)
    shape_270132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 38), A_270131, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2351)
    getitem___270133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 38), shape_270132, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2351)
    subscript_call_result_270134 = invoke(stypy.reporting.localization.Localization(__file__, 2351, 38), getitem___270133, int_270130)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2351, 26), tuple_270125, subscript_call_result_270134)
    
    # Applying the binary operator '%' (line 2350)
    result_mod_270135 = python_operator(stypy.reporting.localization.Localization(__file__, 2350, 25), '%', str_270124, tuple_270125)
    
    # Processing the call keyword arguments (line 2350)
    kwargs_270136 = {}
    # Getting the type of 'ValueError' (line 2350)
    ValueError_270123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2350, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2350)
    ValueError_call_result_270137 = invoke(stypy.reporting.localization.Localization(__file__, 2350, 14), ValueError_270123, *[result_mod_270135], **kwargs_270136)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2350, 8), ValueError_call_result_270137, 'raise parameter', BaseException)
    # SSA join for if statement (line 2349)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2352):
    
    # Assigning a Call to a Name (line 2352):
    
    # Call to matrix_rank(...): (line 2352)
    # Processing the call arguments (line 2352)
    # Getting the type of 'B' (line 2352)
    B_270141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 30), 'B', False)
    # Processing the call keyword arguments (line 2352)
    kwargs_270142 = {}
    # Getting the type of 'np' (line 2352)
    np_270138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 8), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2352)
    linalg_270139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2352, 8), np_270138, 'linalg')
    # Obtaining the member 'matrix_rank' of a type (line 2352)
    matrix_rank_270140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2352, 8), linalg_270139, 'matrix_rank')
    # Calling matrix_rank(args, kwargs) (line 2352)
    matrix_rank_call_result_270143 = invoke(stypy.reporting.localization.Localization(__file__, 2352, 8), matrix_rank_270140, *[B_270141], **kwargs_270142)
    
    # Assigning a type to the variable 'r' (line 2352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2352, 4), 'r', matrix_rank_call_result_270143)
    
    # Getting the type of 'poles' (line 2353)
    poles_270144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 13), 'poles')
    # Testing the type of a for loop iterable (line 2353)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2353, 4), poles_270144)
    # Getting the type of the for loop variable (line 2353)
    for_loop_var_270145 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2353, 4), poles_270144)
    # Assigning a type to the variable 'p' (line 2353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2353, 4), 'p', for_loop_var_270145)
    # SSA begins for a for statement (line 2353)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to sum(...): (line 2354)
    # Processing the call arguments (line 2354)
    
    # Getting the type of 'p' (line 2354)
    p_270147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 15), 'p', False)
    # Getting the type of 'poles' (line 2354)
    poles_270148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 20), 'poles', False)
    # Applying the binary operator '==' (line 2354)
    result_eq_270149 = python_operator(stypy.reporting.localization.Localization(__file__, 2354, 15), '==', p_270147, poles_270148)
    
    # Processing the call keyword arguments (line 2354)
    kwargs_270150 = {}
    # Getting the type of 'sum' (line 2354)
    sum_270146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 11), 'sum', False)
    # Calling sum(args, kwargs) (line 2354)
    sum_call_result_270151 = invoke(stypy.reporting.localization.Localization(__file__, 2354, 11), sum_270146, *[result_eq_270149], **kwargs_270150)
    
    # Getting the type of 'r' (line 2354)
    r_270152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2354, 29), 'r')
    # Applying the binary operator '>' (line 2354)
    result_gt_270153 = python_operator(stypy.reporting.localization.Localization(__file__, 2354, 11), '>', sum_call_result_270151, r_270152)
    
    # Testing the type of an if condition (line 2354)
    if_condition_270154 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2354, 8), result_gt_270153)
    # Assigning a type to the variable 'if_condition_270154' (line 2354)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2354, 8), 'if_condition_270154', if_condition_270154)
    # SSA begins for if statement (line 2354)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2355)
    # Processing the call arguments (line 2355)
    str_270156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2355, 29), 'str', 'at least one of the requested pole is repeated more than rank(B) times')
    # Processing the call keyword arguments (line 2355)
    kwargs_270157 = {}
    # Getting the type of 'ValueError' (line 2355)
    ValueError_270155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2355)
    ValueError_call_result_270158 = invoke(stypy.reporting.localization.Localization(__file__, 2355, 18), ValueError_270155, *[str_270156], **kwargs_270157)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2355, 12), ValueError_call_result_270158, 'raise parameter', BaseException)
    # SSA join for if statement (line 2354)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 2358):
    
    # Assigning a Name to a Name (line 2358):
    # Getting the type of '_YT_loop' (line 2358)
    _YT_loop_270159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 18), '_YT_loop')
    # Assigning a type to the variable 'update_loop' (line 2358)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2358, 4), 'update_loop', _YT_loop_270159)
    
    
    # Getting the type of 'method' (line 2359)
    method_270160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 7), 'method')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2359)
    tuple_270161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2359, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2359)
    # Adding element type (line 2359)
    str_270162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2359, 22), 'str', 'KNV0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2359, 22), tuple_270161, str_270162)
    # Adding element type (line 2359)
    str_270163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2359, 29), 'str', 'YT')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2359, 22), tuple_270161, str_270163)
    
    # Applying the binary operator 'notin' (line 2359)
    result_contains_270164 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 7), 'notin', method_270160, tuple_270161)
    
    # Testing the type of an if condition (line 2359)
    if_condition_270165 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2359, 4), result_contains_270164)
    # Assigning a type to the variable 'if_condition_270165' (line 2359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2359, 4), 'if_condition_270165', if_condition_270165)
    # SSA begins for if statement (line 2359)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2360)
    # Processing the call arguments (line 2360)
    str_270167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2360, 25), 'str', "The method keyword must be one of 'YT' or 'KNV0'")
    # Processing the call keyword arguments (line 2360)
    kwargs_270168 = {}
    # Getting the type of 'ValueError' (line 2360)
    ValueError_270166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2360, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2360)
    ValueError_call_result_270169 = invoke(stypy.reporting.localization.Localization(__file__, 2360, 14), ValueError_270166, *[str_270167], **kwargs_270168)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2360, 8), ValueError_call_result_270169, 'raise parameter', BaseException)
    # SSA join for if statement (line 2359)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'method' (line 2362)
    method_270170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 7), 'method')
    str_270171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2362, 17), 'str', 'KNV0')
    # Applying the binary operator '==' (line 2362)
    result_eq_270172 = python_operator(stypy.reporting.localization.Localization(__file__, 2362, 7), '==', method_270170, str_270171)
    
    # Testing the type of an if condition (line 2362)
    if_condition_270173 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2362, 4), result_eq_270172)
    # Assigning a type to the variable 'if_condition_270173' (line 2362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2362, 4), 'if_condition_270173', if_condition_270173)
    # SSA begins for if statement (line 2362)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2363):
    
    # Assigning a Name to a Name (line 2363):
    # Getting the type of '_KNV0_loop' (line 2363)
    _KNV0_loop_270174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 22), '_KNV0_loop')
    # Assigning a type to the variable 'update_loop' (line 2363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2363, 8), 'update_loop', _KNV0_loop_270174)
    
    
    
    # Call to all(...): (line 2364)
    # Processing the call arguments (line 2364)
    
    # Call to isreal(...): (line 2364)
    # Processing the call arguments (line 2364)
    # Getting the type of 'poles' (line 2364)
    poles_270178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 29), 'poles', False)
    # Processing the call keyword arguments (line 2364)
    kwargs_270179 = {}
    # Getting the type of 'np' (line 2364)
    np_270176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 19), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2364)
    isreal_270177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2364, 19), np_270176, 'isreal')
    # Calling isreal(args, kwargs) (line 2364)
    isreal_call_result_270180 = invoke(stypy.reporting.localization.Localization(__file__, 2364, 19), isreal_270177, *[poles_270178], **kwargs_270179)
    
    # Processing the call keyword arguments (line 2364)
    kwargs_270181 = {}
    # Getting the type of 'all' (line 2364)
    all_270175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 15), 'all', False)
    # Calling all(args, kwargs) (line 2364)
    all_call_result_270182 = invoke(stypy.reporting.localization.Localization(__file__, 2364, 15), all_270175, *[isreal_call_result_270180], **kwargs_270181)
    
    # Applying the 'not' unary operator (line 2364)
    result_not__270183 = python_operator(stypy.reporting.localization.Localization(__file__, 2364, 11), 'not', all_call_result_270182)
    
    # Testing the type of an if condition (line 2364)
    if_condition_270184 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2364, 8), result_not__270183)
    # Assigning a type to the variable 'if_condition_270184' (line 2364)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2364, 8), 'if_condition_270184', if_condition_270184)
    # SSA begins for if statement (line 2364)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2365)
    # Processing the call arguments (line 2365)
    str_270186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 29), 'str', 'Complex poles are not supported by KNV0')
    # Processing the call keyword arguments (line 2365)
    kwargs_270187 = {}
    # Getting the type of 'ValueError' (line 2365)
    ValueError_270185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2365)
    ValueError_call_result_270188 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 18), ValueError_270185, *[str_270186], **kwargs_270187)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2365, 12), ValueError_call_result_270188, 'raise parameter', BaseException)
    # SSA join for if statement (line 2364)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2362)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'maxiter' (line 2367)
    maxiter_270189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 7), 'maxiter')
    int_270190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2367, 17), 'int')
    # Applying the binary operator '<' (line 2367)
    result_lt_270191 = python_operator(stypy.reporting.localization.Localization(__file__, 2367, 7), '<', maxiter_270189, int_270190)
    
    # Testing the type of an if condition (line 2367)
    if_condition_270192 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2367, 4), result_lt_270191)
    # Assigning a type to the variable 'if_condition_270192' (line 2367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2367, 4), 'if_condition_270192', if_condition_270192)
    # SSA begins for if statement (line 2367)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2368)
    # Processing the call arguments (line 2368)
    str_270194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2368, 25), 'str', 'maxiter must be at least equal to 1')
    # Processing the call keyword arguments (line 2368)
    kwargs_270195 = {}
    # Getting the type of 'ValueError' (line 2368)
    ValueError_270193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2368)
    ValueError_call_result_270196 = invoke(stypy.reporting.localization.Localization(__file__, 2368, 14), ValueError_270193, *[str_270194], **kwargs_270195)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2368, 8), ValueError_call_result_270196, 'raise parameter', BaseException)
    # SSA join for if statement (line 2367)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'rtol' (line 2372)
    rtol_270197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 7), 'rtol')
    int_270198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2372, 14), 'int')
    # Applying the binary operator '>' (line 2372)
    result_gt_270199 = python_operator(stypy.reporting.localization.Localization(__file__, 2372, 7), '>', rtol_270197, int_270198)
    
    # Testing the type of an if condition (line 2372)
    if_condition_270200 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2372, 4), result_gt_270199)
    # Assigning a type to the variable 'if_condition_270200' (line 2372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2372, 4), 'if_condition_270200', if_condition_270200)
    # SSA begins for if statement (line 2372)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2373)
    # Processing the call arguments (line 2373)
    str_270202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2373, 25), 'str', 'rtol can not be greater than 1')
    # Processing the call keyword arguments (line 2373)
    kwargs_270203 = {}
    # Getting the type of 'ValueError' (line 2373)
    ValueError_270201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2373)
    ValueError_call_result_270204 = invoke(stypy.reporting.localization.Localization(__file__, 2373, 14), ValueError_270201, *[str_270202], **kwargs_270203)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2373, 8), ValueError_call_result_270204, 'raise parameter', BaseException)
    # SSA join for if statement (line 2372)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2375)
    tuple_270205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2375, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2375)
    # Adding element type (line 2375)
    # Getting the type of 'update_loop' (line 2375)
    update_loop_270206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 11), 'update_loop')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2375, 11), tuple_270205, update_loop_270206)
    # Adding element type (line 2375)
    # Getting the type of 'poles' (line 2375)
    poles_270207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 24), 'poles')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2375, 11), tuple_270205, poles_270207)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2375, 4), 'stypy_return_type', tuple_270205)
    
    # ################# End of '_valid_inputs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_valid_inputs' in the type store
    # Getting the type of 'stypy_return_type' (line 2327)
    stypy_return_type_270208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_270208)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_valid_inputs'
    return stypy_return_type_270208

# Assigning a type to the variable '_valid_inputs' (line 2327)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 0), '_valid_inputs', _valid_inputs)

@norecursion
def _order_complex_poles(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_order_complex_poles'
    module_type_store = module_type_store.open_function_context('_order_complex_poles', 2378, 0, False)
    
    # Passed parameters checking function
    _order_complex_poles.stypy_localization = localization
    _order_complex_poles.stypy_type_of_self = None
    _order_complex_poles.stypy_type_store = module_type_store
    _order_complex_poles.stypy_function_name = '_order_complex_poles'
    _order_complex_poles.stypy_param_names_list = ['poles']
    _order_complex_poles.stypy_varargs_param_name = None
    _order_complex_poles.stypy_kwargs_param_name = None
    _order_complex_poles.stypy_call_defaults = defaults
    _order_complex_poles.stypy_call_varargs = varargs
    _order_complex_poles.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_order_complex_poles', ['poles'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_order_complex_poles', localization, ['poles'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_order_complex_poles(...)' code ##################

    str_270209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2384, (-1)), 'str', '\n    Check we have complex conjugates pairs and reorder P according to YT, ie\n    real_poles, complex_i, conjugate complex_i, ....\n    The lexicographic sort on the complex poles is added to help the user to\n    compare sets of poles.\n    ')
    
    # Assigning a Call to a Name (line 2385):
    
    # Assigning a Call to a Name (line 2385):
    
    # Call to sort(...): (line 2385)
    # Processing the call arguments (line 2385)
    
    # Obtaining the type of the subscript
    
    # Call to isreal(...): (line 2385)
    # Processing the call arguments (line 2385)
    # Getting the type of 'poles' (line 2385)
    poles_270214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 44), 'poles', False)
    # Processing the call keyword arguments (line 2385)
    kwargs_270215 = {}
    # Getting the type of 'np' (line 2385)
    np_270212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 34), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2385)
    isreal_270213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2385, 34), np_270212, 'isreal')
    # Calling isreal(args, kwargs) (line 2385)
    isreal_call_result_270216 = invoke(stypy.reporting.localization.Localization(__file__, 2385, 34), isreal_270213, *[poles_270214], **kwargs_270215)
    
    # Getting the type of 'poles' (line 2385)
    poles_270217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 28), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2385)
    getitem___270218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2385, 28), poles_270217, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2385)
    subscript_call_result_270219 = invoke(stypy.reporting.localization.Localization(__file__, 2385, 28), getitem___270218, isreal_call_result_270216)
    
    # Processing the call keyword arguments (line 2385)
    kwargs_270220 = {}
    # Getting the type of 'np' (line 2385)
    np_270210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 20), 'np', False)
    # Obtaining the member 'sort' of a type (line 2385)
    sort_270211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2385, 20), np_270210, 'sort')
    # Calling sort(args, kwargs) (line 2385)
    sort_call_result_270221 = invoke(stypy.reporting.localization.Localization(__file__, 2385, 20), sort_270211, *[subscript_call_result_270219], **kwargs_270220)
    
    # Assigning a type to the variable 'ordered_poles' (line 2385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2385, 4), 'ordered_poles', sort_call_result_270221)
    
    # Assigning a List to a Name (line 2386):
    
    # Assigning a List to a Name (line 2386):
    
    # Obtaining an instance of the builtin type 'list' (line 2386)
    list_270222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2386, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2386)
    
    # Assigning a type to the variable 'im_poles' (line 2386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2386, 4), 'im_poles', list_270222)
    
    
    # Call to sort(...): (line 2387)
    # Processing the call arguments (line 2387)
    
    # Obtaining the type of the subscript
    
    
    # Call to imag(...): (line 2387)
    # Processing the call arguments (line 2387)
    # Getting the type of 'poles' (line 2387)
    poles_270227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 35), 'poles', False)
    # Processing the call keyword arguments (line 2387)
    kwargs_270228 = {}
    # Getting the type of 'np' (line 2387)
    np_270225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 27), 'np', False)
    # Obtaining the member 'imag' of a type (line 2387)
    imag_270226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2387, 27), np_270225, 'imag')
    # Calling imag(args, kwargs) (line 2387)
    imag_call_result_270229 = invoke(stypy.reporting.localization.Localization(__file__, 2387, 27), imag_270226, *[poles_270227], **kwargs_270228)
    
    int_270230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2387, 44), 'int')
    # Applying the binary operator '<' (line 2387)
    result_lt_270231 = python_operator(stypy.reporting.localization.Localization(__file__, 2387, 27), '<', imag_call_result_270229, int_270230)
    
    # Getting the type of 'poles' (line 2387)
    poles_270232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 21), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2387)
    getitem___270233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2387, 21), poles_270232, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2387)
    subscript_call_result_270234 = invoke(stypy.reporting.localization.Localization(__file__, 2387, 21), getitem___270233, result_lt_270231)
    
    # Processing the call keyword arguments (line 2387)
    kwargs_270235 = {}
    # Getting the type of 'np' (line 2387)
    np_270223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 13), 'np', False)
    # Obtaining the member 'sort' of a type (line 2387)
    sort_270224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2387, 13), np_270223, 'sort')
    # Calling sort(args, kwargs) (line 2387)
    sort_call_result_270236 = invoke(stypy.reporting.localization.Localization(__file__, 2387, 13), sort_270224, *[subscript_call_result_270234], **kwargs_270235)
    
    # Testing the type of a for loop iterable (line 2387)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2387, 4), sort_call_result_270236)
    # Getting the type of the for loop variable (line 2387)
    for_loop_var_270237 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2387, 4), sort_call_result_270236)
    # Assigning a type to the variable 'p' (line 2387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2387, 4), 'p', for_loop_var_270237)
    # SSA begins for a for statement (line 2387)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to conj(...): (line 2388)
    # Processing the call arguments (line 2388)
    # Getting the type of 'p' (line 2388)
    p_270240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 19), 'p', False)
    # Processing the call keyword arguments (line 2388)
    kwargs_270241 = {}
    # Getting the type of 'np' (line 2388)
    np_270238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 11), 'np', False)
    # Obtaining the member 'conj' of a type (line 2388)
    conj_270239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2388, 11), np_270238, 'conj')
    # Calling conj(args, kwargs) (line 2388)
    conj_call_result_270242 = invoke(stypy.reporting.localization.Localization(__file__, 2388, 11), conj_270239, *[p_270240], **kwargs_270241)
    
    # Getting the type of 'poles' (line 2388)
    poles_270243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 25), 'poles')
    # Applying the binary operator 'in' (line 2388)
    result_contains_270244 = python_operator(stypy.reporting.localization.Localization(__file__, 2388, 11), 'in', conj_call_result_270242, poles_270243)
    
    # Testing the type of an if condition (line 2388)
    if_condition_270245 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2388, 8), result_contains_270244)
    # Assigning a type to the variable 'if_condition_270245' (line 2388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2388, 8), 'if_condition_270245', if_condition_270245)
    # SSA begins for if statement (line 2388)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 2389)
    # Processing the call arguments (line 2389)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2389)
    tuple_270248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2389, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2389)
    # Adding element type (line 2389)
    # Getting the type of 'p' (line 2389)
    p_270249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 29), 'p', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2389, 29), tuple_270248, p_270249)
    # Adding element type (line 2389)
    
    # Call to conj(...): (line 2389)
    # Processing the call arguments (line 2389)
    # Getting the type of 'p' (line 2389)
    p_270252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 40), 'p', False)
    # Processing the call keyword arguments (line 2389)
    kwargs_270253 = {}
    # Getting the type of 'np' (line 2389)
    np_270250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 32), 'np', False)
    # Obtaining the member 'conj' of a type (line 2389)
    conj_270251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2389, 32), np_270250, 'conj')
    # Calling conj(args, kwargs) (line 2389)
    conj_call_result_270254 = invoke(stypy.reporting.localization.Localization(__file__, 2389, 32), conj_270251, *[p_270252], **kwargs_270253)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2389, 29), tuple_270248, conj_call_result_270254)
    
    # Processing the call keyword arguments (line 2389)
    kwargs_270255 = {}
    # Getting the type of 'im_poles' (line 2389)
    im_poles_270246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 12), 'im_poles', False)
    # Obtaining the member 'extend' of a type (line 2389)
    extend_270247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2389, 12), im_poles_270246, 'extend')
    # Calling extend(args, kwargs) (line 2389)
    extend_call_result_270256 = invoke(stypy.reporting.localization.Localization(__file__, 2389, 12), extend_270247, *[tuple_270248], **kwargs_270255)
    
    # SSA join for if statement (line 2388)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2391):
    
    # Assigning a Call to a Name (line 2391):
    
    # Call to hstack(...): (line 2391)
    # Processing the call arguments (line 2391)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2391)
    tuple_270259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2391, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2391)
    # Adding element type (line 2391)
    # Getting the type of 'ordered_poles' (line 2391)
    ordered_poles_270260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 31), 'ordered_poles', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2391, 31), tuple_270259, ordered_poles_270260)
    # Adding element type (line 2391)
    # Getting the type of 'im_poles' (line 2391)
    im_poles_270261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 46), 'im_poles', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2391, 31), tuple_270259, im_poles_270261)
    
    # Processing the call keyword arguments (line 2391)
    kwargs_270262 = {}
    # Getting the type of 'np' (line 2391)
    np_270257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2391, 20), 'np', False)
    # Obtaining the member 'hstack' of a type (line 2391)
    hstack_270258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2391, 20), np_270257, 'hstack')
    # Calling hstack(args, kwargs) (line 2391)
    hstack_call_result_270263 = invoke(stypy.reporting.localization.Localization(__file__, 2391, 20), hstack_270258, *[tuple_270259], **kwargs_270262)
    
    # Assigning a type to the variable 'ordered_poles' (line 2391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2391, 4), 'ordered_poles', hstack_call_result_270263)
    
    
    
    # Obtaining the type of the subscript
    int_270264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2393, 19), 'int')
    # Getting the type of 'poles' (line 2393)
    poles_270265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 7), 'poles')
    # Obtaining the member 'shape' of a type (line 2393)
    shape_270266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2393, 7), poles_270265, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2393)
    getitem___270267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2393, 7), shape_270266, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2393)
    subscript_call_result_270268 = invoke(stypy.reporting.localization.Localization(__file__, 2393, 7), getitem___270267, int_270264)
    
    
    # Call to len(...): (line 2393)
    # Processing the call arguments (line 2393)
    # Getting the type of 'ordered_poles' (line 2393)
    ordered_poles_270270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 29), 'ordered_poles', False)
    # Processing the call keyword arguments (line 2393)
    kwargs_270271 = {}
    # Getting the type of 'len' (line 2393)
    len_270269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 25), 'len', False)
    # Calling len(args, kwargs) (line 2393)
    len_call_result_270272 = invoke(stypy.reporting.localization.Localization(__file__, 2393, 25), len_270269, *[ordered_poles_270270], **kwargs_270271)
    
    # Applying the binary operator '!=' (line 2393)
    result_ne_270273 = python_operator(stypy.reporting.localization.Localization(__file__, 2393, 7), '!=', subscript_call_result_270268, len_call_result_270272)
    
    # Testing the type of an if condition (line 2393)
    if_condition_270274 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2393, 4), result_ne_270273)
    # Assigning a type to the variable 'if_condition_270274' (line 2393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 4), 'if_condition_270274', if_condition_270274)
    # SSA begins for if statement (line 2393)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2394)
    # Processing the call arguments (line 2394)
    str_270276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2394, 25), 'str', 'Complex poles must come with their conjugates')
    # Processing the call keyword arguments (line 2394)
    kwargs_270277 = {}
    # Getting the type of 'ValueError' (line 2394)
    ValueError_270275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2394)
    ValueError_call_result_270278 = invoke(stypy.reporting.localization.Localization(__file__, 2394, 14), ValueError_270275, *[str_270276], **kwargs_270277)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2394, 8), ValueError_call_result_270278, 'raise parameter', BaseException)
    # SSA join for if statement (line 2393)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'ordered_poles' (line 2395)
    ordered_poles_270279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 11), 'ordered_poles')
    # Assigning a type to the variable 'stypy_return_type' (line 2395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2395, 4), 'stypy_return_type', ordered_poles_270279)
    
    # ################# End of '_order_complex_poles(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_order_complex_poles' in the type store
    # Getting the type of 'stypy_return_type' (line 2378)
    stypy_return_type_270280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_270280)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_order_complex_poles'
    return stypy_return_type_270280

# Assigning a type to the variable '_order_complex_poles' (line 2378)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2378, 0), '_order_complex_poles', _order_complex_poles)

@norecursion
def _KNV0(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_KNV0'
    module_type_store = module_type_store.open_function_context('_KNV0', 2398, 0, False)
    
    # Passed parameters checking function
    _KNV0.stypy_localization = localization
    _KNV0.stypy_type_of_self = None
    _KNV0.stypy_type_store = module_type_store
    _KNV0.stypy_function_name = '_KNV0'
    _KNV0.stypy_param_names_list = ['B', 'ker_pole', 'transfer_matrix', 'j', 'poles']
    _KNV0.stypy_varargs_param_name = None
    _KNV0.stypy_kwargs_param_name = None
    _KNV0.stypy_call_defaults = defaults
    _KNV0.stypy_call_varargs = varargs
    _KNV0.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_KNV0', ['B', 'ker_pole', 'transfer_matrix', 'j', 'poles'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_KNV0', localization, ['B', 'ker_pole', 'transfer_matrix', 'j', 'poles'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_KNV0(...)' code ##################

    str_270281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2406, (-1)), 'str', '\n    Algorithm "KNV0" Kautsky et Al. Robust pole\n    assignment in linear state feedback, Int journal of Control\n    1985, vol 41 p 1129->1155\n    http://la.epfl.ch/files/content/sites/la/files/\n        users/105941/public/KautskyNicholsDooren\n\n    ')
    
    # Assigning a Call to a Name (line 2408):
    
    # Assigning a Call to a Name (line 2408):
    
    # Call to delete(...): (line 2408)
    # Processing the call arguments (line 2408)
    # Getting the type of 'transfer_matrix' (line 2408)
    transfer_matrix_270284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 38), 'transfer_matrix', False)
    # Getting the type of 'j' (line 2408)
    j_270285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 55), 'j', False)
    # Processing the call keyword arguments (line 2408)
    int_270286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2408, 63), 'int')
    keyword_270287 = int_270286
    kwargs_270288 = {'axis': keyword_270287}
    # Getting the type of 'np' (line 2408)
    np_270282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 28), 'np', False)
    # Obtaining the member 'delete' of a type (line 2408)
    delete_270283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2408, 28), np_270282, 'delete')
    # Calling delete(args, kwargs) (line 2408)
    delete_call_result_270289 = invoke(stypy.reporting.localization.Localization(__file__, 2408, 28), delete_270283, *[transfer_matrix_270284, j_270285], **kwargs_270288)
    
    # Assigning a type to the variable 'transfer_matrix_not_j' (line 2408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2408, 4), 'transfer_matrix_not_j', delete_call_result_270289)
    
    # Assigning a Call to a Tuple (line 2418):
    
    # Assigning a Subscript to a Name (line 2418):
    
    # Obtaining the type of the subscript
    int_270290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2418, 4), 'int')
    
    # Call to s_qr(...): (line 2418)
    # Processing the call arguments (line 2418)
    # Getting the type of 'transfer_matrix_not_j' (line 2418)
    transfer_matrix_not_j_270292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 16), 'transfer_matrix_not_j', False)
    # Processing the call keyword arguments (line 2418)
    str_270293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2418, 44), 'str', 'full')
    keyword_270294 = str_270293
    kwargs_270295 = {'mode': keyword_270294}
    # Getting the type of 's_qr' (line 2418)
    s_qr_270291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 11), 's_qr', False)
    # Calling s_qr(args, kwargs) (line 2418)
    s_qr_call_result_270296 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 11), s_qr_270291, *[transfer_matrix_not_j_270292], **kwargs_270295)
    
    # Obtaining the member '__getitem__' of a type (line 2418)
    getitem___270297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2418, 4), s_qr_call_result_270296, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2418)
    subscript_call_result_270298 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 4), getitem___270297, int_270290)
    
    # Assigning a type to the variable 'tuple_var_assignment_267134' (line 2418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 4), 'tuple_var_assignment_267134', subscript_call_result_270298)
    
    # Assigning a Subscript to a Name (line 2418):
    
    # Obtaining the type of the subscript
    int_270299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2418, 4), 'int')
    
    # Call to s_qr(...): (line 2418)
    # Processing the call arguments (line 2418)
    # Getting the type of 'transfer_matrix_not_j' (line 2418)
    transfer_matrix_not_j_270301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 16), 'transfer_matrix_not_j', False)
    # Processing the call keyword arguments (line 2418)
    str_270302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2418, 44), 'str', 'full')
    keyword_270303 = str_270302
    kwargs_270304 = {'mode': keyword_270303}
    # Getting the type of 's_qr' (line 2418)
    s_qr_270300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 11), 's_qr', False)
    # Calling s_qr(args, kwargs) (line 2418)
    s_qr_call_result_270305 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 11), s_qr_270300, *[transfer_matrix_not_j_270301], **kwargs_270304)
    
    # Obtaining the member '__getitem__' of a type (line 2418)
    getitem___270306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2418, 4), s_qr_call_result_270305, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2418)
    subscript_call_result_270307 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 4), getitem___270306, int_270299)
    
    # Assigning a type to the variable 'tuple_var_assignment_267135' (line 2418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 4), 'tuple_var_assignment_267135', subscript_call_result_270307)
    
    # Assigning a Name to a Name (line 2418):
    # Getting the type of 'tuple_var_assignment_267134' (line 2418)
    tuple_var_assignment_267134_270308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 4), 'tuple_var_assignment_267134')
    # Assigning a type to the variable 'Q' (line 2418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 4), 'Q', tuple_var_assignment_267134_270308)
    
    # Assigning a Name to a Name (line 2418):
    # Getting the type of 'tuple_var_assignment_267135' (line 2418)
    tuple_var_assignment_267135_270309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 4), 'tuple_var_assignment_267135')
    # Assigning a type to the variable 'R' (line 2418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 7), 'R', tuple_var_assignment_267135_270309)
    
    # Assigning a Call to a Name (line 2420):
    
    # Assigning a Call to a Name (line 2420):
    
    # Call to dot(...): (line 2420)
    # Processing the call arguments (line 2420)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2420)
    j_270312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 33), 'j', False)
    # Getting the type of 'ker_pole' (line 2420)
    ker_pole_270313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 24), 'ker_pole', False)
    # Obtaining the member '__getitem__' of a type (line 2420)
    getitem___270314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2420, 24), ker_pole_270313, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2420)
    subscript_call_result_270315 = invoke(stypy.reporting.localization.Localization(__file__, 2420, 24), getitem___270314, j_270312)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2420)
    j_270316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 46), 'j', False)
    # Getting the type of 'ker_pole' (line 2420)
    ker_pole_270317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 37), 'ker_pole', False)
    # Obtaining the member '__getitem__' of a type (line 2420)
    getitem___270318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2420, 37), ker_pole_270317, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2420)
    subscript_call_result_270319 = invoke(stypy.reporting.localization.Localization(__file__, 2420, 37), getitem___270318, j_270316)
    
    # Obtaining the member 'T' of a type (line 2420)
    T_270320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2420, 37), subscript_call_result_270319, 'T')
    # Processing the call keyword arguments (line 2420)
    kwargs_270321 = {}
    # Getting the type of 'np' (line 2420)
    np_270310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 17), 'np', False)
    # Obtaining the member 'dot' of a type (line 2420)
    dot_270311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2420, 17), np_270310, 'dot')
    # Calling dot(args, kwargs) (line 2420)
    dot_call_result_270322 = invoke(stypy.reporting.localization.Localization(__file__, 2420, 17), dot_270311, *[subscript_call_result_270315, T_270320], **kwargs_270321)
    
    # Assigning a type to the variable 'mat_ker_pj' (line 2420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2420, 4), 'mat_ker_pj', dot_call_result_270322)
    
    # Assigning a Call to a Name (line 2421):
    
    # Assigning a Call to a Name (line 2421):
    
    # Call to dot(...): (line 2421)
    # Processing the call arguments (line 2421)
    # Getting the type of 'mat_ker_pj' (line 2421)
    mat_ker_pj_270325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 16), 'mat_ker_pj', False)
    
    # Obtaining the type of the subscript
    slice_270326 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2421, 28), None, None, None)
    int_270327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2421, 33), 'int')
    # Getting the type of 'Q' (line 2421)
    Q_270328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 28), 'Q', False)
    # Obtaining the member '__getitem__' of a type (line 2421)
    getitem___270329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2421, 28), Q_270328, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2421)
    subscript_call_result_270330 = invoke(stypy.reporting.localization.Localization(__file__, 2421, 28), getitem___270329, (slice_270326, int_270327))
    
    # Processing the call keyword arguments (line 2421)
    kwargs_270331 = {}
    # Getting the type of 'np' (line 2421)
    np_270323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 9), 'np', False)
    # Obtaining the member 'dot' of a type (line 2421)
    dot_270324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2421, 9), np_270323, 'dot')
    # Calling dot(args, kwargs) (line 2421)
    dot_call_result_270332 = invoke(stypy.reporting.localization.Localization(__file__, 2421, 9), dot_270324, *[mat_ker_pj_270325, subscript_call_result_270330], **kwargs_270331)
    
    # Assigning a type to the variable 'yj' (line 2421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2421, 4), 'yj', dot_call_result_270332)
    
    
    
    # Call to allclose(...): (line 2429)
    # Processing the call arguments (line 2429)
    # Getting the type of 'yj' (line 2429)
    yj_270335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2429, 23), 'yj', False)
    int_270336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2429, 27), 'int')
    # Processing the call keyword arguments (line 2429)
    kwargs_270337 = {}
    # Getting the type of 'np' (line 2429)
    np_270333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2429, 11), 'np', False)
    # Obtaining the member 'allclose' of a type (line 2429)
    allclose_270334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2429, 11), np_270333, 'allclose')
    # Calling allclose(args, kwargs) (line 2429)
    allclose_call_result_270338 = invoke(stypy.reporting.localization.Localization(__file__, 2429, 11), allclose_270334, *[yj_270335, int_270336], **kwargs_270337)
    
    # Applying the 'not' unary operator (line 2429)
    result_not__270339 = python_operator(stypy.reporting.localization.Localization(__file__, 2429, 7), 'not', allclose_call_result_270338)
    
    # Testing the type of an if condition (line 2429)
    if_condition_270340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2429, 4), result_not__270339)
    # Assigning a type to the variable 'if_condition_270340' (line 2429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2429, 4), 'if_condition_270340', if_condition_270340)
    # SSA begins for if statement (line 2429)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2430):
    
    # Assigning a BinOp to a Name (line 2430):
    # Getting the type of 'yj' (line 2430)
    yj_270341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 13), 'yj')
    
    # Call to norm(...): (line 2430)
    # Processing the call arguments (line 2430)
    # Getting the type of 'yj' (line 2430)
    yj_270345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 31), 'yj', False)
    # Processing the call keyword arguments (line 2430)
    kwargs_270346 = {}
    # Getting the type of 'np' (line 2430)
    np_270342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 16), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2430)
    linalg_270343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2430, 16), np_270342, 'linalg')
    # Obtaining the member 'norm' of a type (line 2430)
    norm_270344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2430, 16), linalg_270343, 'norm')
    # Calling norm(args, kwargs) (line 2430)
    norm_call_result_270347 = invoke(stypy.reporting.localization.Localization(__file__, 2430, 16), norm_270344, *[yj_270345], **kwargs_270346)
    
    # Applying the binary operator 'div' (line 2430)
    result_div_270348 = python_operator(stypy.reporting.localization.Localization(__file__, 2430, 13), 'div', yj_270341, norm_call_result_270347)
    
    # Assigning a type to the variable 'xj' (line 2430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 8), 'xj', result_div_270348)
    
    # Assigning a Name to a Subscript (line 2431):
    
    # Assigning a Name to a Subscript (line 2431):
    # Getting the type of 'xj' (line 2431)
    xj_270349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 32), 'xj')
    # Getting the type of 'transfer_matrix' (line 2431)
    transfer_matrix_270350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 8), 'transfer_matrix')
    slice_270351 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2431, 8), None, None, None)
    # Getting the type of 'j' (line 2431)
    j_270352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 27), 'j')
    # Storing an element on a container (line 2431)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2431, 8), transfer_matrix_270350, ((slice_270351, j_270352), xj_270349))
    # SSA join for if statement (line 2429)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_KNV0(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_KNV0' in the type store
    # Getting the type of 'stypy_return_type' (line 2398)
    stypy_return_type_270353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_270353)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_KNV0'
    return stypy_return_type_270353

# Assigning a type to the variable '_KNV0' (line 2398)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2398, 0), '_KNV0', _KNV0)

@norecursion
def _YT_real(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_YT_real'
    module_type_store = module_type_store.open_function_context('_YT_real', 2445, 0, False)
    
    # Passed parameters checking function
    _YT_real.stypy_localization = localization
    _YT_real.stypy_type_of_self = None
    _YT_real.stypy_type_store = module_type_store
    _YT_real.stypy_function_name = '_YT_real'
    _YT_real.stypy_param_names_list = ['ker_pole', 'Q', 'transfer_matrix', 'i', 'j']
    _YT_real.stypy_varargs_param_name = None
    _YT_real.stypy_kwargs_param_name = None
    _YT_real.stypy_call_defaults = defaults
    _YT_real.stypy_call_varargs = varargs
    _YT_real.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_YT_real', ['ker_pole', 'Q', 'transfer_matrix', 'i', 'j'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_YT_real', localization, ['ker_pole', 'Q', 'transfer_matrix', 'i', 'j'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_YT_real(...)' code ##################

    str_270354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2448, (-1)), 'str', '\n    Applies algorithm from YT section 6.1 page 19 related to real pairs\n    ')
    
    # Assigning a Subscript to a Name (line 2450):
    
    # Assigning a Subscript to a Name (line 2450):
    
    # Obtaining the type of the subscript
    slice_270355 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2450, 8), None, None, None)
    int_270356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2450, 13), 'int')
    # Getting the type of 'np' (line 2450)
    np_270357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 17), 'np')
    # Obtaining the member 'newaxis' of a type (line 2450)
    newaxis_270358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2450, 17), np_270357, 'newaxis')
    # Getting the type of 'Q' (line 2450)
    Q_270359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 8), 'Q')
    # Obtaining the member '__getitem__' of a type (line 2450)
    getitem___270360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2450, 8), Q_270359, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2450)
    subscript_call_result_270361 = invoke(stypy.reporting.localization.Localization(__file__, 2450, 8), getitem___270360, (slice_270355, int_270356, newaxis_270358))
    
    # Assigning a type to the variable 'u' (line 2450)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2450, 4), 'u', subscript_call_result_270361)
    
    # Assigning a Subscript to a Name (line 2451):
    
    # Assigning a Subscript to a Name (line 2451):
    
    # Obtaining the type of the subscript
    slice_270362 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2451, 8), None, None, None)
    int_270363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 13), 'int')
    # Getting the type of 'np' (line 2451)
    np_270364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 17), 'np')
    # Obtaining the member 'newaxis' of a type (line 2451)
    newaxis_270365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 17), np_270364, 'newaxis')
    # Getting the type of 'Q' (line 2451)
    Q_270366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 8), 'Q')
    # Obtaining the member '__getitem__' of a type (line 2451)
    getitem___270367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 8), Q_270366, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2451)
    subscript_call_result_270368 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 8), getitem___270367, (slice_270362, int_270363, newaxis_270365))
    
    # Assigning a type to the variable 'v' (line 2451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 4), 'v', subscript_call_result_270368)
    
    # Assigning a Call to a Name (line 2454):
    
    # Assigning a Call to a Name (line 2454):
    
    # Call to dot(...): (line 2454)
    # Processing the call arguments (line 2454)
    
    # Call to dot(...): (line 2454)
    # Processing the call arguments (line 2454)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2454)
    i_270373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 31), 'i', False)
    # Getting the type of 'ker_pole' (line 2454)
    ker_pole_270374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 22), 'ker_pole', False)
    # Obtaining the member '__getitem__' of a type (line 2454)
    getitem___270375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 22), ker_pole_270374, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2454)
    subscript_call_result_270376 = invoke(stypy.reporting.localization.Localization(__file__, 2454, 22), getitem___270375, i_270373)
    
    # Obtaining the member 'T' of a type (line 2454)
    T_270377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 22), subscript_call_result_270376, 'T')
    
    # Call to dot(...): (line 2454)
    # Processing the call arguments (line 2454)
    # Getting the type of 'u' (line 2454)
    u_270380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 44), 'u', False)
    # Getting the type of 'v' (line 2454)
    v_270381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 47), 'v', False)
    # Obtaining the member 'T' of a type (line 2454)
    T_270382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 47), v_270381, 'T')
    # Processing the call keyword arguments (line 2454)
    kwargs_270383 = {}
    # Getting the type of 'np' (line 2454)
    np_270378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 37), 'np', False)
    # Obtaining the member 'dot' of a type (line 2454)
    dot_270379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 37), np_270378, 'dot')
    # Calling dot(args, kwargs) (line 2454)
    dot_call_result_270384 = invoke(stypy.reporting.localization.Localization(__file__, 2454, 37), dot_270379, *[u_270380, T_270382], **kwargs_270383)
    
    
    # Call to dot(...): (line 2455)
    # Processing the call arguments (line 2455)
    # Getting the type of 'v' (line 2455)
    v_270387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 15), 'v', False)
    # Getting the type of 'u' (line 2455)
    u_270388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 18), 'u', False)
    # Obtaining the member 'T' of a type (line 2455)
    T_270389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2455, 18), u_270388, 'T')
    # Processing the call keyword arguments (line 2455)
    kwargs_270390 = {}
    # Getting the type of 'np' (line 2455)
    np_270385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 8), 'np', False)
    # Obtaining the member 'dot' of a type (line 2455)
    dot_270386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2455, 8), np_270385, 'dot')
    # Calling dot(args, kwargs) (line 2455)
    dot_call_result_270391 = invoke(stypy.reporting.localization.Localization(__file__, 2455, 8), dot_270386, *[v_270387, T_270389], **kwargs_270390)
    
    # Applying the binary operator '-' (line 2454)
    result_sub_270392 = python_operator(stypy.reporting.localization.Localization(__file__, 2454, 37), '-', dot_call_result_270384, dot_call_result_270391)
    
    # Processing the call keyword arguments (line 2454)
    kwargs_270393 = {}
    # Getting the type of 'np' (line 2454)
    np_270371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 15), 'np', False)
    # Obtaining the member 'dot' of a type (line 2454)
    dot_270372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 15), np_270371, 'dot')
    # Calling dot(args, kwargs) (line 2454)
    dot_call_result_270394 = invoke(stypy.reporting.localization.Localization(__file__, 2454, 15), dot_270372, *[T_270377, result_sub_270392], **kwargs_270393)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2455)
    j_270395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 34), 'j', False)
    # Getting the type of 'ker_pole' (line 2455)
    ker_pole_270396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 25), 'ker_pole', False)
    # Obtaining the member '__getitem__' of a type (line 2455)
    getitem___270397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2455, 25), ker_pole_270396, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2455)
    subscript_call_result_270398 = invoke(stypy.reporting.localization.Localization(__file__, 2455, 25), getitem___270397, j_270395)
    
    # Processing the call keyword arguments (line 2454)
    kwargs_270399 = {}
    # Getting the type of 'np' (line 2454)
    np_270369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 8), 'np', False)
    # Obtaining the member 'dot' of a type (line 2454)
    dot_270370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2454, 8), np_270369, 'dot')
    # Calling dot(args, kwargs) (line 2454)
    dot_call_result_270400 = invoke(stypy.reporting.localization.Localization(__file__, 2454, 8), dot_270370, *[dot_call_result_270394, subscript_call_result_270398], **kwargs_270399)
    
    # Assigning a type to the variable 'm' (line 2454)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2454, 4), 'm', dot_call_result_270400)
    
    # Assigning a Call to a Tuple (line 2458):
    
    # Assigning a Subscript to a Name (line 2458):
    
    # Obtaining the type of the subscript
    int_270401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2458, 4), 'int')
    
    # Call to svd(...): (line 2458)
    # Processing the call arguments (line 2458)
    # Getting the type of 'm' (line 2458)
    m_270405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 31), 'm', False)
    # Processing the call keyword arguments (line 2458)
    kwargs_270406 = {}
    # Getting the type of 'np' (line 2458)
    np_270402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 17), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2458)
    linalg_270403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 17), np_270402, 'linalg')
    # Obtaining the member 'svd' of a type (line 2458)
    svd_270404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 17), linalg_270403, 'svd')
    # Calling svd(args, kwargs) (line 2458)
    svd_call_result_270407 = invoke(stypy.reporting.localization.Localization(__file__, 2458, 17), svd_270404, *[m_270405], **kwargs_270406)
    
    # Obtaining the member '__getitem__' of a type (line 2458)
    getitem___270408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 4), svd_call_result_270407, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2458)
    subscript_call_result_270409 = invoke(stypy.reporting.localization.Localization(__file__, 2458, 4), getitem___270408, int_270401)
    
    # Assigning a type to the variable 'tuple_var_assignment_267136' (line 2458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 4), 'tuple_var_assignment_267136', subscript_call_result_270409)
    
    # Assigning a Subscript to a Name (line 2458):
    
    # Obtaining the type of the subscript
    int_270410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2458, 4), 'int')
    
    # Call to svd(...): (line 2458)
    # Processing the call arguments (line 2458)
    # Getting the type of 'm' (line 2458)
    m_270414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 31), 'm', False)
    # Processing the call keyword arguments (line 2458)
    kwargs_270415 = {}
    # Getting the type of 'np' (line 2458)
    np_270411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 17), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2458)
    linalg_270412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 17), np_270411, 'linalg')
    # Obtaining the member 'svd' of a type (line 2458)
    svd_270413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 17), linalg_270412, 'svd')
    # Calling svd(args, kwargs) (line 2458)
    svd_call_result_270416 = invoke(stypy.reporting.localization.Localization(__file__, 2458, 17), svd_270413, *[m_270414], **kwargs_270415)
    
    # Obtaining the member '__getitem__' of a type (line 2458)
    getitem___270417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 4), svd_call_result_270416, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2458)
    subscript_call_result_270418 = invoke(stypy.reporting.localization.Localization(__file__, 2458, 4), getitem___270417, int_270410)
    
    # Assigning a type to the variable 'tuple_var_assignment_267137' (line 2458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 4), 'tuple_var_assignment_267137', subscript_call_result_270418)
    
    # Assigning a Subscript to a Name (line 2458):
    
    # Obtaining the type of the subscript
    int_270419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2458, 4), 'int')
    
    # Call to svd(...): (line 2458)
    # Processing the call arguments (line 2458)
    # Getting the type of 'm' (line 2458)
    m_270423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 31), 'm', False)
    # Processing the call keyword arguments (line 2458)
    kwargs_270424 = {}
    # Getting the type of 'np' (line 2458)
    np_270420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 17), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2458)
    linalg_270421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 17), np_270420, 'linalg')
    # Obtaining the member 'svd' of a type (line 2458)
    svd_270422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 17), linalg_270421, 'svd')
    # Calling svd(args, kwargs) (line 2458)
    svd_call_result_270425 = invoke(stypy.reporting.localization.Localization(__file__, 2458, 17), svd_270422, *[m_270423], **kwargs_270424)
    
    # Obtaining the member '__getitem__' of a type (line 2458)
    getitem___270426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2458, 4), svd_call_result_270425, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2458)
    subscript_call_result_270427 = invoke(stypy.reporting.localization.Localization(__file__, 2458, 4), getitem___270426, int_270419)
    
    # Assigning a type to the variable 'tuple_var_assignment_267138' (line 2458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 4), 'tuple_var_assignment_267138', subscript_call_result_270427)
    
    # Assigning a Name to a Name (line 2458):
    # Getting the type of 'tuple_var_assignment_267136' (line 2458)
    tuple_var_assignment_267136_270428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 4), 'tuple_var_assignment_267136')
    # Assigning a type to the variable 'um' (line 2458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 4), 'um', tuple_var_assignment_267136_270428)
    
    # Assigning a Name to a Name (line 2458):
    # Getting the type of 'tuple_var_assignment_267137' (line 2458)
    tuple_var_assignment_267137_270429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 4), 'tuple_var_assignment_267137')
    # Assigning a type to the variable 'sm' (line 2458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 8), 'sm', tuple_var_assignment_267137_270429)
    
    # Assigning a Name to a Name (line 2458):
    # Getting the type of 'tuple_var_assignment_267138' (line 2458)
    tuple_var_assignment_267138_270430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 4), 'tuple_var_assignment_267138')
    # Assigning a type to the variable 'vm' (line 2458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 12), 'vm', tuple_var_assignment_267138_270430)
    
    # Assigning a Subscript to a Tuple (line 2460):
    
    # Assigning a Subscript to a Name (line 2460):
    
    # Obtaining the type of the subscript
    int_270431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2460, 4), 'int')
    
    # Obtaining the type of the subscript
    int_270432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2460, 21), 'int')
    slice_270433 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2460, 15), None, int_270432, None)
    slice_270434 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2460, 15), None, None, None)
    # Getting the type of 'np' (line 2460)
    np_270435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 27), 'np')
    # Obtaining the member 'newaxis' of a type (line 2460)
    newaxis_270436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 27), np_270435, 'newaxis')
    # Getting the type of 'um' (line 2460)
    um_270437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 15), 'um')
    # Obtaining the member 'T' of a type (line 2460)
    T_270438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 15), um_270437, 'T')
    # Obtaining the member '__getitem__' of a type (line 2460)
    getitem___270439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 15), T_270438, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2460)
    subscript_call_result_270440 = invoke(stypy.reporting.localization.Localization(__file__, 2460, 15), getitem___270439, (slice_270433, slice_270434, newaxis_270436))
    
    # Obtaining the member '__getitem__' of a type (line 2460)
    getitem___270441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 4), subscript_call_result_270440, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2460)
    subscript_call_result_270442 = invoke(stypy.reporting.localization.Localization(__file__, 2460, 4), getitem___270441, int_270431)
    
    # Assigning a type to the variable 'tuple_var_assignment_267139' (line 2460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2460, 4), 'tuple_var_assignment_267139', subscript_call_result_270442)
    
    # Assigning a Subscript to a Name (line 2460):
    
    # Obtaining the type of the subscript
    int_270443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2460, 4), 'int')
    
    # Obtaining the type of the subscript
    int_270444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2460, 21), 'int')
    slice_270445 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2460, 15), None, int_270444, None)
    slice_270446 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2460, 15), None, None, None)
    # Getting the type of 'np' (line 2460)
    np_270447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 27), 'np')
    # Obtaining the member 'newaxis' of a type (line 2460)
    newaxis_270448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 27), np_270447, 'newaxis')
    # Getting the type of 'um' (line 2460)
    um_270449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 15), 'um')
    # Obtaining the member 'T' of a type (line 2460)
    T_270450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 15), um_270449, 'T')
    # Obtaining the member '__getitem__' of a type (line 2460)
    getitem___270451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 15), T_270450, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2460)
    subscript_call_result_270452 = invoke(stypy.reporting.localization.Localization(__file__, 2460, 15), getitem___270451, (slice_270445, slice_270446, newaxis_270448))
    
    # Obtaining the member '__getitem__' of a type (line 2460)
    getitem___270453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2460, 4), subscript_call_result_270452, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2460)
    subscript_call_result_270454 = invoke(stypy.reporting.localization.Localization(__file__, 2460, 4), getitem___270453, int_270443)
    
    # Assigning a type to the variable 'tuple_var_assignment_267140' (line 2460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2460, 4), 'tuple_var_assignment_267140', subscript_call_result_270454)
    
    # Assigning a Name to a Name (line 2460):
    # Getting the type of 'tuple_var_assignment_267139' (line 2460)
    tuple_var_assignment_267139_270455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 4), 'tuple_var_assignment_267139')
    # Assigning a type to the variable 'mu1' (line 2460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2460, 4), 'mu1', tuple_var_assignment_267139_270455)
    
    # Assigning a Name to a Name (line 2460):
    # Getting the type of 'tuple_var_assignment_267140' (line 2460)
    tuple_var_assignment_267140_270456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 4), 'tuple_var_assignment_267140')
    # Assigning a type to the variable 'mu2' (line 2460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2460, 9), 'mu2', tuple_var_assignment_267140_270456)
    
    # Assigning a Subscript to a Tuple (line 2462):
    
    # Assigning a Subscript to a Name (line 2462):
    
    # Obtaining the type of the subscript
    int_270457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2462, 4), 'int')
    
    # Obtaining the type of the subscript
    int_270458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2462, 19), 'int')
    slice_270459 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2462, 15), None, int_270458, None)
    slice_270460 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2462, 15), None, None, None)
    # Getting the type of 'np' (line 2462)
    np_270461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 25), 'np')
    # Obtaining the member 'newaxis' of a type (line 2462)
    newaxis_270462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2462, 25), np_270461, 'newaxis')
    # Getting the type of 'vm' (line 2462)
    vm_270463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 15), 'vm')
    # Obtaining the member '__getitem__' of a type (line 2462)
    getitem___270464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2462, 15), vm_270463, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2462)
    subscript_call_result_270465 = invoke(stypy.reporting.localization.Localization(__file__, 2462, 15), getitem___270464, (slice_270459, slice_270460, newaxis_270462))
    
    # Obtaining the member '__getitem__' of a type (line 2462)
    getitem___270466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2462, 4), subscript_call_result_270465, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2462)
    subscript_call_result_270467 = invoke(stypy.reporting.localization.Localization(__file__, 2462, 4), getitem___270466, int_270457)
    
    # Assigning a type to the variable 'tuple_var_assignment_267141' (line 2462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'tuple_var_assignment_267141', subscript_call_result_270467)
    
    # Assigning a Subscript to a Name (line 2462):
    
    # Obtaining the type of the subscript
    int_270468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2462, 4), 'int')
    
    # Obtaining the type of the subscript
    int_270469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2462, 19), 'int')
    slice_270470 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2462, 15), None, int_270469, None)
    slice_270471 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2462, 15), None, None, None)
    # Getting the type of 'np' (line 2462)
    np_270472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 25), 'np')
    # Obtaining the member 'newaxis' of a type (line 2462)
    newaxis_270473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2462, 25), np_270472, 'newaxis')
    # Getting the type of 'vm' (line 2462)
    vm_270474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 15), 'vm')
    # Obtaining the member '__getitem__' of a type (line 2462)
    getitem___270475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2462, 15), vm_270474, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2462)
    subscript_call_result_270476 = invoke(stypy.reporting.localization.Localization(__file__, 2462, 15), getitem___270475, (slice_270470, slice_270471, newaxis_270473))
    
    # Obtaining the member '__getitem__' of a type (line 2462)
    getitem___270477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2462, 4), subscript_call_result_270476, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2462)
    subscript_call_result_270478 = invoke(stypy.reporting.localization.Localization(__file__, 2462, 4), getitem___270477, int_270468)
    
    # Assigning a type to the variable 'tuple_var_assignment_267142' (line 2462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'tuple_var_assignment_267142', subscript_call_result_270478)
    
    # Assigning a Name to a Name (line 2462):
    # Getting the type of 'tuple_var_assignment_267141' (line 2462)
    tuple_var_assignment_267141_270479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'tuple_var_assignment_267141')
    # Assigning a type to the variable 'nu1' (line 2462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'nu1', tuple_var_assignment_267141_270479)
    
    # Assigning a Name to a Name (line 2462):
    # Getting the type of 'tuple_var_assignment_267142' (line 2462)
    tuple_var_assignment_267142_270480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'tuple_var_assignment_267142')
    # Assigning a type to the variable 'nu2' (line 2462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 9), 'nu2', tuple_var_assignment_267142_270480)
    
    # Assigning a Call to a Name (line 2466):
    
    # Assigning a Call to a Name (line 2466):
    
    # Call to vstack(...): (line 2466)
    # Processing the call arguments (line 2466)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2467)
    tuple_270483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2467, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2467)
    # Adding element type (line 2467)
    
    # Obtaining the type of the subscript
    slice_270484 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2467, 12), None, None, None)
    # Getting the type of 'i' (line 2467)
    i_270485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 31), 'i', False)
    # Getting the type of 'np' (line 2467)
    np_270486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 34), 'np', False)
    # Obtaining the member 'newaxis' of a type (line 2467)
    newaxis_270487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 34), np_270486, 'newaxis')
    # Getting the type of 'transfer_matrix' (line 2467)
    transfer_matrix_270488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 12), 'transfer_matrix', False)
    # Obtaining the member '__getitem__' of a type (line 2467)
    getitem___270489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 12), transfer_matrix_270488, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2467)
    subscript_call_result_270490 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 12), getitem___270489, (slice_270484, i_270485, newaxis_270487))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2467, 12), tuple_270483, subscript_call_result_270490)
    # Adding element type (line 2467)
    
    # Obtaining the type of the subscript
    slice_270491 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2468, 12), None, None, None)
    # Getting the type of 'j' (line 2468)
    j_270492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 31), 'j', False)
    # Getting the type of 'np' (line 2468)
    np_270493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 34), 'np', False)
    # Obtaining the member 'newaxis' of a type (line 2468)
    newaxis_270494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2468, 34), np_270493, 'newaxis')
    # Getting the type of 'transfer_matrix' (line 2468)
    transfer_matrix_270495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 12), 'transfer_matrix', False)
    # Obtaining the member '__getitem__' of a type (line 2468)
    getitem___270496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2468, 12), transfer_matrix_270495, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2468)
    subscript_call_result_270497 = invoke(stypy.reporting.localization.Localization(__file__, 2468, 12), getitem___270496, (slice_270491, j_270492, newaxis_270494))
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2467, 12), tuple_270483, subscript_call_result_270497)
    
    # Processing the call keyword arguments (line 2466)
    kwargs_270498 = {}
    # Getting the type of 'np' (line 2466)
    np_270481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 45), 'np', False)
    # Obtaining the member 'vstack' of a type (line 2466)
    vstack_270482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2466, 45), np_270481, 'vstack')
    # Calling vstack(args, kwargs) (line 2466)
    vstack_call_result_270499 = invoke(stypy.reporting.localization.Localization(__file__, 2466, 45), vstack_270482, *[tuple_270483], **kwargs_270498)
    
    # Assigning a type to the variable 'transfer_matrix_j_mo_transfer_matrix_j' (line 2466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2466, 4), 'transfer_matrix_j_mo_transfer_matrix_j', vstack_call_result_270499)
    
    
    
    # Call to allclose(...): (line 2470)
    # Processing the call arguments (line 2470)
    
    # Obtaining the type of the subscript
    int_270502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2470, 26), 'int')
    # Getting the type of 'sm' (line 2470)
    sm_270503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2470, 23), 'sm', False)
    # Obtaining the member '__getitem__' of a type (line 2470)
    getitem___270504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2470, 23), sm_270503, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2470)
    subscript_call_result_270505 = invoke(stypy.reporting.localization.Localization(__file__, 2470, 23), getitem___270504, int_270502)
    
    
    # Obtaining the type of the subscript
    int_270506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2470, 33), 'int')
    # Getting the type of 'sm' (line 2470)
    sm_270507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2470, 30), 'sm', False)
    # Obtaining the member '__getitem__' of a type (line 2470)
    getitem___270508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2470, 30), sm_270507, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2470)
    subscript_call_result_270509 = invoke(stypy.reporting.localization.Localization(__file__, 2470, 30), getitem___270508, int_270506)
    
    # Processing the call keyword arguments (line 2470)
    kwargs_270510 = {}
    # Getting the type of 'np' (line 2470)
    np_270500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2470, 11), 'np', False)
    # Obtaining the member 'allclose' of a type (line 2470)
    allclose_270501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2470, 11), np_270500, 'allclose')
    # Calling allclose(args, kwargs) (line 2470)
    allclose_call_result_270511 = invoke(stypy.reporting.localization.Localization(__file__, 2470, 11), allclose_270501, *[subscript_call_result_270505, subscript_call_result_270509], **kwargs_270510)
    
    # Applying the 'not' unary operator (line 2470)
    result_not__270512 = python_operator(stypy.reporting.localization.Localization(__file__, 2470, 7), 'not', allclose_call_result_270511)
    
    # Testing the type of an if condition (line 2470)
    if_condition_270513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2470, 4), result_not__270512)
    # Assigning a type to the variable 'if_condition_270513' (line 2470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2470, 4), 'if_condition_270513', if_condition_270513)
    # SSA begins for if statement (line 2470)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2471):
    
    # Assigning a Call to a Name (line 2471):
    
    # Call to dot(...): (line 2471)
    # Processing the call arguments (line 2471)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2471)
    i_270516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 43), 'i', False)
    # Getting the type of 'ker_pole' (line 2471)
    ker_pole_270517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 34), 'ker_pole', False)
    # Obtaining the member '__getitem__' of a type (line 2471)
    getitem___270518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2471, 34), ker_pole_270517, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2471)
    subscript_call_result_270519 = invoke(stypy.reporting.localization.Localization(__file__, 2471, 34), getitem___270518, i_270516)
    
    # Getting the type of 'mu1' (line 2471)
    mu1_270520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 47), 'mu1', False)
    # Processing the call keyword arguments (line 2471)
    kwargs_270521 = {}
    # Getting the type of 'np' (line 2471)
    np_270514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 27), 'np', False)
    # Obtaining the member 'dot' of a type (line 2471)
    dot_270515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2471, 27), np_270514, 'dot')
    # Calling dot(args, kwargs) (line 2471)
    dot_call_result_270522 = invoke(stypy.reporting.localization.Localization(__file__, 2471, 27), dot_270515, *[subscript_call_result_270519, mu1_270520], **kwargs_270521)
    
    # Assigning a type to the variable 'ker_pole_imo_mu1' (line 2471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2471, 8), 'ker_pole_imo_mu1', dot_call_result_270522)
    
    # Assigning a Call to a Name (line 2472):
    
    # Assigning a Call to a Name (line 2472):
    
    # Call to dot(...): (line 2472)
    # Processing the call arguments (line 2472)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2472)
    j_270525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 41), 'j', False)
    # Getting the type of 'ker_pole' (line 2472)
    ker_pole_270526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 32), 'ker_pole', False)
    # Obtaining the member '__getitem__' of a type (line 2472)
    getitem___270527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2472, 32), ker_pole_270526, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2472)
    subscript_call_result_270528 = invoke(stypy.reporting.localization.Localization(__file__, 2472, 32), getitem___270527, j_270525)
    
    # Getting the type of 'nu1' (line 2472)
    nu1_270529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 45), 'nu1', False)
    # Processing the call keyword arguments (line 2472)
    kwargs_270530 = {}
    # Getting the type of 'np' (line 2472)
    np_270523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 25), 'np', False)
    # Obtaining the member 'dot' of a type (line 2472)
    dot_270524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2472, 25), np_270523, 'dot')
    # Calling dot(args, kwargs) (line 2472)
    dot_call_result_270531 = invoke(stypy.reporting.localization.Localization(__file__, 2472, 25), dot_270524, *[subscript_call_result_270528, nu1_270529], **kwargs_270530)
    
    # Assigning a type to the variable 'ker_pole_i_nu1' (line 2472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2472, 8), 'ker_pole_i_nu1', dot_call_result_270531)
    
    # Assigning a Call to a Name (line 2473):
    
    # Assigning a Call to a Name (line 2473):
    
    # Call to vstack(...): (line 2473)
    # Processing the call arguments (line 2473)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2473)
    tuple_270534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2473, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2473)
    # Adding element type (line 2473)
    # Getting the type of 'ker_pole_imo_mu1' (line 2473)
    ker_pole_imo_mu1_270535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 36), 'ker_pole_imo_mu1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2473, 36), tuple_270534, ker_pole_imo_mu1_270535)
    # Adding element type (line 2473)
    # Getting the type of 'ker_pole_i_nu1' (line 2473)
    ker_pole_i_nu1_270536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 54), 'ker_pole_i_nu1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2473, 36), tuple_270534, ker_pole_i_nu1_270536)
    
    # Processing the call keyword arguments (line 2473)
    kwargs_270537 = {}
    # Getting the type of 'np' (line 2473)
    np_270532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 25), 'np', False)
    # Obtaining the member 'vstack' of a type (line 2473)
    vstack_270533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2473, 25), np_270532, 'vstack')
    # Calling vstack(args, kwargs) (line 2473)
    vstack_call_result_270538 = invoke(stypy.reporting.localization.Localization(__file__, 2473, 25), vstack_270533, *[tuple_270534], **kwargs_270537)
    
    # Assigning a type to the variable 'ker_pole_mu_nu' (line 2473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2473, 8), 'ker_pole_mu_nu', vstack_call_result_270538)
    # SSA branch for the else part of an if statement (line 2470)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2475):
    
    # Assigning a Call to a Name (line 2475):
    
    # Call to vstack(...): (line 2475)
    # Processing the call arguments (line 2475)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2476)
    tuple_270541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2476, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2476)
    # Adding element type (line 2476)
    
    # Call to hstack(...): (line 2476)
    # Processing the call arguments (line 2476)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2476)
    tuple_270544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2476, 43), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2476)
    # Adding element type (line 2476)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2476)
    i_270545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 52), 'i', False)
    # Getting the type of 'ker_pole' (line 2476)
    ker_pole_270546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 43), 'ker_pole', False)
    # Obtaining the member '__getitem__' of a type (line 2476)
    getitem___270547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2476, 43), ker_pole_270546, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2476)
    subscript_call_result_270548 = invoke(stypy.reporting.localization.Localization(__file__, 2476, 43), getitem___270547, i_270545)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2476, 43), tuple_270544, subscript_call_result_270548)
    # Adding element type (line 2476)
    
    # Call to zeros(...): (line 2477)
    # Processing the call arguments (line 2477)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2477)
    i_270551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 61), 'i', False)
    # Getting the type of 'ker_pole' (line 2477)
    ker_pole_270552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 52), 'ker_pole', False)
    # Obtaining the member '__getitem__' of a type (line 2477)
    getitem___270553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 52), ker_pole_270552, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2477)
    subscript_call_result_270554 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 52), getitem___270553, i_270551)
    
    # Obtaining the member 'shape' of a type (line 2477)
    shape_270555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 52), subscript_call_result_270554, 'shape')
    # Processing the call keyword arguments (line 2477)
    kwargs_270556 = {}
    # Getting the type of 'np' (line 2477)
    np_270549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 43), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2477)
    zeros_270550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2477, 43), np_270549, 'zeros')
    # Calling zeros(args, kwargs) (line 2477)
    zeros_call_result_270557 = invoke(stypy.reporting.localization.Localization(__file__, 2477, 43), zeros_270550, *[shape_270555], **kwargs_270556)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2476, 43), tuple_270544, zeros_call_result_270557)
    
    # Processing the call keyword arguments (line 2476)
    kwargs_270558 = {}
    # Getting the type of 'np' (line 2476)
    np_270542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 32), 'np', False)
    # Obtaining the member 'hstack' of a type (line 2476)
    hstack_270543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2476, 32), np_270542, 'hstack')
    # Calling hstack(args, kwargs) (line 2476)
    hstack_call_result_270559 = invoke(stypy.reporting.localization.Localization(__file__, 2476, 32), hstack_270543, *[tuple_270544], **kwargs_270558)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2476, 32), tuple_270541, hstack_call_result_270559)
    # Adding element type (line 2476)
    
    # Call to hstack(...): (line 2478)
    # Processing the call arguments (line 2478)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2478)
    tuple_270562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2478, 43), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2478)
    # Adding element type (line 2478)
    
    # Call to zeros(...): (line 2478)
    # Processing the call arguments (line 2478)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2478)
    j_270565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 61), 'j', False)
    # Getting the type of 'ker_pole' (line 2478)
    ker_pole_270566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 52), 'ker_pole', False)
    # Obtaining the member '__getitem__' of a type (line 2478)
    getitem___270567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2478, 52), ker_pole_270566, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2478)
    subscript_call_result_270568 = invoke(stypy.reporting.localization.Localization(__file__, 2478, 52), getitem___270567, j_270565)
    
    # Obtaining the member 'shape' of a type (line 2478)
    shape_270569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2478, 52), subscript_call_result_270568, 'shape')
    # Processing the call keyword arguments (line 2478)
    kwargs_270570 = {}
    # Getting the type of 'np' (line 2478)
    np_270563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 43), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2478)
    zeros_270564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2478, 43), np_270563, 'zeros')
    # Calling zeros(args, kwargs) (line 2478)
    zeros_call_result_270571 = invoke(stypy.reporting.localization.Localization(__file__, 2478, 43), zeros_270564, *[shape_270569], **kwargs_270570)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2478, 43), tuple_270562, zeros_call_result_270571)
    # Adding element type (line 2478)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2479)
    j_270572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 61), 'j', False)
    # Getting the type of 'ker_pole' (line 2479)
    ker_pole_270573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 52), 'ker_pole', False)
    # Obtaining the member '__getitem__' of a type (line 2479)
    getitem___270574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 52), ker_pole_270573, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2479)
    subscript_call_result_270575 = invoke(stypy.reporting.localization.Localization(__file__, 2479, 52), getitem___270574, j_270572)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2478, 43), tuple_270562, subscript_call_result_270575)
    
    # Processing the call keyword arguments (line 2478)
    kwargs_270576 = {}
    # Getting the type of 'np' (line 2478)
    np_270560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 32), 'np', False)
    # Obtaining the member 'hstack' of a type (line 2478)
    hstack_270561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2478, 32), np_270560, 'hstack')
    # Calling hstack(args, kwargs) (line 2478)
    hstack_call_result_270577 = invoke(stypy.reporting.localization.Localization(__file__, 2478, 32), hstack_270561, *[tuple_270562], **kwargs_270576)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2476, 32), tuple_270541, hstack_call_result_270577)
    
    # Processing the call keyword arguments (line 2475)
    kwargs_270578 = {}
    # Getting the type of 'np' (line 2475)
    np_270539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 22), 'np', False)
    # Obtaining the member 'vstack' of a type (line 2475)
    vstack_270540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2475, 22), np_270539, 'vstack')
    # Calling vstack(args, kwargs) (line 2475)
    vstack_call_result_270579 = invoke(stypy.reporting.localization.Localization(__file__, 2475, 22), vstack_270540, *[tuple_270541], **kwargs_270578)
    
    # Assigning a type to the variable 'ker_pole_ij' (line 2475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2475, 8), 'ker_pole_ij', vstack_call_result_270579)
    
    # Assigning a Call to a Name (line 2481):
    
    # Assigning a Call to a Name (line 2481):
    
    # Call to vstack(...): (line 2481)
    # Processing the call arguments (line 2481)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2482)
    tuple_270582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2482, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2482)
    # Adding element type (line 2482)
    
    # Call to hstack(...): (line 2482)
    # Processing the call arguments (line 2482)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2482)
    tuple_270585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2482, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2482)
    # Adding element type (line 2482)
    # Getting the type of 'mu1' (line 2482)
    mu1_270586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 24), 'mu1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2482, 24), tuple_270585, mu1_270586)
    # Adding element type (line 2482)
    # Getting the type of 'mu2' (line 2482)
    mu2_270587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 29), 'mu2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2482, 24), tuple_270585, mu2_270587)
    
    # Processing the call keyword arguments (line 2482)
    kwargs_270588 = {}
    # Getting the type of 'np' (line 2482)
    np_270583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 13), 'np', False)
    # Obtaining the member 'hstack' of a type (line 2482)
    hstack_270584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2482, 13), np_270583, 'hstack')
    # Calling hstack(args, kwargs) (line 2482)
    hstack_call_result_270589 = invoke(stypy.reporting.localization.Localization(__file__, 2482, 13), hstack_270584, *[tuple_270585], **kwargs_270588)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2482, 13), tuple_270582, hstack_call_result_270589)
    # Adding element type (line 2482)
    
    # Call to hstack(...): (line 2482)
    # Processing the call arguments (line 2482)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2482)
    tuple_270592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2482, 47), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2482)
    # Adding element type (line 2482)
    # Getting the type of 'nu1' (line 2482)
    nu1_270593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 47), 'nu1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2482, 47), tuple_270592, nu1_270593)
    # Adding element type (line 2482)
    # Getting the type of 'nu2' (line 2482)
    nu2_270594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 52), 'nu2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2482, 47), tuple_270592, nu2_270594)
    
    # Processing the call keyword arguments (line 2482)
    kwargs_270595 = {}
    # Getting the type of 'np' (line 2482)
    np_270590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 36), 'np', False)
    # Obtaining the member 'hstack' of a type (line 2482)
    hstack_270591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2482, 36), np_270590, 'hstack')
    # Calling hstack(args, kwargs) (line 2482)
    hstack_call_result_270596 = invoke(stypy.reporting.localization.Localization(__file__, 2482, 36), hstack_270591, *[tuple_270592], **kwargs_270595)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2482, 13), tuple_270582, hstack_call_result_270596)
    
    # Processing the call keyword arguments (line 2481)
    kwargs_270597 = {}
    # Getting the type of 'np' (line 2481)
    np_270580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 23), 'np', False)
    # Obtaining the member 'vstack' of a type (line 2481)
    vstack_270581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2481, 23), np_270580, 'vstack')
    # Calling vstack(args, kwargs) (line 2481)
    vstack_call_result_270598 = invoke(stypy.reporting.localization.Localization(__file__, 2481, 23), vstack_270581, *[tuple_270582], **kwargs_270597)
    
    # Assigning a type to the variable 'mu_nu_matrix' (line 2481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2481, 8), 'mu_nu_matrix', vstack_call_result_270598)
    
    # Assigning a Call to a Name (line 2484):
    
    # Assigning a Call to a Name (line 2484):
    
    # Call to dot(...): (line 2484)
    # Processing the call arguments (line 2484)
    # Getting the type of 'ker_pole_ij' (line 2484)
    ker_pole_ij_270601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 32), 'ker_pole_ij', False)
    # Getting the type of 'mu_nu_matrix' (line 2484)
    mu_nu_matrix_270602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 45), 'mu_nu_matrix', False)
    # Processing the call keyword arguments (line 2484)
    kwargs_270603 = {}
    # Getting the type of 'np' (line 2484)
    np_270599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 25), 'np', False)
    # Obtaining the member 'dot' of a type (line 2484)
    dot_270600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2484, 25), np_270599, 'dot')
    # Calling dot(args, kwargs) (line 2484)
    dot_call_result_270604 = invoke(stypy.reporting.localization.Localization(__file__, 2484, 25), dot_270600, *[ker_pole_ij_270601, mu_nu_matrix_270602], **kwargs_270603)
    
    # Assigning a type to the variable 'ker_pole_mu_nu' (line 2484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2484, 8), 'ker_pole_mu_nu', dot_call_result_270604)
    # SSA join for if statement (line 2470)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2485):
    
    # Assigning a Call to a Name (line 2485):
    
    # Call to dot(...): (line 2485)
    # Processing the call arguments (line 2485)
    
    # Call to dot(...): (line 2485)
    # Processing the call arguments (line 2485)
    # Getting the type of 'ker_pole_mu_nu' (line 2485)
    ker_pole_mu_nu_270609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 39), 'ker_pole_mu_nu', False)
    # Getting the type of 'ker_pole_mu_nu' (line 2485)
    ker_pole_mu_nu_270610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 55), 'ker_pole_mu_nu', False)
    # Obtaining the member 'T' of a type (line 2485)
    T_270611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2485, 55), ker_pole_mu_nu_270610, 'T')
    # Processing the call keyword arguments (line 2485)
    kwargs_270612 = {}
    # Getting the type of 'np' (line 2485)
    np_270607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 32), 'np', False)
    # Obtaining the member 'dot' of a type (line 2485)
    dot_270608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2485, 32), np_270607, 'dot')
    # Calling dot(args, kwargs) (line 2485)
    dot_call_result_270613 = invoke(stypy.reporting.localization.Localization(__file__, 2485, 32), dot_270608, *[ker_pole_mu_nu_270609, T_270611], **kwargs_270612)
    
    # Getting the type of 'transfer_matrix_j_mo_transfer_matrix_j' (line 2486)
    transfer_matrix_j_mo_transfer_matrix_j_270614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 29), 'transfer_matrix_j_mo_transfer_matrix_j', False)
    # Processing the call keyword arguments (line 2485)
    kwargs_270615 = {}
    # Getting the type of 'np' (line 2485)
    np_270605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 25), 'np', False)
    # Obtaining the member 'dot' of a type (line 2485)
    dot_270606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2485, 25), np_270605, 'dot')
    # Calling dot(args, kwargs) (line 2485)
    dot_call_result_270616 = invoke(stypy.reporting.localization.Localization(__file__, 2485, 25), dot_270606, *[dot_call_result_270613, transfer_matrix_j_mo_transfer_matrix_j_270614], **kwargs_270615)
    
    # Assigning a type to the variable 'transfer_matrix_ij' (line 2485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2485, 4), 'transfer_matrix_ij', dot_call_result_270616)
    
    
    
    # Call to allclose(...): (line 2487)
    # Processing the call arguments (line 2487)
    # Getting the type of 'transfer_matrix_ij' (line 2487)
    transfer_matrix_ij_270619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 23), 'transfer_matrix_ij', False)
    int_270620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2487, 43), 'int')
    # Processing the call keyword arguments (line 2487)
    kwargs_270621 = {}
    # Getting the type of 'np' (line 2487)
    np_270617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 11), 'np', False)
    # Obtaining the member 'allclose' of a type (line 2487)
    allclose_270618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2487, 11), np_270617, 'allclose')
    # Calling allclose(args, kwargs) (line 2487)
    allclose_call_result_270622 = invoke(stypy.reporting.localization.Localization(__file__, 2487, 11), allclose_270618, *[transfer_matrix_ij_270619, int_270620], **kwargs_270621)
    
    # Applying the 'not' unary operator (line 2487)
    result_not__270623 = python_operator(stypy.reporting.localization.Localization(__file__, 2487, 7), 'not', allclose_call_result_270622)
    
    # Testing the type of an if condition (line 2487)
    if_condition_270624 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2487, 4), result_not__270623)
    # Assigning a type to the variable 'if_condition_270624' (line 2487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2487, 4), 'if_condition_270624', if_condition_270624)
    # SSA begins for if statement (line 2487)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2488):
    
    # Assigning a BinOp to a Name (line 2488):
    
    # Call to sqrt(...): (line 2488)
    # Processing the call arguments (line 2488)
    int_270627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2488, 38), 'int')
    # Processing the call keyword arguments (line 2488)
    kwargs_270628 = {}
    # Getting the type of 'np' (line 2488)
    np_270625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2488, 30), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2488)
    sqrt_270626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2488, 30), np_270625, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2488)
    sqrt_call_result_270629 = invoke(stypy.reporting.localization.Localization(__file__, 2488, 30), sqrt_270626, *[int_270627], **kwargs_270628)
    
    # Getting the type of 'transfer_matrix_ij' (line 2488)
    transfer_matrix_ij_270630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2488, 41), 'transfer_matrix_ij')
    # Applying the binary operator '*' (line 2488)
    result_mul_270631 = python_operator(stypy.reporting.localization.Localization(__file__, 2488, 30), '*', sqrt_call_result_270629, transfer_matrix_ij_270630)
    
    
    # Call to norm(...): (line 2489)
    # Processing the call arguments (line 2489)
    # Getting the type of 'transfer_matrix_ij' (line 2489)
    transfer_matrix_ij_270635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 45), 'transfer_matrix_ij', False)
    # Processing the call keyword arguments (line 2489)
    kwargs_270636 = {}
    # Getting the type of 'np' (line 2489)
    np_270632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 30), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2489)
    linalg_270633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2489, 30), np_270632, 'linalg')
    # Obtaining the member 'norm' of a type (line 2489)
    norm_270634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2489, 30), linalg_270633, 'norm')
    # Calling norm(args, kwargs) (line 2489)
    norm_call_result_270637 = invoke(stypy.reporting.localization.Localization(__file__, 2489, 30), norm_270634, *[transfer_matrix_ij_270635], **kwargs_270636)
    
    # Applying the binary operator 'div' (line 2488)
    result_div_270638 = python_operator(stypy.reporting.localization.Localization(__file__, 2488, 60), 'div', result_mul_270631, norm_call_result_270637)
    
    # Assigning a type to the variable 'transfer_matrix_ij' (line 2488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2488, 8), 'transfer_matrix_ij', result_div_270638)
    
    # Assigning a Subscript to a Subscript (line 2490):
    
    # Assigning a Subscript to a Subscript (line 2490):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_270639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, 41), 'int')
    
    # Obtaining the type of the subscript
    slice_270640 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2491, 13), None, None, None)
    # Getting the type of 'i' (line 2491)
    i_270641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2491, 32), 'i')
    # Getting the type of 'transfer_matrix' (line 2491)
    transfer_matrix_270642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2491, 13), 'transfer_matrix')
    # Obtaining the member '__getitem__' of a type (line 2491)
    getitem___270643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2491, 13), transfer_matrix_270642, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2491)
    subscript_call_result_270644 = invoke(stypy.reporting.localization.Localization(__file__, 2491, 13), getitem___270643, (slice_270640, i_270641))
    
    # Obtaining the member 'shape' of a type (line 2491)
    shape_270645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2491, 13), subscript_call_result_270644, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2491)
    getitem___270646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2491, 13), shape_270645, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2491)
    subscript_call_result_270647 = invoke(stypy.reporting.localization.Localization(__file__, 2491, 13), getitem___270646, int_270639)
    
    slice_270648 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2490, 32), None, subscript_call_result_270647, None)
    int_270649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2491, 45), 'int')
    # Getting the type of 'transfer_matrix_ij' (line 2490)
    transfer_matrix_ij_270650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 32), 'transfer_matrix_ij')
    # Obtaining the member '__getitem__' of a type (line 2490)
    getitem___270651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2490, 32), transfer_matrix_ij_270650, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2490)
    subscript_call_result_270652 = invoke(stypy.reporting.localization.Localization(__file__, 2490, 32), getitem___270651, (slice_270648, int_270649))
    
    # Getting the type of 'transfer_matrix' (line 2490)
    transfer_matrix_270653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 8), 'transfer_matrix')
    slice_270654 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2490, 8), None, None, None)
    # Getting the type of 'i' (line 2490)
    i_270655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 27), 'i')
    # Storing an element on a container (line 2490)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2490, 8), transfer_matrix_270653, ((slice_270654, i_270655), subscript_call_result_270652))
    
    # Assigning a Subscript to a Subscript (line 2493):
    
    # Assigning a Subscript to a Subscript (line 2493):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_270656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2494, 40), 'int')
    
    # Obtaining the type of the subscript
    slice_270657 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2494, 12), None, None, None)
    # Getting the type of 'i' (line 2494)
    i_270658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 31), 'i')
    # Getting the type of 'transfer_matrix' (line 2494)
    transfer_matrix_270659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 12), 'transfer_matrix')
    # Obtaining the member '__getitem__' of a type (line 2494)
    getitem___270660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2494, 12), transfer_matrix_270659, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2494)
    subscript_call_result_270661 = invoke(stypy.reporting.localization.Localization(__file__, 2494, 12), getitem___270660, (slice_270657, i_270658))
    
    # Obtaining the member 'shape' of a type (line 2494)
    shape_270662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2494, 12), subscript_call_result_270661, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2494)
    getitem___270663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2494, 12), shape_270662, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2494)
    subscript_call_result_270664 = invoke(stypy.reporting.localization.Localization(__file__, 2494, 12), getitem___270663, int_270656)
    
    slice_270665 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2493, 32), subscript_call_result_270664, None, None)
    int_270666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2494, 45), 'int')
    # Getting the type of 'transfer_matrix_ij' (line 2493)
    transfer_matrix_ij_270667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 32), 'transfer_matrix_ij')
    # Obtaining the member '__getitem__' of a type (line 2493)
    getitem___270668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2493, 32), transfer_matrix_ij_270667, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2493)
    subscript_call_result_270669 = invoke(stypy.reporting.localization.Localization(__file__, 2493, 32), getitem___270668, (slice_270665, int_270666))
    
    # Getting the type of 'transfer_matrix' (line 2493)
    transfer_matrix_270670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 8), 'transfer_matrix')
    slice_270671 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2493, 8), None, None, None)
    # Getting the type of 'j' (line 2493)
    j_270672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 27), 'j')
    # Storing an element on a container (line 2493)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2493, 8), transfer_matrix_270670, ((slice_270671, j_270672), subscript_call_result_270669))
    # SSA branch for the else part of an if statement (line 2487)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Subscript (line 2502):
    
    # Assigning a Subscript to a Subscript (line 2502):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_270673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2503, 41), 'int')
    
    # Obtaining the type of the subscript
    slice_270674 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2503, 13), None, None, None)
    # Getting the type of 'i' (line 2503)
    i_270675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 32), 'i')
    # Getting the type of 'transfer_matrix' (line 2503)
    transfer_matrix_270676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 13), 'transfer_matrix')
    # Obtaining the member '__getitem__' of a type (line 2503)
    getitem___270677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2503, 13), transfer_matrix_270676, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2503)
    subscript_call_result_270678 = invoke(stypy.reporting.localization.Localization(__file__, 2503, 13), getitem___270677, (slice_270674, i_270675))
    
    # Obtaining the member 'shape' of a type (line 2503)
    shape_270679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2503, 13), subscript_call_result_270678, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2503)
    getitem___270680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2503, 13), shape_270679, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2503)
    subscript_call_result_270681 = invoke(stypy.reporting.localization.Localization(__file__, 2503, 13), getitem___270680, int_270673)
    
    slice_270682 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2502, 32), None, subscript_call_result_270681, None)
    int_270683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2503, 45), 'int')
    # Getting the type of 'ker_pole_mu_nu' (line 2502)
    ker_pole_mu_nu_270684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 32), 'ker_pole_mu_nu')
    # Obtaining the member '__getitem__' of a type (line 2502)
    getitem___270685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2502, 32), ker_pole_mu_nu_270684, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2502)
    subscript_call_result_270686 = invoke(stypy.reporting.localization.Localization(__file__, 2502, 32), getitem___270685, (slice_270682, int_270683))
    
    # Getting the type of 'transfer_matrix' (line 2502)
    transfer_matrix_270687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 8), 'transfer_matrix')
    slice_270688 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2502, 8), None, None, None)
    # Getting the type of 'i' (line 2502)
    i_270689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 27), 'i')
    # Storing an element on a container (line 2502)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2502, 8), transfer_matrix_270687, ((slice_270688, i_270689), subscript_call_result_270686))
    
    # Assigning a Subscript to a Subscript (line 2505):
    
    # Assigning a Subscript to a Subscript (line 2505):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_270690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2506, 40), 'int')
    
    # Obtaining the type of the subscript
    slice_270691 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2506, 12), None, None, None)
    # Getting the type of 'i' (line 2506)
    i_270692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 31), 'i')
    # Getting the type of 'transfer_matrix' (line 2506)
    transfer_matrix_270693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 12), 'transfer_matrix')
    # Obtaining the member '__getitem__' of a type (line 2506)
    getitem___270694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2506, 12), transfer_matrix_270693, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2506)
    subscript_call_result_270695 = invoke(stypy.reporting.localization.Localization(__file__, 2506, 12), getitem___270694, (slice_270691, i_270692))
    
    # Obtaining the member 'shape' of a type (line 2506)
    shape_270696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2506, 12), subscript_call_result_270695, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2506)
    getitem___270697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2506, 12), shape_270696, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2506)
    subscript_call_result_270698 = invoke(stypy.reporting.localization.Localization(__file__, 2506, 12), getitem___270697, int_270690)
    
    slice_270699 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2505, 32), subscript_call_result_270698, None, None)
    int_270700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2506, 45), 'int')
    # Getting the type of 'ker_pole_mu_nu' (line 2505)
    ker_pole_mu_nu_270701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 32), 'ker_pole_mu_nu')
    # Obtaining the member '__getitem__' of a type (line 2505)
    getitem___270702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2505, 32), ker_pole_mu_nu_270701, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2505)
    subscript_call_result_270703 = invoke(stypy.reporting.localization.Localization(__file__, 2505, 32), getitem___270702, (slice_270699, int_270700))
    
    # Getting the type of 'transfer_matrix' (line 2505)
    transfer_matrix_270704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 8), 'transfer_matrix')
    slice_270705 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2505, 8), None, None, None)
    # Getting the type of 'j' (line 2505)
    j_270706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 27), 'j')
    # Storing an element on a container (line 2505)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2505, 8), transfer_matrix_270704, ((slice_270705, j_270706), subscript_call_result_270703))
    # SSA join for if statement (line 2487)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_YT_real(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_YT_real' in the type store
    # Getting the type of 'stypy_return_type' (line 2445)
    stypy_return_type_270707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_270707)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_YT_real'
    return stypy_return_type_270707

# Assigning a type to the variable '_YT_real' (line 2445)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2445, 0), '_YT_real', _YT_real)

@norecursion
def _YT_complex(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_YT_complex'
    module_type_store = module_type_store.open_function_context('_YT_complex', 2510, 0, False)
    
    # Passed parameters checking function
    _YT_complex.stypy_localization = localization
    _YT_complex.stypy_type_of_self = None
    _YT_complex.stypy_type_store = module_type_store
    _YT_complex.stypy_function_name = '_YT_complex'
    _YT_complex.stypy_param_names_list = ['ker_pole', 'Q', 'transfer_matrix', 'i', 'j']
    _YT_complex.stypy_varargs_param_name = None
    _YT_complex.stypy_kwargs_param_name = None
    _YT_complex.stypy_call_defaults = defaults
    _YT_complex.stypy_call_varargs = varargs
    _YT_complex.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_YT_complex', ['ker_pole', 'Q', 'transfer_matrix', 'i', 'j'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_YT_complex', localization, ['ker_pole', 'Q', 'transfer_matrix', 'i', 'j'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_YT_complex(...)' code ##################

    str_270708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2513, (-1)), 'str', '\n    Applies algorithm from YT section 6.2 page 20 related to complex pairs\n    ')
    
    # Assigning a BinOp to a Name (line 2515):
    
    # Assigning a BinOp to a Name (line 2515):
    
    # Call to sqrt(...): (line 2515)
    # Processing the call arguments (line 2515)
    int_270711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2515, 17), 'int')
    # Processing the call keyword arguments (line 2515)
    kwargs_270712 = {}
    # Getting the type of 'np' (line 2515)
    np_270709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 9), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2515)
    sqrt_270710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 9), np_270709, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2515)
    sqrt_call_result_270713 = invoke(stypy.reporting.localization.Localization(__file__, 2515, 9), sqrt_270710, *[int_270711], **kwargs_270712)
    
    
    # Obtaining the type of the subscript
    slice_270714 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2515, 20), None, None, None)
    int_270715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2515, 25), 'int')
    # Getting the type of 'np' (line 2515)
    np_270716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 29), 'np')
    # Obtaining the member 'newaxis' of a type (line 2515)
    newaxis_270717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 29), np_270716, 'newaxis')
    # Getting the type of 'Q' (line 2515)
    Q_270718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 20), 'Q')
    # Obtaining the member '__getitem__' of a type (line 2515)
    getitem___270719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 20), Q_270718, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2515)
    subscript_call_result_270720 = invoke(stypy.reporting.localization.Localization(__file__, 2515, 20), getitem___270719, (slice_270714, int_270715, newaxis_270717))
    
    # Applying the binary operator '*' (line 2515)
    result_mul_270721 = python_operator(stypy.reporting.localization.Localization(__file__, 2515, 9), '*', sqrt_call_result_270713, subscript_call_result_270720)
    
    # Assigning a type to the variable 'ur' (line 2515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2515, 4), 'ur', result_mul_270721)
    
    # Assigning a BinOp to a Name (line 2516):
    
    # Assigning a BinOp to a Name (line 2516):
    
    # Call to sqrt(...): (line 2516)
    # Processing the call arguments (line 2516)
    int_270724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2516, 17), 'int')
    # Processing the call keyword arguments (line 2516)
    kwargs_270725 = {}
    # Getting the type of 'np' (line 2516)
    np_270722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 9), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2516)
    sqrt_270723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 9), np_270722, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2516)
    sqrt_call_result_270726 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 9), sqrt_270723, *[int_270724], **kwargs_270725)
    
    
    # Obtaining the type of the subscript
    slice_270727 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2516, 20), None, None, None)
    int_270728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2516, 25), 'int')
    # Getting the type of 'np' (line 2516)
    np_270729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 29), 'np')
    # Obtaining the member 'newaxis' of a type (line 2516)
    newaxis_270730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 29), np_270729, 'newaxis')
    # Getting the type of 'Q' (line 2516)
    Q_270731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 20), 'Q')
    # Obtaining the member '__getitem__' of a type (line 2516)
    getitem___270732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 20), Q_270731, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2516)
    subscript_call_result_270733 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 20), getitem___270732, (slice_270727, int_270728, newaxis_270730))
    
    # Applying the binary operator '*' (line 2516)
    result_mul_270734 = python_operator(stypy.reporting.localization.Localization(__file__, 2516, 9), '*', sqrt_call_result_270726, subscript_call_result_270733)
    
    # Assigning a type to the variable 'ui' (line 2516)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2516, 4), 'ui', result_mul_270734)
    
    # Assigning a BinOp to a Name (line 2517):
    
    # Assigning a BinOp to a Name (line 2517):
    # Getting the type of 'ur' (line 2517)
    ur_270735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 8), 'ur')
    complex_270736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2517, 13), 'complex')
    # Getting the type of 'ui' (line 2517)
    ui_270737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 16), 'ui')
    # Applying the binary operator '*' (line 2517)
    result_mul_270738 = python_operator(stypy.reporting.localization.Localization(__file__, 2517, 13), '*', complex_270736, ui_270737)
    
    # Applying the binary operator '+' (line 2517)
    result_add_270739 = python_operator(stypy.reporting.localization.Localization(__file__, 2517, 8), '+', ur_270735, result_mul_270738)
    
    # Assigning a type to the variable 'u' (line 2517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2517, 4), 'u', result_add_270739)
    
    # Assigning a Subscript to a Name (line 2520):
    
    # Assigning a Subscript to a Name (line 2520):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2520)
    i_270740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 27), 'i')
    # Getting the type of 'ker_pole' (line 2520)
    ker_pole_270741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 18), 'ker_pole')
    # Obtaining the member '__getitem__' of a type (line 2520)
    getitem___270742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2520, 18), ker_pole_270741, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2520)
    subscript_call_result_270743 = invoke(stypy.reporting.localization.Localization(__file__, 2520, 18), getitem___270742, i_270740)
    
    # Assigning a type to the variable 'ker_pole_ij' (line 2520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2520, 4), 'ker_pole_ij', subscript_call_result_270743)
    
    # Assigning a Call to a Name (line 2521):
    
    # Assigning a Call to a Name (line 2521):
    
    # Call to dot(...): (line 2521)
    # Processing the call arguments (line 2521)
    
    # Call to dot(...): (line 2521)
    # Processing the call arguments (line 2521)
    
    # Call to conj(...): (line 2521)
    # Processing the call arguments (line 2521)
    # Getting the type of 'ker_pole_ij' (line 2521)
    ker_pole_ij_270750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 30), 'ker_pole_ij', False)
    # Obtaining the member 'T' of a type (line 2521)
    T_270751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 30), ker_pole_ij_270750, 'T')
    # Processing the call keyword arguments (line 2521)
    kwargs_270752 = {}
    # Getting the type of 'np' (line 2521)
    np_270748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 22), 'np', False)
    # Obtaining the member 'conj' of a type (line 2521)
    conj_270749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 22), np_270748, 'conj')
    # Calling conj(args, kwargs) (line 2521)
    conj_call_result_270753 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 22), conj_270749, *[T_270751], **kwargs_270752)
    
    
    # Call to dot(...): (line 2521)
    # Processing the call arguments (line 2521)
    # Getting the type of 'u' (line 2521)
    u_270756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 53), 'u', False)
    
    # Call to conj(...): (line 2521)
    # Processing the call arguments (line 2521)
    # Getting the type of 'u' (line 2521)
    u_270759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 64), 'u', False)
    # Processing the call keyword arguments (line 2521)
    kwargs_270760 = {}
    # Getting the type of 'np' (line 2521)
    np_270757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 56), 'np', False)
    # Obtaining the member 'conj' of a type (line 2521)
    conj_270758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 56), np_270757, 'conj')
    # Calling conj(args, kwargs) (line 2521)
    conj_call_result_270761 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 56), conj_270758, *[u_270759], **kwargs_270760)
    
    # Obtaining the member 'T' of a type (line 2521)
    T_270762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 56), conj_call_result_270761, 'T')
    # Processing the call keyword arguments (line 2521)
    kwargs_270763 = {}
    # Getting the type of 'np' (line 2521)
    np_270754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 46), 'np', False)
    # Obtaining the member 'dot' of a type (line 2521)
    dot_270755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 46), np_270754, 'dot')
    # Calling dot(args, kwargs) (line 2521)
    dot_call_result_270764 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 46), dot_270755, *[u_270756, T_270762], **kwargs_270763)
    
    
    # Call to dot(...): (line 2522)
    # Processing the call arguments (line 2522)
    
    # Call to conj(...): (line 2522)
    # Processing the call arguments (line 2522)
    # Getting the type of 'u' (line 2522)
    u_270769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 30), 'u', False)
    # Processing the call keyword arguments (line 2522)
    kwargs_270770 = {}
    # Getting the type of 'np' (line 2522)
    np_270767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 22), 'np', False)
    # Obtaining the member 'conj' of a type (line 2522)
    conj_270768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2522, 22), np_270767, 'conj')
    # Calling conj(args, kwargs) (line 2522)
    conj_call_result_270771 = invoke(stypy.reporting.localization.Localization(__file__, 2522, 22), conj_270768, *[u_270769], **kwargs_270770)
    
    # Getting the type of 'u' (line 2522)
    u_270772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 34), 'u', False)
    # Obtaining the member 'T' of a type (line 2522)
    T_270773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2522, 34), u_270772, 'T')
    # Processing the call keyword arguments (line 2522)
    kwargs_270774 = {}
    # Getting the type of 'np' (line 2522)
    np_270765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 15), 'np', False)
    # Obtaining the member 'dot' of a type (line 2522)
    dot_270766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2522, 15), np_270765, 'dot')
    # Calling dot(args, kwargs) (line 2522)
    dot_call_result_270775 = invoke(stypy.reporting.localization.Localization(__file__, 2522, 15), dot_270766, *[conj_call_result_270771, T_270773], **kwargs_270774)
    
    # Applying the binary operator '-' (line 2521)
    result_sub_270776 = python_operator(stypy.reporting.localization.Localization(__file__, 2521, 46), '-', dot_call_result_270764, dot_call_result_270775)
    
    # Processing the call keyword arguments (line 2521)
    kwargs_270777 = {}
    # Getting the type of 'np' (line 2521)
    np_270746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 15), 'np', False)
    # Obtaining the member 'dot' of a type (line 2521)
    dot_270747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 15), np_270746, 'dot')
    # Calling dot(args, kwargs) (line 2521)
    dot_call_result_270778 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 15), dot_270747, *[conj_call_result_270753, result_sub_270776], **kwargs_270777)
    
    # Getting the type of 'ker_pole_ij' (line 2522)
    ker_pole_ij_270779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 41), 'ker_pole_ij', False)
    # Processing the call keyword arguments (line 2521)
    kwargs_270780 = {}
    # Getting the type of 'np' (line 2521)
    np_270744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 8), 'np', False)
    # Obtaining the member 'dot' of a type (line 2521)
    dot_270745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2521, 8), np_270744, 'dot')
    # Calling dot(args, kwargs) (line 2521)
    dot_call_result_270781 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 8), dot_270745, *[dot_call_result_270778, ker_pole_ij_270779], **kwargs_270780)
    
    # Assigning a type to the variable 'm' (line 2521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2521, 4), 'm', dot_call_result_270781)
    
    # Assigning a Call to a Tuple (line 2525):
    
    # Assigning a Subscript to a Name (line 2525):
    
    # Obtaining the type of the subscript
    int_270782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2525, 4), 'int')
    
    # Call to eig(...): (line 2525)
    # Processing the call arguments (line 2525)
    # Getting the type of 'm' (line 2525)
    m_270786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 33), 'm', False)
    # Processing the call keyword arguments (line 2525)
    kwargs_270787 = {}
    # Getting the type of 'np' (line 2525)
    np_270783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 19), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2525)
    linalg_270784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2525, 19), np_270783, 'linalg')
    # Obtaining the member 'eig' of a type (line 2525)
    eig_270785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2525, 19), linalg_270784, 'eig')
    # Calling eig(args, kwargs) (line 2525)
    eig_call_result_270788 = invoke(stypy.reporting.localization.Localization(__file__, 2525, 19), eig_270785, *[m_270786], **kwargs_270787)
    
    # Obtaining the member '__getitem__' of a type (line 2525)
    getitem___270789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2525, 4), eig_call_result_270788, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2525)
    subscript_call_result_270790 = invoke(stypy.reporting.localization.Localization(__file__, 2525, 4), getitem___270789, int_270782)
    
    # Assigning a type to the variable 'tuple_var_assignment_267143' (line 2525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2525, 4), 'tuple_var_assignment_267143', subscript_call_result_270790)
    
    # Assigning a Subscript to a Name (line 2525):
    
    # Obtaining the type of the subscript
    int_270791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2525, 4), 'int')
    
    # Call to eig(...): (line 2525)
    # Processing the call arguments (line 2525)
    # Getting the type of 'm' (line 2525)
    m_270795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 33), 'm', False)
    # Processing the call keyword arguments (line 2525)
    kwargs_270796 = {}
    # Getting the type of 'np' (line 2525)
    np_270792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 19), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2525)
    linalg_270793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2525, 19), np_270792, 'linalg')
    # Obtaining the member 'eig' of a type (line 2525)
    eig_270794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2525, 19), linalg_270793, 'eig')
    # Calling eig(args, kwargs) (line 2525)
    eig_call_result_270797 = invoke(stypy.reporting.localization.Localization(__file__, 2525, 19), eig_270794, *[m_270795], **kwargs_270796)
    
    # Obtaining the member '__getitem__' of a type (line 2525)
    getitem___270798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2525, 4), eig_call_result_270797, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2525)
    subscript_call_result_270799 = invoke(stypy.reporting.localization.Localization(__file__, 2525, 4), getitem___270798, int_270791)
    
    # Assigning a type to the variable 'tuple_var_assignment_267144' (line 2525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2525, 4), 'tuple_var_assignment_267144', subscript_call_result_270799)
    
    # Assigning a Name to a Name (line 2525):
    # Getting the type of 'tuple_var_assignment_267143' (line 2525)
    tuple_var_assignment_267143_270800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 4), 'tuple_var_assignment_267143')
    # Assigning a type to the variable 'e_val' (line 2525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2525, 4), 'e_val', tuple_var_assignment_267143_270800)
    
    # Assigning a Name to a Name (line 2525):
    # Getting the type of 'tuple_var_assignment_267144' (line 2525)
    tuple_var_assignment_267144_270801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 4), 'tuple_var_assignment_267144')
    # Assigning a type to the variable 'e_vec' (line 2525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2525, 11), 'e_vec', tuple_var_assignment_267144_270801)
    
    # Assigning a Call to a Name (line 2527):
    
    # Assigning a Call to a Name (line 2527):
    
    # Call to argsort(...): (line 2527)
    # Processing the call arguments (line 2527)
    
    # Call to abs(...): (line 2527)
    # Processing the call arguments (line 2527)
    # Getting the type of 'e_val' (line 2527)
    e_val_270806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 34), 'e_val', False)
    # Processing the call keyword arguments (line 2527)
    kwargs_270807 = {}
    # Getting the type of 'np' (line 2527)
    np_270804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 27), 'np', False)
    # Obtaining the member 'abs' of a type (line 2527)
    abs_270805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2527, 27), np_270804, 'abs')
    # Calling abs(args, kwargs) (line 2527)
    abs_call_result_270808 = invoke(stypy.reporting.localization.Localization(__file__, 2527, 27), abs_270805, *[e_val_270806], **kwargs_270807)
    
    # Processing the call keyword arguments (line 2527)
    kwargs_270809 = {}
    # Getting the type of 'np' (line 2527)
    np_270802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2527, 16), 'np', False)
    # Obtaining the member 'argsort' of a type (line 2527)
    argsort_270803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2527, 16), np_270802, 'argsort')
    # Calling argsort(args, kwargs) (line 2527)
    argsort_call_result_270810 = invoke(stypy.reporting.localization.Localization(__file__, 2527, 16), argsort_270803, *[abs_call_result_270808], **kwargs_270809)
    
    # Assigning a type to the variable 'e_val_idx' (line 2527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2527, 4), 'e_val_idx', argsort_call_result_270810)
    
    # Assigning a Subscript to a Name (line 2528):
    
    # Assigning a Subscript to a Name (line 2528):
    
    # Obtaining the type of the subscript
    slice_270811 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2528, 10), None, None, None)
    
    # Obtaining the type of the subscript
    int_270812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2528, 29), 'int')
    # Getting the type of 'e_val_idx' (line 2528)
    e_val_idx_270813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2528, 19), 'e_val_idx')
    # Obtaining the member '__getitem__' of a type (line 2528)
    getitem___270814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2528, 19), e_val_idx_270813, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2528)
    subscript_call_result_270815 = invoke(stypy.reporting.localization.Localization(__file__, 2528, 19), getitem___270814, int_270812)
    
    # Getting the type of 'np' (line 2528)
    np_270816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2528, 34), 'np')
    # Obtaining the member 'newaxis' of a type (line 2528)
    newaxis_270817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2528, 34), np_270816, 'newaxis')
    # Getting the type of 'e_vec' (line 2528)
    e_vec_270818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2528, 10), 'e_vec')
    # Obtaining the member '__getitem__' of a type (line 2528)
    getitem___270819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2528, 10), e_vec_270818, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2528)
    subscript_call_result_270820 = invoke(stypy.reporting.localization.Localization(__file__, 2528, 10), getitem___270819, (slice_270811, subscript_call_result_270815, newaxis_270817))
    
    # Assigning a type to the variable 'mu1' (line 2528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2528, 4), 'mu1', subscript_call_result_270820)
    
    # Assigning a Subscript to a Name (line 2529):
    
    # Assigning a Subscript to a Name (line 2529):
    
    # Obtaining the type of the subscript
    slice_270821 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2529, 10), None, None, None)
    
    # Obtaining the type of the subscript
    int_270822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2529, 29), 'int')
    # Getting the type of 'e_val_idx' (line 2529)
    e_val_idx_270823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2529, 19), 'e_val_idx')
    # Obtaining the member '__getitem__' of a type (line 2529)
    getitem___270824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2529, 19), e_val_idx_270823, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2529)
    subscript_call_result_270825 = invoke(stypy.reporting.localization.Localization(__file__, 2529, 19), getitem___270824, int_270822)
    
    # Getting the type of 'np' (line 2529)
    np_270826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2529, 34), 'np')
    # Obtaining the member 'newaxis' of a type (line 2529)
    newaxis_270827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2529, 34), np_270826, 'newaxis')
    # Getting the type of 'e_vec' (line 2529)
    e_vec_270828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2529, 10), 'e_vec')
    # Obtaining the member '__getitem__' of a type (line 2529)
    getitem___270829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2529, 10), e_vec_270828, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2529)
    subscript_call_result_270830 = invoke(stypy.reporting.localization.Localization(__file__, 2529, 10), getitem___270829, (slice_270821, subscript_call_result_270825, newaxis_270827))
    
    # Assigning a type to the variable 'mu2' (line 2529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2529, 4), 'mu2', subscript_call_result_270830)
    
    # Assigning a BinOp to a Name (line 2537):
    
    # Assigning a BinOp to a Name (line 2537):
    
    # Obtaining the type of the subscript
    slice_270831 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2538, 8), None, None, None)
    # Getting the type of 'i' (line 2538)
    i_270832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2538, 27), 'i')
    # Getting the type of 'np' (line 2538)
    np_270833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2538, 30), 'np')
    # Obtaining the member 'newaxis' of a type (line 2538)
    newaxis_270834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2538, 30), np_270833, 'newaxis')
    # Getting the type of 'transfer_matrix' (line 2538)
    transfer_matrix_270835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2538, 8), 'transfer_matrix')
    # Obtaining the member '__getitem__' of a type (line 2538)
    getitem___270836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2538, 8), transfer_matrix_270835, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2538)
    subscript_call_result_270837 = invoke(stypy.reporting.localization.Localization(__file__, 2538, 8), getitem___270836, (slice_270831, i_270832, newaxis_270834))
    
    complex_270838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2539, 8), 'complex')
    
    # Obtaining the type of the subscript
    slice_270839 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2539, 11), None, None, None)
    # Getting the type of 'j' (line 2539)
    j_270840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 30), 'j')
    # Getting the type of 'np' (line 2539)
    np_270841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 33), 'np')
    # Obtaining the member 'newaxis' of a type (line 2539)
    newaxis_270842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2539, 33), np_270841, 'newaxis')
    # Getting the type of 'transfer_matrix' (line 2539)
    transfer_matrix_270843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2539, 11), 'transfer_matrix')
    # Obtaining the member '__getitem__' of a type (line 2539)
    getitem___270844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2539, 11), transfer_matrix_270843, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2539)
    subscript_call_result_270845 = invoke(stypy.reporting.localization.Localization(__file__, 2539, 11), getitem___270844, (slice_270839, j_270840, newaxis_270842))
    
    # Applying the binary operator '*' (line 2539)
    result_mul_270846 = python_operator(stypy.reporting.localization.Localization(__file__, 2539, 8), '*', complex_270838, subscript_call_result_270845)
    
    # Applying the binary operator '+' (line 2538)
    result_add_270847 = python_operator(stypy.reporting.localization.Localization(__file__, 2538, 8), '+', subscript_call_result_270837, result_mul_270846)
    
    # Assigning a type to the variable 'transfer_matrix_j_mo_transfer_matrix_j' (line 2537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2537, 4), 'transfer_matrix_j_mo_transfer_matrix_j', result_add_270847)
    
    
    
    # Call to allclose(...): (line 2541)
    # Processing the call arguments (line 2541)
    
    # Call to abs(...): (line 2541)
    # Processing the call arguments (line 2541)
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_270852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2541, 46), 'int')
    # Getting the type of 'e_val_idx' (line 2541)
    e_val_idx_270853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 36), 'e_val_idx', False)
    # Obtaining the member '__getitem__' of a type (line 2541)
    getitem___270854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2541, 36), e_val_idx_270853, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2541)
    subscript_call_result_270855 = invoke(stypy.reporting.localization.Localization(__file__, 2541, 36), getitem___270854, int_270852)
    
    # Getting the type of 'e_val' (line 2541)
    e_val_270856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 30), 'e_val', False)
    # Obtaining the member '__getitem__' of a type (line 2541)
    getitem___270857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2541, 30), e_val_270856, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2541)
    subscript_call_result_270858 = invoke(stypy.reporting.localization.Localization(__file__, 2541, 30), getitem___270857, subscript_call_result_270855)
    
    # Processing the call keyword arguments (line 2541)
    kwargs_270859 = {}
    # Getting the type of 'np' (line 2541)
    np_270850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 23), 'np', False)
    # Obtaining the member 'abs' of a type (line 2541)
    abs_270851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2541, 23), np_270850, 'abs')
    # Calling abs(args, kwargs) (line 2541)
    abs_call_result_270860 = invoke(stypy.reporting.localization.Localization(__file__, 2541, 23), abs_270851, *[subscript_call_result_270858], **kwargs_270859)
    
    
    # Call to abs(...): (line 2542)
    # Processing the call arguments (line 2542)
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_270863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2542, 53), 'int')
    # Getting the type of 'e_val_idx' (line 2542)
    e_val_idx_270864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 43), 'e_val_idx', False)
    # Obtaining the member '__getitem__' of a type (line 2542)
    getitem___270865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2542, 43), e_val_idx_270864, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2542)
    subscript_call_result_270866 = invoke(stypy.reporting.localization.Localization(__file__, 2542, 43), getitem___270865, int_270863)
    
    # Getting the type of 'e_val' (line 2542)
    e_val_270867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 37), 'e_val', False)
    # Obtaining the member '__getitem__' of a type (line 2542)
    getitem___270868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2542, 37), e_val_270867, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2542)
    subscript_call_result_270869 = invoke(stypy.reporting.localization.Localization(__file__, 2542, 37), getitem___270868, subscript_call_result_270866)
    
    # Processing the call keyword arguments (line 2542)
    kwargs_270870 = {}
    # Getting the type of 'np' (line 2542)
    np_270861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2542, 30), 'np', False)
    # Obtaining the member 'abs' of a type (line 2542)
    abs_270862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2542, 30), np_270861, 'abs')
    # Calling abs(args, kwargs) (line 2542)
    abs_call_result_270871 = invoke(stypy.reporting.localization.Localization(__file__, 2542, 30), abs_270862, *[subscript_call_result_270869], **kwargs_270870)
    
    # Processing the call keyword arguments (line 2541)
    kwargs_270872 = {}
    # Getting the type of 'np' (line 2541)
    np_270848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 11), 'np', False)
    # Obtaining the member 'allclose' of a type (line 2541)
    allclose_270849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2541, 11), np_270848, 'allclose')
    # Calling allclose(args, kwargs) (line 2541)
    allclose_call_result_270873 = invoke(stypy.reporting.localization.Localization(__file__, 2541, 11), allclose_270849, *[abs_call_result_270860, abs_call_result_270871], **kwargs_270872)
    
    # Applying the 'not' unary operator (line 2541)
    result_not__270874 = python_operator(stypy.reporting.localization.Localization(__file__, 2541, 7), 'not', allclose_call_result_270873)
    
    # Testing the type of an if condition (line 2541)
    if_condition_270875 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2541, 4), result_not__270874)
    # Assigning a type to the variable 'if_condition_270875' (line 2541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2541, 4), 'if_condition_270875', if_condition_270875)
    # SSA begins for if statement (line 2541)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2543):
    
    # Assigning a Call to a Name (line 2543):
    
    # Call to dot(...): (line 2543)
    # Processing the call arguments (line 2543)
    # Getting the type of 'ker_pole_ij' (line 2543)
    ker_pole_ij_270878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 29), 'ker_pole_ij', False)
    # Getting the type of 'mu1' (line 2543)
    mu1_270879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 42), 'mu1', False)
    # Processing the call keyword arguments (line 2543)
    kwargs_270880 = {}
    # Getting the type of 'np' (line 2543)
    np_270876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 22), 'np', False)
    # Obtaining the member 'dot' of a type (line 2543)
    dot_270877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2543, 22), np_270876, 'dot')
    # Calling dot(args, kwargs) (line 2543)
    dot_call_result_270881 = invoke(stypy.reporting.localization.Localization(__file__, 2543, 22), dot_270877, *[ker_pole_ij_270878, mu1_270879], **kwargs_270880)
    
    # Assigning a type to the variable 'ker_pole_mu' (line 2543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2543, 8), 'ker_pole_mu', dot_call_result_270881)
    # SSA branch for the else part of an if statement (line 2541)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2545):
    
    # Assigning a Call to a Name (line 2545):
    
    # Call to hstack(...): (line 2545)
    # Processing the call arguments (line 2545)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2545)
    tuple_270884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2545, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2545)
    # Adding element type (line 2545)
    # Getting the type of 'mu1' (line 2545)
    mu1_270885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 36), 'mu1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2545, 36), tuple_270884, mu1_270885)
    # Adding element type (line 2545)
    # Getting the type of 'mu2' (line 2545)
    mu2_270886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 41), 'mu2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2545, 36), tuple_270884, mu2_270886)
    
    # Processing the call keyword arguments (line 2545)
    kwargs_270887 = {}
    # Getting the type of 'np' (line 2545)
    np_270882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 25), 'np', False)
    # Obtaining the member 'hstack' of a type (line 2545)
    hstack_270883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2545, 25), np_270882, 'hstack')
    # Calling hstack(args, kwargs) (line 2545)
    hstack_call_result_270888 = invoke(stypy.reporting.localization.Localization(__file__, 2545, 25), hstack_270883, *[tuple_270884], **kwargs_270887)
    
    # Assigning a type to the variable 'mu1_mu2_matrix' (line 2545)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'mu1_mu2_matrix', hstack_call_result_270888)
    
    # Assigning a Call to a Name (line 2546):
    
    # Assigning a Call to a Name (line 2546):
    
    # Call to dot(...): (line 2546)
    # Processing the call arguments (line 2546)
    # Getting the type of 'ker_pole_ij' (line 2546)
    ker_pole_ij_270891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 29), 'ker_pole_ij', False)
    # Getting the type of 'mu1_mu2_matrix' (line 2546)
    mu1_mu2_matrix_270892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 42), 'mu1_mu2_matrix', False)
    # Processing the call keyword arguments (line 2546)
    kwargs_270893 = {}
    # Getting the type of 'np' (line 2546)
    np_270889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 22), 'np', False)
    # Obtaining the member 'dot' of a type (line 2546)
    dot_270890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2546, 22), np_270889, 'dot')
    # Calling dot(args, kwargs) (line 2546)
    dot_call_result_270894 = invoke(stypy.reporting.localization.Localization(__file__, 2546, 22), dot_270890, *[ker_pole_ij_270891, mu1_mu2_matrix_270892], **kwargs_270893)
    
    # Assigning a type to the variable 'ker_pole_mu' (line 2546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2546, 8), 'ker_pole_mu', dot_call_result_270894)
    # SSA join for if statement (line 2541)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2547):
    
    # Assigning a Call to a Name (line 2547):
    
    # Call to dot(...): (line 2547)
    # Processing the call arguments (line 2547)
    
    # Call to dot(...): (line 2547)
    # Processing the call arguments (line 2547)
    # Getting the type of 'ker_pole_mu' (line 2547)
    ker_pole_mu_270899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 40), 'ker_pole_mu', False)
    
    # Call to conj(...): (line 2547)
    # Processing the call arguments (line 2547)
    # Getting the type of 'ker_pole_mu' (line 2547)
    ker_pole_mu_270902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 61), 'ker_pole_mu', False)
    # Obtaining the member 'T' of a type (line 2547)
    T_270903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2547, 61), ker_pole_mu_270902, 'T')
    # Processing the call keyword arguments (line 2547)
    kwargs_270904 = {}
    # Getting the type of 'np' (line 2547)
    np_270900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 53), 'np', False)
    # Obtaining the member 'conj' of a type (line 2547)
    conj_270901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2547, 53), np_270900, 'conj')
    # Calling conj(args, kwargs) (line 2547)
    conj_call_result_270905 = invoke(stypy.reporting.localization.Localization(__file__, 2547, 53), conj_270901, *[T_270903], **kwargs_270904)
    
    # Processing the call keyword arguments (line 2547)
    kwargs_270906 = {}
    # Getting the type of 'np' (line 2547)
    np_270897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 33), 'np', False)
    # Obtaining the member 'dot' of a type (line 2547)
    dot_270898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2547, 33), np_270897, 'dot')
    # Calling dot(args, kwargs) (line 2547)
    dot_call_result_270907 = invoke(stypy.reporting.localization.Localization(__file__, 2547, 33), dot_270898, *[ker_pole_mu_270899, conj_call_result_270905], **kwargs_270906)
    
    # Getting the type of 'transfer_matrix_j_mo_transfer_matrix_j' (line 2548)
    transfer_matrix_j_mo_transfer_matrix_j_270908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 30), 'transfer_matrix_j_mo_transfer_matrix_j', False)
    # Processing the call keyword arguments (line 2547)
    kwargs_270909 = {}
    # Getting the type of 'np' (line 2547)
    np_270895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 26), 'np', False)
    # Obtaining the member 'dot' of a type (line 2547)
    dot_270896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2547, 26), np_270895, 'dot')
    # Calling dot(args, kwargs) (line 2547)
    dot_call_result_270910 = invoke(stypy.reporting.localization.Localization(__file__, 2547, 26), dot_270896, *[dot_call_result_270907, transfer_matrix_j_mo_transfer_matrix_j_270908], **kwargs_270909)
    
    # Assigning a type to the variable 'transfer_matrix_i_j' (line 2547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2547, 4), 'transfer_matrix_i_j', dot_call_result_270910)
    
    
    
    # Call to allclose(...): (line 2550)
    # Processing the call arguments (line 2550)
    # Getting the type of 'transfer_matrix_i_j' (line 2550)
    transfer_matrix_i_j_270913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 23), 'transfer_matrix_i_j', False)
    int_270914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2550, 44), 'int')
    # Processing the call keyword arguments (line 2550)
    kwargs_270915 = {}
    # Getting the type of 'np' (line 2550)
    np_270911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 11), 'np', False)
    # Obtaining the member 'allclose' of a type (line 2550)
    allclose_270912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2550, 11), np_270911, 'allclose')
    # Calling allclose(args, kwargs) (line 2550)
    allclose_call_result_270916 = invoke(stypy.reporting.localization.Localization(__file__, 2550, 11), allclose_270912, *[transfer_matrix_i_j_270913, int_270914], **kwargs_270915)
    
    # Applying the 'not' unary operator (line 2550)
    result_not__270917 = python_operator(stypy.reporting.localization.Localization(__file__, 2550, 7), 'not', allclose_call_result_270916)
    
    # Testing the type of an if condition (line 2550)
    if_condition_270918 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2550, 4), result_not__270917)
    # Assigning a type to the variable 'if_condition_270918' (line 2550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2550, 4), 'if_condition_270918', if_condition_270918)
    # SSA begins for if statement (line 2550)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2551):
    
    # Assigning a BinOp to a Name (line 2551):
    # Getting the type of 'transfer_matrix_i_j' (line 2551)
    transfer_matrix_i_j_270919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 31), 'transfer_matrix_i_j')
    
    # Call to norm(...): (line 2552)
    # Processing the call arguments (line 2552)
    # Getting the type of 'transfer_matrix_i_j' (line 2552)
    transfer_matrix_i_j_270923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 27), 'transfer_matrix_i_j', False)
    # Processing the call keyword arguments (line 2552)
    kwargs_270924 = {}
    # Getting the type of 'np' (line 2552)
    np_270920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 12), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2552)
    linalg_270921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2552, 12), np_270920, 'linalg')
    # Obtaining the member 'norm' of a type (line 2552)
    norm_270922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2552, 12), linalg_270921, 'norm')
    # Calling norm(args, kwargs) (line 2552)
    norm_call_result_270925 = invoke(stypy.reporting.localization.Localization(__file__, 2552, 12), norm_270922, *[transfer_matrix_i_j_270923], **kwargs_270924)
    
    # Applying the binary operator 'div' (line 2551)
    result_div_270926 = python_operator(stypy.reporting.localization.Localization(__file__, 2551, 31), 'div', transfer_matrix_i_j_270919, norm_call_result_270925)
    
    # Assigning a type to the variable 'transfer_matrix_i_j' (line 2551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 8), 'transfer_matrix_i_j', result_div_270926)
    
    # Assigning a Call to a Subscript (line 2553):
    
    # Assigning a Call to a Subscript (line 2553):
    
    # Call to real(...): (line 2553)
    # Processing the call arguments (line 2553)
    
    # Obtaining the type of the subscript
    slice_270929 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2553, 40), None, None, None)
    int_270930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2553, 63), 'int')
    # Getting the type of 'transfer_matrix_i_j' (line 2553)
    transfer_matrix_i_j_270931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 40), 'transfer_matrix_i_j', False)
    # Obtaining the member '__getitem__' of a type (line 2553)
    getitem___270932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 40), transfer_matrix_i_j_270931, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2553)
    subscript_call_result_270933 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 40), getitem___270932, (slice_270929, int_270930))
    
    # Processing the call keyword arguments (line 2553)
    kwargs_270934 = {}
    # Getting the type of 'np' (line 2553)
    np_270927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 32), 'np', False)
    # Obtaining the member 'real' of a type (line 2553)
    real_270928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2553, 32), np_270927, 'real')
    # Calling real(args, kwargs) (line 2553)
    real_call_result_270935 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 32), real_270928, *[subscript_call_result_270933], **kwargs_270934)
    
    # Getting the type of 'transfer_matrix' (line 2553)
    transfer_matrix_270936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 8), 'transfer_matrix')
    slice_270937 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2553, 8), None, None, None)
    # Getting the type of 'i' (line 2553)
    i_270938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 27), 'i')
    # Storing an element on a container (line 2553)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2553, 8), transfer_matrix_270936, ((slice_270937, i_270938), real_call_result_270935))
    
    # Assigning a Call to a Subscript (line 2554):
    
    # Assigning a Call to a Subscript (line 2554):
    
    # Call to imag(...): (line 2554)
    # Processing the call arguments (line 2554)
    
    # Obtaining the type of the subscript
    slice_270941 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2554, 40), None, None, None)
    int_270942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2554, 63), 'int')
    # Getting the type of 'transfer_matrix_i_j' (line 2554)
    transfer_matrix_i_j_270943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 40), 'transfer_matrix_i_j', False)
    # Obtaining the member '__getitem__' of a type (line 2554)
    getitem___270944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2554, 40), transfer_matrix_i_j_270943, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2554)
    subscript_call_result_270945 = invoke(stypy.reporting.localization.Localization(__file__, 2554, 40), getitem___270944, (slice_270941, int_270942))
    
    # Processing the call keyword arguments (line 2554)
    kwargs_270946 = {}
    # Getting the type of 'np' (line 2554)
    np_270939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 32), 'np', False)
    # Obtaining the member 'imag' of a type (line 2554)
    imag_270940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2554, 32), np_270939, 'imag')
    # Calling imag(args, kwargs) (line 2554)
    imag_call_result_270947 = invoke(stypy.reporting.localization.Localization(__file__, 2554, 32), imag_270940, *[subscript_call_result_270945], **kwargs_270946)
    
    # Getting the type of 'transfer_matrix' (line 2554)
    transfer_matrix_270948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 8), 'transfer_matrix')
    slice_270949 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2554, 8), None, None, None)
    # Getting the type of 'j' (line 2554)
    j_270950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2554, 27), 'j')
    # Storing an element on a container (line 2554)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2554, 8), transfer_matrix_270948, ((slice_270949, j_270950), imag_call_result_270947))
    # SSA branch for the else part of an if statement (line 2550)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Subscript (line 2557):
    
    # Assigning a Call to a Subscript (line 2557):
    
    # Call to real(...): (line 2557)
    # Processing the call arguments (line 2557)
    
    # Obtaining the type of the subscript
    slice_270953 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2557, 40), None, None, None)
    int_270954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 55), 'int')
    # Getting the type of 'ker_pole_mu' (line 2557)
    ker_pole_mu_270955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 40), 'ker_pole_mu', False)
    # Obtaining the member '__getitem__' of a type (line 2557)
    getitem___270956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2557, 40), ker_pole_mu_270955, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2557)
    subscript_call_result_270957 = invoke(stypy.reporting.localization.Localization(__file__, 2557, 40), getitem___270956, (slice_270953, int_270954))
    
    # Processing the call keyword arguments (line 2557)
    kwargs_270958 = {}
    # Getting the type of 'np' (line 2557)
    np_270951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 32), 'np', False)
    # Obtaining the member 'real' of a type (line 2557)
    real_270952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2557, 32), np_270951, 'real')
    # Calling real(args, kwargs) (line 2557)
    real_call_result_270959 = invoke(stypy.reporting.localization.Localization(__file__, 2557, 32), real_270952, *[subscript_call_result_270957], **kwargs_270958)
    
    # Getting the type of 'transfer_matrix' (line 2557)
    transfer_matrix_270960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 8), 'transfer_matrix')
    slice_270961 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2557, 8), None, None, None)
    # Getting the type of 'i' (line 2557)
    i_270962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 27), 'i')
    # Storing an element on a container (line 2557)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 8), transfer_matrix_270960, ((slice_270961, i_270962), real_call_result_270959))
    
    # Assigning a Call to a Subscript (line 2558):
    
    # Assigning a Call to a Subscript (line 2558):
    
    # Call to imag(...): (line 2558)
    # Processing the call arguments (line 2558)
    
    # Obtaining the type of the subscript
    slice_270965 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2558, 40), None, None, None)
    int_270966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2558, 55), 'int')
    # Getting the type of 'ker_pole_mu' (line 2558)
    ker_pole_mu_270967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 40), 'ker_pole_mu', False)
    # Obtaining the member '__getitem__' of a type (line 2558)
    getitem___270968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2558, 40), ker_pole_mu_270967, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2558)
    subscript_call_result_270969 = invoke(stypy.reporting.localization.Localization(__file__, 2558, 40), getitem___270968, (slice_270965, int_270966))
    
    # Processing the call keyword arguments (line 2558)
    kwargs_270970 = {}
    # Getting the type of 'np' (line 2558)
    np_270963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 32), 'np', False)
    # Obtaining the member 'imag' of a type (line 2558)
    imag_270964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2558, 32), np_270963, 'imag')
    # Calling imag(args, kwargs) (line 2558)
    imag_call_result_270971 = invoke(stypy.reporting.localization.Localization(__file__, 2558, 32), imag_270964, *[subscript_call_result_270969], **kwargs_270970)
    
    # Getting the type of 'transfer_matrix' (line 2558)
    transfer_matrix_270972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 8), 'transfer_matrix')
    slice_270973 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2558, 8), None, None, None)
    # Getting the type of 'j' (line 2558)
    j_270974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 27), 'j')
    # Storing an element on a container (line 2558)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2558, 8), transfer_matrix_270972, ((slice_270973, j_270974), imag_call_result_270971))
    # SSA join for if statement (line 2550)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_YT_complex(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_YT_complex' in the type store
    # Getting the type of 'stypy_return_type' (line 2510)
    stypy_return_type_270975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_270975)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_YT_complex'
    return stypy_return_type_270975

# Assigning a type to the variable '_YT_complex' (line 2510)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2510, 0), '_YT_complex', _YT_complex)

@norecursion
def _YT_loop(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_YT_loop'
    module_type_store = module_type_store.open_function_context('_YT_loop', 2561, 0, False)
    
    # Passed parameters checking function
    _YT_loop.stypy_localization = localization
    _YT_loop.stypy_type_of_self = None
    _YT_loop.stypy_type_store = module_type_store
    _YT_loop.stypy_function_name = '_YT_loop'
    _YT_loop.stypy_param_names_list = ['ker_pole', 'transfer_matrix', 'poles', 'B', 'maxiter', 'rtol']
    _YT_loop.stypy_varargs_param_name = None
    _YT_loop.stypy_kwargs_param_name = None
    _YT_loop.stypy_call_defaults = defaults
    _YT_loop.stypy_call_varargs = varargs
    _YT_loop.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_YT_loop', ['ker_pole', 'transfer_matrix', 'poles', 'B', 'maxiter', 'rtol'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_YT_loop', localization, ['ker_pole', 'transfer_matrix', 'poles', 'B', 'maxiter', 'rtol'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_YT_loop(...)' code ##################

    str_270976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2568, (-1)), 'str', '\n    Algorithm "YT" Tits, Yang. Globally Convergent\n    Algorithms for Robust Pole Assignment by State Feedback\n    http://drum.lib.umd.edu/handle/1903/5598\n    The poles P have to be sorted accordingly to section 6.2 page 20\n\n    ')
    
    # Assigning a Subscript to a Name (line 2572):
    
    # Assigning a Subscript to a Name (line 2572):
    
    # Obtaining the type of the subscript
    int_270977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 44), 'int')
    
    # Obtaining the type of the subscript
    
    # Call to isreal(...): (line 2572)
    # Processing the call arguments (line 2572)
    # Getting the type of 'poles' (line 2572)
    poles_270980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 30), 'poles', False)
    # Processing the call keyword arguments (line 2572)
    kwargs_270981 = {}
    # Getting the type of 'np' (line 2572)
    np_270978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 20), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2572)
    isreal_270979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2572, 20), np_270978, 'isreal')
    # Calling isreal(args, kwargs) (line 2572)
    isreal_call_result_270982 = invoke(stypy.reporting.localization.Localization(__file__, 2572, 20), isreal_270979, *[poles_270980], **kwargs_270981)
    
    # Getting the type of 'poles' (line 2572)
    poles_270983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 14), 'poles')
    # Obtaining the member '__getitem__' of a type (line 2572)
    getitem___270984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2572, 14), poles_270983, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2572)
    subscript_call_result_270985 = invoke(stypy.reporting.localization.Localization(__file__, 2572, 14), getitem___270984, isreal_call_result_270982)
    
    # Obtaining the member 'shape' of a type (line 2572)
    shape_270986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2572, 14), subscript_call_result_270985, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2572)
    getitem___270987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2572, 14), shape_270986, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2572)
    subscript_call_result_270988 = invoke(stypy.reporting.localization.Localization(__file__, 2572, 14), getitem___270987, int_270977)
    
    # Assigning a type to the variable 'nb_real' (line 2572)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2572, 4), 'nb_real', subscript_call_result_270988)
    
    # Assigning a BinOp to a Name (line 2574):
    
    # Assigning a BinOp to a Name (line 2574):
    # Getting the type of 'nb_real' (line 2574)
    nb_real_270989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 10), 'nb_real')
    int_270990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, 21), 'int')
    # Applying the binary operator '//' (line 2574)
    result_floordiv_270991 = python_operator(stypy.reporting.localization.Localization(__file__, 2574, 10), '//', nb_real_270989, int_270990)
    
    # Assigning a type to the variable 'hnb' (line 2574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2574, 4), 'hnb', result_floordiv_270991)
    
    
    # Getting the type of 'nb_real' (line 2580)
    nb_real_270992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 7), 'nb_real')
    int_270993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2580, 17), 'int')
    # Applying the binary operator '>' (line 2580)
    result_gt_270994 = python_operator(stypy.reporting.localization.Localization(__file__, 2580, 7), '>', nb_real_270992, int_270993)
    
    # Testing the type of an if condition (line 2580)
    if_condition_270995 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2580, 4), result_gt_270994)
    # Assigning a type to the variable 'if_condition_270995' (line 2580)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2580, 4), 'if_condition_270995', if_condition_270995)
    # SSA begins for if statement (line 2580)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 2582):
    
    # Assigning a List to a Name (line 2582):
    
    # Obtaining an instance of the builtin type 'list' (line 2582)
    list_270996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2582, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2582)
    # Adding element type (line 2582)
    
    # Obtaining an instance of the builtin type 'list' (line 2582)
    list_270997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2582, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2582)
    # Adding element type (line 2582)
    # Getting the type of 'nb_real' (line 2582)
    nb_real_270998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 25), 'nb_real')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2582, 24), list_270997, nb_real_270998)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2582, 23), list_270996, list_270997)
    # Adding element type (line 2582)
    
    # Obtaining an instance of the builtin type 'list' (line 2582)
    list_270999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2582, 35), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2582)
    # Adding element type (line 2582)
    int_271000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2582, 36), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2582, 35), list_270999, int_271000)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2582, 23), list_270996, list_270999)
    
    # Assigning a type to the variable 'update_order' (line 2582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2582, 8), 'update_order', list_270996)
    # SSA branch for the else part of an if statement (line 2580)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a List to a Name (line 2584):
    
    # Assigning a List to a Name (line 2584):
    
    # Obtaining an instance of the builtin type 'list' (line 2584)
    list_271001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2584, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2584)
    # Adding element type (line 2584)
    
    # Obtaining an instance of the builtin type 'list' (line 2584)
    list_271002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2584, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2584)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2584, 23), list_271001, list_271002)
    # Adding element type (line 2584)
    
    # Obtaining an instance of the builtin type 'list' (line 2584)
    list_271003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2584, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2584)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2584, 23), list_271001, list_271003)
    
    # Assigning a type to the variable 'update_order' (line 2584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2584, 8), 'update_order', list_271001)
    # SSA join for if statement (line 2580)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2586):
    
    # Assigning a Call to a Name (line 2586):
    
    # Call to arange(...): (line 2586)
    # Processing the call arguments (line 2586)
    # Getting the type of 'nb_real' (line 2586)
    nb_real_271006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 23), 'nb_real', False)
    int_271007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2586, 31), 'int')
    # Applying the binary operator '+' (line 2586)
    result_add_271008 = python_operator(stypy.reporting.localization.Localization(__file__, 2586, 23), '+', nb_real_271006, int_271007)
    
    
    # Call to len(...): (line 2586)
    # Processing the call arguments (line 2586)
    # Getting the type of 'poles' (line 2586)
    poles_271010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 38), 'poles', False)
    # Processing the call keyword arguments (line 2586)
    kwargs_271011 = {}
    # Getting the type of 'len' (line 2586)
    len_271009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 34), 'len', False)
    # Calling len(args, kwargs) (line 2586)
    len_call_result_271012 = invoke(stypy.reporting.localization.Localization(__file__, 2586, 34), len_271009, *[poles_271010], **kwargs_271011)
    
    int_271013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2586, 45), 'int')
    # Applying the binary operator '+' (line 2586)
    result_add_271014 = python_operator(stypy.reporting.localization.Localization(__file__, 2586, 34), '+', len_call_result_271012, int_271013)
    
    int_271015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2586, 48), 'int')
    # Processing the call keyword arguments (line 2586)
    kwargs_271016 = {}
    # Getting the type of 'np' (line 2586)
    np_271004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2586, 13), 'np', False)
    # Obtaining the member 'arange' of a type (line 2586)
    arange_271005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2586, 13), np_271004, 'arange')
    # Calling arange(args, kwargs) (line 2586)
    arange_call_result_271017 = invoke(stypy.reporting.localization.Localization(__file__, 2586, 13), arange_271005, *[result_add_271008, result_add_271014, int_271015], **kwargs_271016)
    
    # Assigning a type to the variable 'r_comp' (line 2586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2586, 4), 'r_comp', arange_call_result_271017)
    
    # Assigning a Call to a Name (line 2588):
    
    # Assigning a Call to a Name (line 2588):
    
    # Call to arange(...): (line 2588)
    # Processing the call arguments (line 2588)
    int_271020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2588, 20), 'int')
    # Getting the type of 'hnb' (line 2588)
    hnb_271021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 23), 'hnb', False)
    # Getting the type of 'nb_real' (line 2588)
    nb_real_271022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 27), 'nb_real', False)
    int_271023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2588, 37), 'int')
    # Applying the binary operator '%' (line 2588)
    result_mod_271024 = python_operator(stypy.reporting.localization.Localization(__file__, 2588, 27), '%', nb_real_271022, int_271023)
    
    # Applying the binary operator '+' (line 2588)
    result_add_271025 = python_operator(stypy.reporting.localization.Localization(__file__, 2588, 23), '+', hnb_271021, result_mod_271024)
    
    # Processing the call keyword arguments (line 2588)
    kwargs_271026 = {}
    # Getting the type of 'np' (line 2588)
    np_271018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2588, 10), 'np', False)
    # Obtaining the member 'arange' of a type (line 2588)
    arange_271019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2588, 10), np_271018, 'arange')
    # Calling arange(args, kwargs) (line 2588)
    arange_call_result_271027 = invoke(stypy.reporting.localization.Localization(__file__, 2588, 10), arange_271019, *[int_271020, result_add_271025], **kwargs_271026)
    
    # Assigning a type to the variable 'r_p' (line 2588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2588, 4), 'r_p', arange_call_result_271027)
    
    # Call to extend(...): (line 2589)
    # Processing the call arguments (line 2589)
    int_271033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2589, 27), 'int')
    # Getting the type of 'r_p' (line 2589)
    r_p_271034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 29), 'r_p', False)
    # Applying the binary operator '*' (line 2589)
    result_mul_271035 = python_operator(stypy.reporting.localization.Localization(__file__, 2589, 27), '*', int_271033, r_p_271034)
    
    # Processing the call keyword arguments (line 2589)
    kwargs_271036 = {}
    
    # Obtaining the type of the subscript
    int_271028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2589, 17), 'int')
    # Getting the type of 'update_order' (line 2589)
    update_order_271029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2589)
    getitem___271030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 4), update_order_271029, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2589)
    subscript_call_result_271031 = invoke(stypy.reporting.localization.Localization(__file__, 2589, 4), getitem___271030, int_271028)
    
    # Obtaining the member 'extend' of a type (line 2589)
    extend_271032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2589, 4), subscript_call_result_271031, 'extend')
    # Calling extend(args, kwargs) (line 2589)
    extend_call_result_271037 = invoke(stypy.reporting.localization.Localization(__file__, 2589, 4), extend_271032, *[result_mul_271035], **kwargs_271036)
    
    
    # Call to extend(...): (line 2590)
    # Processing the call arguments (line 2590)
    int_271043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2590, 27), 'int')
    # Getting the type of 'r_p' (line 2590)
    r_p_271044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 29), 'r_p', False)
    # Applying the binary operator '*' (line 2590)
    result_mul_271045 = python_operator(stypy.reporting.localization.Localization(__file__, 2590, 27), '*', int_271043, r_p_271044)
    
    int_271046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2590, 33), 'int')
    # Applying the binary operator '+' (line 2590)
    result_add_271047 = python_operator(stypy.reporting.localization.Localization(__file__, 2590, 27), '+', result_mul_271045, int_271046)
    
    # Processing the call keyword arguments (line 2590)
    kwargs_271048 = {}
    
    # Obtaining the type of the subscript
    int_271038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2590, 17), 'int')
    # Getting the type of 'update_order' (line 2590)
    update_order_271039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2590, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2590)
    getitem___271040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 4), update_order_271039, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2590)
    subscript_call_result_271041 = invoke(stypy.reporting.localization.Localization(__file__, 2590, 4), getitem___271040, int_271038)
    
    # Obtaining the member 'extend' of a type (line 2590)
    extend_271042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2590, 4), subscript_call_result_271041, 'extend')
    # Calling extend(args, kwargs) (line 2590)
    extend_call_result_271049 = invoke(stypy.reporting.localization.Localization(__file__, 2590, 4), extend_271042, *[result_add_271047], **kwargs_271048)
    
    
    # Call to extend(...): (line 2592)
    # Processing the call arguments (line 2592)
    # Getting the type of 'r_comp' (line 2592)
    r_comp_271055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 27), 'r_comp', False)
    # Processing the call keyword arguments (line 2592)
    kwargs_271056 = {}
    
    # Obtaining the type of the subscript
    int_271050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2592, 17), 'int')
    # Getting the type of 'update_order' (line 2592)
    update_order_271051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2592, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2592)
    getitem___271052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 4), update_order_271051, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2592)
    subscript_call_result_271053 = invoke(stypy.reporting.localization.Localization(__file__, 2592, 4), getitem___271052, int_271050)
    
    # Obtaining the member 'extend' of a type (line 2592)
    extend_271054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2592, 4), subscript_call_result_271053, 'extend')
    # Calling extend(args, kwargs) (line 2592)
    extend_call_result_271057 = invoke(stypy.reporting.localization.Localization(__file__, 2592, 4), extend_271054, *[r_comp_271055], **kwargs_271056)
    
    
    # Call to extend(...): (line 2593)
    # Processing the call arguments (line 2593)
    # Getting the type of 'r_comp' (line 2593)
    r_comp_271063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 27), 'r_comp', False)
    int_271064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2593, 34), 'int')
    # Applying the binary operator '+' (line 2593)
    result_add_271065 = python_operator(stypy.reporting.localization.Localization(__file__, 2593, 27), '+', r_comp_271063, int_271064)
    
    # Processing the call keyword arguments (line 2593)
    kwargs_271066 = {}
    
    # Obtaining the type of the subscript
    int_271058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2593, 17), 'int')
    # Getting the type of 'update_order' (line 2593)
    update_order_271059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2593)
    getitem___271060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2593, 4), update_order_271059, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2593)
    subscript_call_result_271061 = invoke(stypy.reporting.localization.Localization(__file__, 2593, 4), getitem___271060, int_271058)
    
    # Obtaining the member 'extend' of a type (line 2593)
    extend_271062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2593, 4), subscript_call_result_271061, 'extend')
    # Calling extend(args, kwargs) (line 2593)
    extend_call_result_271067 = invoke(stypy.reporting.localization.Localization(__file__, 2593, 4), extend_271062, *[result_add_271065], **kwargs_271066)
    
    
    # Assigning a Call to a Name (line 2595):
    
    # Assigning a Call to a Name (line 2595):
    
    # Call to arange(...): (line 2595)
    # Processing the call arguments (line 2595)
    int_271070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2595, 20), 'int')
    # Getting the type of 'hnb' (line 2595)
    hnb_271071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 23), 'hnb', False)
    int_271072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2595, 27), 'int')
    # Applying the binary operator '+' (line 2595)
    result_add_271073 = python_operator(stypy.reporting.localization.Localization(__file__, 2595, 23), '+', hnb_271071, int_271072)
    
    # Processing the call keyword arguments (line 2595)
    kwargs_271074 = {}
    # Getting the type of 'np' (line 2595)
    np_271068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 10), 'np', False)
    # Obtaining the member 'arange' of a type (line 2595)
    arange_271069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2595, 10), np_271068, 'arange')
    # Calling arange(args, kwargs) (line 2595)
    arange_call_result_271075 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 10), arange_271069, *[int_271070, result_add_271073], **kwargs_271074)
    
    # Assigning a type to the variable 'r_p' (line 2595)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2595, 4), 'r_p', arange_call_result_271075)
    
    # Call to extend(...): (line 2596)
    # Processing the call arguments (line 2596)
    int_271081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2596, 27), 'int')
    # Getting the type of 'r_p' (line 2596)
    r_p_271082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 29), 'r_p', False)
    # Applying the binary operator '*' (line 2596)
    result_mul_271083 = python_operator(stypy.reporting.localization.Localization(__file__, 2596, 27), '*', int_271081, r_p_271082)
    
    int_271084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2596, 33), 'int')
    # Applying the binary operator '-' (line 2596)
    result_sub_271085 = python_operator(stypy.reporting.localization.Localization(__file__, 2596, 27), '-', result_mul_271083, int_271084)
    
    # Processing the call keyword arguments (line 2596)
    kwargs_271086 = {}
    
    # Obtaining the type of the subscript
    int_271076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2596, 17), 'int')
    # Getting the type of 'update_order' (line 2596)
    update_order_271077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2596, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2596)
    getitem___271078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2596, 4), update_order_271077, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2596)
    subscript_call_result_271079 = invoke(stypy.reporting.localization.Localization(__file__, 2596, 4), getitem___271078, int_271076)
    
    # Obtaining the member 'extend' of a type (line 2596)
    extend_271080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2596, 4), subscript_call_result_271079, 'extend')
    # Calling extend(args, kwargs) (line 2596)
    extend_call_result_271087 = invoke(stypy.reporting.localization.Localization(__file__, 2596, 4), extend_271080, *[result_sub_271085], **kwargs_271086)
    
    
    # Call to extend(...): (line 2597)
    # Processing the call arguments (line 2597)
    int_271093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2597, 27), 'int')
    # Getting the type of 'r_p' (line 2597)
    r_p_271094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 29), 'r_p', False)
    # Applying the binary operator '*' (line 2597)
    result_mul_271095 = python_operator(stypy.reporting.localization.Localization(__file__, 2597, 27), '*', int_271093, r_p_271094)
    
    # Processing the call keyword arguments (line 2597)
    kwargs_271096 = {}
    
    # Obtaining the type of the subscript
    int_271088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2597, 17), 'int')
    # Getting the type of 'update_order' (line 2597)
    update_order_271089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2597, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2597)
    getitem___271090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2597, 4), update_order_271089, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2597)
    subscript_call_result_271091 = invoke(stypy.reporting.localization.Localization(__file__, 2597, 4), getitem___271090, int_271088)
    
    # Obtaining the member 'extend' of a type (line 2597)
    extend_271092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2597, 4), subscript_call_result_271091, 'extend')
    # Calling extend(args, kwargs) (line 2597)
    extend_call_result_271097 = invoke(stypy.reporting.localization.Localization(__file__, 2597, 4), extend_271092, *[result_mul_271095], **kwargs_271096)
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'hnb' (line 2599)
    hnb_271098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 7), 'hnb')
    int_271099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2599, 14), 'int')
    # Applying the binary operator '==' (line 2599)
    result_eq_271100 = python_operator(stypy.reporting.localization.Localization(__file__, 2599, 7), '==', hnb_271098, int_271099)
    
    
    # Call to isreal(...): (line 2599)
    # Processing the call arguments (line 2599)
    
    # Obtaining the type of the subscript
    int_271103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2599, 36), 'int')
    # Getting the type of 'poles' (line 2599)
    poles_271104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 30), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2599)
    getitem___271105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2599, 30), poles_271104, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2599)
    subscript_call_result_271106 = invoke(stypy.reporting.localization.Localization(__file__, 2599, 30), getitem___271105, int_271103)
    
    # Processing the call keyword arguments (line 2599)
    kwargs_271107 = {}
    # Getting the type of 'np' (line 2599)
    np_271101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2599, 20), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2599)
    isreal_271102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2599, 20), np_271101, 'isreal')
    # Calling isreal(args, kwargs) (line 2599)
    isreal_call_result_271108 = invoke(stypy.reporting.localization.Localization(__file__, 2599, 20), isreal_271102, *[subscript_call_result_271106], **kwargs_271107)
    
    # Applying the binary operator 'and' (line 2599)
    result_and_keyword_271109 = python_operator(stypy.reporting.localization.Localization(__file__, 2599, 7), 'and', result_eq_271100, isreal_call_result_271108)
    
    # Testing the type of an if condition (line 2599)
    if_condition_271110 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2599, 4), result_and_keyword_271109)
    # Assigning a type to the variable 'if_condition_271110' (line 2599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2599, 4), 'if_condition_271110', if_condition_271110)
    # SSA begins for if statement (line 2599)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2600)
    # Processing the call arguments (line 2600)
    int_271116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2600, 31), 'int')
    # Processing the call keyword arguments (line 2600)
    kwargs_271117 = {}
    
    # Obtaining the type of the subscript
    int_271111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2600, 21), 'int')
    # Getting the type of 'update_order' (line 2600)
    update_order_271112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 8), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2600)
    getitem___271113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2600, 8), update_order_271112, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2600)
    subscript_call_result_271114 = invoke(stypy.reporting.localization.Localization(__file__, 2600, 8), getitem___271113, int_271111)
    
    # Obtaining the member 'append' of a type (line 2600)
    append_271115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2600, 8), subscript_call_result_271114, 'append')
    # Calling append(args, kwargs) (line 2600)
    append_call_result_271118 = invoke(stypy.reporting.localization.Localization(__file__, 2600, 8), append_271115, *[int_271116], **kwargs_271117)
    
    
    # Call to append(...): (line 2601)
    # Processing the call arguments (line 2601)
    int_271124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2601, 31), 'int')
    # Processing the call keyword arguments (line 2601)
    kwargs_271125 = {}
    
    # Obtaining the type of the subscript
    int_271119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2601, 21), 'int')
    # Getting the type of 'update_order' (line 2601)
    update_order_271120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 8), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2601)
    getitem___271121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2601, 8), update_order_271120, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2601)
    subscript_call_result_271122 = invoke(stypy.reporting.localization.Localization(__file__, 2601, 8), getitem___271121, int_271119)
    
    # Obtaining the member 'append' of a type (line 2601)
    append_271123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2601, 8), subscript_call_result_271122, 'append')
    # Calling append(args, kwargs) (line 2601)
    append_call_result_271126 = invoke(stypy.reporting.localization.Localization(__file__, 2601, 8), append_271123, *[int_271124], **kwargs_271125)
    
    # SSA join for if statement (line 2599)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to extend(...): (line 2602)
    # Processing the call arguments (line 2602)
    # Getting the type of 'r_comp' (line 2602)
    r_comp_271132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 27), 'r_comp', False)
    # Processing the call keyword arguments (line 2602)
    kwargs_271133 = {}
    
    # Obtaining the type of the subscript
    int_271127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2602, 17), 'int')
    # Getting the type of 'update_order' (line 2602)
    update_order_271128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2602, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2602)
    getitem___271129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 4), update_order_271128, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2602)
    subscript_call_result_271130 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 4), getitem___271129, int_271127)
    
    # Obtaining the member 'extend' of a type (line 2602)
    extend_271131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2602, 4), subscript_call_result_271130, 'extend')
    # Calling extend(args, kwargs) (line 2602)
    extend_call_result_271134 = invoke(stypy.reporting.localization.Localization(__file__, 2602, 4), extend_271131, *[r_comp_271132], **kwargs_271133)
    
    
    # Call to extend(...): (line 2603)
    # Processing the call arguments (line 2603)
    # Getting the type of 'r_comp' (line 2603)
    r_comp_271140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 27), 'r_comp', False)
    int_271141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 34), 'int')
    # Applying the binary operator '+' (line 2603)
    result_add_271142 = python_operator(stypy.reporting.localization.Localization(__file__, 2603, 27), '+', r_comp_271140, int_271141)
    
    # Processing the call keyword arguments (line 2603)
    kwargs_271143 = {}
    
    # Obtaining the type of the subscript
    int_271135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 17), 'int')
    # Getting the type of 'update_order' (line 2603)
    update_order_271136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2603)
    getitem___271137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2603, 4), update_order_271136, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2603)
    subscript_call_result_271138 = invoke(stypy.reporting.localization.Localization(__file__, 2603, 4), getitem___271137, int_271135)
    
    # Obtaining the member 'extend' of a type (line 2603)
    extend_271139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2603, 4), subscript_call_result_271138, 'extend')
    # Calling extend(args, kwargs) (line 2603)
    extend_call_result_271144 = invoke(stypy.reporting.localization.Localization(__file__, 2603, 4), extend_271139, *[result_add_271142], **kwargs_271143)
    
    
    # Assigning a Call to a Name (line 2605):
    
    # Assigning a Call to a Name (line 2605):
    
    # Call to arange(...): (line 2605)
    # Processing the call arguments (line 2605)
    int_271147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2605, 20), 'int')
    # Getting the type of 'hnb' (line 2605)
    hnb_271148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 23), 'hnb', False)
    # Getting the type of 'nb_real' (line 2605)
    nb_real_271149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 27), 'nb_real', False)
    int_271150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2605, 37), 'int')
    # Applying the binary operator '%' (line 2605)
    result_mod_271151 = python_operator(stypy.reporting.localization.Localization(__file__, 2605, 27), '%', nb_real_271149, int_271150)
    
    # Applying the binary operator '+' (line 2605)
    result_add_271152 = python_operator(stypy.reporting.localization.Localization(__file__, 2605, 23), '+', hnb_271148, result_mod_271151)
    
    # Processing the call keyword arguments (line 2605)
    kwargs_271153 = {}
    # Getting the type of 'np' (line 2605)
    np_271145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2605, 10), 'np', False)
    # Obtaining the member 'arange' of a type (line 2605)
    arange_271146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2605, 10), np_271145, 'arange')
    # Calling arange(args, kwargs) (line 2605)
    arange_call_result_271154 = invoke(stypy.reporting.localization.Localization(__file__, 2605, 10), arange_271146, *[int_271147, result_add_271152], **kwargs_271153)
    
    # Assigning a type to the variable 'r_j' (line 2605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2605, 4), 'r_j', arange_call_result_271154)
    
    # Getting the type of 'r_j' (line 2606)
    r_j_271155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 13), 'r_j')
    # Testing the type of a for loop iterable (line 2606)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2606, 4), r_j_271155)
    # Getting the type of the for loop variable (line 2606)
    for_loop_var_271156 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2606, 4), r_j_271155)
    # Assigning a type to the variable 'j' (line 2606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2606, 4), 'j', for_loop_var_271156)
    # SSA begins for a for statement (line 2606)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 2607)
    # Processing the call arguments (line 2607)
    int_271158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2607, 23), 'int')
    # Getting the type of 'hnb' (line 2607)
    hnb_271159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 26), 'hnb', False)
    int_271160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2607, 30), 'int')
    # Applying the binary operator '+' (line 2607)
    result_add_271161 = python_operator(stypy.reporting.localization.Localization(__file__, 2607, 26), '+', hnb_271159, int_271160)
    
    # Processing the call keyword arguments (line 2607)
    kwargs_271162 = {}
    # Getting the type of 'range' (line 2607)
    range_271157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2607, 17), 'range', False)
    # Calling range(args, kwargs) (line 2607)
    range_call_result_271163 = invoke(stypy.reporting.localization.Localization(__file__, 2607, 17), range_271157, *[int_271158, result_add_271161], **kwargs_271162)
    
    # Testing the type of a for loop iterable (line 2607)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2607, 8), range_call_result_271163)
    # Getting the type of the for loop variable (line 2607)
    for_loop_var_271164 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2607, 8), range_call_result_271163)
    # Assigning a type to the variable 'i' (line 2607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2607, 8), 'i', for_loop_var_271164)
    # SSA begins for a for statement (line 2607)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 2608)
    # Processing the call arguments (line 2608)
    # Getting the type of 'i' (line 2608)
    i_271170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 35), 'i', False)
    # Processing the call keyword arguments (line 2608)
    kwargs_271171 = {}
    
    # Obtaining the type of the subscript
    int_271165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2608, 25), 'int')
    # Getting the type of 'update_order' (line 2608)
    update_order_271166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 12), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2608)
    getitem___271167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 12), update_order_271166, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2608)
    subscript_call_result_271168 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 12), getitem___271167, int_271165)
    
    # Obtaining the member 'append' of a type (line 2608)
    append_271169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 12), subscript_call_result_271168, 'append')
    # Calling append(args, kwargs) (line 2608)
    append_call_result_271172 = invoke(stypy.reporting.localization.Localization(__file__, 2608, 12), append_271169, *[i_271170], **kwargs_271171)
    
    
    # Call to append(...): (line 2609)
    # Processing the call arguments (line 2609)
    # Getting the type of 'i' (line 2609)
    i_271178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 35), 'i', False)
    # Getting the type of 'j' (line 2609)
    j_271179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 37), 'j', False)
    # Applying the binary operator '+' (line 2609)
    result_add_271180 = python_operator(stypy.reporting.localization.Localization(__file__, 2609, 35), '+', i_271178, j_271179)
    
    # Processing the call keyword arguments (line 2609)
    kwargs_271181 = {}
    
    # Obtaining the type of the subscript
    int_271173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2609, 25), 'int')
    # Getting the type of 'update_order' (line 2609)
    update_order_271174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2609, 12), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2609)
    getitem___271175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2609, 12), update_order_271174, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2609)
    subscript_call_result_271176 = invoke(stypy.reporting.localization.Localization(__file__, 2609, 12), getitem___271175, int_271173)
    
    # Obtaining the member 'append' of a type (line 2609)
    append_271177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2609, 12), subscript_call_result_271176, 'append')
    # Calling append(args, kwargs) (line 2609)
    append_call_result_271182 = invoke(stypy.reporting.localization.Localization(__file__, 2609, 12), append_271177, *[result_add_271180], **kwargs_271181)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'hnb' (line 2611)
    hnb_271183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 7), 'hnb')
    int_271184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2611, 14), 'int')
    # Applying the binary operator '==' (line 2611)
    result_eq_271185 = python_operator(stypy.reporting.localization.Localization(__file__, 2611, 7), '==', hnb_271183, int_271184)
    
    
    # Call to isreal(...): (line 2611)
    # Processing the call arguments (line 2611)
    
    # Obtaining the type of the subscript
    int_271188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2611, 36), 'int')
    # Getting the type of 'poles' (line 2611)
    poles_271189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 30), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2611)
    getitem___271190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2611, 30), poles_271189, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2611)
    subscript_call_result_271191 = invoke(stypy.reporting.localization.Localization(__file__, 2611, 30), getitem___271190, int_271188)
    
    # Processing the call keyword arguments (line 2611)
    kwargs_271192 = {}
    # Getting the type of 'np' (line 2611)
    np_271186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2611, 20), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2611)
    isreal_271187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2611, 20), np_271186, 'isreal')
    # Calling isreal(args, kwargs) (line 2611)
    isreal_call_result_271193 = invoke(stypy.reporting.localization.Localization(__file__, 2611, 20), isreal_271187, *[subscript_call_result_271191], **kwargs_271192)
    
    # Applying the binary operator 'and' (line 2611)
    result_and_keyword_271194 = python_operator(stypy.reporting.localization.Localization(__file__, 2611, 7), 'and', result_eq_271185, isreal_call_result_271193)
    
    # Testing the type of an if condition (line 2611)
    if_condition_271195 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2611, 4), result_and_keyword_271194)
    # Assigning a type to the variable 'if_condition_271195' (line 2611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2611, 4), 'if_condition_271195', if_condition_271195)
    # SSA begins for if statement (line 2611)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2612)
    # Processing the call arguments (line 2612)
    int_271201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2612, 31), 'int')
    # Processing the call keyword arguments (line 2612)
    kwargs_271202 = {}
    
    # Obtaining the type of the subscript
    int_271196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2612, 21), 'int')
    # Getting the type of 'update_order' (line 2612)
    update_order_271197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2612, 8), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2612)
    getitem___271198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2612, 8), update_order_271197, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2612)
    subscript_call_result_271199 = invoke(stypy.reporting.localization.Localization(__file__, 2612, 8), getitem___271198, int_271196)
    
    # Obtaining the member 'append' of a type (line 2612)
    append_271200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2612, 8), subscript_call_result_271199, 'append')
    # Calling append(args, kwargs) (line 2612)
    append_call_result_271203 = invoke(stypy.reporting.localization.Localization(__file__, 2612, 8), append_271200, *[int_271201], **kwargs_271202)
    
    
    # Call to append(...): (line 2613)
    # Processing the call arguments (line 2613)
    int_271209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2613, 31), 'int')
    # Processing the call keyword arguments (line 2613)
    kwargs_271210 = {}
    
    # Obtaining the type of the subscript
    int_271204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2613, 21), 'int')
    # Getting the type of 'update_order' (line 2613)
    update_order_271205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2613, 8), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2613)
    getitem___271206 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2613, 8), update_order_271205, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2613)
    subscript_call_result_271207 = invoke(stypy.reporting.localization.Localization(__file__, 2613, 8), getitem___271206, int_271204)
    
    # Obtaining the member 'append' of a type (line 2613)
    append_271208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2613, 8), subscript_call_result_271207, 'append')
    # Calling append(args, kwargs) (line 2613)
    append_call_result_271211 = invoke(stypy.reporting.localization.Localization(__file__, 2613, 8), append_271208, *[int_271209], **kwargs_271210)
    
    # SSA join for if statement (line 2611)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to extend(...): (line 2614)
    # Processing the call arguments (line 2614)
    # Getting the type of 'r_comp' (line 2614)
    r_comp_271217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 27), 'r_comp', False)
    # Processing the call keyword arguments (line 2614)
    kwargs_271218 = {}
    
    # Obtaining the type of the subscript
    int_271212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2614, 17), 'int')
    # Getting the type of 'update_order' (line 2614)
    update_order_271213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2614)
    getitem___271214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2614, 4), update_order_271213, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2614)
    subscript_call_result_271215 = invoke(stypy.reporting.localization.Localization(__file__, 2614, 4), getitem___271214, int_271212)
    
    # Obtaining the member 'extend' of a type (line 2614)
    extend_271216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2614, 4), subscript_call_result_271215, 'extend')
    # Calling extend(args, kwargs) (line 2614)
    extend_call_result_271219 = invoke(stypy.reporting.localization.Localization(__file__, 2614, 4), extend_271216, *[r_comp_271217], **kwargs_271218)
    
    
    # Call to extend(...): (line 2615)
    # Processing the call arguments (line 2615)
    # Getting the type of 'r_comp' (line 2615)
    r_comp_271225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2615, 27), 'r_comp', False)
    int_271226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2615, 34), 'int')
    # Applying the binary operator '+' (line 2615)
    result_add_271227 = python_operator(stypy.reporting.localization.Localization(__file__, 2615, 27), '+', r_comp_271225, int_271226)
    
    # Processing the call keyword arguments (line 2615)
    kwargs_271228 = {}
    
    # Obtaining the type of the subscript
    int_271220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2615, 17), 'int')
    # Getting the type of 'update_order' (line 2615)
    update_order_271221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2615, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2615)
    getitem___271222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2615, 4), update_order_271221, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2615)
    subscript_call_result_271223 = invoke(stypy.reporting.localization.Localization(__file__, 2615, 4), getitem___271222, int_271220)
    
    # Obtaining the member 'extend' of a type (line 2615)
    extend_271224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2615, 4), subscript_call_result_271223, 'extend')
    # Calling extend(args, kwargs) (line 2615)
    extend_call_result_271229 = invoke(stypy.reporting.localization.Localization(__file__, 2615, 4), extend_271224, *[result_add_271227], **kwargs_271228)
    
    
    # Assigning a Call to a Name (line 2617):
    
    # Assigning a Call to a Name (line 2617):
    
    # Call to arange(...): (line 2617)
    # Processing the call arguments (line 2617)
    int_271232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2617, 20), 'int')
    # Getting the type of 'hnb' (line 2617)
    hnb_271233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 23), 'hnb', False)
    # Getting the type of 'nb_real' (line 2617)
    nb_real_271234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 27), 'nb_real', False)
    int_271235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2617, 37), 'int')
    # Applying the binary operator '%' (line 2617)
    result_mod_271236 = python_operator(stypy.reporting.localization.Localization(__file__, 2617, 27), '%', nb_real_271234, int_271235)
    
    # Applying the binary operator '+' (line 2617)
    result_add_271237 = python_operator(stypy.reporting.localization.Localization(__file__, 2617, 23), '+', hnb_271233, result_mod_271236)
    
    # Processing the call keyword arguments (line 2617)
    kwargs_271238 = {}
    # Getting the type of 'np' (line 2617)
    np_271230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 10), 'np', False)
    # Obtaining the member 'arange' of a type (line 2617)
    arange_271231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2617, 10), np_271230, 'arange')
    # Calling arange(args, kwargs) (line 2617)
    arange_call_result_271239 = invoke(stypy.reporting.localization.Localization(__file__, 2617, 10), arange_271231, *[int_271232, result_add_271237], **kwargs_271238)
    
    # Assigning a type to the variable 'r_j' (line 2617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2617, 4), 'r_j', arange_call_result_271239)
    
    # Getting the type of 'r_j' (line 2618)
    r_j_271240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 13), 'r_j')
    # Testing the type of a for loop iterable (line 2618)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2618, 4), r_j_271240)
    # Getting the type of the for loop variable (line 2618)
    for_loop_var_271241 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2618, 4), r_j_271240)
    # Assigning a type to the variable 'j' (line 2618)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2618, 4), 'j', for_loop_var_271241)
    # SSA begins for a for statement (line 2618)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 2619)
    # Processing the call arguments (line 2619)
    # Getting the type of 'hnb' (line 2619)
    hnb_271243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 23), 'hnb', False)
    int_271244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2619, 27), 'int')
    # Applying the binary operator '+' (line 2619)
    result_add_271245 = python_operator(stypy.reporting.localization.Localization(__file__, 2619, 23), '+', hnb_271243, int_271244)
    
    # Getting the type of 'nb_real' (line 2619)
    nb_real_271246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 30), 'nb_real', False)
    int_271247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2619, 38), 'int')
    # Applying the binary operator '+' (line 2619)
    result_add_271248 = python_operator(stypy.reporting.localization.Localization(__file__, 2619, 30), '+', nb_real_271246, int_271247)
    
    # Processing the call keyword arguments (line 2619)
    kwargs_271249 = {}
    # Getting the type of 'range' (line 2619)
    range_271242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 17), 'range', False)
    # Calling range(args, kwargs) (line 2619)
    range_call_result_271250 = invoke(stypy.reporting.localization.Localization(__file__, 2619, 17), range_271242, *[result_add_271245, result_add_271248], **kwargs_271249)
    
    # Testing the type of a for loop iterable (line 2619)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2619, 8), range_call_result_271250)
    # Getting the type of the for loop variable (line 2619)
    for_loop_var_271251 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2619, 8), range_call_result_271250)
    # Assigning a type to the variable 'i' (line 2619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2619, 8), 'i', for_loop_var_271251)
    # SSA begins for a for statement (line 2619)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 2620):
    
    # Assigning a BinOp to a Name (line 2620):
    # Getting the type of 'i' (line 2620)
    i_271252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 20), 'i')
    # Getting the type of 'j' (line 2620)
    j_271253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 22), 'j')
    # Applying the binary operator '+' (line 2620)
    result_add_271254 = python_operator(stypy.reporting.localization.Localization(__file__, 2620, 20), '+', i_271252, j_271253)
    
    # Assigning a type to the variable 'idx_1' (line 2620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2620, 12), 'idx_1', result_add_271254)
    
    
    # Getting the type of 'idx_1' (line 2621)
    idx_1_271255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 15), 'idx_1')
    # Getting the type of 'nb_real' (line 2621)
    nb_real_271256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 23), 'nb_real')
    # Applying the binary operator '>' (line 2621)
    result_gt_271257 = python_operator(stypy.reporting.localization.Localization(__file__, 2621, 15), '>', idx_1_271255, nb_real_271256)
    
    # Testing the type of an if condition (line 2621)
    if_condition_271258 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2621, 12), result_gt_271257)
    # Assigning a type to the variable 'if_condition_271258' (line 2621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2621, 12), 'if_condition_271258', if_condition_271258)
    # SSA begins for if statement (line 2621)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2622):
    
    # Assigning a BinOp to a Name (line 2622):
    # Getting the type of 'i' (line 2622)
    i_271259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 24), 'i')
    # Getting the type of 'j' (line 2622)
    j_271260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 26), 'j')
    # Applying the binary operator '+' (line 2622)
    result_add_271261 = python_operator(stypy.reporting.localization.Localization(__file__, 2622, 24), '+', i_271259, j_271260)
    
    # Getting the type of 'nb_real' (line 2622)
    nb_real_271262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 28), 'nb_real')
    # Applying the binary operator '-' (line 2622)
    result_sub_271263 = python_operator(stypy.reporting.localization.Localization(__file__, 2622, 27), '-', result_add_271261, nb_real_271262)
    
    # Assigning a type to the variable 'idx_1' (line 2622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2622, 16), 'idx_1', result_sub_271263)
    # SSA join for if statement (line 2621)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 2623)
    # Processing the call arguments (line 2623)
    # Getting the type of 'i' (line 2623)
    i_271269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 35), 'i', False)
    # Processing the call keyword arguments (line 2623)
    kwargs_271270 = {}
    
    # Obtaining the type of the subscript
    int_271264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2623, 25), 'int')
    # Getting the type of 'update_order' (line 2623)
    update_order_271265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 12), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2623)
    getitem___271266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2623, 12), update_order_271265, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2623)
    subscript_call_result_271267 = invoke(stypy.reporting.localization.Localization(__file__, 2623, 12), getitem___271266, int_271264)
    
    # Obtaining the member 'append' of a type (line 2623)
    append_271268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2623, 12), subscript_call_result_271267, 'append')
    # Calling append(args, kwargs) (line 2623)
    append_call_result_271271 = invoke(stypy.reporting.localization.Localization(__file__, 2623, 12), append_271268, *[i_271269], **kwargs_271270)
    
    
    # Call to append(...): (line 2624)
    # Processing the call arguments (line 2624)
    # Getting the type of 'idx_1' (line 2624)
    idx_1_271277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 35), 'idx_1', False)
    # Processing the call keyword arguments (line 2624)
    kwargs_271278 = {}
    
    # Obtaining the type of the subscript
    int_271272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2624, 25), 'int')
    # Getting the type of 'update_order' (line 2624)
    update_order_271273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 12), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2624)
    getitem___271274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2624, 12), update_order_271273, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2624)
    subscript_call_result_271275 = invoke(stypy.reporting.localization.Localization(__file__, 2624, 12), getitem___271274, int_271272)
    
    # Obtaining the member 'append' of a type (line 2624)
    append_271276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2624, 12), subscript_call_result_271275, 'append')
    # Calling append(args, kwargs) (line 2624)
    append_call_result_271279 = invoke(stypy.reporting.localization.Localization(__file__, 2624, 12), append_271276, *[idx_1_271277], **kwargs_271278)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'hnb' (line 2626)
    hnb_271280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 7), 'hnb')
    int_271281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2626, 14), 'int')
    # Applying the binary operator '==' (line 2626)
    result_eq_271282 = python_operator(stypy.reporting.localization.Localization(__file__, 2626, 7), '==', hnb_271280, int_271281)
    
    
    # Call to isreal(...): (line 2626)
    # Processing the call arguments (line 2626)
    
    # Obtaining the type of the subscript
    int_271285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2626, 36), 'int')
    # Getting the type of 'poles' (line 2626)
    poles_271286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 30), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2626)
    getitem___271287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2626, 30), poles_271286, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2626)
    subscript_call_result_271288 = invoke(stypy.reporting.localization.Localization(__file__, 2626, 30), getitem___271287, int_271285)
    
    # Processing the call keyword arguments (line 2626)
    kwargs_271289 = {}
    # Getting the type of 'np' (line 2626)
    np_271283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 20), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2626)
    isreal_271284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2626, 20), np_271283, 'isreal')
    # Calling isreal(args, kwargs) (line 2626)
    isreal_call_result_271290 = invoke(stypy.reporting.localization.Localization(__file__, 2626, 20), isreal_271284, *[subscript_call_result_271288], **kwargs_271289)
    
    # Applying the binary operator 'and' (line 2626)
    result_and_keyword_271291 = python_operator(stypy.reporting.localization.Localization(__file__, 2626, 7), 'and', result_eq_271282, isreal_call_result_271290)
    
    # Testing the type of an if condition (line 2626)
    if_condition_271292 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2626, 4), result_and_keyword_271291)
    # Assigning a type to the variable 'if_condition_271292' (line 2626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2626, 4), 'if_condition_271292', if_condition_271292)
    # SSA begins for if statement (line 2626)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2627)
    # Processing the call arguments (line 2627)
    int_271298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2627, 31), 'int')
    # Processing the call keyword arguments (line 2627)
    kwargs_271299 = {}
    
    # Obtaining the type of the subscript
    int_271293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2627, 21), 'int')
    # Getting the type of 'update_order' (line 2627)
    update_order_271294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 8), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2627)
    getitem___271295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2627, 8), update_order_271294, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2627)
    subscript_call_result_271296 = invoke(stypy.reporting.localization.Localization(__file__, 2627, 8), getitem___271295, int_271293)
    
    # Obtaining the member 'append' of a type (line 2627)
    append_271297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2627, 8), subscript_call_result_271296, 'append')
    # Calling append(args, kwargs) (line 2627)
    append_call_result_271300 = invoke(stypy.reporting.localization.Localization(__file__, 2627, 8), append_271297, *[int_271298], **kwargs_271299)
    
    
    # Call to append(...): (line 2628)
    # Processing the call arguments (line 2628)
    int_271306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2628, 31), 'int')
    # Processing the call keyword arguments (line 2628)
    kwargs_271307 = {}
    
    # Obtaining the type of the subscript
    int_271301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2628, 21), 'int')
    # Getting the type of 'update_order' (line 2628)
    update_order_271302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 8), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2628)
    getitem___271303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2628, 8), update_order_271302, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2628)
    subscript_call_result_271304 = invoke(stypy.reporting.localization.Localization(__file__, 2628, 8), getitem___271303, int_271301)
    
    # Obtaining the member 'append' of a type (line 2628)
    append_271305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2628, 8), subscript_call_result_271304, 'append')
    # Calling append(args, kwargs) (line 2628)
    append_call_result_271308 = invoke(stypy.reporting.localization.Localization(__file__, 2628, 8), append_271305, *[int_271306], **kwargs_271307)
    
    # SSA join for if statement (line 2626)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to extend(...): (line 2629)
    # Processing the call arguments (line 2629)
    # Getting the type of 'r_comp' (line 2629)
    r_comp_271314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 27), 'r_comp', False)
    # Processing the call keyword arguments (line 2629)
    kwargs_271315 = {}
    
    # Obtaining the type of the subscript
    int_271309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 17), 'int')
    # Getting the type of 'update_order' (line 2629)
    update_order_271310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2629)
    getitem___271311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 4), update_order_271310, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2629)
    subscript_call_result_271312 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 4), getitem___271311, int_271309)
    
    # Obtaining the member 'extend' of a type (line 2629)
    extend_271313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 4), subscript_call_result_271312, 'extend')
    # Calling extend(args, kwargs) (line 2629)
    extend_call_result_271316 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 4), extend_271313, *[r_comp_271314], **kwargs_271315)
    
    
    # Call to extend(...): (line 2630)
    # Processing the call arguments (line 2630)
    # Getting the type of 'r_comp' (line 2630)
    r_comp_271322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 27), 'r_comp', False)
    int_271323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2630, 34), 'int')
    # Applying the binary operator '+' (line 2630)
    result_add_271324 = python_operator(stypy.reporting.localization.Localization(__file__, 2630, 27), '+', r_comp_271322, int_271323)
    
    # Processing the call keyword arguments (line 2630)
    kwargs_271325 = {}
    
    # Obtaining the type of the subscript
    int_271317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2630, 17), 'int')
    # Getting the type of 'update_order' (line 2630)
    update_order_271318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2630)
    getitem___271319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2630, 4), update_order_271318, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2630)
    subscript_call_result_271320 = invoke(stypy.reporting.localization.Localization(__file__, 2630, 4), getitem___271319, int_271317)
    
    # Obtaining the member 'extend' of a type (line 2630)
    extend_271321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2630, 4), subscript_call_result_271320, 'extend')
    # Calling extend(args, kwargs) (line 2630)
    extend_call_result_271326 = invoke(stypy.reporting.localization.Localization(__file__, 2630, 4), extend_271321, *[result_add_271324], **kwargs_271325)
    
    
    
    # Call to range(...): (line 2632)
    # Processing the call arguments (line 2632)
    int_271328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2632, 19), 'int')
    # Getting the type of 'hnb' (line 2632)
    hnb_271329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 22), 'hnb', False)
    int_271330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2632, 26), 'int')
    # Applying the binary operator '+' (line 2632)
    result_add_271331 = python_operator(stypy.reporting.localization.Localization(__file__, 2632, 22), '+', hnb_271329, int_271330)
    
    # Processing the call keyword arguments (line 2632)
    kwargs_271332 = {}
    # Getting the type of 'range' (line 2632)
    range_271327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 13), 'range', False)
    # Calling range(args, kwargs) (line 2632)
    range_call_result_271333 = invoke(stypy.reporting.localization.Localization(__file__, 2632, 13), range_271327, *[int_271328, result_add_271331], **kwargs_271332)
    
    # Testing the type of a for loop iterable (line 2632)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2632, 4), range_call_result_271333)
    # Getting the type of the for loop variable (line 2632)
    for_loop_var_271334 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2632, 4), range_call_result_271333)
    # Assigning a type to the variable 'i' (line 2632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2632, 4), 'i', for_loop_var_271334)
    # SSA begins for a for statement (line 2632)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 2633)
    # Processing the call arguments (line 2633)
    # Getting the type of 'i' (line 2633)
    i_271340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 31), 'i', False)
    # Processing the call keyword arguments (line 2633)
    kwargs_271341 = {}
    
    # Obtaining the type of the subscript
    int_271335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2633, 21), 'int')
    # Getting the type of 'update_order' (line 2633)
    update_order_271336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 8), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2633)
    getitem___271337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2633, 8), update_order_271336, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2633)
    subscript_call_result_271338 = invoke(stypy.reporting.localization.Localization(__file__, 2633, 8), getitem___271337, int_271335)
    
    # Obtaining the member 'append' of a type (line 2633)
    append_271339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2633, 8), subscript_call_result_271338, 'append')
    # Calling append(args, kwargs) (line 2633)
    append_call_result_271342 = invoke(stypy.reporting.localization.Localization(__file__, 2633, 8), append_271339, *[i_271340], **kwargs_271341)
    
    
    # Call to append(...): (line 2634)
    # Processing the call arguments (line 2634)
    # Getting the type of 'i' (line 2634)
    i_271348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 31), 'i', False)
    # Getting the type of 'hnb' (line 2634)
    hnb_271349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 33), 'hnb', False)
    # Applying the binary operator '+' (line 2634)
    result_add_271350 = python_operator(stypy.reporting.localization.Localization(__file__, 2634, 31), '+', i_271348, hnb_271349)
    
    # Processing the call keyword arguments (line 2634)
    kwargs_271351 = {}
    
    # Obtaining the type of the subscript
    int_271343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2634, 21), 'int')
    # Getting the type of 'update_order' (line 2634)
    update_order_271344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 8), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2634)
    getitem___271345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2634, 8), update_order_271344, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2634)
    subscript_call_result_271346 = invoke(stypy.reporting.localization.Localization(__file__, 2634, 8), getitem___271345, int_271343)
    
    # Obtaining the member 'append' of a type (line 2634)
    append_271347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2634, 8), subscript_call_result_271346, 'append')
    # Calling append(args, kwargs) (line 2634)
    append_call_result_271352 = invoke(stypy.reporting.localization.Localization(__file__, 2634, 8), append_271347, *[result_add_271350], **kwargs_271351)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'hnb' (line 2636)
    hnb_271353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 7), 'hnb')
    int_271354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2636, 14), 'int')
    # Applying the binary operator '==' (line 2636)
    result_eq_271355 = python_operator(stypy.reporting.localization.Localization(__file__, 2636, 7), '==', hnb_271353, int_271354)
    
    
    # Call to isreal(...): (line 2636)
    # Processing the call arguments (line 2636)
    
    # Obtaining the type of the subscript
    int_271358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2636, 36), 'int')
    # Getting the type of 'poles' (line 2636)
    poles_271359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 30), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2636)
    getitem___271360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 30), poles_271359, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2636)
    subscript_call_result_271361 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 30), getitem___271360, int_271358)
    
    # Processing the call keyword arguments (line 2636)
    kwargs_271362 = {}
    # Getting the type of 'np' (line 2636)
    np_271356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 20), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2636)
    isreal_271357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2636, 20), np_271356, 'isreal')
    # Calling isreal(args, kwargs) (line 2636)
    isreal_call_result_271363 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 20), isreal_271357, *[subscript_call_result_271361], **kwargs_271362)
    
    # Applying the binary operator 'and' (line 2636)
    result_and_keyword_271364 = python_operator(stypy.reporting.localization.Localization(__file__, 2636, 7), 'and', result_eq_271355, isreal_call_result_271363)
    
    # Testing the type of an if condition (line 2636)
    if_condition_271365 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2636, 4), result_and_keyword_271364)
    # Assigning a type to the variable 'if_condition_271365' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'if_condition_271365', if_condition_271365)
    # SSA begins for if statement (line 2636)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2637)
    # Processing the call arguments (line 2637)
    int_271371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2637, 31), 'int')
    # Processing the call keyword arguments (line 2637)
    kwargs_271372 = {}
    
    # Obtaining the type of the subscript
    int_271366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2637, 21), 'int')
    # Getting the type of 'update_order' (line 2637)
    update_order_271367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 8), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2637)
    getitem___271368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2637, 8), update_order_271367, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2637)
    subscript_call_result_271369 = invoke(stypy.reporting.localization.Localization(__file__, 2637, 8), getitem___271368, int_271366)
    
    # Obtaining the member 'append' of a type (line 2637)
    append_271370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2637, 8), subscript_call_result_271369, 'append')
    # Calling append(args, kwargs) (line 2637)
    append_call_result_271373 = invoke(stypy.reporting.localization.Localization(__file__, 2637, 8), append_271370, *[int_271371], **kwargs_271372)
    
    
    # Call to append(...): (line 2638)
    # Processing the call arguments (line 2638)
    int_271379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, 31), 'int')
    # Processing the call keyword arguments (line 2638)
    kwargs_271380 = {}
    
    # Obtaining the type of the subscript
    int_271374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, 21), 'int')
    # Getting the type of 'update_order' (line 2638)
    update_order_271375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 8), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2638)
    getitem___271376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2638, 8), update_order_271375, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2638)
    subscript_call_result_271377 = invoke(stypy.reporting.localization.Localization(__file__, 2638, 8), getitem___271376, int_271374)
    
    # Obtaining the member 'append' of a type (line 2638)
    append_271378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2638, 8), subscript_call_result_271377, 'append')
    # Calling append(args, kwargs) (line 2638)
    append_call_result_271381 = invoke(stypy.reporting.localization.Localization(__file__, 2638, 8), append_271378, *[int_271379], **kwargs_271380)
    
    # SSA join for if statement (line 2636)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to extend(...): (line 2639)
    # Processing the call arguments (line 2639)
    # Getting the type of 'r_comp' (line 2639)
    r_comp_271387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 27), 'r_comp', False)
    # Processing the call keyword arguments (line 2639)
    kwargs_271388 = {}
    
    # Obtaining the type of the subscript
    int_271382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2639, 17), 'int')
    # Getting the type of 'update_order' (line 2639)
    update_order_271383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2639)
    getitem___271384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2639, 4), update_order_271383, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2639)
    subscript_call_result_271385 = invoke(stypy.reporting.localization.Localization(__file__, 2639, 4), getitem___271384, int_271382)
    
    # Obtaining the member 'extend' of a type (line 2639)
    extend_271386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2639, 4), subscript_call_result_271385, 'extend')
    # Calling extend(args, kwargs) (line 2639)
    extend_call_result_271389 = invoke(stypy.reporting.localization.Localization(__file__, 2639, 4), extend_271386, *[r_comp_271387], **kwargs_271388)
    
    
    # Call to extend(...): (line 2640)
    # Processing the call arguments (line 2640)
    # Getting the type of 'r_comp' (line 2640)
    r_comp_271395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 27), 'r_comp', False)
    int_271396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2640, 34), 'int')
    # Applying the binary operator '+' (line 2640)
    result_add_271397 = python_operator(stypy.reporting.localization.Localization(__file__, 2640, 27), '+', r_comp_271395, int_271396)
    
    # Processing the call keyword arguments (line 2640)
    kwargs_271398 = {}
    
    # Obtaining the type of the subscript
    int_271390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2640, 17), 'int')
    # Getting the type of 'update_order' (line 2640)
    update_order_271391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 4), 'update_order', False)
    # Obtaining the member '__getitem__' of a type (line 2640)
    getitem___271392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 4), update_order_271391, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2640)
    subscript_call_result_271393 = invoke(stypy.reporting.localization.Localization(__file__, 2640, 4), getitem___271392, int_271390)
    
    # Obtaining the member 'extend' of a type (line 2640)
    extend_271394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 4), subscript_call_result_271393, 'extend')
    # Calling extend(args, kwargs) (line 2640)
    extend_call_result_271399 = invoke(stypy.reporting.localization.Localization(__file__, 2640, 4), extend_271394, *[result_add_271397], **kwargs_271398)
    
    
    # Assigning a BinOp to a Name (line 2642):
    
    # Assigning a BinOp to a Name (line 2642):
    
    # Call to array(...): (line 2642)
    # Processing the call arguments (line 2642)
    # Getting the type of 'update_order' (line 2642)
    update_order_271402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 28), 'update_order', False)
    # Processing the call keyword arguments (line 2642)
    kwargs_271403 = {}
    # Getting the type of 'np' (line 2642)
    np_271400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 19), 'np', False)
    # Obtaining the member 'array' of a type (line 2642)
    array_271401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2642, 19), np_271400, 'array')
    # Calling array(args, kwargs) (line 2642)
    array_call_result_271404 = invoke(stypy.reporting.localization.Localization(__file__, 2642, 19), array_271401, *[update_order_271402], **kwargs_271403)
    
    # Obtaining the member 'T' of a type (line 2642)
    T_271405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2642, 19), array_call_result_271404, 'T')
    int_271406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2642, 44), 'int')
    # Applying the binary operator '-' (line 2642)
    result_sub_271407 = python_operator(stypy.reporting.localization.Localization(__file__, 2642, 19), '-', T_271405, int_271406)
    
    # Assigning a type to the variable 'update_order' (line 2642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2642, 4), 'update_order', result_sub_271407)
    
    # Assigning a Name to a Name (line 2643):
    
    # Assigning a Name to a Name (line 2643):
    # Getting the type of 'False' (line 2643)
    False_271408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 11), 'False')
    # Assigning a type to the variable 'stop' (line 2643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2643, 4), 'stop', False_271408)
    
    # Assigning a Num to a Name (line 2644):
    
    # Assigning a Num to a Name (line 2644):
    int_271409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2644, 13), 'int')
    # Assigning a type to the variable 'nb_try' (line 2644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2644, 4), 'nb_try', int_271409)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'nb_try' (line 2645)
    nb_try_271410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 10), 'nb_try')
    # Getting the type of 'maxiter' (line 2645)
    maxiter_271411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 19), 'maxiter')
    # Applying the binary operator '<' (line 2645)
    result_lt_271412 = python_operator(stypy.reporting.localization.Localization(__file__, 2645, 10), '<', nb_try_271410, maxiter_271411)
    
    
    # Getting the type of 'stop' (line 2645)
    stop_271413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 35), 'stop')
    # Applying the 'not' unary operator (line 2645)
    result_not__271414 = python_operator(stypy.reporting.localization.Localization(__file__, 2645, 31), 'not', stop_271413)
    
    # Applying the binary operator 'and' (line 2645)
    result_and_keyword_271415 = python_operator(stypy.reporting.localization.Localization(__file__, 2645, 10), 'and', result_lt_271412, result_not__271414)
    
    # Testing the type of an if condition (line 2645)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2645, 4), result_and_keyword_271415)
    # SSA begins for while statement (line 2645)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Call to a Name (line 2646):
    
    # Assigning a Call to a Name (line 2646):
    
    # Call to abs(...): (line 2646)
    # Processing the call arguments (line 2646)
    
    # Call to det(...): (line 2646)
    # Processing the call arguments (line 2646)
    # Getting the type of 'transfer_matrix' (line 2646)
    transfer_matrix_271421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 52), 'transfer_matrix', False)
    # Processing the call keyword arguments (line 2646)
    kwargs_271422 = {}
    # Getting the type of 'np' (line 2646)
    np_271418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 38), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2646)
    linalg_271419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2646, 38), np_271418, 'linalg')
    # Obtaining the member 'det' of a type (line 2646)
    det_271420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2646, 38), linalg_271419, 'det')
    # Calling det(args, kwargs) (line 2646)
    det_call_result_271423 = invoke(stypy.reporting.localization.Localization(__file__, 2646, 38), det_271420, *[transfer_matrix_271421], **kwargs_271422)
    
    # Processing the call keyword arguments (line 2646)
    kwargs_271424 = {}
    # Getting the type of 'np' (line 2646)
    np_271416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 31), 'np', False)
    # Obtaining the member 'abs' of a type (line 2646)
    abs_271417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2646, 31), np_271416, 'abs')
    # Calling abs(args, kwargs) (line 2646)
    abs_call_result_271425 = invoke(stypy.reporting.localization.Localization(__file__, 2646, 31), abs_271417, *[det_call_result_271423], **kwargs_271424)
    
    # Assigning a type to the variable 'det_transfer_matrixb' (line 2646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2646, 8), 'det_transfer_matrixb', abs_call_result_271425)
    
    # Getting the type of 'update_order' (line 2647)
    update_order_271426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 20), 'update_order')
    # Testing the type of a for loop iterable (line 2647)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2647, 8), update_order_271426)
    # Getting the type of the for loop variable (line 2647)
    for_loop_var_271427 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2647, 8), update_order_271426)
    # Assigning a type to the variable 'i' (line 2647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2647, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2647, 8), for_loop_var_271427))
    # Assigning a type to the variable 'j' (line 2647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2647, 8), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2647, 8), for_loop_var_271427))
    # SSA begins for a for statement (line 2647)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'i' (line 2648)
    i_271428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 15), 'i')
    # Getting the type of 'j' (line 2648)
    j_271429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 20), 'j')
    # Applying the binary operator '==' (line 2648)
    result_eq_271430 = python_operator(stypy.reporting.localization.Localization(__file__, 2648, 15), '==', i_271428, j_271429)
    
    # Testing the type of an if condition (line 2648)
    if_condition_271431 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2648, 12), result_eq_271430)
    # Assigning a type to the variable 'if_condition_271431' (line 2648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2648, 12), 'if_condition_271431', if_condition_271431)
    # SSA begins for if statement (line 2648)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Evaluating assert statement condition
    
    # Getting the type of 'i' (line 2649)
    i_271432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 23), 'i')
    int_271433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2649, 28), 'int')
    # Applying the binary operator '==' (line 2649)
    result_eq_271434 = python_operator(stypy.reporting.localization.Localization(__file__, 2649, 23), '==', i_271432, int_271433)
    
    # Evaluating assert statement condition
    
    # Call to isreal(...): (line 2650)
    # Processing the call arguments (line 2650)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2650)
    i_271437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 39), 'i', False)
    # Getting the type of 'poles' (line 2650)
    poles_271438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 33), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2650)
    getitem___271439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 33), poles_271438, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2650)
    subscript_call_result_271440 = invoke(stypy.reporting.localization.Localization(__file__, 2650, 33), getitem___271439, i_271437)
    
    # Processing the call keyword arguments (line 2650)
    kwargs_271441 = {}
    # Getting the type of 'np' (line 2650)
    np_271435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 23), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2650)
    isreal_271436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 23), np_271435, 'isreal')
    # Calling isreal(args, kwargs) (line 2650)
    isreal_call_result_271442 = invoke(stypy.reporting.localization.Localization(__file__, 2650, 23), isreal_271436, *[subscript_call_result_271440], **kwargs_271441)
    
    
    # Call to _KNV0(...): (line 2651)
    # Processing the call arguments (line 2651)
    # Getting the type of 'B' (line 2651)
    B_271444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 22), 'B', False)
    # Getting the type of 'ker_pole' (line 2651)
    ker_pole_271445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 25), 'ker_pole', False)
    # Getting the type of 'transfer_matrix' (line 2651)
    transfer_matrix_271446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 35), 'transfer_matrix', False)
    # Getting the type of 'i' (line 2651)
    i_271447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 52), 'i', False)
    # Getting the type of 'poles' (line 2651)
    poles_271448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 55), 'poles', False)
    # Processing the call keyword arguments (line 2651)
    kwargs_271449 = {}
    # Getting the type of '_KNV0' (line 2651)
    _KNV0_271443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 16), '_KNV0', False)
    # Calling _KNV0(args, kwargs) (line 2651)
    _KNV0_call_result_271450 = invoke(stypy.reporting.localization.Localization(__file__, 2651, 16), _KNV0_271443, *[B_271444, ker_pole_271445, transfer_matrix_271446, i_271447, poles_271448], **kwargs_271449)
    
    # SSA branch for the else part of an if statement (line 2648)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2653):
    
    # Assigning a Call to a Name (line 2653):
    
    # Call to delete(...): (line 2653)
    # Processing the call arguments (line 2653)
    # Getting the type of 'transfer_matrix' (line 2653)
    transfer_matrix_271453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 52), 'transfer_matrix', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2653)
    tuple_271454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2653, 70), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2653)
    # Adding element type (line 2653)
    # Getting the type of 'i' (line 2653)
    i_271455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 70), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2653, 70), tuple_271454, i_271455)
    # Adding element type (line 2653)
    # Getting the type of 'j' (line 2653)
    j_271456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 73), 'j', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2653, 70), tuple_271454, j_271456)
    
    # Processing the call keyword arguments (line 2653)
    int_271457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2654, 57), 'int')
    keyword_271458 = int_271457
    kwargs_271459 = {'axis': keyword_271458}
    # Getting the type of 'np' (line 2653)
    np_271451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 42), 'np', False)
    # Obtaining the member 'delete' of a type (line 2653)
    delete_271452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2653, 42), np_271451, 'delete')
    # Calling delete(args, kwargs) (line 2653)
    delete_call_result_271460 = invoke(stypy.reporting.localization.Localization(__file__, 2653, 42), delete_271452, *[transfer_matrix_271453, tuple_271454], **kwargs_271459)
    
    # Assigning a type to the variable 'transfer_matrix_not_i_j' (line 2653)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2653, 16), 'transfer_matrix_not_i_j', delete_call_result_271460)
    
    # Assigning a Call to a Tuple (line 2660):
    
    # Assigning a Subscript to a Name (line 2660):
    
    # Obtaining the type of the subscript
    int_271461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 16), 'int')
    
    # Call to s_qr(...): (line 2660)
    # Processing the call arguments (line 2660)
    # Getting the type of 'transfer_matrix_not_i_j' (line 2660)
    transfer_matrix_not_i_j_271463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 28), 'transfer_matrix_not_i_j', False)
    # Processing the call keyword arguments (line 2660)
    str_271464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 58), 'str', 'full')
    keyword_271465 = str_271464
    kwargs_271466 = {'mode': keyword_271465}
    # Getting the type of 's_qr' (line 2660)
    s_qr_271462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 23), 's_qr', False)
    # Calling s_qr(args, kwargs) (line 2660)
    s_qr_call_result_271467 = invoke(stypy.reporting.localization.Localization(__file__, 2660, 23), s_qr_271462, *[transfer_matrix_not_i_j_271463], **kwargs_271466)
    
    # Obtaining the member '__getitem__' of a type (line 2660)
    getitem___271468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2660, 16), s_qr_call_result_271467, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2660)
    subscript_call_result_271469 = invoke(stypy.reporting.localization.Localization(__file__, 2660, 16), getitem___271468, int_271461)
    
    # Assigning a type to the variable 'tuple_var_assignment_267145' (line 2660)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2660, 16), 'tuple_var_assignment_267145', subscript_call_result_271469)
    
    # Assigning a Subscript to a Name (line 2660):
    
    # Obtaining the type of the subscript
    int_271470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 16), 'int')
    
    # Call to s_qr(...): (line 2660)
    # Processing the call arguments (line 2660)
    # Getting the type of 'transfer_matrix_not_i_j' (line 2660)
    transfer_matrix_not_i_j_271472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 28), 'transfer_matrix_not_i_j', False)
    # Processing the call keyword arguments (line 2660)
    str_271473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, 58), 'str', 'full')
    keyword_271474 = str_271473
    kwargs_271475 = {'mode': keyword_271474}
    # Getting the type of 's_qr' (line 2660)
    s_qr_271471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 23), 's_qr', False)
    # Calling s_qr(args, kwargs) (line 2660)
    s_qr_call_result_271476 = invoke(stypy.reporting.localization.Localization(__file__, 2660, 23), s_qr_271471, *[transfer_matrix_not_i_j_271472], **kwargs_271475)
    
    # Obtaining the member '__getitem__' of a type (line 2660)
    getitem___271477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2660, 16), s_qr_call_result_271476, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2660)
    subscript_call_result_271478 = invoke(stypy.reporting.localization.Localization(__file__, 2660, 16), getitem___271477, int_271470)
    
    # Assigning a type to the variable 'tuple_var_assignment_267146' (line 2660)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2660, 16), 'tuple_var_assignment_267146', subscript_call_result_271478)
    
    # Assigning a Name to a Name (line 2660):
    # Getting the type of 'tuple_var_assignment_267145' (line 2660)
    tuple_var_assignment_267145_271479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 16), 'tuple_var_assignment_267145')
    # Assigning a type to the variable 'Q' (line 2660)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2660, 16), 'Q', tuple_var_assignment_267145_271479)
    
    # Assigning a Name to a Name (line 2660):
    # Getting the type of 'tuple_var_assignment_267146' (line 2660)
    tuple_var_assignment_267146_271480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 16), 'tuple_var_assignment_267146')
    # Assigning a type to the variable '_' (line 2660)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2660, 19), '_', tuple_var_assignment_267146_271480)
    
    
    # Call to isreal(...): (line 2662)
    # Processing the call arguments (line 2662)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2662)
    i_271483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 35), 'i', False)
    # Getting the type of 'poles' (line 2662)
    poles_271484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 29), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2662)
    getitem___271485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2662, 29), poles_271484, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2662)
    subscript_call_result_271486 = invoke(stypy.reporting.localization.Localization(__file__, 2662, 29), getitem___271485, i_271483)
    
    # Processing the call keyword arguments (line 2662)
    kwargs_271487 = {}
    # Getting the type of 'np' (line 2662)
    np_271481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 19), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2662)
    isreal_271482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2662, 19), np_271481, 'isreal')
    # Calling isreal(args, kwargs) (line 2662)
    isreal_call_result_271488 = invoke(stypy.reporting.localization.Localization(__file__, 2662, 19), isreal_271482, *[subscript_call_result_271486], **kwargs_271487)
    
    # Testing the type of an if condition (line 2662)
    if_condition_271489 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2662, 16), isreal_call_result_271488)
    # Assigning a type to the variable 'if_condition_271489' (line 2662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2662, 16), 'if_condition_271489', if_condition_271489)
    # SSA begins for if statement (line 2662)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Evaluating assert statement condition
    
    # Call to isreal(...): (line 2663)
    # Processing the call arguments (line 2663)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2663)
    j_271492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 43), 'j', False)
    # Getting the type of 'poles' (line 2663)
    poles_271493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 37), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2663)
    getitem___271494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 37), poles_271493, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2663)
    subscript_call_result_271495 = invoke(stypy.reporting.localization.Localization(__file__, 2663, 37), getitem___271494, j_271492)
    
    # Processing the call keyword arguments (line 2663)
    kwargs_271496 = {}
    # Getting the type of 'np' (line 2663)
    np_271490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 27), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2663)
    isreal_271491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2663, 27), np_271490, 'isreal')
    # Calling isreal(args, kwargs) (line 2663)
    isreal_call_result_271497 = invoke(stypy.reporting.localization.Localization(__file__, 2663, 27), isreal_271491, *[subscript_call_result_271495], **kwargs_271496)
    
    
    # Call to _YT_real(...): (line 2665)
    # Processing the call arguments (line 2665)
    # Getting the type of 'ker_pole' (line 2665)
    ker_pole_271499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 29), 'ker_pole', False)
    # Getting the type of 'Q' (line 2665)
    Q_271500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 39), 'Q', False)
    # Getting the type of 'transfer_matrix' (line 2665)
    transfer_matrix_271501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 42), 'transfer_matrix', False)
    # Getting the type of 'i' (line 2665)
    i_271502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 59), 'i', False)
    # Getting the type of 'j' (line 2665)
    j_271503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 62), 'j', False)
    # Processing the call keyword arguments (line 2665)
    kwargs_271504 = {}
    # Getting the type of '_YT_real' (line 2665)
    _YT_real_271498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 20), '_YT_real', False)
    # Calling _YT_real(args, kwargs) (line 2665)
    _YT_real_call_result_271505 = invoke(stypy.reporting.localization.Localization(__file__, 2665, 20), _YT_real_271498, *[ker_pole_271499, Q_271500, transfer_matrix_271501, i_271502, j_271503], **kwargs_271504)
    
    # SSA branch for the else part of an if statement (line 2662)
    module_type_store.open_ssa_branch('else')
    # Evaluating assert statement condition
    
    
    # Call to isreal(...): (line 2667)
    # Processing the call arguments (line 2667)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2667)
    i_271508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 44), 'i', False)
    # Getting the type of 'poles' (line 2667)
    poles_271509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 38), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2667)
    getitem___271510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 38), poles_271509, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
    subscript_call_result_271511 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 38), getitem___271510, i_271508)
    
    # Processing the call keyword arguments (line 2667)
    kwargs_271512 = {}
    # Getting the type of 'np' (line 2667)
    np_271506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 28), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2667)
    isreal_271507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 28), np_271506, 'isreal')
    # Calling isreal(args, kwargs) (line 2667)
    isreal_call_result_271513 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 28), isreal_271507, *[subscript_call_result_271511], **kwargs_271512)
    
    # Applying the '~' unary operator (line 2667)
    result_inv_271514 = python_operator(stypy.reporting.localization.Localization(__file__, 2667, 27), '~', isreal_call_result_271513)
    
    
    # Call to _YT_complex(...): (line 2669)
    # Processing the call arguments (line 2669)
    # Getting the type of 'ker_pole' (line 2669)
    ker_pole_271516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 32), 'ker_pole', False)
    # Getting the type of 'Q' (line 2669)
    Q_271517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 42), 'Q', False)
    # Getting the type of 'transfer_matrix' (line 2669)
    transfer_matrix_271518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 45), 'transfer_matrix', False)
    # Getting the type of 'i' (line 2669)
    i_271519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 62), 'i', False)
    # Getting the type of 'j' (line 2669)
    j_271520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 65), 'j', False)
    # Processing the call keyword arguments (line 2669)
    kwargs_271521 = {}
    # Getting the type of '_YT_complex' (line 2669)
    _YT_complex_271515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 20), '_YT_complex', False)
    # Calling _YT_complex(args, kwargs) (line 2669)
    _YT_complex_call_result_271522 = invoke(stypy.reporting.localization.Localization(__file__, 2669, 20), _YT_complex_271515, *[ker_pole_271516, Q_271517, transfer_matrix_271518, i_271519, j_271520], **kwargs_271521)
    
    # SSA join for if statement (line 2662)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2648)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2671):
    
    # Assigning a Call to a Name (line 2671):
    
    # Call to max(...): (line 2671)
    # Processing the call arguments (line 2671)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2671)
    tuple_271525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2671, 38), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2671)
    # Adding element type (line 2671)
    
    # Call to sqrt(...): (line 2671)
    # Processing the call arguments (line 2671)
    
    # Call to spacing(...): (line 2671)
    # Processing the call arguments (line 2671)
    int_271530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2671, 57), 'int')
    # Processing the call keyword arguments (line 2671)
    kwargs_271531 = {}
    # Getting the type of 'np' (line 2671)
    np_271528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 46), 'np', False)
    # Obtaining the member 'spacing' of a type (line 2671)
    spacing_271529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2671, 46), np_271528, 'spacing')
    # Calling spacing(args, kwargs) (line 2671)
    spacing_call_result_271532 = invoke(stypy.reporting.localization.Localization(__file__, 2671, 46), spacing_271529, *[int_271530], **kwargs_271531)
    
    # Processing the call keyword arguments (line 2671)
    kwargs_271533 = {}
    # Getting the type of 'np' (line 2671)
    np_271526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 38), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2671)
    sqrt_271527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2671, 38), np_271526, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2671)
    sqrt_call_result_271534 = invoke(stypy.reporting.localization.Localization(__file__, 2671, 38), sqrt_271527, *[spacing_call_result_271532], **kwargs_271533)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2671, 38), tuple_271525, sqrt_call_result_271534)
    # Adding element type (line 2671)
    
    # Call to abs(...): (line 2672)
    # Processing the call arguments (line 2672)
    
    # Call to det(...): (line 2672)
    # Processing the call arguments (line 2672)
    # Getting the type of 'transfer_matrix' (line 2672)
    transfer_matrix_271540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2672, 55), 'transfer_matrix', False)
    # Processing the call keyword arguments (line 2672)
    kwargs_271541 = {}
    # Getting the type of 'np' (line 2672)
    np_271537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2672, 41), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2672)
    linalg_271538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2672, 41), np_271537, 'linalg')
    # Obtaining the member 'det' of a type (line 2672)
    det_271539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2672, 41), linalg_271538, 'det')
    # Calling det(args, kwargs) (line 2672)
    det_call_result_271542 = invoke(stypy.reporting.localization.Localization(__file__, 2672, 41), det_271539, *[transfer_matrix_271540], **kwargs_271541)
    
    # Processing the call keyword arguments (line 2672)
    kwargs_271543 = {}
    # Getting the type of 'np' (line 2672)
    np_271535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2672, 34), 'np', False)
    # Obtaining the member 'abs' of a type (line 2672)
    abs_271536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2672, 34), np_271535, 'abs')
    # Calling abs(args, kwargs) (line 2672)
    abs_call_result_271544 = invoke(stypy.reporting.localization.Localization(__file__, 2672, 34), abs_271536, *[det_call_result_271542], **kwargs_271543)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2671, 38), tuple_271525, abs_call_result_271544)
    
    # Processing the call keyword arguments (line 2671)
    kwargs_271545 = {}
    # Getting the type of 'np' (line 2671)
    np_271523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 30), 'np', False)
    # Obtaining the member 'max' of a type (line 2671)
    max_271524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2671, 30), np_271523, 'max')
    # Calling max(args, kwargs) (line 2671)
    max_call_result_271546 = invoke(stypy.reporting.localization.Localization(__file__, 2671, 30), max_271524, *[tuple_271525], **kwargs_271545)
    
    # Assigning a type to the variable 'det_transfer_matrix' (line 2671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2671, 8), 'det_transfer_matrix', max_call_result_271546)
    
    # Assigning a Call to a Name (line 2673):
    
    # Assigning a Call to a Name (line 2673):
    
    # Call to abs(...): (line 2673)
    # Processing the call arguments (line 2673)
    # Getting the type of 'det_transfer_matrix' (line 2674)
    det_transfer_matrix_271549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2674, 13), 'det_transfer_matrix', False)
    # Getting the type of 'det_transfer_matrixb' (line 2675)
    det_transfer_matrixb_271550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2675, 13), 'det_transfer_matrixb', False)
    # Applying the binary operator '-' (line 2674)
    result_sub_271551 = python_operator(stypy.reporting.localization.Localization(__file__, 2674, 13), '-', det_transfer_matrix_271549, det_transfer_matrixb_271550)
    
    # Getting the type of 'det_transfer_matrix' (line 2676)
    det_transfer_matrix_271552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2676, 12), 'det_transfer_matrix', False)
    # Applying the binary operator 'div' (line 2674)
    result_div_271553 = python_operator(stypy.reporting.localization.Localization(__file__, 2674, 12), 'div', result_sub_271551, det_transfer_matrix_271552)
    
    # Processing the call keyword arguments (line 2673)
    kwargs_271554 = {}
    # Getting the type of 'np' (line 2673)
    np_271547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 19), 'np', False)
    # Obtaining the member 'abs' of a type (line 2673)
    abs_271548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2673, 19), np_271547, 'abs')
    # Calling abs(args, kwargs) (line 2673)
    abs_call_result_271555 = invoke(stypy.reporting.localization.Localization(__file__, 2673, 19), abs_271548, *[result_div_271553], **kwargs_271554)
    
    # Assigning a type to the variable 'cur_rtol' (line 2673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2673, 8), 'cur_rtol', abs_call_result_271555)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'cur_rtol' (line 2677)
    cur_rtol_271556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 11), 'cur_rtol')
    # Getting the type of 'rtol' (line 2677)
    rtol_271557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 22), 'rtol')
    # Applying the binary operator '<' (line 2677)
    result_lt_271558 = python_operator(stypy.reporting.localization.Localization(__file__, 2677, 11), '<', cur_rtol_271556, rtol_271557)
    
    
    # Getting the type of 'det_transfer_matrix' (line 2677)
    det_transfer_matrix_271559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 31), 'det_transfer_matrix')
    
    # Call to sqrt(...): (line 2677)
    # Processing the call arguments (line 2677)
    
    # Call to spacing(...): (line 2677)
    # Processing the call arguments (line 2677)
    int_271564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2677, 72), 'int')
    # Processing the call keyword arguments (line 2677)
    kwargs_271565 = {}
    # Getting the type of 'np' (line 2677)
    np_271562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 61), 'np', False)
    # Obtaining the member 'spacing' of a type (line 2677)
    spacing_271563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2677, 61), np_271562, 'spacing')
    # Calling spacing(args, kwargs) (line 2677)
    spacing_call_result_271566 = invoke(stypy.reporting.localization.Localization(__file__, 2677, 61), spacing_271563, *[int_271564], **kwargs_271565)
    
    # Processing the call keyword arguments (line 2677)
    kwargs_271567 = {}
    # Getting the type of 'np' (line 2677)
    np_271560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 53), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2677)
    sqrt_271561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2677, 53), np_271560, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2677)
    sqrt_call_result_271568 = invoke(stypy.reporting.localization.Localization(__file__, 2677, 53), sqrt_271561, *[spacing_call_result_271566], **kwargs_271567)
    
    # Applying the binary operator '>' (line 2677)
    result_gt_271569 = python_operator(stypy.reporting.localization.Localization(__file__, 2677, 31), '>', det_transfer_matrix_271559, sqrt_call_result_271568)
    
    # Applying the binary operator 'and' (line 2677)
    result_and_keyword_271570 = python_operator(stypy.reporting.localization.Localization(__file__, 2677, 11), 'and', result_lt_271558, result_gt_271569)
    
    # Testing the type of an if condition (line 2677)
    if_condition_271571 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2677, 8), result_and_keyword_271570)
    # Assigning a type to the variable 'if_condition_271571' (line 2677)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2677, 8), 'if_condition_271571', if_condition_271571)
    # SSA begins for if statement (line 2677)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2679):
    
    # Assigning a Name to a Name (line 2679):
    # Getting the type of 'True' (line 2679)
    True_271572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2679, 19), 'True')
    # Assigning a type to the variable 'stop' (line 2679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2679, 12), 'stop', True_271572)
    # SSA join for if statement (line 2677)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'nb_try' (line 2680)
    nb_try_271573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2680, 8), 'nb_try')
    int_271574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2680, 18), 'int')
    # Applying the binary operator '+=' (line 2680)
    result_iadd_271575 = python_operator(stypy.reporting.localization.Localization(__file__, 2680, 8), '+=', nb_try_271573, int_271574)
    # Assigning a type to the variable 'nb_try' (line 2680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2680, 8), 'nb_try', result_iadd_271575)
    
    # SSA join for while statement (line 2645)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2681)
    tuple_271576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2681, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2681)
    # Adding element type (line 2681)
    # Getting the type of 'stop' (line 2681)
    stop_271577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 11), 'stop')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2681, 11), tuple_271576, stop_271577)
    # Adding element type (line 2681)
    # Getting the type of 'cur_rtol' (line 2681)
    cur_rtol_271578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 17), 'cur_rtol')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2681, 11), tuple_271576, cur_rtol_271578)
    # Adding element type (line 2681)
    # Getting the type of 'nb_try' (line 2681)
    nb_try_271579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 27), 'nb_try')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2681, 11), tuple_271576, nb_try_271579)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2681, 4), 'stypy_return_type', tuple_271576)
    
    # ################# End of '_YT_loop(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_YT_loop' in the type store
    # Getting the type of 'stypy_return_type' (line 2561)
    stypy_return_type_271580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_271580)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_YT_loop'
    return stypy_return_type_271580

# Assigning a type to the variable '_YT_loop' (line 2561)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2561, 0), '_YT_loop', _YT_loop)

@norecursion
def _KNV0_loop(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_KNV0_loop'
    module_type_store = module_type_store.open_function_context('_KNV0_loop', 2684, 0, False)
    
    # Passed parameters checking function
    _KNV0_loop.stypy_localization = localization
    _KNV0_loop.stypy_type_of_self = None
    _KNV0_loop.stypy_type_store = module_type_store
    _KNV0_loop.stypy_function_name = '_KNV0_loop'
    _KNV0_loop.stypy_param_names_list = ['ker_pole', 'transfer_matrix', 'poles', 'B', 'maxiter', 'rtol']
    _KNV0_loop.stypy_varargs_param_name = None
    _KNV0_loop.stypy_kwargs_param_name = None
    _KNV0_loop.stypy_call_defaults = defaults
    _KNV0_loop.stypy_call_varargs = varargs
    _KNV0_loop.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_KNV0_loop', ['ker_pole', 'transfer_matrix', 'poles', 'B', 'maxiter', 'rtol'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_KNV0_loop', localization, ['ker_pole', 'transfer_matrix', 'poles', 'B', 'maxiter', 'rtol'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_KNV0_loop(...)' code ##################

    str_271581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2687, (-1)), 'str', '\n    Loop over all poles one by one and apply KNV method 0 algorithm\n    ')
    
    # Assigning a Name to a Name (line 2691):
    
    # Assigning a Name to a Name (line 2691):
    # Getting the type of 'False' (line 2691)
    False_271582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2691, 11), 'False')
    # Assigning a type to the variable 'stop' (line 2691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2691, 4), 'stop', False_271582)
    
    # Assigning a Num to a Name (line 2692):
    
    # Assigning a Num to a Name (line 2692):
    int_271583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2692, 13), 'int')
    # Assigning a type to the variable 'nb_try' (line 2692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2692, 4), 'nb_try', int_271583)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'nb_try' (line 2693)
    nb_try_271584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 10), 'nb_try')
    # Getting the type of 'maxiter' (line 2693)
    maxiter_271585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 19), 'maxiter')
    # Applying the binary operator '<' (line 2693)
    result_lt_271586 = python_operator(stypy.reporting.localization.Localization(__file__, 2693, 10), '<', nb_try_271584, maxiter_271585)
    
    
    # Getting the type of 'stop' (line 2693)
    stop_271587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 35), 'stop')
    # Applying the 'not' unary operator (line 2693)
    result_not__271588 = python_operator(stypy.reporting.localization.Localization(__file__, 2693, 31), 'not', stop_271587)
    
    # Applying the binary operator 'and' (line 2693)
    result_and_keyword_271589 = python_operator(stypy.reporting.localization.Localization(__file__, 2693, 10), 'and', result_lt_271586, result_not__271588)
    
    # Testing the type of an if condition (line 2693)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2693, 4), result_and_keyword_271589)
    # SSA begins for while statement (line 2693)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Call to a Name (line 2694):
    
    # Assigning a Call to a Name (line 2694):
    
    # Call to abs(...): (line 2694)
    # Processing the call arguments (line 2694)
    
    # Call to det(...): (line 2694)
    # Processing the call arguments (line 2694)
    # Getting the type of 'transfer_matrix' (line 2694)
    transfer_matrix_271595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 52), 'transfer_matrix', False)
    # Processing the call keyword arguments (line 2694)
    kwargs_271596 = {}
    # Getting the type of 'np' (line 2694)
    np_271592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 38), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2694)
    linalg_271593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2694, 38), np_271592, 'linalg')
    # Obtaining the member 'det' of a type (line 2694)
    det_271594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2694, 38), linalg_271593, 'det')
    # Calling det(args, kwargs) (line 2694)
    det_call_result_271597 = invoke(stypy.reporting.localization.Localization(__file__, 2694, 38), det_271594, *[transfer_matrix_271595], **kwargs_271596)
    
    # Processing the call keyword arguments (line 2694)
    kwargs_271598 = {}
    # Getting the type of 'np' (line 2694)
    np_271590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 31), 'np', False)
    # Obtaining the member 'abs' of a type (line 2694)
    abs_271591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2694, 31), np_271590, 'abs')
    # Calling abs(args, kwargs) (line 2694)
    abs_call_result_271599 = invoke(stypy.reporting.localization.Localization(__file__, 2694, 31), abs_271591, *[det_call_result_271597], **kwargs_271598)
    
    # Assigning a type to the variable 'det_transfer_matrixb' (line 2694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2694, 8), 'det_transfer_matrixb', abs_call_result_271599)
    
    
    # Call to range(...): (line 2695)
    # Processing the call arguments (line 2695)
    
    # Obtaining the type of the subscript
    int_271601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2695, 31), 'int')
    # Getting the type of 'B' (line 2695)
    B_271602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2695, 23), 'B', False)
    # Obtaining the member 'shape' of a type (line 2695)
    shape_271603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2695, 23), B_271602, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2695)
    getitem___271604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2695, 23), shape_271603, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2695)
    subscript_call_result_271605 = invoke(stypy.reporting.localization.Localization(__file__, 2695, 23), getitem___271604, int_271601)
    
    # Processing the call keyword arguments (line 2695)
    kwargs_271606 = {}
    # Getting the type of 'range' (line 2695)
    range_271600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2695, 17), 'range', False)
    # Calling range(args, kwargs) (line 2695)
    range_call_result_271607 = invoke(stypy.reporting.localization.Localization(__file__, 2695, 17), range_271600, *[subscript_call_result_271605], **kwargs_271606)
    
    # Testing the type of a for loop iterable (line 2695)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2695, 8), range_call_result_271607)
    # Getting the type of the for loop variable (line 2695)
    for_loop_var_271608 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2695, 8), range_call_result_271607)
    # Assigning a type to the variable 'j' (line 2695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2695, 8), 'j', for_loop_var_271608)
    # SSA begins for a for statement (line 2695)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to _KNV0(...): (line 2696)
    # Processing the call arguments (line 2696)
    # Getting the type of 'B' (line 2696)
    B_271610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 18), 'B', False)
    # Getting the type of 'ker_pole' (line 2696)
    ker_pole_271611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 21), 'ker_pole', False)
    # Getting the type of 'transfer_matrix' (line 2696)
    transfer_matrix_271612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 31), 'transfer_matrix', False)
    # Getting the type of 'j' (line 2696)
    j_271613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 48), 'j', False)
    # Getting the type of 'poles' (line 2696)
    poles_271614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 51), 'poles', False)
    # Processing the call keyword arguments (line 2696)
    kwargs_271615 = {}
    # Getting the type of '_KNV0' (line 2696)
    _KNV0_271609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 12), '_KNV0', False)
    # Calling _KNV0(args, kwargs) (line 2696)
    _KNV0_call_result_271616 = invoke(stypy.reporting.localization.Localization(__file__, 2696, 12), _KNV0_271609, *[B_271610, ker_pole_271611, transfer_matrix_271612, j_271613, poles_271614], **kwargs_271615)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2698):
    
    # Assigning a Call to a Name (line 2698):
    
    # Call to max(...): (line 2698)
    # Processing the call arguments (line 2698)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2698)
    tuple_271619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2698, 38), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2698)
    # Adding element type (line 2698)
    
    # Call to sqrt(...): (line 2698)
    # Processing the call arguments (line 2698)
    
    # Call to spacing(...): (line 2698)
    # Processing the call arguments (line 2698)
    int_271624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2698, 57), 'int')
    # Processing the call keyword arguments (line 2698)
    kwargs_271625 = {}
    # Getting the type of 'np' (line 2698)
    np_271622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 46), 'np', False)
    # Obtaining the member 'spacing' of a type (line 2698)
    spacing_271623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2698, 46), np_271622, 'spacing')
    # Calling spacing(args, kwargs) (line 2698)
    spacing_call_result_271626 = invoke(stypy.reporting.localization.Localization(__file__, 2698, 46), spacing_271623, *[int_271624], **kwargs_271625)
    
    # Processing the call keyword arguments (line 2698)
    kwargs_271627 = {}
    # Getting the type of 'np' (line 2698)
    np_271620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 38), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2698)
    sqrt_271621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2698, 38), np_271620, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2698)
    sqrt_call_result_271628 = invoke(stypy.reporting.localization.Localization(__file__, 2698, 38), sqrt_271621, *[spacing_call_result_271626], **kwargs_271627)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2698, 38), tuple_271619, sqrt_call_result_271628)
    # Adding element type (line 2698)
    
    # Call to abs(...): (line 2699)
    # Processing the call arguments (line 2699)
    
    # Call to det(...): (line 2699)
    # Processing the call arguments (line 2699)
    # Getting the type of 'transfer_matrix' (line 2699)
    transfer_matrix_271634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2699, 55), 'transfer_matrix', False)
    # Processing the call keyword arguments (line 2699)
    kwargs_271635 = {}
    # Getting the type of 'np' (line 2699)
    np_271631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2699, 41), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2699)
    linalg_271632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2699, 41), np_271631, 'linalg')
    # Obtaining the member 'det' of a type (line 2699)
    det_271633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2699, 41), linalg_271632, 'det')
    # Calling det(args, kwargs) (line 2699)
    det_call_result_271636 = invoke(stypy.reporting.localization.Localization(__file__, 2699, 41), det_271633, *[transfer_matrix_271634], **kwargs_271635)
    
    # Processing the call keyword arguments (line 2699)
    kwargs_271637 = {}
    # Getting the type of 'np' (line 2699)
    np_271629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2699, 34), 'np', False)
    # Obtaining the member 'abs' of a type (line 2699)
    abs_271630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2699, 34), np_271629, 'abs')
    # Calling abs(args, kwargs) (line 2699)
    abs_call_result_271638 = invoke(stypy.reporting.localization.Localization(__file__, 2699, 34), abs_271630, *[det_call_result_271636], **kwargs_271637)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2698, 38), tuple_271619, abs_call_result_271638)
    
    # Processing the call keyword arguments (line 2698)
    kwargs_271639 = {}
    # Getting the type of 'np' (line 2698)
    np_271617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 30), 'np', False)
    # Obtaining the member 'max' of a type (line 2698)
    max_271618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2698, 30), np_271617, 'max')
    # Calling max(args, kwargs) (line 2698)
    max_call_result_271640 = invoke(stypy.reporting.localization.Localization(__file__, 2698, 30), max_271618, *[tuple_271619], **kwargs_271639)
    
    # Assigning a type to the variable 'det_transfer_matrix' (line 2698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2698, 8), 'det_transfer_matrix', max_call_result_271640)
    
    # Assigning a Call to a Name (line 2700):
    
    # Assigning a Call to a Name (line 2700):
    
    # Call to abs(...): (line 2700)
    # Processing the call arguments (line 2700)
    # Getting the type of 'det_transfer_matrix' (line 2700)
    det_transfer_matrix_271643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 27), 'det_transfer_matrix', False)
    # Getting the type of 'det_transfer_matrixb' (line 2700)
    det_transfer_matrixb_271644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 49), 'det_transfer_matrixb', False)
    # Applying the binary operator '-' (line 2700)
    result_sub_271645 = python_operator(stypy.reporting.localization.Localization(__file__, 2700, 27), '-', det_transfer_matrix_271643, det_transfer_matrixb_271644)
    
    # Getting the type of 'det_transfer_matrix' (line 2701)
    det_transfer_matrix_271646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 23), 'det_transfer_matrix', False)
    # Applying the binary operator 'div' (line 2700)
    result_div_271647 = python_operator(stypy.reporting.localization.Localization(__file__, 2700, 26), 'div', result_sub_271645, det_transfer_matrix_271646)
    
    # Processing the call keyword arguments (line 2700)
    kwargs_271648 = {}
    # Getting the type of 'np' (line 2700)
    np_271641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 19), 'np', False)
    # Obtaining the member 'abs' of a type (line 2700)
    abs_271642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2700, 19), np_271641, 'abs')
    # Calling abs(args, kwargs) (line 2700)
    abs_call_result_271649 = invoke(stypy.reporting.localization.Localization(__file__, 2700, 19), abs_271642, *[result_div_271647], **kwargs_271648)
    
    # Assigning a type to the variable 'cur_rtol' (line 2700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2700, 8), 'cur_rtol', abs_call_result_271649)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'cur_rtol' (line 2702)
    cur_rtol_271650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 11), 'cur_rtol')
    # Getting the type of 'rtol' (line 2702)
    rtol_271651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 22), 'rtol')
    # Applying the binary operator '<' (line 2702)
    result_lt_271652 = python_operator(stypy.reporting.localization.Localization(__file__, 2702, 11), '<', cur_rtol_271650, rtol_271651)
    
    
    # Getting the type of 'det_transfer_matrix' (line 2702)
    det_transfer_matrix_271653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 31), 'det_transfer_matrix')
    
    # Call to sqrt(...): (line 2702)
    # Processing the call arguments (line 2702)
    
    # Call to spacing(...): (line 2702)
    # Processing the call arguments (line 2702)
    int_271658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2702, 72), 'int')
    # Processing the call keyword arguments (line 2702)
    kwargs_271659 = {}
    # Getting the type of 'np' (line 2702)
    np_271656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 61), 'np', False)
    # Obtaining the member 'spacing' of a type (line 2702)
    spacing_271657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2702, 61), np_271656, 'spacing')
    # Calling spacing(args, kwargs) (line 2702)
    spacing_call_result_271660 = invoke(stypy.reporting.localization.Localization(__file__, 2702, 61), spacing_271657, *[int_271658], **kwargs_271659)
    
    # Processing the call keyword arguments (line 2702)
    kwargs_271661 = {}
    # Getting the type of 'np' (line 2702)
    np_271654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 53), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 2702)
    sqrt_271655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2702, 53), np_271654, 'sqrt')
    # Calling sqrt(args, kwargs) (line 2702)
    sqrt_call_result_271662 = invoke(stypy.reporting.localization.Localization(__file__, 2702, 53), sqrt_271655, *[spacing_call_result_271660], **kwargs_271661)
    
    # Applying the binary operator '>' (line 2702)
    result_gt_271663 = python_operator(stypy.reporting.localization.Localization(__file__, 2702, 31), '>', det_transfer_matrix_271653, sqrt_call_result_271662)
    
    # Applying the binary operator 'and' (line 2702)
    result_and_keyword_271664 = python_operator(stypy.reporting.localization.Localization(__file__, 2702, 11), 'and', result_lt_271652, result_gt_271663)
    
    # Testing the type of an if condition (line 2702)
    if_condition_271665 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2702, 8), result_and_keyword_271664)
    # Assigning a type to the variable 'if_condition_271665' (line 2702)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2702, 8), 'if_condition_271665', if_condition_271665)
    # SSA begins for if statement (line 2702)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2704):
    
    # Assigning a Name to a Name (line 2704):
    # Getting the type of 'True' (line 2704)
    True_271666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 19), 'True')
    # Assigning a type to the variable 'stop' (line 2704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2704, 12), 'stop', True_271666)
    # SSA join for if statement (line 2702)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'nb_try' (line 2706)
    nb_try_271667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 8), 'nb_try')
    int_271668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2706, 18), 'int')
    # Applying the binary operator '+=' (line 2706)
    result_iadd_271669 = python_operator(stypy.reporting.localization.Localization(__file__, 2706, 8), '+=', nb_try_271667, int_271668)
    # Assigning a type to the variable 'nb_try' (line 2706)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2706, 8), 'nb_try', result_iadd_271669)
    
    # SSA join for while statement (line 2693)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2707)
    tuple_271670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2707, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2707)
    # Adding element type (line 2707)
    # Getting the type of 'stop' (line 2707)
    stop_271671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2707, 11), 'stop')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2707, 11), tuple_271670, stop_271671)
    # Adding element type (line 2707)
    # Getting the type of 'cur_rtol' (line 2707)
    cur_rtol_271672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2707, 17), 'cur_rtol')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2707, 11), tuple_271670, cur_rtol_271672)
    # Adding element type (line 2707)
    # Getting the type of 'nb_try' (line 2707)
    nb_try_271673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2707, 27), 'nb_try')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2707, 11), tuple_271670, nb_try_271673)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2707, 4), 'stypy_return_type', tuple_271670)
    
    # ################# End of '_KNV0_loop(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_KNV0_loop' in the type store
    # Getting the type of 'stypy_return_type' (line 2684)
    stypy_return_type_271674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_271674)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_KNV0_loop'
    return stypy_return_type_271674

# Assigning a type to the variable '_KNV0_loop' (line 2684)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2684, 0), '_KNV0_loop', _KNV0_loop)

@norecursion
def place_poles(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_271675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2710, 36), 'str', 'YT')
    float_271676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2710, 47), 'float')
    int_271677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2710, 61), 'int')
    defaults = [str_271675, float_271676, int_271677]
    # Create a new context for function 'place_poles'
    module_type_store = module_type_store.open_function_context('place_poles', 2710, 0, False)
    
    # Passed parameters checking function
    place_poles.stypy_localization = localization
    place_poles.stypy_type_of_self = None
    place_poles.stypy_type_store = module_type_store
    place_poles.stypy_function_name = 'place_poles'
    place_poles.stypy_param_names_list = ['A', 'B', 'poles', 'method', 'rtol', 'maxiter']
    place_poles.stypy_varargs_param_name = None
    place_poles.stypy_kwargs_param_name = None
    place_poles.stypy_call_defaults = defaults
    place_poles.stypy_call_varargs = varargs
    place_poles.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'place_poles', ['A', 'B', 'poles', 'method', 'rtol', 'maxiter'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'place_poles', localization, ['A', 'B', 'poles', 'method', 'rtol', 'maxiter'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'place_poles(...)' code ##################

    str_271678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2888, (-1)), 'str', '\n    Compute K such that eigenvalues (A - dot(B, K))=poles.\n\n    K is the gain matrix such as the plant described by the linear system\n    ``AX+BU`` will have its closed-loop poles, i.e the eigenvalues ``A - B*K``,\n    as close as possible to those asked for in poles.\n\n    SISO, MISO and MIMO systems are supported.\n\n    Parameters\n    ----------\n    A, B : ndarray\n        State-space representation of linear system ``AX + BU``.\n    poles : array_like\n        Desired real poles and/or complex conjugates poles.\n        Complex poles are only supported with ``method="YT"`` (default).\n    method: {\'YT\', \'KNV0\'}, optional\n        Which method to choose to find the gain matrix K. One of:\n\n            - \'YT\': Yang Tits\n            - \'KNV0\': Kautsky, Nichols, Van Dooren update method 0\n\n        See References and Notes for details on the algorithms.\n    rtol: float, optional\n        After each iteration the determinant of the eigenvectors of\n        ``A - B*K`` is compared to its previous value, when the relative\n        error between these two values becomes lower than `rtol` the algorithm\n        stops.  Default is 1e-3.\n    maxiter: int, optional\n        Maximum number of iterations to compute the gain matrix.\n        Default is 30.\n\n    Returns\n    -------\n    full_state_feedback : Bunch object\n        full_state_feedback is composed of:\n            gain_matrix : 1-D ndarray\n                The closed loop matrix K such as the eigenvalues of ``A-BK``\n                are as close as possible to the requested poles.\n            computed_poles : 1-D ndarray\n                The poles corresponding to ``A-BK`` sorted as first the real\n                poles in increasing order, then the complex congugates in\n                lexicographic order.\n            requested_poles : 1-D ndarray\n                The poles the algorithm was asked to place sorted as above,\n                they may differ from what was achieved.\n            X : 2-D ndarray\n                The transfer matrix such as ``X * diag(poles) = (A - B*K)*X``\n                (see Notes)\n            rtol : float\n                The relative tolerance achieved on ``det(X)`` (see Notes).\n                `rtol` will be NaN if it is possible to solve the system\n                ``diag(poles) = (A - B*K)``, or 0 when the optimization\n                algorithms can\'t do anything i.e when ``B.shape[1] == 1``.\n            nb_iter : int\n                The number of iterations performed before converging.\n                `nb_iter` will be NaN if it is possible to solve the system\n                ``diag(poles) = (A - B*K)``, or 0 when the optimization\n                algorithms can\'t do anything i.e when ``B.shape[1] == 1``.\n\n    Notes\n    -----\n    The Tits and Yang (YT), [2]_ paper is an update of the original Kautsky et\n    al. (KNV) paper [1]_.  KNV relies on rank-1 updates to find the transfer\n    matrix X such that ``X * diag(poles) = (A - B*K)*X``, whereas YT uses\n    rank-2 updates. This yields on average more robust solutions (see [2]_\n    pp 21-22), furthermore the YT algorithm supports complex poles whereas KNV\n    does not in its original version.  Only update method 0 proposed by KNV has\n    been implemented here, hence the name ``\'KNV0\'``.\n\n    KNV extended to complex poles is used in Matlab\'s ``place`` function, YT is\n    distributed under a non-free licence by Slicot under the name ``robpole``.\n    It is unclear and undocumented how KNV0 has been extended to complex poles\n    (Tits and Yang claim on page 14 of their paper that their method can not be\n    used to extend KNV to complex poles), therefore only YT supports them in\n    this implementation.\n\n    As the solution to the problem of pole placement is not unique for MIMO\n    systems, both methods start with a tentative transfer matrix which is\n    altered in various way to increase its determinant.  Both methods have been\n    proven to converge to a stable solution, however depending on the way the\n    initial transfer matrix is chosen they will converge to different\n    solutions and therefore there is absolutely no guarantee that using\n    ``\'KNV0\'`` will yield results similar to Matlab\'s or any other\n    implementation of these algorithms.\n\n    Using the default method ``\'YT\'`` should be fine in most cases; ``\'KNV0\'``\n    is only provided because it is needed by ``\'YT\'`` in some specific cases.\n    Furthermore ``\'YT\'`` gives on average more robust results than ``\'KNV0\'``\n    when ``abs(det(X))`` is used as a robustness indicator.\n\n    [2]_ is available as a technical report on the following URL:\n    http://drum.lib.umd.edu/handle/1903/5598\n\n    References\n    ----------\n    .. [1] J. Kautsky, N.K. Nichols and P. van Dooren, "Robust pole assignment\n           in linear state feedback", International Journal of Control, Vol. 41\n           pp. 1129-1155, 1985.\n    .. [2] A.L. Tits and Y. Yang, "Globally convergent algorithms for robust\n           pole assignment by state feedback, IEEE Transactions on Automatic\n           Control, Vol. 41, pp. 1432-1452, 1996.\n\n    Examples\n    --------\n    A simple example demonstrating real pole placement using both KNV and YT\n    algorithms.  This is example number 1 from section 4 of the reference KNV\n    publication ([1]_):\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> A = np.array([[ 1.380,  -0.2077,  6.715, -5.676  ],\n    ...               [-0.5814, -4.290,   0,      0.6750 ],\n    ...               [ 1.067,   4.273,  -6.654,  5.893  ],\n    ...               [ 0.0480,  4.273,   1.343, -2.104  ]])\n    >>> B = np.array([[ 0,      5.679 ],\n    ...               [ 1.136,  1.136 ],\n    ...               [ 0,      0,    ],\n    ...               [-3.146,  0     ]])\n    >>> P = np.array([-0.2, -0.5, -5.0566, -8.6659])\n\n    Now compute K with KNV method 0, with the default YT method and with the YT\n    method while forcing 100 iterations of the algorithm and print some results\n    after each call.\n\n    >>> fsf1 = signal.place_poles(A, B, P, method=\'KNV0\')\n    >>> fsf1.gain_matrix\n    array([[ 0.20071427, -0.96665799,  0.24066128, -0.10279785],\n           [ 0.50587268,  0.57779091,  0.51795763, -0.41991442]])\n\n    >>> fsf2 = signal.place_poles(A, B, P)  # uses YT method\n    >>> fsf2.computed_poles\n    array([-8.6659, -5.0566, -0.5   , -0.2   ])\n\n    >>> fsf3 = signal.place_poles(A, B, P, rtol=-1, maxiter=100)\n    >>> fsf3.X\n    array([[ 0.52072442+0.j, -0.08409372+0.j, -0.56847937+0.j,  0.74823657+0.j],\n           [-0.04977751+0.j, -0.80872954+0.j,  0.13566234+0.j, -0.29322906+0.j],\n           [-0.82266932+0.j, -0.19168026+0.j, -0.56348322+0.j, -0.43815060+0.j],\n           [ 0.22267347+0.j,  0.54967577+0.j, -0.58387806+0.j, -0.40271926+0.j]])\n\n    The absolute value of the determinant of X is a good indicator to check the\n    robustness of the results, both ``\'KNV0\'`` and ``\'YT\'`` aim at maximizing\n    it.  Below a comparison of the robustness of the results above:\n\n    >>> abs(np.linalg.det(fsf1.X)) < abs(np.linalg.det(fsf2.X))\n    True\n    >>> abs(np.linalg.det(fsf2.X)) < abs(np.linalg.det(fsf3.X))\n    True\n\n    Now a simple example for complex poles:\n\n    >>> A = np.array([[ 0,  7/3.,  0,   0   ],\n    ...               [ 0,   0,    0,  7/9. ],\n    ...               [ 0,   0,    0,   0   ],\n    ...               [ 0,   0,    0,   0   ]])\n    >>> B = np.array([[ 0,  0 ],\n    ...               [ 0,  0 ],\n    ...               [ 1,  0 ],\n    ...               [ 0,  1 ]])\n    >>> P = np.array([-3, -1, -2-1j, -2+1j]) / 3.\n    >>> fsf = signal.place_poles(A, B, P, method=\'YT\')\n\n    We can plot the desired and computed poles in the complex plane:\n\n    >>> t = np.linspace(0, 2*np.pi, 401)\n    >>> plt.plot(np.cos(t), np.sin(t), \'k--\')  # unit circle\n    >>> plt.plot(fsf.requested_poles.real, fsf.requested_poles.imag,\n    ...          \'wo\', label=\'Desired\')\n    >>> plt.plot(fsf.computed_poles.real, fsf.computed_poles.imag, \'bx\',\n    ...          label=\'Placed\')\n    >>> plt.grid()\n    >>> plt.axis(\'image\')\n    >>> plt.axis([-1.1, 1.1, -1.1, 1.1])\n    >>> plt.legend(bbox_to_anchor=(1.05, 1), loc=2, numpoints=1)\n\n    ')
    
    # Assigning a Call to a Tuple (line 2890):
    
    # Assigning a Subscript to a Name (line 2890):
    
    # Obtaining the type of the subscript
    int_271679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2890, 4), 'int')
    
    # Call to _valid_inputs(...): (line 2890)
    # Processing the call arguments (line 2890)
    # Getting the type of 'A' (line 2890)
    A_271681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 39), 'A', False)
    # Getting the type of 'B' (line 2890)
    B_271682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 42), 'B', False)
    # Getting the type of 'poles' (line 2890)
    poles_271683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 45), 'poles', False)
    # Getting the type of 'method' (line 2890)
    method_271684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 52), 'method', False)
    # Getting the type of 'rtol' (line 2890)
    rtol_271685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 60), 'rtol', False)
    # Getting the type of 'maxiter' (line 2890)
    maxiter_271686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 66), 'maxiter', False)
    # Processing the call keyword arguments (line 2890)
    kwargs_271687 = {}
    # Getting the type of '_valid_inputs' (line 2890)
    _valid_inputs_271680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 25), '_valid_inputs', False)
    # Calling _valid_inputs(args, kwargs) (line 2890)
    _valid_inputs_call_result_271688 = invoke(stypy.reporting.localization.Localization(__file__, 2890, 25), _valid_inputs_271680, *[A_271681, B_271682, poles_271683, method_271684, rtol_271685, maxiter_271686], **kwargs_271687)
    
    # Obtaining the member '__getitem__' of a type (line 2890)
    getitem___271689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2890, 4), _valid_inputs_call_result_271688, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2890)
    subscript_call_result_271690 = invoke(stypy.reporting.localization.Localization(__file__, 2890, 4), getitem___271689, int_271679)
    
    # Assigning a type to the variable 'tuple_var_assignment_267147' (line 2890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2890, 4), 'tuple_var_assignment_267147', subscript_call_result_271690)
    
    # Assigning a Subscript to a Name (line 2890):
    
    # Obtaining the type of the subscript
    int_271691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2890, 4), 'int')
    
    # Call to _valid_inputs(...): (line 2890)
    # Processing the call arguments (line 2890)
    # Getting the type of 'A' (line 2890)
    A_271693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 39), 'A', False)
    # Getting the type of 'B' (line 2890)
    B_271694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 42), 'B', False)
    # Getting the type of 'poles' (line 2890)
    poles_271695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 45), 'poles', False)
    # Getting the type of 'method' (line 2890)
    method_271696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 52), 'method', False)
    # Getting the type of 'rtol' (line 2890)
    rtol_271697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 60), 'rtol', False)
    # Getting the type of 'maxiter' (line 2890)
    maxiter_271698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 66), 'maxiter', False)
    # Processing the call keyword arguments (line 2890)
    kwargs_271699 = {}
    # Getting the type of '_valid_inputs' (line 2890)
    _valid_inputs_271692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 25), '_valid_inputs', False)
    # Calling _valid_inputs(args, kwargs) (line 2890)
    _valid_inputs_call_result_271700 = invoke(stypy.reporting.localization.Localization(__file__, 2890, 25), _valid_inputs_271692, *[A_271693, B_271694, poles_271695, method_271696, rtol_271697, maxiter_271698], **kwargs_271699)
    
    # Obtaining the member '__getitem__' of a type (line 2890)
    getitem___271701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2890, 4), _valid_inputs_call_result_271700, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2890)
    subscript_call_result_271702 = invoke(stypy.reporting.localization.Localization(__file__, 2890, 4), getitem___271701, int_271691)
    
    # Assigning a type to the variable 'tuple_var_assignment_267148' (line 2890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2890, 4), 'tuple_var_assignment_267148', subscript_call_result_271702)
    
    # Assigning a Name to a Name (line 2890):
    # Getting the type of 'tuple_var_assignment_267147' (line 2890)
    tuple_var_assignment_267147_271703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 4), 'tuple_var_assignment_267147')
    # Assigning a type to the variable 'update_loop' (line 2890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2890, 4), 'update_loop', tuple_var_assignment_267147_271703)
    
    # Assigning a Name to a Name (line 2890):
    # Getting the type of 'tuple_var_assignment_267148' (line 2890)
    tuple_var_assignment_267148_271704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2890, 4), 'tuple_var_assignment_267148')
    # Assigning a type to the variable 'poles' (line 2890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2890, 17), 'poles', tuple_var_assignment_267148_271704)
    
    # Assigning a Num to a Name (line 2893):
    
    # Assigning a Num to a Name (line 2893):
    int_271705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2893, 15), 'int')
    # Assigning a type to the variable 'cur_rtol' (line 2893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2893, 4), 'cur_rtol', int_271705)
    
    # Assigning a Num to a Name (line 2895):
    
    # Assigning a Num to a Name (line 2895):
    int_271706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2895, 14), 'int')
    # Assigning a type to the variable 'nb_iter' (line 2895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2895, 4), 'nb_iter', int_271706)
    
    # Assigning a Call to a Tuple (line 2900):
    
    # Assigning a Subscript to a Name (line 2900):
    
    # Obtaining the type of the subscript
    int_271707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2900, 4), 'int')
    
    # Call to s_qr(...): (line 2900)
    # Processing the call arguments (line 2900)
    # Getting the type of 'B' (line 2900)
    B_271709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 16), 'B', False)
    # Processing the call keyword arguments (line 2900)
    str_271710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2900, 24), 'str', 'full')
    keyword_271711 = str_271710
    kwargs_271712 = {'mode': keyword_271711}
    # Getting the type of 's_qr' (line 2900)
    s_qr_271708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 11), 's_qr', False)
    # Calling s_qr(args, kwargs) (line 2900)
    s_qr_call_result_271713 = invoke(stypy.reporting.localization.Localization(__file__, 2900, 11), s_qr_271708, *[B_271709], **kwargs_271712)
    
    # Obtaining the member '__getitem__' of a type (line 2900)
    getitem___271714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2900, 4), s_qr_call_result_271713, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2900)
    subscript_call_result_271715 = invoke(stypy.reporting.localization.Localization(__file__, 2900, 4), getitem___271714, int_271707)
    
    # Assigning a type to the variable 'tuple_var_assignment_267149' (line 2900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2900, 4), 'tuple_var_assignment_267149', subscript_call_result_271715)
    
    # Assigning a Subscript to a Name (line 2900):
    
    # Obtaining the type of the subscript
    int_271716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2900, 4), 'int')
    
    # Call to s_qr(...): (line 2900)
    # Processing the call arguments (line 2900)
    # Getting the type of 'B' (line 2900)
    B_271718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 16), 'B', False)
    # Processing the call keyword arguments (line 2900)
    str_271719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2900, 24), 'str', 'full')
    keyword_271720 = str_271719
    kwargs_271721 = {'mode': keyword_271720}
    # Getting the type of 's_qr' (line 2900)
    s_qr_271717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 11), 's_qr', False)
    # Calling s_qr(args, kwargs) (line 2900)
    s_qr_call_result_271722 = invoke(stypy.reporting.localization.Localization(__file__, 2900, 11), s_qr_271717, *[B_271718], **kwargs_271721)
    
    # Obtaining the member '__getitem__' of a type (line 2900)
    getitem___271723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2900, 4), s_qr_call_result_271722, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2900)
    subscript_call_result_271724 = invoke(stypy.reporting.localization.Localization(__file__, 2900, 4), getitem___271723, int_271716)
    
    # Assigning a type to the variable 'tuple_var_assignment_267150' (line 2900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2900, 4), 'tuple_var_assignment_267150', subscript_call_result_271724)
    
    # Assigning a Name to a Name (line 2900):
    # Getting the type of 'tuple_var_assignment_267149' (line 2900)
    tuple_var_assignment_267149_271725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 4), 'tuple_var_assignment_267149')
    # Assigning a type to the variable 'u' (line 2900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2900, 4), 'u', tuple_var_assignment_267149_271725)
    
    # Assigning a Name to a Name (line 2900):
    # Getting the type of 'tuple_var_assignment_267150' (line 2900)
    tuple_var_assignment_267150_271726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2900, 4), 'tuple_var_assignment_267150')
    # Assigning a type to the variable 'z' (line 2900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2900, 7), 'z', tuple_var_assignment_267150_271726)
    
    # Assigning a Call to a Name (line 2901):
    
    # Assigning a Call to a Name (line 2901):
    
    # Call to matrix_rank(...): (line 2901)
    # Processing the call arguments (line 2901)
    # Getting the type of 'B' (line 2901)
    B_271730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 34), 'B', False)
    # Processing the call keyword arguments (line 2901)
    kwargs_271731 = {}
    # Getting the type of 'np' (line 2901)
    np_271727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 12), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2901)
    linalg_271728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2901, 12), np_271727, 'linalg')
    # Obtaining the member 'matrix_rank' of a type (line 2901)
    matrix_rank_271729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2901, 12), linalg_271728, 'matrix_rank')
    # Calling matrix_rank(args, kwargs) (line 2901)
    matrix_rank_call_result_271732 = invoke(stypy.reporting.localization.Localization(__file__, 2901, 12), matrix_rank_271729, *[B_271730], **kwargs_271731)
    
    # Assigning a type to the variable 'rankB' (line 2901)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2901, 4), 'rankB', matrix_rank_call_result_271732)
    
    # Assigning a Subscript to a Name (line 2902):
    
    # Assigning a Subscript to a Name (line 2902):
    
    # Obtaining the type of the subscript
    slice_271733 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2902, 9), None, None, None)
    # Getting the type of 'rankB' (line 2902)
    rankB_271734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 15), 'rankB')
    slice_271735 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2902, 9), None, rankB_271734, None)
    # Getting the type of 'u' (line 2902)
    u_271736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 9), 'u')
    # Obtaining the member '__getitem__' of a type (line 2902)
    getitem___271737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2902, 9), u_271736, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2902)
    subscript_call_result_271738 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 9), getitem___271737, (slice_271733, slice_271735))
    
    # Assigning a type to the variable 'u0' (line 2902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2902, 4), 'u0', subscript_call_result_271738)
    
    # Assigning a Subscript to a Name (line 2903):
    
    # Assigning a Subscript to a Name (line 2903):
    
    # Obtaining the type of the subscript
    slice_271739 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2903, 9), None, None, None)
    # Getting the type of 'rankB' (line 2903)
    rankB_271740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 14), 'rankB')
    slice_271741 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2903, 9), rankB_271740, None, None)
    # Getting the type of 'u' (line 2903)
    u_271742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 9), 'u')
    # Obtaining the member '__getitem__' of a type (line 2903)
    getitem___271743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2903, 9), u_271742, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2903)
    subscript_call_result_271744 = invoke(stypy.reporting.localization.Localization(__file__, 2903, 9), getitem___271743, (slice_271739, slice_271741))
    
    # Assigning a type to the variable 'u1' (line 2903)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2903, 4), 'u1', subscript_call_result_271744)
    
    # Assigning a Subscript to a Name (line 2904):
    
    # Assigning a Subscript to a Name (line 2904):
    
    # Obtaining the type of the subscript
    # Getting the type of 'rankB' (line 2904)
    rankB_271745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 11), 'rankB')
    slice_271746 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2904, 8), None, rankB_271745, None)
    slice_271747 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2904, 8), None, None, None)
    # Getting the type of 'z' (line 2904)
    z_271748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 8), 'z')
    # Obtaining the member '__getitem__' of a type (line 2904)
    getitem___271749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2904, 8), z_271748, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2904)
    subscript_call_result_271750 = invoke(stypy.reporting.localization.Localization(__file__, 2904, 8), getitem___271749, (slice_271746, slice_271747))
    
    # Assigning a type to the variable 'z' (line 2904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2904, 4), 'z', subscript_call_result_271750)
    
    
    
    # Obtaining the type of the subscript
    int_271751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2907, 15), 'int')
    # Getting the type of 'B' (line 2907)
    B_271752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 7), 'B')
    # Obtaining the member 'shape' of a type (line 2907)
    shape_271753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2907, 7), B_271752, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2907)
    getitem___271754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2907, 7), shape_271753, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2907)
    subscript_call_result_271755 = invoke(stypy.reporting.localization.Localization(__file__, 2907, 7), getitem___271754, int_271751)
    
    # Getting the type of 'rankB' (line 2907)
    rankB_271756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 21), 'rankB')
    # Applying the binary operator '==' (line 2907)
    result_eq_271757 = python_operator(stypy.reporting.localization.Localization(__file__, 2907, 7), '==', subscript_call_result_271755, rankB_271756)
    
    # Testing the type of an if condition (line 2907)
    if_condition_271758 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2907, 4), result_eq_271757)
    # Assigning a type to the variable 'if_condition_271758' (line 2907)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2907, 4), 'if_condition_271758', if_condition_271758)
    # SSA begins for if statement (line 2907)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2927):
    
    # Assigning a Call to a Name (line 2927):
    
    # Call to zeros(...): (line 2927)
    # Processing the call arguments (line 2927)
    # Getting the type of 'A' (line 2927)
    A_271761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 30), 'A', False)
    # Obtaining the member 'shape' of a type (line 2927)
    shape_271762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2927, 30), A_271761, 'shape')
    # Processing the call keyword arguments (line 2927)
    kwargs_271763 = {}
    # Getting the type of 'np' (line 2927)
    np_271759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 21), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2927)
    zeros_271760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2927, 21), np_271759, 'zeros')
    # Calling zeros(args, kwargs) (line 2927)
    zeros_call_result_271764 = invoke(stypy.reporting.localization.Localization(__file__, 2927, 21), zeros_271760, *[shape_271762], **kwargs_271763)
    
    # Assigning a type to the variable 'diag_poles' (line 2927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2927, 8), 'diag_poles', zeros_call_result_271764)
    
    # Assigning a Num to a Name (line 2928):
    
    # Assigning a Num to a Name (line 2928):
    int_271765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2928, 14), 'int')
    # Assigning a type to the variable 'idx' (line 2928)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2928, 8), 'idx', int_271765)
    
    
    # Getting the type of 'idx' (line 2929)
    idx_271766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2929, 14), 'idx')
    
    # Obtaining the type of the subscript
    int_271767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2929, 32), 'int')
    # Getting the type of 'poles' (line 2929)
    poles_271768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2929, 20), 'poles')
    # Obtaining the member 'shape' of a type (line 2929)
    shape_271769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2929, 20), poles_271768, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2929)
    getitem___271770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2929, 20), shape_271769, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2929)
    subscript_call_result_271771 = invoke(stypy.reporting.localization.Localization(__file__, 2929, 20), getitem___271770, int_271767)
    
    # Applying the binary operator '<' (line 2929)
    result_lt_271772 = python_operator(stypy.reporting.localization.Localization(__file__, 2929, 14), '<', idx_271766, subscript_call_result_271771)
    
    # Testing the type of an if condition (line 2929)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2929, 8), result_lt_271772)
    # SSA begins for while statement (line 2929)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Subscript to a Name (line 2930):
    
    # Assigning a Subscript to a Name (line 2930):
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 2930)
    idx_271773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 22), 'idx')
    # Getting the type of 'poles' (line 2930)
    poles_271774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2930, 16), 'poles')
    # Obtaining the member '__getitem__' of a type (line 2930)
    getitem___271775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2930, 16), poles_271774, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2930)
    subscript_call_result_271776 = invoke(stypy.reporting.localization.Localization(__file__, 2930, 16), getitem___271775, idx_271773)
    
    # Assigning a type to the variable 'p' (line 2930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2930, 12), 'p', subscript_call_result_271776)
    
    # Assigning a Call to a Subscript (line 2931):
    
    # Assigning a Call to a Subscript (line 2931):
    
    # Call to real(...): (line 2931)
    # Processing the call arguments (line 2931)
    # Getting the type of 'p' (line 2931)
    p_271779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 43), 'p', False)
    # Processing the call keyword arguments (line 2931)
    kwargs_271780 = {}
    # Getting the type of 'np' (line 2931)
    np_271777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 35), 'np', False)
    # Obtaining the member 'real' of a type (line 2931)
    real_271778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2931, 35), np_271777, 'real')
    # Calling real(args, kwargs) (line 2931)
    real_call_result_271781 = invoke(stypy.reporting.localization.Localization(__file__, 2931, 35), real_271778, *[p_271779], **kwargs_271780)
    
    # Getting the type of 'diag_poles' (line 2931)
    diag_poles_271782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 12), 'diag_poles')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2931)
    tuple_271783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2931, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2931)
    # Adding element type (line 2931)
    # Getting the type of 'idx' (line 2931)
    idx_271784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 23), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2931, 23), tuple_271783, idx_271784)
    # Adding element type (line 2931)
    # Getting the type of 'idx' (line 2931)
    idx_271785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 28), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2931, 23), tuple_271783, idx_271785)
    
    # Storing an element on a container (line 2931)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2931, 12), diag_poles_271782, (tuple_271783, real_call_result_271781))
    
    
    
    # Call to isreal(...): (line 2932)
    # Processing the call arguments (line 2932)
    # Getting the type of 'p' (line 2932)
    p_271788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 26), 'p', False)
    # Processing the call keyword arguments (line 2932)
    kwargs_271789 = {}
    # Getting the type of 'np' (line 2932)
    np_271786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 16), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2932)
    isreal_271787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2932, 16), np_271786, 'isreal')
    # Calling isreal(args, kwargs) (line 2932)
    isreal_call_result_271790 = invoke(stypy.reporting.localization.Localization(__file__, 2932, 16), isreal_271787, *[p_271788], **kwargs_271789)
    
    # Applying the '~' unary operator (line 2932)
    result_inv_271791 = python_operator(stypy.reporting.localization.Localization(__file__, 2932, 15), '~', isreal_call_result_271790)
    
    # Testing the type of an if condition (line 2932)
    if_condition_271792 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2932, 12), result_inv_271791)
    # Assigning a type to the variable 'if_condition_271792' (line 2932)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2932, 12), 'if_condition_271792', if_condition_271792)
    # SSA begins for if statement (line 2932)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a UnaryOp to a Subscript (line 2933):
    
    # Assigning a UnaryOp to a Subscript (line 2933):
    
    
    # Call to imag(...): (line 2933)
    # Processing the call arguments (line 2933)
    # Getting the type of 'p' (line 2933)
    p_271795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 50), 'p', False)
    # Processing the call keyword arguments (line 2933)
    kwargs_271796 = {}
    # Getting the type of 'np' (line 2933)
    np_271793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 42), 'np', False)
    # Obtaining the member 'imag' of a type (line 2933)
    imag_271794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2933, 42), np_271793, 'imag')
    # Calling imag(args, kwargs) (line 2933)
    imag_call_result_271797 = invoke(stypy.reporting.localization.Localization(__file__, 2933, 42), imag_271794, *[p_271795], **kwargs_271796)
    
    # Applying the 'usub' unary operator (line 2933)
    result___neg___271798 = python_operator(stypy.reporting.localization.Localization(__file__, 2933, 41), 'usub', imag_call_result_271797)
    
    # Getting the type of 'diag_poles' (line 2933)
    diag_poles_271799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 16), 'diag_poles')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2933)
    tuple_271800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2933, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2933)
    # Adding element type (line 2933)
    # Getting the type of 'idx' (line 2933)
    idx_271801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 27), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2933, 27), tuple_271800, idx_271801)
    # Adding element type (line 2933)
    # Getting the type of 'idx' (line 2933)
    idx_271802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 32), 'idx')
    int_271803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2933, 36), 'int')
    # Applying the binary operator '+' (line 2933)
    result_add_271804 = python_operator(stypy.reporting.localization.Localization(__file__, 2933, 32), '+', idx_271802, int_271803)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2933, 27), tuple_271800, result_add_271804)
    
    # Storing an element on a container (line 2933)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2933, 16), diag_poles_271799, (tuple_271800, result___neg___271798))
    
    # Assigning a Call to a Subscript (line 2934):
    
    # Assigning a Call to a Subscript (line 2934):
    
    # Call to real(...): (line 2934)
    # Processing the call arguments (line 2934)
    # Getting the type of 'p' (line 2934)
    p_271807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 51), 'p', False)
    # Processing the call keyword arguments (line 2934)
    kwargs_271808 = {}
    # Getting the type of 'np' (line 2934)
    np_271805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 43), 'np', False)
    # Obtaining the member 'real' of a type (line 2934)
    real_271806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2934, 43), np_271805, 'real')
    # Calling real(args, kwargs) (line 2934)
    real_call_result_271809 = invoke(stypy.reporting.localization.Localization(__file__, 2934, 43), real_271806, *[p_271807], **kwargs_271808)
    
    # Getting the type of 'diag_poles' (line 2934)
    diag_poles_271810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 16), 'diag_poles')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2934)
    tuple_271811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2934, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2934)
    # Adding element type (line 2934)
    # Getting the type of 'idx' (line 2934)
    idx_271812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 27), 'idx')
    int_271813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2934, 31), 'int')
    # Applying the binary operator '+' (line 2934)
    result_add_271814 = python_operator(stypy.reporting.localization.Localization(__file__, 2934, 27), '+', idx_271812, int_271813)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2934, 27), tuple_271811, result_add_271814)
    # Adding element type (line 2934)
    # Getting the type of 'idx' (line 2934)
    idx_271815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 34), 'idx')
    int_271816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2934, 38), 'int')
    # Applying the binary operator '+' (line 2934)
    result_add_271817 = python_operator(stypy.reporting.localization.Localization(__file__, 2934, 34), '+', idx_271815, int_271816)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2934, 27), tuple_271811, result_add_271817)
    
    # Storing an element on a container (line 2934)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2934, 16), diag_poles_271810, (tuple_271811, real_call_result_271809))
    
    # Assigning a Call to a Subscript (line 2935):
    
    # Assigning a Call to a Subscript (line 2935):
    
    # Call to imag(...): (line 2935)
    # Processing the call arguments (line 2935)
    # Getting the type of 'p' (line 2935)
    p_271820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 49), 'p', False)
    # Processing the call keyword arguments (line 2935)
    kwargs_271821 = {}
    # Getting the type of 'np' (line 2935)
    np_271818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 41), 'np', False)
    # Obtaining the member 'imag' of a type (line 2935)
    imag_271819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2935, 41), np_271818, 'imag')
    # Calling imag(args, kwargs) (line 2935)
    imag_call_result_271822 = invoke(stypy.reporting.localization.Localization(__file__, 2935, 41), imag_271819, *[p_271820], **kwargs_271821)
    
    # Getting the type of 'diag_poles' (line 2935)
    diag_poles_271823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 16), 'diag_poles')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2935)
    tuple_271824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2935, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2935)
    # Adding element type (line 2935)
    # Getting the type of 'idx' (line 2935)
    idx_271825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 27), 'idx')
    int_271826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2935, 31), 'int')
    # Applying the binary operator '+' (line 2935)
    result_add_271827 = python_operator(stypy.reporting.localization.Localization(__file__, 2935, 27), '+', idx_271825, int_271826)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2935, 27), tuple_271824, result_add_271827)
    # Adding element type (line 2935)
    # Getting the type of 'idx' (line 2935)
    idx_271828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2935, 34), 'idx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2935, 27), tuple_271824, idx_271828)
    
    # Storing an element on a container (line 2935)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2935, 16), diag_poles_271823, (tuple_271824, imag_call_result_271822))
    
    # Getting the type of 'idx' (line 2936)
    idx_271829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2936, 16), 'idx')
    int_271830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2936, 23), 'int')
    # Applying the binary operator '+=' (line 2936)
    result_iadd_271831 = python_operator(stypy.reporting.localization.Localization(__file__, 2936, 16), '+=', idx_271829, int_271830)
    # Assigning a type to the variable 'idx' (line 2936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2936, 16), 'idx', result_iadd_271831)
    
    # SSA join for if statement (line 2932)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'idx' (line 2937)
    idx_271832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2937, 12), 'idx')
    int_271833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2937, 19), 'int')
    # Applying the binary operator '+=' (line 2937)
    result_iadd_271834 = python_operator(stypy.reporting.localization.Localization(__file__, 2937, 12), '+=', idx_271832, int_271833)
    # Assigning a type to the variable 'idx' (line 2937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2937, 12), 'idx', result_iadd_271834)
    
    # SSA join for while statement (line 2929)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2938):
    
    # Assigning a Subscript to a Name (line 2938):
    
    # Obtaining the type of the subscript
    int_271835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2938, 65), 'int')
    
    # Call to lstsq(...): (line 2938)
    # Processing the call arguments (line 2938)
    # Getting the type of 'B' (line 2938)
    B_271839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2938, 38), 'B', False)
    # Getting the type of 'diag_poles' (line 2938)
    diag_poles_271840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2938, 41), 'diag_poles', False)
    # Getting the type of 'A' (line 2938)
    A_271841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2938, 52), 'A', False)
    # Applying the binary operator '-' (line 2938)
    result_sub_271842 = python_operator(stypy.reporting.localization.Localization(__file__, 2938, 41), '-', diag_poles_271840, A_271841)
    
    # Processing the call keyword arguments (line 2938)
    int_271843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2938, 61), 'int')
    keyword_271844 = int_271843
    kwargs_271845 = {'rcond': keyword_271844}
    # Getting the type of 'np' (line 2938)
    np_271836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2938, 22), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2938)
    linalg_271837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2938, 22), np_271836, 'linalg')
    # Obtaining the member 'lstsq' of a type (line 2938)
    lstsq_271838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2938, 22), linalg_271837, 'lstsq')
    # Calling lstsq(args, kwargs) (line 2938)
    lstsq_call_result_271846 = invoke(stypy.reporting.localization.Localization(__file__, 2938, 22), lstsq_271838, *[B_271839, result_sub_271842], **kwargs_271845)
    
    # Obtaining the member '__getitem__' of a type (line 2938)
    getitem___271847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2938, 22), lstsq_call_result_271846, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2938)
    subscript_call_result_271848 = invoke(stypy.reporting.localization.Localization(__file__, 2938, 22), getitem___271847, int_271835)
    
    # Assigning a type to the variable 'gain_matrix' (line 2938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2938, 8), 'gain_matrix', subscript_call_result_271848)
    
    # Assigning a Call to a Name (line 2939):
    
    # Assigning a Call to a Name (line 2939):
    
    # Call to eye(...): (line 2939)
    # Processing the call arguments (line 2939)
    
    # Obtaining the type of the subscript
    int_271851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2939, 41), 'int')
    # Getting the type of 'A' (line 2939)
    A_271852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2939, 33), 'A', False)
    # Obtaining the member 'shape' of a type (line 2939)
    shape_271853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2939, 33), A_271852, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2939)
    getitem___271854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2939, 33), shape_271853, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2939)
    subscript_call_result_271855 = invoke(stypy.reporting.localization.Localization(__file__, 2939, 33), getitem___271854, int_271851)
    
    # Processing the call keyword arguments (line 2939)
    kwargs_271856 = {}
    # Getting the type of 'np' (line 2939)
    np_271849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2939, 26), 'np', False)
    # Obtaining the member 'eye' of a type (line 2939)
    eye_271850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2939, 26), np_271849, 'eye')
    # Calling eye(args, kwargs) (line 2939)
    eye_call_result_271857 = invoke(stypy.reporting.localization.Localization(__file__, 2939, 26), eye_271850, *[subscript_call_result_271855], **kwargs_271856)
    
    # Assigning a type to the variable 'transfer_matrix' (line 2939)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2939, 8), 'transfer_matrix', eye_call_result_271857)
    
    # Assigning a Attribute to a Name (line 2940):
    
    # Assigning a Attribute to a Name (line 2940):
    # Getting the type of 'np' (line 2940)
    np_271858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2940, 19), 'np')
    # Obtaining the member 'nan' of a type (line 2940)
    nan_271859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2940, 19), np_271858, 'nan')
    # Assigning a type to the variable 'cur_rtol' (line 2940)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2940, 8), 'cur_rtol', nan_271859)
    
    # Assigning a Attribute to a Name (line 2941):
    
    # Assigning a Attribute to a Name (line 2941):
    # Getting the type of 'np' (line 2941)
    np_271860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2941, 18), 'np')
    # Obtaining the member 'nan' of a type (line 2941)
    nan_271861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2941, 18), np_271860, 'nan')
    # Assigning a type to the variable 'nb_iter' (line 2941)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2941, 8), 'nb_iter', nan_271861)
    # SSA branch for the else part of an if statement (line 2907)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a List to a Name (line 2946):
    
    # Assigning a List to a Name (line 2946):
    
    # Obtaining an instance of the builtin type 'list' (line 2946)
    list_271862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2946, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2946)
    
    # Assigning a type to the variable 'ker_pole' (line 2946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2946, 8), 'ker_pole', list_271862)
    
    # Assigning a Name to a Name (line 2949):
    
    # Assigning a Name to a Name (line 2949):
    # Getting the type of 'False' (line 2949)
    False_271863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 25), 'False')
    # Assigning a type to the variable 'skip_conjugate' (line 2949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2949, 8), 'skip_conjugate', False_271863)
    
    
    # Call to range(...): (line 2952)
    # Processing the call arguments (line 2952)
    
    # Obtaining the type of the subscript
    int_271865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2952, 31), 'int')
    # Getting the type of 'B' (line 2952)
    B_271866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2952, 23), 'B', False)
    # Obtaining the member 'shape' of a type (line 2952)
    shape_271867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2952, 23), B_271866, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2952)
    getitem___271868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2952, 23), shape_271867, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2952)
    subscript_call_result_271869 = invoke(stypy.reporting.localization.Localization(__file__, 2952, 23), getitem___271868, int_271865)
    
    # Processing the call keyword arguments (line 2952)
    kwargs_271870 = {}
    # Getting the type of 'range' (line 2952)
    range_271864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2952, 17), 'range', False)
    # Calling range(args, kwargs) (line 2952)
    range_call_result_271871 = invoke(stypy.reporting.localization.Localization(__file__, 2952, 17), range_271864, *[subscript_call_result_271869], **kwargs_271870)
    
    # Testing the type of a for loop iterable (line 2952)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2952, 8), range_call_result_271871)
    # Getting the type of the for loop variable (line 2952)
    for_loop_var_271872 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2952, 8), range_call_result_271871)
    # Assigning a type to the variable 'j' (line 2952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2952, 8), 'j', for_loop_var_271872)
    # SSA begins for a for statement (line 2952)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'skip_conjugate' (line 2953)
    skip_conjugate_271873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2953, 15), 'skip_conjugate')
    # Testing the type of an if condition (line 2953)
    if_condition_271874 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2953, 12), skip_conjugate_271873)
    # Assigning a type to the variable 'if_condition_271874' (line 2953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2953, 12), 'if_condition_271874', if_condition_271874)
    # SSA begins for if statement (line 2953)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2954):
    
    # Assigning a Name to a Name (line 2954):
    # Getting the type of 'False' (line 2954)
    False_271875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 33), 'False')
    # Assigning a type to the variable 'skip_conjugate' (line 2954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2954, 16), 'skip_conjugate', False_271875)
    # SSA join for if statement (line 2953)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 2956):
    
    # Assigning a Attribute to a Name (line 2956):
    
    # Call to dot(...): (line 2956)
    # Processing the call arguments (line 2956)
    # Getting the type of 'u1' (line 2956)
    u1_271878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 34), 'u1', False)
    # Obtaining the member 'T' of a type (line 2956)
    T_271879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 34), u1_271878, 'T')
    # Getting the type of 'A' (line 2956)
    A_271880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 40), 'A', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2956)
    j_271881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 48), 'j', False)
    # Getting the type of 'poles' (line 2956)
    poles_271882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 42), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2956)
    getitem___271883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 42), poles_271882, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2956)
    subscript_call_result_271884 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 42), getitem___271883, j_271881)
    
    
    # Call to eye(...): (line 2956)
    # Processing the call arguments (line 2956)
    
    # Obtaining the type of the subscript
    int_271887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 66), 'int')
    # Getting the type of 'B' (line 2956)
    B_271888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 58), 'B', False)
    # Obtaining the member 'shape' of a type (line 2956)
    shape_271889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 58), B_271888, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2956)
    getitem___271890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 58), shape_271889, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2956)
    subscript_call_result_271891 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 58), getitem___271890, int_271887)
    
    # Processing the call keyword arguments (line 2956)
    kwargs_271892 = {}
    # Getting the type of 'np' (line 2956)
    np_271885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 51), 'np', False)
    # Obtaining the member 'eye' of a type (line 2956)
    eye_271886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 51), np_271885, 'eye')
    # Calling eye(args, kwargs) (line 2956)
    eye_call_result_271893 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 51), eye_271886, *[subscript_call_result_271891], **kwargs_271892)
    
    # Applying the binary operator '*' (line 2956)
    result_mul_271894 = python_operator(stypy.reporting.localization.Localization(__file__, 2956, 42), '*', subscript_call_result_271884, eye_call_result_271893)
    
    # Applying the binary operator '-' (line 2956)
    result_sub_271895 = python_operator(stypy.reporting.localization.Localization(__file__, 2956, 40), '-', A_271880, result_mul_271894)
    
    # Processing the call keyword arguments (line 2956)
    kwargs_271896 = {}
    # Getting the type of 'np' (line 2956)
    np_271876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 27), 'np', False)
    # Obtaining the member 'dot' of a type (line 2956)
    dot_271877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 27), np_271876, 'dot')
    # Calling dot(args, kwargs) (line 2956)
    dot_call_result_271897 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 27), dot_271877, *[T_271879, result_sub_271895], **kwargs_271896)
    
    # Obtaining the member 'T' of a type (line 2956)
    T_271898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 27), dot_call_result_271897, 'T')
    # Assigning a type to the variable 'pole_space_j' (line 2956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2956, 12), 'pole_space_j', T_271898)
    
    # Assigning a Call to a Tuple (line 2966):
    
    # Assigning a Subscript to a Name (line 2966):
    
    # Obtaining the type of the subscript
    int_271899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2966, 12), 'int')
    
    # Call to s_qr(...): (line 2966)
    # Processing the call arguments (line 2966)
    # Getting the type of 'pole_space_j' (line 2966)
    pole_space_j_271901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 24), 'pole_space_j', False)
    # Processing the call keyword arguments (line 2966)
    str_271902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2966, 43), 'str', 'full')
    keyword_271903 = str_271902
    kwargs_271904 = {'mode': keyword_271903}
    # Getting the type of 's_qr' (line 2966)
    s_qr_271900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 19), 's_qr', False)
    # Calling s_qr(args, kwargs) (line 2966)
    s_qr_call_result_271905 = invoke(stypy.reporting.localization.Localization(__file__, 2966, 19), s_qr_271900, *[pole_space_j_271901], **kwargs_271904)
    
    # Obtaining the member '__getitem__' of a type (line 2966)
    getitem___271906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2966, 12), s_qr_call_result_271905, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2966)
    subscript_call_result_271907 = invoke(stypy.reporting.localization.Localization(__file__, 2966, 12), getitem___271906, int_271899)
    
    # Assigning a type to the variable 'tuple_var_assignment_267151' (line 2966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2966, 12), 'tuple_var_assignment_267151', subscript_call_result_271907)
    
    # Assigning a Subscript to a Name (line 2966):
    
    # Obtaining the type of the subscript
    int_271908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2966, 12), 'int')
    
    # Call to s_qr(...): (line 2966)
    # Processing the call arguments (line 2966)
    # Getting the type of 'pole_space_j' (line 2966)
    pole_space_j_271910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 24), 'pole_space_j', False)
    # Processing the call keyword arguments (line 2966)
    str_271911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2966, 43), 'str', 'full')
    keyword_271912 = str_271911
    kwargs_271913 = {'mode': keyword_271912}
    # Getting the type of 's_qr' (line 2966)
    s_qr_271909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 19), 's_qr', False)
    # Calling s_qr(args, kwargs) (line 2966)
    s_qr_call_result_271914 = invoke(stypy.reporting.localization.Localization(__file__, 2966, 19), s_qr_271909, *[pole_space_j_271910], **kwargs_271913)
    
    # Obtaining the member '__getitem__' of a type (line 2966)
    getitem___271915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2966, 12), s_qr_call_result_271914, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2966)
    subscript_call_result_271916 = invoke(stypy.reporting.localization.Localization(__file__, 2966, 12), getitem___271915, int_271908)
    
    # Assigning a type to the variable 'tuple_var_assignment_267152' (line 2966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2966, 12), 'tuple_var_assignment_267152', subscript_call_result_271916)
    
    # Assigning a Name to a Name (line 2966):
    # Getting the type of 'tuple_var_assignment_267151' (line 2966)
    tuple_var_assignment_267151_271917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 12), 'tuple_var_assignment_267151')
    # Assigning a type to the variable 'Q' (line 2966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2966, 12), 'Q', tuple_var_assignment_267151_271917)
    
    # Assigning a Name to a Name (line 2966):
    # Getting the type of 'tuple_var_assignment_267152' (line 2966)
    tuple_var_assignment_267152_271918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 12), 'tuple_var_assignment_267152')
    # Assigning a type to the variable '_' (line 2966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2966, 15), '_', tuple_var_assignment_267152_271918)
    
    # Assigning a Subscript to a Name (line 2968):
    
    # Assigning a Subscript to a Name (line 2968):
    
    # Obtaining the type of the subscript
    slice_271919 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2968, 25), None, None, None)
    
    # Obtaining the type of the subscript
    int_271920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2968, 49), 'int')
    # Getting the type of 'pole_space_j' (line 2968)
    pole_space_j_271921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 30), 'pole_space_j')
    # Obtaining the member 'shape' of a type (line 2968)
    shape_271922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2968, 30), pole_space_j_271921, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2968)
    getitem___271923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2968, 30), shape_271922, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2968)
    subscript_call_result_271924 = invoke(stypy.reporting.localization.Localization(__file__, 2968, 30), getitem___271923, int_271920)
    
    slice_271925 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2968, 25), subscript_call_result_271924, None, None)
    # Getting the type of 'Q' (line 2968)
    Q_271926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 25), 'Q')
    # Obtaining the member '__getitem__' of a type (line 2968)
    getitem___271927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2968, 25), Q_271926, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2968)
    subscript_call_result_271928 = invoke(stypy.reporting.localization.Localization(__file__, 2968, 25), getitem___271927, (slice_271919, slice_271925))
    
    # Assigning a type to the variable 'ker_pole_j' (line 2968)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2968, 12), 'ker_pole_j', subscript_call_result_271928)
    
    # Assigning a Subscript to a Name (line 2986):
    
    # Assigning a Subscript to a Name (line 2986):
    
    # Obtaining the type of the subscript
    slice_271929 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2986, 32), None, None, None)
    # Getting the type of 'np' (line 2986)
    np_271930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 62), 'np')
    # Obtaining the member 'newaxis' of a type (line 2986)
    newaxis_271931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2986, 62), np_271930, 'newaxis')
    
    # Call to sum(...): (line 2986)
    # Processing the call arguments (line 2986)
    # Getting the type of 'ker_pole_j' (line 2986)
    ker_pole_j_271934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 39), 'ker_pole_j', False)
    # Processing the call keyword arguments (line 2986)
    int_271935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2986, 56), 'int')
    keyword_271936 = int_271935
    kwargs_271937 = {'axis': keyword_271936}
    # Getting the type of 'np' (line 2986)
    np_271932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 32), 'np', False)
    # Obtaining the member 'sum' of a type (line 2986)
    sum_271933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2986, 32), np_271932, 'sum')
    # Calling sum(args, kwargs) (line 2986)
    sum_call_result_271938 = invoke(stypy.reporting.localization.Localization(__file__, 2986, 32), sum_271933, *[ker_pole_j_271934], **kwargs_271937)
    
    # Obtaining the member '__getitem__' of a type (line 2986)
    getitem___271939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2986, 32), sum_call_result_271938, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2986)
    subscript_call_result_271940 = invoke(stypy.reporting.localization.Localization(__file__, 2986, 32), getitem___271939, (slice_271929, newaxis_271931))
    
    # Assigning a type to the variable 'transfer_matrix_j' (line 2986)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2986, 12), 'transfer_matrix_j', subscript_call_result_271940)
    
    # Assigning a BinOp to a Name (line 2987):
    
    # Assigning a BinOp to a Name (line 2987):
    # Getting the type of 'transfer_matrix_j' (line 2987)
    transfer_matrix_j_271941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 33), 'transfer_matrix_j')
    
    # Call to norm(...): (line 2988)
    # Processing the call arguments (line 2988)
    # Getting the type of 'transfer_matrix_j' (line 2988)
    transfer_matrix_j_271945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2988, 48), 'transfer_matrix_j', False)
    # Processing the call keyword arguments (line 2988)
    kwargs_271946 = {}
    # Getting the type of 'np' (line 2988)
    np_271942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2988, 33), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2988)
    linalg_271943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2988, 33), np_271942, 'linalg')
    # Obtaining the member 'norm' of a type (line 2988)
    norm_271944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2988, 33), linalg_271943, 'norm')
    # Calling norm(args, kwargs) (line 2988)
    norm_call_result_271947 = invoke(stypy.reporting.localization.Localization(__file__, 2988, 33), norm_271944, *[transfer_matrix_j_271945], **kwargs_271946)
    
    # Applying the binary operator 'div' (line 2987)
    result_div_271948 = python_operator(stypy.reporting.localization.Localization(__file__, 2987, 33), 'div', transfer_matrix_j_271941, norm_call_result_271947)
    
    # Assigning a type to the variable 'transfer_matrix_j' (line 2987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2987, 12), 'transfer_matrix_j', result_div_271948)
    
    
    
    # Call to isreal(...): (line 2989)
    # Processing the call arguments (line 2989)
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 2989)
    j_271951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2989, 32), 'j', False)
    # Getting the type of 'poles' (line 2989)
    poles_271952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2989, 26), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 2989)
    getitem___271953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2989, 26), poles_271952, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2989)
    subscript_call_result_271954 = invoke(stypy.reporting.localization.Localization(__file__, 2989, 26), getitem___271953, j_271951)
    
    # Processing the call keyword arguments (line 2989)
    kwargs_271955 = {}
    # Getting the type of 'np' (line 2989)
    np_271949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2989, 16), 'np', False)
    # Obtaining the member 'isreal' of a type (line 2989)
    isreal_271950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2989, 16), np_271949, 'isreal')
    # Calling isreal(args, kwargs) (line 2989)
    isreal_call_result_271956 = invoke(stypy.reporting.localization.Localization(__file__, 2989, 16), isreal_271950, *[subscript_call_result_271954], **kwargs_271955)
    
    # Applying the '~' unary operator (line 2989)
    result_inv_271957 = python_operator(stypy.reporting.localization.Localization(__file__, 2989, 15), '~', isreal_call_result_271956)
    
    # Testing the type of an if condition (line 2989)
    if_condition_271958 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2989, 12), result_inv_271957)
    # Assigning a type to the variable 'if_condition_271958' (line 2989)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2989, 12), 'if_condition_271958', if_condition_271958)
    # SSA begins for if statement (line 2989)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2990):
    
    # Assigning a Call to a Name (line 2990):
    
    # Call to hstack(...): (line 2990)
    # Processing the call arguments (line 2990)
    
    # Obtaining an instance of the builtin type 'list' (line 2990)
    list_271961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2990, 46), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2990)
    # Adding element type (line 2990)
    
    # Call to real(...): (line 2990)
    # Processing the call arguments (line 2990)
    # Getting the type of 'transfer_matrix_j' (line 2990)
    transfer_matrix_j_271964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 55), 'transfer_matrix_j', False)
    # Processing the call keyword arguments (line 2990)
    kwargs_271965 = {}
    # Getting the type of 'np' (line 2990)
    np_271962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 47), 'np', False)
    # Obtaining the member 'real' of a type (line 2990)
    real_271963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2990, 47), np_271962, 'real')
    # Calling real(args, kwargs) (line 2990)
    real_call_result_271966 = invoke(stypy.reporting.localization.Localization(__file__, 2990, 47), real_271963, *[transfer_matrix_j_271964], **kwargs_271965)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2990, 46), list_271961, real_call_result_271966)
    # Adding element type (line 2990)
    
    # Call to imag(...): (line 2991)
    # Processing the call arguments (line 2991)
    # Getting the type of 'transfer_matrix_j' (line 2991)
    transfer_matrix_j_271969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2991, 55), 'transfer_matrix_j', False)
    # Processing the call keyword arguments (line 2991)
    kwargs_271970 = {}
    # Getting the type of 'np' (line 2991)
    np_271967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2991, 47), 'np', False)
    # Obtaining the member 'imag' of a type (line 2991)
    imag_271968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2991, 47), np_271967, 'imag')
    # Calling imag(args, kwargs) (line 2991)
    imag_call_result_271971 = invoke(stypy.reporting.localization.Localization(__file__, 2991, 47), imag_271968, *[transfer_matrix_j_271969], **kwargs_271970)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2990, 46), list_271961, imag_call_result_271971)
    
    # Processing the call keyword arguments (line 2990)
    kwargs_271972 = {}
    # Getting the type of 'np' (line 2990)
    np_271959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2990, 36), 'np', False)
    # Obtaining the member 'hstack' of a type (line 2990)
    hstack_271960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2990, 36), np_271959, 'hstack')
    # Calling hstack(args, kwargs) (line 2990)
    hstack_call_result_271973 = invoke(stypy.reporting.localization.Localization(__file__, 2990, 36), hstack_271960, *[list_271961], **kwargs_271972)
    
    # Assigning a type to the variable 'transfer_matrix_j' (line 2990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2990, 16), 'transfer_matrix_j', hstack_call_result_271973)
    
    # Call to extend(...): (line 2992)
    # Processing the call arguments (line 2992)
    
    # Obtaining an instance of the builtin type 'list' (line 2992)
    list_271976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2992, 32), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2992)
    # Adding element type (line 2992)
    # Getting the type of 'ker_pole_j' (line 2992)
    ker_pole_j_271977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 33), 'ker_pole_j', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2992, 32), list_271976, ker_pole_j_271977)
    # Adding element type (line 2992)
    # Getting the type of 'ker_pole_j' (line 2992)
    ker_pole_j_271978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 45), 'ker_pole_j', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2992, 32), list_271976, ker_pole_j_271978)
    
    # Processing the call keyword arguments (line 2992)
    kwargs_271979 = {}
    # Getting the type of 'ker_pole' (line 2992)
    ker_pole_271974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 16), 'ker_pole', False)
    # Obtaining the member 'extend' of a type (line 2992)
    extend_271975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2992, 16), ker_pole_271974, 'extend')
    # Calling extend(args, kwargs) (line 2992)
    extend_call_result_271980 = invoke(stypy.reporting.localization.Localization(__file__, 2992, 16), extend_271975, *[list_271976], **kwargs_271979)
    
    
    # Assigning a Name to a Name (line 2995):
    
    # Assigning a Name to a Name (line 2995):
    # Getting the type of 'True' (line 2995)
    True_271981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 33), 'True')
    # Assigning a type to the variable 'skip_conjugate' (line 2995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2995, 16), 'skip_conjugate', True_271981)
    # SSA branch for the else part of an if statement (line 2989)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 2997)
    # Processing the call arguments (line 2997)
    # Getting the type of 'ker_pole_j' (line 2997)
    ker_pole_j_271984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2997, 32), 'ker_pole_j', False)
    # Processing the call keyword arguments (line 2997)
    kwargs_271985 = {}
    # Getting the type of 'ker_pole' (line 2997)
    ker_pole_271982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2997, 16), 'ker_pole', False)
    # Obtaining the member 'append' of a type (line 2997)
    append_271983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2997, 16), ker_pole_271982, 'append')
    # Calling append(args, kwargs) (line 2997)
    append_call_result_271986 = invoke(stypy.reporting.localization.Localization(__file__, 2997, 16), append_271983, *[ker_pole_j_271984], **kwargs_271985)
    
    # SSA join for if statement (line 2989)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'j' (line 2999)
    j_271987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2999, 15), 'j')
    int_271988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2999, 20), 'int')
    # Applying the binary operator '==' (line 2999)
    result_eq_271989 = python_operator(stypy.reporting.localization.Localization(__file__, 2999, 15), '==', j_271987, int_271988)
    
    # Testing the type of an if condition (line 2999)
    if_condition_271990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2999, 12), result_eq_271989)
    # Assigning a type to the variable 'if_condition_271990' (line 2999)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2999, 12), 'if_condition_271990', if_condition_271990)
    # SSA begins for if statement (line 2999)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 3000):
    
    # Assigning a Name to a Name (line 3000):
    # Getting the type of 'transfer_matrix_j' (line 3000)
    transfer_matrix_j_271991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 34), 'transfer_matrix_j')
    # Assigning a type to the variable 'transfer_matrix' (line 3000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3000, 16), 'transfer_matrix', transfer_matrix_j_271991)
    # SSA branch for the else part of an if statement (line 2999)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3002):
    
    # Assigning a Call to a Name (line 3002):
    
    # Call to hstack(...): (line 3002)
    # Processing the call arguments (line 3002)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3002)
    tuple_271994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3002, 45), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3002)
    # Adding element type (line 3002)
    # Getting the type of 'transfer_matrix' (line 3002)
    transfer_matrix_271995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 45), 'transfer_matrix', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3002, 45), tuple_271994, transfer_matrix_271995)
    # Adding element type (line 3002)
    # Getting the type of 'transfer_matrix_j' (line 3002)
    transfer_matrix_j_271996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 62), 'transfer_matrix_j', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3002, 45), tuple_271994, transfer_matrix_j_271996)
    
    # Processing the call keyword arguments (line 3002)
    kwargs_271997 = {}
    # Getting the type of 'np' (line 3002)
    np_271992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 34), 'np', False)
    # Obtaining the member 'hstack' of a type (line 3002)
    hstack_271993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3002, 34), np_271992, 'hstack')
    # Calling hstack(args, kwargs) (line 3002)
    hstack_call_result_271998 = invoke(stypy.reporting.localization.Localization(__file__, 3002, 34), hstack_271993, *[tuple_271994], **kwargs_271997)
    
    # Assigning a type to the variable 'transfer_matrix' (line 3002)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3002, 16), 'transfer_matrix', hstack_call_result_271998)
    # SSA join for if statement (line 2999)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'rankB' (line 3004)
    rankB_271999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 11), 'rankB')
    int_272000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3004, 19), 'int')
    # Applying the binary operator '>' (line 3004)
    result_gt_272001 = python_operator(stypy.reporting.localization.Localization(__file__, 3004, 11), '>', rankB_271999, int_272000)
    
    # Testing the type of an if condition (line 3004)
    if_condition_272002 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3004, 8), result_gt_272001)
    # Assigning a type to the variable 'if_condition_272002' (line 3004)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3004, 8), 'if_condition_272002', if_condition_272002)
    # SSA begins for if statement (line 3004)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 3005):
    
    # Assigning a Subscript to a Name (line 3005):
    
    # Obtaining the type of the subscript
    int_272003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3005, 12), 'int')
    
    # Call to update_loop(...): (line 3005)
    # Processing the call arguments (line 3005)
    # Getting the type of 'ker_pole' (line 3005)
    ker_pole_272005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 50), 'ker_pole', False)
    # Getting the type of 'transfer_matrix' (line 3005)
    transfer_matrix_272006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 60), 'transfer_matrix', False)
    # Getting the type of 'poles' (line 3006)
    poles_272007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 50), 'poles', False)
    # Getting the type of 'B' (line 3006)
    B_272008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 57), 'B', False)
    # Getting the type of 'maxiter' (line 3006)
    maxiter_272009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 60), 'maxiter', False)
    # Getting the type of 'rtol' (line 3006)
    rtol_272010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 69), 'rtol', False)
    # Processing the call keyword arguments (line 3005)
    kwargs_272011 = {}
    # Getting the type of 'update_loop' (line 3005)
    update_loop_272004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 38), 'update_loop', False)
    # Calling update_loop(args, kwargs) (line 3005)
    update_loop_call_result_272012 = invoke(stypy.reporting.localization.Localization(__file__, 3005, 38), update_loop_272004, *[ker_pole_272005, transfer_matrix_272006, poles_272007, B_272008, maxiter_272009, rtol_272010], **kwargs_272011)
    
    # Obtaining the member '__getitem__' of a type (line 3005)
    getitem___272013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3005, 12), update_loop_call_result_272012, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3005)
    subscript_call_result_272014 = invoke(stypy.reporting.localization.Localization(__file__, 3005, 12), getitem___272013, int_272003)
    
    # Assigning a type to the variable 'tuple_var_assignment_267153' (line 3005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3005, 12), 'tuple_var_assignment_267153', subscript_call_result_272014)
    
    # Assigning a Subscript to a Name (line 3005):
    
    # Obtaining the type of the subscript
    int_272015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3005, 12), 'int')
    
    # Call to update_loop(...): (line 3005)
    # Processing the call arguments (line 3005)
    # Getting the type of 'ker_pole' (line 3005)
    ker_pole_272017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 50), 'ker_pole', False)
    # Getting the type of 'transfer_matrix' (line 3005)
    transfer_matrix_272018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 60), 'transfer_matrix', False)
    # Getting the type of 'poles' (line 3006)
    poles_272019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 50), 'poles', False)
    # Getting the type of 'B' (line 3006)
    B_272020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 57), 'B', False)
    # Getting the type of 'maxiter' (line 3006)
    maxiter_272021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 60), 'maxiter', False)
    # Getting the type of 'rtol' (line 3006)
    rtol_272022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 69), 'rtol', False)
    # Processing the call keyword arguments (line 3005)
    kwargs_272023 = {}
    # Getting the type of 'update_loop' (line 3005)
    update_loop_272016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 38), 'update_loop', False)
    # Calling update_loop(args, kwargs) (line 3005)
    update_loop_call_result_272024 = invoke(stypy.reporting.localization.Localization(__file__, 3005, 38), update_loop_272016, *[ker_pole_272017, transfer_matrix_272018, poles_272019, B_272020, maxiter_272021, rtol_272022], **kwargs_272023)
    
    # Obtaining the member '__getitem__' of a type (line 3005)
    getitem___272025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3005, 12), update_loop_call_result_272024, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3005)
    subscript_call_result_272026 = invoke(stypy.reporting.localization.Localization(__file__, 3005, 12), getitem___272025, int_272015)
    
    # Assigning a type to the variable 'tuple_var_assignment_267154' (line 3005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3005, 12), 'tuple_var_assignment_267154', subscript_call_result_272026)
    
    # Assigning a Subscript to a Name (line 3005):
    
    # Obtaining the type of the subscript
    int_272027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3005, 12), 'int')
    
    # Call to update_loop(...): (line 3005)
    # Processing the call arguments (line 3005)
    # Getting the type of 'ker_pole' (line 3005)
    ker_pole_272029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 50), 'ker_pole', False)
    # Getting the type of 'transfer_matrix' (line 3005)
    transfer_matrix_272030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 60), 'transfer_matrix', False)
    # Getting the type of 'poles' (line 3006)
    poles_272031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 50), 'poles', False)
    # Getting the type of 'B' (line 3006)
    B_272032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 57), 'B', False)
    # Getting the type of 'maxiter' (line 3006)
    maxiter_272033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 60), 'maxiter', False)
    # Getting the type of 'rtol' (line 3006)
    rtol_272034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 69), 'rtol', False)
    # Processing the call keyword arguments (line 3005)
    kwargs_272035 = {}
    # Getting the type of 'update_loop' (line 3005)
    update_loop_272028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 38), 'update_loop', False)
    # Calling update_loop(args, kwargs) (line 3005)
    update_loop_call_result_272036 = invoke(stypy.reporting.localization.Localization(__file__, 3005, 38), update_loop_272028, *[ker_pole_272029, transfer_matrix_272030, poles_272031, B_272032, maxiter_272033, rtol_272034], **kwargs_272035)
    
    # Obtaining the member '__getitem__' of a type (line 3005)
    getitem___272037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3005, 12), update_loop_call_result_272036, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3005)
    subscript_call_result_272038 = invoke(stypy.reporting.localization.Localization(__file__, 3005, 12), getitem___272037, int_272027)
    
    # Assigning a type to the variable 'tuple_var_assignment_267155' (line 3005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3005, 12), 'tuple_var_assignment_267155', subscript_call_result_272038)
    
    # Assigning a Name to a Name (line 3005):
    # Getting the type of 'tuple_var_assignment_267153' (line 3005)
    tuple_var_assignment_267153_272039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 12), 'tuple_var_assignment_267153')
    # Assigning a type to the variable 'stop' (line 3005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3005, 12), 'stop', tuple_var_assignment_267153_272039)
    
    # Assigning a Name to a Name (line 3005):
    # Getting the type of 'tuple_var_assignment_267154' (line 3005)
    tuple_var_assignment_267154_272040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 12), 'tuple_var_assignment_267154')
    # Assigning a type to the variable 'cur_rtol' (line 3005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3005, 18), 'cur_rtol', tuple_var_assignment_267154_272040)
    
    # Assigning a Name to a Name (line 3005):
    # Getting the type of 'tuple_var_assignment_267155' (line 3005)
    tuple_var_assignment_267155_272041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 12), 'tuple_var_assignment_267155')
    # Assigning a type to the variable 'nb_iter' (line 3005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3005, 28), 'nb_iter', tuple_var_assignment_267155_272041)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'stop' (line 3007)
    stop_272042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 19), 'stop')
    # Applying the 'not' unary operator (line 3007)
    result_not__272043 = python_operator(stypy.reporting.localization.Localization(__file__, 3007, 15), 'not', stop_272042)
    
    
    # Getting the type of 'rtol' (line 3007)
    rtol_272044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 28), 'rtol')
    int_272045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3007, 35), 'int')
    # Applying the binary operator '>' (line 3007)
    result_gt_272046 = python_operator(stypy.reporting.localization.Localization(__file__, 3007, 28), '>', rtol_272044, int_272045)
    
    # Applying the binary operator 'and' (line 3007)
    result_and_keyword_272047 = python_operator(stypy.reporting.localization.Localization(__file__, 3007, 15), 'and', result_not__272043, result_gt_272046)
    
    # Testing the type of an if condition (line 3007)
    if_condition_272048 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3007, 12), result_and_keyword_272047)
    # Assigning a type to the variable 'if_condition_272048' (line 3007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3007, 12), 'if_condition_272048', if_condition_272048)
    # SSA begins for if statement (line 3007)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3010):
    
    # Assigning a BinOp to a Name (line 3010):
    str_272049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3011, 20), 'str', 'Convergence was not reached after maxiter iterations.\nYou asked for a relative tolerance of %f we got %f')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3013)
    tuple_272050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3013, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3013)
    # Adding element type (line 3013)
    # Getting the type of 'rtol' (line 3013)
    rtol_272051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 21), 'rtol')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3013, 21), tuple_272050, rtol_272051)
    # Adding element type (line 3013)
    # Getting the type of 'cur_rtol' (line 3013)
    cur_rtol_272052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 27), 'cur_rtol')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3013, 21), tuple_272050, cur_rtol_272052)
    
    # Applying the binary operator '%' (line 3011)
    result_mod_272053 = python_operator(stypy.reporting.localization.Localization(__file__, 3011, 20), '%', str_272049, tuple_272050)
    
    # Assigning a type to the variable 'err_msg' (line 3010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3010, 16), 'err_msg', result_mod_272053)
    
    # Call to warn(...): (line 3015)
    # Processing the call arguments (line 3015)
    # Getting the type of 'err_msg' (line 3015)
    err_msg_272056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 30), 'err_msg', False)
    # Processing the call keyword arguments (line 3015)
    kwargs_272057 = {}
    # Getting the type of 'warnings' (line 3015)
    warnings_272054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 16), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 3015)
    warn_272055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3015, 16), warnings_272054, 'warn')
    # Calling warn(args, kwargs) (line 3015)
    warn_call_result_272058 = invoke(stypy.reporting.localization.Localization(__file__, 3015, 16), warn_272055, *[err_msg_272056], **kwargs_272057)
    
    # SSA join for if statement (line 3007)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3004)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3020):
    
    # Assigning a Call to a Name (line 3020):
    
    # Call to astype(...): (line 3020)
    # Processing the call arguments (line 3020)
    # Getting the type of 'complex' (line 3020)
    complex_272061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 49), 'complex', False)
    # Processing the call keyword arguments (line 3020)
    kwargs_272062 = {}
    # Getting the type of 'transfer_matrix' (line 3020)
    transfer_matrix_272059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 26), 'transfer_matrix', False)
    # Obtaining the member 'astype' of a type (line 3020)
    astype_272060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3020, 26), transfer_matrix_272059, 'astype')
    # Calling astype(args, kwargs) (line 3020)
    astype_call_result_272063 = invoke(stypy.reporting.localization.Localization(__file__, 3020, 26), astype_272060, *[complex_272061], **kwargs_272062)
    
    # Assigning a type to the variable 'transfer_matrix' (line 3020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3020, 8), 'transfer_matrix', astype_call_result_272063)
    
    # Assigning a Num to a Name (line 3021):
    
    # Assigning a Num to a Name (line 3021):
    int_272064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3021, 14), 'int')
    # Assigning a type to the variable 'idx' (line 3021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3021, 8), 'idx', int_272064)
    
    
    # Getting the type of 'idx' (line 3022)
    idx_272065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3022, 14), 'idx')
    
    # Obtaining the type of the subscript
    int_272066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3022, 32), 'int')
    # Getting the type of 'poles' (line 3022)
    poles_272067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3022, 20), 'poles')
    # Obtaining the member 'shape' of a type (line 3022)
    shape_272068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3022, 20), poles_272067, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3022)
    getitem___272069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3022, 20), shape_272068, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3022)
    subscript_call_result_272070 = invoke(stypy.reporting.localization.Localization(__file__, 3022, 20), getitem___272069, int_272066)
    
    int_272071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3022, 35), 'int')
    # Applying the binary operator '-' (line 3022)
    result_sub_272072 = python_operator(stypy.reporting.localization.Localization(__file__, 3022, 20), '-', subscript_call_result_272070, int_272071)
    
    # Applying the binary operator '<' (line 3022)
    result_lt_272073 = python_operator(stypy.reporting.localization.Localization(__file__, 3022, 14), '<', idx_272065, result_sub_272072)
    
    # Testing the type of an if condition (line 3022)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3022, 8), result_lt_272073)
    # SSA begins for while statement (line 3022)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    
    
    # Call to isreal(...): (line 3023)
    # Processing the call arguments (line 3023)
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 3023)
    idx_272076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3023, 32), 'idx', False)
    # Getting the type of 'poles' (line 3023)
    poles_272077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3023, 26), 'poles', False)
    # Obtaining the member '__getitem__' of a type (line 3023)
    getitem___272078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3023, 26), poles_272077, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3023)
    subscript_call_result_272079 = invoke(stypy.reporting.localization.Localization(__file__, 3023, 26), getitem___272078, idx_272076)
    
    # Processing the call keyword arguments (line 3023)
    kwargs_272080 = {}
    # Getting the type of 'np' (line 3023)
    np_272074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3023, 16), 'np', False)
    # Obtaining the member 'isreal' of a type (line 3023)
    isreal_272075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3023, 16), np_272074, 'isreal')
    # Calling isreal(args, kwargs) (line 3023)
    isreal_call_result_272081 = invoke(stypy.reporting.localization.Localization(__file__, 3023, 16), isreal_272075, *[subscript_call_result_272079], **kwargs_272080)
    
    # Applying the '~' unary operator (line 3023)
    result_inv_272082 = python_operator(stypy.reporting.localization.Localization(__file__, 3023, 15), '~', isreal_call_result_272081)
    
    # Testing the type of an if condition (line 3023)
    if_condition_272083 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3023, 12), result_inv_272082)
    # Assigning a type to the variable 'if_condition_272083' (line 3023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3023, 12), 'if_condition_272083', if_condition_272083)
    # SSA begins for if statement (line 3023)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3024):
    
    # Assigning a Call to a Name (line 3024):
    
    # Call to copy(...): (line 3024)
    # Processing the call keyword arguments (line 3024)
    kwargs_272090 = {}
    
    # Obtaining the type of the subscript
    slice_272084 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3024, 22), None, None, None)
    # Getting the type of 'idx' (line 3024)
    idx_272085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 41), 'idx', False)
    # Getting the type of 'transfer_matrix' (line 3024)
    transfer_matrix_272086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 22), 'transfer_matrix', False)
    # Obtaining the member '__getitem__' of a type (line 3024)
    getitem___272087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3024, 22), transfer_matrix_272086, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3024)
    subscript_call_result_272088 = invoke(stypy.reporting.localization.Localization(__file__, 3024, 22), getitem___272087, (slice_272084, idx_272085))
    
    # Obtaining the member 'copy' of a type (line 3024)
    copy_272089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3024, 22), subscript_call_result_272088, 'copy')
    # Calling copy(args, kwargs) (line 3024)
    copy_call_result_272091 = invoke(stypy.reporting.localization.Localization(__file__, 3024, 22), copy_272089, *[], **kwargs_272090)
    
    # Assigning a type to the variable 'rel' (line 3024)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3024, 16), 'rel', copy_call_result_272091)
    
    # Assigning a Subscript to a Name (line 3025):
    
    # Assigning a Subscript to a Name (line 3025):
    
    # Obtaining the type of the subscript
    slice_272092 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3025, 22), None, None, None)
    # Getting the type of 'idx' (line 3025)
    idx_272093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 41), 'idx')
    int_272094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3025, 45), 'int')
    # Applying the binary operator '+' (line 3025)
    result_add_272095 = python_operator(stypy.reporting.localization.Localization(__file__, 3025, 41), '+', idx_272093, int_272094)
    
    # Getting the type of 'transfer_matrix' (line 3025)
    transfer_matrix_272096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 22), 'transfer_matrix')
    # Obtaining the member '__getitem__' of a type (line 3025)
    getitem___272097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3025, 22), transfer_matrix_272096, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3025)
    subscript_call_result_272098 = invoke(stypy.reporting.localization.Localization(__file__, 3025, 22), getitem___272097, (slice_272092, result_add_272095))
    
    # Assigning a type to the variable 'img' (line 3025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3025, 16), 'img', subscript_call_result_272098)
    
    # Assigning a BinOp to a Subscript (line 3029):
    
    # Assigning a BinOp to a Subscript (line 3029):
    # Getting the type of 'rel' (line 3029)
    rel_272099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3029, 42), 'rel')
    complex_272100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3029, 46), 'complex')
    # Getting the type of 'img' (line 3029)
    img_272101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3029, 49), 'img')
    # Applying the binary operator '*' (line 3029)
    result_mul_272102 = python_operator(stypy.reporting.localization.Localization(__file__, 3029, 46), '*', complex_272100, img_272101)
    
    # Applying the binary operator '-' (line 3029)
    result_sub_272103 = python_operator(stypy.reporting.localization.Localization(__file__, 3029, 42), '-', rel_272099, result_mul_272102)
    
    # Getting the type of 'transfer_matrix' (line 3029)
    transfer_matrix_272104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3029, 16), 'transfer_matrix')
    slice_272105 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3029, 16), None, None, None)
    # Getting the type of 'idx' (line 3029)
    idx_272106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3029, 35), 'idx')
    # Storing an element on a container (line 3029)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3029, 16), transfer_matrix_272104, ((slice_272105, idx_272106), result_sub_272103))
    
    # Assigning a BinOp to a Subscript (line 3030):
    
    # Assigning a BinOp to a Subscript (line 3030):
    # Getting the type of 'rel' (line 3030)
    rel_272107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 44), 'rel')
    complex_272108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3030, 48), 'complex')
    # Getting the type of 'img' (line 3030)
    img_272109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 51), 'img')
    # Applying the binary operator '*' (line 3030)
    result_mul_272110 = python_operator(stypy.reporting.localization.Localization(__file__, 3030, 48), '*', complex_272108, img_272109)
    
    # Applying the binary operator '+' (line 3030)
    result_add_272111 = python_operator(stypy.reporting.localization.Localization(__file__, 3030, 44), '+', rel_272107, result_mul_272110)
    
    # Getting the type of 'transfer_matrix' (line 3030)
    transfer_matrix_272112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 16), 'transfer_matrix')
    slice_272113 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3030, 16), None, None, None)
    # Getting the type of 'idx' (line 3030)
    idx_272114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 35), 'idx')
    int_272115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3030, 39), 'int')
    # Applying the binary operator '+' (line 3030)
    result_add_272116 = python_operator(stypy.reporting.localization.Localization(__file__, 3030, 35), '+', idx_272114, int_272115)
    
    # Storing an element on a container (line 3030)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3030, 16), transfer_matrix_272112, ((slice_272113, result_add_272116), result_add_272111))
    
    # Getting the type of 'idx' (line 3031)
    idx_272117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 16), 'idx')
    int_272118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3031, 23), 'int')
    # Applying the binary operator '+=' (line 3031)
    result_iadd_272119 = python_operator(stypy.reporting.localization.Localization(__file__, 3031, 16), '+=', idx_272117, int_272118)
    # Assigning a type to the variable 'idx' (line 3031)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3031, 16), 'idx', result_iadd_272119)
    
    # SSA join for if statement (line 3023)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'idx' (line 3032)
    idx_272120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3032, 12), 'idx')
    int_272121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3032, 19), 'int')
    # Applying the binary operator '+=' (line 3032)
    result_iadd_272122 = python_operator(stypy.reporting.localization.Localization(__file__, 3032, 12), '+=', idx_272120, int_272121)
    # Assigning a type to the variable 'idx' (line 3032)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3032, 12), 'idx', result_iadd_272122)
    
    # SSA join for while statement (line 3022)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 3034)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Attribute to a Name (line 3035):
    
    # Assigning a Attribute to a Name (line 3035):
    
    # Call to solve(...): (line 3035)
    # Processing the call arguments (line 3035)
    # Getting the type of 'transfer_matrix' (line 3035)
    transfer_matrix_272126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3035, 32), 'transfer_matrix', False)
    # Obtaining the member 'T' of a type (line 3035)
    T_272127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3035, 32), transfer_matrix_272126, 'T')
    
    # Call to dot(...): (line 3035)
    # Processing the call arguments (line 3035)
    
    # Call to diag(...): (line 3035)
    # Processing the call arguments (line 3035)
    # Getting the type of 'poles' (line 3035)
    poles_272132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3035, 66), 'poles', False)
    # Processing the call keyword arguments (line 3035)
    kwargs_272133 = {}
    # Getting the type of 'np' (line 3035)
    np_272130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3035, 58), 'np', False)
    # Obtaining the member 'diag' of a type (line 3035)
    diag_272131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3035, 58), np_272130, 'diag')
    # Calling diag(args, kwargs) (line 3035)
    diag_call_result_272134 = invoke(stypy.reporting.localization.Localization(__file__, 3035, 58), diag_272131, *[poles_272132], **kwargs_272133)
    
    # Getting the type of 'transfer_matrix' (line 3036)
    transfer_matrix_272135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 58), 'transfer_matrix', False)
    # Obtaining the member 'T' of a type (line 3036)
    T_272136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3036, 58), transfer_matrix_272135, 'T')
    # Processing the call keyword arguments (line 3035)
    kwargs_272137 = {}
    # Getting the type of 'np' (line 3035)
    np_272128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3035, 51), 'np', False)
    # Obtaining the member 'dot' of a type (line 3035)
    dot_272129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3035, 51), np_272128, 'dot')
    # Calling dot(args, kwargs) (line 3035)
    dot_call_result_272138 = invoke(stypy.reporting.localization.Localization(__file__, 3035, 51), dot_272129, *[diag_call_result_272134, T_272136], **kwargs_272137)
    
    # Processing the call keyword arguments (line 3035)
    kwargs_272139 = {}
    # Getting the type of 'np' (line 3035)
    np_272123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3035, 16), 'np', False)
    # Obtaining the member 'linalg' of a type (line 3035)
    linalg_272124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3035, 16), np_272123, 'linalg')
    # Obtaining the member 'solve' of a type (line 3035)
    solve_272125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3035, 16), linalg_272124, 'solve')
    # Calling solve(args, kwargs) (line 3035)
    solve_call_result_272140 = invoke(stypy.reporting.localization.Localization(__file__, 3035, 16), solve_272125, *[T_272127, dot_call_result_272138], **kwargs_272139)
    
    # Obtaining the member 'T' of a type (line 3035)
    T_272141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3035, 16), solve_call_result_272140, 'T')
    # Assigning a type to the variable 'm' (line 3035)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3035, 12), 'm', T_272141)
    
    # Assigning a Call to a Name (line 3037):
    
    # Assigning a Call to a Name (line 3037):
    
    # Call to solve(...): (line 3037)
    # Processing the call arguments (line 3037)
    # Getting the type of 'z' (line 3037)
    z_272145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 42), 'z', False)
    
    # Call to dot(...): (line 3037)
    # Processing the call arguments (line 3037)
    # Getting the type of 'u0' (line 3037)
    u0_272148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 52), 'u0', False)
    # Obtaining the member 'T' of a type (line 3037)
    T_272149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3037, 52), u0_272148, 'T')
    # Getting the type of 'm' (line 3037)
    m_272150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 58), 'm', False)
    # Getting the type of 'A' (line 3037)
    A_272151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 60), 'A', False)
    # Applying the binary operator '-' (line 3037)
    result_sub_272152 = python_operator(stypy.reporting.localization.Localization(__file__, 3037, 58), '-', m_272150, A_272151)
    
    # Processing the call keyword arguments (line 3037)
    kwargs_272153 = {}
    # Getting the type of 'np' (line 3037)
    np_272146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 45), 'np', False)
    # Obtaining the member 'dot' of a type (line 3037)
    dot_272147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3037, 45), np_272146, 'dot')
    # Calling dot(args, kwargs) (line 3037)
    dot_call_result_272154 = invoke(stypy.reporting.localization.Localization(__file__, 3037, 45), dot_272147, *[T_272149, result_sub_272152], **kwargs_272153)
    
    # Processing the call keyword arguments (line 3037)
    kwargs_272155 = {}
    # Getting the type of 'np' (line 3037)
    np_272142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 26), 'np', False)
    # Obtaining the member 'linalg' of a type (line 3037)
    linalg_272143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3037, 26), np_272142, 'linalg')
    # Obtaining the member 'solve' of a type (line 3037)
    solve_272144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3037, 26), linalg_272143, 'solve')
    # Calling solve(args, kwargs) (line 3037)
    solve_call_result_272156 = invoke(stypy.reporting.localization.Localization(__file__, 3037, 26), solve_272144, *[z_272145, dot_call_result_272154], **kwargs_272155)
    
    # Assigning a type to the variable 'gain_matrix' (line 3037)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3037, 12), 'gain_matrix', solve_call_result_272156)
    # SSA branch for the except part of a try statement (line 3034)
    # SSA branch for the except 'Attribute' branch of a try statement (line 3034)
    module_type_store.open_ssa_branch('except')
    
    # Call to ValueError(...): (line 3039)
    # Processing the call arguments (line 3039)
    str_272158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3039, 29), 'str', "The poles you've chosen can't be placed. Check the controllability matrix and try another set of poles")
    # Processing the call keyword arguments (line 3039)
    kwargs_272159 = {}
    # Getting the type of 'ValueError' (line 3039)
    ValueError_272157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3039, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3039)
    ValueError_call_result_272160 = invoke(stypy.reporting.localization.Localization(__file__, 3039, 18), ValueError_272157, *[str_272158], **kwargs_272159)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3039, 12), ValueError_call_result_272160, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 3034)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2907)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a UnaryOp to a Name (line 3044):
    
    # Assigning a UnaryOp to a Name (line 3044):
    
    # Getting the type of 'gain_matrix' (line 3044)
    gain_matrix_272161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 19), 'gain_matrix')
    # Applying the 'usub' unary operator (line 3044)
    result___neg___272162 = python_operator(stypy.reporting.localization.Localization(__file__, 3044, 18), 'usub', gain_matrix_272161)
    
    # Assigning a type to the variable 'gain_matrix' (line 3044)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3044, 4), 'gain_matrix', result___neg___272162)
    
    # Assigning a Call to a Name (line 3046):
    
    # Assigning a Call to a Name (line 3046):
    
    # Call to real(...): (line 3046)
    # Processing the call arguments (line 3046)
    # Getting the type of 'gain_matrix' (line 3046)
    gain_matrix_272165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 26), 'gain_matrix', False)
    # Processing the call keyword arguments (line 3046)
    kwargs_272166 = {}
    # Getting the type of 'np' (line 3046)
    np_272163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 18), 'np', False)
    # Obtaining the member 'real' of a type (line 3046)
    real_272164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3046, 18), np_272163, 'real')
    # Calling real(args, kwargs) (line 3046)
    real_call_result_272167 = invoke(stypy.reporting.localization.Localization(__file__, 3046, 18), real_272164, *[gain_matrix_272165], **kwargs_272166)
    
    # Assigning a type to the variable 'gain_matrix' (line 3046)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3046, 4), 'gain_matrix', real_call_result_272167)
    
    # Assigning a Call to a Name (line 3048):
    
    # Assigning a Call to a Name (line 3048):
    
    # Call to Bunch(...): (line 3048)
    # Processing the call keyword arguments (line 3048)
    kwargs_272169 = {}
    # Getting the type of 'Bunch' (line 3048)
    Bunch_272168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3048, 26), 'Bunch', False)
    # Calling Bunch(args, kwargs) (line 3048)
    Bunch_call_result_272170 = invoke(stypy.reporting.localization.Localization(__file__, 3048, 26), Bunch_272168, *[], **kwargs_272169)
    
    # Assigning a type to the variable 'full_state_feedback' (line 3048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3048, 4), 'full_state_feedback', Bunch_call_result_272170)
    
    # Assigning a Name to a Attribute (line 3049):
    
    # Assigning a Name to a Attribute (line 3049):
    # Getting the type of 'gain_matrix' (line 3049)
    gain_matrix_272171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3049, 38), 'gain_matrix')
    # Getting the type of 'full_state_feedback' (line 3049)
    full_state_feedback_272172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3049, 4), 'full_state_feedback')
    # Setting the type of the member 'gain_matrix' of a type (line 3049)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3049, 4), full_state_feedback_272172, 'gain_matrix', gain_matrix_272171)
    
    # Assigning a Call to a Attribute (line 3050):
    
    # Assigning a Call to a Attribute (line 3050):
    
    # Call to _order_complex_poles(...): (line 3050)
    # Processing the call arguments (line 3050)
    
    # Obtaining the type of the subscript
    int_272174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3051, 50), 'int')
    
    # Call to eig(...): (line 3051)
    # Processing the call arguments (line 3051)
    # Getting the type of 'A' (line 3051)
    A_272178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 22), 'A', False)
    
    # Call to dot(...): (line 3051)
    # Processing the call arguments (line 3051)
    # Getting the type of 'B' (line 3051)
    B_272181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 33), 'B', False)
    # Getting the type of 'gain_matrix' (line 3051)
    gain_matrix_272182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 36), 'gain_matrix', False)
    # Processing the call keyword arguments (line 3051)
    kwargs_272183 = {}
    # Getting the type of 'np' (line 3051)
    np_272179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 26), 'np', False)
    # Obtaining the member 'dot' of a type (line 3051)
    dot_272180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3051, 26), np_272179, 'dot')
    # Calling dot(args, kwargs) (line 3051)
    dot_call_result_272184 = invoke(stypy.reporting.localization.Localization(__file__, 3051, 26), dot_272180, *[B_272181, gain_matrix_272182], **kwargs_272183)
    
    # Applying the binary operator '-' (line 3051)
    result_sub_272185 = python_operator(stypy.reporting.localization.Localization(__file__, 3051, 22), '-', A_272178, dot_call_result_272184)
    
    # Processing the call keyword arguments (line 3051)
    kwargs_272186 = {}
    # Getting the type of 'np' (line 3051)
    np_272175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 8), 'np', False)
    # Obtaining the member 'linalg' of a type (line 3051)
    linalg_272176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3051, 8), np_272175, 'linalg')
    # Obtaining the member 'eig' of a type (line 3051)
    eig_272177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3051, 8), linalg_272176, 'eig')
    # Calling eig(args, kwargs) (line 3051)
    eig_call_result_272187 = invoke(stypy.reporting.localization.Localization(__file__, 3051, 8), eig_272177, *[result_sub_272185], **kwargs_272186)
    
    # Obtaining the member '__getitem__' of a type (line 3051)
    getitem___272188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3051, 8), eig_call_result_272187, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3051)
    subscript_call_result_272189 = invoke(stypy.reporting.localization.Localization(__file__, 3051, 8), getitem___272188, int_272174)
    
    # Processing the call keyword arguments (line 3050)
    kwargs_272190 = {}
    # Getting the type of '_order_complex_poles' (line 3050)
    _order_complex_poles_272173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 41), '_order_complex_poles', False)
    # Calling _order_complex_poles(args, kwargs) (line 3050)
    _order_complex_poles_call_result_272191 = invoke(stypy.reporting.localization.Localization(__file__, 3050, 41), _order_complex_poles_272173, *[subscript_call_result_272189], **kwargs_272190)
    
    # Getting the type of 'full_state_feedback' (line 3050)
    full_state_feedback_272192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 4), 'full_state_feedback')
    # Setting the type of the member 'computed_poles' of a type (line 3050)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3050, 4), full_state_feedback_272192, 'computed_poles', _order_complex_poles_call_result_272191)
    
    # Assigning a Name to a Attribute (line 3053):
    
    # Assigning a Name to a Attribute (line 3053):
    # Getting the type of 'poles' (line 3053)
    poles_272193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 42), 'poles')
    # Getting the type of 'full_state_feedback' (line 3053)
    full_state_feedback_272194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 4), 'full_state_feedback')
    # Setting the type of the member 'requested_poles' of a type (line 3053)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3053, 4), full_state_feedback_272194, 'requested_poles', poles_272193)
    
    # Assigning a Name to a Attribute (line 3054):
    
    # Assigning a Name to a Attribute (line 3054):
    # Getting the type of 'transfer_matrix' (line 3054)
    transfer_matrix_272195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 28), 'transfer_matrix')
    # Getting the type of 'full_state_feedback' (line 3054)
    full_state_feedback_272196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 4), 'full_state_feedback')
    # Setting the type of the member 'X' of a type (line 3054)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3054, 4), full_state_feedback_272196, 'X', transfer_matrix_272195)
    
    # Assigning a Name to a Attribute (line 3055):
    
    # Assigning a Name to a Attribute (line 3055):
    # Getting the type of 'cur_rtol' (line 3055)
    cur_rtol_272197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3055, 31), 'cur_rtol')
    # Getting the type of 'full_state_feedback' (line 3055)
    full_state_feedback_272198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3055, 4), 'full_state_feedback')
    # Setting the type of the member 'rtol' of a type (line 3055)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3055, 4), full_state_feedback_272198, 'rtol', cur_rtol_272197)
    
    # Assigning a Name to a Attribute (line 3056):
    
    # Assigning a Name to a Attribute (line 3056):
    # Getting the type of 'nb_iter' (line 3056)
    nb_iter_272199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 34), 'nb_iter')
    # Getting the type of 'full_state_feedback' (line 3056)
    full_state_feedback_272200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3056, 4), 'full_state_feedback')
    # Setting the type of the member 'nb_iter' of a type (line 3056)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3056, 4), full_state_feedback_272200, 'nb_iter', nb_iter_272199)
    # Getting the type of 'full_state_feedback' (line 3058)
    full_state_feedback_272201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3058, 11), 'full_state_feedback')
    # Assigning a type to the variable 'stypy_return_type' (line 3058)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3058, 4), 'stypy_return_type', full_state_feedback_272201)
    
    # ################# End of 'place_poles(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'place_poles' in the type store
    # Getting the type of 'stypy_return_type' (line 2710)
    stypy_return_type_272202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_272202)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'place_poles'
    return stypy_return_type_272202

# Assigning a type to the variable 'place_poles' (line 2710)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2710, 0), 'place_poles', place_poles)

@norecursion
def dlsim(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3061)
    None_272203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 23), 'None')
    # Getting the type of 'None' (line 3061)
    None_272204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 32), 'None')
    defaults = [None_272203, None_272204]
    # Create a new context for function 'dlsim'
    module_type_store = module_type_store.open_function_context('dlsim', 3061, 0, False)
    
    # Passed parameters checking function
    dlsim.stypy_localization = localization
    dlsim.stypy_type_of_self = None
    dlsim.stypy_type_store = module_type_store
    dlsim.stypy_function_name = 'dlsim'
    dlsim.stypy_param_names_list = ['system', 'u', 't', 'x0']
    dlsim.stypy_varargs_param_name = None
    dlsim.stypy_kwargs_param_name = None
    dlsim.stypy_call_defaults = defaults
    dlsim.stypy_call_varargs = varargs
    dlsim.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dlsim', ['system', 'u', 't', 'x0'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dlsim', localization, ['system', 'u', 't', 'x0'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dlsim(...)' code ##################

    str_272205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3115, (-1)), 'str', '\n    Simulate output of a discrete-time linear system.\n\n    Parameters\n    ----------\n    system : tuple of array_like or instance of `dlti`\n        A tuple describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n            * 1: (instance of `dlti`)\n            * 3: (num, den, dt)\n            * 4: (zeros, poles, gain, dt)\n            * 5: (A, B, C, D, dt)\n\n    u : array_like\n        An input array describing the input at each time `t` (interpolation is\n        assumed between given times).  If there are multiple inputs, then each\n        column of the rank-2 array represents an input.\n    t : array_like, optional\n        The time steps at which the input is defined.  If `t` is given, it\n        must be the same length as `u`, and the final value in `t` determines\n        the number of steps returned in the output.\n    x0 : array_like, optional\n        The initial conditions on the state vector (zero by default).\n\n    Returns\n    -------\n    tout : ndarray\n        Time values for the output, as a 1-D array.\n    yout : ndarray\n        System response, as a 1-D array.\n    xout : ndarray, optional\n        Time-evolution of the state-vector.  Only generated if the input is a\n        `StateSpace` system.\n\n    See Also\n    --------\n    lsim, dstep, dimpulse, cont2discrete\n\n    Examples\n    --------\n    A simple integrator transfer function with a discrete time step of 1.0\n    could be implemented as:\n\n    >>> from scipy import signal\n    >>> tf = ([1.0,], [1.0, -1.0], 1.0)\n    >>> t_in = [0.0, 1.0, 2.0, 3.0]\n    >>> u = np.asarray([0.0, 0.0, 1.0, 1.0])\n    >>> t_out, y = signal.dlsim(tf, u, t=t_in)\n    >>> y.T\n    array([[ 0.,  0.,  0.,  1.]])\n\n    ')
    
    
    # Call to isinstance(...): (line 3117)
    # Processing the call arguments (line 3117)
    # Getting the type of 'system' (line 3117)
    system_272207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 18), 'system', False)
    # Getting the type of 'lti' (line 3117)
    lti_272208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 26), 'lti', False)
    # Processing the call keyword arguments (line 3117)
    kwargs_272209 = {}
    # Getting the type of 'isinstance' (line 3117)
    isinstance_272206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3117)
    isinstance_call_result_272210 = invoke(stypy.reporting.localization.Localization(__file__, 3117, 7), isinstance_272206, *[system_272207, lti_272208], **kwargs_272209)
    
    # Testing the type of an if condition (line 3117)
    if_condition_272211 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3117, 4), isinstance_call_result_272210)
    # Assigning a type to the variable 'if_condition_272211' (line 3117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3117, 4), 'if_condition_272211', if_condition_272211)
    # SSA begins for if statement (line 3117)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 3118)
    # Processing the call arguments (line 3118)
    str_272213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3118, 29), 'str', 'dlsim can only be used with discrete-time dlti systems.')
    # Processing the call keyword arguments (line 3118)
    kwargs_272214 = {}
    # Getting the type of 'AttributeError' (line 3118)
    AttributeError_272212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 14), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 3118)
    AttributeError_call_result_272215 = invoke(stypy.reporting.localization.Localization(__file__, 3118, 14), AttributeError_272212, *[str_272213], **kwargs_272214)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3118, 8), AttributeError_call_result_272215, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 3117)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to isinstance(...): (line 3120)
    # Processing the call arguments (line 3120)
    # Getting the type of 'system' (line 3120)
    system_272217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 24), 'system', False)
    # Getting the type of 'dlti' (line 3120)
    dlti_272218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 32), 'dlti', False)
    # Processing the call keyword arguments (line 3120)
    kwargs_272219 = {}
    # Getting the type of 'isinstance' (line 3120)
    isinstance_272216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 13), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3120)
    isinstance_call_result_272220 = invoke(stypy.reporting.localization.Localization(__file__, 3120, 13), isinstance_272216, *[system_272217, dlti_272218], **kwargs_272219)
    
    # Applying the 'not' unary operator (line 3120)
    result_not__272221 = python_operator(stypy.reporting.localization.Localization(__file__, 3120, 9), 'not', isinstance_call_result_272220)
    
    # Testing the type of an if condition (line 3120)
    if_condition_272222 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3120, 9), result_not__272221)
    # Assigning a type to the variable 'if_condition_272222' (line 3120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3120, 9), 'if_condition_272222', if_condition_272222)
    # SSA begins for if statement (line 3120)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3121):
    
    # Assigning a Call to a Name (line 3121):
    
    # Call to dlti(...): (line 3121)
    
    # Obtaining the type of the subscript
    int_272224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3121, 31), 'int')
    slice_272225 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3121, 23), None, int_272224, None)
    # Getting the type of 'system' (line 3121)
    system_272226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3121, 23), 'system', False)
    # Obtaining the member '__getitem__' of a type (line 3121)
    getitem___272227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3121, 23), system_272226, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3121)
    subscript_call_result_272228 = invoke(stypy.reporting.localization.Localization(__file__, 3121, 23), getitem___272227, slice_272225)
    
    # Processing the call keyword arguments (line 3121)
    
    # Obtaining the type of the subscript
    int_272229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3121, 46), 'int')
    # Getting the type of 'system' (line 3121)
    system_272230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3121, 39), 'system', False)
    # Obtaining the member '__getitem__' of a type (line 3121)
    getitem___272231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3121, 39), system_272230, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3121)
    subscript_call_result_272232 = invoke(stypy.reporting.localization.Localization(__file__, 3121, 39), getitem___272231, int_272229)
    
    keyword_272233 = subscript_call_result_272232
    kwargs_272234 = {'dt': keyword_272233}
    # Getting the type of 'dlti' (line 3121)
    dlti_272223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3121, 17), 'dlti', False)
    # Calling dlti(args, kwargs) (line 3121)
    dlti_call_result_272235 = invoke(stypy.reporting.localization.Localization(__file__, 3121, 17), dlti_272223, *[subscript_call_result_272228], **kwargs_272234)
    
    # Assigning a type to the variable 'system' (line 3121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3121, 8), 'system', dlti_call_result_272235)
    # SSA join for if statement (line 3120)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3117)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3124):
    
    # Assigning a Call to a Name (line 3124):
    
    # Call to isinstance(...): (line 3124)
    # Processing the call arguments (line 3124)
    # Getting the type of 'system' (line 3124)
    system_272237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 29), 'system', False)
    # Getting the type of 'StateSpace' (line 3124)
    StateSpace_272238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 37), 'StateSpace', False)
    # Processing the call keyword arguments (line 3124)
    kwargs_272239 = {}
    # Getting the type of 'isinstance' (line 3124)
    isinstance_272236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 18), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3124)
    isinstance_call_result_272240 = invoke(stypy.reporting.localization.Localization(__file__, 3124, 18), isinstance_272236, *[system_272237, StateSpace_272238], **kwargs_272239)
    
    # Assigning a type to the variable 'is_ss_input' (line 3124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3124, 4), 'is_ss_input', isinstance_call_result_272240)
    
    # Assigning a Call to a Name (line 3125):
    
    # Assigning a Call to a Name (line 3125):
    
    # Call to _as_ss(...): (line 3125)
    # Processing the call keyword arguments (line 3125)
    kwargs_272243 = {}
    # Getting the type of 'system' (line 3125)
    system_272241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 13), 'system', False)
    # Obtaining the member '_as_ss' of a type (line 3125)
    _as_ss_272242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3125, 13), system_272241, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 3125)
    _as_ss_call_result_272244 = invoke(stypy.reporting.localization.Localization(__file__, 3125, 13), _as_ss_272242, *[], **kwargs_272243)
    
    # Assigning a type to the variable 'system' (line 3125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3125, 4), 'system', _as_ss_call_result_272244)
    
    # Assigning a Call to a Name (line 3127):
    
    # Assigning a Call to a Name (line 3127):
    
    # Call to atleast_1d(...): (line 3127)
    # Processing the call arguments (line 3127)
    # Getting the type of 'u' (line 3127)
    u_272247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 22), 'u', False)
    # Processing the call keyword arguments (line 3127)
    kwargs_272248 = {}
    # Getting the type of 'np' (line 3127)
    np_272245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 8), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 3127)
    atleast_1d_272246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3127, 8), np_272245, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 3127)
    atleast_1d_call_result_272249 = invoke(stypy.reporting.localization.Localization(__file__, 3127, 8), atleast_1d_272246, *[u_272247], **kwargs_272248)
    
    # Assigning a type to the variable 'u' (line 3127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3127, 4), 'u', atleast_1d_call_result_272249)
    
    
    # Getting the type of 'u' (line 3129)
    u_272250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 7), 'u')
    # Obtaining the member 'ndim' of a type (line 3129)
    ndim_272251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 7), u_272250, 'ndim')
    int_272252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3129, 17), 'int')
    # Applying the binary operator '==' (line 3129)
    result_eq_272253 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 7), '==', ndim_272251, int_272252)
    
    # Testing the type of an if condition (line 3129)
    if_condition_272254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3129, 4), result_eq_272253)
    # Assigning a type to the variable 'if_condition_272254' (line 3129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3129, 4), 'if_condition_272254', if_condition_272254)
    # SSA begins for if statement (line 3129)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 3130):
    
    # Assigning a Attribute to a Name (line 3130):
    
    # Call to atleast_2d(...): (line 3130)
    # Processing the call arguments (line 3130)
    # Getting the type of 'u' (line 3130)
    u_272257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 26), 'u', False)
    # Processing the call keyword arguments (line 3130)
    kwargs_272258 = {}
    # Getting the type of 'np' (line 3130)
    np_272255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 12), 'np', False)
    # Obtaining the member 'atleast_2d' of a type (line 3130)
    atleast_2d_272256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3130, 12), np_272255, 'atleast_2d')
    # Calling atleast_2d(args, kwargs) (line 3130)
    atleast_2d_call_result_272259 = invoke(stypy.reporting.localization.Localization(__file__, 3130, 12), atleast_2d_272256, *[u_272257], **kwargs_272258)
    
    # Obtaining the member 'T' of a type (line 3130)
    T_272260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3130, 12), atleast_2d_call_result_272259, 'T')
    # Assigning a type to the variable 'u' (line 3130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3130, 8), 'u', T_272260)
    # SSA join for if statement (line 3129)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 3132)
    # Getting the type of 't' (line 3132)
    t_272261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 7), 't')
    # Getting the type of 'None' (line 3132)
    None_272262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 12), 'None')
    
    (may_be_272263, more_types_in_union_272264) = may_be_none(t_272261, None_272262)

    if may_be_272263:

        if more_types_in_union_272264:
            # Runtime conditional SSA (line 3132)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3133):
        
        # Assigning a Call to a Name (line 3133):
        
        # Call to len(...): (line 3133)
        # Processing the call arguments (line 3133)
        # Getting the type of 'u' (line 3133)
        u_272266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 26), 'u', False)
        # Processing the call keyword arguments (line 3133)
        kwargs_272267 = {}
        # Getting the type of 'len' (line 3133)
        len_272265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 22), 'len', False)
        # Calling len(args, kwargs) (line 3133)
        len_call_result_272268 = invoke(stypy.reporting.localization.Localization(__file__, 3133, 22), len_272265, *[u_272266], **kwargs_272267)
        
        # Assigning a type to the variable 'out_samples' (line 3133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3133, 8), 'out_samples', len_call_result_272268)
        
        # Assigning a BinOp to a Name (line 3134):
        
        # Assigning a BinOp to a Name (line 3134):
        # Getting the type of 'out_samples' (line 3134)
        out_samples_272269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 20), 'out_samples')
        int_272270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3134, 34), 'int')
        # Applying the binary operator '-' (line 3134)
        result_sub_272271 = python_operator(stypy.reporting.localization.Localization(__file__, 3134, 20), '-', out_samples_272269, int_272270)
        
        # Getting the type of 'system' (line 3134)
        system_272272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 39), 'system')
        # Obtaining the member 'dt' of a type (line 3134)
        dt_272273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3134, 39), system_272272, 'dt')
        # Applying the binary operator '*' (line 3134)
        result_mul_272274 = python_operator(stypy.reporting.localization.Localization(__file__, 3134, 19), '*', result_sub_272271, dt_272273)
        
        # Assigning a type to the variable 'stoptime' (line 3134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3134, 8), 'stoptime', result_mul_272274)

        if more_types_in_union_272264:
            # Runtime conditional SSA for else branch (line 3132)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_272263) or more_types_in_union_272264):
        
        # Assigning a Subscript to a Name (line 3136):
        
        # Assigning a Subscript to a Name (line 3136):
        
        # Obtaining the type of the subscript
        int_272275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3136, 21), 'int')
        # Getting the type of 't' (line 3136)
        t_272276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 19), 't')
        # Obtaining the member '__getitem__' of a type (line 3136)
        getitem___272277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3136, 19), t_272276, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3136)
        subscript_call_result_272278 = invoke(stypy.reporting.localization.Localization(__file__, 3136, 19), getitem___272277, int_272275)
        
        # Assigning a type to the variable 'stoptime' (line 3136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3136, 8), 'stoptime', subscript_call_result_272278)
        
        # Assigning a BinOp to a Name (line 3137):
        
        # Assigning a BinOp to a Name (line 3137):
        
        # Call to int(...): (line 3137)
        # Processing the call arguments (line 3137)
        
        # Call to floor(...): (line 3137)
        # Processing the call arguments (line 3137)
        # Getting the type of 'stoptime' (line 3137)
        stoptime_272282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 35), 'stoptime', False)
        # Getting the type of 'system' (line 3137)
        system_272283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 46), 'system', False)
        # Obtaining the member 'dt' of a type (line 3137)
        dt_272284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3137, 46), system_272283, 'dt')
        # Applying the binary operator 'div' (line 3137)
        result_div_272285 = python_operator(stypy.reporting.localization.Localization(__file__, 3137, 35), 'div', stoptime_272282, dt_272284)
        
        # Processing the call keyword arguments (line 3137)
        kwargs_272286 = {}
        # Getting the type of 'np' (line 3137)
        np_272280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 26), 'np', False)
        # Obtaining the member 'floor' of a type (line 3137)
        floor_272281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3137, 26), np_272280, 'floor')
        # Calling floor(args, kwargs) (line 3137)
        floor_call_result_272287 = invoke(stypy.reporting.localization.Localization(__file__, 3137, 26), floor_272281, *[result_div_272285], **kwargs_272286)
        
        # Processing the call keyword arguments (line 3137)
        kwargs_272288 = {}
        # Getting the type of 'int' (line 3137)
        int_272279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 22), 'int', False)
        # Calling int(args, kwargs) (line 3137)
        int_call_result_272289 = invoke(stypy.reporting.localization.Localization(__file__, 3137, 22), int_272279, *[floor_call_result_272287], **kwargs_272288)
        
        int_272290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3137, 60), 'int')
        # Applying the binary operator '+' (line 3137)
        result_add_272291 = python_operator(stypy.reporting.localization.Localization(__file__, 3137, 22), '+', int_call_result_272289, int_272290)
        
        # Assigning a type to the variable 'out_samples' (line 3137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3137, 8), 'out_samples', result_add_272291)

        if (may_be_272263 and more_types_in_union_272264):
            # SSA join for if statement (line 3132)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 3140):
    
    # Assigning a Call to a Name (line 3140):
    
    # Call to zeros(...): (line 3140)
    # Processing the call arguments (line 3140)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3140)
    tuple_272294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3140, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3140)
    # Adding element type (line 3140)
    # Getting the type of 'out_samples' (line 3140)
    out_samples_272295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3140, 21), 'out_samples', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3140, 21), tuple_272294, out_samples_272295)
    # Adding element type (line 3140)
    
    # Obtaining the type of the subscript
    int_272296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3140, 49), 'int')
    # Getting the type of 'system' (line 3140)
    system_272297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3140, 34), 'system', False)
    # Obtaining the member 'A' of a type (line 3140)
    A_272298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3140, 34), system_272297, 'A')
    # Obtaining the member 'shape' of a type (line 3140)
    shape_272299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3140, 34), A_272298, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3140)
    getitem___272300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3140, 34), shape_272299, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3140)
    subscript_call_result_272301 = invoke(stypy.reporting.localization.Localization(__file__, 3140, 34), getitem___272300, int_272296)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3140, 21), tuple_272294, subscript_call_result_272301)
    
    # Processing the call keyword arguments (line 3140)
    kwargs_272302 = {}
    # Getting the type of 'np' (line 3140)
    np_272292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3140, 11), 'np', False)
    # Obtaining the member 'zeros' of a type (line 3140)
    zeros_272293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3140, 11), np_272292, 'zeros')
    # Calling zeros(args, kwargs) (line 3140)
    zeros_call_result_272303 = invoke(stypy.reporting.localization.Localization(__file__, 3140, 11), zeros_272293, *[tuple_272294], **kwargs_272302)
    
    # Assigning a type to the variable 'xout' (line 3140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3140, 4), 'xout', zeros_call_result_272303)
    
    # Assigning a Call to a Name (line 3141):
    
    # Assigning a Call to a Name (line 3141):
    
    # Call to zeros(...): (line 3141)
    # Processing the call arguments (line 3141)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3141)
    tuple_272306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3141, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3141)
    # Adding element type (line 3141)
    # Getting the type of 'out_samples' (line 3141)
    out_samples_272307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 21), 'out_samples', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3141, 21), tuple_272306, out_samples_272307)
    # Adding element type (line 3141)
    
    # Obtaining the type of the subscript
    int_272308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3141, 49), 'int')
    # Getting the type of 'system' (line 3141)
    system_272309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 34), 'system', False)
    # Obtaining the member 'C' of a type (line 3141)
    C_272310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3141, 34), system_272309, 'C')
    # Obtaining the member 'shape' of a type (line 3141)
    shape_272311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3141, 34), C_272310, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3141)
    getitem___272312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3141, 34), shape_272311, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3141)
    subscript_call_result_272313 = invoke(stypy.reporting.localization.Localization(__file__, 3141, 34), getitem___272312, int_272308)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3141, 21), tuple_272306, subscript_call_result_272313)
    
    # Processing the call keyword arguments (line 3141)
    kwargs_272314 = {}
    # Getting the type of 'np' (line 3141)
    np_272304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 11), 'np', False)
    # Obtaining the member 'zeros' of a type (line 3141)
    zeros_272305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3141, 11), np_272304, 'zeros')
    # Calling zeros(args, kwargs) (line 3141)
    zeros_call_result_272315 = invoke(stypy.reporting.localization.Localization(__file__, 3141, 11), zeros_272305, *[tuple_272306], **kwargs_272314)
    
    # Assigning a type to the variable 'yout' (line 3141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3141, 4), 'yout', zeros_call_result_272315)
    
    # Assigning a Call to a Name (line 3142):
    
    # Assigning a Call to a Name (line 3142):
    
    # Call to linspace(...): (line 3142)
    # Processing the call arguments (line 3142)
    float_272318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3142, 23), 'float')
    # Getting the type of 'stoptime' (line 3142)
    stoptime_272319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3142, 28), 'stoptime', False)
    # Processing the call keyword arguments (line 3142)
    # Getting the type of 'out_samples' (line 3142)
    out_samples_272320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3142, 42), 'out_samples', False)
    keyword_272321 = out_samples_272320
    kwargs_272322 = {'num': keyword_272321}
    # Getting the type of 'np' (line 3142)
    np_272316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3142, 11), 'np', False)
    # Obtaining the member 'linspace' of a type (line 3142)
    linspace_272317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3142, 11), np_272316, 'linspace')
    # Calling linspace(args, kwargs) (line 3142)
    linspace_call_result_272323 = invoke(stypy.reporting.localization.Localization(__file__, 3142, 11), linspace_272317, *[float_272318, stoptime_272319], **kwargs_272322)
    
    # Assigning a type to the variable 'tout' (line 3142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3142, 4), 'tout', linspace_call_result_272323)
    
    # Type idiom detected: calculating its left and rigth part (line 3145)
    # Getting the type of 'x0' (line 3145)
    x0_272324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 7), 'x0')
    # Getting the type of 'None' (line 3145)
    None_272325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 13), 'None')
    
    (may_be_272326, more_types_in_union_272327) = may_be_none(x0_272324, None_272325)

    if may_be_272326:

        if more_types_in_union_272327:
            # Runtime conditional SSA (line 3145)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Subscript (line 3146):
        
        # Assigning a Call to a Subscript (line 3146):
        
        # Call to zeros(...): (line 3146)
        # Processing the call arguments (line 3146)
        
        # Obtaining an instance of the builtin type 'tuple' (line 3146)
        tuple_272330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3146, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3146)
        # Adding element type (line 3146)
        
        # Obtaining the type of the subscript
        int_272331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3146, 46), 'int')
        # Getting the type of 'system' (line 3146)
        system_272332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 31), 'system', False)
        # Obtaining the member 'A' of a type (line 3146)
        A_272333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3146, 31), system_272332, 'A')
        # Obtaining the member 'shape' of a type (line 3146)
        shape_272334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3146, 31), A_272333, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3146)
        getitem___272335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3146, 31), shape_272334, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3146)
        subscript_call_result_272336 = invoke(stypy.reporting.localization.Localization(__file__, 3146, 31), getitem___272335, int_272331)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3146, 31), tuple_272330, subscript_call_result_272336)
        
        # Processing the call keyword arguments (line 3146)
        kwargs_272337 = {}
        # Getting the type of 'np' (line 3146)
        np_272328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 21), 'np', False)
        # Obtaining the member 'zeros' of a type (line 3146)
        zeros_272329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3146, 21), np_272328, 'zeros')
        # Calling zeros(args, kwargs) (line 3146)
        zeros_call_result_272338 = invoke(stypy.reporting.localization.Localization(__file__, 3146, 21), zeros_272329, *[tuple_272330], **kwargs_272337)
        
        # Getting the type of 'xout' (line 3146)
        xout_272339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 8), 'xout')
        int_272340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3146, 13), 'int')
        slice_272341 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3146, 8), None, None, None)
        # Storing an element on a container (line 3146)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3146, 8), xout_272339, ((int_272340, slice_272341), zeros_call_result_272338))

        if more_types_in_union_272327:
            # Runtime conditional SSA for else branch (line 3145)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_272326) or more_types_in_union_272327):
        
        # Assigning a Call to a Subscript (line 3148):
        
        # Assigning a Call to a Subscript (line 3148):
        
        # Call to asarray(...): (line 3148)
        # Processing the call arguments (line 3148)
        # Getting the type of 'x0' (line 3148)
        x0_272344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 32), 'x0', False)
        # Processing the call keyword arguments (line 3148)
        kwargs_272345 = {}
        # Getting the type of 'np' (line 3148)
        np_272342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 21), 'np', False)
        # Obtaining the member 'asarray' of a type (line 3148)
        asarray_272343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3148, 21), np_272342, 'asarray')
        # Calling asarray(args, kwargs) (line 3148)
        asarray_call_result_272346 = invoke(stypy.reporting.localization.Localization(__file__, 3148, 21), asarray_272343, *[x0_272344], **kwargs_272345)
        
        # Getting the type of 'xout' (line 3148)
        xout_272347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 8), 'xout')
        int_272348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3148, 13), 'int')
        slice_272349 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3148, 8), None, None, None)
        # Storing an element on a container (line 3148)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3148, 8), xout_272347, ((int_272348, slice_272349), asarray_call_result_272346))

        if (may_be_272326 and more_types_in_union_272327):
            # SSA join for if statement (line 3145)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 3151)
    # Getting the type of 't' (line 3151)
    t_272350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3151, 7), 't')
    # Getting the type of 'None' (line 3151)
    None_272351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3151, 12), 'None')
    
    (may_be_272352, more_types_in_union_272353) = may_be_none(t_272350, None_272351)

    if may_be_272352:

        if more_types_in_union_272353:
            # Runtime conditional SSA (line 3151)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 3152):
        
        # Assigning a Name to a Name (line 3152):
        # Getting the type of 'u' (line 3152)
        u_272354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3152, 15), 'u')
        # Assigning a type to the variable 'u_dt' (line 3152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3152, 8), 'u_dt', u_272354)

        if more_types_in_union_272353:
            # Runtime conditional SSA for else branch (line 3151)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_272352) or more_types_in_union_272353):
        
        
        
        # Call to len(...): (line 3154)
        # Processing the call arguments (line 3154)
        # Getting the type of 'u' (line 3154)
        u_272356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 15), 'u', False)
        # Obtaining the member 'shape' of a type (line 3154)
        shape_272357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3154, 15), u_272356, 'shape')
        # Processing the call keyword arguments (line 3154)
        kwargs_272358 = {}
        # Getting the type of 'len' (line 3154)
        len_272355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 11), 'len', False)
        # Calling len(args, kwargs) (line 3154)
        len_call_result_272359 = invoke(stypy.reporting.localization.Localization(__file__, 3154, 11), len_272355, *[shape_272357], **kwargs_272358)
        
        int_272360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3154, 27), 'int')
        # Applying the binary operator '==' (line 3154)
        result_eq_272361 = python_operator(stypy.reporting.localization.Localization(__file__, 3154, 11), '==', len_call_result_272359, int_272360)
        
        # Testing the type of an if condition (line 3154)
        if_condition_272362 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3154, 8), result_eq_272361)
        # Assigning a type to the variable 'if_condition_272362' (line 3154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3154, 8), 'if_condition_272362', if_condition_272362)
        # SSA begins for if statement (line 3154)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 3155):
        
        # Assigning a Subscript to a Name (line 3155):
        
        # Obtaining the type of the subscript
        slice_272363 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3155, 16), None, None, None)
        # Getting the type of 'np' (line 3155)
        np_272364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 21), 'np')
        # Obtaining the member 'newaxis' of a type (line 3155)
        newaxis_272365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3155, 21), np_272364, 'newaxis')
        # Getting the type of 'u' (line 3155)
        u_272366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3155, 16), 'u')
        # Obtaining the member '__getitem__' of a type (line 3155)
        getitem___272367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3155, 16), u_272366, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3155)
        subscript_call_result_272368 = invoke(stypy.reporting.localization.Localization(__file__, 3155, 16), getitem___272367, (slice_272363, newaxis_272365))
        
        # Assigning a type to the variable 'u' (line 3155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3155, 12), 'u', subscript_call_result_272368)
        # SSA join for if statement (line 3154)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3157):
        
        # Assigning a Call to a Name (line 3157):
        
        # Call to interp1d(...): (line 3157)
        # Processing the call arguments (line 3157)
        # Getting the type of 't' (line 3157)
        t_272370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3157, 31), 't', False)
        
        # Call to transpose(...): (line 3157)
        # Processing the call keyword arguments (line 3157)
        kwargs_272373 = {}
        # Getting the type of 'u' (line 3157)
        u_272371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3157, 34), 'u', False)
        # Obtaining the member 'transpose' of a type (line 3157)
        transpose_272372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3157, 34), u_272371, 'transpose')
        # Calling transpose(args, kwargs) (line 3157)
        transpose_call_result_272374 = invoke(stypy.reporting.localization.Localization(__file__, 3157, 34), transpose_272372, *[], **kwargs_272373)
        
        # Processing the call keyword arguments (line 3157)
        # Getting the type of 'False' (line 3157)
        False_272375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3157, 54), 'False', False)
        keyword_272376 = False_272375
        # Getting the type of 'True' (line 3157)
        True_272377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3157, 74), 'True', False)
        keyword_272378 = True_272377
        kwargs_272379 = {'bounds_error': keyword_272378, 'copy': keyword_272376}
        # Getting the type of 'interp1d' (line 3157)
        interp1d_272369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3157, 22), 'interp1d', False)
        # Calling interp1d(args, kwargs) (line 3157)
        interp1d_call_result_272380 = invoke(stypy.reporting.localization.Localization(__file__, 3157, 22), interp1d_272369, *[t_272370, transpose_call_result_272374], **kwargs_272379)
        
        # Assigning a type to the variable 'u_dt_interp' (line 3157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3157, 8), 'u_dt_interp', interp1d_call_result_272380)
        
        # Assigning a Call to a Name (line 3158):
        
        # Assigning a Call to a Name (line 3158):
        
        # Call to transpose(...): (line 3158)
        # Processing the call keyword arguments (line 3158)
        kwargs_272386 = {}
        
        # Call to u_dt_interp(...): (line 3158)
        # Processing the call arguments (line 3158)
        # Getting the type of 'tout' (line 3158)
        tout_272382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3158, 27), 'tout', False)
        # Processing the call keyword arguments (line 3158)
        kwargs_272383 = {}
        # Getting the type of 'u_dt_interp' (line 3158)
        u_dt_interp_272381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3158, 15), 'u_dt_interp', False)
        # Calling u_dt_interp(args, kwargs) (line 3158)
        u_dt_interp_call_result_272384 = invoke(stypy.reporting.localization.Localization(__file__, 3158, 15), u_dt_interp_272381, *[tout_272382], **kwargs_272383)
        
        # Obtaining the member 'transpose' of a type (line 3158)
        transpose_272385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3158, 15), u_dt_interp_call_result_272384, 'transpose')
        # Calling transpose(args, kwargs) (line 3158)
        transpose_call_result_272387 = invoke(stypy.reporting.localization.Localization(__file__, 3158, 15), transpose_272385, *[], **kwargs_272386)
        
        # Assigning a type to the variable 'u_dt' (line 3158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3158, 8), 'u_dt', transpose_call_result_272387)

        if (may_be_272352 and more_types_in_union_272353):
            # SSA join for if statement (line 3151)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to range(...): (line 3161)
    # Processing the call arguments (line 3161)
    int_272389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3161, 19), 'int')
    # Getting the type of 'out_samples' (line 3161)
    out_samples_272390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3161, 22), 'out_samples', False)
    int_272391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3161, 36), 'int')
    # Applying the binary operator '-' (line 3161)
    result_sub_272392 = python_operator(stypy.reporting.localization.Localization(__file__, 3161, 22), '-', out_samples_272390, int_272391)
    
    # Processing the call keyword arguments (line 3161)
    kwargs_272393 = {}
    # Getting the type of 'range' (line 3161)
    range_272388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3161, 13), 'range', False)
    # Calling range(args, kwargs) (line 3161)
    range_call_result_272394 = invoke(stypy.reporting.localization.Localization(__file__, 3161, 13), range_272388, *[int_272389, result_sub_272392], **kwargs_272393)
    
    # Testing the type of a for loop iterable (line 3161)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3161, 4), range_call_result_272394)
    # Getting the type of the for loop variable (line 3161)
    for_loop_var_272395 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3161, 4), range_call_result_272394)
    # Assigning a type to the variable 'i' (line 3161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3161, 4), 'i', for_loop_var_272395)
    # SSA begins for a for statement (line 3161)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Subscript (line 3162):
    
    # Assigning a BinOp to a Subscript (line 3162):
    
    # Call to dot(...): (line 3162)
    # Processing the call arguments (line 3162)
    # Getting the type of 'system' (line 3162)
    system_272398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 31), 'system', False)
    # Obtaining the member 'A' of a type (line 3162)
    A_272399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3162, 31), system_272398, 'A')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3162)
    i_272400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 46), 'i', False)
    slice_272401 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3162, 41), None, None, None)
    # Getting the type of 'xout' (line 3162)
    xout_272402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 41), 'xout', False)
    # Obtaining the member '__getitem__' of a type (line 3162)
    getitem___272403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3162, 41), xout_272402, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3162)
    subscript_call_result_272404 = invoke(stypy.reporting.localization.Localization(__file__, 3162, 41), getitem___272403, (i_272400, slice_272401))
    
    # Processing the call keyword arguments (line 3162)
    kwargs_272405 = {}
    # Getting the type of 'np' (line 3162)
    np_272396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 24), 'np', False)
    # Obtaining the member 'dot' of a type (line 3162)
    dot_272397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3162, 24), np_272396, 'dot')
    # Calling dot(args, kwargs) (line 3162)
    dot_call_result_272406 = invoke(stypy.reporting.localization.Localization(__file__, 3162, 24), dot_272397, *[A_272399, subscript_call_result_272404], **kwargs_272405)
    
    
    # Call to dot(...): (line 3163)
    # Processing the call arguments (line 3163)
    # Getting the type of 'system' (line 3163)
    system_272409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 31), 'system', False)
    # Obtaining the member 'B' of a type (line 3163)
    B_272410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3163, 31), system_272409, 'B')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3163)
    i_272411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 46), 'i', False)
    slice_272412 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3163, 41), None, None, None)
    # Getting the type of 'u_dt' (line 3163)
    u_dt_272413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 41), 'u_dt', False)
    # Obtaining the member '__getitem__' of a type (line 3163)
    getitem___272414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3163, 41), u_dt_272413, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3163)
    subscript_call_result_272415 = invoke(stypy.reporting.localization.Localization(__file__, 3163, 41), getitem___272414, (i_272411, slice_272412))
    
    # Processing the call keyword arguments (line 3163)
    kwargs_272416 = {}
    # Getting the type of 'np' (line 3163)
    np_272407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3163, 24), 'np', False)
    # Obtaining the member 'dot' of a type (line 3163)
    dot_272408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3163, 24), np_272407, 'dot')
    # Calling dot(args, kwargs) (line 3163)
    dot_call_result_272417 = invoke(stypy.reporting.localization.Localization(__file__, 3163, 24), dot_272408, *[B_272410, subscript_call_result_272415], **kwargs_272416)
    
    # Applying the binary operator '+' (line 3162)
    result_add_272418 = python_operator(stypy.reporting.localization.Localization(__file__, 3162, 24), '+', dot_call_result_272406, dot_call_result_272417)
    
    # Getting the type of 'xout' (line 3162)
    xout_272419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 8), 'xout')
    # Getting the type of 'i' (line 3162)
    i_272420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 13), 'i')
    int_272421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3162, 15), 'int')
    # Applying the binary operator '+' (line 3162)
    result_add_272422 = python_operator(stypy.reporting.localization.Localization(__file__, 3162, 13), '+', i_272420, int_272421)
    
    slice_272423 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3162, 8), None, None, None)
    # Storing an element on a container (line 3162)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3162, 8), xout_272419, ((result_add_272422, slice_272423), result_add_272418))
    
    # Assigning a BinOp to a Subscript (line 3164):
    
    # Assigning a BinOp to a Subscript (line 3164):
    
    # Call to dot(...): (line 3164)
    # Processing the call arguments (line 3164)
    # Getting the type of 'system' (line 3164)
    system_272426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3164, 29), 'system', False)
    # Obtaining the member 'C' of a type (line 3164)
    C_272427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3164, 29), system_272426, 'C')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3164)
    i_272428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3164, 44), 'i', False)
    slice_272429 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3164, 39), None, None, None)
    # Getting the type of 'xout' (line 3164)
    xout_272430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3164, 39), 'xout', False)
    # Obtaining the member '__getitem__' of a type (line 3164)
    getitem___272431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3164, 39), xout_272430, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3164)
    subscript_call_result_272432 = invoke(stypy.reporting.localization.Localization(__file__, 3164, 39), getitem___272431, (i_272428, slice_272429))
    
    # Processing the call keyword arguments (line 3164)
    kwargs_272433 = {}
    # Getting the type of 'np' (line 3164)
    np_272424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3164, 22), 'np', False)
    # Obtaining the member 'dot' of a type (line 3164)
    dot_272425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3164, 22), np_272424, 'dot')
    # Calling dot(args, kwargs) (line 3164)
    dot_call_result_272434 = invoke(stypy.reporting.localization.Localization(__file__, 3164, 22), dot_272425, *[C_272427, subscript_call_result_272432], **kwargs_272433)
    
    
    # Call to dot(...): (line 3165)
    # Processing the call arguments (line 3165)
    # Getting the type of 'system' (line 3165)
    system_272437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 29), 'system', False)
    # Obtaining the member 'D' of a type (line 3165)
    D_272438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3165, 29), system_272437, 'D')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3165)
    i_272439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 44), 'i', False)
    slice_272440 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3165, 39), None, None, None)
    # Getting the type of 'u_dt' (line 3165)
    u_dt_272441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 39), 'u_dt', False)
    # Obtaining the member '__getitem__' of a type (line 3165)
    getitem___272442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3165, 39), u_dt_272441, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3165)
    subscript_call_result_272443 = invoke(stypy.reporting.localization.Localization(__file__, 3165, 39), getitem___272442, (i_272439, slice_272440))
    
    # Processing the call keyword arguments (line 3165)
    kwargs_272444 = {}
    # Getting the type of 'np' (line 3165)
    np_272435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 22), 'np', False)
    # Obtaining the member 'dot' of a type (line 3165)
    dot_272436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3165, 22), np_272435, 'dot')
    # Calling dot(args, kwargs) (line 3165)
    dot_call_result_272445 = invoke(stypy.reporting.localization.Localization(__file__, 3165, 22), dot_272436, *[D_272438, subscript_call_result_272443], **kwargs_272444)
    
    # Applying the binary operator '+' (line 3164)
    result_add_272446 = python_operator(stypy.reporting.localization.Localization(__file__, 3164, 22), '+', dot_call_result_272434, dot_call_result_272445)
    
    # Getting the type of 'yout' (line 3164)
    yout_272447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3164, 8), 'yout')
    # Getting the type of 'i' (line 3164)
    i_272448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3164, 13), 'i')
    slice_272449 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3164, 8), None, None, None)
    # Storing an element on a container (line 3164)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3164, 8), yout_272447, ((i_272448, slice_272449), result_add_272446))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Subscript (line 3168):
    
    # Assigning a BinOp to a Subscript (line 3168):
    
    # Call to dot(...): (line 3168)
    # Processing the call arguments (line 3168)
    # Getting the type of 'system' (line 3168)
    system_272452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3168, 37), 'system', False)
    # Obtaining the member 'C' of a type (line 3168)
    C_272453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3168, 37), system_272452, 'C')
    
    # Obtaining the type of the subscript
    # Getting the type of 'out_samples' (line 3168)
    out_samples_272454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3168, 52), 'out_samples', False)
    int_272455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3168, 64), 'int')
    # Applying the binary operator '-' (line 3168)
    result_sub_272456 = python_operator(stypy.reporting.localization.Localization(__file__, 3168, 52), '-', out_samples_272454, int_272455)
    
    slice_272457 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3168, 47), None, None, None)
    # Getting the type of 'xout' (line 3168)
    xout_272458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3168, 47), 'xout', False)
    # Obtaining the member '__getitem__' of a type (line 3168)
    getitem___272459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3168, 47), xout_272458, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3168)
    subscript_call_result_272460 = invoke(stypy.reporting.localization.Localization(__file__, 3168, 47), getitem___272459, (result_sub_272456, slice_272457))
    
    # Processing the call keyword arguments (line 3168)
    kwargs_272461 = {}
    # Getting the type of 'np' (line 3168)
    np_272450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3168, 30), 'np', False)
    # Obtaining the member 'dot' of a type (line 3168)
    dot_272451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3168, 30), np_272450, 'dot')
    # Calling dot(args, kwargs) (line 3168)
    dot_call_result_272462 = invoke(stypy.reporting.localization.Localization(__file__, 3168, 30), dot_272451, *[C_272453, subscript_call_result_272460], **kwargs_272461)
    
    
    # Call to dot(...): (line 3169)
    # Processing the call arguments (line 3169)
    # Getting the type of 'system' (line 3169)
    system_272465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3169, 37), 'system', False)
    # Obtaining the member 'D' of a type (line 3169)
    D_272466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3169, 37), system_272465, 'D')
    
    # Obtaining the type of the subscript
    # Getting the type of 'out_samples' (line 3169)
    out_samples_272467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3169, 52), 'out_samples', False)
    int_272468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3169, 64), 'int')
    # Applying the binary operator '-' (line 3169)
    result_sub_272469 = python_operator(stypy.reporting.localization.Localization(__file__, 3169, 52), '-', out_samples_272467, int_272468)
    
    slice_272470 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3169, 47), None, None, None)
    # Getting the type of 'u_dt' (line 3169)
    u_dt_272471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3169, 47), 'u_dt', False)
    # Obtaining the member '__getitem__' of a type (line 3169)
    getitem___272472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3169, 47), u_dt_272471, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3169)
    subscript_call_result_272473 = invoke(stypy.reporting.localization.Localization(__file__, 3169, 47), getitem___272472, (result_sub_272469, slice_272470))
    
    # Processing the call keyword arguments (line 3169)
    kwargs_272474 = {}
    # Getting the type of 'np' (line 3169)
    np_272463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3169, 30), 'np', False)
    # Obtaining the member 'dot' of a type (line 3169)
    dot_272464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3169, 30), np_272463, 'dot')
    # Calling dot(args, kwargs) (line 3169)
    dot_call_result_272475 = invoke(stypy.reporting.localization.Localization(__file__, 3169, 30), dot_272464, *[D_272466, subscript_call_result_272473], **kwargs_272474)
    
    # Applying the binary operator '+' (line 3168)
    result_add_272476 = python_operator(stypy.reporting.localization.Localization(__file__, 3168, 30), '+', dot_call_result_272462, dot_call_result_272475)
    
    # Getting the type of 'yout' (line 3168)
    yout_272477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3168, 4), 'yout')
    # Getting the type of 'out_samples' (line 3168)
    out_samples_272478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3168, 9), 'out_samples')
    int_272479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3168, 21), 'int')
    # Applying the binary operator '-' (line 3168)
    result_sub_272480 = python_operator(stypy.reporting.localization.Localization(__file__, 3168, 9), '-', out_samples_272478, int_272479)
    
    slice_272481 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3168, 4), None, None, None)
    # Storing an element on a container (line 3168)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3168, 4), yout_272477, ((result_sub_272480, slice_272481), result_add_272476))
    
    # Getting the type of 'is_ss_input' (line 3171)
    is_ss_input_272482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 7), 'is_ss_input')
    # Testing the type of an if condition (line 3171)
    if_condition_272483 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3171, 4), is_ss_input_272482)
    # Assigning a type to the variable 'if_condition_272483' (line 3171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3171, 4), 'if_condition_272483', if_condition_272483)
    # SSA begins for if statement (line 3171)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3172)
    tuple_272484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3172, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3172)
    # Adding element type (line 3172)
    # Getting the type of 'tout' (line 3172)
    tout_272485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3172, 15), 'tout')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3172, 15), tuple_272484, tout_272485)
    # Adding element type (line 3172)
    # Getting the type of 'yout' (line 3172)
    yout_272486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3172, 21), 'yout')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3172, 15), tuple_272484, yout_272486)
    # Adding element type (line 3172)
    # Getting the type of 'xout' (line 3172)
    xout_272487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3172, 27), 'xout')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3172, 15), tuple_272484, xout_272487)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3172)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3172, 8), 'stypy_return_type', tuple_272484)
    # SSA branch for the else part of an if statement (line 3171)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3174)
    tuple_272488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3174, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3174)
    # Adding element type (line 3174)
    # Getting the type of 'tout' (line 3174)
    tout_272489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3174, 15), 'tout')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3174, 15), tuple_272488, tout_272489)
    # Adding element type (line 3174)
    # Getting the type of 'yout' (line 3174)
    yout_272490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3174, 21), 'yout')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3174, 15), tuple_272488, yout_272490)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3174, 8), 'stypy_return_type', tuple_272488)
    # SSA join for if statement (line 3171)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'dlsim(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dlsim' in the type store
    # Getting the type of 'stypy_return_type' (line 3061)
    stypy_return_type_272491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_272491)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dlsim'
    return stypy_return_type_272491

# Assigning a type to the variable 'dlsim' (line 3061)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3061, 0), 'dlsim', dlsim)

@norecursion
def dimpulse(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3177)
    None_272492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 24), 'None')
    # Getting the type of 'None' (line 3177)
    None_272493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 32), 'None')
    # Getting the type of 'None' (line 3177)
    None_272494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 40), 'None')
    defaults = [None_272492, None_272493, None_272494]
    # Create a new context for function 'dimpulse'
    module_type_store = module_type_store.open_function_context('dimpulse', 3177, 0, False)
    
    # Passed parameters checking function
    dimpulse.stypy_localization = localization
    dimpulse.stypy_type_of_self = None
    dimpulse.stypy_type_store = module_type_store
    dimpulse.stypy_function_name = 'dimpulse'
    dimpulse.stypy_param_names_list = ['system', 'x0', 't', 'n']
    dimpulse.stypy_varargs_param_name = None
    dimpulse.stypy_kwargs_param_name = None
    dimpulse.stypy_call_defaults = defaults
    dimpulse.stypy_call_varargs = varargs
    dimpulse.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dimpulse', ['system', 'x0', 't', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dimpulse', localization, ['system', 'x0', 't', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dimpulse(...)' code ##################

    str_272495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3212, (-1)), 'str', '\n    Impulse response of discrete-time system.\n\n    Parameters\n    ----------\n    system : tuple of array_like or instance of `dlti`\n        A tuple describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n            * 1: (instance of `dlti`)\n            * 3: (num, den, dt)\n            * 4: (zeros, poles, gain, dt)\n            * 5: (A, B, C, D, dt)\n\n    x0 : array_like, optional\n        Initial state-vector.  Defaults to zero.\n    t : array_like, optional\n        Time points.  Computed if not given.\n    n : int, optional\n        The number of time points to compute (if `t` is not given).\n\n    Returns\n    -------\n    tout : ndarray\n        Time values for the output, as a 1-D array.\n    yout : ndarray\n        Impulse response of system.  Each element of the tuple represents\n        the output of the system based on an impulse in each input.\n\n    See Also\n    --------\n    impulse, dstep, dlsim, cont2discrete\n\n    ')
    
    
    # Call to isinstance(...): (line 3214)
    # Processing the call arguments (line 3214)
    # Getting the type of 'system' (line 3214)
    system_272497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 18), 'system', False)
    # Getting the type of 'dlti' (line 3214)
    dlti_272498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 26), 'dlti', False)
    # Processing the call keyword arguments (line 3214)
    kwargs_272499 = {}
    # Getting the type of 'isinstance' (line 3214)
    isinstance_272496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3214)
    isinstance_call_result_272500 = invoke(stypy.reporting.localization.Localization(__file__, 3214, 7), isinstance_272496, *[system_272497, dlti_272498], **kwargs_272499)
    
    # Testing the type of an if condition (line 3214)
    if_condition_272501 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3214, 4), isinstance_call_result_272500)
    # Assigning a type to the variable 'if_condition_272501' (line 3214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3214, 4), 'if_condition_272501', if_condition_272501)
    # SSA begins for if statement (line 3214)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3215):
    
    # Assigning a Call to a Name (line 3215):
    
    # Call to _as_ss(...): (line 3215)
    # Processing the call keyword arguments (line 3215)
    kwargs_272504 = {}
    # Getting the type of 'system' (line 3215)
    system_272502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3215, 17), 'system', False)
    # Obtaining the member '_as_ss' of a type (line 3215)
    _as_ss_272503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3215, 17), system_272502, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 3215)
    _as_ss_call_result_272505 = invoke(stypy.reporting.localization.Localization(__file__, 3215, 17), _as_ss_272503, *[], **kwargs_272504)
    
    # Assigning a type to the variable 'system' (line 3215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3215, 8), 'system', _as_ss_call_result_272505)
    # SSA branch for the else part of an if statement (line 3214)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 3216)
    # Processing the call arguments (line 3216)
    # Getting the type of 'system' (line 3216)
    system_272507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3216, 20), 'system', False)
    # Getting the type of 'lti' (line 3216)
    lti_272508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3216, 28), 'lti', False)
    # Processing the call keyword arguments (line 3216)
    kwargs_272509 = {}
    # Getting the type of 'isinstance' (line 3216)
    isinstance_272506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3216, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3216)
    isinstance_call_result_272510 = invoke(stypy.reporting.localization.Localization(__file__, 3216, 9), isinstance_272506, *[system_272507, lti_272508], **kwargs_272509)
    
    # Testing the type of an if condition (line 3216)
    if_condition_272511 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3216, 9), isinstance_call_result_272510)
    # Assigning a type to the variable 'if_condition_272511' (line 3216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3216, 9), 'if_condition_272511', if_condition_272511)
    # SSA begins for if statement (line 3216)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 3217)
    # Processing the call arguments (line 3217)
    str_272513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3217, 29), 'str', 'dimpulse can only be used with discrete-time dlti systems.')
    # Processing the call keyword arguments (line 3217)
    kwargs_272514 = {}
    # Getting the type of 'AttributeError' (line 3217)
    AttributeError_272512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3217, 14), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 3217)
    AttributeError_call_result_272515 = invoke(stypy.reporting.localization.Localization(__file__, 3217, 14), AttributeError_272512, *[str_272513], **kwargs_272514)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3217, 8), AttributeError_call_result_272515, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 3216)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3220):
    
    # Assigning a Call to a Name (line 3220):
    
    # Call to _as_ss(...): (line 3220)
    # Processing the call keyword arguments (line 3220)
    kwargs_272530 = {}
    
    # Call to dlti(...): (line 3220)
    
    # Obtaining the type of the subscript
    int_272517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3220, 31), 'int')
    slice_272518 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3220, 23), None, int_272517, None)
    # Getting the type of 'system' (line 3220)
    system_272519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 23), 'system', False)
    # Obtaining the member '__getitem__' of a type (line 3220)
    getitem___272520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3220, 23), system_272519, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3220)
    subscript_call_result_272521 = invoke(stypy.reporting.localization.Localization(__file__, 3220, 23), getitem___272520, slice_272518)
    
    # Processing the call keyword arguments (line 3220)
    
    # Obtaining the type of the subscript
    int_272522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3220, 46), 'int')
    # Getting the type of 'system' (line 3220)
    system_272523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 39), 'system', False)
    # Obtaining the member '__getitem__' of a type (line 3220)
    getitem___272524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3220, 39), system_272523, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3220)
    subscript_call_result_272525 = invoke(stypy.reporting.localization.Localization(__file__, 3220, 39), getitem___272524, int_272522)
    
    keyword_272526 = subscript_call_result_272525
    kwargs_272527 = {'dt': keyword_272526}
    # Getting the type of 'dlti' (line 3220)
    dlti_272516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 17), 'dlti', False)
    # Calling dlti(args, kwargs) (line 3220)
    dlti_call_result_272528 = invoke(stypy.reporting.localization.Localization(__file__, 3220, 17), dlti_272516, *[subscript_call_result_272521], **kwargs_272527)
    
    # Obtaining the member '_as_ss' of a type (line 3220)
    _as_ss_272529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3220, 17), dlti_call_result_272528, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 3220)
    _as_ss_call_result_272531 = invoke(stypy.reporting.localization.Localization(__file__, 3220, 17), _as_ss_272529, *[], **kwargs_272530)
    
    # Assigning a type to the variable 'system' (line 3220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3220, 8), 'system', _as_ss_call_result_272531)
    # SSA join for if statement (line 3216)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3214)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 3223)
    # Getting the type of 'n' (line 3223)
    n_272532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 7), 'n')
    # Getting the type of 'None' (line 3223)
    None_272533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 12), 'None')
    
    (may_be_272534, more_types_in_union_272535) = may_be_none(n_272532, None_272533)

    if may_be_272534:

        if more_types_in_union_272535:
            # Runtime conditional SSA (line 3223)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 3224):
        
        # Assigning a Num to a Name (line 3224):
        int_272536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3224, 12), 'int')
        # Assigning a type to the variable 'n' (line 3224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3224, 8), 'n', int_272536)

        if more_types_in_union_272535:
            # SSA join for if statement (line 3223)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 3228)
    # Getting the type of 't' (line 3228)
    t_272537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3228, 7), 't')
    # Getting the type of 'None' (line 3228)
    None_272538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3228, 12), 'None')
    
    (may_be_272539, more_types_in_union_272540) = may_be_none(t_272537, None_272538)

    if may_be_272539:

        if more_types_in_union_272540:
            # Runtime conditional SSA (line 3228)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3229):
        
        # Assigning a Call to a Name (line 3229):
        
        # Call to linspace(...): (line 3229)
        # Processing the call arguments (line 3229)
        int_272543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3229, 24), 'int')
        # Getting the type of 'n' (line 3229)
        n_272544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3229, 27), 'n', False)
        # Getting the type of 'system' (line 3229)
        system_272545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3229, 31), 'system', False)
        # Obtaining the member 'dt' of a type (line 3229)
        dt_272546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3229, 31), system_272545, 'dt')
        # Applying the binary operator '*' (line 3229)
        result_mul_272547 = python_operator(stypy.reporting.localization.Localization(__file__, 3229, 27), '*', n_272544, dt_272546)
        
        # Getting the type of 'n' (line 3229)
        n_272548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3229, 42), 'n', False)
        # Processing the call keyword arguments (line 3229)
        # Getting the type of 'False' (line 3229)
        False_272549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3229, 54), 'False', False)
        keyword_272550 = False_272549
        kwargs_272551 = {'endpoint': keyword_272550}
        # Getting the type of 'np' (line 3229)
        np_272541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3229, 12), 'np', False)
        # Obtaining the member 'linspace' of a type (line 3229)
        linspace_272542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3229, 12), np_272541, 'linspace')
        # Calling linspace(args, kwargs) (line 3229)
        linspace_call_result_272552 = invoke(stypy.reporting.localization.Localization(__file__, 3229, 12), linspace_272542, *[int_272543, result_mul_272547, n_272548], **kwargs_272551)
        
        # Assigning a type to the variable 't' (line 3229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3229, 8), 't', linspace_call_result_272552)

        if more_types_in_union_272540:
            # Runtime conditional SSA for else branch (line 3228)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_272539) or more_types_in_union_272540):
        
        # Assigning a Call to a Name (line 3231):
        
        # Assigning a Call to a Name (line 3231):
        
        # Call to asarray(...): (line 3231)
        # Processing the call arguments (line 3231)
        # Getting the type of 't' (line 3231)
        t_272555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3231, 23), 't', False)
        # Processing the call keyword arguments (line 3231)
        kwargs_272556 = {}
        # Getting the type of 'np' (line 3231)
        np_272553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3231, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 3231)
        asarray_272554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3231, 12), np_272553, 'asarray')
        # Calling asarray(args, kwargs) (line 3231)
        asarray_call_result_272557 = invoke(stypy.reporting.localization.Localization(__file__, 3231, 12), asarray_272554, *[t_272555], **kwargs_272556)
        
        # Assigning a type to the variable 't' (line 3231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3231, 8), 't', asarray_call_result_272557)

        if (may_be_272539 and more_types_in_union_272540):
            # SSA join for if statement (line 3228)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 3234):
    
    # Assigning a Name to a Name (line 3234):
    # Getting the type of 'None' (line 3234)
    None_272558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3234, 11), 'None')
    # Assigning a type to the variable 'yout' (line 3234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3234, 4), 'yout', None_272558)
    
    
    # Call to range(...): (line 3235)
    # Processing the call arguments (line 3235)
    int_272560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3235, 19), 'int')
    # Getting the type of 'system' (line 3235)
    system_272561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 22), 'system', False)
    # Obtaining the member 'inputs' of a type (line 3235)
    inputs_272562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3235, 22), system_272561, 'inputs')
    # Processing the call keyword arguments (line 3235)
    kwargs_272563 = {}
    # Getting the type of 'range' (line 3235)
    range_272559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 13), 'range', False)
    # Calling range(args, kwargs) (line 3235)
    range_call_result_272564 = invoke(stypy.reporting.localization.Localization(__file__, 3235, 13), range_272559, *[int_272560, inputs_272562], **kwargs_272563)
    
    # Testing the type of a for loop iterable (line 3235)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3235, 4), range_call_result_272564)
    # Getting the type of the for loop variable (line 3235)
    for_loop_var_272565 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3235, 4), range_call_result_272564)
    # Assigning a type to the variable 'i' (line 3235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3235, 4), 'i', for_loop_var_272565)
    # SSA begins for a for statement (line 3235)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 3236):
    
    # Assigning a Call to a Name (line 3236):
    
    # Call to zeros(...): (line 3236)
    # Processing the call arguments (line 3236)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3236)
    tuple_272568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3236, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3236)
    # Adding element type (line 3236)
    
    # Obtaining the type of the subscript
    int_272569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3236, 30), 'int')
    # Getting the type of 't' (line 3236)
    t_272570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 22), 't', False)
    # Obtaining the member 'shape' of a type (line 3236)
    shape_272571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3236, 22), t_272570, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3236)
    getitem___272572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3236, 22), shape_272571, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3236)
    subscript_call_result_272573 = invoke(stypy.reporting.localization.Localization(__file__, 3236, 22), getitem___272572, int_272569)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3236, 22), tuple_272568, subscript_call_result_272573)
    # Adding element type (line 3236)
    # Getting the type of 'system' (line 3236)
    system_272574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 34), 'system', False)
    # Obtaining the member 'inputs' of a type (line 3236)
    inputs_272575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3236, 34), system_272574, 'inputs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3236, 22), tuple_272568, inputs_272575)
    
    # Processing the call keyword arguments (line 3236)
    kwargs_272576 = {}
    # Getting the type of 'np' (line 3236)
    np_272566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 3236)
    zeros_272567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3236, 12), np_272566, 'zeros')
    # Calling zeros(args, kwargs) (line 3236)
    zeros_call_result_272577 = invoke(stypy.reporting.localization.Localization(__file__, 3236, 12), zeros_272567, *[tuple_272568], **kwargs_272576)
    
    # Assigning a type to the variable 'u' (line 3236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3236, 8), 'u', zeros_call_result_272577)
    
    # Assigning a Num to a Subscript (line 3237):
    
    # Assigning a Num to a Subscript (line 3237):
    float_272578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3237, 18), 'float')
    # Getting the type of 'u' (line 3237)
    u_272579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3237, 8), 'u')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3237)
    tuple_272580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3237, 10), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3237)
    # Adding element type (line 3237)
    int_272581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3237, 10), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3237, 10), tuple_272580, int_272581)
    # Adding element type (line 3237)
    # Getting the type of 'i' (line 3237)
    i_272582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3237, 13), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3237, 10), tuple_272580, i_272582)
    
    # Storing an element on a container (line 3237)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3237, 8), u_272579, (tuple_272580, float_272578))
    
    # Assigning a Call to a Name (line 3239):
    
    # Assigning a Call to a Name (line 3239):
    
    # Call to dlsim(...): (line 3239)
    # Processing the call arguments (line 3239)
    # Getting the type of 'system' (line 3239)
    system_272584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 27), 'system', False)
    # Getting the type of 'u' (line 3239)
    u_272585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 35), 'u', False)
    # Processing the call keyword arguments (line 3239)
    # Getting the type of 't' (line 3239)
    t_272586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 40), 't', False)
    keyword_272587 = t_272586
    # Getting the type of 'x0' (line 3239)
    x0_272588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 46), 'x0', False)
    keyword_272589 = x0_272588
    kwargs_272590 = {'x0': keyword_272589, 't': keyword_272587}
    # Getting the type of 'dlsim' (line 3239)
    dlsim_272583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 21), 'dlsim', False)
    # Calling dlsim(args, kwargs) (line 3239)
    dlsim_call_result_272591 = invoke(stypy.reporting.localization.Localization(__file__, 3239, 21), dlsim_272583, *[system_272584, u_272585], **kwargs_272590)
    
    # Assigning a type to the variable 'one_output' (line 3239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3239, 8), 'one_output', dlsim_call_result_272591)
    
    # Type idiom detected: calculating its left and rigth part (line 3241)
    # Getting the type of 'yout' (line 3241)
    yout_272592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 11), 'yout')
    # Getting the type of 'None' (line 3241)
    None_272593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 19), 'None')
    
    (may_be_272594, more_types_in_union_272595) = may_be_none(yout_272592, None_272593)

    if may_be_272594:

        if more_types_in_union_272595:
            # Runtime conditional SSA (line 3241)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Tuple to a Name (line 3242):
        
        # Assigning a Tuple to a Name (line 3242):
        
        # Obtaining an instance of the builtin type 'tuple' (line 3242)
        tuple_272596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3242, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3242)
        # Adding element type (line 3242)
        
        # Obtaining the type of the subscript
        int_272597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3242, 31), 'int')
        # Getting the type of 'one_output' (line 3242)
        one_output_272598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3242, 20), 'one_output')
        # Obtaining the member '__getitem__' of a type (line 3242)
        getitem___272599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3242, 20), one_output_272598, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3242)
        subscript_call_result_272600 = invoke(stypy.reporting.localization.Localization(__file__, 3242, 20), getitem___272599, int_272597)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3242, 20), tuple_272596, subscript_call_result_272600)
        
        # Assigning a type to the variable 'yout' (line 3242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3242, 12), 'yout', tuple_272596)

        if more_types_in_union_272595:
            # Runtime conditional SSA for else branch (line 3241)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_272594) or more_types_in_union_272595):
        
        # Assigning a BinOp to a Name (line 3244):
        
        # Assigning a BinOp to a Name (line 3244):
        # Getting the type of 'yout' (line 3244)
        yout_272601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3244, 19), 'yout')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3244)
        tuple_272602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3244, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3244)
        # Adding element type (line 3244)
        
        # Obtaining the type of the subscript
        int_272603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3244, 38), 'int')
        # Getting the type of 'one_output' (line 3244)
        one_output_272604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3244, 27), 'one_output')
        # Obtaining the member '__getitem__' of a type (line 3244)
        getitem___272605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3244, 27), one_output_272604, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3244)
        subscript_call_result_272606 = invoke(stypy.reporting.localization.Localization(__file__, 3244, 27), getitem___272605, int_272603)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3244, 27), tuple_272602, subscript_call_result_272606)
        
        # Applying the binary operator '+' (line 3244)
        result_add_272607 = python_operator(stypy.reporting.localization.Localization(__file__, 3244, 19), '+', yout_272601, tuple_272602)
        
        # Assigning a type to the variable 'yout' (line 3244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3244, 12), 'yout', result_add_272607)

        if (may_be_272594 and more_types_in_union_272595):
            # SSA join for if statement (line 3241)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Name (line 3246):
    
    # Assigning a Subscript to a Name (line 3246):
    
    # Obtaining the type of the subscript
    int_272608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3246, 26), 'int')
    # Getting the type of 'one_output' (line 3246)
    one_output_272609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3246, 15), 'one_output')
    # Obtaining the member '__getitem__' of a type (line 3246)
    getitem___272610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3246, 15), one_output_272609, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3246)
    subscript_call_result_272611 = invoke(stypy.reporting.localization.Localization(__file__, 3246, 15), getitem___272610, int_272608)
    
    # Assigning a type to the variable 'tout' (line 3246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3246, 8), 'tout', subscript_call_result_272611)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3248)
    tuple_272612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3248, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3248)
    # Adding element type (line 3248)
    # Getting the type of 'tout' (line 3248)
    tout_272613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 11), 'tout')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3248, 11), tuple_272612, tout_272613)
    # Adding element type (line 3248)
    # Getting the type of 'yout' (line 3248)
    yout_272614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 17), 'yout')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3248, 11), tuple_272612, yout_272614)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3248, 4), 'stypy_return_type', tuple_272612)
    
    # ################# End of 'dimpulse(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dimpulse' in the type store
    # Getting the type of 'stypy_return_type' (line 3177)
    stypy_return_type_272615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_272615)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dimpulse'
    return stypy_return_type_272615

# Assigning a type to the variable 'dimpulse' (line 3177)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3177, 0), 'dimpulse', dimpulse)

@norecursion
def dstep(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3251)
    None_272616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 21), 'None')
    # Getting the type of 'None' (line 3251)
    None_272617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 29), 'None')
    # Getting the type of 'None' (line 3251)
    None_272618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 37), 'None')
    defaults = [None_272616, None_272617, None_272618]
    # Create a new context for function 'dstep'
    module_type_store = module_type_store.open_function_context('dstep', 3251, 0, False)
    
    # Passed parameters checking function
    dstep.stypy_localization = localization
    dstep.stypy_type_of_self = None
    dstep.stypy_type_store = module_type_store
    dstep.stypy_function_name = 'dstep'
    dstep.stypy_param_names_list = ['system', 'x0', 't', 'n']
    dstep.stypy_varargs_param_name = None
    dstep.stypy_kwargs_param_name = None
    dstep.stypy_call_defaults = defaults
    dstep.stypy_call_varargs = varargs
    dstep.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dstep', ['system', 'x0', 't', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dstep', localization, ['system', 'x0', 't', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dstep(...)' code ##################

    str_272619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3286, (-1)), 'str', '\n    Step response of discrete-time system.\n\n    Parameters\n    ----------\n    system : tuple of array_like\n        A tuple describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n            * 1: (instance of `dlti`)\n            * 3: (num, den, dt)\n            * 4: (zeros, poles, gain, dt)\n            * 5: (A, B, C, D, dt)\n\n    x0 : array_like, optional\n        Initial state-vector.  Defaults to zero.\n    t : array_like, optional\n        Time points.  Computed if not given.\n    n : int, optional\n        The number of time points to compute (if `t` is not given).\n\n    Returns\n    -------\n    tout : ndarray\n        Output time points, as a 1-D array.\n    yout : ndarray\n        Step response of system.  Each element of the tuple represents\n        the output of the system based on a step response to each input.\n\n    See Also\n    --------\n    step, dimpulse, dlsim, cont2discrete\n\n    ')
    
    
    # Call to isinstance(...): (line 3288)
    # Processing the call arguments (line 3288)
    # Getting the type of 'system' (line 3288)
    system_272621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 18), 'system', False)
    # Getting the type of 'dlti' (line 3288)
    dlti_272622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 26), 'dlti', False)
    # Processing the call keyword arguments (line 3288)
    kwargs_272623 = {}
    # Getting the type of 'isinstance' (line 3288)
    isinstance_272620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3288)
    isinstance_call_result_272624 = invoke(stypy.reporting.localization.Localization(__file__, 3288, 7), isinstance_272620, *[system_272621, dlti_272622], **kwargs_272623)
    
    # Testing the type of an if condition (line 3288)
    if_condition_272625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3288, 4), isinstance_call_result_272624)
    # Assigning a type to the variable 'if_condition_272625' (line 3288)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3288, 4), 'if_condition_272625', if_condition_272625)
    # SSA begins for if statement (line 3288)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3289):
    
    # Assigning a Call to a Name (line 3289):
    
    # Call to _as_ss(...): (line 3289)
    # Processing the call keyword arguments (line 3289)
    kwargs_272628 = {}
    # Getting the type of 'system' (line 3289)
    system_272626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 17), 'system', False)
    # Obtaining the member '_as_ss' of a type (line 3289)
    _as_ss_272627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3289, 17), system_272626, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 3289)
    _as_ss_call_result_272629 = invoke(stypy.reporting.localization.Localization(__file__, 3289, 17), _as_ss_272627, *[], **kwargs_272628)
    
    # Assigning a type to the variable 'system' (line 3289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3289, 8), 'system', _as_ss_call_result_272629)
    # SSA branch for the else part of an if statement (line 3288)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 3290)
    # Processing the call arguments (line 3290)
    # Getting the type of 'system' (line 3290)
    system_272631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3290, 20), 'system', False)
    # Getting the type of 'lti' (line 3290)
    lti_272632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3290, 28), 'lti', False)
    # Processing the call keyword arguments (line 3290)
    kwargs_272633 = {}
    # Getting the type of 'isinstance' (line 3290)
    isinstance_272630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3290, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3290)
    isinstance_call_result_272634 = invoke(stypy.reporting.localization.Localization(__file__, 3290, 9), isinstance_272630, *[system_272631, lti_272632], **kwargs_272633)
    
    # Testing the type of an if condition (line 3290)
    if_condition_272635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3290, 9), isinstance_call_result_272634)
    # Assigning a type to the variable 'if_condition_272635' (line 3290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3290, 9), 'if_condition_272635', if_condition_272635)
    # SSA begins for if statement (line 3290)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 3291)
    # Processing the call arguments (line 3291)
    str_272637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3291, 29), 'str', 'dstep can only be used with discrete-time dlti systems.')
    # Processing the call keyword arguments (line 3291)
    kwargs_272638 = {}
    # Getting the type of 'AttributeError' (line 3291)
    AttributeError_272636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3291, 14), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 3291)
    AttributeError_call_result_272639 = invoke(stypy.reporting.localization.Localization(__file__, 3291, 14), AttributeError_272636, *[str_272637], **kwargs_272638)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3291, 8), AttributeError_call_result_272639, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 3290)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3294):
    
    # Assigning a Call to a Name (line 3294):
    
    # Call to _as_ss(...): (line 3294)
    # Processing the call keyword arguments (line 3294)
    kwargs_272654 = {}
    
    # Call to dlti(...): (line 3294)
    
    # Obtaining the type of the subscript
    int_272641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3294, 31), 'int')
    slice_272642 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3294, 23), None, int_272641, None)
    # Getting the type of 'system' (line 3294)
    system_272643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3294, 23), 'system', False)
    # Obtaining the member '__getitem__' of a type (line 3294)
    getitem___272644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3294, 23), system_272643, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3294)
    subscript_call_result_272645 = invoke(stypy.reporting.localization.Localization(__file__, 3294, 23), getitem___272644, slice_272642)
    
    # Processing the call keyword arguments (line 3294)
    
    # Obtaining the type of the subscript
    int_272646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3294, 46), 'int')
    # Getting the type of 'system' (line 3294)
    system_272647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3294, 39), 'system', False)
    # Obtaining the member '__getitem__' of a type (line 3294)
    getitem___272648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3294, 39), system_272647, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3294)
    subscript_call_result_272649 = invoke(stypy.reporting.localization.Localization(__file__, 3294, 39), getitem___272648, int_272646)
    
    keyword_272650 = subscript_call_result_272649
    kwargs_272651 = {'dt': keyword_272650}
    # Getting the type of 'dlti' (line 3294)
    dlti_272640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3294, 17), 'dlti', False)
    # Calling dlti(args, kwargs) (line 3294)
    dlti_call_result_272652 = invoke(stypy.reporting.localization.Localization(__file__, 3294, 17), dlti_272640, *[subscript_call_result_272645], **kwargs_272651)
    
    # Obtaining the member '_as_ss' of a type (line 3294)
    _as_ss_272653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3294, 17), dlti_call_result_272652, '_as_ss')
    # Calling _as_ss(args, kwargs) (line 3294)
    _as_ss_call_result_272655 = invoke(stypy.reporting.localization.Localization(__file__, 3294, 17), _as_ss_272653, *[], **kwargs_272654)
    
    # Assigning a type to the variable 'system' (line 3294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3294, 8), 'system', _as_ss_call_result_272655)
    # SSA join for if statement (line 3290)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3288)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 3297)
    # Getting the type of 'n' (line 3297)
    n_272656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3297, 7), 'n')
    # Getting the type of 'None' (line 3297)
    None_272657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3297, 12), 'None')
    
    (may_be_272658, more_types_in_union_272659) = may_be_none(n_272656, None_272657)

    if may_be_272658:

        if more_types_in_union_272659:
            # Runtime conditional SSA (line 3297)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 3298):
        
        # Assigning a Num to a Name (line 3298):
        int_272660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3298, 12), 'int')
        # Assigning a type to the variable 'n' (line 3298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3298, 8), 'n', int_272660)

        if more_types_in_union_272659:
            # SSA join for if statement (line 3297)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 3302)
    # Getting the type of 't' (line 3302)
    t_272661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 7), 't')
    # Getting the type of 'None' (line 3302)
    None_272662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 12), 'None')
    
    (may_be_272663, more_types_in_union_272664) = may_be_none(t_272661, None_272662)

    if may_be_272663:

        if more_types_in_union_272664:
            # Runtime conditional SSA (line 3302)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3303):
        
        # Assigning a Call to a Name (line 3303):
        
        # Call to linspace(...): (line 3303)
        # Processing the call arguments (line 3303)
        int_272667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3303, 24), 'int')
        # Getting the type of 'n' (line 3303)
        n_272668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 27), 'n', False)
        # Getting the type of 'system' (line 3303)
        system_272669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 31), 'system', False)
        # Obtaining the member 'dt' of a type (line 3303)
        dt_272670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3303, 31), system_272669, 'dt')
        # Applying the binary operator '*' (line 3303)
        result_mul_272671 = python_operator(stypy.reporting.localization.Localization(__file__, 3303, 27), '*', n_272668, dt_272670)
        
        # Getting the type of 'n' (line 3303)
        n_272672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 42), 'n', False)
        # Processing the call keyword arguments (line 3303)
        # Getting the type of 'False' (line 3303)
        False_272673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 54), 'False', False)
        keyword_272674 = False_272673
        kwargs_272675 = {'endpoint': keyword_272674}
        # Getting the type of 'np' (line 3303)
        np_272665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 12), 'np', False)
        # Obtaining the member 'linspace' of a type (line 3303)
        linspace_272666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3303, 12), np_272665, 'linspace')
        # Calling linspace(args, kwargs) (line 3303)
        linspace_call_result_272676 = invoke(stypy.reporting.localization.Localization(__file__, 3303, 12), linspace_272666, *[int_272667, result_mul_272671, n_272672], **kwargs_272675)
        
        # Assigning a type to the variable 't' (line 3303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3303, 8), 't', linspace_call_result_272676)

        if more_types_in_union_272664:
            # Runtime conditional SSA for else branch (line 3302)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_272663) or more_types_in_union_272664):
        
        # Assigning a Call to a Name (line 3305):
        
        # Assigning a Call to a Name (line 3305):
        
        # Call to asarray(...): (line 3305)
        # Processing the call arguments (line 3305)
        # Getting the type of 't' (line 3305)
        t_272679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 23), 't', False)
        # Processing the call keyword arguments (line 3305)
        kwargs_272680 = {}
        # Getting the type of 'np' (line 3305)
        np_272677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 3305)
        asarray_272678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3305, 12), np_272677, 'asarray')
        # Calling asarray(args, kwargs) (line 3305)
        asarray_call_result_272681 = invoke(stypy.reporting.localization.Localization(__file__, 3305, 12), asarray_272678, *[t_272679], **kwargs_272680)
        
        # Assigning a type to the variable 't' (line 3305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3305, 8), 't', asarray_call_result_272681)

        if (may_be_272663 and more_types_in_union_272664):
            # SSA join for if statement (line 3302)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 3308):
    
    # Assigning a Name to a Name (line 3308):
    # Getting the type of 'None' (line 3308)
    None_272682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3308, 11), 'None')
    # Assigning a type to the variable 'yout' (line 3308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3308, 4), 'yout', None_272682)
    
    
    # Call to range(...): (line 3309)
    # Processing the call arguments (line 3309)
    int_272684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3309, 19), 'int')
    # Getting the type of 'system' (line 3309)
    system_272685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3309, 22), 'system', False)
    # Obtaining the member 'inputs' of a type (line 3309)
    inputs_272686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3309, 22), system_272685, 'inputs')
    # Processing the call keyword arguments (line 3309)
    kwargs_272687 = {}
    # Getting the type of 'range' (line 3309)
    range_272683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3309, 13), 'range', False)
    # Calling range(args, kwargs) (line 3309)
    range_call_result_272688 = invoke(stypy.reporting.localization.Localization(__file__, 3309, 13), range_272683, *[int_272684, inputs_272686], **kwargs_272687)
    
    # Testing the type of a for loop iterable (line 3309)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3309, 4), range_call_result_272688)
    # Getting the type of the for loop variable (line 3309)
    for_loop_var_272689 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3309, 4), range_call_result_272688)
    # Assigning a type to the variable 'i' (line 3309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3309, 4), 'i', for_loop_var_272689)
    # SSA begins for a for statement (line 3309)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 3310):
    
    # Assigning a Call to a Name (line 3310):
    
    # Call to zeros(...): (line 3310)
    # Processing the call arguments (line 3310)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3310)
    tuple_272692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3310, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3310)
    # Adding element type (line 3310)
    
    # Obtaining the type of the subscript
    int_272693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3310, 30), 'int')
    # Getting the type of 't' (line 3310)
    t_272694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3310, 22), 't', False)
    # Obtaining the member 'shape' of a type (line 3310)
    shape_272695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3310, 22), t_272694, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3310)
    getitem___272696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3310, 22), shape_272695, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3310)
    subscript_call_result_272697 = invoke(stypy.reporting.localization.Localization(__file__, 3310, 22), getitem___272696, int_272693)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3310, 22), tuple_272692, subscript_call_result_272697)
    # Adding element type (line 3310)
    # Getting the type of 'system' (line 3310)
    system_272698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3310, 34), 'system', False)
    # Obtaining the member 'inputs' of a type (line 3310)
    inputs_272699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3310, 34), system_272698, 'inputs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3310, 22), tuple_272692, inputs_272699)
    
    # Processing the call keyword arguments (line 3310)
    kwargs_272700 = {}
    # Getting the type of 'np' (line 3310)
    np_272690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3310, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 3310)
    zeros_272691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3310, 12), np_272690, 'zeros')
    # Calling zeros(args, kwargs) (line 3310)
    zeros_call_result_272701 = invoke(stypy.reporting.localization.Localization(__file__, 3310, 12), zeros_272691, *[tuple_272692], **kwargs_272700)
    
    # Assigning a type to the variable 'u' (line 3310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3310, 8), 'u', zeros_call_result_272701)
    
    # Assigning a Call to a Subscript (line 3311):
    
    # Assigning a Call to a Subscript (line 3311):
    
    # Call to ones(...): (line 3311)
    # Processing the call arguments (line 3311)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3311)
    tuple_272704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3311, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3311)
    # Adding element type (line 3311)
    
    # Obtaining the type of the subscript
    int_272705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3311, 35), 'int')
    # Getting the type of 't' (line 3311)
    t_272706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3311, 27), 't', False)
    # Obtaining the member 'shape' of a type (line 3311)
    shape_272707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3311, 27), t_272706, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3311)
    getitem___272708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3311, 27), shape_272707, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3311)
    subscript_call_result_272709 = invoke(stypy.reporting.localization.Localization(__file__, 3311, 27), getitem___272708, int_272705)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3311, 27), tuple_272704, subscript_call_result_272709)
    
    # Processing the call keyword arguments (line 3311)
    kwargs_272710 = {}
    # Getting the type of 'np' (line 3311)
    np_272702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3311, 18), 'np', False)
    # Obtaining the member 'ones' of a type (line 3311)
    ones_272703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3311, 18), np_272702, 'ones')
    # Calling ones(args, kwargs) (line 3311)
    ones_call_result_272711 = invoke(stypy.reporting.localization.Localization(__file__, 3311, 18), ones_272703, *[tuple_272704], **kwargs_272710)
    
    # Getting the type of 'u' (line 3311)
    u_272712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3311, 8), 'u')
    slice_272713 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3311, 8), None, None, None)
    # Getting the type of 'i' (line 3311)
    i_272714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3311, 13), 'i')
    # Storing an element on a container (line 3311)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3311, 8), u_272712, ((slice_272713, i_272714), ones_call_result_272711))
    
    # Assigning a Call to a Name (line 3313):
    
    # Assigning a Call to a Name (line 3313):
    
    # Call to dlsim(...): (line 3313)
    # Processing the call arguments (line 3313)
    # Getting the type of 'system' (line 3313)
    system_272716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3313, 27), 'system', False)
    # Getting the type of 'u' (line 3313)
    u_272717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3313, 35), 'u', False)
    # Processing the call keyword arguments (line 3313)
    # Getting the type of 't' (line 3313)
    t_272718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3313, 40), 't', False)
    keyword_272719 = t_272718
    # Getting the type of 'x0' (line 3313)
    x0_272720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3313, 46), 'x0', False)
    keyword_272721 = x0_272720
    kwargs_272722 = {'x0': keyword_272721, 't': keyword_272719}
    # Getting the type of 'dlsim' (line 3313)
    dlsim_272715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3313, 21), 'dlsim', False)
    # Calling dlsim(args, kwargs) (line 3313)
    dlsim_call_result_272723 = invoke(stypy.reporting.localization.Localization(__file__, 3313, 21), dlsim_272715, *[system_272716, u_272717], **kwargs_272722)
    
    # Assigning a type to the variable 'one_output' (line 3313)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3313, 8), 'one_output', dlsim_call_result_272723)
    
    # Type idiom detected: calculating its left and rigth part (line 3315)
    # Getting the type of 'yout' (line 3315)
    yout_272724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3315, 11), 'yout')
    # Getting the type of 'None' (line 3315)
    None_272725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3315, 19), 'None')
    
    (may_be_272726, more_types_in_union_272727) = may_be_none(yout_272724, None_272725)

    if may_be_272726:

        if more_types_in_union_272727:
            # Runtime conditional SSA (line 3315)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Tuple to a Name (line 3316):
        
        # Assigning a Tuple to a Name (line 3316):
        
        # Obtaining an instance of the builtin type 'tuple' (line 3316)
        tuple_272728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3316, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3316)
        # Adding element type (line 3316)
        
        # Obtaining the type of the subscript
        int_272729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3316, 31), 'int')
        # Getting the type of 'one_output' (line 3316)
        one_output_272730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3316, 20), 'one_output')
        # Obtaining the member '__getitem__' of a type (line 3316)
        getitem___272731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3316, 20), one_output_272730, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3316)
        subscript_call_result_272732 = invoke(stypy.reporting.localization.Localization(__file__, 3316, 20), getitem___272731, int_272729)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3316, 20), tuple_272728, subscript_call_result_272732)
        
        # Assigning a type to the variable 'yout' (line 3316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3316, 12), 'yout', tuple_272728)

        if more_types_in_union_272727:
            # Runtime conditional SSA for else branch (line 3315)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_272726) or more_types_in_union_272727):
        
        # Assigning a BinOp to a Name (line 3318):
        
        # Assigning a BinOp to a Name (line 3318):
        # Getting the type of 'yout' (line 3318)
        yout_272733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3318, 19), 'yout')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3318)
        tuple_272734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3318, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3318)
        # Adding element type (line 3318)
        
        # Obtaining the type of the subscript
        int_272735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3318, 38), 'int')
        # Getting the type of 'one_output' (line 3318)
        one_output_272736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3318, 27), 'one_output')
        # Obtaining the member '__getitem__' of a type (line 3318)
        getitem___272737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3318, 27), one_output_272736, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3318)
        subscript_call_result_272738 = invoke(stypy.reporting.localization.Localization(__file__, 3318, 27), getitem___272737, int_272735)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3318, 27), tuple_272734, subscript_call_result_272738)
        
        # Applying the binary operator '+' (line 3318)
        result_add_272739 = python_operator(stypy.reporting.localization.Localization(__file__, 3318, 19), '+', yout_272733, tuple_272734)
        
        # Assigning a type to the variable 'yout' (line 3318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3318, 12), 'yout', result_add_272739)

        if (may_be_272726 and more_types_in_union_272727):
            # SSA join for if statement (line 3315)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Name (line 3320):
    
    # Assigning a Subscript to a Name (line 3320):
    
    # Obtaining the type of the subscript
    int_272740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3320, 26), 'int')
    # Getting the type of 'one_output' (line 3320)
    one_output_272741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3320, 15), 'one_output')
    # Obtaining the member '__getitem__' of a type (line 3320)
    getitem___272742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3320, 15), one_output_272741, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3320)
    subscript_call_result_272743 = invoke(stypy.reporting.localization.Localization(__file__, 3320, 15), getitem___272742, int_272740)
    
    # Assigning a type to the variable 'tout' (line 3320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3320, 8), 'tout', subscript_call_result_272743)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3322)
    tuple_272744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3322, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3322)
    # Adding element type (line 3322)
    # Getting the type of 'tout' (line 3322)
    tout_272745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3322, 11), 'tout')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3322, 11), tuple_272744, tout_272745)
    # Adding element type (line 3322)
    # Getting the type of 'yout' (line 3322)
    yout_272746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3322, 17), 'yout')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3322, 11), tuple_272744, yout_272746)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3322, 4), 'stypy_return_type', tuple_272744)
    
    # ################# End of 'dstep(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dstep' in the type store
    # Getting the type of 'stypy_return_type' (line 3251)
    stypy_return_type_272747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_272747)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dstep'
    return stypy_return_type_272747

# Assigning a type to the variable 'dstep' (line 3251)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3251, 0), 'dstep', dstep)

@norecursion
def dfreqresp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3325)
    None_272748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 24), 'None')
    int_272749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3325, 32), 'int')
    # Getting the type of 'False' (line 3325)
    False_272750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 45), 'False')
    defaults = [None_272748, int_272749, False_272750]
    # Create a new context for function 'dfreqresp'
    module_type_store = module_type_store.open_function_context('dfreqresp', 3325, 0, False)
    
    # Passed parameters checking function
    dfreqresp.stypy_localization = localization
    dfreqresp.stypy_type_of_self = None
    dfreqresp.stypy_type_store = module_type_store
    dfreqresp.stypy_function_name = 'dfreqresp'
    dfreqresp.stypy_param_names_list = ['system', 'w', 'n', 'whole']
    dfreqresp.stypy_varargs_param_name = None
    dfreqresp.stypy_kwargs_param_name = None
    dfreqresp.stypy_call_defaults = defaults
    dfreqresp.stypy_call_varargs = varargs
    dfreqresp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dfreqresp', ['system', 'w', 'n', 'whole'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dfreqresp', localization, ['system', 'w', 'n', 'whole'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dfreqresp(...)' code ##################

    str_272751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3386, (-1)), 'str', '\n    Calculate the frequency response of a discrete-time system.\n\n    Parameters\n    ----------\n    system : an instance of the `dlti` class or a tuple describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n            * 1 (instance of `dlti`)\n            * 2 (numerator, denominator, dt)\n            * 3 (zeros, poles, gain, dt)\n            * 4 (A, B, C, D, dt)\n\n    w : array_like, optional\n        Array of frequencies (in radians/sample). Magnitude and phase data is\n        calculated for every value in this array. If not given a reasonable\n        set will be calculated.\n    n : int, optional\n        Number of frequency points to compute if `w` is not given. The `n`\n        frequencies are logarithmically spaced in an interval chosen to\n        include the influence of the poles and zeros of the system.\n    whole : bool, optional\n        Normally, if \'w\' is not given, frequencies are computed from 0 to the\n        Nyquist frequency, pi radians/sample (upper-half of unit-circle). If\n        `whole` is True, compute frequencies from 0 to 2*pi radians/sample.\n\n    Returns\n    -------\n    w : 1D ndarray\n        Frequency array [radians/sample]\n    H : 1D ndarray\n        Array of complex magnitude values\n\n    Notes\n    -----\n    If (num, den) is passed in for ``system``, coefficients for both the\n    numerator and denominator should be specified in descending exponent\n    order (e.g. ``z^2 + 3z + 5`` would be represented as ``[1, 3, 5]``).\n\n    .. versionadded:: 0.18.0\n\n    Examples\n    --------\n    Generating the Nyquist plot of a transfer function\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    Transfer function: H(z) = 1 / (z^2 + 2z + 3)\n\n    >>> sys = signal.TransferFunction([1], [1, 2, 3], dt=0.05)\n\n    >>> w, H = signal.dfreqresp(sys)\n\n    >>> plt.figure()\n    >>> plt.plot(H.real, H.imag, "b")\n    >>> plt.plot(H.real, -H.imag, "r")\n    >>> plt.show()\n\n    ')
    
    
    
    # Call to isinstance(...): (line 3387)
    # Processing the call arguments (line 3387)
    # Getting the type of 'system' (line 3387)
    system_272753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3387, 22), 'system', False)
    # Getting the type of 'dlti' (line 3387)
    dlti_272754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3387, 30), 'dlti', False)
    # Processing the call keyword arguments (line 3387)
    kwargs_272755 = {}
    # Getting the type of 'isinstance' (line 3387)
    isinstance_272752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3387, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3387)
    isinstance_call_result_272756 = invoke(stypy.reporting.localization.Localization(__file__, 3387, 11), isinstance_272752, *[system_272753, dlti_272754], **kwargs_272755)
    
    # Applying the 'not' unary operator (line 3387)
    result_not__272757 = python_operator(stypy.reporting.localization.Localization(__file__, 3387, 7), 'not', isinstance_call_result_272756)
    
    # Testing the type of an if condition (line 3387)
    if_condition_272758 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3387, 4), result_not__272757)
    # Assigning a type to the variable 'if_condition_272758' (line 3387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3387, 4), 'if_condition_272758', if_condition_272758)
    # SSA begins for if statement (line 3387)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to isinstance(...): (line 3388)
    # Processing the call arguments (line 3388)
    # Getting the type of 'system' (line 3388)
    system_272760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 22), 'system', False)
    # Getting the type of 'lti' (line 3388)
    lti_272761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 30), 'lti', False)
    # Processing the call keyword arguments (line 3388)
    kwargs_272762 = {}
    # Getting the type of 'isinstance' (line 3388)
    isinstance_272759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3388)
    isinstance_call_result_272763 = invoke(stypy.reporting.localization.Localization(__file__, 3388, 11), isinstance_272759, *[system_272760, lti_272761], **kwargs_272762)
    
    # Testing the type of an if condition (line 3388)
    if_condition_272764 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3388, 8), isinstance_call_result_272763)
    # Assigning a type to the variable 'if_condition_272764' (line 3388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3388, 8), 'if_condition_272764', if_condition_272764)
    # SSA begins for if statement (line 3388)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 3389)
    # Processing the call arguments (line 3389)
    str_272766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3389, 33), 'str', 'dfreqresp can only be used with discrete-time systems.')
    # Processing the call keyword arguments (line 3389)
    kwargs_272767 = {}
    # Getting the type of 'AttributeError' (line 3389)
    AttributeError_272765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3389, 18), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 3389)
    AttributeError_call_result_272768 = invoke(stypy.reporting.localization.Localization(__file__, 3389, 18), AttributeError_272765, *[str_272766], **kwargs_272767)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3389, 12), AttributeError_call_result_272768, 'raise parameter', BaseException)
    # SSA join for if statement (line 3388)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3392):
    
    # Assigning a Call to a Name (line 3392):
    
    # Call to dlti(...): (line 3392)
    
    # Obtaining the type of the subscript
    int_272770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3392, 31), 'int')
    slice_272771 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3392, 23), None, int_272770, None)
    # Getting the type of 'system' (line 3392)
    system_272772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 23), 'system', False)
    # Obtaining the member '__getitem__' of a type (line 3392)
    getitem___272773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3392, 23), system_272772, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3392)
    subscript_call_result_272774 = invoke(stypy.reporting.localization.Localization(__file__, 3392, 23), getitem___272773, slice_272771)
    
    # Processing the call keyword arguments (line 3392)
    
    # Obtaining the type of the subscript
    int_272775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3392, 46), 'int')
    # Getting the type of 'system' (line 3392)
    system_272776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 39), 'system', False)
    # Obtaining the member '__getitem__' of a type (line 3392)
    getitem___272777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3392, 39), system_272776, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3392)
    subscript_call_result_272778 = invoke(stypy.reporting.localization.Localization(__file__, 3392, 39), getitem___272777, int_272775)
    
    keyword_272779 = subscript_call_result_272778
    kwargs_272780 = {'dt': keyword_272779}
    # Getting the type of 'dlti' (line 3392)
    dlti_272769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 17), 'dlti', False)
    # Calling dlti(args, kwargs) (line 3392)
    dlti_call_result_272781 = invoke(stypy.reporting.localization.Localization(__file__, 3392, 17), dlti_272769, *[subscript_call_result_272774], **kwargs_272780)
    
    # Assigning a type to the variable 'system' (line 3392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3392, 8), 'system', dlti_call_result_272781)
    # SSA join for if statement (line 3387)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isinstance(...): (line 3394)
    # Processing the call arguments (line 3394)
    # Getting the type of 'system' (line 3394)
    system_272783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3394, 18), 'system', False)
    # Getting the type of 'StateSpace' (line 3394)
    StateSpace_272784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3394, 26), 'StateSpace', False)
    # Processing the call keyword arguments (line 3394)
    kwargs_272785 = {}
    # Getting the type of 'isinstance' (line 3394)
    isinstance_272782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3394, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3394)
    isinstance_call_result_272786 = invoke(stypy.reporting.localization.Localization(__file__, 3394, 7), isinstance_272782, *[system_272783, StateSpace_272784], **kwargs_272785)
    
    # Testing the type of an if condition (line 3394)
    if_condition_272787 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3394, 4), isinstance_call_result_272786)
    # Assigning a type to the variable 'if_condition_272787' (line 3394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3394, 4), 'if_condition_272787', if_condition_272787)
    # SSA begins for if statement (line 3394)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3396):
    
    # Assigning a Call to a Name (line 3396):
    
    # Call to _as_tf(...): (line 3396)
    # Processing the call keyword arguments (line 3396)
    kwargs_272790 = {}
    # Getting the type of 'system' (line 3396)
    system_272788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3396, 17), 'system', False)
    # Obtaining the member '_as_tf' of a type (line 3396)
    _as_tf_272789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3396, 17), system_272788, '_as_tf')
    # Calling _as_tf(args, kwargs) (line 3396)
    _as_tf_call_result_272791 = invoke(stypy.reporting.localization.Localization(__file__, 3396, 17), _as_tf_272789, *[], **kwargs_272790)
    
    # Assigning a type to the variable 'system' (line 3396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3396, 8), 'system', _as_tf_call_result_272791)
    # SSA join for if statement (line 3394)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to isinstance(...): (line 3398)
    # Processing the call arguments (line 3398)
    # Getting the type of 'system' (line 3398)
    system_272793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 22), 'system', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3398)
    tuple_272794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3398, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3398)
    # Adding element type (line 3398)
    # Getting the type of 'TransferFunction' (line 3398)
    TransferFunction_272795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 31), 'TransferFunction', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3398, 31), tuple_272794, TransferFunction_272795)
    # Adding element type (line 3398)
    # Getting the type of 'ZerosPolesGain' (line 3398)
    ZerosPolesGain_272796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 49), 'ZerosPolesGain', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3398, 31), tuple_272794, ZerosPolesGain_272796)
    
    # Processing the call keyword arguments (line 3398)
    kwargs_272797 = {}
    # Getting the type of 'isinstance' (line 3398)
    isinstance_272792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3398)
    isinstance_call_result_272798 = invoke(stypy.reporting.localization.Localization(__file__, 3398, 11), isinstance_272792, *[system_272793, tuple_272794], **kwargs_272797)
    
    # Applying the 'not' unary operator (line 3398)
    result_not__272799 = python_operator(stypy.reporting.localization.Localization(__file__, 3398, 7), 'not', isinstance_call_result_272798)
    
    # Testing the type of an if condition (line 3398)
    if_condition_272800 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3398, 4), result_not__272799)
    # Assigning a type to the variable 'if_condition_272800' (line 3398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3398, 4), 'if_condition_272800', if_condition_272800)
    # SSA begins for if statement (line 3398)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3399)
    # Processing the call arguments (line 3399)
    str_272802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3399, 25), 'str', 'Unknown system type')
    # Processing the call keyword arguments (line 3399)
    kwargs_272803 = {}
    # Getting the type of 'ValueError' (line 3399)
    ValueError_272801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3399)
    ValueError_call_result_272804 = invoke(stypy.reporting.localization.Localization(__file__, 3399, 14), ValueError_272801, *[str_272802], **kwargs_272803)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3399, 8), ValueError_call_result_272804, 'raise parameter', BaseException)
    # SSA join for if statement (line 3398)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'system' (line 3401)
    system_272805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 7), 'system')
    # Obtaining the member 'inputs' of a type (line 3401)
    inputs_272806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3401, 7), system_272805, 'inputs')
    int_272807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3401, 24), 'int')
    # Applying the binary operator '!=' (line 3401)
    result_ne_272808 = python_operator(stypy.reporting.localization.Localization(__file__, 3401, 7), '!=', inputs_272806, int_272807)
    
    
    # Getting the type of 'system' (line 3401)
    system_272809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 29), 'system')
    # Obtaining the member 'outputs' of a type (line 3401)
    outputs_272810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3401, 29), system_272809, 'outputs')
    int_272811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3401, 47), 'int')
    # Applying the binary operator '!=' (line 3401)
    result_ne_272812 = python_operator(stypy.reporting.localization.Localization(__file__, 3401, 29), '!=', outputs_272810, int_272811)
    
    # Applying the binary operator 'or' (line 3401)
    result_or_keyword_272813 = python_operator(stypy.reporting.localization.Localization(__file__, 3401, 7), 'or', result_ne_272808, result_ne_272812)
    
    # Testing the type of an if condition (line 3401)
    if_condition_272814 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3401, 4), result_or_keyword_272813)
    # Assigning a type to the variable 'if_condition_272814' (line 3401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3401, 4), 'if_condition_272814', if_condition_272814)
    # SSA begins for if statement (line 3401)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3402)
    # Processing the call arguments (line 3402)
    str_272816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3402, 25), 'str', 'dfreqresp requires a SISO (single input, single output) system.')
    # Processing the call keyword arguments (line 3402)
    kwargs_272817 = {}
    # Getting the type of 'ValueError' (line 3402)
    ValueError_272815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3402, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3402)
    ValueError_call_result_272818 = invoke(stypy.reporting.localization.Localization(__file__, 3402, 14), ValueError_272815, *[str_272816], **kwargs_272817)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3402, 8), ValueError_call_result_272818, 'raise parameter', BaseException)
    # SSA join for if statement (line 3401)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 3405)
    # Getting the type of 'w' (line 3405)
    w_272819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3405, 4), 'w')
    # Getting the type of 'None' (line 3405)
    None_272820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3405, 16), 'None')
    
    (may_be_272821, more_types_in_union_272822) = may_not_be_none(w_272819, None_272820)

    if may_be_272821:

        if more_types_in_union_272822:
            # Runtime conditional SSA (line 3405)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 3406):
        
        # Assigning a Name to a Name (line 3406):
        # Getting the type of 'w' (line 3406)
        w_272823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3406, 15), 'w')
        # Assigning a type to the variable 'worN' (line 3406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3406, 8), 'worN', w_272823)

        if more_types_in_union_272822:
            # Runtime conditional SSA for else branch (line 3405)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_272821) or more_types_in_union_272822):
        
        # Assigning a Name to a Name (line 3408):
        
        # Assigning a Name to a Name (line 3408):
        # Getting the type of 'n' (line 3408)
        n_272824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 15), 'n')
        # Assigning a type to the variable 'worN' (line 3408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3408, 8), 'worN', n_272824)

        if (may_be_272821 and more_types_in_union_272822):
            # SSA join for if statement (line 3405)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to isinstance(...): (line 3410)
    # Processing the call arguments (line 3410)
    # Getting the type of 'system' (line 3410)
    system_272826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 18), 'system', False)
    # Getting the type of 'TransferFunction' (line 3410)
    TransferFunction_272827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 26), 'TransferFunction', False)
    # Processing the call keyword arguments (line 3410)
    kwargs_272828 = {}
    # Getting the type of 'isinstance' (line 3410)
    isinstance_272825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3410)
    isinstance_call_result_272829 = invoke(stypy.reporting.localization.Localization(__file__, 3410, 7), isinstance_272825, *[system_272826, TransferFunction_272827], **kwargs_272828)
    
    # Testing the type of an if condition (line 3410)
    if_condition_272830 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3410, 4), isinstance_call_result_272829)
    # Assigning a type to the variable 'if_condition_272830' (line 3410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3410, 4), 'if_condition_272830', if_condition_272830)
    # SSA begins for if statement (line 3410)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 3413):
    
    # Assigning a Subscript to a Name (line 3413):
    
    # Obtaining the type of the subscript
    int_272831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3413, 8), 'int')
    
    # Call to _z_to_zinv(...): (line 3413)
    # Processing the call arguments (line 3413)
    
    # Call to ravel(...): (line 3413)
    # Processing the call keyword arguments (line 3413)
    kwargs_272837 = {}
    # Getting the type of 'system' (line 3413)
    system_272834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 47), 'system', False)
    # Obtaining the member 'num' of a type (line 3413)
    num_272835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3413, 47), system_272834, 'num')
    # Obtaining the member 'ravel' of a type (line 3413)
    ravel_272836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3413, 47), num_272835, 'ravel')
    # Calling ravel(args, kwargs) (line 3413)
    ravel_call_result_272838 = invoke(stypy.reporting.localization.Localization(__file__, 3413, 47), ravel_272836, *[], **kwargs_272837)
    
    # Getting the type of 'system' (line 3413)
    system_272839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 67), 'system', False)
    # Obtaining the member 'den' of a type (line 3413)
    den_272840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3413, 67), system_272839, 'den')
    # Processing the call keyword arguments (line 3413)
    kwargs_272841 = {}
    # Getting the type of 'TransferFunction' (line 3413)
    TransferFunction_272832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 19), 'TransferFunction', False)
    # Obtaining the member '_z_to_zinv' of a type (line 3413)
    _z_to_zinv_272833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3413, 19), TransferFunction_272832, '_z_to_zinv')
    # Calling _z_to_zinv(args, kwargs) (line 3413)
    _z_to_zinv_call_result_272842 = invoke(stypy.reporting.localization.Localization(__file__, 3413, 19), _z_to_zinv_272833, *[ravel_call_result_272838, den_272840], **kwargs_272841)
    
    # Obtaining the member '__getitem__' of a type (line 3413)
    getitem___272843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3413, 8), _z_to_zinv_call_result_272842, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3413)
    subscript_call_result_272844 = invoke(stypy.reporting.localization.Localization(__file__, 3413, 8), getitem___272843, int_272831)
    
    # Assigning a type to the variable 'tuple_var_assignment_267156' (line 3413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3413, 8), 'tuple_var_assignment_267156', subscript_call_result_272844)
    
    # Assigning a Subscript to a Name (line 3413):
    
    # Obtaining the type of the subscript
    int_272845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3413, 8), 'int')
    
    # Call to _z_to_zinv(...): (line 3413)
    # Processing the call arguments (line 3413)
    
    # Call to ravel(...): (line 3413)
    # Processing the call keyword arguments (line 3413)
    kwargs_272851 = {}
    # Getting the type of 'system' (line 3413)
    system_272848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 47), 'system', False)
    # Obtaining the member 'num' of a type (line 3413)
    num_272849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3413, 47), system_272848, 'num')
    # Obtaining the member 'ravel' of a type (line 3413)
    ravel_272850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3413, 47), num_272849, 'ravel')
    # Calling ravel(args, kwargs) (line 3413)
    ravel_call_result_272852 = invoke(stypy.reporting.localization.Localization(__file__, 3413, 47), ravel_272850, *[], **kwargs_272851)
    
    # Getting the type of 'system' (line 3413)
    system_272853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 67), 'system', False)
    # Obtaining the member 'den' of a type (line 3413)
    den_272854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3413, 67), system_272853, 'den')
    # Processing the call keyword arguments (line 3413)
    kwargs_272855 = {}
    # Getting the type of 'TransferFunction' (line 3413)
    TransferFunction_272846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 19), 'TransferFunction', False)
    # Obtaining the member '_z_to_zinv' of a type (line 3413)
    _z_to_zinv_272847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3413, 19), TransferFunction_272846, '_z_to_zinv')
    # Calling _z_to_zinv(args, kwargs) (line 3413)
    _z_to_zinv_call_result_272856 = invoke(stypy.reporting.localization.Localization(__file__, 3413, 19), _z_to_zinv_272847, *[ravel_call_result_272852, den_272854], **kwargs_272855)
    
    # Obtaining the member '__getitem__' of a type (line 3413)
    getitem___272857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3413, 8), _z_to_zinv_call_result_272856, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3413)
    subscript_call_result_272858 = invoke(stypy.reporting.localization.Localization(__file__, 3413, 8), getitem___272857, int_272845)
    
    # Assigning a type to the variable 'tuple_var_assignment_267157' (line 3413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3413, 8), 'tuple_var_assignment_267157', subscript_call_result_272858)
    
    # Assigning a Name to a Name (line 3413):
    # Getting the type of 'tuple_var_assignment_267156' (line 3413)
    tuple_var_assignment_267156_272859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 8), 'tuple_var_assignment_267156')
    # Assigning a type to the variable 'num' (line 3413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3413, 8), 'num', tuple_var_assignment_267156_272859)
    
    # Assigning a Name to a Name (line 3413):
    # Getting the type of 'tuple_var_assignment_267157' (line 3413)
    tuple_var_assignment_267157_272860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 8), 'tuple_var_assignment_267157')
    # Assigning a type to the variable 'den' (line 3413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3413, 13), 'den', tuple_var_assignment_267157_272860)
    
    # Assigning a Call to a Tuple (line 3414):
    
    # Assigning a Subscript to a Name (line 3414):
    
    # Obtaining the type of the subscript
    int_272861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3414, 8), 'int')
    
    # Call to freqz(...): (line 3414)
    # Processing the call arguments (line 3414)
    # Getting the type of 'num' (line 3414)
    num_272863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 21), 'num', False)
    # Getting the type of 'den' (line 3414)
    den_272864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 26), 'den', False)
    # Processing the call keyword arguments (line 3414)
    # Getting the type of 'worN' (line 3414)
    worN_272865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 36), 'worN', False)
    keyword_272866 = worN_272865
    # Getting the type of 'whole' (line 3414)
    whole_272867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 48), 'whole', False)
    keyword_272868 = whole_272867
    kwargs_272869 = {'whole': keyword_272868, 'worN': keyword_272866}
    # Getting the type of 'freqz' (line 3414)
    freqz_272862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 15), 'freqz', False)
    # Calling freqz(args, kwargs) (line 3414)
    freqz_call_result_272870 = invoke(stypy.reporting.localization.Localization(__file__, 3414, 15), freqz_272862, *[num_272863, den_272864], **kwargs_272869)
    
    # Obtaining the member '__getitem__' of a type (line 3414)
    getitem___272871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3414, 8), freqz_call_result_272870, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3414)
    subscript_call_result_272872 = invoke(stypy.reporting.localization.Localization(__file__, 3414, 8), getitem___272871, int_272861)
    
    # Assigning a type to the variable 'tuple_var_assignment_267158' (line 3414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3414, 8), 'tuple_var_assignment_267158', subscript_call_result_272872)
    
    # Assigning a Subscript to a Name (line 3414):
    
    # Obtaining the type of the subscript
    int_272873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3414, 8), 'int')
    
    # Call to freqz(...): (line 3414)
    # Processing the call arguments (line 3414)
    # Getting the type of 'num' (line 3414)
    num_272875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 21), 'num', False)
    # Getting the type of 'den' (line 3414)
    den_272876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 26), 'den', False)
    # Processing the call keyword arguments (line 3414)
    # Getting the type of 'worN' (line 3414)
    worN_272877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 36), 'worN', False)
    keyword_272878 = worN_272877
    # Getting the type of 'whole' (line 3414)
    whole_272879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 48), 'whole', False)
    keyword_272880 = whole_272879
    kwargs_272881 = {'whole': keyword_272880, 'worN': keyword_272878}
    # Getting the type of 'freqz' (line 3414)
    freqz_272874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 15), 'freqz', False)
    # Calling freqz(args, kwargs) (line 3414)
    freqz_call_result_272882 = invoke(stypy.reporting.localization.Localization(__file__, 3414, 15), freqz_272874, *[num_272875, den_272876], **kwargs_272881)
    
    # Obtaining the member '__getitem__' of a type (line 3414)
    getitem___272883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3414, 8), freqz_call_result_272882, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3414)
    subscript_call_result_272884 = invoke(stypy.reporting.localization.Localization(__file__, 3414, 8), getitem___272883, int_272873)
    
    # Assigning a type to the variable 'tuple_var_assignment_267159' (line 3414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3414, 8), 'tuple_var_assignment_267159', subscript_call_result_272884)
    
    # Assigning a Name to a Name (line 3414):
    # Getting the type of 'tuple_var_assignment_267158' (line 3414)
    tuple_var_assignment_267158_272885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 8), 'tuple_var_assignment_267158')
    # Assigning a type to the variable 'w' (line 3414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3414, 8), 'w', tuple_var_assignment_267158_272885)
    
    # Assigning a Name to a Name (line 3414):
    # Getting the type of 'tuple_var_assignment_267159' (line 3414)
    tuple_var_assignment_267159_272886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 8), 'tuple_var_assignment_267159')
    # Assigning a type to the variable 'h' (line 3414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3414, 11), 'h', tuple_var_assignment_267159_272886)
    # SSA branch for the else part of an if statement (line 3410)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 3416)
    # Processing the call arguments (line 3416)
    # Getting the type of 'system' (line 3416)
    system_272888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 20), 'system', False)
    # Getting the type of 'ZerosPolesGain' (line 3416)
    ZerosPolesGain_272889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 28), 'ZerosPolesGain', False)
    # Processing the call keyword arguments (line 3416)
    kwargs_272890 = {}
    # Getting the type of 'isinstance' (line 3416)
    isinstance_272887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3416)
    isinstance_call_result_272891 = invoke(stypy.reporting.localization.Localization(__file__, 3416, 9), isinstance_272887, *[system_272888, ZerosPolesGain_272889], **kwargs_272890)
    
    # Testing the type of an if condition (line 3416)
    if_condition_272892 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3416, 9), isinstance_call_result_272891)
    # Assigning a type to the variable 'if_condition_272892' (line 3416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3416, 9), 'if_condition_272892', if_condition_272892)
    # SSA begins for if statement (line 3416)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 3417):
    
    # Assigning a Subscript to a Name (line 3417):
    
    # Obtaining the type of the subscript
    int_272893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3417, 8), 'int')
    
    # Call to freqz_zpk(...): (line 3417)
    # Processing the call arguments (line 3417)
    # Getting the type of 'system' (line 3417)
    system_272895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 25), 'system', False)
    # Obtaining the member 'zeros' of a type (line 3417)
    zeros_272896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3417, 25), system_272895, 'zeros')
    # Getting the type of 'system' (line 3417)
    system_272897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 39), 'system', False)
    # Obtaining the member 'poles' of a type (line 3417)
    poles_272898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3417, 39), system_272897, 'poles')
    # Getting the type of 'system' (line 3417)
    system_272899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 53), 'system', False)
    # Obtaining the member 'gain' of a type (line 3417)
    gain_272900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3417, 53), system_272899, 'gain')
    # Processing the call keyword arguments (line 3417)
    # Getting the type of 'worN' (line 3417)
    worN_272901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 71), 'worN', False)
    keyword_272902 = worN_272901
    # Getting the type of 'whole' (line 3418)
    whole_272903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 31), 'whole', False)
    keyword_272904 = whole_272903
    kwargs_272905 = {'whole': keyword_272904, 'worN': keyword_272902}
    # Getting the type of 'freqz_zpk' (line 3417)
    freqz_zpk_272894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 15), 'freqz_zpk', False)
    # Calling freqz_zpk(args, kwargs) (line 3417)
    freqz_zpk_call_result_272906 = invoke(stypy.reporting.localization.Localization(__file__, 3417, 15), freqz_zpk_272894, *[zeros_272896, poles_272898, gain_272900], **kwargs_272905)
    
    # Obtaining the member '__getitem__' of a type (line 3417)
    getitem___272907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3417, 8), freqz_zpk_call_result_272906, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3417)
    subscript_call_result_272908 = invoke(stypy.reporting.localization.Localization(__file__, 3417, 8), getitem___272907, int_272893)
    
    # Assigning a type to the variable 'tuple_var_assignment_267160' (line 3417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3417, 8), 'tuple_var_assignment_267160', subscript_call_result_272908)
    
    # Assigning a Subscript to a Name (line 3417):
    
    # Obtaining the type of the subscript
    int_272909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3417, 8), 'int')
    
    # Call to freqz_zpk(...): (line 3417)
    # Processing the call arguments (line 3417)
    # Getting the type of 'system' (line 3417)
    system_272911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 25), 'system', False)
    # Obtaining the member 'zeros' of a type (line 3417)
    zeros_272912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3417, 25), system_272911, 'zeros')
    # Getting the type of 'system' (line 3417)
    system_272913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 39), 'system', False)
    # Obtaining the member 'poles' of a type (line 3417)
    poles_272914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3417, 39), system_272913, 'poles')
    # Getting the type of 'system' (line 3417)
    system_272915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 53), 'system', False)
    # Obtaining the member 'gain' of a type (line 3417)
    gain_272916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3417, 53), system_272915, 'gain')
    # Processing the call keyword arguments (line 3417)
    # Getting the type of 'worN' (line 3417)
    worN_272917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 71), 'worN', False)
    keyword_272918 = worN_272917
    # Getting the type of 'whole' (line 3418)
    whole_272919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 31), 'whole', False)
    keyword_272920 = whole_272919
    kwargs_272921 = {'whole': keyword_272920, 'worN': keyword_272918}
    # Getting the type of 'freqz_zpk' (line 3417)
    freqz_zpk_272910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 15), 'freqz_zpk', False)
    # Calling freqz_zpk(args, kwargs) (line 3417)
    freqz_zpk_call_result_272922 = invoke(stypy.reporting.localization.Localization(__file__, 3417, 15), freqz_zpk_272910, *[zeros_272912, poles_272914, gain_272916], **kwargs_272921)
    
    # Obtaining the member '__getitem__' of a type (line 3417)
    getitem___272923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3417, 8), freqz_zpk_call_result_272922, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3417)
    subscript_call_result_272924 = invoke(stypy.reporting.localization.Localization(__file__, 3417, 8), getitem___272923, int_272909)
    
    # Assigning a type to the variable 'tuple_var_assignment_267161' (line 3417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3417, 8), 'tuple_var_assignment_267161', subscript_call_result_272924)
    
    # Assigning a Name to a Name (line 3417):
    # Getting the type of 'tuple_var_assignment_267160' (line 3417)
    tuple_var_assignment_267160_272925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 8), 'tuple_var_assignment_267160')
    # Assigning a type to the variable 'w' (line 3417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3417, 8), 'w', tuple_var_assignment_267160_272925)
    
    # Assigning a Name to a Name (line 3417):
    # Getting the type of 'tuple_var_assignment_267161' (line 3417)
    tuple_var_assignment_267161_272926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 8), 'tuple_var_assignment_267161')
    # Assigning a type to the variable 'h' (line 3417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3417, 11), 'h', tuple_var_assignment_267161_272926)
    # SSA join for if statement (line 3416)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3410)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3420)
    tuple_272927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3420, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3420)
    # Adding element type (line 3420)
    # Getting the type of 'w' (line 3420)
    w_272928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 11), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3420, 11), tuple_272927, w_272928)
    # Adding element type (line 3420)
    # Getting the type of 'h' (line 3420)
    h_272929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 14), 'h')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3420, 11), tuple_272927, h_272929)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3420, 4), 'stypy_return_type', tuple_272927)
    
    # ################# End of 'dfreqresp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dfreqresp' in the type store
    # Getting the type of 'stypy_return_type' (line 3325)
    stypy_return_type_272930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_272930)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dfreqresp'
    return stypy_return_type_272930

# Assigning a type to the variable 'dfreqresp' (line 3325)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3325, 0), 'dfreqresp', dfreqresp)

@norecursion
def dbode(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3423)
    None_272931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3423, 20), 'None')
    int_272932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3423, 28), 'int')
    defaults = [None_272931, int_272932]
    # Create a new context for function 'dbode'
    module_type_store = module_type_store.open_function_context('dbode', 3423, 0, False)
    
    # Passed parameters checking function
    dbode.stypy_localization = localization
    dbode.stypy_type_of_self = None
    dbode.stypy_type_store = module_type_store
    dbode.stypy_function_name = 'dbode'
    dbode.stypy_param_names_list = ['system', 'w', 'n']
    dbode.stypy_varargs_param_name = None
    dbode.stypy_kwargs_param_name = None
    dbode.stypy_call_defaults = defaults
    dbode.stypy_call_varargs = varargs
    dbode.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dbode', ['system', 'w', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dbode', localization, ['system', 'w', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dbode(...)' code ##################

    str_272933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3483, (-1)), 'str', '\n    Calculate Bode magnitude and phase data of a discrete-time system.\n\n    Parameters\n    ----------\n    system : an instance of the LTI class or a tuple describing the system.\n        The following gives the number of elements in the tuple and\n        the interpretation:\n\n            * 1 (instance of `dlti`)\n            * 2 (num, den, dt)\n            * 3 (zeros, poles, gain, dt)\n            * 4 (A, B, C, D, dt)\n\n    w : array_like, optional\n        Array of frequencies (in radians/sample). Magnitude and phase data is\n        calculated for every value in this array. If not given a reasonable\n        set will be calculated.\n    n : int, optional\n        Number of frequency points to compute if `w` is not given. The `n`\n        frequencies are logarithmically spaced in an interval chosen to\n        include the influence of the poles and zeros of the system.\n\n    Returns\n    -------\n    w : 1D ndarray\n        Frequency array [rad/time_unit]\n    mag : 1D ndarray\n        Magnitude array [dB]\n    phase : 1D ndarray\n        Phase array [deg]\n\n    Notes\n    -----\n    If (num, den) is passed in for ``system``, coefficients for both the\n    numerator and denominator should be specified in descending exponent\n    order (e.g. ``z^2 + 3z + 5`` would be represented as ``[1, 3, 5]``).\n\n    .. versionadded:: 0.18.0\n\n    Examples\n    --------\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    Transfer function: H(z) = 1 / (z^2 + 2z + 3)\n\n    >>> sys = signal.TransferFunction([1], [1, 2, 3], dt=0.05)\n\n    Equivalent: sys.bode()\n\n    >>> w, mag, phase = signal.dbode(sys)\n\n    >>> plt.figure()\n    >>> plt.semilogx(w, mag)    # Bode magnitude plot\n    >>> plt.figure()\n    >>> plt.semilogx(w, phase)  # Bode phase plot\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Tuple (line 3484):
    
    # Assigning a Subscript to a Name (line 3484):
    
    # Obtaining the type of the subscript
    int_272934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3484, 4), 'int')
    
    # Call to dfreqresp(...): (line 3484)
    # Processing the call arguments (line 3484)
    # Getting the type of 'system' (line 3484)
    system_272936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 21), 'system', False)
    # Processing the call keyword arguments (line 3484)
    # Getting the type of 'w' (line 3484)
    w_272937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 31), 'w', False)
    keyword_272938 = w_272937
    # Getting the type of 'n' (line 3484)
    n_272939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 36), 'n', False)
    keyword_272940 = n_272939
    kwargs_272941 = {'w': keyword_272938, 'n': keyword_272940}
    # Getting the type of 'dfreqresp' (line 3484)
    dfreqresp_272935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 11), 'dfreqresp', False)
    # Calling dfreqresp(args, kwargs) (line 3484)
    dfreqresp_call_result_272942 = invoke(stypy.reporting.localization.Localization(__file__, 3484, 11), dfreqresp_272935, *[system_272936], **kwargs_272941)
    
    # Obtaining the member '__getitem__' of a type (line 3484)
    getitem___272943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3484, 4), dfreqresp_call_result_272942, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3484)
    subscript_call_result_272944 = invoke(stypy.reporting.localization.Localization(__file__, 3484, 4), getitem___272943, int_272934)
    
    # Assigning a type to the variable 'tuple_var_assignment_267162' (line 3484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3484, 4), 'tuple_var_assignment_267162', subscript_call_result_272944)
    
    # Assigning a Subscript to a Name (line 3484):
    
    # Obtaining the type of the subscript
    int_272945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3484, 4), 'int')
    
    # Call to dfreqresp(...): (line 3484)
    # Processing the call arguments (line 3484)
    # Getting the type of 'system' (line 3484)
    system_272947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 21), 'system', False)
    # Processing the call keyword arguments (line 3484)
    # Getting the type of 'w' (line 3484)
    w_272948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 31), 'w', False)
    keyword_272949 = w_272948
    # Getting the type of 'n' (line 3484)
    n_272950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 36), 'n', False)
    keyword_272951 = n_272950
    kwargs_272952 = {'w': keyword_272949, 'n': keyword_272951}
    # Getting the type of 'dfreqresp' (line 3484)
    dfreqresp_272946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 11), 'dfreqresp', False)
    # Calling dfreqresp(args, kwargs) (line 3484)
    dfreqresp_call_result_272953 = invoke(stypy.reporting.localization.Localization(__file__, 3484, 11), dfreqresp_272946, *[system_272947], **kwargs_272952)
    
    # Obtaining the member '__getitem__' of a type (line 3484)
    getitem___272954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3484, 4), dfreqresp_call_result_272953, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3484)
    subscript_call_result_272955 = invoke(stypy.reporting.localization.Localization(__file__, 3484, 4), getitem___272954, int_272945)
    
    # Assigning a type to the variable 'tuple_var_assignment_267163' (line 3484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3484, 4), 'tuple_var_assignment_267163', subscript_call_result_272955)
    
    # Assigning a Name to a Name (line 3484):
    # Getting the type of 'tuple_var_assignment_267162' (line 3484)
    tuple_var_assignment_267162_272956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 4), 'tuple_var_assignment_267162')
    # Assigning a type to the variable 'w' (line 3484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3484, 4), 'w', tuple_var_assignment_267162_272956)
    
    # Assigning a Name to a Name (line 3484):
    # Getting the type of 'tuple_var_assignment_267163' (line 3484)
    tuple_var_assignment_267163_272957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 4), 'tuple_var_assignment_267163')
    # Assigning a type to the variable 'y' (line 3484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3484, 7), 'y', tuple_var_assignment_267163_272957)
    
    
    # Call to isinstance(...): (line 3486)
    # Processing the call arguments (line 3486)
    # Getting the type of 'system' (line 3486)
    system_272959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3486, 18), 'system', False)
    # Getting the type of 'dlti' (line 3486)
    dlti_272960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3486, 26), 'dlti', False)
    # Processing the call keyword arguments (line 3486)
    kwargs_272961 = {}
    # Getting the type of 'isinstance' (line 3486)
    isinstance_272958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3486, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3486)
    isinstance_call_result_272962 = invoke(stypy.reporting.localization.Localization(__file__, 3486, 7), isinstance_272958, *[system_272959, dlti_272960], **kwargs_272961)
    
    # Testing the type of an if condition (line 3486)
    if_condition_272963 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3486, 4), isinstance_call_result_272962)
    # Assigning a type to the variable 'if_condition_272963' (line 3486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3486, 4), 'if_condition_272963', if_condition_272963)
    # SSA begins for if statement (line 3486)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 3487):
    
    # Assigning a Attribute to a Name (line 3487):
    # Getting the type of 'system' (line 3487)
    system_272964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3487, 13), 'system')
    # Obtaining the member 'dt' of a type (line 3487)
    dt_272965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3487, 13), system_272964, 'dt')
    # Assigning a type to the variable 'dt' (line 3487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3487, 8), 'dt', dt_272965)
    # SSA branch for the else part of an if statement (line 3486)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 3489):
    
    # Assigning a Subscript to a Name (line 3489):
    
    # Obtaining the type of the subscript
    int_272966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3489, 20), 'int')
    # Getting the type of 'system' (line 3489)
    system_272967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3489, 13), 'system')
    # Obtaining the member '__getitem__' of a type (line 3489)
    getitem___272968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3489, 13), system_272967, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3489)
    subscript_call_result_272969 = invoke(stypy.reporting.localization.Localization(__file__, 3489, 13), getitem___272968, int_272966)
    
    # Assigning a type to the variable 'dt' (line 3489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3489, 8), 'dt', subscript_call_result_272969)
    # SSA join for if statement (line 3486)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 3491):
    
    # Assigning a BinOp to a Name (line 3491):
    float_272970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3491, 10), 'float')
    
    # Call to log10(...): (line 3491)
    # Processing the call arguments (line 3491)
    
    # Call to abs(...): (line 3491)
    # Processing the call arguments (line 3491)
    # Getting the type of 'y' (line 3491)
    y_272974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3491, 33), 'y', False)
    # Processing the call keyword arguments (line 3491)
    kwargs_272975 = {}
    # Getting the type of 'abs' (line 3491)
    abs_272973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3491, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 3491)
    abs_call_result_272976 = invoke(stypy.reporting.localization.Localization(__file__, 3491, 29), abs_272973, *[y_272974], **kwargs_272975)
    
    # Processing the call keyword arguments (line 3491)
    kwargs_272977 = {}
    # Getting the type of 'numpy' (line 3491)
    numpy_272971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3491, 17), 'numpy', False)
    # Obtaining the member 'log10' of a type (line 3491)
    log10_272972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3491, 17), numpy_272971, 'log10')
    # Calling log10(args, kwargs) (line 3491)
    log10_call_result_272978 = invoke(stypy.reporting.localization.Localization(__file__, 3491, 17), log10_272972, *[abs_call_result_272976], **kwargs_272977)
    
    # Applying the binary operator '*' (line 3491)
    result_mul_272979 = python_operator(stypy.reporting.localization.Localization(__file__, 3491, 10), '*', float_272970, log10_call_result_272978)
    
    # Assigning a type to the variable 'mag' (line 3491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3491, 4), 'mag', result_mul_272979)
    
    # Assigning a Call to a Name (line 3492):
    
    # Assigning a Call to a Name (line 3492):
    
    # Call to rad2deg(...): (line 3492)
    # Processing the call arguments (line 3492)
    
    # Call to unwrap(...): (line 3492)
    # Processing the call arguments (line 3492)
    
    # Call to angle(...): (line 3492)
    # Processing the call arguments (line 3492)
    # Getting the type of 'y' (line 3492)
    y_272986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 51), 'y', False)
    # Processing the call keyword arguments (line 3492)
    kwargs_272987 = {}
    # Getting the type of 'numpy' (line 3492)
    numpy_272984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 39), 'numpy', False)
    # Obtaining the member 'angle' of a type (line 3492)
    angle_272985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3492, 39), numpy_272984, 'angle')
    # Calling angle(args, kwargs) (line 3492)
    angle_call_result_272988 = invoke(stypy.reporting.localization.Localization(__file__, 3492, 39), angle_272985, *[y_272986], **kwargs_272987)
    
    # Processing the call keyword arguments (line 3492)
    kwargs_272989 = {}
    # Getting the type of 'numpy' (line 3492)
    numpy_272982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 26), 'numpy', False)
    # Obtaining the member 'unwrap' of a type (line 3492)
    unwrap_272983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3492, 26), numpy_272982, 'unwrap')
    # Calling unwrap(args, kwargs) (line 3492)
    unwrap_call_result_272990 = invoke(stypy.reporting.localization.Localization(__file__, 3492, 26), unwrap_272983, *[angle_call_result_272988], **kwargs_272989)
    
    # Processing the call keyword arguments (line 3492)
    kwargs_272991 = {}
    # Getting the type of 'numpy' (line 3492)
    numpy_272980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 12), 'numpy', False)
    # Obtaining the member 'rad2deg' of a type (line 3492)
    rad2deg_272981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3492, 12), numpy_272980, 'rad2deg')
    # Calling rad2deg(args, kwargs) (line 3492)
    rad2deg_call_result_272992 = invoke(stypy.reporting.localization.Localization(__file__, 3492, 12), rad2deg_272981, *[unwrap_call_result_272990], **kwargs_272991)
    
    # Assigning a type to the variable 'phase' (line 3492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3492, 4), 'phase', rad2deg_call_result_272992)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3494)
    tuple_272993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3494, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3494)
    # Adding element type (line 3494)
    # Getting the type of 'w' (line 3494)
    w_272994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3494, 11), 'w')
    # Getting the type of 'dt' (line 3494)
    dt_272995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3494, 15), 'dt')
    # Applying the binary operator 'div' (line 3494)
    result_div_272996 = python_operator(stypy.reporting.localization.Localization(__file__, 3494, 11), 'div', w_272994, dt_272995)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3494, 11), tuple_272993, result_div_272996)
    # Adding element type (line 3494)
    # Getting the type of 'mag' (line 3494)
    mag_272997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3494, 19), 'mag')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3494, 11), tuple_272993, mag_272997)
    # Adding element type (line 3494)
    # Getting the type of 'phase' (line 3494)
    phase_272998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3494, 24), 'phase')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3494, 11), tuple_272993, phase_272998)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3494, 4), 'stypy_return_type', tuple_272993)
    
    # ################# End of 'dbode(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dbode' in the type store
    # Getting the type of 'stypy_return_type' (line 3423)
    stypy_return_type_272999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3423, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_272999)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dbode'
    return stypy_return_type_272999

# Assigning a type to the variable 'dbode' (line 3423)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3423, 0), 'dbode', dbode)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
