
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''Filter design.
2: '''
3: from __future__ import division, print_function, absolute_import
4: 
5: import math
6: import operator
7: import warnings
8: 
9: import numpy
10: import numpy as np
11: from numpy import (atleast_1d, poly, polyval, roots, real, asarray,
12:                    resize, pi, absolute, logspace, r_, sqrt, tan, log10,
13:                    arctan, arcsinh, sin, exp, cosh, arccosh, ceil, conjugate,
14:                    zeros, sinh, append, concatenate, prod, ones, array,
15:                    mintypecode)
16: from numpy.polynomial.polynomial import polyval as npp_polyval
17: 
18: from scipy import special, optimize, fftpack
19: from scipy.special import comb, factorial
20: from scipy._lib._numpy_compat import polyvalfromroots
21: 
22: 
23: __all__ = ['findfreqs', 'freqs', 'freqz', 'tf2zpk', 'zpk2tf', 'normalize',
24:            'lp2lp', 'lp2hp', 'lp2bp', 'lp2bs', 'bilinear', 'iirdesign',
25:            'iirfilter', 'butter', 'cheby1', 'cheby2', 'ellip', 'bessel',
26:            'band_stop_obj', 'buttord', 'cheb1ord', 'cheb2ord', 'ellipord',
27:            'buttap', 'cheb1ap', 'cheb2ap', 'ellipap', 'besselap',
28:            'BadCoefficients', 'freqs_zpk', 'freqz_zpk',
29:            'tf2sos', 'sos2tf', 'zpk2sos', 'sos2zpk', 'group_delay',
30:            'sosfreqz', 'iirnotch', 'iirpeak']
31: 
32: 
33: class BadCoefficients(UserWarning):
34:     '''Warning about badly conditioned filter coefficients'''
35:     pass
36: 
37: abs = absolute
38: 
39: 
40: def findfreqs(num, den, N, kind='ba'):
41:     '''
42:     Find array of frequencies for computing the response of an analog filter.
43: 
44:     Parameters
45:     ----------
46:     num, den : array_like, 1-D
47:         The polynomial coefficients of the numerator and denominator of the
48:         transfer function of the filter or LTI system, where the coefficients
49:         are ordered from highest to lowest degree. Or, the roots  of the
50:         transfer function numerator and denominator (i.e. zeroes and poles).
51:     N : int
52:         The length of the array to be computed.
53:     kind : str {'ba', 'zp'}, optional
54:         Specifies whether the numerator and denominator are specified by their
55:         polynomial coefficients ('ba'), or their roots ('zp').
56: 
57:     Returns
58:     -------
59:     w : (N,) ndarray
60:         A 1-D array of frequencies, logarithmically spaced.
61: 
62:     Examples
63:     --------
64:     Find a set of nine frequencies that span the "interesting part" of the
65:     frequency response for the filter with the transfer function
66: 
67:         H(s) = s / (s^2 + 8s + 25)
68: 
69:     >>> from scipy import signal
70:     >>> signal.findfreqs([1, 0], [1, 8, 25], N=9)
71:     array([  1.00000000e-02,   3.16227766e-02,   1.00000000e-01,
72:              3.16227766e-01,   1.00000000e+00,   3.16227766e+00,
73:              1.00000000e+01,   3.16227766e+01,   1.00000000e+02])
74:     '''
75:     if kind == 'ba':
76:         ep = atleast_1d(roots(den)) + 0j
77:         tz = atleast_1d(roots(num)) + 0j
78:     elif kind == 'zp':
79:         ep = atleast_1d(den) + 0j
80:         tz = atleast_1d(num) + 0j
81:     else:
82:         raise ValueError("input must be one of {'ba', 'zp'}")
83: 
84:     if len(ep) == 0:
85:         ep = atleast_1d(-1000) + 0j
86: 
87:     ez = r_['-1',
88:             numpy.compress(ep.imag >= 0, ep, axis=-1),
89:             numpy.compress((abs(tz) < 1e5) & (tz.imag >= 0), tz, axis=-1)]
90: 
91:     integ = abs(ez) < 1e-10
92:     hfreq = numpy.around(numpy.log10(numpy.max(3 * abs(ez.real + integ) +
93:                                                1.5 * ez.imag)) + 0.5)
94:     lfreq = numpy.around(numpy.log10(0.1 * numpy.min(abs(real(ez + integ)) +
95:                                                      2 * ez.imag)) - 0.5)
96: 
97:     w = logspace(lfreq, hfreq, N)
98:     return w
99: 
100: 
101: def freqs(b, a, worN=None, plot=None):
102:     '''
103:     Compute frequency response of analog filter.
104: 
105:     Given the M-order numerator `b` and N-order denominator `a` of an analog
106:     filter, compute its frequency response::
107: 
108:              b[0]*(jw)**M + b[1]*(jw)**(M-1) + ... + b[M]
109:      H(w) = ----------------------------------------------
110:              a[0]*(jw)**N + a[1]*(jw)**(N-1) + ... + a[N]
111: 
112:     Parameters
113:     ----------
114:     b : array_like
115:         Numerator of a linear filter.
116:     a : array_like
117:         Denominator of a linear filter.
118:     worN : {None, int, array_like}, optional
119:         If None, then compute at 200 frequencies around the interesting parts
120:         of the response curve (determined by pole-zero locations).  If a single
121:         integer, then compute at that many frequencies.  Otherwise, compute the
122:         response at the angular frequencies (e.g. rad/s) given in `worN`.
123:     plot : callable, optional
124:         A callable that takes two arguments. If given, the return parameters
125:         `w` and `h` are passed to plot. Useful for plotting the frequency
126:         response inside `freqs`.
127: 
128:     Returns
129:     -------
130:     w : ndarray
131:         The angular frequencies at which `h` was computed.
132:     h : ndarray
133:         The frequency response.
134: 
135:     See Also
136:     --------
137:     freqz : Compute the frequency response of a digital filter.
138: 
139:     Notes
140:     -----
141:     Using Matplotlib's "plot" function as the callable for `plot` produces
142:     unexpected results,  this plots the real part of the complex transfer
143:     function, not the magnitude.  Try ``lambda w, h: plot(w, abs(h))``.
144: 
145:     Examples
146:     --------
147:     >>> from scipy.signal import freqs, iirfilter
148: 
149:     >>> b, a = iirfilter(4, [1, 10], 1, 60, analog=True, ftype='cheby1')
150: 
151:     >>> w, h = freqs(b, a, worN=np.logspace(-1, 2, 1000))
152: 
153:     >>> import matplotlib.pyplot as plt
154:     >>> plt.semilogx(w, 20 * np.log10(abs(h)))
155:     >>> plt.xlabel('Frequency')
156:     >>> plt.ylabel('Amplitude response [dB]')
157:     >>> plt.grid()
158:     >>> plt.show()
159: 
160:     '''
161:     if worN is None:
162:         w = findfreqs(b, a, 200)
163:     elif isinstance(worN, int):
164:         N = worN
165:         w = findfreqs(b, a, N)
166:     else:
167:         w = worN
168:     w = atleast_1d(w)
169:     s = 1j * w
170:     h = polyval(b, s) / polyval(a, s)
171:     if plot is not None:
172:         plot(w, h)
173: 
174:     return w, h
175: 
176: 
177: def freqs_zpk(z, p, k, worN=None):
178:     '''
179:     Compute frequency response of analog filter.
180: 
181:     Given the zeros `z`, poles `p`, and gain `k` of a filter, compute its
182:     frequency response::
183: 
184:                 (jw-z[0]) * (jw-z[1]) * ... * (jw-z[-1])
185:      H(w) = k * ----------------------------------------
186:                 (jw-p[0]) * (jw-p[1]) * ... * (jw-p[-1])
187: 
188:     Parameters
189:     ----------
190:     z : array_like
191:         Zeroes of a linear filter
192:     p : array_like
193:         Poles of a linear filter
194:     k : scalar
195:         Gain of a linear filter
196:     worN : {None, int, array_like}, optional
197:         If None, then compute at 200 frequencies around the interesting parts
198:         of the response curve (determined by pole-zero locations).  If a single
199:         integer, then compute at that many frequencies.  Otherwise, compute the
200:         response at the angular frequencies (e.g. rad/s) given in `worN`.
201: 
202:     Returns
203:     -------
204:     w : ndarray
205:         The angular frequencies at which `h` was computed.
206:     h : ndarray
207:         The frequency response.
208: 
209:     See Also
210:     --------
211:     freqs : Compute the frequency response of an analog filter in TF form
212:     freqz : Compute the frequency response of a digital filter in TF form
213:     freqz_zpk : Compute the frequency response of a digital filter in ZPK form
214: 
215:     Notes
216:     -----
217:     .. versionadded: 0.19.0
218: 
219:     Examples
220:     --------
221:     >>> from scipy.signal import freqs_zpk, iirfilter
222: 
223:     >>> z, p, k = iirfilter(4, [1, 10], 1, 60, analog=True, ftype='cheby1',
224:     ...                     output='zpk')
225: 
226:     >>> w, h = freqs_zpk(z, p, k, worN=np.logspace(-1, 2, 1000))
227: 
228:     >>> import matplotlib.pyplot as plt
229:     >>> plt.semilogx(w, 20 * np.log10(abs(h)))
230:     >>> plt.xlabel('Frequency')
231:     >>> plt.ylabel('Amplitude response [dB]')
232:     >>> plt.grid()
233:     >>> plt.show()
234: 
235:     '''
236:     k = np.asarray(k)
237:     if k.size > 1:
238:         raise ValueError('k must be a single scalar gain')
239: 
240:     if worN is None:
241:         w = findfreqs(z, p, 200, kind='zp')
242:     elif isinstance(worN, int):
243:         N = worN
244:         w = findfreqs(z, p, N, kind='zp')
245:     else:
246:         w = worN
247: 
248:     w = atleast_1d(w)
249:     s = 1j * w
250:     num = polyvalfromroots(s, z)
251:     den = polyvalfromroots(s, p)
252:     h = k * num/den
253:     return w, h
254: 
255: 
256: def freqz(b, a=1, worN=None, whole=False, plot=None):
257:     '''
258:     Compute the frequency response of a digital filter.
259: 
260:     Given the M-order numerator `b` and N-order denominator `a` of a digital
261:     filter, compute its frequency response::
262: 
263:                  jw                 -jw              -jwM
264:         jw    B(e  )    b[0] + b[1]e    + ... + b[M]e
265:      H(e  ) = ------ = -----------------------------------
266:                  jw                 -jw              -jwN
267:               A(e  )    a[0] + a[1]e    + ... + a[N]e
268: 
269:     Parameters
270:     ----------
271:     b : array_like
272:         Numerator of a linear filter.  If `b` has dimension greater than 1,
273:         it is assumed that the coefficients are stored in the first dimension,
274:         and ``b.shape[1:]``, ``a.shape[1:]``, and the shape of the frequencies
275:         array must be compatible for broadcasting.
276:     a : array_like
277:         Denominator of a linear filter.  If `b` has dimension greater than 1,
278:         it is assumed that the coefficients are stored in the first dimension,
279:         and ``b.shape[1:]``, ``a.shape[1:]``, and the shape of the frequencies
280:         array must be compatible for broadcasting.
281:     worN : {None, int, array_like}, optional
282:         If None (default), then compute at 512 equally spaced frequencies.
283:         If a single integer, then compute at that many frequencies.  This is
284:         a convenient alternative to::
285: 
286:             np.linspace(0, 2*pi if whole else pi, N, endpoint=False)
287: 
288:         Using a number that is fast for FFT computations can result in
289:         faster computations (see Notes).
290:         If an array_like, compute the response at the frequencies given (in
291:         radians/sample).
292:     whole : bool, optional
293:         Normally, frequencies are computed from 0 to the Nyquist frequency,
294:         pi radians/sample (upper-half of unit-circle).  If `whole` is True,
295:         compute frequencies from 0 to 2*pi radians/sample.
296:     plot : callable
297:         A callable that takes two arguments. If given, the return parameters
298:         `w` and `h` are passed to plot. Useful for plotting the frequency
299:         response inside `freqz`.
300: 
301:     Returns
302:     -------
303:     w : ndarray
304:         The normalized frequencies at which `h` was computed, in
305:         radians/sample.
306:     h : ndarray
307:         The frequency response, as complex numbers.
308: 
309:     See Also
310:     --------
311:     freqz_zpk
312:     sosfreqz
313: 
314:     Notes
315:     -----
316:     Using Matplotlib's :func:`matplotlib.pyplot.plot` function as the callable
317:     for `plot` produces unexpected results, as this plots the real part of the
318:     complex transfer function, not the magnitude.
319:     Try ``lambda w, h: plot(w, np.abs(h))``.
320: 
321:     A direct computation via (R)FFT is used to compute the frequency response
322:     when the following conditions are met:
323: 
324:     1. An integer value is given for `worN`.
325:     2. `worN` is fast to compute via FFT (i.e.,
326:        `next_fast_len(worN) <scipy.fftpack.next_fast_len>` equals `worN`).
327:     3. The denominator coefficients are a single value (``a.shape[0] == 1``).
328:     4. `worN` is at least as long as the numerator coefficients
329:        (``worN >= b.shape[0]``).
330:     5. If ``b.ndim > 1``, then ``b.shape[-1] == 1``.
331: 
332:     For long FIR filters, the FFT approach can have lower error and be much
333:     faster than the equivalent direct polynomial calculation.
334: 
335:     Examples
336:     --------
337:     >>> from scipy import signal
338:     >>> b = signal.firwin(80, 0.5, window=('kaiser', 8))
339:     >>> w, h = signal.freqz(b)
340: 
341:     >>> import matplotlib.pyplot as plt
342:     >>> fig = plt.figure()
343:     >>> plt.title('Digital filter frequency response')
344:     >>> ax1 = fig.add_subplot(111)
345: 
346:     >>> plt.plot(w, 20 * np.log10(abs(h)), 'b')
347:     >>> plt.ylabel('Amplitude [dB]', color='b')
348:     >>> plt.xlabel('Frequency [rad/sample]')
349: 
350:     >>> ax2 = ax1.twinx()
351:     >>> angles = np.unwrap(np.angle(h))
352:     >>> plt.plot(w, angles, 'g')
353:     >>> plt.ylabel('Angle (radians)', color='g')
354:     >>> plt.grid()
355:     >>> plt.axis('tight')
356:     >>> plt.show()
357: 
358:     Broadcasting Examples
359: 
360:     Suppose we have two FIR filters whose coefficients are stored in the
361:     rows of an array with shape (2, 25).  For this demonstration we'll
362:     use random data:
363: 
364:     >>> np.random.seed(42)
365:     >>> b = np.random.rand(2, 25)
366: 
367:     To compute the frequency response for these two filters with one call
368:     to `freqz`, we must pass in ``b.T``, because `freqz` expects the first
369:     axis to hold the coefficients. We must then extend the shape with a
370:     trivial dimension of length 1 to allow broadcasting with the array
371:     of frequencies.  That is, we pass in ``b.T[..., np.newaxis]``, which has
372:     shape (25, 2, 1):
373: 
374:     >>> w, h = signal.freqz(b.T[..., np.newaxis], worN=1024)
375:     >>> w.shape
376:     (1024,)
377:     >>> h.shape
378:     (2, 1024)
379: 
380:     Now suppose we have two transfer functions, with the same numerator
381:     coefficients ``b = [0.5, 0.5]``. The coefficients for the two denominators
382:     are stored in the first dimension of the two-dimensional array  `a`::
383: 
384:         a = [   1      1  ]
385:             [ -0.25, -0.5 ]
386: 
387:     >>> b = np.array([0.5, 0.5])
388:     >>> a = np.array([[1, 1], [-0.25, -0.5]])
389: 
390:     Only `a` is more than one-dimensional.  To make it compatible for
391:     broadcasting with the frequencies, we extend it with a trivial dimension
392:     in the call to `freqz`:
393: 
394:     >>> w, h = signal.freqz(b, a[..., np.newaxis], worN=1024)
395:     >>> w.shape
396:     (1024,)
397:     >>> h.shape
398:     (2, 1024)
399: 
400:     '''
401:     b = atleast_1d(b)
402:     a = atleast_1d(a)
403: 
404:     if worN is None:
405:         worN = 512
406: 
407:     h = None
408:     try:
409:         worN = operator.index(worN)
410:     except TypeError:  # not int-like
411:         w = atleast_1d(worN)
412:     else:
413:         if worN < 0:
414:             raise ValueError('worN must be nonnegative, got %s' % (worN,))
415:         lastpoint = 2 * pi if whole else pi
416:         w = np.linspace(0, lastpoint, worN, endpoint=False)
417:         if (a.size == 1 and worN >= b.shape[0] and
418:                 fftpack.next_fast_len(worN) == worN and
419:                 (b.ndim == 1 or (b.shape[-1] == 1))):
420:             # if worN is fast, 2 * worN will be fast, too, so no need to check
421:             n_fft = worN if whole else worN * 2
422:             if np.isrealobj(b) and np.isrealobj(a):
423:                 fft_func = np.fft.rfft
424:             else:
425:                 fft_func = fftpack.fft
426:             h = fft_func(b, n=n_fft, axis=0)[:worN]
427:             h /= a
428:             if fft_func is np.fft.rfft and whole:
429:                 # exclude DC and maybe Nyquist (no need to use axis_reverse
430:                 # here because we can build reversal with the truncation)
431:                 stop = -1 if n_fft % 2 == 1 else -2
432:                 h_flip = slice(stop, 0, -1)
433:                 h = np.concatenate((h, h[h_flip].conj()))
434:             if b.ndim > 1:
435:                 # Last axis of h has length 1, so drop it.
436:                 h = h[..., 0]
437:                 # Rotate the first axis of h to the end.
438:                 h = np.rollaxis(h, 0, h.ndim)
439:     del worN
440: 
441:     if h is None:  # still need to compute using freqs w
442:         zm1 = exp(-1j * w)
443:         h = (npp_polyval(zm1, b, tensor=False) /
444:              npp_polyval(zm1, a, tensor=False))
445:     if plot is not None:
446:         plot(w, h)
447: 
448:     return w, h
449: 
450: 
451: def freqz_zpk(z, p, k, worN=None, whole=False):
452:     r'''
453:     Compute the frequency response of a digital filter in ZPK form.
454: 
455:     Given the Zeros, Poles and Gain of a digital filter, compute its frequency
456:     response::
457: 
458:     :math:`H(z)=k \prod_i (z - Z[i]) / \prod_j (z - P[j])`
459: 
460:     where :math:`k` is the `gain`, :math:`Z` are the `zeros` and :math:`P` are
461:     the `poles`.
462: 
463:     Parameters
464:     ----------
465:     z : array_like
466:         Zeroes of a linear filter
467:     p : array_like
468:         Poles of a linear filter
469:     k : scalar
470:         Gain of a linear filter
471:     worN : {None, int, array_like}, optional
472:         If single integer (default 512, same as None), then compute at `worN`
473:         frequencies equally spaced around the unit circle. If an array_like,
474:         compute the response at the frequencies given (in radians/sample).
475:     whole : bool, optional
476:         Normally, frequencies are computed from 0 to the Nyquist frequency,
477:         pi radians/sample (upper-half of unit-circle).  If `whole` is True,
478:         compute frequencies from 0 to 2*pi radians/sample.
479: 
480:     Returns
481:     -------
482:     w : ndarray
483:         The normalized frequencies at which `h` was computed, in
484:         radians/sample.
485:     h : ndarray
486:         The frequency response.
487: 
488:     See Also
489:     --------
490:     freqs : Compute the frequency response of an analog filter in TF form
491:     freqs_zpk : Compute the frequency response of an analog filter in ZPK form
492:     freqz : Compute the frequency response of a digital filter in TF form
493: 
494:     Notes
495:     -----
496:     .. versionadded: 0.19.0
497: 
498:     Examples
499:     --------
500:     >>> from scipy import signal
501:     >>> z, p, k = signal.butter(4, 0.2, output='zpk')
502:     >>> w, h = signal.freqz_zpk(z, p, k)
503: 
504:     >>> import matplotlib.pyplot as plt
505:     >>> fig = plt.figure()
506:     >>> plt.title('Digital filter frequency response')
507:     >>> ax1 = fig.add_subplot(111)
508: 
509:     >>> plt.plot(w, 20 * np.log10(abs(h)), 'b')
510:     >>> plt.ylabel('Amplitude [dB]', color='b')
511:     >>> plt.xlabel('Frequency [rad/sample]')
512: 
513:     >>> ax2 = ax1.twinx()
514:     >>> angles = np.unwrap(np.angle(h))
515:     >>> plt.plot(w, angles, 'g')
516:     >>> plt.ylabel('Angle (radians)', color='g')
517:     >>> plt.grid()
518:     >>> plt.axis('tight')
519:     >>> plt.show()
520: 
521:     '''
522:     z, p = map(atleast_1d, (z, p))
523:     if whole:
524:         lastpoint = 2 * pi
525:     else:
526:         lastpoint = pi
527:     if worN is None:
528:         w = numpy.linspace(0, lastpoint, 512, endpoint=False)
529:     elif isinstance(worN, int):
530:         N = worN
531:         w = numpy.linspace(0, lastpoint, N, endpoint=False)
532:     else:
533:         w = worN
534:     w = atleast_1d(w)
535:     zm1 = exp(1j * w)
536:     h = k * polyvalfromroots(zm1, z) / polyvalfromroots(zm1, p)
537: 
538:     return w, h
539: 
540: 
541: def group_delay(system, w=None, whole=False):
542:     r'''Compute the group delay of a digital filter.
543: 
544:     The group delay measures by how many samples amplitude envelopes of
545:     various spectral components of a signal are delayed by a filter.
546:     It is formally defined as the derivative of continuous (unwrapped) phase::
547: 
548:                d        jw
549:      D(w) = - -- arg H(e)
550:               dw
551: 
552:     Parameters
553:     ----------
554:     system : tuple of array_like (b, a)
555:         Numerator and denominator coefficients of a filter transfer function.
556:     w : {None, int, array-like}, optional
557:         If None (default), then compute at 512 frequencies equally spaced
558:         around the unit circle.
559:         If a single integer, then compute at that many frequencies.
560:         If array, compute the delay at the frequencies given
561:         (in radians/sample).
562:     whole : bool, optional
563:         Normally, frequencies are computed from 0 to the Nyquist frequency,
564:         pi radians/sample (upper-half of unit-circle).  If `whole` is True,
565:         compute frequencies from 0 to ``2*pi`` radians/sample.
566: 
567:     Returns
568:     -------
569:     w : ndarray
570:         The normalized frequencies at which the group delay was computed,
571:         in radians/sample.
572:     gd : ndarray
573:         The group delay.
574: 
575:     Notes
576:     -----
577:     The similar function in MATLAB is called `grpdelay`.
578: 
579:     If the transfer function :math:`H(z)` has zeros or poles on the unit
580:     circle, the group delay at corresponding frequencies is undefined.
581:     When such a case arises the warning is raised and the group delay
582:     is set to 0 at those frequencies.
583: 
584:     For the details of numerical computation of the group delay refer to [1]_.
585: 
586:     .. versionadded: 0.16.0
587: 
588:     See Also
589:     --------
590:     freqz : Frequency response of a digital filter
591: 
592:     References
593:     ----------
594:     .. [1] Richard G. Lyons, "Understanding Digital Signal Processing,
595:            3rd edition", p. 830.
596: 
597:     Examples
598:     --------
599:     >>> from scipy import signal
600:     >>> b, a = signal.iirdesign(0.1, 0.3, 5, 50, ftype='cheby1')
601:     >>> w, gd = signal.group_delay((b, a))
602: 
603:     >>> import matplotlib.pyplot as plt
604:     >>> plt.title('Digital filter group delay')
605:     >>> plt.plot(w, gd)
606:     >>> plt.ylabel('Group delay [samples]')
607:     >>> plt.xlabel('Frequency [rad/sample]')
608:     >>> plt.show()
609: 
610:     '''
611:     if w is None:
612:         w = 512
613: 
614:     if isinstance(w, int):
615:         if whole:
616:             w = np.linspace(0, 2 * pi, w, endpoint=False)
617:         else:
618:             w = np.linspace(0, pi, w, endpoint=False)
619: 
620:     w = np.atleast_1d(w)
621:     b, a = map(np.atleast_1d, system)
622:     c = np.convolve(b, a[::-1])
623:     cr = c * np.arange(c.size)
624:     z = np.exp(-1j * w)
625:     num = np.polyval(cr[::-1], z)
626:     den = np.polyval(c[::-1], z)
627:     singular = np.absolute(den) < 10 * EPSILON
628:     if np.any(singular):
629:         warnings.warn(
630:             "The group delay is singular at frequencies [{0}], setting to 0".
631:             format(", ".join("{0:.3f}".format(ws) for ws in w[singular]))
632:         )
633: 
634:     gd = np.zeros_like(w)
635:     gd[~singular] = np.real(num[~singular] / den[~singular]) - a.size + 1
636:     return w, gd
637: 
638: 
639: def _validate_sos(sos):
640:     '''Helper to validate a SOS input'''
641:     sos = np.atleast_2d(sos)
642:     if sos.ndim != 2:
643:         raise ValueError('sos array must be 2D')
644:     n_sections, m = sos.shape
645:     if m != 6:
646:         raise ValueError('sos array must be shape (n_sections, 6)')
647:     if not (sos[:, 3] == 1).all():
648:         raise ValueError('sos[:, 3] should be all ones')
649:     return sos, n_sections
650: 
651: 
652: def sosfreqz(sos, worN=None, whole=False):
653:     '''
654:     Compute the frequency response of a digital filter in SOS format.
655: 
656:     Given `sos`, an array with shape (n, 6) of second order sections of
657:     a digital filter, compute the frequency response of the system function::
658: 
659:                B0(z)   B1(z)         B{n-1}(z)
660:         H(z) = ----- * ----- * ... * ---------
661:                A0(z)   A1(z)         A{n-1}(z)
662: 
663:     for z = exp(omega*1j), where B{k}(z) and A{k}(z) are numerator and
664:     denominator of the transfer function of the k-th second order section.
665: 
666:     Parameters
667:     ----------
668:     sos : array_like
669:         Array of second-order filter coefficients, must have shape
670:         ``(n_sections, 6)``. Each row corresponds to a second-order
671:         section, with the first three columns providing the numerator
672:         coefficients and the last three providing the denominator
673:         coefficients.
674:     worN : {None, int, array_like}, optional
675:         If None (default), then compute at 512 frequencies equally spaced
676:         around the unit circle.
677:         If a single integer, then compute at that many frequencies.
678:         Using a number that is fast for FFT computations can result in
679:         faster computations (see Notes of `freqz`).
680:         If an array_like, compute the response at the frequencies given (in
681:         radians/sample; must be 1D).
682:     whole : bool, optional
683:         Normally, frequencies are computed from 0 to the Nyquist frequency,
684:         pi radians/sample (upper-half of unit-circle).  If `whole` is True,
685:         compute frequencies from 0 to 2*pi radians/sample.
686: 
687:     Returns
688:     -------
689:     w : ndarray
690:         The normalized frequencies at which `h` was computed, in
691:         radians/sample.
692:     h : ndarray
693:         The frequency response, as complex numbers.
694: 
695:     See Also
696:     --------
697:     freqz, sosfilt
698: 
699:     Notes
700:     -----
701: 
702:     .. versionadded:: 0.19.0
703: 
704:     Examples
705:     --------
706:     Design a 15th-order bandpass filter in SOS format.
707: 
708:     >>> from scipy import signal
709:     >>> sos = signal.ellip(15, 0.5, 60, (0.2, 0.4), btype='bandpass',
710:     ...                    output='sos')
711: 
712:     Compute the frequency response at 1500 points from DC to Nyquist.
713: 
714:     >>> w, h = signal.sosfreqz(sos, worN=1500)
715: 
716:     Plot the response.
717: 
718:     >>> import matplotlib.pyplot as plt
719:     >>> plt.subplot(2, 1, 1)
720:     >>> db = 20*np.log10(np.abs(h))
721:     >>> plt.plot(w/np.pi, db)
722:     >>> plt.ylim(-75, 5)
723:     >>> plt.grid(True)
724:     >>> plt.yticks([0, -20, -40, -60])
725:     >>> plt.ylabel('Gain [dB]')
726:     >>> plt.title('Frequency Response')
727:     >>> plt.subplot(2, 1, 2)
728:     >>> plt.plot(w/np.pi, np.angle(h))
729:     >>> plt.grid(True)
730:     >>> plt.yticks([-np.pi, -0.5*np.pi, 0, 0.5*np.pi, np.pi],
731:     ...            [r'$-\\pi$', r'$-\\pi/2$', '0', r'$\\pi/2$', r'$\\pi$'])
732:     >>> plt.ylabel('Phase [rad]')
733:     >>> plt.xlabel('Normalized frequency (1.0 = Nyquist)')
734:     >>> plt.show()
735: 
736:     If the same filter is implemented as a single transfer function,
737:     numerical error corrupts the frequency response:
738: 
739:     >>> b, a = signal.ellip(15, 0.5, 60, (0.2, 0.4), btype='bandpass',
740:     ...                    output='ba')
741:     >>> w, h = signal.freqz(b, a, worN=1500)
742:     >>> plt.subplot(2, 1, 1)
743:     >>> db = 20*np.log10(np.abs(h))
744:     >>> plt.plot(w/np.pi, db)
745:     >>> plt.subplot(2, 1, 2)
746:     >>> plt.plot(w/np.pi, np.angle(h))
747:     >>> plt.show()
748: 
749:     '''
750: 
751:     sos, n_sections = _validate_sos(sos)
752:     if n_sections == 0:
753:         raise ValueError('Cannot compute frequencies with no sections')
754:     h = 1.
755:     for row in sos:
756:         w, rowh = freqz(row[:3], row[3:], worN=worN, whole=whole)
757:         h *= rowh
758:     return w, h
759: 
760: 
761: def _cplxreal(z, tol=None):
762:     '''
763:     Split into complex and real parts, combining conjugate pairs.
764: 
765:     The 1D input vector `z` is split up into its complex (`zc`) and real (`zr`)
766:     elements.  Every complex element must be part of a complex-conjugate pair,
767:     which are combined into a single number (with positive imaginary part) in
768:     the output.  Two complex numbers are considered a conjugate pair if their
769:     real and imaginary parts differ in magnitude by less than ``tol * abs(z)``.
770: 
771:     Parameters
772:     ----------
773:     z : array_like
774:         Vector of complex numbers to be sorted and split
775:     tol : float, optional
776:         Relative tolerance for testing realness and conjugate equality.
777:         Default is ``100 * spacing(1)`` of `z`'s data type (i.e. 2e-14 for
778:         float64)
779: 
780:     Returns
781:     -------
782:     zc : ndarray
783:         Complex elements of `z`, with each pair represented by a single value
784:         having positive imaginary part, sorted first by real part, and then
785:         by magnitude of imaginary part.  The pairs are averaged when combined
786:         to reduce error.
787:     zr : ndarray
788:         Real elements of `z` (those having imaginary part less than
789:         `tol` times their magnitude), sorted by value.
790: 
791:     Raises
792:     ------
793:     ValueError
794:         If there are any complex numbers in `z` for which a conjugate
795:         cannot be found.
796: 
797:     See Also
798:     --------
799:     _cplxpair
800: 
801:     Examples
802:     --------
803:     >>> a = [4, 3, 1, 2-2j, 2+2j, 2-1j, 2+1j, 2-1j, 2+1j, 1+1j, 1-1j]
804:     >>> zc, zr = _cplxreal(a)
805:     >>> print(zc)
806:     [ 1.+1.j  2.+1.j  2.+1.j  2.+2.j]
807:     >>> print(zr)
808:     [ 1.  3.  4.]
809:     '''
810: 
811:     z = atleast_1d(z)
812:     if z.size == 0:
813:         return z, z
814:     elif z.ndim != 1:
815:         raise ValueError('_cplxreal only accepts 1D input')
816: 
817:     if tol is None:
818:         # Get tolerance from dtype of input
819:         tol = 100 * np.finfo((1.0 * z).dtype).eps
820: 
821:     # Sort by real part, magnitude of imaginary part (speed up further sorting)
822:     z = z[np.lexsort((abs(z.imag), z.real))]
823: 
824:     # Split reals from conjugate pairs
825:     real_indices = abs(z.imag) <= tol * abs(z)
826:     zr = z[real_indices].real
827: 
828:     if len(zr) == len(z):
829:         # Input is entirely real
830:         return array([]), zr
831: 
832:     # Split positive and negative halves of conjugates
833:     z = z[~real_indices]
834:     zp = z[z.imag > 0]
835:     zn = z[z.imag < 0]
836: 
837:     if len(zp) != len(zn):
838:         raise ValueError('Array contains complex value with no matching '
839:                          'conjugate.')
840: 
841:     # Find runs of (approximately) the same real part
842:     same_real = np.diff(zp.real) <= tol * abs(zp[:-1])
843:     diffs = numpy.diff(concatenate(([0], same_real, [0])))
844:     run_starts = numpy.where(diffs > 0)[0]
845:     run_stops = numpy.where(diffs < 0)[0]
846: 
847:     # Sort each run by their imaginary parts
848:     for i in range(len(run_starts)):
849:         start = run_starts[i]
850:         stop = run_stops[i] + 1
851:         for chunk in (zp[start:stop], zn[start:stop]):
852:             chunk[...] = chunk[np.lexsort([abs(chunk.imag)])]
853: 
854:     # Check that negatives match positives
855:     if any(abs(zp - zn.conj()) > tol * abs(zn)):
856:         raise ValueError('Array contains complex value with no matching '
857:                          'conjugate.')
858: 
859:     # Average out numerical inaccuracy in real vs imag parts of pairs
860:     zc = (zp + zn.conj()) / 2
861: 
862:     return zc, zr
863: 
864: 
865: def _cplxpair(z, tol=None):
866:     '''
867:     Sort into pairs of complex conjugates.
868: 
869:     Complex conjugates in `z` are sorted by increasing real part.  In each
870:     pair, the number with negative imaginary part appears first.
871: 
872:     If pairs have identical real parts, they are sorted by increasing
873:     imaginary magnitude.
874: 
875:     Two complex numbers are considered a conjugate pair if their real and
876:     imaginary parts differ in magnitude by less than ``tol * abs(z)``.  The
877:     pairs are forced to be exact complex conjugates by averaging the positive
878:     and negative values.
879: 
880:     Purely real numbers are also sorted, but placed after the complex
881:     conjugate pairs.  A number is considered real if its imaginary part is
882:     smaller than `tol` times the magnitude of the number.
883: 
884:     Parameters
885:     ----------
886:     z : array_like
887:         1-dimensional input array to be sorted.
888:     tol : float, optional
889:         Relative tolerance for testing realness and conjugate equality.
890:         Default is ``100 * spacing(1)`` of `z`'s data type (i.e. 2e-14 for
891:         float64)
892: 
893:     Returns
894:     -------
895:     y : ndarray
896:         Complex conjugate pairs followed by real numbers.
897: 
898:     Raises
899:     ------
900:     ValueError
901:         If there are any complex numbers in `z` for which a conjugate
902:         cannot be found.
903: 
904:     See Also
905:     --------
906:     _cplxreal
907: 
908:     Examples
909:     --------
910:     >>> a = [4, 3, 1, 2-2j, 2+2j, 2-1j, 2+1j, 2-1j, 2+1j, 1+1j, 1-1j]
911:     >>> z = _cplxpair(a)
912:     >>> print(z)
913:     [ 1.-1.j  1.+1.j  2.-1.j  2.+1.j  2.-1.j  2.+1.j  2.-2.j  2.+2.j  1.+0.j
914:       3.+0.j  4.+0.j]
915:     '''
916: 
917:     z = atleast_1d(z)
918:     if z.size == 0 or np.isrealobj(z):
919:         return np.sort(z)
920: 
921:     if z.ndim != 1:
922:         raise ValueError('z must be 1-dimensional')
923: 
924:     zc, zr = _cplxreal(z, tol)
925: 
926:     # Interleave complex values and their conjugates, with negative imaginary
927:     # parts first in each pair
928:     zc = np.dstack((zc.conj(), zc)).flatten()
929:     z = np.append(zc, zr)
930:     return z
931: 
932: 
933: def tf2zpk(b, a):
934:     r'''Return zero, pole, gain (z, p, k) representation from a numerator,
935:     denominator representation of a linear filter.
936: 
937:     Parameters
938:     ----------
939:     b : array_like
940:         Numerator polynomial coefficients.
941:     a : array_like
942:         Denominator polynomial coefficients.
943: 
944:     Returns
945:     -------
946:     z : ndarray
947:         Zeros of the transfer function.
948:     p : ndarray
949:         Poles of the transfer function.
950:     k : float
951:         System gain.
952: 
953:     Notes
954:     -----
955:     If some values of `b` are too close to 0, they are removed. In that case,
956:     a BadCoefficients warning is emitted.
957: 
958:     The `b` and `a` arrays are interpreted as coefficients for positive,
959:     descending powers of the transfer function variable.  So the inputs
960:     :math:`b = [b_0, b_1, ..., b_M]` and :math:`a =[a_0, a_1, ..., a_N]`
961:     can represent an analog filter of the form:
962: 
963:     .. math::
964: 
965:         H(s) = \frac
966:         {b_0 s^M + b_1 s^{(M-1)} + \cdots + b_M}
967:         {a_0 s^N + a_1 s^{(N-1)} + \cdots + a_N}
968: 
969:     or a discrete-time filter of the form:
970: 
971:     .. math::
972: 
973:         H(z) = \frac
974:         {b_0 z^M + b_1 z^{(M-1)} + \cdots + b_M}
975:         {a_0 z^N + a_1 z^{(N-1)} + \cdots + a_N}
976: 
977:     This "positive powers" form is found more commonly in controls
978:     engineering.  If `M` and `N` are equal (which is true for all filters
979:     generated by the bilinear transform), then this happens to be equivalent
980:     to the "negative powers" discrete-time form preferred in DSP:
981: 
982:     .. math::
983: 
984:         H(z) = \frac
985:         {b_0 + b_1 z^{-1} + \cdots + b_M z^{-M}}
986:         {a_0 + a_1 z^{-1} + \cdots + a_N z^{-N}}
987: 
988:     Although this is true for common filters, remember that this is not true
989:     in the general case.  If `M` and `N` are not equal, the discrete-time
990:     transfer function coefficients must first be converted to the "positive
991:     powers" form before finding the poles and zeros.
992: 
993:     '''
994:     b, a = normalize(b, a)
995:     b = (b + 0.0) / a[0]
996:     a = (a + 0.0) / a[0]
997:     k = b[0]
998:     b /= b[0]
999:     z = roots(b)
1000:     p = roots(a)
1001:     return z, p, k
1002: 
1003: 
1004: def zpk2tf(z, p, k):
1005:     '''
1006:     Return polynomial transfer function representation from zeros and poles
1007: 
1008:     Parameters
1009:     ----------
1010:     z : array_like
1011:         Zeros of the transfer function.
1012:     p : array_like
1013:         Poles of the transfer function.
1014:     k : float
1015:         System gain.
1016: 
1017:     Returns
1018:     -------
1019:     b : ndarray
1020:         Numerator polynomial coefficients.
1021:     a : ndarray
1022:         Denominator polynomial coefficients.
1023: 
1024:     '''
1025:     z = atleast_1d(z)
1026:     k = atleast_1d(k)
1027:     if len(z.shape) > 1:
1028:         temp = poly(z[0])
1029:         b = zeros((z.shape[0], z.shape[1] + 1), temp.dtype.char)
1030:         if len(k) == 1:
1031:             k = [k[0]] * z.shape[0]
1032:         for i in range(z.shape[0]):
1033:             b[i] = k[i] * poly(z[i])
1034:     else:
1035:         b = k * poly(z)
1036:     a = atleast_1d(poly(p))
1037: 
1038:     # Use real output if possible.  Copied from numpy.poly, since
1039:     # we can't depend on a specific version of numpy.
1040:     if issubclass(b.dtype.type, numpy.complexfloating):
1041:         # if complex roots are all complex conjugates, the roots are real.
1042:         roots = numpy.asarray(z, complex)
1043:         pos_roots = numpy.compress(roots.imag > 0, roots)
1044:         neg_roots = numpy.conjugate(numpy.compress(roots.imag < 0, roots))
1045:         if len(pos_roots) == len(neg_roots):
1046:             if numpy.all(numpy.sort_complex(neg_roots) ==
1047:                          numpy.sort_complex(pos_roots)):
1048:                 b = b.real.copy()
1049: 
1050:     if issubclass(a.dtype.type, numpy.complexfloating):
1051:         # if complex roots are all complex conjugates, the roots are real.
1052:         roots = numpy.asarray(p, complex)
1053:         pos_roots = numpy.compress(roots.imag > 0, roots)
1054:         neg_roots = numpy.conjugate(numpy.compress(roots.imag < 0, roots))
1055:         if len(pos_roots) == len(neg_roots):
1056:             if numpy.all(numpy.sort_complex(neg_roots) ==
1057:                          numpy.sort_complex(pos_roots)):
1058:                 a = a.real.copy()
1059: 
1060:     return b, a
1061: 
1062: 
1063: def tf2sos(b, a, pairing='nearest'):
1064:     '''
1065:     Return second-order sections from transfer function representation
1066: 
1067:     Parameters
1068:     ----------
1069:     b : array_like
1070:         Numerator polynomial coefficients.
1071:     a : array_like
1072:         Denominator polynomial coefficients.
1073:     pairing : {'nearest', 'keep_odd'}, optional
1074:         The method to use to combine pairs of poles and zeros into sections.
1075:         See `zpk2sos`.
1076: 
1077:     Returns
1078:     -------
1079:     sos : ndarray
1080:         Array of second-order filter coefficients, with shape
1081:         ``(n_sections, 6)``. See `sosfilt` for the SOS filter format
1082:         specification.
1083: 
1084:     See Also
1085:     --------
1086:     zpk2sos, sosfilt
1087: 
1088:     Notes
1089:     -----
1090:     It is generally discouraged to convert from TF to SOS format, since doing
1091:     so usually will not improve numerical precision errors. Instead, consider
1092:     designing filters in ZPK format and converting directly to SOS. TF is
1093:     converted to SOS by first converting to ZPK format, then converting
1094:     ZPK to SOS.
1095: 
1096:     .. versionadded:: 0.16.0
1097:     '''
1098:     return zpk2sos(*tf2zpk(b, a), pairing=pairing)
1099: 
1100: 
1101: def sos2tf(sos):
1102:     '''
1103:     Return a single transfer function from a series of second-order sections
1104: 
1105:     Parameters
1106:     ----------
1107:     sos : array_like
1108:         Array of second-order filter coefficients, must have shape
1109:         ``(n_sections, 6)``. See `sosfilt` for the SOS filter format
1110:         specification.
1111: 
1112:     Returns
1113:     -------
1114:     b : ndarray
1115:         Numerator polynomial coefficients.
1116:     a : ndarray
1117:         Denominator polynomial coefficients.
1118: 
1119:     Notes
1120:     -----
1121:     .. versionadded:: 0.16.0
1122:     '''
1123:     sos = np.asarray(sos)
1124:     b = [1.]
1125:     a = [1.]
1126:     n_sections = sos.shape[0]
1127:     for section in range(n_sections):
1128:         b = np.polymul(b, sos[section, :3])
1129:         a = np.polymul(a, sos[section, 3:])
1130:     return b, a
1131: 
1132: 
1133: def sos2zpk(sos):
1134:     '''
1135:     Return zeros, poles, and gain of a series of second-order sections
1136: 
1137:     Parameters
1138:     ----------
1139:     sos : array_like
1140:         Array of second-order filter coefficients, must have shape
1141:         ``(n_sections, 6)``. See `sosfilt` for the SOS filter format
1142:         specification.
1143: 
1144:     Returns
1145:     -------
1146:     z : ndarray
1147:         Zeros of the transfer function.
1148:     p : ndarray
1149:         Poles of the transfer function.
1150:     k : float
1151:         System gain.
1152: 
1153:     Notes
1154:     -----
1155:     .. versionadded:: 0.16.0
1156:     '''
1157:     sos = np.asarray(sos)
1158:     n_sections = sos.shape[0]
1159:     z = np.empty(n_sections*2, np.complex128)
1160:     p = np.empty(n_sections*2, np.complex128)
1161:     k = 1.
1162:     for section in range(n_sections):
1163:         zpk = tf2zpk(sos[section, :3], sos[section, 3:])
1164:         z[2*section:2*(section+1)] = zpk[0]
1165:         p[2*section:2*(section+1)] = zpk[1]
1166:         k *= zpk[2]
1167:     return z, p, k
1168: 
1169: 
1170: def _nearest_real_complex_idx(fro, to, which):
1171:     '''Get the next closest real or complex element based on distance'''
1172:     assert which in ('real', 'complex')
1173:     order = np.argsort(np.abs(fro - to))
1174:     mask = np.isreal(fro[order])
1175:     if which == 'complex':
1176:         mask = ~mask
1177:     return order[np.where(mask)[0][0]]
1178: 
1179: 
1180: def zpk2sos(z, p, k, pairing='nearest'):
1181:     '''
1182:     Return second-order sections from zeros, poles, and gain of a system
1183: 
1184:     Parameters
1185:     ----------
1186:     z : array_like
1187:         Zeros of the transfer function.
1188:     p : array_like
1189:         Poles of the transfer function.
1190:     k : float
1191:         System gain.
1192:     pairing : {'nearest', 'keep_odd'}, optional
1193:         The method to use to combine pairs of poles and zeros into sections.
1194:         See Notes below.
1195: 
1196:     Returns
1197:     -------
1198:     sos : ndarray
1199:         Array of second-order filter coefficients, with shape
1200:         ``(n_sections, 6)``. See `sosfilt` for the SOS filter format
1201:         specification.
1202: 
1203:     See Also
1204:     --------
1205:     sosfilt
1206: 
1207:     Notes
1208:     -----
1209:     The algorithm used to convert ZPK to SOS format is designed to
1210:     minimize errors due to numerical precision issues. The pairing
1211:     algorithm attempts to minimize the peak gain of each biquadratic
1212:     section. This is done by pairing poles with the nearest zeros, starting
1213:     with the poles closest to the unit circle.
1214: 
1215:     *Algorithms*
1216: 
1217:     The current algorithms are designed specifically for use with digital
1218:     filters. (The output coefficents are not correct for analog filters.)
1219: 
1220:     The steps in the ``pairing='nearest'`` and ``pairing='keep_odd'``
1221:     algorithms are mostly shared. The ``nearest`` algorithm attempts to
1222:     minimize the peak gain, while ``'keep_odd'`` minimizes peak gain under
1223:     the constraint that odd-order systems should retain one section
1224:     as first order. The algorithm steps and are as follows:
1225: 
1226:     As a pre-processing step, add poles or zeros to the origin as
1227:     necessary to obtain the same number of poles and zeros for pairing.
1228:     If ``pairing == 'nearest'`` and there are an odd number of poles,
1229:     add an additional pole and a zero at the origin.
1230: 
1231:     The following steps are then iterated over until no more poles or
1232:     zeros remain:
1233: 
1234:     1. Take the (next remaining) pole (complex or real) closest to the
1235:        unit circle to begin a new filter section.
1236: 
1237:     2. If the pole is real and there are no other remaining real poles [#]_,
1238:        add the closest real zero to the section and leave it as a first
1239:        order section. Note that after this step we are guaranteed to be
1240:        left with an even number of real poles, complex poles, real zeros,
1241:        and complex zeros for subsequent pairing iterations.
1242: 
1243:     3. Else:
1244: 
1245:         1. If the pole is complex and the zero is the only remaining real
1246:            zero*, then pair the pole with the *next* closest zero
1247:            (guaranteed to be complex). This is necessary to ensure that
1248:            there will be a real zero remaining to eventually create a
1249:            first-order section (thus keeping the odd order).
1250: 
1251:         2. Else pair the pole with the closest remaining zero (complex or
1252:            real).
1253: 
1254:         3. Proceed to complete the second-order section by adding another
1255:            pole and zero to the current pole and zero in the section:
1256: 
1257:             1. If the current pole and zero are both complex, add their
1258:                conjugates.
1259: 
1260:             2. Else if the pole is complex and the zero is real, add the
1261:                conjugate pole and the next closest real zero.
1262: 
1263:             3. Else if the pole is real and the zero is complex, add the
1264:                conjugate zero and the real pole closest to those zeros.
1265: 
1266:             4. Else (we must have a real pole and real zero) add the next
1267:                real pole closest to the unit circle, and then add the real
1268:                zero closest to that pole.
1269: 
1270:     .. [#] This conditional can only be met for specific odd-order inputs
1271:            with the ``pairing == 'keep_odd'`` method.
1272: 
1273:     .. versionadded:: 0.16.0
1274: 
1275:     Examples
1276:     --------
1277: 
1278:     Design a 6th order low-pass elliptic digital filter for a system with a
1279:     sampling rate of 8000 Hz that has a pass-band corner frequency of
1280:     1000 Hz.  The ripple in the pass-band should not exceed 0.087 dB, and
1281:     the attenuation in the stop-band should be at least 90 dB.
1282: 
1283:     In the following call to `signal.ellip`, we could use ``output='sos'``,
1284:     but for this example, we'll use ``output='zpk'``, and then convert to SOS
1285:     format with `zpk2sos`:
1286: 
1287:     >>> from scipy import signal
1288:     >>> z, p, k = signal.ellip(6, 0.087, 90, 1000/(0.5*8000), output='zpk')
1289: 
1290:     Now convert to SOS format.
1291: 
1292:     >>> sos = signal.zpk2sos(z, p, k)
1293: 
1294:     The coefficients of the numerators of the sections:
1295: 
1296:     >>> sos[:, :3]
1297:     array([[ 0.0014154 ,  0.00248707,  0.0014154 ],
1298:            [ 1.        ,  0.72965193,  1.        ],
1299:            [ 1.        ,  0.17594966,  1.        ]])
1300: 
1301:     The symmetry in the coefficients occurs because all the zeros are on the
1302:     unit circle.
1303: 
1304:     The coefficients of the denominators of the sections:
1305: 
1306:     >>> sos[:, 3:]
1307:     array([[ 1.        , -1.32543251,  0.46989499],
1308:            [ 1.        , -1.26117915,  0.6262586 ],
1309:            [ 1.        , -1.25707217,  0.86199667]])
1310: 
1311:     The next example shows the effect of the `pairing` option.  We have a
1312:     system with three poles and three zeros, so the SOS array will have
1313:     shape (2, 6).  The means there is, in effect, an extra pole and an extra
1314:     zero at the origin in the SOS representation.
1315: 
1316:     >>> z1 = np.array([-1, -0.5-0.5j, -0.5+0.5j])
1317:     >>> p1 = np.array([0.75, 0.8+0.1j, 0.8-0.1j])
1318: 
1319:     With ``pairing='nearest'`` (the default), we obtain
1320: 
1321:     >>> signal.zpk2sos(z1, p1, 1)
1322:     array([[ 1.  ,  1.  ,  0.5 ,  1.  , -0.75,  0.  ],
1323:            [ 1.  ,  1.  ,  0.  ,  1.  , -1.6 ,  0.65]])
1324: 
1325:     The first section has the zeros {-0.5-0.05j, -0.5+0.5j} and the poles
1326:     {0, 0.75}, and the second section has the zeros {-1, 0} and poles
1327:     {0.8+0.1j, 0.8-0.1j}.  Note that the extra pole and zero at the origin
1328:     have been assigned to different sections.
1329: 
1330:     With ``pairing='keep_odd'``, we obtain:
1331: 
1332:     >>> signal.zpk2sos(z1, p1, 1, pairing='keep_odd')
1333:     array([[ 1.  ,  1.  ,  0.  ,  1.  , -0.75,  0.  ],
1334:            [ 1.  ,  1.  ,  0.5 ,  1.  , -1.6 ,  0.65]])
1335: 
1336:     The extra pole and zero at the origin are in the same section.
1337:     The first section is, in effect, a first-order section.
1338: 
1339:     '''
1340:     # TODO in the near future:
1341:     # 1. Add SOS capability to `filtfilt`, `freqz`, etc. somehow (#3259).
1342:     # 2. Make `decimate` use `sosfilt` instead of `lfilter`.
1343:     # 3. Make sosfilt automatically simplify sections to first order
1344:     #    when possible. Note this might make `sosfiltfilt` a bit harder (ICs).
1345:     # 4. Further optimizations of the section ordering / pole-zero pairing.
1346:     # See the wiki for other potential issues.
1347: 
1348:     valid_pairings = ['nearest', 'keep_odd']
1349:     if pairing not in valid_pairings:
1350:         raise ValueError('pairing must be one of %s, not %s'
1351:                          % (valid_pairings, pairing))
1352:     if len(z) == len(p) == 0:
1353:         return array([[k, 0., 0., 1., 0., 0.]])
1354: 
1355:     # ensure we have the same number of poles and zeros, and make copies
1356:     p = np.concatenate((p, np.zeros(max(len(z) - len(p), 0))))
1357:     z = np.concatenate((z, np.zeros(max(len(p) - len(z), 0))))
1358:     n_sections = (max(len(p), len(z)) + 1) // 2
1359:     sos = zeros((n_sections, 6))
1360: 
1361:     if len(p) % 2 == 1 and pairing == 'nearest':
1362:         p = np.concatenate((p, [0.]))
1363:         z = np.concatenate((z, [0.]))
1364:     assert len(p) == len(z)
1365: 
1366:     # Ensure we have complex conjugate pairs
1367:     # (note that _cplxreal only gives us one element of each complex pair):
1368:     z = np.concatenate(_cplxreal(z))
1369:     p = np.concatenate(_cplxreal(p))
1370: 
1371:     p_sos = np.zeros((n_sections, 2), np.complex128)
1372:     z_sos = np.zeros_like(p_sos)
1373:     for si in range(n_sections):
1374:         # Select the next "worst" pole
1375:         p1_idx = np.argmin(np.abs(1 - np.abs(p)))
1376:         p1 = p[p1_idx]
1377:         p = np.delete(p, p1_idx)
1378: 
1379:         # Pair that pole with a zero
1380: 
1381:         if np.isreal(p1) and np.isreal(p).sum() == 0:
1382:             # Special case to set a first-order section
1383:             z1_idx = _nearest_real_complex_idx(z, p1, 'real')
1384:             z1 = z[z1_idx]
1385:             z = np.delete(z, z1_idx)
1386:             p2 = z2 = 0
1387:         else:
1388:             if not np.isreal(p1) and np.isreal(z).sum() == 1:
1389:                 # Special case to ensure we choose a complex zero to pair
1390:                 # with so later (setting up a first-order section)
1391:                 z1_idx = _nearest_real_complex_idx(z, p1, 'complex')
1392:                 assert not np.isreal(z[z1_idx])
1393:             else:
1394:                 # Pair the pole with the closest zero (real or complex)
1395:                 z1_idx = np.argmin(np.abs(p1 - z))
1396:             z1 = z[z1_idx]
1397:             z = np.delete(z, z1_idx)
1398: 
1399:             # Now that we have p1 and z1, figure out what p2 and z2 need to be
1400:             if not np.isreal(p1):
1401:                 if not np.isreal(z1):  # complex pole, complex zero
1402:                     p2 = p1.conj()
1403:                     z2 = z1.conj()
1404:                 else:  # complex pole, real zero
1405:                     p2 = p1.conj()
1406:                     z2_idx = _nearest_real_complex_idx(z, p1, 'real')
1407:                     z2 = z[z2_idx]
1408:                     assert np.isreal(z2)
1409:                     z = np.delete(z, z2_idx)
1410:             else:
1411:                 if not np.isreal(z1):  # real pole, complex zero
1412:                     z2 = z1.conj()
1413:                     p2_idx = _nearest_real_complex_idx(p, z1, 'real')
1414:                     p2 = p[p2_idx]
1415:                     assert np.isreal(p2)
1416:                 else:  # real pole, real zero
1417:                     # pick the next "worst" pole to use
1418:                     idx = np.where(np.isreal(p))[0]
1419:                     assert len(idx) > 0
1420:                     p2_idx = idx[np.argmin(np.abs(np.abs(p[idx]) - 1))]
1421:                     p2 = p[p2_idx]
1422:                     # find a real zero to match the added pole
1423:                     assert np.isreal(p2)
1424:                     z2_idx = _nearest_real_complex_idx(z, p2, 'real')
1425:                     z2 = z[z2_idx]
1426:                     assert np.isreal(z2)
1427:                     z = np.delete(z, z2_idx)
1428:                 p = np.delete(p, p2_idx)
1429:         p_sos[si] = [p1, p2]
1430:         z_sos[si] = [z1, z2]
1431:     assert len(p) == len(z) == 0  # we've consumed all poles and zeros
1432:     del p, z
1433: 
1434:     # Construct the system, reversing order so the "worst" are last
1435:     p_sos = np.reshape(p_sos[::-1], (n_sections, 2))
1436:     z_sos = np.reshape(z_sos[::-1], (n_sections, 2))
1437:     gains = np.ones(n_sections)
1438:     gains[0] = k
1439:     for si in range(n_sections):
1440:         x = zpk2tf(z_sos[si], p_sos[si], gains[si])
1441:         sos[si] = np.concatenate(x)
1442:     return sos
1443: 
1444: 
1445: def _align_nums(nums):
1446:     '''Aligns the shapes of multiple numerators.
1447: 
1448:     Given an array of numerator coefficient arrays [[a_1, a_2,...,
1449:     a_n],..., [b_1, b_2,..., b_m]], this function pads shorter numerator
1450:     arrays with zero's so that all numerators have the same length. Such
1451:     alignment is necessary for functions like 'tf2ss', which needs the
1452:     alignment when dealing with SIMO transfer functions.
1453: 
1454:     Parameters
1455:     ----------
1456:     nums: array_like
1457:         Numerator or list of numerators. Not necessarily with same length.
1458: 
1459:     Returns
1460:     -------
1461:     nums: array
1462:         The numerator. If `nums` input was a list of numerators then a 2d
1463:         array with padded zeros for shorter numerators is returned. Otherwise
1464:         returns ``np.asarray(nums)``.
1465:     '''
1466:     try:
1467:         # The statement can throw a ValueError if one
1468:         # of the numerators is a single digit and another
1469:         # is array-like e.g. if nums = [5, [1, 2, 3]]
1470:         nums = asarray(nums)
1471: 
1472:         if not np.issubdtype(nums.dtype, np.number):
1473:             raise ValueError("dtype of numerator is non-numeric")
1474: 
1475:         return nums
1476: 
1477:     except ValueError:
1478:         nums = [np.atleast_1d(num) for num in nums]
1479:         max_width = max(num.size for num in nums)
1480: 
1481:         # pre-allocate
1482:         aligned_nums = np.zeros((len(nums), max_width))
1483: 
1484:         # Create numerators with padded zeros
1485:         for index, num in enumerate(nums):
1486:             aligned_nums[index, -num.size:] = num
1487: 
1488:         return aligned_nums
1489: 
1490: 
1491: def normalize(b, a):
1492:     '''Normalize numerator/denominator of a continuous-time transfer function.
1493: 
1494:     If values of `b` are too close to 0, they are removed. In that case, a
1495:     BadCoefficients warning is emitted.
1496: 
1497:     Parameters
1498:     ----------
1499:     b: array_like
1500:         Numerator of the transfer function. Can be a 2d array to normalize
1501:         multiple transfer functions.
1502:     a: array_like
1503:         Denominator of the transfer function. At most 1d.
1504: 
1505:     Returns
1506:     -------
1507:     num: array
1508:         The numerator of the normalized transfer function. At least a 1d
1509:         array. A 2d-array if the input `num` is a 2d array.
1510:     den: 1d-array
1511:         The denominator of the normalized transfer function.
1512: 
1513:     Notes
1514:     -----
1515:     Coefficients for both the numerator and denominator should be specified in
1516:     descending exponent order (e.g., ``s^2 + 3s + 5`` would be represented as
1517:     ``[1, 3, 5]``).
1518:     '''
1519:     num, den = b, a
1520: 
1521:     den = np.atleast_1d(den)
1522:     num = np.atleast_2d(_align_nums(num))
1523: 
1524:     if den.ndim != 1:
1525:         raise ValueError("Denominator polynomial must be rank-1 array.")
1526:     if num.ndim > 2:
1527:         raise ValueError("Numerator polynomial must be rank-1 or"
1528:                          " rank-2 array.")
1529:     if np.all(den == 0):
1530:         raise ValueError("Denominator must have at least on nonzero element.")
1531: 
1532:     # Trim leading zeros in denominator, leave at least one.
1533:     den = np.trim_zeros(den, 'f')
1534: 
1535:     # Normalize transfer function
1536:     num, den = num / den[0], den / den[0]
1537: 
1538:     # Count numerator columns that are all zero
1539:     leading_zeros = 0
1540:     for col in num.T:
1541:         if np.allclose(col, 0, atol=1e-14):
1542:             leading_zeros += 1
1543:         else:
1544:             break
1545: 
1546:     # Trim leading zeros of numerator
1547:     if leading_zeros > 0:
1548:         warnings.warn("Badly conditioned filter coefficients (numerator): the "
1549:                       "results may be meaningless", BadCoefficients)
1550:         # Make sure at least one column remains
1551:         if leading_zeros == num.shape[1]:
1552:             leading_zeros -= 1
1553:         num = num[:, leading_zeros:]
1554: 
1555:     # Squeeze first dimension if singular
1556:     if num.shape[0] == 1:
1557:         num = num[0, :]
1558: 
1559:     return num, den
1560: 
1561: 
1562: def lp2lp(b, a, wo=1.0):
1563:     '''
1564:     Transform a lowpass filter prototype to a different frequency.
1565: 
1566:     Return an analog low-pass filter with cutoff frequency `wo`
1567:     from an analog low-pass filter prototype with unity cutoff frequency, in
1568:     transfer function ('ba') representation.
1569: 
1570:     '''
1571:     a, b = map(atleast_1d, (a, b))
1572:     try:
1573:         wo = float(wo)
1574:     except TypeError:
1575:         wo = float(wo[0])
1576:     d = len(a)
1577:     n = len(b)
1578:     M = max((d, n))
1579:     pwo = pow(wo, numpy.arange(M - 1, -1, -1))
1580:     start1 = max((n - d, 0))
1581:     start2 = max((d - n, 0))
1582:     b = b * pwo[start1] / pwo[start2:]
1583:     a = a * pwo[start1] / pwo[start1:]
1584:     return normalize(b, a)
1585: 
1586: 
1587: def lp2hp(b, a, wo=1.0):
1588:     '''
1589:     Transform a lowpass filter prototype to a highpass filter.
1590: 
1591:     Return an analog high-pass filter with cutoff frequency `wo`
1592:     from an analog low-pass filter prototype with unity cutoff frequency, in
1593:     transfer function ('ba') representation.
1594: 
1595:     '''
1596:     a, b = map(atleast_1d, (a, b))
1597:     try:
1598:         wo = float(wo)
1599:     except TypeError:
1600:         wo = float(wo[0])
1601:     d = len(a)
1602:     n = len(b)
1603:     if wo != 1:
1604:         pwo = pow(wo, numpy.arange(max((d, n))))
1605:     else:
1606:         pwo = numpy.ones(max((d, n)), b.dtype.char)
1607:     if d >= n:
1608:         outa = a[::-1] * pwo
1609:         outb = resize(b, (d,))
1610:         outb[n:] = 0.0
1611:         outb[:n] = b[::-1] * pwo[:n]
1612:     else:
1613:         outb = b[::-1] * pwo
1614:         outa = resize(a, (n,))
1615:         outa[d:] = 0.0
1616:         outa[:d] = a[::-1] * pwo[:d]
1617: 
1618:     return normalize(outb, outa)
1619: 
1620: 
1621: def lp2bp(b, a, wo=1.0, bw=1.0):
1622:     '''
1623:     Transform a lowpass filter prototype to a bandpass filter.
1624: 
1625:     Return an analog band-pass filter with center frequency `wo` and
1626:     bandwidth `bw` from an analog low-pass filter prototype with unity
1627:     cutoff frequency, in transfer function ('ba') representation.
1628: 
1629:     '''
1630:     a, b = map(atleast_1d, (a, b))
1631:     D = len(a) - 1
1632:     N = len(b) - 1
1633:     artype = mintypecode((a, b))
1634:     ma = max([N, D])
1635:     Np = N + ma
1636:     Dp = D + ma
1637:     bprime = numpy.zeros(Np + 1, artype)
1638:     aprime = numpy.zeros(Dp + 1, artype)
1639:     wosq = wo * wo
1640:     for j in range(Np + 1):
1641:         val = 0.0
1642:         for i in range(0, N + 1):
1643:             for k in range(0, i + 1):
1644:                 if ma - i + 2 * k == j:
1645:                     val += comb(i, k) * b[N - i] * (wosq) ** (i - k) / bw ** i
1646:         bprime[Np - j] = val
1647:     for j in range(Dp + 1):
1648:         val = 0.0
1649:         for i in range(0, D + 1):
1650:             for k in range(0, i + 1):
1651:                 if ma - i + 2 * k == j:
1652:                     val += comb(i, k) * a[D - i] * (wosq) ** (i - k) / bw ** i
1653:         aprime[Dp - j] = val
1654: 
1655:     return normalize(bprime, aprime)
1656: 
1657: 
1658: def lp2bs(b, a, wo=1.0, bw=1.0):
1659:     '''
1660:     Transform a lowpass filter prototype to a bandstop filter.
1661: 
1662:     Return an analog band-stop filter with center frequency `wo` and
1663:     bandwidth `bw` from an analog low-pass filter prototype with unity
1664:     cutoff frequency, in transfer function ('ba') representation.
1665: 
1666:     '''
1667:     a, b = map(atleast_1d, (a, b))
1668:     D = len(a) - 1
1669:     N = len(b) - 1
1670:     artype = mintypecode((a, b))
1671:     M = max([N, D])
1672:     Np = M + M
1673:     Dp = M + M
1674:     bprime = numpy.zeros(Np + 1, artype)
1675:     aprime = numpy.zeros(Dp + 1, artype)
1676:     wosq = wo * wo
1677:     for j in range(Np + 1):
1678:         val = 0.0
1679:         for i in range(0, N + 1):
1680:             for k in range(0, M - i + 1):
1681:                 if i + 2 * k == j:
1682:                     val += (comb(M - i, k) * b[N - i] *
1683:                             (wosq) ** (M - i - k) * bw ** i)
1684:         bprime[Np - j] = val
1685:     for j in range(Dp + 1):
1686:         val = 0.0
1687:         for i in range(0, D + 1):
1688:             for k in range(0, M - i + 1):
1689:                 if i + 2 * k == j:
1690:                     val += (comb(M - i, k) * a[D - i] *
1691:                             (wosq) ** (M - i - k) * bw ** i)
1692:         aprime[Dp - j] = val
1693: 
1694:     return normalize(bprime, aprime)
1695: 
1696: 
1697: def bilinear(b, a, fs=1.0):
1698:     '''Return a digital filter from an analog one using a bilinear transform.
1699: 
1700:     The bilinear transform substitutes ``(z-1) / (z+1)`` for ``s``.
1701:     '''
1702:     fs = float(fs)
1703:     a, b = map(atleast_1d, (a, b))
1704:     D = len(a) - 1
1705:     N = len(b) - 1
1706:     artype = float
1707:     M = max([N, D])
1708:     Np = M
1709:     Dp = M
1710:     bprime = numpy.zeros(Np + 1, artype)
1711:     aprime = numpy.zeros(Dp + 1, artype)
1712:     for j in range(Np + 1):
1713:         val = 0.0
1714:         for i in range(N + 1):
1715:             for k in range(i + 1):
1716:                 for l in range(M - i + 1):
1717:                     if k + l == j:
1718:                         val += (comb(i, k) * comb(M - i, l) * b[N - i] *
1719:                                 pow(2 * fs, i) * (-1) ** k)
1720:         bprime[j] = real(val)
1721:     for j in range(Dp + 1):
1722:         val = 0.0
1723:         for i in range(D + 1):
1724:             for k in range(i + 1):
1725:                 for l in range(M - i + 1):
1726:                     if k + l == j:
1727:                         val += (comb(i, k) * comb(M - i, l) * a[D - i] *
1728:                                 pow(2 * fs, i) * (-1) ** k)
1729:         aprime[j] = real(val)
1730: 
1731:     return normalize(bprime, aprime)
1732: 
1733: 
1734: def iirdesign(wp, ws, gpass, gstop, analog=False, ftype='ellip', output='ba'):
1735:     '''Complete IIR digital and analog filter design.
1736: 
1737:     Given passband and stopband frequencies and gains, construct an analog or
1738:     digital IIR filter of minimum order for a given basic type.  Return the
1739:     output in numerator, denominator ('ba'), pole-zero ('zpk') or second order
1740:     sections ('sos') form.
1741: 
1742:     Parameters
1743:     ----------
1744:     wp, ws : float
1745:         Passband and stopband edge frequencies.
1746:         For digital filters, these are normalized from 0 to 1, where 1 is the
1747:         Nyquist frequency, pi radians/sample.  (`wp` and `ws` are thus in
1748:         half-cycles / sample.)  For example:
1749: 
1750:             - Lowpass:   wp = 0.2,          ws = 0.3
1751:             - Highpass:  wp = 0.3,          ws = 0.2
1752:             - Bandpass:  wp = [0.2, 0.5],   ws = [0.1, 0.6]
1753:             - Bandstop:  wp = [0.1, 0.6],   ws = [0.2, 0.5]
1754: 
1755:         For analog filters, `wp` and `ws` are angular frequencies (e.g. rad/s).
1756: 
1757:     gpass : float
1758:         The maximum loss in the passband (dB).
1759:     gstop : float
1760:         The minimum attenuation in the stopband (dB).
1761:     analog : bool, optional
1762:         When True, return an analog filter, otherwise a digital filter is
1763:         returned.
1764:     ftype : str, optional
1765:         The type of IIR filter to design:
1766: 
1767:             - Butterworth   : 'butter'
1768:             - Chebyshev I   : 'cheby1'
1769:             - Chebyshev II  : 'cheby2'
1770:             - Cauer/elliptic: 'ellip'
1771:             - Bessel/Thomson: 'bessel'
1772: 
1773:     output : {'ba', 'zpk', 'sos'}, optional
1774:         Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or
1775:         second-order sections ('sos'). Default is 'ba'.
1776: 
1777:     Returns
1778:     -------
1779:     b, a : ndarray, ndarray
1780:         Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.
1781:         Only returned if ``output='ba'``.
1782:     z, p, k : ndarray, ndarray, float
1783:         Zeros, poles, and system gain of the IIR filter transfer
1784:         function.  Only returned if ``output='zpk'``.
1785:     sos : ndarray
1786:         Second-order sections representation of the IIR filter.
1787:         Only returned if ``output=='sos'``.
1788: 
1789:     See Also
1790:     --------
1791:     butter : Filter design using order and critical points
1792:     cheby1, cheby2, ellip, bessel
1793:     buttord : Find order and critical points from passband and stopband spec
1794:     cheb1ord, cheb2ord, ellipord
1795:     iirfilter : General filter design using order and critical frequencies
1796: 
1797:     Notes
1798:     -----
1799:     The ``'sos'`` output parameter was added in 0.16.0.
1800:     '''
1801:     try:
1802:         ordfunc = filter_dict[ftype][1]
1803:     except KeyError:
1804:         raise ValueError("Invalid IIR filter type: %s" % ftype)
1805:     except IndexError:
1806:         raise ValueError(("%s does not have order selection. Use "
1807:                           "iirfilter function.") % ftype)
1808: 
1809:     wp = atleast_1d(wp)
1810:     ws = atleast_1d(ws)
1811:     band_type = 2 * (len(wp) - 1)
1812:     band_type += 1
1813:     if wp[0] >= ws[0]:
1814:         band_type += 1
1815: 
1816:     btype = {1: 'lowpass', 2: 'highpass',
1817:              3: 'bandstop', 4: 'bandpass'}[band_type]
1818: 
1819:     N, Wn = ordfunc(wp, ws, gpass, gstop, analog=analog)
1820:     return iirfilter(N, Wn, rp=gpass, rs=gstop, analog=analog, btype=btype,
1821:                      ftype=ftype, output=output)
1822: 
1823: 
1824: def iirfilter(N, Wn, rp=None, rs=None, btype='band', analog=False,
1825:               ftype='butter', output='ba'):
1826:     '''
1827:     IIR digital and analog filter design given order and critical points.
1828: 
1829:     Design an Nth-order digital or analog filter and return the filter
1830:     coefficients.
1831: 
1832:     Parameters
1833:     ----------
1834:     N : int
1835:         The order of the filter.
1836:     Wn : array_like
1837:         A scalar or length-2 sequence giving the critical frequencies.
1838:         For digital filters, `Wn` is normalized from 0 to 1, where 1 is the
1839:         Nyquist frequency, pi radians/sample.  (`Wn` is thus in
1840:         half-cycles / sample.)
1841:         For analog filters, `Wn` is an angular frequency (e.g. rad/s).
1842:     rp : float, optional
1843:         For Chebyshev and elliptic filters, provides the maximum ripple
1844:         in the passband. (dB)
1845:     rs : float, optional
1846:         For Chebyshev and elliptic filters, provides the minimum attenuation
1847:         in the stop band. (dB)
1848:     btype : {'bandpass', 'lowpass', 'highpass', 'bandstop'}, optional
1849:         The type of filter.  Default is 'bandpass'.
1850:     analog : bool, optional
1851:         When True, return an analog filter, otherwise a digital filter is
1852:         returned.
1853:     ftype : str, optional
1854:         The type of IIR filter to design:
1855: 
1856:             - Butterworth   : 'butter'
1857:             - Chebyshev I   : 'cheby1'
1858:             - Chebyshev II  : 'cheby2'
1859:             - Cauer/elliptic: 'ellip'
1860:             - Bessel/Thomson: 'bessel'
1861: 
1862:     output : {'ba', 'zpk', 'sos'}, optional
1863:         Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or
1864:         second-order sections ('sos'). Default is 'ba'.
1865: 
1866:     Returns
1867:     -------
1868:     b, a : ndarray, ndarray
1869:         Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.
1870:         Only returned if ``output='ba'``.
1871:     z, p, k : ndarray, ndarray, float
1872:         Zeros, poles, and system gain of the IIR filter transfer
1873:         function.  Only returned if ``output='zpk'``.
1874:     sos : ndarray
1875:         Second-order sections representation of the IIR filter.
1876:         Only returned if ``output=='sos'``.
1877: 
1878:     See Also
1879:     --------
1880:     butter : Filter design using order and critical points
1881:     cheby1, cheby2, ellip, bessel
1882:     buttord : Find order and critical points from passband and stopband spec
1883:     cheb1ord, cheb2ord, ellipord
1884:     iirdesign : General filter design using passband and stopband spec
1885: 
1886:     Notes
1887:     -----
1888:     The ``'sos'`` output parameter was added in 0.16.0.
1889: 
1890:     Examples
1891:     --------
1892:     Generate a 17th-order Chebyshev II bandpass filter and plot the frequency
1893:     response:
1894: 
1895:     >>> from scipy import signal
1896:     >>> import matplotlib.pyplot as plt
1897: 
1898:     >>> b, a = signal.iirfilter(17, [50, 200], rs=60, btype='band',
1899:     ...                         analog=True, ftype='cheby2')
1900:     >>> w, h = signal.freqs(b, a, 1000)
1901:     >>> fig = plt.figure()
1902:     >>> ax = fig.add_subplot(111)
1903:     >>> ax.semilogx(w, 20 * np.log10(abs(h)))
1904:     >>> ax.set_title('Chebyshev Type II bandpass frequency response')
1905:     >>> ax.set_xlabel('Frequency [radians / second]')
1906:     >>> ax.set_ylabel('Amplitude [dB]')
1907:     >>> ax.axis((10, 1000, -100, 10))
1908:     >>> ax.grid(which='both', axis='both')
1909:     >>> plt.show()
1910: 
1911:     '''
1912:     ftype, btype, output = [x.lower() for x in (ftype, btype, output)]
1913:     Wn = asarray(Wn)
1914:     try:
1915:         btype = band_dict[btype]
1916:     except KeyError:
1917:         raise ValueError("'%s' is an invalid bandtype for filter." % btype)
1918: 
1919:     try:
1920:         typefunc = filter_dict[ftype][0]
1921:     except KeyError:
1922:         raise ValueError("'%s' is not a valid basic IIR filter." % ftype)
1923: 
1924:     if output not in ['ba', 'zpk', 'sos']:
1925:         raise ValueError("'%s' is not a valid output form." % output)
1926: 
1927:     if rp is not None and rp < 0:
1928:         raise ValueError("passband ripple (rp) must be positive")
1929: 
1930:     if rs is not None and rs < 0:
1931:         raise ValueError("stopband attenuation (rs) must be positive")
1932: 
1933:     # Get analog lowpass prototype
1934:     if typefunc == buttap:
1935:         z, p, k = typefunc(N)
1936:     elif typefunc == besselap:
1937:         z, p, k = typefunc(N, norm=bessel_norms[ftype])
1938:     elif typefunc == cheb1ap:
1939:         if rp is None:
1940:             raise ValueError("passband ripple (rp) must be provided to "
1941:                              "design a Chebyshev I filter.")
1942:         z, p, k = typefunc(N, rp)
1943:     elif typefunc == cheb2ap:
1944:         if rs is None:
1945:             raise ValueError("stopband attenuation (rs) must be provided to "
1946:                              "design an Chebyshev II filter.")
1947:         z, p, k = typefunc(N, rs)
1948:     elif typefunc == ellipap:
1949:         if rs is None or rp is None:
1950:             raise ValueError("Both rp and rs must be provided to design an "
1951:                              "elliptic filter.")
1952:         z, p, k = typefunc(N, rp, rs)
1953:     else:
1954:         raise NotImplementedError("'%s' not implemented in iirfilter." % ftype)
1955: 
1956:     # Pre-warp frequencies for digital filter design
1957:     if not analog:
1958:         if numpy.any(Wn <= 0) or numpy.any(Wn >= 1):
1959:             raise ValueError("Digital filter critical frequencies "
1960:                              "must be 0 < Wn < 1")
1961:         fs = 2.0
1962:         warped = 2 * fs * tan(pi * Wn / fs)
1963:     else:
1964:         warped = Wn
1965: 
1966:     # transform to lowpass, bandpass, highpass, or bandstop
1967:     if btype in ('lowpass', 'highpass'):
1968:         if numpy.size(Wn) != 1:
1969:             raise ValueError('Must specify a single critical frequency Wn')
1970: 
1971:         if btype == 'lowpass':
1972:             z, p, k = _zpklp2lp(z, p, k, wo=warped)
1973:         elif btype == 'highpass':
1974:             z, p, k = _zpklp2hp(z, p, k, wo=warped)
1975:     elif btype in ('bandpass', 'bandstop'):
1976:         try:
1977:             bw = warped[1] - warped[0]
1978:             wo = sqrt(warped[0] * warped[1])
1979:         except IndexError:
1980:             raise ValueError('Wn must specify start and stop frequencies')
1981: 
1982:         if btype == 'bandpass':
1983:             z, p, k = _zpklp2bp(z, p, k, wo=wo, bw=bw)
1984:         elif btype == 'bandstop':
1985:             z, p, k = _zpklp2bs(z, p, k, wo=wo, bw=bw)
1986:     else:
1987:         raise NotImplementedError("'%s' not implemented in iirfilter." % btype)
1988: 
1989:     # Find discrete equivalent if necessary
1990:     if not analog:
1991:         z, p, k = _zpkbilinear(z, p, k, fs=fs)
1992: 
1993:     # Transform to proper out type (pole-zero, state-space, numer-denom)
1994:     if output == 'zpk':
1995:         return z, p, k
1996:     elif output == 'ba':
1997:         return zpk2tf(z, p, k)
1998:     elif output == 'sos':
1999:         return zpk2sos(z, p, k)
2000: 
2001: 
2002: def _relative_degree(z, p):
2003:     '''
2004:     Return relative degree of transfer function from zeros and poles
2005:     '''
2006:     degree = len(p) - len(z)
2007:     if degree < 0:
2008:         raise ValueError("Improper transfer function. "
2009:                          "Must have at least as many poles as zeros.")
2010:     else:
2011:         return degree
2012: 
2013: 
2014: # TODO: merge these into existing functions or make public versions
2015: 
2016: def _zpkbilinear(z, p, k, fs):
2017:     '''
2018:     Return a digital filter from an analog one using a bilinear transform.
2019: 
2020:     Transform a set of poles and zeros from the analog s-plane to the digital
2021:     z-plane using Tustin's method, which substitutes ``(z-1) / (z+1)`` for
2022:     ``s``, maintaining the shape of the frequency response.
2023: 
2024:     Parameters
2025:     ----------
2026:     z : array_like
2027:         Zeros of the analog IIR filter transfer function.
2028:     p : array_like
2029:         Poles of the analog IIR filter transfer function.
2030:     k : float
2031:         System gain of the analog IIR filter transfer function.
2032:     fs : float
2033:         Sample rate, as ordinary frequency (e.g. hertz). No prewarping is
2034:         done in this function.
2035: 
2036:     Returns
2037:     -------
2038:     z : ndarray
2039:         Zeros of the transformed digital filter transfer function.
2040:     p : ndarray
2041:         Poles of the transformed digital filter transfer function.
2042:     k : float
2043:         System gain of the transformed digital filter.
2044: 
2045:     '''
2046:     z = atleast_1d(z)
2047:     p = atleast_1d(p)
2048: 
2049:     degree = _relative_degree(z, p)
2050: 
2051:     fs2 = 2.0*fs
2052: 
2053:     # Bilinear transform the poles and zeros
2054:     z_z = (fs2 + z) / (fs2 - z)
2055:     p_z = (fs2 + p) / (fs2 - p)
2056: 
2057:     # Any zeros that were at infinity get moved to the Nyquist frequency
2058:     z_z = append(z_z, -ones(degree))
2059: 
2060:     # Compensate for gain change
2061:     k_z = k * real(prod(fs2 - z) / prod(fs2 - p))
2062: 
2063:     return z_z, p_z, k_z
2064: 
2065: 
2066: def _zpklp2lp(z, p, k, wo=1.0):
2067:     r'''
2068:     Transform a lowpass filter prototype to a different frequency.
2069: 
2070:     Return an analog low-pass filter with cutoff frequency `wo`
2071:     from an analog low-pass filter prototype with unity cutoff frequency,
2072:     using zeros, poles, and gain ('zpk') representation.
2073: 
2074:     Parameters
2075:     ----------
2076:     z : array_like
2077:         Zeros of the analog IIR filter transfer function.
2078:     p : array_like
2079:         Poles of the analog IIR filter transfer function.
2080:     k : float
2081:         System gain of the analog IIR filter transfer function.
2082:     wo : float
2083:         Desired cutoff, as angular frequency (e.g. rad/s).
2084:         Defaults to no change.
2085: 
2086:     Returns
2087:     -------
2088:     z : ndarray
2089:         Zeros of the transformed low-pass filter transfer function.
2090:     p : ndarray
2091:         Poles of the transformed low-pass filter transfer function.
2092:     k : float
2093:         System gain of the transformed low-pass filter.
2094: 
2095:     Notes
2096:     -----
2097:     This is derived from the s-plane substitution
2098: 
2099:     .. math:: s \rightarrow \frac{s}{\omega_0}
2100: 
2101:     '''
2102:     z = atleast_1d(z)
2103:     p = atleast_1d(p)
2104:     wo = float(wo)  # Avoid int wraparound
2105: 
2106:     degree = _relative_degree(z, p)
2107: 
2108:     # Scale all points radially from origin to shift cutoff frequency
2109:     z_lp = wo * z
2110:     p_lp = wo * p
2111: 
2112:     # Each shifted pole decreases gain by wo, each shifted zero increases it.
2113:     # Cancel out the net change to keep overall gain the same
2114:     k_lp = k * wo**degree
2115: 
2116:     return z_lp, p_lp, k_lp
2117: 
2118: 
2119: def _zpklp2hp(z, p, k, wo=1.0):
2120:     r'''
2121:     Transform a lowpass filter prototype to a highpass filter.
2122: 
2123:     Return an analog high-pass filter with cutoff frequency `wo`
2124:     from an analog low-pass filter prototype with unity cutoff frequency,
2125:     using zeros, poles, and gain ('zpk') representation.
2126: 
2127:     Parameters
2128:     ----------
2129:     z : array_like
2130:         Zeros of the analog IIR filter transfer function.
2131:     p : array_like
2132:         Poles of the analog IIR filter transfer function.
2133:     k : float
2134:         System gain of the analog IIR filter transfer function.
2135:     wo : float
2136:         Desired cutoff, as angular frequency (e.g. rad/s).
2137:         Defaults to no change.
2138: 
2139:     Returns
2140:     -------
2141:     z : ndarray
2142:         Zeros of the transformed high-pass filter transfer function.
2143:     p : ndarray
2144:         Poles of the transformed high-pass filter transfer function.
2145:     k : float
2146:         System gain of the transformed high-pass filter.
2147: 
2148:     Notes
2149:     -----
2150:     This is derived from the s-plane substitution
2151: 
2152:     .. math:: s \rightarrow \frac{\omega_0}{s}
2153: 
2154:     This maintains symmetry of the lowpass and highpass responses on a
2155:     logarithmic scale.
2156: 
2157:     '''
2158:     z = atleast_1d(z)
2159:     p = atleast_1d(p)
2160:     wo = float(wo)
2161: 
2162:     degree = _relative_degree(z, p)
2163: 
2164:     # Invert positions radially about unit circle to convert LPF to HPF
2165:     # Scale all points radially from origin to shift cutoff frequency
2166:     z_hp = wo / z
2167:     p_hp = wo / p
2168: 
2169:     # If lowpass had zeros at infinity, inverting moves them to origin.
2170:     z_hp = append(z_hp, zeros(degree))
2171: 
2172:     # Cancel out gain change caused by inversion
2173:     k_hp = k * real(prod(-z) / prod(-p))
2174: 
2175:     return z_hp, p_hp, k_hp
2176: 
2177: 
2178: def _zpklp2bp(z, p, k, wo=1.0, bw=1.0):
2179:     r'''
2180:     Transform a lowpass filter prototype to a bandpass filter.
2181: 
2182:     Return an analog band-pass filter with center frequency `wo` and
2183:     bandwidth `bw` from an analog low-pass filter prototype with unity
2184:     cutoff frequency, using zeros, poles, and gain ('zpk') representation.
2185: 
2186:     Parameters
2187:     ----------
2188:     z : array_like
2189:         Zeros of the analog IIR filter transfer function.
2190:     p : array_like
2191:         Poles of the analog IIR filter transfer function.
2192:     k : float
2193:         System gain of the analog IIR filter transfer function.
2194:     wo : float
2195:         Desired passband center, as angular frequency (e.g. rad/s).
2196:         Defaults to no change.
2197:     bw : float
2198:         Desired passband width, as angular frequency (e.g. rad/s).
2199:         Defaults to 1.
2200: 
2201:     Returns
2202:     -------
2203:     z : ndarray
2204:         Zeros of the transformed band-pass filter transfer function.
2205:     p : ndarray
2206:         Poles of the transformed band-pass filter transfer function.
2207:     k : float
2208:         System gain of the transformed band-pass filter.
2209: 
2210:     Notes
2211:     -----
2212:     This is derived from the s-plane substitution
2213: 
2214:     .. math:: s \rightarrow \frac{s^2 + {\omega_0}^2}{s \cdot \mathrm{BW}}
2215: 
2216:     This is the "wideband" transformation, producing a passband with
2217:     geometric (log frequency) symmetry about `wo`.
2218: 
2219:     '''
2220:     z = atleast_1d(z)
2221:     p = atleast_1d(p)
2222:     wo = float(wo)
2223:     bw = float(bw)
2224: 
2225:     degree = _relative_degree(z, p)
2226: 
2227:     # Scale poles and zeros to desired bandwidth
2228:     z_lp = z * bw/2
2229:     p_lp = p * bw/2
2230: 
2231:     # Square root needs to produce complex result, not NaN
2232:     z_lp = z_lp.astype(complex)
2233:     p_lp = p_lp.astype(complex)
2234: 
2235:     # Duplicate poles and zeros and shift from baseband to +wo and -wo
2236:     z_bp = concatenate((z_lp + sqrt(z_lp**2 - wo**2),
2237:                         z_lp - sqrt(z_lp**2 - wo**2)))
2238:     p_bp = concatenate((p_lp + sqrt(p_lp**2 - wo**2),
2239:                         p_lp - sqrt(p_lp**2 - wo**2)))
2240: 
2241:     # Move degree zeros to origin, leaving degree zeros at infinity for BPF
2242:     z_bp = append(z_bp, zeros(degree))
2243: 
2244:     # Cancel out gain change from frequency scaling
2245:     k_bp = k * bw**degree
2246: 
2247:     return z_bp, p_bp, k_bp
2248: 
2249: 
2250: def _zpklp2bs(z, p, k, wo=1.0, bw=1.0):
2251:     r'''
2252:     Transform a lowpass filter prototype to a bandstop filter.
2253: 
2254:     Return an analog band-stop filter with center frequency `wo` and
2255:     stopband width `bw` from an analog low-pass filter prototype with unity
2256:     cutoff frequency, using zeros, poles, and gain ('zpk') representation.
2257: 
2258:     Parameters
2259:     ----------
2260:     z : array_like
2261:         Zeros of the analog IIR filter transfer function.
2262:     p : array_like
2263:         Poles of the analog IIR filter transfer function.
2264:     k : float
2265:         System gain of the analog IIR filter transfer function.
2266:     wo : float
2267:         Desired stopband center, as angular frequency (e.g. rad/s).
2268:         Defaults to no change.
2269:     bw : float
2270:         Desired stopband width, as angular frequency (e.g. rad/s).
2271:         Defaults to 1.
2272: 
2273:     Returns
2274:     -------
2275:     z : ndarray
2276:         Zeros of the transformed band-stop filter transfer function.
2277:     p : ndarray
2278:         Poles of the transformed band-stop filter transfer function.
2279:     k : float
2280:         System gain of the transformed band-stop filter.
2281: 
2282:     Notes
2283:     -----
2284:     This is derived from the s-plane substitution
2285: 
2286:     .. math:: s \rightarrow \frac{s \cdot \mathrm{BW}}{s^2 + {\omega_0}^2}
2287: 
2288:     This is the "wideband" transformation, producing a stopband with
2289:     geometric (log frequency) symmetry about `wo`.
2290: 
2291:     '''
2292:     z = atleast_1d(z)
2293:     p = atleast_1d(p)
2294:     wo = float(wo)
2295:     bw = float(bw)
2296: 
2297:     degree = _relative_degree(z, p)
2298: 
2299:     # Invert to a highpass filter with desired bandwidth
2300:     z_hp = (bw/2) / z
2301:     p_hp = (bw/2) / p
2302: 
2303:     # Square root needs to produce complex result, not NaN
2304:     z_hp = z_hp.astype(complex)
2305:     p_hp = p_hp.astype(complex)
2306: 
2307:     # Duplicate poles and zeros and shift from baseband to +wo and -wo
2308:     z_bs = concatenate((z_hp + sqrt(z_hp**2 - wo**2),
2309:                         z_hp - sqrt(z_hp**2 - wo**2)))
2310:     p_bs = concatenate((p_hp + sqrt(p_hp**2 - wo**2),
2311:                         p_hp - sqrt(p_hp**2 - wo**2)))
2312: 
2313:     # Move any zeros that were at infinity to the center of the stopband
2314:     z_bs = append(z_bs, +1j*wo * ones(degree))
2315:     z_bs = append(z_bs, -1j*wo * ones(degree))
2316: 
2317:     # Cancel out gain change caused by inversion
2318:     k_bs = k * real(prod(-z) / prod(-p))
2319: 
2320:     return z_bs, p_bs, k_bs
2321: 
2322: 
2323: def butter(N, Wn, btype='low', analog=False, output='ba'):
2324:     '''
2325:     Butterworth digital and analog filter design.
2326: 
2327:     Design an Nth-order digital or analog Butterworth filter and return
2328:     the filter coefficients.
2329: 
2330:     Parameters
2331:     ----------
2332:     N : int
2333:         The order of the filter.
2334:     Wn : array_like
2335:         A scalar or length-2 sequence giving the critical frequencies.
2336:         For a Butterworth filter, this is the point at which the gain
2337:         drops to 1/sqrt(2) that of the passband (the "-3 dB point").
2338:         For digital filters, `Wn` is normalized from 0 to 1, where 1 is the
2339:         Nyquist frequency, pi radians/sample.  (`Wn` is thus in
2340:         half-cycles / sample.)
2341:         For analog filters, `Wn` is an angular frequency (e.g. rad/s).
2342:     btype : {'lowpass', 'highpass', 'bandpass', 'bandstop'}, optional
2343:         The type of filter.  Default is 'lowpass'.
2344:     analog : bool, optional
2345:         When True, return an analog filter, otherwise a digital filter is
2346:         returned.
2347:     output : {'ba', 'zpk', 'sos'}, optional
2348:         Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or
2349:         second-order sections ('sos'). Default is 'ba'.
2350: 
2351:     Returns
2352:     -------
2353:     b, a : ndarray, ndarray
2354:         Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.
2355:         Only returned if ``output='ba'``.
2356:     z, p, k : ndarray, ndarray, float
2357:         Zeros, poles, and system gain of the IIR filter transfer
2358:         function.  Only returned if ``output='zpk'``.
2359:     sos : ndarray
2360:         Second-order sections representation of the IIR filter.
2361:         Only returned if ``output=='sos'``.
2362: 
2363:     See Also
2364:     --------
2365:     buttord, buttap
2366: 
2367:     Notes
2368:     -----
2369:     The Butterworth filter has maximally flat frequency response in the
2370:     passband.
2371: 
2372:     The ``'sos'`` output parameter was added in 0.16.0.
2373: 
2374:     Examples
2375:     --------
2376:     Plot the filter's frequency response, showing the critical points:
2377: 
2378:     >>> from scipy import signal
2379:     >>> import matplotlib.pyplot as plt
2380: 
2381:     >>> b, a = signal.butter(4, 100, 'low', analog=True)
2382:     >>> w, h = signal.freqs(b, a)
2383:     >>> plt.semilogx(w, 20 * np.log10(abs(h)))
2384:     >>> plt.title('Butterworth filter frequency response')
2385:     >>> plt.xlabel('Frequency [radians / second]')
2386:     >>> plt.ylabel('Amplitude [dB]')
2387:     >>> plt.margins(0, 0.1)
2388:     >>> plt.grid(which='both', axis='both')
2389:     >>> plt.axvline(100, color='green') # cutoff frequency
2390:     >>> plt.show()
2391: 
2392:     '''
2393:     return iirfilter(N, Wn, btype=btype, analog=analog,
2394:                      output=output, ftype='butter')
2395: 
2396: 
2397: def cheby1(N, rp, Wn, btype='low', analog=False, output='ba'):
2398:     '''
2399:     Chebyshev type I digital and analog filter design.
2400: 
2401:     Design an Nth-order digital or analog Chebyshev type I filter and
2402:     return the filter coefficients.
2403: 
2404:     Parameters
2405:     ----------
2406:     N : int
2407:         The order of the filter.
2408:     rp : float
2409:         The maximum ripple allowed below unity gain in the passband.
2410:         Specified in decibels, as a positive number.
2411:     Wn : array_like
2412:         A scalar or length-2 sequence giving the critical frequencies.
2413:         For Type I filters, this is the point in the transition band at which
2414:         the gain first drops below -`rp`.
2415:         For digital filters, `Wn` is normalized from 0 to 1, where 1 is the
2416:         Nyquist frequency, pi radians/sample.  (`Wn` is thus in
2417:         half-cycles / sample.)
2418:         For analog filters, `Wn` is an angular frequency (e.g. rad/s).
2419:     btype : {'lowpass', 'highpass', 'bandpass', 'bandstop'}, optional
2420:         The type of filter.  Default is 'lowpass'.
2421:     analog : bool, optional
2422:         When True, return an analog filter, otherwise a digital filter is
2423:         returned.
2424:     output : {'ba', 'zpk', 'sos'}, optional
2425:         Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or
2426:         second-order sections ('sos'). Default is 'ba'.
2427: 
2428:     Returns
2429:     -------
2430:     b, a : ndarray, ndarray
2431:         Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.
2432:         Only returned if ``output='ba'``.
2433:     z, p, k : ndarray, ndarray, float
2434:         Zeros, poles, and system gain of the IIR filter transfer
2435:         function.  Only returned if ``output='zpk'``.
2436:     sos : ndarray
2437:         Second-order sections representation of the IIR filter.
2438:         Only returned if ``output=='sos'``.
2439: 
2440:     See Also
2441:     --------
2442:     cheb1ord, cheb1ap
2443: 
2444:     Notes
2445:     -----
2446:     The Chebyshev type I filter maximizes the rate of cutoff between the
2447:     frequency response's passband and stopband, at the expense of ripple in
2448:     the passband and increased ringing in the step response.
2449: 
2450:     Type I filters roll off faster than Type II (`cheby2`), but Type II
2451:     filters do not have any ripple in the passband.
2452: 
2453:     The equiripple passband has N maxima or minima (for example, a
2454:     5th-order filter has 3 maxima and 2 minima).  Consequently, the DC gain is
2455:     unity for odd-order filters, or -rp dB for even-order filters.
2456: 
2457:     The ``'sos'`` output parameter was added in 0.16.0.
2458: 
2459:     Examples
2460:     --------
2461:     Plot the filter's frequency response, showing the critical points:
2462: 
2463:     >>> from scipy import signal
2464:     >>> import matplotlib.pyplot as plt
2465: 
2466:     >>> b, a = signal.cheby1(4, 5, 100, 'low', analog=True)
2467:     >>> w, h = signal.freqs(b, a)
2468:     >>> plt.semilogx(w, 20 * np.log10(abs(h)))
2469:     >>> plt.title('Chebyshev Type I frequency response (rp=5)')
2470:     >>> plt.xlabel('Frequency [radians / second]')
2471:     >>> plt.ylabel('Amplitude [dB]')
2472:     >>> plt.margins(0, 0.1)
2473:     >>> plt.grid(which='both', axis='both')
2474:     >>> plt.axvline(100, color='green') # cutoff frequency
2475:     >>> plt.axhline(-5, color='green') # rp
2476:     >>> plt.show()
2477: 
2478:     '''
2479:     return iirfilter(N, Wn, rp=rp, btype=btype, analog=analog,
2480:                      output=output, ftype='cheby1')
2481: 
2482: 
2483: def cheby2(N, rs, Wn, btype='low', analog=False, output='ba'):
2484:     '''
2485:     Chebyshev type II digital and analog filter design.
2486: 
2487:     Design an Nth-order digital or analog Chebyshev type II filter and
2488:     return the filter coefficients.
2489: 
2490:     Parameters
2491:     ----------
2492:     N : int
2493:         The order of the filter.
2494:     rs : float
2495:         The minimum attenuation required in the stop band.
2496:         Specified in decibels, as a positive number.
2497:     Wn : array_like
2498:         A scalar or length-2 sequence giving the critical frequencies.
2499:         For Type II filters, this is the point in the transition band at which
2500:         the gain first reaches -`rs`.
2501:         For digital filters, `Wn` is normalized from 0 to 1, where 1 is the
2502:         Nyquist frequency, pi radians/sample.  (`Wn` is thus in
2503:         half-cycles / sample.)
2504:         For analog filters, `Wn` is an angular frequency (e.g. rad/s).
2505:     btype : {'lowpass', 'highpass', 'bandpass', 'bandstop'}, optional
2506:         The type of filter.  Default is 'lowpass'.
2507:     analog : bool, optional
2508:         When True, return an analog filter, otherwise a digital filter is
2509:         returned.
2510:     output : {'ba', 'zpk', 'sos'}, optional
2511:         Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or
2512:         second-order sections ('sos'). Default is 'ba'.
2513: 
2514:     Returns
2515:     -------
2516:     b, a : ndarray, ndarray
2517:         Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.
2518:         Only returned if ``output='ba'``.
2519:     z, p, k : ndarray, ndarray, float
2520:         Zeros, poles, and system gain of the IIR filter transfer
2521:         function.  Only returned if ``output='zpk'``.
2522:     sos : ndarray
2523:         Second-order sections representation of the IIR filter.
2524:         Only returned if ``output=='sos'``.
2525: 
2526:     See Also
2527:     --------
2528:     cheb2ord, cheb2ap
2529: 
2530:     Notes
2531:     -----
2532:     The Chebyshev type II filter maximizes the rate of cutoff between the
2533:     frequency response's passband and stopband, at the expense of ripple in
2534:     the stopband and increased ringing in the step response.
2535: 
2536:     Type II filters do not roll off as fast as Type I (`cheby1`).
2537: 
2538:     The ``'sos'`` output parameter was added in 0.16.0.
2539: 
2540:     Examples
2541:     --------
2542:     Plot the filter's frequency response, showing the critical points:
2543: 
2544:     >>> from scipy import signal
2545:     >>> import matplotlib.pyplot as plt
2546: 
2547:     >>> b, a = signal.cheby2(4, 40, 100, 'low', analog=True)
2548:     >>> w, h = signal.freqs(b, a)
2549:     >>> plt.semilogx(w, 20 * np.log10(abs(h)))
2550:     >>> plt.title('Chebyshev Type II frequency response (rs=40)')
2551:     >>> plt.xlabel('Frequency [radians / second]')
2552:     >>> plt.ylabel('Amplitude [dB]')
2553:     >>> plt.margins(0, 0.1)
2554:     >>> plt.grid(which='both', axis='both')
2555:     >>> plt.axvline(100, color='green') # cutoff frequency
2556:     >>> plt.axhline(-40, color='green') # rs
2557:     >>> plt.show()
2558: 
2559:     '''
2560:     return iirfilter(N, Wn, rs=rs, btype=btype, analog=analog,
2561:                      output=output, ftype='cheby2')
2562: 
2563: 
2564: def ellip(N, rp, rs, Wn, btype='low', analog=False, output='ba'):
2565:     '''
2566:     Elliptic (Cauer) digital and analog filter design.
2567: 
2568:     Design an Nth-order digital or analog elliptic filter and return
2569:     the filter coefficients.
2570: 
2571:     Parameters
2572:     ----------
2573:     N : int
2574:         The order of the filter.
2575:     rp : float
2576:         The maximum ripple allowed below unity gain in the passband.
2577:         Specified in decibels, as a positive number.
2578:     rs : float
2579:         The minimum attenuation required in the stop band.
2580:         Specified in decibels, as a positive number.
2581:     Wn : array_like
2582:         A scalar or length-2 sequence giving the critical frequencies.
2583:         For elliptic filters, this is the point in the transition band at
2584:         which the gain first drops below -`rp`.
2585:         For digital filters, `Wn` is normalized from 0 to 1, where 1 is the
2586:         Nyquist frequency, pi radians/sample.  (`Wn` is thus in
2587:         half-cycles / sample.)
2588:         For analog filters, `Wn` is an angular frequency (e.g. rad/s).
2589:     btype : {'lowpass', 'highpass', 'bandpass', 'bandstop'}, optional
2590:         The type of filter.  Default is 'lowpass'.
2591:     analog : bool, optional
2592:         When True, return an analog filter, otherwise a digital filter is
2593:         returned.
2594:     output : {'ba', 'zpk', 'sos'}, optional
2595:         Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or
2596:         second-order sections ('sos'). Default is 'ba'.
2597: 
2598:     Returns
2599:     -------
2600:     b, a : ndarray, ndarray
2601:         Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.
2602:         Only returned if ``output='ba'``.
2603:     z, p, k : ndarray, ndarray, float
2604:         Zeros, poles, and system gain of the IIR filter transfer
2605:         function.  Only returned if ``output='zpk'``.
2606:     sos : ndarray
2607:         Second-order sections representation of the IIR filter.
2608:         Only returned if ``output=='sos'``.
2609: 
2610:     See Also
2611:     --------
2612:     ellipord, ellipap
2613: 
2614:     Notes
2615:     -----
2616:     Also known as Cauer or Zolotarev filters, the elliptical filter maximizes
2617:     the rate of transition between the frequency response's passband and
2618:     stopband, at the expense of ripple in both, and increased ringing in the
2619:     step response.
2620: 
2621:     As `rp` approaches 0, the elliptical filter becomes a Chebyshev
2622:     type II filter (`cheby2`).  As `rs` approaches 0, it becomes a Chebyshev
2623:     type I filter (`cheby1`).  As both approach 0, it becomes a Butterworth
2624:     filter (`butter`).
2625: 
2626:     The equiripple passband has N maxima or minima (for example, a
2627:     5th-order filter has 3 maxima and 2 minima).  Consequently, the DC gain is
2628:     unity for odd-order filters, or -rp dB for even-order filters.
2629: 
2630:     The ``'sos'`` output parameter was added in 0.16.0.
2631: 
2632:     Examples
2633:     --------
2634:     Plot the filter's frequency response, showing the critical points:
2635: 
2636:     >>> from scipy import signal
2637:     >>> import matplotlib.pyplot as plt
2638: 
2639:     >>> b, a = signal.ellip(4, 5, 40, 100, 'low', analog=True)
2640:     >>> w, h = signal.freqs(b, a)
2641:     >>> plt.semilogx(w, 20 * np.log10(abs(h)))
2642:     >>> plt.title('Elliptic filter frequency response (rp=5, rs=40)')
2643:     >>> plt.xlabel('Frequency [radians / second]')
2644:     >>> plt.ylabel('Amplitude [dB]')
2645:     >>> plt.margins(0, 0.1)
2646:     >>> plt.grid(which='both', axis='both')
2647:     >>> plt.axvline(100, color='green') # cutoff frequency
2648:     >>> plt.axhline(-40, color='green') # rs
2649:     >>> plt.axhline(-5, color='green') # rp
2650:     >>> plt.show()
2651: 
2652:     '''
2653:     return iirfilter(N, Wn, rs=rs, rp=rp, btype=btype, analog=analog,
2654:                      output=output, ftype='elliptic')
2655: 
2656: 
2657: def bessel(N, Wn, btype='low', analog=False, output='ba', norm='phase'):
2658:     '''
2659:     Bessel/Thomson digital and analog filter design.
2660: 
2661:     Design an Nth-order digital or analog Bessel filter and return the
2662:     filter coefficients.
2663: 
2664:     Parameters
2665:     ----------
2666:     N : int
2667:         The order of the filter.
2668:     Wn : array_like
2669:         A scalar or length-2 sequence giving the critical frequencies (defined
2670:         by the `norm` parameter).
2671:         For analog filters, `Wn` is an angular frequency (e.g. rad/s).
2672:         For digital filters, `Wn` is normalized from 0 to 1, where 1 is the
2673:         Nyquist frequency, pi radians/sample.  (`Wn` is thus in
2674:         half-cycles / sample.)
2675:     btype : {'lowpass', 'highpass', 'bandpass', 'bandstop'}, optional
2676:         The type of filter.  Default is 'lowpass'.
2677:     analog : bool, optional
2678:         When True, return an analog filter, otherwise a digital filter is
2679:         returned.  (See Notes.)
2680:     output : {'ba', 'zpk', 'sos'}, optional
2681:         Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or
2682:         second-order sections ('sos'). Default is 'ba'.
2683:     norm : {'phase', 'delay', 'mag'}, optional
2684:         Critical frequency normalization:
2685: 
2686:         ``phase``
2687:             The filter is normalized such that the phase response reaches its
2688:             midpoint at angular (e.g. rad/s) frequency `Wn`.  This happens for
2689:             both low-pass and high-pass filters, so this is the
2690:             "phase-matched" case.
2691: 
2692:             The magnitude response asymptotes are the same as a Butterworth
2693:             filter of the same order with a cutoff of `Wn`.
2694: 
2695:             This is the default, and matches MATLAB's implementation.
2696: 
2697:         ``delay``
2698:             The filter is normalized such that the group delay in the passband
2699:             is 1/`Wn` (e.g. seconds).  This is the "natural" type obtained by
2700:             solving Bessel polynomials.
2701: 
2702:         ``mag``
2703:             The filter is normalized such that the gain magnitude is -3 dB at
2704:             angular frequency `Wn`.
2705: 
2706:         .. versionadded:: 0.18.0
2707: 
2708:     Returns
2709:     -------
2710:     b, a : ndarray, ndarray
2711:         Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.
2712:         Only returned if ``output='ba'``.
2713:     z, p, k : ndarray, ndarray, float
2714:         Zeros, poles, and system gain of the IIR filter transfer
2715:         function.  Only returned if ``output='zpk'``.
2716:     sos : ndarray
2717:         Second-order sections representation of the IIR filter.
2718:         Only returned if ``output=='sos'``.
2719: 
2720:     Notes
2721:     -----
2722:     Also known as a Thomson filter, the analog Bessel filter has maximally
2723:     flat group delay and maximally linear phase response, with very little
2724:     ringing in the step response. [1]_
2725: 
2726:     The Bessel is inherently an analog filter.  This function generates digital
2727:     Bessel filters using the bilinear transform, which does not preserve the
2728:     phase response of the analog filter.  As such, it is only approximately
2729:     correct at frequencies below about fs/4.  To get maximally-flat group
2730:     delay at higher frequencies, the analog Bessel filter must be transformed
2731:     using phase-preserving techniques.
2732: 
2733:     See `besselap` for implementation details and references.
2734: 
2735:     The ``'sos'`` output parameter was added in 0.16.0.
2736: 
2737:     Examples
2738:     --------
2739:     Plot the phase-normalized frequency response, showing the relationship
2740:     to the Butterworth's cutoff frequency (green):
2741: 
2742:     >>> from scipy import signal
2743:     >>> import matplotlib.pyplot as plt
2744: 
2745:     >>> b, a = signal.butter(4, 100, 'low', analog=True)
2746:     >>> w, h = signal.freqs(b, a)
2747:     >>> plt.semilogx(w, 20 * np.log10(np.abs(h)), color='silver', ls='dashed')
2748:     >>> b, a = signal.bessel(4, 100, 'low', analog=True, norm='phase')
2749:     >>> w, h = signal.freqs(b, a)
2750:     >>> plt.semilogx(w, 20 * np.log10(np.abs(h)))
2751:     >>> plt.title('Bessel filter magnitude response (with Butterworth)')
2752:     >>> plt.xlabel('Frequency [radians / second]')
2753:     >>> plt.ylabel('Amplitude [dB]')
2754:     >>> plt.margins(0, 0.1)
2755:     >>> plt.grid(which='both', axis='both')
2756:     >>> plt.axvline(100, color='green')  # cutoff frequency
2757:     >>> plt.show()
2758: 
2759:     and the phase midpoint:
2760: 
2761:     >>> plt.figure()
2762:     >>> plt.semilogx(w, np.unwrap(np.angle(h)))
2763:     >>> plt.axvline(100, color='green')  # cutoff frequency
2764:     >>> plt.axhline(-np.pi, color='red')  # phase midpoint
2765:     >>> plt.title('Bessel filter phase response')
2766:     >>> plt.xlabel('Frequency [radians / second]')
2767:     >>> plt.ylabel('Phase [radians]')
2768:     >>> plt.margins(0, 0.1)
2769:     >>> plt.grid(which='both', axis='both')
2770:     >>> plt.show()
2771: 
2772:     Plot the magnitude-normalized frequency response, showing the -3 dB cutoff:
2773: 
2774:     >>> b, a = signal.bessel(3, 10, 'low', analog=True, norm='mag')
2775:     >>> w, h = signal.freqs(b, a)
2776:     >>> plt.semilogx(w, 20 * np.log10(np.abs(h)))
2777:     >>> plt.axhline(-3, color='red')  # -3 dB magnitude
2778:     >>> plt.axvline(10, color='green')  # cutoff frequency
2779:     >>> plt.title('Magnitude-normalized Bessel filter frequency response')
2780:     >>> plt.xlabel('Frequency [radians / second]')
2781:     >>> plt.ylabel('Amplitude [dB]')
2782:     >>> plt.margins(0, 0.1)
2783:     >>> plt.grid(which='both', axis='both')
2784:     >>> plt.show()
2785: 
2786:     Plot the delay-normalized filter, showing the maximally-flat group delay
2787:     at 0.1 seconds:
2788: 
2789:     >>> b, a = signal.bessel(5, 1/0.1, 'low', analog=True, norm='delay')
2790:     >>> w, h = signal.freqs(b, a)
2791:     >>> plt.figure()
2792:     >>> plt.semilogx(w[1:], -np.diff(np.unwrap(np.angle(h)))/np.diff(w))
2793:     >>> plt.axhline(0.1, color='red')  # 0.1 seconds group delay
2794:     >>> plt.title('Bessel filter group delay')
2795:     >>> plt.xlabel('Frequency [radians / second]')
2796:     >>> plt.ylabel('Group delay [seconds]')
2797:     >>> plt.margins(0, 0.1)
2798:     >>> plt.grid(which='both', axis='both')
2799:     >>> plt.show()
2800: 
2801:     References
2802:     ----------
2803:     .. [1] Thomson, W.E., "Delay Networks having Maximally Flat Frequency
2804:            Characteristics", Proceedings of the Institution of Electrical
2805:            Engineers, Part III, November 1949, Vol. 96, No. 44, pp. 487-490.
2806: 
2807:     '''
2808:     return iirfilter(N, Wn, btype=btype, analog=analog,
2809:                      output=output, ftype='bessel_'+norm)
2810: 
2811: 
2812: def maxflat():
2813:     pass
2814: 
2815: 
2816: def yulewalk():
2817:     pass
2818: 
2819: 
2820: def band_stop_obj(wp, ind, passb, stopb, gpass, gstop, type):
2821:     '''
2822:     Band Stop Objective Function for order minimization.
2823: 
2824:     Returns the non-integer order for an analog band stop filter.
2825: 
2826:     Parameters
2827:     ----------
2828:     wp : scalar
2829:         Edge of passband `passb`.
2830:     ind : int, {0, 1}
2831:         Index specifying which `passb` edge to vary (0 or 1).
2832:     passb : ndarray
2833:         Two element sequence of fixed passband edges.
2834:     stopb : ndarray
2835:         Two element sequence of fixed stopband edges.
2836:     gstop : float
2837:         Amount of attenuation in stopband in dB.
2838:     gpass : float
2839:         Amount of ripple in the passband in dB.
2840:     type : {'butter', 'cheby', 'ellip'}
2841:         Type of filter.
2842: 
2843:     Returns
2844:     -------
2845:     n : scalar
2846:         Filter order (possibly non-integer).
2847: 
2848:     '''
2849:     passbC = passb.copy()
2850:     passbC[ind] = wp
2851:     nat = (stopb * (passbC[0] - passbC[1]) /
2852:            (stopb ** 2 - passbC[0] * passbC[1]))
2853:     nat = min(abs(nat))
2854: 
2855:     if type == 'butter':
2856:         GSTOP = 10 ** (0.1 * abs(gstop))
2857:         GPASS = 10 ** (0.1 * abs(gpass))
2858:         n = (log10((GSTOP - 1.0) / (GPASS - 1.0)) / (2 * log10(nat)))
2859:     elif type == 'cheby':
2860:         GSTOP = 10 ** (0.1 * abs(gstop))
2861:         GPASS = 10 ** (0.1 * abs(gpass))
2862:         n = arccosh(sqrt((GSTOP - 1.0) / (GPASS - 1.0))) / arccosh(nat)
2863:     elif type == 'ellip':
2864:         GSTOP = 10 ** (0.1 * gstop)
2865:         GPASS = 10 ** (0.1 * gpass)
2866:         arg1 = sqrt((GPASS - 1.0) / (GSTOP - 1.0))
2867:         arg0 = 1.0 / nat
2868:         d0 = special.ellipk([arg0 ** 2, 1 - arg0 ** 2])
2869:         d1 = special.ellipk([arg1 ** 2, 1 - arg1 ** 2])
2870:         n = (d0[0] * d1[1] / (d0[1] * d1[0]))
2871:     else:
2872:         raise ValueError("Incorrect type: %s" % type)
2873:     return n
2874: 
2875: 
2876: def buttord(wp, ws, gpass, gstop, analog=False):
2877:     '''Butterworth filter order selection.
2878: 
2879:     Return the order of the lowest order digital or analog Butterworth filter
2880:     that loses no more than `gpass` dB in the passband and has at least
2881:     `gstop` dB attenuation in the stopband.
2882: 
2883:     Parameters
2884:     ----------
2885:     wp, ws : float
2886:         Passband and stopband edge frequencies.
2887:         For digital filters, these are normalized from 0 to 1, where 1 is the
2888:         Nyquist frequency, pi radians/sample.  (`wp` and `ws` are thus in
2889:         half-cycles / sample.)  For example:
2890: 
2891:             - Lowpass:   wp = 0.2,          ws = 0.3
2892:             - Highpass:  wp = 0.3,          ws = 0.2
2893:             - Bandpass:  wp = [0.2, 0.5],   ws = [0.1, 0.6]
2894:             - Bandstop:  wp = [0.1, 0.6],   ws = [0.2, 0.5]
2895: 
2896:         For analog filters, `wp` and `ws` are angular frequencies (e.g. rad/s).
2897: 
2898:     gpass : float
2899:         The maximum loss in the passband (dB).
2900:     gstop : float
2901:         The minimum attenuation in the stopband (dB).
2902:     analog : bool, optional
2903:         When True, return an analog filter, otherwise a digital filter is
2904:         returned.
2905: 
2906:     Returns
2907:     -------
2908:     ord : int
2909:         The lowest order for a Butterworth filter which meets specs.
2910:     wn : ndarray or float
2911:         The Butterworth natural frequency (i.e. the "3dB frequency").  Should
2912:         be used with `butter` to give filter results.
2913: 
2914:     See Also
2915:     --------
2916:     butter : Filter design using order and critical points
2917:     cheb1ord : Find order and critical points from passband and stopband spec
2918:     cheb2ord, ellipord
2919:     iirfilter : General filter design using order and critical frequencies
2920:     iirdesign : General filter design using passband and stopband spec
2921: 
2922:     Examples
2923:     --------
2924:     Design an analog bandpass filter with passband within 3 dB from 20 to
2925:     50 rad/s, while rejecting at least -40 dB below 14 and above 60 rad/s.
2926:     Plot its frequency response, showing the passband and stopband
2927:     constraints in gray.
2928: 
2929:     >>> from scipy import signal
2930:     >>> import matplotlib.pyplot as plt
2931: 
2932:     >>> N, Wn = signal.buttord([20, 50], [14, 60], 3, 40, True)
2933:     >>> b, a = signal.butter(N, Wn, 'band', True)
2934:     >>> w, h = signal.freqs(b, a, np.logspace(1, 2, 500))
2935:     >>> plt.semilogx(w, 20 * np.log10(abs(h)))
2936:     >>> plt.title('Butterworth bandpass filter fit to constraints')
2937:     >>> plt.xlabel('Frequency [radians / second]')
2938:     >>> plt.ylabel('Amplitude [dB]')
2939:     >>> plt.grid(which='both', axis='both')
2940:     >>> plt.fill([1,  14,  14,   1], [-40, -40, 99, 99], '0.9', lw=0) # stop
2941:     >>> plt.fill([20, 20,  50,  50], [-99, -3, -3, -99], '0.9', lw=0) # pass
2942:     >>> plt.fill([60, 60, 1e9, 1e9], [99, -40, -40, 99], '0.9', lw=0) # stop
2943:     >>> plt.axis([10, 100, -60, 3])
2944:     >>> plt.show()
2945: 
2946:     '''
2947:     wp = atleast_1d(wp)
2948:     ws = atleast_1d(ws)
2949:     filter_type = 2 * (len(wp) - 1)
2950:     filter_type += 1
2951:     if wp[0] >= ws[0]:
2952:         filter_type += 1
2953: 
2954:     # Pre-warp frequencies for digital filter design
2955:     if not analog:
2956:         passb = tan(pi * wp / 2.0)
2957:         stopb = tan(pi * ws / 2.0)
2958:     else:
2959:         passb = wp * 1.0
2960:         stopb = ws * 1.0
2961: 
2962:     if filter_type == 1:            # low
2963:         nat = stopb / passb
2964:     elif filter_type == 2:          # high
2965:         nat = passb / stopb
2966:     elif filter_type == 3:          # stop
2967:         wp0 = optimize.fminbound(band_stop_obj, passb[0], stopb[0] - 1e-12,
2968:                                  args=(0, passb, stopb, gpass, gstop,
2969:                                        'butter'),
2970:                                  disp=0)
2971:         passb[0] = wp0
2972:         wp1 = optimize.fminbound(band_stop_obj, stopb[1] + 1e-12, passb[1],
2973:                                  args=(1, passb, stopb, gpass, gstop,
2974:                                        'butter'),
2975:                                  disp=0)
2976:         passb[1] = wp1
2977:         nat = ((stopb * (passb[0] - passb[1])) /
2978:                (stopb ** 2 - passb[0] * passb[1]))
2979:     elif filter_type == 4:          # pass
2980:         nat = ((stopb ** 2 - passb[0] * passb[1]) /
2981:                (stopb * (passb[0] - passb[1])))
2982: 
2983:     nat = min(abs(nat))
2984: 
2985:     GSTOP = 10 ** (0.1 * abs(gstop))
2986:     GPASS = 10 ** (0.1 * abs(gpass))
2987:     ord = int(ceil(log10((GSTOP - 1.0) / (GPASS - 1.0)) / (2 * log10(nat))))
2988: 
2989:     # Find the Butterworth natural frequency WN (or the "3dB" frequency")
2990:     # to give exactly gpass at passb.
2991:     try:
2992:         W0 = (GPASS - 1.0) ** (-1.0 / (2.0 * ord))
2993:     except ZeroDivisionError:
2994:         W0 = 1.0
2995:         print("Warning, order is zero...check input parameters.")
2996: 
2997:     # now convert this frequency back from lowpass prototype
2998:     # to the original analog filter
2999: 
3000:     if filter_type == 1:  # low
3001:         WN = W0 * passb
3002:     elif filter_type == 2:  # high
3003:         WN = passb / W0
3004:     elif filter_type == 3:  # stop
3005:         WN = numpy.zeros(2, float)
3006:         discr = sqrt((passb[1] - passb[0]) ** 2 +
3007:                      4 * W0 ** 2 * passb[0] * passb[1])
3008:         WN[0] = ((passb[1] - passb[0]) + discr) / (2 * W0)
3009:         WN[1] = ((passb[1] - passb[0]) - discr) / (2 * W0)
3010:         WN = numpy.sort(abs(WN))
3011:     elif filter_type == 4:  # pass
3012:         W0 = numpy.array([-W0, W0], float)
3013:         WN = (-W0 * (passb[1] - passb[0]) / 2.0 +
3014:               sqrt(W0 ** 2 / 4.0 * (passb[1] - passb[0]) ** 2 +
3015:                    passb[0] * passb[1]))
3016:         WN = numpy.sort(abs(WN))
3017:     else:
3018:         raise ValueError("Bad type: %s" % filter_type)
3019: 
3020:     if not analog:
3021:         wn = (2.0 / pi) * arctan(WN)
3022:     else:
3023:         wn = WN
3024: 
3025:     if len(wn) == 1:
3026:         wn = wn[0]
3027:     return ord, wn
3028: 
3029: 
3030: def cheb1ord(wp, ws, gpass, gstop, analog=False):
3031:     '''Chebyshev type I filter order selection.
3032: 
3033:     Return the order of the lowest order digital or analog Chebyshev Type I
3034:     filter that loses no more than `gpass` dB in the passband and has at
3035:     least `gstop` dB attenuation in the stopband.
3036: 
3037:     Parameters
3038:     ----------
3039:     wp, ws : float
3040:         Passband and stopband edge frequencies.
3041:         For digital filters, these are normalized from 0 to 1, where 1 is the
3042:         Nyquist frequency, pi radians/sample.  (`wp` and `ws` are thus in
3043:         half-cycles / sample.)  For example:
3044: 
3045:             - Lowpass:   wp = 0.2,          ws = 0.3
3046:             - Highpass:  wp = 0.3,          ws = 0.2
3047:             - Bandpass:  wp = [0.2, 0.5],   ws = [0.1, 0.6]
3048:             - Bandstop:  wp = [0.1, 0.6],   ws = [0.2, 0.5]
3049: 
3050:         For analog filters, `wp` and `ws` are angular frequencies (e.g. rad/s).
3051: 
3052:     gpass : float
3053:         The maximum loss in the passband (dB).
3054:     gstop : float
3055:         The minimum attenuation in the stopband (dB).
3056:     analog : bool, optional
3057:         When True, return an analog filter, otherwise a digital filter is
3058:         returned.
3059: 
3060:     Returns
3061:     -------
3062:     ord : int
3063:         The lowest order for a Chebyshev type I filter that meets specs.
3064:     wn : ndarray or float
3065:         The Chebyshev natural frequency (the "3dB frequency") for use with
3066:         `cheby1` to give filter results.
3067: 
3068:     See Also
3069:     --------
3070:     cheby1 : Filter design using order and critical points
3071:     buttord : Find order and critical points from passband and stopband spec
3072:     cheb2ord, ellipord
3073:     iirfilter : General filter design using order and critical frequencies
3074:     iirdesign : General filter design using passband and stopband spec
3075: 
3076:     Examples
3077:     --------
3078:     Design a digital lowpass filter such that the passband is within 3 dB up
3079:     to 0.2*(fs/2), while rejecting at least -40 dB above 0.3*(fs/2).  Plot its
3080:     frequency response, showing the passband and stopband constraints in gray.
3081: 
3082:     >>> from scipy import signal
3083:     >>> import matplotlib.pyplot as plt
3084: 
3085:     >>> N, Wn = signal.cheb1ord(0.2, 0.3, 3, 40)
3086:     >>> b, a = signal.cheby1(N, 3, Wn, 'low')
3087:     >>> w, h = signal.freqz(b, a)
3088:     >>> plt.semilogx(w / np.pi, 20 * np.log10(abs(h)))
3089:     >>> plt.title('Chebyshev I lowpass filter fit to constraints')
3090:     >>> plt.xlabel('Normalized frequency')
3091:     >>> plt.ylabel('Amplitude [dB]')
3092:     >>> plt.grid(which='both', axis='both')
3093:     >>> plt.fill([.01, 0.2, 0.2, .01], [-3, -3, -99, -99], '0.9', lw=0) # stop
3094:     >>> plt.fill([0.3, 0.3,   2,   2], [ 9, -40, -40,  9], '0.9', lw=0) # pass
3095:     >>> plt.axis([0.08, 1, -60, 3])
3096:     >>> plt.show()
3097: 
3098:     '''
3099:     wp = atleast_1d(wp)
3100:     ws = atleast_1d(ws)
3101:     filter_type = 2 * (len(wp) - 1)
3102:     if wp[0] < ws[0]:
3103:         filter_type += 1
3104:     else:
3105:         filter_type += 2
3106: 
3107:     # Pre-warp frequencies for digital filter design
3108:     if not analog:
3109:         passb = tan(pi * wp / 2.0)
3110:         stopb = tan(pi * ws / 2.0)
3111:     else:
3112:         passb = wp * 1.0
3113:         stopb = ws * 1.0
3114: 
3115:     if filter_type == 1:           # low
3116:         nat = stopb / passb
3117:     elif filter_type == 2:          # high
3118:         nat = passb / stopb
3119:     elif filter_type == 3:     # stop
3120:         wp0 = optimize.fminbound(band_stop_obj, passb[0], stopb[0] - 1e-12,
3121:                                  args=(0, passb, stopb, gpass, gstop, 'cheby'),
3122:                                  disp=0)
3123:         passb[0] = wp0
3124:         wp1 = optimize.fminbound(band_stop_obj, stopb[1] + 1e-12, passb[1],
3125:                                  args=(1, passb, stopb, gpass, gstop, 'cheby'),
3126:                                  disp=0)
3127:         passb[1] = wp1
3128:         nat = ((stopb * (passb[0] - passb[1])) /
3129:                (stopb ** 2 - passb[0] * passb[1]))
3130:     elif filter_type == 4:  # pass
3131:         nat = ((stopb ** 2 - passb[0] * passb[1]) /
3132:                (stopb * (passb[0] - passb[1])))
3133: 
3134:     nat = min(abs(nat))
3135: 
3136:     GSTOP = 10 ** (0.1 * abs(gstop))
3137:     GPASS = 10 ** (0.1 * abs(gpass))
3138:     ord = int(ceil(arccosh(sqrt((GSTOP - 1.0) / (GPASS - 1.0))) /
3139:                    arccosh(nat)))
3140: 
3141:     # Natural frequencies are just the passband edges
3142:     if not analog:
3143:         wn = (2.0 / pi) * arctan(passb)
3144:     else:
3145:         wn = passb
3146: 
3147:     if len(wn) == 1:
3148:         wn = wn[0]
3149:     return ord, wn
3150: 
3151: 
3152: def cheb2ord(wp, ws, gpass, gstop, analog=False):
3153:     '''Chebyshev type II filter order selection.
3154: 
3155:     Return the order of the lowest order digital or analog Chebyshev Type II
3156:     filter that loses no more than `gpass` dB in the passband and has at least
3157:     `gstop` dB attenuation in the stopband.
3158: 
3159:     Parameters
3160:     ----------
3161:     wp, ws : float
3162:         Passband and stopband edge frequencies.
3163:         For digital filters, these are normalized from 0 to 1, where 1 is the
3164:         Nyquist frequency, pi radians/sample.  (`wp` and `ws` are thus in
3165:         half-cycles / sample.)  For example:
3166: 
3167:             - Lowpass:   wp = 0.2,          ws = 0.3
3168:             - Highpass:  wp = 0.3,          ws = 0.2
3169:             - Bandpass:  wp = [0.2, 0.5],   ws = [0.1, 0.6]
3170:             - Bandstop:  wp = [0.1, 0.6],   ws = [0.2, 0.5]
3171: 
3172:         For analog filters, `wp` and `ws` are angular frequencies (e.g. rad/s).
3173: 
3174:     gpass : float
3175:         The maximum loss in the passband (dB).
3176:     gstop : float
3177:         The minimum attenuation in the stopband (dB).
3178:     analog : bool, optional
3179:         When True, return an analog filter, otherwise a digital filter is
3180:         returned.
3181: 
3182:     Returns
3183:     -------
3184:     ord : int
3185:         The lowest order for a Chebyshev type II filter that meets specs.
3186:     wn : ndarray or float
3187:         The Chebyshev natural frequency (the "3dB frequency") for use with
3188:         `cheby2` to give filter results.
3189: 
3190:     See Also
3191:     --------
3192:     cheby2 : Filter design using order and critical points
3193:     buttord : Find order and critical points from passband and stopband spec
3194:     cheb1ord, ellipord
3195:     iirfilter : General filter design using order and critical frequencies
3196:     iirdesign : General filter design using passband and stopband spec
3197: 
3198:     Examples
3199:     --------
3200:     Design a digital bandstop filter which rejects -60 dB from 0.2*(fs/2) to
3201:     0.5*(fs/2), while staying within 3 dB below 0.1*(fs/2) or above
3202:     0.6*(fs/2).  Plot its frequency response, showing the passband and
3203:     stopband constraints in gray.
3204: 
3205:     >>> from scipy import signal
3206:     >>> import matplotlib.pyplot as plt
3207: 
3208:     >>> N, Wn = signal.cheb2ord([0.1, 0.6], [0.2, 0.5], 3, 60)
3209:     >>> b, a = signal.cheby2(N, 60, Wn, 'stop')
3210:     >>> w, h = signal.freqz(b, a)
3211:     >>> plt.semilogx(w / np.pi, 20 * np.log10(abs(h)))
3212:     >>> plt.title('Chebyshev II bandstop filter fit to constraints')
3213:     >>> plt.xlabel('Normalized frequency')
3214:     >>> plt.ylabel('Amplitude [dB]')
3215:     >>> plt.grid(which='both', axis='both')
3216:     >>> plt.fill([.01, .1, .1, .01], [-3,  -3, -99, -99], '0.9', lw=0) # stop
3217:     >>> plt.fill([.2,  .2, .5,  .5], [ 9, -60, -60,   9], '0.9', lw=0) # pass
3218:     >>> plt.fill([.6,  .6,  2,   2], [-99, -3,  -3, -99], '0.9', lw=0) # stop
3219:     >>> plt.axis([0.06, 1, -80, 3])
3220:     >>> plt.show()
3221: 
3222:     '''
3223:     wp = atleast_1d(wp)
3224:     ws = atleast_1d(ws)
3225:     filter_type = 2 * (len(wp) - 1)
3226:     if wp[0] < ws[0]:
3227:         filter_type += 1
3228:     else:
3229:         filter_type += 2
3230: 
3231:     # Pre-warp frequencies for digital filter design
3232:     if not analog:
3233:         passb = tan(pi * wp / 2.0)
3234:         stopb = tan(pi * ws / 2.0)
3235:     else:
3236:         passb = wp * 1.0
3237:         stopb = ws * 1.0
3238: 
3239:     if filter_type == 1:           # low
3240:         nat = stopb / passb
3241:     elif filter_type == 2:          # high
3242:         nat = passb / stopb
3243:     elif filter_type == 3:     # stop
3244:         wp0 = optimize.fminbound(band_stop_obj, passb[0], stopb[0] - 1e-12,
3245:                                  args=(0, passb, stopb, gpass, gstop, 'cheby'),
3246:                                  disp=0)
3247:         passb[0] = wp0
3248:         wp1 = optimize.fminbound(band_stop_obj, stopb[1] + 1e-12, passb[1],
3249:                                  args=(1, passb, stopb, gpass, gstop, 'cheby'),
3250:                                  disp=0)
3251:         passb[1] = wp1
3252:         nat = ((stopb * (passb[0] - passb[1])) /
3253:                (stopb ** 2 - passb[0] * passb[1]))
3254:     elif filter_type == 4:  # pass
3255:         nat = ((stopb ** 2 - passb[0] * passb[1]) /
3256:                (stopb * (passb[0] - passb[1])))
3257: 
3258:     nat = min(abs(nat))
3259: 
3260:     GSTOP = 10 ** (0.1 * abs(gstop))
3261:     GPASS = 10 ** (0.1 * abs(gpass))
3262:     ord = int(ceil(arccosh(sqrt((GSTOP - 1.0) / (GPASS - 1.0))) /
3263:                    arccosh(nat)))
3264: 
3265:     # Find frequency where analog response is -gpass dB.
3266:     # Then convert back from low-pass prototype to the original filter.
3267: 
3268:     new_freq = cosh(1.0 / ord * arccosh(sqrt((GSTOP - 1.0) / (GPASS - 1.0))))
3269:     new_freq = 1.0 / new_freq
3270: 
3271:     if filter_type == 1:
3272:         nat = passb / new_freq
3273:     elif filter_type == 2:
3274:         nat = passb * new_freq
3275:     elif filter_type == 3:
3276:         nat = numpy.zeros(2, float)
3277:         nat[0] = (new_freq / 2.0 * (passb[0] - passb[1]) +
3278:                   sqrt(new_freq ** 2 * (passb[1] - passb[0]) ** 2 / 4.0 +
3279:                        passb[1] * passb[0]))
3280:         nat[1] = passb[1] * passb[0] / nat[0]
3281:     elif filter_type == 4:
3282:         nat = numpy.zeros(2, float)
3283:         nat[0] = (1.0 / (2.0 * new_freq) * (passb[0] - passb[1]) +
3284:                   sqrt((passb[1] - passb[0]) ** 2 / (4.0 * new_freq ** 2) +
3285:                        passb[1] * passb[0]))
3286:         nat[1] = passb[0] * passb[1] / nat[0]
3287: 
3288:     if not analog:
3289:         wn = (2.0 / pi) * arctan(nat)
3290:     else:
3291:         wn = nat
3292: 
3293:     if len(wn) == 1:
3294:         wn = wn[0]
3295:     return ord, wn
3296: 
3297: 
3298: def ellipord(wp, ws, gpass, gstop, analog=False):
3299:     '''Elliptic (Cauer) filter order selection.
3300: 
3301:     Return the order of the lowest order digital or analog elliptic filter
3302:     that loses no more than `gpass` dB in the passband and has at least
3303:     `gstop` dB attenuation in the stopband.
3304: 
3305:     Parameters
3306:     ----------
3307:     wp, ws : float
3308:         Passband and stopband edge frequencies.
3309:         For digital filters, these are normalized from 0 to 1, where 1 is the
3310:         Nyquist frequency, pi radians/sample.  (`wp` and `ws` are thus in
3311:         half-cycles / sample.)  For example:
3312: 
3313:             - Lowpass:   wp = 0.2,          ws = 0.3
3314:             - Highpass:  wp = 0.3,          ws = 0.2
3315:             - Bandpass:  wp = [0.2, 0.5],   ws = [0.1, 0.6]
3316:             - Bandstop:  wp = [0.1, 0.6],   ws = [0.2, 0.5]
3317: 
3318:         For analog filters, `wp` and `ws` are angular frequencies (e.g. rad/s).
3319: 
3320:     gpass : float
3321:         The maximum loss in the passband (dB).
3322:     gstop : float
3323:         The minimum attenuation in the stopband (dB).
3324:     analog : bool, optional
3325:         When True, return an analog filter, otherwise a digital filter is
3326:         returned.
3327: 
3328:     Returns
3329:     -------
3330:     ord : int
3331:         The lowest order for an Elliptic (Cauer) filter that meets specs.
3332:     wn : ndarray or float
3333:         The Chebyshev natural frequency (the "3dB frequency") for use with
3334:         `ellip` to give filter results.
3335: 
3336:     See Also
3337:     --------
3338:     ellip : Filter design using order and critical points
3339:     buttord : Find order and critical points from passband and stopband spec
3340:     cheb1ord, cheb2ord
3341:     iirfilter : General filter design using order and critical frequencies
3342:     iirdesign : General filter design using passband and stopband spec
3343: 
3344:     Examples
3345:     --------
3346:     Design an analog highpass filter such that the passband is within 3 dB
3347:     above 30 rad/s, while rejecting -60 dB at 10 rad/s.  Plot its
3348:     frequency response, showing the passband and stopband constraints in gray.
3349: 
3350:     >>> from scipy import signal
3351:     >>> import matplotlib.pyplot as plt
3352: 
3353:     >>> N, Wn = signal.ellipord(30, 10, 3, 60, True)
3354:     >>> b, a = signal.ellip(N, 3, 60, Wn, 'high', True)
3355:     >>> w, h = signal.freqs(b, a, np.logspace(0, 3, 500))
3356:     >>> plt.semilogx(w, 20 * np.log10(abs(h)))
3357:     >>> plt.title('Elliptical highpass filter fit to constraints')
3358:     >>> plt.xlabel('Frequency [radians / second]')
3359:     >>> plt.ylabel('Amplitude [dB]')
3360:     >>> plt.grid(which='both', axis='both')
3361:     >>> plt.fill([.1, 10,  10,  .1], [1e4, 1e4, -60, -60], '0.9', lw=0) # stop
3362:     >>> plt.fill([30, 30, 1e9, 1e9], [-99,  -3,  -3, -99], '0.9', lw=0) # pass
3363:     >>> plt.axis([1, 300, -80, 3])
3364:     >>> plt.show()
3365: 
3366:     '''
3367:     wp = atleast_1d(wp)
3368:     ws = atleast_1d(ws)
3369:     filter_type = 2 * (len(wp) - 1)
3370:     filter_type += 1
3371:     if wp[0] >= ws[0]:
3372:         filter_type += 1
3373: 
3374:     # Pre-warp frequencies for digital filter design
3375:     if not analog:
3376:         passb = tan(pi * wp / 2.0)
3377:         stopb = tan(pi * ws / 2.0)
3378:     else:
3379:         passb = wp * 1.0
3380:         stopb = ws * 1.0
3381: 
3382:     if filter_type == 1:           # low
3383:         nat = stopb / passb
3384:     elif filter_type == 2:          # high
3385:         nat = passb / stopb
3386:     elif filter_type == 3:     # stop
3387:         wp0 = optimize.fminbound(band_stop_obj, passb[0], stopb[0] - 1e-12,
3388:                                  args=(0, passb, stopb, gpass, gstop, 'ellip'),
3389:                                  disp=0)
3390:         passb[0] = wp0
3391:         wp1 = optimize.fminbound(band_stop_obj, stopb[1] + 1e-12, passb[1],
3392:                                  args=(1, passb, stopb, gpass, gstop, 'ellip'),
3393:                                  disp=0)
3394:         passb[1] = wp1
3395:         nat = ((stopb * (passb[0] - passb[1])) /
3396:                (stopb ** 2 - passb[0] * passb[1]))
3397:     elif filter_type == 4:  # pass
3398:         nat = ((stopb ** 2 - passb[0] * passb[1]) /
3399:                (stopb * (passb[0] - passb[1])))
3400: 
3401:     nat = min(abs(nat))
3402: 
3403:     GSTOP = 10 ** (0.1 * gstop)
3404:     GPASS = 10 ** (0.1 * gpass)
3405:     arg1 = sqrt((GPASS - 1.0) / (GSTOP - 1.0))
3406:     arg0 = 1.0 / nat
3407:     d0 = special.ellipk([arg0 ** 2, 1 - arg0 ** 2])
3408:     d1 = special.ellipk([arg1 ** 2, 1 - arg1 ** 2])
3409:     ord = int(ceil(d0[0] * d1[1] / (d0[1] * d1[0])))
3410: 
3411:     if not analog:
3412:         wn = arctan(passb) * 2.0 / pi
3413:     else:
3414:         wn = passb
3415: 
3416:     if len(wn) == 1:
3417:         wn = wn[0]
3418:     return ord, wn
3419: 
3420: 
3421: def buttap(N):
3422:     '''Return (z,p,k) for analog prototype of Nth-order Butterworth filter.
3423: 
3424:     The filter will have an angular (e.g. rad/s) cutoff frequency of 1.
3425: 
3426:     See Also
3427:     --------
3428:     butter : Filter design function using this prototype
3429: 
3430:     '''
3431:     if abs(int(N)) != N:
3432:         raise ValueError("Filter order must be a nonnegative integer")
3433:     z = numpy.array([])
3434:     m = numpy.arange(-N+1, N, 2)
3435:     # Middle value is 0 to ensure an exactly real pole
3436:     p = -numpy.exp(1j * pi * m / (2 * N))
3437:     k = 1
3438:     return z, p, k
3439: 
3440: 
3441: def cheb1ap(N, rp):
3442:     '''
3443:     Return (z,p,k) for Nth-order Chebyshev type I analog lowpass filter.
3444: 
3445:     The returned filter prototype has `rp` decibels of ripple in the passband.
3446: 
3447:     The filter's angular (e.g. rad/s) cutoff frequency is normalized to 1,
3448:     defined as the point at which the gain first drops below ``-rp``.
3449: 
3450:     See Also
3451:     --------
3452:     cheby1 : Filter design function using this prototype
3453: 
3454:     '''
3455:     if abs(int(N)) != N:
3456:         raise ValueError("Filter order must be a nonnegative integer")
3457:     elif N == 0:
3458:         # Avoid divide-by-zero error
3459:         # Even order filters have DC gain of -rp dB
3460:         return numpy.array([]), numpy.array([]), 10**(-rp/20)
3461:     z = numpy.array([])
3462: 
3463:     # Ripple factor (epsilon)
3464:     eps = numpy.sqrt(10 ** (0.1 * rp) - 1.0)
3465:     mu = 1.0 / N * arcsinh(1 / eps)
3466: 
3467:     # Arrange poles in an ellipse on the left half of the S-plane
3468:     m = numpy.arange(-N+1, N, 2)
3469:     theta = pi * m / (2*N)
3470:     p = -sinh(mu + 1j*theta)
3471: 
3472:     k = numpy.prod(-p, axis=0).real
3473:     if N % 2 == 0:
3474:         k = k / sqrt((1 + eps * eps))
3475: 
3476:     return z, p, k
3477: 
3478: 
3479: def cheb2ap(N, rs):
3480:     '''
3481:     Return (z,p,k) for Nth-order Chebyshev type I analog lowpass filter.
3482: 
3483:     The returned filter prototype has `rs` decibels of ripple in the stopband.
3484: 
3485:     The filter's angular (e.g. rad/s) cutoff frequency is normalized to 1,
3486:     defined as the point at which the gain first reaches ``-rs``.
3487: 
3488:     See Also
3489:     --------
3490:     cheby2 : Filter design function using this prototype
3491: 
3492:     '''
3493:     if abs(int(N)) != N:
3494:         raise ValueError("Filter order must be a nonnegative integer")
3495:     elif N == 0:
3496:         # Avoid divide-by-zero warning
3497:         return numpy.array([]), numpy.array([]), 1
3498: 
3499:     # Ripple factor (epsilon)
3500:     de = 1.0 / sqrt(10 ** (0.1 * rs) - 1)
3501:     mu = arcsinh(1.0 / de) / N
3502: 
3503:     if N % 2:
3504:         m = numpy.concatenate((numpy.arange(-N+1, 0, 2),
3505:                                numpy.arange(2, N, 2)))
3506:     else:
3507:         m = numpy.arange(-N+1, N, 2)
3508: 
3509:     z = -conjugate(1j / sin(m * pi / (2.0 * N)))
3510: 
3511:     # Poles around the unit circle like Butterworth
3512:     p = -exp(1j * pi * numpy.arange(-N+1, N, 2) / (2 * N))
3513:     # Warp into Chebyshev II
3514:     p = sinh(mu) * p.real + 1j * cosh(mu) * p.imag
3515:     p = 1.0 / p
3516: 
3517:     k = (numpy.prod(-p, axis=0) / numpy.prod(-z, axis=0)).real
3518:     return z, p, k
3519: 
3520: 
3521: EPSILON = 2e-16
3522: 
3523: 
3524: def _vratio(u, ineps, mp):
3525:     [s, c, d, phi] = special.ellipj(u, mp)
3526:     ret = abs(ineps - s / c)
3527:     return ret
3528: 
3529: 
3530: def _kratio(m, k_ratio):
3531:     m = float(m)
3532:     if m < 0:
3533:         m = 0.0
3534:     if m > 1:
3535:         m = 1.0
3536:     if abs(m) > EPSILON and (abs(m) + EPSILON) < 1:
3537:         k = special.ellipk([m, 1 - m])
3538:         r = k[0] / k[1] - k_ratio
3539:     elif abs(m) > EPSILON:
3540:         r = -k_ratio
3541:     else:
3542:         r = 1e20
3543:     return abs(r)
3544: 
3545: 
3546: def ellipap(N, rp, rs):
3547:     '''Return (z,p,k) of Nth-order elliptic analog lowpass filter.
3548: 
3549:     The filter is a normalized prototype that has `rp` decibels of ripple
3550:     in the passband and a stopband `rs` decibels down.
3551: 
3552:     The filter's angular (e.g. rad/s) cutoff frequency is normalized to 1,
3553:     defined as the point at which the gain first drops below ``-rp``.
3554: 
3555:     See Also
3556:     --------
3557:     ellip : Filter design function using this prototype
3558: 
3559:     References
3560:     ----------
3561:     .. [1] Lutova, Tosic, and Evans, "Filter Design for Signal Processing",
3562:            Chapters 5 and 12.
3563: 
3564:     '''
3565:     if abs(int(N)) != N:
3566:         raise ValueError("Filter order must be a nonnegative integer")
3567:     elif N == 0:
3568:         # Avoid divide-by-zero warning
3569:         # Even order filters have DC gain of -rp dB
3570:         return numpy.array([]), numpy.array([]), 10**(-rp/20)
3571:     elif N == 1:
3572:         p = -sqrt(1.0 / (10 ** (0.1 * rp) - 1.0))
3573:         k = -p
3574:         z = []
3575:         return asarray(z), asarray(p), k
3576: 
3577:     eps = numpy.sqrt(10 ** (0.1 * rp) - 1)
3578:     ck1 = eps / numpy.sqrt(10 ** (0.1 * rs) - 1)
3579:     ck1p = numpy.sqrt(1 - ck1 * ck1)
3580:     if ck1p == 1:
3581:         raise ValueError("Cannot design a filter with given rp and rs"
3582:                          " specifications.")
3583: 
3584:     val = special.ellipk([ck1 * ck1, ck1p * ck1p])
3585:     if abs(1 - ck1p * ck1p) < EPSILON:
3586:         krat = 0
3587:     else:
3588:         krat = N * val[0] / val[1]
3589: 
3590:     m = optimize.fmin(_kratio, [0.5], args=(krat,), maxfun=250, maxiter=250,
3591:                       disp=0)
3592:     if m < 0 or m > 1:
3593:         m = optimize.fminbound(_kratio, 0, 1, args=(krat,), maxfun=250,
3594:                                disp=0)
3595: 
3596:     capk = special.ellipk(m)
3597: 
3598:     j = numpy.arange(1 - N % 2, N, 2)
3599:     jj = len(j)
3600: 
3601:     [s, c, d, phi] = special.ellipj(j * capk / N, m * numpy.ones(jj))
3602:     snew = numpy.compress(abs(s) > EPSILON, s, axis=-1)
3603:     z = 1.0 / (sqrt(m) * snew)
3604:     z = 1j * z
3605:     z = numpy.concatenate((z, conjugate(z)))
3606: 
3607:     r = optimize.fmin(_vratio, special.ellipk(m), args=(1. / eps, ck1p * ck1p),
3608:                       maxfun=250, maxiter=250, disp=0)
3609:     v0 = capk * r / (N * val[0])
3610: 
3611:     [sv, cv, dv, phi] = special.ellipj(v0, 1 - m)
3612:     p = -(c * d * sv * cv + 1j * s * dv) / (1 - (d * sv) ** 2.0)
3613: 
3614:     if N % 2:
3615:         newp = numpy.compress(abs(p.imag) > EPSILON *
3616:                               numpy.sqrt(numpy.sum(p * numpy.conjugate(p),
3617:                                                    axis=0).real),
3618:                               p, axis=-1)
3619:         p = numpy.concatenate((p, conjugate(newp)))
3620:     else:
3621:         p = numpy.concatenate((p, conjugate(p)))
3622: 
3623:     k = (numpy.prod(-p, axis=0) / numpy.prod(-z, axis=0)).real
3624:     if N % 2 == 0:
3625:         k = k / numpy.sqrt((1 + eps * eps))
3626: 
3627:     return z, p, k
3628: 
3629: 
3630: # TODO: Make this a real public function scipy.misc.ff
3631: def _falling_factorial(x, n):
3632:     r'''
3633:     Return the factorial of `x` to the `n` falling.
3634: 
3635:     This is defined as:
3636: 
3637:     .. math::   x^\underline n = (x)_n = x (x-1) \cdots (x-n+1)
3638: 
3639:     This can more efficiently calculate ratios of factorials, since:
3640: 
3641:     n!/m! == falling_factorial(n, n-m)
3642: 
3643:     where n >= m
3644: 
3645:     skipping the factors that cancel out
3646: 
3647:     the usual factorial n! == ff(n, n)
3648:     '''
3649:     val = 1
3650:     for k in range(x - n + 1, x + 1):
3651:         val *= k
3652:     return val
3653: 
3654: 
3655: def _bessel_poly(n, reverse=False):
3656:     '''
3657:     Return the coefficients of Bessel polynomial of degree `n`
3658: 
3659:     If `reverse` is true, a reverse Bessel polynomial is output.
3660: 
3661:     Output is a list of coefficients:
3662:     [1]                   = 1
3663:     [1,  1]               = 1*s   +  1
3664:     [1,  3,  3]           = 1*s^2 +  3*s   +  3
3665:     [1,  6, 15, 15]       = 1*s^3 +  6*s^2 + 15*s   +  15
3666:     [1, 10, 45, 105, 105] = 1*s^4 + 10*s^3 + 45*s^2 + 105*s + 105
3667:     etc.
3668: 
3669:     Output is a Python list of arbitrary precision long ints, so n is only
3670:     limited by your hardware's memory.
3671: 
3672:     Sequence is http://oeis.org/A001498 , and output can be confirmed to
3673:     match http://oeis.org/A001498/b001498.txt :
3674: 
3675:     >>> i = 0
3676:     >>> for n in range(51):
3677:     ...     for x in _bessel_poly(n, reverse=True):
3678:     ...         print(i, x)
3679:     ...         i += 1
3680: 
3681:     '''
3682:     if abs(int(n)) != n:
3683:         raise ValueError("Polynomial order must be a nonnegative integer")
3684:     else:
3685:         n = int(n)  # np.int32 doesn't work, for instance
3686: 
3687:     out = []
3688:     for k in range(n + 1):
3689:         num = _falling_factorial(2*n - k, n)
3690:         den = 2**(n - k) * factorial(k, exact=True)
3691:         out.append(num // den)
3692: 
3693:     if reverse:
3694:         return out[::-1]
3695:     else:
3696:         return out
3697: 
3698: 
3699: def _campos_zeros(n):
3700:     '''
3701:     Return approximate zero locations of Bessel polynomials y_n(x) for order
3702:     `n` using polynomial fit (Campos-Calderon 2011)
3703:     '''
3704:     if n == 1:
3705:         return asarray([-1+0j])
3706: 
3707:     s = npp_polyval(n, [0, 0, 2, 0, -3, 1])
3708:     b3 = npp_polyval(n, [16, -8]) / s
3709:     b2 = npp_polyval(n, [-24, -12, 12]) / s
3710:     b1 = npp_polyval(n, [8, 24, -12, -2]) / s
3711:     b0 = npp_polyval(n, [0, -6, 0, 5, -1]) / s
3712: 
3713:     r = npp_polyval(n, [0, 0, 2, 1])
3714:     a1 = npp_polyval(n, [-6, -6]) / r
3715:     a2 = 6 / r
3716: 
3717:     k = np.arange(1, n+1)
3718:     x = npp_polyval(k, [0, a1, a2])
3719:     y = npp_polyval(k, [b0, b1, b2, b3])
3720: 
3721:     return x + 1j*y
3722: 
3723: 
3724: def _aberth(f, fp, x0, tol=1e-15, maxiter=50):
3725:     '''
3726:     Given a function `f`, its first derivative `fp`, and a set of initial
3727:     guesses `x0`, simultaneously find the roots of the polynomial using the
3728:     Aberth-Ehrlich method.
3729: 
3730:     ``len(x0)`` should equal the number of roots of `f`.
3731: 
3732:     (This is not a complete implementation of Bini's algorithm.)
3733:     '''
3734: 
3735:     N = len(x0)
3736: 
3737:     x = array(x0, complex)
3738:     beta = np.empty_like(x0)
3739: 
3740:     for iteration in range(maxiter):
3741:         alpha = -f(x) / fp(x)  # Newton's method
3742: 
3743:         # Model "repulsion" between zeros
3744:         for k in range(N):
3745:             beta[k] = np.sum(1/(x[k] - x[k+1:]))
3746:             beta[k] += np.sum(1/(x[k] - x[:k]))
3747: 
3748:         x += alpha / (1 + alpha * beta)
3749: 
3750:         if not all(np.isfinite(x)):
3751:             raise RuntimeError('Root-finding calculation failed')
3752: 
3753:         # Mekwi: The iterative process can be stopped when |hn| has become
3754:         # less than the largest error one is willing to permit in the root.
3755:         if all(abs(alpha) <= tol):
3756:             break
3757:     else:
3758:         raise Exception('Zeros failed to converge')
3759: 
3760:     return x
3761: 
3762: 
3763: def _bessel_zeros(N):
3764:     '''
3765:     Find zeros of ordinary Bessel polynomial of order `N`, by root-finding of
3766:     modified Bessel function of the second kind
3767:     '''
3768:     if N == 0:
3769:         return asarray([])
3770: 
3771:     # Generate starting points
3772:     x0 = _campos_zeros(N)
3773: 
3774:     # Zeros are the same for exp(1/x)*K_{N+0.5}(1/x) and Nth-order ordinary
3775:     # Bessel polynomial y_N(x)
3776:     def f(x):
3777:         return special.kve(N+0.5, 1/x)
3778: 
3779:     # First derivative of above
3780:     def fp(x):
3781:         return (special.kve(N-0.5, 1/x)/(2*x**2) -
3782:                 special.kve(N+0.5, 1/x)/(x**2) +
3783:                 special.kve(N+1.5, 1/x)/(2*x**2))
3784: 
3785:     # Starting points converge to true zeros
3786:     x = _aberth(f, fp, x0)
3787: 
3788:     # Improve precision using Newton's method on each
3789:     for i in range(len(x)):
3790:         x[i] = optimize.newton(f, x[i], fp, tol=1e-15)
3791: 
3792:     # Average complex conjugates to make them exactly symmetrical
3793:     x = np.mean((x, x[::-1].conj()), 0)
3794: 
3795:     # Zeros should sum to -1
3796:     if abs(np.sum(x) + 1) > 1e-15:
3797:         raise RuntimeError('Generated zeros are inaccurate')
3798: 
3799:     return x
3800: 
3801: 
3802: def _norm_factor(p, k):
3803:     '''
3804:     Numerically find frequency shift to apply to delay-normalized filter such
3805:     that -3 dB point is at 1 rad/sec.
3806: 
3807:     `p` is an array_like of polynomial poles
3808:     `k` is a float gain
3809: 
3810:     First 10 values are listed in "Bessel Scale Factors" table,
3811:     "Bessel Filters Polynomials, Poles and Circuit Elements 2003, C. Bond."
3812:     '''
3813:     p = asarray(p, dtype=complex)
3814: 
3815:     def G(w):
3816:         '''
3817:         Gain of filter
3818:         '''
3819:         return abs(k / prod(1j*w - p))
3820: 
3821:     def cutoff(w):
3822:         '''
3823:         When gain = -3 dB, return 0
3824:         '''
3825:         return G(w) - 1/np.sqrt(2)
3826: 
3827:     return optimize.newton(cutoff, 1.5)
3828: 
3829: 
3830: def besselap(N, norm='phase'):
3831:     '''
3832:     Return (z,p,k) for analog prototype of an Nth-order Bessel filter.
3833: 
3834:     Parameters
3835:     ----------
3836:     N : int
3837:         The order of the filter.
3838:     norm : {'phase', 'delay', 'mag'}, optional
3839:         Frequency normalization:
3840: 
3841:         ``phase``
3842:             The filter is normalized such that the phase response reaches its
3843:             midpoint at an angular (e.g. rad/s) cutoff frequency of 1.  This
3844:             happens for both low-pass and high-pass filters, so this is the
3845:             "phase-matched" case. [6]_
3846: 
3847:             The magnitude response asymptotes are the same as a Butterworth
3848:             filter of the same order with a cutoff of `Wn`.
3849: 
3850:             This is the default, and matches MATLAB's implementation.
3851: 
3852:         ``delay``
3853:             The filter is normalized such that the group delay in the passband
3854:             is 1 (e.g. 1 second).  This is the "natural" type obtained by
3855:             solving Bessel polynomials
3856: 
3857:         ``mag``
3858:             The filter is normalized such that the gain magnitude is -3 dB at
3859:             angular frequency 1.  This is called "frequency normalization" by
3860:             Bond. [1]_
3861: 
3862:         .. versionadded:: 0.18.0
3863: 
3864:     Returns
3865:     -------
3866:     z : ndarray
3867:         Zeros of the transfer function. Is always an empty array.
3868:     p : ndarray
3869:         Poles of the transfer function.
3870:     k : scalar
3871:         Gain of the transfer function.  For phase-normalized, this is always 1.
3872: 
3873:     See Also
3874:     --------
3875:     bessel : Filter design function using this prototype
3876: 
3877:     Notes
3878:     -----
3879:     To find the pole locations, approximate starting points are generated [2]_
3880:     for the zeros of the ordinary Bessel polynomial [3]_, then the
3881:     Aberth-Ehrlich method [4]_ [5]_ is used on the Kv(x) Bessel function to
3882:     calculate more accurate zeros, and these locations are then inverted about
3883:     the unit circle.
3884: 
3885:     References
3886:     ----------
3887:     .. [1] C.R. Bond, "Bessel Filter Constants",
3888:            http://www.crbond.com/papers/bsf.pdf
3889:     .. [2] Campos and Calderon, "Approximate closed-form formulas for the
3890:            zeros of the Bessel Polynomials", :arXiv:`1105.0957`.
3891:     .. [3] Thomson, W.E., "Delay Networks having Maximally Flat Frequency
3892:            Characteristics", Proceedings of the Institution of Electrical
3893:            Engineers, Part III, November 1949, Vol. 96, No. 44, pp. 487-490.
3894:     .. [4] Aberth, "Iteration Methods for Finding all Zeros of a Polynomial
3895:            Simultaneously", Mathematics of Computation, Vol. 27, No. 122,
3896:            April 1973
3897:     .. [5] Ehrlich, "A modified Newton method for polynomials", Communications
3898:            of the ACM, Vol. 10, Issue 2, pp. 107-108, Feb. 1967,
3899:            :DOI:`10.1145/363067.363115`
3900:     .. [6] Miller and Bohn, "A Bessel Filter Crossover, and Its Relation to
3901:            Others", RaneNote 147, 1998, http://www.rane.com/note147.html
3902: 
3903:     '''
3904:     if abs(int(N)) != N:
3905:         raise ValueError("Filter order must be a nonnegative integer")
3906:     if N == 0:
3907:         p = []
3908:         k = 1
3909:     else:
3910:         # Find roots of reverse Bessel polynomial
3911:         p = 1/_bessel_zeros(N)
3912: 
3913:         a_last = _falling_factorial(2*N, N) // 2**N
3914: 
3915:         # Shift them to a different normalization if required
3916:         if norm in ('delay', 'mag'):
3917:             # Normalized for group delay of 1
3918:             k = a_last
3919:             if norm == 'mag':
3920:                 # -3 dB magnitude point is at 1 rad/sec
3921:                 norm_factor = _norm_factor(p, k)
3922:                 p /= norm_factor
3923:                 k = norm_factor**-N * a_last
3924:         elif norm == 'phase':
3925:             # Phase-matched (1/2 max phase shift at 1 rad/sec)
3926:             # Asymptotes are same as Butterworth filter
3927:             p *= 10**(-math.log10(a_last)/N)
3928:             k = 1
3929:         else:
3930:             raise ValueError('normalization not understood')
3931: 
3932:     return asarray([]), asarray(p, dtype=complex), float(k)
3933: 
3934: 
3935: def iirnotch(w0, Q):
3936:     '''
3937:     Design second-order IIR notch digital filter.
3938: 
3939:     A notch filter is a band-stop filter with a narrow bandwidth
3940:     (high quality factor). It rejects a narrow frequency band and
3941:     leaves the rest of the spectrum little changed.
3942: 
3943:     Parameters
3944:     ----------
3945:     w0 : float
3946:         Normalized frequency to remove from a signal. It is a
3947:         scalar that must satisfy  ``0 < w0 < 1``, with ``w0 = 1``
3948:         corresponding to half of the sampling frequency.
3949:     Q : float
3950:         Quality factor. Dimensionless parameter that characterizes
3951:         notch filter -3 dB bandwidth ``bw`` relative to its center
3952:         frequency, ``Q = w0/bw``.
3953: 
3954:     Returns
3955:     -------
3956:     b, a : ndarray, ndarray
3957:         Numerator (``b``) and denominator (``a``) polynomials
3958:         of the IIR filter.
3959: 
3960:     See Also
3961:     --------
3962:     iirpeak
3963: 
3964:     Notes
3965:     -----
3966:     .. versionadded: 0.19.0
3967: 
3968:     References
3969:     ----------
3970:     .. [1] Sophocles J. Orfanidis, "Introduction To Signal Processing",
3971:            Prentice-Hall, 1996
3972: 
3973:     Examples
3974:     --------
3975:     Design and plot filter to remove the 60Hz component from a
3976:     signal sampled at 200Hz, using a quality factor Q = 30
3977: 
3978:     >>> from scipy import signal
3979:     >>> import numpy as np
3980:     >>> import matplotlib.pyplot as plt
3981: 
3982:     >>> fs = 200.0  # Sample frequency (Hz)
3983:     >>> f0 = 60.0  # Frequency to be removed from signal (Hz)
3984:     >>> Q = 30.0  # Quality factor
3985:     >>> w0 = f0/(fs/2)  # Normalized Frequency
3986:     >>> # Design notch filter
3987:     >>> b, a = signal.iirnotch(w0, Q)
3988: 
3989:     >>> # Frequency response
3990:     >>> w, h = signal.freqz(b, a)
3991:     >>> # Generate frequency axis
3992:     >>> freq = w*fs/(2*np.pi)
3993:     >>> # Plot
3994:     >>> fig, ax = plt.subplots(2, 1, figsize=(8, 6))
3995:     >>> ax[0].plot(freq, 20*np.log10(abs(h)), color='blue')
3996:     >>> ax[0].set_title("Frequency Response")
3997:     >>> ax[0].set_ylabel("Amplitude (dB)", color='blue')
3998:     >>> ax[0].set_xlim([0, 100])
3999:     >>> ax[0].set_ylim([-25, 10])
4000:     >>> ax[0].grid()
4001:     >>> ax[1].plot(freq, np.unwrap(np.angle(h))*180/np.pi, color='green')
4002:     >>> ax[1].set_ylabel("Angle (degrees)", color='green')
4003:     >>> ax[1].set_xlabel("Frequency (Hz)")
4004:     >>> ax[1].set_xlim([0, 100])
4005:     >>> ax[1].set_yticks([-90, -60, -30, 0, 30, 60, 90])
4006:     >>> ax[1].set_ylim([-90, 90])
4007:     >>> ax[1].grid()
4008:     >>> plt.show()
4009:     '''
4010: 
4011:     return _design_notch_peak_filter(w0, Q, "notch")
4012: 
4013: 
4014: def iirpeak(w0, Q):
4015:     '''
4016:     Design second-order IIR peak (resonant) digital filter.
4017: 
4018:     A peak filter is a band-pass filter with a narrow bandwidth
4019:     (high quality factor). It rejects components outside a narrow
4020:     frequency band.
4021: 
4022:     Parameters
4023:     ----------
4024:     w0 : float
4025:         Normalized frequency to be retained in a signal. It is a
4026:         scalar that must satisfy  ``0 < w0 < 1``, with ``w0 = 1`` corresponding
4027:         to half of the sampling frequency.
4028:     Q : float
4029:         Quality factor. Dimensionless parameter that characterizes
4030:         peak filter -3 dB bandwidth ``bw`` relative to its center
4031:         frequency, ``Q = w0/bw``.
4032: 
4033:     Returns
4034:     -------
4035:     b, a : ndarray, ndarray
4036:         Numerator (``b``) and denominator (``a``) polynomials
4037:         of the IIR filter.
4038: 
4039:     See Also
4040:     --------
4041:     iirnotch
4042: 
4043:     Notes
4044:     -----
4045:     .. versionadded: 0.19.0
4046: 
4047:     References
4048:     ----------
4049:     .. [1] Sophocles J. Orfanidis, "Introduction To Signal Processing",
4050:            Prentice-Hall, 1996
4051: 
4052:     Examples
4053:     --------
4054:     Design and plot filter to remove the frequencies other than the 300Hz
4055:     component from a signal sampled at 1000Hz, using a quality factor Q = 30
4056: 
4057:     >>> from scipy import signal
4058:     >>> import numpy as np
4059:     >>> import matplotlib.pyplot as plt
4060: 
4061:     >>> fs = 1000.0  # Sample frequency (Hz)
4062:     >>> f0 = 300.0  # Frequency to be retained (Hz)
4063:     >>> Q = 30.0  # Quality factor
4064:     >>> w0 = f0/(fs/2)  # Normalized Frequency
4065:     >>> # Design peak filter
4066:     >>> b, a = signal.iirpeak(w0, Q)
4067: 
4068:     >>> # Frequency response
4069:     >>> w, h = signal.freqz(b, a)
4070:     >>> # Generate frequency axis
4071:     >>> freq = w*fs/(2*np.pi)
4072:     >>> # Plot
4073:     >>> fig, ax = plt.subplots(2, 1, figsize=(8, 6))
4074:     >>> ax[0].plot(freq, 20*np.log10(abs(h)), color='blue')
4075:     >>> ax[0].set_title("Frequency Response")
4076:     >>> ax[0].set_ylabel("Amplitude (dB)", color='blue')
4077:     >>> ax[0].set_xlim([0, 500])
4078:     >>> ax[0].set_ylim([-50, 10])
4079:     >>> ax[0].grid()
4080:     >>> ax[1].plot(freq, np.unwrap(np.angle(h))*180/np.pi, color='green')
4081:     >>> ax[1].set_ylabel("Angle (degrees)", color='green')
4082:     >>> ax[1].set_xlabel("Frequency (Hz)")
4083:     >>> ax[1].set_xlim([0, 500])
4084:     >>> ax[1].set_yticks([-90, -60, -30, 0, 30, 60, 90])
4085:     >>> ax[1].set_ylim([-90, 90])
4086:     >>> ax[1].grid()
4087:     >>> plt.show()
4088:     '''
4089: 
4090:     return _design_notch_peak_filter(w0, Q, "peak")
4091: 
4092: 
4093: def _design_notch_peak_filter(w0, Q, ftype):
4094:     '''
4095:     Design notch or peak digital filter.
4096: 
4097:     Parameters
4098:     ----------
4099:     w0 : float
4100:         Normalized frequency to remove from a signal. It is a
4101:         scalar that must satisfy  ``0 < w0 < 1``, with ``w0 = 1``
4102:         corresponding to half of the sampling frequency.
4103:     Q : float
4104:         Quality factor. Dimensionless parameter that characterizes
4105:         notch filter -3 dB bandwidth ``bw`` relative to its center
4106:         frequency, ``Q = w0/bw``.
4107:     ftype : str
4108:         The type of IIR filter to design:
4109: 
4110:             - notch filter : ``notch``
4111:             - peak filter  : ``peak``
4112: 
4113:     Returns
4114:     -------
4115:     b, a : ndarray, ndarray
4116:         Numerator (``b``) and denominator (``a``) polynomials
4117:         of the IIR filter.
4118:     '''
4119: 
4120:     # Guarantee that the inputs are floats
4121:     w0 = float(w0)
4122:     Q = float(Q)
4123: 
4124:     # Checks if w0 is within the range
4125:     if w0 > 1.0 or w0 < 0.0:
4126:         raise ValueError("w0 should be such that 0 < w0 < 1")
4127: 
4128:     # Get bandwidth
4129:     bw = w0/Q
4130: 
4131:     # Normalize inputs
4132:     bw = bw*np.pi
4133:     w0 = w0*np.pi
4134: 
4135:     # Compute -3dB atenuation
4136:     gb = 1/np.sqrt(2)
4137: 
4138:     if ftype == "notch":
4139:         # Compute beta: formula 11.3.4 (p.575) from reference [1]
4140:         beta = (np.sqrt(1.0-gb**2.0)/gb)*np.tan(bw/2.0)
4141:     elif ftype == "peak":
4142:         # Compute beta: formula 11.3.19 (p.579) from reference [1]
4143:         beta = (gb/np.sqrt(1.0-gb**2.0))*np.tan(bw/2.0)
4144:     else:
4145:         raise ValueError("Unknown ftype.")
4146: 
4147:     # Compute gain: formula 11.3.6 (p.575) from reference [1]
4148:     gain = 1.0/(1.0+beta)
4149: 
4150:     # Compute numerator b and denominator a
4151:     # formulas 11.3.7 (p.575) and 11.3.21 (p.579)
4152:     # from reference [1]
4153:     if ftype == "notch":
4154:         b = gain*np.array([1.0, -2.0*np.cos(w0), 1.0])
4155:     else:
4156:         b = (1.0-gain)*np.array([1.0, 0.0, -1.0])
4157:     a = np.array([1.0, -2.0*gain*np.cos(w0), (2.0*gain-1.0)])
4158: 
4159:     return b, a
4160: 
4161: 
4162: filter_dict = {'butter': [buttap, buttord],
4163:                'butterworth': [buttap, buttord],
4164: 
4165:                'cauer': [ellipap, ellipord],
4166:                'elliptic': [ellipap, ellipord],
4167:                'ellip': [ellipap, ellipord],
4168: 
4169:                'bessel': [besselap],
4170:                'bessel_phase': [besselap],
4171:                'bessel_delay': [besselap],
4172:                'bessel_mag': [besselap],
4173: 
4174:                'cheby1': [cheb1ap, cheb1ord],
4175:                'chebyshev1': [cheb1ap, cheb1ord],
4176:                'chebyshevi': [cheb1ap, cheb1ord],
4177: 
4178:                'cheby2': [cheb2ap, cheb2ord],
4179:                'chebyshev2': [cheb2ap, cheb2ord],
4180:                'chebyshevii': [cheb2ap, cheb2ord],
4181:                }
4182: 
4183: band_dict = {'band': 'bandpass',
4184:              'bandpass': 'bandpass',
4185:              'pass': 'bandpass',
4186:              'bp': 'bandpass',
4187: 
4188:              'bs': 'bandstop',
4189:              'bandstop': 'bandstop',
4190:              'bands': 'bandstop',
4191:              'stop': 'bandstop',
4192: 
4193:              'l': 'lowpass',
4194:              'low': 'lowpass',
4195:              'lowpass': 'lowpass',
4196:              'lp': 'lowpass',
4197: 
4198:              'high': 'highpass',
4199:              'highpass': 'highpass',
4200:              'h': 'highpass',
4201:              'hp': 'highpass',
4202:              }
4203: 
4204: bessel_norms = {'bessel': 'phase',
4205:                 'bessel_phase': 'phase',
4206:                 'bessel_delay': 'delay',
4207:                 'bessel_mag': 'mag'}
4208: 
4209: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_257379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2, (-1)), 'str', 'Filter design.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 5, 0))

# 'import math' statement (line 5)
import math

import_module(stypy.reporting.localization.Localization(__file__, 5, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'import operator' statement (line 6)
import operator

import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'operator', operator, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import warnings' statement (line 7)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import numpy' statement (line 9)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_257380 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'numpy')

if (type(import_257380) is not StypyTypeError):

    if (import_257380 != 'pyd_module'):
        __import__(import_257380)
        sys_modules_257381 = sys.modules[import_257380]
        import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'numpy', sys_modules_257381.module_type_store, module_type_store)
    else:
        import numpy

        import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'numpy', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 9)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 9, 0), 'numpy', import_257380)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import numpy' statement (line 10)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_257382 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'numpy')

if (type(import_257382) is not StypyTypeError):

    if (import_257382 != 'pyd_module'):
        __import__(import_257382)
        sys_modules_257383 = sys.modules[import_257382]
        import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'np', sys_modules_257383.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 10)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 10, 0), 'numpy', import_257382)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'from numpy import atleast_1d, poly, polyval, roots, real, asarray, resize, pi, absolute, logspace, r_, sqrt, tan, log10, arctan, arcsinh, sin, exp, cosh, arccosh, ceil, conjugate, zeros, sinh, append, concatenate, prod, ones, array, mintypecode' statement (line 11)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_257384 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy')

if (type(import_257384) is not StypyTypeError):

    if (import_257384 != 'pyd_module'):
        __import__(import_257384)
        sys_modules_257385 = sys.modules[import_257384]
        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy', sys_modules_257385.module_type_store, module_type_store, ['atleast_1d', 'poly', 'polyval', 'roots', 'real', 'asarray', 'resize', 'pi', 'absolute', 'logspace', 'r_', 'sqrt', 'tan', 'log10', 'arctan', 'arcsinh', 'sin', 'exp', 'cosh', 'arccosh', 'ceil', 'conjugate', 'zeros', 'sinh', 'append', 'concatenate', 'prod', 'ones', 'array', 'mintypecode'])
        nest_module(stypy.reporting.localization.Localization(__file__, 11, 0), __file__, sys_modules_257385, sys_modules_257385.module_type_store, module_type_store)
    else:
        from numpy import atleast_1d, poly, polyval, roots, real, asarray, resize, pi, absolute, logspace, r_, sqrt, tan, log10, arctan, arcsinh, sin, exp, cosh, arccosh, ceil, conjugate, zeros, sinh, append, concatenate, prod, ones, array, mintypecode

        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy', None, module_type_store, ['atleast_1d', 'poly', 'polyval', 'roots', 'real', 'asarray', 'resize', 'pi', 'absolute', 'logspace', 'r_', 'sqrt', 'tan', 'log10', 'arctan', 'arcsinh', 'sin', 'exp', 'cosh', 'arccosh', 'ceil', 'conjugate', 'zeros', 'sinh', 'append', 'concatenate', 'prod', 'ones', 'array', 'mintypecode'], [atleast_1d, poly, polyval, roots, real, asarray, resize, pi, absolute, logspace, r_, sqrt, tan, log10, arctan, arcsinh, sin, exp, cosh, arccosh, ceil, conjugate, zeros, sinh, append, concatenate, prod, ones, array, mintypecode])

else:
    # Assigning a type to the variable 'numpy' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy', import_257384)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'from numpy.polynomial.polynomial import npp_polyval' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_257386 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy.polynomial.polynomial')

if (type(import_257386) is not StypyTypeError):

    if (import_257386 != 'pyd_module'):
        __import__(import_257386)
        sys_modules_257387 = sys.modules[import_257386]
        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy.polynomial.polynomial', sys_modules_257387.module_type_store, module_type_store, ['polyval'])
        nest_module(stypy.reporting.localization.Localization(__file__, 16, 0), __file__, sys_modules_257387, sys_modules_257387.module_type_store, module_type_store)
    else:
        from numpy.polynomial.polynomial import polyval as npp_polyval

        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy.polynomial.polynomial', None, module_type_store, ['polyval'], [npp_polyval])

else:
    # Assigning a type to the variable 'numpy.polynomial.polynomial' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy.polynomial.polynomial', import_257386)

# Adding an alias
module_type_store.add_alias('npp_polyval', 'polyval')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'from scipy import special, optimize, fftpack' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_257388 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy')

if (type(import_257388) is not StypyTypeError):

    if (import_257388 != 'pyd_module'):
        __import__(import_257388)
        sys_modules_257389 = sys.modules[import_257388]
        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy', sys_modules_257389.module_type_store, module_type_store, ['special', 'optimize', 'fftpack'])
        nest_module(stypy.reporting.localization.Localization(__file__, 18, 0), __file__, sys_modules_257389, sys_modules_257389.module_type_store, module_type_store)
    else:
        from scipy import special, optimize, fftpack

        import_from_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy', None, module_type_store, ['special', 'optimize', 'fftpack'], [special, optimize, fftpack])

else:
    # Assigning a type to the variable 'scipy' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'scipy', import_257388)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from scipy.special import comb, factorial' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_257390 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.special')

if (type(import_257390) is not StypyTypeError):

    if (import_257390 != 'pyd_module'):
        __import__(import_257390)
        sys_modules_257391 = sys.modules[import_257390]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.special', sys_modules_257391.module_type_store, module_type_store, ['comb', 'factorial'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_257391, sys_modules_257391.module_type_store, module_type_store)
    else:
        from scipy.special import comb, factorial

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.special', None, module_type_store, ['comb', 'factorial'], [comb, factorial])

else:
    # Assigning a type to the variable 'scipy.special' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'scipy.special', import_257390)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'from scipy._lib._numpy_compat import polyvalfromroots' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_257392 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy._lib._numpy_compat')

if (type(import_257392) is not StypyTypeError):

    if (import_257392 != 'pyd_module'):
        __import__(import_257392)
        sys_modules_257393 = sys.modules[import_257392]
        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy._lib._numpy_compat', sys_modules_257393.module_type_store, module_type_store, ['polyvalfromroots'])
        nest_module(stypy.reporting.localization.Localization(__file__, 20, 0), __file__, sys_modules_257393, sys_modules_257393.module_type_store, module_type_store)
    else:
        from scipy._lib._numpy_compat import polyvalfromroots

        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy._lib._numpy_compat', None, module_type_store, ['polyvalfromroots'], [polyvalfromroots])

else:
    # Assigning a type to the variable 'scipy._lib._numpy_compat' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'scipy._lib._numpy_compat', import_257392)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')


# Assigning a List to a Name (line 23):

# Assigning a List to a Name (line 23):
__all__ = ['findfreqs', 'freqs', 'freqz', 'tf2zpk', 'zpk2tf', 'normalize', 'lp2lp', 'lp2hp', 'lp2bp', 'lp2bs', 'bilinear', 'iirdesign', 'iirfilter', 'butter', 'cheby1', 'cheby2', 'ellip', 'bessel', 'band_stop_obj', 'buttord', 'cheb1ord', 'cheb2ord', 'ellipord', 'buttap', 'cheb1ap', 'cheb2ap', 'ellipap', 'besselap', 'BadCoefficients', 'freqs_zpk', 'freqz_zpk', 'tf2sos', 'sos2tf', 'zpk2sos', 'sos2zpk', 'group_delay', 'sosfreqz', 'iirnotch', 'iirpeak']
module_type_store.set_exportable_members(['findfreqs', 'freqs', 'freqz', 'tf2zpk', 'zpk2tf', 'normalize', 'lp2lp', 'lp2hp', 'lp2bp', 'lp2bs', 'bilinear', 'iirdesign', 'iirfilter', 'butter', 'cheby1', 'cheby2', 'ellip', 'bessel', 'band_stop_obj', 'buttord', 'cheb1ord', 'cheb2ord', 'ellipord', 'buttap', 'cheb1ap', 'cheb2ap', 'ellipap', 'besselap', 'BadCoefficients', 'freqs_zpk', 'freqz_zpk', 'tf2sos', 'sos2tf', 'zpk2sos', 'sos2zpk', 'group_delay', 'sosfreqz', 'iirnotch', 'iirpeak'])

# Obtaining an instance of the builtin type 'list' (line 23)
list_257394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 23)
# Adding element type (line 23)
str_257395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 11), 'str', 'findfreqs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257395)
# Adding element type (line 23)
str_257396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 24), 'str', 'freqs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257396)
# Adding element type (line 23)
str_257397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 33), 'str', 'freqz')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257397)
# Adding element type (line 23)
str_257398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 42), 'str', 'tf2zpk')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257398)
# Adding element type (line 23)
str_257399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 52), 'str', 'zpk2tf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257399)
# Adding element type (line 23)
str_257400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 23, 62), 'str', 'normalize')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257400)
# Adding element type (line 23)
str_257401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 11), 'str', 'lp2lp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257401)
# Adding element type (line 23)
str_257402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 20), 'str', 'lp2hp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257402)
# Adding element type (line 23)
str_257403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 29), 'str', 'lp2bp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257403)
# Adding element type (line 23)
str_257404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 38), 'str', 'lp2bs')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257404)
# Adding element type (line 23)
str_257405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 47), 'str', 'bilinear')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257405)
# Adding element type (line 23)
str_257406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 24, 59), 'str', 'iirdesign')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257406)
# Adding element type (line 23)
str_257407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 11), 'str', 'iirfilter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257407)
# Adding element type (line 23)
str_257408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 24), 'str', 'butter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257408)
# Adding element type (line 23)
str_257409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 34), 'str', 'cheby1')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257409)
# Adding element type (line 23)
str_257410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 44), 'str', 'cheby2')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257410)
# Adding element type (line 23)
str_257411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 54), 'str', 'ellip')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257411)
# Adding element type (line 23)
str_257412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 63), 'str', 'bessel')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257412)
# Adding element type (line 23)
str_257413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 11), 'str', 'band_stop_obj')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257413)
# Adding element type (line 23)
str_257414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 28), 'str', 'buttord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257414)
# Adding element type (line 23)
str_257415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 39), 'str', 'cheb1ord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257415)
# Adding element type (line 23)
str_257416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 51), 'str', 'cheb2ord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257416)
# Adding element type (line 23)
str_257417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 26, 63), 'str', 'ellipord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257417)
# Adding element type (line 23)
str_257418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 11), 'str', 'buttap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257418)
# Adding element type (line 23)
str_257419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 21), 'str', 'cheb1ap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257419)
# Adding element type (line 23)
str_257420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 32), 'str', 'cheb2ap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257420)
# Adding element type (line 23)
str_257421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 43), 'str', 'ellipap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257421)
# Adding element type (line 23)
str_257422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 27, 54), 'str', 'besselap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257422)
# Adding element type (line 23)
str_257423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 11), 'str', 'BadCoefficients')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257423)
# Adding element type (line 23)
str_257424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 30), 'str', 'freqs_zpk')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257424)
# Adding element type (line 23)
str_257425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 28, 43), 'str', 'freqz_zpk')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257425)
# Adding element type (line 23)
str_257426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 11), 'str', 'tf2sos')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257426)
# Adding element type (line 23)
str_257427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 21), 'str', 'sos2tf')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257427)
# Adding element type (line 23)
str_257428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 31), 'str', 'zpk2sos')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257428)
# Adding element type (line 23)
str_257429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 42), 'str', 'sos2zpk')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257429)
# Adding element type (line 23)
str_257430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 29, 53), 'str', 'group_delay')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257430)
# Adding element type (line 23)
str_257431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 11), 'str', 'sosfreqz')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257431)
# Adding element type (line 23)
str_257432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 23), 'str', 'iirnotch')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257432)
# Adding element type (line 23)
str_257433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 30, 35), 'str', 'iirpeak')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 23, 10), list_257394, str_257433)

# Assigning a type to the variable '__all__' (line 23)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), '__all__', list_257394)
# Declaration of the 'BadCoefficients' class
# Getting the type of 'UserWarning' (line 33)
UserWarning_257434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 33, 22), 'UserWarning')

class BadCoefficients(UserWarning_257434, ):
    str_257435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 4), 'str', 'Warning about badly conditioned filter coefficients')
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 33, 0, False)
        # Assigning a type to the variable 'self' (line 34)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BadCoefficients.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'BadCoefficients' (line 33)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'BadCoefficients', BadCoefficients)

# Assigning a Name to a Name (line 37):

# Assigning a Name to a Name (line 37):
# Getting the type of 'absolute' (line 37)
absolute_257436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 6), 'absolute')
# Assigning a type to the variable 'abs' (line 37)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'abs', absolute_257436)

@norecursion
def findfreqs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_257437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 32), 'str', 'ba')
    defaults = [str_257437]
    # Create a new context for function 'findfreqs'
    module_type_store = module_type_store.open_function_context('findfreqs', 40, 0, False)
    
    # Passed parameters checking function
    findfreqs.stypy_localization = localization
    findfreqs.stypy_type_of_self = None
    findfreqs.stypy_type_store = module_type_store
    findfreqs.stypy_function_name = 'findfreqs'
    findfreqs.stypy_param_names_list = ['num', 'den', 'N', 'kind']
    findfreqs.stypy_varargs_param_name = None
    findfreqs.stypy_kwargs_param_name = None
    findfreqs.stypy_call_defaults = defaults
    findfreqs.stypy_call_varargs = varargs
    findfreqs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'findfreqs', ['num', 'den', 'N', 'kind'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'findfreqs', localization, ['num', 'den', 'N', 'kind'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'findfreqs(...)' code ##################

    str_257438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 74, (-1)), 'str', '\n    Find array of frequencies for computing the response of an analog filter.\n\n    Parameters\n    ----------\n    num, den : array_like, 1-D\n        The polynomial coefficients of the numerator and denominator of the\n        transfer function of the filter or LTI system, where the coefficients\n        are ordered from highest to lowest degree. Or, the roots  of the\n        transfer function numerator and denominator (i.e. zeroes and poles).\n    N : int\n        The length of the array to be computed.\n    kind : str {\'ba\', \'zp\'}, optional\n        Specifies whether the numerator and denominator are specified by their\n        polynomial coefficients (\'ba\'), or their roots (\'zp\').\n\n    Returns\n    -------\n    w : (N,) ndarray\n        A 1-D array of frequencies, logarithmically spaced.\n\n    Examples\n    --------\n    Find a set of nine frequencies that span the "interesting part" of the\n    frequency response for the filter with the transfer function\n\n        H(s) = s / (s^2 + 8s + 25)\n\n    >>> from scipy import signal\n    >>> signal.findfreqs([1, 0], [1, 8, 25], N=9)\n    array([  1.00000000e-02,   3.16227766e-02,   1.00000000e-01,\n             3.16227766e-01,   1.00000000e+00,   3.16227766e+00,\n             1.00000000e+01,   3.16227766e+01,   1.00000000e+02])\n    ')
    
    
    # Getting the type of 'kind' (line 75)
    kind_257439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 7), 'kind')
    str_257440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 15), 'str', 'ba')
    # Applying the binary operator '==' (line 75)
    result_eq_257441 = python_operator(stypy.reporting.localization.Localization(__file__, 75, 7), '==', kind_257439, str_257440)
    
    # Testing the type of an if condition (line 75)
    if_condition_257442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 75, 4), result_eq_257441)
    # Assigning a type to the variable 'if_condition_257442' (line 75)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 4), 'if_condition_257442', if_condition_257442)
    # SSA begins for if statement (line 75)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 76):
    
    # Assigning a BinOp to a Name (line 76):
    
    # Call to atleast_1d(...): (line 76)
    # Processing the call arguments (line 76)
    
    # Call to roots(...): (line 76)
    # Processing the call arguments (line 76)
    # Getting the type of 'den' (line 76)
    den_257445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 30), 'den', False)
    # Processing the call keyword arguments (line 76)
    kwargs_257446 = {}
    # Getting the type of 'roots' (line 76)
    roots_257444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 24), 'roots', False)
    # Calling roots(args, kwargs) (line 76)
    roots_call_result_257447 = invoke(stypy.reporting.localization.Localization(__file__, 76, 24), roots_257444, *[den_257445], **kwargs_257446)
    
    # Processing the call keyword arguments (line 76)
    kwargs_257448 = {}
    # Getting the type of 'atleast_1d' (line 76)
    atleast_1d_257443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 13), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 76)
    atleast_1d_call_result_257449 = invoke(stypy.reporting.localization.Localization(__file__, 76, 13), atleast_1d_257443, *[roots_call_result_257447], **kwargs_257448)
    
    complex_257450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 38), 'complex')
    # Applying the binary operator '+' (line 76)
    result_add_257451 = python_operator(stypy.reporting.localization.Localization(__file__, 76, 13), '+', atleast_1d_call_result_257449, complex_257450)
    
    # Assigning a type to the variable 'ep' (line 76)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 8), 'ep', result_add_257451)
    
    # Assigning a BinOp to a Name (line 77):
    
    # Assigning a BinOp to a Name (line 77):
    
    # Call to atleast_1d(...): (line 77)
    # Processing the call arguments (line 77)
    
    # Call to roots(...): (line 77)
    # Processing the call arguments (line 77)
    # Getting the type of 'num' (line 77)
    num_257454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 30), 'num', False)
    # Processing the call keyword arguments (line 77)
    kwargs_257455 = {}
    # Getting the type of 'roots' (line 77)
    roots_257453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 24), 'roots', False)
    # Calling roots(args, kwargs) (line 77)
    roots_call_result_257456 = invoke(stypy.reporting.localization.Localization(__file__, 77, 24), roots_257453, *[num_257454], **kwargs_257455)
    
    # Processing the call keyword arguments (line 77)
    kwargs_257457 = {}
    # Getting the type of 'atleast_1d' (line 77)
    atleast_1d_257452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 13), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 77)
    atleast_1d_call_result_257458 = invoke(stypy.reporting.localization.Localization(__file__, 77, 13), atleast_1d_257452, *[roots_call_result_257456], **kwargs_257457)
    
    complex_257459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 38), 'complex')
    # Applying the binary operator '+' (line 77)
    result_add_257460 = python_operator(stypy.reporting.localization.Localization(__file__, 77, 13), '+', atleast_1d_call_result_257458, complex_257459)
    
    # Assigning a type to the variable 'tz' (line 77)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 8), 'tz', result_add_257460)
    # SSA branch for the else part of an if statement (line 75)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'kind' (line 78)
    kind_257461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 9), 'kind')
    str_257462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 17), 'str', 'zp')
    # Applying the binary operator '==' (line 78)
    result_eq_257463 = python_operator(stypy.reporting.localization.Localization(__file__, 78, 9), '==', kind_257461, str_257462)
    
    # Testing the type of an if condition (line 78)
    if_condition_257464 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 78, 9), result_eq_257463)
    # Assigning a type to the variable 'if_condition_257464' (line 78)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 9), 'if_condition_257464', if_condition_257464)
    # SSA begins for if statement (line 78)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 79):
    
    # Assigning a BinOp to a Name (line 79):
    
    # Call to atleast_1d(...): (line 79)
    # Processing the call arguments (line 79)
    # Getting the type of 'den' (line 79)
    den_257466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 24), 'den', False)
    # Processing the call keyword arguments (line 79)
    kwargs_257467 = {}
    # Getting the type of 'atleast_1d' (line 79)
    atleast_1d_257465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 13), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 79)
    atleast_1d_call_result_257468 = invoke(stypy.reporting.localization.Localization(__file__, 79, 13), atleast_1d_257465, *[den_257466], **kwargs_257467)
    
    complex_257469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 79, 31), 'complex')
    # Applying the binary operator '+' (line 79)
    result_add_257470 = python_operator(stypy.reporting.localization.Localization(__file__, 79, 13), '+', atleast_1d_call_result_257468, complex_257469)
    
    # Assigning a type to the variable 'ep' (line 79)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 79, 8), 'ep', result_add_257470)
    
    # Assigning a BinOp to a Name (line 80):
    
    # Assigning a BinOp to a Name (line 80):
    
    # Call to atleast_1d(...): (line 80)
    # Processing the call arguments (line 80)
    # Getting the type of 'num' (line 80)
    num_257472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 24), 'num', False)
    # Processing the call keyword arguments (line 80)
    kwargs_257473 = {}
    # Getting the type of 'atleast_1d' (line 80)
    atleast_1d_257471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 13), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 80)
    atleast_1d_call_result_257474 = invoke(stypy.reporting.localization.Localization(__file__, 80, 13), atleast_1d_257471, *[num_257472], **kwargs_257473)
    
    complex_257475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 31), 'complex')
    # Applying the binary operator '+' (line 80)
    result_add_257476 = python_operator(stypy.reporting.localization.Localization(__file__, 80, 13), '+', atleast_1d_call_result_257474, complex_257475)
    
    # Assigning a type to the variable 'tz' (line 80)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 8), 'tz', result_add_257476)
    # SSA branch for the else part of an if statement (line 78)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 82)
    # Processing the call arguments (line 82)
    str_257478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, 25), 'str', "input must be one of {'ba', 'zp'}")
    # Processing the call keyword arguments (line 82)
    kwargs_257479 = {}
    # Getting the type of 'ValueError' (line 82)
    ValueError_257477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 82)
    ValueError_call_result_257480 = invoke(stypy.reporting.localization.Localization(__file__, 82, 14), ValueError_257477, *[str_257478], **kwargs_257479)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 82, 8), ValueError_call_result_257480, 'raise parameter', BaseException)
    # SSA join for if statement (line 78)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 75)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 84)
    # Processing the call arguments (line 84)
    # Getting the type of 'ep' (line 84)
    ep_257482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 11), 'ep', False)
    # Processing the call keyword arguments (line 84)
    kwargs_257483 = {}
    # Getting the type of 'len' (line 84)
    len_257481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 7), 'len', False)
    # Calling len(args, kwargs) (line 84)
    len_call_result_257484 = invoke(stypy.reporting.localization.Localization(__file__, 84, 7), len_257481, *[ep_257482], **kwargs_257483)
    
    int_257485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 18), 'int')
    # Applying the binary operator '==' (line 84)
    result_eq_257486 = python_operator(stypy.reporting.localization.Localization(__file__, 84, 7), '==', len_call_result_257484, int_257485)
    
    # Testing the type of an if condition (line 84)
    if_condition_257487 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 84, 4), result_eq_257486)
    # Assigning a type to the variable 'if_condition_257487' (line 84)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 4), 'if_condition_257487', if_condition_257487)
    # SSA begins for if statement (line 84)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 85):
    
    # Assigning a BinOp to a Name (line 85):
    
    # Call to atleast_1d(...): (line 85)
    # Processing the call arguments (line 85)
    int_257489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 24), 'int')
    # Processing the call keyword arguments (line 85)
    kwargs_257490 = {}
    # Getting the type of 'atleast_1d' (line 85)
    atleast_1d_257488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 13), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 85)
    atleast_1d_call_result_257491 = invoke(stypy.reporting.localization.Localization(__file__, 85, 13), atleast_1d_257488, *[int_257489], **kwargs_257490)
    
    complex_257492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 33), 'complex')
    # Applying the binary operator '+' (line 85)
    result_add_257493 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 13), '+', atleast_1d_call_result_257491, complex_257492)
    
    # Assigning a type to the variable 'ep' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 8), 'ep', result_add_257493)
    # SSA join for if statement (line 84)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 87):
    
    # Assigning a Subscript to a Name (line 87):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 87)
    tuple_257494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 87)
    # Adding element type (line 87)
    str_257495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 87, 12), 'str', '-1')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 12), tuple_257494, str_257495)
    # Adding element type (line 87)
    
    # Call to compress(...): (line 88)
    # Processing the call arguments (line 88)
    
    # Getting the type of 'ep' (line 88)
    ep_257498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 27), 'ep', False)
    # Obtaining the member 'imag' of a type (line 88)
    imag_257499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 88, 27), ep_257498, 'imag')
    int_257500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 38), 'int')
    # Applying the binary operator '>=' (line 88)
    result_ge_257501 = python_operator(stypy.reporting.localization.Localization(__file__, 88, 27), '>=', imag_257499, int_257500)
    
    # Getting the type of 'ep' (line 88)
    ep_257502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 41), 'ep', False)
    # Processing the call keyword arguments (line 88)
    int_257503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 88, 50), 'int')
    keyword_257504 = int_257503
    kwargs_257505 = {'axis': keyword_257504}
    # Getting the type of 'numpy' (line 88)
    numpy_257496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 12), 'numpy', False)
    # Obtaining the member 'compress' of a type (line 88)
    compress_257497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 88, 12), numpy_257496, 'compress')
    # Calling compress(args, kwargs) (line 88)
    compress_call_result_257506 = invoke(stypy.reporting.localization.Localization(__file__, 88, 12), compress_257497, *[result_ge_257501, ep_257502], **kwargs_257505)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 12), tuple_257494, compress_call_result_257506)
    # Adding element type (line 87)
    
    # Call to compress(...): (line 89)
    # Processing the call arguments (line 89)
    
    
    # Call to abs(...): (line 89)
    # Processing the call arguments (line 89)
    # Getting the type of 'tz' (line 89)
    tz_257510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 32), 'tz', False)
    # Processing the call keyword arguments (line 89)
    kwargs_257511 = {}
    # Getting the type of 'abs' (line 89)
    abs_257509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 28), 'abs', False)
    # Calling abs(args, kwargs) (line 89)
    abs_call_result_257512 = invoke(stypy.reporting.localization.Localization(__file__, 89, 28), abs_257509, *[tz_257510], **kwargs_257511)
    
    float_257513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 38), 'float')
    # Applying the binary operator '<' (line 89)
    result_lt_257514 = python_operator(stypy.reporting.localization.Localization(__file__, 89, 28), '<', abs_call_result_257512, float_257513)
    
    
    # Getting the type of 'tz' (line 89)
    tz_257515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 46), 'tz', False)
    # Obtaining the member 'imag' of a type (line 89)
    imag_257516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 89, 46), tz_257515, 'imag')
    int_257517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 57), 'int')
    # Applying the binary operator '>=' (line 89)
    result_ge_257518 = python_operator(stypy.reporting.localization.Localization(__file__, 89, 46), '>=', imag_257516, int_257517)
    
    # Applying the binary operator '&' (line 89)
    result_and__257519 = python_operator(stypy.reporting.localization.Localization(__file__, 89, 27), '&', result_lt_257514, result_ge_257518)
    
    # Getting the type of 'tz' (line 89)
    tz_257520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 61), 'tz', False)
    # Processing the call keyword arguments (line 89)
    int_257521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 70), 'int')
    keyword_257522 = int_257521
    kwargs_257523 = {'axis': keyword_257522}
    # Getting the type of 'numpy' (line 89)
    numpy_257507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 12), 'numpy', False)
    # Obtaining the member 'compress' of a type (line 89)
    compress_257508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 89, 12), numpy_257507, 'compress')
    # Calling compress(args, kwargs) (line 89)
    compress_call_result_257524 = invoke(stypy.reporting.localization.Localization(__file__, 89, 12), compress_257508, *[result_and__257519, tz_257520], **kwargs_257523)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 87, 12), tuple_257494, compress_call_result_257524)
    
    # Getting the type of 'r_' (line 87)
    r__257525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 9), 'r_')
    # Obtaining the member '__getitem__' of a type (line 87)
    getitem___257526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 87, 9), r__257525, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 87)
    subscript_call_result_257527 = invoke(stypy.reporting.localization.Localization(__file__, 87, 9), getitem___257526, tuple_257494)
    
    # Assigning a type to the variable 'ez' (line 87)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 4), 'ez', subscript_call_result_257527)
    
    # Assigning a Compare to a Name (line 91):
    
    # Assigning a Compare to a Name (line 91):
    
    
    # Call to abs(...): (line 91)
    # Processing the call arguments (line 91)
    # Getting the type of 'ez' (line 91)
    ez_257529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 16), 'ez', False)
    # Processing the call keyword arguments (line 91)
    kwargs_257530 = {}
    # Getting the type of 'abs' (line 91)
    abs_257528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 12), 'abs', False)
    # Calling abs(args, kwargs) (line 91)
    abs_call_result_257531 = invoke(stypy.reporting.localization.Localization(__file__, 91, 12), abs_257528, *[ez_257529], **kwargs_257530)
    
    float_257532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 22), 'float')
    # Applying the binary operator '<' (line 91)
    result_lt_257533 = python_operator(stypy.reporting.localization.Localization(__file__, 91, 12), '<', abs_call_result_257531, float_257532)
    
    # Assigning a type to the variable 'integ' (line 91)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 4), 'integ', result_lt_257533)
    
    # Assigning a Call to a Name (line 92):
    
    # Assigning a Call to a Name (line 92):
    
    # Call to around(...): (line 92)
    # Processing the call arguments (line 92)
    
    # Call to log10(...): (line 92)
    # Processing the call arguments (line 92)
    
    # Call to max(...): (line 92)
    # Processing the call arguments (line 92)
    int_257540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 92, 47), 'int')
    
    # Call to abs(...): (line 92)
    # Processing the call arguments (line 92)
    # Getting the type of 'ez' (line 92)
    ez_257542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 55), 'ez', False)
    # Obtaining the member 'real' of a type (line 92)
    real_257543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 55), ez_257542, 'real')
    # Getting the type of 'integ' (line 92)
    integ_257544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 65), 'integ', False)
    # Applying the binary operator '+' (line 92)
    result_add_257545 = python_operator(stypy.reporting.localization.Localization(__file__, 92, 55), '+', real_257543, integ_257544)
    
    # Processing the call keyword arguments (line 92)
    kwargs_257546 = {}
    # Getting the type of 'abs' (line 92)
    abs_257541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 51), 'abs', False)
    # Calling abs(args, kwargs) (line 92)
    abs_call_result_257547 = invoke(stypy.reporting.localization.Localization(__file__, 92, 51), abs_257541, *[result_add_257545], **kwargs_257546)
    
    # Applying the binary operator '*' (line 92)
    result_mul_257548 = python_operator(stypy.reporting.localization.Localization(__file__, 92, 47), '*', int_257540, abs_call_result_257547)
    
    float_257549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 47), 'float')
    # Getting the type of 'ez' (line 93)
    ez_257550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 53), 'ez', False)
    # Obtaining the member 'imag' of a type (line 93)
    imag_257551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 93, 53), ez_257550, 'imag')
    # Applying the binary operator '*' (line 93)
    result_mul_257552 = python_operator(stypy.reporting.localization.Localization(__file__, 93, 47), '*', float_257549, imag_257551)
    
    # Applying the binary operator '+' (line 92)
    result_add_257553 = python_operator(stypy.reporting.localization.Localization(__file__, 92, 47), '+', result_mul_257548, result_mul_257552)
    
    # Processing the call keyword arguments (line 92)
    kwargs_257554 = {}
    # Getting the type of 'numpy' (line 92)
    numpy_257538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 37), 'numpy', False)
    # Obtaining the member 'max' of a type (line 92)
    max_257539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 37), numpy_257538, 'max')
    # Calling max(args, kwargs) (line 92)
    max_call_result_257555 = invoke(stypy.reporting.localization.Localization(__file__, 92, 37), max_257539, *[result_add_257553], **kwargs_257554)
    
    # Processing the call keyword arguments (line 92)
    kwargs_257556 = {}
    # Getting the type of 'numpy' (line 92)
    numpy_257536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 25), 'numpy', False)
    # Obtaining the member 'log10' of a type (line 92)
    log10_257537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 25), numpy_257536, 'log10')
    # Calling log10(args, kwargs) (line 92)
    log10_call_result_257557 = invoke(stypy.reporting.localization.Localization(__file__, 92, 25), log10_257537, *[max_call_result_257555], **kwargs_257556)
    
    float_257558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 65), 'float')
    # Applying the binary operator '+' (line 92)
    result_add_257559 = python_operator(stypy.reporting.localization.Localization(__file__, 92, 25), '+', log10_call_result_257557, float_257558)
    
    # Processing the call keyword arguments (line 92)
    kwargs_257560 = {}
    # Getting the type of 'numpy' (line 92)
    numpy_257534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 12), 'numpy', False)
    # Obtaining the member 'around' of a type (line 92)
    around_257535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 12), numpy_257534, 'around')
    # Calling around(args, kwargs) (line 92)
    around_call_result_257561 = invoke(stypy.reporting.localization.Localization(__file__, 92, 12), around_257535, *[result_add_257559], **kwargs_257560)
    
    # Assigning a type to the variable 'hfreq' (line 92)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 4), 'hfreq', around_call_result_257561)
    
    # Assigning a Call to a Name (line 94):
    
    # Assigning a Call to a Name (line 94):
    
    # Call to around(...): (line 94)
    # Processing the call arguments (line 94)
    
    # Call to log10(...): (line 94)
    # Processing the call arguments (line 94)
    float_257566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 37), 'float')
    
    # Call to min(...): (line 94)
    # Processing the call arguments (line 94)
    
    # Call to abs(...): (line 94)
    # Processing the call arguments (line 94)
    
    # Call to real(...): (line 94)
    # Processing the call arguments (line 94)
    # Getting the type of 'ez' (line 94)
    ez_257571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 62), 'ez', False)
    # Getting the type of 'integ' (line 94)
    integ_257572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 67), 'integ', False)
    # Applying the binary operator '+' (line 94)
    result_add_257573 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 62), '+', ez_257571, integ_257572)
    
    # Processing the call keyword arguments (line 94)
    kwargs_257574 = {}
    # Getting the type of 'real' (line 94)
    real_257570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 57), 'real', False)
    # Calling real(args, kwargs) (line 94)
    real_call_result_257575 = invoke(stypy.reporting.localization.Localization(__file__, 94, 57), real_257570, *[result_add_257573], **kwargs_257574)
    
    # Processing the call keyword arguments (line 94)
    kwargs_257576 = {}
    # Getting the type of 'abs' (line 94)
    abs_257569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 53), 'abs', False)
    # Calling abs(args, kwargs) (line 94)
    abs_call_result_257577 = invoke(stypy.reporting.localization.Localization(__file__, 94, 53), abs_257569, *[real_call_result_257575], **kwargs_257576)
    
    int_257578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 53), 'int')
    # Getting the type of 'ez' (line 95)
    ez_257579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 57), 'ez', False)
    # Obtaining the member 'imag' of a type (line 95)
    imag_257580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 57), ez_257579, 'imag')
    # Applying the binary operator '*' (line 95)
    result_mul_257581 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 53), '*', int_257578, imag_257580)
    
    # Applying the binary operator '+' (line 94)
    result_add_257582 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 53), '+', abs_call_result_257577, result_mul_257581)
    
    # Processing the call keyword arguments (line 94)
    kwargs_257583 = {}
    # Getting the type of 'numpy' (line 94)
    numpy_257567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 43), 'numpy', False)
    # Obtaining the member 'min' of a type (line 94)
    min_257568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 43), numpy_257567, 'min')
    # Calling min(args, kwargs) (line 94)
    min_call_result_257584 = invoke(stypy.reporting.localization.Localization(__file__, 94, 43), min_257568, *[result_add_257582], **kwargs_257583)
    
    # Applying the binary operator '*' (line 94)
    result_mul_257585 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 37), '*', float_257566, min_call_result_257584)
    
    # Processing the call keyword arguments (line 94)
    kwargs_257586 = {}
    # Getting the type of 'numpy' (line 94)
    numpy_257564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 25), 'numpy', False)
    # Obtaining the member 'log10' of a type (line 94)
    log10_257565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 25), numpy_257564, 'log10')
    # Calling log10(args, kwargs) (line 94)
    log10_call_result_257587 = invoke(stypy.reporting.localization.Localization(__file__, 94, 25), log10_257565, *[result_mul_257585], **kwargs_257586)
    
    float_257588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 69), 'float')
    # Applying the binary operator '-' (line 94)
    result_sub_257589 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 25), '-', log10_call_result_257587, float_257588)
    
    # Processing the call keyword arguments (line 94)
    kwargs_257590 = {}
    # Getting the type of 'numpy' (line 94)
    numpy_257562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 12), 'numpy', False)
    # Obtaining the member 'around' of a type (line 94)
    around_257563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 12), numpy_257562, 'around')
    # Calling around(args, kwargs) (line 94)
    around_call_result_257591 = invoke(stypy.reporting.localization.Localization(__file__, 94, 12), around_257563, *[result_sub_257589], **kwargs_257590)
    
    # Assigning a type to the variable 'lfreq' (line 94)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 4), 'lfreq', around_call_result_257591)
    
    # Assigning a Call to a Name (line 97):
    
    # Assigning a Call to a Name (line 97):
    
    # Call to logspace(...): (line 97)
    # Processing the call arguments (line 97)
    # Getting the type of 'lfreq' (line 97)
    lfreq_257593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 17), 'lfreq', False)
    # Getting the type of 'hfreq' (line 97)
    hfreq_257594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 24), 'hfreq', False)
    # Getting the type of 'N' (line 97)
    N_257595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 31), 'N', False)
    # Processing the call keyword arguments (line 97)
    kwargs_257596 = {}
    # Getting the type of 'logspace' (line 97)
    logspace_257592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 8), 'logspace', False)
    # Calling logspace(args, kwargs) (line 97)
    logspace_call_result_257597 = invoke(stypy.reporting.localization.Localization(__file__, 97, 8), logspace_257592, *[lfreq_257593, hfreq_257594, N_257595], **kwargs_257596)
    
    # Assigning a type to the variable 'w' (line 97)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 4), 'w', logspace_call_result_257597)
    # Getting the type of 'w' (line 98)
    w_257598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 11), 'w')
    # Assigning a type to the variable 'stypy_return_type' (line 98)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 4), 'stypy_return_type', w_257598)
    
    # ################# End of 'findfreqs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'findfreqs' in the type store
    # Getting the type of 'stypy_return_type' (line 40)
    stypy_return_type_257599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_257599)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'findfreqs'
    return stypy_return_type_257599

# Assigning a type to the variable 'findfreqs' (line 40)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'findfreqs', findfreqs)

@norecursion
def freqs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 101)
    None_257600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 21), 'None')
    # Getting the type of 'None' (line 101)
    None_257601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 32), 'None')
    defaults = [None_257600, None_257601]
    # Create a new context for function 'freqs'
    module_type_store = module_type_store.open_function_context('freqs', 101, 0, False)
    
    # Passed parameters checking function
    freqs.stypy_localization = localization
    freqs.stypy_type_of_self = None
    freqs.stypy_type_store = module_type_store
    freqs.stypy_function_name = 'freqs'
    freqs.stypy_param_names_list = ['b', 'a', 'worN', 'plot']
    freqs.stypy_varargs_param_name = None
    freqs.stypy_kwargs_param_name = None
    freqs.stypy_call_defaults = defaults
    freqs.stypy_call_varargs = varargs
    freqs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'freqs', ['b', 'a', 'worN', 'plot'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'freqs', localization, ['b', 'a', 'worN', 'plot'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'freqs(...)' code ##################

    str_257602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, (-1)), 'str', '\n    Compute frequency response of analog filter.\n\n    Given the M-order numerator `b` and N-order denominator `a` of an analog\n    filter, compute its frequency response::\n\n             b[0]*(jw)**M + b[1]*(jw)**(M-1) + ... + b[M]\n     H(w) = ----------------------------------------------\n             a[0]*(jw)**N + a[1]*(jw)**(N-1) + ... + a[N]\n\n    Parameters\n    ----------\n    b : array_like\n        Numerator of a linear filter.\n    a : array_like\n        Denominator of a linear filter.\n    worN : {None, int, array_like}, optional\n        If None, then compute at 200 frequencies around the interesting parts\n        of the response curve (determined by pole-zero locations).  If a single\n        integer, then compute at that many frequencies.  Otherwise, compute the\n        response at the angular frequencies (e.g. rad/s) given in `worN`.\n    plot : callable, optional\n        A callable that takes two arguments. If given, the return parameters\n        `w` and `h` are passed to plot. Useful for plotting the frequency\n        response inside `freqs`.\n\n    Returns\n    -------\n    w : ndarray\n        The angular frequencies at which `h` was computed.\n    h : ndarray\n        The frequency response.\n\n    See Also\n    --------\n    freqz : Compute the frequency response of a digital filter.\n\n    Notes\n    -----\n    Using Matplotlib\'s "plot" function as the callable for `plot` produces\n    unexpected results,  this plots the real part of the complex transfer\n    function, not the magnitude.  Try ``lambda w, h: plot(w, abs(h))``.\n\n    Examples\n    --------\n    >>> from scipy.signal import freqs, iirfilter\n\n    >>> b, a = iirfilter(4, [1, 10], 1, 60, analog=True, ftype=\'cheby1\')\n\n    >>> w, h = freqs(b, a, worN=np.logspace(-1, 2, 1000))\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.semilogx(w, 20 * np.log10(abs(h)))\n    >>> plt.xlabel(\'Frequency\')\n    >>> plt.ylabel(\'Amplitude response [dB]\')\n    >>> plt.grid()\n    >>> plt.show()\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 161)
    # Getting the type of 'worN' (line 161)
    worN_257603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 7), 'worN')
    # Getting the type of 'None' (line 161)
    None_257604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 15), 'None')
    
    (may_be_257605, more_types_in_union_257606) = may_be_none(worN_257603, None_257604)

    if may_be_257605:

        if more_types_in_union_257606:
            # Runtime conditional SSA (line 161)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 162):
        
        # Assigning a Call to a Name (line 162):
        
        # Call to findfreqs(...): (line 162)
        # Processing the call arguments (line 162)
        # Getting the type of 'b' (line 162)
        b_257608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 22), 'b', False)
        # Getting the type of 'a' (line 162)
        a_257609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 25), 'a', False)
        int_257610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 28), 'int')
        # Processing the call keyword arguments (line 162)
        kwargs_257611 = {}
        # Getting the type of 'findfreqs' (line 162)
        findfreqs_257607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 12), 'findfreqs', False)
        # Calling findfreqs(args, kwargs) (line 162)
        findfreqs_call_result_257612 = invoke(stypy.reporting.localization.Localization(__file__, 162, 12), findfreqs_257607, *[b_257608, a_257609, int_257610], **kwargs_257611)
        
        # Assigning a type to the variable 'w' (line 162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 8), 'w', findfreqs_call_result_257612)

        if more_types_in_union_257606:
            # Runtime conditional SSA for else branch (line 161)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_257605) or more_types_in_union_257606):
        
        # Type idiom detected: calculating its left and rigth part (line 163)
        # Getting the type of 'int' (line 163)
        int_257613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 26), 'int')
        # Getting the type of 'worN' (line 163)
        worN_257614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 20), 'worN')
        
        (may_be_257615, more_types_in_union_257616) = may_be_subtype(int_257613, worN_257614)

        if may_be_257615:

            if more_types_in_union_257616:
                # Runtime conditional SSA (line 163)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'worN' (line 163)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 9), 'worN', remove_not_subtype_from_union(worN_257614, int))
            
            # Assigning a Name to a Name (line 164):
            
            # Assigning a Name to a Name (line 164):
            # Getting the type of 'worN' (line 164)
            worN_257617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 12), 'worN')
            # Assigning a type to the variable 'N' (line 164)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 8), 'N', worN_257617)
            
            # Assigning a Call to a Name (line 165):
            
            # Assigning a Call to a Name (line 165):
            
            # Call to findfreqs(...): (line 165)
            # Processing the call arguments (line 165)
            # Getting the type of 'b' (line 165)
            b_257619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 22), 'b', False)
            # Getting the type of 'a' (line 165)
            a_257620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 25), 'a', False)
            # Getting the type of 'N' (line 165)
            N_257621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 28), 'N', False)
            # Processing the call keyword arguments (line 165)
            kwargs_257622 = {}
            # Getting the type of 'findfreqs' (line 165)
            findfreqs_257618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 12), 'findfreqs', False)
            # Calling findfreqs(args, kwargs) (line 165)
            findfreqs_call_result_257623 = invoke(stypy.reporting.localization.Localization(__file__, 165, 12), findfreqs_257618, *[b_257619, a_257620, N_257621], **kwargs_257622)
            
            # Assigning a type to the variable 'w' (line 165)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 8), 'w', findfreqs_call_result_257623)

            if more_types_in_union_257616:
                # Runtime conditional SSA for else branch (line 163)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_257615) or more_types_in_union_257616):
            # Assigning a type to the variable 'worN' (line 163)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 9), 'worN', remove_subtype_from_union(worN_257614, int))
            
            # Assigning a Name to a Name (line 167):
            
            # Assigning a Name to a Name (line 167):
            # Getting the type of 'worN' (line 167)
            worN_257624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 12), 'worN')
            # Assigning a type to the variable 'w' (line 167)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'w', worN_257624)

            if (may_be_257615 and more_types_in_union_257616):
                # SSA join for if statement (line 163)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_257605 and more_types_in_union_257606):
            # SSA join for if statement (line 161)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 168):
    
    # Assigning a Call to a Name (line 168):
    
    # Call to atleast_1d(...): (line 168)
    # Processing the call arguments (line 168)
    # Getting the type of 'w' (line 168)
    w_257626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 19), 'w', False)
    # Processing the call keyword arguments (line 168)
    kwargs_257627 = {}
    # Getting the type of 'atleast_1d' (line 168)
    atleast_1d_257625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 168)
    atleast_1d_call_result_257628 = invoke(stypy.reporting.localization.Localization(__file__, 168, 8), atleast_1d_257625, *[w_257626], **kwargs_257627)
    
    # Assigning a type to the variable 'w' (line 168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'w', atleast_1d_call_result_257628)
    
    # Assigning a BinOp to a Name (line 169):
    
    # Assigning a BinOp to a Name (line 169):
    complex_257629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 8), 'complex')
    # Getting the type of 'w' (line 169)
    w_257630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 13), 'w')
    # Applying the binary operator '*' (line 169)
    result_mul_257631 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 8), '*', complex_257629, w_257630)
    
    # Assigning a type to the variable 's' (line 169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 4), 's', result_mul_257631)
    
    # Assigning a BinOp to a Name (line 170):
    
    # Assigning a BinOp to a Name (line 170):
    
    # Call to polyval(...): (line 170)
    # Processing the call arguments (line 170)
    # Getting the type of 'b' (line 170)
    b_257633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 16), 'b', False)
    # Getting the type of 's' (line 170)
    s_257634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 19), 's', False)
    # Processing the call keyword arguments (line 170)
    kwargs_257635 = {}
    # Getting the type of 'polyval' (line 170)
    polyval_257632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 8), 'polyval', False)
    # Calling polyval(args, kwargs) (line 170)
    polyval_call_result_257636 = invoke(stypy.reporting.localization.Localization(__file__, 170, 8), polyval_257632, *[b_257633, s_257634], **kwargs_257635)
    
    
    # Call to polyval(...): (line 170)
    # Processing the call arguments (line 170)
    # Getting the type of 'a' (line 170)
    a_257638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 32), 'a', False)
    # Getting the type of 's' (line 170)
    s_257639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 35), 's', False)
    # Processing the call keyword arguments (line 170)
    kwargs_257640 = {}
    # Getting the type of 'polyval' (line 170)
    polyval_257637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 24), 'polyval', False)
    # Calling polyval(args, kwargs) (line 170)
    polyval_call_result_257641 = invoke(stypy.reporting.localization.Localization(__file__, 170, 24), polyval_257637, *[a_257638, s_257639], **kwargs_257640)
    
    # Applying the binary operator 'div' (line 170)
    result_div_257642 = python_operator(stypy.reporting.localization.Localization(__file__, 170, 8), 'div', polyval_call_result_257636, polyval_call_result_257641)
    
    # Assigning a type to the variable 'h' (line 170)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 4), 'h', result_div_257642)
    
    # Type idiom detected: calculating its left and rigth part (line 171)
    # Getting the type of 'plot' (line 171)
    plot_257643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 4), 'plot')
    # Getting the type of 'None' (line 171)
    None_257644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 19), 'None')
    
    (may_be_257645, more_types_in_union_257646) = may_not_be_none(plot_257643, None_257644)

    if may_be_257645:

        if more_types_in_union_257646:
            # Runtime conditional SSA (line 171)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to plot(...): (line 172)
        # Processing the call arguments (line 172)
        # Getting the type of 'w' (line 172)
        w_257648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 13), 'w', False)
        # Getting the type of 'h' (line 172)
        h_257649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 16), 'h', False)
        # Processing the call keyword arguments (line 172)
        kwargs_257650 = {}
        # Getting the type of 'plot' (line 172)
        plot_257647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'plot', False)
        # Calling plot(args, kwargs) (line 172)
        plot_call_result_257651 = invoke(stypy.reporting.localization.Localization(__file__, 172, 8), plot_257647, *[w_257648, h_257649], **kwargs_257650)
        

        if more_types_in_union_257646:
            # SSA join for if statement (line 171)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 174)
    tuple_257652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 174, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 174)
    # Adding element type (line 174)
    # Getting the type of 'w' (line 174)
    w_257653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 11), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 174, 11), tuple_257652, w_257653)
    # Adding element type (line 174)
    # Getting the type of 'h' (line 174)
    h_257654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 14), 'h')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 174, 11), tuple_257652, h_257654)
    
    # Assigning a type to the variable 'stypy_return_type' (line 174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 174, 4), 'stypy_return_type', tuple_257652)
    
    # ################# End of 'freqs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'freqs' in the type store
    # Getting the type of 'stypy_return_type' (line 101)
    stypy_return_type_257655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_257655)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'freqs'
    return stypy_return_type_257655

# Assigning a type to the variable 'freqs' (line 101)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 0), 'freqs', freqs)

@norecursion
def freqs_zpk(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 177)
    None_257656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 28), 'None')
    defaults = [None_257656]
    # Create a new context for function 'freqs_zpk'
    module_type_store = module_type_store.open_function_context('freqs_zpk', 177, 0, False)
    
    # Passed parameters checking function
    freqs_zpk.stypy_localization = localization
    freqs_zpk.stypy_type_of_self = None
    freqs_zpk.stypy_type_store = module_type_store
    freqs_zpk.stypy_function_name = 'freqs_zpk'
    freqs_zpk.stypy_param_names_list = ['z', 'p', 'k', 'worN']
    freqs_zpk.stypy_varargs_param_name = None
    freqs_zpk.stypy_kwargs_param_name = None
    freqs_zpk.stypy_call_defaults = defaults
    freqs_zpk.stypy_call_varargs = varargs
    freqs_zpk.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'freqs_zpk', ['z', 'p', 'k', 'worN'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'freqs_zpk', localization, ['z', 'p', 'k', 'worN'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'freqs_zpk(...)' code ##################

    str_257657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, (-1)), 'str', "\n    Compute frequency response of analog filter.\n\n    Given the zeros `z`, poles `p`, and gain `k` of a filter, compute its\n    frequency response::\n\n                (jw-z[0]) * (jw-z[1]) * ... * (jw-z[-1])\n     H(w) = k * ----------------------------------------\n                (jw-p[0]) * (jw-p[1]) * ... * (jw-p[-1])\n\n    Parameters\n    ----------\n    z : array_like\n        Zeroes of a linear filter\n    p : array_like\n        Poles of a linear filter\n    k : scalar\n        Gain of a linear filter\n    worN : {None, int, array_like}, optional\n        If None, then compute at 200 frequencies around the interesting parts\n        of the response curve (determined by pole-zero locations).  If a single\n        integer, then compute at that many frequencies.  Otherwise, compute the\n        response at the angular frequencies (e.g. rad/s) given in `worN`.\n\n    Returns\n    -------\n    w : ndarray\n        The angular frequencies at which `h` was computed.\n    h : ndarray\n        The frequency response.\n\n    See Also\n    --------\n    freqs : Compute the frequency response of an analog filter in TF form\n    freqz : Compute the frequency response of a digital filter in TF form\n    freqz_zpk : Compute the frequency response of a digital filter in ZPK form\n\n    Notes\n    -----\n    .. versionadded: 0.19.0\n\n    Examples\n    --------\n    >>> from scipy.signal import freqs_zpk, iirfilter\n\n    >>> z, p, k = iirfilter(4, [1, 10], 1, 60, analog=True, ftype='cheby1',\n    ...                     output='zpk')\n\n    >>> w, h = freqs_zpk(z, p, k, worN=np.logspace(-1, 2, 1000))\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.semilogx(w, 20 * np.log10(abs(h)))\n    >>> plt.xlabel('Frequency')\n    >>> plt.ylabel('Amplitude response [dB]')\n    >>> plt.grid()\n    >>> plt.show()\n\n    ")
    
    # Assigning a Call to a Name (line 236):
    
    # Assigning a Call to a Name (line 236):
    
    # Call to asarray(...): (line 236)
    # Processing the call arguments (line 236)
    # Getting the type of 'k' (line 236)
    k_257660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 19), 'k', False)
    # Processing the call keyword arguments (line 236)
    kwargs_257661 = {}
    # Getting the type of 'np' (line 236)
    np_257658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 236)
    asarray_257659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 8), np_257658, 'asarray')
    # Calling asarray(args, kwargs) (line 236)
    asarray_call_result_257662 = invoke(stypy.reporting.localization.Localization(__file__, 236, 8), asarray_257659, *[k_257660], **kwargs_257661)
    
    # Assigning a type to the variable 'k' (line 236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 4), 'k', asarray_call_result_257662)
    
    
    # Getting the type of 'k' (line 237)
    k_257663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 7), 'k')
    # Obtaining the member 'size' of a type (line 237)
    size_257664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 7), k_257663, 'size')
    int_257665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 16), 'int')
    # Applying the binary operator '>' (line 237)
    result_gt_257666 = python_operator(stypy.reporting.localization.Localization(__file__, 237, 7), '>', size_257664, int_257665)
    
    # Testing the type of an if condition (line 237)
    if_condition_257667 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 237, 4), result_gt_257666)
    # Assigning a type to the variable 'if_condition_257667' (line 237)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 4), 'if_condition_257667', if_condition_257667)
    # SSA begins for if statement (line 237)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 238)
    # Processing the call arguments (line 238)
    str_257669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 25), 'str', 'k must be a single scalar gain')
    # Processing the call keyword arguments (line 238)
    kwargs_257670 = {}
    # Getting the type of 'ValueError' (line 238)
    ValueError_257668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 238)
    ValueError_call_result_257671 = invoke(stypy.reporting.localization.Localization(__file__, 238, 14), ValueError_257668, *[str_257669], **kwargs_257670)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 238, 8), ValueError_call_result_257671, 'raise parameter', BaseException)
    # SSA join for if statement (line 237)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 240)
    # Getting the type of 'worN' (line 240)
    worN_257672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 7), 'worN')
    # Getting the type of 'None' (line 240)
    None_257673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 15), 'None')
    
    (may_be_257674, more_types_in_union_257675) = may_be_none(worN_257672, None_257673)

    if may_be_257674:

        if more_types_in_union_257675:
            # Runtime conditional SSA (line 240)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 241):
        
        # Assigning a Call to a Name (line 241):
        
        # Call to findfreqs(...): (line 241)
        # Processing the call arguments (line 241)
        # Getting the type of 'z' (line 241)
        z_257677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 22), 'z', False)
        # Getting the type of 'p' (line 241)
        p_257678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 25), 'p', False)
        int_257679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 28), 'int')
        # Processing the call keyword arguments (line 241)
        str_257680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 38), 'str', 'zp')
        keyword_257681 = str_257680
        kwargs_257682 = {'kind': keyword_257681}
        # Getting the type of 'findfreqs' (line 241)
        findfreqs_257676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 12), 'findfreqs', False)
        # Calling findfreqs(args, kwargs) (line 241)
        findfreqs_call_result_257683 = invoke(stypy.reporting.localization.Localization(__file__, 241, 12), findfreqs_257676, *[z_257677, p_257678, int_257679], **kwargs_257682)
        
        # Assigning a type to the variable 'w' (line 241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'w', findfreqs_call_result_257683)

        if more_types_in_union_257675:
            # Runtime conditional SSA for else branch (line 240)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_257674) or more_types_in_union_257675):
        
        # Type idiom detected: calculating its left and rigth part (line 242)
        # Getting the type of 'int' (line 242)
        int_257684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 26), 'int')
        # Getting the type of 'worN' (line 242)
        worN_257685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 20), 'worN')
        
        (may_be_257686, more_types_in_union_257687) = may_be_subtype(int_257684, worN_257685)

        if may_be_257686:

            if more_types_in_union_257687:
                # Runtime conditional SSA (line 242)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'worN' (line 242)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 9), 'worN', remove_not_subtype_from_union(worN_257685, int))
            
            # Assigning a Name to a Name (line 243):
            
            # Assigning a Name to a Name (line 243):
            # Getting the type of 'worN' (line 243)
            worN_257688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 12), 'worN')
            # Assigning a type to the variable 'N' (line 243)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 8), 'N', worN_257688)
            
            # Assigning a Call to a Name (line 244):
            
            # Assigning a Call to a Name (line 244):
            
            # Call to findfreqs(...): (line 244)
            # Processing the call arguments (line 244)
            # Getting the type of 'z' (line 244)
            z_257690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 22), 'z', False)
            # Getting the type of 'p' (line 244)
            p_257691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 25), 'p', False)
            # Getting the type of 'N' (line 244)
            N_257692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 28), 'N', False)
            # Processing the call keyword arguments (line 244)
            str_257693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 36), 'str', 'zp')
            keyword_257694 = str_257693
            kwargs_257695 = {'kind': keyword_257694}
            # Getting the type of 'findfreqs' (line 244)
            findfreqs_257689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 12), 'findfreqs', False)
            # Calling findfreqs(args, kwargs) (line 244)
            findfreqs_call_result_257696 = invoke(stypy.reporting.localization.Localization(__file__, 244, 12), findfreqs_257689, *[z_257690, p_257691, N_257692], **kwargs_257695)
            
            # Assigning a type to the variable 'w' (line 244)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'w', findfreqs_call_result_257696)

            if more_types_in_union_257687:
                # Runtime conditional SSA for else branch (line 242)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_257686) or more_types_in_union_257687):
            # Assigning a type to the variable 'worN' (line 242)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 9), 'worN', remove_subtype_from_union(worN_257685, int))
            
            # Assigning a Name to a Name (line 246):
            
            # Assigning a Name to a Name (line 246):
            # Getting the type of 'worN' (line 246)
            worN_257697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 12), 'worN')
            # Assigning a type to the variable 'w' (line 246)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 246, 8), 'w', worN_257697)

            if (may_be_257686 and more_types_in_union_257687):
                # SSA join for if statement (line 242)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_257674 and more_types_in_union_257675):
            # SSA join for if statement (line 240)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 248):
    
    # Assigning a Call to a Name (line 248):
    
    # Call to atleast_1d(...): (line 248)
    # Processing the call arguments (line 248)
    # Getting the type of 'w' (line 248)
    w_257699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 19), 'w', False)
    # Processing the call keyword arguments (line 248)
    kwargs_257700 = {}
    # Getting the type of 'atleast_1d' (line 248)
    atleast_1d_257698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 248)
    atleast_1d_call_result_257701 = invoke(stypy.reporting.localization.Localization(__file__, 248, 8), atleast_1d_257698, *[w_257699], **kwargs_257700)
    
    # Assigning a type to the variable 'w' (line 248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 4), 'w', atleast_1d_call_result_257701)
    
    # Assigning a BinOp to a Name (line 249):
    
    # Assigning a BinOp to a Name (line 249):
    complex_257702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 8), 'complex')
    # Getting the type of 'w' (line 249)
    w_257703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 13), 'w')
    # Applying the binary operator '*' (line 249)
    result_mul_257704 = python_operator(stypy.reporting.localization.Localization(__file__, 249, 8), '*', complex_257702, w_257703)
    
    # Assigning a type to the variable 's' (line 249)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 's', result_mul_257704)
    
    # Assigning a Call to a Name (line 250):
    
    # Assigning a Call to a Name (line 250):
    
    # Call to polyvalfromroots(...): (line 250)
    # Processing the call arguments (line 250)
    # Getting the type of 's' (line 250)
    s_257706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 27), 's', False)
    # Getting the type of 'z' (line 250)
    z_257707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 30), 'z', False)
    # Processing the call keyword arguments (line 250)
    kwargs_257708 = {}
    # Getting the type of 'polyvalfromroots' (line 250)
    polyvalfromroots_257705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 10), 'polyvalfromroots', False)
    # Calling polyvalfromroots(args, kwargs) (line 250)
    polyvalfromroots_call_result_257709 = invoke(stypy.reporting.localization.Localization(__file__, 250, 10), polyvalfromroots_257705, *[s_257706, z_257707], **kwargs_257708)
    
    # Assigning a type to the variable 'num' (line 250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 4), 'num', polyvalfromroots_call_result_257709)
    
    # Assigning a Call to a Name (line 251):
    
    # Assigning a Call to a Name (line 251):
    
    # Call to polyvalfromroots(...): (line 251)
    # Processing the call arguments (line 251)
    # Getting the type of 's' (line 251)
    s_257711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 27), 's', False)
    # Getting the type of 'p' (line 251)
    p_257712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 30), 'p', False)
    # Processing the call keyword arguments (line 251)
    kwargs_257713 = {}
    # Getting the type of 'polyvalfromroots' (line 251)
    polyvalfromroots_257710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 10), 'polyvalfromroots', False)
    # Calling polyvalfromroots(args, kwargs) (line 251)
    polyvalfromroots_call_result_257714 = invoke(stypy.reporting.localization.Localization(__file__, 251, 10), polyvalfromroots_257710, *[s_257711, p_257712], **kwargs_257713)
    
    # Assigning a type to the variable 'den' (line 251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 4), 'den', polyvalfromroots_call_result_257714)
    
    # Assigning a BinOp to a Name (line 252):
    
    # Assigning a BinOp to a Name (line 252):
    # Getting the type of 'k' (line 252)
    k_257715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 8), 'k')
    # Getting the type of 'num' (line 252)
    num_257716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 12), 'num')
    # Applying the binary operator '*' (line 252)
    result_mul_257717 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 8), '*', k_257715, num_257716)
    
    # Getting the type of 'den' (line 252)
    den_257718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 16), 'den')
    # Applying the binary operator 'div' (line 252)
    result_div_257719 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 15), 'div', result_mul_257717, den_257718)
    
    # Assigning a type to the variable 'h' (line 252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 4), 'h', result_div_257719)
    
    # Obtaining an instance of the builtin type 'tuple' (line 253)
    tuple_257720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 253)
    # Adding element type (line 253)
    # Getting the type of 'w' (line 253)
    w_257721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 11), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 253, 11), tuple_257720, w_257721)
    # Adding element type (line 253)
    # Getting the type of 'h' (line 253)
    h_257722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 14), 'h')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 253, 11), tuple_257720, h_257722)
    
    # Assigning a type to the variable 'stypy_return_type' (line 253)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 4), 'stypy_return_type', tuple_257720)
    
    # ################# End of 'freqs_zpk(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'freqs_zpk' in the type store
    # Getting the type of 'stypy_return_type' (line 177)
    stypy_return_type_257723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_257723)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'freqs_zpk'
    return stypy_return_type_257723

# Assigning a type to the variable 'freqs_zpk' (line 177)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 0), 'freqs_zpk', freqs_zpk)

@norecursion
def freqz(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_257724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 15), 'int')
    # Getting the type of 'None' (line 256)
    None_257725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 23), 'None')
    # Getting the type of 'False' (line 256)
    False_257726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 35), 'False')
    # Getting the type of 'None' (line 256)
    None_257727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 47), 'None')
    defaults = [int_257724, None_257725, False_257726, None_257727]
    # Create a new context for function 'freqz'
    module_type_store = module_type_store.open_function_context('freqz', 256, 0, False)
    
    # Passed parameters checking function
    freqz.stypy_localization = localization
    freqz.stypy_type_of_self = None
    freqz.stypy_type_store = module_type_store
    freqz.stypy_function_name = 'freqz'
    freqz.stypy_param_names_list = ['b', 'a', 'worN', 'whole', 'plot']
    freqz.stypy_varargs_param_name = None
    freqz.stypy_kwargs_param_name = None
    freqz.stypy_call_defaults = defaults
    freqz.stypy_call_varargs = varargs
    freqz.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'freqz', ['b', 'a', 'worN', 'whole', 'plot'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'freqz', localization, ['b', 'a', 'worN', 'whole', 'plot'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'freqz(...)' code ##################

    str_257728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, (-1)), 'str', "\n    Compute the frequency response of a digital filter.\n\n    Given the M-order numerator `b` and N-order denominator `a` of a digital\n    filter, compute its frequency response::\n\n                 jw                 -jw              -jwM\n        jw    B(e  )    b[0] + b[1]e    + ... + b[M]e\n     H(e  ) = ------ = -----------------------------------\n                 jw                 -jw              -jwN\n              A(e  )    a[0] + a[1]e    + ... + a[N]e\n\n    Parameters\n    ----------\n    b : array_like\n        Numerator of a linear filter.  If `b` has dimension greater than 1,\n        it is assumed that the coefficients are stored in the first dimension,\n        and ``b.shape[1:]``, ``a.shape[1:]``, and the shape of the frequencies\n        array must be compatible for broadcasting.\n    a : array_like\n        Denominator of a linear filter.  If `b` has dimension greater than 1,\n        it is assumed that the coefficients are stored in the first dimension,\n        and ``b.shape[1:]``, ``a.shape[1:]``, and the shape of the frequencies\n        array must be compatible for broadcasting.\n    worN : {None, int, array_like}, optional\n        If None (default), then compute at 512 equally spaced frequencies.\n        If a single integer, then compute at that many frequencies.  This is\n        a convenient alternative to::\n\n            np.linspace(0, 2*pi if whole else pi, N, endpoint=False)\n\n        Using a number that is fast for FFT computations can result in\n        faster computations (see Notes).\n        If an array_like, compute the response at the frequencies given (in\n        radians/sample).\n    whole : bool, optional\n        Normally, frequencies are computed from 0 to the Nyquist frequency,\n        pi radians/sample (upper-half of unit-circle).  If `whole` is True,\n        compute frequencies from 0 to 2*pi radians/sample.\n    plot : callable\n        A callable that takes two arguments. If given, the return parameters\n        `w` and `h` are passed to plot. Useful for plotting the frequency\n        response inside `freqz`.\n\n    Returns\n    -------\n    w : ndarray\n        The normalized frequencies at which `h` was computed, in\n        radians/sample.\n    h : ndarray\n        The frequency response, as complex numbers.\n\n    See Also\n    --------\n    freqz_zpk\n    sosfreqz\n\n    Notes\n    -----\n    Using Matplotlib's :func:`matplotlib.pyplot.plot` function as the callable\n    for `plot` produces unexpected results, as this plots the real part of the\n    complex transfer function, not the magnitude.\n    Try ``lambda w, h: plot(w, np.abs(h))``.\n\n    A direct computation via (R)FFT is used to compute the frequency response\n    when the following conditions are met:\n\n    1. An integer value is given for `worN`.\n    2. `worN` is fast to compute via FFT (i.e.,\n       `next_fast_len(worN) <scipy.fftpack.next_fast_len>` equals `worN`).\n    3. The denominator coefficients are a single value (``a.shape[0] == 1``).\n    4. `worN` is at least as long as the numerator coefficients\n       (``worN >= b.shape[0]``).\n    5. If ``b.ndim > 1``, then ``b.shape[-1] == 1``.\n\n    For long FIR filters, the FFT approach can have lower error and be much\n    faster than the equivalent direct polynomial calculation.\n\n    Examples\n    --------\n    >>> from scipy import signal\n    >>> b = signal.firwin(80, 0.5, window=('kaiser', 8))\n    >>> w, h = signal.freqz(b)\n\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.title('Digital filter frequency response')\n    >>> ax1 = fig.add_subplot(111)\n\n    >>> plt.plot(w, 20 * np.log10(abs(h)), 'b')\n    >>> plt.ylabel('Amplitude [dB]', color='b')\n    >>> plt.xlabel('Frequency [rad/sample]')\n\n    >>> ax2 = ax1.twinx()\n    >>> angles = np.unwrap(np.angle(h))\n    >>> plt.plot(w, angles, 'g')\n    >>> plt.ylabel('Angle (radians)', color='g')\n    >>> plt.grid()\n    >>> plt.axis('tight')\n    >>> plt.show()\n\n    Broadcasting Examples\n\n    Suppose we have two FIR filters whose coefficients are stored in the\n    rows of an array with shape (2, 25).  For this demonstration we'll\n    use random data:\n\n    >>> np.random.seed(42)\n    >>> b = np.random.rand(2, 25)\n\n    To compute the frequency response for these two filters with one call\n    to `freqz`, we must pass in ``b.T``, because `freqz` expects the first\n    axis to hold the coefficients. We must then extend the shape with a\n    trivial dimension of length 1 to allow broadcasting with the array\n    of frequencies.  That is, we pass in ``b.T[..., np.newaxis]``, which has\n    shape (25, 2, 1):\n\n    >>> w, h = signal.freqz(b.T[..., np.newaxis], worN=1024)\n    >>> w.shape\n    (1024,)\n    >>> h.shape\n    (2, 1024)\n\n    Now suppose we have two transfer functions, with the same numerator\n    coefficients ``b = [0.5, 0.5]``. The coefficients for the two denominators\n    are stored in the first dimension of the two-dimensional array  `a`::\n\n        a = [   1      1  ]\n            [ -0.25, -0.5 ]\n\n    >>> b = np.array([0.5, 0.5])\n    >>> a = np.array([[1, 1], [-0.25, -0.5]])\n\n    Only `a` is more than one-dimensional.  To make it compatible for\n    broadcasting with the frequencies, we extend it with a trivial dimension\n    in the call to `freqz`:\n\n    >>> w, h = signal.freqz(b, a[..., np.newaxis], worN=1024)\n    >>> w.shape\n    (1024,)\n    >>> h.shape\n    (2, 1024)\n\n    ")
    
    # Assigning a Call to a Name (line 401):
    
    # Assigning a Call to a Name (line 401):
    
    # Call to atleast_1d(...): (line 401)
    # Processing the call arguments (line 401)
    # Getting the type of 'b' (line 401)
    b_257730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 19), 'b', False)
    # Processing the call keyword arguments (line 401)
    kwargs_257731 = {}
    # Getting the type of 'atleast_1d' (line 401)
    atleast_1d_257729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 401)
    atleast_1d_call_result_257732 = invoke(stypy.reporting.localization.Localization(__file__, 401, 8), atleast_1d_257729, *[b_257730], **kwargs_257731)
    
    # Assigning a type to the variable 'b' (line 401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 4), 'b', atleast_1d_call_result_257732)
    
    # Assigning a Call to a Name (line 402):
    
    # Assigning a Call to a Name (line 402):
    
    # Call to atleast_1d(...): (line 402)
    # Processing the call arguments (line 402)
    # Getting the type of 'a' (line 402)
    a_257734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 19), 'a', False)
    # Processing the call keyword arguments (line 402)
    kwargs_257735 = {}
    # Getting the type of 'atleast_1d' (line 402)
    atleast_1d_257733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 402)
    atleast_1d_call_result_257736 = invoke(stypy.reporting.localization.Localization(__file__, 402, 8), atleast_1d_257733, *[a_257734], **kwargs_257735)
    
    # Assigning a type to the variable 'a' (line 402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 4), 'a', atleast_1d_call_result_257736)
    
    # Type idiom detected: calculating its left and rigth part (line 404)
    # Getting the type of 'worN' (line 404)
    worN_257737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 7), 'worN')
    # Getting the type of 'None' (line 404)
    None_257738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 15), 'None')
    
    (may_be_257739, more_types_in_union_257740) = may_be_none(worN_257737, None_257738)

    if may_be_257739:

        if more_types_in_union_257740:
            # Runtime conditional SSA (line 404)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 405):
        
        # Assigning a Num to a Name (line 405):
        int_257741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 15), 'int')
        # Assigning a type to the variable 'worN' (line 405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 8), 'worN', int_257741)

        if more_types_in_union_257740:
            # SSA join for if statement (line 404)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 407):
    
    # Assigning a Name to a Name (line 407):
    # Getting the type of 'None' (line 407)
    None_257742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 8), 'None')
    # Assigning a type to the variable 'h' (line 407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 407, 4), 'h', None_257742)
    
    
    # SSA begins for try-except statement (line 408)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 409):
    
    # Assigning a Call to a Name (line 409):
    
    # Call to index(...): (line 409)
    # Processing the call arguments (line 409)
    # Getting the type of 'worN' (line 409)
    worN_257745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 30), 'worN', False)
    # Processing the call keyword arguments (line 409)
    kwargs_257746 = {}
    # Getting the type of 'operator' (line 409)
    operator_257743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 15), 'operator', False)
    # Obtaining the member 'index' of a type (line 409)
    index_257744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 15), operator_257743, 'index')
    # Calling index(args, kwargs) (line 409)
    index_call_result_257747 = invoke(stypy.reporting.localization.Localization(__file__, 409, 15), index_257744, *[worN_257745], **kwargs_257746)
    
    # Assigning a type to the variable 'worN' (line 409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'worN', index_call_result_257747)
    # SSA branch for the except part of a try statement (line 408)
    # SSA branch for the except 'TypeError' branch of a try statement (line 408)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 411):
    
    # Assigning a Call to a Name (line 411):
    
    # Call to atleast_1d(...): (line 411)
    # Processing the call arguments (line 411)
    # Getting the type of 'worN' (line 411)
    worN_257749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 23), 'worN', False)
    # Processing the call keyword arguments (line 411)
    kwargs_257750 = {}
    # Getting the type of 'atleast_1d' (line 411)
    atleast_1d_257748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 12), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 411)
    atleast_1d_call_result_257751 = invoke(stypy.reporting.localization.Localization(__file__, 411, 12), atleast_1d_257748, *[worN_257749], **kwargs_257750)
    
    # Assigning a type to the variable 'w' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 8), 'w', atleast_1d_call_result_257751)
    # SSA branch for the else branch of a try statement (line 408)
    module_type_store.open_ssa_branch('except else')
    
    
    # Getting the type of 'worN' (line 413)
    worN_257752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 11), 'worN')
    int_257753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 18), 'int')
    # Applying the binary operator '<' (line 413)
    result_lt_257754 = python_operator(stypy.reporting.localization.Localization(__file__, 413, 11), '<', worN_257752, int_257753)
    
    # Testing the type of an if condition (line 413)
    if_condition_257755 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 413, 8), result_lt_257754)
    # Assigning a type to the variable 'if_condition_257755' (line 413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'if_condition_257755', if_condition_257755)
    # SSA begins for if statement (line 413)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 414)
    # Processing the call arguments (line 414)
    str_257757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, 29), 'str', 'worN must be nonnegative, got %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 414)
    tuple_257758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, 67), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 414)
    # Adding element type (line 414)
    # Getting the type of 'worN' (line 414)
    worN_257759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 67), 'worN', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 414, 67), tuple_257758, worN_257759)
    
    # Applying the binary operator '%' (line 414)
    result_mod_257760 = python_operator(stypy.reporting.localization.Localization(__file__, 414, 29), '%', str_257757, tuple_257758)
    
    # Processing the call keyword arguments (line 414)
    kwargs_257761 = {}
    # Getting the type of 'ValueError' (line 414)
    ValueError_257756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 414)
    ValueError_call_result_257762 = invoke(stypy.reporting.localization.Localization(__file__, 414, 18), ValueError_257756, *[result_mod_257760], **kwargs_257761)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 414, 12), ValueError_call_result_257762, 'raise parameter', BaseException)
    # SSA join for if statement (line 413)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 415):
    
    # Assigning a IfExp to a Name (line 415):
    
    # Getting the type of 'whole' (line 415)
    whole_257763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 30), 'whole')
    # Testing the type of an if expression (line 415)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 415, 20), whole_257763)
    # SSA begins for if expression (line 415)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    int_257764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 20), 'int')
    # Getting the type of 'pi' (line 415)
    pi_257765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 24), 'pi')
    # Applying the binary operator '*' (line 415)
    result_mul_257766 = python_operator(stypy.reporting.localization.Localization(__file__, 415, 20), '*', int_257764, pi_257765)
    
    # SSA branch for the else part of an if expression (line 415)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'pi' (line 415)
    pi_257767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 41), 'pi')
    # SSA join for if expression (line 415)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_257768 = union_type.UnionType.add(result_mul_257766, pi_257767)
    
    # Assigning a type to the variable 'lastpoint' (line 415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 8), 'lastpoint', if_exp_257768)
    
    # Assigning a Call to a Name (line 416):
    
    # Assigning a Call to a Name (line 416):
    
    # Call to linspace(...): (line 416)
    # Processing the call arguments (line 416)
    int_257771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 24), 'int')
    # Getting the type of 'lastpoint' (line 416)
    lastpoint_257772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 27), 'lastpoint', False)
    # Getting the type of 'worN' (line 416)
    worN_257773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 38), 'worN', False)
    # Processing the call keyword arguments (line 416)
    # Getting the type of 'False' (line 416)
    False_257774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 53), 'False', False)
    keyword_257775 = False_257774
    kwargs_257776 = {'endpoint': keyword_257775}
    # Getting the type of 'np' (line 416)
    np_257769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 12), 'np', False)
    # Obtaining the member 'linspace' of a type (line 416)
    linspace_257770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 416, 12), np_257769, 'linspace')
    # Calling linspace(args, kwargs) (line 416)
    linspace_call_result_257777 = invoke(stypy.reporting.localization.Localization(__file__, 416, 12), linspace_257770, *[int_257771, lastpoint_257772, worN_257773], **kwargs_257776)
    
    # Assigning a type to the variable 'w' (line 416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 416, 8), 'w', linspace_call_result_257777)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'a' (line 417)
    a_257778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 12), 'a')
    # Obtaining the member 'size' of a type (line 417)
    size_257779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 12), a_257778, 'size')
    int_257780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 22), 'int')
    # Applying the binary operator '==' (line 417)
    result_eq_257781 = python_operator(stypy.reporting.localization.Localization(__file__, 417, 12), '==', size_257779, int_257780)
    
    
    # Getting the type of 'worN' (line 417)
    worN_257782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 28), 'worN')
    
    # Obtaining the type of the subscript
    int_257783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 44), 'int')
    # Getting the type of 'b' (line 417)
    b_257784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 36), 'b')
    # Obtaining the member 'shape' of a type (line 417)
    shape_257785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 36), b_257784, 'shape')
    # Obtaining the member '__getitem__' of a type (line 417)
    getitem___257786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 36), shape_257785, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 417)
    subscript_call_result_257787 = invoke(stypy.reporting.localization.Localization(__file__, 417, 36), getitem___257786, int_257783)
    
    # Applying the binary operator '>=' (line 417)
    result_ge_257788 = python_operator(stypy.reporting.localization.Localization(__file__, 417, 28), '>=', worN_257782, subscript_call_result_257787)
    
    # Applying the binary operator 'and' (line 417)
    result_and_keyword_257789 = python_operator(stypy.reporting.localization.Localization(__file__, 417, 12), 'and', result_eq_257781, result_ge_257788)
    
    
    # Call to next_fast_len(...): (line 418)
    # Processing the call arguments (line 418)
    # Getting the type of 'worN' (line 418)
    worN_257792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 38), 'worN', False)
    # Processing the call keyword arguments (line 418)
    kwargs_257793 = {}
    # Getting the type of 'fftpack' (line 418)
    fftpack_257790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 16), 'fftpack', False)
    # Obtaining the member 'next_fast_len' of a type (line 418)
    next_fast_len_257791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 16), fftpack_257790, 'next_fast_len')
    # Calling next_fast_len(args, kwargs) (line 418)
    next_fast_len_call_result_257794 = invoke(stypy.reporting.localization.Localization(__file__, 418, 16), next_fast_len_257791, *[worN_257792], **kwargs_257793)
    
    # Getting the type of 'worN' (line 418)
    worN_257795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 47), 'worN')
    # Applying the binary operator '==' (line 418)
    result_eq_257796 = python_operator(stypy.reporting.localization.Localization(__file__, 418, 16), '==', next_fast_len_call_result_257794, worN_257795)
    
    # Applying the binary operator 'and' (line 417)
    result_and_keyword_257797 = python_operator(stypy.reporting.localization.Localization(__file__, 417, 12), 'and', result_and_keyword_257789, result_eq_257796)
    
    # Evaluating a boolean operation
    
    # Getting the type of 'b' (line 419)
    b_257798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 17), 'b')
    # Obtaining the member 'ndim' of a type (line 419)
    ndim_257799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 17), b_257798, 'ndim')
    int_257800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 27), 'int')
    # Applying the binary operator '==' (line 419)
    result_eq_257801 = python_operator(stypy.reporting.localization.Localization(__file__, 419, 17), '==', ndim_257799, int_257800)
    
    
    
    # Obtaining the type of the subscript
    int_257802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 41), 'int')
    # Getting the type of 'b' (line 419)
    b_257803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 33), 'b')
    # Obtaining the member 'shape' of a type (line 419)
    shape_257804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 33), b_257803, 'shape')
    # Obtaining the member '__getitem__' of a type (line 419)
    getitem___257805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 33), shape_257804, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 419)
    subscript_call_result_257806 = invoke(stypy.reporting.localization.Localization(__file__, 419, 33), getitem___257805, int_257802)
    
    int_257807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 48), 'int')
    # Applying the binary operator '==' (line 419)
    result_eq_257808 = python_operator(stypy.reporting.localization.Localization(__file__, 419, 33), '==', subscript_call_result_257806, int_257807)
    
    # Applying the binary operator 'or' (line 419)
    result_or_keyword_257809 = python_operator(stypy.reporting.localization.Localization(__file__, 419, 17), 'or', result_eq_257801, result_eq_257808)
    
    # Applying the binary operator 'and' (line 417)
    result_and_keyword_257810 = python_operator(stypy.reporting.localization.Localization(__file__, 417, 12), 'and', result_and_keyword_257797, result_or_keyword_257809)
    
    # Testing the type of an if condition (line 417)
    if_condition_257811 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 417, 8), result_and_keyword_257810)
    # Assigning a type to the variable 'if_condition_257811' (line 417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 8), 'if_condition_257811', if_condition_257811)
    # SSA begins for if statement (line 417)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a IfExp to a Name (line 421):
    
    # Assigning a IfExp to a Name (line 421):
    
    # Getting the type of 'whole' (line 421)
    whole_257812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 28), 'whole')
    # Testing the type of an if expression (line 421)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 421, 20), whole_257812)
    # SSA begins for if expression (line 421)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'worN' (line 421)
    worN_257813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 20), 'worN')
    # SSA branch for the else part of an if expression (line 421)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'worN' (line 421)
    worN_257814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 39), 'worN')
    int_257815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, 46), 'int')
    # Applying the binary operator '*' (line 421)
    result_mul_257816 = python_operator(stypy.reporting.localization.Localization(__file__, 421, 39), '*', worN_257814, int_257815)
    
    # SSA join for if expression (line 421)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_257817 = union_type.UnionType.add(worN_257813, result_mul_257816)
    
    # Assigning a type to the variable 'n_fft' (line 421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 12), 'n_fft', if_exp_257817)
    
    
    # Evaluating a boolean operation
    
    # Call to isrealobj(...): (line 422)
    # Processing the call arguments (line 422)
    # Getting the type of 'b' (line 422)
    b_257820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 28), 'b', False)
    # Processing the call keyword arguments (line 422)
    kwargs_257821 = {}
    # Getting the type of 'np' (line 422)
    np_257818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 15), 'np', False)
    # Obtaining the member 'isrealobj' of a type (line 422)
    isrealobj_257819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 15), np_257818, 'isrealobj')
    # Calling isrealobj(args, kwargs) (line 422)
    isrealobj_call_result_257822 = invoke(stypy.reporting.localization.Localization(__file__, 422, 15), isrealobj_257819, *[b_257820], **kwargs_257821)
    
    
    # Call to isrealobj(...): (line 422)
    # Processing the call arguments (line 422)
    # Getting the type of 'a' (line 422)
    a_257825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 48), 'a', False)
    # Processing the call keyword arguments (line 422)
    kwargs_257826 = {}
    # Getting the type of 'np' (line 422)
    np_257823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 35), 'np', False)
    # Obtaining the member 'isrealobj' of a type (line 422)
    isrealobj_257824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 35), np_257823, 'isrealobj')
    # Calling isrealobj(args, kwargs) (line 422)
    isrealobj_call_result_257827 = invoke(stypy.reporting.localization.Localization(__file__, 422, 35), isrealobj_257824, *[a_257825], **kwargs_257826)
    
    # Applying the binary operator 'and' (line 422)
    result_and_keyword_257828 = python_operator(stypy.reporting.localization.Localization(__file__, 422, 15), 'and', isrealobj_call_result_257822, isrealobj_call_result_257827)
    
    # Testing the type of an if condition (line 422)
    if_condition_257829 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 422, 12), result_and_keyword_257828)
    # Assigning a type to the variable 'if_condition_257829' (line 422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 12), 'if_condition_257829', if_condition_257829)
    # SSA begins for if statement (line 422)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 423):
    
    # Assigning a Attribute to a Name (line 423):
    # Getting the type of 'np' (line 423)
    np_257830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 27), 'np')
    # Obtaining the member 'fft' of a type (line 423)
    fft_257831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 27), np_257830, 'fft')
    # Obtaining the member 'rfft' of a type (line 423)
    rfft_257832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 27), fft_257831, 'rfft')
    # Assigning a type to the variable 'fft_func' (line 423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 16), 'fft_func', rfft_257832)
    # SSA branch for the else part of an if statement (line 422)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 425):
    
    # Assigning a Attribute to a Name (line 425):
    # Getting the type of 'fftpack' (line 425)
    fftpack_257833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 27), 'fftpack')
    # Obtaining the member 'fft' of a type (line 425)
    fft_257834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 27), fftpack_257833, 'fft')
    # Assigning a type to the variable 'fft_func' (line 425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 16), 'fft_func', fft_257834)
    # SSA join for if statement (line 422)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 426):
    
    # Assigning a Subscript to a Name (line 426):
    
    # Obtaining the type of the subscript
    # Getting the type of 'worN' (line 426)
    worN_257835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 46), 'worN')
    slice_257836 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 426, 16), None, worN_257835, None)
    
    # Call to fft_func(...): (line 426)
    # Processing the call arguments (line 426)
    # Getting the type of 'b' (line 426)
    b_257838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 25), 'b', False)
    # Processing the call keyword arguments (line 426)
    # Getting the type of 'n_fft' (line 426)
    n_fft_257839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 30), 'n_fft', False)
    keyword_257840 = n_fft_257839
    int_257841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 42), 'int')
    keyword_257842 = int_257841
    kwargs_257843 = {'axis': keyword_257842, 'n': keyword_257840}
    # Getting the type of 'fft_func' (line 426)
    fft_func_257837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 16), 'fft_func', False)
    # Calling fft_func(args, kwargs) (line 426)
    fft_func_call_result_257844 = invoke(stypy.reporting.localization.Localization(__file__, 426, 16), fft_func_257837, *[b_257838], **kwargs_257843)
    
    # Obtaining the member '__getitem__' of a type (line 426)
    getitem___257845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 16), fft_func_call_result_257844, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 426)
    subscript_call_result_257846 = invoke(stypy.reporting.localization.Localization(__file__, 426, 16), getitem___257845, slice_257836)
    
    # Assigning a type to the variable 'h' (line 426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 12), 'h', subscript_call_result_257846)
    
    # Getting the type of 'h' (line 427)
    h_257847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 12), 'h')
    # Getting the type of 'a' (line 427)
    a_257848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 17), 'a')
    # Applying the binary operator 'div=' (line 427)
    result_div_257849 = python_operator(stypy.reporting.localization.Localization(__file__, 427, 12), 'div=', h_257847, a_257848)
    # Assigning a type to the variable 'h' (line 427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 12), 'h', result_div_257849)
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'fft_func' (line 428)
    fft_func_257850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 15), 'fft_func')
    # Getting the type of 'np' (line 428)
    np_257851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 27), 'np')
    # Obtaining the member 'fft' of a type (line 428)
    fft_257852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 27), np_257851, 'fft')
    # Obtaining the member 'rfft' of a type (line 428)
    rfft_257853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 27), fft_257852, 'rfft')
    # Applying the binary operator 'is' (line 428)
    result_is__257854 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 15), 'is', fft_func_257850, rfft_257853)
    
    # Getting the type of 'whole' (line 428)
    whole_257855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 43), 'whole')
    # Applying the binary operator 'and' (line 428)
    result_and_keyword_257856 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 15), 'and', result_is__257854, whole_257855)
    
    # Testing the type of an if condition (line 428)
    if_condition_257857 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 428, 12), result_and_keyword_257856)
    # Assigning a type to the variable 'if_condition_257857' (line 428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 12), 'if_condition_257857', if_condition_257857)
    # SSA begins for if statement (line 428)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a IfExp to a Name (line 431):
    
    # Assigning a IfExp to a Name (line 431):
    
    
    # Getting the type of 'n_fft' (line 431)
    n_fft_257858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 29), 'n_fft')
    int_257859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 37), 'int')
    # Applying the binary operator '%' (line 431)
    result_mod_257860 = python_operator(stypy.reporting.localization.Localization(__file__, 431, 29), '%', n_fft_257858, int_257859)
    
    int_257861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 42), 'int')
    # Applying the binary operator '==' (line 431)
    result_eq_257862 = python_operator(stypy.reporting.localization.Localization(__file__, 431, 29), '==', result_mod_257860, int_257861)
    
    # Testing the type of an if expression (line 431)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 431, 23), result_eq_257862)
    # SSA begins for if expression (line 431)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    int_257863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 23), 'int')
    # SSA branch for the else part of an if expression (line 431)
    module_type_store.open_ssa_branch('if expression else')
    int_257864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 49), 'int')
    # SSA join for if expression (line 431)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_257865 = union_type.UnionType.add(int_257863, int_257864)
    
    # Assigning a type to the variable 'stop' (line 431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 16), 'stop', if_exp_257865)
    
    # Assigning a Call to a Name (line 432):
    
    # Assigning a Call to a Name (line 432):
    
    # Call to slice(...): (line 432)
    # Processing the call arguments (line 432)
    # Getting the type of 'stop' (line 432)
    stop_257867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 31), 'stop', False)
    int_257868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, 37), 'int')
    int_257869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, 40), 'int')
    # Processing the call keyword arguments (line 432)
    kwargs_257870 = {}
    # Getting the type of 'slice' (line 432)
    slice_257866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 25), 'slice', False)
    # Calling slice(args, kwargs) (line 432)
    slice_call_result_257871 = invoke(stypy.reporting.localization.Localization(__file__, 432, 25), slice_257866, *[stop_257867, int_257868, int_257869], **kwargs_257870)
    
    # Assigning a type to the variable 'h_flip' (line 432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 16), 'h_flip', slice_call_result_257871)
    
    # Assigning a Call to a Name (line 433):
    
    # Assigning a Call to a Name (line 433):
    
    # Call to concatenate(...): (line 433)
    # Processing the call arguments (line 433)
    
    # Obtaining an instance of the builtin type 'tuple' (line 433)
    tuple_257874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 433)
    # Adding element type (line 433)
    # Getting the type of 'h' (line 433)
    h_257875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 36), 'h', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 433, 36), tuple_257874, h_257875)
    # Adding element type (line 433)
    
    # Call to conj(...): (line 433)
    # Processing the call keyword arguments (line 433)
    kwargs_257881 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'h_flip' (line 433)
    h_flip_257876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 41), 'h_flip', False)
    # Getting the type of 'h' (line 433)
    h_257877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 39), 'h', False)
    # Obtaining the member '__getitem__' of a type (line 433)
    getitem___257878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 39), h_257877, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 433)
    subscript_call_result_257879 = invoke(stypy.reporting.localization.Localization(__file__, 433, 39), getitem___257878, h_flip_257876)
    
    # Obtaining the member 'conj' of a type (line 433)
    conj_257880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 39), subscript_call_result_257879, 'conj')
    # Calling conj(args, kwargs) (line 433)
    conj_call_result_257882 = invoke(stypy.reporting.localization.Localization(__file__, 433, 39), conj_257880, *[], **kwargs_257881)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 433, 36), tuple_257874, conj_call_result_257882)
    
    # Processing the call keyword arguments (line 433)
    kwargs_257883 = {}
    # Getting the type of 'np' (line 433)
    np_257872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 20), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 433)
    concatenate_257873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 20), np_257872, 'concatenate')
    # Calling concatenate(args, kwargs) (line 433)
    concatenate_call_result_257884 = invoke(stypy.reporting.localization.Localization(__file__, 433, 20), concatenate_257873, *[tuple_257874], **kwargs_257883)
    
    # Assigning a type to the variable 'h' (line 433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 16), 'h', concatenate_call_result_257884)
    # SSA join for if statement (line 428)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'b' (line 434)
    b_257885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 15), 'b')
    # Obtaining the member 'ndim' of a type (line 434)
    ndim_257886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 15), b_257885, 'ndim')
    int_257887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 434, 24), 'int')
    # Applying the binary operator '>' (line 434)
    result_gt_257888 = python_operator(stypy.reporting.localization.Localization(__file__, 434, 15), '>', ndim_257886, int_257887)
    
    # Testing the type of an if condition (line 434)
    if_condition_257889 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 434, 12), result_gt_257888)
    # Assigning a type to the variable 'if_condition_257889' (line 434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 12), 'if_condition_257889', if_condition_257889)
    # SSA begins for if statement (line 434)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 436):
    
    # Assigning a Subscript to a Name (line 436):
    
    # Obtaining the type of the subscript
    Ellipsis_257890 = Ellipsis
    int_257891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 27), 'int')
    # Getting the type of 'h' (line 436)
    h_257892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 20), 'h')
    # Obtaining the member '__getitem__' of a type (line 436)
    getitem___257893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 20), h_257892, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 436)
    subscript_call_result_257894 = invoke(stypy.reporting.localization.Localization(__file__, 436, 20), getitem___257893, (Ellipsis_257890, int_257891))
    
    # Assigning a type to the variable 'h' (line 436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 16), 'h', subscript_call_result_257894)
    
    # Assigning a Call to a Name (line 438):
    
    # Assigning a Call to a Name (line 438):
    
    # Call to rollaxis(...): (line 438)
    # Processing the call arguments (line 438)
    # Getting the type of 'h' (line 438)
    h_257897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 32), 'h', False)
    int_257898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 35), 'int')
    # Getting the type of 'h' (line 438)
    h_257899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 38), 'h', False)
    # Obtaining the member 'ndim' of a type (line 438)
    ndim_257900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 38), h_257899, 'ndim')
    # Processing the call keyword arguments (line 438)
    kwargs_257901 = {}
    # Getting the type of 'np' (line 438)
    np_257895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 20), 'np', False)
    # Obtaining the member 'rollaxis' of a type (line 438)
    rollaxis_257896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 20), np_257895, 'rollaxis')
    # Calling rollaxis(args, kwargs) (line 438)
    rollaxis_call_result_257902 = invoke(stypy.reporting.localization.Localization(__file__, 438, 20), rollaxis_257896, *[h_257897, int_257898, ndim_257900], **kwargs_257901)
    
    # Assigning a type to the variable 'h' (line 438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 16), 'h', rollaxis_call_result_257902)
    # SSA join for if statement (line 434)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 417)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for try-except statement (line 408)
    module_type_store = module_type_store.join_ssa_context()
    
    # Deleting a member
    module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 439, 4), module_type_store, 'worN')
    
    # Type idiom detected: calculating its left and rigth part (line 441)
    # Getting the type of 'h' (line 441)
    h_257903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 7), 'h')
    # Getting the type of 'None' (line 441)
    None_257904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 12), 'None')
    
    (may_be_257905, more_types_in_union_257906) = may_be_none(h_257903, None_257904)

    if may_be_257905:

        if more_types_in_union_257906:
            # Runtime conditional SSA (line 441)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 442):
        
        # Assigning a Call to a Name (line 442):
        
        # Call to exp(...): (line 442)
        # Processing the call arguments (line 442)
        complex_257908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 442, 18), 'complex')
        # Getting the type of 'w' (line 442)
        w_257909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 24), 'w', False)
        # Applying the binary operator '*' (line 442)
        result_mul_257910 = python_operator(stypy.reporting.localization.Localization(__file__, 442, 18), '*', complex_257908, w_257909)
        
        # Processing the call keyword arguments (line 442)
        kwargs_257911 = {}
        # Getting the type of 'exp' (line 442)
        exp_257907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 14), 'exp', False)
        # Calling exp(args, kwargs) (line 442)
        exp_call_result_257912 = invoke(stypy.reporting.localization.Localization(__file__, 442, 14), exp_257907, *[result_mul_257910], **kwargs_257911)
        
        # Assigning a type to the variable 'zm1' (line 442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 8), 'zm1', exp_call_result_257912)
        
        # Assigning a BinOp to a Name (line 443):
        
        # Assigning a BinOp to a Name (line 443):
        
        # Call to npp_polyval(...): (line 443)
        # Processing the call arguments (line 443)
        # Getting the type of 'zm1' (line 443)
        zm1_257914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 25), 'zm1', False)
        # Getting the type of 'b' (line 443)
        b_257915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 30), 'b', False)
        # Processing the call keyword arguments (line 443)
        # Getting the type of 'False' (line 443)
        False_257916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 40), 'False', False)
        keyword_257917 = False_257916
        kwargs_257918 = {'tensor': keyword_257917}
        # Getting the type of 'npp_polyval' (line 443)
        npp_polyval_257913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 13), 'npp_polyval', False)
        # Calling npp_polyval(args, kwargs) (line 443)
        npp_polyval_call_result_257919 = invoke(stypy.reporting.localization.Localization(__file__, 443, 13), npp_polyval_257913, *[zm1_257914, b_257915], **kwargs_257918)
        
        
        # Call to npp_polyval(...): (line 444)
        # Processing the call arguments (line 444)
        # Getting the type of 'zm1' (line 444)
        zm1_257921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 25), 'zm1', False)
        # Getting the type of 'a' (line 444)
        a_257922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 30), 'a', False)
        # Processing the call keyword arguments (line 444)
        # Getting the type of 'False' (line 444)
        False_257923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 40), 'False', False)
        keyword_257924 = False_257923
        kwargs_257925 = {'tensor': keyword_257924}
        # Getting the type of 'npp_polyval' (line 444)
        npp_polyval_257920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 13), 'npp_polyval', False)
        # Calling npp_polyval(args, kwargs) (line 444)
        npp_polyval_call_result_257926 = invoke(stypy.reporting.localization.Localization(__file__, 444, 13), npp_polyval_257920, *[zm1_257921, a_257922], **kwargs_257925)
        
        # Applying the binary operator 'div' (line 443)
        result_div_257927 = python_operator(stypy.reporting.localization.Localization(__file__, 443, 13), 'div', npp_polyval_call_result_257919, npp_polyval_call_result_257926)
        
        # Assigning a type to the variable 'h' (line 443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 8), 'h', result_div_257927)

        if more_types_in_union_257906:
            # SSA join for if statement (line 441)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 445)
    # Getting the type of 'plot' (line 445)
    plot_257928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 4), 'plot')
    # Getting the type of 'None' (line 445)
    None_257929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 19), 'None')
    
    (may_be_257930, more_types_in_union_257931) = may_not_be_none(plot_257928, None_257929)

    if may_be_257930:

        if more_types_in_union_257931:
            # Runtime conditional SSA (line 445)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to plot(...): (line 446)
        # Processing the call arguments (line 446)
        # Getting the type of 'w' (line 446)
        w_257933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 13), 'w', False)
        # Getting the type of 'h' (line 446)
        h_257934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), 'h', False)
        # Processing the call keyword arguments (line 446)
        kwargs_257935 = {}
        # Getting the type of 'plot' (line 446)
        plot_257932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'plot', False)
        # Calling plot(args, kwargs) (line 446)
        plot_call_result_257936 = invoke(stypy.reporting.localization.Localization(__file__, 446, 8), plot_257932, *[w_257933, h_257934], **kwargs_257935)
        

        if more_types_in_union_257931:
            # SSA join for if statement (line 445)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 448)
    tuple_257937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 448)
    # Adding element type (line 448)
    # Getting the type of 'w' (line 448)
    w_257938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 11), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 448, 11), tuple_257937, w_257938)
    # Adding element type (line 448)
    # Getting the type of 'h' (line 448)
    h_257939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 14), 'h')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 448, 11), tuple_257937, h_257939)
    
    # Assigning a type to the variable 'stypy_return_type' (line 448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 4), 'stypy_return_type', tuple_257937)
    
    # ################# End of 'freqz(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'freqz' in the type store
    # Getting the type of 'stypy_return_type' (line 256)
    stypy_return_type_257940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_257940)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'freqz'
    return stypy_return_type_257940

# Assigning a type to the variable 'freqz' (line 256)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 0), 'freqz', freqz)

@norecursion
def freqz_zpk(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 451)
    None_257941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 28), 'None')
    # Getting the type of 'False' (line 451)
    False_257942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 40), 'False')
    defaults = [None_257941, False_257942]
    # Create a new context for function 'freqz_zpk'
    module_type_store = module_type_store.open_function_context('freqz_zpk', 451, 0, False)
    
    # Passed parameters checking function
    freqz_zpk.stypy_localization = localization
    freqz_zpk.stypy_type_of_self = None
    freqz_zpk.stypy_type_store = module_type_store
    freqz_zpk.stypy_function_name = 'freqz_zpk'
    freqz_zpk.stypy_param_names_list = ['z', 'p', 'k', 'worN', 'whole']
    freqz_zpk.stypy_varargs_param_name = None
    freqz_zpk.stypy_kwargs_param_name = None
    freqz_zpk.stypy_call_defaults = defaults
    freqz_zpk.stypy_call_varargs = varargs
    freqz_zpk.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'freqz_zpk', ['z', 'p', 'k', 'worN', 'whole'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'freqz_zpk', localization, ['z', 'p', 'k', 'worN', 'whole'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'freqz_zpk(...)' code ##################

    str_257943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, (-1)), 'str', "\n    Compute the frequency response of a digital filter in ZPK form.\n\n    Given the Zeros, Poles and Gain of a digital filter, compute its frequency\n    response::\n\n    :math:`H(z)=k \\prod_i (z - Z[i]) / \\prod_j (z - P[j])`\n\n    where :math:`k` is the `gain`, :math:`Z` are the `zeros` and :math:`P` are\n    the `poles`.\n\n    Parameters\n    ----------\n    z : array_like\n        Zeroes of a linear filter\n    p : array_like\n        Poles of a linear filter\n    k : scalar\n        Gain of a linear filter\n    worN : {None, int, array_like}, optional\n        If single integer (default 512, same as None), then compute at `worN`\n        frequencies equally spaced around the unit circle. If an array_like,\n        compute the response at the frequencies given (in radians/sample).\n    whole : bool, optional\n        Normally, frequencies are computed from 0 to the Nyquist frequency,\n        pi radians/sample (upper-half of unit-circle).  If `whole` is True,\n        compute frequencies from 0 to 2*pi radians/sample.\n\n    Returns\n    -------\n    w : ndarray\n        The normalized frequencies at which `h` was computed, in\n        radians/sample.\n    h : ndarray\n        The frequency response.\n\n    See Also\n    --------\n    freqs : Compute the frequency response of an analog filter in TF form\n    freqs_zpk : Compute the frequency response of an analog filter in ZPK form\n    freqz : Compute the frequency response of a digital filter in TF form\n\n    Notes\n    -----\n    .. versionadded: 0.19.0\n\n    Examples\n    --------\n    >>> from scipy import signal\n    >>> z, p, k = signal.butter(4, 0.2, output='zpk')\n    >>> w, h = signal.freqz_zpk(z, p, k)\n\n    >>> import matplotlib.pyplot as plt\n    >>> fig = plt.figure()\n    >>> plt.title('Digital filter frequency response')\n    >>> ax1 = fig.add_subplot(111)\n\n    >>> plt.plot(w, 20 * np.log10(abs(h)), 'b')\n    >>> plt.ylabel('Amplitude [dB]', color='b')\n    >>> plt.xlabel('Frequency [rad/sample]')\n\n    >>> ax2 = ax1.twinx()\n    >>> angles = np.unwrap(np.angle(h))\n    >>> plt.plot(w, angles, 'g')\n    >>> plt.ylabel('Angle (radians)', color='g')\n    >>> plt.grid()\n    >>> plt.axis('tight')\n    >>> plt.show()\n\n    ")
    
    # Assigning a Call to a Tuple (line 522):
    
    # Assigning a Subscript to a Name (line 522):
    
    # Obtaining the type of the subscript
    int_257944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 4), 'int')
    
    # Call to map(...): (line 522)
    # Processing the call arguments (line 522)
    # Getting the type of 'atleast_1d' (line 522)
    atleast_1d_257946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 522)
    tuple_257947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 522)
    # Adding element type (line 522)
    # Getting the type of 'z' (line 522)
    z_257948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 28), 'z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 522, 28), tuple_257947, z_257948)
    # Adding element type (line 522)
    # Getting the type of 'p' (line 522)
    p_257949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 31), 'p', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 522, 28), tuple_257947, p_257949)
    
    # Processing the call keyword arguments (line 522)
    kwargs_257950 = {}
    # Getting the type of 'map' (line 522)
    map_257945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 11), 'map', False)
    # Calling map(args, kwargs) (line 522)
    map_call_result_257951 = invoke(stypy.reporting.localization.Localization(__file__, 522, 11), map_257945, *[atleast_1d_257946, tuple_257947], **kwargs_257950)
    
    # Obtaining the member '__getitem__' of a type (line 522)
    getitem___257952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 4), map_call_result_257951, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 522)
    subscript_call_result_257953 = invoke(stypy.reporting.localization.Localization(__file__, 522, 4), getitem___257952, int_257944)
    
    # Assigning a type to the variable 'tuple_var_assignment_257304' (line 522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 4), 'tuple_var_assignment_257304', subscript_call_result_257953)
    
    # Assigning a Subscript to a Name (line 522):
    
    # Obtaining the type of the subscript
    int_257954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 4), 'int')
    
    # Call to map(...): (line 522)
    # Processing the call arguments (line 522)
    # Getting the type of 'atleast_1d' (line 522)
    atleast_1d_257956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 522)
    tuple_257957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 522)
    # Adding element type (line 522)
    # Getting the type of 'z' (line 522)
    z_257958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 28), 'z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 522, 28), tuple_257957, z_257958)
    # Adding element type (line 522)
    # Getting the type of 'p' (line 522)
    p_257959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 31), 'p', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 522, 28), tuple_257957, p_257959)
    
    # Processing the call keyword arguments (line 522)
    kwargs_257960 = {}
    # Getting the type of 'map' (line 522)
    map_257955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 11), 'map', False)
    # Calling map(args, kwargs) (line 522)
    map_call_result_257961 = invoke(stypy.reporting.localization.Localization(__file__, 522, 11), map_257955, *[atleast_1d_257956, tuple_257957], **kwargs_257960)
    
    # Obtaining the member '__getitem__' of a type (line 522)
    getitem___257962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 522, 4), map_call_result_257961, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 522)
    subscript_call_result_257963 = invoke(stypy.reporting.localization.Localization(__file__, 522, 4), getitem___257962, int_257954)
    
    # Assigning a type to the variable 'tuple_var_assignment_257305' (line 522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 4), 'tuple_var_assignment_257305', subscript_call_result_257963)
    
    # Assigning a Name to a Name (line 522):
    # Getting the type of 'tuple_var_assignment_257304' (line 522)
    tuple_var_assignment_257304_257964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 4), 'tuple_var_assignment_257304')
    # Assigning a type to the variable 'z' (line 522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 4), 'z', tuple_var_assignment_257304_257964)
    
    # Assigning a Name to a Name (line 522):
    # Getting the type of 'tuple_var_assignment_257305' (line 522)
    tuple_var_assignment_257305_257965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 4), 'tuple_var_assignment_257305')
    # Assigning a type to the variable 'p' (line 522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 7), 'p', tuple_var_assignment_257305_257965)
    
    # Getting the type of 'whole' (line 523)
    whole_257966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 7), 'whole')
    # Testing the type of an if condition (line 523)
    if_condition_257967 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 523, 4), whole_257966)
    # Assigning a type to the variable 'if_condition_257967' (line 523)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 4), 'if_condition_257967', if_condition_257967)
    # SSA begins for if statement (line 523)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 524):
    
    # Assigning a BinOp to a Name (line 524):
    int_257968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 20), 'int')
    # Getting the type of 'pi' (line 524)
    pi_257969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 24), 'pi')
    # Applying the binary operator '*' (line 524)
    result_mul_257970 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 20), '*', int_257968, pi_257969)
    
    # Assigning a type to the variable 'lastpoint' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 8), 'lastpoint', result_mul_257970)
    # SSA branch for the else part of an if statement (line 523)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 526):
    
    # Assigning a Name to a Name (line 526):
    # Getting the type of 'pi' (line 526)
    pi_257971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 20), 'pi')
    # Assigning a type to the variable 'lastpoint' (line 526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'lastpoint', pi_257971)
    # SSA join for if statement (line 523)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 527)
    # Getting the type of 'worN' (line 527)
    worN_257972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 7), 'worN')
    # Getting the type of 'None' (line 527)
    None_257973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 15), 'None')
    
    (may_be_257974, more_types_in_union_257975) = may_be_none(worN_257972, None_257973)

    if may_be_257974:

        if more_types_in_union_257975:
            # Runtime conditional SSA (line 527)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 528):
        
        # Assigning a Call to a Name (line 528):
        
        # Call to linspace(...): (line 528)
        # Processing the call arguments (line 528)
        int_257978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 27), 'int')
        # Getting the type of 'lastpoint' (line 528)
        lastpoint_257979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 30), 'lastpoint', False)
        int_257980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 41), 'int')
        # Processing the call keyword arguments (line 528)
        # Getting the type of 'False' (line 528)
        False_257981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 55), 'False', False)
        keyword_257982 = False_257981
        kwargs_257983 = {'endpoint': keyword_257982}
        # Getting the type of 'numpy' (line 528)
        numpy_257976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 12), 'numpy', False)
        # Obtaining the member 'linspace' of a type (line 528)
        linspace_257977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 12), numpy_257976, 'linspace')
        # Calling linspace(args, kwargs) (line 528)
        linspace_call_result_257984 = invoke(stypy.reporting.localization.Localization(__file__, 528, 12), linspace_257977, *[int_257978, lastpoint_257979, int_257980], **kwargs_257983)
        
        # Assigning a type to the variable 'w' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'w', linspace_call_result_257984)

        if more_types_in_union_257975:
            # Runtime conditional SSA for else branch (line 527)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_257974) or more_types_in_union_257975):
        
        # Type idiom detected: calculating its left and rigth part (line 529)
        # Getting the type of 'int' (line 529)
        int_257985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 26), 'int')
        # Getting the type of 'worN' (line 529)
        worN_257986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 20), 'worN')
        
        (may_be_257987, more_types_in_union_257988) = may_be_subtype(int_257985, worN_257986)

        if may_be_257987:

            if more_types_in_union_257988:
                # Runtime conditional SSA (line 529)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'worN' (line 529)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 9), 'worN', remove_not_subtype_from_union(worN_257986, int))
            
            # Assigning a Name to a Name (line 530):
            
            # Assigning a Name to a Name (line 530):
            # Getting the type of 'worN' (line 530)
            worN_257989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 12), 'worN')
            # Assigning a type to the variable 'N' (line 530)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'N', worN_257989)
            
            # Assigning a Call to a Name (line 531):
            
            # Assigning a Call to a Name (line 531):
            
            # Call to linspace(...): (line 531)
            # Processing the call arguments (line 531)
            int_257992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 27), 'int')
            # Getting the type of 'lastpoint' (line 531)
            lastpoint_257993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 30), 'lastpoint', False)
            # Getting the type of 'N' (line 531)
            N_257994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 41), 'N', False)
            # Processing the call keyword arguments (line 531)
            # Getting the type of 'False' (line 531)
            False_257995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 53), 'False', False)
            keyword_257996 = False_257995
            kwargs_257997 = {'endpoint': keyword_257996}
            # Getting the type of 'numpy' (line 531)
            numpy_257990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 12), 'numpy', False)
            # Obtaining the member 'linspace' of a type (line 531)
            linspace_257991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 12), numpy_257990, 'linspace')
            # Calling linspace(args, kwargs) (line 531)
            linspace_call_result_257998 = invoke(stypy.reporting.localization.Localization(__file__, 531, 12), linspace_257991, *[int_257992, lastpoint_257993, N_257994], **kwargs_257997)
            
            # Assigning a type to the variable 'w' (line 531)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'w', linspace_call_result_257998)

            if more_types_in_union_257988:
                # Runtime conditional SSA for else branch (line 529)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_257987) or more_types_in_union_257988):
            # Assigning a type to the variable 'worN' (line 529)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 9), 'worN', remove_subtype_from_union(worN_257986, int))
            
            # Assigning a Name to a Name (line 533):
            
            # Assigning a Name to a Name (line 533):
            # Getting the type of 'worN' (line 533)
            worN_257999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 12), 'worN')
            # Assigning a type to the variable 'w' (line 533)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 8), 'w', worN_257999)

            if (may_be_257987 and more_types_in_union_257988):
                # SSA join for if statement (line 529)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_257974 and more_types_in_union_257975):
            # SSA join for if statement (line 527)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 534):
    
    # Assigning a Call to a Name (line 534):
    
    # Call to atleast_1d(...): (line 534)
    # Processing the call arguments (line 534)
    # Getting the type of 'w' (line 534)
    w_258001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 19), 'w', False)
    # Processing the call keyword arguments (line 534)
    kwargs_258002 = {}
    # Getting the type of 'atleast_1d' (line 534)
    atleast_1d_258000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 534)
    atleast_1d_call_result_258003 = invoke(stypy.reporting.localization.Localization(__file__, 534, 8), atleast_1d_258000, *[w_258001], **kwargs_258002)
    
    # Assigning a type to the variable 'w' (line 534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'w', atleast_1d_call_result_258003)
    
    # Assigning a Call to a Name (line 535):
    
    # Assigning a Call to a Name (line 535):
    
    # Call to exp(...): (line 535)
    # Processing the call arguments (line 535)
    complex_258005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 14), 'complex')
    # Getting the type of 'w' (line 535)
    w_258006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 19), 'w', False)
    # Applying the binary operator '*' (line 535)
    result_mul_258007 = python_operator(stypy.reporting.localization.Localization(__file__, 535, 14), '*', complex_258005, w_258006)
    
    # Processing the call keyword arguments (line 535)
    kwargs_258008 = {}
    # Getting the type of 'exp' (line 535)
    exp_258004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 10), 'exp', False)
    # Calling exp(args, kwargs) (line 535)
    exp_call_result_258009 = invoke(stypy.reporting.localization.Localization(__file__, 535, 10), exp_258004, *[result_mul_258007], **kwargs_258008)
    
    # Assigning a type to the variable 'zm1' (line 535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 4), 'zm1', exp_call_result_258009)
    
    # Assigning a BinOp to a Name (line 536):
    
    # Assigning a BinOp to a Name (line 536):
    # Getting the type of 'k' (line 536)
    k_258010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 8), 'k')
    
    # Call to polyvalfromroots(...): (line 536)
    # Processing the call arguments (line 536)
    # Getting the type of 'zm1' (line 536)
    zm1_258012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 29), 'zm1', False)
    # Getting the type of 'z' (line 536)
    z_258013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 34), 'z', False)
    # Processing the call keyword arguments (line 536)
    kwargs_258014 = {}
    # Getting the type of 'polyvalfromroots' (line 536)
    polyvalfromroots_258011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 12), 'polyvalfromroots', False)
    # Calling polyvalfromroots(args, kwargs) (line 536)
    polyvalfromroots_call_result_258015 = invoke(stypy.reporting.localization.Localization(__file__, 536, 12), polyvalfromroots_258011, *[zm1_258012, z_258013], **kwargs_258014)
    
    # Applying the binary operator '*' (line 536)
    result_mul_258016 = python_operator(stypy.reporting.localization.Localization(__file__, 536, 8), '*', k_258010, polyvalfromroots_call_result_258015)
    
    
    # Call to polyvalfromroots(...): (line 536)
    # Processing the call arguments (line 536)
    # Getting the type of 'zm1' (line 536)
    zm1_258018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 56), 'zm1', False)
    # Getting the type of 'p' (line 536)
    p_258019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 61), 'p', False)
    # Processing the call keyword arguments (line 536)
    kwargs_258020 = {}
    # Getting the type of 'polyvalfromroots' (line 536)
    polyvalfromroots_258017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 39), 'polyvalfromroots', False)
    # Calling polyvalfromroots(args, kwargs) (line 536)
    polyvalfromroots_call_result_258021 = invoke(stypy.reporting.localization.Localization(__file__, 536, 39), polyvalfromroots_258017, *[zm1_258018, p_258019], **kwargs_258020)
    
    # Applying the binary operator 'div' (line 536)
    result_div_258022 = python_operator(stypy.reporting.localization.Localization(__file__, 536, 37), 'div', result_mul_258016, polyvalfromroots_call_result_258021)
    
    # Assigning a type to the variable 'h' (line 536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 4), 'h', result_div_258022)
    
    # Obtaining an instance of the builtin type 'tuple' (line 538)
    tuple_258023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 538)
    # Adding element type (line 538)
    # Getting the type of 'w' (line 538)
    w_258024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 11), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 11), tuple_258023, w_258024)
    # Adding element type (line 538)
    # Getting the type of 'h' (line 538)
    h_258025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 14), 'h')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 538, 11), tuple_258023, h_258025)
    
    # Assigning a type to the variable 'stypy_return_type' (line 538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 4), 'stypy_return_type', tuple_258023)
    
    # ################# End of 'freqz_zpk(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'freqz_zpk' in the type store
    # Getting the type of 'stypy_return_type' (line 451)
    stypy_return_type_258026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_258026)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'freqz_zpk'
    return stypy_return_type_258026

# Assigning a type to the variable 'freqz_zpk' (line 451)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 0), 'freqz_zpk', freqz_zpk)

@norecursion
def group_delay(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 541)
    None_258027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 26), 'None')
    # Getting the type of 'False' (line 541)
    False_258028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 38), 'False')
    defaults = [None_258027, False_258028]
    # Create a new context for function 'group_delay'
    module_type_store = module_type_store.open_function_context('group_delay', 541, 0, False)
    
    # Passed parameters checking function
    group_delay.stypy_localization = localization
    group_delay.stypy_type_of_self = None
    group_delay.stypy_type_store = module_type_store
    group_delay.stypy_function_name = 'group_delay'
    group_delay.stypy_param_names_list = ['system', 'w', 'whole']
    group_delay.stypy_varargs_param_name = None
    group_delay.stypy_kwargs_param_name = None
    group_delay.stypy_call_defaults = defaults
    group_delay.stypy_call_varargs = varargs
    group_delay.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'group_delay', ['system', 'w', 'whole'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'group_delay', localization, ['system', 'w', 'whole'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'group_delay(...)' code ##################

    str_258029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, (-1)), 'str', 'Compute the group delay of a digital filter.\n\n    The group delay measures by how many samples amplitude envelopes of\n    various spectral components of a signal are delayed by a filter.\n    It is formally defined as the derivative of continuous (unwrapped) phase::\n\n               d        jw\n     D(w) = - -- arg H(e)\n              dw\n\n    Parameters\n    ----------\n    system : tuple of array_like (b, a)\n        Numerator and denominator coefficients of a filter transfer function.\n    w : {None, int, array-like}, optional\n        If None (default), then compute at 512 frequencies equally spaced\n        around the unit circle.\n        If a single integer, then compute at that many frequencies.\n        If array, compute the delay at the frequencies given\n        (in radians/sample).\n    whole : bool, optional\n        Normally, frequencies are computed from 0 to the Nyquist frequency,\n        pi radians/sample (upper-half of unit-circle).  If `whole` is True,\n        compute frequencies from 0 to ``2*pi`` radians/sample.\n\n    Returns\n    -------\n    w : ndarray\n        The normalized frequencies at which the group delay was computed,\n        in radians/sample.\n    gd : ndarray\n        The group delay.\n\n    Notes\n    -----\n    The similar function in MATLAB is called `grpdelay`.\n\n    If the transfer function :math:`H(z)` has zeros or poles on the unit\n    circle, the group delay at corresponding frequencies is undefined.\n    When such a case arises the warning is raised and the group delay\n    is set to 0 at those frequencies.\n\n    For the details of numerical computation of the group delay refer to [1]_.\n\n    .. versionadded: 0.16.0\n\n    See Also\n    --------\n    freqz : Frequency response of a digital filter\n\n    References\n    ----------\n    .. [1] Richard G. Lyons, "Understanding Digital Signal Processing,\n           3rd edition", p. 830.\n\n    Examples\n    --------\n    >>> from scipy import signal\n    >>> b, a = signal.iirdesign(0.1, 0.3, 5, 50, ftype=\'cheby1\')\n    >>> w, gd = signal.group_delay((b, a))\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.title(\'Digital filter group delay\')\n    >>> plt.plot(w, gd)\n    >>> plt.ylabel(\'Group delay [samples]\')\n    >>> plt.xlabel(\'Frequency [rad/sample]\')\n    >>> plt.show()\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 611)
    # Getting the type of 'w' (line 611)
    w_258030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 7), 'w')
    # Getting the type of 'None' (line 611)
    None_258031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 12), 'None')
    
    (may_be_258032, more_types_in_union_258033) = may_be_none(w_258030, None_258031)

    if may_be_258032:

        if more_types_in_union_258033:
            # Runtime conditional SSA (line 611)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 612):
        
        # Assigning a Num to a Name (line 612):
        int_258034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 12), 'int')
        # Assigning a type to the variable 'w' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'w', int_258034)

        if more_types_in_union_258033:
            # SSA join for if statement (line 611)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 614)
    # Getting the type of 'int' (line 614)
    int_258035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 21), 'int')
    # Getting the type of 'w' (line 614)
    w_258036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 18), 'w')
    
    (may_be_258037, more_types_in_union_258038) = may_be_subtype(int_258035, w_258036)

    if may_be_258037:

        if more_types_in_union_258038:
            # Runtime conditional SSA (line 614)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'w' (line 614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 4), 'w', remove_not_subtype_from_union(w_258036, int))
        
        # Getting the type of 'whole' (line 615)
        whole_258039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 11), 'whole')
        # Testing the type of an if condition (line 615)
        if_condition_258040 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 615, 8), whole_258039)
        # Assigning a type to the variable 'if_condition_258040' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 8), 'if_condition_258040', if_condition_258040)
        # SSA begins for if statement (line 615)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 616):
        
        # Assigning a Call to a Name (line 616):
        
        # Call to linspace(...): (line 616)
        # Processing the call arguments (line 616)
        int_258043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 28), 'int')
        int_258044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 31), 'int')
        # Getting the type of 'pi' (line 616)
        pi_258045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 35), 'pi', False)
        # Applying the binary operator '*' (line 616)
        result_mul_258046 = python_operator(stypy.reporting.localization.Localization(__file__, 616, 31), '*', int_258044, pi_258045)
        
        # Getting the type of 'w' (line 616)
        w_258047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 39), 'w', False)
        # Processing the call keyword arguments (line 616)
        # Getting the type of 'False' (line 616)
        False_258048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 51), 'False', False)
        keyword_258049 = False_258048
        kwargs_258050 = {'endpoint': keyword_258049}
        # Getting the type of 'np' (line 616)
        np_258041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 16), 'np', False)
        # Obtaining the member 'linspace' of a type (line 616)
        linspace_258042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 16), np_258041, 'linspace')
        # Calling linspace(args, kwargs) (line 616)
        linspace_call_result_258051 = invoke(stypy.reporting.localization.Localization(__file__, 616, 16), linspace_258042, *[int_258043, result_mul_258046, w_258047], **kwargs_258050)
        
        # Assigning a type to the variable 'w' (line 616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 12), 'w', linspace_call_result_258051)
        # SSA branch for the else part of an if statement (line 615)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 618):
        
        # Assigning a Call to a Name (line 618):
        
        # Call to linspace(...): (line 618)
        # Processing the call arguments (line 618)
        int_258054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 618, 28), 'int')
        # Getting the type of 'pi' (line 618)
        pi_258055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 31), 'pi', False)
        # Getting the type of 'w' (line 618)
        w_258056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 35), 'w', False)
        # Processing the call keyword arguments (line 618)
        # Getting the type of 'False' (line 618)
        False_258057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 47), 'False', False)
        keyword_258058 = False_258057
        kwargs_258059 = {'endpoint': keyword_258058}
        # Getting the type of 'np' (line 618)
        np_258052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 16), 'np', False)
        # Obtaining the member 'linspace' of a type (line 618)
        linspace_258053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 16), np_258052, 'linspace')
        # Calling linspace(args, kwargs) (line 618)
        linspace_call_result_258060 = invoke(stypy.reporting.localization.Localization(__file__, 618, 16), linspace_258053, *[int_258054, pi_258055, w_258056], **kwargs_258059)
        
        # Assigning a type to the variable 'w' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 12), 'w', linspace_call_result_258060)
        # SSA join for if statement (line 615)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_258038:
            # SSA join for if statement (line 614)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 620):
    
    # Assigning a Call to a Name (line 620):
    
    # Call to atleast_1d(...): (line 620)
    # Processing the call arguments (line 620)
    # Getting the type of 'w' (line 620)
    w_258063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 22), 'w', False)
    # Processing the call keyword arguments (line 620)
    kwargs_258064 = {}
    # Getting the type of 'np' (line 620)
    np_258061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 620)
    atleast_1d_258062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 8), np_258061, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 620)
    atleast_1d_call_result_258065 = invoke(stypy.reporting.localization.Localization(__file__, 620, 8), atleast_1d_258062, *[w_258063], **kwargs_258064)
    
    # Assigning a type to the variable 'w' (line 620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 4), 'w', atleast_1d_call_result_258065)
    
    # Assigning a Call to a Tuple (line 621):
    
    # Assigning a Subscript to a Name (line 621):
    
    # Obtaining the type of the subscript
    int_258066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 4), 'int')
    
    # Call to map(...): (line 621)
    # Processing the call arguments (line 621)
    # Getting the type of 'np' (line 621)
    np_258068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 15), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 621)
    atleast_1d_258069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 15), np_258068, 'atleast_1d')
    # Getting the type of 'system' (line 621)
    system_258070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 30), 'system', False)
    # Processing the call keyword arguments (line 621)
    kwargs_258071 = {}
    # Getting the type of 'map' (line 621)
    map_258067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 11), 'map', False)
    # Calling map(args, kwargs) (line 621)
    map_call_result_258072 = invoke(stypy.reporting.localization.Localization(__file__, 621, 11), map_258067, *[atleast_1d_258069, system_258070], **kwargs_258071)
    
    # Obtaining the member '__getitem__' of a type (line 621)
    getitem___258073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 4), map_call_result_258072, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 621)
    subscript_call_result_258074 = invoke(stypy.reporting.localization.Localization(__file__, 621, 4), getitem___258073, int_258066)
    
    # Assigning a type to the variable 'tuple_var_assignment_257306' (line 621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'tuple_var_assignment_257306', subscript_call_result_258074)
    
    # Assigning a Subscript to a Name (line 621):
    
    # Obtaining the type of the subscript
    int_258075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 4), 'int')
    
    # Call to map(...): (line 621)
    # Processing the call arguments (line 621)
    # Getting the type of 'np' (line 621)
    np_258077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 15), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 621)
    atleast_1d_258078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 15), np_258077, 'atleast_1d')
    # Getting the type of 'system' (line 621)
    system_258079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 30), 'system', False)
    # Processing the call keyword arguments (line 621)
    kwargs_258080 = {}
    # Getting the type of 'map' (line 621)
    map_258076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 11), 'map', False)
    # Calling map(args, kwargs) (line 621)
    map_call_result_258081 = invoke(stypy.reporting.localization.Localization(__file__, 621, 11), map_258076, *[atleast_1d_258078, system_258079], **kwargs_258080)
    
    # Obtaining the member '__getitem__' of a type (line 621)
    getitem___258082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 4), map_call_result_258081, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 621)
    subscript_call_result_258083 = invoke(stypy.reporting.localization.Localization(__file__, 621, 4), getitem___258082, int_258075)
    
    # Assigning a type to the variable 'tuple_var_assignment_257307' (line 621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'tuple_var_assignment_257307', subscript_call_result_258083)
    
    # Assigning a Name to a Name (line 621):
    # Getting the type of 'tuple_var_assignment_257306' (line 621)
    tuple_var_assignment_257306_258084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'tuple_var_assignment_257306')
    # Assigning a type to the variable 'b' (line 621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'b', tuple_var_assignment_257306_258084)
    
    # Assigning a Name to a Name (line 621):
    # Getting the type of 'tuple_var_assignment_257307' (line 621)
    tuple_var_assignment_257307_258085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'tuple_var_assignment_257307')
    # Assigning a type to the variable 'a' (line 621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 7), 'a', tuple_var_assignment_257307_258085)
    
    # Assigning a Call to a Name (line 622):
    
    # Assigning a Call to a Name (line 622):
    
    # Call to convolve(...): (line 622)
    # Processing the call arguments (line 622)
    # Getting the type of 'b' (line 622)
    b_258088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 20), 'b', False)
    
    # Obtaining the type of the subscript
    int_258089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 27), 'int')
    slice_258090 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 622, 23), None, None, int_258089)
    # Getting the type of 'a' (line 622)
    a_258091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 23), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 622)
    getitem___258092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 23), a_258091, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 622)
    subscript_call_result_258093 = invoke(stypy.reporting.localization.Localization(__file__, 622, 23), getitem___258092, slice_258090)
    
    # Processing the call keyword arguments (line 622)
    kwargs_258094 = {}
    # Getting the type of 'np' (line 622)
    np_258086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 8), 'np', False)
    # Obtaining the member 'convolve' of a type (line 622)
    convolve_258087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 8), np_258086, 'convolve')
    # Calling convolve(args, kwargs) (line 622)
    convolve_call_result_258095 = invoke(stypy.reporting.localization.Localization(__file__, 622, 8), convolve_258087, *[b_258088, subscript_call_result_258093], **kwargs_258094)
    
    # Assigning a type to the variable 'c' (line 622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'c', convolve_call_result_258095)
    
    # Assigning a BinOp to a Name (line 623):
    
    # Assigning a BinOp to a Name (line 623):
    # Getting the type of 'c' (line 623)
    c_258096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 9), 'c')
    
    # Call to arange(...): (line 623)
    # Processing the call arguments (line 623)
    # Getting the type of 'c' (line 623)
    c_258099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 23), 'c', False)
    # Obtaining the member 'size' of a type (line 623)
    size_258100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 23), c_258099, 'size')
    # Processing the call keyword arguments (line 623)
    kwargs_258101 = {}
    # Getting the type of 'np' (line 623)
    np_258097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 13), 'np', False)
    # Obtaining the member 'arange' of a type (line 623)
    arange_258098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 13), np_258097, 'arange')
    # Calling arange(args, kwargs) (line 623)
    arange_call_result_258102 = invoke(stypy.reporting.localization.Localization(__file__, 623, 13), arange_258098, *[size_258100], **kwargs_258101)
    
    # Applying the binary operator '*' (line 623)
    result_mul_258103 = python_operator(stypy.reporting.localization.Localization(__file__, 623, 9), '*', c_258096, arange_call_result_258102)
    
    # Assigning a type to the variable 'cr' (line 623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 4), 'cr', result_mul_258103)
    
    # Assigning a Call to a Name (line 624):
    
    # Assigning a Call to a Name (line 624):
    
    # Call to exp(...): (line 624)
    # Processing the call arguments (line 624)
    complex_258106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 624, 15), 'complex')
    # Getting the type of 'w' (line 624)
    w_258107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 21), 'w', False)
    # Applying the binary operator '*' (line 624)
    result_mul_258108 = python_operator(stypy.reporting.localization.Localization(__file__, 624, 15), '*', complex_258106, w_258107)
    
    # Processing the call keyword arguments (line 624)
    kwargs_258109 = {}
    # Getting the type of 'np' (line 624)
    np_258104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 8), 'np', False)
    # Obtaining the member 'exp' of a type (line 624)
    exp_258105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 8), np_258104, 'exp')
    # Calling exp(args, kwargs) (line 624)
    exp_call_result_258110 = invoke(stypy.reporting.localization.Localization(__file__, 624, 8), exp_258105, *[result_mul_258108], **kwargs_258109)
    
    # Assigning a type to the variable 'z' (line 624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 4), 'z', exp_call_result_258110)
    
    # Assigning a Call to a Name (line 625):
    
    # Assigning a Call to a Name (line 625):
    
    # Call to polyval(...): (line 625)
    # Processing the call arguments (line 625)
    
    # Obtaining the type of the subscript
    int_258113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 625, 26), 'int')
    slice_258114 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 625, 21), None, None, int_258113)
    # Getting the type of 'cr' (line 625)
    cr_258115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 21), 'cr', False)
    # Obtaining the member '__getitem__' of a type (line 625)
    getitem___258116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 21), cr_258115, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 625)
    subscript_call_result_258117 = invoke(stypy.reporting.localization.Localization(__file__, 625, 21), getitem___258116, slice_258114)
    
    # Getting the type of 'z' (line 625)
    z_258118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 31), 'z', False)
    # Processing the call keyword arguments (line 625)
    kwargs_258119 = {}
    # Getting the type of 'np' (line 625)
    np_258111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 10), 'np', False)
    # Obtaining the member 'polyval' of a type (line 625)
    polyval_258112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 10), np_258111, 'polyval')
    # Calling polyval(args, kwargs) (line 625)
    polyval_call_result_258120 = invoke(stypy.reporting.localization.Localization(__file__, 625, 10), polyval_258112, *[subscript_call_result_258117, z_258118], **kwargs_258119)
    
    # Assigning a type to the variable 'num' (line 625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 4), 'num', polyval_call_result_258120)
    
    # Assigning a Call to a Name (line 626):
    
    # Assigning a Call to a Name (line 626):
    
    # Call to polyval(...): (line 626)
    # Processing the call arguments (line 626)
    
    # Obtaining the type of the subscript
    int_258123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 25), 'int')
    slice_258124 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 626, 21), None, None, int_258123)
    # Getting the type of 'c' (line 626)
    c_258125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 21), 'c', False)
    # Obtaining the member '__getitem__' of a type (line 626)
    getitem___258126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 21), c_258125, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 626)
    subscript_call_result_258127 = invoke(stypy.reporting.localization.Localization(__file__, 626, 21), getitem___258126, slice_258124)
    
    # Getting the type of 'z' (line 626)
    z_258128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 30), 'z', False)
    # Processing the call keyword arguments (line 626)
    kwargs_258129 = {}
    # Getting the type of 'np' (line 626)
    np_258121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 10), 'np', False)
    # Obtaining the member 'polyval' of a type (line 626)
    polyval_258122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 10), np_258121, 'polyval')
    # Calling polyval(args, kwargs) (line 626)
    polyval_call_result_258130 = invoke(stypy.reporting.localization.Localization(__file__, 626, 10), polyval_258122, *[subscript_call_result_258127, z_258128], **kwargs_258129)
    
    # Assigning a type to the variable 'den' (line 626)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 4), 'den', polyval_call_result_258130)
    
    # Assigning a Compare to a Name (line 627):
    
    # Assigning a Compare to a Name (line 627):
    
    
    # Call to absolute(...): (line 627)
    # Processing the call arguments (line 627)
    # Getting the type of 'den' (line 627)
    den_258133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 27), 'den', False)
    # Processing the call keyword arguments (line 627)
    kwargs_258134 = {}
    # Getting the type of 'np' (line 627)
    np_258131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 15), 'np', False)
    # Obtaining the member 'absolute' of a type (line 627)
    absolute_258132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 15), np_258131, 'absolute')
    # Calling absolute(args, kwargs) (line 627)
    absolute_call_result_258135 = invoke(stypy.reporting.localization.Localization(__file__, 627, 15), absolute_258132, *[den_258133], **kwargs_258134)
    
    int_258136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 34), 'int')
    # Getting the type of 'EPSILON' (line 627)
    EPSILON_258137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 39), 'EPSILON')
    # Applying the binary operator '*' (line 627)
    result_mul_258138 = python_operator(stypy.reporting.localization.Localization(__file__, 627, 34), '*', int_258136, EPSILON_258137)
    
    # Applying the binary operator '<' (line 627)
    result_lt_258139 = python_operator(stypy.reporting.localization.Localization(__file__, 627, 15), '<', absolute_call_result_258135, result_mul_258138)
    
    # Assigning a type to the variable 'singular' (line 627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 4), 'singular', result_lt_258139)
    
    
    # Call to any(...): (line 628)
    # Processing the call arguments (line 628)
    # Getting the type of 'singular' (line 628)
    singular_258142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 14), 'singular', False)
    # Processing the call keyword arguments (line 628)
    kwargs_258143 = {}
    # Getting the type of 'np' (line 628)
    np_258140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 7), 'np', False)
    # Obtaining the member 'any' of a type (line 628)
    any_258141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 7), np_258140, 'any')
    # Calling any(args, kwargs) (line 628)
    any_call_result_258144 = invoke(stypy.reporting.localization.Localization(__file__, 628, 7), any_258141, *[singular_258142], **kwargs_258143)
    
    # Testing the type of an if condition (line 628)
    if_condition_258145 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 628, 4), any_call_result_258144)
    # Assigning a type to the variable 'if_condition_258145' (line 628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 4), 'if_condition_258145', if_condition_258145)
    # SSA begins for if statement (line 628)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 629)
    # Processing the call arguments (line 629)
    
    # Call to format(...): (line 630)
    # Processing the call arguments (line 630)
    
    # Call to join(...): (line 631)
    # Processing the call arguments (line 631)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 631, 29, True)
    # Calculating comprehension expression
    
    # Obtaining the type of the subscript
    # Getting the type of 'singular' (line 631)
    singular_258157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 62), 'singular', False)
    # Getting the type of 'w' (line 631)
    w_258158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 60), 'w', False)
    # Obtaining the member '__getitem__' of a type (line 631)
    getitem___258159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 60), w_258158, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 631)
    subscript_call_result_258160 = invoke(stypy.reporting.localization.Localization(__file__, 631, 60), getitem___258159, singular_258157)
    
    comprehension_258161 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 631, 29), subscript_call_result_258160)
    # Assigning a type to the variable 'ws' (line 631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 631, 29), 'ws', comprehension_258161)
    
    # Call to format(...): (line 631)
    # Processing the call arguments (line 631)
    # Getting the type of 'ws' (line 631)
    ws_258154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 46), 'ws', False)
    # Processing the call keyword arguments (line 631)
    kwargs_258155 = {}
    str_258152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 631, 29), 'str', '{0:.3f}')
    # Obtaining the member 'format' of a type (line 631)
    format_258153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 29), str_258152, 'format')
    # Calling format(args, kwargs) (line 631)
    format_call_result_258156 = invoke(stypy.reporting.localization.Localization(__file__, 631, 29), format_258153, *[ws_258154], **kwargs_258155)
    
    list_258162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 631, 29), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 631, 29), list_258162, format_call_result_258156)
    # Processing the call keyword arguments (line 631)
    kwargs_258163 = {}
    str_258150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 631, 19), 'str', ', ')
    # Obtaining the member 'join' of a type (line 631)
    join_258151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 19), str_258150, 'join')
    # Calling join(args, kwargs) (line 631)
    join_call_result_258164 = invoke(stypy.reporting.localization.Localization(__file__, 631, 19), join_258151, *[list_258162], **kwargs_258163)
    
    # Processing the call keyword arguments (line 630)
    kwargs_258165 = {}
    str_258148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 12), 'str', 'The group delay is singular at frequencies [{0}], setting to 0')
    # Obtaining the member 'format' of a type (line 630)
    format_258149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 12), str_258148, 'format')
    # Calling format(args, kwargs) (line 630)
    format_call_result_258166 = invoke(stypy.reporting.localization.Localization(__file__, 630, 12), format_258149, *[join_call_result_258164], **kwargs_258165)
    
    # Processing the call keyword arguments (line 629)
    kwargs_258167 = {}
    # Getting the type of 'warnings' (line 629)
    warnings_258146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 629)
    warn_258147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 8), warnings_258146, 'warn')
    # Calling warn(args, kwargs) (line 629)
    warn_call_result_258168 = invoke(stypy.reporting.localization.Localization(__file__, 629, 8), warn_258147, *[format_call_result_258166], **kwargs_258167)
    
    # SSA join for if statement (line 628)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 634):
    
    # Assigning a Call to a Name (line 634):
    
    # Call to zeros_like(...): (line 634)
    # Processing the call arguments (line 634)
    # Getting the type of 'w' (line 634)
    w_258171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 23), 'w', False)
    # Processing the call keyword arguments (line 634)
    kwargs_258172 = {}
    # Getting the type of 'np' (line 634)
    np_258169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 9), 'np', False)
    # Obtaining the member 'zeros_like' of a type (line 634)
    zeros_like_258170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 9), np_258169, 'zeros_like')
    # Calling zeros_like(args, kwargs) (line 634)
    zeros_like_call_result_258173 = invoke(stypy.reporting.localization.Localization(__file__, 634, 9), zeros_like_258170, *[w_258171], **kwargs_258172)
    
    # Assigning a type to the variable 'gd' (line 634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 4), 'gd', zeros_like_call_result_258173)
    
    # Assigning a BinOp to a Subscript (line 635):
    
    # Assigning a BinOp to a Subscript (line 635):
    
    # Call to real(...): (line 635)
    # Processing the call arguments (line 635)
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'singular' (line 635)
    singular_258176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 33), 'singular', False)
    # Applying the '~' unary operator (line 635)
    result_inv_258177 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 32), '~', singular_258176)
    
    # Getting the type of 'num' (line 635)
    num_258178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 28), 'num', False)
    # Obtaining the member '__getitem__' of a type (line 635)
    getitem___258179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 28), num_258178, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 635)
    subscript_call_result_258180 = invoke(stypy.reporting.localization.Localization(__file__, 635, 28), getitem___258179, result_inv_258177)
    
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'singular' (line 635)
    singular_258181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 50), 'singular', False)
    # Applying the '~' unary operator (line 635)
    result_inv_258182 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 49), '~', singular_258181)
    
    # Getting the type of 'den' (line 635)
    den_258183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 45), 'den', False)
    # Obtaining the member '__getitem__' of a type (line 635)
    getitem___258184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 45), den_258183, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 635)
    subscript_call_result_258185 = invoke(stypy.reporting.localization.Localization(__file__, 635, 45), getitem___258184, result_inv_258182)
    
    # Applying the binary operator 'div' (line 635)
    result_div_258186 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 28), 'div', subscript_call_result_258180, subscript_call_result_258185)
    
    # Processing the call keyword arguments (line 635)
    kwargs_258187 = {}
    # Getting the type of 'np' (line 635)
    np_258174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 20), 'np', False)
    # Obtaining the member 'real' of a type (line 635)
    real_258175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 20), np_258174, 'real')
    # Calling real(args, kwargs) (line 635)
    real_call_result_258188 = invoke(stypy.reporting.localization.Localization(__file__, 635, 20), real_258175, *[result_div_258186], **kwargs_258187)
    
    # Getting the type of 'a' (line 635)
    a_258189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 63), 'a')
    # Obtaining the member 'size' of a type (line 635)
    size_258190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 63), a_258189, 'size')
    # Applying the binary operator '-' (line 635)
    result_sub_258191 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 20), '-', real_call_result_258188, size_258190)
    
    int_258192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, 72), 'int')
    # Applying the binary operator '+' (line 635)
    result_add_258193 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 70), '+', result_sub_258191, int_258192)
    
    # Getting the type of 'gd' (line 635)
    gd_258194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 4), 'gd')
    
    # Getting the type of 'singular' (line 635)
    singular_258195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 8), 'singular')
    # Applying the '~' unary operator (line 635)
    result_inv_258196 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 7), '~', singular_258195)
    
    # Storing an element on a container (line 635)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 635, 4), gd_258194, (result_inv_258196, result_add_258193))
    
    # Obtaining an instance of the builtin type 'tuple' (line 636)
    tuple_258197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 636)
    # Adding element type (line 636)
    # Getting the type of 'w' (line 636)
    w_258198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 11), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 11), tuple_258197, w_258198)
    # Adding element type (line 636)
    # Getting the type of 'gd' (line 636)
    gd_258199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 14), 'gd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 11), tuple_258197, gd_258199)
    
    # Assigning a type to the variable 'stypy_return_type' (line 636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 4), 'stypy_return_type', tuple_258197)
    
    # ################# End of 'group_delay(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'group_delay' in the type store
    # Getting the type of 'stypy_return_type' (line 541)
    stypy_return_type_258200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_258200)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'group_delay'
    return stypy_return_type_258200

# Assigning a type to the variable 'group_delay' (line 541)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 0), 'group_delay', group_delay)

@norecursion
def _validate_sos(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_validate_sos'
    module_type_store = module_type_store.open_function_context('_validate_sos', 639, 0, False)
    
    # Passed parameters checking function
    _validate_sos.stypy_localization = localization
    _validate_sos.stypy_type_of_self = None
    _validate_sos.stypy_type_store = module_type_store
    _validate_sos.stypy_function_name = '_validate_sos'
    _validate_sos.stypy_param_names_list = ['sos']
    _validate_sos.stypy_varargs_param_name = None
    _validate_sos.stypy_kwargs_param_name = None
    _validate_sos.stypy_call_defaults = defaults
    _validate_sos.stypy_call_varargs = varargs
    _validate_sos.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_validate_sos', ['sos'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_validate_sos', localization, ['sos'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_validate_sos(...)' code ##################

    str_258201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 4), 'str', 'Helper to validate a SOS input')
    
    # Assigning a Call to a Name (line 641):
    
    # Assigning a Call to a Name (line 641):
    
    # Call to atleast_2d(...): (line 641)
    # Processing the call arguments (line 641)
    # Getting the type of 'sos' (line 641)
    sos_258204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 24), 'sos', False)
    # Processing the call keyword arguments (line 641)
    kwargs_258205 = {}
    # Getting the type of 'np' (line 641)
    np_258202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 10), 'np', False)
    # Obtaining the member 'atleast_2d' of a type (line 641)
    atleast_2d_258203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 10), np_258202, 'atleast_2d')
    # Calling atleast_2d(args, kwargs) (line 641)
    atleast_2d_call_result_258206 = invoke(stypy.reporting.localization.Localization(__file__, 641, 10), atleast_2d_258203, *[sos_258204], **kwargs_258205)
    
    # Assigning a type to the variable 'sos' (line 641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 4), 'sos', atleast_2d_call_result_258206)
    
    
    # Getting the type of 'sos' (line 642)
    sos_258207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 7), 'sos')
    # Obtaining the member 'ndim' of a type (line 642)
    ndim_258208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 7), sos_258207, 'ndim')
    int_258209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 19), 'int')
    # Applying the binary operator '!=' (line 642)
    result_ne_258210 = python_operator(stypy.reporting.localization.Localization(__file__, 642, 7), '!=', ndim_258208, int_258209)
    
    # Testing the type of an if condition (line 642)
    if_condition_258211 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 642, 4), result_ne_258210)
    # Assigning a type to the variable 'if_condition_258211' (line 642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 4), 'if_condition_258211', if_condition_258211)
    # SSA begins for if statement (line 642)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 643)
    # Processing the call arguments (line 643)
    str_258213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 643, 25), 'str', 'sos array must be 2D')
    # Processing the call keyword arguments (line 643)
    kwargs_258214 = {}
    # Getting the type of 'ValueError' (line 643)
    ValueError_258212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 643)
    ValueError_call_result_258215 = invoke(stypy.reporting.localization.Localization(__file__, 643, 14), ValueError_258212, *[str_258213], **kwargs_258214)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 643, 8), ValueError_call_result_258215, 'raise parameter', BaseException)
    # SSA join for if statement (line 642)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Tuple (line 644):
    
    # Assigning a Subscript to a Name (line 644):
    
    # Obtaining the type of the subscript
    int_258216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 4), 'int')
    # Getting the type of 'sos' (line 644)
    sos_258217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 20), 'sos')
    # Obtaining the member 'shape' of a type (line 644)
    shape_258218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 20), sos_258217, 'shape')
    # Obtaining the member '__getitem__' of a type (line 644)
    getitem___258219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 4), shape_258218, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 644)
    subscript_call_result_258220 = invoke(stypy.reporting.localization.Localization(__file__, 644, 4), getitem___258219, int_258216)
    
    # Assigning a type to the variable 'tuple_var_assignment_257308' (line 644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 4), 'tuple_var_assignment_257308', subscript_call_result_258220)
    
    # Assigning a Subscript to a Name (line 644):
    
    # Obtaining the type of the subscript
    int_258221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 4), 'int')
    # Getting the type of 'sos' (line 644)
    sos_258222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 20), 'sos')
    # Obtaining the member 'shape' of a type (line 644)
    shape_258223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 20), sos_258222, 'shape')
    # Obtaining the member '__getitem__' of a type (line 644)
    getitem___258224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 4), shape_258223, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 644)
    subscript_call_result_258225 = invoke(stypy.reporting.localization.Localization(__file__, 644, 4), getitem___258224, int_258221)
    
    # Assigning a type to the variable 'tuple_var_assignment_257309' (line 644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 4), 'tuple_var_assignment_257309', subscript_call_result_258225)
    
    # Assigning a Name to a Name (line 644):
    # Getting the type of 'tuple_var_assignment_257308' (line 644)
    tuple_var_assignment_257308_258226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 4), 'tuple_var_assignment_257308')
    # Assigning a type to the variable 'n_sections' (line 644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 4), 'n_sections', tuple_var_assignment_257308_258226)
    
    # Assigning a Name to a Name (line 644):
    # Getting the type of 'tuple_var_assignment_257309' (line 644)
    tuple_var_assignment_257309_258227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 4), 'tuple_var_assignment_257309')
    # Assigning a type to the variable 'm' (line 644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 16), 'm', tuple_var_assignment_257309_258227)
    
    
    # Getting the type of 'm' (line 645)
    m_258228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 7), 'm')
    int_258229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 12), 'int')
    # Applying the binary operator '!=' (line 645)
    result_ne_258230 = python_operator(stypy.reporting.localization.Localization(__file__, 645, 7), '!=', m_258228, int_258229)
    
    # Testing the type of an if condition (line 645)
    if_condition_258231 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 645, 4), result_ne_258230)
    # Assigning a type to the variable 'if_condition_258231' (line 645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 645, 4), 'if_condition_258231', if_condition_258231)
    # SSA begins for if statement (line 645)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 646)
    # Processing the call arguments (line 646)
    str_258233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 646, 25), 'str', 'sos array must be shape (n_sections, 6)')
    # Processing the call keyword arguments (line 646)
    kwargs_258234 = {}
    # Getting the type of 'ValueError' (line 646)
    ValueError_258232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 646)
    ValueError_call_result_258235 = invoke(stypy.reporting.localization.Localization(__file__, 646, 14), ValueError_258232, *[str_258233], **kwargs_258234)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 646, 8), ValueError_call_result_258235, 'raise parameter', BaseException)
    # SSA join for if statement (line 645)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to all(...): (line 647)
    # Processing the call keyword arguments (line 647)
    kwargs_258244 = {}
    
    
    # Obtaining the type of the subscript
    slice_258236 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 647, 12), None, None, None)
    int_258237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 19), 'int')
    # Getting the type of 'sos' (line 647)
    sos_258238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 12), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 647)
    getitem___258239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 12), sos_258238, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 647)
    subscript_call_result_258240 = invoke(stypy.reporting.localization.Localization(__file__, 647, 12), getitem___258239, (slice_258236, int_258237))
    
    int_258241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 25), 'int')
    # Applying the binary operator '==' (line 647)
    result_eq_258242 = python_operator(stypy.reporting.localization.Localization(__file__, 647, 12), '==', subscript_call_result_258240, int_258241)
    
    # Obtaining the member 'all' of a type (line 647)
    all_258243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 12), result_eq_258242, 'all')
    # Calling all(args, kwargs) (line 647)
    all_call_result_258245 = invoke(stypy.reporting.localization.Localization(__file__, 647, 12), all_258243, *[], **kwargs_258244)
    
    # Applying the 'not' unary operator (line 647)
    result_not__258246 = python_operator(stypy.reporting.localization.Localization(__file__, 647, 7), 'not', all_call_result_258245)
    
    # Testing the type of an if condition (line 647)
    if_condition_258247 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 647, 4), result_not__258246)
    # Assigning a type to the variable 'if_condition_258247' (line 647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 4), 'if_condition_258247', if_condition_258247)
    # SSA begins for if statement (line 647)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 648)
    # Processing the call arguments (line 648)
    str_258249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 25), 'str', 'sos[:, 3] should be all ones')
    # Processing the call keyword arguments (line 648)
    kwargs_258250 = {}
    # Getting the type of 'ValueError' (line 648)
    ValueError_258248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 648)
    ValueError_call_result_258251 = invoke(stypy.reporting.localization.Localization(__file__, 648, 14), ValueError_258248, *[str_258249], **kwargs_258250)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 648, 8), ValueError_call_result_258251, 'raise parameter', BaseException)
    # SSA join for if statement (line 647)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 649)
    tuple_258252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 649)
    # Adding element type (line 649)
    # Getting the type of 'sos' (line 649)
    sos_258253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 11), 'sos')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 649, 11), tuple_258252, sos_258253)
    # Adding element type (line 649)
    # Getting the type of 'n_sections' (line 649)
    n_sections_258254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 16), 'n_sections')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 649, 11), tuple_258252, n_sections_258254)
    
    # Assigning a type to the variable 'stypy_return_type' (line 649)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 4), 'stypy_return_type', tuple_258252)
    
    # ################# End of '_validate_sos(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_validate_sos' in the type store
    # Getting the type of 'stypy_return_type' (line 639)
    stypy_return_type_258255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_258255)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_validate_sos'
    return stypy_return_type_258255

# Assigning a type to the variable '_validate_sos' (line 639)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 0), '_validate_sos', _validate_sos)

@norecursion
def sosfreqz(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 652)
    None_258256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 23), 'None')
    # Getting the type of 'False' (line 652)
    False_258257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 35), 'False')
    defaults = [None_258256, False_258257]
    # Create a new context for function 'sosfreqz'
    module_type_store = module_type_store.open_function_context('sosfreqz', 652, 0, False)
    
    # Passed parameters checking function
    sosfreqz.stypy_localization = localization
    sosfreqz.stypy_type_of_self = None
    sosfreqz.stypy_type_store = module_type_store
    sosfreqz.stypy_function_name = 'sosfreqz'
    sosfreqz.stypy_param_names_list = ['sos', 'worN', 'whole']
    sosfreqz.stypy_varargs_param_name = None
    sosfreqz.stypy_kwargs_param_name = None
    sosfreqz.stypy_call_defaults = defaults
    sosfreqz.stypy_call_varargs = varargs
    sosfreqz.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sosfreqz', ['sos', 'worN', 'whole'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sosfreqz', localization, ['sos', 'worN', 'whole'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sosfreqz(...)' code ##################

    str_258258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, (-1)), 'str', "\n    Compute the frequency response of a digital filter in SOS format.\n\n    Given `sos`, an array with shape (n, 6) of second order sections of\n    a digital filter, compute the frequency response of the system function::\n\n               B0(z)   B1(z)         B{n-1}(z)\n        H(z) = ----- * ----- * ... * ---------\n               A0(z)   A1(z)         A{n-1}(z)\n\n    for z = exp(omega*1j), where B{k}(z) and A{k}(z) are numerator and\n    denominator of the transfer function of the k-th second order section.\n\n    Parameters\n    ----------\n    sos : array_like\n        Array of second-order filter coefficients, must have shape\n        ``(n_sections, 6)``. Each row corresponds to a second-order\n        section, with the first three columns providing the numerator\n        coefficients and the last three providing the denominator\n        coefficients.\n    worN : {None, int, array_like}, optional\n        If None (default), then compute at 512 frequencies equally spaced\n        around the unit circle.\n        If a single integer, then compute at that many frequencies.\n        Using a number that is fast for FFT computations can result in\n        faster computations (see Notes of `freqz`).\n        If an array_like, compute the response at the frequencies given (in\n        radians/sample; must be 1D).\n    whole : bool, optional\n        Normally, frequencies are computed from 0 to the Nyquist frequency,\n        pi radians/sample (upper-half of unit-circle).  If `whole` is True,\n        compute frequencies from 0 to 2*pi radians/sample.\n\n    Returns\n    -------\n    w : ndarray\n        The normalized frequencies at which `h` was computed, in\n        radians/sample.\n    h : ndarray\n        The frequency response, as complex numbers.\n\n    See Also\n    --------\n    freqz, sosfilt\n\n    Notes\n    -----\n\n    .. versionadded:: 0.19.0\n\n    Examples\n    --------\n    Design a 15th-order bandpass filter in SOS format.\n\n    >>> from scipy import signal\n    >>> sos = signal.ellip(15, 0.5, 60, (0.2, 0.4), btype='bandpass',\n    ...                    output='sos')\n\n    Compute the frequency response at 1500 points from DC to Nyquist.\n\n    >>> w, h = signal.sosfreqz(sos, worN=1500)\n\n    Plot the response.\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.subplot(2, 1, 1)\n    >>> db = 20*np.log10(np.abs(h))\n    >>> plt.plot(w/np.pi, db)\n    >>> plt.ylim(-75, 5)\n    >>> plt.grid(True)\n    >>> plt.yticks([0, -20, -40, -60])\n    >>> plt.ylabel('Gain [dB]')\n    >>> plt.title('Frequency Response')\n    >>> plt.subplot(2, 1, 2)\n    >>> plt.plot(w/np.pi, np.angle(h))\n    >>> plt.grid(True)\n    >>> plt.yticks([-np.pi, -0.5*np.pi, 0, 0.5*np.pi, np.pi],\n    ...            [r'$-\\pi$', r'$-\\pi/2$', '0', r'$\\pi/2$', r'$\\pi$'])\n    >>> plt.ylabel('Phase [rad]')\n    >>> plt.xlabel('Normalized frequency (1.0 = Nyquist)')\n    >>> plt.show()\n\n    If the same filter is implemented as a single transfer function,\n    numerical error corrupts the frequency response:\n\n    >>> b, a = signal.ellip(15, 0.5, 60, (0.2, 0.4), btype='bandpass',\n    ...                    output='ba')\n    >>> w, h = signal.freqz(b, a, worN=1500)\n    >>> plt.subplot(2, 1, 1)\n    >>> db = 20*np.log10(np.abs(h))\n    >>> plt.plot(w/np.pi, db)\n    >>> plt.subplot(2, 1, 2)\n    >>> plt.plot(w/np.pi, np.angle(h))\n    >>> plt.show()\n\n    ")
    
    # Assigning a Call to a Tuple (line 751):
    
    # Assigning a Subscript to a Name (line 751):
    
    # Obtaining the type of the subscript
    int_258259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 4), 'int')
    
    # Call to _validate_sos(...): (line 751)
    # Processing the call arguments (line 751)
    # Getting the type of 'sos' (line 751)
    sos_258261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 36), 'sos', False)
    # Processing the call keyword arguments (line 751)
    kwargs_258262 = {}
    # Getting the type of '_validate_sos' (line 751)
    _validate_sos_258260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 22), '_validate_sos', False)
    # Calling _validate_sos(args, kwargs) (line 751)
    _validate_sos_call_result_258263 = invoke(stypy.reporting.localization.Localization(__file__, 751, 22), _validate_sos_258260, *[sos_258261], **kwargs_258262)
    
    # Obtaining the member '__getitem__' of a type (line 751)
    getitem___258264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 4), _validate_sos_call_result_258263, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 751)
    subscript_call_result_258265 = invoke(stypy.reporting.localization.Localization(__file__, 751, 4), getitem___258264, int_258259)
    
    # Assigning a type to the variable 'tuple_var_assignment_257310' (line 751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'tuple_var_assignment_257310', subscript_call_result_258265)
    
    # Assigning a Subscript to a Name (line 751):
    
    # Obtaining the type of the subscript
    int_258266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 751, 4), 'int')
    
    # Call to _validate_sos(...): (line 751)
    # Processing the call arguments (line 751)
    # Getting the type of 'sos' (line 751)
    sos_258268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 36), 'sos', False)
    # Processing the call keyword arguments (line 751)
    kwargs_258269 = {}
    # Getting the type of '_validate_sos' (line 751)
    _validate_sos_258267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 22), '_validate_sos', False)
    # Calling _validate_sos(args, kwargs) (line 751)
    _validate_sos_call_result_258270 = invoke(stypy.reporting.localization.Localization(__file__, 751, 22), _validate_sos_258267, *[sos_258268], **kwargs_258269)
    
    # Obtaining the member '__getitem__' of a type (line 751)
    getitem___258271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 4), _validate_sos_call_result_258270, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 751)
    subscript_call_result_258272 = invoke(stypy.reporting.localization.Localization(__file__, 751, 4), getitem___258271, int_258266)
    
    # Assigning a type to the variable 'tuple_var_assignment_257311' (line 751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'tuple_var_assignment_257311', subscript_call_result_258272)
    
    # Assigning a Name to a Name (line 751):
    # Getting the type of 'tuple_var_assignment_257310' (line 751)
    tuple_var_assignment_257310_258273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'tuple_var_assignment_257310')
    # Assigning a type to the variable 'sos' (line 751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'sos', tuple_var_assignment_257310_258273)
    
    # Assigning a Name to a Name (line 751):
    # Getting the type of 'tuple_var_assignment_257311' (line 751)
    tuple_var_assignment_257311_258274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'tuple_var_assignment_257311')
    # Assigning a type to the variable 'n_sections' (line 751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 9), 'n_sections', tuple_var_assignment_257311_258274)
    
    
    # Getting the type of 'n_sections' (line 752)
    n_sections_258275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 7), 'n_sections')
    int_258276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, 21), 'int')
    # Applying the binary operator '==' (line 752)
    result_eq_258277 = python_operator(stypy.reporting.localization.Localization(__file__, 752, 7), '==', n_sections_258275, int_258276)
    
    # Testing the type of an if condition (line 752)
    if_condition_258278 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 752, 4), result_eq_258277)
    # Assigning a type to the variable 'if_condition_258278' (line 752)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 4), 'if_condition_258278', if_condition_258278)
    # SSA begins for if statement (line 752)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 753)
    # Processing the call arguments (line 753)
    str_258280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 753, 25), 'str', 'Cannot compute frequencies with no sections')
    # Processing the call keyword arguments (line 753)
    kwargs_258281 = {}
    # Getting the type of 'ValueError' (line 753)
    ValueError_258279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 753)
    ValueError_call_result_258282 = invoke(stypy.reporting.localization.Localization(__file__, 753, 14), ValueError_258279, *[str_258280], **kwargs_258281)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 753, 8), ValueError_call_result_258282, 'raise parameter', BaseException)
    # SSA join for if statement (line 752)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 754):
    
    # Assigning a Num to a Name (line 754):
    float_258283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 754, 8), 'float')
    # Assigning a type to the variable 'h' (line 754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'h', float_258283)
    
    # Getting the type of 'sos' (line 755)
    sos_258284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 15), 'sos')
    # Testing the type of a for loop iterable (line 755)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 755, 4), sos_258284)
    # Getting the type of the for loop variable (line 755)
    for_loop_var_258285 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 755, 4), sos_258284)
    # Assigning a type to the variable 'row' (line 755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 755, 4), 'row', for_loop_var_258285)
    # SSA begins for a for statement (line 755)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Tuple (line 756):
    
    # Assigning a Subscript to a Name (line 756):
    
    # Obtaining the type of the subscript
    int_258286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 8), 'int')
    
    # Call to freqz(...): (line 756)
    # Processing the call arguments (line 756)
    
    # Obtaining the type of the subscript
    int_258288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 29), 'int')
    slice_258289 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 756, 24), None, int_258288, None)
    # Getting the type of 'row' (line 756)
    row_258290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 24), 'row', False)
    # Obtaining the member '__getitem__' of a type (line 756)
    getitem___258291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 24), row_258290, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 756)
    subscript_call_result_258292 = invoke(stypy.reporting.localization.Localization(__file__, 756, 24), getitem___258291, slice_258289)
    
    
    # Obtaining the type of the subscript
    int_258293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 37), 'int')
    slice_258294 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 756, 33), int_258293, None, None)
    # Getting the type of 'row' (line 756)
    row_258295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 33), 'row', False)
    # Obtaining the member '__getitem__' of a type (line 756)
    getitem___258296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 33), row_258295, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 756)
    subscript_call_result_258297 = invoke(stypy.reporting.localization.Localization(__file__, 756, 33), getitem___258296, slice_258294)
    
    # Processing the call keyword arguments (line 756)
    # Getting the type of 'worN' (line 756)
    worN_258298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 47), 'worN', False)
    keyword_258299 = worN_258298
    # Getting the type of 'whole' (line 756)
    whole_258300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 59), 'whole', False)
    keyword_258301 = whole_258300
    kwargs_258302 = {'whole': keyword_258301, 'worN': keyword_258299}
    # Getting the type of 'freqz' (line 756)
    freqz_258287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 18), 'freqz', False)
    # Calling freqz(args, kwargs) (line 756)
    freqz_call_result_258303 = invoke(stypy.reporting.localization.Localization(__file__, 756, 18), freqz_258287, *[subscript_call_result_258292, subscript_call_result_258297], **kwargs_258302)
    
    # Obtaining the member '__getitem__' of a type (line 756)
    getitem___258304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 8), freqz_call_result_258303, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 756)
    subscript_call_result_258305 = invoke(stypy.reporting.localization.Localization(__file__, 756, 8), getitem___258304, int_258286)
    
    # Assigning a type to the variable 'tuple_var_assignment_257312' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'tuple_var_assignment_257312', subscript_call_result_258305)
    
    # Assigning a Subscript to a Name (line 756):
    
    # Obtaining the type of the subscript
    int_258306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 8), 'int')
    
    # Call to freqz(...): (line 756)
    # Processing the call arguments (line 756)
    
    # Obtaining the type of the subscript
    int_258308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 29), 'int')
    slice_258309 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 756, 24), None, int_258308, None)
    # Getting the type of 'row' (line 756)
    row_258310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 24), 'row', False)
    # Obtaining the member '__getitem__' of a type (line 756)
    getitem___258311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 24), row_258310, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 756)
    subscript_call_result_258312 = invoke(stypy.reporting.localization.Localization(__file__, 756, 24), getitem___258311, slice_258309)
    
    
    # Obtaining the type of the subscript
    int_258313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 37), 'int')
    slice_258314 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 756, 33), int_258313, None, None)
    # Getting the type of 'row' (line 756)
    row_258315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 33), 'row', False)
    # Obtaining the member '__getitem__' of a type (line 756)
    getitem___258316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 33), row_258315, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 756)
    subscript_call_result_258317 = invoke(stypy.reporting.localization.Localization(__file__, 756, 33), getitem___258316, slice_258314)
    
    # Processing the call keyword arguments (line 756)
    # Getting the type of 'worN' (line 756)
    worN_258318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 47), 'worN', False)
    keyword_258319 = worN_258318
    # Getting the type of 'whole' (line 756)
    whole_258320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 59), 'whole', False)
    keyword_258321 = whole_258320
    kwargs_258322 = {'whole': keyword_258321, 'worN': keyword_258319}
    # Getting the type of 'freqz' (line 756)
    freqz_258307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 18), 'freqz', False)
    # Calling freqz(args, kwargs) (line 756)
    freqz_call_result_258323 = invoke(stypy.reporting.localization.Localization(__file__, 756, 18), freqz_258307, *[subscript_call_result_258312, subscript_call_result_258317], **kwargs_258322)
    
    # Obtaining the member '__getitem__' of a type (line 756)
    getitem___258324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 8), freqz_call_result_258323, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 756)
    subscript_call_result_258325 = invoke(stypy.reporting.localization.Localization(__file__, 756, 8), getitem___258324, int_258306)
    
    # Assigning a type to the variable 'tuple_var_assignment_257313' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'tuple_var_assignment_257313', subscript_call_result_258325)
    
    # Assigning a Name to a Name (line 756):
    # Getting the type of 'tuple_var_assignment_257312' (line 756)
    tuple_var_assignment_257312_258326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'tuple_var_assignment_257312')
    # Assigning a type to the variable 'w' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'w', tuple_var_assignment_257312_258326)
    
    # Assigning a Name to a Name (line 756):
    # Getting the type of 'tuple_var_assignment_257313' (line 756)
    tuple_var_assignment_257313_258327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'tuple_var_assignment_257313')
    # Assigning a type to the variable 'rowh' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 11), 'rowh', tuple_var_assignment_257313_258327)
    
    # Getting the type of 'h' (line 757)
    h_258328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'h')
    # Getting the type of 'rowh' (line 757)
    rowh_258329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 13), 'rowh')
    # Applying the binary operator '*=' (line 757)
    result_imul_258330 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 8), '*=', h_258328, rowh_258329)
    # Assigning a type to the variable 'h' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'h', result_imul_258330)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 758)
    tuple_258331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 758)
    # Adding element type (line 758)
    # Getting the type of 'w' (line 758)
    w_258332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 11), 'w')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 11), tuple_258331, w_258332)
    # Adding element type (line 758)
    # Getting the type of 'h' (line 758)
    h_258333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 14), 'h')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 758, 11), tuple_258331, h_258333)
    
    # Assigning a type to the variable 'stypy_return_type' (line 758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 4), 'stypy_return_type', tuple_258331)
    
    # ################# End of 'sosfreqz(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sosfreqz' in the type store
    # Getting the type of 'stypy_return_type' (line 652)
    stypy_return_type_258334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_258334)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sosfreqz'
    return stypy_return_type_258334

# Assigning a type to the variable 'sosfreqz' (line 652)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 0), 'sosfreqz', sosfreqz)

@norecursion
def _cplxreal(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 761)
    None_258335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 21), 'None')
    defaults = [None_258335]
    # Create a new context for function '_cplxreal'
    module_type_store = module_type_store.open_function_context('_cplxreal', 761, 0, False)
    
    # Passed parameters checking function
    _cplxreal.stypy_localization = localization
    _cplxreal.stypy_type_of_self = None
    _cplxreal.stypy_type_store = module_type_store
    _cplxreal.stypy_function_name = '_cplxreal'
    _cplxreal.stypy_param_names_list = ['z', 'tol']
    _cplxreal.stypy_varargs_param_name = None
    _cplxreal.stypy_kwargs_param_name = None
    _cplxreal.stypy_call_defaults = defaults
    _cplxreal.stypy_call_varargs = varargs
    _cplxreal.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_cplxreal', ['z', 'tol'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_cplxreal', localization, ['z', 'tol'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_cplxreal(...)' code ##################

    str_258336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, (-1)), 'str', "\n    Split into complex and real parts, combining conjugate pairs.\n\n    The 1D input vector `z` is split up into its complex (`zc`) and real (`zr`)\n    elements.  Every complex element must be part of a complex-conjugate pair,\n    which are combined into a single number (with positive imaginary part) in\n    the output.  Two complex numbers are considered a conjugate pair if their\n    real and imaginary parts differ in magnitude by less than ``tol * abs(z)``.\n\n    Parameters\n    ----------\n    z : array_like\n        Vector of complex numbers to be sorted and split\n    tol : float, optional\n        Relative tolerance for testing realness and conjugate equality.\n        Default is ``100 * spacing(1)`` of `z`'s data type (i.e. 2e-14 for\n        float64)\n\n    Returns\n    -------\n    zc : ndarray\n        Complex elements of `z`, with each pair represented by a single value\n        having positive imaginary part, sorted first by real part, and then\n        by magnitude of imaginary part.  The pairs are averaged when combined\n        to reduce error.\n    zr : ndarray\n        Real elements of `z` (those having imaginary part less than\n        `tol` times their magnitude), sorted by value.\n\n    Raises\n    ------\n    ValueError\n        If there are any complex numbers in `z` for which a conjugate\n        cannot be found.\n\n    See Also\n    --------\n    _cplxpair\n\n    Examples\n    --------\n    >>> a = [4, 3, 1, 2-2j, 2+2j, 2-1j, 2+1j, 2-1j, 2+1j, 1+1j, 1-1j]\n    >>> zc, zr = _cplxreal(a)\n    >>> print(zc)\n    [ 1.+1.j  2.+1.j  2.+1.j  2.+2.j]\n    >>> print(zr)\n    [ 1.  3.  4.]\n    ")
    
    # Assigning a Call to a Name (line 811):
    
    # Assigning a Call to a Name (line 811):
    
    # Call to atleast_1d(...): (line 811)
    # Processing the call arguments (line 811)
    # Getting the type of 'z' (line 811)
    z_258338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 19), 'z', False)
    # Processing the call keyword arguments (line 811)
    kwargs_258339 = {}
    # Getting the type of 'atleast_1d' (line 811)
    atleast_1d_258337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 811)
    atleast_1d_call_result_258340 = invoke(stypy.reporting.localization.Localization(__file__, 811, 8), atleast_1d_258337, *[z_258338], **kwargs_258339)
    
    # Assigning a type to the variable 'z' (line 811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 4), 'z', atleast_1d_call_result_258340)
    
    
    # Getting the type of 'z' (line 812)
    z_258341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 7), 'z')
    # Obtaining the member 'size' of a type (line 812)
    size_258342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 7), z_258341, 'size')
    int_258343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 17), 'int')
    # Applying the binary operator '==' (line 812)
    result_eq_258344 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 7), '==', size_258342, int_258343)
    
    # Testing the type of an if condition (line 812)
    if_condition_258345 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 812, 4), result_eq_258344)
    # Assigning a type to the variable 'if_condition_258345' (line 812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 4), 'if_condition_258345', if_condition_258345)
    # SSA begins for if statement (line 812)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 813)
    tuple_258346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 813)
    # Adding element type (line 813)
    # Getting the type of 'z' (line 813)
    z_258347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 15), 'z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 813, 15), tuple_258346, z_258347)
    # Adding element type (line 813)
    # Getting the type of 'z' (line 813)
    z_258348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 18), 'z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 813, 15), tuple_258346, z_258348)
    
    # Assigning a type to the variable 'stypy_return_type' (line 813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 8), 'stypy_return_type', tuple_258346)
    # SSA branch for the else part of an if statement (line 812)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'z' (line 814)
    z_258349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 9), 'z')
    # Obtaining the member 'ndim' of a type (line 814)
    ndim_258350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 9), z_258349, 'ndim')
    int_258351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 19), 'int')
    # Applying the binary operator '!=' (line 814)
    result_ne_258352 = python_operator(stypy.reporting.localization.Localization(__file__, 814, 9), '!=', ndim_258350, int_258351)
    
    # Testing the type of an if condition (line 814)
    if_condition_258353 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 814, 9), result_ne_258352)
    # Assigning a type to the variable 'if_condition_258353' (line 814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 9), 'if_condition_258353', if_condition_258353)
    # SSA begins for if statement (line 814)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 815)
    # Processing the call arguments (line 815)
    str_258355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 25), 'str', '_cplxreal only accepts 1D input')
    # Processing the call keyword arguments (line 815)
    kwargs_258356 = {}
    # Getting the type of 'ValueError' (line 815)
    ValueError_258354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 815)
    ValueError_call_result_258357 = invoke(stypy.reporting.localization.Localization(__file__, 815, 14), ValueError_258354, *[str_258355], **kwargs_258356)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 815, 8), ValueError_call_result_258357, 'raise parameter', BaseException)
    # SSA join for if statement (line 814)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 812)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 817)
    # Getting the type of 'tol' (line 817)
    tol_258358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 7), 'tol')
    # Getting the type of 'None' (line 817)
    None_258359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 14), 'None')
    
    (may_be_258360, more_types_in_union_258361) = may_be_none(tol_258358, None_258359)

    if may_be_258360:

        if more_types_in_union_258361:
            # Runtime conditional SSA (line 817)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 819):
        
        # Assigning a BinOp to a Name (line 819):
        int_258362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, 14), 'int')
        
        # Call to finfo(...): (line 819)
        # Processing the call arguments (line 819)
        float_258365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, 30), 'float')
        # Getting the type of 'z' (line 819)
        z_258366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 36), 'z', False)
        # Applying the binary operator '*' (line 819)
        result_mul_258367 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 30), '*', float_258365, z_258366)
        
        # Obtaining the member 'dtype' of a type (line 819)
        dtype_258368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 30), result_mul_258367, 'dtype')
        # Processing the call keyword arguments (line 819)
        kwargs_258369 = {}
        # Getting the type of 'np' (line 819)
        np_258363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 20), 'np', False)
        # Obtaining the member 'finfo' of a type (line 819)
        finfo_258364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 20), np_258363, 'finfo')
        # Calling finfo(args, kwargs) (line 819)
        finfo_call_result_258370 = invoke(stypy.reporting.localization.Localization(__file__, 819, 20), finfo_258364, *[dtype_258368], **kwargs_258369)
        
        # Obtaining the member 'eps' of a type (line 819)
        eps_258371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 20), finfo_call_result_258370, 'eps')
        # Applying the binary operator '*' (line 819)
        result_mul_258372 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 14), '*', int_258362, eps_258371)
        
        # Assigning a type to the variable 'tol' (line 819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 8), 'tol', result_mul_258372)

        if more_types_in_union_258361:
            # SSA join for if statement (line 817)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Name (line 822):
    
    # Assigning a Subscript to a Name (line 822):
    
    # Obtaining the type of the subscript
    
    # Call to lexsort(...): (line 822)
    # Processing the call arguments (line 822)
    
    # Obtaining an instance of the builtin type 'tuple' (line 822)
    tuple_258375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 822)
    # Adding element type (line 822)
    
    # Call to abs(...): (line 822)
    # Processing the call arguments (line 822)
    # Getting the type of 'z' (line 822)
    z_258377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 26), 'z', False)
    # Obtaining the member 'imag' of a type (line 822)
    imag_258378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 26), z_258377, 'imag')
    # Processing the call keyword arguments (line 822)
    kwargs_258379 = {}
    # Getting the type of 'abs' (line 822)
    abs_258376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 22), 'abs', False)
    # Calling abs(args, kwargs) (line 822)
    abs_call_result_258380 = invoke(stypy.reporting.localization.Localization(__file__, 822, 22), abs_258376, *[imag_258378], **kwargs_258379)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 822, 22), tuple_258375, abs_call_result_258380)
    # Adding element type (line 822)
    # Getting the type of 'z' (line 822)
    z_258381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 35), 'z', False)
    # Obtaining the member 'real' of a type (line 822)
    real_258382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 35), z_258381, 'real')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 822, 22), tuple_258375, real_258382)
    
    # Processing the call keyword arguments (line 822)
    kwargs_258383 = {}
    # Getting the type of 'np' (line 822)
    np_258373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 10), 'np', False)
    # Obtaining the member 'lexsort' of a type (line 822)
    lexsort_258374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 10), np_258373, 'lexsort')
    # Calling lexsort(args, kwargs) (line 822)
    lexsort_call_result_258384 = invoke(stypy.reporting.localization.Localization(__file__, 822, 10), lexsort_258374, *[tuple_258375], **kwargs_258383)
    
    # Getting the type of 'z' (line 822)
    z_258385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'z')
    # Obtaining the member '__getitem__' of a type (line 822)
    getitem___258386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 8), z_258385, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 822)
    subscript_call_result_258387 = invoke(stypy.reporting.localization.Localization(__file__, 822, 8), getitem___258386, lexsort_call_result_258384)
    
    # Assigning a type to the variable 'z' (line 822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 4), 'z', subscript_call_result_258387)
    
    # Assigning a Compare to a Name (line 825):
    
    # Assigning a Compare to a Name (line 825):
    
    
    # Call to abs(...): (line 825)
    # Processing the call arguments (line 825)
    # Getting the type of 'z' (line 825)
    z_258389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 23), 'z', False)
    # Obtaining the member 'imag' of a type (line 825)
    imag_258390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 23), z_258389, 'imag')
    # Processing the call keyword arguments (line 825)
    kwargs_258391 = {}
    # Getting the type of 'abs' (line 825)
    abs_258388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 19), 'abs', False)
    # Calling abs(args, kwargs) (line 825)
    abs_call_result_258392 = invoke(stypy.reporting.localization.Localization(__file__, 825, 19), abs_258388, *[imag_258390], **kwargs_258391)
    
    # Getting the type of 'tol' (line 825)
    tol_258393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 34), 'tol')
    
    # Call to abs(...): (line 825)
    # Processing the call arguments (line 825)
    # Getting the type of 'z' (line 825)
    z_258395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 44), 'z', False)
    # Processing the call keyword arguments (line 825)
    kwargs_258396 = {}
    # Getting the type of 'abs' (line 825)
    abs_258394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 40), 'abs', False)
    # Calling abs(args, kwargs) (line 825)
    abs_call_result_258397 = invoke(stypy.reporting.localization.Localization(__file__, 825, 40), abs_258394, *[z_258395], **kwargs_258396)
    
    # Applying the binary operator '*' (line 825)
    result_mul_258398 = python_operator(stypy.reporting.localization.Localization(__file__, 825, 34), '*', tol_258393, abs_call_result_258397)
    
    # Applying the binary operator '<=' (line 825)
    result_le_258399 = python_operator(stypy.reporting.localization.Localization(__file__, 825, 19), '<=', abs_call_result_258392, result_mul_258398)
    
    # Assigning a type to the variable 'real_indices' (line 825)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 4), 'real_indices', result_le_258399)
    
    # Assigning a Attribute to a Name (line 826):
    
    # Assigning a Attribute to a Name (line 826):
    
    # Obtaining the type of the subscript
    # Getting the type of 'real_indices' (line 826)
    real_indices_258400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 11), 'real_indices')
    # Getting the type of 'z' (line 826)
    z_258401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 9), 'z')
    # Obtaining the member '__getitem__' of a type (line 826)
    getitem___258402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 9), z_258401, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 826)
    subscript_call_result_258403 = invoke(stypy.reporting.localization.Localization(__file__, 826, 9), getitem___258402, real_indices_258400)
    
    # Obtaining the member 'real' of a type (line 826)
    real_258404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 9), subscript_call_result_258403, 'real')
    # Assigning a type to the variable 'zr' (line 826)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 4), 'zr', real_258404)
    
    
    
    # Call to len(...): (line 828)
    # Processing the call arguments (line 828)
    # Getting the type of 'zr' (line 828)
    zr_258406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 11), 'zr', False)
    # Processing the call keyword arguments (line 828)
    kwargs_258407 = {}
    # Getting the type of 'len' (line 828)
    len_258405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 7), 'len', False)
    # Calling len(args, kwargs) (line 828)
    len_call_result_258408 = invoke(stypy.reporting.localization.Localization(__file__, 828, 7), len_258405, *[zr_258406], **kwargs_258407)
    
    
    # Call to len(...): (line 828)
    # Processing the call arguments (line 828)
    # Getting the type of 'z' (line 828)
    z_258410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 22), 'z', False)
    # Processing the call keyword arguments (line 828)
    kwargs_258411 = {}
    # Getting the type of 'len' (line 828)
    len_258409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 18), 'len', False)
    # Calling len(args, kwargs) (line 828)
    len_call_result_258412 = invoke(stypy.reporting.localization.Localization(__file__, 828, 18), len_258409, *[z_258410], **kwargs_258411)
    
    # Applying the binary operator '==' (line 828)
    result_eq_258413 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 7), '==', len_call_result_258408, len_call_result_258412)
    
    # Testing the type of an if condition (line 828)
    if_condition_258414 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 828, 4), result_eq_258413)
    # Assigning a type to the variable 'if_condition_258414' (line 828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 4), 'if_condition_258414', if_condition_258414)
    # SSA begins for if statement (line 828)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 830)
    tuple_258415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 830)
    # Adding element type (line 830)
    
    # Call to array(...): (line 830)
    # Processing the call arguments (line 830)
    
    # Obtaining an instance of the builtin type 'list' (line 830)
    list_258417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 830)
    
    # Processing the call keyword arguments (line 830)
    kwargs_258418 = {}
    # Getting the type of 'array' (line 830)
    array_258416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 15), 'array', False)
    # Calling array(args, kwargs) (line 830)
    array_call_result_258419 = invoke(stypy.reporting.localization.Localization(__file__, 830, 15), array_258416, *[list_258417], **kwargs_258418)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 830, 15), tuple_258415, array_call_result_258419)
    # Adding element type (line 830)
    # Getting the type of 'zr' (line 830)
    zr_258420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 26), 'zr')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 830, 15), tuple_258415, zr_258420)
    
    # Assigning a type to the variable 'stypy_return_type' (line 830)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 8), 'stypy_return_type', tuple_258415)
    # SSA join for if statement (line 828)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 833):
    
    # Assigning a Subscript to a Name (line 833):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'real_indices' (line 833)
    real_indices_258421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 11), 'real_indices')
    # Applying the '~' unary operator (line 833)
    result_inv_258422 = python_operator(stypy.reporting.localization.Localization(__file__, 833, 10), '~', real_indices_258421)
    
    # Getting the type of 'z' (line 833)
    z_258423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 8), 'z')
    # Obtaining the member '__getitem__' of a type (line 833)
    getitem___258424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 8), z_258423, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 833)
    subscript_call_result_258425 = invoke(stypy.reporting.localization.Localization(__file__, 833, 8), getitem___258424, result_inv_258422)
    
    # Assigning a type to the variable 'z' (line 833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 4), 'z', subscript_call_result_258425)
    
    # Assigning a Subscript to a Name (line 834):
    
    # Assigning a Subscript to a Name (line 834):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'z' (line 834)
    z_258426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 11), 'z')
    # Obtaining the member 'imag' of a type (line 834)
    imag_258427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 11), z_258426, 'imag')
    int_258428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 20), 'int')
    # Applying the binary operator '>' (line 834)
    result_gt_258429 = python_operator(stypy.reporting.localization.Localization(__file__, 834, 11), '>', imag_258427, int_258428)
    
    # Getting the type of 'z' (line 834)
    z_258430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 9), 'z')
    # Obtaining the member '__getitem__' of a type (line 834)
    getitem___258431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 9), z_258430, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 834)
    subscript_call_result_258432 = invoke(stypy.reporting.localization.Localization(__file__, 834, 9), getitem___258431, result_gt_258429)
    
    # Assigning a type to the variable 'zp' (line 834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 4), 'zp', subscript_call_result_258432)
    
    # Assigning a Subscript to a Name (line 835):
    
    # Assigning a Subscript to a Name (line 835):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'z' (line 835)
    z_258433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 11), 'z')
    # Obtaining the member 'imag' of a type (line 835)
    imag_258434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 11), z_258433, 'imag')
    int_258435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 20), 'int')
    # Applying the binary operator '<' (line 835)
    result_lt_258436 = python_operator(stypy.reporting.localization.Localization(__file__, 835, 11), '<', imag_258434, int_258435)
    
    # Getting the type of 'z' (line 835)
    z_258437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 9), 'z')
    # Obtaining the member '__getitem__' of a type (line 835)
    getitem___258438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 9), z_258437, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 835)
    subscript_call_result_258439 = invoke(stypy.reporting.localization.Localization(__file__, 835, 9), getitem___258438, result_lt_258436)
    
    # Assigning a type to the variable 'zn' (line 835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 4), 'zn', subscript_call_result_258439)
    
    
    
    # Call to len(...): (line 837)
    # Processing the call arguments (line 837)
    # Getting the type of 'zp' (line 837)
    zp_258441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 11), 'zp', False)
    # Processing the call keyword arguments (line 837)
    kwargs_258442 = {}
    # Getting the type of 'len' (line 837)
    len_258440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 7), 'len', False)
    # Calling len(args, kwargs) (line 837)
    len_call_result_258443 = invoke(stypy.reporting.localization.Localization(__file__, 837, 7), len_258440, *[zp_258441], **kwargs_258442)
    
    
    # Call to len(...): (line 837)
    # Processing the call arguments (line 837)
    # Getting the type of 'zn' (line 837)
    zn_258445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 22), 'zn', False)
    # Processing the call keyword arguments (line 837)
    kwargs_258446 = {}
    # Getting the type of 'len' (line 837)
    len_258444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 18), 'len', False)
    # Calling len(args, kwargs) (line 837)
    len_call_result_258447 = invoke(stypy.reporting.localization.Localization(__file__, 837, 18), len_258444, *[zn_258445], **kwargs_258446)
    
    # Applying the binary operator '!=' (line 837)
    result_ne_258448 = python_operator(stypy.reporting.localization.Localization(__file__, 837, 7), '!=', len_call_result_258443, len_call_result_258447)
    
    # Testing the type of an if condition (line 837)
    if_condition_258449 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 837, 4), result_ne_258448)
    # Assigning a type to the variable 'if_condition_258449' (line 837)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 837, 4), 'if_condition_258449', if_condition_258449)
    # SSA begins for if statement (line 837)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 838)
    # Processing the call arguments (line 838)
    str_258451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 25), 'str', 'Array contains complex value with no matching conjugate.')
    # Processing the call keyword arguments (line 838)
    kwargs_258452 = {}
    # Getting the type of 'ValueError' (line 838)
    ValueError_258450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 838)
    ValueError_call_result_258453 = invoke(stypy.reporting.localization.Localization(__file__, 838, 14), ValueError_258450, *[str_258451], **kwargs_258452)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 838, 8), ValueError_call_result_258453, 'raise parameter', BaseException)
    # SSA join for if statement (line 837)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Compare to a Name (line 842):
    
    # Assigning a Compare to a Name (line 842):
    
    
    # Call to diff(...): (line 842)
    # Processing the call arguments (line 842)
    # Getting the type of 'zp' (line 842)
    zp_258456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 24), 'zp', False)
    # Obtaining the member 'real' of a type (line 842)
    real_258457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 24), zp_258456, 'real')
    # Processing the call keyword arguments (line 842)
    kwargs_258458 = {}
    # Getting the type of 'np' (line 842)
    np_258454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 16), 'np', False)
    # Obtaining the member 'diff' of a type (line 842)
    diff_258455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 16), np_258454, 'diff')
    # Calling diff(args, kwargs) (line 842)
    diff_call_result_258459 = invoke(stypy.reporting.localization.Localization(__file__, 842, 16), diff_258455, *[real_258457], **kwargs_258458)
    
    # Getting the type of 'tol' (line 842)
    tol_258460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 36), 'tol')
    
    # Call to abs(...): (line 842)
    # Processing the call arguments (line 842)
    
    # Obtaining the type of the subscript
    int_258462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 50), 'int')
    slice_258463 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 842, 46), None, int_258462, None)
    # Getting the type of 'zp' (line 842)
    zp_258464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 46), 'zp', False)
    # Obtaining the member '__getitem__' of a type (line 842)
    getitem___258465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 46), zp_258464, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 842)
    subscript_call_result_258466 = invoke(stypy.reporting.localization.Localization(__file__, 842, 46), getitem___258465, slice_258463)
    
    # Processing the call keyword arguments (line 842)
    kwargs_258467 = {}
    # Getting the type of 'abs' (line 842)
    abs_258461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 42), 'abs', False)
    # Calling abs(args, kwargs) (line 842)
    abs_call_result_258468 = invoke(stypy.reporting.localization.Localization(__file__, 842, 42), abs_258461, *[subscript_call_result_258466], **kwargs_258467)
    
    # Applying the binary operator '*' (line 842)
    result_mul_258469 = python_operator(stypy.reporting.localization.Localization(__file__, 842, 36), '*', tol_258460, abs_call_result_258468)
    
    # Applying the binary operator '<=' (line 842)
    result_le_258470 = python_operator(stypy.reporting.localization.Localization(__file__, 842, 16), '<=', diff_call_result_258459, result_mul_258469)
    
    # Assigning a type to the variable 'same_real' (line 842)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 4), 'same_real', result_le_258470)
    
    # Assigning a Call to a Name (line 843):
    
    # Assigning a Call to a Name (line 843):
    
    # Call to diff(...): (line 843)
    # Processing the call arguments (line 843)
    
    # Call to concatenate(...): (line 843)
    # Processing the call arguments (line 843)
    
    # Obtaining an instance of the builtin type 'tuple' (line 843)
    tuple_258474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 843)
    # Adding element type (line 843)
    
    # Obtaining an instance of the builtin type 'list' (line 843)
    list_258475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 36), 'list')
    # Adding type elements to the builtin type 'list' instance (line 843)
    # Adding element type (line 843)
    int_258476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 843, 36), list_258475, int_258476)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 843, 36), tuple_258474, list_258475)
    # Adding element type (line 843)
    # Getting the type of 'same_real' (line 843)
    same_real_258477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 41), 'same_real', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 843, 36), tuple_258474, same_real_258477)
    # Adding element type (line 843)
    
    # Obtaining an instance of the builtin type 'list' (line 843)
    list_258478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 52), 'list')
    # Adding type elements to the builtin type 'list' instance (line 843)
    # Adding element type (line 843)
    int_258479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 53), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 843, 52), list_258478, int_258479)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 843, 36), tuple_258474, list_258478)
    
    # Processing the call keyword arguments (line 843)
    kwargs_258480 = {}
    # Getting the type of 'concatenate' (line 843)
    concatenate_258473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 23), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 843)
    concatenate_call_result_258481 = invoke(stypy.reporting.localization.Localization(__file__, 843, 23), concatenate_258473, *[tuple_258474], **kwargs_258480)
    
    # Processing the call keyword arguments (line 843)
    kwargs_258482 = {}
    # Getting the type of 'numpy' (line 843)
    numpy_258471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 12), 'numpy', False)
    # Obtaining the member 'diff' of a type (line 843)
    diff_258472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 12), numpy_258471, 'diff')
    # Calling diff(args, kwargs) (line 843)
    diff_call_result_258483 = invoke(stypy.reporting.localization.Localization(__file__, 843, 12), diff_258472, *[concatenate_call_result_258481], **kwargs_258482)
    
    # Assigning a type to the variable 'diffs' (line 843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 4), 'diffs', diff_call_result_258483)
    
    # Assigning a Subscript to a Name (line 844):
    
    # Assigning a Subscript to a Name (line 844):
    
    # Obtaining the type of the subscript
    int_258484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 40), 'int')
    
    # Call to where(...): (line 844)
    # Processing the call arguments (line 844)
    
    # Getting the type of 'diffs' (line 844)
    diffs_258487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 29), 'diffs', False)
    int_258488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 37), 'int')
    # Applying the binary operator '>' (line 844)
    result_gt_258489 = python_operator(stypy.reporting.localization.Localization(__file__, 844, 29), '>', diffs_258487, int_258488)
    
    # Processing the call keyword arguments (line 844)
    kwargs_258490 = {}
    # Getting the type of 'numpy' (line 844)
    numpy_258485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 17), 'numpy', False)
    # Obtaining the member 'where' of a type (line 844)
    where_258486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 17), numpy_258485, 'where')
    # Calling where(args, kwargs) (line 844)
    where_call_result_258491 = invoke(stypy.reporting.localization.Localization(__file__, 844, 17), where_258486, *[result_gt_258489], **kwargs_258490)
    
    # Obtaining the member '__getitem__' of a type (line 844)
    getitem___258492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 17), where_call_result_258491, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 844)
    subscript_call_result_258493 = invoke(stypy.reporting.localization.Localization(__file__, 844, 17), getitem___258492, int_258484)
    
    # Assigning a type to the variable 'run_starts' (line 844)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 844, 4), 'run_starts', subscript_call_result_258493)
    
    # Assigning a Subscript to a Name (line 845):
    
    # Assigning a Subscript to a Name (line 845):
    
    # Obtaining the type of the subscript
    int_258494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 845, 39), 'int')
    
    # Call to where(...): (line 845)
    # Processing the call arguments (line 845)
    
    # Getting the type of 'diffs' (line 845)
    diffs_258497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 28), 'diffs', False)
    int_258498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 845, 36), 'int')
    # Applying the binary operator '<' (line 845)
    result_lt_258499 = python_operator(stypy.reporting.localization.Localization(__file__, 845, 28), '<', diffs_258497, int_258498)
    
    # Processing the call keyword arguments (line 845)
    kwargs_258500 = {}
    # Getting the type of 'numpy' (line 845)
    numpy_258495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 16), 'numpy', False)
    # Obtaining the member 'where' of a type (line 845)
    where_258496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 16), numpy_258495, 'where')
    # Calling where(args, kwargs) (line 845)
    where_call_result_258501 = invoke(stypy.reporting.localization.Localization(__file__, 845, 16), where_258496, *[result_lt_258499], **kwargs_258500)
    
    # Obtaining the member '__getitem__' of a type (line 845)
    getitem___258502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 16), where_call_result_258501, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 845)
    subscript_call_result_258503 = invoke(stypy.reporting.localization.Localization(__file__, 845, 16), getitem___258502, int_258494)
    
    # Assigning a type to the variable 'run_stops' (line 845)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 4), 'run_stops', subscript_call_result_258503)
    
    
    # Call to range(...): (line 848)
    # Processing the call arguments (line 848)
    
    # Call to len(...): (line 848)
    # Processing the call arguments (line 848)
    # Getting the type of 'run_starts' (line 848)
    run_starts_258506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 23), 'run_starts', False)
    # Processing the call keyword arguments (line 848)
    kwargs_258507 = {}
    # Getting the type of 'len' (line 848)
    len_258505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 19), 'len', False)
    # Calling len(args, kwargs) (line 848)
    len_call_result_258508 = invoke(stypy.reporting.localization.Localization(__file__, 848, 19), len_258505, *[run_starts_258506], **kwargs_258507)
    
    # Processing the call keyword arguments (line 848)
    kwargs_258509 = {}
    # Getting the type of 'range' (line 848)
    range_258504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 13), 'range', False)
    # Calling range(args, kwargs) (line 848)
    range_call_result_258510 = invoke(stypy.reporting.localization.Localization(__file__, 848, 13), range_258504, *[len_call_result_258508], **kwargs_258509)
    
    # Testing the type of a for loop iterable (line 848)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 848, 4), range_call_result_258510)
    # Getting the type of the for loop variable (line 848)
    for_loop_var_258511 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 848, 4), range_call_result_258510)
    # Assigning a type to the variable 'i' (line 848)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 4), 'i', for_loop_var_258511)
    # SSA begins for a for statement (line 848)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 849):
    
    # Assigning a Subscript to a Name (line 849):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 849)
    i_258512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 27), 'i')
    # Getting the type of 'run_starts' (line 849)
    run_starts_258513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 16), 'run_starts')
    # Obtaining the member '__getitem__' of a type (line 849)
    getitem___258514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 16), run_starts_258513, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 849)
    subscript_call_result_258515 = invoke(stypy.reporting.localization.Localization(__file__, 849, 16), getitem___258514, i_258512)
    
    # Assigning a type to the variable 'start' (line 849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 8), 'start', subscript_call_result_258515)
    
    # Assigning a BinOp to a Name (line 850):
    
    # Assigning a BinOp to a Name (line 850):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 850)
    i_258516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 25), 'i')
    # Getting the type of 'run_stops' (line 850)
    run_stops_258517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 15), 'run_stops')
    # Obtaining the member '__getitem__' of a type (line 850)
    getitem___258518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 15), run_stops_258517, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 850)
    subscript_call_result_258519 = invoke(stypy.reporting.localization.Localization(__file__, 850, 15), getitem___258518, i_258516)
    
    int_258520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 850, 30), 'int')
    # Applying the binary operator '+' (line 850)
    result_add_258521 = python_operator(stypy.reporting.localization.Localization(__file__, 850, 15), '+', subscript_call_result_258519, int_258520)
    
    # Assigning a type to the variable 'stop' (line 850)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 8), 'stop', result_add_258521)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 851)
    tuple_258522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 851, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 851)
    # Adding element type (line 851)
    
    # Obtaining the type of the subscript
    # Getting the type of 'start' (line 851)
    start_258523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 25), 'start')
    # Getting the type of 'stop' (line 851)
    stop_258524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 31), 'stop')
    slice_258525 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 851, 22), start_258523, stop_258524, None)
    # Getting the type of 'zp' (line 851)
    zp_258526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 22), 'zp')
    # Obtaining the member '__getitem__' of a type (line 851)
    getitem___258527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 22), zp_258526, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 851)
    subscript_call_result_258528 = invoke(stypy.reporting.localization.Localization(__file__, 851, 22), getitem___258527, slice_258525)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 851, 22), tuple_258522, subscript_call_result_258528)
    # Adding element type (line 851)
    
    # Obtaining the type of the subscript
    # Getting the type of 'start' (line 851)
    start_258529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 41), 'start')
    # Getting the type of 'stop' (line 851)
    stop_258530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 47), 'stop')
    slice_258531 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 851, 38), start_258529, stop_258530, None)
    # Getting the type of 'zn' (line 851)
    zn_258532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 38), 'zn')
    # Obtaining the member '__getitem__' of a type (line 851)
    getitem___258533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 38), zn_258532, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 851)
    subscript_call_result_258534 = invoke(stypy.reporting.localization.Localization(__file__, 851, 38), getitem___258533, slice_258531)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 851, 22), tuple_258522, subscript_call_result_258534)
    
    # Testing the type of a for loop iterable (line 851)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 851, 8), tuple_258522)
    # Getting the type of the for loop variable (line 851)
    for_loop_var_258535 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 851, 8), tuple_258522)
    # Assigning a type to the variable 'chunk' (line 851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 8), 'chunk', for_loop_var_258535)
    # SSA begins for a for statement (line 851)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Subscript (line 852):
    
    # Assigning a Subscript to a Subscript (line 852):
    
    # Obtaining the type of the subscript
    
    # Call to lexsort(...): (line 852)
    # Processing the call arguments (line 852)
    
    # Obtaining an instance of the builtin type 'list' (line 852)
    list_258538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 42), 'list')
    # Adding type elements to the builtin type 'list' instance (line 852)
    # Adding element type (line 852)
    
    # Call to abs(...): (line 852)
    # Processing the call arguments (line 852)
    # Getting the type of 'chunk' (line 852)
    chunk_258540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 47), 'chunk', False)
    # Obtaining the member 'imag' of a type (line 852)
    imag_258541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 47), chunk_258540, 'imag')
    # Processing the call keyword arguments (line 852)
    kwargs_258542 = {}
    # Getting the type of 'abs' (line 852)
    abs_258539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 43), 'abs', False)
    # Calling abs(args, kwargs) (line 852)
    abs_call_result_258543 = invoke(stypy.reporting.localization.Localization(__file__, 852, 43), abs_258539, *[imag_258541], **kwargs_258542)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 852, 42), list_258538, abs_call_result_258543)
    
    # Processing the call keyword arguments (line 852)
    kwargs_258544 = {}
    # Getting the type of 'np' (line 852)
    np_258536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 31), 'np', False)
    # Obtaining the member 'lexsort' of a type (line 852)
    lexsort_258537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 31), np_258536, 'lexsort')
    # Calling lexsort(args, kwargs) (line 852)
    lexsort_call_result_258545 = invoke(stypy.reporting.localization.Localization(__file__, 852, 31), lexsort_258537, *[list_258538], **kwargs_258544)
    
    # Getting the type of 'chunk' (line 852)
    chunk_258546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 25), 'chunk')
    # Obtaining the member '__getitem__' of a type (line 852)
    getitem___258547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 852, 25), chunk_258546, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 852)
    subscript_call_result_258548 = invoke(stypy.reporting.localization.Localization(__file__, 852, 25), getitem___258547, lexsort_call_result_258545)
    
    # Getting the type of 'chunk' (line 852)
    chunk_258549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'chunk')
    Ellipsis_258550 = Ellipsis
    # Storing an element on a container (line 852)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 852, 12), chunk_258549, (Ellipsis_258550, subscript_call_result_258548))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 855)
    # Processing the call arguments (line 855)
    
    
    # Call to abs(...): (line 855)
    # Processing the call arguments (line 855)
    # Getting the type of 'zp' (line 855)
    zp_258553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 15), 'zp', False)
    
    # Call to conj(...): (line 855)
    # Processing the call keyword arguments (line 855)
    kwargs_258556 = {}
    # Getting the type of 'zn' (line 855)
    zn_258554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 20), 'zn', False)
    # Obtaining the member 'conj' of a type (line 855)
    conj_258555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 20), zn_258554, 'conj')
    # Calling conj(args, kwargs) (line 855)
    conj_call_result_258557 = invoke(stypy.reporting.localization.Localization(__file__, 855, 20), conj_258555, *[], **kwargs_258556)
    
    # Applying the binary operator '-' (line 855)
    result_sub_258558 = python_operator(stypy.reporting.localization.Localization(__file__, 855, 15), '-', zp_258553, conj_call_result_258557)
    
    # Processing the call keyword arguments (line 855)
    kwargs_258559 = {}
    # Getting the type of 'abs' (line 855)
    abs_258552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 11), 'abs', False)
    # Calling abs(args, kwargs) (line 855)
    abs_call_result_258560 = invoke(stypy.reporting.localization.Localization(__file__, 855, 11), abs_258552, *[result_sub_258558], **kwargs_258559)
    
    # Getting the type of 'tol' (line 855)
    tol_258561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 33), 'tol', False)
    
    # Call to abs(...): (line 855)
    # Processing the call arguments (line 855)
    # Getting the type of 'zn' (line 855)
    zn_258563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 43), 'zn', False)
    # Processing the call keyword arguments (line 855)
    kwargs_258564 = {}
    # Getting the type of 'abs' (line 855)
    abs_258562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 39), 'abs', False)
    # Calling abs(args, kwargs) (line 855)
    abs_call_result_258565 = invoke(stypy.reporting.localization.Localization(__file__, 855, 39), abs_258562, *[zn_258563], **kwargs_258564)
    
    # Applying the binary operator '*' (line 855)
    result_mul_258566 = python_operator(stypy.reporting.localization.Localization(__file__, 855, 33), '*', tol_258561, abs_call_result_258565)
    
    # Applying the binary operator '>' (line 855)
    result_gt_258567 = python_operator(stypy.reporting.localization.Localization(__file__, 855, 11), '>', abs_call_result_258560, result_mul_258566)
    
    # Processing the call keyword arguments (line 855)
    kwargs_258568 = {}
    # Getting the type of 'any' (line 855)
    any_258551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 7), 'any', False)
    # Calling any(args, kwargs) (line 855)
    any_call_result_258569 = invoke(stypy.reporting.localization.Localization(__file__, 855, 7), any_258551, *[result_gt_258567], **kwargs_258568)
    
    # Testing the type of an if condition (line 855)
    if_condition_258570 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 855, 4), any_call_result_258569)
    # Assigning a type to the variable 'if_condition_258570' (line 855)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 855, 4), 'if_condition_258570', if_condition_258570)
    # SSA begins for if statement (line 855)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 856)
    # Processing the call arguments (line 856)
    str_258572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 25), 'str', 'Array contains complex value with no matching conjugate.')
    # Processing the call keyword arguments (line 856)
    kwargs_258573 = {}
    # Getting the type of 'ValueError' (line 856)
    ValueError_258571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 856)
    ValueError_call_result_258574 = invoke(stypy.reporting.localization.Localization(__file__, 856, 14), ValueError_258571, *[str_258572], **kwargs_258573)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 856, 8), ValueError_call_result_258574, 'raise parameter', BaseException)
    # SSA join for if statement (line 855)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 860):
    
    # Assigning a BinOp to a Name (line 860):
    # Getting the type of 'zp' (line 860)
    zp_258575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 10), 'zp')
    
    # Call to conj(...): (line 860)
    # Processing the call keyword arguments (line 860)
    kwargs_258578 = {}
    # Getting the type of 'zn' (line 860)
    zn_258576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 15), 'zn', False)
    # Obtaining the member 'conj' of a type (line 860)
    conj_258577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 15), zn_258576, 'conj')
    # Calling conj(args, kwargs) (line 860)
    conj_call_result_258579 = invoke(stypy.reporting.localization.Localization(__file__, 860, 15), conj_258577, *[], **kwargs_258578)
    
    # Applying the binary operator '+' (line 860)
    result_add_258580 = python_operator(stypy.reporting.localization.Localization(__file__, 860, 10), '+', zp_258575, conj_call_result_258579)
    
    int_258581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 28), 'int')
    # Applying the binary operator 'div' (line 860)
    result_div_258582 = python_operator(stypy.reporting.localization.Localization(__file__, 860, 9), 'div', result_add_258580, int_258581)
    
    # Assigning a type to the variable 'zc' (line 860)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 4), 'zc', result_div_258582)
    
    # Obtaining an instance of the builtin type 'tuple' (line 862)
    tuple_258583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 862, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 862)
    # Adding element type (line 862)
    # Getting the type of 'zc' (line 862)
    zc_258584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 11), 'zc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 862, 11), tuple_258583, zc_258584)
    # Adding element type (line 862)
    # Getting the type of 'zr' (line 862)
    zr_258585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 15), 'zr')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 862, 11), tuple_258583, zr_258585)
    
    # Assigning a type to the variable 'stypy_return_type' (line 862)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 862, 4), 'stypy_return_type', tuple_258583)
    
    # ################# End of '_cplxreal(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_cplxreal' in the type store
    # Getting the type of 'stypy_return_type' (line 761)
    stypy_return_type_258586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_258586)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_cplxreal'
    return stypy_return_type_258586

# Assigning a type to the variable '_cplxreal' (line 761)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 0), '_cplxreal', _cplxreal)

@norecursion
def _cplxpair(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 865)
    None_258587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 21), 'None')
    defaults = [None_258587]
    # Create a new context for function '_cplxpair'
    module_type_store = module_type_store.open_function_context('_cplxpair', 865, 0, False)
    
    # Passed parameters checking function
    _cplxpair.stypy_localization = localization
    _cplxpair.stypy_type_of_self = None
    _cplxpair.stypy_type_store = module_type_store
    _cplxpair.stypy_function_name = '_cplxpair'
    _cplxpair.stypy_param_names_list = ['z', 'tol']
    _cplxpair.stypy_varargs_param_name = None
    _cplxpair.stypy_kwargs_param_name = None
    _cplxpair.stypy_call_defaults = defaults
    _cplxpair.stypy_call_varargs = varargs
    _cplxpair.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_cplxpair', ['z', 'tol'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_cplxpair', localization, ['z', 'tol'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_cplxpair(...)' code ##################

    str_258588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, (-1)), 'str', "\n    Sort into pairs of complex conjugates.\n\n    Complex conjugates in `z` are sorted by increasing real part.  In each\n    pair, the number with negative imaginary part appears first.\n\n    If pairs have identical real parts, they are sorted by increasing\n    imaginary magnitude.\n\n    Two complex numbers are considered a conjugate pair if their real and\n    imaginary parts differ in magnitude by less than ``tol * abs(z)``.  The\n    pairs are forced to be exact complex conjugates by averaging the positive\n    and negative values.\n\n    Purely real numbers are also sorted, but placed after the complex\n    conjugate pairs.  A number is considered real if its imaginary part is\n    smaller than `tol` times the magnitude of the number.\n\n    Parameters\n    ----------\n    z : array_like\n        1-dimensional input array to be sorted.\n    tol : float, optional\n        Relative tolerance for testing realness and conjugate equality.\n        Default is ``100 * spacing(1)`` of `z`'s data type (i.e. 2e-14 for\n        float64)\n\n    Returns\n    -------\n    y : ndarray\n        Complex conjugate pairs followed by real numbers.\n\n    Raises\n    ------\n    ValueError\n        If there are any complex numbers in `z` for which a conjugate\n        cannot be found.\n\n    See Also\n    --------\n    _cplxreal\n\n    Examples\n    --------\n    >>> a = [4, 3, 1, 2-2j, 2+2j, 2-1j, 2+1j, 2-1j, 2+1j, 1+1j, 1-1j]\n    >>> z = _cplxpair(a)\n    >>> print(z)\n    [ 1.-1.j  1.+1.j  2.-1.j  2.+1.j  2.-1.j  2.+1.j  2.-2.j  2.+2.j  1.+0.j\n      3.+0.j  4.+0.j]\n    ")
    
    # Assigning a Call to a Name (line 917):
    
    # Assigning a Call to a Name (line 917):
    
    # Call to atleast_1d(...): (line 917)
    # Processing the call arguments (line 917)
    # Getting the type of 'z' (line 917)
    z_258590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 19), 'z', False)
    # Processing the call keyword arguments (line 917)
    kwargs_258591 = {}
    # Getting the type of 'atleast_1d' (line 917)
    atleast_1d_258589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 917)
    atleast_1d_call_result_258592 = invoke(stypy.reporting.localization.Localization(__file__, 917, 8), atleast_1d_258589, *[z_258590], **kwargs_258591)
    
    # Assigning a type to the variable 'z' (line 917)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 4), 'z', atleast_1d_call_result_258592)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'z' (line 918)
    z_258593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 7), 'z')
    # Obtaining the member 'size' of a type (line 918)
    size_258594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 7), z_258593, 'size')
    int_258595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 17), 'int')
    # Applying the binary operator '==' (line 918)
    result_eq_258596 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 7), '==', size_258594, int_258595)
    
    
    # Call to isrealobj(...): (line 918)
    # Processing the call arguments (line 918)
    # Getting the type of 'z' (line 918)
    z_258599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 35), 'z', False)
    # Processing the call keyword arguments (line 918)
    kwargs_258600 = {}
    # Getting the type of 'np' (line 918)
    np_258597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 22), 'np', False)
    # Obtaining the member 'isrealobj' of a type (line 918)
    isrealobj_258598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 22), np_258597, 'isrealobj')
    # Calling isrealobj(args, kwargs) (line 918)
    isrealobj_call_result_258601 = invoke(stypy.reporting.localization.Localization(__file__, 918, 22), isrealobj_258598, *[z_258599], **kwargs_258600)
    
    # Applying the binary operator 'or' (line 918)
    result_or_keyword_258602 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 7), 'or', result_eq_258596, isrealobj_call_result_258601)
    
    # Testing the type of an if condition (line 918)
    if_condition_258603 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 918, 4), result_or_keyword_258602)
    # Assigning a type to the variable 'if_condition_258603' (line 918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 4), 'if_condition_258603', if_condition_258603)
    # SSA begins for if statement (line 918)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sort(...): (line 919)
    # Processing the call arguments (line 919)
    # Getting the type of 'z' (line 919)
    z_258606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 23), 'z', False)
    # Processing the call keyword arguments (line 919)
    kwargs_258607 = {}
    # Getting the type of 'np' (line 919)
    np_258604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 15), 'np', False)
    # Obtaining the member 'sort' of a type (line 919)
    sort_258605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 15), np_258604, 'sort')
    # Calling sort(args, kwargs) (line 919)
    sort_call_result_258608 = invoke(stypy.reporting.localization.Localization(__file__, 919, 15), sort_258605, *[z_258606], **kwargs_258607)
    
    # Assigning a type to the variable 'stypy_return_type' (line 919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'stypy_return_type', sort_call_result_258608)
    # SSA join for if statement (line 918)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'z' (line 921)
    z_258609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 7), 'z')
    # Obtaining the member 'ndim' of a type (line 921)
    ndim_258610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 7), z_258609, 'ndim')
    int_258611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 17), 'int')
    # Applying the binary operator '!=' (line 921)
    result_ne_258612 = python_operator(stypy.reporting.localization.Localization(__file__, 921, 7), '!=', ndim_258610, int_258611)
    
    # Testing the type of an if condition (line 921)
    if_condition_258613 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 921, 4), result_ne_258612)
    # Assigning a type to the variable 'if_condition_258613' (line 921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 4), 'if_condition_258613', if_condition_258613)
    # SSA begins for if statement (line 921)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 922)
    # Processing the call arguments (line 922)
    str_258615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 25), 'str', 'z must be 1-dimensional')
    # Processing the call keyword arguments (line 922)
    kwargs_258616 = {}
    # Getting the type of 'ValueError' (line 922)
    ValueError_258614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 922)
    ValueError_call_result_258617 = invoke(stypy.reporting.localization.Localization(__file__, 922, 14), ValueError_258614, *[str_258615], **kwargs_258616)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 922, 8), ValueError_call_result_258617, 'raise parameter', BaseException)
    # SSA join for if statement (line 921)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 924):
    
    # Assigning a Subscript to a Name (line 924):
    
    # Obtaining the type of the subscript
    int_258618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 4), 'int')
    
    # Call to _cplxreal(...): (line 924)
    # Processing the call arguments (line 924)
    # Getting the type of 'z' (line 924)
    z_258620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 23), 'z', False)
    # Getting the type of 'tol' (line 924)
    tol_258621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 26), 'tol', False)
    # Processing the call keyword arguments (line 924)
    kwargs_258622 = {}
    # Getting the type of '_cplxreal' (line 924)
    _cplxreal_258619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 13), '_cplxreal', False)
    # Calling _cplxreal(args, kwargs) (line 924)
    _cplxreal_call_result_258623 = invoke(stypy.reporting.localization.Localization(__file__, 924, 13), _cplxreal_258619, *[z_258620, tol_258621], **kwargs_258622)
    
    # Obtaining the member '__getitem__' of a type (line 924)
    getitem___258624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 4), _cplxreal_call_result_258623, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 924)
    subscript_call_result_258625 = invoke(stypy.reporting.localization.Localization(__file__, 924, 4), getitem___258624, int_258618)
    
    # Assigning a type to the variable 'tuple_var_assignment_257314' (line 924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'tuple_var_assignment_257314', subscript_call_result_258625)
    
    # Assigning a Subscript to a Name (line 924):
    
    # Obtaining the type of the subscript
    int_258626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 4), 'int')
    
    # Call to _cplxreal(...): (line 924)
    # Processing the call arguments (line 924)
    # Getting the type of 'z' (line 924)
    z_258628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 23), 'z', False)
    # Getting the type of 'tol' (line 924)
    tol_258629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 26), 'tol', False)
    # Processing the call keyword arguments (line 924)
    kwargs_258630 = {}
    # Getting the type of '_cplxreal' (line 924)
    _cplxreal_258627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 13), '_cplxreal', False)
    # Calling _cplxreal(args, kwargs) (line 924)
    _cplxreal_call_result_258631 = invoke(stypy.reporting.localization.Localization(__file__, 924, 13), _cplxreal_258627, *[z_258628, tol_258629], **kwargs_258630)
    
    # Obtaining the member '__getitem__' of a type (line 924)
    getitem___258632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 4), _cplxreal_call_result_258631, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 924)
    subscript_call_result_258633 = invoke(stypy.reporting.localization.Localization(__file__, 924, 4), getitem___258632, int_258626)
    
    # Assigning a type to the variable 'tuple_var_assignment_257315' (line 924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'tuple_var_assignment_257315', subscript_call_result_258633)
    
    # Assigning a Name to a Name (line 924):
    # Getting the type of 'tuple_var_assignment_257314' (line 924)
    tuple_var_assignment_257314_258634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'tuple_var_assignment_257314')
    # Assigning a type to the variable 'zc' (line 924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'zc', tuple_var_assignment_257314_258634)
    
    # Assigning a Name to a Name (line 924):
    # Getting the type of 'tuple_var_assignment_257315' (line 924)
    tuple_var_assignment_257315_258635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'tuple_var_assignment_257315')
    # Assigning a type to the variable 'zr' (line 924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'zr', tuple_var_assignment_257315_258635)
    
    # Assigning a Call to a Name (line 928):
    
    # Assigning a Call to a Name (line 928):
    
    # Call to flatten(...): (line 928)
    # Processing the call keyword arguments (line 928)
    kwargs_258647 = {}
    
    # Call to dstack(...): (line 928)
    # Processing the call arguments (line 928)
    
    # Obtaining an instance of the builtin type 'tuple' (line 928)
    tuple_258638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 928)
    # Adding element type (line 928)
    
    # Call to conj(...): (line 928)
    # Processing the call keyword arguments (line 928)
    kwargs_258641 = {}
    # Getting the type of 'zc' (line 928)
    zc_258639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 20), 'zc', False)
    # Obtaining the member 'conj' of a type (line 928)
    conj_258640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 20), zc_258639, 'conj')
    # Calling conj(args, kwargs) (line 928)
    conj_call_result_258642 = invoke(stypy.reporting.localization.Localization(__file__, 928, 20), conj_258640, *[], **kwargs_258641)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 928, 20), tuple_258638, conj_call_result_258642)
    # Adding element type (line 928)
    # Getting the type of 'zc' (line 928)
    zc_258643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 31), 'zc', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 928, 20), tuple_258638, zc_258643)
    
    # Processing the call keyword arguments (line 928)
    kwargs_258644 = {}
    # Getting the type of 'np' (line 928)
    np_258636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 9), 'np', False)
    # Obtaining the member 'dstack' of a type (line 928)
    dstack_258637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 9), np_258636, 'dstack')
    # Calling dstack(args, kwargs) (line 928)
    dstack_call_result_258645 = invoke(stypy.reporting.localization.Localization(__file__, 928, 9), dstack_258637, *[tuple_258638], **kwargs_258644)
    
    # Obtaining the member 'flatten' of a type (line 928)
    flatten_258646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 9), dstack_call_result_258645, 'flatten')
    # Calling flatten(args, kwargs) (line 928)
    flatten_call_result_258648 = invoke(stypy.reporting.localization.Localization(__file__, 928, 9), flatten_258646, *[], **kwargs_258647)
    
    # Assigning a type to the variable 'zc' (line 928)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'zc', flatten_call_result_258648)
    
    # Assigning a Call to a Name (line 929):
    
    # Assigning a Call to a Name (line 929):
    
    # Call to append(...): (line 929)
    # Processing the call arguments (line 929)
    # Getting the type of 'zc' (line 929)
    zc_258651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 18), 'zc', False)
    # Getting the type of 'zr' (line 929)
    zr_258652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 22), 'zr', False)
    # Processing the call keyword arguments (line 929)
    kwargs_258653 = {}
    # Getting the type of 'np' (line 929)
    np_258649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'np', False)
    # Obtaining the member 'append' of a type (line 929)
    append_258650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 8), np_258649, 'append')
    # Calling append(args, kwargs) (line 929)
    append_call_result_258654 = invoke(stypy.reporting.localization.Localization(__file__, 929, 8), append_258650, *[zc_258651, zr_258652], **kwargs_258653)
    
    # Assigning a type to the variable 'z' (line 929)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 4), 'z', append_call_result_258654)
    # Getting the type of 'z' (line 930)
    z_258655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 11), 'z')
    # Assigning a type to the variable 'stypy_return_type' (line 930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 4), 'stypy_return_type', z_258655)
    
    # ################# End of '_cplxpair(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_cplxpair' in the type store
    # Getting the type of 'stypy_return_type' (line 865)
    stypy_return_type_258656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_258656)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_cplxpair'
    return stypy_return_type_258656

# Assigning a type to the variable '_cplxpair' (line 865)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 865, 0), '_cplxpair', _cplxpair)

@norecursion
def tf2zpk(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'tf2zpk'
    module_type_store = module_type_store.open_function_context('tf2zpk', 933, 0, False)
    
    # Passed parameters checking function
    tf2zpk.stypy_localization = localization
    tf2zpk.stypy_type_of_self = None
    tf2zpk.stypy_type_store = module_type_store
    tf2zpk.stypy_function_name = 'tf2zpk'
    tf2zpk.stypy_param_names_list = ['b', 'a']
    tf2zpk.stypy_varargs_param_name = None
    tf2zpk.stypy_kwargs_param_name = None
    tf2zpk.stypy_call_defaults = defaults
    tf2zpk.stypy_call_varargs = varargs
    tf2zpk.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tf2zpk', ['b', 'a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tf2zpk', localization, ['b', 'a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tf2zpk(...)' code ##################

    str_258657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, (-1)), 'str', 'Return zero, pole, gain (z, p, k) representation from a numerator,\n    denominator representation of a linear filter.\n\n    Parameters\n    ----------\n    b : array_like\n        Numerator polynomial coefficients.\n    a : array_like\n        Denominator polynomial coefficients.\n\n    Returns\n    -------\n    z : ndarray\n        Zeros of the transfer function.\n    p : ndarray\n        Poles of the transfer function.\n    k : float\n        System gain.\n\n    Notes\n    -----\n    If some values of `b` are too close to 0, they are removed. In that case,\n    a BadCoefficients warning is emitted.\n\n    The `b` and `a` arrays are interpreted as coefficients for positive,\n    descending powers of the transfer function variable.  So the inputs\n    :math:`b = [b_0, b_1, ..., b_M]` and :math:`a =[a_0, a_1, ..., a_N]`\n    can represent an analog filter of the form:\n\n    .. math::\n\n        H(s) = \\frac\n        {b_0 s^M + b_1 s^{(M-1)} + \\cdots + b_M}\n        {a_0 s^N + a_1 s^{(N-1)} + \\cdots + a_N}\n\n    or a discrete-time filter of the form:\n\n    .. math::\n\n        H(z) = \\frac\n        {b_0 z^M + b_1 z^{(M-1)} + \\cdots + b_M}\n        {a_0 z^N + a_1 z^{(N-1)} + \\cdots + a_N}\n\n    This "positive powers" form is found more commonly in controls\n    engineering.  If `M` and `N` are equal (which is true for all filters\n    generated by the bilinear transform), then this happens to be equivalent\n    to the "negative powers" discrete-time form preferred in DSP:\n\n    .. math::\n\n        H(z) = \\frac\n        {b_0 + b_1 z^{-1} + \\cdots + b_M z^{-M}}\n        {a_0 + a_1 z^{-1} + \\cdots + a_N z^{-N}}\n\n    Although this is true for common filters, remember that this is not true\n    in the general case.  If `M` and `N` are not equal, the discrete-time\n    transfer function coefficients must first be converted to the "positive\n    powers" form before finding the poles and zeros.\n\n    ')
    
    # Assigning a Call to a Tuple (line 994):
    
    # Assigning a Subscript to a Name (line 994):
    
    # Obtaining the type of the subscript
    int_258658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 4), 'int')
    
    # Call to normalize(...): (line 994)
    # Processing the call arguments (line 994)
    # Getting the type of 'b' (line 994)
    b_258660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 21), 'b', False)
    # Getting the type of 'a' (line 994)
    a_258661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 24), 'a', False)
    # Processing the call keyword arguments (line 994)
    kwargs_258662 = {}
    # Getting the type of 'normalize' (line 994)
    normalize_258659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 11), 'normalize', False)
    # Calling normalize(args, kwargs) (line 994)
    normalize_call_result_258663 = invoke(stypy.reporting.localization.Localization(__file__, 994, 11), normalize_258659, *[b_258660, a_258661], **kwargs_258662)
    
    # Obtaining the member '__getitem__' of a type (line 994)
    getitem___258664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 4), normalize_call_result_258663, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 994)
    subscript_call_result_258665 = invoke(stypy.reporting.localization.Localization(__file__, 994, 4), getitem___258664, int_258658)
    
    # Assigning a type to the variable 'tuple_var_assignment_257316' (line 994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'tuple_var_assignment_257316', subscript_call_result_258665)
    
    # Assigning a Subscript to a Name (line 994):
    
    # Obtaining the type of the subscript
    int_258666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 994, 4), 'int')
    
    # Call to normalize(...): (line 994)
    # Processing the call arguments (line 994)
    # Getting the type of 'b' (line 994)
    b_258668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 21), 'b', False)
    # Getting the type of 'a' (line 994)
    a_258669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 24), 'a', False)
    # Processing the call keyword arguments (line 994)
    kwargs_258670 = {}
    # Getting the type of 'normalize' (line 994)
    normalize_258667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 11), 'normalize', False)
    # Calling normalize(args, kwargs) (line 994)
    normalize_call_result_258671 = invoke(stypy.reporting.localization.Localization(__file__, 994, 11), normalize_258667, *[b_258668, a_258669], **kwargs_258670)
    
    # Obtaining the member '__getitem__' of a type (line 994)
    getitem___258672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 4), normalize_call_result_258671, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 994)
    subscript_call_result_258673 = invoke(stypy.reporting.localization.Localization(__file__, 994, 4), getitem___258672, int_258666)
    
    # Assigning a type to the variable 'tuple_var_assignment_257317' (line 994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'tuple_var_assignment_257317', subscript_call_result_258673)
    
    # Assigning a Name to a Name (line 994):
    # Getting the type of 'tuple_var_assignment_257316' (line 994)
    tuple_var_assignment_257316_258674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'tuple_var_assignment_257316')
    # Assigning a type to the variable 'b' (line 994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'b', tuple_var_assignment_257316_258674)
    
    # Assigning a Name to a Name (line 994):
    # Getting the type of 'tuple_var_assignment_257317' (line 994)
    tuple_var_assignment_257317_258675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 4), 'tuple_var_assignment_257317')
    # Assigning a type to the variable 'a' (line 994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 7), 'a', tuple_var_assignment_257317_258675)
    
    # Assigning a BinOp to a Name (line 995):
    
    # Assigning a BinOp to a Name (line 995):
    # Getting the type of 'b' (line 995)
    b_258676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 9), 'b')
    float_258677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 13), 'float')
    # Applying the binary operator '+' (line 995)
    result_add_258678 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 9), '+', b_258676, float_258677)
    
    
    # Obtaining the type of the subscript
    int_258679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 22), 'int')
    # Getting the type of 'a' (line 995)
    a_258680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 20), 'a')
    # Obtaining the member '__getitem__' of a type (line 995)
    getitem___258681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 20), a_258680, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 995)
    subscript_call_result_258682 = invoke(stypy.reporting.localization.Localization(__file__, 995, 20), getitem___258681, int_258679)
    
    # Applying the binary operator 'div' (line 995)
    result_div_258683 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 8), 'div', result_add_258678, subscript_call_result_258682)
    
    # Assigning a type to the variable 'b' (line 995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 4), 'b', result_div_258683)
    
    # Assigning a BinOp to a Name (line 996):
    
    # Assigning a BinOp to a Name (line 996):
    # Getting the type of 'a' (line 996)
    a_258684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 9), 'a')
    float_258685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 13), 'float')
    # Applying the binary operator '+' (line 996)
    result_add_258686 = python_operator(stypy.reporting.localization.Localization(__file__, 996, 9), '+', a_258684, float_258685)
    
    
    # Obtaining the type of the subscript
    int_258687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 996, 22), 'int')
    # Getting the type of 'a' (line 996)
    a_258688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 20), 'a')
    # Obtaining the member '__getitem__' of a type (line 996)
    getitem___258689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 20), a_258688, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 996)
    subscript_call_result_258690 = invoke(stypy.reporting.localization.Localization(__file__, 996, 20), getitem___258689, int_258687)
    
    # Applying the binary operator 'div' (line 996)
    result_div_258691 = python_operator(stypy.reporting.localization.Localization(__file__, 996, 8), 'div', result_add_258686, subscript_call_result_258690)
    
    # Assigning a type to the variable 'a' (line 996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 4), 'a', result_div_258691)
    
    # Assigning a Subscript to a Name (line 997):
    
    # Assigning a Subscript to a Name (line 997):
    
    # Obtaining the type of the subscript
    int_258692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 997, 10), 'int')
    # Getting the type of 'b' (line 997)
    b_258693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 8), 'b')
    # Obtaining the member '__getitem__' of a type (line 997)
    getitem___258694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 8), b_258693, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 997)
    subscript_call_result_258695 = invoke(stypy.reporting.localization.Localization(__file__, 997, 8), getitem___258694, int_258692)
    
    # Assigning a type to the variable 'k' (line 997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 4), 'k', subscript_call_result_258695)
    
    # Getting the type of 'b' (line 998)
    b_258696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 4), 'b')
    
    # Obtaining the type of the subscript
    int_258697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 998, 11), 'int')
    # Getting the type of 'b' (line 998)
    b_258698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 9), 'b')
    # Obtaining the member '__getitem__' of a type (line 998)
    getitem___258699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 9), b_258698, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 998)
    subscript_call_result_258700 = invoke(stypy.reporting.localization.Localization(__file__, 998, 9), getitem___258699, int_258697)
    
    # Applying the binary operator 'div=' (line 998)
    result_div_258701 = python_operator(stypy.reporting.localization.Localization(__file__, 998, 4), 'div=', b_258696, subscript_call_result_258700)
    # Assigning a type to the variable 'b' (line 998)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 4), 'b', result_div_258701)
    
    
    # Assigning a Call to a Name (line 999):
    
    # Assigning a Call to a Name (line 999):
    
    # Call to roots(...): (line 999)
    # Processing the call arguments (line 999)
    # Getting the type of 'b' (line 999)
    b_258703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 14), 'b', False)
    # Processing the call keyword arguments (line 999)
    kwargs_258704 = {}
    # Getting the type of 'roots' (line 999)
    roots_258702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 8), 'roots', False)
    # Calling roots(args, kwargs) (line 999)
    roots_call_result_258705 = invoke(stypy.reporting.localization.Localization(__file__, 999, 8), roots_258702, *[b_258703], **kwargs_258704)
    
    # Assigning a type to the variable 'z' (line 999)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 4), 'z', roots_call_result_258705)
    
    # Assigning a Call to a Name (line 1000):
    
    # Assigning a Call to a Name (line 1000):
    
    # Call to roots(...): (line 1000)
    # Processing the call arguments (line 1000)
    # Getting the type of 'a' (line 1000)
    a_258707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 14), 'a', False)
    # Processing the call keyword arguments (line 1000)
    kwargs_258708 = {}
    # Getting the type of 'roots' (line 1000)
    roots_258706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'roots', False)
    # Calling roots(args, kwargs) (line 1000)
    roots_call_result_258709 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 8), roots_258706, *[a_258707], **kwargs_258708)
    
    # Assigning a type to the variable 'p' (line 1000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 4), 'p', roots_call_result_258709)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1001)
    tuple_258710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1001)
    # Adding element type (line 1001)
    # Getting the type of 'z' (line 1001)
    z_258711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 11), 'z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1001, 11), tuple_258710, z_258711)
    # Adding element type (line 1001)
    # Getting the type of 'p' (line 1001)
    p_258712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 14), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1001, 11), tuple_258710, p_258712)
    # Adding element type (line 1001)
    # Getting the type of 'k' (line 1001)
    k_258713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 17), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1001, 11), tuple_258710, k_258713)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1001)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 4), 'stypy_return_type', tuple_258710)
    
    # ################# End of 'tf2zpk(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tf2zpk' in the type store
    # Getting the type of 'stypy_return_type' (line 933)
    stypy_return_type_258714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_258714)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tf2zpk'
    return stypy_return_type_258714

# Assigning a type to the variable 'tf2zpk' (line 933)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 0), 'tf2zpk', tf2zpk)

@norecursion
def zpk2tf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'zpk2tf'
    module_type_store = module_type_store.open_function_context('zpk2tf', 1004, 0, False)
    
    # Passed parameters checking function
    zpk2tf.stypy_localization = localization
    zpk2tf.stypy_type_of_self = None
    zpk2tf.stypy_type_store = module_type_store
    zpk2tf.stypy_function_name = 'zpk2tf'
    zpk2tf.stypy_param_names_list = ['z', 'p', 'k']
    zpk2tf.stypy_varargs_param_name = None
    zpk2tf.stypy_kwargs_param_name = None
    zpk2tf.stypy_call_defaults = defaults
    zpk2tf.stypy_call_varargs = varargs
    zpk2tf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'zpk2tf', ['z', 'p', 'k'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'zpk2tf', localization, ['z', 'p', 'k'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'zpk2tf(...)' code ##################

    str_258715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, (-1)), 'str', '\n    Return polynomial transfer function representation from zeros and poles\n\n    Parameters\n    ----------\n    z : array_like\n        Zeros of the transfer function.\n    p : array_like\n        Poles of the transfer function.\n    k : float\n        System gain.\n\n    Returns\n    -------\n    b : ndarray\n        Numerator polynomial coefficients.\n    a : ndarray\n        Denominator polynomial coefficients.\n\n    ')
    
    # Assigning a Call to a Name (line 1025):
    
    # Assigning a Call to a Name (line 1025):
    
    # Call to atleast_1d(...): (line 1025)
    # Processing the call arguments (line 1025)
    # Getting the type of 'z' (line 1025)
    z_258717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 19), 'z', False)
    # Processing the call keyword arguments (line 1025)
    kwargs_258718 = {}
    # Getting the type of 'atleast_1d' (line 1025)
    atleast_1d_258716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1025)
    atleast_1d_call_result_258719 = invoke(stypy.reporting.localization.Localization(__file__, 1025, 8), atleast_1d_258716, *[z_258717], **kwargs_258718)
    
    # Assigning a type to the variable 'z' (line 1025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1025, 4), 'z', atleast_1d_call_result_258719)
    
    # Assigning a Call to a Name (line 1026):
    
    # Assigning a Call to a Name (line 1026):
    
    # Call to atleast_1d(...): (line 1026)
    # Processing the call arguments (line 1026)
    # Getting the type of 'k' (line 1026)
    k_258721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 19), 'k', False)
    # Processing the call keyword arguments (line 1026)
    kwargs_258722 = {}
    # Getting the type of 'atleast_1d' (line 1026)
    atleast_1d_258720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1026)
    atleast_1d_call_result_258723 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 8), atleast_1d_258720, *[k_258721], **kwargs_258722)
    
    # Assigning a type to the variable 'k' (line 1026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 4), 'k', atleast_1d_call_result_258723)
    
    
    
    # Call to len(...): (line 1027)
    # Processing the call arguments (line 1027)
    # Getting the type of 'z' (line 1027)
    z_258725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 11), 'z', False)
    # Obtaining the member 'shape' of a type (line 1027)
    shape_258726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 11), z_258725, 'shape')
    # Processing the call keyword arguments (line 1027)
    kwargs_258727 = {}
    # Getting the type of 'len' (line 1027)
    len_258724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 7), 'len', False)
    # Calling len(args, kwargs) (line 1027)
    len_call_result_258728 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 7), len_258724, *[shape_258726], **kwargs_258727)
    
    int_258729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 22), 'int')
    # Applying the binary operator '>' (line 1027)
    result_gt_258730 = python_operator(stypy.reporting.localization.Localization(__file__, 1027, 7), '>', len_call_result_258728, int_258729)
    
    # Testing the type of an if condition (line 1027)
    if_condition_258731 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1027, 4), result_gt_258730)
    # Assigning a type to the variable 'if_condition_258731' (line 1027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1027, 4), 'if_condition_258731', if_condition_258731)
    # SSA begins for if statement (line 1027)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1028):
    
    # Assigning a Call to a Name (line 1028):
    
    # Call to poly(...): (line 1028)
    # Processing the call arguments (line 1028)
    
    # Obtaining the type of the subscript
    int_258733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 22), 'int')
    # Getting the type of 'z' (line 1028)
    z_258734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 20), 'z', False)
    # Obtaining the member '__getitem__' of a type (line 1028)
    getitem___258735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 20), z_258734, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1028)
    subscript_call_result_258736 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 20), getitem___258735, int_258733)
    
    # Processing the call keyword arguments (line 1028)
    kwargs_258737 = {}
    # Getting the type of 'poly' (line 1028)
    poly_258732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 15), 'poly', False)
    # Calling poly(args, kwargs) (line 1028)
    poly_call_result_258738 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 15), poly_258732, *[subscript_call_result_258736], **kwargs_258737)
    
    # Assigning a type to the variable 'temp' (line 1028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 8), 'temp', poly_call_result_258738)
    
    # Assigning a Call to a Name (line 1029):
    
    # Assigning a Call to a Name (line 1029):
    
    # Call to zeros(...): (line 1029)
    # Processing the call arguments (line 1029)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1029)
    tuple_258740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1029)
    # Adding element type (line 1029)
    
    # Obtaining the type of the subscript
    int_258741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 27), 'int')
    # Getting the type of 'z' (line 1029)
    z_258742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 19), 'z', False)
    # Obtaining the member 'shape' of a type (line 1029)
    shape_258743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 19), z_258742, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1029)
    getitem___258744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 19), shape_258743, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1029)
    subscript_call_result_258745 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 19), getitem___258744, int_258741)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1029, 19), tuple_258740, subscript_call_result_258745)
    # Adding element type (line 1029)
    
    # Obtaining the type of the subscript
    int_258746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 39), 'int')
    # Getting the type of 'z' (line 1029)
    z_258747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 31), 'z', False)
    # Obtaining the member 'shape' of a type (line 1029)
    shape_258748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 31), z_258747, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1029)
    getitem___258749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 31), shape_258748, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1029)
    subscript_call_result_258750 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 31), getitem___258749, int_258746)
    
    int_258751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 44), 'int')
    # Applying the binary operator '+' (line 1029)
    result_add_258752 = python_operator(stypy.reporting.localization.Localization(__file__, 1029, 31), '+', subscript_call_result_258750, int_258751)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1029, 19), tuple_258740, result_add_258752)
    
    # Getting the type of 'temp' (line 1029)
    temp_258753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 48), 'temp', False)
    # Obtaining the member 'dtype' of a type (line 1029)
    dtype_258754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 48), temp_258753, 'dtype')
    # Obtaining the member 'char' of a type (line 1029)
    char_258755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 48), dtype_258754, 'char')
    # Processing the call keyword arguments (line 1029)
    kwargs_258756 = {}
    # Getting the type of 'zeros' (line 1029)
    zeros_258739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 12), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1029)
    zeros_call_result_258757 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 12), zeros_258739, *[tuple_258740, char_258755], **kwargs_258756)
    
    # Assigning a type to the variable 'b' (line 1029)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 8), 'b', zeros_call_result_258757)
    
    
    
    # Call to len(...): (line 1030)
    # Processing the call arguments (line 1030)
    # Getting the type of 'k' (line 1030)
    k_258759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 15), 'k', False)
    # Processing the call keyword arguments (line 1030)
    kwargs_258760 = {}
    # Getting the type of 'len' (line 1030)
    len_258758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 11), 'len', False)
    # Calling len(args, kwargs) (line 1030)
    len_call_result_258761 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 11), len_258758, *[k_258759], **kwargs_258760)
    
    int_258762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 21), 'int')
    # Applying the binary operator '==' (line 1030)
    result_eq_258763 = python_operator(stypy.reporting.localization.Localization(__file__, 1030, 11), '==', len_call_result_258761, int_258762)
    
    # Testing the type of an if condition (line 1030)
    if_condition_258764 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1030, 8), result_eq_258763)
    # Assigning a type to the variable 'if_condition_258764' (line 1030)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1030, 8), 'if_condition_258764', if_condition_258764)
    # SSA begins for if statement (line 1030)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1031):
    
    # Assigning a BinOp to a Name (line 1031):
    
    # Obtaining an instance of the builtin type 'list' (line 1031)
    list_258765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1031)
    # Adding element type (line 1031)
    
    # Obtaining the type of the subscript
    int_258766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 19), 'int')
    # Getting the type of 'k' (line 1031)
    k_258767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 17), 'k')
    # Obtaining the member '__getitem__' of a type (line 1031)
    getitem___258768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 17), k_258767, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1031)
    subscript_call_result_258769 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 17), getitem___258768, int_258766)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1031, 16), list_258765, subscript_call_result_258769)
    
    
    # Obtaining the type of the subscript
    int_258770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 33), 'int')
    # Getting the type of 'z' (line 1031)
    z_258771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 25), 'z')
    # Obtaining the member 'shape' of a type (line 1031)
    shape_258772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 25), z_258771, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1031)
    getitem___258773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 25), shape_258772, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1031)
    subscript_call_result_258774 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 25), getitem___258773, int_258770)
    
    # Applying the binary operator '*' (line 1031)
    result_mul_258775 = python_operator(stypy.reporting.localization.Localization(__file__, 1031, 16), '*', list_258765, subscript_call_result_258774)
    
    # Assigning a type to the variable 'k' (line 1031)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 12), 'k', result_mul_258775)
    # SSA join for if statement (line 1030)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 1032)
    # Processing the call arguments (line 1032)
    
    # Obtaining the type of the subscript
    int_258777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1032, 31), 'int')
    # Getting the type of 'z' (line 1032)
    z_258778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 23), 'z', False)
    # Obtaining the member 'shape' of a type (line 1032)
    shape_258779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 23), z_258778, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1032)
    getitem___258780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 23), shape_258779, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1032)
    subscript_call_result_258781 = invoke(stypy.reporting.localization.Localization(__file__, 1032, 23), getitem___258780, int_258777)
    
    # Processing the call keyword arguments (line 1032)
    kwargs_258782 = {}
    # Getting the type of 'range' (line 1032)
    range_258776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 17), 'range', False)
    # Calling range(args, kwargs) (line 1032)
    range_call_result_258783 = invoke(stypy.reporting.localization.Localization(__file__, 1032, 17), range_258776, *[subscript_call_result_258781], **kwargs_258782)
    
    # Testing the type of a for loop iterable (line 1032)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1032, 8), range_call_result_258783)
    # Getting the type of the for loop variable (line 1032)
    for_loop_var_258784 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1032, 8), range_call_result_258783)
    # Assigning a type to the variable 'i' (line 1032)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 8), 'i', for_loop_var_258784)
    # SSA begins for a for statement (line 1032)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Subscript (line 1033):
    
    # Assigning a BinOp to a Subscript (line 1033):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1033)
    i_258785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 21), 'i')
    # Getting the type of 'k' (line 1033)
    k_258786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 19), 'k')
    # Obtaining the member '__getitem__' of a type (line 1033)
    getitem___258787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1033, 19), k_258786, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1033)
    subscript_call_result_258788 = invoke(stypy.reporting.localization.Localization(__file__, 1033, 19), getitem___258787, i_258785)
    
    
    # Call to poly(...): (line 1033)
    # Processing the call arguments (line 1033)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1033)
    i_258790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 33), 'i', False)
    # Getting the type of 'z' (line 1033)
    z_258791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 31), 'z', False)
    # Obtaining the member '__getitem__' of a type (line 1033)
    getitem___258792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1033, 31), z_258791, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1033)
    subscript_call_result_258793 = invoke(stypy.reporting.localization.Localization(__file__, 1033, 31), getitem___258792, i_258790)
    
    # Processing the call keyword arguments (line 1033)
    kwargs_258794 = {}
    # Getting the type of 'poly' (line 1033)
    poly_258789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 26), 'poly', False)
    # Calling poly(args, kwargs) (line 1033)
    poly_call_result_258795 = invoke(stypy.reporting.localization.Localization(__file__, 1033, 26), poly_258789, *[subscript_call_result_258793], **kwargs_258794)
    
    # Applying the binary operator '*' (line 1033)
    result_mul_258796 = python_operator(stypy.reporting.localization.Localization(__file__, 1033, 19), '*', subscript_call_result_258788, poly_call_result_258795)
    
    # Getting the type of 'b' (line 1033)
    b_258797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 12), 'b')
    # Getting the type of 'i' (line 1033)
    i_258798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 14), 'i')
    # Storing an element on a container (line 1033)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1033, 12), b_258797, (i_258798, result_mul_258796))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1027)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1035):
    
    # Assigning a BinOp to a Name (line 1035):
    # Getting the type of 'k' (line 1035)
    k_258799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 12), 'k')
    
    # Call to poly(...): (line 1035)
    # Processing the call arguments (line 1035)
    # Getting the type of 'z' (line 1035)
    z_258801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 21), 'z', False)
    # Processing the call keyword arguments (line 1035)
    kwargs_258802 = {}
    # Getting the type of 'poly' (line 1035)
    poly_258800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 16), 'poly', False)
    # Calling poly(args, kwargs) (line 1035)
    poly_call_result_258803 = invoke(stypy.reporting.localization.Localization(__file__, 1035, 16), poly_258800, *[z_258801], **kwargs_258802)
    
    # Applying the binary operator '*' (line 1035)
    result_mul_258804 = python_operator(stypy.reporting.localization.Localization(__file__, 1035, 12), '*', k_258799, poly_call_result_258803)
    
    # Assigning a type to the variable 'b' (line 1035)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 8), 'b', result_mul_258804)
    # SSA join for if statement (line 1027)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1036):
    
    # Assigning a Call to a Name (line 1036):
    
    # Call to atleast_1d(...): (line 1036)
    # Processing the call arguments (line 1036)
    
    # Call to poly(...): (line 1036)
    # Processing the call arguments (line 1036)
    # Getting the type of 'p' (line 1036)
    p_258807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 24), 'p', False)
    # Processing the call keyword arguments (line 1036)
    kwargs_258808 = {}
    # Getting the type of 'poly' (line 1036)
    poly_258806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 19), 'poly', False)
    # Calling poly(args, kwargs) (line 1036)
    poly_call_result_258809 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 19), poly_258806, *[p_258807], **kwargs_258808)
    
    # Processing the call keyword arguments (line 1036)
    kwargs_258810 = {}
    # Getting the type of 'atleast_1d' (line 1036)
    atleast_1d_258805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1036)
    atleast_1d_call_result_258811 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 8), atleast_1d_258805, *[poly_call_result_258809], **kwargs_258810)
    
    # Assigning a type to the variable 'a' (line 1036)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1036, 4), 'a', atleast_1d_call_result_258811)
    
    
    # Call to issubclass(...): (line 1040)
    # Processing the call arguments (line 1040)
    # Getting the type of 'b' (line 1040)
    b_258813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 18), 'b', False)
    # Obtaining the member 'dtype' of a type (line 1040)
    dtype_258814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 18), b_258813, 'dtype')
    # Obtaining the member 'type' of a type (line 1040)
    type_258815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 18), dtype_258814, 'type')
    # Getting the type of 'numpy' (line 1040)
    numpy_258816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 32), 'numpy', False)
    # Obtaining the member 'complexfloating' of a type (line 1040)
    complexfloating_258817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 32), numpy_258816, 'complexfloating')
    # Processing the call keyword arguments (line 1040)
    kwargs_258818 = {}
    # Getting the type of 'issubclass' (line 1040)
    issubclass_258812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 7), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 1040)
    issubclass_call_result_258819 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 7), issubclass_258812, *[type_258815, complexfloating_258817], **kwargs_258818)
    
    # Testing the type of an if condition (line 1040)
    if_condition_258820 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1040, 4), issubclass_call_result_258819)
    # Assigning a type to the variable 'if_condition_258820' (line 1040)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 4), 'if_condition_258820', if_condition_258820)
    # SSA begins for if statement (line 1040)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1042):
    
    # Assigning a Call to a Name (line 1042):
    
    # Call to asarray(...): (line 1042)
    # Processing the call arguments (line 1042)
    # Getting the type of 'z' (line 1042)
    z_258823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 30), 'z', False)
    # Getting the type of 'complex' (line 1042)
    complex_258824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 33), 'complex', False)
    # Processing the call keyword arguments (line 1042)
    kwargs_258825 = {}
    # Getting the type of 'numpy' (line 1042)
    numpy_258821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 16), 'numpy', False)
    # Obtaining the member 'asarray' of a type (line 1042)
    asarray_258822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 16), numpy_258821, 'asarray')
    # Calling asarray(args, kwargs) (line 1042)
    asarray_call_result_258826 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 16), asarray_258822, *[z_258823, complex_258824], **kwargs_258825)
    
    # Assigning a type to the variable 'roots' (line 1042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 8), 'roots', asarray_call_result_258826)
    
    # Assigning a Call to a Name (line 1043):
    
    # Assigning a Call to a Name (line 1043):
    
    # Call to compress(...): (line 1043)
    # Processing the call arguments (line 1043)
    
    # Getting the type of 'roots' (line 1043)
    roots_258829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 35), 'roots', False)
    # Obtaining the member 'imag' of a type (line 1043)
    imag_258830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 35), roots_258829, 'imag')
    int_258831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 48), 'int')
    # Applying the binary operator '>' (line 1043)
    result_gt_258832 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 35), '>', imag_258830, int_258831)
    
    # Getting the type of 'roots' (line 1043)
    roots_258833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 51), 'roots', False)
    # Processing the call keyword arguments (line 1043)
    kwargs_258834 = {}
    # Getting the type of 'numpy' (line 1043)
    numpy_258827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 20), 'numpy', False)
    # Obtaining the member 'compress' of a type (line 1043)
    compress_258828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 20), numpy_258827, 'compress')
    # Calling compress(args, kwargs) (line 1043)
    compress_call_result_258835 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 20), compress_258828, *[result_gt_258832, roots_258833], **kwargs_258834)
    
    # Assigning a type to the variable 'pos_roots' (line 1043)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'pos_roots', compress_call_result_258835)
    
    # Assigning a Call to a Name (line 1044):
    
    # Assigning a Call to a Name (line 1044):
    
    # Call to conjugate(...): (line 1044)
    # Processing the call arguments (line 1044)
    
    # Call to compress(...): (line 1044)
    # Processing the call arguments (line 1044)
    
    # Getting the type of 'roots' (line 1044)
    roots_258840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 51), 'roots', False)
    # Obtaining the member 'imag' of a type (line 1044)
    imag_258841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 51), roots_258840, 'imag')
    int_258842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 64), 'int')
    # Applying the binary operator '<' (line 1044)
    result_lt_258843 = python_operator(stypy.reporting.localization.Localization(__file__, 1044, 51), '<', imag_258841, int_258842)
    
    # Getting the type of 'roots' (line 1044)
    roots_258844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 67), 'roots', False)
    # Processing the call keyword arguments (line 1044)
    kwargs_258845 = {}
    # Getting the type of 'numpy' (line 1044)
    numpy_258838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 36), 'numpy', False)
    # Obtaining the member 'compress' of a type (line 1044)
    compress_258839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 36), numpy_258838, 'compress')
    # Calling compress(args, kwargs) (line 1044)
    compress_call_result_258846 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 36), compress_258839, *[result_lt_258843, roots_258844], **kwargs_258845)
    
    # Processing the call keyword arguments (line 1044)
    kwargs_258847 = {}
    # Getting the type of 'numpy' (line 1044)
    numpy_258836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 20), 'numpy', False)
    # Obtaining the member 'conjugate' of a type (line 1044)
    conjugate_258837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 20), numpy_258836, 'conjugate')
    # Calling conjugate(args, kwargs) (line 1044)
    conjugate_call_result_258848 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 20), conjugate_258837, *[compress_call_result_258846], **kwargs_258847)
    
    # Assigning a type to the variable 'neg_roots' (line 1044)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 8), 'neg_roots', conjugate_call_result_258848)
    
    
    
    # Call to len(...): (line 1045)
    # Processing the call arguments (line 1045)
    # Getting the type of 'pos_roots' (line 1045)
    pos_roots_258850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 15), 'pos_roots', False)
    # Processing the call keyword arguments (line 1045)
    kwargs_258851 = {}
    # Getting the type of 'len' (line 1045)
    len_258849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 11), 'len', False)
    # Calling len(args, kwargs) (line 1045)
    len_call_result_258852 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 11), len_258849, *[pos_roots_258850], **kwargs_258851)
    
    
    # Call to len(...): (line 1045)
    # Processing the call arguments (line 1045)
    # Getting the type of 'neg_roots' (line 1045)
    neg_roots_258854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 33), 'neg_roots', False)
    # Processing the call keyword arguments (line 1045)
    kwargs_258855 = {}
    # Getting the type of 'len' (line 1045)
    len_258853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 29), 'len', False)
    # Calling len(args, kwargs) (line 1045)
    len_call_result_258856 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 29), len_258853, *[neg_roots_258854], **kwargs_258855)
    
    # Applying the binary operator '==' (line 1045)
    result_eq_258857 = python_operator(stypy.reporting.localization.Localization(__file__, 1045, 11), '==', len_call_result_258852, len_call_result_258856)
    
    # Testing the type of an if condition (line 1045)
    if_condition_258858 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1045, 8), result_eq_258857)
    # Assigning a type to the variable 'if_condition_258858' (line 1045)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 8), 'if_condition_258858', if_condition_258858)
    # SSA begins for if statement (line 1045)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to all(...): (line 1046)
    # Processing the call arguments (line 1046)
    
    
    # Call to sort_complex(...): (line 1046)
    # Processing the call arguments (line 1046)
    # Getting the type of 'neg_roots' (line 1046)
    neg_roots_258863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 44), 'neg_roots', False)
    # Processing the call keyword arguments (line 1046)
    kwargs_258864 = {}
    # Getting the type of 'numpy' (line 1046)
    numpy_258861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 25), 'numpy', False)
    # Obtaining the member 'sort_complex' of a type (line 1046)
    sort_complex_258862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 25), numpy_258861, 'sort_complex')
    # Calling sort_complex(args, kwargs) (line 1046)
    sort_complex_call_result_258865 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 25), sort_complex_258862, *[neg_roots_258863], **kwargs_258864)
    
    
    # Call to sort_complex(...): (line 1047)
    # Processing the call arguments (line 1047)
    # Getting the type of 'pos_roots' (line 1047)
    pos_roots_258868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 44), 'pos_roots', False)
    # Processing the call keyword arguments (line 1047)
    kwargs_258869 = {}
    # Getting the type of 'numpy' (line 1047)
    numpy_258866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 25), 'numpy', False)
    # Obtaining the member 'sort_complex' of a type (line 1047)
    sort_complex_258867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 25), numpy_258866, 'sort_complex')
    # Calling sort_complex(args, kwargs) (line 1047)
    sort_complex_call_result_258870 = invoke(stypy.reporting.localization.Localization(__file__, 1047, 25), sort_complex_258867, *[pos_roots_258868], **kwargs_258869)
    
    # Applying the binary operator '==' (line 1046)
    result_eq_258871 = python_operator(stypy.reporting.localization.Localization(__file__, 1046, 25), '==', sort_complex_call_result_258865, sort_complex_call_result_258870)
    
    # Processing the call keyword arguments (line 1046)
    kwargs_258872 = {}
    # Getting the type of 'numpy' (line 1046)
    numpy_258859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 15), 'numpy', False)
    # Obtaining the member 'all' of a type (line 1046)
    all_258860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 15), numpy_258859, 'all')
    # Calling all(args, kwargs) (line 1046)
    all_call_result_258873 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 15), all_258860, *[result_eq_258871], **kwargs_258872)
    
    # Testing the type of an if condition (line 1046)
    if_condition_258874 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1046, 12), all_call_result_258873)
    # Assigning a type to the variable 'if_condition_258874' (line 1046)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 12), 'if_condition_258874', if_condition_258874)
    # SSA begins for if statement (line 1046)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1048):
    
    # Assigning a Call to a Name (line 1048):
    
    # Call to copy(...): (line 1048)
    # Processing the call keyword arguments (line 1048)
    kwargs_258878 = {}
    # Getting the type of 'b' (line 1048)
    b_258875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 20), 'b', False)
    # Obtaining the member 'real' of a type (line 1048)
    real_258876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 20), b_258875, 'real')
    # Obtaining the member 'copy' of a type (line 1048)
    copy_258877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 20), real_258876, 'copy')
    # Calling copy(args, kwargs) (line 1048)
    copy_call_result_258879 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 20), copy_258877, *[], **kwargs_258878)
    
    # Assigning a type to the variable 'b' (line 1048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 16), 'b', copy_call_result_258879)
    # SSA join for if statement (line 1046)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1045)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1040)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to issubclass(...): (line 1050)
    # Processing the call arguments (line 1050)
    # Getting the type of 'a' (line 1050)
    a_258881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 18), 'a', False)
    # Obtaining the member 'dtype' of a type (line 1050)
    dtype_258882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 18), a_258881, 'dtype')
    # Obtaining the member 'type' of a type (line 1050)
    type_258883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 18), dtype_258882, 'type')
    # Getting the type of 'numpy' (line 1050)
    numpy_258884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 32), 'numpy', False)
    # Obtaining the member 'complexfloating' of a type (line 1050)
    complexfloating_258885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 32), numpy_258884, 'complexfloating')
    # Processing the call keyword arguments (line 1050)
    kwargs_258886 = {}
    # Getting the type of 'issubclass' (line 1050)
    issubclass_258880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 7), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 1050)
    issubclass_call_result_258887 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 7), issubclass_258880, *[type_258883, complexfloating_258885], **kwargs_258886)
    
    # Testing the type of an if condition (line 1050)
    if_condition_258888 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1050, 4), issubclass_call_result_258887)
    # Assigning a type to the variable 'if_condition_258888' (line 1050)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 4), 'if_condition_258888', if_condition_258888)
    # SSA begins for if statement (line 1050)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1052):
    
    # Assigning a Call to a Name (line 1052):
    
    # Call to asarray(...): (line 1052)
    # Processing the call arguments (line 1052)
    # Getting the type of 'p' (line 1052)
    p_258891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 30), 'p', False)
    # Getting the type of 'complex' (line 1052)
    complex_258892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 33), 'complex', False)
    # Processing the call keyword arguments (line 1052)
    kwargs_258893 = {}
    # Getting the type of 'numpy' (line 1052)
    numpy_258889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 16), 'numpy', False)
    # Obtaining the member 'asarray' of a type (line 1052)
    asarray_258890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 16), numpy_258889, 'asarray')
    # Calling asarray(args, kwargs) (line 1052)
    asarray_call_result_258894 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 16), asarray_258890, *[p_258891, complex_258892], **kwargs_258893)
    
    # Assigning a type to the variable 'roots' (line 1052)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'roots', asarray_call_result_258894)
    
    # Assigning a Call to a Name (line 1053):
    
    # Assigning a Call to a Name (line 1053):
    
    # Call to compress(...): (line 1053)
    # Processing the call arguments (line 1053)
    
    # Getting the type of 'roots' (line 1053)
    roots_258897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 35), 'roots', False)
    # Obtaining the member 'imag' of a type (line 1053)
    imag_258898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 35), roots_258897, 'imag')
    int_258899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1053, 48), 'int')
    # Applying the binary operator '>' (line 1053)
    result_gt_258900 = python_operator(stypy.reporting.localization.Localization(__file__, 1053, 35), '>', imag_258898, int_258899)
    
    # Getting the type of 'roots' (line 1053)
    roots_258901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 51), 'roots', False)
    # Processing the call keyword arguments (line 1053)
    kwargs_258902 = {}
    # Getting the type of 'numpy' (line 1053)
    numpy_258895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 20), 'numpy', False)
    # Obtaining the member 'compress' of a type (line 1053)
    compress_258896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 20), numpy_258895, 'compress')
    # Calling compress(args, kwargs) (line 1053)
    compress_call_result_258903 = invoke(stypy.reporting.localization.Localization(__file__, 1053, 20), compress_258896, *[result_gt_258900, roots_258901], **kwargs_258902)
    
    # Assigning a type to the variable 'pos_roots' (line 1053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 8), 'pos_roots', compress_call_result_258903)
    
    # Assigning a Call to a Name (line 1054):
    
    # Assigning a Call to a Name (line 1054):
    
    # Call to conjugate(...): (line 1054)
    # Processing the call arguments (line 1054)
    
    # Call to compress(...): (line 1054)
    # Processing the call arguments (line 1054)
    
    # Getting the type of 'roots' (line 1054)
    roots_258908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 51), 'roots', False)
    # Obtaining the member 'imag' of a type (line 1054)
    imag_258909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 51), roots_258908, 'imag')
    int_258910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 64), 'int')
    # Applying the binary operator '<' (line 1054)
    result_lt_258911 = python_operator(stypy.reporting.localization.Localization(__file__, 1054, 51), '<', imag_258909, int_258910)
    
    # Getting the type of 'roots' (line 1054)
    roots_258912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 67), 'roots', False)
    # Processing the call keyword arguments (line 1054)
    kwargs_258913 = {}
    # Getting the type of 'numpy' (line 1054)
    numpy_258906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 36), 'numpy', False)
    # Obtaining the member 'compress' of a type (line 1054)
    compress_258907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 36), numpy_258906, 'compress')
    # Calling compress(args, kwargs) (line 1054)
    compress_call_result_258914 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 36), compress_258907, *[result_lt_258911, roots_258912], **kwargs_258913)
    
    # Processing the call keyword arguments (line 1054)
    kwargs_258915 = {}
    # Getting the type of 'numpy' (line 1054)
    numpy_258904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 20), 'numpy', False)
    # Obtaining the member 'conjugate' of a type (line 1054)
    conjugate_258905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 20), numpy_258904, 'conjugate')
    # Calling conjugate(args, kwargs) (line 1054)
    conjugate_call_result_258916 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 20), conjugate_258905, *[compress_call_result_258914], **kwargs_258915)
    
    # Assigning a type to the variable 'neg_roots' (line 1054)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1054, 8), 'neg_roots', conjugate_call_result_258916)
    
    
    
    # Call to len(...): (line 1055)
    # Processing the call arguments (line 1055)
    # Getting the type of 'pos_roots' (line 1055)
    pos_roots_258918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 15), 'pos_roots', False)
    # Processing the call keyword arguments (line 1055)
    kwargs_258919 = {}
    # Getting the type of 'len' (line 1055)
    len_258917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 11), 'len', False)
    # Calling len(args, kwargs) (line 1055)
    len_call_result_258920 = invoke(stypy.reporting.localization.Localization(__file__, 1055, 11), len_258917, *[pos_roots_258918], **kwargs_258919)
    
    
    # Call to len(...): (line 1055)
    # Processing the call arguments (line 1055)
    # Getting the type of 'neg_roots' (line 1055)
    neg_roots_258922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 33), 'neg_roots', False)
    # Processing the call keyword arguments (line 1055)
    kwargs_258923 = {}
    # Getting the type of 'len' (line 1055)
    len_258921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 29), 'len', False)
    # Calling len(args, kwargs) (line 1055)
    len_call_result_258924 = invoke(stypy.reporting.localization.Localization(__file__, 1055, 29), len_258921, *[neg_roots_258922], **kwargs_258923)
    
    # Applying the binary operator '==' (line 1055)
    result_eq_258925 = python_operator(stypy.reporting.localization.Localization(__file__, 1055, 11), '==', len_call_result_258920, len_call_result_258924)
    
    # Testing the type of an if condition (line 1055)
    if_condition_258926 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1055, 8), result_eq_258925)
    # Assigning a type to the variable 'if_condition_258926' (line 1055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 8), 'if_condition_258926', if_condition_258926)
    # SSA begins for if statement (line 1055)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to all(...): (line 1056)
    # Processing the call arguments (line 1056)
    
    
    # Call to sort_complex(...): (line 1056)
    # Processing the call arguments (line 1056)
    # Getting the type of 'neg_roots' (line 1056)
    neg_roots_258931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 44), 'neg_roots', False)
    # Processing the call keyword arguments (line 1056)
    kwargs_258932 = {}
    # Getting the type of 'numpy' (line 1056)
    numpy_258929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 25), 'numpy', False)
    # Obtaining the member 'sort_complex' of a type (line 1056)
    sort_complex_258930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 25), numpy_258929, 'sort_complex')
    # Calling sort_complex(args, kwargs) (line 1056)
    sort_complex_call_result_258933 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 25), sort_complex_258930, *[neg_roots_258931], **kwargs_258932)
    
    
    # Call to sort_complex(...): (line 1057)
    # Processing the call arguments (line 1057)
    # Getting the type of 'pos_roots' (line 1057)
    pos_roots_258936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 44), 'pos_roots', False)
    # Processing the call keyword arguments (line 1057)
    kwargs_258937 = {}
    # Getting the type of 'numpy' (line 1057)
    numpy_258934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 25), 'numpy', False)
    # Obtaining the member 'sort_complex' of a type (line 1057)
    sort_complex_258935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 25), numpy_258934, 'sort_complex')
    # Calling sort_complex(args, kwargs) (line 1057)
    sort_complex_call_result_258938 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 25), sort_complex_258935, *[pos_roots_258936], **kwargs_258937)
    
    # Applying the binary operator '==' (line 1056)
    result_eq_258939 = python_operator(stypy.reporting.localization.Localization(__file__, 1056, 25), '==', sort_complex_call_result_258933, sort_complex_call_result_258938)
    
    # Processing the call keyword arguments (line 1056)
    kwargs_258940 = {}
    # Getting the type of 'numpy' (line 1056)
    numpy_258927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 15), 'numpy', False)
    # Obtaining the member 'all' of a type (line 1056)
    all_258928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 15), numpy_258927, 'all')
    # Calling all(args, kwargs) (line 1056)
    all_call_result_258941 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 15), all_258928, *[result_eq_258939], **kwargs_258940)
    
    # Testing the type of an if condition (line 1056)
    if_condition_258942 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1056, 12), all_call_result_258941)
    # Assigning a type to the variable 'if_condition_258942' (line 1056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 12), 'if_condition_258942', if_condition_258942)
    # SSA begins for if statement (line 1056)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1058):
    
    # Assigning a Call to a Name (line 1058):
    
    # Call to copy(...): (line 1058)
    # Processing the call keyword arguments (line 1058)
    kwargs_258946 = {}
    # Getting the type of 'a' (line 1058)
    a_258943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 20), 'a', False)
    # Obtaining the member 'real' of a type (line 1058)
    real_258944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 20), a_258943, 'real')
    # Obtaining the member 'copy' of a type (line 1058)
    copy_258945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 20), real_258944, 'copy')
    # Calling copy(args, kwargs) (line 1058)
    copy_call_result_258947 = invoke(stypy.reporting.localization.Localization(__file__, 1058, 20), copy_258945, *[], **kwargs_258946)
    
    # Assigning a type to the variable 'a' (line 1058)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 16), 'a', copy_call_result_258947)
    # SSA join for if statement (line 1056)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1055)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1050)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1060)
    tuple_258948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1060)
    # Adding element type (line 1060)
    # Getting the type of 'b' (line 1060)
    b_258949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 11), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1060, 11), tuple_258948, b_258949)
    # Adding element type (line 1060)
    # Getting the type of 'a' (line 1060)
    a_258950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 14), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1060, 11), tuple_258948, a_258950)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 4), 'stypy_return_type', tuple_258948)
    
    # ################# End of 'zpk2tf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'zpk2tf' in the type store
    # Getting the type of 'stypy_return_type' (line 1004)
    stypy_return_type_258951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_258951)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'zpk2tf'
    return stypy_return_type_258951

# Assigning a type to the variable 'zpk2tf' (line 1004)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1004, 0), 'zpk2tf', zpk2tf)

@norecursion
def tf2sos(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_258952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, 25), 'str', 'nearest')
    defaults = [str_258952]
    # Create a new context for function 'tf2sos'
    module_type_store = module_type_store.open_function_context('tf2sos', 1063, 0, False)
    
    # Passed parameters checking function
    tf2sos.stypy_localization = localization
    tf2sos.stypy_type_of_self = None
    tf2sos.stypy_type_store = module_type_store
    tf2sos.stypy_function_name = 'tf2sos'
    tf2sos.stypy_param_names_list = ['b', 'a', 'pairing']
    tf2sos.stypy_varargs_param_name = None
    tf2sos.stypy_kwargs_param_name = None
    tf2sos.stypy_call_defaults = defaults
    tf2sos.stypy_call_varargs = varargs
    tf2sos.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tf2sos', ['b', 'a', 'pairing'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tf2sos', localization, ['b', 'a', 'pairing'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tf2sos(...)' code ##################

    str_258953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, (-1)), 'str', "\n    Return second-order sections from transfer function representation\n\n    Parameters\n    ----------\n    b : array_like\n        Numerator polynomial coefficients.\n    a : array_like\n        Denominator polynomial coefficients.\n    pairing : {'nearest', 'keep_odd'}, optional\n        The method to use to combine pairs of poles and zeros into sections.\n        See `zpk2sos`.\n\n    Returns\n    -------\n    sos : ndarray\n        Array of second-order filter coefficients, with shape\n        ``(n_sections, 6)``. See `sosfilt` for the SOS filter format\n        specification.\n\n    See Also\n    --------\n    zpk2sos, sosfilt\n\n    Notes\n    -----\n    It is generally discouraged to convert from TF to SOS format, since doing\n    so usually will not improve numerical precision errors. Instead, consider\n    designing filters in ZPK format and converting directly to SOS. TF is\n    converted to SOS by first converting to ZPK format, then converting\n    ZPK to SOS.\n\n    .. versionadded:: 0.16.0\n    ")
    
    # Call to zpk2sos(...): (line 1098)
    
    # Call to tf2zpk(...): (line 1098)
    # Processing the call arguments (line 1098)
    # Getting the type of 'b' (line 1098)
    b_258956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 27), 'b', False)
    # Getting the type of 'a' (line 1098)
    a_258957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 30), 'a', False)
    # Processing the call keyword arguments (line 1098)
    kwargs_258958 = {}
    # Getting the type of 'tf2zpk' (line 1098)
    tf2zpk_258955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 20), 'tf2zpk', False)
    # Calling tf2zpk(args, kwargs) (line 1098)
    tf2zpk_call_result_258959 = invoke(stypy.reporting.localization.Localization(__file__, 1098, 20), tf2zpk_258955, *[b_258956, a_258957], **kwargs_258958)
    
    # Processing the call keyword arguments (line 1098)
    # Getting the type of 'pairing' (line 1098)
    pairing_258960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 42), 'pairing', False)
    keyword_258961 = pairing_258960
    kwargs_258962 = {'pairing': keyword_258961}
    # Getting the type of 'zpk2sos' (line 1098)
    zpk2sos_258954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 11), 'zpk2sos', False)
    # Calling zpk2sos(args, kwargs) (line 1098)
    zpk2sos_call_result_258963 = invoke(stypy.reporting.localization.Localization(__file__, 1098, 11), zpk2sos_258954, *[tf2zpk_call_result_258959], **kwargs_258962)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1098)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 4), 'stypy_return_type', zpk2sos_call_result_258963)
    
    # ################# End of 'tf2sos(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tf2sos' in the type store
    # Getting the type of 'stypy_return_type' (line 1063)
    stypy_return_type_258964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_258964)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tf2sos'
    return stypy_return_type_258964

# Assigning a type to the variable 'tf2sos' (line 1063)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1063, 0), 'tf2sos', tf2sos)

@norecursion
def sos2tf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'sos2tf'
    module_type_store = module_type_store.open_function_context('sos2tf', 1101, 0, False)
    
    # Passed parameters checking function
    sos2tf.stypy_localization = localization
    sos2tf.stypy_type_of_self = None
    sos2tf.stypy_type_store = module_type_store
    sos2tf.stypy_function_name = 'sos2tf'
    sos2tf.stypy_param_names_list = ['sos']
    sos2tf.stypy_varargs_param_name = None
    sos2tf.stypy_kwargs_param_name = None
    sos2tf.stypy_call_defaults = defaults
    sos2tf.stypy_call_varargs = varargs
    sos2tf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sos2tf', ['sos'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sos2tf', localization, ['sos'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sos2tf(...)' code ##################

    str_258965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1122, (-1)), 'str', '\n    Return a single transfer function from a series of second-order sections\n\n    Parameters\n    ----------\n    sos : array_like\n        Array of second-order filter coefficients, must have shape\n        ``(n_sections, 6)``. See `sosfilt` for the SOS filter format\n        specification.\n\n    Returns\n    -------\n    b : ndarray\n        Numerator polynomial coefficients.\n    a : ndarray\n        Denominator polynomial coefficients.\n\n    Notes\n    -----\n    .. versionadded:: 0.16.0\n    ')
    
    # Assigning a Call to a Name (line 1123):
    
    # Assigning a Call to a Name (line 1123):
    
    # Call to asarray(...): (line 1123)
    # Processing the call arguments (line 1123)
    # Getting the type of 'sos' (line 1123)
    sos_258968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 21), 'sos', False)
    # Processing the call keyword arguments (line 1123)
    kwargs_258969 = {}
    # Getting the type of 'np' (line 1123)
    np_258966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 10), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1123)
    asarray_258967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 10), np_258966, 'asarray')
    # Calling asarray(args, kwargs) (line 1123)
    asarray_call_result_258970 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 10), asarray_258967, *[sos_258968], **kwargs_258969)
    
    # Assigning a type to the variable 'sos' (line 1123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'sos', asarray_call_result_258970)
    
    # Assigning a List to a Name (line 1124):
    
    # Assigning a List to a Name (line 1124):
    
    # Obtaining an instance of the builtin type 'list' (line 1124)
    list_258971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1124)
    # Adding element type (line 1124)
    float_258972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 9), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 8), list_258971, float_258972)
    
    # Assigning a type to the variable 'b' (line 1124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 4), 'b', list_258971)
    
    # Assigning a List to a Name (line 1125):
    
    # Assigning a List to a Name (line 1125):
    
    # Obtaining an instance of the builtin type 'list' (line 1125)
    list_258973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1125, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1125)
    # Adding element type (line 1125)
    float_258974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1125, 9), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1125, 8), list_258973, float_258974)
    
    # Assigning a type to the variable 'a' (line 1125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1125, 4), 'a', list_258973)
    
    # Assigning a Subscript to a Name (line 1126):
    
    # Assigning a Subscript to a Name (line 1126):
    
    # Obtaining the type of the subscript
    int_258975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 27), 'int')
    # Getting the type of 'sos' (line 1126)
    sos_258976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 17), 'sos')
    # Obtaining the member 'shape' of a type (line 1126)
    shape_258977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 17), sos_258976, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1126)
    getitem___258978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 17), shape_258977, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
    subscript_call_result_258979 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 17), getitem___258978, int_258975)
    
    # Assigning a type to the variable 'n_sections' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'n_sections', subscript_call_result_258979)
    
    
    # Call to range(...): (line 1127)
    # Processing the call arguments (line 1127)
    # Getting the type of 'n_sections' (line 1127)
    n_sections_258981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 25), 'n_sections', False)
    # Processing the call keyword arguments (line 1127)
    kwargs_258982 = {}
    # Getting the type of 'range' (line 1127)
    range_258980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 19), 'range', False)
    # Calling range(args, kwargs) (line 1127)
    range_call_result_258983 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 19), range_258980, *[n_sections_258981], **kwargs_258982)
    
    # Testing the type of a for loop iterable (line 1127)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1127, 4), range_call_result_258983)
    # Getting the type of the for loop variable (line 1127)
    for_loop_var_258984 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1127, 4), range_call_result_258983)
    # Assigning a type to the variable 'section' (line 1127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 4), 'section', for_loop_var_258984)
    # SSA begins for a for statement (line 1127)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1128):
    
    # Assigning a Call to a Name (line 1128):
    
    # Call to polymul(...): (line 1128)
    # Processing the call arguments (line 1128)
    # Getting the type of 'b' (line 1128)
    b_258987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 23), 'b', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 1128)
    section_258988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 30), 'section', False)
    int_258989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 40), 'int')
    slice_258990 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1128, 26), None, int_258989, None)
    # Getting the type of 'sos' (line 1128)
    sos_258991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 26), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 1128)
    getitem___258992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 26), sos_258991, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1128)
    subscript_call_result_258993 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 26), getitem___258992, (section_258988, slice_258990))
    
    # Processing the call keyword arguments (line 1128)
    kwargs_258994 = {}
    # Getting the type of 'np' (line 1128)
    np_258985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 12), 'np', False)
    # Obtaining the member 'polymul' of a type (line 1128)
    polymul_258986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 12), np_258985, 'polymul')
    # Calling polymul(args, kwargs) (line 1128)
    polymul_call_result_258995 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 12), polymul_258986, *[b_258987, subscript_call_result_258993], **kwargs_258994)
    
    # Assigning a type to the variable 'b' (line 1128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 8), 'b', polymul_call_result_258995)
    
    # Assigning a Call to a Name (line 1129):
    
    # Assigning a Call to a Name (line 1129):
    
    # Call to polymul(...): (line 1129)
    # Processing the call arguments (line 1129)
    # Getting the type of 'a' (line 1129)
    a_258998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 23), 'a', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 1129)
    section_258999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 30), 'section', False)
    int_259000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1129, 39), 'int')
    slice_259001 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1129, 26), int_259000, None, None)
    # Getting the type of 'sos' (line 1129)
    sos_259002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 26), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 1129)
    getitem___259003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 26), sos_259002, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1129)
    subscript_call_result_259004 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 26), getitem___259003, (section_258999, slice_259001))
    
    # Processing the call keyword arguments (line 1129)
    kwargs_259005 = {}
    # Getting the type of 'np' (line 1129)
    np_258996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 12), 'np', False)
    # Obtaining the member 'polymul' of a type (line 1129)
    polymul_258997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 12), np_258996, 'polymul')
    # Calling polymul(args, kwargs) (line 1129)
    polymul_call_result_259006 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 12), polymul_258997, *[a_258998, subscript_call_result_259004], **kwargs_259005)
    
    # Assigning a type to the variable 'a' (line 1129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'a', polymul_call_result_259006)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1130)
    tuple_259007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1130)
    # Adding element type (line 1130)
    # Getting the type of 'b' (line 1130)
    b_259008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 11), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1130, 11), tuple_259007, b_259008)
    # Adding element type (line 1130)
    # Getting the type of 'a' (line 1130)
    a_259009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 14), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1130, 11), tuple_259007, a_259009)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 4), 'stypy_return_type', tuple_259007)
    
    # ################# End of 'sos2tf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sos2tf' in the type store
    # Getting the type of 'stypy_return_type' (line 1101)
    stypy_return_type_259010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_259010)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sos2tf'
    return stypy_return_type_259010

# Assigning a type to the variable 'sos2tf' (line 1101)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 0), 'sos2tf', sos2tf)

@norecursion
def sos2zpk(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'sos2zpk'
    module_type_store = module_type_store.open_function_context('sos2zpk', 1133, 0, False)
    
    # Passed parameters checking function
    sos2zpk.stypy_localization = localization
    sos2zpk.stypy_type_of_self = None
    sos2zpk.stypy_type_store = module_type_store
    sos2zpk.stypy_function_name = 'sos2zpk'
    sos2zpk.stypy_param_names_list = ['sos']
    sos2zpk.stypy_varargs_param_name = None
    sos2zpk.stypy_kwargs_param_name = None
    sos2zpk.stypy_call_defaults = defaults
    sos2zpk.stypy_call_varargs = varargs
    sos2zpk.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sos2zpk', ['sos'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sos2zpk', localization, ['sos'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sos2zpk(...)' code ##################

    str_259011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1156, (-1)), 'str', '\n    Return zeros, poles, and gain of a series of second-order sections\n\n    Parameters\n    ----------\n    sos : array_like\n        Array of second-order filter coefficients, must have shape\n        ``(n_sections, 6)``. See `sosfilt` for the SOS filter format\n        specification.\n\n    Returns\n    -------\n    z : ndarray\n        Zeros of the transfer function.\n    p : ndarray\n        Poles of the transfer function.\n    k : float\n        System gain.\n\n    Notes\n    -----\n    .. versionadded:: 0.16.0\n    ')
    
    # Assigning a Call to a Name (line 1157):
    
    # Assigning a Call to a Name (line 1157):
    
    # Call to asarray(...): (line 1157)
    # Processing the call arguments (line 1157)
    # Getting the type of 'sos' (line 1157)
    sos_259014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 21), 'sos', False)
    # Processing the call keyword arguments (line 1157)
    kwargs_259015 = {}
    # Getting the type of 'np' (line 1157)
    np_259012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 10), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1157)
    asarray_259013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1157, 10), np_259012, 'asarray')
    # Calling asarray(args, kwargs) (line 1157)
    asarray_call_result_259016 = invoke(stypy.reporting.localization.Localization(__file__, 1157, 10), asarray_259013, *[sos_259014], **kwargs_259015)
    
    # Assigning a type to the variable 'sos' (line 1157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1157, 4), 'sos', asarray_call_result_259016)
    
    # Assigning a Subscript to a Name (line 1158):
    
    # Assigning a Subscript to a Name (line 1158):
    
    # Obtaining the type of the subscript
    int_259017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1158, 27), 'int')
    # Getting the type of 'sos' (line 1158)
    sos_259018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 17), 'sos')
    # Obtaining the member 'shape' of a type (line 1158)
    shape_259019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1158, 17), sos_259018, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1158)
    getitem___259020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1158, 17), shape_259019, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1158)
    subscript_call_result_259021 = invoke(stypy.reporting.localization.Localization(__file__, 1158, 17), getitem___259020, int_259017)
    
    # Assigning a type to the variable 'n_sections' (line 1158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1158, 4), 'n_sections', subscript_call_result_259021)
    
    # Assigning a Call to a Name (line 1159):
    
    # Assigning a Call to a Name (line 1159):
    
    # Call to empty(...): (line 1159)
    # Processing the call arguments (line 1159)
    # Getting the type of 'n_sections' (line 1159)
    n_sections_259024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 17), 'n_sections', False)
    int_259025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 28), 'int')
    # Applying the binary operator '*' (line 1159)
    result_mul_259026 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 17), '*', n_sections_259024, int_259025)
    
    # Getting the type of 'np' (line 1159)
    np_259027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 31), 'np', False)
    # Obtaining the member 'complex128' of a type (line 1159)
    complex128_259028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 31), np_259027, 'complex128')
    # Processing the call keyword arguments (line 1159)
    kwargs_259029 = {}
    # Getting the type of 'np' (line 1159)
    np_259022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 8), 'np', False)
    # Obtaining the member 'empty' of a type (line 1159)
    empty_259023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 8), np_259022, 'empty')
    # Calling empty(args, kwargs) (line 1159)
    empty_call_result_259030 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 8), empty_259023, *[result_mul_259026, complex128_259028], **kwargs_259029)
    
    # Assigning a type to the variable 'z' (line 1159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 4), 'z', empty_call_result_259030)
    
    # Assigning a Call to a Name (line 1160):
    
    # Assigning a Call to a Name (line 1160):
    
    # Call to empty(...): (line 1160)
    # Processing the call arguments (line 1160)
    # Getting the type of 'n_sections' (line 1160)
    n_sections_259033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 17), 'n_sections', False)
    int_259034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, 28), 'int')
    # Applying the binary operator '*' (line 1160)
    result_mul_259035 = python_operator(stypy.reporting.localization.Localization(__file__, 1160, 17), '*', n_sections_259033, int_259034)
    
    # Getting the type of 'np' (line 1160)
    np_259036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 31), 'np', False)
    # Obtaining the member 'complex128' of a type (line 1160)
    complex128_259037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 31), np_259036, 'complex128')
    # Processing the call keyword arguments (line 1160)
    kwargs_259038 = {}
    # Getting the type of 'np' (line 1160)
    np_259031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 8), 'np', False)
    # Obtaining the member 'empty' of a type (line 1160)
    empty_259032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 8), np_259031, 'empty')
    # Calling empty(args, kwargs) (line 1160)
    empty_call_result_259039 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 8), empty_259032, *[result_mul_259035, complex128_259037], **kwargs_259038)
    
    # Assigning a type to the variable 'p' (line 1160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1160, 4), 'p', empty_call_result_259039)
    
    # Assigning a Num to a Name (line 1161):
    
    # Assigning a Num to a Name (line 1161):
    float_259040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1161, 8), 'float')
    # Assigning a type to the variable 'k' (line 1161)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 4), 'k', float_259040)
    
    
    # Call to range(...): (line 1162)
    # Processing the call arguments (line 1162)
    # Getting the type of 'n_sections' (line 1162)
    n_sections_259042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 25), 'n_sections', False)
    # Processing the call keyword arguments (line 1162)
    kwargs_259043 = {}
    # Getting the type of 'range' (line 1162)
    range_259041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 19), 'range', False)
    # Calling range(args, kwargs) (line 1162)
    range_call_result_259044 = invoke(stypy.reporting.localization.Localization(__file__, 1162, 19), range_259041, *[n_sections_259042], **kwargs_259043)
    
    # Testing the type of a for loop iterable (line 1162)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1162, 4), range_call_result_259044)
    # Getting the type of the for loop variable (line 1162)
    for_loop_var_259045 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1162, 4), range_call_result_259044)
    # Assigning a type to the variable 'section' (line 1162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1162, 4), 'section', for_loop_var_259045)
    # SSA begins for a for statement (line 1162)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1163):
    
    # Assigning a Call to a Name (line 1163):
    
    # Call to tf2zpk(...): (line 1163)
    # Processing the call arguments (line 1163)
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 1163)
    section_259047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 25), 'section', False)
    int_259048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 35), 'int')
    slice_259049 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1163, 21), None, int_259048, None)
    # Getting the type of 'sos' (line 1163)
    sos_259050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 21), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 1163)
    getitem___259051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 21), sos_259050, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1163)
    subscript_call_result_259052 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 21), getitem___259051, (section_259047, slice_259049))
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 1163)
    section_259053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 43), 'section', False)
    int_259054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 52), 'int')
    slice_259055 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1163, 39), int_259054, None, None)
    # Getting the type of 'sos' (line 1163)
    sos_259056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 39), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 1163)
    getitem___259057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 39), sos_259056, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1163)
    subscript_call_result_259058 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 39), getitem___259057, (section_259053, slice_259055))
    
    # Processing the call keyword arguments (line 1163)
    kwargs_259059 = {}
    # Getting the type of 'tf2zpk' (line 1163)
    tf2zpk_259046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 14), 'tf2zpk', False)
    # Calling tf2zpk(args, kwargs) (line 1163)
    tf2zpk_call_result_259060 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 14), tf2zpk_259046, *[subscript_call_result_259052, subscript_call_result_259058], **kwargs_259059)
    
    # Assigning a type to the variable 'zpk' (line 1163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'zpk', tf2zpk_call_result_259060)
    
    # Assigning a Subscript to a Subscript (line 1164):
    
    # Assigning a Subscript to a Subscript (line 1164):
    
    # Obtaining the type of the subscript
    int_259061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1164, 41), 'int')
    # Getting the type of 'zpk' (line 1164)
    zpk_259062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 37), 'zpk')
    # Obtaining the member '__getitem__' of a type (line 1164)
    getitem___259063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 37), zpk_259062, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1164)
    subscript_call_result_259064 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 37), getitem___259063, int_259061)
    
    # Getting the type of 'z' (line 1164)
    z_259065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 8), 'z')
    int_259066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1164, 10), 'int')
    # Getting the type of 'section' (line 1164)
    section_259067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 12), 'section')
    # Applying the binary operator '*' (line 1164)
    result_mul_259068 = python_operator(stypy.reporting.localization.Localization(__file__, 1164, 10), '*', int_259066, section_259067)
    
    int_259069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1164, 20), 'int')
    # Getting the type of 'section' (line 1164)
    section_259070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 23), 'section')
    int_259071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1164, 31), 'int')
    # Applying the binary operator '+' (line 1164)
    result_add_259072 = python_operator(stypy.reporting.localization.Localization(__file__, 1164, 23), '+', section_259070, int_259071)
    
    # Applying the binary operator '*' (line 1164)
    result_mul_259073 = python_operator(stypy.reporting.localization.Localization(__file__, 1164, 20), '*', int_259069, result_add_259072)
    
    slice_259074 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1164, 8), result_mul_259068, result_mul_259073, None)
    # Storing an element on a container (line 1164)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1164, 8), z_259065, (slice_259074, subscript_call_result_259064))
    
    # Assigning a Subscript to a Subscript (line 1165):
    
    # Assigning a Subscript to a Subscript (line 1165):
    
    # Obtaining the type of the subscript
    int_259075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 41), 'int')
    # Getting the type of 'zpk' (line 1165)
    zpk_259076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 37), 'zpk')
    # Obtaining the member '__getitem__' of a type (line 1165)
    getitem___259077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 37), zpk_259076, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1165)
    subscript_call_result_259078 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 37), getitem___259077, int_259075)
    
    # Getting the type of 'p' (line 1165)
    p_259079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 8), 'p')
    int_259080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 10), 'int')
    # Getting the type of 'section' (line 1165)
    section_259081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'section')
    # Applying the binary operator '*' (line 1165)
    result_mul_259082 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 10), '*', int_259080, section_259081)
    
    int_259083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 20), 'int')
    # Getting the type of 'section' (line 1165)
    section_259084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 23), 'section')
    int_259085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 31), 'int')
    # Applying the binary operator '+' (line 1165)
    result_add_259086 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 23), '+', section_259084, int_259085)
    
    # Applying the binary operator '*' (line 1165)
    result_mul_259087 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 20), '*', int_259083, result_add_259086)
    
    slice_259088 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1165, 8), result_mul_259082, result_mul_259087, None)
    # Storing an element on a container (line 1165)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1165, 8), p_259079, (slice_259088, subscript_call_result_259078))
    
    # Getting the type of 'k' (line 1166)
    k_259089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 8), 'k')
    
    # Obtaining the type of the subscript
    int_259090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1166, 17), 'int')
    # Getting the type of 'zpk' (line 1166)
    zpk_259091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 13), 'zpk')
    # Obtaining the member '__getitem__' of a type (line 1166)
    getitem___259092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 13), zpk_259091, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1166)
    subscript_call_result_259093 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 13), getitem___259092, int_259090)
    
    # Applying the binary operator '*=' (line 1166)
    result_imul_259094 = python_operator(stypy.reporting.localization.Localization(__file__, 1166, 8), '*=', k_259089, subscript_call_result_259093)
    # Assigning a type to the variable 'k' (line 1166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 8), 'k', result_imul_259094)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1167)
    tuple_259095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1167, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1167)
    # Adding element type (line 1167)
    # Getting the type of 'z' (line 1167)
    z_259096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 11), 'z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1167, 11), tuple_259095, z_259096)
    # Adding element type (line 1167)
    # Getting the type of 'p' (line 1167)
    p_259097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 14), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1167, 11), tuple_259095, p_259097)
    # Adding element type (line 1167)
    # Getting the type of 'k' (line 1167)
    k_259098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 17), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1167, 11), tuple_259095, k_259098)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 4), 'stypy_return_type', tuple_259095)
    
    # ################# End of 'sos2zpk(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sos2zpk' in the type store
    # Getting the type of 'stypy_return_type' (line 1133)
    stypy_return_type_259099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_259099)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sos2zpk'
    return stypy_return_type_259099

# Assigning a type to the variable 'sos2zpk' (line 1133)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 0), 'sos2zpk', sos2zpk)

@norecursion
def _nearest_real_complex_idx(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_nearest_real_complex_idx'
    module_type_store = module_type_store.open_function_context('_nearest_real_complex_idx', 1170, 0, False)
    
    # Passed parameters checking function
    _nearest_real_complex_idx.stypy_localization = localization
    _nearest_real_complex_idx.stypy_type_of_self = None
    _nearest_real_complex_idx.stypy_type_store = module_type_store
    _nearest_real_complex_idx.stypy_function_name = '_nearest_real_complex_idx'
    _nearest_real_complex_idx.stypy_param_names_list = ['fro', 'to', 'which']
    _nearest_real_complex_idx.stypy_varargs_param_name = None
    _nearest_real_complex_idx.stypy_kwargs_param_name = None
    _nearest_real_complex_idx.stypy_call_defaults = defaults
    _nearest_real_complex_idx.stypy_call_varargs = varargs
    _nearest_real_complex_idx.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_nearest_real_complex_idx', ['fro', 'to', 'which'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_nearest_real_complex_idx', localization, ['fro', 'to', 'which'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_nearest_real_complex_idx(...)' code ##################

    str_259100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 4), 'str', 'Get the next closest real or complex element based on distance')
    # Evaluating assert statement condition
    
    # Getting the type of 'which' (line 1172)
    which_259101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 11), 'which')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1172)
    tuple_259102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1172)
    # Adding element type (line 1172)
    str_259103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 21), 'str', 'real')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1172, 21), tuple_259102, str_259103)
    # Adding element type (line 1172)
    str_259104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 29), 'str', 'complex')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1172, 21), tuple_259102, str_259104)
    
    # Applying the binary operator 'in' (line 1172)
    result_contains_259105 = python_operator(stypy.reporting.localization.Localization(__file__, 1172, 11), 'in', which_259101, tuple_259102)
    
    
    # Assigning a Call to a Name (line 1173):
    
    # Assigning a Call to a Name (line 1173):
    
    # Call to argsort(...): (line 1173)
    # Processing the call arguments (line 1173)
    
    # Call to abs(...): (line 1173)
    # Processing the call arguments (line 1173)
    # Getting the type of 'fro' (line 1173)
    fro_259110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 30), 'fro', False)
    # Getting the type of 'to' (line 1173)
    to_259111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 36), 'to', False)
    # Applying the binary operator '-' (line 1173)
    result_sub_259112 = python_operator(stypy.reporting.localization.Localization(__file__, 1173, 30), '-', fro_259110, to_259111)
    
    # Processing the call keyword arguments (line 1173)
    kwargs_259113 = {}
    # Getting the type of 'np' (line 1173)
    np_259108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 23), 'np', False)
    # Obtaining the member 'abs' of a type (line 1173)
    abs_259109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 23), np_259108, 'abs')
    # Calling abs(args, kwargs) (line 1173)
    abs_call_result_259114 = invoke(stypy.reporting.localization.Localization(__file__, 1173, 23), abs_259109, *[result_sub_259112], **kwargs_259113)
    
    # Processing the call keyword arguments (line 1173)
    kwargs_259115 = {}
    # Getting the type of 'np' (line 1173)
    np_259106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 12), 'np', False)
    # Obtaining the member 'argsort' of a type (line 1173)
    argsort_259107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 12), np_259106, 'argsort')
    # Calling argsort(args, kwargs) (line 1173)
    argsort_call_result_259116 = invoke(stypy.reporting.localization.Localization(__file__, 1173, 12), argsort_259107, *[abs_call_result_259114], **kwargs_259115)
    
    # Assigning a type to the variable 'order' (line 1173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1173, 4), 'order', argsort_call_result_259116)
    
    # Assigning a Call to a Name (line 1174):
    
    # Assigning a Call to a Name (line 1174):
    
    # Call to isreal(...): (line 1174)
    # Processing the call arguments (line 1174)
    
    # Obtaining the type of the subscript
    # Getting the type of 'order' (line 1174)
    order_259119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 25), 'order', False)
    # Getting the type of 'fro' (line 1174)
    fro_259120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 21), 'fro', False)
    # Obtaining the member '__getitem__' of a type (line 1174)
    getitem___259121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1174, 21), fro_259120, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1174)
    subscript_call_result_259122 = invoke(stypy.reporting.localization.Localization(__file__, 1174, 21), getitem___259121, order_259119)
    
    # Processing the call keyword arguments (line 1174)
    kwargs_259123 = {}
    # Getting the type of 'np' (line 1174)
    np_259117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 11), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1174)
    isreal_259118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1174, 11), np_259117, 'isreal')
    # Calling isreal(args, kwargs) (line 1174)
    isreal_call_result_259124 = invoke(stypy.reporting.localization.Localization(__file__, 1174, 11), isreal_259118, *[subscript_call_result_259122], **kwargs_259123)
    
    # Assigning a type to the variable 'mask' (line 1174)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1174, 4), 'mask', isreal_call_result_259124)
    
    
    # Getting the type of 'which' (line 1175)
    which_259125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 7), 'which')
    str_259126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 16), 'str', 'complex')
    # Applying the binary operator '==' (line 1175)
    result_eq_259127 = python_operator(stypy.reporting.localization.Localization(__file__, 1175, 7), '==', which_259125, str_259126)
    
    # Testing the type of an if condition (line 1175)
    if_condition_259128 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1175, 4), result_eq_259127)
    # Assigning a type to the variable 'if_condition_259128' (line 1175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 4), 'if_condition_259128', if_condition_259128)
    # SSA begins for if statement (line 1175)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a UnaryOp to a Name (line 1176):
    
    # Assigning a UnaryOp to a Name (line 1176):
    
    # Getting the type of 'mask' (line 1176)
    mask_259129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 16), 'mask')
    # Applying the '~' unary operator (line 1176)
    result_inv_259130 = python_operator(stypy.reporting.localization.Localization(__file__, 1176, 15), '~', mask_259129)
    
    # Assigning a type to the variable 'mask' (line 1176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'mask', result_inv_259130)
    # SSA join for if statement (line 1175)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_259131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1177, 35), 'int')
    
    # Obtaining the type of the subscript
    int_259132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1177, 32), 'int')
    
    # Call to where(...): (line 1177)
    # Processing the call arguments (line 1177)
    # Getting the type of 'mask' (line 1177)
    mask_259135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 26), 'mask', False)
    # Processing the call keyword arguments (line 1177)
    kwargs_259136 = {}
    # Getting the type of 'np' (line 1177)
    np_259133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 17), 'np', False)
    # Obtaining the member 'where' of a type (line 1177)
    where_259134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 17), np_259133, 'where')
    # Calling where(args, kwargs) (line 1177)
    where_call_result_259137 = invoke(stypy.reporting.localization.Localization(__file__, 1177, 17), where_259134, *[mask_259135], **kwargs_259136)
    
    # Obtaining the member '__getitem__' of a type (line 1177)
    getitem___259138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 17), where_call_result_259137, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1177)
    subscript_call_result_259139 = invoke(stypy.reporting.localization.Localization(__file__, 1177, 17), getitem___259138, int_259132)
    
    # Obtaining the member '__getitem__' of a type (line 1177)
    getitem___259140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 17), subscript_call_result_259139, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1177)
    subscript_call_result_259141 = invoke(stypy.reporting.localization.Localization(__file__, 1177, 17), getitem___259140, int_259131)
    
    # Getting the type of 'order' (line 1177)
    order_259142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 11), 'order')
    # Obtaining the member '__getitem__' of a type (line 1177)
    getitem___259143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 11), order_259142, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1177)
    subscript_call_result_259144 = invoke(stypy.reporting.localization.Localization(__file__, 1177, 11), getitem___259143, subscript_call_result_259141)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1177, 4), 'stypy_return_type', subscript_call_result_259144)
    
    # ################# End of '_nearest_real_complex_idx(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_nearest_real_complex_idx' in the type store
    # Getting the type of 'stypy_return_type' (line 1170)
    stypy_return_type_259145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_259145)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_nearest_real_complex_idx'
    return stypy_return_type_259145

# Assigning a type to the variable '_nearest_real_complex_idx' (line 1170)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1170, 0), '_nearest_real_complex_idx', _nearest_real_complex_idx)

@norecursion
def zpk2sos(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_259146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1180, 29), 'str', 'nearest')
    defaults = [str_259146]
    # Create a new context for function 'zpk2sos'
    module_type_store = module_type_store.open_function_context('zpk2sos', 1180, 0, False)
    
    # Passed parameters checking function
    zpk2sos.stypy_localization = localization
    zpk2sos.stypy_type_of_self = None
    zpk2sos.stypy_type_store = module_type_store
    zpk2sos.stypy_function_name = 'zpk2sos'
    zpk2sos.stypy_param_names_list = ['z', 'p', 'k', 'pairing']
    zpk2sos.stypy_varargs_param_name = None
    zpk2sos.stypy_kwargs_param_name = None
    zpk2sos.stypy_call_defaults = defaults
    zpk2sos.stypy_call_varargs = varargs
    zpk2sos.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'zpk2sos', ['z', 'p', 'k', 'pairing'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'zpk2sos', localization, ['z', 'p', 'k', 'pairing'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'zpk2sos(...)' code ##################

    str_259147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1339, (-1)), 'str', "\n    Return second-order sections from zeros, poles, and gain of a system\n\n    Parameters\n    ----------\n    z : array_like\n        Zeros of the transfer function.\n    p : array_like\n        Poles of the transfer function.\n    k : float\n        System gain.\n    pairing : {'nearest', 'keep_odd'}, optional\n        The method to use to combine pairs of poles and zeros into sections.\n        See Notes below.\n\n    Returns\n    -------\n    sos : ndarray\n        Array of second-order filter coefficients, with shape\n        ``(n_sections, 6)``. See `sosfilt` for the SOS filter format\n        specification.\n\n    See Also\n    --------\n    sosfilt\n\n    Notes\n    -----\n    The algorithm used to convert ZPK to SOS format is designed to\n    minimize errors due to numerical precision issues. The pairing\n    algorithm attempts to minimize the peak gain of each biquadratic\n    section. This is done by pairing poles with the nearest zeros, starting\n    with the poles closest to the unit circle.\n\n    *Algorithms*\n\n    The current algorithms are designed specifically for use with digital\n    filters. (The output coefficents are not correct for analog filters.)\n\n    The steps in the ``pairing='nearest'`` and ``pairing='keep_odd'``\n    algorithms are mostly shared. The ``nearest`` algorithm attempts to\n    minimize the peak gain, while ``'keep_odd'`` minimizes peak gain under\n    the constraint that odd-order systems should retain one section\n    as first order. The algorithm steps and are as follows:\n\n    As a pre-processing step, add poles or zeros to the origin as\n    necessary to obtain the same number of poles and zeros for pairing.\n    If ``pairing == 'nearest'`` and there are an odd number of poles,\n    add an additional pole and a zero at the origin.\n\n    The following steps are then iterated over until no more poles or\n    zeros remain:\n\n    1. Take the (next remaining) pole (complex or real) closest to the\n       unit circle to begin a new filter section.\n\n    2. If the pole is real and there are no other remaining real poles [#]_,\n       add the closest real zero to the section and leave it as a first\n       order section. Note that after this step we are guaranteed to be\n       left with an even number of real poles, complex poles, real zeros,\n       and complex zeros for subsequent pairing iterations.\n\n    3. Else:\n\n        1. If the pole is complex and the zero is the only remaining real\n           zero*, then pair the pole with the *next* closest zero\n           (guaranteed to be complex). This is necessary to ensure that\n           there will be a real zero remaining to eventually create a\n           first-order section (thus keeping the odd order).\n\n        2. Else pair the pole with the closest remaining zero (complex or\n           real).\n\n        3. Proceed to complete the second-order section by adding another\n           pole and zero to the current pole and zero in the section:\n\n            1. If the current pole and zero are both complex, add their\n               conjugates.\n\n            2. Else if the pole is complex and the zero is real, add the\n               conjugate pole and the next closest real zero.\n\n            3. Else if the pole is real and the zero is complex, add the\n               conjugate zero and the real pole closest to those zeros.\n\n            4. Else (we must have a real pole and real zero) add the next\n               real pole closest to the unit circle, and then add the real\n               zero closest to that pole.\n\n    .. [#] This conditional can only be met for specific odd-order inputs\n           with the ``pairing == 'keep_odd'`` method.\n\n    .. versionadded:: 0.16.0\n\n    Examples\n    --------\n\n    Design a 6th order low-pass elliptic digital filter for a system with a\n    sampling rate of 8000 Hz that has a pass-band corner frequency of\n    1000 Hz.  The ripple in the pass-band should not exceed 0.087 dB, and\n    the attenuation in the stop-band should be at least 90 dB.\n\n    In the following call to `signal.ellip`, we could use ``output='sos'``,\n    but for this example, we'll use ``output='zpk'``, and then convert to SOS\n    format with `zpk2sos`:\n\n    >>> from scipy import signal\n    >>> z, p, k = signal.ellip(6, 0.087, 90, 1000/(0.5*8000), output='zpk')\n\n    Now convert to SOS format.\n\n    >>> sos = signal.zpk2sos(z, p, k)\n\n    The coefficients of the numerators of the sections:\n\n    >>> sos[:, :3]\n    array([[ 0.0014154 ,  0.00248707,  0.0014154 ],\n           [ 1.        ,  0.72965193,  1.        ],\n           [ 1.        ,  0.17594966,  1.        ]])\n\n    The symmetry in the coefficients occurs because all the zeros are on the\n    unit circle.\n\n    The coefficients of the denominators of the sections:\n\n    >>> sos[:, 3:]\n    array([[ 1.        , -1.32543251,  0.46989499],\n           [ 1.        , -1.26117915,  0.6262586 ],\n           [ 1.        , -1.25707217,  0.86199667]])\n\n    The next example shows the effect of the `pairing` option.  We have a\n    system with three poles and three zeros, so the SOS array will have\n    shape (2, 6).  The means there is, in effect, an extra pole and an extra\n    zero at the origin in the SOS representation.\n\n    >>> z1 = np.array([-1, -0.5-0.5j, -0.5+0.5j])\n    >>> p1 = np.array([0.75, 0.8+0.1j, 0.8-0.1j])\n\n    With ``pairing='nearest'`` (the default), we obtain\n\n    >>> signal.zpk2sos(z1, p1, 1)\n    array([[ 1.  ,  1.  ,  0.5 ,  1.  , -0.75,  0.  ],\n           [ 1.  ,  1.  ,  0.  ,  1.  , -1.6 ,  0.65]])\n\n    The first section has the zeros {-0.5-0.05j, -0.5+0.5j} and the poles\n    {0, 0.75}, and the second section has the zeros {-1, 0} and poles\n    {0.8+0.1j, 0.8-0.1j}.  Note that the extra pole and zero at the origin\n    have been assigned to different sections.\n\n    With ``pairing='keep_odd'``, we obtain:\n\n    >>> signal.zpk2sos(z1, p1, 1, pairing='keep_odd')\n    array([[ 1.  ,  1.  ,  0.  ,  1.  , -0.75,  0.  ],\n           [ 1.  ,  1.  ,  0.5 ,  1.  , -1.6 ,  0.65]])\n\n    The extra pole and zero at the origin are in the same section.\n    The first section is, in effect, a first-order section.\n\n    ")
    
    # Assigning a List to a Name (line 1348):
    
    # Assigning a List to a Name (line 1348):
    
    # Obtaining an instance of the builtin type 'list' (line 1348)
    list_259148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1348)
    # Adding element type (line 1348)
    str_259149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, 22), 'str', 'nearest')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1348, 21), list_259148, str_259149)
    # Adding element type (line 1348)
    str_259150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1348, 33), 'str', 'keep_odd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1348, 21), list_259148, str_259150)
    
    # Assigning a type to the variable 'valid_pairings' (line 1348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 4), 'valid_pairings', list_259148)
    
    
    # Getting the type of 'pairing' (line 1349)
    pairing_259151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 7), 'pairing')
    # Getting the type of 'valid_pairings' (line 1349)
    valid_pairings_259152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 22), 'valid_pairings')
    # Applying the binary operator 'notin' (line 1349)
    result_contains_259153 = python_operator(stypy.reporting.localization.Localization(__file__, 1349, 7), 'notin', pairing_259151, valid_pairings_259152)
    
    # Testing the type of an if condition (line 1349)
    if_condition_259154 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1349, 4), result_contains_259153)
    # Assigning a type to the variable 'if_condition_259154' (line 1349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 4), 'if_condition_259154', if_condition_259154)
    # SSA begins for if statement (line 1349)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1350)
    # Processing the call arguments (line 1350)
    str_259156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1350, 25), 'str', 'pairing must be one of %s, not %s')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1351)
    tuple_259157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1351)
    # Adding element type (line 1351)
    # Getting the type of 'valid_pairings' (line 1351)
    valid_pairings_259158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 28), 'valid_pairings', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1351, 28), tuple_259157, valid_pairings_259158)
    # Adding element type (line 1351)
    # Getting the type of 'pairing' (line 1351)
    pairing_259159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 44), 'pairing', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1351, 28), tuple_259157, pairing_259159)
    
    # Applying the binary operator '%' (line 1350)
    result_mod_259160 = python_operator(stypy.reporting.localization.Localization(__file__, 1350, 25), '%', str_259156, tuple_259157)
    
    # Processing the call keyword arguments (line 1350)
    kwargs_259161 = {}
    # Getting the type of 'ValueError' (line 1350)
    ValueError_259155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1350)
    ValueError_call_result_259162 = invoke(stypy.reporting.localization.Localization(__file__, 1350, 14), ValueError_259155, *[result_mod_259160], **kwargs_259161)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1350, 8), ValueError_call_result_259162, 'raise parameter', BaseException)
    # SSA join for if statement (line 1349)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1352)
    # Processing the call arguments (line 1352)
    # Getting the type of 'z' (line 1352)
    z_259164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 11), 'z', False)
    # Processing the call keyword arguments (line 1352)
    kwargs_259165 = {}
    # Getting the type of 'len' (line 1352)
    len_259163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 7), 'len', False)
    # Calling len(args, kwargs) (line 1352)
    len_call_result_259166 = invoke(stypy.reporting.localization.Localization(__file__, 1352, 7), len_259163, *[z_259164], **kwargs_259165)
    
    
    # Call to len(...): (line 1352)
    # Processing the call arguments (line 1352)
    # Getting the type of 'p' (line 1352)
    p_259168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 21), 'p', False)
    # Processing the call keyword arguments (line 1352)
    kwargs_259169 = {}
    # Getting the type of 'len' (line 1352)
    len_259167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 17), 'len', False)
    # Calling len(args, kwargs) (line 1352)
    len_call_result_259170 = invoke(stypy.reporting.localization.Localization(__file__, 1352, 17), len_259167, *[p_259168], **kwargs_259169)
    
    # Applying the binary operator '==' (line 1352)
    result_eq_259171 = python_operator(stypy.reporting.localization.Localization(__file__, 1352, 7), '==', len_call_result_259166, len_call_result_259170)
    int_259172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1352, 27), 'int')
    # Applying the binary operator '==' (line 1352)
    result_eq_259173 = python_operator(stypy.reporting.localization.Localization(__file__, 1352, 7), '==', len_call_result_259170, int_259172)
    # Applying the binary operator '&' (line 1352)
    result_and__259174 = python_operator(stypy.reporting.localization.Localization(__file__, 1352, 7), '&', result_eq_259171, result_eq_259173)
    
    # Testing the type of an if condition (line 1352)
    if_condition_259175 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1352, 4), result_and__259174)
    # Assigning a type to the variable 'if_condition_259175' (line 1352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1352, 4), 'if_condition_259175', if_condition_259175)
    # SSA begins for if statement (line 1352)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 1353)
    # Processing the call arguments (line 1353)
    
    # Obtaining an instance of the builtin type 'list' (line 1353)
    list_259177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1353)
    # Adding element type (line 1353)
    
    # Obtaining an instance of the builtin type 'list' (line 1353)
    list_259178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1353)
    # Adding element type (line 1353)
    # Getting the type of 'k' (line 1353)
    k_259179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 23), 'k', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1353, 22), list_259178, k_259179)
    # Adding element type (line 1353)
    float_259180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 26), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1353, 22), list_259178, float_259180)
    # Adding element type (line 1353)
    float_259181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 30), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1353, 22), list_259178, float_259181)
    # Adding element type (line 1353)
    float_259182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 34), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1353, 22), list_259178, float_259182)
    # Adding element type (line 1353)
    float_259183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 38), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1353, 22), list_259178, float_259183)
    # Adding element type (line 1353)
    float_259184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1353, 42), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1353, 22), list_259178, float_259184)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1353, 21), list_259177, list_259178)
    
    # Processing the call keyword arguments (line 1353)
    kwargs_259185 = {}
    # Getting the type of 'array' (line 1353)
    array_259176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 15), 'array', False)
    # Calling array(args, kwargs) (line 1353)
    array_call_result_259186 = invoke(stypy.reporting.localization.Localization(__file__, 1353, 15), array_259176, *[list_259177], **kwargs_259185)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1353, 8), 'stypy_return_type', array_call_result_259186)
    # SSA join for if statement (line 1352)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1356):
    
    # Assigning a Call to a Name (line 1356):
    
    # Call to concatenate(...): (line 1356)
    # Processing the call arguments (line 1356)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1356)
    tuple_259189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1356)
    # Adding element type (line 1356)
    # Getting the type of 'p' (line 1356)
    p_259190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 24), 'p', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1356, 24), tuple_259189, p_259190)
    # Adding element type (line 1356)
    
    # Call to zeros(...): (line 1356)
    # Processing the call arguments (line 1356)
    
    # Call to max(...): (line 1356)
    # Processing the call arguments (line 1356)
    
    # Call to len(...): (line 1356)
    # Processing the call arguments (line 1356)
    # Getting the type of 'z' (line 1356)
    z_259195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 44), 'z', False)
    # Processing the call keyword arguments (line 1356)
    kwargs_259196 = {}
    # Getting the type of 'len' (line 1356)
    len_259194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 40), 'len', False)
    # Calling len(args, kwargs) (line 1356)
    len_call_result_259197 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 40), len_259194, *[z_259195], **kwargs_259196)
    
    
    # Call to len(...): (line 1356)
    # Processing the call arguments (line 1356)
    # Getting the type of 'p' (line 1356)
    p_259199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 53), 'p', False)
    # Processing the call keyword arguments (line 1356)
    kwargs_259200 = {}
    # Getting the type of 'len' (line 1356)
    len_259198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 49), 'len', False)
    # Calling len(args, kwargs) (line 1356)
    len_call_result_259201 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 49), len_259198, *[p_259199], **kwargs_259200)
    
    # Applying the binary operator '-' (line 1356)
    result_sub_259202 = python_operator(stypy.reporting.localization.Localization(__file__, 1356, 40), '-', len_call_result_259197, len_call_result_259201)
    
    int_259203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1356, 57), 'int')
    # Processing the call keyword arguments (line 1356)
    kwargs_259204 = {}
    # Getting the type of 'max' (line 1356)
    max_259193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 36), 'max', False)
    # Calling max(args, kwargs) (line 1356)
    max_call_result_259205 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 36), max_259193, *[result_sub_259202, int_259203], **kwargs_259204)
    
    # Processing the call keyword arguments (line 1356)
    kwargs_259206 = {}
    # Getting the type of 'np' (line 1356)
    np_259191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 27), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1356)
    zeros_259192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 27), np_259191, 'zeros')
    # Calling zeros(args, kwargs) (line 1356)
    zeros_call_result_259207 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 27), zeros_259192, *[max_call_result_259205], **kwargs_259206)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1356, 24), tuple_259189, zeros_call_result_259207)
    
    # Processing the call keyword arguments (line 1356)
    kwargs_259208 = {}
    # Getting the type of 'np' (line 1356)
    np_259187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1356, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1356)
    concatenate_259188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1356, 8), np_259187, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1356)
    concatenate_call_result_259209 = invoke(stypy.reporting.localization.Localization(__file__, 1356, 8), concatenate_259188, *[tuple_259189], **kwargs_259208)
    
    # Assigning a type to the variable 'p' (line 1356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1356, 4), 'p', concatenate_call_result_259209)
    
    # Assigning a Call to a Name (line 1357):
    
    # Assigning a Call to a Name (line 1357):
    
    # Call to concatenate(...): (line 1357)
    # Processing the call arguments (line 1357)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1357)
    tuple_259212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1357, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1357)
    # Adding element type (line 1357)
    # Getting the type of 'z' (line 1357)
    z_259213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 24), 'z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1357, 24), tuple_259212, z_259213)
    # Adding element type (line 1357)
    
    # Call to zeros(...): (line 1357)
    # Processing the call arguments (line 1357)
    
    # Call to max(...): (line 1357)
    # Processing the call arguments (line 1357)
    
    # Call to len(...): (line 1357)
    # Processing the call arguments (line 1357)
    # Getting the type of 'p' (line 1357)
    p_259218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 44), 'p', False)
    # Processing the call keyword arguments (line 1357)
    kwargs_259219 = {}
    # Getting the type of 'len' (line 1357)
    len_259217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 40), 'len', False)
    # Calling len(args, kwargs) (line 1357)
    len_call_result_259220 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 40), len_259217, *[p_259218], **kwargs_259219)
    
    
    # Call to len(...): (line 1357)
    # Processing the call arguments (line 1357)
    # Getting the type of 'z' (line 1357)
    z_259222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 53), 'z', False)
    # Processing the call keyword arguments (line 1357)
    kwargs_259223 = {}
    # Getting the type of 'len' (line 1357)
    len_259221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 49), 'len', False)
    # Calling len(args, kwargs) (line 1357)
    len_call_result_259224 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 49), len_259221, *[z_259222], **kwargs_259223)
    
    # Applying the binary operator '-' (line 1357)
    result_sub_259225 = python_operator(stypy.reporting.localization.Localization(__file__, 1357, 40), '-', len_call_result_259220, len_call_result_259224)
    
    int_259226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1357, 57), 'int')
    # Processing the call keyword arguments (line 1357)
    kwargs_259227 = {}
    # Getting the type of 'max' (line 1357)
    max_259216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 36), 'max', False)
    # Calling max(args, kwargs) (line 1357)
    max_call_result_259228 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 36), max_259216, *[result_sub_259225, int_259226], **kwargs_259227)
    
    # Processing the call keyword arguments (line 1357)
    kwargs_259229 = {}
    # Getting the type of 'np' (line 1357)
    np_259214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 27), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1357)
    zeros_259215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1357, 27), np_259214, 'zeros')
    # Calling zeros(args, kwargs) (line 1357)
    zeros_call_result_259230 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 27), zeros_259215, *[max_call_result_259228], **kwargs_259229)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1357, 24), tuple_259212, zeros_call_result_259230)
    
    # Processing the call keyword arguments (line 1357)
    kwargs_259231 = {}
    # Getting the type of 'np' (line 1357)
    np_259210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1357)
    concatenate_259211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1357, 8), np_259210, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1357)
    concatenate_call_result_259232 = invoke(stypy.reporting.localization.Localization(__file__, 1357, 8), concatenate_259211, *[tuple_259212], **kwargs_259231)
    
    # Assigning a type to the variable 'z' (line 1357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1357, 4), 'z', concatenate_call_result_259232)
    
    # Assigning a BinOp to a Name (line 1358):
    
    # Assigning a BinOp to a Name (line 1358):
    
    # Call to max(...): (line 1358)
    # Processing the call arguments (line 1358)
    
    # Call to len(...): (line 1358)
    # Processing the call arguments (line 1358)
    # Getting the type of 'p' (line 1358)
    p_259235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 26), 'p', False)
    # Processing the call keyword arguments (line 1358)
    kwargs_259236 = {}
    # Getting the type of 'len' (line 1358)
    len_259234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 22), 'len', False)
    # Calling len(args, kwargs) (line 1358)
    len_call_result_259237 = invoke(stypy.reporting.localization.Localization(__file__, 1358, 22), len_259234, *[p_259235], **kwargs_259236)
    
    
    # Call to len(...): (line 1358)
    # Processing the call arguments (line 1358)
    # Getting the type of 'z' (line 1358)
    z_259239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 34), 'z', False)
    # Processing the call keyword arguments (line 1358)
    kwargs_259240 = {}
    # Getting the type of 'len' (line 1358)
    len_259238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 30), 'len', False)
    # Calling len(args, kwargs) (line 1358)
    len_call_result_259241 = invoke(stypy.reporting.localization.Localization(__file__, 1358, 30), len_259238, *[z_259239], **kwargs_259240)
    
    # Processing the call keyword arguments (line 1358)
    kwargs_259242 = {}
    # Getting the type of 'max' (line 1358)
    max_259233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 18), 'max', False)
    # Calling max(args, kwargs) (line 1358)
    max_call_result_259243 = invoke(stypy.reporting.localization.Localization(__file__, 1358, 18), max_259233, *[len_call_result_259237, len_call_result_259241], **kwargs_259242)
    
    int_259244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 40), 'int')
    # Applying the binary operator '+' (line 1358)
    result_add_259245 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 18), '+', max_call_result_259243, int_259244)
    
    int_259246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1358, 46), 'int')
    # Applying the binary operator '//' (line 1358)
    result_floordiv_259247 = python_operator(stypy.reporting.localization.Localization(__file__, 1358, 17), '//', result_add_259245, int_259246)
    
    # Assigning a type to the variable 'n_sections' (line 1358)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1358, 4), 'n_sections', result_floordiv_259247)
    
    # Assigning a Call to a Name (line 1359):
    
    # Assigning a Call to a Name (line 1359):
    
    # Call to zeros(...): (line 1359)
    # Processing the call arguments (line 1359)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1359)
    tuple_259249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1359)
    # Adding element type (line 1359)
    # Getting the type of 'n_sections' (line 1359)
    n_sections_259250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 17), 'n_sections', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1359, 17), tuple_259249, n_sections_259250)
    # Adding element type (line 1359)
    int_259251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1359, 29), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1359, 17), tuple_259249, int_259251)
    
    # Processing the call keyword arguments (line 1359)
    kwargs_259252 = {}
    # Getting the type of 'zeros' (line 1359)
    zeros_259248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 10), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1359)
    zeros_call_result_259253 = invoke(stypy.reporting.localization.Localization(__file__, 1359, 10), zeros_259248, *[tuple_259249], **kwargs_259252)
    
    # Assigning a type to the variable 'sos' (line 1359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1359, 4), 'sos', zeros_call_result_259253)
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 1361)
    # Processing the call arguments (line 1361)
    # Getting the type of 'p' (line 1361)
    p_259255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 11), 'p', False)
    # Processing the call keyword arguments (line 1361)
    kwargs_259256 = {}
    # Getting the type of 'len' (line 1361)
    len_259254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 7), 'len', False)
    # Calling len(args, kwargs) (line 1361)
    len_call_result_259257 = invoke(stypy.reporting.localization.Localization(__file__, 1361, 7), len_259254, *[p_259255], **kwargs_259256)
    
    int_259258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 16), 'int')
    # Applying the binary operator '%' (line 1361)
    result_mod_259259 = python_operator(stypy.reporting.localization.Localization(__file__, 1361, 7), '%', len_call_result_259257, int_259258)
    
    int_259260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 21), 'int')
    # Applying the binary operator '==' (line 1361)
    result_eq_259261 = python_operator(stypy.reporting.localization.Localization(__file__, 1361, 7), '==', result_mod_259259, int_259260)
    
    
    # Getting the type of 'pairing' (line 1361)
    pairing_259262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 27), 'pairing')
    str_259263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, 38), 'str', 'nearest')
    # Applying the binary operator '==' (line 1361)
    result_eq_259264 = python_operator(stypy.reporting.localization.Localization(__file__, 1361, 27), '==', pairing_259262, str_259263)
    
    # Applying the binary operator 'and' (line 1361)
    result_and_keyword_259265 = python_operator(stypy.reporting.localization.Localization(__file__, 1361, 7), 'and', result_eq_259261, result_eq_259264)
    
    # Testing the type of an if condition (line 1361)
    if_condition_259266 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1361, 4), result_and_keyword_259265)
    # Assigning a type to the variable 'if_condition_259266' (line 1361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1361, 4), 'if_condition_259266', if_condition_259266)
    # SSA begins for if statement (line 1361)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1362):
    
    # Assigning a Call to a Name (line 1362):
    
    # Call to concatenate(...): (line 1362)
    # Processing the call arguments (line 1362)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1362)
    tuple_259269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1362)
    # Adding element type (line 1362)
    # Getting the type of 'p' (line 1362)
    p_259270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 28), 'p', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1362, 28), tuple_259269, p_259270)
    # Adding element type (line 1362)
    
    # Obtaining an instance of the builtin type 'list' (line 1362)
    list_259271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1362)
    # Adding element type (line 1362)
    float_259272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1362, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1362, 31), list_259271, float_259272)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1362, 28), tuple_259269, list_259271)
    
    # Processing the call keyword arguments (line 1362)
    kwargs_259273 = {}
    # Getting the type of 'np' (line 1362)
    np_259267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 12), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1362)
    concatenate_259268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 12), np_259267, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1362)
    concatenate_call_result_259274 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 12), concatenate_259268, *[tuple_259269], **kwargs_259273)
    
    # Assigning a type to the variable 'p' (line 1362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 8), 'p', concatenate_call_result_259274)
    
    # Assigning a Call to a Name (line 1363):
    
    # Assigning a Call to a Name (line 1363):
    
    # Call to concatenate(...): (line 1363)
    # Processing the call arguments (line 1363)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1363)
    tuple_259277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1363)
    # Adding element type (line 1363)
    # Getting the type of 'z' (line 1363)
    z_259278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 28), 'z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1363, 28), tuple_259277, z_259278)
    # Adding element type (line 1363)
    
    # Obtaining an instance of the builtin type 'list' (line 1363)
    list_259279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1363)
    # Adding element type (line 1363)
    float_259280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1363, 31), list_259279, float_259280)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1363, 28), tuple_259277, list_259279)
    
    # Processing the call keyword arguments (line 1363)
    kwargs_259281 = {}
    # Getting the type of 'np' (line 1363)
    np_259275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 12), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1363)
    concatenate_259276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1363, 12), np_259275, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1363)
    concatenate_call_result_259282 = invoke(stypy.reporting.localization.Localization(__file__, 1363, 12), concatenate_259276, *[tuple_259277], **kwargs_259281)
    
    # Assigning a type to the variable 'z' (line 1363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1363, 8), 'z', concatenate_call_result_259282)
    # SSA join for if statement (line 1361)
    module_type_store = module_type_store.join_ssa_context()
    
    # Evaluating assert statement condition
    
    
    # Call to len(...): (line 1364)
    # Processing the call arguments (line 1364)
    # Getting the type of 'p' (line 1364)
    p_259284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 15), 'p', False)
    # Processing the call keyword arguments (line 1364)
    kwargs_259285 = {}
    # Getting the type of 'len' (line 1364)
    len_259283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 11), 'len', False)
    # Calling len(args, kwargs) (line 1364)
    len_call_result_259286 = invoke(stypy.reporting.localization.Localization(__file__, 1364, 11), len_259283, *[p_259284], **kwargs_259285)
    
    
    # Call to len(...): (line 1364)
    # Processing the call arguments (line 1364)
    # Getting the type of 'z' (line 1364)
    z_259288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 25), 'z', False)
    # Processing the call keyword arguments (line 1364)
    kwargs_259289 = {}
    # Getting the type of 'len' (line 1364)
    len_259287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 21), 'len', False)
    # Calling len(args, kwargs) (line 1364)
    len_call_result_259290 = invoke(stypy.reporting.localization.Localization(__file__, 1364, 21), len_259287, *[z_259288], **kwargs_259289)
    
    # Applying the binary operator '==' (line 1364)
    result_eq_259291 = python_operator(stypy.reporting.localization.Localization(__file__, 1364, 11), '==', len_call_result_259286, len_call_result_259290)
    
    
    # Assigning a Call to a Name (line 1368):
    
    # Assigning a Call to a Name (line 1368):
    
    # Call to concatenate(...): (line 1368)
    # Processing the call arguments (line 1368)
    
    # Call to _cplxreal(...): (line 1368)
    # Processing the call arguments (line 1368)
    # Getting the type of 'z' (line 1368)
    z_259295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 33), 'z', False)
    # Processing the call keyword arguments (line 1368)
    kwargs_259296 = {}
    # Getting the type of '_cplxreal' (line 1368)
    _cplxreal_259294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 23), '_cplxreal', False)
    # Calling _cplxreal(args, kwargs) (line 1368)
    _cplxreal_call_result_259297 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 23), _cplxreal_259294, *[z_259295], **kwargs_259296)
    
    # Processing the call keyword arguments (line 1368)
    kwargs_259298 = {}
    # Getting the type of 'np' (line 1368)
    np_259292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1368)
    concatenate_259293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 8), np_259292, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1368)
    concatenate_call_result_259299 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 8), concatenate_259293, *[_cplxreal_call_result_259297], **kwargs_259298)
    
    # Assigning a type to the variable 'z' (line 1368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 4), 'z', concatenate_call_result_259299)
    
    # Assigning a Call to a Name (line 1369):
    
    # Assigning a Call to a Name (line 1369):
    
    # Call to concatenate(...): (line 1369)
    # Processing the call arguments (line 1369)
    
    # Call to _cplxreal(...): (line 1369)
    # Processing the call arguments (line 1369)
    # Getting the type of 'p' (line 1369)
    p_259303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 33), 'p', False)
    # Processing the call keyword arguments (line 1369)
    kwargs_259304 = {}
    # Getting the type of '_cplxreal' (line 1369)
    _cplxreal_259302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 23), '_cplxreal', False)
    # Calling _cplxreal(args, kwargs) (line 1369)
    _cplxreal_call_result_259305 = invoke(stypy.reporting.localization.Localization(__file__, 1369, 23), _cplxreal_259302, *[p_259303], **kwargs_259304)
    
    # Processing the call keyword arguments (line 1369)
    kwargs_259306 = {}
    # Getting the type of 'np' (line 1369)
    np_259300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1369, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1369)
    concatenate_259301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1369, 8), np_259300, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1369)
    concatenate_call_result_259307 = invoke(stypy.reporting.localization.Localization(__file__, 1369, 8), concatenate_259301, *[_cplxreal_call_result_259305], **kwargs_259306)
    
    # Assigning a type to the variable 'p' (line 1369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1369, 4), 'p', concatenate_call_result_259307)
    
    # Assigning a Call to a Name (line 1371):
    
    # Assigning a Call to a Name (line 1371):
    
    # Call to zeros(...): (line 1371)
    # Processing the call arguments (line 1371)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1371)
    tuple_259310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1371)
    # Adding element type (line 1371)
    # Getting the type of 'n_sections' (line 1371)
    n_sections_259311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 22), 'n_sections', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1371, 22), tuple_259310, n_sections_259311)
    # Adding element type (line 1371)
    int_259312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 34), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1371, 22), tuple_259310, int_259312)
    
    # Getting the type of 'np' (line 1371)
    np_259313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 38), 'np', False)
    # Obtaining the member 'complex128' of a type (line 1371)
    complex128_259314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 38), np_259313, 'complex128')
    # Processing the call keyword arguments (line 1371)
    kwargs_259315 = {}
    # Getting the type of 'np' (line 1371)
    np_259308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1371)
    zeros_259309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 12), np_259308, 'zeros')
    # Calling zeros(args, kwargs) (line 1371)
    zeros_call_result_259316 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 12), zeros_259309, *[tuple_259310, complex128_259314], **kwargs_259315)
    
    # Assigning a type to the variable 'p_sos' (line 1371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 4), 'p_sos', zeros_call_result_259316)
    
    # Assigning a Call to a Name (line 1372):
    
    # Assigning a Call to a Name (line 1372):
    
    # Call to zeros_like(...): (line 1372)
    # Processing the call arguments (line 1372)
    # Getting the type of 'p_sos' (line 1372)
    p_sos_259319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 26), 'p_sos', False)
    # Processing the call keyword arguments (line 1372)
    kwargs_259320 = {}
    # Getting the type of 'np' (line 1372)
    np_259317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 12), 'np', False)
    # Obtaining the member 'zeros_like' of a type (line 1372)
    zeros_like_259318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1372, 12), np_259317, 'zeros_like')
    # Calling zeros_like(args, kwargs) (line 1372)
    zeros_like_call_result_259321 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 12), zeros_like_259318, *[p_sos_259319], **kwargs_259320)
    
    # Assigning a type to the variable 'z_sos' (line 1372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 4), 'z_sos', zeros_like_call_result_259321)
    
    
    # Call to range(...): (line 1373)
    # Processing the call arguments (line 1373)
    # Getting the type of 'n_sections' (line 1373)
    n_sections_259323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 20), 'n_sections', False)
    # Processing the call keyword arguments (line 1373)
    kwargs_259324 = {}
    # Getting the type of 'range' (line 1373)
    range_259322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 14), 'range', False)
    # Calling range(args, kwargs) (line 1373)
    range_call_result_259325 = invoke(stypy.reporting.localization.Localization(__file__, 1373, 14), range_259322, *[n_sections_259323], **kwargs_259324)
    
    # Testing the type of a for loop iterable (line 1373)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1373, 4), range_call_result_259325)
    # Getting the type of the for loop variable (line 1373)
    for_loop_var_259326 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1373, 4), range_call_result_259325)
    # Assigning a type to the variable 'si' (line 1373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 4), 'si', for_loop_var_259326)
    # SSA begins for a for statement (line 1373)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1375):
    
    # Assigning a Call to a Name (line 1375):
    
    # Call to argmin(...): (line 1375)
    # Processing the call arguments (line 1375)
    
    # Call to abs(...): (line 1375)
    # Processing the call arguments (line 1375)
    int_259331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 34), 'int')
    
    # Call to abs(...): (line 1375)
    # Processing the call arguments (line 1375)
    # Getting the type of 'p' (line 1375)
    p_259334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 45), 'p', False)
    # Processing the call keyword arguments (line 1375)
    kwargs_259335 = {}
    # Getting the type of 'np' (line 1375)
    np_259332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 38), 'np', False)
    # Obtaining the member 'abs' of a type (line 1375)
    abs_259333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 38), np_259332, 'abs')
    # Calling abs(args, kwargs) (line 1375)
    abs_call_result_259336 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 38), abs_259333, *[p_259334], **kwargs_259335)
    
    # Applying the binary operator '-' (line 1375)
    result_sub_259337 = python_operator(stypy.reporting.localization.Localization(__file__, 1375, 34), '-', int_259331, abs_call_result_259336)
    
    # Processing the call keyword arguments (line 1375)
    kwargs_259338 = {}
    # Getting the type of 'np' (line 1375)
    np_259329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 27), 'np', False)
    # Obtaining the member 'abs' of a type (line 1375)
    abs_259330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 27), np_259329, 'abs')
    # Calling abs(args, kwargs) (line 1375)
    abs_call_result_259339 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 27), abs_259330, *[result_sub_259337], **kwargs_259338)
    
    # Processing the call keyword arguments (line 1375)
    kwargs_259340 = {}
    # Getting the type of 'np' (line 1375)
    np_259327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 17), 'np', False)
    # Obtaining the member 'argmin' of a type (line 1375)
    argmin_259328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 17), np_259327, 'argmin')
    # Calling argmin(args, kwargs) (line 1375)
    argmin_call_result_259341 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 17), argmin_259328, *[abs_call_result_259339], **kwargs_259340)
    
    # Assigning a type to the variable 'p1_idx' (line 1375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 8), 'p1_idx', argmin_call_result_259341)
    
    # Assigning a Subscript to a Name (line 1376):
    
    # Assigning a Subscript to a Name (line 1376):
    
    # Obtaining the type of the subscript
    # Getting the type of 'p1_idx' (line 1376)
    p1_idx_259342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 15), 'p1_idx')
    # Getting the type of 'p' (line 1376)
    p_259343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 13), 'p')
    # Obtaining the member '__getitem__' of a type (line 1376)
    getitem___259344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 13), p_259343, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1376)
    subscript_call_result_259345 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 13), getitem___259344, p1_idx_259342)
    
    # Assigning a type to the variable 'p1' (line 1376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 8), 'p1', subscript_call_result_259345)
    
    # Assigning a Call to a Name (line 1377):
    
    # Assigning a Call to a Name (line 1377):
    
    # Call to delete(...): (line 1377)
    # Processing the call arguments (line 1377)
    # Getting the type of 'p' (line 1377)
    p_259348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 22), 'p', False)
    # Getting the type of 'p1_idx' (line 1377)
    p1_idx_259349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 25), 'p1_idx', False)
    # Processing the call keyword arguments (line 1377)
    kwargs_259350 = {}
    # Getting the type of 'np' (line 1377)
    np_259346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 12), 'np', False)
    # Obtaining the member 'delete' of a type (line 1377)
    delete_259347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1377, 12), np_259346, 'delete')
    # Calling delete(args, kwargs) (line 1377)
    delete_call_result_259351 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 12), delete_259347, *[p_259348, p1_idx_259349], **kwargs_259350)
    
    # Assigning a type to the variable 'p' (line 1377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1377, 8), 'p', delete_call_result_259351)
    
    
    # Evaluating a boolean operation
    
    # Call to isreal(...): (line 1381)
    # Processing the call arguments (line 1381)
    # Getting the type of 'p1' (line 1381)
    p1_259354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 21), 'p1', False)
    # Processing the call keyword arguments (line 1381)
    kwargs_259355 = {}
    # Getting the type of 'np' (line 1381)
    np_259352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 11), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1381)
    isreal_259353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1381, 11), np_259352, 'isreal')
    # Calling isreal(args, kwargs) (line 1381)
    isreal_call_result_259356 = invoke(stypy.reporting.localization.Localization(__file__, 1381, 11), isreal_259353, *[p1_259354], **kwargs_259355)
    
    
    
    # Call to sum(...): (line 1381)
    # Processing the call keyword arguments (line 1381)
    kwargs_259363 = {}
    
    # Call to isreal(...): (line 1381)
    # Processing the call arguments (line 1381)
    # Getting the type of 'p' (line 1381)
    p_259359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 39), 'p', False)
    # Processing the call keyword arguments (line 1381)
    kwargs_259360 = {}
    # Getting the type of 'np' (line 1381)
    np_259357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 29), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1381)
    isreal_259358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1381, 29), np_259357, 'isreal')
    # Calling isreal(args, kwargs) (line 1381)
    isreal_call_result_259361 = invoke(stypy.reporting.localization.Localization(__file__, 1381, 29), isreal_259358, *[p_259359], **kwargs_259360)
    
    # Obtaining the member 'sum' of a type (line 1381)
    sum_259362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1381, 29), isreal_call_result_259361, 'sum')
    # Calling sum(args, kwargs) (line 1381)
    sum_call_result_259364 = invoke(stypy.reporting.localization.Localization(__file__, 1381, 29), sum_259362, *[], **kwargs_259363)
    
    int_259365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 51), 'int')
    # Applying the binary operator '==' (line 1381)
    result_eq_259366 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 29), '==', sum_call_result_259364, int_259365)
    
    # Applying the binary operator 'and' (line 1381)
    result_and_keyword_259367 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 11), 'and', isreal_call_result_259356, result_eq_259366)
    
    # Testing the type of an if condition (line 1381)
    if_condition_259368 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1381, 8), result_and_keyword_259367)
    # Assigning a type to the variable 'if_condition_259368' (line 1381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'if_condition_259368', if_condition_259368)
    # SSA begins for if statement (line 1381)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1383):
    
    # Assigning a Call to a Name (line 1383):
    
    # Call to _nearest_real_complex_idx(...): (line 1383)
    # Processing the call arguments (line 1383)
    # Getting the type of 'z' (line 1383)
    z_259370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 47), 'z', False)
    # Getting the type of 'p1' (line 1383)
    p1_259371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 50), 'p1', False)
    str_259372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, 54), 'str', 'real')
    # Processing the call keyword arguments (line 1383)
    kwargs_259373 = {}
    # Getting the type of '_nearest_real_complex_idx' (line 1383)
    _nearest_real_complex_idx_259369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 21), '_nearest_real_complex_idx', False)
    # Calling _nearest_real_complex_idx(args, kwargs) (line 1383)
    _nearest_real_complex_idx_call_result_259374 = invoke(stypy.reporting.localization.Localization(__file__, 1383, 21), _nearest_real_complex_idx_259369, *[z_259370, p1_259371, str_259372], **kwargs_259373)
    
    # Assigning a type to the variable 'z1_idx' (line 1383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 12), 'z1_idx', _nearest_real_complex_idx_call_result_259374)
    
    # Assigning a Subscript to a Name (line 1384):
    
    # Assigning a Subscript to a Name (line 1384):
    
    # Obtaining the type of the subscript
    # Getting the type of 'z1_idx' (line 1384)
    z1_idx_259375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 19), 'z1_idx')
    # Getting the type of 'z' (line 1384)
    z_259376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 17), 'z')
    # Obtaining the member '__getitem__' of a type (line 1384)
    getitem___259377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 17), z_259376, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1384)
    subscript_call_result_259378 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 17), getitem___259377, z1_idx_259375)
    
    # Assigning a type to the variable 'z1' (line 1384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 12), 'z1', subscript_call_result_259378)
    
    # Assigning a Call to a Name (line 1385):
    
    # Assigning a Call to a Name (line 1385):
    
    # Call to delete(...): (line 1385)
    # Processing the call arguments (line 1385)
    # Getting the type of 'z' (line 1385)
    z_259381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 26), 'z', False)
    # Getting the type of 'z1_idx' (line 1385)
    z1_idx_259382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 29), 'z1_idx', False)
    # Processing the call keyword arguments (line 1385)
    kwargs_259383 = {}
    # Getting the type of 'np' (line 1385)
    np_259379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 16), 'np', False)
    # Obtaining the member 'delete' of a type (line 1385)
    delete_259380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1385, 16), np_259379, 'delete')
    # Calling delete(args, kwargs) (line 1385)
    delete_call_result_259384 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 16), delete_259380, *[z_259381, z1_idx_259382], **kwargs_259383)
    
    # Assigning a type to the variable 'z' (line 1385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1385, 12), 'z', delete_call_result_259384)
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Num to a Name (line 1386):
    int_259385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1386, 22), 'int')
    # Assigning a type to the variable 'z2' (line 1386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 17), 'z2', int_259385)
    
    # Assigning a Name to a Name (line 1386):
    # Getting the type of 'z2' (line 1386)
    z2_259386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 17), 'z2')
    # Assigning a type to the variable 'p2' (line 1386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 12), 'p2', z2_259386)
    # SSA branch for the else part of an if statement (line 1381)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    
    # Call to isreal(...): (line 1388)
    # Processing the call arguments (line 1388)
    # Getting the type of 'p1' (line 1388)
    p1_259389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 29), 'p1', False)
    # Processing the call keyword arguments (line 1388)
    kwargs_259390 = {}
    # Getting the type of 'np' (line 1388)
    np_259387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 19), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1388)
    isreal_259388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 19), np_259387, 'isreal')
    # Calling isreal(args, kwargs) (line 1388)
    isreal_call_result_259391 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 19), isreal_259388, *[p1_259389], **kwargs_259390)
    
    # Applying the 'not' unary operator (line 1388)
    result_not__259392 = python_operator(stypy.reporting.localization.Localization(__file__, 1388, 15), 'not', isreal_call_result_259391)
    
    
    
    # Call to sum(...): (line 1388)
    # Processing the call keyword arguments (line 1388)
    kwargs_259399 = {}
    
    # Call to isreal(...): (line 1388)
    # Processing the call arguments (line 1388)
    # Getting the type of 'z' (line 1388)
    z_259395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 47), 'z', False)
    # Processing the call keyword arguments (line 1388)
    kwargs_259396 = {}
    # Getting the type of 'np' (line 1388)
    np_259393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 37), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1388)
    isreal_259394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 37), np_259393, 'isreal')
    # Calling isreal(args, kwargs) (line 1388)
    isreal_call_result_259397 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 37), isreal_259394, *[z_259395], **kwargs_259396)
    
    # Obtaining the member 'sum' of a type (line 1388)
    sum_259398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1388, 37), isreal_call_result_259397, 'sum')
    # Calling sum(args, kwargs) (line 1388)
    sum_call_result_259400 = invoke(stypy.reporting.localization.Localization(__file__, 1388, 37), sum_259398, *[], **kwargs_259399)
    
    int_259401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 59), 'int')
    # Applying the binary operator '==' (line 1388)
    result_eq_259402 = python_operator(stypy.reporting.localization.Localization(__file__, 1388, 37), '==', sum_call_result_259400, int_259401)
    
    # Applying the binary operator 'and' (line 1388)
    result_and_keyword_259403 = python_operator(stypy.reporting.localization.Localization(__file__, 1388, 15), 'and', result_not__259392, result_eq_259402)
    
    # Testing the type of an if condition (line 1388)
    if_condition_259404 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1388, 12), result_and_keyword_259403)
    # Assigning a type to the variable 'if_condition_259404' (line 1388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 12), 'if_condition_259404', if_condition_259404)
    # SSA begins for if statement (line 1388)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1391):
    
    # Assigning a Call to a Name (line 1391):
    
    # Call to _nearest_real_complex_idx(...): (line 1391)
    # Processing the call arguments (line 1391)
    # Getting the type of 'z' (line 1391)
    z_259406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 51), 'z', False)
    # Getting the type of 'p1' (line 1391)
    p1_259407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 54), 'p1', False)
    str_259408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1391, 58), 'str', 'complex')
    # Processing the call keyword arguments (line 1391)
    kwargs_259409 = {}
    # Getting the type of '_nearest_real_complex_idx' (line 1391)
    _nearest_real_complex_idx_259405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 25), '_nearest_real_complex_idx', False)
    # Calling _nearest_real_complex_idx(args, kwargs) (line 1391)
    _nearest_real_complex_idx_call_result_259410 = invoke(stypy.reporting.localization.Localization(__file__, 1391, 25), _nearest_real_complex_idx_259405, *[z_259406, p1_259407, str_259408], **kwargs_259409)
    
    # Assigning a type to the variable 'z1_idx' (line 1391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1391, 16), 'z1_idx', _nearest_real_complex_idx_call_result_259410)
    # Evaluating assert statement condition
    
    
    # Call to isreal(...): (line 1392)
    # Processing the call arguments (line 1392)
    
    # Obtaining the type of the subscript
    # Getting the type of 'z1_idx' (line 1392)
    z1_idx_259413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 39), 'z1_idx', False)
    # Getting the type of 'z' (line 1392)
    z_259414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 37), 'z', False)
    # Obtaining the member '__getitem__' of a type (line 1392)
    getitem___259415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 37), z_259414, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1392)
    subscript_call_result_259416 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 37), getitem___259415, z1_idx_259413)
    
    # Processing the call keyword arguments (line 1392)
    kwargs_259417 = {}
    # Getting the type of 'np' (line 1392)
    np_259411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 27), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1392)
    isreal_259412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 27), np_259411, 'isreal')
    # Calling isreal(args, kwargs) (line 1392)
    isreal_call_result_259418 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 27), isreal_259412, *[subscript_call_result_259416], **kwargs_259417)
    
    # Applying the 'not' unary operator (line 1392)
    result_not__259419 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 23), 'not', isreal_call_result_259418)
    
    # SSA branch for the else part of an if statement (line 1388)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1395):
    
    # Assigning a Call to a Name (line 1395):
    
    # Call to argmin(...): (line 1395)
    # Processing the call arguments (line 1395)
    
    # Call to abs(...): (line 1395)
    # Processing the call arguments (line 1395)
    # Getting the type of 'p1' (line 1395)
    p1_259424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 42), 'p1', False)
    # Getting the type of 'z' (line 1395)
    z_259425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 47), 'z', False)
    # Applying the binary operator '-' (line 1395)
    result_sub_259426 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 42), '-', p1_259424, z_259425)
    
    # Processing the call keyword arguments (line 1395)
    kwargs_259427 = {}
    # Getting the type of 'np' (line 1395)
    np_259422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 35), 'np', False)
    # Obtaining the member 'abs' of a type (line 1395)
    abs_259423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 35), np_259422, 'abs')
    # Calling abs(args, kwargs) (line 1395)
    abs_call_result_259428 = invoke(stypy.reporting.localization.Localization(__file__, 1395, 35), abs_259423, *[result_sub_259426], **kwargs_259427)
    
    # Processing the call keyword arguments (line 1395)
    kwargs_259429 = {}
    # Getting the type of 'np' (line 1395)
    np_259420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 25), 'np', False)
    # Obtaining the member 'argmin' of a type (line 1395)
    argmin_259421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 25), np_259420, 'argmin')
    # Calling argmin(args, kwargs) (line 1395)
    argmin_call_result_259430 = invoke(stypy.reporting.localization.Localization(__file__, 1395, 25), argmin_259421, *[abs_call_result_259428], **kwargs_259429)
    
    # Assigning a type to the variable 'z1_idx' (line 1395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 16), 'z1_idx', argmin_call_result_259430)
    # SSA join for if statement (line 1388)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1396):
    
    # Assigning a Subscript to a Name (line 1396):
    
    # Obtaining the type of the subscript
    # Getting the type of 'z1_idx' (line 1396)
    z1_idx_259431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 19), 'z1_idx')
    # Getting the type of 'z' (line 1396)
    z_259432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 17), 'z')
    # Obtaining the member '__getitem__' of a type (line 1396)
    getitem___259433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1396, 17), z_259432, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1396)
    subscript_call_result_259434 = invoke(stypy.reporting.localization.Localization(__file__, 1396, 17), getitem___259433, z1_idx_259431)
    
    # Assigning a type to the variable 'z1' (line 1396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1396, 12), 'z1', subscript_call_result_259434)
    
    # Assigning a Call to a Name (line 1397):
    
    # Assigning a Call to a Name (line 1397):
    
    # Call to delete(...): (line 1397)
    # Processing the call arguments (line 1397)
    # Getting the type of 'z' (line 1397)
    z_259437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 26), 'z', False)
    # Getting the type of 'z1_idx' (line 1397)
    z1_idx_259438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 29), 'z1_idx', False)
    # Processing the call keyword arguments (line 1397)
    kwargs_259439 = {}
    # Getting the type of 'np' (line 1397)
    np_259435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 16), 'np', False)
    # Obtaining the member 'delete' of a type (line 1397)
    delete_259436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 16), np_259435, 'delete')
    # Calling delete(args, kwargs) (line 1397)
    delete_call_result_259440 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 16), delete_259436, *[z_259437, z1_idx_259438], **kwargs_259439)
    
    # Assigning a type to the variable 'z' (line 1397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'z', delete_call_result_259440)
    
    
    
    # Call to isreal(...): (line 1400)
    # Processing the call arguments (line 1400)
    # Getting the type of 'p1' (line 1400)
    p1_259443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 29), 'p1', False)
    # Processing the call keyword arguments (line 1400)
    kwargs_259444 = {}
    # Getting the type of 'np' (line 1400)
    np_259441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 19), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1400)
    isreal_259442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 19), np_259441, 'isreal')
    # Calling isreal(args, kwargs) (line 1400)
    isreal_call_result_259445 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 19), isreal_259442, *[p1_259443], **kwargs_259444)
    
    # Applying the 'not' unary operator (line 1400)
    result_not__259446 = python_operator(stypy.reporting.localization.Localization(__file__, 1400, 15), 'not', isreal_call_result_259445)
    
    # Testing the type of an if condition (line 1400)
    if_condition_259447 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1400, 12), result_not__259446)
    # Assigning a type to the variable 'if_condition_259447' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 12), 'if_condition_259447', if_condition_259447)
    # SSA begins for if statement (line 1400)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to isreal(...): (line 1401)
    # Processing the call arguments (line 1401)
    # Getting the type of 'z1' (line 1401)
    z1_259450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 33), 'z1', False)
    # Processing the call keyword arguments (line 1401)
    kwargs_259451 = {}
    # Getting the type of 'np' (line 1401)
    np_259448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 23), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1401)
    isreal_259449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 23), np_259448, 'isreal')
    # Calling isreal(args, kwargs) (line 1401)
    isreal_call_result_259452 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 23), isreal_259449, *[z1_259450], **kwargs_259451)
    
    # Applying the 'not' unary operator (line 1401)
    result_not__259453 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 19), 'not', isreal_call_result_259452)
    
    # Testing the type of an if condition (line 1401)
    if_condition_259454 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1401, 16), result_not__259453)
    # Assigning a type to the variable 'if_condition_259454' (line 1401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1401, 16), 'if_condition_259454', if_condition_259454)
    # SSA begins for if statement (line 1401)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1402):
    
    # Assigning a Call to a Name (line 1402):
    
    # Call to conj(...): (line 1402)
    # Processing the call keyword arguments (line 1402)
    kwargs_259457 = {}
    # Getting the type of 'p1' (line 1402)
    p1_259455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 25), 'p1', False)
    # Obtaining the member 'conj' of a type (line 1402)
    conj_259456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1402, 25), p1_259455, 'conj')
    # Calling conj(args, kwargs) (line 1402)
    conj_call_result_259458 = invoke(stypy.reporting.localization.Localization(__file__, 1402, 25), conj_259456, *[], **kwargs_259457)
    
    # Assigning a type to the variable 'p2' (line 1402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1402, 20), 'p2', conj_call_result_259458)
    
    # Assigning a Call to a Name (line 1403):
    
    # Assigning a Call to a Name (line 1403):
    
    # Call to conj(...): (line 1403)
    # Processing the call keyword arguments (line 1403)
    kwargs_259461 = {}
    # Getting the type of 'z1' (line 1403)
    z1_259459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 25), 'z1', False)
    # Obtaining the member 'conj' of a type (line 1403)
    conj_259460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1403, 25), z1_259459, 'conj')
    # Calling conj(args, kwargs) (line 1403)
    conj_call_result_259462 = invoke(stypy.reporting.localization.Localization(__file__, 1403, 25), conj_259460, *[], **kwargs_259461)
    
    # Assigning a type to the variable 'z2' (line 1403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 20), 'z2', conj_call_result_259462)
    # SSA branch for the else part of an if statement (line 1401)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1405):
    
    # Assigning a Call to a Name (line 1405):
    
    # Call to conj(...): (line 1405)
    # Processing the call keyword arguments (line 1405)
    kwargs_259465 = {}
    # Getting the type of 'p1' (line 1405)
    p1_259463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 25), 'p1', False)
    # Obtaining the member 'conj' of a type (line 1405)
    conj_259464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 25), p1_259463, 'conj')
    # Calling conj(args, kwargs) (line 1405)
    conj_call_result_259466 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 25), conj_259464, *[], **kwargs_259465)
    
    # Assigning a type to the variable 'p2' (line 1405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 20), 'p2', conj_call_result_259466)
    
    # Assigning a Call to a Name (line 1406):
    
    # Assigning a Call to a Name (line 1406):
    
    # Call to _nearest_real_complex_idx(...): (line 1406)
    # Processing the call arguments (line 1406)
    # Getting the type of 'z' (line 1406)
    z_259468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 55), 'z', False)
    # Getting the type of 'p1' (line 1406)
    p1_259469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 58), 'p1', False)
    str_259470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1406, 62), 'str', 'real')
    # Processing the call keyword arguments (line 1406)
    kwargs_259471 = {}
    # Getting the type of '_nearest_real_complex_idx' (line 1406)
    _nearest_real_complex_idx_259467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 29), '_nearest_real_complex_idx', False)
    # Calling _nearest_real_complex_idx(args, kwargs) (line 1406)
    _nearest_real_complex_idx_call_result_259472 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 29), _nearest_real_complex_idx_259467, *[z_259468, p1_259469, str_259470], **kwargs_259471)
    
    # Assigning a type to the variable 'z2_idx' (line 1406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 20), 'z2_idx', _nearest_real_complex_idx_call_result_259472)
    
    # Assigning a Subscript to a Name (line 1407):
    
    # Assigning a Subscript to a Name (line 1407):
    
    # Obtaining the type of the subscript
    # Getting the type of 'z2_idx' (line 1407)
    z2_idx_259473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 27), 'z2_idx')
    # Getting the type of 'z' (line 1407)
    z_259474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 25), 'z')
    # Obtaining the member '__getitem__' of a type (line 1407)
    getitem___259475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 25), z_259474, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1407)
    subscript_call_result_259476 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 25), getitem___259475, z2_idx_259473)
    
    # Assigning a type to the variable 'z2' (line 1407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 20), 'z2', subscript_call_result_259476)
    # Evaluating assert statement condition
    
    # Call to isreal(...): (line 1408)
    # Processing the call arguments (line 1408)
    # Getting the type of 'z2' (line 1408)
    z2_259479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 37), 'z2', False)
    # Processing the call keyword arguments (line 1408)
    kwargs_259480 = {}
    # Getting the type of 'np' (line 1408)
    np_259477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 27), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1408)
    isreal_259478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 27), np_259477, 'isreal')
    # Calling isreal(args, kwargs) (line 1408)
    isreal_call_result_259481 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 27), isreal_259478, *[z2_259479], **kwargs_259480)
    
    
    # Assigning a Call to a Name (line 1409):
    
    # Assigning a Call to a Name (line 1409):
    
    # Call to delete(...): (line 1409)
    # Processing the call arguments (line 1409)
    # Getting the type of 'z' (line 1409)
    z_259484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 34), 'z', False)
    # Getting the type of 'z2_idx' (line 1409)
    z2_idx_259485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 37), 'z2_idx', False)
    # Processing the call keyword arguments (line 1409)
    kwargs_259486 = {}
    # Getting the type of 'np' (line 1409)
    np_259482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 24), 'np', False)
    # Obtaining the member 'delete' of a type (line 1409)
    delete_259483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 24), np_259482, 'delete')
    # Calling delete(args, kwargs) (line 1409)
    delete_call_result_259487 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 24), delete_259483, *[z_259484, z2_idx_259485], **kwargs_259486)
    
    # Assigning a type to the variable 'z' (line 1409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 20), 'z', delete_call_result_259487)
    # SSA join for if statement (line 1401)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1400)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to isreal(...): (line 1411)
    # Processing the call arguments (line 1411)
    # Getting the type of 'z1' (line 1411)
    z1_259490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 33), 'z1', False)
    # Processing the call keyword arguments (line 1411)
    kwargs_259491 = {}
    # Getting the type of 'np' (line 1411)
    np_259488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 23), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1411)
    isreal_259489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 23), np_259488, 'isreal')
    # Calling isreal(args, kwargs) (line 1411)
    isreal_call_result_259492 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 23), isreal_259489, *[z1_259490], **kwargs_259491)
    
    # Applying the 'not' unary operator (line 1411)
    result_not__259493 = python_operator(stypy.reporting.localization.Localization(__file__, 1411, 19), 'not', isreal_call_result_259492)
    
    # Testing the type of an if condition (line 1411)
    if_condition_259494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1411, 16), result_not__259493)
    # Assigning a type to the variable 'if_condition_259494' (line 1411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 16), 'if_condition_259494', if_condition_259494)
    # SSA begins for if statement (line 1411)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1412):
    
    # Assigning a Call to a Name (line 1412):
    
    # Call to conj(...): (line 1412)
    # Processing the call keyword arguments (line 1412)
    kwargs_259497 = {}
    # Getting the type of 'z1' (line 1412)
    z1_259495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 25), 'z1', False)
    # Obtaining the member 'conj' of a type (line 1412)
    conj_259496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1412, 25), z1_259495, 'conj')
    # Calling conj(args, kwargs) (line 1412)
    conj_call_result_259498 = invoke(stypy.reporting.localization.Localization(__file__, 1412, 25), conj_259496, *[], **kwargs_259497)
    
    # Assigning a type to the variable 'z2' (line 1412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 20), 'z2', conj_call_result_259498)
    
    # Assigning a Call to a Name (line 1413):
    
    # Assigning a Call to a Name (line 1413):
    
    # Call to _nearest_real_complex_idx(...): (line 1413)
    # Processing the call arguments (line 1413)
    # Getting the type of 'p' (line 1413)
    p_259500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 55), 'p', False)
    # Getting the type of 'z1' (line 1413)
    z1_259501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 58), 'z1', False)
    str_259502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 62), 'str', 'real')
    # Processing the call keyword arguments (line 1413)
    kwargs_259503 = {}
    # Getting the type of '_nearest_real_complex_idx' (line 1413)
    _nearest_real_complex_idx_259499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 29), '_nearest_real_complex_idx', False)
    # Calling _nearest_real_complex_idx(args, kwargs) (line 1413)
    _nearest_real_complex_idx_call_result_259504 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 29), _nearest_real_complex_idx_259499, *[p_259500, z1_259501, str_259502], **kwargs_259503)
    
    # Assigning a type to the variable 'p2_idx' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 20), 'p2_idx', _nearest_real_complex_idx_call_result_259504)
    
    # Assigning a Subscript to a Name (line 1414):
    
    # Assigning a Subscript to a Name (line 1414):
    
    # Obtaining the type of the subscript
    # Getting the type of 'p2_idx' (line 1414)
    p2_idx_259505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 27), 'p2_idx')
    # Getting the type of 'p' (line 1414)
    p_259506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 25), 'p')
    # Obtaining the member '__getitem__' of a type (line 1414)
    getitem___259507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 25), p_259506, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1414)
    subscript_call_result_259508 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 25), getitem___259507, p2_idx_259505)
    
    # Assigning a type to the variable 'p2' (line 1414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1414, 20), 'p2', subscript_call_result_259508)
    # Evaluating assert statement condition
    
    # Call to isreal(...): (line 1415)
    # Processing the call arguments (line 1415)
    # Getting the type of 'p2' (line 1415)
    p2_259511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 37), 'p2', False)
    # Processing the call keyword arguments (line 1415)
    kwargs_259512 = {}
    # Getting the type of 'np' (line 1415)
    np_259509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 27), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1415)
    isreal_259510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1415, 27), np_259509, 'isreal')
    # Calling isreal(args, kwargs) (line 1415)
    isreal_call_result_259513 = invoke(stypy.reporting.localization.Localization(__file__, 1415, 27), isreal_259510, *[p2_259511], **kwargs_259512)
    
    # SSA branch for the else part of an if statement (line 1411)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 1418):
    
    # Assigning a Subscript to a Name (line 1418):
    
    # Obtaining the type of the subscript
    int_259514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 49), 'int')
    
    # Call to where(...): (line 1418)
    # Processing the call arguments (line 1418)
    
    # Call to isreal(...): (line 1418)
    # Processing the call arguments (line 1418)
    # Getting the type of 'p' (line 1418)
    p_259519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 45), 'p', False)
    # Processing the call keyword arguments (line 1418)
    kwargs_259520 = {}
    # Getting the type of 'np' (line 1418)
    np_259517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 35), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1418)
    isreal_259518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 35), np_259517, 'isreal')
    # Calling isreal(args, kwargs) (line 1418)
    isreal_call_result_259521 = invoke(stypy.reporting.localization.Localization(__file__, 1418, 35), isreal_259518, *[p_259519], **kwargs_259520)
    
    # Processing the call keyword arguments (line 1418)
    kwargs_259522 = {}
    # Getting the type of 'np' (line 1418)
    np_259515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 26), 'np', False)
    # Obtaining the member 'where' of a type (line 1418)
    where_259516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 26), np_259515, 'where')
    # Calling where(args, kwargs) (line 1418)
    where_call_result_259523 = invoke(stypy.reporting.localization.Localization(__file__, 1418, 26), where_259516, *[isreal_call_result_259521], **kwargs_259522)
    
    # Obtaining the member '__getitem__' of a type (line 1418)
    getitem___259524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1418, 26), where_call_result_259523, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1418)
    subscript_call_result_259525 = invoke(stypy.reporting.localization.Localization(__file__, 1418, 26), getitem___259524, int_259514)
    
    # Assigning a type to the variable 'idx' (line 1418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 20), 'idx', subscript_call_result_259525)
    # Evaluating assert statement condition
    
    
    # Call to len(...): (line 1419)
    # Processing the call arguments (line 1419)
    # Getting the type of 'idx' (line 1419)
    idx_259527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 31), 'idx', False)
    # Processing the call keyword arguments (line 1419)
    kwargs_259528 = {}
    # Getting the type of 'len' (line 1419)
    len_259526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 27), 'len', False)
    # Calling len(args, kwargs) (line 1419)
    len_call_result_259529 = invoke(stypy.reporting.localization.Localization(__file__, 1419, 27), len_259526, *[idx_259527], **kwargs_259528)
    
    int_259530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, 38), 'int')
    # Applying the binary operator '>' (line 1419)
    result_gt_259531 = python_operator(stypy.reporting.localization.Localization(__file__, 1419, 27), '>', len_call_result_259529, int_259530)
    
    
    # Assigning a Subscript to a Name (line 1420):
    
    # Assigning a Subscript to a Name (line 1420):
    
    # Obtaining the type of the subscript
    
    # Call to argmin(...): (line 1420)
    # Processing the call arguments (line 1420)
    
    # Call to abs(...): (line 1420)
    # Processing the call arguments (line 1420)
    
    # Call to abs(...): (line 1420)
    # Processing the call arguments (line 1420)
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1420)
    idx_259538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 59), 'idx', False)
    # Getting the type of 'p' (line 1420)
    p_259539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 57), 'p', False)
    # Obtaining the member '__getitem__' of a type (line 1420)
    getitem___259540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 57), p_259539, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1420)
    subscript_call_result_259541 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 57), getitem___259540, idx_259538)
    
    # Processing the call keyword arguments (line 1420)
    kwargs_259542 = {}
    # Getting the type of 'np' (line 1420)
    np_259536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 50), 'np', False)
    # Obtaining the member 'abs' of a type (line 1420)
    abs_259537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 50), np_259536, 'abs')
    # Calling abs(args, kwargs) (line 1420)
    abs_call_result_259543 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 50), abs_259537, *[subscript_call_result_259541], **kwargs_259542)
    
    int_259544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, 67), 'int')
    # Applying the binary operator '-' (line 1420)
    result_sub_259545 = python_operator(stypy.reporting.localization.Localization(__file__, 1420, 50), '-', abs_call_result_259543, int_259544)
    
    # Processing the call keyword arguments (line 1420)
    kwargs_259546 = {}
    # Getting the type of 'np' (line 1420)
    np_259534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 43), 'np', False)
    # Obtaining the member 'abs' of a type (line 1420)
    abs_259535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 43), np_259534, 'abs')
    # Calling abs(args, kwargs) (line 1420)
    abs_call_result_259547 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 43), abs_259535, *[result_sub_259545], **kwargs_259546)
    
    # Processing the call keyword arguments (line 1420)
    kwargs_259548 = {}
    # Getting the type of 'np' (line 1420)
    np_259532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 33), 'np', False)
    # Obtaining the member 'argmin' of a type (line 1420)
    argmin_259533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 33), np_259532, 'argmin')
    # Calling argmin(args, kwargs) (line 1420)
    argmin_call_result_259549 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 33), argmin_259533, *[abs_call_result_259547], **kwargs_259548)
    
    # Getting the type of 'idx' (line 1420)
    idx_259550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 29), 'idx')
    # Obtaining the member '__getitem__' of a type (line 1420)
    getitem___259551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 29), idx_259550, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1420)
    subscript_call_result_259552 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 29), getitem___259551, argmin_call_result_259549)
    
    # Assigning a type to the variable 'p2_idx' (line 1420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1420, 20), 'p2_idx', subscript_call_result_259552)
    
    # Assigning a Subscript to a Name (line 1421):
    
    # Assigning a Subscript to a Name (line 1421):
    
    # Obtaining the type of the subscript
    # Getting the type of 'p2_idx' (line 1421)
    p2_idx_259553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 27), 'p2_idx')
    # Getting the type of 'p' (line 1421)
    p_259554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 25), 'p')
    # Obtaining the member '__getitem__' of a type (line 1421)
    getitem___259555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 25), p_259554, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1421)
    subscript_call_result_259556 = invoke(stypy.reporting.localization.Localization(__file__, 1421, 25), getitem___259555, p2_idx_259553)
    
    # Assigning a type to the variable 'p2' (line 1421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 20), 'p2', subscript_call_result_259556)
    # Evaluating assert statement condition
    
    # Call to isreal(...): (line 1423)
    # Processing the call arguments (line 1423)
    # Getting the type of 'p2' (line 1423)
    p2_259559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 37), 'p2', False)
    # Processing the call keyword arguments (line 1423)
    kwargs_259560 = {}
    # Getting the type of 'np' (line 1423)
    np_259557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 27), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1423)
    isreal_259558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1423, 27), np_259557, 'isreal')
    # Calling isreal(args, kwargs) (line 1423)
    isreal_call_result_259561 = invoke(stypy.reporting.localization.Localization(__file__, 1423, 27), isreal_259558, *[p2_259559], **kwargs_259560)
    
    
    # Assigning a Call to a Name (line 1424):
    
    # Assigning a Call to a Name (line 1424):
    
    # Call to _nearest_real_complex_idx(...): (line 1424)
    # Processing the call arguments (line 1424)
    # Getting the type of 'z' (line 1424)
    z_259563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 55), 'z', False)
    # Getting the type of 'p2' (line 1424)
    p2_259564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 58), 'p2', False)
    str_259565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1424, 62), 'str', 'real')
    # Processing the call keyword arguments (line 1424)
    kwargs_259566 = {}
    # Getting the type of '_nearest_real_complex_idx' (line 1424)
    _nearest_real_complex_idx_259562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 29), '_nearest_real_complex_idx', False)
    # Calling _nearest_real_complex_idx(args, kwargs) (line 1424)
    _nearest_real_complex_idx_call_result_259567 = invoke(stypy.reporting.localization.Localization(__file__, 1424, 29), _nearest_real_complex_idx_259562, *[z_259563, p2_259564, str_259565], **kwargs_259566)
    
    # Assigning a type to the variable 'z2_idx' (line 1424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1424, 20), 'z2_idx', _nearest_real_complex_idx_call_result_259567)
    
    # Assigning a Subscript to a Name (line 1425):
    
    # Assigning a Subscript to a Name (line 1425):
    
    # Obtaining the type of the subscript
    # Getting the type of 'z2_idx' (line 1425)
    z2_idx_259568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 27), 'z2_idx')
    # Getting the type of 'z' (line 1425)
    z_259569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 25), 'z')
    # Obtaining the member '__getitem__' of a type (line 1425)
    getitem___259570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 25), z_259569, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1425)
    subscript_call_result_259571 = invoke(stypy.reporting.localization.Localization(__file__, 1425, 25), getitem___259570, z2_idx_259568)
    
    # Assigning a type to the variable 'z2' (line 1425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 20), 'z2', subscript_call_result_259571)
    # Evaluating assert statement condition
    
    # Call to isreal(...): (line 1426)
    # Processing the call arguments (line 1426)
    # Getting the type of 'z2' (line 1426)
    z2_259574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 37), 'z2', False)
    # Processing the call keyword arguments (line 1426)
    kwargs_259575 = {}
    # Getting the type of 'np' (line 1426)
    np_259572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 27), 'np', False)
    # Obtaining the member 'isreal' of a type (line 1426)
    isreal_259573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 27), np_259572, 'isreal')
    # Calling isreal(args, kwargs) (line 1426)
    isreal_call_result_259576 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 27), isreal_259573, *[z2_259574], **kwargs_259575)
    
    
    # Assigning a Call to a Name (line 1427):
    
    # Assigning a Call to a Name (line 1427):
    
    # Call to delete(...): (line 1427)
    # Processing the call arguments (line 1427)
    # Getting the type of 'z' (line 1427)
    z_259579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 34), 'z', False)
    # Getting the type of 'z2_idx' (line 1427)
    z2_idx_259580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 37), 'z2_idx', False)
    # Processing the call keyword arguments (line 1427)
    kwargs_259581 = {}
    # Getting the type of 'np' (line 1427)
    np_259577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1427, 24), 'np', False)
    # Obtaining the member 'delete' of a type (line 1427)
    delete_259578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1427, 24), np_259577, 'delete')
    # Calling delete(args, kwargs) (line 1427)
    delete_call_result_259582 = invoke(stypy.reporting.localization.Localization(__file__, 1427, 24), delete_259578, *[z_259579, z2_idx_259580], **kwargs_259581)
    
    # Assigning a type to the variable 'z' (line 1427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1427, 20), 'z', delete_call_result_259582)
    # SSA join for if statement (line 1411)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1428):
    
    # Assigning a Call to a Name (line 1428):
    
    # Call to delete(...): (line 1428)
    # Processing the call arguments (line 1428)
    # Getting the type of 'p' (line 1428)
    p_259585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 30), 'p', False)
    # Getting the type of 'p2_idx' (line 1428)
    p2_idx_259586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 33), 'p2_idx', False)
    # Processing the call keyword arguments (line 1428)
    kwargs_259587 = {}
    # Getting the type of 'np' (line 1428)
    np_259583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1428, 20), 'np', False)
    # Obtaining the member 'delete' of a type (line 1428)
    delete_259584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1428, 20), np_259583, 'delete')
    # Calling delete(args, kwargs) (line 1428)
    delete_call_result_259588 = invoke(stypy.reporting.localization.Localization(__file__, 1428, 20), delete_259584, *[p_259585, p2_idx_259586], **kwargs_259587)
    
    # Assigning a type to the variable 'p' (line 1428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1428, 16), 'p', delete_call_result_259588)
    # SSA join for if statement (line 1400)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1381)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Subscript (line 1429):
    
    # Assigning a List to a Subscript (line 1429):
    
    # Obtaining an instance of the builtin type 'list' (line 1429)
    list_259589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1429)
    # Adding element type (line 1429)
    # Getting the type of 'p1' (line 1429)
    p1_259590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 21), 'p1')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1429, 20), list_259589, p1_259590)
    # Adding element type (line 1429)
    # Getting the type of 'p2' (line 1429)
    p2_259591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 25), 'p2')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1429, 20), list_259589, p2_259591)
    
    # Getting the type of 'p_sos' (line 1429)
    p_sos_259592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 8), 'p_sos')
    # Getting the type of 'si' (line 1429)
    si_259593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 14), 'si')
    # Storing an element on a container (line 1429)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1429, 8), p_sos_259592, (si_259593, list_259589))
    
    # Assigning a List to a Subscript (line 1430):
    
    # Assigning a List to a Subscript (line 1430):
    
    # Obtaining an instance of the builtin type 'list' (line 1430)
    list_259594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1430)
    # Adding element type (line 1430)
    # Getting the type of 'z1' (line 1430)
    z1_259595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 21), 'z1')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1430, 20), list_259594, z1_259595)
    # Adding element type (line 1430)
    # Getting the type of 'z2' (line 1430)
    z2_259596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 25), 'z2')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1430, 20), list_259594, z2_259596)
    
    # Getting the type of 'z_sos' (line 1430)
    z_sos_259597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 8), 'z_sos')
    # Getting the type of 'si' (line 1430)
    si_259598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 14), 'si')
    # Storing an element on a container (line 1430)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1430, 8), z_sos_259597, (si_259598, list_259594))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Evaluating assert statement condition
    
    
    # Call to len(...): (line 1431)
    # Processing the call arguments (line 1431)
    # Getting the type of 'p' (line 1431)
    p_259600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 15), 'p', False)
    # Processing the call keyword arguments (line 1431)
    kwargs_259601 = {}
    # Getting the type of 'len' (line 1431)
    len_259599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 11), 'len', False)
    # Calling len(args, kwargs) (line 1431)
    len_call_result_259602 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 11), len_259599, *[p_259600], **kwargs_259601)
    
    
    # Call to len(...): (line 1431)
    # Processing the call arguments (line 1431)
    # Getting the type of 'z' (line 1431)
    z_259604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 25), 'z', False)
    # Processing the call keyword arguments (line 1431)
    kwargs_259605 = {}
    # Getting the type of 'len' (line 1431)
    len_259603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 21), 'len', False)
    # Calling len(args, kwargs) (line 1431)
    len_call_result_259606 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 21), len_259603, *[z_259604], **kwargs_259605)
    
    # Applying the binary operator '==' (line 1431)
    result_eq_259607 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 11), '==', len_call_result_259602, len_call_result_259606)
    int_259608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 31), 'int')
    # Applying the binary operator '==' (line 1431)
    result_eq_259609 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 11), '==', len_call_result_259606, int_259608)
    # Applying the binary operator '&' (line 1431)
    result_and__259610 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 11), '&', result_eq_259607, result_eq_259609)
    
    # Deleting a member
    module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 1432, 4), module_type_store, 'p')
    # Deleting a member
    module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 1432, 4), module_type_store, 'z')
    
    # Assigning a Call to a Name (line 1435):
    
    # Assigning a Call to a Name (line 1435):
    
    # Call to reshape(...): (line 1435)
    # Processing the call arguments (line 1435)
    
    # Obtaining the type of the subscript
    int_259613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 31), 'int')
    slice_259614 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1435, 23), None, None, int_259613)
    # Getting the type of 'p_sos' (line 1435)
    p_sos_259615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 23), 'p_sos', False)
    # Obtaining the member '__getitem__' of a type (line 1435)
    getitem___259616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1435, 23), p_sos_259615, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1435)
    subscript_call_result_259617 = invoke(stypy.reporting.localization.Localization(__file__, 1435, 23), getitem___259616, slice_259614)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1435)
    tuple_259618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1435)
    # Adding element type (line 1435)
    # Getting the type of 'n_sections' (line 1435)
    n_sections_259619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 37), 'n_sections', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1435, 37), tuple_259618, n_sections_259619)
    # Adding element type (line 1435)
    int_259620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 49), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1435, 37), tuple_259618, int_259620)
    
    # Processing the call keyword arguments (line 1435)
    kwargs_259621 = {}
    # Getting the type of 'np' (line 1435)
    np_259611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 12), 'np', False)
    # Obtaining the member 'reshape' of a type (line 1435)
    reshape_259612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1435, 12), np_259611, 'reshape')
    # Calling reshape(args, kwargs) (line 1435)
    reshape_call_result_259622 = invoke(stypy.reporting.localization.Localization(__file__, 1435, 12), reshape_259612, *[subscript_call_result_259617, tuple_259618], **kwargs_259621)
    
    # Assigning a type to the variable 'p_sos' (line 1435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 4), 'p_sos', reshape_call_result_259622)
    
    # Assigning a Call to a Name (line 1436):
    
    # Assigning a Call to a Name (line 1436):
    
    # Call to reshape(...): (line 1436)
    # Processing the call arguments (line 1436)
    
    # Obtaining the type of the subscript
    int_259625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 31), 'int')
    slice_259626 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1436, 23), None, None, int_259625)
    # Getting the type of 'z_sos' (line 1436)
    z_sos_259627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 23), 'z_sos', False)
    # Obtaining the member '__getitem__' of a type (line 1436)
    getitem___259628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 23), z_sos_259627, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1436)
    subscript_call_result_259629 = invoke(stypy.reporting.localization.Localization(__file__, 1436, 23), getitem___259628, slice_259626)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1436)
    tuple_259630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1436)
    # Adding element type (line 1436)
    # Getting the type of 'n_sections' (line 1436)
    n_sections_259631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 37), 'n_sections', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1436, 37), tuple_259630, n_sections_259631)
    # Adding element type (line 1436)
    int_259632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 49), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1436, 37), tuple_259630, int_259632)
    
    # Processing the call keyword arguments (line 1436)
    kwargs_259633 = {}
    # Getting the type of 'np' (line 1436)
    np_259623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 12), 'np', False)
    # Obtaining the member 'reshape' of a type (line 1436)
    reshape_259624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 12), np_259623, 'reshape')
    # Calling reshape(args, kwargs) (line 1436)
    reshape_call_result_259634 = invoke(stypy.reporting.localization.Localization(__file__, 1436, 12), reshape_259624, *[subscript_call_result_259629, tuple_259630], **kwargs_259633)
    
    # Assigning a type to the variable 'z_sos' (line 1436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 4), 'z_sos', reshape_call_result_259634)
    
    # Assigning a Call to a Name (line 1437):
    
    # Assigning a Call to a Name (line 1437):
    
    # Call to ones(...): (line 1437)
    # Processing the call arguments (line 1437)
    # Getting the type of 'n_sections' (line 1437)
    n_sections_259637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 20), 'n_sections', False)
    # Processing the call keyword arguments (line 1437)
    kwargs_259638 = {}
    # Getting the type of 'np' (line 1437)
    np_259635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 12), 'np', False)
    # Obtaining the member 'ones' of a type (line 1437)
    ones_259636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 12), np_259635, 'ones')
    # Calling ones(args, kwargs) (line 1437)
    ones_call_result_259639 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 12), ones_259636, *[n_sections_259637], **kwargs_259638)
    
    # Assigning a type to the variable 'gains' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 4), 'gains', ones_call_result_259639)
    
    # Assigning a Name to a Subscript (line 1438):
    
    # Assigning a Name to a Subscript (line 1438):
    # Getting the type of 'k' (line 1438)
    k_259640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 15), 'k')
    # Getting the type of 'gains' (line 1438)
    gains_259641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 4), 'gains')
    int_259642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1438, 10), 'int')
    # Storing an element on a container (line 1438)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1438, 4), gains_259641, (int_259642, k_259640))
    
    
    # Call to range(...): (line 1439)
    # Processing the call arguments (line 1439)
    # Getting the type of 'n_sections' (line 1439)
    n_sections_259644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 20), 'n_sections', False)
    # Processing the call keyword arguments (line 1439)
    kwargs_259645 = {}
    # Getting the type of 'range' (line 1439)
    range_259643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 14), 'range', False)
    # Calling range(args, kwargs) (line 1439)
    range_call_result_259646 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 14), range_259643, *[n_sections_259644], **kwargs_259645)
    
    # Testing the type of a for loop iterable (line 1439)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1439, 4), range_call_result_259646)
    # Getting the type of the for loop variable (line 1439)
    for_loop_var_259647 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1439, 4), range_call_result_259646)
    # Assigning a type to the variable 'si' (line 1439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 4), 'si', for_loop_var_259647)
    # SSA begins for a for statement (line 1439)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1440):
    
    # Assigning a Call to a Name (line 1440):
    
    # Call to zpk2tf(...): (line 1440)
    # Processing the call arguments (line 1440)
    
    # Obtaining the type of the subscript
    # Getting the type of 'si' (line 1440)
    si_259649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 25), 'si', False)
    # Getting the type of 'z_sos' (line 1440)
    z_sos_259650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 19), 'z_sos', False)
    # Obtaining the member '__getitem__' of a type (line 1440)
    getitem___259651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 19), z_sos_259650, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1440)
    subscript_call_result_259652 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 19), getitem___259651, si_259649)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'si' (line 1440)
    si_259653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 36), 'si', False)
    # Getting the type of 'p_sos' (line 1440)
    p_sos_259654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 30), 'p_sos', False)
    # Obtaining the member '__getitem__' of a type (line 1440)
    getitem___259655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 30), p_sos_259654, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1440)
    subscript_call_result_259656 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 30), getitem___259655, si_259653)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'si' (line 1440)
    si_259657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 47), 'si', False)
    # Getting the type of 'gains' (line 1440)
    gains_259658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 41), 'gains', False)
    # Obtaining the member '__getitem__' of a type (line 1440)
    getitem___259659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 41), gains_259658, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1440)
    subscript_call_result_259660 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 41), getitem___259659, si_259657)
    
    # Processing the call keyword arguments (line 1440)
    kwargs_259661 = {}
    # Getting the type of 'zpk2tf' (line 1440)
    zpk2tf_259648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 12), 'zpk2tf', False)
    # Calling zpk2tf(args, kwargs) (line 1440)
    zpk2tf_call_result_259662 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 12), zpk2tf_259648, *[subscript_call_result_259652, subscript_call_result_259656, subscript_call_result_259660], **kwargs_259661)
    
    # Assigning a type to the variable 'x' (line 1440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 8), 'x', zpk2tf_call_result_259662)
    
    # Assigning a Call to a Subscript (line 1441):
    
    # Assigning a Call to a Subscript (line 1441):
    
    # Call to concatenate(...): (line 1441)
    # Processing the call arguments (line 1441)
    # Getting the type of 'x' (line 1441)
    x_259665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 33), 'x', False)
    # Processing the call keyword arguments (line 1441)
    kwargs_259666 = {}
    # Getting the type of 'np' (line 1441)
    np_259663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 18), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 1441)
    concatenate_259664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1441, 18), np_259663, 'concatenate')
    # Calling concatenate(args, kwargs) (line 1441)
    concatenate_call_result_259667 = invoke(stypy.reporting.localization.Localization(__file__, 1441, 18), concatenate_259664, *[x_259665], **kwargs_259666)
    
    # Getting the type of 'sos' (line 1441)
    sos_259668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 8), 'sos')
    # Getting the type of 'si' (line 1441)
    si_259669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 12), 'si')
    # Storing an element on a container (line 1441)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 8), sos_259668, (si_259669, concatenate_call_result_259667))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'sos' (line 1442)
    sos_259670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 11), 'sos')
    # Assigning a type to the variable 'stypy_return_type' (line 1442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 4), 'stypy_return_type', sos_259670)
    
    # ################# End of 'zpk2sos(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'zpk2sos' in the type store
    # Getting the type of 'stypy_return_type' (line 1180)
    stypy_return_type_259671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_259671)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'zpk2sos'
    return stypy_return_type_259671

# Assigning a type to the variable 'zpk2sos' (line 1180)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 0), 'zpk2sos', zpk2sos)

@norecursion
def _align_nums(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_align_nums'
    module_type_store = module_type_store.open_function_context('_align_nums', 1445, 0, False)
    
    # Passed parameters checking function
    _align_nums.stypy_localization = localization
    _align_nums.stypy_type_of_self = None
    _align_nums.stypy_type_store = module_type_store
    _align_nums.stypy_function_name = '_align_nums'
    _align_nums.stypy_param_names_list = ['nums']
    _align_nums.stypy_varargs_param_name = None
    _align_nums.stypy_kwargs_param_name = None
    _align_nums.stypy_call_defaults = defaults
    _align_nums.stypy_call_varargs = varargs
    _align_nums.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_align_nums', ['nums'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_align_nums', localization, ['nums'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_align_nums(...)' code ##################

    str_259672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, (-1)), 'str', "Aligns the shapes of multiple numerators.\n\n    Given an array of numerator coefficient arrays [[a_1, a_2,...,\n    a_n],..., [b_1, b_2,..., b_m]], this function pads shorter numerator\n    arrays with zero's so that all numerators have the same length. Such\n    alignment is necessary for functions like 'tf2ss', which needs the\n    alignment when dealing with SIMO transfer functions.\n\n    Parameters\n    ----------\n    nums: array_like\n        Numerator or list of numerators. Not necessarily with same length.\n\n    Returns\n    -------\n    nums: array\n        The numerator. If `nums` input was a list of numerators then a 2d\n        array with padded zeros for shorter numerators is returned. Otherwise\n        returns ``np.asarray(nums)``.\n    ")
    
    
    # SSA begins for try-except statement (line 1466)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1470):
    
    # Assigning a Call to a Name (line 1470):
    
    # Call to asarray(...): (line 1470)
    # Processing the call arguments (line 1470)
    # Getting the type of 'nums' (line 1470)
    nums_259674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 23), 'nums', False)
    # Processing the call keyword arguments (line 1470)
    kwargs_259675 = {}
    # Getting the type of 'asarray' (line 1470)
    asarray_259673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 15), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1470)
    asarray_call_result_259676 = invoke(stypy.reporting.localization.Localization(__file__, 1470, 15), asarray_259673, *[nums_259674], **kwargs_259675)
    
    # Assigning a type to the variable 'nums' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 8), 'nums', asarray_call_result_259676)
    
    
    
    # Call to issubdtype(...): (line 1472)
    # Processing the call arguments (line 1472)
    # Getting the type of 'nums' (line 1472)
    nums_259679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 29), 'nums', False)
    # Obtaining the member 'dtype' of a type (line 1472)
    dtype_259680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 29), nums_259679, 'dtype')
    # Getting the type of 'np' (line 1472)
    np_259681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 41), 'np', False)
    # Obtaining the member 'number' of a type (line 1472)
    number_259682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 41), np_259681, 'number')
    # Processing the call keyword arguments (line 1472)
    kwargs_259683 = {}
    # Getting the type of 'np' (line 1472)
    np_259677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 15), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 1472)
    issubdtype_259678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 15), np_259677, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 1472)
    issubdtype_call_result_259684 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 15), issubdtype_259678, *[dtype_259680, number_259682], **kwargs_259683)
    
    # Applying the 'not' unary operator (line 1472)
    result_not__259685 = python_operator(stypy.reporting.localization.Localization(__file__, 1472, 11), 'not', issubdtype_call_result_259684)
    
    # Testing the type of an if condition (line 1472)
    if_condition_259686 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1472, 8), result_not__259685)
    # Assigning a type to the variable 'if_condition_259686' (line 1472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 8), 'if_condition_259686', if_condition_259686)
    # SSA begins for if statement (line 1472)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1473)
    # Processing the call arguments (line 1473)
    str_259688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, 29), 'str', 'dtype of numerator is non-numeric')
    # Processing the call keyword arguments (line 1473)
    kwargs_259689 = {}
    # Getting the type of 'ValueError' (line 1473)
    ValueError_259687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1473)
    ValueError_call_result_259690 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 18), ValueError_259687, *[str_259688], **kwargs_259689)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1473, 12), ValueError_call_result_259690, 'raise parameter', BaseException)
    # SSA join for if statement (line 1472)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'nums' (line 1475)
    nums_259691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 15), 'nums')
    # Assigning a type to the variable 'stypy_return_type' (line 1475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1475, 8), 'stypy_return_type', nums_259691)
    # SSA branch for the except part of a try statement (line 1466)
    # SSA branch for the except 'ValueError' branch of a try statement (line 1466)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a ListComp to a Name (line 1478):
    
    # Assigning a ListComp to a Name (line 1478):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'nums' (line 1478)
    nums_259697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 46), 'nums')
    comprehension_259698 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1478, 16), nums_259697)
    # Assigning a type to the variable 'num' (line 1478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 16), 'num', comprehension_259698)
    
    # Call to atleast_1d(...): (line 1478)
    # Processing the call arguments (line 1478)
    # Getting the type of 'num' (line 1478)
    num_259694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 30), 'num', False)
    # Processing the call keyword arguments (line 1478)
    kwargs_259695 = {}
    # Getting the type of 'np' (line 1478)
    np_259692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 16), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 1478)
    atleast_1d_259693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1478, 16), np_259692, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 1478)
    atleast_1d_call_result_259696 = invoke(stypy.reporting.localization.Localization(__file__, 1478, 16), atleast_1d_259693, *[num_259694], **kwargs_259695)
    
    list_259699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1478, 16), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1478, 16), list_259699, atleast_1d_call_result_259696)
    # Assigning a type to the variable 'nums' (line 1478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 8), 'nums', list_259699)
    
    # Assigning a Call to a Name (line 1479):
    
    # Assigning a Call to a Name (line 1479):
    
    # Call to max(...): (line 1479)
    # Processing the call arguments (line 1479)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 1479, 24, True)
    # Calculating comprehension expression
    # Getting the type of 'nums' (line 1479)
    nums_259703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 44), 'nums', False)
    comprehension_259704 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1479, 24), nums_259703)
    # Assigning a type to the variable 'num' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 24), 'num', comprehension_259704)
    # Getting the type of 'num' (line 1479)
    num_259701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 24), 'num', False)
    # Obtaining the member 'size' of a type (line 1479)
    size_259702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 24), num_259701, 'size')
    list_259705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 24), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1479, 24), list_259705, size_259702)
    # Processing the call keyword arguments (line 1479)
    kwargs_259706 = {}
    # Getting the type of 'max' (line 1479)
    max_259700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 20), 'max', False)
    # Calling max(args, kwargs) (line 1479)
    max_call_result_259707 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 20), max_259700, *[list_259705], **kwargs_259706)
    
    # Assigning a type to the variable 'max_width' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 8), 'max_width', max_call_result_259707)
    
    # Assigning a Call to a Name (line 1482):
    
    # Assigning a Call to a Name (line 1482):
    
    # Call to zeros(...): (line 1482)
    # Processing the call arguments (line 1482)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1482)
    tuple_259710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1482)
    # Adding element type (line 1482)
    
    # Call to len(...): (line 1482)
    # Processing the call arguments (line 1482)
    # Getting the type of 'nums' (line 1482)
    nums_259712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 37), 'nums', False)
    # Processing the call keyword arguments (line 1482)
    kwargs_259713 = {}
    # Getting the type of 'len' (line 1482)
    len_259711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 33), 'len', False)
    # Calling len(args, kwargs) (line 1482)
    len_call_result_259714 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 33), len_259711, *[nums_259712], **kwargs_259713)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1482, 33), tuple_259710, len_call_result_259714)
    # Adding element type (line 1482)
    # Getting the type of 'max_width' (line 1482)
    max_width_259715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 44), 'max_width', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1482, 33), tuple_259710, max_width_259715)
    
    # Processing the call keyword arguments (line 1482)
    kwargs_259716 = {}
    # Getting the type of 'np' (line 1482)
    np_259708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 23), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1482)
    zeros_259709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 23), np_259708, 'zeros')
    # Calling zeros(args, kwargs) (line 1482)
    zeros_call_result_259717 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 23), zeros_259709, *[tuple_259710], **kwargs_259716)
    
    # Assigning a type to the variable 'aligned_nums' (line 1482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 8), 'aligned_nums', zeros_call_result_259717)
    
    
    # Call to enumerate(...): (line 1485)
    # Processing the call arguments (line 1485)
    # Getting the type of 'nums' (line 1485)
    nums_259719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 36), 'nums', False)
    # Processing the call keyword arguments (line 1485)
    kwargs_259720 = {}
    # Getting the type of 'enumerate' (line 1485)
    enumerate_259718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 26), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1485)
    enumerate_call_result_259721 = invoke(stypy.reporting.localization.Localization(__file__, 1485, 26), enumerate_259718, *[nums_259719], **kwargs_259720)
    
    # Testing the type of a for loop iterable (line 1485)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1485, 8), enumerate_call_result_259721)
    # Getting the type of the for loop variable (line 1485)
    for_loop_var_259722 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1485, 8), enumerate_call_result_259721)
    # Assigning a type to the variable 'index' (line 1485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 8), 'index', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1485, 8), for_loop_var_259722))
    # Assigning a type to the variable 'num' (line 1485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 8), 'num', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1485, 8), for_loop_var_259722))
    # SSA begins for a for statement (line 1485)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Name to a Subscript (line 1486):
    
    # Assigning a Name to a Subscript (line 1486):
    # Getting the type of 'num' (line 1486)
    num_259723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 46), 'num')
    # Getting the type of 'aligned_nums' (line 1486)
    aligned_nums_259724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 12), 'aligned_nums')
    # Getting the type of 'index' (line 1486)
    index_259725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 25), 'index')
    
    # Getting the type of 'num' (line 1486)
    num_259726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 33), 'num')
    # Obtaining the member 'size' of a type (line 1486)
    size_259727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1486, 33), num_259726, 'size')
    # Applying the 'usub' unary operator (line 1486)
    result___neg___259728 = python_operator(stypy.reporting.localization.Localization(__file__, 1486, 32), 'usub', size_259727)
    
    slice_259729 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1486, 12), result___neg___259728, None, None)
    # Storing an element on a container (line 1486)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1486, 12), aligned_nums_259724, ((index_259725, slice_259729), num_259723))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'aligned_nums' (line 1488)
    aligned_nums_259730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 15), 'aligned_nums')
    # Assigning a type to the variable 'stypy_return_type' (line 1488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 8), 'stypy_return_type', aligned_nums_259730)
    # SSA join for try-except statement (line 1466)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_align_nums(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_align_nums' in the type store
    # Getting the type of 'stypy_return_type' (line 1445)
    stypy_return_type_259731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_259731)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_align_nums'
    return stypy_return_type_259731

# Assigning a type to the variable '_align_nums' (line 1445)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 0), '_align_nums', _align_nums)

@norecursion
def normalize(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'normalize'
    module_type_store = module_type_store.open_function_context('normalize', 1491, 0, False)
    
    # Passed parameters checking function
    normalize.stypy_localization = localization
    normalize.stypy_type_of_self = None
    normalize.stypy_type_store = module_type_store
    normalize.stypy_function_name = 'normalize'
    normalize.stypy_param_names_list = ['b', 'a']
    normalize.stypy_varargs_param_name = None
    normalize.stypy_kwargs_param_name = None
    normalize.stypy_call_defaults = defaults
    normalize.stypy_call_varargs = varargs
    normalize.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'normalize', ['b', 'a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'normalize', localization, ['b', 'a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'normalize(...)' code ##################

    str_259732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1518, (-1)), 'str', 'Normalize numerator/denominator of a continuous-time transfer function.\n\n    If values of `b` are too close to 0, they are removed. In that case, a\n    BadCoefficients warning is emitted.\n\n    Parameters\n    ----------\n    b: array_like\n        Numerator of the transfer function. Can be a 2d array to normalize\n        multiple transfer functions.\n    a: array_like\n        Denominator of the transfer function. At most 1d.\n\n    Returns\n    -------\n    num: array\n        The numerator of the normalized transfer function. At least a 1d\n        array. A 2d-array if the input `num` is a 2d array.\n    den: 1d-array\n        The denominator of the normalized transfer function.\n\n    Notes\n    -----\n    Coefficients for both the numerator and denominator should be specified in\n    descending exponent order (e.g., ``s^2 + 3s + 5`` would be represented as\n    ``[1, 3, 5]``).\n    ')
    
    # Assigning a Tuple to a Tuple (line 1519):
    
    # Assigning a Name to a Name (line 1519):
    # Getting the type of 'b' (line 1519)
    b_259733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 15), 'b')
    # Assigning a type to the variable 'tuple_assignment_257318' (line 1519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 4), 'tuple_assignment_257318', b_259733)
    
    # Assigning a Name to a Name (line 1519):
    # Getting the type of 'a' (line 1519)
    a_259734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 18), 'a')
    # Assigning a type to the variable 'tuple_assignment_257319' (line 1519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 4), 'tuple_assignment_257319', a_259734)
    
    # Assigning a Name to a Name (line 1519):
    # Getting the type of 'tuple_assignment_257318' (line 1519)
    tuple_assignment_257318_259735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 4), 'tuple_assignment_257318')
    # Assigning a type to the variable 'num' (line 1519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 4), 'num', tuple_assignment_257318_259735)
    
    # Assigning a Name to a Name (line 1519):
    # Getting the type of 'tuple_assignment_257319' (line 1519)
    tuple_assignment_257319_259736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 4), 'tuple_assignment_257319')
    # Assigning a type to the variable 'den' (line 1519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 9), 'den', tuple_assignment_257319_259736)
    
    # Assigning a Call to a Name (line 1521):
    
    # Assigning a Call to a Name (line 1521):
    
    # Call to atleast_1d(...): (line 1521)
    # Processing the call arguments (line 1521)
    # Getting the type of 'den' (line 1521)
    den_259739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 24), 'den', False)
    # Processing the call keyword arguments (line 1521)
    kwargs_259740 = {}
    # Getting the type of 'np' (line 1521)
    np_259737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 10), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 1521)
    atleast_1d_259738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1521, 10), np_259737, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 1521)
    atleast_1d_call_result_259741 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 10), atleast_1d_259738, *[den_259739], **kwargs_259740)
    
    # Assigning a type to the variable 'den' (line 1521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1521, 4), 'den', atleast_1d_call_result_259741)
    
    # Assigning a Call to a Name (line 1522):
    
    # Assigning a Call to a Name (line 1522):
    
    # Call to atleast_2d(...): (line 1522)
    # Processing the call arguments (line 1522)
    
    # Call to _align_nums(...): (line 1522)
    # Processing the call arguments (line 1522)
    # Getting the type of 'num' (line 1522)
    num_259745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 36), 'num', False)
    # Processing the call keyword arguments (line 1522)
    kwargs_259746 = {}
    # Getting the type of '_align_nums' (line 1522)
    _align_nums_259744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 24), '_align_nums', False)
    # Calling _align_nums(args, kwargs) (line 1522)
    _align_nums_call_result_259747 = invoke(stypy.reporting.localization.Localization(__file__, 1522, 24), _align_nums_259744, *[num_259745], **kwargs_259746)
    
    # Processing the call keyword arguments (line 1522)
    kwargs_259748 = {}
    # Getting the type of 'np' (line 1522)
    np_259742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 10), 'np', False)
    # Obtaining the member 'atleast_2d' of a type (line 1522)
    atleast_2d_259743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 10), np_259742, 'atleast_2d')
    # Calling atleast_2d(args, kwargs) (line 1522)
    atleast_2d_call_result_259749 = invoke(stypy.reporting.localization.Localization(__file__, 1522, 10), atleast_2d_259743, *[_align_nums_call_result_259747], **kwargs_259748)
    
    # Assigning a type to the variable 'num' (line 1522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1522, 4), 'num', atleast_2d_call_result_259749)
    
    
    # Getting the type of 'den' (line 1524)
    den_259750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 7), 'den')
    # Obtaining the member 'ndim' of a type (line 1524)
    ndim_259751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 7), den_259750, 'ndim')
    int_259752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, 19), 'int')
    # Applying the binary operator '!=' (line 1524)
    result_ne_259753 = python_operator(stypy.reporting.localization.Localization(__file__, 1524, 7), '!=', ndim_259751, int_259752)
    
    # Testing the type of an if condition (line 1524)
    if_condition_259754 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1524, 4), result_ne_259753)
    # Assigning a type to the variable 'if_condition_259754' (line 1524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 4), 'if_condition_259754', if_condition_259754)
    # SSA begins for if statement (line 1524)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1525)
    # Processing the call arguments (line 1525)
    str_259756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 25), 'str', 'Denominator polynomial must be rank-1 array.')
    # Processing the call keyword arguments (line 1525)
    kwargs_259757 = {}
    # Getting the type of 'ValueError' (line 1525)
    ValueError_259755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1525)
    ValueError_call_result_259758 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 14), ValueError_259755, *[str_259756], **kwargs_259757)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1525, 8), ValueError_call_result_259758, 'raise parameter', BaseException)
    # SSA join for if statement (line 1524)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'num' (line 1526)
    num_259759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 7), 'num')
    # Obtaining the member 'ndim' of a type (line 1526)
    ndim_259760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 7), num_259759, 'ndim')
    int_259761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1526, 18), 'int')
    # Applying the binary operator '>' (line 1526)
    result_gt_259762 = python_operator(stypy.reporting.localization.Localization(__file__, 1526, 7), '>', ndim_259760, int_259761)
    
    # Testing the type of an if condition (line 1526)
    if_condition_259763 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1526, 4), result_gt_259762)
    # Assigning a type to the variable 'if_condition_259763' (line 1526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 4), 'if_condition_259763', if_condition_259763)
    # SSA begins for if statement (line 1526)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1527)
    # Processing the call arguments (line 1527)
    str_259765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 25), 'str', 'Numerator polynomial must be rank-1 or rank-2 array.')
    # Processing the call keyword arguments (line 1527)
    kwargs_259766 = {}
    # Getting the type of 'ValueError' (line 1527)
    ValueError_259764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1527)
    ValueError_call_result_259767 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 14), ValueError_259764, *[str_259765], **kwargs_259766)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1527, 8), ValueError_call_result_259767, 'raise parameter', BaseException)
    # SSA join for if statement (line 1526)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to all(...): (line 1529)
    # Processing the call arguments (line 1529)
    
    # Getting the type of 'den' (line 1529)
    den_259770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 14), 'den', False)
    int_259771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1529, 21), 'int')
    # Applying the binary operator '==' (line 1529)
    result_eq_259772 = python_operator(stypy.reporting.localization.Localization(__file__, 1529, 14), '==', den_259770, int_259771)
    
    # Processing the call keyword arguments (line 1529)
    kwargs_259773 = {}
    # Getting the type of 'np' (line 1529)
    np_259768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 7), 'np', False)
    # Obtaining the member 'all' of a type (line 1529)
    all_259769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 7), np_259768, 'all')
    # Calling all(args, kwargs) (line 1529)
    all_call_result_259774 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 7), all_259769, *[result_eq_259772], **kwargs_259773)
    
    # Testing the type of an if condition (line 1529)
    if_condition_259775 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1529, 4), all_call_result_259774)
    # Assigning a type to the variable 'if_condition_259775' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 4), 'if_condition_259775', if_condition_259775)
    # SSA begins for if statement (line 1529)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1530)
    # Processing the call arguments (line 1530)
    str_259777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 25), 'str', 'Denominator must have at least on nonzero element.')
    # Processing the call keyword arguments (line 1530)
    kwargs_259778 = {}
    # Getting the type of 'ValueError' (line 1530)
    ValueError_259776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1530)
    ValueError_call_result_259779 = invoke(stypy.reporting.localization.Localization(__file__, 1530, 14), ValueError_259776, *[str_259777], **kwargs_259778)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1530, 8), ValueError_call_result_259779, 'raise parameter', BaseException)
    # SSA join for if statement (line 1529)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1533):
    
    # Assigning a Call to a Name (line 1533):
    
    # Call to trim_zeros(...): (line 1533)
    # Processing the call arguments (line 1533)
    # Getting the type of 'den' (line 1533)
    den_259782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 24), 'den', False)
    str_259783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1533, 29), 'str', 'f')
    # Processing the call keyword arguments (line 1533)
    kwargs_259784 = {}
    # Getting the type of 'np' (line 1533)
    np_259780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 10), 'np', False)
    # Obtaining the member 'trim_zeros' of a type (line 1533)
    trim_zeros_259781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 10), np_259780, 'trim_zeros')
    # Calling trim_zeros(args, kwargs) (line 1533)
    trim_zeros_call_result_259785 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 10), trim_zeros_259781, *[den_259782, str_259783], **kwargs_259784)
    
    # Assigning a type to the variable 'den' (line 1533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 4), 'den', trim_zeros_call_result_259785)
    
    # Assigning a Tuple to a Tuple (line 1536):
    
    # Assigning a BinOp to a Name (line 1536):
    # Getting the type of 'num' (line 1536)
    num_259786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 15), 'num')
    
    # Obtaining the type of the subscript
    int_259787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 25), 'int')
    # Getting the type of 'den' (line 1536)
    den_259788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 21), 'den')
    # Obtaining the member '__getitem__' of a type (line 1536)
    getitem___259789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 21), den_259788, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1536)
    subscript_call_result_259790 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 21), getitem___259789, int_259787)
    
    # Applying the binary operator 'div' (line 1536)
    result_div_259791 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 15), 'div', num_259786, subscript_call_result_259790)
    
    # Assigning a type to the variable 'tuple_assignment_257320' (line 1536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'tuple_assignment_257320', result_div_259791)
    
    # Assigning a BinOp to a Name (line 1536):
    # Getting the type of 'den' (line 1536)
    den_259792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 29), 'den')
    
    # Obtaining the type of the subscript
    int_259793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 39), 'int')
    # Getting the type of 'den' (line 1536)
    den_259794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 35), 'den')
    # Obtaining the member '__getitem__' of a type (line 1536)
    getitem___259795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 35), den_259794, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1536)
    subscript_call_result_259796 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 35), getitem___259795, int_259793)
    
    # Applying the binary operator 'div' (line 1536)
    result_div_259797 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 29), 'div', den_259792, subscript_call_result_259796)
    
    # Assigning a type to the variable 'tuple_assignment_257321' (line 1536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'tuple_assignment_257321', result_div_259797)
    
    # Assigning a Name to a Name (line 1536):
    # Getting the type of 'tuple_assignment_257320' (line 1536)
    tuple_assignment_257320_259798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'tuple_assignment_257320')
    # Assigning a type to the variable 'num' (line 1536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'num', tuple_assignment_257320_259798)
    
    # Assigning a Name to a Name (line 1536):
    # Getting the type of 'tuple_assignment_257321' (line 1536)
    tuple_assignment_257321_259799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 4), 'tuple_assignment_257321')
    # Assigning a type to the variable 'den' (line 1536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 9), 'den', tuple_assignment_257321_259799)
    
    # Assigning a Num to a Name (line 1539):
    
    # Assigning a Num to a Name (line 1539):
    int_259800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1539, 20), 'int')
    # Assigning a type to the variable 'leading_zeros' (line 1539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 4), 'leading_zeros', int_259800)
    
    # Getting the type of 'num' (line 1540)
    num_259801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 15), 'num')
    # Obtaining the member 'T' of a type (line 1540)
    T_259802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 15), num_259801, 'T')
    # Testing the type of a for loop iterable (line 1540)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1540, 4), T_259802)
    # Getting the type of the for loop variable (line 1540)
    for_loop_var_259803 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1540, 4), T_259802)
    # Assigning a type to the variable 'col' (line 1540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 4), 'col', for_loop_var_259803)
    # SSA begins for a for statement (line 1540)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to allclose(...): (line 1541)
    # Processing the call arguments (line 1541)
    # Getting the type of 'col' (line 1541)
    col_259806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 23), 'col', False)
    int_259807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1541, 28), 'int')
    # Processing the call keyword arguments (line 1541)
    float_259808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1541, 36), 'float')
    keyword_259809 = float_259808
    kwargs_259810 = {'atol': keyword_259809}
    # Getting the type of 'np' (line 1541)
    np_259804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 11), 'np', False)
    # Obtaining the member 'allclose' of a type (line 1541)
    allclose_259805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1541, 11), np_259804, 'allclose')
    # Calling allclose(args, kwargs) (line 1541)
    allclose_call_result_259811 = invoke(stypy.reporting.localization.Localization(__file__, 1541, 11), allclose_259805, *[col_259806, int_259807], **kwargs_259810)
    
    # Testing the type of an if condition (line 1541)
    if_condition_259812 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1541, 8), allclose_call_result_259811)
    # Assigning a type to the variable 'if_condition_259812' (line 1541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 8), 'if_condition_259812', if_condition_259812)
    # SSA begins for if statement (line 1541)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'leading_zeros' (line 1542)
    leading_zeros_259813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 12), 'leading_zeros')
    int_259814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1542, 29), 'int')
    # Applying the binary operator '+=' (line 1542)
    result_iadd_259815 = python_operator(stypy.reporting.localization.Localization(__file__, 1542, 12), '+=', leading_zeros_259813, int_259814)
    # Assigning a type to the variable 'leading_zeros' (line 1542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 12), 'leading_zeros', result_iadd_259815)
    
    # SSA branch for the else part of an if statement (line 1541)
    module_type_store.open_ssa_branch('else')
    # SSA join for if statement (line 1541)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'leading_zeros' (line 1547)
    leading_zeros_259816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 7), 'leading_zeros')
    int_259817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1547, 23), 'int')
    # Applying the binary operator '>' (line 1547)
    result_gt_259818 = python_operator(stypy.reporting.localization.Localization(__file__, 1547, 7), '>', leading_zeros_259816, int_259817)
    
    # Testing the type of an if condition (line 1547)
    if_condition_259819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1547, 4), result_gt_259818)
    # Assigning a type to the variable 'if_condition_259819' (line 1547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 4), 'if_condition_259819', if_condition_259819)
    # SSA begins for if statement (line 1547)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1548)
    # Processing the call arguments (line 1548)
    str_259822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 22), 'str', 'Badly conditioned filter coefficients (numerator): the results may be meaningless')
    # Getting the type of 'BadCoefficients' (line 1549)
    BadCoefficients_259823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 52), 'BadCoefficients', False)
    # Processing the call keyword arguments (line 1548)
    kwargs_259824 = {}
    # Getting the type of 'warnings' (line 1548)
    warnings_259820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1548)
    warn_259821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 8), warnings_259820, 'warn')
    # Calling warn(args, kwargs) (line 1548)
    warn_call_result_259825 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 8), warn_259821, *[str_259822, BadCoefficients_259823], **kwargs_259824)
    
    
    
    # Getting the type of 'leading_zeros' (line 1551)
    leading_zeros_259826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 11), 'leading_zeros')
    
    # Obtaining the type of the subscript
    int_259827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 38), 'int')
    # Getting the type of 'num' (line 1551)
    num_259828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 28), 'num')
    # Obtaining the member 'shape' of a type (line 1551)
    shape_259829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 28), num_259828, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1551)
    getitem___259830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 28), shape_259829, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1551)
    subscript_call_result_259831 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 28), getitem___259830, int_259827)
    
    # Applying the binary operator '==' (line 1551)
    result_eq_259832 = python_operator(stypy.reporting.localization.Localization(__file__, 1551, 11), '==', leading_zeros_259826, subscript_call_result_259831)
    
    # Testing the type of an if condition (line 1551)
    if_condition_259833 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1551, 8), result_eq_259832)
    # Assigning a type to the variable 'if_condition_259833' (line 1551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'if_condition_259833', if_condition_259833)
    # SSA begins for if statement (line 1551)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'leading_zeros' (line 1552)
    leading_zeros_259834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 12), 'leading_zeros')
    int_259835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1552, 29), 'int')
    # Applying the binary operator '-=' (line 1552)
    result_isub_259836 = python_operator(stypy.reporting.localization.Localization(__file__, 1552, 12), '-=', leading_zeros_259834, int_259835)
    # Assigning a type to the variable 'leading_zeros' (line 1552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 12), 'leading_zeros', result_isub_259836)
    
    # SSA join for if statement (line 1551)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1553):
    
    # Assigning a Subscript to a Name (line 1553):
    
    # Obtaining the type of the subscript
    slice_259837 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1553, 14), None, None, None)
    # Getting the type of 'leading_zeros' (line 1553)
    leading_zeros_259838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 21), 'leading_zeros')
    slice_259839 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1553, 14), leading_zeros_259838, None, None)
    # Getting the type of 'num' (line 1553)
    num_259840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 14), 'num')
    # Obtaining the member '__getitem__' of a type (line 1553)
    getitem___259841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 14), num_259840, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1553)
    subscript_call_result_259842 = invoke(stypy.reporting.localization.Localization(__file__, 1553, 14), getitem___259841, (slice_259837, slice_259839))
    
    # Assigning a type to the variable 'num' (line 1553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 8), 'num', subscript_call_result_259842)
    # SSA join for if statement (line 1547)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_259843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1556, 17), 'int')
    # Getting the type of 'num' (line 1556)
    num_259844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 7), 'num')
    # Obtaining the member 'shape' of a type (line 1556)
    shape_259845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1556, 7), num_259844, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1556)
    getitem___259846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1556, 7), shape_259845, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1556)
    subscript_call_result_259847 = invoke(stypy.reporting.localization.Localization(__file__, 1556, 7), getitem___259846, int_259843)
    
    int_259848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1556, 23), 'int')
    # Applying the binary operator '==' (line 1556)
    result_eq_259849 = python_operator(stypy.reporting.localization.Localization(__file__, 1556, 7), '==', subscript_call_result_259847, int_259848)
    
    # Testing the type of an if condition (line 1556)
    if_condition_259850 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1556, 4), result_eq_259849)
    # Assigning a type to the variable 'if_condition_259850' (line 1556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1556, 4), 'if_condition_259850', if_condition_259850)
    # SSA begins for if statement (line 1556)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1557):
    
    # Assigning a Subscript to a Name (line 1557):
    
    # Obtaining the type of the subscript
    int_259851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1557, 18), 'int')
    slice_259852 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1557, 14), None, None, None)
    # Getting the type of 'num' (line 1557)
    num_259853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 14), 'num')
    # Obtaining the member '__getitem__' of a type (line 1557)
    getitem___259854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 14), num_259853, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1557)
    subscript_call_result_259855 = invoke(stypy.reporting.localization.Localization(__file__, 1557, 14), getitem___259854, (int_259851, slice_259852))
    
    # Assigning a type to the variable 'num' (line 1557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 8), 'num', subscript_call_result_259855)
    # SSA join for if statement (line 1556)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1559)
    tuple_259856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1559, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1559)
    # Adding element type (line 1559)
    # Getting the type of 'num' (line 1559)
    num_259857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 11), 'num')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1559, 11), tuple_259856, num_259857)
    # Adding element type (line 1559)
    # Getting the type of 'den' (line 1559)
    den_259858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 16), 'den')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1559, 11), tuple_259856, den_259858)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1559, 4), 'stypy_return_type', tuple_259856)
    
    # ################# End of 'normalize(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'normalize' in the type store
    # Getting the type of 'stypy_return_type' (line 1491)
    stypy_return_type_259859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_259859)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'normalize'
    return stypy_return_type_259859

# Assigning a type to the variable 'normalize' (line 1491)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 0), 'normalize', normalize)

@norecursion
def lp2lp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_259860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, 19), 'float')
    defaults = [float_259860]
    # Create a new context for function 'lp2lp'
    module_type_store = module_type_store.open_function_context('lp2lp', 1562, 0, False)
    
    # Passed parameters checking function
    lp2lp.stypy_localization = localization
    lp2lp.stypy_type_of_self = None
    lp2lp.stypy_type_store = module_type_store
    lp2lp.stypy_function_name = 'lp2lp'
    lp2lp.stypy_param_names_list = ['b', 'a', 'wo']
    lp2lp.stypy_varargs_param_name = None
    lp2lp.stypy_kwargs_param_name = None
    lp2lp.stypy_call_defaults = defaults
    lp2lp.stypy_call_varargs = varargs
    lp2lp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lp2lp', ['b', 'a', 'wo'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lp2lp', localization, ['b', 'a', 'wo'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lp2lp(...)' code ##################

    str_259861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, (-1)), 'str', "\n    Transform a lowpass filter prototype to a different frequency.\n\n    Return an analog low-pass filter with cutoff frequency `wo`\n    from an analog low-pass filter prototype with unity cutoff frequency, in\n    transfer function ('ba') representation.\n\n    ")
    
    # Assigning a Call to a Tuple (line 1571):
    
    # Assigning a Subscript to a Name (line 1571):
    
    # Obtaining the type of the subscript
    int_259862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 4), 'int')
    
    # Call to map(...): (line 1571)
    # Processing the call arguments (line 1571)
    # Getting the type of 'atleast_1d' (line 1571)
    atleast_1d_259864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1571)
    tuple_259865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1571)
    # Adding element type (line 1571)
    # Getting the type of 'a' (line 1571)
    a_259866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1571, 28), tuple_259865, a_259866)
    # Adding element type (line 1571)
    # Getting the type of 'b' (line 1571)
    b_259867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 31), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1571, 28), tuple_259865, b_259867)
    
    # Processing the call keyword arguments (line 1571)
    kwargs_259868 = {}
    # Getting the type of 'map' (line 1571)
    map_259863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 11), 'map', False)
    # Calling map(args, kwargs) (line 1571)
    map_call_result_259869 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 11), map_259863, *[atleast_1d_259864, tuple_259865], **kwargs_259868)
    
    # Obtaining the member '__getitem__' of a type (line 1571)
    getitem___259870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 4), map_call_result_259869, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1571)
    subscript_call_result_259871 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 4), getitem___259870, int_259862)
    
    # Assigning a type to the variable 'tuple_var_assignment_257322' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'tuple_var_assignment_257322', subscript_call_result_259871)
    
    # Assigning a Subscript to a Name (line 1571):
    
    # Obtaining the type of the subscript
    int_259872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 4), 'int')
    
    # Call to map(...): (line 1571)
    # Processing the call arguments (line 1571)
    # Getting the type of 'atleast_1d' (line 1571)
    atleast_1d_259874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1571)
    tuple_259875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1571)
    # Adding element type (line 1571)
    # Getting the type of 'a' (line 1571)
    a_259876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1571, 28), tuple_259875, a_259876)
    # Adding element type (line 1571)
    # Getting the type of 'b' (line 1571)
    b_259877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 31), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1571, 28), tuple_259875, b_259877)
    
    # Processing the call keyword arguments (line 1571)
    kwargs_259878 = {}
    # Getting the type of 'map' (line 1571)
    map_259873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 11), 'map', False)
    # Calling map(args, kwargs) (line 1571)
    map_call_result_259879 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 11), map_259873, *[atleast_1d_259874, tuple_259875], **kwargs_259878)
    
    # Obtaining the member '__getitem__' of a type (line 1571)
    getitem___259880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 4), map_call_result_259879, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1571)
    subscript_call_result_259881 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 4), getitem___259880, int_259872)
    
    # Assigning a type to the variable 'tuple_var_assignment_257323' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'tuple_var_assignment_257323', subscript_call_result_259881)
    
    # Assigning a Name to a Name (line 1571):
    # Getting the type of 'tuple_var_assignment_257322' (line 1571)
    tuple_var_assignment_257322_259882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'tuple_var_assignment_257322')
    # Assigning a type to the variable 'a' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'a', tuple_var_assignment_257322_259882)
    
    # Assigning a Name to a Name (line 1571):
    # Getting the type of 'tuple_var_assignment_257323' (line 1571)
    tuple_var_assignment_257323_259883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 4), 'tuple_var_assignment_257323')
    # Assigning a type to the variable 'b' (line 1571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 7), 'b', tuple_var_assignment_257323_259883)
    
    
    # SSA begins for try-except statement (line 1572)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1573):
    
    # Assigning a Call to a Name (line 1573):
    
    # Call to float(...): (line 1573)
    # Processing the call arguments (line 1573)
    # Getting the type of 'wo' (line 1573)
    wo_259885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 19), 'wo', False)
    # Processing the call keyword arguments (line 1573)
    kwargs_259886 = {}
    # Getting the type of 'float' (line 1573)
    float_259884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 13), 'float', False)
    # Calling float(args, kwargs) (line 1573)
    float_call_result_259887 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 13), float_259884, *[wo_259885], **kwargs_259886)
    
    # Assigning a type to the variable 'wo' (line 1573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 8), 'wo', float_call_result_259887)
    # SSA branch for the except part of a try statement (line 1572)
    # SSA branch for the except 'TypeError' branch of a try statement (line 1572)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 1575):
    
    # Assigning a Call to a Name (line 1575):
    
    # Call to float(...): (line 1575)
    # Processing the call arguments (line 1575)
    
    # Obtaining the type of the subscript
    int_259889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, 22), 'int')
    # Getting the type of 'wo' (line 1575)
    wo_259890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 19), 'wo', False)
    # Obtaining the member '__getitem__' of a type (line 1575)
    getitem___259891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1575, 19), wo_259890, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1575)
    subscript_call_result_259892 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 19), getitem___259891, int_259889)
    
    # Processing the call keyword arguments (line 1575)
    kwargs_259893 = {}
    # Getting the type of 'float' (line 1575)
    float_259888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 13), 'float', False)
    # Calling float(args, kwargs) (line 1575)
    float_call_result_259894 = invoke(stypy.reporting.localization.Localization(__file__, 1575, 13), float_259888, *[subscript_call_result_259892], **kwargs_259893)
    
    # Assigning a type to the variable 'wo' (line 1575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 8), 'wo', float_call_result_259894)
    # SSA join for try-except statement (line 1572)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1576):
    
    # Assigning a Call to a Name (line 1576):
    
    # Call to len(...): (line 1576)
    # Processing the call arguments (line 1576)
    # Getting the type of 'a' (line 1576)
    a_259896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 12), 'a', False)
    # Processing the call keyword arguments (line 1576)
    kwargs_259897 = {}
    # Getting the type of 'len' (line 1576)
    len_259895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 8), 'len', False)
    # Calling len(args, kwargs) (line 1576)
    len_call_result_259898 = invoke(stypy.reporting.localization.Localization(__file__, 1576, 8), len_259895, *[a_259896], **kwargs_259897)
    
    # Assigning a type to the variable 'd' (line 1576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 4), 'd', len_call_result_259898)
    
    # Assigning a Call to a Name (line 1577):
    
    # Assigning a Call to a Name (line 1577):
    
    # Call to len(...): (line 1577)
    # Processing the call arguments (line 1577)
    # Getting the type of 'b' (line 1577)
    b_259900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 12), 'b', False)
    # Processing the call keyword arguments (line 1577)
    kwargs_259901 = {}
    # Getting the type of 'len' (line 1577)
    len_259899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'len', False)
    # Calling len(args, kwargs) (line 1577)
    len_call_result_259902 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 8), len_259899, *[b_259900], **kwargs_259901)
    
    # Assigning a type to the variable 'n' (line 1577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 4), 'n', len_call_result_259902)
    
    # Assigning a Call to a Name (line 1578):
    
    # Assigning a Call to a Name (line 1578):
    
    # Call to max(...): (line 1578)
    # Processing the call arguments (line 1578)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1578)
    tuple_259904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1578, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1578)
    # Adding element type (line 1578)
    # Getting the type of 'd' (line 1578)
    d_259905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 13), 'd', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1578, 13), tuple_259904, d_259905)
    # Adding element type (line 1578)
    # Getting the type of 'n' (line 1578)
    n_259906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 16), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1578, 13), tuple_259904, n_259906)
    
    # Processing the call keyword arguments (line 1578)
    kwargs_259907 = {}
    # Getting the type of 'max' (line 1578)
    max_259903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 8), 'max', False)
    # Calling max(args, kwargs) (line 1578)
    max_call_result_259908 = invoke(stypy.reporting.localization.Localization(__file__, 1578, 8), max_259903, *[tuple_259904], **kwargs_259907)
    
    # Assigning a type to the variable 'M' (line 1578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 4), 'M', max_call_result_259908)
    
    # Assigning a Call to a Name (line 1579):
    
    # Assigning a Call to a Name (line 1579):
    
    # Call to pow(...): (line 1579)
    # Processing the call arguments (line 1579)
    # Getting the type of 'wo' (line 1579)
    wo_259910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 14), 'wo', False)
    
    # Call to arange(...): (line 1579)
    # Processing the call arguments (line 1579)
    # Getting the type of 'M' (line 1579)
    M_259913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 31), 'M', False)
    int_259914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1579, 35), 'int')
    # Applying the binary operator '-' (line 1579)
    result_sub_259915 = python_operator(stypy.reporting.localization.Localization(__file__, 1579, 31), '-', M_259913, int_259914)
    
    int_259916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1579, 38), 'int')
    int_259917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1579, 42), 'int')
    # Processing the call keyword arguments (line 1579)
    kwargs_259918 = {}
    # Getting the type of 'numpy' (line 1579)
    numpy_259911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 18), 'numpy', False)
    # Obtaining the member 'arange' of a type (line 1579)
    arange_259912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1579, 18), numpy_259911, 'arange')
    # Calling arange(args, kwargs) (line 1579)
    arange_call_result_259919 = invoke(stypy.reporting.localization.Localization(__file__, 1579, 18), arange_259912, *[result_sub_259915, int_259916, int_259917], **kwargs_259918)
    
    # Processing the call keyword arguments (line 1579)
    kwargs_259920 = {}
    # Getting the type of 'pow' (line 1579)
    pow_259909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 10), 'pow', False)
    # Calling pow(args, kwargs) (line 1579)
    pow_call_result_259921 = invoke(stypy.reporting.localization.Localization(__file__, 1579, 10), pow_259909, *[wo_259910, arange_call_result_259919], **kwargs_259920)
    
    # Assigning a type to the variable 'pwo' (line 1579)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1579, 4), 'pwo', pow_call_result_259921)
    
    # Assigning a Call to a Name (line 1580):
    
    # Assigning a Call to a Name (line 1580):
    
    # Call to max(...): (line 1580)
    # Processing the call arguments (line 1580)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1580)
    tuple_259923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1580)
    # Adding element type (line 1580)
    # Getting the type of 'n' (line 1580)
    n_259924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 18), 'n', False)
    # Getting the type of 'd' (line 1580)
    d_259925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 22), 'd', False)
    # Applying the binary operator '-' (line 1580)
    result_sub_259926 = python_operator(stypy.reporting.localization.Localization(__file__, 1580, 18), '-', n_259924, d_259925)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1580, 18), tuple_259923, result_sub_259926)
    # Adding element type (line 1580)
    int_259927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1580, 18), tuple_259923, int_259927)
    
    # Processing the call keyword arguments (line 1580)
    kwargs_259928 = {}
    # Getting the type of 'max' (line 1580)
    max_259922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 13), 'max', False)
    # Calling max(args, kwargs) (line 1580)
    max_call_result_259929 = invoke(stypy.reporting.localization.Localization(__file__, 1580, 13), max_259922, *[tuple_259923], **kwargs_259928)
    
    # Assigning a type to the variable 'start1' (line 1580)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1580, 4), 'start1', max_call_result_259929)
    
    # Assigning a Call to a Name (line 1581):
    
    # Assigning a Call to a Name (line 1581):
    
    # Call to max(...): (line 1581)
    # Processing the call arguments (line 1581)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1581)
    tuple_259931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1581)
    # Adding element type (line 1581)
    # Getting the type of 'd' (line 1581)
    d_259932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 18), 'd', False)
    # Getting the type of 'n' (line 1581)
    n_259933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 22), 'n', False)
    # Applying the binary operator '-' (line 1581)
    result_sub_259934 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 18), '-', d_259932, n_259933)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1581, 18), tuple_259931, result_sub_259934)
    # Adding element type (line 1581)
    int_259935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1581, 18), tuple_259931, int_259935)
    
    # Processing the call keyword arguments (line 1581)
    kwargs_259936 = {}
    # Getting the type of 'max' (line 1581)
    max_259930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 13), 'max', False)
    # Calling max(args, kwargs) (line 1581)
    max_call_result_259937 = invoke(stypy.reporting.localization.Localization(__file__, 1581, 13), max_259930, *[tuple_259931], **kwargs_259936)
    
    # Assigning a type to the variable 'start2' (line 1581)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 4), 'start2', max_call_result_259937)
    
    # Assigning a BinOp to a Name (line 1582):
    
    # Assigning a BinOp to a Name (line 1582):
    # Getting the type of 'b' (line 1582)
    b_259938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 8), 'b')
    
    # Obtaining the type of the subscript
    # Getting the type of 'start1' (line 1582)
    start1_259939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 16), 'start1')
    # Getting the type of 'pwo' (line 1582)
    pwo_259940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 12), 'pwo')
    # Obtaining the member '__getitem__' of a type (line 1582)
    getitem___259941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 12), pwo_259940, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1582)
    subscript_call_result_259942 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 12), getitem___259941, start1_259939)
    
    # Applying the binary operator '*' (line 1582)
    result_mul_259943 = python_operator(stypy.reporting.localization.Localization(__file__, 1582, 8), '*', b_259938, subscript_call_result_259942)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'start2' (line 1582)
    start2_259944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 30), 'start2')
    slice_259945 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1582, 26), start2_259944, None, None)
    # Getting the type of 'pwo' (line 1582)
    pwo_259946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 26), 'pwo')
    # Obtaining the member '__getitem__' of a type (line 1582)
    getitem___259947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 26), pwo_259946, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1582)
    subscript_call_result_259948 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 26), getitem___259947, slice_259945)
    
    # Applying the binary operator 'div' (line 1582)
    result_div_259949 = python_operator(stypy.reporting.localization.Localization(__file__, 1582, 24), 'div', result_mul_259943, subscript_call_result_259948)
    
    # Assigning a type to the variable 'b' (line 1582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 4), 'b', result_div_259949)
    
    # Assigning a BinOp to a Name (line 1583):
    
    # Assigning a BinOp to a Name (line 1583):
    # Getting the type of 'a' (line 1583)
    a_259950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 8), 'a')
    
    # Obtaining the type of the subscript
    # Getting the type of 'start1' (line 1583)
    start1_259951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 16), 'start1')
    # Getting the type of 'pwo' (line 1583)
    pwo_259952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 12), 'pwo')
    # Obtaining the member '__getitem__' of a type (line 1583)
    getitem___259953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 12), pwo_259952, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1583)
    subscript_call_result_259954 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 12), getitem___259953, start1_259951)
    
    # Applying the binary operator '*' (line 1583)
    result_mul_259955 = python_operator(stypy.reporting.localization.Localization(__file__, 1583, 8), '*', a_259950, subscript_call_result_259954)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'start1' (line 1583)
    start1_259956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 30), 'start1')
    slice_259957 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1583, 26), start1_259956, None, None)
    # Getting the type of 'pwo' (line 1583)
    pwo_259958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 26), 'pwo')
    # Obtaining the member '__getitem__' of a type (line 1583)
    getitem___259959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 26), pwo_259958, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1583)
    subscript_call_result_259960 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 26), getitem___259959, slice_259957)
    
    # Applying the binary operator 'div' (line 1583)
    result_div_259961 = python_operator(stypy.reporting.localization.Localization(__file__, 1583, 24), 'div', result_mul_259955, subscript_call_result_259960)
    
    # Assigning a type to the variable 'a' (line 1583)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 4), 'a', result_div_259961)
    
    # Call to normalize(...): (line 1584)
    # Processing the call arguments (line 1584)
    # Getting the type of 'b' (line 1584)
    b_259963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 21), 'b', False)
    # Getting the type of 'a' (line 1584)
    a_259964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 24), 'a', False)
    # Processing the call keyword arguments (line 1584)
    kwargs_259965 = {}
    # Getting the type of 'normalize' (line 1584)
    normalize_259962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 11), 'normalize', False)
    # Calling normalize(args, kwargs) (line 1584)
    normalize_call_result_259966 = invoke(stypy.reporting.localization.Localization(__file__, 1584, 11), normalize_259962, *[b_259963, a_259964], **kwargs_259965)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1584, 4), 'stypy_return_type', normalize_call_result_259966)
    
    # ################# End of 'lp2lp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lp2lp' in the type store
    # Getting the type of 'stypy_return_type' (line 1562)
    stypy_return_type_259967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_259967)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lp2lp'
    return stypy_return_type_259967

# Assigning a type to the variable 'lp2lp' (line 1562)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 0), 'lp2lp', lp2lp)

@norecursion
def lp2hp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_259968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 19), 'float')
    defaults = [float_259968]
    # Create a new context for function 'lp2hp'
    module_type_store = module_type_store.open_function_context('lp2hp', 1587, 0, False)
    
    # Passed parameters checking function
    lp2hp.stypy_localization = localization
    lp2hp.stypy_type_of_self = None
    lp2hp.stypy_type_store = module_type_store
    lp2hp.stypy_function_name = 'lp2hp'
    lp2hp.stypy_param_names_list = ['b', 'a', 'wo']
    lp2hp.stypy_varargs_param_name = None
    lp2hp.stypy_kwargs_param_name = None
    lp2hp.stypy_call_defaults = defaults
    lp2hp.stypy_call_varargs = varargs
    lp2hp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lp2hp', ['b', 'a', 'wo'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lp2hp', localization, ['b', 'a', 'wo'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lp2hp(...)' code ##################

    str_259969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1595, (-1)), 'str', "\n    Transform a lowpass filter prototype to a highpass filter.\n\n    Return an analog high-pass filter with cutoff frequency `wo`\n    from an analog low-pass filter prototype with unity cutoff frequency, in\n    transfer function ('ba') representation.\n\n    ")
    
    # Assigning a Call to a Tuple (line 1596):
    
    # Assigning a Subscript to a Name (line 1596):
    
    # Obtaining the type of the subscript
    int_259970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1596, 4), 'int')
    
    # Call to map(...): (line 1596)
    # Processing the call arguments (line 1596)
    # Getting the type of 'atleast_1d' (line 1596)
    atleast_1d_259972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1596)
    tuple_259973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1596, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1596)
    # Adding element type (line 1596)
    # Getting the type of 'a' (line 1596)
    a_259974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1596, 28), tuple_259973, a_259974)
    # Adding element type (line 1596)
    # Getting the type of 'b' (line 1596)
    b_259975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 31), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1596, 28), tuple_259973, b_259975)
    
    # Processing the call keyword arguments (line 1596)
    kwargs_259976 = {}
    # Getting the type of 'map' (line 1596)
    map_259971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 11), 'map', False)
    # Calling map(args, kwargs) (line 1596)
    map_call_result_259977 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 11), map_259971, *[atleast_1d_259972, tuple_259973], **kwargs_259976)
    
    # Obtaining the member '__getitem__' of a type (line 1596)
    getitem___259978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 4), map_call_result_259977, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1596)
    subscript_call_result_259979 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 4), getitem___259978, int_259970)
    
    # Assigning a type to the variable 'tuple_var_assignment_257324' (line 1596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 4), 'tuple_var_assignment_257324', subscript_call_result_259979)
    
    # Assigning a Subscript to a Name (line 1596):
    
    # Obtaining the type of the subscript
    int_259980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1596, 4), 'int')
    
    # Call to map(...): (line 1596)
    # Processing the call arguments (line 1596)
    # Getting the type of 'atleast_1d' (line 1596)
    atleast_1d_259982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1596)
    tuple_259983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1596, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1596)
    # Adding element type (line 1596)
    # Getting the type of 'a' (line 1596)
    a_259984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1596, 28), tuple_259983, a_259984)
    # Adding element type (line 1596)
    # Getting the type of 'b' (line 1596)
    b_259985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 31), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1596, 28), tuple_259983, b_259985)
    
    # Processing the call keyword arguments (line 1596)
    kwargs_259986 = {}
    # Getting the type of 'map' (line 1596)
    map_259981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 11), 'map', False)
    # Calling map(args, kwargs) (line 1596)
    map_call_result_259987 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 11), map_259981, *[atleast_1d_259982, tuple_259983], **kwargs_259986)
    
    # Obtaining the member '__getitem__' of a type (line 1596)
    getitem___259988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 4), map_call_result_259987, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1596)
    subscript_call_result_259989 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 4), getitem___259988, int_259980)
    
    # Assigning a type to the variable 'tuple_var_assignment_257325' (line 1596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 4), 'tuple_var_assignment_257325', subscript_call_result_259989)
    
    # Assigning a Name to a Name (line 1596):
    # Getting the type of 'tuple_var_assignment_257324' (line 1596)
    tuple_var_assignment_257324_259990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 4), 'tuple_var_assignment_257324')
    # Assigning a type to the variable 'a' (line 1596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 4), 'a', tuple_var_assignment_257324_259990)
    
    # Assigning a Name to a Name (line 1596):
    # Getting the type of 'tuple_var_assignment_257325' (line 1596)
    tuple_var_assignment_257325_259991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 4), 'tuple_var_assignment_257325')
    # Assigning a type to the variable 'b' (line 1596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 7), 'b', tuple_var_assignment_257325_259991)
    
    
    # SSA begins for try-except statement (line 1597)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1598):
    
    # Assigning a Call to a Name (line 1598):
    
    # Call to float(...): (line 1598)
    # Processing the call arguments (line 1598)
    # Getting the type of 'wo' (line 1598)
    wo_259993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 19), 'wo', False)
    # Processing the call keyword arguments (line 1598)
    kwargs_259994 = {}
    # Getting the type of 'float' (line 1598)
    float_259992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 13), 'float', False)
    # Calling float(args, kwargs) (line 1598)
    float_call_result_259995 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 13), float_259992, *[wo_259993], **kwargs_259994)
    
    # Assigning a type to the variable 'wo' (line 1598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1598, 8), 'wo', float_call_result_259995)
    # SSA branch for the except part of a try statement (line 1597)
    # SSA branch for the except 'TypeError' branch of a try statement (line 1597)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 1600):
    
    # Assigning a Call to a Name (line 1600):
    
    # Call to float(...): (line 1600)
    # Processing the call arguments (line 1600)
    
    # Obtaining the type of the subscript
    int_259997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1600, 22), 'int')
    # Getting the type of 'wo' (line 1600)
    wo_259998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 19), 'wo', False)
    # Obtaining the member '__getitem__' of a type (line 1600)
    getitem___259999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1600, 19), wo_259998, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1600)
    subscript_call_result_260000 = invoke(stypy.reporting.localization.Localization(__file__, 1600, 19), getitem___259999, int_259997)
    
    # Processing the call keyword arguments (line 1600)
    kwargs_260001 = {}
    # Getting the type of 'float' (line 1600)
    float_259996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 13), 'float', False)
    # Calling float(args, kwargs) (line 1600)
    float_call_result_260002 = invoke(stypy.reporting.localization.Localization(__file__, 1600, 13), float_259996, *[subscript_call_result_260000], **kwargs_260001)
    
    # Assigning a type to the variable 'wo' (line 1600)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1600, 8), 'wo', float_call_result_260002)
    # SSA join for try-except statement (line 1597)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1601):
    
    # Assigning a Call to a Name (line 1601):
    
    # Call to len(...): (line 1601)
    # Processing the call arguments (line 1601)
    # Getting the type of 'a' (line 1601)
    a_260004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 12), 'a', False)
    # Processing the call keyword arguments (line 1601)
    kwargs_260005 = {}
    # Getting the type of 'len' (line 1601)
    len_260003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 8), 'len', False)
    # Calling len(args, kwargs) (line 1601)
    len_call_result_260006 = invoke(stypy.reporting.localization.Localization(__file__, 1601, 8), len_260003, *[a_260004], **kwargs_260005)
    
    # Assigning a type to the variable 'd' (line 1601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 4), 'd', len_call_result_260006)
    
    # Assigning a Call to a Name (line 1602):
    
    # Assigning a Call to a Name (line 1602):
    
    # Call to len(...): (line 1602)
    # Processing the call arguments (line 1602)
    # Getting the type of 'b' (line 1602)
    b_260008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 12), 'b', False)
    # Processing the call keyword arguments (line 1602)
    kwargs_260009 = {}
    # Getting the type of 'len' (line 1602)
    len_260007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 8), 'len', False)
    # Calling len(args, kwargs) (line 1602)
    len_call_result_260010 = invoke(stypy.reporting.localization.Localization(__file__, 1602, 8), len_260007, *[b_260008], **kwargs_260009)
    
    # Assigning a type to the variable 'n' (line 1602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1602, 4), 'n', len_call_result_260010)
    
    
    # Getting the type of 'wo' (line 1603)
    wo_260011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 7), 'wo')
    int_260012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1603, 13), 'int')
    # Applying the binary operator '!=' (line 1603)
    result_ne_260013 = python_operator(stypy.reporting.localization.Localization(__file__, 1603, 7), '!=', wo_260011, int_260012)
    
    # Testing the type of an if condition (line 1603)
    if_condition_260014 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1603, 4), result_ne_260013)
    # Assigning a type to the variable 'if_condition_260014' (line 1603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1603, 4), 'if_condition_260014', if_condition_260014)
    # SSA begins for if statement (line 1603)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1604):
    
    # Assigning a Call to a Name (line 1604):
    
    # Call to pow(...): (line 1604)
    # Processing the call arguments (line 1604)
    # Getting the type of 'wo' (line 1604)
    wo_260016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 18), 'wo', False)
    
    # Call to arange(...): (line 1604)
    # Processing the call arguments (line 1604)
    
    # Call to max(...): (line 1604)
    # Processing the call arguments (line 1604)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1604)
    tuple_260020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1604, 40), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1604)
    # Adding element type (line 1604)
    # Getting the type of 'd' (line 1604)
    d_260021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 40), 'd', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1604, 40), tuple_260020, d_260021)
    # Adding element type (line 1604)
    # Getting the type of 'n' (line 1604)
    n_260022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 43), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1604, 40), tuple_260020, n_260022)
    
    # Processing the call keyword arguments (line 1604)
    kwargs_260023 = {}
    # Getting the type of 'max' (line 1604)
    max_260019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 35), 'max', False)
    # Calling max(args, kwargs) (line 1604)
    max_call_result_260024 = invoke(stypy.reporting.localization.Localization(__file__, 1604, 35), max_260019, *[tuple_260020], **kwargs_260023)
    
    # Processing the call keyword arguments (line 1604)
    kwargs_260025 = {}
    # Getting the type of 'numpy' (line 1604)
    numpy_260017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 22), 'numpy', False)
    # Obtaining the member 'arange' of a type (line 1604)
    arange_260018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1604, 22), numpy_260017, 'arange')
    # Calling arange(args, kwargs) (line 1604)
    arange_call_result_260026 = invoke(stypy.reporting.localization.Localization(__file__, 1604, 22), arange_260018, *[max_call_result_260024], **kwargs_260025)
    
    # Processing the call keyword arguments (line 1604)
    kwargs_260027 = {}
    # Getting the type of 'pow' (line 1604)
    pow_260015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 14), 'pow', False)
    # Calling pow(args, kwargs) (line 1604)
    pow_call_result_260028 = invoke(stypy.reporting.localization.Localization(__file__, 1604, 14), pow_260015, *[wo_260016, arange_call_result_260026], **kwargs_260027)
    
    # Assigning a type to the variable 'pwo' (line 1604)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1604, 8), 'pwo', pow_call_result_260028)
    # SSA branch for the else part of an if statement (line 1603)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1606):
    
    # Assigning a Call to a Name (line 1606):
    
    # Call to ones(...): (line 1606)
    # Processing the call arguments (line 1606)
    
    # Call to max(...): (line 1606)
    # Processing the call arguments (line 1606)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1606)
    tuple_260032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1606, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1606)
    # Adding element type (line 1606)
    # Getting the type of 'd' (line 1606)
    d_260033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 30), 'd', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1606, 30), tuple_260032, d_260033)
    # Adding element type (line 1606)
    # Getting the type of 'n' (line 1606)
    n_260034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 33), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1606, 30), tuple_260032, n_260034)
    
    # Processing the call keyword arguments (line 1606)
    kwargs_260035 = {}
    # Getting the type of 'max' (line 1606)
    max_260031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 25), 'max', False)
    # Calling max(args, kwargs) (line 1606)
    max_call_result_260036 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 25), max_260031, *[tuple_260032], **kwargs_260035)
    
    # Getting the type of 'b' (line 1606)
    b_260037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 38), 'b', False)
    # Obtaining the member 'dtype' of a type (line 1606)
    dtype_260038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1606, 38), b_260037, 'dtype')
    # Obtaining the member 'char' of a type (line 1606)
    char_260039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1606, 38), dtype_260038, 'char')
    # Processing the call keyword arguments (line 1606)
    kwargs_260040 = {}
    # Getting the type of 'numpy' (line 1606)
    numpy_260029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 14), 'numpy', False)
    # Obtaining the member 'ones' of a type (line 1606)
    ones_260030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1606, 14), numpy_260029, 'ones')
    # Calling ones(args, kwargs) (line 1606)
    ones_call_result_260041 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 14), ones_260030, *[max_call_result_260036, char_260039], **kwargs_260040)
    
    # Assigning a type to the variable 'pwo' (line 1606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1606, 8), 'pwo', ones_call_result_260041)
    # SSA join for if statement (line 1603)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'd' (line 1607)
    d_260042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 7), 'd')
    # Getting the type of 'n' (line 1607)
    n_260043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 12), 'n')
    # Applying the binary operator '>=' (line 1607)
    result_ge_260044 = python_operator(stypy.reporting.localization.Localization(__file__, 1607, 7), '>=', d_260042, n_260043)
    
    # Testing the type of an if condition (line 1607)
    if_condition_260045 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1607, 4), result_ge_260044)
    # Assigning a type to the variable 'if_condition_260045' (line 1607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1607, 4), 'if_condition_260045', if_condition_260045)
    # SSA begins for if statement (line 1607)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1608):
    
    # Assigning a BinOp to a Name (line 1608):
    
    # Obtaining the type of the subscript
    int_260046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1608, 19), 'int')
    slice_260047 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1608, 15), None, None, int_260046)
    # Getting the type of 'a' (line 1608)
    a_260048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 15), 'a')
    # Obtaining the member '__getitem__' of a type (line 1608)
    getitem___260049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1608, 15), a_260048, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1608)
    subscript_call_result_260050 = invoke(stypy.reporting.localization.Localization(__file__, 1608, 15), getitem___260049, slice_260047)
    
    # Getting the type of 'pwo' (line 1608)
    pwo_260051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 25), 'pwo')
    # Applying the binary operator '*' (line 1608)
    result_mul_260052 = python_operator(stypy.reporting.localization.Localization(__file__, 1608, 15), '*', subscript_call_result_260050, pwo_260051)
    
    # Assigning a type to the variable 'outa' (line 1608)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1608, 8), 'outa', result_mul_260052)
    
    # Assigning a Call to a Name (line 1609):
    
    # Assigning a Call to a Name (line 1609):
    
    # Call to resize(...): (line 1609)
    # Processing the call arguments (line 1609)
    # Getting the type of 'b' (line 1609)
    b_260054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 22), 'b', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1609)
    tuple_260055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1609, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1609)
    # Adding element type (line 1609)
    # Getting the type of 'd' (line 1609)
    d_260056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 26), 'd', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1609, 26), tuple_260055, d_260056)
    
    # Processing the call keyword arguments (line 1609)
    kwargs_260057 = {}
    # Getting the type of 'resize' (line 1609)
    resize_260053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 15), 'resize', False)
    # Calling resize(args, kwargs) (line 1609)
    resize_call_result_260058 = invoke(stypy.reporting.localization.Localization(__file__, 1609, 15), resize_260053, *[b_260054, tuple_260055], **kwargs_260057)
    
    # Assigning a type to the variable 'outb' (line 1609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1609, 8), 'outb', resize_call_result_260058)
    
    # Assigning a Num to a Subscript (line 1610):
    
    # Assigning a Num to a Subscript (line 1610):
    float_260059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1610, 19), 'float')
    # Getting the type of 'outb' (line 1610)
    outb_260060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 8), 'outb')
    # Getting the type of 'n' (line 1610)
    n_260061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 13), 'n')
    slice_260062 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1610, 8), n_260061, None, None)
    # Storing an element on a container (line 1610)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1610, 8), outb_260060, (slice_260062, float_260059))
    
    # Assigning a BinOp to a Subscript (line 1611):
    
    # Assigning a BinOp to a Subscript (line 1611):
    
    # Obtaining the type of the subscript
    int_260063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1611, 23), 'int')
    slice_260064 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1611, 19), None, None, int_260063)
    # Getting the type of 'b' (line 1611)
    b_260065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 19), 'b')
    # Obtaining the member '__getitem__' of a type (line 1611)
    getitem___260066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1611, 19), b_260065, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1611)
    subscript_call_result_260067 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 19), getitem___260066, slice_260064)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1611)
    n_260068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 34), 'n')
    slice_260069 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1611, 29), None, n_260068, None)
    # Getting the type of 'pwo' (line 1611)
    pwo_260070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 29), 'pwo')
    # Obtaining the member '__getitem__' of a type (line 1611)
    getitem___260071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1611, 29), pwo_260070, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1611)
    subscript_call_result_260072 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 29), getitem___260071, slice_260069)
    
    # Applying the binary operator '*' (line 1611)
    result_mul_260073 = python_operator(stypy.reporting.localization.Localization(__file__, 1611, 19), '*', subscript_call_result_260067, subscript_call_result_260072)
    
    # Getting the type of 'outb' (line 1611)
    outb_260074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 8), 'outb')
    # Getting the type of 'n' (line 1611)
    n_260075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 14), 'n')
    slice_260076 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1611, 8), None, n_260075, None)
    # Storing an element on a container (line 1611)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1611, 8), outb_260074, (slice_260076, result_mul_260073))
    # SSA branch for the else part of an if statement (line 1607)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1613):
    
    # Assigning a BinOp to a Name (line 1613):
    
    # Obtaining the type of the subscript
    int_260077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1613, 19), 'int')
    slice_260078 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1613, 15), None, None, int_260077)
    # Getting the type of 'b' (line 1613)
    b_260079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 15), 'b')
    # Obtaining the member '__getitem__' of a type (line 1613)
    getitem___260080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1613, 15), b_260079, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1613)
    subscript_call_result_260081 = invoke(stypy.reporting.localization.Localization(__file__, 1613, 15), getitem___260080, slice_260078)
    
    # Getting the type of 'pwo' (line 1613)
    pwo_260082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 25), 'pwo')
    # Applying the binary operator '*' (line 1613)
    result_mul_260083 = python_operator(stypy.reporting.localization.Localization(__file__, 1613, 15), '*', subscript_call_result_260081, pwo_260082)
    
    # Assigning a type to the variable 'outb' (line 1613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'outb', result_mul_260083)
    
    # Assigning a Call to a Name (line 1614):
    
    # Assigning a Call to a Name (line 1614):
    
    # Call to resize(...): (line 1614)
    # Processing the call arguments (line 1614)
    # Getting the type of 'a' (line 1614)
    a_260085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 22), 'a', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1614)
    tuple_260086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1614, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1614)
    # Adding element type (line 1614)
    # Getting the type of 'n' (line 1614)
    n_260087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 26), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1614, 26), tuple_260086, n_260087)
    
    # Processing the call keyword arguments (line 1614)
    kwargs_260088 = {}
    # Getting the type of 'resize' (line 1614)
    resize_260084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 15), 'resize', False)
    # Calling resize(args, kwargs) (line 1614)
    resize_call_result_260089 = invoke(stypy.reporting.localization.Localization(__file__, 1614, 15), resize_260084, *[a_260085, tuple_260086], **kwargs_260088)
    
    # Assigning a type to the variable 'outa' (line 1614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 8), 'outa', resize_call_result_260089)
    
    # Assigning a Num to a Subscript (line 1615):
    
    # Assigning a Num to a Subscript (line 1615):
    float_260090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1615, 19), 'float')
    # Getting the type of 'outa' (line 1615)
    outa_260091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 8), 'outa')
    # Getting the type of 'd' (line 1615)
    d_260092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 13), 'd')
    slice_260093 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1615, 8), d_260092, None, None)
    # Storing an element on a container (line 1615)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1615, 8), outa_260091, (slice_260093, float_260090))
    
    # Assigning a BinOp to a Subscript (line 1616):
    
    # Assigning a BinOp to a Subscript (line 1616):
    
    # Obtaining the type of the subscript
    int_260094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1616, 23), 'int')
    slice_260095 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1616, 19), None, None, int_260094)
    # Getting the type of 'a' (line 1616)
    a_260096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 19), 'a')
    # Obtaining the member '__getitem__' of a type (line 1616)
    getitem___260097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 19), a_260096, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1616)
    subscript_call_result_260098 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 19), getitem___260097, slice_260095)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'd' (line 1616)
    d_260099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 34), 'd')
    slice_260100 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1616, 29), None, d_260099, None)
    # Getting the type of 'pwo' (line 1616)
    pwo_260101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 29), 'pwo')
    # Obtaining the member '__getitem__' of a type (line 1616)
    getitem___260102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 29), pwo_260101, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1616)
    subscript_call_result_260103 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 29), getitem___260102, slice_260100)
    
    # Applying the binary operator '*' (line 1616)
    result_mul_260104 = python_operator(stypy.reporting.localization.Localization(__file__, 1616, 19), '*', subscript_call_result_260098, subscript_call_result_260103)
    
    # Getting the type of 'outa' (line 1616)
    outa_260105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 8), 'outa')
    # Getting the type of 'd' (line 1616)
    d_260106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 14), 'd')
    slice_260107 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1616, 8), None, d_260106, None)
    # Storing an element on a container (line 1616)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1616, 8), outa_260105, (slice_260107, result_mul_260104))
    # SSA join for if statement (line 1607)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to normalize(...): (line 1618)
    # Processing the call arguments (line 1618)
    # Getting the type of 'outb' (line 1618)
    outb_260109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 21), 'outb', False)
    # Getting the type of 'outa' (line 1618)
    outa_260110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 27), 'outa', False)
    # Processing the call keyword arguments (line 1618)
    kwargs_260111 = {}
    # Getting the type of 'normalize' (line 1618)
    normalize_260108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 11), 'normalize', False)
    # Calling normalize(args, kwargs) (line 1618)
    normalize_call_result_260112 = invoke(stypy.reporting.localization.Localization(__file__, 1618, 11), normalize_260108, *[outb_260109, outa_260110], **kwargs_260111)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1618)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1618, 4), 'stypy_return_type', normalize_call_result_260112)
    
    # ################# End of 'lp2hp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lp2hp' in the type store
    # Getting the type of 'stypy_return_type' (line 1587)
    stypy_return_type_260113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_260113)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lp2hp'
    return stypy_return_type_260113

# Assigning a type to the variable 'lp2hp' (line 1587)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 0), 'lp2hp', lp2hp)

@norecursion
def lp2bp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_260114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 19), 'float')
    float_260115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 27), 'float')
    defaults = [float_260114, float_260115]
    # Create a new context for function 'lp2bp'
    module_type_store = module_type_store.open_function_context('lp2bp', 1621, 0, False)
    
    # Passed parameters checking function
    lp2bp.stypy_localization = localization
    lp2bp.stypy_type_of_self = None
    lp2bp.stypy_type_store = module_type_store
    lp2bp.stypy_function_name = 'lp2bp'
    lp2bp.stypy_param_names_list = ['b', 'a', 'wo', 'bw']
    lp2bp.stypy_varargs_param_name = None
    lp2bp.stypy_kwargs_param_name = None
    lp2bp.stypy_call_defaults = defaults
    lp2bp.stypy_call_varargs = varargs
    lp2bp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lp2bp', ['b', 'a', 'wo', 'bw'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lp2bp', localization, ['b', 'a', 'wo', 'bw'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lp2bp(...)' code ##################

    str_260116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1629, (-1)), 'str', "\n    Transform a lowpass filter prototype to a bandpass filter.\n\n    Return an analog band-pass filter with center frequency `wo` and\n    bandwidth `bw` from an analog low-pass filter prototype with unity\n    cutoff frequency, in transfer function ('ba') representation.\n\n    ")
    
    # Assigning a Call to a Tuple (line 1630):
    
    # Assigning a Subscript to a Name (line 1630):
    
    # Obtaining the type of the subscript
    int_260117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 4), 'int')
    
    # Call to map(...): (line 1630)
    # Processing the call arguments (line 1630)
    # Getting the type of 'atleast_1d' (line 1630)
    atleast_1d_260119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1630)
    tuple_260120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1630)
    # Adding element type (line 1630)
    # Getting the type of 'a' (line 1630)
    a_260121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 28), tuple_260120, a_260121)
    # Adding element type (line 1630)
    # Getting the type of 'b' (line 1630)
    b_260122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 31), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 28), tuple_260120, b_260122)
    
    # Processing the call keyword arguments (line 1630)
    kwargs_260123 = {}
    # Getting the type of 'map' (line 1630)
    map_260118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 11), 'map', False)
    # Calling map(args, kwargs) (line 1630)
    map_call_result_260124 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 11), map_260118, *[atleast_1d_260119, tuple_260120], **kwargs_260123)
    
    # Obtaining the member '__getitem__' of a type (line 1630)
    getitem___260125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 4), map_call_result_260124, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1630)
    subscript_call_result_260126 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 4), getitem___260125, int_260117)
    
    # Assigning a type to the variable 'tuple_var_assignment_257326' (line 1630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 4), 'tuple_var_assignment_257326', subscript_call_result_260126)
    
    # Assigning a Subscript to a Name (line 1630):
    
    # Obtaining the type of the subscript
    int_260127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 4), 'int')
    
    # Call to map(...): (line 1630)
    # Processing the call arguments (line 1630)
    # Getting the type of 'atleast_1d' (line 1630)
    atleast_1d_260129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1630)
    tuple_260130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1630)
    # Adding element type (line 1630)
    # Getting the type of 'a' (line 1630)
    a_260131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 28), tuple_260130, a_260131)
    # Adding element type (line 1630)
    # Getting the type of 'b' (line 1630)
    b_260132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 31), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 28), tuple_260130, b_260132)
    
    # Processing the call keyword arguments (line 1630)
    kwargs_260133 = {}
    # Getting the type of 'map' (line 1630)
    map_260128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 11), 'map', False)
    # Calling map(args, kwargs) (line 1630)
    map_call_result_260134 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 11), map_260128, *[atleast_1d_260129, tuple_260130], **kwargs_260133)
    
    # Obtaining the member '__getitem__' of a type (line 1630)
    getitem___260135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 4), map_call_result_260134, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1630)
    subscript_call_result_260136 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 4), getitem___260135, int_260127)
    
    # Assigning a type to the variable 'tuple_var_assignment_257327' (line 1630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 4), 'tuple_var_assignment_257327', subscript_call_result_260136)
    
    # Assigning a Name to a Name (line 1630):
    # Getting the type of 'tuple_var_assignment_257326' (line 1630)
    tuple_var_assignment_257326_260137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 4), 'tuple_var_assignment_257326')
    # Assigning a type to the variable 'a' (line 1630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 4), 'a', tuple_var_assignment_257326_260137)
    
    # Assigning a Name to a Name (line 1630):
    # Getting the type of 'tuple_var_assignment_257327' (line 1630)
    tuple_var_assignment_257327_260138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 4), 'tuple_var_assignment_257327')
    # Assigning a type to the variable 'b' (line 1630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 7), 'b', tuple_var_assignment_257327_260138)
    
    # Assigning a BinOp to a Name (line 1631):
    
    # Assigning a BinOp to a Name (line 1631):
    
    # Call to len(...): (line 1631)
    # Processing the call arguments (line 1631)
    # Getting the type of 'a' (line 1631)
    a_260140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 12), 'a', False)
    # Processing the call keyword arguments (line 1631)
    kwargs_260141 = {}
    # Getting the type of 'len' (line 1631)
    len_260139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 8), 'len', False)
    # Calling len(args, kwargs) (line 1631)
    len_call_result_260142 = invoke(stypy.reporting.localization.Localization(__file__, 1631, 8), len_260139, *[a_260140], **kwargs_260141)
    
    int_260143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 17), 'int')
    # Applying the binary operator '-' (line 1631)
    result_sub_260144 = python_operator(stypy.reporting.localization.Localization(__file__, 1631, 8), '-', len_call_result_260142, int_260143)
    
    # Assigning a type to the variable 'D' (line 1631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1631, 4), 'D', result_sub_260144)
    
    # Assigning a BinOp to a Name (line 1632):
    
    # Assigning a BinOp to a Name (line 1632):
    
    # Call to len(...): (line 1632)
    # Processing the call arguments (line 1632)
    # Getting the type of 'b' (line 1632)
    b_260146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 12), 'b', False)
    # Processing the call keyword arguments (line 1632)
    kwargs_260147 = {}
    # Getting the type of 'len' (line 1632)
    len_260145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 8), 'len', False)
    # Calling len(args, kwargs) (line 1632)
    len_call_result_260148 = invoke(stypy.reporting.localization.Localization(__file__, 1632, 8), len_260145, *[b_260146], **kwargs_260147)
    
    int_260149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1632, 17), 'int')
    # Applying the binary operator '-' (line 1632)
    result_sub_260150 = python_operator(stypy.reporting.localization.Localization(__file__, 1632, 8), '-', len_call_result_260148, int_260149)
    
    # Assigning a type to the variable 'N' (line 1632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1632, 4), 'N', result_sub_260150)
    
    # Assigning a Call to a Name (line 1633):
    
    # Assigning a Call to a Name (line 1633):
    
    # Call to mintypecode(...): (line 1633)
    # Processing the call arguments (line 1633)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1633)
    tuple_260152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1633)
    # Adding element type (line 1633)
    # Getting the type of 'a' (line 1633)
    a_260153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 26), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1633, 26), tuple_260152, a_260153)
    # Adding element type (line 1633)
    # Getting the type of 'b' (line 1633)
    b_260154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 29), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1633, 26), tuple_260152, b_260154)
    
    # Processing the call keyword arguments (line 1633)
    kwargs_260155 = {}
    # Getting the type of 'mintypecode' (line 1633)
    mintypecode_260151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 13), 'mintypecode', False)
    # Calling mintypecode(args, kwargs) (line 1633)
    mintypecode_call_result_260156 = invoke(stypy.reporting.localization.Localization(__file__, 1633, 13), mintypecode_260151, *[tuple_260152], **kwargs_260155)
    
    # Assigning a type to the variable 'artype' (line 1633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 4), 'artype', mintypecode_call_result_260156)
    
    # Assigning a Call to a Name (line 1634):
    
    # Assigning a Call to a Name (line 1634):
    
    # Call to max(...): (line 1634)
    # Processing the call arguments (line 1634)
    
    # Obtaining an instance of the builtin type 'list' (line 1634)
    list_260158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1634)
    # Adding element type (line 1634)
    # Getting the type of 'N' (line 1634)
    N_260159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 14), 'N', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 13), list_260158, N_260159)
    # Adding element type (line 1634)
    # Getting the type of 'D' (line 1634)
    D_260160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 17), 'D', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 13), list_260158, D_260160)
    
    # Processing the call keyword arguments (line 1634)
    kwargs_260161 = {}
    # Getting the type of 'max' (line 1634)
    max_260157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 9), 'max', False)
    # Calling max(args, kwargs) (line 1634)
    max_call_result_260162 = invoke(stypy.reporting.localization.Localization(__file__, 1634, 9), max_260157, *[list_260158], **kwargs_260161)
    
    # Assigning a type to the variable 'ma' (line 1634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 4), 'ma', max_call_result_260162)
    
    # Assigning a BinOp to a Name (line 1635):
    
    # Assigning a BinOp to a Name (line 1635):
    # Getting the type of 'N' (line 1635)
    N_260163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 9), 'N')
    # Getting the type of 'ma' (line 1635)
    ma_260164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 13), 'ma')
    # Applying the binary operator '+' (line 1635)
    result_add_260165 = python_operator(stypy.reporting.localization.Localization(__file__, 1635, 9), '+', N_260163, ma_260164)
    
    # Assigning a type to the variable 'Np' (line 1635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 4), 'Np', result_add_260165)
    
    # Assigning a BinOp to a Name (line 1636):
    
    # Assigning a BinOp to a Name (line 1636):
    # Getting the type of 'D' (line 1636)
    D_260166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 9), 'D')
    # Getting the type of 'ma' (line 1636)
    ma_260167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 13), 'ma')
    # Applying the binary operator '+' (line 1636)
    result_add_260168 = python_operator(stypy.reporting.localization.Localization(__file__, 1636, 9), '+', D_260166, ma_260167)
    
    # Assigning a type to the variable 'Dp' (line 1636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1636, 4), 'Dp', result_add_260168)
    
    # Assigning a Call to a Name (line 1637):
    
    # Assigning a Call to a Name (line 1637):
    
    # Call to zeros(...): (line 1637)
    # Processing the call arguments (line 1637)
    # Getting the type of 'Np' (line 1637)
    Np_260171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 25), 'Np', False)
    int_260172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1637, 30), 'int')
    # Applying the binary operator '+' (line 1637)
    result_add_260173 = python_operator(stypy.reporting.localization.Localization(__file__, 1637, 25), '+', Np_260171, int_260172)
    
    # Getting the type of 'artype' (line 1637)
    artype_260174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 33), 'artype', False)
    # Processing the call keyword arguments (line 1637)
    kwargs_260175 = {}
    # Getting the type of 'numpy' (line 1637)
    numpy_260169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 13), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 1637)
    zeros_260170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 13), numpy_260169, 'zeros')
    # Calling zeros(args, kwargs) (line 1637)
    zeros_call_result_260176 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 13), zeros_260170, *[result_add_260173, artype_260174], **kwargs_260175)
    
    # Assigning a type to the variable 'bprime' (line 1637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 4), 'bprime', zeros_call_result_260176)
    
    # Assigning a Call to a Name (line 1638):
    
    # Assigning a Call to a Name (line 1638):
    
    # Call to zeros(...): (line 1638)
    # Processing the call arguments (line 1638)
    # Getting the type of 'Dp' (line 1638)
    Dp_260179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 25), 'Dp', False)
    int_260180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1638, 30), 'int')
    # Applying the binary operator '+' (line 1638)
    result_add_260181 = python_operator(stypy.reporting.localization.Localization(__file__, 1638, 25), '+', Dp_260179, int_260180)
    
    # Getting the type of 'artype' (line 1638)
    artype_260182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 33), 'artype', False)
    # Processing the call keyword arguments (line 1638)
    kwargs_260183 = {}
    # Getting the type of 'numpy' (line 1638)
    numpy_260177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 13), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 1638)
    zeros_260178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 13), numpy_260177, 'zeros')
    # Calling zeros(args, kwargs) (line 1638)
    zeros_call_result_260184 = invoke(stypy.reporting.localization.Localization(__file__, 1638, 13), zeros_260178, *[result_add_260181, artype_260182], **kwargs_260183)
    
    # Assigning a type to the variable 'aprime' (line 1638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1638, 4), 'aprime', zeros_call_result_260184)
    
    # Assigning a BinOp to a Name (line 1639):
    
    # Assigning a BinOp to a Name (line 1639):
    # Getting the type of 'wo' (line 1639)
    wo_260185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 11), 'wo')
    # Getting the type of 'wo' (line 1639)
    wo_260186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 16), 'wo')
    # Applying the binary operator '*' (line 1639)
    result_mul_260187 = python_operator(stypy.reporting.localization.Localization(__file__, 1639, 11), '*', wo_260185, wo_260186)
    
    # Assigning a type to the variable 'wosq' (line 1639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1639, 4), 'wosq', result_mul_260187)
    
    
    # Call to range(...): (line 1640)
    # Processing the call arguments (line 1640)
    # Getting the type of 'Np' (line 1640)
    Np_260189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 19), 'Np', False)
    int_260190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1640, 24), 'int')
    # Applying the binary operator '+' (line 1640)
    result_add_260191 = python_operator(stypy.reporting.localization.Localization(__file__, 1640, 19), '+', Np_260189, int_260190)
    
    # Processing the call keyword arguments (line 1640)
    kwargs_260192 = {}
    # Getting the type of 'range' (line 1640)
    range_260188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 13), 'range', False)
    # Calling range(args, kwargs) (line 1640)
    range_call_result_260193 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 13), range_260188, *[result_add_260191], **kwargs_260192)
    
    # Testing the type of a for loop iterable (line 1640)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1640, 4), range_call_result_260193)
    # Getting the type of the for loop variable (line 1640)
    for_loop_var_260194 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1640, 4), range_call_result_260193)
    # Assigning a type to the variable 'j' (line 1640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 4), 'j', for_loop_var_260194)
    # SSA begins for a for statement (line 1640)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Num to a Name (line 1641):
    
    # Assigning a Num to a Name (line 1641):
    float_260195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 14), 'float')
    # Assigning a type to the variable 'val' (line 1641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'val', float_260195)
    
    
    # Call to range(...): (line 1642)
    # Processing the call arguments (line 1642)
    int_260197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 23), 'int')
    # Getting the type of 'N' (line 1642)
    N_260198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 26), 'N', False)
    int_260199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 30), 'int')
    # Applying the binary operator '+' (line 1642)
    result_add_260200 = python_operator(stypy.reporting.localization.Localization(__file__, 1642, 26), '+', N_260198, int_260199)
    
    # Processing the call keyword arguments (line 1642)
    kwargs_260201 = {}
    # Getting the type of 'range' (line 1642)
    range_260196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 17), 'range', False)
    # Calling range(args, kwargs) (line 1642)
    range_call_result_260202 = invoke(stypy.reporting.localization.Localization(__file__, 1642, 17), range_260196, *[int_260197, result_add_260200], **kwargs_260201)
    
    # Testing the type of a for loop iterable (line 1642)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1642, 8), range_call_result_260202)
    # Getting the type of the for loop variable (line 1642)
    for_loop_var_260203 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1642, 8), range_call_result_260202)
    # Assigning a type to the variable 'i' (line 1642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1642, 8), 'i', for_loop_var_260203)
    # SSA begins for a for statement (line 1642)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 1643)
    # Processing the call arguments (line 1643)
    int_260205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 27), 'int')
    # Getting the type of 'i' (line 1643)
    i_260206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 30), 'i', False)
    int_260207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 34), 'int')
    # Applying the binary operator '+' (line 1643)
    result_add_260208 = python_operator(stypy.reporting.localization.Localization(__file__, 1643, 30), '+', i_260206, int_260207)
    
    # Processing the call keyword arguments (line 1643)
    kwargs_260209 = {}
    # Getting the type of 'range' (line 1643)
    range_260204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 21), 'range', False)
    # Calling range(args, kwargs) (line 1643)
    range_call_result_260210 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 21), range_260204, *[int_260205, result_add_260208], **kwargs_260209)
    
    # Testing the type of a for loop iterable (line 1643)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1643, 12), range_call_result_260210)
    # Getting the type of the for loop variable (line 1643)
    for_loop_var_260211 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1643, 12), range_call_result_260210)
    # Assigning a type to the variable 'k' (line 1643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 12), 'k', for_loop_var_260211)
    # SSA begins for a for statement (line 1643)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'ma' (line 1644)
    ma_260212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 19), 'ma')
    # Getting the type of 'i' (line 1644)
    i_260213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 24), 'i')
    # Applying the binary operator '-' (line 1644)
    result_sub_260214 = python_operator(stypy.reporting.localization.Localization(__file__, 1644, 19), '-', ma_260212, i_260213)
    
    int_260215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1644, 28), 'int')
    # Getting the type of 'k' (line 1644)
    k_260216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 32), 'k')
    # Applying the binary operator '*' (line 1644)
    result_mul_260217 = python_operator(stypy.reporting.localization.Localization(__file__, 1644, 28), '*', int_260215, k_260216)
    
    # Applying the binary operator '+' (line 1644)
    result_add_260218 = python_operator(stypy.reporting.localization.Localization(__file__, 1644, 26), '+', result_sub_260214, result_mul_260217)
    
    # Getting the type of 'j' (line 1644)
    j_260219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 37), 'j')
    # Applying the binary operator '==' (line 1644)
    result_eq_260220 = python_operator(stypy.reporting.localization.Localization(__file__, 1644, 19), '==', result_add_260218, j_260219)
    
    # Testing the type of an if condition (line 1644)
    if_condition_260221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1644, 16), result_eq_260220)
    # Assigning a type to the variable 'if_condition_260221' (line 1644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1644, 16), 'if_condition_260221', if_condition_260221)
    # SSA begins for if statement (line 1644)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'val' (line 1645)
    val_260222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 20), 'val')
    
    # Call to comb(...): (line 1645)
    # Processing the call arguments (line 1645)
    # Getting the type of 'i' (line 1645)
    i_260224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 32), 'i', False)
    # Getting the type of 'k' (line 1645)
    k_260225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 35), 'k', False)
    # Processing the call keyword arguments (line 1645)
    kwargs_260226 = {}
    # Getting the type of 'comb' (line 1645)
    comb_260223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 27), 'comb', False)
    # Calling comb(args, kwargs) (line 1645)
    comb_call_result_260227 = invoke(stypy.reporting.localization.Localization(__file__, 1645, 27), comb_260223, *[i_260224, k_260225], **kwargs_260226)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'N' (line 1645)
    N_260228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 42), 'N')
    # Getting the type of 'i' (line 1645)
    i_260229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 46), 'i')
    # Applying the binary operator '-' (line 1645)
    result_sub_260230 = python_operator(stypy.reporting.localization.Localization(__file__, 1645, 42), '-', N_260228, i_260229)
    
    # Getting the type of 'b' (line 1645)
    b_260231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 40), 'b')
    # Obtaining the member '__getitem__' of a type (line 1645)
    getitem___260232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 40), b_260231, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1645)
    subscript_call_result_260233 = invoke(stypy.reporting.localization.Localization(__file__, 1645, 40), getitem___260232, result_sub_260230)
    
    # Applying the binary operator '*' (line 1645)
    result_mul_260234 = python_operator(stypy.reporting.localization.Localization(__file__, 1645, 27), '*', comb_call_result_260227, subscript_call_result_260233)
    
    # Getting the type of 'wosq' (line 1645)
    wosq_260235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 52), 'wosq')
    # Getting the type of 'i' (line 1645)
    i_260236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 62), 'i')
    # Getting the type of 'k' (line 1645)
    k_260237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 66), 'k')
    # Applying the binary operator '-' (line 1645)
    result_sub_260238 = python_operator(stypy.reporting.localization.Localization(__file__, 1645, 62), '-', i_260236, k_260237)
    
    # Applying the binary operator '**' (line 1645)
    result_pow_260239 = python_operator(stypy.reporting.localization.Localization(__file__, 1645, 51), '**', wosq_260235, result_sub_260238)
    
    # Applying the binary operator '*' (line 1645)
    result_mul_260240 = python_operator(stypy.reporting.localization.Localization(__file__, 1645, 49), '*', result_mul_260234, result_pow_260239)
    
    # Getting the type of 'bw' (line 1645)
    bw_260241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 71), 'bw')
    # Getting the type of 'i' (line 1645)
    i_260242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 77), 'i')
    # Applying the binary operator '**' (line 1645)
    result_pow_260243 = python_operator(stypy.reporting.localization.Localization(__file__, 1645, 71), '**', bw_260241, i_260242)
    
    # Applying the binary operator 'div' (line 1645)
    result_div_260244 = python_operator(stypy.reporting.localization.Localization(__file__, 1645, 69), 'div', result_mul_260240, result_pow_260243)
    
    # Applying the binary operator '+=' (line 1645)
    result_iadd_260245 = python_operator(stypy.reporting.localization.Localization(__file__, 1645, 20), '+=', val_260222, result_div_260244)
    # Assigning a type to the variable 'val' (line 1645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 20), 'val', result_iadd_260245)
    
    # SSA join for if statement (line 1644)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 1646):
    
    # Assigning a Name to a Subscript (line 1646):
    # Getting the type of 'val' (line 1646)
    val_260246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 25), 'val')
    # Getting the type of 'bprime' (line 1646)
    bprime_260247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 8), 'bprime')
    # Getting the type of 'Np' (line 1646)
    Np_260248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 15), 'Np')
    # Getting the type of 'j' (line 1646)
    j_260249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 20), 'j')
    # Applying the binary operator '-' (line 1646)
    result_sub_260250 = python_operator(stypy.reporting.localization.Localization(__file__, 1646, 15), '-', Np_260248, j_260249)
    
    # Storing an element on a container (line 1646)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1646, 8), bprime_260247, (result_sub_260250, val_260246))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 1647)
    # Processing the call arguments (line 1647)
    # Getting the type of 'Dp' (line 1647)
    Dp_260252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 19), 'Dp', False)
    int_260253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1647, 24), 'int')
    # Applying the binary operator '+' (line 1647)
    result_add_260254 = python_operator(stypy.reporting.localization.Localization(__file__, 1647, 19), '+', Dp_260252, int_260253)
    
    # Processing the call keyword arguments (line 1647)
    kwargs_260255 = {}
    # Getting the type of 'range' (line 1647)
    range_260251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 13), 'range', False)
    # Calling range(args, kwargs) (line 1647)
    range_call_result_260256 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 13), range_260251, *[result_add_260254], **kwargs_260255)
    
    # Testing the type of a for loop iterable (line 1647)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1647, 4), range_call_result_260256)
    # Getting the type of the for loop variable (line 1647)
    for_loop_var_260257 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1647, 4), range_call_result_260256)
    # Assigning a type to the variable 'j' (line 1647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 4), 'j', for_loop_var_260257)
    # SSA begins for a for statement (line 1647)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Num to a Name (line 1648):
    
    # Assigning a Num to a Name (line 1648):
    float_260258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, 14), 'float')
    # Assigning a type to the variable 'val' (line 1648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'val', float_260258)
    
    
    # Call to range(...): (line 1649)
    # Processing the call arguments (line 1649)
    int_260260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 23), 'int')
    # Getting the type of 'D' (line 1649)
    D_260261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 26), 'D', False)
    int_260262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 30), 'int')
    # Applying the binary operator '+' (line 1649)
    result_add_260263 = python_operator(stypy.reporting.localization.Localization(__file__, 1649, 26), '+', D_260261, int_260262)
    
    # Processing the call keyword arguments (line 1649)
    kwargs_260264 = {}
    # Getting the type of 'range' (line 1649)
    range_260259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 17), 'range', False)
    # Calling range(args, kwargs) (line 1649)
    range_call_result_260265 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 17), range_260259, *[int_260260, result_add_260263], **kwargs_260264)
    
    # Testing the type of a for loop iterable (line 1649)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1649, 8), range_call_result_260265)
    # Getting the type of the for loop variable (line 1649)
    for_loop_var_260266 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1649, 8), range_call_result_260265)
    # Assigning a type to the variable 'i' (line 1649)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 8), 'i', for_loop_var_260266)
    # SSA begins for a for statement (line 1649)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 1650)
    # Processing the call arguments (line 1650)
    int_260268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1650, 27), 'int')
    # Getting the type of 'i' (line 1650)
    i_260269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 30), 'i', False)
    int_260270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1650, 34), 'int')
    # Applying the binary operator '+' (line 1650)
    result_add_260271 = python_operator(stypy.reporting.localization.Localization(__file__, 1650, 30), '+', i_260269, int_260270)
    
    # Processing the call keyword arguments (line 1650)
    kwargs_260272 = {}
    # Getting the type of 'range' (line 1650)
    range_260267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 21), 'range', False)
    # Calling range(args, kwargs) (line 1650)
    range_call_result_260273 = invoke(stypy.reporting.localization.Localization(__file__, 1650, 21), range_260267, *[int_260268, result_add_260271], **kwargs_260272)
    
    # Testing the type of a for loop iterable (line 1650)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1650, 12), range_call_result_260273)
    # Getting the type of the for loop variable (line 1650)
    for_loop_var_260274 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1650, 12), range_call_result_260273)
    # Assigning a type to the variable 'k' (line 1650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 12), 'k', for_loop_var_260274)
    # SSA begins for a for statement (line 1650)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'ma' (line 1651)
    ma_260275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 19), 'ma')
    # Getting the type of 'i' (line 1651)
    i_260276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 24), 'i')
    # Applying the binary operator '-' (line 1651)
    result_sub_260277 = python_operator(stypy.reporting.localization.Localization(__file__, 1651, 19), '-', ma_260275, i_260276)
    
    int_260278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1651, 28), 'int')
    # Getting the type of 'k' (line 1651)
    k_260279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 32), 'k')
    # Applying the binary operator '*' (line 1651)
    result_mul_260280 = python_operator(stypy.reporting.localization.Localization(__file__, 1651, 28), '*', int_260278, k_260279)
    
    # Applying the binary operator '+' (line 1651)
    result_add_260281 = python_operator(stypy.reporting.localization.Localization(__file__, 1651, 26), '+', result_sub_260277, result_mul_260280)
    
    # Getting the type of 'j' (line 1651)
    j_260282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 37), 'j')
    # Applying the binary operator '==' (line 1651)
    result_eq_260283 = python_operator(stypy.reporting.localization.Localization(__file__, 1651, 19), '==', result_add_260281, j_260282)
    
    # Testing the type of an if condition (line 1651)
    if_condition_260284 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1651, 16), result_eq_260283)
    # Assigning a type to the variable 'if_condition_260284' (line 1651)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 16), 'if_condition_260284', if_condition_260284)
    # SSA begins for if statement (line 1651)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'val' (line 1652)
    val_260285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 20), 'val')
    
    # Call to comb(...): (line 1652)
    # Processing the call arguments (line 1652)
    # Getting the type of 'i' (line 1652)
    i_260287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 32), 'i', False)
    # Getting the type of 'k' (line 1652)
    k_260288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 35), 'k', False)
    # Processing the call keyword arguments (line 1652)
    kwargs_260289 = {}
    # Getting the type of 'comb' (line 1652)
    comb_260286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 27), 'comb', False)
    # Calling comb(args, kwargs) (line 1652)
    comb_call_result_260290 = invoke(stypy.reporting.localization.Localization(__file__, 1652, 27), comb_260286, *[i_260287, k_260288], **kwargs_260289)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'D' (line 1652)
    D_260291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 42), 'D')
    # Getting the type of 'i' (line 1652)
    i_260292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 46), 'i')
    # Applying the binary operator '-' (line 1652)
    result_sub_260293 = python_operator(stypy.reporting.localization.Localization(__file__, 1652, 42), '-', D_260291, i_260292)
    
    # Getting the type of 'a' (line 1652)
    a_260294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 40), 'a')
    # Obtaining the member '__getitem__' of a type (line 1652)
    getitem___260295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 40), a_260294, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1652)
    subscript_call_result_260296 = invoke(stypy.reporting.localization.Localization(__file__, 1652, 40), getitem___260295, result_sub_260293)
    
    # Applying the binary operator '*' (line 1652)
    result_mul_260297 = python_operator(stypy.reporting.localization.Localization(__file__, 1652, 27), '*', comb_call_result_260290, subscript_call_result_260296)
    
    # Getting the type of 'wosq' (line 1652)
    wosq_260298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 52), 'wosq')
    # Getting the type of 'i' (line 1652)
    i_260299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 62), 'i')
    # Getting the type of 'k' (line 1652)
    k_260300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 66), 'k')
    # Applying the binary operator '-' (line 1652)
    result_sub_260301 = python_operator(stypy.reporting.localization.Localization(__file__, 1652, 62), '-', i_260299, k_260300)
    
    # Applying the binary operator '**' (line 1652)
    result_pow_260302 = python_operator(stypy.reporting.localization.Localization(__file__, 1652, 51), '**', wosq_260298, result_sub_260301)
    
    # Applying the binary operator '*' (line 1652)
    result_mul_260303 = python_operator(stypy.reporting.localization.Localization(__file__, 1652, 49), '*', result_mul_260297, result_pow_260302)
    
    # Getting the type of 'bw' (line 1652)
    bw_260304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 71), 'bw')
    # Getting the type of 'i' (line 1652)
    i_260305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 77), 'i')
    # Applying the binary operator '**' (line 1652)
    result_pow_260306 = python_operator(stypy.reporting.localization.Localization(__file__, 1652, 71), '**', bw_260304, i_260305)
    
    # Applying the binary operator 'div' (line 1652)
    result_div_260307 = python_operator(stypy.reporting.localization.Localization(__file__, 1652, 69), 'div', result_mul_260303, result_pow_260306)
    
    # Applying the binary operator '+=' (line 1652)
    result_iadd_260308 = python_operator(stypy.reporting.localization.Localization(__file__, 1652, 20), '+=', val_260285, result_div_260307)
    # Assigning a type to the variable 'val' (line 1652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1652, 20), 'val', result_iadd_260308)
    
    # SSA join for if statement (line 1651)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 1653):
    
    # Assigning a Name to a Subscript (line 1653):
    # Getting the type of 'val' (line 1653)
    val_260309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 25), 'val')
    # Getting the type of 'aprime' (line 1653)
    aprime_260310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 8), 'aprime')
    # Getting the type of 'Dp' (line 1653)
    Dp_260311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 15), 'Dp')
    # Getting the type of 'j' (line 1653)
    j_260312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 20), 'j')
    # Applying the binary operator '-' (line 1653)
    result_sub_260313 = python_operator(stypy.reporting.localization.Localization(__file__, 1653, 15), '-', Dp_260311, j_260312)
    
    # Storing an element on a container (line 1653)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1653, 8), aprime_260310, (result_sub_260313, val_260309))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to normalize(...): (line 1655)
    # Processing the call arguments (line 1655)
    # Getting the type of 'bprime' (line 1655)
    bprime_260315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 21), 'bprime', False)
    # Getting the type of 'aprime' (line 1655)
    aprime_260316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 29), 'aprime', False)
    # Processing the call keyword arguments (line 1655)
    kwargs_260317 = {}
    # Getting the type of 'normalize' (line 1655)
    normalize_260314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 11), 'normalize', False)
    # Calling normalize(args, kwargs) (line 1655)
    normalize_call_result_260318 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 11), normalize_260314, *[bprime_260315, aprime_260316], **kwargs_260317)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1655)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1655, 4), 'stypy_return_type', normalize_call_result_260318)
    
    # ################# End of 'lp2bp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lp2bp' in the type store
    # Getting the type of 'stypy_return_type' (line 1621)
    stypy_return_type_260319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_260319)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lp2bp'
    return stypy_return_type_260319

# Assigning a type to the variable 'lp2bp' (line 1621)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 0), 'lp2bp', lp2bp)

@norecursion
def lp2bs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_260320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1658, 19), 'float')
    float_260321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1658, 27), 'float')
    defaults = [float_260320, float_260321]
    # Create a new context for function 'lp2bs'
    module_type_store = module_type_store.open_function_context('lp2bs', 1658, 0, False)
    
    # Passed parameters checking function
    lp2bs.stypy_localization = localization
    lp2bs.stypy_type_of_self = None
    lp2bs.stypy_type_store = module_type_store
    lp2bs.stypy_function_name = 'lp2bs'
    lp2bs.stypy_param_names_list = ['b', 'a', 'wo', 'bw']
    lp2bs.stypy_varargs_param_name = None
    lp2bs.stypy_kwargs_param_name = None
    lp2bs.stypy_call_defaults = defaults
    lp2bs.stypy_call_varargs = varargs
    lp2bs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lp2bs', ['b', 'a', 'wo', 'bw'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lp2bs', localization, ['b', 'a', 'wo', 'bw'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lp2bs(...)' code ##################

    str_260322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1666, (-1)), 'str', "\n    Transform a lowpass filter prototype to a bandstop filter.\n\n    Return an analog band-stop filter with center frequency `wo` and\n    bandwidth `bw` from an analog low-pass filter prototype with unity\n    cutoff frequency, in transfer function ('ba') representation.\n\n    ")
    
    # Assigning a Call to a Tuple (line 1667):
    
    # Assigning a Subscript to a Name (line 1667):
    
    # Obtaining the type of the subscript
    int_260323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 4), 'int')
    
    # Call to map(...): (line 1667)
    # Processing the call arguments (line 1667)
    # Getting the type of 'atleast_1d' (line 1667)
    atleast_1d_260325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1667)
    tuple_260326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1667)
    # Adding element type (line 1667)
    # Getting the type of 'a' (line 1667)
    a_260327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 28), tuple_260326, a_260327)
    # Adding element type (line 1667)
    # Getting the type of 'b' (line 1667)
    b_260328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 31), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 28), tuple_260326, b_260328)
    
    # Processing the call keyword arguments (line 1667)
    kwargs_260329 = {}
    # Getting the type of 'map' (line 1667)
    map_260324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 11), 'map', False)
    # Calling map(args, kwargs) (line 1667)
    map_call_result_260330 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 11), map_260324, *[atleast_1d_260325, tuple_260326], **kwargs_260329)
    
    # Obtaining the member '__getitem__' of a type (line 1667)
    getitem___260331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 4), map_call_result_260330, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1667)
    subscript_call_result_260332 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 4), getitem___260331, int_260323)
    
    # Assigning a type to the variable 'tuple_var_assignment_257328' (line 1667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 4), 'tuple_var_assignment_257328', subscript_call_result_260332)
    
    # Assigning a Subscript to a Name (line 1667):
    
    # Obtaining the type of the subscript
    int_260333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 4), 'int')
    
    # Call to map(...): (line 1667)
    # Processing the call arguments (line 1667)
    # Getting the type of 'atleast_1d' (line 1667)
    atleast_1d_260335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1667)
    tuple_260336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1667)
    # Adding element type (line 1667)
    # Getting the type of 'a' (line 1667)
    a_260337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 28), tuple_260336, a_260337)
    # Adding element type (line 1667)
    # Getting the type of 'b' (line 1667)
    b_260338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 31), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1667, 28), tuple_260336, b_260338)
    
    # Processing the call keyword arguments (line 1667)
    kwargs_260339 = {}
    # Getting the type of 'map' (line 1667)
    map_260334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 11), 'map', False)
    # Calling map(args, kwargs) (line 1667)
    map_call_result_260340 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 11), map_260334, *[atleast_1d_260335, tuple_260336], **kwargs_260339)
    
    # Obtaining the member '__getitem__' of a type (line 1667)
    getitem___260341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 4), map_call_result_260340, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1667)
    subscript_call_result_260342 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 4), getitem___260341, int_260333)
    
    # Assigning a type to the variable 'tuple_var_assignment_257329' (line 1667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 4), 'tuple_var_assignment_257329', subscript_call_result_260342)
    
    # Assigning a Name to a Name (line 1667):
    # Getting the type of 'tuple_var_assignment_257328' (line 1667)
    tuple_var_assignment_257328_260343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 4), 'tuple_var_assignment_257328')
    # Assigning a type to the variable 'a' (line 1667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 4), 'a', tuple_var_assignment_257328_260343)
    
    # Assigning a Name to a Name (line 1667):
    # Getting the type of 'tuple_var_assignment_257329' (line 1667)
    tuple_var_assignment_257329_260344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 4), 'tuple_var_assignment_257329')
    # Assigning a type to the variable 'b' (line 1667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 7), 'b', tuple_var_assignment_257329_260344)
    
    # Assigning a BinOp to a Name (line 1668):
    
    # Assigning a BinOp to a Name (line 1668):
    
    # Call to len(...): (line 1668)
    # Processing the call arguments (line 1668)
    # Getting the type of 'a' (line 1668)
    a_260346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 12), 'a', False)
    # Processing the call keyword arguments (line 1668)
    kwargs_260347 = {}
    # Getting the type of 'len' (line 1668)
    len_260345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 8), 'len', False)
    # Calling len(args, kwargs) (line 1668)
    len_call_result_260348 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 8), len_260345, *[a_260346], **kwargs_260347)
    
    int_260349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 17), 'int')
    # Applying the binary operator '-' (line 1668)
    result_sub_260350 = python_operator(stypy.reporting.localization.Localization(__file__, 1668, 8), '-', len_call_result_260348, int_260349)
    
    # Assigning a type to the variable 'D' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 4), 'D', result_sub_260350)
    
    # Assigning a BinOp to a Name (line 1669):
    
    # Assigning a BinOp to a Name (line 1669):
    
    # Call to len(...): (line 1669)
    # Processing the call arguments (line 1669)
    # Getting the type of 'b' (line 1669)
    b_260352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 12), 'b', False)
    # Processing the call keyword arguments (line 1669)
    kwargs_260353 = {}
    # Getting the type of 'len' (line 1669)
    len_260351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 8), 'len', False)
    # Calling len(args, kwargs) (line 1669)
    len_call_result_260354 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 8), len_260351, *[b_260352], **kwargs_260353)
    
    int_260355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1669, 17), 'int')
    # Applying the binary operator '-' (line 1669)
    result_sub_260356 = python_operator(stypy.reporting.localization.Localization(__file__, 1669, 8), '-', len_call_result_260354, int_260355)
    
    # Assigning a type to the variable 'N' (line 1669)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 4), 'N', result_sub_260356)
    
    # Assigning a Call to a Name (line 1670):
    
    # Assigning a Call to a Name (line 1670):
    
    # Call to mintypecode(...): (line 1670)
    # Processing the call arguments (line 1670)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1670)
    tuple_260358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1670, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1670)
    # Adding element type (line 1670)
    # Getting the type of 'a' (line 1670)
    a_260359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 26), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1670, 26), tuple_260358, a_260359)
    # Adding element type (line 1670)
    # Getting the type of 'b' (line 1670)
    b_260360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 29), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1670, 26), tuple_260358, b_260360)
    
    # Processing the call keyword arguments (line 1670)
    kwargs_260361 = {}
    # Getting the type of 'mintypecode' (line 1670)
    mintypecode_260357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 13), 'mintypecode', False)
    # Calling mintypecode(args, kwargs) (line 1670)
    mintypecode_call_result_260362 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 13), mintypecode_260357, *[tuple_260358], **kwargs_260361)
    
    # Assigning a type to the variable 'artype' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 4), 'artype', mintypecode_call_result_260362)
    
    # Assigning a Call to a Name (line 1671):
    
    # Assigning a Call to a Name (line 1671):
    
    # Call to max(...): (line 1671)
    # Processing the call arguments (line 1671)
    
    # Obtaining an instance of the builtin type 'list' (line 1671)
    list_260364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1671)
    # Adding element type (line 1671)
    # Getting the type of 'N' (line 1671)
    N_260365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 13), 'N', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 12), list_260364, N_260365)
    # Adding element type (line 1671)
    # Getting the type of 'D' (line 1671)
    D_260366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 16), 'D', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 12), list_260364, D_260366)
    
    # Processing the call keyword arguments (line 1671)
    kwargs_260367 = {}
    # Getting the type of 'max' (line 1671)
    max_260363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 8), 'max', False)
    # Calling max(args, kwargs) (line 1671)
    max_call_result_260368 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 8), max_260363, *[list_260364], **kwargs_260367)
    
    # Assigning a type to the variable 'M' (line 1671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 4), 'M', max_call_result_260368)
    
    # Assigning a BinOp to a Name (line 1672):
    
    # Assigning a BinOp to a Name (line 1672):
    # Getting the type of 'M' (line 1672)
    M_260369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 9), 'M')
    # Getting the type of 'M' (line 1672)
    M_260370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 13), 'M')
    # Applying the binary operator '+' (line 1672)
    result_add_260371 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 9), '+', M_260369, M_260370)
    
    # Assigning a type to the variable 'Np' (line 1672)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 4), 'Np', result_add_260371)
    
    # Assigning a BinOp to a Name (line 1673):
    
    # Assigning a BinOp to a Name (line 1673):
    # Getting the type of 'M' (line 1673)
    M_260372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 9), 'M')
    # Getting the type of 'M' (line 1673)
    M_260373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 13), 'M')
    # Applying the binary operator '+' (line 1673)
    result_add_260374 = python_operator(stypy.reporting.localization.Localization(__file__, 1673, 9), '+', M_260372, M_260373)
    
    # Assigning a type to the variable 'Dp' (line 1673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 4), 'Dp', result_add_260374)
    
    # Assigning a Call to a Name (line 1674):
    
    # Assigning a Call to a Name (line 1674):
    
    # Call to zeros(...): (line 1674)
    # Processing the call arguments (line 1674)
    # Getting the type of 'Np' (line 1674)
    Np_260377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 25), 'Np', False)
    int_260378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 30), 'int')
    # Applying the binary operator '+' (line 1674)
    result_add_260379 = python_operator(stypy.reporting.localization.Localization(__file__, 1674, 25), '+', Np_260377, int_260378)
    
    # Getting the type of 'artype' (line 1674)
    artype_260380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 33), 'artype', False)
    # Processing the call keyword arguments (line 1674)
    kwargs_260381 = {}
    # Getting the type of 'numpy' (line 1674)
    numpy_260375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 13), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 1674)
    zeros_260376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 13), numpy_260375, 'zeros')
    # Calling zeros(args, kwargs) (line 1674)
    zeros_call_result_260382 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 13), zeros_260376, *[result_add_260379, artype_260380], **kwargs_260381)
    
    # Assigning a type to the variable 'bprime' (line 1674)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 4), 'bprime', zeros_call_result_260382)
    
    # Assigning a Call to a Name (line 1675):
    
    # Assigning a Call to a Name (line 1675):
    
    # Call to zeros(...): (line 1675)
    # Processing the call arguments (line 1675)
    # Getting the type of 'Dp' (line 1675)
    Dp_260385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 25), 'Dp', False)
    int_260386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1675, 30), 'int')
    # Applying the binary operator '+' (line 1675)
    result_add_260387 = python_operator(stypy.reporting.localization.Localization(__file__, 1675, 25), '+', Dp_260385, int_260386)
    
    # Getting the type of 'artype' (line 1675)
    artype_260388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 33), 'artype', False)
    # Processing the call keyword arguments (line 1675)
    kwargs_260389 = {}
    # Getting the type of 'numpy' (line 1675)
    numpy_260383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 13), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 1675)
    zeros_260384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 13), numpy_260383, 'zeros')
    # Calling zeros(args, kwargs) (line 1675)
    zeros_call_result_260390 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 13), zeros_260384, *[result_add_260387, artype_260388], **kwargs_260389)
    
    # Assigning a type to the variable 'aprime' (line 1675)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 4), 'aprime', zeros_call_result_260390)
    
    # Assigning a BinOp to a Name (line 1676):
    
    # Assigning a BinOp to a Name (line 1676):
    # Getting the type of 'wo' (line 1676)
    wo_260391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 11), 'wo')
    # Getting the type of 'wo' (line 1676)
    wo_260392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 16), 'wo')
    # Applying the binary operator '*' (line 1676)
    result_mul_260393 = python_operator(stypy.reporting.localization.Localization(__file__, 1676, 11), '*', wo_260391, wo_260392)
    
    # Assigning a type to the variable 'wosq' (line 1676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 4), 'wosq', result_mul_260393)
    
    
    # Call to range(...): (line 1677)
    # Processing the call arguments (line 1677)
    # Getting the type of 'Np' (line 1677)
    Np_260395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 19), 'Np', False)
    int_260396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 24), 'int')
    # Applying the binary operator '+' (line 1677)
    result_add_260397 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 19), '+', Np_260395, int_260396)
    
    # Processing the call keyword arguments (line 1677)
    kwargs_260398 = {}
    # Getting the type of 'range' (line 1677)
    range_260394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 13), 'range', False)
    # Calling range(args, kwargs) (line 1677)
    range_call_result_260399 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 13), range_260394, *[result_add_260397], **kwargs_260398)
    
    # Testing the type of a for loop iterable (line 1677)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1677, 4), range_call_result_260399)
    # Getting the type of the for loop variable (line 1677)
    for_loop_var_260400 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1677, 4), range_call_result_260399)
    # Assigning a type to the variable 'j' (line 1677)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 4), 'j', for_loop_var_260400)
    # SSA begins for a for statement (line 1677)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Num to a Name (line 1678):
    
    # Assigning a Num to a Name (line 1678):
    float_260401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1678, 14), 'float')
    # Assigning a type to the variable 'val' (line 1678)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1678, 8), 'val', float_260401)
    
    
    # Call to range(...): (line 1679)
    # Processing the call arguments (line 1679)
    int_260403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 23), 'int')
    # Getting the type of 'N' (line 1679)
    N_260404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 26), 'N', False)
    int_260405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 30), 'int')
    # Applying the binary operator '+' (line 1679)
    result_add_260406 = python_operator(stypy.reporting.localization.Localization(__file__, 1679, 26), '+', N_260404, int_260405)
    
    # Processing the call keyword arguments (line 1679)
    kwargs_260407 = {}
    # Getting the type of 'range' (line 1679)
    range_260402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 17), 'range', False)
    # Calling range(args, kwargs) (line 1679)
    range_call_result_260408 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 17), range_260402, *[int_260403, result_add_260406], **kwargs_260407)
    
    # Testing the type of a for loop iterable (line 1679)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1679, 8), range_call_result_260408)
    # Getting the type of the for loop variable (line 1679)
    for_loop_var_260409 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1679, 8), range_call_result_260408)
    # Assigning a type to the variable 'i' (line 1679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 8), 'i', for_loop_var_260409)
    # SSA begins for a for statement (line 1679)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 1680)
    # Processing the call arguments (line 1680)
    int_260411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 27), 'int')
    # Getting the type of 'M' (line 1680)
    M_260412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 30), 'M', False)
    # Getting the type of 'i' (line 1680)
    i_260413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 34), 'i', False)
    # Applying the binary operator '-' (line 1680)
    result_sub_260414 = python_operator(stypy.reporting.localization.Localization(__file__, 1680, 30), '-', M_260412, i_260413)
    
    int_260415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 38), 'int')
    # Applying the binary operator '+' (line 1680)
    result_add_260416 = python_operator(stypy.reporting.localization.Localization(__file__, 1680, 36), '+', result_sub_260414, int_260415)
    
    # Processing the call keyword arguments (line 1680)
    kwargs_260417 = {}
    # Getting the type of 'range' (line 1680)
    range_260410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 21), 'range', False)
    # Calling range(args, kwargs) (line 1680)
    range_call_result_260418 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 21), range_260410, *[int_260411, result_add_260416], **kwargs_260417)
    
    # Testing the type of a for loop iterable (line 1680)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1680, 12), range_call_result_260418)
    # Getting the type of the for loop variable (line 1680)
    for_loop_var_260419 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1680, 12), range_call_result_260418)
    # Assigning a type to the variable 'k' (line 1680)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 12), 'k', for_loop_var_260419)
    # SSA begins for a for statement (line 1680)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'i' (line 1681)
    i_260420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 19), 'i')
    int_260421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 23), 'int')
    # Getting the type of 'k' (line 1681)
    k_260422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 27), 'k')
    # Applying the binary operator '*' (line 1681)
    result_mul_260423 = python_operator(stypy.reporting.localization.Localization(__file__, 1681, 23), '*', int_260421, k_260422)
    
    # Applying the binary operator '+' (line 1681)
    result_add_260424 = python_operator(stypy.reporting.localization.Localization(__file__, 1681, 19), '+', i_260420, result_mul_260423)
    
    # Getting the type of 'j' (line 1681)
    j_260425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 32), 'j')
    # Applying the binary operator '==' (line 1681)
    result_eq_260426 = python_operator(stypy.reporting.localization.Localization(__file__, 1681, 19), '==', result_add_260424, j_260425)
    
    # Testing the type of an if condition (line 1681)
    if_condition_260427 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1681, 16), result_eq_260426)
    # Assigning a type to the variable 'if_condition_260427' (line 1681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 16), 'if_condition_260427', if_condition_260427)
    # SSA begins for if statement (line 1681)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'val' (line 1682)
    val_260428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 20), 'val')
    
    # Call to comb(...): (line 1682)
    # Processing the call arguments (line 1682)
    # Getting the type of 'M' (line 1682)
    M_260430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 33), 'M', False)
    # Getting the type of 'i' (line 1682)
    i_260431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 37), 'i', False)
    # Applying the binary operator '-' (line 1682)
    result_sub_260432 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 33), '-', M_260430, i_260431)
    
    # Getting the type of 'k' (line 1682)
    k_260433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 40), 'k', False)
    # Processing the call keyword arguments (line 1682)
    kwargs_260434 = {}
    # Getting the type of 'comb' (line 1682)
    comb_260429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 28), 'comb', False)
    # Calling comb(args, kwargs) (line 1682)
    comb_call_result_260435 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 28), comb_260429, *[result_sub_260432, k_260433], **kwargs_260434)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'N' (line 1682)
    N_260436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 47), 'N')
    # Getting the type of 'i' (line 1682)
    i_260437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 51), 'i')
    # Applying the binary operator '-' (line 1682)
    result_sub_260438 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 47), '-', N_260436, i_260437)
    
    # Getting the type of 'b' (line 1682)
    b_260439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 45), 'b')
    # Obtaining the member '__getitem__' of a type (line 1682)
    getitem___260440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1682, 45), b_260439, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1682)
    subscript_call_result_260441 = invoke(stypy.reporting.localization.Localization(__file__, 1682, 45), getitem___260440, result_sub_260438)
    
    # Applying the binary operator '*' (line 1682)
    result_mul_260442 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 28), '*', comb_call_result_260435, subscript_call_result_260441)
    
    # Getting the type of 'wosq' (line 1683)
    wosq_260443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 29), 'wosq')
    # Getting the type of 'M' (line 1683)
    M_260444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 39), 'M')
    # Getting the type of 'i' (line 1683)
    i_260445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 43), 'i')
    # Applying the binary operator '-' (line 1683)
    result_sub_260446 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 39), '-', M_260444, i_260445)
    
    # Getting the type of 'k' (line 1683)
    k_260447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 47), 'k')
    # Applying the binary operator '-' (line 1683)
    result_sub_260448 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 45), '-', result_sub_260446, k_260447)
    
    # Applying the binary operator '**' (line 1683)
    result_pow_260449 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 28), '**', wosq_260443, result_sub_260448)
    
    # Applying the binary operator '*' (line 1682)
    result_mul_260450 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 54), '*', result_mul_260442, result_pow_260449)
    
    # Getting the type of 'bw' (line 1683)
    bw_260451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 52), 'bw')
    # Getting the type of 'i' (line 1683)
    i_260452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 58), 'i')
    # Applying the binary operator '**' (line 1683)
    result_pow_260453 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 52), '**', bw_260451, i_260452)
    
    # Applying the binary operator '*' (line 1683)
    result_mul_260454 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 50), '*', result_mul_260450, result_pow_260453)
    
    # Applying the binary operator '+=' (line 1682)
    result_iadd_260455 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 20), '+=', val_260428, result_mul_260454)
    # Assigning a type to the variable 'val' (line 1682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 20), 'val', result_iadd_260455)
    
    # SSA join for if statement (line 1681)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 1684):
    
    # Assigning a Name to a Subscript (line 1684):
    # Getting the type of 'val' (line 1684)
    val_260456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 25), 'val')
    # Getting the type of 'bprime' (line 1684)
    bprime_260457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 8), 'bprime')
    # Getting the type of 'Np' (line 1684)
    Np_260458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 15), 'Np')
    # Getting the type of 'j' (line 1684)
    j_260459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 20), 'j')
    # Applying the binary operator '-' (line 1684)
    result_sub_260460 = python_operator(stypy.reporting.localization.Localization(__file__, 1684, 15), '-', Np_260458, j_260459)
    
    # Storing an element on a container (line 1684)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1684, 8), bprime_260457, (result_sub_260460, val_260456))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 1685)
    # Processing the call arguments (line 1685)
    # Getting the type of 'Dp' (line 1685)
    Dp_260462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 19), 'Dp', False)
    int_260463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1685, 24), 'int')
    # Applying the binary operator '+' (line 1685)
    result_add_260464 = python_operator(stypy.reporting.localization.Localization(__file__, 1685, 19), '+', Dp_260462, int_260463)
    
    # Processing the call keyword arguments (line 1685)
    kwargs_260465 = {}
    # Getting the type of 'range' (line 1685)
    range_260461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 13), 'range', False)
    # Calling range(args, kwargs) (line 1685)
    range_call_result_260466 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 13), range_260461, *[result_add_260464], **kwargs_260465)
    
    # Testing the type of a for loop iterable (line 1685)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1685, 4), range_call_result_260466)
    # Getting the type of the for loop variable (line 1685)
    for_loop_var_260467 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1685, 4), range_call_result_260466)
    # Assigning a type to the variable 'j' (line 1685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 4), 'j', for_loop_var_260467)
    # SSA begins for a for statement (line 1685)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Num to a Name (line 1686):
    
    # Assigning a Num to a Name (line 1686):
    float_260468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1686, 14), 'float')
    # Assigning a type to the variable 'val' (line 1686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 8), 'val', float_260468)
    
    
    # Call to range(...): (line 1687)
    # Processing the call arguments (line 1687)
    int_260470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 23), 'int')
    # Getting the type of 'D' (line 1687)
    D_260471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 26), 'D', False)
    int_260472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 30), 'int')
    # Applying the binary operator '+' (line 1687)
    result_add_260473 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 26), '+', D_260471, int_260472)
    
    # Processing the call keyword arguments (line 1687)
    kwargs_260474 = {}
    # Getting the type of 'range' (line 1687)
    range_260469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 17), 'range', False)
    # Calling range(args, kwargs) (line 1687)
    range_call_result_260475 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 17), range_260469, *[int_260470, result_add_260473], **kwargs_260474)
    
    # Testing the type of a for loop iterable (line 1687)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1687, 8), range_call_result_260475)
    # Getting the type of the for loop variable (line 1687)
    for_loop_var_260476 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1687, 8), range_call_result_260475)
    # Assigning a type to the variable 'i' (line 1687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 8), 'i', for_loop_var_260476)
    # SSA begins for a for statement (line 1687)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 1688)
    # Processing the call arguments (line 1688)
    int_260478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 27), 'int')
    # Getting the type of 'M' (line 1688)
    M_260479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 30), 'M', False)
    # Getting the type of 'i' (line 1688)
    i_260480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 34), 'i', False)
    # Applying the binary operator '-' (line 1688)
    result_sub_260481 = python_operator(stypy.reporting.localization.Localization(__file__, 1688, 30), '-', M_260479, i_260480)
    
    int_260482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 38), 'int')
    # Applying the binary operator '+' (line 1688)
    result_add_260483 = python_operator(stypy.reporting.localization.Localization(__file__, 1688, 36), '+', result_sub_260481, int_260482)
    
    # Processing the call keyword arguments (line 1688)
    kwargs_260484 = {}
    # Getting the type of 'range' (line 1688)
    range_260477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 21), 'range', False)
    # Calling range(args, kwargs) (line 1688)
    range_call_result_260485 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 21), range_260477, *[int_260478, result_add_260483], **kwargs_260484)
    
    # Testing the type of a for loop iterable (line 1688)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1688, 12), range_call_result_260485)
    # Getting the type of the for loop variable (line 1688)
    for_loop_var_260486 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1688, 12), range_call_result_260485)
    # Assigning a type to the variable 'k' (line 1688)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 12), 'k', for_loop_var_260486)
    # SSA begins for a for statement (line 1688)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'i' (line 1689)
    i_260487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 19), 'i')
    int_260488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1689, 23), 'int')
    # Getting the type of 'k' (line 1689)
    k_260489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 27), 'k')
    # Applying the binary operator '*' (line 1689)
    result_mul_260490 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 23), '*', int_260488, k_260489)
    
    # Applying the binary operator '+' (line 1689)
    result_add_260491 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 19), '+', i_260487, result_mul_260490)
    
    # Getting the type of 'j' (line 1689)
    j_260492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 32), 'j')
    # Applying the binary operator '==' (line 1689)
    result_eq_260493 = python_operator(stypy.reporting.localization.Localization(__file__, 1689, 19), '==', result_add_260491, j_260492)
    
    # Testing the type of an if condition (line 1689)
    if_condition_260494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1689, 16), result_eq_260493)
    # Assigning a type to the variable 'if_condition_260494' (line 1689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 16), 'if_condition_260494', if_condition_260494)
    # SSA begins for if statement (line 1689)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'val' (line 1690)
    val_260495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 20), 'val')
    
    # Call to comb(...): (line 1690)
    # Processing the call arguments (line 1690)
    # Getting the type of 'M' (line 1690)
    M_260497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 33), 'M', False)
    # Getting the type of 'i' (line 1690)
    i_260498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 37), 'i', False)
    # Applying the binary operator '-' (line 1690)
    result_sub_260499 = python_operator(stypy.reporting.localization.Localization(__file__, 1690, 33), '-', M_260497, i_260498)
    
    # Getting the type of 'k' (line 1690)
    k_260500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 40), 'k', False)
    # Processing the call keyword arguments (line 1690)
    kwargs_260501 = {}
    # Getting the type of 'comb' (line 1690)
    comb_260496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 28), 'comb', False)
    # Calling comb(args, kwargs) (line 1690)
    comb_call_result_260502 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 28), comb_260496, *[result_sub_260499, k_260500], **kwargs_260501)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'D' (line 1690)
    D_260503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 47), 'D')
    # Getting the type of 'i' (line 1690)
    i_260504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 51), 'i')
    # Applying the binary operator '-' (line 1690)
    result_sub_260505 = python_operator(stypy.reporting.localization.Localization(__file__, 1690, 47), '-', D_260503, i_260504)
    
    # Getting the type of 'a' (line 1690)
    a_260506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 45), 'a')
    # Obtaining the member '__getitem__' of a type (line 1690)
    getitem___260507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 45), a_260506, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1690)
    subscript_call_result_260508 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 45), getitem___260507, result_sub_260505)
    
    # Applying the binary operator '*' (line 1690)
    result_mul_260509 = python_operator(stypy.reporting.localization.Localization(__file__, 1690, 28), '*', comb_call_result_260502, subscript_call_result_260508)
    
    # Getting the type of 'wosq' (line 1691)
    wosq_260510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 29), 'wosq')
    # Getting the type of 'M' (line 1691)
    M_260511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 39), 'M')
    # Getting the type of 'i' (line 1691)
    i_260512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 43), 'i')
    # Applying the binary operator '-' (line 1691)
    result_sub_260513 = python_operator(stypy.reporting.localization.Localization(__file__, 1691, 39), '-', M_260511, i_260512)
    
    # Getting the type of 'k' (line 1691)
    k_260514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 47), 'k')
    # Applying the binary operator '-' (line 1691)
    result_sub_260515 = python_operator(stypy.reporting.localization.Localization(__file__, 1691, 45), '-', result_sub_260513, k_260514)
    
    # Applying the binary operator '**' (line 1691)
    result_pow_260516 = python_operator(stypy.reporting.localization.Localization(__file__, 1691, 28), '**', wosq_260510, result_sub_260515)
    
    # Applying the binary operator '*' (line 1690)
    result_mul_260517 = python_operator(stypy.reporting.localization.Localization(__file__, 1690, 54), '*', result_mul_260509, result_pow_260516)
    
    # Getting the type of 'bw' (line 1691)
    bw_260518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 52), 'bw')
    # Getting the type of 'i' (line 1691)
    i_260519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 58), 'i')
    # Applying the binary operator '**' (line 1691)
    result_pow_260520 = python_operator(stypy.reporting.localization.Localization(__file__, 1691, 52), '**', bw_260518, i_260519)
    
    # Applying the binary operator '*' (line 1691)
    result_mul_260521 = python_operator(stypy.reporting.localization.Localization(__file__, 1691, 50), '*', result_mul_260517, result_pow_260520)
    
    # Applying the binary operator '+=' (line 1690)
    result_iadd_260522 = python_operator(stypy.reporting.localization.Localization(__file__, 1690, 20), '+=', val_260495, result_mul_260521)
    # Assigning a type to the variable 'val' (line 1690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 20), 'val', result_iadd_260522)
    
    # SSA join for if statement (line 1689)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 1692):
    
    # Assigning a Name to a Subscript (line 1692):
    # Getting the type of 'val' (line 1692)
    val_260523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 25), 'val')
    # Getting the type of 'aprime' (line 1692)
    aprime_260524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 8), 'aprime')
    # Getting the type of 'Dp' (line 1692)
    Dp_260525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 15), 'Dp')
    # Getting the type of 'j' (line 1692)
    j_260526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 20), 'j')
    # Applying the binary operator '-' (line 1692)
    result_sub_260527 = python_operator(stypy.reporting.localization.Localization(__file__, 1692, 15), '-', Dp_260525, j_260526)
    
    # Storing an element on a container (line 1692)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1692, 8), aprime_260524, (result_sub_260527, val_260523))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to normalize(...): (line 1694)
    # Processing the call arguments (line 1694)
    # Getting the type of 'bprime' (line 1694)
    bprime_260529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 21), 'bprime', False)
    # Getting the type of 'aprime' (line 1694)
    aprime_260530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 29), 'aprime', False)
    # Processing the call keyword arguments (line 1694)
    kwargs_260531 = {}
    # Getting the type of 'normalize' (line 1694)
    normalize_260528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 11), 'normalize', False)
    # Calling normalize(args, kwargs) (line 1694)
    normalize_call_result_260532 = invoke(stypy.reporting.localization.Localization(__file__, 1694, 11), normalize_260528, *[bprime_260529, aprime_260530], **kwargs_260531)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1694, 4), 'stypy_return_type', normalize_call_result_260532)
    
    # ################# End of 'lp2bs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lp2bs' in the type store
    # Getting the type of 'stypy_return_type' (line 1658)
    stypy_return_type_260533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_260533)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lp2bs'
    return stypy_return_type_260533

# Assigning a type to the variable 'lp2bs' (line 1658)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 0), 'lp2bs', lp2bs)

@norecursion
def bilinear(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_260534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1697, 22), 'float')
    defaults = [float_260534]
    # Create a new context for function 'bilinear'
    module_type_store = module_type_store.open_function_context('bilinear', 1697, 0, False)
    
    # Passed parameters checking function
    bilinear.stypy_localization = localization
    bilinear.stypy_type_of_self = None
    bilinear.stypy_type_store = module_type_store
    bilinear.stypy_function_name = 'bilinear'
    bilinear.stypy_param_names_list = ['b', 'a', 'fs']
    bilinear.stypy_varargs_param_name = None
    bilinear.stypy_kwargs_param_name = None
    bilinear.stypy_call_defaults = defaults
    bilinear.stypy_call_varargs = varargs
    bilinear.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bilinear', ['b', 'a', 'fs'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bilinear', localization, ['b', 'a', 'fs'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bilinear(...)' code ##################

    str_260535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1701, (-1)), 'str', 'Return a digital filter from an analog one using a bilinear transform.\n\n    The bilinear transform substitutes ``(z-1) / (z+1)`` for ``s``.\n    ')
    
    # Assigning a Call to a Name (line 1702):
    
    # Assigning a Call to a Name (line 1702):
    
    # Call to float(...): (line 1702)
    # Processing the call arguments (line 1702)
    # Getting the type of 'fs' (line 1702)
    fs_260537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 15), 'fs', False)
    # Processing the call keyword arguments (line 1702)
    kwargs_260538 = {}
    # Getting the type of 'float' (line 1702)
    float_260536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 9), 'float', False)
    # Calling float(args, kwargs) (line 1702)
    float_call_result_260539 = invoke(stypy.reporting.localization.Localization(__file__, 1702, 9), float_260536, *[fs_260537], **kwargs_260538)
    
    # Assigning a type to the variable 'fs' (line 1702)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 4), 'fs', float_call_result_260539)
    
    # Assigning a Call to a Tuple (line 1703):
    
    # Assigning a Subscript to a Name (line 1703):
    
    # Obtaining the type of the subscript
    int_260540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 4), 'int')
    
    # Call to map(...): (line 1703)
    # Processing the call arguments (line 1703)
    # Getting the type of 'atleast_1d' (line 1703)
    atleast_1d_260542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1703)
    tuple_260543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1703)
    # Adding element type (line 1703)
    # Getting the type of 'a' (line 1703)
    a_260544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1703, 28), tuple_260543, a_260544)
    # Adding element type (line 1703)
    # Getting the type of 'b' (line 1703)
    b_260545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 31), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1703, 28), tuple_260543, b_260545)
    
    # Processing the call keyword arguments (line 1703)
    kwargs_260546 = {}
    # Getting the type of 'map' (line 1703)
    map_260541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 11), 'map', False)
    # Calling map(args, kwargs) (line 1703)
    map_call_result_260547 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 11), map_260541, *[atleast_1d_260542, tuple_260543], **kwargs_260546)
    
    # Obtaining the member '__getitem__' of a type (line 1703)
    getitem___260548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 4), map_call_result_260547, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1703)
    subscript_call_result_260549 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 4), getitem___260548, int_260540)
    
    # Assigning a type to the variable 'tuple_var_assignment_257330' (line 1703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1703, 4), 'tuple_var_assignment_257330', subscript_call_result_260549)
    
    # Assigning a Subscript to a Name (line 1703):
    
    # Obtaining the type of the subscript
    int_260550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 4), 'int')
    
    # Call to map(...): (line 1703)
    # Processing the call arguments (line 1703)
    # Getting the type of 'atleast_1d' (line 1703)
    atleast_1d_260552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 15), 'atleast_1d', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1703)
    tuple_260553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1703, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1703)
    # Adding element type (line 1703)
    # Getting the type of 'a' (line 1703)
    a_260554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1703, 28), tuple_260553, a_260554)
    # Adding element type (line 1703)
    # Getting the type of 'b' (line 1703)
    b_260555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 31), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1703, 28), tuple_260553, b_260555)
    
    # Processing the call keyword arguments (line 1703)
    kwargs_260556 = {}
    # Getting the type of 'map' (line 1703)
    map_260551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 11), 'map', False)
    # Calling map(args, kwargs) (line 1703)
    map_call_result_260557 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 11), map_260551, *[atleast_1d_260552, tuple_260553], **kwargs_260556)
    
    # Obtaining the member '__getitem__' of a type (line 1703)
    getitem___260558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 4), map_call_result_260557, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1703)
    subscript_call_result_260559 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 4), getitem___260558, int_260550)
    
    # Assigning a type to the variable 'tuple_var_assignment_257331' (line 1703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1703, 4), 'tuple_var_assignment_257331', subscript_call_result_260559)
    
    # Assigning a Name to a Name (line 1703):
    # Getting the type of 'tuple_var_assignment_257330' (line 1703)
    tuple_var_assignment_257330_260560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 4), 'tuple_var_assignment_257330')
    # Assigning a type to the variable 'a' (line 1703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1703, 4), 'a', tuple_var_assignment_257330_260560)
    
    # Assigning a Name to a Name (line 1703):
    # Getting the type of 'tuple_var_assignment_257331' (line 1703)
    tuple_var_assignment_257331_260561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 4), 'tuple_var_assignment_257331')
    # Assigning a type to the variable 'b' (line 1703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1703, 7), 'b', tuple_var_assignment_257331_260561)
    
    # Assigning a BinOp to a Name (line 1704):
    
    # Assigning a BinOp to a Name (line 1704):
    
    # Call to len(...): (line 1704)
    # Processing the call arguments (line 1704)
    # Getting the type of 'a' (line 1704)
    a_260563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 12), 'a', False)
    # Processing the call keyword arguments (line 1704)
    kwargs_260564 = {}
    # Getting the type of 'len' (line 1704)
    len_260562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 8), 'len', False)
    # Calling len(args, kwargs) (line 1704)
    len_call_result_260565 = invoke(stypy.reporting.localization.Localization(__file__, 1704, 8), len_260562, *[a_260563], **kwargs_260564)
    
    int_260566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1704, 17), 'int')
    # Applying the binary operator '-' (line 1704)
    result_sub_260567 = python_operator(stypy.reporting.localization.Localization(__file__, 1704, 8), '-', len_call_result_260565, int_260566)
    
    # Assigning a type to the variable 'D' (line 1704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1704, 4), 'D', result_sub_260567)
    
    # Assigning a BinOp to a Name (line 1705):
    
    # Assigning a BinOp to a Name (line 1705):
    
    # Call to len(...): (line 1705)
    # Processing the call arguments (line 1705)
    # Getting the type of 'b' (line 1705)
    b_260569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 12), 'b', False)
    # Processing the call keyword arguments (line 1705)
    kwargs_260570 = {}
    # Getting the type of 'len' (line 1705)
    len_260568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 8), 'len', False)
    # Calling len(args, kwargs) (line 1705)
    len_call_result_260571 = invoke(stypy.reporting.localization.Localization(__file__, 1705, 8), len_260568, *[b_260569], **kwargs_260570)
    
    int_260572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1705, 17), 'int')
    # Applying the binary operator '-' (line 1705)
    result_sub_260573 = python_operator(stypy.reporting.localization.Localization(__file__, 1705, 8), '-', len_call_result_260571, int_260572)
    
    # Assigning a type to the variable 'N' (line 1705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1705, 4), 'N', result_sub_260573)
    
    # Assigning a Name to a Name (line 1706):
    
    # Assigning a Name to a Name (line 1706):
    # Getting the type of 'float' (line 1706)
    float_260574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 13), 'float')
    # Assigning a type to the variable 'artype' (line 1706)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1706, 4), 'artype', float_260574)
    
    # Assigning a Call to a Name (line 1707):
    
    # Assigning a Call to a Name (line 1707):
    
    # Call to max(...): (line 1707)
    # Processing the call arguments (line 1707)
    
    # Obtaining an instance of the builtin type 'list' (line 1707)
    list_260576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1707, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1707)
    # Adding element type (line 1707)
    # Getting the type of 'N' (line 1707)
    N_260577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 13), 'N', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1707, 12), list_260576, N_260577)
    # Adding element type (line 1707)
    # Getting the type of 'D' (line 1707)
    D_260578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 16), 'D', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1707, 12), list_260576, D_260578)
    
    # Processing the call keyword arguments (line 1707)
    kwargs_260579 = {}
    # Getting the type of 'max' (line 1707)
    max_260575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 8), 'max', False)
    # Calling max(args, kwargs) (line 1707)
    max_call_result_260580 = invoke(stypy.reporting.localization.Localization(__file__, 1707, 8), max_260575, *[list_260576], **kwargs_260579)
    
    # Assigning a type to the variable 'M' (line 1707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1707, 4), 'M', max_call_result_260580)
    
    # Assigning a Name to a Name (line 1708):
    
    # Assigning a Name to a Name (line 1708):
    # Getting the type of 'M' (line 1708)
    M_260581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 9), 'M')
    # Assigning a type to the variable 'Np' (line 1708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1708, 4), 'Np', M_260581)
    
    # Assigning a Name to a Name (line 1709):
    
    # Assigning a Name to a Name (line 1709):
    # Getting the type of 'M' (line 1709)
    M_260582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 9), 'M')
    # Assigning a type to the variable 'Dp' (line 1709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'Dp', M_260582)
    
    # Assigning a Call to a Name (line 1710):
    
    # Assigning a Call to a Name (line 1710):
    
    # Call to zeros(...): (line 1710)
    # Processing the call arguments (line 1710)
    # Getting the type of 'Np' (line 1710)
    Np_260585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 25), 'Np', False)
    int_260586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1710, 30), 'int')
    # Applying the binary operator '+' (line 1710)
    result_add_260587 = python_operator(stypy.reporting.localization.Localization(__file__, 1710, 25), '+', Np_260585, int_260586)
    
    # Getting the type of 'artype' (line 1710)
    artype_260588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 33), 'artype', False)
    # Processing the call keyword arguments (line 1710)
    kwargs_260589 = {}
    # Getting the type of 'numpy' (line 1710)
    numpy_260583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 13), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 1710)
    zeros_260584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1710, 13), numpy_260583, 'zeros')
    # Calling zeros(args, kwargs) (line 1710)
    zeros_call_result_260590 = invoke(stypy.reporting.localization.Localization(__file__, 1710, 13), zeros_260584, *[result_add_260587, artype_260588], **kwargs_260589)
    
    # Assigning a type to the variable 'bprime' (line 1710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1710, 4), 'bprime', zeros_call_result_260590)
    
    # Assigning a Call to a Name (line 1711):
    
    # Assigning a Call to a Name (line 1711):
    
    # Call to zeros(...): (line 1711)
    # Processing the call arguments (line 1711)
    # Getting the type of 'Dp' (line 1711)
    Dp_260593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 25), 'Dp', False)
    int_260594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1711, 30), 'int')
    # Applying the binary operator '+' (line 1711)
    result_add_260595 = python_operator(stypy.reporting.localization.Localization(__file__, 1711, 25), '+', Dp_260593, int_260594)
    
    # Getting the type of 'artype' (line 1711)
    artype_260596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 33), 'artype', False)
    # Processing the call keyword arguments (line 1711)
    kwargs_260597 = {}
    # Getting the type of 'numpy' (line 1711)
    numpy_260591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 13), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 1711)
    zeros_260592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1711, 13), numpy_260591, 'zeros')
    # Calling zeros(args, kwargs) (line 1711)
    zeros_call_result_260598 = invoke(stypy.reporting.localization.Localization(__file__, 1711, 13), zeros_260592, *[result_add_260595, artype_260596], **kwargs_260597)
    
    # Assigning a type to the variable 'aprime' (line 1711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1711, 4), 'aprime', zeros_call_result_260598)
    
    
    # Call to range(...): (line 1712)
    # Processing the call arguments (line 1712)
    # Getting the type of 'Np' (line 1712)
    Np_260600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 19), 'Np', False)
    int_260601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 24), 'int')
    # Applying the binary operator '+' (line 1712)
    result_add_260602 = python_operator(stypy.reporting.localization.Localization(__file__, 1712, 19), '+', Np_260600, int_260601)
    
    # Processing the call keyword arguments (line 1712)
    kwargs_260603 = {}
    # Getting the type of 'range' (line 1712)
    range_260599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 13), 'range', False)
    # Calling range(args, kwargs) (line 1712)
    range_call_result_260604 = invoke(stypy.reporting.localization.Localization(__file__, 1712, 13), range_260599, *[result_add_260602], **kwargs_260603)
    
    # Testing the type of a for loop iterable (line 1712)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1712, 4), range_call_result_260604)
    # Getting the type of the for loop variable (line 1712)
    for_loop_var_260605 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1712, 4), range_call_result_260604)
    # Assigning a type to the variable 'j' (line 1712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1712, 4), 'j', for_loop_var_260605)
    # SSA begins for a for statement (line 1712)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Num to a Name (line 1713):
    
    # Assigning a Num to a Name (line 1713):
    float_260606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1713, 14), 'float')
    # Assigning a type to the variable 'val' (line 1713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1713, 8), 'val', float_260606)
    
    
    # Call to range(...): (line 1714)
    # Processing the call arguments (line 1714)
    # Getting the type of 'N' (line 1714)
    N_260608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 23), 'N', False)
    int_260609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1714, 27), 'int')
    # Applying the binary operator '+' (line 1714)
    result_add_260610 = python_operator(stypy.reporting.localization.Localization(__file__, 1714, 23), '+', N_260608, int_260609)
    
    # Processing the call keyword arguments (line 1714)
    kwargs_260611 = {}
    # Getting the type of 'range' (line 1714)
    range_260607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 17), 'range', False)
    # Calling range(args, kwargs) (line 1714)
    range_call_result_260612 = invoke(stypy.reporting.localization.Localization(__file__, 1714, 17), range_260607, *[result_add_260610], **kwargs_260611)
    
    # Testing the type of a for loop iterable (line 1714)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1714, 8), range_call_result_260612)
    # Getting the type of the for loop variable (line 1714)
    for_loop_var_260613 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1714, 8), range_call_result_260612)
    # Assigning a type to the variable 'i' (line 1714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 8), 'i', for_loop_var_260613)
    # SSA begins for a for statement (line 1714)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 1715)
    # Processing the call arguments (line 1715)
    # Getting the type of 'i' (line 1715)
    i_260615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 27), 'i', False)
    int_260616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 31), 'int')
    # Applying the binary operator '+' (line 1715)
    result_add_260617 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 27), '+', i_260615, int_260616)
    
    # Processing the call keyword arguments (line 1715)
    kwargs_260618 = {}
    # Getting the type of 'range' (line 1715)
    range_260614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 21), 'range', False)
    # Calling range(args, kwargs) (line 1715)
    range_call_result_260619 = invoke(stypy.reporting.localization.Localization(__file__, 1715, 21), range_260614, *[result_add_260617], **kwargs_260618)
    
    # Testing the type of a for loop iterable (line 1715)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1715, 12), range_call_result_260619)
    # Getting the type of the for loop variable (line 1715)
    for_loop_var_260620 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1715, 12), range_call_result_260619)
    # Assigning a type to the variable 'k' (line 1715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1715, 12), 'k', for_loop_var_260620)
    # SSA begins for a for statement (line 1715)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 1716)
    # Processing the call arguments (line 1716)
    # Getting the type of 'M' (line 1716)
    M_260622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 31), 'M', False)
    # Getting the type of 'i' (line 1716)
    i_260623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 35), 'i', False)
    # Applying the binary operator '-' (line 1716)
    result_sub_260624 = python_operator(stypy.reporting.localization.Localization(__file__, 1716, 31), '-', M_260622, i_260623)
    
    int_260625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 39), 'int')
    # Applying the binary operator '+' (line 1716)
    result_add_260626 = python_operator(stypy.reporting.localization.Localization(__file__, 1716, 37), '+', result_sub_260624, int_260625)
    
    # Processing the call keyword arguments (line 1716)
    kwargs_260627 = {}
    # Getting the type of 'range' (line 1716)
    range_260621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 25), 'range', False)
    # Calling range(args, kwargs) (line 1716)
    range_call_result_260628 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 25), range_260621, *[result_add_260626], **kwargs_260627)
    
    # Testing the type of a for loop iterable (line 1716)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1716, 16), range_call_result_260628)
    # Getting the type of the for loop variable (line 1716)
    for_loop_var_260629 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1716, 16), range_call_result_260628)
    # Assigning a type to the variable 'l' (line 1716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1716, 16), 'l', for_loop_var_260629)
    # SSA begins for a for statement (line 1716)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'k' (line 1717)
    k_260630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 23), 'k')
    # Getting the type of 'l' (line 1717)
    l_260631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 27), 'l')
    # Applying the binary operator '+' (line 1717)
    result_add_260632 = python_operator(stypy.reporting.localization.Localization(__file__, 1717, 23), '+', k_260630, l_260631)
    
    # Getting the type of 'j' (line 1717)
    j_260633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 32), 'j')
    # Applying the binary operator '==' (line 1717)
    result_eq_260634 = python_operator(stypy.reporting.localization.Localization(__file__, 1717, 23), '==', result_add_260632, j_260633)
    
    # Testing the type of an if condition (line 1717)
    if_condition_260635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1717, 20), result_eq_260634)
    # Assigning a type to the variable 'if_condition_260635' (line 1717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 20), 'if_condition_260635', if_condition_260635)
    # SSA begins for if statement (line 1717)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'val' (line 1718)
    val_260636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 24), 'val')
    
    # Call to comb(...): (line 1718)
    # Processing the call arguments (line 1718)
    # Getting the type of 'i' (line 1718)
    i_260638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 37), 'i', False)
    # Getting the type of 'k' (line 1718)
    k_260639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 40), 'k', False)
    # Processing the call keyword arguments (line 1718)
    kwargs_260640 = {}
    # Getting the type of 'comb' (line 1718)
    comb_260637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 32), 'comb', False)
    # Calling comb(args, kwargs) (line 1718)
    comb_call_result_260641 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 32), comb_260637, *[i_260638, k_260639], **kwargs_260640)
    
    
    # Call to comb(...): (line 1718)
    # Processing the call arguments (line 1718)
    # Getting the type of 'M' (line 1718)
    M_260643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 50), 'M', False)
    # Getting the type of 'i' (line 1718)
    i_260644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 54), 'i', False)
    # Applying the binary operator '-' (line 1718)
    result_sub_260645 = python_operator(stypy.reporting.localization.Localization(__file__, 1718, 50), '-', M_260643, i_260644)
    
    # Getting the type of 'l' (line 1718)
    l_260646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 57), 'l', False)
    # Processing the call keyword arguments (line 1718)
    kwargs_260647 = {}
    # Getting the type of 'comb' (line 1718)
    comb_260642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 45), 'comb', False)
    # Calling comb(args, kwargs) (line 1718)
    comb_call_result_260648 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 45), comb_260642, *[result_sub_260645, l_260646], **kwargs_260647)
    
    # Applying the binary operator '*' (line 1718)
    result_mul_260649 = python_operator(stypy.reporting.localization.Localization(__file__, 1718, 32), '*', comb_call_result_260641, comb_call_result_260648)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'N' (line 1718)
    N_260650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 64), 'N')
    # Getting the type of 'i' (line 1718)
    i_260651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 68), 'i')
    # Applying the binary operator '-' (line 1718)
    result_sub_260652 = python_operator(stypy.reporting.localization.Localization(__file__, 1718, 64), '-', N_260650, i_260651)
    
    # Getting the type of 'b' (line 1718)
    b_260653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 62), 'b')
    # Obtaining the member '__getitem__' of a type (line 1718)
    getitem___260654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1718, 62), b_260653, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1718)
    subscript_call_result_260655 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 62), getitem___260654, result_sub_260652)
    
    # Applying the binary operator '*' (line 1718)
    result_mul_260656 = python_operator(stypy.reporting.localization.Localization(__file__, 1718, 60), '*', result_mul_260649, subscript_call_result_260655)
    
    
    # Call to pow(...): (line 1719)
    # Processing the call arguments (line 1719)
    int_260658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 36), 'int')
    # Getting the type of 'fs' (line 1719)
    fs_260659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 40), 'fs', False)
    # Applying the binary operator '*' (line 1719)
    result_mul_260660 = python_operator(stypy.reporting.localization.Localization(__file__, 1719, 36), '*', int_260658, fs_260659)
    
    # Getting the type of 'i' (line 1719)
    i_260661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 44), 'i', False)
    # Processing the call keyword arguments (line 1719)
    kwargs_260662 = {}
    # Getting the type of 'pow' (line 1719)
    pow_260657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 32), 'pow', False)
    # Calling pow(args, kwargs) (line 1719)
    pow_call_result_260663 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 32), pow_260657, *[result_mul_260660, i_260661], **kwargs_260662)
    
    # Applying the binary operator '*' (line 1718)
    result_mul_260664 = python_operator(stypy.reporting.localization.Localization(__file__, 1718, 71), '*', result_mul_260656, pow_call_result_260663)
    
    int_260665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 50), 'int')
    # Getting the type of 'k' (line 1719)
    k_260666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 57), 'k')
    # Applying the binary operator '**' (line 1719)
    result_pow_260667 = python_operator(stypy.reporting.localization.Localization(__file__, 1719, 49), '**', int_260665, k_260666)
    
    # Applying the binary operator '*' (line 1719)
    result_mul_260668 = python_operator(stypy.reporting.localization.Localization(__file__, 1719, 47), '*', result_mul_260664, result_pow_260667)
    
    # Applying the binary operator '+=' (line 1718)
    result_iadd_260669 = python_operator(stypy.reporting.localization.Localization(__file__, 1718, 24), '+=', val_260636, result_mul_260668)
    # Assigning a type to the variable 'val' (line 1718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 24), 'val', result_iadd_260669)
    
    # SSA join for if statement (line 1717)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Subscript (line 1720):
    
    # Assigning a Call to a Subscript (line 1720):
    
    # Call to real(...): (line 1720)
    # Processing the call arguments (line 1720)
    # Getting the type of 'val' (line 1720)
    val_260671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 25), 'val', False)
    # Processing the call keyword arguments (line 1720)
    kwargs_260672 = {}
    # Getting the type of 'real' (line 1720)
    real_260670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 20), 'real', False)
    # Calling real(args, kwargs) (line 1720)
    real_call_result_260673 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 20), real_260670, *[val_260671], **kwargs_260672)
    
    # Getting the type of 'bprime' (line 1720)
    bprime_260674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 8), 'bprime')
    # Getting the type of 'j' (line 1720)
    j_260675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 15), 'j')
    # Storing an element on a container (line 1720)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1720, 8), bprime_260674, (j_260675, real_call_result_260673))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 1721)
    # Processing the call arguments (line 1721)
    # Getting the type of 'Dp' (line 1721)
    Dp_260677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 19), 'Dp', False)
    int_260678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 24), 'int')
    # Applying the binary operator '+' (line 1721)
    result_add_260679 = python_operator(stypy.reporting.localization.Localization(__file__, 1721, 19), '+', Dp_260677, int_260678)
    
    # Processing the call keyword arguments (line 1721)
    kwargs_260680 = {}
    # Getting the type of 'range' (line 1721)
    range_260676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 13), 'range', False)
    # Calling range(args, kwargs) (line 1721)
    range_call_result_260681 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 13), range_260676, *[result_add_260679], **kwargs_260680)
    
    # Testing the type of a for loop iterable (line 1721)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1721, 4), range_call_result_260681)
    # Getting the type of the for loop variable (line 1721)
    for_loop_var_260682 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1721, 4), range_call_result_260681)
    # Assigning a type to the variable 'j' (line 1721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 4), 'j', for_loop_var_260682)
    # SSA begins for a for statement (line 1721)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Num to a Name (line 1722):
    
    # Assigning a Num to a Name (line 1722):
    float_260683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 14), 'float')
    # Assigning a type to the variable 'val' (line 1722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 8), 'val', float_260683)
    
    
    # Call to range(...): (line 1723)
    # Processing the call arguments (line 1723)
    # Getting the type of 'D' (line 1723)
    D_260685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 23), 'D', False)
    int_260686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 27), 'int')
    # Applying the binary operator '+' (line 1723)
    result_add_260687 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 23), '+', D_260685, int_260686)
    
    # Processing the call keyword arguments (line 1723)
    kwargs_260688 = {}
    # Getting the type of 'range' (line 1723)
    range_260684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 17), 'range', False)
    # Calling range(args, kwargs) (line 1723)
    range_call_result_260689 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 17), range_260684, *[result_add_260687], **kwargs_260688)
    
    # Testing the type of a for loop iterable (line 1723)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1723, 8), range_call_result_260689)
    # Getting the type of the for loop variable (line 1723)
    for_loop_var_260690 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1723, 8), range_call_result_260689)
    # Assigning a type to the variable 'i' (line 1723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 8), 'i', for_loop_var_260690)
    # SSA begins for a for statement (line 1723)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 1724)
    # Processing the call arguments (line 1724)
    # Getting the type of 'i' (line 1724)
    i_260692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 27), 'i', False)
    int_260693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1724, 31), 'int')
    # Applying the binary operator '+' (line 1724)
    result_add_260694 = python_operator(stypy.reporting.localization.Localization(__file__, 1724, 27), '+', i_260692, int_260693)
    
    # Processing the call keyword arguments (line 1724)
    kwargs_260695 = {}
    # Getting the type of 'range' (line 1724)
    range_260691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 21), 'range', False)
    # Calling range(args, kwargs) (line 1724)
    range_call_result_260696 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 21), range_260691, *[result_add_260694], **kwargs_260695)
    
    # Testing the type of a for loop iterable (line 1724)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1724, 12), range_call_result_260696)
    # Getting the type of the for loop variable (line 1724)
    for_loop_var_260697 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1724, 12), range_call_result_260696)
    # Assigning a type to the variable 'k' (line 1724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 12), 'k', for_loop_var_260697)
    # SSA begins for a for statement (line 1724)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to range(...): (line 1725)
    # Processing the call arguments (line 1725)
    # Getting the type of 'M' (line 1725)
    M_260699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 31), 'M', False)
    # Getting the type of 'i' (line 1725)
    i_260700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 35), 'i', False)
    # Applying the binary operator '-' (line 1725)
    result_sub_260701 = python_operator(stypy.reporting.localization.Localization(__file__, 1725, 31), '-', M_260699, i_260700)
    
    int_260702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1725, 39), 'int')
    # Applying the binary operator '+' (line 1725)
    result_add_260703 = python_operator(stypy.reporting.localization.Localization(__file__, 1725, 37), '+', result_sub_260701, int_260702)
    
    # Processing the call keyword arguments (line 1725)
    kwargs_260704 = {}
    # Getting the type of 'range' (line 1725)
    range_260698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 25), 'range', False)
    # Calling range(args, kwargs) (line 1725)
    range_call_result_260705 = invoke(stypy.reporting.localization.Localization(__file__, 1725, 25), range_260698, *[result_add_260703], **kwargs_260704)
    
    # Testing the type of a for loop iterable (line 1725)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1725, 16), range_call_result_260705)
    # Getting the type of the for loop variable (line 1725)
    for_loop_var_260706 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1725, 16), range_call_result_260705)
    # Assigning a type to the variable 'l' (line 1725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1725, 16), 'l', for_loop_var_260706)
    # SSA begins for a for statement (line 1725)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'k' (line 1726)
    k_260707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 23), 'k')
    # Getting the type of 'l' (line 1726)
    l_260708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 27), 'l')
    # Applying the binary operator '+' (line 1726)
    result_add_260709 = python_operator(stypy.reporting.localization.Localization(__file__, 1726, 23), '+', k_260707, l_260708)
    
    # Getting the type of 'j' (line 1726)
    j_260710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 32), 'j')
    # Applying the binary operator '==' (line 1726)
    result_eq_260711 = python_operator(stypy.reporting.localization.Localization(__file__, 1726, 23), '==', result_add_260709, j_260710)
    
    # Testing the type of an if condition (line 1726)
    if_condition_260712 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1726, 20), result_eq_260711)
    # Assigning a type to the variable 'if_condition_260712' (line 1726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 20), 'if_condition_260712', if_condition_260712)
    # SSA begins for if statement (line 1726)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'val' (line 1727)
    val_260713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 24), 'val')
    
    # Call to comb(...): (line 1727)
    # Processing the call arguments (line 1727)
    # Getting the type of 'i' (line 1727)
    i_260715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 37), 'i', False)
    # Getting the type of 'k' (line 1727)
    k_260716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 40), 'k', False)
    # Processing the call keyword arguments (line 1727)
    kwargs_260717 = {}
    # Getting the type of 'comb' (line 1727)
    comb_260714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 32), 'comb', False)
    # Calling comb(args, kwargs) (line 1727)
    comb_call_result_260718 = invoke(stypy.reporting.localization.Localization(__file__, 1727, 32), comb_260714, *[i_260715, k_260716], **kwargs_260717)
    
    
    # Call to comb(...): (line 1727)
    # Processing the call arguments (line 1727)
    # Getting the type of 'M' (line 1727)
    M_260720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 50), 'M', False)
    # Getting the type of 'i' (line 1727)
    i_260721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 54), 'i', False)
    # Applying the binary operator '-' (line 1727)
    result_sub_260722 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 50), '-', M_260720, i_260721)
    
    # Getting the type of 'l' (line 1727)
    l_260723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 57), 'l', False)
    # Processing the call keyword arguments (line 1727)
    kwargs_260724 = {}
    # Getting the type of 'comb' (line 1727)
    comb_260719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 45), 'comb', False)
    # Calling comb(args, kwargs) (line 1727)
    comb_call_result_260725 = invoke(stypy.reporting.localization.Localization(__file__, 1727, 45), comb_260719, *[result_sub_260722, l_260723], **kwargs_260724)
    
    # Applying the binary operator '*' (line 1727)
    result_mul_260726 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 32), '*', comb_call_result_260718, comb_call_result_260725)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'D' (line 1727)
    D_260727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 64), 'D')
    # Getting the type of 'i' (line 1727)
    i_260728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 68), 'i')
    # Applying the binary operator '-' (line 1727)
    result_sub_260729 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 64), '-', D_260727, i_260728)
    
    # Getting the type of 'a' (line 1727)
    a_260730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 62), 'a')
    # Obtaining the member '__getitem__' of a type (line 1727)
    getitem___260731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1727, 62), a_260730, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1727)
    subscript_call_result_260732 = invoke(stypy.reporting.localization.Localization(__file__, 1727, 62), getitem___260731, result_sub_260729)
    
    # Applying the binary operator '*' (line 1727)
    result_mul_260733 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 60), '*', result_mul_260726, subscript_call_result_260732)
    
    
    # Call to pow(...): (line 1728)
    # Processing the call arguments (line 1728)
    int_260735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 36), 'int')
    # Getting the type of 'fs' (line 1728)
    fs_260736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 40), 'fs', False)
    # Applying the binary operator '*' (line 1728)
    result_mul_260737 = python_operator(stypy.reporting.localization.Localization(__file__, 1728, 36), '*', int_260735, fs_260736)
    
    # Getting the type of 'i' (line 1728)
    i_260738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 44), 'i', False)
    # Processing the call keyword arguments (line 1728)
    kwargs_260739 = {}
    # Getting the type of 'pow' (line 1728)
    pow_260734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 32), 'pow', False)
    # Calling pow(args, kwargs) (line 1728)
    pow_call_result_260740 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 32), pow_260734, *[result_mul_260737, i_260738], **kwargs_260739)
    
    # Applying the binary operator '*' (line 1727)
    result_mul_260741 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 71), '*', result_mul_260733, pow_call_result_260740)
    
    int_260742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 50), 'int')
    # Getting the type of 'k' (line 1728)
    k_260743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 57), 'k')
    # Applying the binary operator '**' (line 1728)
    result_pow_260744 = python_operator(stypy.reporting.localization.Localization(__file__, 1728, 49), '**', int_260742, k_260743)
    
    # Applying the binary operator '*' (line 1728)
    result_mul_260745 = python_operator(stypy.reporting.localization.Localization(__file__, 1728, 47), '*', result_mul_260741, result_pow_260744)
    
    # Applying the binary operator '+=' (line 1727)
    result_iadd_260746 = python_operator(stypy.reporting.localization.Localization(__file__, 1727, 24), '+=', val_260713, result_mul_260745)
    # Assigning a type to the variable 'val' (line 1727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 24), 'val', result_iadd_260746)
    
    # SSA join for if statement (line 1726)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Subscript (line 1729):
    
    # Assigning a Call to a Subscript (line 1729):
    
    # Call to real(...): (line 1729)
    # Processing the call arguments (line 1729)
    # Getting the type of 'val' (line 1729)
    val_260748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 25), 'val', False)
    # Processing the call keyword arguments (line 1729)
    kwargs_260749 = {}
    # Getting the type of 'real' (line 1729)
    real_260747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 20), 'real', False)
    # Calling real(args, kwargs) (line 1729)
    real_call_result_260750 = invoke(stypy.reporting.localization.Localization(__file__, 1729, 20), real_260747, *[val_260748], **kwargs_260749)
    
    # Getting the type of 'aprime' (line 1729)
    aprime_260751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 8), 'aprime')
    # Getting the type of 'j' (line 1729)
    j_260752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 15), 'j')
    # Storing an element on a container (line 1729)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1729, 8), aprime_260751, (j_260752, real_call_result_260750))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to normalize(...): (line 1731)
    # Processing the call arguments (line 1731)
    # Getting the type of 'bprime' (line 1731)
    bprime_260754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 21), 'bprime', False)
    # Getting the type of 'aprime' (line 1731)
    aprime_260755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 29), 'aprime', False)
    # Processing the call keyword arguments (line 1731)
    kwargs_260756 = {}
    # Getting the type of 'normalize' (line 1731)
    normalize_260753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 11), 'normalize', False)
    # Calling normalize(args, kwargs) (line 1731)
    normalize_call_result_260757 = invoke(stypy.reporting.localization.Localization(__file__, 1731, 11), normalize_260753, *[bprime_260754, aprime_260755], **kwargs_260756)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 4), 'stypy_return_type', normalize_call_result_260757)
    
    # ################# End of 'bilinear(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bilinear' in the type store
    # Getting the type of 'stypy_return_type' (line 1697)
    stypy_return_type_260758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_260758)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bilinear'
    return stypy_return_type_260758

# Assigning a type to the variable 'bilinear' (line 1697)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 0), 'bilinear', bilinear)

@norecursion
def iirdesign(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1734)
    False_260759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 43), 'False')
    str_260760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1734, 56), 'str', 'ellip')
    str_260761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1734, 72), 'str', 'ba')
    defaults = [False_260759, str_260760, str_260761]
    # Create a new context for function 'iirdesign'
    module_type_store = module_type_store.open_function_context('iirdesign', 1734, 0, False)
    
    # Passed parameters checking function
    iirdesign.stypy_localization = localization
    iirdesign.stypy_type_of_self = None
    iirdesign.stypy_type_store = module_type_store
    iirdesign.stypy_function_name = 'iirdesign'
    iirdesign.stypy_param_names_list = ['wp', 'ws', 'gpass', 'gstop', 'analog', 'ftype', 'output']
    iirdesign.stypy_varargs_param_name = None
    iirdesign.stypy_kwargs_param_name = None
    iirdesign.stypy_call_defaults = defaults
    iirdesign.stypy_call_varargs = varargs
    iirdesign.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'iirdesign', ['wp', 'ws', 'gpass', 'gstop', 'analog', 'ftype', 'output'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'iirdesign', localization, ['wp', 'ws', 'gpass', 'gstop', 'analog', 'ftype', 'output'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'iirdesign(...)' code ##################

    str_260762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, (-1)), 'str', "Complete IIR digital and analog filter design.\n\n    Given passband and stopband frequencies and gains, construct an analog or\n    digital IIR filter of minimum order for a given basic type.  Return the\n    output in numerator, denominator ('ba'), pole-zero ('zpk') or second order\n    sections ('sos') form.\n\n    Parameters\n    ----------\n    wp, ws : float\n        Passband and stopband edge frequencies.\n        For digital filters, these are normalized from 0 to 1, where 1 is the\n        Nyquist frequency, pi radians/sample.  (`wp` and `ws` are thus in\n        half-cycles / sample.)  For example:\n\n            - Lowpass:   wp = 0.2,          ws = 0.3\n            - Highpass:  wp = 0.3,          ws = 0.2\n            - Bandpass:  wp = [0.2, 0.5],   ws = [0.1, 0.6]\n            - Bandstop:  wp = [0.1, 0.6],   ws = [0.2, 0.5]\n\n        For analog filters, `wp` and `ws` are angular frequencies (e.g. rad/s).\n\n    gpass : float\n        The maximum loss in the passband (dB).\n    gstop : float\n        The minimum attenuation in the stopband (dB).\n    analog : bool, optional\n        When True, return an analog filter, otherwise a digital filter is\n        returned.\n    ftype : str, optional\n        The type of IIR filter to design:\n\n            - Butterworth   : 'butter'\n            - Chebyshev I   : 'cheby1'\n            - Chebyshev II  : 'cheby2'\n            - Cauer/elliptic: 'ellip'\n            - Bessel/Thomson: 'bessel'\n\n    output : {'ba', 'zpk', 'sos'}, optional\n        Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or\n        second-order sections ('sos'). Default is 'ba'.\n\n    Returns\n    -------\n    b, a : ndarray, ndarray\n        Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.\n        Only returned if ``output='ba'``.\n    z, p, k : ndarray, ndarray, float\n        Zeros, poles, and system gain of the IIR filter transfer\n        function.  Only returned if ``output='zpk'``.\n    sos : ndarray\n        Second-order sections representation of the IIR filter.\n        Only returned if ``output=='sos'``.\n\n    See Also\n    --------\n    butter : Filter design using order and critical points\n    cheby1, cheby2, ellip, bessel\n    buttord : Find order and critical points from passband and stopband spec\n    cheb1ord, cheb2ord, ellipord\n    iirfilter : General filter design using order and critical frequencies\n\n    Notes\n    -----\n    The ``'sos'`` output parameter was added in 0.16.0.\n    ")
    
    
    # SSA begins for try-except statement (line 1801)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Name (line 1802):
    
    # Assigning a Subscript to a Name (line 1802):
    
    # Obtaining the type of the subscript
    int_260763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 37), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'ftype' (line 1802)
    ftype_260764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 30), 'ftype')
    # Getting the type of 'filter_dict' (line 1802)
    filter_dict_260765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 18), 'filter_dict')
    # Obtaining the member '__getitem__' of a type (line 1802)
    getitem___260766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 18), filter_dict_260765, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1802)
    subscript_call_result_260767 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 18), getitem___260766, ftype_260764)
    
    # Obtaining the member '__getitem__' of a type (line 1802)
    getitem___260768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 18), subscript_call_result_260767, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1802)
    subscript_call_result_260769 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 18), getitem___260768, int_260763)
    
    # Assigning a type to the variable 'ordfunc' (line 1802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1802, 8), 'ordfunc', subscript_call_result_260769)
    # SSA branch for the except part of a try statement (line 1801)
    # SSA branch for the except 'KeyError' branch of a try statement (line 1801)
    module_type_store.open_ssa_branch('except')
    
    # Call to ValueError(...): (line 1804)
    # Processing the call arguments (line 1804)
    str_260771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1804, 25), 'str', 'Invalid IIR filter type: %s')
    # Getting the type of 'ftype' (line 1804)
    ftype_260772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 57), 'ftype', False)
    # Applying the binary operator '%' (line 1804)
    result_mod_260773 = python_operator(stypy.reporting.localization.Localization(__file__, 1804, 25), '%', str_260771, ftype_260772)
    
    # Processing the call keyword arguments (line 1804)
    kwargs_260774 = {}
    # Getting the type of 'ValueError' (line 1804)
    ValueError_260770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1804)
    ValueError_call_result_260775 = invoke(stypy.reporting.localization.Localization(__file__, 1804, 14), ValueError_260770, *[result_mod_260773], **kwargs_260774)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1804, 8), ValueError_call_result_260775, 'raise parameter', BaseException)
    # SSA branch for the except 'IndexError' branch of a try statement (line 1801)
    module_type_store.open_ssa_branch('except')
    
    # Call to ValueError(...): (line 1806)
    # Processing the call arguments (line 1806)
    str_260777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 26), 'str', '%s does not have order selection. Use iirfilter function.')
    # Getting the type of 'ftype' (line 1807)
    ftype_260778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 51), 'ftype', False)
    # Applying the binary operator '%' (line 1806)
    result_mod_260779 = python_operator(stypy.reporting.localization.Localization(__file__, 1806, 25), '%', str_260777, ftype_260778)
    
    # Processing the call keyword arguments (line 1806)
    kwargs_260780 = {}
    # Getting the type of 'ValueError' (line 1806)
    ValueError_260776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1806)
    ValueError_call_result_260781 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 14), ValueError_260776, *[result_mod_260779], **kwargs_260780)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1806, 8), ValueError_call_result_260781, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1801)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1809):
    
    # Assigning a Call to a Name (line 1809):
    
    # Call to atleast_1d(...): (line 1809)
    # Processing the call arguments (line 1809)
    # Getting the type of 'wp' (line 1809)
    wp_260783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 20), 'wp', False)
    # Processing the call keyword arguments (line 1809)
    kwargs_260784 = {}
    # Getting the type of 'atleast_1d' (line 1809)
    atleast_1d_260782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 9), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1809)
    atleast_1d_call_result_260785 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 9), atleast_1d_260782, *[wp_260783], **kwargs_260784)
    
    # Assigning a type to the variable 'wp' (line 1809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 4), 'wp', atleast_1d_call_result_260785)
    
    # Assigning a Call to a Name (line 1810):
    
    # Assigning a Call to a Name (line 1810):
    
    # Call to atleast_1d(...): (line 1810)
    # Processing the call arguments (line 1810)
    # Getting the type of 'ws' (line 1810)
    ws_260787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 20), 'ws', False)
    # Processing the call keyword arguments (line 1810)
    kwargs_260788 = {}
    # Getting the type of 'atleast_1d' (line 1810)
    atleast_1d_260786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 9), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1810)
    atleast_1d_call_result_260789 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 9), atleast_1d_260786, *[ws_260787], **kwargs_260788)
    
    # Assigning a type to the variable 'ws' (line 1810)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 4), 'ws', atleast_1d_call_result_260789)
    
    # Assigning a BinOp to a Name (line 1811):
    
    # Assigning a BinOp to a Name (line 1811):
    int_260790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 16), 'int')
    
    # Call to len(...): (line 1811)
    # Processing the call arguments (line 1811)
    # Getting the type of 'wp' (line 1811)
    wp_260792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 25), 'wp', False)
    # Processing the call keyword arguments (line 1811)
    kwargs_260793 = {}
    # Getting the type of 'len' (line 1811)
    len_260791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 21), 'len', False)
    # Calling len(args, kwargs) (line 1811)
    len_call_result_260794 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 21), len_260791, *[wp_260792], **kwargs_260793)
    
    int_260795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 31), 'int')
    # Applying the binary operator '-' (line 1811)
    result_sub_260796 = python_operator(stypy.reporting.localization.Localization(__file__, 1811, 21), '-', len_call_result_260794, int_260795)
    
    # Applying the binary operator '*' (line 1811)
    result_mul_260797 = python_operator(stypy.reporting.localization.Localization(__file__, 1811, 16), '*', int_260790, result_sub_260796)
    
    # Assigning a type to the variable 'band_type' (line 1811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 4), 'band_type', result_mul_260797)
    
    # Getting the type of 'band_type' (line 1812)
    band_type_260798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 4), 'band_type')
    int_260799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 17), 'int')
    # Applying the binary operator '+=' (line 1812)
    result_iadd_260800 = python_operator(stypy.reporting.localization.Localization(__file__, 1812, 4), '+=', band_type_260798, int_260799)
    # Assigning a type to the variable 'band_type' (line 1812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 4), 'band_type', result_iadd_260800)
    
    
    
    
    # Obtaining the type of the subscript
    int_260801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 10), 'int')
    # Getting the type of 'wp' (line 1813)
    wp_260802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 7), 'wp')
    # Obtaining the member '__getitem__' of a type (line 1813)
    getitem___260803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 7), wp_260802, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1813)
    subscript_call_result_260804 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 7), getitem___260803, int_260801)
    
    
    # Obtaining the type of the subscript
    int_260805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 19), 'int')
    # Getting the type of 'ws' (line 1813)
    ws_260806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 16), 'ws')
    # Obtaining the member '__getitem__' of a type (line 1813)
    getitem___260807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 16), ws_260806, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1813)
    subscript_call_result_260808 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 16), getitem___260807, int_260805)
    
    # Applying the binary operator '>=' (line 1813)
    result_ge_260809 = python_operator(stypy.reporting.localization.Localization(__file__, 1813, 7), '>=', subscript_call_result_260804, subscript_call_result_260808)
    
    # Testing the type of an if condition (line 1813)
    if_condition_260810 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1813, 4), result_ge_260809)
    # Assigning a type to the variable 'if_condition_260810' (line 1813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 4), 'if_condition_260810', if_condition_260810)
    # SSA begins for if statement (line 1813)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'band_type' (line 1814)
    band_type_260811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'band_type')
    int_260812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 21), 'int')
    # Applying the binary operator '+=' (line 1814)
    result_iadd_260813 = python_operator(stypy.reporting.localization.Localization(__file__, 1814, 8), '+=', band_type_260811, int_260812)
    # Assigning a type to the variable 'band_type' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'band_type', result_iadd_260813)
    
    # SSA join for if statement (line 1813)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1816):
    
    # Assigning a Subscript to a Name (line 1816):
    
    # Obtaining the type of the subscript
    # Getting the type of 'band_type' (line 1817)
    band_type_260814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 43), 'band_type')
    
    # Obtaining an instance of the builtin type 'dict' (line 1816)
    dict_260815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1816, 12), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1816)
    # Adding element type (key, value) (line 1816)
    int_260816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1816, 13), 'int')
    str_260817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1816, 16), 'str', 'lowpass')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1816, 12), dict_260815, (int_260816, str_260817))
    # Adding element type (key, value) (line 1816)
    int_260818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1816, 27), 'int')
    str_260819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1816, 30), 'str', 'highpass')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1816, 12), dict_260815, (int_260818, str_260819))
    # Adding element type (key, value) (line 1816)
    int_260820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1817, 13), 'int')
    str_260821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1817, 16), 'str', 'bandstop')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1816, 12), dict_260815, (int_260820, str_260821))
    # Adding element type (key, value) (line 1816)
    int_260822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1817, 28), 'int')
    str_260823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1817, 31), 'str', 'bandpass')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1816, 12), dict_260815, (int_260822, str_260823))
    
    # Obtaining the member '__getitem__' of a type (line 1816)
    getitem___260824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 12), dict_260815, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1816)
    subscript_call_result_260825 = invoke(stypy.reporting.localization.Localization(__file__, 1816, 12), getitem___260824, band_type_260814)
    
    # Assigning a type to the variable 'btype' (line 1816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 4), 'btype', subscript_call_result_260825)
    
    # Assigning a Call to a Tuple (line 1819):
    
    # Assigning a Subscript to a Name (line 1819):
    
    # Obtaining the type of the subscript
    int_260826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1819, 4), 'int')
    
    # Call to ordfunc(...): (line 1819)
    # Processing the call arguments (line 1819)
    # Getting the type of 'wp' (line 1819)
    wp_260828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 20), 'wp', False)
    # Getting the type of 'ws' (line 1819)
    ws_260829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 24), 'ws', False)
    # Getting the type of 'gpass' (line 1819)
    gpass_260830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 28), 'gpass', False)
    # Getting the type of 'gstop' (line 1819)
    gstop_260831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 35), 'gstop', False)
    # Processing the call keyword arguments (line 1819)
    # Getting the type of 'analog' (line 1819)
    analog_260832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 49), 'analog', False)
    keyword_260833 = analog_260832
    kwargs_260834 = {'analog': keyword_260833}
    # Getting the type of 'ordfunc' (line 1819)
    ordfunc_260827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 12), 'ordfunc', False)
    # Calling ordfunc(args, kwargs) (line 1819)
    ordfunc_call_result_260835 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 12), ordfunc_260827, *[wp_260828, ws_260829, gpass_260830, gstop_260831], **kwargs_260834)
    
    # Obtaining the member '__getitem__' of a type (line 1819)
    getitem___260836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 4), ordfunc_call_result_260835, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1819)
    subscript_call_result_260837 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 4), getitem___260836, int_260826)
    
    # Assigning a type to the variable 'tuple_var_assignment_257332' (line 1819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 4), 'tuple_var_assignment_257332', subscript_call_result_260837)
    
    # Assigning a Subscript to a Name (line 1819):
    
    # Obtaining the type of the subscript
    int_260838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1819, 4), 'int')
    
    # Call to ordfunc(...): (line 1819)
    # Processing the call arguments (line 1819)
    # Getting the type of 'wp' (line 1819)
    wp_260840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 20), 'wp', False)
    # Getting the type of 'ws' (line 1819)
    ws_260841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 24), 'ws', False)
    # Getting the type of 'gpass' (line 1819)
    gpass_260842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 28), 'gpass', False)
    # Getting the type of 'gstop' (line 1819)
    gstop_260843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 35), 'gstop', False)
    # Processing the call keyword arguments (line 1819)
    # Getting the type of 'analog' (line 1819)
    analog_260844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 49), 'analog', False)
    keyword_260845 = analog_260844
    kwargs_260846 = {'analog': keyword_260845}
    # Getting the type of 'ordfunc' (line 1819)
    ordfunc_260839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 12), 'ordfunc', False)
    # Calling ordfunc(args, kwargs) (line 1819)
    ordfunc_call_result_260847 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 12), ordfunc_260839, *[wp_260840, ws_260841, gpass_260842, gstop_260843], **kwargs_260846)
    
    # Obtaining the member '__getitem__' of a type (line 1819)
    getitem___260848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 4), ordfunc_call_result_260847, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1819)
    subscript_call_result_260849 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 4), getitem___260848, int_260838)
    
    # Assigning a type to the variable 'tuple_var_assignment_257333' (line 1819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 4), 'tuple_var_assignment_257333', subscript_call_result_260849)
    
    # Assigning a Name to a Name (line 1819):
    # Getting the type of 'tuple_var_assignment_257332' (line 1819)
    tuple_var_assignment_257332_260850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 4), 'tuple_var_assignment_257332')
    # Assigning a type to the variable 'N' (line 1819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 4), 'N', tuple_var_assignment_257332_260850)
    
    # Assigning a Name to a Name (line 1819):
    # Getting the type of 'tuple_var_assignment_257333' (line 1819)
    tuple_var_assignment_257333_260851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 4), 'tuple_var_assignment_257333')
    # Assigning a type to the variable 'Wn' (line 1819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 7), 'Wn', tuple_var_assignment_257333_260851)
    
    # Call to iirfilter(...): (line 1820)
    # Processing the call arguments (line 1820)
    # Getting the type of 'N' (line 1820)
    N_260853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 21), 'N', False)
    # Getting the type of 'Wn' (line 1820)
    Wn_260854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 24), 'Wn', False)
    # Processing the call keyword arguments (line 1820)
    # Getting the type of 'gpass' (line 1820)
    gpass_260855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 31), 'gpass', False)
    keyword_260856 = gpass_260855
    # Getting the type of 'gstop' (line 1820)
    gstop_260857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 41), 'gstop', False)
    keyword_260858 = gstop_260857
    # Getting the type of 'analog' (line 1820)
    analog_260859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 55), 'analog', False)
    keyword_260860 = analog_260859
    # Getting the type of 'btype' (line 1820)
    btype_260861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 69), 'btype', False)
    keyword_260862 = btype_260861
    # Getting the type of 'ftype' (line 1821)
    ftype_260863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 27), 'ftype', False)
    keyword_260864 = ftype_260863
    # Getting the type of 'output' (line 1821)
    output_260865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 41), 'output', False)
    keyword_260866 = output_260865
    kwargs_260867 = {'rp': keyword_260856, 'rs': keyword_260858, 'ftype': keyword_260864, 'btype': keyword_260862, 'output': keyword_260866, 'analog': keyword_260860}
    # Getting the type of 'iirfilter' (line 1820)
    iirfilter_260852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 11), 'iirfilter', False)
    # Calling iirfilter(args, kwargs) (line 1820)
    iirfilter_call_result_260868 = invoke(stypy.reporting.localization.Localization(__file__, 1820, 11), iirfilter_260852, *[N_260853, Wn_260854], **kwargs_260867)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1820)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 4), 'stypy_return_type', iirfilter_call_result_260868)
    
    # ################# End of 'iirdesign(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'iirdesign' in the type store
    # Getting the type of 'stypy_return_type' (line 1734)
    stypy_return_type_260869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_260869)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'iirdesign'
    return stypy_return_type_260869

# Assigning a type to the variable 'iirdesign' (line 1734)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 0), 'iirdesign', iirdesign)

@norecursion
def iirfilter(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1824)
    None_260870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 24), 'None')
    # Getting the type of 'None' (line 1824)
    None_260871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 33), 'None')
    str_260872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1824, 45), 'str', 'band')
    # Getting the type of 'False' (line 1824)
    False_260873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 60), 'False')
    str_260874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 20), 'str', 'butter')
    str_260875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 37), 'str', 'ba')
    defaults = [None_260870, None_260871, str_260872, False_260873, str_260874, str_260875]
    # Create a new context for function 'iirfilter'
    module_type_store = module_type_store.open_function_context('iirfilter', 1824, 0, False)
    
    # Passed parameters checking function
    iirfilter.stypy_localization = localization
    iirfilter.stypy_type_of_self = None
    iirfilter.stypy_type_store = module_type_store
    iirfilter.stypy_function_name = 'iirfilter'
    iirfilter.stypy_param_names_list = ['N', 'Wn', 'rp', 'rs', 'btype', 'analog', 'ftype', 'output']
    iirfilter.stypy_varargs_param_name = None
    iirfilter.stypy_kwargs_param_name = None
    iirfilter.stypy_call_defaults = defaults
    iirfilter.stypy_call_varargs = varargs
    iirfilter.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'iirfilter', ['N', 'Wn', 'rp', 'rs', 'btype', 'analog', 'ftype', 'output'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'iirfilter', localization, ['N', 'Wn', 'rp', 'rs', 'btype', 'analog', 'ftype', 'output'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'iirfilter(...)' code ##################

    str_260876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1911, (-1)), 'str', "\n    IIR digital and analog filter design given order and critical points.\n\n    Design an Nth-order digital or analog filter and return the filter\n    coefficients.\n\n    Parameters\n    ----------\n    N : int\n        The order of the filter.\n    Wn : array_like\n        A scalar or length-2 sequence giving the critical frequencies.\n        For digital filters, `Wn` is normalized from 0 to 1, where 1 is the\n        Nyquist frequency, pi radians/sample.  (`Wn` is thus in\n        half-cycles / sample.)\n        For analog filters, `Wn` is an angular frequency (e.g. rad/s).\n    rp : float, optional\n        For Chebyshev and elliptic filters, provides the maximum ripple\n        in the passband. (dB)\n    rs : float, optional\n        For Chebyshev and elliptic filters, provides the minimum attenuation\n        in the stop band. (dB)\n    btype : {'bandpass', 'lowpass', 'highpass', 'bandstop'}, optional\n        The type of filter.  Default is 'bandpass'.\n    analog : bool, optional\n        When True, return an analog filter, otherwise a digital filter is\n        returned.\n    ftype : str, optional\n        The type of IIR filter to design:\n\n            - Butterworth   : 'butter'\n            - Chebyshev I   : 'cheby1'\n            - Chebyshev II  : 'cheby2'\n            - Cauer/elliptic: 'ellip'\n            - Bessel/Thomson: 'bessel'\n\n    output : {'ba', 'zpk', 'sos'}, optional\n        Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or\n        second-order sections ('sos'). Default is 'ba'.\n\n    Returns\n    -------\n    b, a : ndarray, ndarray\n        Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.\n        Only returned if ``output='ba'``.\n    z, p, k : ndarray, ndarray, float\n        Zeros, poles, and system gain of the IIR filter transfer\n        function.  Only returned if ``output='zpk'``.\n    sos : ndarray\n        Second-order sections representation of the IIR filter.\n        Only returned if ``output=='sos'``.\n\n    See Also\n    --------\n    butter : Filter design using order and critical points\n    cheby1, cheby2, ellip, bessel\n    buttord : Find order and critical points from passband and stopband spec\n    cheb1ord, cheb2ord, ellipord\n    iirdesign : General filter design using passband and stopband spec\n\n    Notes\n    -----\n    The ``'sos'`` output parameter was added in 0.16.0.\n\n    Examples\n    --------\n    Generate a 17th-order Chebyshev II bandpass filter and plot the frequency\n    response:\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> b, a = signal.iirfilter(17, [50, 200], rs=60, btype='band',\n    ...                         analog=True, ftype='cheby2')\n    >>> w, h = signal.freqs(b, a, 1000)\n    >>> fig = plt.figure()\n    >>> ax = fig.add_subplot(111)\n    >>> ax.semilogx(w, 20 * np.log10(abs(h)))\n    >>> ax.set_title('Chebyshev Type II bandpass frequency response')\n    >>> ax.set_xlabel('Frequency [radians / second]')\n    >>> ax.set_ylabel('Amplitude [dB]')\n    >>> ax.axis((10, 1000, -100, 10))\n    >>> ax.grid(which='both', axis='both')\n    >>> plt.show()\n\n    ")
    
    # Assigning a ListComp to a Tuple (line 1912):
    
    # Assigning a Subscript to a Name (line 1912):
    
    # Obtaining the type of the subscript
    int_260877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 4), 'int')
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Obtaining an instance of the builtin type 'tuple' (line 1912)
    tuple_260882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1912)
    # Adding element type (line 1912)
    # Getting the type of 'ftype' (line 1912)
    ftype_260883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 48), 'ftype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 48), tuple_260882, ftype_260883)
    # Adding element type (line 1912)
    # Getting the type of 'btype' (line 1912)
    btype_260884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 55), 'btype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 48), tuple_260882, btype_260884)
    # Adding element type (line 1912)
    # Getting the type of 'output' (line 1912)
    output_260885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 62), 'output')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 48), tuple_260882, output_260885)
    
    comprehension_260886 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 28), tuple_260882)
    # Assigning a type to the variable 'x' (line 1912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 28), 'x', comprehension_260886)
    
    # Call to lower(...): (line 1912)
    # Processing the call keyword arguments (line 1912)
    kwargs_260880 = {}
    # Getting the type of 'x' (line 1912)
    x_260878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 28), 'x', False)
    # Obtaining the member 'lower' of a type (line 1912)
    lower_260879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 28), x_260878, 'lower')
    # Calling lower(args, kwargs) (line 1912)
    lower_call_result_260881 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 28), lower_260879, *[], **kwargs_260880)
    
    list_260887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 28), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 28), list_260887, lower_call_result_260881)
    # Obtaining the member '__getitem__' of a type (line 1912)
    getitem___260888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 4), list_260887, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1912)
    subscript_call_result_260889 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 4), getitem___260888, int_260877)
    
    # Assigning a type to the variable 'tuple_var_assignment_257334' (line 1912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 4), 'tuple_var_assignment_257334', subscript_call_result_260889)
    
    # Assigning a Subscript to a Name (line 1912):
    
    # Obtaining the type of the subscript
    int_260890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 4), 'int')
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Obtaining an instance of the builtin type 'tuple' (line 1912)
    tuple_260895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1912)
    # Adding element type (line 1912)
    # Getting the type of 'ftype' (line 1912)
    ftype_260896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 48), 'ftype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 48), tuple_260895, ftype_260896)
    # Adding element type (line 1912)
    # Getting the type of 'btype' (line 1912)
    btype_260897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 55), 'btype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 48), tuple_260895, btype_260897)
    # Adding element type (line 1912)
    # Getting the type of 'output' (line 1912)
    output_260898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 62), 'output')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 48), tuple_260895, output_260898)
    
    comprehension_260899 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 28), tuple_260895)
    # Assigning a type to the variable 'x' (line 1912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 28), 'x', comprehension_260899)
    
    # Call to lower(...): (line 1912)
    # Processing the call keyword arguments (line 1912)
    kwargs_260893 = {}
    # Getting the type of 'x' (line 1912)
    x_260891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 28), 'x', False)
    # Obtaining the member 'lower' of a type (line 1912)
    lower_260892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 28), x_260891, 'lower')
    # Calling lower(args, kwargs) (line 1912)
    lower_call_result_260894 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 28), lower_260892, *[], **kwargs_260893)
    
    list_260900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 28), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 28), list_260900, lower_call_result_260894)
    # Obtaining the member '__getitem__' of a type (line 1912)
    getitem___260901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 4), list_260900, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1912)
    subscript_call_result_260902 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 4), getitem___260901, int_260890)
    
    # Assigning a type to the variable 'tuple_var_assignment_257335' (line 1912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 4), 'tuple_var_assignment_257335', subscript_call_result_260902)
    
    # Assigning a Subscript to a Name (line 1912):
    
    # Obtaining the type of the subscript
    int_260903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 4), 'int')
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Obtaining an instance of the builtin type 'tuple' (line 1912)
    tuple_260908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1912)
    # Adding element type (line 1912)
    # Getting the type of 'ftype' (line 1912)
    ftype_260909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 48), 'ftype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 48), tuple_260908, ftype_260909)
    # Adding element type (line 1912)
    # Getting the type of 'btype' (line 1912)
    btype_260910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 55), 'btype')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 48), tuple_260908, btype_260910)
    # Adding element type (line 1912)
    # Getting the type of 'output' (line 1912)
    output_260911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 62), 'output')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 48), tuple_260908, output_260911)
    
    comprehension_260912 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 28), tuple_260908)
    # Assigning a type to the variable 'x' (line 1912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 28), 'x', comprehension_260912)
    
    # Call to lower(...): (line 1912)
    # Processing the call keyword arguments (line 1912)
    kwargs_260906 = {}
    # Getting the type of 'x' (line 1912)
    x_260904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 28), 'x', False)
    # Obtaining the member 'lower' of a type (line 1912)
    lower_260905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 28), x_260904, 'lower')
    # Calling lower(args, kwargs) (line 1912)
    lower_call_result_260907 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 28), lower_260905, *[], **kwargs_260906)
    
    list_260913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 28), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1912, 28), list_260913, lower_call_result_260907)
    # Obtaining the member '__getitem__' of a type (line 1912)
    getitem___260914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1912, 4), list_260913, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1912)
    subscript_call_result_260915 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 4), getitem___260914, int_260903)
    
    # Assigning a type to the variable 'tuple_var_assignment_257336' (line 1912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 4), 'tuple_var_assignment_257336', subscript_call_result_260915)
    
    # Assigning a Name to a Name (line 1912):
    # Getting the type of 'tuple_var_assignment_257334' (line 1912)
    tuple_var_assignment_257334_260916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 4), 'tuple_var_assignment_257334')
    # Assigning a type to the variable 'ftype' (line 1912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 4), 'ftype', tuple_var_assignment_257334_260916)
    
    # Assigning a Name to a Name (line 1912):
    # Getting the type of 'tuple_var_assignment_257335' (line 1912)
    tuple_var_assignment_257335_260917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 4), 'tuple_var_assignment_257335')
    # Assigning a type to the variable 'btype' (line 1912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 11), 'btype', tuple_var_assignment_257335_260917)
    
    # Assigning a Name to a Name (line 1912):
    # Getting the type of 'tuple_var_assignment_257336' (line 1912)
    tuple_var_assignment_257336_260918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 4), 'tuple_var_assignment_257336')
    # Assigning a type to the variable 'output' (line 1912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 18), 'output', tuple_var_assignment_257336_260918)
    
    # Assigning a Call to a Name (line 1913):
    
    # Assigning a Call to a Name (line 1913):
    
    # Call to asarray(...): (line 1913)
    # Processing the call arguments (line 1913)
    # Getting the type of 'Wn' (line 1913)
    Wn_260920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 17), 'Wn', False)
    # Processing the call keyword arguments (line 1913)
    kwargs_260921 = {}
    # Getting the type of 'asarray' (line 1913)
    asarray_260919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 9), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1913)
    asarray_call_result_260922 = invoke(stypy.reporting.localization.Localization(__file__, 1913, 9), asarray_260919, *[Wn_260920], **kwargs_260921)
    
    # Assigning a type to the variable 'Wn' (line 1913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1913, 4), 'Wn', asarray_call_result_260922)
    
    
    # SSA begins for try-except statement (line 1914)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Name (line 1915):
    
    # Assigning a Subscript to a Name (line 1915):
    
    # Obtaining the type of the subscript
    # Getting the type of 'btype' (line 1915)
    btype_260923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 26), 'btype')
    # Getting the type of 'band_dict' (line 1915)
    band_dict_260924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 16), 'band_dict')
    # Obtaining the member '__getitem__' of a type (line 1915)
    getitem___260925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1915, 16), band_dict_260924, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1915)
    subscript_call_result_260926 = invoke(stypy.reporting.localization.Localization(__file__, 1915, 16), getitem___260925, btype_260923)
    
    # Assigning a type to the variable 'btype' (line 1915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1915, 8), 'btype', subscript_call_result_260926)
    # SSA branch for the except part of a try statement (line 1914)
    # SSA branch for the except 'KeyError' branch of a try statement (line 1914)
    module_type_store.open_ssa_branch('except')
    
    # Call to ValueError(...): (line 1917)
    # Processing the call arguments (line 1917)
    str_260928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 25), 'str', "'%s' is an invalid bandtype for filter.")
    # Getting the type of 'btype' (line 1917)
    btype_260929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 69), 'btype', False)
    # Applying the binary operator '%' (line 1917)
    result_mod_260930 = python_operator(stypy.reporting.localization.Localization(__file__, 1917, 25), '%', str_260928, btype_260929)
    
    # Processing the call keyword arguments (line 1917)
    kwargs_260931 = {}
    # Getting the type of 'ValueError' (line 1917)
    ValueError_260927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1917)
    ValueError_call_result_260932 = invoke(stypy.reporting.localization.Localization(__file__, 1917, 14), ValueError_260927, *[result_mod_260930], **kwargs_260931)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1917, 8), ValueError_call_result_260932, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1914)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1919)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Name (line 1920):
    
    # Assigning a Subscript to a Name (line 1920):
    
    # Obtaining the type of the subscript
    int_260933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 38), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'ftype' (line 1920)
    ftype_260934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 31), 'ftype')
    # Getting the type of 'filter_dict' (line 1920)
    filter_dict_260935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 19), 'filter_dict')
    # Obtaining the member '__getitem__' of a type (line 1920)
    getitem___260936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 19), filter_dict_260935, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1920)
    subscript_call_result_260937 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 19), getitem___260936, ftype_260934)
    
    # Obtaining the member '__getitem__' of a type (line 1920)
    getitem___260938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 19), subscript_call_result_260937, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1920)
    subscript_call_result_260939 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 19), getitem___260938, int_260933)
    
    # Assigning a type to the variable 'typefunc' (line 1920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 8), 'typefunc', subscript_call_result_260939)
    # SSA branch for the except part of a try statement (line 1919)
    # SSA branch for the except 'KeyError' branch of a try statement (line 1919)
    module_type_store.open_ssa_branch('except')
    
    # Call to ValueError(...): (line 1922)
    # Processing the call arguments (line 1922)
    str_260941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1922, 25), 'str', "'%s' is not a valid basic IIR filter.")
    # Getting the type of 'ftype' (line 1922)
    ftype_260942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 67), 'ftype', False)
    # Applying the binary operator '%' (line 1922)
    result_mod_260943 = python_operator(stypy.reporting.localization.Localization(__file__, 1922, 25), '%', str_260941, ftype_260942)
    
    # Processing the call keyword arguments (line 1922)
    kwargs_260944 = {}
    # Getting the type of 'ValueError' (line 1922)
    ValueError_260940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1922)
    ValueError_call_result_260945 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 14), ValueError_260940, *[result_mod_260943], **kwargs_260944)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1922, 8), ValueError_call_result_260945, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1919)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'output' (line 1924)
    output_260946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 7), 'output')
    
    # Obtaining an instance of the builtin type 'list' (line 1924)
    list_260947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1924)
    # Adding element type (line 1924)
    str_260948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 22), 'str', 'ba')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1924, 21), list_260947, str_260948)
    # Adding element type (line 1924)
    str_260949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 28), 'str', 'zpk')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1924, 21), list_260947, str_260949)
    # Adding element type (line 1924)
    str_260950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 35), 'str', 'sos')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1924, 21), list_260947, str_260950)
    
    # Applying the binary operator 'notin' (line 1924)
    result_contains_260951 = python_operator(stypy.reporting.localization.Localization(__file__, 1924, 7), 'notin', output_260946, list_260947)
    
    # Testing the type of an if condition (line 1924)
    if_condition_260952 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1924, 4), result_contains_260951)
    # Assigning a type to the variable 'if_condition_260952' (line 1924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 4), 'if_condition_260952', if_condition_260952)
    # SSA begins for if statement (line 1924)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1925)
    # Processing the call arguments (line 1925)
    str_260954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1925, 25), 'str', "'%s' is not a valid output form.")
    # Getting the type of 'output' (line 1925)
    output_260955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 62), 'output', False)
    # Applying the binary operator '%' (line 1925)
    result_mod_260956 = python_operator(stypy.reporting.localization.Localization(__file__, 1925, 25), '%', str_260954, output_260955)
    
    # Processing the call keyword arguments (line 1925)
    kwargs_260957 = {}
    # Getting the type of 'ValueError' (line 1925)
    ValueError_260953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1925)
    ValueError_call_result_260958 = invoke(stypy.reporting.localization.Localization(__file__, 1925, 14), ValueError_260953, *[result_mod_260956], **kwargs_260957)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1925, 8), ValueError_call_result_260958, 'raise parameter', BaseException)
    # SSA join for if statement (line 1924)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'rp' (line 1927)
    rp_260959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 7), 'rp')
    # Getting the type of 'None' (line 1927)
    None_260960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 17), 'None')
    # Applying the binary operator 'isnot' (line 1927)
    result_is_not_260961 = python_operator(stypy.reporting.localization.Localization(__file__, 1927, 7), 'isnot', rp_260959, None_260960)
    
    
    # Getting the type of 'rp' (line 1927)
    rp_260962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 26), 'rp')
    int_260963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, 31), 'int')
    # Applying the binary operator '<' (line 1927)
    result_lt_260964 = python_operator(stypy.reporting.localization.Localization(__file__, 1927, 26), '<', rp_260962, int_260963)
    
    # Applying the binary operator 'and' (line 1927)
    result_and_keyword_260965 = python_operator(stypy.reporting.localization.Localization(__file__, 1927, 7), 'and', result_is_not_260961, result_lt_260964)
    
    # Testing the type of an if condition (line 1927)
    if_condition_260966 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1927, 4), result_and_keyword_260965)
    # Assigning a type to the variable 'if_condition_260966' (line 1927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1927, 4), 'if_condition_260966', if_condition_260966)
    # SSA begins for if statement (line 1927)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1928)
    # Processing the call arguments (line 1928)
    str_260968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1928, 25), 'str', 'passband ripple (rp) must be positive')
    # Processing the call keyword arguments (line 1928)
    kwargs_260969 = {}
    # Getting the type of 'ValueError' (line 1928)
    ValueError_260967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1928)
    ValueError_call_result_260970 = invoke(stypy.reporting.localization.Localization(__file__, 1928, 14), ValueError_260967, *[str_260968], **kwargs_260969)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1928, 8), ValueError_call_result_260970, 'raise parameter', BaseException)
    # SSA join for if statement (line 1927)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'rs' (line 1930)
    rs_260971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 7), 'rs')
    # Getting the type of 'None' (line 1930)
    None_260972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 17), 'None')
    # Applying the binary operator 'isnot' (line 1930)
    result_is_not_260973 = python_operator(stypy.reporting.localization.Localization(__file__, 1930, 7), 'isnot', rs_260971, None_260972)
    
    
    # Getting the type of 'rs' (line 1930)
    rs_260974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 26), 'rs')
    int_260975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1930, 31), 'int')
    # Applying the binary operator '<' (line 1930)
    result_lt_260976 = python_operator(stypy.reporting.localization.Localization(__file__, 1930, 26), '<', rs_260974, int_260975)
    
    # Applying the binary operator 'and' (line 1930)
    result_and_keyword_260977 = python_operator(stypy.reporting.localization.Localization(__file__, 1930, 7), 'and', result_is_not_260973, result_lt_260976)
    
    # Testing the type of an if condition (line 1930)
    if_condition_260978 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1930, 4), result_and_keyword_260977)
    # Assigning a type to the variable 'if_condition_260978' (line 1930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1930, 4), 'if_condition_260978', if_condition_260978)
    # SSA begins for if statement (line 1930)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1931)
    # Processing the call arguments (line 1931)
    str_260980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1931, 25), 'str', 'stopband attenuation (rs) must be positive')
    # Processing the call keyword arguments (line 1931)
    kwargs_260981 = {}
    # Getting the type of 'ValueError' (line 1931)
    ValueError_260979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1931)
    ValueError_call_result_260982 = invoke(stypy.reporting.localization.Localization(__file__, 1931, 14), ValueError_260979, *[str_260980], **kwargs_260981)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1931, 8), ValueError_call_result_260982, 'raise parameter', BaseException)
    # SSA join for if statement (line 1930)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'typefunc' (line 1934)
    typefunc_260983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 7), 'typefunc')
    # Getting the type of 'buttap' (line 1934)
    buttap_260984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 19), 'buttap')
    # Applying the binary operator '==' (line 1934)
    result_eq_260985 = python_operator(stypy.reporting.localization.Localization(__file__, 1934, 7), '==', typefunc_260983, buttap_260984)
    
    # Testing the type of an if condition (line 1934)
    if_condition_260986 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1934, 4), result_eq_260985)
    # Assigning a type to the variable 'if_condition_260986' (line 1934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1934, 4), 'if_condition_260986', if_condition_260986)
    # SSA begins for if statement (line 1934)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1935):
    
    # Assigning a Subscript to a Name (line 1935):
    
    # Obtaining the type of the subscript
    int_260987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1935, 8), 'int')
    
    # Call to typefunc(...): (line 1935)
    # Processing the call arguments (line 1935)
    # Getting the type of 'N' (line 1935)
    N_260989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 27), 'N', False)
    # Processing the call keyword arguments (line 1935)
    kwargs_260990 = {}
    # Getting the type of 'typefunc' (line 1935)
    typefunc_260988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1935)
    typefunc_call_result_260991 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 18), typefunc_260988, *[N_260989], **kwargs_260990)
    
    # Obtaining the member '__getitem__' of a type (line 1935)
    getitem___260992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1935, 8), typefunc_call_result_260991, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1935)
    subscript_call_result_260993 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 8), getitem___260992, int_260987)
    
    # Assigning a type to the variable 'tuple_var_assignment_257337' (line 1935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'tuple_var_assignment_257337', subscript_call_result_260993)
    
    # Assigning a Subscript to a Name (line 1935):
    
    # Obtaining the type of the subscript
    int_260994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1935, 8), 'int')
    
    # Call to typefunc(...): (line 1935)
    # Processing the call arguments (line 1935)
    # Getting the type of 'N' (line 1935)
    N_260996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 27), 'N', False)
    # Processing the call keyword arguments (line 1935)
    kwargs_260997 = {}
    # Getting the type of 'typefunc' (line 1935)
    typefunc_260995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1935)
    typefunc_call_result_260998 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 18), typefunc_260995, *[N_260996], **kwargs_260997)
    
    # Obtaining the member '__getitem__' of a type (line 1935)
    getitem___260999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1935, 8), typefunc_call_result_260998, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1935)
    subscript_call_result_261000 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 8), getitem___260999, int_260994)
    
    # Assigning a type to the variable 'tuple_var_assignment_257338' (line 1935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'tuple_var_assignment_257338', subscript_call_result_261000)
    
    # Assigning a Subscript to a Name (line 1935):
    
    # Obtaining the type of the subscript
    int_261001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1935, 8), 'int')
    
    # Call to typefunc(...): (line 1935)
    # Processing the call arguments (line 1935)
    # Getting the type of 'N' (line 1935)
    N_261003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 27), 'N', False)
    # Processing the call keyword arguments (line 1935)
    kwargs_261004 = {}
    # Getting the type of 'typefunc' (line 1935)
    typefunc_261002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1935)
    typefunc_call_result_261005 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 18), typefunc_261002, *[N_261003], **kwargs_261004)
    
    # Obtaining the member '__getitem__' of a type (line 1935)
    getitem___261006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1935, 8), typefunc_call_result_261005, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1935)
    subscript_call_result_261007 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 8), getitem___261006, int_261001)
    
    # Assigning a type to the variable 'tuple_var_assignment_257339' (line 1935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'tuple_var_assignment_257339', subscript_call_result_261007)
    
    # Assigning a Name to a Name (line 1935):
    # Getting the type of 'tuple_var_assignment_257337' (line 1935)
    tuple_var_assignment_257337_261008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'tuple_var_assignment_257337')
    # Assigning a type to the variable 'z' (line 1935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'z', tuple_var_assignment_257337_261008)
    
    # Assigning a Name to a Name (line 1935):
    # Getting the type of 'tuple_var_assignment_257338' (line 1935)
    tuple_var_assignment_257338_261009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'tuple_var_assignment_257338')
    # Assigning a type to the variable 'p' (line 1935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1935, 11), 'p', tuple_var_assignment_257338_261009)
    
    # Assigning a Name to a Name (line 1935):
    # Getting the type of 'tuple_var_assignment_257339' (line 1935)
    tuple_var_assignment_257339_261010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'tuple_var_assignment_257339')
    # Assigning a type to the variable 'k' (line 1935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1935, 14), 'k', tuple_var_assignment_257339_261010)
    # SSA branch for the else part of an if statement (line 1934)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'typefunc' (line 1936)
    typefunc_261011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 9), 'typefunc')
    # Getting the type of 'besselap' (line 1936)
    besselap_261012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 21), 'besselap')
    # Applying the binary operator '==' (line 1936)
    result_eq_261013 = python_operator(stypy.reporting.localization.Localization(__file__, 1936, 9), '==', typefunc_261011, besselap_261012)
    
    # Testing the type of an if condition (line 1936)
    if_condition_261014 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1936, 9), result_eq_261013)
    # Assigning a type to the variable 'if_condition_261014' (line 1936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 9), 'if_condition_261014', if_condition_261014)
    # SSA begins for if statement (line 1936)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1937):
    
    # Assigning a Subscript to a Name (line 1937):
    
    # Obtaining the type of the subscript
    int_261015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1937, 8), 'int')
    
    # Call to typefunc(...): (line 1937)
    # Processing the call arguments (line 1937)
    # Getting the type of 'N' (line 1937)
    N_261017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 27), 'N', False)
    # Processing the call keyword arguments (line 1937)
    
    # Obtaining the type of the subscript
    # Getting the type of 'ftype' (line 1937)
    ftype_261018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 48), 'ftype', False)
    # Getting the type of 'bessel_norms' (line 1937)
    bessel_norms_261019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 35), 'bessel_norms', False)
    # Obtaining the member '__getitem__' of a type (line 1937)
    getitem___261020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 35), bessel_norms_261019, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1937)
    subscript_call_result_261021 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 35), getitem___261020, ftype_261018)
    
    keyword_261022 = subscript_call_result_261021
    kwargs_261023 = {'norm': keyword_261022}
    # Getting the type of 'typefunc' (line 1937)
    typefunc_261016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1937)
    typefunc_call_result_261024 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 18), typefunc_261016, *[N_261017], **kwargs_261023)
    
    # Obtaining the member '__getitem__' of a type (line 1937)
    getitem___261025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 8), typefunc_call_result_261024, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1937)
    subscript_call_result_261026 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 8), getitem___261025, int_261015)
    
    # Assigning a type to the variable 'tuple_var_assignment_257340' (line 1937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 8), 'tuple_var_assignment_257340', subscript_call_result_261026)
    
    # Assigning a Subscript to a Name (line 1937):
    
    # Obtaining the type of the subscript
    int_261027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1937, 8), 'int')
    
    # Call to typefunc(...): (line 1937)
    # Processing the call arguments (line 1937)
    # Getting the type of 'N' (line 1937)
    N_261029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 27), 'N', False)
    # Processing the call keyword arguments (line 1937)
    
    # Obtaining the type of the subscript
    # Getting the type of 'ftype' (line 1937)
    ftype_261030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 48), 'ftype', False)
    # Getting the type of 'bessel_norms' (line 1937)
    bessel_norms_261031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 35), 'bessel_norms', False)
    # Obtaining the member '__getitem__' of a type (line 1937)
    getitem___261032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 35), bessel_norms_261031, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1937)
    subscript_call_result_261033 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 35), getitem___261032, ftype_261030)
    
    keyword_261034 = subscript_call_result_261033
    kwargs_261035 = {'norm': keyword_261034}
    # Getting the type of 'typefunc' (line 1937)
    typefunc_261028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1937)
    typefunc_call_result_261036 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 18), typefunc_261028, *[N_261029], **kwargs_261035)
    
    # Obtaining the member '__getitem__' of a type (line 1937)
    getitem___261037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 8), typefunc_call_result_261036, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1937)
    subscript_call_result_261038 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 8), getitem___261037, int_261027)
    
    # Assigning a type to the variable 'tuple_var_assignment_257341' (line 1937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 8), 'tuple_var_assignment_257341', subscript_call_result_261038)
    
    # Assigning a Subscript to a Name (line 1937):
    
    # Obtaining the type of the subscript
    int_261039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1937, 8), 'int')
    
    # Call to typefunc(...): (line 1937)
    # Processing the call arguments (line 1937)
    # Getting the type of 'N' (line 1937)
    N_261041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 27), 'N', False)
    # Processing the call keyword arguments (line 1937)
    
    # Obtaining the type of the subscript
    # Getting the type of 'ftype' (line 1937)
    ftype_261042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 48), 'ftype', False)
    # Getting the type of 'bessel_norms' (line 1937)
    bessel_norms_261043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 35), 'bessel_norms', False)
    # Obtaining the member '__getitem__' of a type (line 1937)
    getitem___261044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 35), bessel_norms_261043, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1937)
    subscript_call_result_261045 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 35), getitem___261044, ftype_261042)
    
    keyword_261046 = subscript_call_result_261045
    kwargs_261047 = {'norm': keyword_261046}
    # Getting the type of 'typefunc' (line 1937)
    typefunc_261040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1937)
    typefunc_call_result_261048 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 18), typefunc_261040, *[N_261041], **kwargs_261047)
    
    # Obtaining the member '__getitem__' of a type (line 1937)
    getitem___261049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 8), typefunc_call_result_261048, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1937)
    subscript_call_result_261050 = invoke(stypy.reporting.localization.Localization(__file__, 1937, 8), getitem___261049, int_261039)
    
    # Assigning a type to the variable 'tuple_var_assignment_257342' (line 1937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 8), 'tuple_var_assignment_257342', subscript_call_result_261050)
    
    # Assigning a Name to a Name (line 1937):
    # Getting the type of 'tuple_var_assignment_257340' (line 1937)
    tuple_var_assignment_257340_261051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 8), 'tuple_var_assignment_257340')
    # Assigning a type to the variable 'z' (line 1937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 8), 'z', tuple_var_assignment_257340_261051)
    
    # Assigning a Name to a Name (line 1937):
    # Getting the type of 'tuple_var_assignment_257341' (line 1937)
    tuple_var_assignment_257341_261052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 8), 'tuple_var_assignment_257341')
    # Assigning a type to the variable 'p' (line 1937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 11), 'p', tuple_var_assignment_257341_261052)
    
    # Assigning a Name to a Name (line 1937):
    # Getting the type of 'tuple_var_assignment_257342' (line 1937)
    tuple_var_assignment_257342_261053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 8), 'tuple_var_assignment_257342')
    # Assigning a type to the variable 'k' (line 1937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 14), 'k', tuple_var_assignment_257342_261053)
    # SSA branch for the else part of an if statement (line 1936)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'typefunc' (line 1938)
    typefunc_261054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 9), 'typefunc')
    # Getting the type of 'cheb1ap' (line 1938)
    cheb1ap_261055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 21), 'cheb1ap')
    # Applying the binary operator '==' (line 1938)
    result_eq_261056 = python_operator(stypy.reporting.localization.Localization(__file__, 1938, 9), '==', typefunc_261054, cheb1ap_261055)
    
    # Testing the type of an if condition (line 1938)
    if_condition_261057 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1938, 9), result_eq_261056)
    # Assigning a type to the variable 'if_condition_261057' (line 1938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1938, 9), 'if_condition_261057', if_condition_261057)
    # SSA begins for if statement (line 1938)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 1939)
    # Getting the type of 'rp' (line 1939)
    rp_261058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 11), 'rp')
    # Getting the type of 'None' (line 1939)
    None_261059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 17), 'None')
    
    (may_be_261060, more_types_in_union_261061) = may_be_none(rp_261058, None_261059)

    if may_be_261060:

        if more_types_in_union_261061:
            # Runtime conditional SSA (line 1939)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to ValueError(...): (line 1940)
        # Processing the call arguments (line 1940)
        str_261063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1940, 29), 'str', 'passband ripple (rp) must be provided to design a Chebyshev I filter.')
        # Processing the call keyword arguments (line 1940)
        kwargs_261064 = {}
        # Getting the type of 'ValueError' (line 1940)
        ValueError_261062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1940)
        ValueError_call_result_261065 = invoke(stypy.reporting.localization.Localization(__file__, 1940, 18), ValueError_261062, *[str_261063], **kwargs_261064)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1940, 12), ValueError_call_result_261065, 'raise parameter', BaseException)

        if more_types_in_union_261061:
            # SSA join for if statement (line 1939)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 1942):
    
    # Assigning a Subscript to a Name (line 1942):
    
    # Obtaining the type of the subscript
    int_261066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1942, 8), 'int')
    
    # Call to typefunc(...): (line 1942)
    # Processing the call arguments (line 1942)
    # Getting the type of 'N' (line 1942)
    N_261068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 27), 'N', False)
    # Getting the type of 'rp' (line 1942)
    rp_261069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 30), 'rp', False)
    # Processing the call keyword arguments (line 1942)
    kwargs_261070 = {}
    # Getting the type of 'typefunc' (line 1942)
    typefunc_261067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1942)
    typefunc_call_result_261071 = invoke(stypy.reporting.localization.Localization(__file__, 1942, 18), typefunc_261067, *[N_261068, rp_261069], **kwargs_261070)
    
    # Obtaining the member '__getitem__' of a type (line 1942)
    getitem___261072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1942, 8), typefunc_call_result_261071, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1942)
    subscript_call_result_261073 = invoke(stypy.reporting.localization.Localization(__file__, 1942, 8), getitem___261072, int_261066)
    
    # Assigning a type to the variable 'tuple_var_assignment_257343' (line 1942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 8), 'tuple_var_assignment_257343', subscript_call_result_261073)
    
    # Assigning a Subscript to a Name (line 1942):
    
    # Obtaining the type of the subscript
    int_261074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1942, 8), 'int')
    
    # Call to typefunc(...): (line 1942)
    # Processing the call arguments (line 1942)
    # Getting the type of 'N' (line 1942)
    N_261076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 27), 'N', False)
    # Getting the type of 'rp' (line 1942)
    rp_261077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 30), 'rp', False)
    # Processing the call keyword arguments (line 1942)
    kwargs_261078 = {}
    # Getting the type of 'typefunc' (line 1942)
    typefunc_261075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1942)
    typefunc_call_result_261079 = invoke(stypy.reporting.localization.Localization(__file__, 1942, 18), typefunc_261075, *[N_261076, rp_261077], **kwargs_261078)
    
    # Obtaining the member '__getitem__' of a type (line 1942)
    getitem___261080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1942, 8), typefunc_call_result_261079, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1942)
    subscript_call_result_261081 = invoke(stypy.reporting.localization.Localization(__file__, 1942, 8), getitem___261080, int_261074)
    
    # Assigning a type to the variable 'tuple_var_assignment_257344' (line 1942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 8), 'tuple_var_assignment_257344', subscript_call_result_261081)
    
    # Assigning a Subscript to a Name (line 1942):
    
    # Obtaining the type of the subscript
    int_261082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1942, 8), 'int')
    
    # Call to typefunc(...): (line 1942)
    # Processing the call arguments (line 1942)
    # Getting the type of 'N' (line 1942)
    N_261084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 27), 'N', False)
    # Getting the type of 'rp' (line 1942)
    rp_261085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 30), 'rp', False)
    # Processing the call keyword arguments (line 1942)
    kwargs_261086 = {}
    # Getting the type of 'typefunc' (line 1942)
    typefunc_261083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1942)
    typefunc_call_result_261087 = invoke(stypy.reporting.localization.Localization(__file__, 1942, 18), typefunc_261083, *[N_261084, rp_261085], **kwargs_261086)
    
    # Obtaining the member '__getitem__' of a type (line 1942)
    getitem___261088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1942, 8), typefunc_call_result_261087, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1942)
    subscript_call_result_261089 = invoke(stypy.reporting.localization.Localization(__file__, 1942, 8), getitem___261088, int_261082)
    
    # Assigning a type to the variable 'tuple_var_assignment_257345' (line 1942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 8), 'tuple_var_assignment_257345', subscript_call_result_261089)
    
    # Assigning a Name to a Name (line 1942):
    # Getting the type of 'tuple_var_assignment_257343' (line 1942)
    tuple_var_assignment_257343_261090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 8), 'tuple_var_assignment_257343')
    # Assigning a type to the variable 'z' (line 1942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 8), 'z', tuple_var_assignment_257343_261090)
    
    # Assigning a Name to a Name (line 1942):
    # Getting the type of 'tuple_var_assignment_257344' (line 1942)
    tuple_var_assignment_257344_261091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 8), 'tuple_var_assignment_257344')
    # Assigning a type to the variable 'p' (line 1942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 11), 'p', tuple_var_assignment_257344_261091)
    
    # Assigning a Name to a Name (line 1942):
    # Getting the type of 'tuple_var_assignment_257345' (line 1942)
    tuple_var_assignment_257345_261092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 8), 'tuple_var_assignment_257345')
    # Assigning a type to the variable 'k' (line 1942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 14), 'k', tuple_var_assignment_257345_261092)
    # SSA branch for the else part of an if statement (line 1938)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'typefunc' (line 1943)
    typefunc_261093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 9), 'typefunc')
    # Getting the type of 'cheb2ap' (line 1943)
    cheb2ap_261094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 21), 'cheb2ap')
    # Applying the binary operator '==' (line 1943)
    result_eq_261095 = python_operator(stypy.reporting.localization.Localization(__file__, 1943, 9), '==', typefunc_261093, cheb2ap_261094)
    
    # Testing the type of an if condition (line 1943)
    if_condition_261096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1943, 9), result_eq_261095)
    # Assigning a type to the variable 'if_condition_261096' (line 1943)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1943, 9), 'if_condition_261096', if_condition_261096)
    # SSA begins for if statement (line 1943)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 1944)
    # Getting the type of 'rs' (line 1944)
    rs_261097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 11), 'rs')
    # Getting the type of 'None' (line 1944)
    None_261098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 17), 'None')
    
    (may_be_261099, more_types_in_union_261100) = may_be_none(rs_261097, None_261098)

    if may_be_261099:

        if more_types_in_union_261100:
            # Runtime conditional SSA (line 1944)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to ValueError(...): (line 1945)
        # Processing the call arguments (line 1945)
        str_261102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1945, 29), 'str', 'stopband attenuation (rs) must be provided to design an Chebyshev II filter.')
        # Processing the call keyword arguments (line 1945)
        kwargs_261103 = {}
        # Getting the type of 'ValueError' (line 1945)
        ValueError_261101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1945)
        ValueError_call_result_261104 = invoke(stypy.reporting.localization.Localization(__file__, 1945, 18), ValueError_261101, *[str_261102], **kwargs_261103)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1945, 12), ValueError_call_result_261104, 'raise parameter', BaseException)

        if more_types_in_union_261100:
            # SSA join for if statement (line 1944)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 1947):
    
    # Assigning a Subscript to a Name (line 1947):
    
    # Obtaining the type of the subscript
    int_261105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1947, 8), 'int')
    
    # Call to typefunc(...): (line 1947)
    # Processing the call arguments (line 1947)
    # Getting the type of 'N' (line 1947)
    N_261107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 27), 'N', False)
    # Getting the type of 'rs' (line 1947)
    rs_261108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 30), 'rs', False)
    # Processing the call keyword arguments (line 1947)
    kwargs_261109 = {}
    # Getting the type of 'typefunc' (line 1947)
    typefunc_261106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1947)
    typefunc_call_result_261110 = invoke(stypy.reporting.localization.Localization(__file__, 1947, 18), typefunc_261106, *[N_261107, rs_261108], **kwargs_261109)
    
    # Obtaining the member '__getitem__' of a type (line 1947)
    getitem___261111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1947, 8), typefunc_call_result_261110, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1947)
    subscript_call_result_261112 = invoke(stypy.reporting.localization.Localization(__file__, 1947, 8), getitem___261111, int_261105)
    
    # Assigning a type to the variable 'tuple_var_assignment_257346' (line 1947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 8), 'tuple_var_assignment_257346', subscript_call_result_261112)
    
    # Assigning a Subscript to a Name (line 1947):
    
    # Obtaining the type of the subscript
    int_261113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1947, 8), 'int')
    
    # Call to typefunc(...): (line 1947)
    # Processing the call arguments (line 1947)
    # Getting the type of 'N' (line 1947)
    N_261115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 27), 'N', False)
    # Getting the type of 'rs' (line 1947)
    rs_261116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 30), 'rs', False)
    # Processing the call keyword arguments (line 1947)
    kwargs_261117 = {}
    # Getting the type of 'typefunc' (line 1947)
    typefunc_261114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1947)
    typefunc_call_result_261118 = invoke(stypy.reporting.localization.Localization(__file__, 1947, 18), typefunc_261114, *[N_261115, rs_261116], **kwargs_261117)
    
    # Obtaining the member '__getitem__' of a type (line 1947)
    getitem___261119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1947, 8), typefunc_call_result_261118, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1947)
    subscript_call_result_261120 = invoke(stypy.reporting.localization.Localization(__file__, 1947, 8), getitem___261119, int_261113)
    
    # Assigning a type to the variable 'tuple_var_assignment_257347' (line 1947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 8), 'tuple_var_assignment_257347', subscript_call_result_261120)
    
    # Assigning a Subscript to a Name (line 1947):
    
    # Obtaining the type of the subscript
    int_261121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1947, 8), 'int')
    
    # Call to typefunc(...): (line 1947)
    # Processing the call arguments (line 1947)
    # Getting the type of 'N' (line 1947)
    N_261123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 27), 'N', False)
    # Getting the type of 'rs' (line 1947)
    rs_261124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 30), 'rs', False)
    # Processing the call keyword arguments (line 1947)
    kwargs_261125 = {}
    # Getting the type of 'typefunc' (line 1947)
    typefunc_261122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1947)
    typefunc_call_result_261126 = invoke(stypy.reporting.localization.Localization(__file__, 1947, 18), typefunc_261122, *[N_261123, rs_261124], **kwargs_261125)
    
    # Obtaining the member '__getitem__' of a type (line 1947)
    getitem___261127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1947, 8), typefunc_call_result_261126, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1947)
    subscript_call_result_261128 = invoke(stypy.reporting.localization.Localization(__file__, 1947, 8), getitem___261127, int_261121)
    
    # Assigning a type to the variable 'tuple_var_assignment_257348' (line 1947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 8), 'tuple_var_assignment_257348', subscript_call_result_261128)
    
    # Assigning a Name to a Name (line 1947):
    # Getting the type of 'tuple_var_assignment_257346' (line 1947)
    tuple_var_assignment_257346_261129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 8), 'tuple_var_assignment_257346')
    # Assigning a type to the variable 'z' (line 1947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 8), 'z', tuple_var_assignment_257346_261129)
    
    # Assigning a Name to a Name (line 1947):
    # Getting the type of 'tuple_var_assignment_257347' (line 1947)
    tuple_var_assignment_257347_261130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 8), 'tuple_var_assignment_257347')
    # Assigning a type to the variable 'p' (line 1947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 11), 'p', tuple_var_assignment_257347_261130)
    
    # Assigning a Name to a Name (line 1947):
    # Getting the type of 'tuple_var_assignment_257348' (line 1947)
    tuple_var_assignment_257348_261131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 8), 'tuple_var_assignment_257348')
    # Assigning a type to the variable 'k' (line 1947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 14), 'k', tuple_var_assignment_257348_261131)
    # SSA branch for the else part of an if statement (line 1943)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'typefunc' (line 1948)
    typefunc_261132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 9), 'typefunc')
    # Getting the type of 'ellipap' (line 1948)
    ellipap_261133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 21), 'ellipap')
    # Applying the binary operator '==' (line 1948)
    result_eq_261134 = python_operator(stypy.reporting.localization.Localization(__file__, 1948, 9), '==', typefunc_261132, ellipap_261133)
    
    # Testing the type of an if condition (line 1948)
    if_condition_261135 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1948, 9), result_eq_261134)
    # Assigning a type to the variable 'if_condition_261135' (line 1948)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1948, 9), 'if_condition_261135', if_condition_261135)
    # SSA begins for if statement (line 1948)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'rs' (line 1949)
    rs_261136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 11), 'rs')
    # Getting the type of 'None' (line 1949)
    None_261137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 17), 'None')
    # Applying the binary operator 'is' (line 1949)
    result_is__261138 = python_operator(stypy.reporting.localization.Localization(__file__, 1949, 11), 'is', rs_261136, None_261137)
    
    
    # Getting the type of 'rp' (line 1949)
    rp_261139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 25), 'rp')
    # Getting the type of 'None' (line 1949)
    None_261140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 31), 'None')
    # Applying the binary operator 'is' (line 1949)
    result_is__261141 = python_operator(stypy.reporting.localization.Localization(__file__, 1949, 25), 'is', rp_261139, None_261140)
    
    # Applying the binary operator 'or' (line 1949)
    result_or_keyword_261142 = python_operator(stypy.reporting.localization.Localization(__file__, 1949, 11), 'or', result_is__261138, result_is__261141)
    
    # Testing the type of an if condition (line 1949)
    if_condition_261143 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1949, 8), result_or_keyword_261142)
    # Assigning a type to the variable 'if_condition_261143' (line 1949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1949, 8), 'if_condition_261143', if_condition_261143)
    # SSA begins for if statement (line 1949)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1950)
    # Processing the call arguments (line 1950)
    str_261145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1950, 29), 'str', 'Both rp and rs must be provided to design an elliptic filter.')
    # Processing the call keyword arguments (line 1950)
    kwargs_261146 = {}
    # Getting the type of 'ValueError' (line 1950)
    ValueError_261144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1950)
    ValueError_call_result_261147 = invoke(stypy.reporting.localization.Localization(__file__, 1950, 18), ValueError_261144, *[str_261145], **kwargs_261146)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1950, 12), ValueError_call_result_261147, 'raise parameter', BaseException)
    # SSA join for if statement (line 1949)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 1952):
    
    # Assigning a Subscript to a Name (line 1952):
    
    # Obtaining the type of the subscript
    int_261148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 8), 'int')
    
    # Call to typefunc(...): (line 1952)
    # Processing the call arguments (line 1952)
    # Getting the type of 'N' (line 1952)
    N_261150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 27), 'N', False)
    # Getting the type of 'rp' (line 1952)
    rp_261151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 30), 'rp', False)
    # Getting the type of 'rs' (line 1952)
    rs_261152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 34), 'rs', False)
    # Processing the call keyword arguments (line 1952)
    kwargs_261153 = {}
    # Getting the type of 'typefunc' (line 1952)
    typefunc_261149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1952)
    typefunc_call_result_261154 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 18), typefunc_261149, *[N_261150, rp_261151, rs_261152], **kwargs_261153)
    
    # Obtaining the member '__getitem__' of a type (line 1952)
    getitem___261155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 8), typefunc_call_result_261154, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1952)
    subscript_call_result_261156 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 8), getitem___261155, int_261148)
    
    # Assigning a type to the variable 'tuple_var_assignment_257349' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 8), 'tuple_var_assignment_257349', subscript_call_result_261156)
    
    # Assigning a Subscript to a Name (line 1952):
    
    # Obtaining the type of the subscript
    int_261157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 8), 'int')
    
    # Call to typefunc(...): (line 1952)
    # Processing the call arguments (line 1952)
    # Getting the type of 'N' (line 1952)
    N_261159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 27), 'N', False)
    # Getting the type of 'rp' (line 1952)
    rp_261160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 30), 'rp', False)
    # Getting the type of 'rs' (line 1952)
    rs_261161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 34), 'rs', False)
    # Processing the call keyword arguments (line 1952)
    kwargs_261162 = {}
    # Getting the type of 'typefunc' (line 1952)
    typefunc_261158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1952)
    typefunc_call_result_261163 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 18), typefunc_261158, *[N_261159, rp_261160, rs_261161], **kwargs_261162)
    
    # Obtaining the member '__getitem__' of a type (line 1952)
    getitem___261164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 8), typefunc_call_result_261163, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1952)
    subscript_call_result_261165 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 8), getitem___261164, int_261157)
    
    # Assigning a type to the variable 'tuple_var_assignment_257350' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 8), 'tuple_var_assignment_257350', subscript_call_result_261165)
    
    # Assigning a Subscript to a Name (line 1952):
    
    # Obtaining the type of the subscript
    int_261166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 8), 'int')
    
    # Call to typefunc(...): (line 1952)
    # Processing the call arguments (line 1952)
    # Getting the type of 'N' (line 1952)
    N_261168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 27), 'N', False)
    # Getting the type of 'rp' (line 1952)
    rp_261169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 30), 'rp', False)
    # Getting the type of 'rs' (line 1952)
    rs_261170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 34), 'rs', False)
    # Processing the call keyword arguments (line 1952)
    kwargs_261171 = {}
    # Getting the type of 'typefunc' (line 1952)
    typefunc_261167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 18), 'typefunc', False)
    # Calling typefunc(args, kwargs) (line 1952)
    typefunc_call_result_261172 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 18), typefunc_261167, *[N_261168, rp_261169, rs_261170], **kwargs_261171)
    
    # Obtaining the member '__getitem__' of a type (line 1952)
    getitem___261173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 8), typefunc_call_result_261172, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1952)
    subscript_call_result_261174 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 8), getitem___261173, int_261166)
    
    # Assigning a type to the variable 'tuple_var_assignment_257351' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 8), 'tuple_var_assignment_257351', subscript_call_result_261174)
    
    # Assigning a Name to a Name (line 1952):
    # Getting the type of 'tuple_var_assignment_257349' (line 1952)
    tuple_var_assignment_257349_261175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 8), 'tuple_var_assignment_257349')
    # Assigning a type to the variable 'z' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 8), 'z', tuple_var_assignment_257349_261175)
    
    # Assigning a Name to a Name (line 1952):
    # Getting the type of 'tuple_var_assignment_257350' (line 1952)
    tuple_var_assignment_257350_261176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 8), 'tuple_var_assignment_257350')
    # Assigning a type to the variable 'p' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 11), 'p', tuple_var_assignment_257350_261176)
    
    # Assigning a Name to a Name (line 1952):
    # Getting the type of 'tuple_var_assignment_257351' (line 1952)
    tuple_var_assignment_257351_261177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 8), 'tuple_var_assignment_257351')
    # Assigning a type to the variable 'k' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 14), 'k', tuple_var_assignment_257351_261177)
    # SSA branch for the else part of an if statement (line 1948)
    module_type_store.open_ssa_branch('else')
    
    # Call to NotImplementedError(...): (line 1954)
    # Processing the call arguments (line 1954)
    str_261179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1954, 34), 'str', "'%s' not implemented in iirfilter.")
    # Getting the type of 'ftype' (line 1954)
    ftype_261180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1954, 73), 'ftype', False)
    # Applying the binary operator '%' (line 1954)
    result_mod_261181 = python_operator(stypy.reporting.localization.Localization(__file__, 1954, 34), '%', str_261179, ftype_261180)
    
    # Processing the call keyword arguments (line 1954)
    kwargs_261182 = {}
    # Getting the type of 'NotImplementedError' (line 1954)
    NotImplementedError_261178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1954, 14), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 1954)
    NotImplementedError_call_result_261183 = invoke(stypy.reporting.localization.Localization(__file__, 1954, 14), NotImplementedError_261178, *[result_mod_261181], **kwargs_261182)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1954, 8), NotImplementedError_call_result_261183, 'raise parameter', BaseException)
    # SSA join for if statement (line 1948)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1943)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1938)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1936)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1934)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'analog' (line 1957)
    analog_261184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 11), 'analog')
    # Applying the 'not' unary operator (line 1957)
    result_not__261185 = python_operator(stypy.reporting.localization.Localization(__file__, 1957, 7), 'not', analog_261184)
    
    # Testing the type of an if condition (line 1957)
    if_condition_261186 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1957, 4), result_not__261185)
    # Assigning a type to the variable 'if_condition_261186' (line 1957)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1957, 4), 'if_condition_261186', if_condition_261186)
    # SSA begins for if statement (line 1957)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Call to any(...): (line 1958)
    # Processing the call arguments (line 1958)
    
    # Getting the type of 'Wn' (line 1958)
    Wn_261189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 21), 'Wn', False)
    int_261190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1958, 27), 'int')
    # Applying the binary operator '<=' (line 1958)
    result_le_261191 = python_operator(stypy.reporting.localization.Localization(__file__, 1958, 21), '<=', Wn_261189, int_261190)
    
    # Processing the call keyword arguments (line 1958)
    kwargs_261192 = {}
    # Getting the type of 'numpy' (line 1958)
    numpy_261187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 11), 'numpy', False)
    # Obtaining the member 'any' of a type (line 1958)
    any_261188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 11), numpy_261187, 'any')
    # Calling any(args, kwargs) (line 1958)
    any_call_result_261193 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 11), any_261188, *[result_le_261191], **kwargs_261192)
    
    
    # Call to any(...): (line 1958)
    # Processing the call arguments (line 1958)
    
    # Getting the type of 'Wn' (line 1958)
    Wn_261196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 43), 'Wn', False)
    int_261197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1958, 49), 'int')
    # Applying the binary operator '>=' (line 1958)
    result_ge_261198 = python_operator(stypy.reporting.localization.Localization(__file__, 1958, 43), '>=', Wn_261196, int_261197)
    
    # Processing the call keyword arguments (line 1958)
    kwargs_261199 = {}
    # Getting the type of 'numpy' (line 1958)
    numpy_261194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 33), 'numpy', False)
    # Obtaining the member 'any' of a type (line 1958)
    any_261195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1958, 33), numpy_261194, 'any')
    # Calling any(args, kwargs) (line 1958)
    any_call_result_261200 = invoke(stypy.reporting.localization.Localization(__file__, 1958, 33), any_261195, *[result_ge_261198], **kwargs_261199)
    
    # Applying the binary operator 'or' (line 1958)
    result_or_keyword_261201 = python_operator(stypy.reporting.localization.Localization(__file__, 1958, 11), 'or', any_call_result_261193, any_call_result_261200)
    
    # Testing the type of an if condition (line 1958)
    if_condition_261202 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1958, 8), result_or_keyword_261201)
    # Assigning a type to the variable 'if_condition_261202' (line 1958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 8), 'if_condition_261202', if_condition_261202)
    # SSA begins for if statement (line 1958)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1959)
    # Processing the call arguments (line 1959)
    str_261204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1959, 29), 'str', 'Digital filter critical frequencies must be 0 < Wn < 1')
    # Processing the call keyword arguments (line 1959)
    kwargs_261205 = {}
    # Getting the type of 'ValueError' (line 1959)
    ValueError_261203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1959)
    ValueError_call_result_261206 = invoke(stypy.reporting.localization.Localization(__file__, 1959, 18), ValueError_261203, *[str_261204], **kwargs_261205)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1959, 12), ValueError_call_result_261206, 'raise parameter', BaseException)
    # SSA join for if statement (line 1958)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 1961):
    
    # Assigning a Num to a Name (line 1961):
    float_261207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1961, 13), 'float')
    # Assigning a type to the variable 'fs' (line 1961)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1961, 8), 'fs', float_261207)
    
    # Assigning a BinOp to a Name (line 1962):
    
    # Assigning a BinOp to a Name (line 1962):
    int_261208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1962, 17), 'int')
    # Getting the type of 'fs' (line 1962)
    fs_261209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 21), 'fs')
    # Applying the binary operator '*' (line 1962)
    result_mul_261210 = python_operator(stypy.reporting.localization.Localization(__file__, 1962, 17), '*', int_261208, fs_261209)
    
    
    # Call to tan(...): (line 1962)
    # Processing the call arguments (line 1962)
    # Getting the type of 'pi' (line 1962)
    pi_261212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 30), 'pi', False)
    # Getting the type of 'Wn' (line 1962)
    Wn_261213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 35), 'Wn', False)
    # Applying the binary operator '*' (line 1962)
    result_mul_261214 = python_operator(stypy.reporting.localization.Localization(__file__, 1962, 30), '*', pi_261212, Wn_261213)
    
    # Getting the type of 'fs' (line 1962)
    fs_261215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 40), 'fs', False)
    # Applying the binary operator 'div' (line 1962)
    result_div_261216 = python_operator(stypy.reporting.localization.Localization(__file__, 1962, 38), 'div', result_mul_261214, fs_261215)
    
    # Processing the call keyword arguments (line 1962)
    kwargs_261217 = {}
    # Getting the type of 'tan' (line 1962)
    tan_261211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 26), 'tan', False)
    # Calling tan(args, kwargs) (line 1962)
    tan_call_result_261218 = invoke(stypy.reporting.localization.Localization(__file__, 1962, 26), tan_261211, *[result_div_261216], **kwargs_261217)
    
    # Applying the binary operator '*' (line 1962)
    result_mul_261219 = python_operator(stypy.reporting.localization.Localization(__file__, 1962, 24), '*', result_mul_261210, tan_call_result_261218)
    
    # Assigning a type to the variable 'warped' (line 1962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 8), 'warped', result_mul_261219)
    # SSA branch for the else part of an if statement (line 1957)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1964):
    
    # Assigning a Name to a Name (line 1964):
    # Getting the type of 'Wn' (line 1964)
    Wn_261220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 17), 'Wn')
    # Assigning a type to the variable 'warped' (line 1964)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1964, 8), 'warped', Wn_261220)
    # SSA join for if statement (line 1957)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'btype' (line 1967)
    btype_261221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1967, 7), 'btype')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1967)
    tuple_261222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1967, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1967)
    # Adding element type (line 1967)
    str_261223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1967, 17), 'str', 'lowpass')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1967, 17), tuple_261222, str_261223)
    # Adding element type (line 1967)
    str_261224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1967, 28), 'str', 'highpass')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1967, 17), tuple_261222, str_261224)
    
    # Applying the binary operator 'in' (line 1967)
    result_contains_261225 = python_operator(stypy.reporting.localization.Localization(__file__, 1967, 7), 'in', btype_261221, tuple_261222)
    
    # Testing the type of an if condition (line 1967)
    if_condition_261226 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1967, 4), result_contains_261225)
    # Assigning a type to the variable 'if_condition_261226' (line 1967)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1967, 4), 'if_condition_261226', if_condition_261226)
    # SSA begins for if statement (line 1967)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to size(...): (line 1968)
    # Processing the call arguments (line 1968)
    # Getting the type of 'Wn' (line 1968)
    Wn_261229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 22), 'Wn', False)
    # Processing the call keyword arguments (line 1968)
    kwargs_261230 = {}
    # Getting the type of 'numpy' (line 1968)
    numpy_261227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 11), 'numpy', False)
    # Obtaining the member 'size' of a type (line 1968)
    size_261228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1968, 11), numpy_261227, 'size')
    # Calling size(args, kwargs) (line 1968)
    size_call_result_261231 = invoke(stypy.reporting.localization.Localization(__file__, 1968, 11), size_261228, *[Wn_261229], **kwargs_261230)
    
    int_261232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1968, 29), 'int')
    # Applying the binary operator '!=' (line 1968)
    result_ne_261233 = python_operator(stypy.reporting.localization.Localization(__file__, 1968, 11), '!=', size_call_result_261231, int_261232)
    
    # Testing the type of an if condition (line 1968)
    if_condition_261234 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1968, 8), result_ne_261233)
    # Assigning a type to the variable 'if_condition_261234' (line 1968)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 8), 'if_condition_261234', if_condition_261234)
    # SSA begins for if statement (line 1968)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1969)
    # Processing the call arguments (line 1969)
    str_261236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1969, 29), 'str', 'Must specify a single critical frequency Wn')
    # Processing the call keyword arguments (line 1969)
    kwargs_261237 = {}
    # Getting the type of 'ValueError' (line 1969)
    ValueError_261235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1969)
    ValueError_call_result_261238 = invoke(stypy.reporting.localization.Localization(__file__, 1969, 18), ValueError_261235, *[str_261236], **kwargs_261237)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1969, 12), ValueError_call_result_261238, 'raise parameter', BaseException)
    # SSA join for if statement (line 1968)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'btype' (line 1971)
    btype_261239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 11), 'btype')
    str_261240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1971, 20), 'str', 'lowpass')
    # Applying the binary operator '==' (line 1971)
    result_eq_261241 = python_operator(stypy.reporting.localization.Localization(__file__, 1971, 11), '==', btype_261239, str_261240)
    
    # Testing the type of an if condition (line 1971)
    if_condition_261242 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1971, 8), result_eq_261241)
    # Assigning a type to the variable 'if_condition_261242' (line 1971)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1971, 8), 'if_condition_261242', if_condition_261242)
    # SSA begins for if statement (line 1971)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1972):
    
    # Assigning a Subscript to a Name (line 1972):
    
    # Obtaining the type of the subscript
    int_261243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 12), 'int')
    
    # Call to _zpklp2lp(...): (line 1972)
    # Processing the call arguments (line 1972)
    # Getting the type of 'z' (line 1972)
    z_261245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 32), 'z', False)
    # Getting the type of 'p' (line 1972)
    p_261246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 35), 'p', False)
    # Getting the type of 'k' (line 1972)
    k_261247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 38), 'k', False)
    # Processing the call keyword arguments (line 1972)
    # Getting the type of 'warped' (line 1972)
    warped_261248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 44), 'warped', False)
    keyword_261249 = warped_261248
    kwargs_261250 = {'wo': keyword_261249}
    # Getting the type of '_zpklp2lp' (line 1972)
    _zpklp2lp_261244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 22), '_zpklp2lp', False)
    # Calling _zpklp2lp(args, kwargs) (line 1972)
    _zpklp2lp_call_result_261251 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 22), _zpklp2lp_261244, *[z_261245, p_261246, k_261247], **kwargs_261250)
    
    # Obtaining the member '__getitem__' of a type (line 1972)
    getitem___261252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1972, 12), _zpklp2lp_call_result_261251, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1972)
    subscript_call_result_261253 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 12), getitem___261252, int_261243)
    
    # Assigning a type to the variable 'tuple_var_assignment_257352' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 12), 'tuple_var_assignment_257352', subscript_call_result_261253)
    
    # Assigning a Subscript to a Name (line 1972):
    
    # Obtaining the type of the subscript
    int_261254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 12), 'int')
    
    # Call to _zpklp2lp(...): (line 1972)
    # Processing the call arguments (line 1972)
    # Getting the type of 'z' (line 1972)
    z_261256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 32), 'z', False)
    # Getting the type of 'p' (line 1972)
    p_261257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 35), 'p', False)
    # Getting the type of 'k' (line 1972)
    k_261258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 38), 'k', False)
    # Processing the call keyword arguments (line 1972)
    # Getting the type of 'warped' (line 1972)
    warped_261259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 44), 'warped', False)
    keyword_261260 = warped_261259
    kwargs_261261 = {'wo': keyword_261260}
    # Getting the type of '_zpklp2lp' (line 1972)
    _zpklp2lp_261255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 22), '_zpklp2lp', False)
    # Calling _zpklp2lp(args, kwargs) (line 1972)
    _zpklp2lp_call_result_261262 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 22), _zpklp2lp_261255, *[z_261256, p_261257, k_261258], **kwargs_261261)
    
    # Obtaining the member '__getitem__' of a type (line 1972)
    getitem___261263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1972, 12), _zpklp2lp_call_result_261262, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1972)
    subscript_call_result_261264 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 12), getitem___261263, int_261254)
    
    # Assigning a type to the variable 'tuple_var_assignment_257353' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 12), 'tuple_var_assignment_257353', subscript_call_result_261264)
    
    # Assigning a Subscript to a Name (line 1972):
    
    # Obtaining the type of the subscript
    int_261265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 12), 'int')
    
    # Call to _zpklp2lp(...): (line 1972)
    # Processing the call arguments (line 1972)
    # Getting the type of 'z' (line 1972)
    z_261267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 32), 'z', False)
    # Getting the type of 'p' (line 1972)
    p_261268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 35), 'p', False)
    # Getting the type of 'k' (line 1972)
    k_261269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 38), 'k', False)
    # Processing the call keyword arguments (line 1972)
    # Getting the type of 'warped' (line 1972)
    warped_261270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 44), 'warped', False)
    keyword_261271 = warped_261270
    kwargs_261272 = {'wo': keyword_261271}
    # Getting the type of '_zpklp2lp' (line 1972)
    _zpklp2lp_261266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 22), '_zpklp2lp', False)
    # Calling _zpklp2lp(args, kwargs) (line 1972)
    _zpklp2lp_call_result_261273 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 22), _zpklp2lp_261266, *[z_261267, p_261268, k_261269], **kwargs_261272)
    
    # Obtaining the member '__getitem__' of a type (line 1972)
    getitem___261274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1972, 12), _zpklp2lp_call_result_261273, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1972)
    subscript_call_result_261275 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 12), getitem___261274, int_261265)
    
    # Assigning a type to the variable 'tuple_var_assignment_257354' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 12), 'tuple_var_assignment_257354', subscript_call_result_261275)
    
    # Assigning a Name to a Name (line 1972):
    # Getting the type of 'tuple_var_assignment_257352' (line 1972)
    tuple_var_assignment_257352_261276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 12), 'tuple_var_assignment_257352')
    # Assigning a type to the variable 'z' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 12), 'z', tuple_var_assignment_257352_261276)
    
    # Assigning a Name to a Name (line 1972):
    # Getting the type of 'tuple_var_assignment_257353' (line 1972)
    tuple_var_assignment_257353_261277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 12), 'tuple_var_assignment_257353')
    # Assigning a type to the variable 'p' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 15), 'p', tuple_var_assignment_257353_261277)
    
    # Assigning a Name to a Name (line 1972):
    # Getting the type of 'tuple_var_assignment_257354' (line 1972)
    tuple_var_assignment_257354_261278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 12), 'tuple_var_assignment_257354')
    # Assigning a type to the variable 'k' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 18), 'k', tuple_var_assignment_257354_261278)
    # SSA branch for the else part of an if statement (line 1971)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'btype' (line 1973)
    btype_261279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 13), 'btype')
    str_261280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 22), 'str', 'highpass')
    # Applying the binary operator '==' (line 1973)
    result_eq_261281 = python_operator(stypy.reporting.localization.Localization(__file__, 1973, 13), '==', btype_261279, str_261280)
    
    # Testing the type of an if condition (line 1973)
    if_condition_261282 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1973, 13), result_eq_261281)
    # Assigning a type to the variable 'if_condition_261282' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 13), 'if_condition_261282', if_condition_261282)
    # SSA begins for if statement (line 1973)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1974):
    
    # Assigning a Subscript to a Name (line 1974):
    
    # Obtaining the type of the subscript
    int_261283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1974, 12), 'int')
    
    # Call to _zpklp2hp(...): (line 1974)
    # Processing the call arguments (line 1974)
    # Getting the type of 'z' (line 1974)
    z_261285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 32), 'z', False)
    # Getting the type of 'p' (line 1974)
    p_261286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 35), 'p', False)
    # Getting the type of 'k' (line 1974)
    k_261287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 38), 'k', False)
    # Processing the call keyword arguments (line 1974)
    # Getting the type of 'warped' (line 1974)
    warped_261288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 44), 'warped', False)
    keyword_261289 = warped_261288
    kwargs_261290 = {'wo': keyword_261289}
    # Getting the type of '_zpklp2hp' (line 1974)
    _zpklp2hp_261284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 22), '_zpklp2hp', False)
    # Calling _zpklp2hp(args, kwargs) (line 1974)
    _zpklp2hp_call_result_261291 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 22), _zpklp2hp_261284, *[z_261285, p_261286, k_261287], **kwargs_261290)
    
    # Obtaining the member '__getitem__' of a type (line 1974)
    getitem___261292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1974, 12), _zpklp2hp_call_result_261291, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1974)
    subscript_call_result_261293 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 12), getitem___261292, int_261283)
    
    # Assigning a type to the variable 'tuple_var_assignment_257355' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 12), 'tuple_var_assignment_257355', subscript_call_result_261293)
    
    # Assigning a Subscript to a Name (line 1974):
    
    # Obtaining the type of the subscript
    int_261294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1974, 12), 'int')
    
    # Call to _zpklp2hp(...): (line 1974)
    # Processing the call arguments (line 1974)
    # Getting the type of 'z' (line 1974)
    z_261296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 32), 'z', False)
    # Getting the type of 'p' (line 1974)
    p_261297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 35), 'p', False)
    # Getting the type of 'k' (line 1974)
    k_261298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 38), 'k', False)
    # Processing the call keyword arguments (line 1974)
    # Getting the type of 'warped' (line 1974)
    warped_261299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 44), 'warped', False)
    keyword_261300 = warped_261299
    kwargs_261301 = {'wo': keyword_261300}
    # Getting the type of '_zpklp2hp' (line 1974)
    _zpklp2hp_261295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 22), '_zpklp2hp', False)
    # Calling _zpklp2hp(args, kwargs) (line 1974)
    _zpklp2hp_call_result_261302 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 22), _zpklp2hp_261295, *[z_261296, p_261297, k_261298], **kwargs_261301)
    
    # Obtaining the member '__getitem__' of a type (line 1974)
    getitem___261303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1974, 12), _zpklp2hp_call_result_261302, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1974)
    subscript_call_result_261304 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 12), getitem___261303, int_261294)
    
    # Assigning a type to the variable 'tuple_var_assignment_257356' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 12), 'tuple_var_assignment_257356', subscript_call_result_261304)
    
    # Assigning a Subscript to a Name (line 1974):
    
    # Obtaining the type of the subscript
    int_261305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1974, 12), 'int')
    
    # Call to _zpklp2hp(...): (line 1974)
    # Processing the call arguments (line 1974)
    # Getting the type of 'z' (line 1974)
    z_261307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 32), 'z', False)
    # Getting the type of 'p' (line 1974)
    p_261308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 35), 'p', False)
    # Getting the type of 'k' (line 1974)
    k_261309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 38), 'k', False)
    # Processing the call keyword arguments (line 1974)
    # Getting the type of 'warped' (line 1974)
    warped_261310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 44), 'warped', False)
    keyword_261311 = warped_261310
    kwargs_261312 = {'wo': keyword_261311}
    # Getting the type of '_zpklp2hp' (line 1974)
    _zpklp2hp_261306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 22), '_zpklp2hp', False)
    # Calling _zpklp2hp(args, kwargs) (line 1974)
    _zpklp2hp_call_result_261313 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 22), _zpklp2hp_261306, *[z_261307, p_261308, k_261309], **kwargs_261312)
    
    # Obtaining the member '__getitem__' of a type (line 1974)
    getitem___261314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1974, 12), _zpklp2hp_call_result_261313, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1974)
    subscript_call_result_261315 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 12), getitem___261314, int_261305)
    
    # Assigning a type to the variable 'tuple_var_assignment_257357' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 12), 'tuple_var_assignment_257357', subscript_call_result_261315)
    
    # Assigning a Name to a Name (line 1974):
    # Getting the type of 'tuple_var_assignment_257355' (line 1974)
    tuple_var_assignment_257355_261316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 12), 'tuple_var_assignment_257355')
    # Assigning a type to the variable 'z' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 12), 'z', tuple_var_assignment_257355_261316)
    
    # Assigning a Name to a Name (line 1974):
    # Getting the type of 'tuple_var_assignment_257356' (line 1974)
    tuple_var_assignment_257356_261317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 12), 'tuple_var_assignment_257356')
    # Assigning a type to the variable 'p' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 15), 'p', tuple_var_assignment_257356_261317)
    
    # Assigning a Name to a Name (line 1974):
    # Getting the type of 'tuple_var_assignment_257357' (line 1974)
    tuple_var_assignment_257357_261318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 12), 'tuple_var_assignment_257357')
    # Assigning a type to the variable 'k' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 18), 'k', tuple_var_assignment_257357_261318)
    # SSA join for if statement (line 1973)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1971)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1967)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'btype' (line 1975)
    btype_261319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 9), 'btype')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1975)
    tuple_261320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1975)
    # Adding element type (line 1975)
    str_261321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 19), 'str', 'bandpass')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1975, 19), tuple_261320, str_261321)
    # Adding element type (line 1975)
    str_261322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 31), 'str', 'bandstop')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1975, 19), tuple_261320, str_261322)
    
    # Applying the binary operator 'in' (line 1975)
    result_contains_261323 = python_operator(stypy.reporting.localization.Localization(__file__, 1975, 9), 'in', btype_261319, tuple_261320)
    
    # Testing the type of an if condition (line 1975)
    if_condition_261324 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1975, 9), result_contains_261323)
    # Assigning a type to the variable 'if_condition_261324' (line 1975)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1975, 9), 'if_condition_261324', if_condition_261324)
    # SSA begins for if statement (line 1975)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1976)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a BinOp to a Name (line 1977):
    
    # Assigning a BinOp to a Name (line 1977):
    
    # Obtaining the type of the subscript
    int_261325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1977, 24), 'int')
    # Getting the type of 'warped' (line 1977)
    warped_261326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 17), 'warped')
    # Obtaining the member '__getitem__' of a type (line 1977)
    getitem___261327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1977, 17), warped_261326, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1977)
    subscript_call_result_261328 = invoke(stypy.reporting.localization.Localization(__file__, 1977, 17), getitem___261327, int_261325)
    
    
    # Obtaining the type of the subscript
    int_261329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1977, 36), 'int')
    # Getting the type of 'warped' (line 1977)
    warped_261330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 29), 'warped')
    # Obtaining the member '__getitem__' of a type (line 1977)
    getitem___261331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1977, 29), warped_261330, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1977)
    subscript_call_result_261332 = invoke(stypy.reporting.localization.Localization(__file__, 1977, 29), getitem___261331, int_261329)
    
    # Applying the binary operator '-' (line 1977)
    result_sub_261333 = python_operator(stypy.reporting.localization.Localization(__file__, 1977, 17), '-', subscript_call_result_261328, subscript_call_result_261332)
    
    # Assigning a type to the variable 'bw' (line 1977)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1977, 12), 'bw', result_sub_261333)
    
    # Assigning a Call to a Name (line 1978):
    
    # Assigning a Call to a Name (line 1978):
    
    # Call to sqrt(...): (line 1978)
    # Processing the call arguments (line 1978)
    
    # Obtaining the type of the subscript
    int_261335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 29), 'int')
    # Getting the type of 'warped' (line 1978)
    warped_261336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 22), 'warped', False)
    # Obtaining the member '__getitem__' of a type (line 1978)
    getitem___261337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1978, 22), warped_261336, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1978)
    subscript_call_result_261338 = invoke(stypy.reporting.localization.Localization(__file__, 1978, 22), getitem___261337, int_261335)
    
    
    # Obtaining the type of the subscript
    int_261339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 41), 'int')
    # Getting the type of 'warped' (line 1978)
    warped_261340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 34), 'warped', False)
    # Obtaining the member '__getitem__' of a type (line 1978)
    getitem___261341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1978, 34), warped_261340, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1978)
    subscript_call_result_261342 = invoke(stypy.reporting.localization.Localization(__file__, 1978, 34), getitem___261341, int_261339)
    
    # Applying the binary operator '*' (line 1978)
    result_mul_261343 = python_operator(stypy.reporting.localization.Localization(__file__, 1978, 22), '*', subscript_call_result_261338, subscript_call_result_261342)
    
    # Processing the call keyword arguments (line 1978)
    kwargs_261344 = {}
    # Getting the type of 'sqrt' (line 1978)
    sqrt_261334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 17), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 1978)
    sqrt_call_result_261345 = invoke(stypy.reporting.localization.Localization(__file__, 1978, 17), sqrt_261334, *[result_mul_261343], **kwargs_261344)
    
    # Assigning a type to the variable 'wo' (line 1978)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 12), 'wo', sqrt_call_result_261345)
    # SSA branch for the except part of a try statement (line 1976)
    # SSA branch for the except 'IndexError' branch of a try statement (line 1976)
    module_type_store.open_ssa_branch('except')
    
    # Call to ValueError(...): (line 1980)
    # Processing the call arguments (line 1980)
    str_261347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 29), 'str', 'Wn must specify start and stop frequencies')
    # Processing the call keyword arguments (line 1980)
    kwargs_261348 = {}
    # Getting the type of 'ValueError' (line 1980)
    ValueError_261346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1980)
    ValueError_call_result_261349 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 18), ValueError_261346, *[str_261347], **kwargs_261348)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1980, 12), ValueError_call_result_261349, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1976)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'btype' (line 1982)
    btype_261350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 11), 'btype')
    str_261351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1982, 20), 'str', 'bandpass')
    # Applying the binary operator '==' (line 1982)
    result_eq_261352 = python_operator(stypy.reporting.localization.Localization(__file__, 1982, 11), '==', btype_261350, str_261351)
    
    # Testing the type of an if condition (line 1982)
    if_condition_261353 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1982, 8), result_eq_261352)
    # Assigning a type to the variable 'if_condition_261353' (line 1982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1982, 8), 'if_condition_261353', if_condition_261353)
    # SSA begins for if statement (line 1982)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1983):
    
    # Assigning a Subscript to a Name (line 1983):
    
    # Obtaining the type of the subscript
    int_261354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 12), 'int')
    
    # Call to _zpklp2bp(...): (line 1983)
    # Processing the call arguments (line 1983)
    # Getting the type of 'z' (line 1983)
    z_261356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 32), 'z', False)
    # Getting the type of 'p' (line 1983)
    p_261357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 35), 'p', False)
    # Getting the type of 'k' (line 1983)
    k_261358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 38), 'k', False)
    # Processing the call keyword arguments (line 1983)
    # Getting the type of 'wo' (line 1983)
    wo_261359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 44), 'wo', False)
    keyword_261360 = wo_261359
    # Getting the type of 'bw' (line 1983)
    bw_261361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 51), 'bw', False)
    keyword_261362 = bw_261361
    kwargs_261363 = {'wo': keyword_261360, 'bw': keyword_261362}
    # Getting the type of '_zpklp2bp' (line 1983)
    _zpklp2bp_261355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 22), '_zpklp2bp', False)
    # Calling _zpklp2bp(args, kwargs) (line 1983)
    _zpklp2bp_call_result_261364 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 22), _zpklp2bp_261355, *[z_261356, p_261357, k_261358], **kwargs_261363)
    
    # Obtaining the member '__getitem__' of a type (line 1983)
    getitem___261365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1983, 12), _zpklp2bp_call_result_261364, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1983)
    subscript_call_result_261366 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 12), getitem___261365, int_261354)
    
    # Assigning a type to the variable 'tuple_var_assignment_257358' (line 1983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 12), 'tuple_var_assignment_257358', subscript_call_result_261366)
    
    # Assigning a Subscript to a Name (line 1983):
    
    # Obtaining the type of the subscript
    int_261367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 12), 'int')
    
    # Call to _zpklp2bp(...): (line 1983)
    # Processing the call arguments (line 1983)
    # Getting the type of 'z' (line 1983)
    z_261369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 32), 'z', False)
    # Getting the type of 'p' (line 1983)
    p_261370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 35), 'p', False)
    # Getting the type of 'k' (line 1983)
    k_261371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 38), 'k', False)
    # Processing the call keyword arguments (line 1983)
    # Getting the type of 'wo' (line 1983)
    wo_261372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 44), 'wo', False)
    keyword_261373 = wo_261372
    # Getting the type of 'bw' (line 1983)
    bw_261374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 51), 'bw', False)
    keyword_261375 = bw_261374
    kwargs_261376 = {'wo': keyword_261373, 'bw': keyword_261375}
    # Getting the type of '_zpklp2bp' (line 1983)
    _zpklp2bp_261368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 22), '_zpklp2bp', False)
    # Calling _zpklp2bp(args, kwargs) (line 1983)
    _zpklp2bp_call_result_261377 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 22), _zpklp2bp_261368, *[z_261369, p_261370, k_261371], **kwargs_261376)
    
    # Obtaining the member '__getitem__' of a type (line 1983)
    getitem___261378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1983, 12), _zpklp2bp_call_result_261377, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1983)
    subscript_call_result_261379 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 12), getitem___261378, int_261367)
    
    # Assigning a type to the variable 'tuple_var_assignment_257359' (line 1983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 12), 'tuple_var_assignment_257359', subscript_call_result_261379)
    
    # Assigning a Subscript to a Name (line 1983):
    
    # Obtaining the type of the subscript
    int_261380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 12), 'int')
    
    # Call to _zpklp2bp(...): (line 1983)
    # Processing the call arguments (line 1983)
    # Getting the type of 'z' (line 1983)
    z_261382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 32), 'z', False)
    # Getting the type of 'p' (line 1983)
    p_261383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 35), 'p', False)
    # Getting the type of 'k' (line 1983)
    k_261384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 38), 'k', False)
    # Processing the call keyword arguments (line 1983)
    # Getting the type of 'wo' (line 1983)
    wo_261385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 44), 'wo', False)
    keyword_261386 = wo_261385
    # Getting the type of 'bw' (line 1983)
    bw_261387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 51), 'bw', False)
    keyword_261388 = bw_261387
    kwargs_261389 = {'wo': keyword_261386, 'bw': keyword_261388}
    # Getting the type of '_zpklp2bp' (line 1983)
    _zpklp2bp_261381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 22), '_zpklp2bp', False)
    # Calling _zpklp2bp(args, kwargs) (line 1983)
    _zpklp2bp_call_result_261390 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 22), _zpklp2bp_261381, *[z_261382, p_261383, k_261384], **kwargs_261389)
    
    # Obtaining the member '__getitem__' of a type (line 1983)
    getitem___261391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1983, 12), _zpklp2bp_call_result_261390, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1983)
    subscript_call_result_261392 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 12), getitem___261391, int_261380)
    
    # Assigning a type to the variable 'tuple_var_assignment_257360' (line 1983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 12), 'tuple_var_assignment_257360', subscript_call_result_261392)
    
    # Assigning a Name to a Name (line 1983):
    # Getting the type of 'tuple_var_assignment_257358' (line 1983)
    tuple_var_assignment_257358_261393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 12), 'tuple_var_assignment_257358')
    # Assigning a type to the variable 'z' (line 1983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 12), 'z', tuple_var_assignment_257358_261393)
    
    # Assigning a Name to a Name (line 1983):
    # Getting the type of 'tuple_var_assignment_257359' (line 1983)
    tuple_var_assignment_257359_261394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 12), 'tuple_var_assignment_257359')
    # Assigning a type to the variable 'p' (line 1983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 15), 'p', tuple_var_assignment_257359_261394)
    
    # Assigning a Name to a Name (line 1983):
    # Getting the type of 'tuple_var_assignment_257360' (line 1983)
    tuple_var_assignment_257360_261395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 12), 'tuple_var_assignment_257360')
    # Assigning a type to the variable 'k' (line 1983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 18), 'k', tuple_var_assignment_257360_261395)
    # SSA branch for the else part of an if statement (line 1982)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'btype' (line 1984)
    btype_261396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 13), 'btype')
    str_261397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1984, 22), 'str', 'bandstop')
    # Applying the binary operator '==' (line 1984)
    result_eq_261398 = python_operator(stypy.reporting.localization.Localization(__file__, 1984, 13), '==', btype_261396, str_261397)
    
    # Testing the type of an if condition (line 1984)
    if_condition_261399 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1984, 13), result_eq_261398)
    # Assigning a type to the variable 'if_condition_261399' (line 1984)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1984, 13), 'if_condition_261399', if_condition_261399)
    # SSA begins for if statement (line 1984)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1985):
    
    # Assigning a Subscript to a Name (line 1985):
    
    # Obtaining the type of the subscript
    int_261400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 12), 'int')
    
    # Call to _zpklp2bs(...): (line 1985)
    # Processing the call arguments (line 1985)
    # Getting the type of 'z' (line 1985)
    z_261402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 32), 'z', False)
    # Getting the type of 'p' (line 1985)
    p_261403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 35), 'p', False)
    # Getting the type of 'k' (line 1985)
    k_261404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 38), 'k', False)
    # Processing the call keyword arguments (line 1985)
    # Getting the type of 'wo' (line 1985)
    wo_261405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 44), 'wo', False)
    keyword_261406 = wo_261405
    # Getting the type of 'bw' (line 1985)
    bw_261407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 51), 'bw', False)
    keyword_261408 = bw_261407
    kwargs_261409 = {'wo': keyword_261406, 'bw': keyword_261408}
    # Getting the type of '_zpklp2bs' (line 1985)
    _zpklp2bs_261401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 22), '_zpklp2bs', False)
    # Calling _zpklp2bs(args, kwargs) (line 1985)
    _zpklp2bs_call_result_261410 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 22), _zpklp2bs_261401, *[z_261402, p_261403, k_261404], **kwargs_261409)
    
    # Obtaining the member '__getitem__' of a type (line 1985)
    getitem___261411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1985, 12), _zpklp2bs_call_result_261410, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1985)
    subscript_call_result_261412 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 12), getitem___261411, int_261400)
    
    # Assigning a type to the variable 'tuple_var_assignment_257361' (line 1985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 12), 'tuple_var_assignment_257361', subscript_call_result_261412)
    
    # Assigning a Subscript to a Name (line 1985):
    
    # Obtaining the type of the subscript
    int_261413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 12), 'int')
    
    # Call to _zpklp2bs(...): (line 1985)
    # Processing the call arguments (line 1985)
    # Getting the type of 'z' (line 1985)
    z_261415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 32), 'z', False)
    # Getting the type of 'p' (line 1985)
    p_261416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 35), 'p', False)
    # Getting the type of 'k' (line 1985)
    k_261417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 38), 'k', False)
    # Processing the call keyword arguments (line 1985)
    # Getting the type of 'wo' (line 1985)
    wo_261418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 44), 'wo', False)
    keyword_261419 = wo_261418
    # Getting the type of 'bw' (line 1985)
    bw_261420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 51), 'bw', False)
    keyword_261421 = bw_261420
    kwargs_261422 = {'wo': keyword_261419, 'bw': keyword_261421}
    # Getting the type of '_zpklp2bs' (line 1985)
    _zpklp2bs_261414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 22), '_zpklp2bs', False)
    # Calling _zpklp2bs(args, kwargs) (line 1985)
    _zpklp2bs_call_result_261423 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 22), _zpklp2bs_261414, *[z_261415, p_261416, k_261417], **kwargs_261422)
    
    # Obtaining the member '__getitem__' of a type (line 1985)
    getitem___261424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1985, 12), _zpklp2bs_call_result_261423, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1985)
    subscript_call_result_261425 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 12), getitem___261424, int_261413)
    
    # Assigning a type to the variable 'tuple_var_assignment_257362' (line 1985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 12), 'tuple_var_assignment_257362', subscript_call_result_261425)
    
    # Assigning a Subscript to a Name (line 1985):
    
    # Obtaining the type of the subscript
    int_261426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 12), 'int')
    
    # Call to _zpklp2bs(...): (line 1985)
    # Processing the call arguments (line 1985)
    # Getting the type of 'z' (line 1985)
    z_261428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 32), 'z', False)
    # Getting the type of 'p' (line 1985)
    p_261429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 35), 'p', False)
    # Getting the type of 'k' (line 1985)
    k_261430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 38), 'k', False)
    # Processing the call keyword arguments (line 1985)
    # Getting the type of 'wo' (line 1985)
    wo_261431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 44), 'wo', False)
    keyword_261432 = wo_261431
    # Getting the type of 'bw' (line 1985)
    bw_261433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 51), 'bw', False)
    keyword_261434 = bw_261433
    kwargs_261435 = {'wo': keyword_261432, 'bw': keyword_261434}
    # Getting the type of '_zpklp2bs' (line 1985)
    _zpklp2bs_261427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 22), '_zpklp2bs', False)
    # Calling _zpklp2bs(args, kwargs) (line 1985)
    _zpklp2bs_call_result_261436 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 22), _zpklp2bs_261427, *[z_261428, p_261429, k_261430], **kwargs_261435)
    
    # Obtaining the member '__getitem__' of a type (line 1985)
    getitem___261437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1985, 12), _zpklp2bs_call_result_261436, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1985)
    subscript_call_result_261438 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 12), getitem___261437, int_261426)
    
    # Assigning a type to the variable 'tuple_var_assignment_257363' (line 1985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 12), 'tuple_var_assignment_257363', subscript_call_result_261438)
    
    # Assigning a Name to a Name (line 1985):
    # Getting the type of 'tuple_var_assignment_257361' (line 1985)
    tuple_var_assignment_257361_261439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 12), 'tuple_var_assignment_257361')
    # Assigning a type to the variable 'z' (line 1985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 12), 'z', tuple_var_assignment_257361_261439)
    
    # Assigning a Name to a Name (line 1985):
    # Getting the type of 'tuple_var_assignment_257362' (line 1985)
    tuple_var_assignment_257362_261440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 12), 'tuple_var_assignment_257362')
    # Assigning a type to the variable 'p' (line 1985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 15), 'p', tuple_var_assignment_257362_261440)
    
    # Assigning a Name to a Name (line 1985):
    # Getting the type of 'tuple_var_assignment_257363' (line 1985)
    tuple_var_assignment_257363_261441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 12), 'tuple_var_assignment_257363')
    # Assigning a type to the variable 'k' (line 1985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 18), 'k', tuple_var_assignment_257363_261441)
    # SSA join for if statement (line 1984)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1982)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1975)
    module_type_store.open_ssa_branch('else')
    
    # Call to NotImplementedError(...): (line 1987)
    # Processing the call arguments (line 1987)
    str_261443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1987, 34), 'str', "'%s' not implemented in iirfilter.")
    # Getting the type of 'btype' (line 1987)
    btype_261444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 73), 'btype', False)
    # Applying the binary operator '%' (line 1987)
    result_mod_261445 = python_operator(stypy.reporting.localization.Localization(__file__, 1987, 34), '%', str_261443, btype_261444)
    
    # Processing the call keyword arguments (line 1987)
    kwargs_261446 = {}
    # Getting the type of 'NotImplementedError' (line 1987)
    NotImplementedError_261442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 14), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 1987)
    NotImplementedError_call_result_261447 = invoke(stypy.reporting.localization.Localization(__file__, 1987, 14), NotImplementedError_261442, *[result_mod_261445], **kwargs_261446)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1987, 8), NotImplementedError_call_result_261447, 'raise parameter', BaseException)
    # SSA join for if statement (line 1975)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1967)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'analog' (line 1990)
    analog_261448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 11), 'analog')
    # Applying the 'not' unary operator (line 1990)
    result_not__261449 = python_operator(stypy.reporting.localization.Localization(__file__, 1990, 7), 'not', analog_261448)
    
    # Testing the type of an if condition (line 1990)
    if_condition_261450 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1990, 4), result_not__261449)
    # Assigning a type to the variable 'if_condition_261450' (line 1990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1990, 4), 'if_condition_261450', if_condition_261450)
    # SSA begins for if statement (line 1990)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1991):
    
    # Assigning a Subscript to a Name (line 1991):
    
    # Obtaining the type of the subscript
    int_261451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1991, 8), 'int')
    
    # Call to _zpkbilinear(...): (line 1991)
    # Processing the call arguments (line 1991)
    # Getting the type of 'z' (line 1991)
    z_261453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 31), 'z', False)
    # Getting the type of 'p' (line 1991)
    p_261454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 34), 'p', False)
    # Getting the type of 'k' (line 1991)
    k_261455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 37), 'k', False)
    # Processing the call keyword arguments (line 1991)
    # Getting the type of 'fs' (line 1991)
    fs_261456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 43), 'fs', False)
    keyword_261457 = fs_261456
    kwargs_261458 = {'fs': keyword_261457}
    # Getting the type of '_zpkbilinear' (line 1991)
    _zpkbilinear_261452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 18), '_zpkbilinear', False)
    # Calling _zpkbilinear(args, kwargs) (line 1991)
    _zpkbilinear_call_result_261459 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 18), _zpkbilinear_261452, *[z_261453, p_261454, k_261455], **kwargs_261458)
    
    # Obtaining the member '__getitem__' of a type (line 1991)
    getitem___261460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1991, 8), _zpkbilinear_call_result_261459, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1991)
    subscript_call_result_261461 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 8), getitem___261460, int_261451)
    
    # Assigning a type to the variable 'tuple_var_assignment_257364' (line 1991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'tuple_var_assignment_257364', subscript_call_result_261461)
    
    # Assigning a Subscript to a Name (line 1991):
    
    # Obtaining the type of the subscript
    int_261462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1991, 8), 'int')
    
    # Call to _zpkbilinear(...): (line 1991)
    # Processing the call arguments (line 1991)
    # Getting the type of 'z' (line 1991)
    z_261464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 31), 'z', False)
    # Getting the type of 'p' (line 1991)
    p_261465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 34), 'p', False)
    # Getting the type of 'k' (line 1991)
    k_261466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 37), 'k', False)
    # Processing the call keyword arguments (line 1991)
    # Getting the type of 'fs' (line 1991)
    fs_261467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 43), 'fs', False)
    keyword_261468 = fs_261467
    kwargs_261469 = {'fs': keyword_261468}
    # Getting the type of '_zpkbilinear' (line 1991)
    _zpkbilinear_261463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 18), '_zpkbilinear', False)
    # Calling _zpkbilinear(args, kwargs) (line 1991)
    _zpkbilinear_call_result_261470 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 18), _zpkbilinear_261463, *[z_261464, p_261465, k_261466], **kwargs_261469)
    
    # Obtaining the member '__getitem__' of a type (line 1991)
    getitem___261471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1991, 8), _zpkbilinear_call_result_261470, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1991)
    subscript_call_result_261472 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 8), getitem___261471, int_261462)
    
    # Assigning a type to the variable 'tuple_var_assignment_257365' (line 1991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'tuple_var_assignment_257365', subscript_call_result_261472)
    
    # Assigning a Subscript to a Name (line 1991):
    
    # Obtaining the type of the subscript
    int_261473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1991, 8), 'int')
    
    # Call to _zpkbilinear(...): (line 1991)
    # Processing the call arguments (line 1991)
    # Getting the type of 'z' (line 1991)
    z_261475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 31), 'z', False)
    # Getting the type of 'p' (line 1991)
    p_261476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 34), 'p', False)
    # Getting the type of 'k' (line 1991)
    k_261477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 37), 'k', False)
    # Processing the call keyword arguments (line 1991)
    # Getting the type of 'fs' (line 1991)
    fs_261478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 43), 'fs', False)
    keyword_261479 = fs_261478
    kwargs_261480 = {'fs': keyword_261479}
    # Getting the type of '_zpkbilinear' (line 1991)
    _zpkbilinear_261474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 18), '_zpkbilinear', False)
    # Calling _zpkbilinear(args, kwargs) (line 1991)
    _zpkbilinear_call_result_261481 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 18), _zpkbilinear_261474, *[z_261475, p_261476, k_261477], **kwargs_261480)
    
    # Obtaining the member '__getitem__' of a type (line 1991)
    getitem___261482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1991, 8), _zpkbilinear_call_result_261481, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1991)
    subscript_call_result_261483 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 8), getitem___261482, int_261473)
    
    # Assigning a type to the variable 'tuple_var_assignment_257366' (line 1991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'tuple_var_assignment_257366', subscript_call_result_261483)
    
    # Assigning a Name to a Name (line 1991):
    # Getting the type of 'tuple_var_assignment_257364' (line 1991)
    tuple_var_assignment_257364_261484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'tuple_var_assignment_257364')
    # Assigning a type to the variable 'z' (line 1991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'z', tuple_var_assignment_257364_261484)
    
    # Assigning a Name to a Name (line 1991):
    # Getting the type of 'tuple_var_assignment_257365' (line 1991)
    tuple_var_assignment_257365_261485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'tuple_var_assignment_257365')
    # Assigning a type to the variable 'p' (line 1991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 11), 'p', tuple_var_assignment_257365_261485)
    
    # Assigning a Name to a Name (line 1991):
    # Getting the type of 'tuple_var_assignment_257366' (line 1991)
    tuple_var_assignment_257366_261486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'tuple_var_assignment_257366')
    # Assigning a type to the variable 'k' (line 1991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 14), 'k', tuple_var_assignment_257366_261486)
    # SSA join for if statement (line 1990)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'output' (line 1994)
    output_261487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 7), 'output')
    str_261488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 17), 'str', 'zpk')
    # Applying the binary operator '==' (line 1994)
    result_eq_261489 = python_operator(stypy.reporting.localization.Localization(__file__, 1994, 7), '==', output_261487, str_261488)
    
    # Testing the type of an if condition (line 1994)
    if_condition_261490 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1994, 4), result_eq_261489)
    # Assigning a type to the variable 'if_condition_261490' (line 1994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 4), 'if_condition_261490', if_condition_261490)
    # SSA begins for if statement (line 1994)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1995)
    tuple_261491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1995)
    # Adding element type (line 1995)
    # Getting the type of 'z' (line 1995)
    z_261492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 15), 'z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1995, 15), tuple_261491, z_261492)
    # Adding element type (line 1995)
    # Getting the type of 'p' (line 1995)
    p_261493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 18), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1995, 15), tuple_261491, p_261493)
    # Adding element type (line 1995)
    # Getting the type of 'k' (line 1995)
    k_261494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 21), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1995, 15), tuple_261491, k_261494)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1995, 8), 'stypy_return_type', tuple_261491)
    # SSA branch for the else part of an if statement (line 1994)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'output' (line 1996)
    output_261495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 9), 'output')
    str_261496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 19), 'str', 'ba')
    # Applying the binary operator '==' (line 1996)
    result_eq_261497 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 9), '==', output_261495, str_261496)
    
    # Testing the type of an if condition (line 1996)
    if_condition_261498 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1996, 9), result_eq_261497)
    # Assigning a type to the variable 'if_condition_261498' (line 1996)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1996, 9), 'if_condition_261498', if_condition_261498)
    # SSA begins for if statement (line 1996)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to zpk2tf(...): (line 1997)
    # Processing the call arguments (line 1997)
    # Getting the type of 'z' (line 1997)
    z_261500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 22), 'z', False)
    # Getting the type of 'p' (line 1997)
    p_261501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 25), 'p', False)
    # Getting the type of 'k' (line 1997)
    k_261502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 28), 'k', False)
    # Processing the call keyword arguments (line 1997)
    kwargs_261503 = {}
    # Getting the type of 'zpk2tf' (line 1997)
    zpk2tf_261499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 15), 'zpk2tf', False)
    # Calling zpk2tf(args, kwargs) (line 1997)
    zpk2tf_call_result_261504 = invoke(stypy.reporting.localization.Localization(__file__, 1997, 15), zpk2tf_261499, *[z_261500, p_261501, k_261502], **kwargs_261503)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1997, 8), 'stypy_return_type', zpk2tf_call_result_261504)
    # SSA branch for the else part of an if statement (line 1996)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'output' (line 1998)
    output_261505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 9), 'output')
    str_261506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1998, 19), 'str', 'sos')
    # Applying the binary operator '==' (line 1998)
    result_eq_261507 = python_operator(stypy.reporting.localization.Localization(__file__, 1998, 9), '==', output_261505, str_261506)
    
    # Testing the type of an if condition (line 1998)
    if_condition_261508 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1998, 9), result_eq_261507)
    # Assigning a type to the variable 'if_condition_261508' (line 1998)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1998, 9), 'if_condition_261508', if_condition_261508)
    # SSA begins for if statement (line 1998)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to zpk2sos(...): (line 1999)
    # Processing the call arguments (line 1999)
    # Getting the type of 'z' (line 1999)
    z_261510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 23), 'z', False)
    # Getting the type of 'p' (line 1999)
    p_261511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 26), 'p', False)
    # Getting the type of 'k' (line 1999)
    k_261512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 29), 'k', False)
    # Processing the call keyword arguments (line 1999)
    kwargs_261513 = {}
    # Getting the type of 'zpk2sos' (line 1999)
    zpk2sos_261509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 15), 'zpk2sos', False)
    # Calling zpk2sos(args, kwargs) (line 1999)
    zpk2sos_call_result_261514 = invoke(stypy.reporting.localization.Localization(__file__, 1999, 15), zpk2sos_261509, *[z_261510, p_261511, k_261512], **kwargs_261513)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1999)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1999, 8), 'stypy_return_type', zpk2sos_call_result_261514)
    # SSA join for if statement (line 1998)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1996)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1994)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'iirfilter(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'iirfilter' in the type store
    # Getting the type of 'stypy_return_type' (line 1824)
    stypy_return_type_261515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_261515)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'iirfilter'
    return stypy_return_type_261515

# Assigning a type to the variable 'iirfilter' (line 1824)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1824, 0), 'iirfilter', iirfilter)

@norecursion
def _relative_degree(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_relative_degree'
    module_type_store = module_type_store.open_function_context('_relative_degree', 2002, 0, False)
    
    # Passed parameters checking function
    _relative_degree.stypy_localization = localization
    _relative_degree.stypy_type_of_self = None
    _relative_degree.stypy_type_store = module_type_store
    _relative_degree.stypy_function_name = '_relative_degree'
    _relative_degree.stypy_param_names_list = ['z', 'p']
    _relative_degree.stypy_varargs_param_name = None
    _relative_degree.stypy_kwargs_param_name = None
    _relative_degree.stypy_call_defaults = defaults
    _relative_degree.stypy_call_varargs = varargs
    _relative_degree.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_relative_degree', ['z', 'p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_relative_degree', localization, ['z', 'p'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_relative_degree(...)' code ##################

    str_261516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2005, (-1)), 'str', '\n    Return relative degree of transfer function from zeros and poles\n    ')
    
    # Assigning a BinOp to a Name (line 2006):
    
    # Assigning a BinOp to a Name (line 2006):
    
    # Call to len(...): (line 2006)
    # Processing the call arguments (line 2006)
    # Getting the type of 'p' (line 2006)
    p_261518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 17), 'p', False)
    # Processing the call keyword arguments (line 2006)
    kwargs_261519 = {}
    # Getting the type of 'len' (line 2006)
    len_261517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 13), 'len', False)
    # Calling len(args, kwargs) (line 2006)
    len_call_result_261520 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 13), len_261517, *[p_261518], **kwargs_261519)
    
    
    # Call to len(...): (line 2006)
    # Processing the call arguments (line 2006)
    # Getting the type of 'z' (line 2006)
    z_261522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 26), 'z', False)
    # Processing the call keyword arguments (line 2006)
    kwargs_261523 = {}
    # Getting the type of 'len' (line 2006)
    len_261521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 22), 'len', False)
    # Calling len(args, kwargs) (line 2006)
    len_call_result_261524 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 22), len_261521, *[z_261522], **kwargs_261523)
    
    # Applying the binary operator '-' (line 2006)
    result_sub_261525 = python_operator(stypy.reporting.localization.Localization(__file__, 2006, 13), '-', len_call_result_261520, len_call_result_261524)
    
    # Assigning a type to the variable 'degree' (line 2006)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2006, 4), 'degree', result_sub_261525)
    
    
    # Getting the type of 'degree' (line 2007)
    degree_261526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 7), 'degree')
    int_261527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2007, 16), 'int')
    # Applying the binary operator '<' (line 2007)
    result_lt_261528 = python_operator(stypy.reporting.localization.Localization(__file__, 2007, 7), '<', degree_261526, int_261527)
    
    # Testing the type of an if condition (line 2007)
    if_condition_261529 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2007, 4), result_lt_261528)
    # Assigning a type to the variable 'if_condition_261529' (line 2007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2007, 4), 'if_condition_261529', if_condition_261529)
    # SSA begins for if statement (line 2007)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2008)
    # Processing the call arguments (line 2008)
    str_261531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2008, 25), 'str', 'Improper transfer function. Must have at least as many poles as zeros.')
    # Processing the call keyword arguments (line 2008)
    kwargs_261532 = {}
    # Getting the type of 'ValueError' (line 2008)
    ValueError_261530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2008)
    ValueError_call_result_261533 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 14), ValueError_261530, *[str_261531], **kwargs_261532)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2008, 8), ValueError_call_result_261533, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 2007)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'degree' (line 2011)
    degree_261534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 15), 'degree')
    # Assigning a type to the variable 'stypy_return_type' (line 2011)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2011, 8), 'stypy_return_type', degree_261534)
    # SSA join for if statement (line 2007)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_relative_degree(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_relative_degree' in the type store
    # Getting the type of 'stypy_return_type' (line 2002)
    stypy_return_type_261535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_261535)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_relative_degree'
    return stypy_return_type_261535

# Assigning a type to the variable '_relative_degree' (line 2002)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2002, 0), '_relative_degree', _relative_degree)

@norecursion
def _zpkbilinear(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_zpkbilinear'
    module_type_store = module_type_store.open_function_context('_zpkbilinear', 2016, 0, False)
    
    # Passed parameters checking function
    _zpkbilinear.stypy_localization = localization
    _zpkbilinear.stypy_type_of_self = None
    _zpkbilinear.stypy_type_store = module_type_store
    _zpkbilinear.stypy_function_name = '_zpkbilinear'
    _zpkbilinear.stypy_param_names_list = ['z', 'p', 'k', 'fs']
    _zpkbilinear.stypy_varargs_param_name = None
    _zpkbilinear.stypy_kwargs_param_name = None
    _zpkbilinear.stypy_call_defaults = defaults
    _zpkbilinear.stypy_call_varargs = varargs
    _zpkbilinear.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_zpkbilinear', ['z', 'p', 'k', 'fs'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_zpkbilinear', localization, ['z', 'p', 'k', 'fs'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_zpkbilinear(...)' code ##################

    str_261536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2045, (-1)), 'str', "\n    Return a digital filter from an analog one using a bilinear transform.\n\n    Transform a set of poles and zeros from the analog s-plane to the digital\n    z-plane using Tustin's method, which substitutes ``(z-1) / (z+1)`` for\n    ``s``, maintaining the shape of the frequency response.\n\n    Parameters\n    ----------\n    z : array_like\n        Zeros of the analog IIR filter transfer function.\n    p : array_like\n        Poles of the analog IIR filter transfer function.\n    k : float\n        System gain of the analog IIR filter transfer function.\n    fs : float\n        Sample rate, as ordinary frequency (e.g. hertz). No prewarping is\n        done in this function.\n\n    Returns\n    -------\n    z : ndarray\n        Zeros of the transformed digital filter transfer function.\n    p : ndarray\n        Poles of the transformed digital filter transfer function.\n    k : float\n        System gain of the transformed digital filter.\n\n    ")
    
    # Assigning a Call to a Name (line 2046):
    
    # Assigning a Call to a Name (line 2046):
    
    # Call to atleast_1d(...): (line 2046)
    # Processing the call arguments (line 2046)
    # Getting the type of 'z' (line 2046)
    z_261538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2046, 19), 'z', False)
    # Processing the call keyword arguments (line 2046)
    kwargs_261539 = {}
    # Getting the type of 'atleast_1d' (line 2046)
    atleast_1d_261537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2046, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2046)
    atleast_1d_call_result_261540 = invoke(stypy.reporting.localization.Localization(__file__, 2046, 8), atleast_1d_261537, *[z_261538], **kwargs_261539)
    
    # Assigning a type to the variable 'z' (line 2046)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2046, 4), 'z', atleast_1d_call_result_261540)
    
    # Assigning a Call to a Name (line 2047):
    
    # Assigning a Call to a Name (line 2047):
    
    # Call to atleast_1d(...): (line 2047)
    # Processing the call arguments (line 2047)
    # Getting the type of 'p' (line 2047)
    p_261542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 19), 'p', False)
    # Processing the call keyword arguments (line 2047)
    kwargs_261543 = {}
    # Getting the type of 'atleast_1d' (line 2047)
    atleast_1d_261541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2047)
    atleast_1d_call_result_261544 = invoke(stypy.reporting.localization.Localization(__file__, 2047, 8), atleast_1d_261541, *[p_261542], **kwargs_261543)
    
    # Assigning a type to the variable 'p' (line 2047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2047, 4), 'p', atleast_1d_call_result_261544)
    
    # Assigning a Call to a Name (line 2049):
    
    # Assigning a Call to a Name (line 2049):
    
    # Call to _relative_degree(...): (line 2049)
    # Processing the call arguments (line 2049)
    # Getting the type of 'z' (line 2049)
    z_261546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 30), 'z', False)
    # Getting the type of 'p' (line 2049)
    p_261547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 33), 'p', False)
    # Processing the call keyword arguments (line 2049)
    kwargs_261548 = {}
    # Getting the type of '_relative_degree' (line 2049)
    _relative_degree_261545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 13), '_relative_degree', False)
    # Calling _relative_degree(args, kwargs) (line 2049)
    _relative_degree_call_result_261549 = invoke(stypy.reporting.localization.Localization(__file__, 2049, 13), _relative_degree_261545, *[z_261546, p_261547], **kwargs_261548)
    
    # Assigning a type to the variable 'degree' (line 2049)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2049, 4), 'degree', _relative_degree_call_result_261549)
    
    # Assigning a BinOp to a Name (line 2051):
    
    # Assigning a BinOp to a Name (line 2051):
    float_261550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2051, 10), 'float')
    # Getting the type of 'fs' (line 2051)
    fs_261551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 14), 'fs')
    # Applying the binary operator '*' (line 2051)
    result_mul_261552 = python_operator(stypy.reporting.localization.Localization(__file__, 2051, 10), '*', float_261550, fs_261551)
    
    # Assigning a type to the variable 'fs2' (line 2051)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 4), 'fs2', result_mul_261552)
    
    # Assigning a BinOp to a Name (line 2054):
    
    # Assigning a BinOp to a Name (line 2054):
    # Getting the type of 'fs2' (line 2054)
    fs2_261553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 11), 'fs2')
    # Getting the type of 'z' (line 2054)
    z_261554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 17), 'z')
    # Applying the binary operator '+' (line 2054)
    result_add_261555 = python_operator(stypy.reporting.localization.Localization(__file__, 2054, 11), '+', fs2_261553, z_261554)
    
    # Getting the type of 'fs2' (line 2054)
    fs2_261556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 23), 'fs2')
    # Getting the type of 'z' (line 2054)
    z_261557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 29), 'z')
    # Applying the binary operator '-' (line 2054)
    result_sub_261558 = python_operator(stypy.reporting.localization.Localization(__file__, 2054, 23), '-', fs2_261556, z_261557)
    
    # Applying the binary operator 'div' (line 2054)
    result_div_261559 = python_operator(stypy.reporting.localization.Localization(__file__, 2054, 10), 'div', result_add_261555, result_sub_261558)
    
    # Assigning a type to the variable 'z_z' (line 2054)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2054, 4), 'z_z', result_div_261559)
    
    # Assigning a BinOp to a Name (line 2055):
    
    # Assigning a BinOp to a Name (line 2055):
    # Getting the type of 'fs2' (line 2055)
    fs2_261560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 11), 'fs2')
    # Getting the type of 'p' (line 2055)
    p_261561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 17), 'p')
    # Applying the binary operator '+' (line 2055)
    result_add_261562 = python_operator(stypy.reporting.localization.Localization(__file__, 2055, 11), '+', fs2_261560, p_261561)
    
    # Getting the type of 'fs2' (line 2055)
    fs2_261563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 23), 'fs2')
    # Getting the type of 'p' (line 2055)
    p_261564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2055, 29), 'p')
    # Applying the binary operator '-' (line 2055)
    result_sub_261565 = python_operator(stypy.reporting.localization.Localization(__file__, 2055, 23), '-', fs2_261563, p_261564)
    
    # Applying the binary operator 'div' (line 2055)
    result_div_261566 = python_operator(stypy.reporting.localization.Localization(__file__, 2055, 10), 'div', result_add_261562, result_sub_261565)
    
    # Assigning a type to the variable 'p_z' (line 2055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 4), 'p_z', result_div_261566)
    
    # Assigning a Call to a Name (line 2058):
    
    # Assigning a Call to a Name (line 2058):
    
    # Call to append(...): (line 2058)
    # Processing the call arguments (line 2058)
    # Getting the type of 'z_z' (line 2058)
    z_z_261568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 17), 'z_z', False)
    
    
    # Call to ones(...): (line 2058)
    # Processing the call arguments (line 2058)
    # Getting the type of 'degree' (line 2058)
    degree_261570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 28), 'degree', False)
    # Processing the call keyword arguments (line 2058)
    kwargs_261571 = {}
    # Getting the type of 'ones' (line 2058)
    ones_261569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 23), 'ones', False)
    # Calling ones(args, kwargs) (line 2058)
    ones_call_result_261572 = invoke(stypy.reporting.localization.Localization(__file__, 2058, 23), ones_261569, *[degree_261570], **kwargs_261571)
    
    # Applying the 'usub' unary operator (line 2058)
    result___neg___261573 = python_operator(stypy.reporting.localization.Localization(__file__, 2058, 22), 'usub', ones_call_result_261572)
    
    # Processing the call keyword arguments (line 2058)
    kwargs_261574 = {}
    # Getting the type of 'append' (line 2058)
    append_261567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 10), 'append', False)
    # Calling append(args, kwargs) (line 2058)
    append_call_result_261575 = invoke(stypy.reporting.localization.Localization(__file__, 2058, 10), append_261567, *[z_z_261568, result___neg___261573], **kwargs_261574)
    
    # Assigning a type to the variable 'z_z' (line 2058)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2058, 4), 'z_z', append_call_result_261575)
    
    # Assigning a BinOp to a Name (line 2061):
    
    # Assigning a BinOp to a Name (line 2061):
    # Getting the type of 'k' (line 2061)
    k_261576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 10), 'k')
    
    # Call to real(...): (line 2061)
    # Processing the call arguments (line 2061)
    
    # Call to prod(...): (line 2061)
    # Processing the call arguments (line 2061)
    # Getting the type of 'fs2' (line 2061)
    fs2_261579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 24), 'fs2', False)
    # Getting the type of 'z' (line 2061)
    z_261580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 30), 'z', False)
    # Applying the binary operator '-' (line 2061)
    result_sub_261581 = python_operator(stypy.reporting.localization.Localization(__file__, 2061, 24), '-', fs2_261579, z_261580)
    
    # Processing the call keyword arguments (line 2061)
    kwargs_261582 = {}
    # Getting the type of 'prod' (line 2061)
    prod_261578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 19), 'prod', False)
    # Calling prod(args, kwargs) (line 2061)
    prod_call_result_261583 = invoke(stypy.reporting.localization.Localization(__file__, 2061, 19), prod_261578, *[result_sub_261581], **kwargs_261582)
    
    
    # Call to prod(...): (line 2061)
    # Processing the call arguments (line 2061)
    # Getting the type of 'fs2' (line 2061)
    fs2_261585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 40), 'fs2', False)
    # Getting the type of 'p' (line 2061)
    p_261586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 46), 'p', False)
    # Applying the binary operator '-' (line 2061)
    result_sub_261587 = python_operator(stypy.reporting.localization.Localization(__file__, 2061, 40), '-', fs2_261585, p_261586)
    
    # Processing the call keyword arguments (line 2061)
    kwargs_261588 = {}
    # Getting the type of 'prod' (line 2061)
    prod_261584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 35), 'prod', False)
    # Calling prod(args, kwargs) (line 2061)
    prod_call_result_261589 = invoke(stypy.reporting.localization.Localization(__file__, 2061, 35), prod_261584, *[result_sub_261587], **kwargs_261588)
    
    # Applying the binary operator 'div' (line 2061)
    result_div_261590 = python_operator(stypy.reporting.localization.Localization(__file__, 2061, 19), 'div', prod_call_result_261583, prod_call_result_261589)
    
    # Processing the call keyword arguments (line 2061)
    kwargs_261591 = {}
    # Getting the type of 'real' (line 2061)
    real_261577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 14), 'real', False)
    # Calling real(args, kwargs) (line 2061)
    real_call_result_261592 = invoke(stypy.reporting.localization.Localization(__file__, 2061, 14), real_261577, *[result_div_261590], **kwargs_261591)
    
    # Applying the binary operator '*' (line 2061)
    result_mul_261593 = python_operator(stypy.reporting.localization.Localization(__file__, 2061, 10), '*', k_261576, real_call_result_261592)
    
    # Assigning a type to the variable 'k_z' (line 2061)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2061, 4), 'k_z', result_mul_261593)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2063)
    tuple_261594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2063)
    # Adding element type (line 2063)
    # Getting the type of 'z_z' (line 2063)
    z_z_261595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 11), 'z_z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2063, 11), tuple_261594, z_z_261595)
    # Adding element type (line 2063)
    # Getting the type of 'p_z' (line 2063)
    p_z_261596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 16), 'p_z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2063, 11), tuple_261594, p_z_261596)
    # Adding element type (line 2063)
    # Getting the type of 'k_z' (line 2063)
    k_z_261597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 21), 'k_z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2063, 11), tuple_261594, k_z_261597)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2063)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2063, 4), 'stypy_return_type', tuple_261594)
    
    # ################# End of '_zpkbilinear(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_zpkbilinear' in the type store
    # Getting the type of 'stypy_return_type' (line 2016)
    stypy_return_type_261598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_261598)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_zpkbilinear'
    return stypy_return_type_261598

# Assigning a type to the variable '_zpkbilinear' (line 2016)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2016, 0), '_zpkbilinear', _zpkbilinear)

@norecursion
def _zpklp2lp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_261599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2066, 26), 'float')
    defaults = [float_261599]
    # Create a new context for function '_zpklp2lp'
    module_type_store = module_type_store.open_function_context('_zpklp2lp', 2066, 0, False)
    
    # Passed parameters checking function
    _zpklp2lp.stypy_localization = localization
    _zpklp2lp.stypy_type_of_self = None
    _zpklp2lp.stypy_type_store = module_type_store
    _zpklp2lp.stypy_function_name = '_zpklp2lp'
    _zpklp2lp.stypy_param_names_list = ['z', 'p', 'k', 'wo']
    _zpklp2lp.stypy_varargs_param_name = None
    _zpklp2lp.stypy_kwargs_param_name = None
    _zpklp2lp.stypy_call_defaults = defaults
    _zpklp2lp.stypy_call_varargs = varargs
    _zpklp2lp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_zpklp2lp', ['z', 'p', 'k', 'wo'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_zpklp2lp', localization, ['z', 'p', 'k', 'wo'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_zpklp2lp(...)' code ##################

    str_261600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2101, (-1)), 'str', "\n    Transform a lowpass filter prototype to a different frequency.\n\n    Return an analog low-pass filter with cutoff frequency `wo`\n    from an analog low-pass filter prototype with unity cutoff frequency,\n    using zeros, poles, and gain ('zpk') representation.\n\n    Parameters\n    ----------\n    z : array_like\n        Zeros of the analog IIR filter transfer function.\n    p : array_like\n        Poles of the analog IIR filter transfer function.\n    k : float\n        System gain of the analog IIR filter transfer function.\n    wo : float\n        Desired cutoff, as angular frequency (e.g. rad/s).\n        Defaults to no change.\n\n    Returns\n    -------\n    z : ndarray\n        Zeros of the transformed low-pass filter transfer function.\n    p : ndarray\n        Poles of the transformed low-pass filter transfer function.\n    k : float\n        System gain of the transformed low-pass filter.\n\n    Notes\n    -----\n    This is derived from the s-plane substitution\n\n    .. math:: s \\rightarrow \\frac{s}{\\omega_0}\n\n    ")
    
    # Assigning a Call to a Name (line 2102):
    
    # Assigning a Call to a Name (line 2102):
    
    # Call to atleast_1d(...): (line 2102)
    # Processing the call arguments (line 2102)
    # Getting the type of 'z' (line 2102)
    z_261602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 19), 'z', False)
    # Processing the call keyword arguments (line 2102)
    kwargs_261603 = {}
    # Getting the type of 'atleast_1d' (line 2102)
    atleast_1d_261601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2102)
    atleast_1d_call_result_261604 = invoke(stypy.reporting.localization.Localization(__file__, 2102, 8), atleast_1d_261601, *[z_261602], **kwargs_261603)
    
    # Assigning a type to the variable 'z' (line 2102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 4), 'z', atleast_1d_call_result_261604)
    
    # Assigning a Call to a Name (line 2103):
    
    # Assigning a Call to a Name (line 2103):
    
    # Call to atleast_1d(...): (line 2103)
    # Processing the call arguments (line 2103)
    # Getting the type of 'p' (line 2103)
    p_261606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 19), 'p', False)
    # Processing the call keyword arguments (line 2103)
    kwargs_261607 = {}
    # Getting the type of 'atleast_1d' (line 2103)
    atleast_1d_261605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2103)
    atleast_1d_call_result_261608 = invoke(stypy.reporting.localization.Localization(__file__, 2103, 8), atleast_1d_261605, *[p_261606], **kwargs_261607)
    
    # Assigning a type to the variable 'p' (line 2103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2103, 4), 'p', atleast_1d_call_result_261608)
    
    # Assigning a Call to a Name (line 2104):
    
    # Assigning a Call to a Name (line 2104):
    
    # Call to float(...): (line 2104)
    # Processing the call arguments (line 2104)
    # Getting the type of 'wo' (line 2104)
    wo_261610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 15), 'wo', False)
    # Processing the call keyword arguments (line 2104)
    kwargs_261611 = {}
    # Getting the type of 'float' (line 2104)
    float_261609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 9), 'float', False)
    # Calling float(args, kwargs) (line 2104)
    float_call_result_261612 = invoke(stypy.reporting.localization.Localization(__file__, 2104, 9), float_261609, *[wo_261610], **kwargs_261611)
    
    # Assigning a type to the variable 'wo' (line 2104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2104, 4), 'wo', float_call_result_261612)
    
    # Assigning a Call to a Name (line 2106):
    
    # Assigning a Call to a Name (line 2106):
    
    # Call to _relative_degree(...): (line 2106)
    # Processing the call arguments (line 2106)
    # Getting the type of 'z' (line 2106)
    z_261614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 30), 'z', False)
    # Getting the type of 'p' (line 2106)
    p_261615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 33), 'p', False)
    # Processing the call keyword arguments (line 2106)
    kwargs_261616 = {}
    # Getting the type of '_relative_degree' (line 2106)
    _relative_degree_261613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 13), '_relative_degree', False)
    # Calling _relative_degree(args, kwargs) (line 2106)
    _relative_degree_call_result_261617 = invoke(stypy.reporting.localization.Localization(__file__, 2106, 13), _relative_degree_261613, *[z_261614, p_261615], **kwargs_261616)
    
    # Assigning a type to the variable 'degree' (line 2106)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2106, 4), 'degree', _relative_degree_call_result_261617)
    
    # Assigning a BinOp to a Name (line 2109):
    
    # Assigning a BinOp to a Name (line 2109):
    # Getting the type of 'wo' (line 2109)
    wo_261618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 11), 'wo')
    # Getting the type of 'z' (line 2109)
    z_261619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 16), 'z')
    # Applying the binary operator '*' (line 2109)
    result_mul_261620 = python_operator(stypy.reporting.localization.Localization(__file__, 2109, 11), '*', wo_261618, z_261619)
    
    # Assigning a type to the variable 'z_lp' (line 2109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 4), 'z_lp', result_mul_261620)
    
    # Assigning a BinOp to a Name (line 2110):
    
    # Assigning a BinOp to a Name (line 2110):
    # Getting the type of 'wo' (line 2110)
    wo_261621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 11), 'wo')
    # Getting the type of 'p' (line 2110)
    p_261622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 16), 'p')
    # Applying the binary operator '*' (line 2110)
    result_mul_261623 = python_operator(stypy.reporting.localization.Localization(__file__, 2110, 11), '*', wo_261621, p_261622)
    
    # Assigning a type to the variable 'p_lp' (line 2110)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2110, 4), 'p_lp', result_mul_261623)
    
    # Assigning a BinOp to a Name (line 2114):
    
    # Assigning a BinOp to a Name (line 2114):
    # Getting the type of 'k' (line 2114)
    k_261624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 11), 'k')
    # Getting the type of 'wo' (line 2114)
    wo_261625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 15), 'wo')
    # Getting the type of 'degree' (line 2114)
    degree_261626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 19), 'degree')
    # Applying the binary operator '**' (line 2114)
    result_pow_261627 = python_operator(stypy.reporting.localization.Localization(__file__, 2114, 15), '**', wo_261625, degree_261626)
    
    # Applying the binary operator '*' (line 2114)
    result_mul_261628 = python_operator(stypy.reporting.localization.Localization(__file__, 2114, 11), '*', k_261624, result_pow_261627)
    
    # Assigning a type to the variable 'k_lp' (line 2114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2114, 4), 'k_lp', result_mul_261628)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2116)
    tuple_261629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2116, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2116)
    # Adding element type (line 2116)
    # Getting the type of 'z_lp' (line 2116)
    z_lp_261630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 11), 'z_lp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2116, 11), tuple_261629, z_lp_261630)
    # Adding element type (line 2116)
    # Getting the type of 'p_lp' (line 2116)
    p_lp_261631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 17), 'p_lp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2116, 11), tuple_261629, p_lp_261631)
    # Adding element type (line 2116)
    # Getting the type of 'k_lp' (line 2116)
    k_lp_261632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 23), 'k_lp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2116, 11), tuple_261629, k_lp_261632)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2116, 4), 'stypy_return_type', tuple_261629)
    
    # ################# End of '_zpklp2lp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_zpklp2lp' in the type store
    # Getting the type of 'stypy_return_type' (line 2066)
    stypy_return_type_261633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_261633)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_zpklp2lp'
    return stypy_return_type_261633

# Assigning a type to the variable '_zpklp2lp' (line 2066)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2066, 0), '_zpklp2lp', _zpklp2lp)

@norecursion
def _zpklp2hp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_261634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2119, 26), 'float')
    defaults = [float_261634]
    # Create a new context for function '_zpklp2hp'
    module_type_store = module_type_store.open_function_context('_zpklp2hp', 2119, 0, False)
    
    # Passed parameters checking function
    _zpklp2hp.stypy_localization = localization
    _zpklp2hp.stypy_type_of_self = None
    _zpklp2hp.stypy_type_store = module_type_store
    _zpklp2hp.stypy_function_name = '_zpklp2hp'
    _zpklp2hp.stypy_param_names_list = ['z', 'p', 'k', 'wo']
    _zpklp2hp.stypy_varargs_param_name = None
    _zpklp2hp.stypy_kwargs_param_name = None
    _zpklp2hp.stypy_call_defaults = defaults
    _zpklp2hp.stypy_call_varargs = varargs
    _zpklp2hp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_zpklp2hp', ['z', 'p', 'k', 'wo'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_zpklp2hp', localization, ['z', 'p', 'k', 'wo'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_zpklp2hp(...)' code ##################

    str_261635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2157, (-1)), 'str', "\n    Transform a lowpass filter prototype to a highpass filter.\n\n    Return an analog high-pass filter with cutoff frequency `wo`\n    from an analog low-pass filter prototype with unity cutoff frequency,\n    using zeros, poles, and gain ('zpk') representation.\n\n    Parameters\n    ----------\n    z : array_like\n        Zeros of the analog IIR filter transfer function.\n    p : array_like\n        Poles of the analog IIR filter transfer function.\n    k : float\n        System gain of the analog IIR filter transfer function.\n    wo : float\n        Desired cutoff, as angular frequency (e.g. rad/s).\n        Defaults to no change.\n\n    Returns\n    -------\n    z : ndarray\n        Zeros of the transformed high-pass filter transfer function.\n    p : ndarray\n        Poles of the transformed high-pass filter transfer function.\n    k : float\n        System gain of the transformed high-pass filter.\n\n    Notes\n    -----\n    This is derived from the s-plane substitution\n\n    .. math:: s \\rightarrow \\frac{\\omega_0}{s}\n\n    This maintains symmetry of the lowpass and highpass responses on a\n    logarithmic scale.\n\n    ")
    
    # Assigning a Call to a Name (line 2158):
    
    # Assigning a Call to a Name (line 2158):
    
    # Call to atleast_1d(...): (line 2158)
    # Processing the call arguments (line 2158)
    # Getting the type of 'z' (line 2158)
    z_261637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 19), 'z', False)
    # Processing the call keyword arguments (line 2158)
    kwargs_261638 = {}
    # Getting the type of 'atleast_1d' (line 2158)
    atleast_1d_261636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2158)
    atleast_1d_call_result_261639 = invoke(stypy.reporting.localization.Localization(__file__, 2158, 8), atleast_1d_261636, *[z_261637], **kwargs_261638)
    
    # Assigning a type to the variable 'z' (line 2158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 4), 'z', atleast_1d_call_result_261639)
    
    # Assigning a Call to a Name (line 2159):
    
    # Assigning a Call to a Name (line 2159):
    
    # Call to atleast_1d(...): (line 2159)
    # Processing the call arguments (line 2159)
    # Getting the type of 'p' (line 2159)
    p_261641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 19), 'p', False)
    # Processing the call keyword arguments (line 2159)
    kwargs_261642 = {}
    # Getting the type of 'atleast_1d' (line 2159)
    atleast_1d_261640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2159)
    atleast_1d_call_result_261643 = invoke(stypy.reporting.localization.Localization(__file__, 2159, 8), atleast_1d_261640, *[p_261641], **kwargs_261642)
    
    # Assigning a type to the variable 'p' (line 2159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2159, 4), 'p', atleast_1d_call_result_261643)
    
    # Assigning a Call to a Name (line 2160):
    
    # Assigning a Call to a Name (line 2160):
    
    # Call to float(...): (line 2160)
    # Processing the call arguments (line 2160)
    # Getting the type of 'wo' (line 2160)
    wo_261645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 15), 'wo', False)
    # Processing the call keyword arguments (line 2160)
    kwargs_261646 = {}
    # Getting the type of 'float' (line 2160)
    float_261644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 9), 'float', False)
    # Calling float(args, kwargs) (line 2160)
    float_call_result_261647 = invoke(stypy.reporting.localization.Localization(__file__, 2160, 9), float_261644, *[wo_261645], **kwargs_261646)
    
    # Assigning a type to the variable 'wo' (line 2160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 4), 'wo', float_call_result_261647)
    
    # Assigning a Call to a Name (line 2162):
    
    # Assigning a Call to a Name (line 2162):
    
    # Call to _relative_degree(...): (line 2162)
    # Processing the call arguments (line 2162)
    # Getting the type of 'z' (line 2162)
    z_261649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 30), 'z', False)
    # Getting the type of 'p' (line 2162)
    p_261650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 33), 'p', False)
    # Processing the call keyword arguments (line 2162)
    kwargs_261651 = {}
    # Getting the type of '_relative_degree' (line 2162)
    _relative_degree_261648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 13), '_relative_degree', False)
    # Calling _relative_degree(args, kwargs) (line 2162)
    _relative_degree_call_result_261652 = invoke(stypy.reporting.localization.Localization(__file__, 2162, 13), _relative_degree_261648, *[z_261649, p_261650], **kwargs_261651)
    
    # Assigning a type to the variable 'degree' (line 2162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2162, 4), 'degree', _relative_degree_call_result_261652)
    
    # Assigning a BinOp to a Name (line 2166):
    
    # Assigning a BinOp to a Name (line 2166):
    # Getting the type of 'wo' (line 2166)
    wo_261653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 11), 'wo')
    # Getting the type of 'z' (line 2166)
    z_261654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 16), 'z')
    # Applying the binary operator 'div' (line 2166)
    result_div_261655 = python_operator(stypy.reporting.localization.Localization(__file__, 2166, 11), 'div', wo_261653, z_261654)
    
    # Assigning a type to the variable 'z_hp' (line 2166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 4), 'z_hp', result_div_261655)
    
    # Assigning a BinOp to a Name (line 2167):
    
    # Assigning a BinOp to a Name (line 2167):
    # Getting the type of 'wo' (line 2167)
    wo_261656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 11), 'wo')
    # Getting the type of 'p' (line 2167)
    p_261657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 16), 'p')
    # Applying the binary operator 'div' (line 2167)
    result_div_261658 = python_operator(stypy.reporting.localization.Localization(__file__, 2167, 11), 'div', wo_261656, p_261657)
    
    # Assigning a type to the variable 'p_hp' (line 2167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2167, 4), 'p_hp', result_div_261658)
    
    # Assigning a Call to a Name (line 2170):
    
    # Assigning a Call to a Name (line 2170):
    
    # Call to append(...): (line 2170)
    # Processing the call arguments (line 2170)
    # Getting the type of 'z_hp' (line 2170)
    z_hp_261660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 18), 'z_hp', False)
    
    # Call to zeros(...): (line 2170)
    # Processing the call arguments (line 2170)
    # Getting the type of 'degree' (line 2170)
    degree_261662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 30), 'degree', False)
    # Processing the call keyword arguments (line 2170)
    kwargs_261663 = {}
    # Getting the type of 'zeros' (line 2170)
    zeros_261661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 24), 'zeros', False)
    # Calling zeros(args, kwargs) (line 2170)
    zeros_call_result_261664 = invoke(stypy.reporting.localization.Localization(__file__, 2170, 24), zeros_261661, *[degree_261662], **kwargs_261663)
    
    # Processing the call keyword arguments (line 2170)
    kwargs_261665 = {}
    # Getting the type of 'append' (line 2170)
    append_261659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 11), 'append', False)
    # Calling append(args, kwargs) (line 2170)
    append_call_result_261666 = invoke(stypy.reporting.localization.Localization(__file__, 2170, 11), append_261659, *[z_hp_261660, zeros_call_result_261664], **kwargs_261665)
    
    # Assigning a type to the variable 'z_hp' (line 2170)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2170, 4), 'z_hp', append_call_result_261666)
    
    # Assigning a BinOp to a Name (line 2173):
    
    # Assigning a BinOp to a Name (line 2173):
    # Getting the type of 'k' (line 2173)
    k_261667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 11), 'k')
    
    # Call to real(...): (line 2173)
    # Processing the call arguments (line 2173)
    
    # Call to prod(...): (line 2173)
    # Processing the call arguments (line 2173)
    
    # Getting the type of 'z' (line 2173)
    z_261670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 26), 'z', False)
    # Applying the 'usub' unary operator (line 2173)
    result___neg___261671 = python_operator(stypy.reporting.localization.Localization(__file__, 2173, 25), 'usub', z_261670)
    
    # Processing the call keyword arguments (line 2173)
    kwargs_261672 = {}
    # Getting the type of 'prod' (line 2173)
    prod_261669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 20), 'prod', False)
    # Calling prod(args, kwargs) (line 2173)
    prod_call_result_261673 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 20), prod_261669, *[result___neg___261671], **kwargs_261672)
    
    
    # Call to prod(...): (line 2173)
    # Processing the call arguments (line 2173)
    
    # Getting the type of 'p' (line 2173)
    p_261675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 37), 'p', False)
    # Applying the 'usub' unary operator (line 2173)
    result___neg___261676 = python_operator(stypy.reporting.localization.Localization(__file__, 2173, 36), 'usub', p_261675)
    
    # Processing the call keyword arguments (line 2173)
    kwargs_261677 = {}
    # Getting the type of 'prod' (line 2173)
    prod_261674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 31), 'prod', False)
    # Calling prod(args, kwargs) (line 2173)
    prod_call_result_261678 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 31), prod_261674, *[result___neg___261676], **kwargs_261677)
    
    # Applying the binary operator 'div' (line 2173)
    result_div_261679 = python_operator(stypy.reporting.localization.Localization(__file__, 2173, 20), 'div', prod_call_result_261673, prod_call_result_261678)
    
    # Processing the call keyword arguments (line 2173)
    kwargs_261680 = {}
    # Getting the type of 'real' (line 2173)
    real_261668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 15), 'real', False)
    # Calling real(args, kwargs) (line 2173)
    real_call_result_261681 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 15), real_261668, *[result_div_261679], **kwargs_261680)
    
    # Applying the binary operator '*' (line 2173)
    result_mul_261682 = python_operator(stypy.reporting.localization.Localization(__file__, 2173, 11), '*', k_261667, real_call_result_261681)
    
    # Assigning a type to the variable 'k_hp' (line 2173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2173, 4), 'k_hp', result_mul_261682)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2175)
    tuple_261683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2175, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2175)
    # Adding element type (line 2175)
    # Getting the type of 'z_hp' (line 2175)
    z_hp_261684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 11), 'z_hp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2175, 11), tuple_261683, z_hp_261684)
    # Adding element type (line 2175)
    # Getting the type of 'p_hp' (line 2175)
    p_hp_261685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 17), 'p_hp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2175, 11), tuple_261683, p_hp_261685)
    # Adding element type (line 2175)
    # Getting the type of 'k_hp' (line 2175)
    k_hp_261686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 23), 'k_hp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2175, 11), tuple_261683, k_hp_261686)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2175, 4), 'stypy_return_type', tuple_261683)
    
    # ################# End of '_zpklp2hp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_zpklp2hp' in the type store
    # Getting the type of 'stypy_return_type' (line 2119)
    stypy_return_type_261687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_261687)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_zpklp2hp'
    return stypy_return_type_261687

# Assigning a type to the variable '_zpklp2hp' (line 2119)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2119, 0), '_zpklp2hp', _zpklp2hp)

@norecursion
def _zpklp2bp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_261688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2178, 26), 'float')
    float_261689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2178, 34), 'float')
    defaults = [float_261688, float_261689]
    # Create a new context for function '_zpklp2bp'
    module_type_store = module_type_store.open_function_context('_zpklp2bp', 2178, 0, False)
    
    # Passed parameters checking function
    _zpklp2bp.stypy_localization = localization
    _zpklp2bp.stypy_type_of_self = None
    _zpklp2bp.stypy_type_store = module_type_store
    _zpklp2bp.stypy_function_name = '_zpklp2bp'
    _zpklp2bp.stypy_param_names_list = ['z', 'p', 'k', 'wo', 'bw']
    _zpklp2bp.stypy_varargs_param_name = None
    _zpklp2bp.stypy_kwargs_param_name = None
    _zpklp2bp.stypy_call_defaults = defaults
    _zpklp2bp.stypy_call_varargs = varargs
    _zpklp2bp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_zpklp2bp', ['z', 'p', 'k', 'wo', 'bw'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_zpklp2bp', localization, ['z', 'p', 'k', 'wo', 'bw'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_zpklp2bp(...)' code ##################

    str_261690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2219, (-1)), 'str', '\n    Transform a lowpass filter prototype to a bandpass filter.\n\n    Return an analog band-pass filter with center frequency `wo` and\n    bandwidth `bw` from an analog low-pass filter prototype with unity\n    cutoff frequency, using zeros, poles, and gain (\'zpk\') representation.\n\n    Parameters\n    ----------\n    z : array_like\n        Zeros of the analog IIR filter transfer function.\n    p : array_like\n        Poles of the analog IIR filter transfer function.\n    k : float\n        System gain of the analog IIR filter transfer function.\n    wo : float\n        Desired passband center, as angular frequency (e.g. rad/s).\n        Defaults to no change.\n    bw : float\n        Desired passband width, as angular frequency (e.g. rad/s).\n        Defaults to 1.\n\n    Returns\n    -------\n    z : ndarray\n        Zeros of the transformed band-pass filter transfer function.\n    p : ndarray\n        Poles of the transformed band-pass filter transfer function.\n    k : float\n        System gain of the transformed band-pass filter.\n\n    Notes\n    -----\n    This is derived from the s-plane substitution\n\n    .. math:: s \\rightarrow \\frac{s^2 + {\\omega_0}^2}{s \\cdot \\mathrm{BW}}\n\n    This is the "wideband" transformation, producing a passband with\n    geometric (log frequency) symmetry about `wo`.\n\n    ')
    
    # Assigning a Call to a Name (line 2220):
    
    # Assigning a Call to a Name (line 2220):
    
    # Call to atleast_1d(...): (line 2220)
    # Processing the call arguments (line 2220)
    # Getting the type of 'z' (line 2220)
    z_261692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 19), 'z', False)
    # Processing the call keyword arguments (line 2220)
    kwargs_261693 = {}
    # Getting the type of 'atleast_1d' (line 2220)
    atleast_1d_261691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2220)
    atleast_1d_call_result_261694 = invoke(stypy.reporting.localization.Localization(__file__, 2220, 8), atleast_1d_261691, *[z_261692], **kwargs_261693)
    
    # Assigning a type to the variable 'z' (line 2220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2220, 4), 'z', atleast_1d_call_result_261694)
    
    # Assigning a Call to a Name (line 2221):
    
    # Assigning a Call to a Name (line 2221):
    
    # Call to atleast_1d(...): (line 2221)
    # Processing the call arguments (line 2221)
    # Getting the type of 'p' (line 2221)
    p_261696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 19), 'p', False)
    # Processing the call keyword arguments (line 2221)
    kwargs_261697 = {}
    # Getting the type of 'atleast_1d' (line 2221)
    atleast_1d_261695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2221)
    atleast_1d_call_result_261698 = invoke(stypy.reporting.localization.Localization(__file__, 2221, 8), atleast_1d_261695, *[p_261696], **kwargs_261697)
    
    # Assigning a type to the variable 'p' (line 2221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 4), 'p', atleast_1d_call_result_261698)
    
    # Assigning a Call to a Name (line 2222):
    
    # Assigning a Call to a Name (line 2222):
    
    # Call to float(...): (line 2222)
    # Processing the call arguments (line 2222)
    # Getting the type of 'wo' (line 2222)
    wo_261700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 15), 'wo', False)
    # Processing the call keyword arguments (line 2222)
    kwargs_261701 = {}
    # Getting the type of 'float' (line 2222)
    float_261699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 9), 'float', False)
    # Calling float(args, kwargs) (line 2222)
    float_call_result_261702 = invoke(stypy.reporting.localization.Localization(__file__, 2222, 9), float_261699, *[wo_261700], **kwargs_261701)
    
    # Assigning a type to the variable 'wo' (line 2222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2222, 4), 'wo', float_call_result_261702)
    
    # Assigning a Call to a Name (line 2223):
    
    # Assigning a Call to a Name (line 2223):
    
    # Call to float(...): (line 2223)
    # Processing the call arguments (line 2223)
    # Getting the type of 'bw' (line 2223)
    bw_261704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 15), 'bw', False)
    # Processing the call keyword arguments (line 2223)
    kwargs_261705 = {}
    # Getting the type of 'float' (line 2223)
    float_261703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 9), 'float', False)
    # Calling float(args, kwargs) (line 2223)
    float_call_result_261706 = invoke(stypy.reporting.localization.Localization(__file__, 2223, 9), float_261703, *[bw_261704], **kwargs_261705)
    
    # Assigning a type to the variable 'bw' (line 2223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2223, 4), 'bw', float_call_result_261706)
    
    # Assigning a Call to a Name (line 2225):
    
    # Assigning a Call to a Name (line 2225):
    
    # Call to _relative_degree(...): (line 2225)
    # Processing the call arguments (line 2225)
    # Getting the type of 'z' (line 2225)
    z_261708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 30), 'z', False)
    # Getting the type of 'p' (line 2225)
    p_261709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 33), 'p', False)
    # Processing the call keyword arguments (line 2225)
    kwargs_261710 = {}
    # Getting the type of '_relative_degree' (line 2225)
    _relative_degree_261707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 13), '_relative_degree', False)
    # Calling _relative_degree(args, kwargs) (line 2225)
    _relative_degree_call_result_261711 = invoke(stypy.reporting.localization.Localization(__file__, 2225, 13), _relative_degree_261707, *[z_261708, p_261709], **kwargs_261710)
    
    # Assigning a type to the variable 'degree' (line 2225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2225, 4), 'degree', _relative_degree_call_result_261711)
    
    # Assigning a BinOp to a Name (line 2228):
    
    # Assigning a BinOp to a Name (line 2228):
    # Getting the type of 'z' (line 2228)
    z_261712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 11), 'z')
    # Getting the type of 'bw' (line 2228)
    bw_261713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 15), 'bw')
    # Applying the binary operator '*' (line 2228)
    result_mul_261714 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 11), '*', z_261712, bw_261713)
    
    int_261715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, 18), 'int')
    # Applying the binary operator 'div' (line 2228)
    result_div_261716 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 17), 'div', result_mul_261714, int_261715)
    
    # Assigning a type to the variable 'z_lp' (line 2228)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 4), 'z_lp', result_div_261716)
    
    # Assigning a BinOp to a Name (line 2229):
    
    # Assigning a BinOp to a Name (line 2229):
    # Getting the type of 'p' (line 2229)
    p_261717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 11), 'p')
    # Getting the type of 'bw' (line 2229)
    bw_261718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 15), 'bw')
    # Applying the binary operator '*' (line 2229)
    result_mul_261719 = python_operator(stypy.reporting.localization.Localization(__file__, 2229, 11), '*', p_261717, bw_261718)
    
    int_261720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2229, 18), 'int')
    # Applying the binary operator 'div' (line 2229)
    result_div_261721 = python_operator(stypy.reporting.localization.Localization(__file__, 2229, 17), 'div', result_mul_261719, int_261720)
    
    # Assigning a type to the variable 'p_lp' (line 2229)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 4), 'p_lp', result_div_261721)
    
    # Assigning a Call to a Name (line 2232):
    
    # Assigning a Call to a Name (line 2232):
    
    # Call to astype(...): (line 2232)
    # Processing the call arguments (line 2232)
    # Getting the type of 'complex' (line 2232)
    complex_261724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 23), 'complex', False)
    # Processing the call keyword arguments (line 2232)
    kwargs_261725 = {}
    # Getting the type of 'z_lp' (line 2232)
    z_lp_261722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 11), 'z_lp', False)
    # Obtaining the member 'astype' of a type (line 2232)
    astype_261723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 11), z_lp_261722, 'astype')
    # Calling astype(args, kwargs) (line 2232)
    astype_call_result_261726 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 11), astype_261723, *[complex_261724], **kwargs_261725)
    
    # Assigning a type to the variable 'z_lp' (line 2232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 4), 'z_lp', astype_call_result_261726)
    
    # Assigning a Call to a Name (line 2233):
    
    # Assigning a Call to a Name (line 2233):
    
    # Call to astype(...): (line 2233)
    # Processing the call arguments (line 2233)
    # Getting the type of 'complex' (line 2233)
    complex_261729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 23), 'complex', False)
    # Processing the call keyword arguments (line 2233)
    kwargs_261730 = {}
    # Getting the type of 'p_lp' (line 2233)
    p_lp_261727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 11), 'p_lp', False)
    # Obtaining the member 'astype' of a type (line 2233)
    astype_261728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2233, 11), p_lp_261727, 'astype')
    # Calling astype(args, kwargs) (line 2233)
    astype_call_result_261731 = invoke(stypy.reporting.localization.Localization(__file__, 2233, 11), astype_261728, *[complex_261729], **kwargs_261730)
    
    # Assigning a type to the variable 'p_lp' (line 2233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2233, 4), 'p_lp', astype_call_result_261731)
    
    # Assigning a Call to a Name (line 2236):
    
    # Assigning a Call to a Name (line 2236):
    
    # Call to concatenate(...): (line 2236)
    # Processing the call arguments (line 2236)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2236)
    tuple_261733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2236, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2236)
    # Adding element type (line 2236)
    # Getting the type of 'z_lp' (line 2236)
    z_lp_261734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 24), 'z_lp', False)
    
    # Call to sqrt(...): (line 2236)
    # Processing the call arguments (line 2236)
    # Getting the type of 'z_lp' (line 2236)
    z_lp_261736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 36), 'z_lp', False)
    int_261737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2236, 42), 'int')
    # Applying the binary operator '**' (line 2236)
    result_pow_261738 = python_operator(stypy.reporting.localization.Localization(__file__, 2236, 36), '**', z_lp_261736, int_261737)
    
    # Getting the type of 'wo' (line 2236)
    wo_261739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 46), 'wo', False)
    int_261740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2236, 50), 'int')
    # Applying the binary operator '**' (line 2236)
    result_pow_261741 = python_operator(stypy.reporting.localization.Localization(__file__, 2236, 46), '**', wo_261739, int_261740)
    
    # Applying the binary operator '-' (line 2236)
    result_sub_261742 = python_operator(stypy.reporting.localization.Localization(__file__, 2236, 36), '-', result_pow_261738, result_pow_261741)
    
    # Processing the call keyword arguments (line 2236)
    kwargs_261743 = {}
    # Getting the type of 'sqrt' (line 2236)
    sqrt_261735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 31), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2236)
    sqrt_call_result_261744 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 31), sqrt_261735, *[result_sub_261742], **kwargs_261743)
    
    # Applying the binary operator '+' (line 2236)
    result_add_261745 = python_operator(stypy.reporting.localization.Localization(__file__, 2236, 24), '+', z_lp_261734, sqrt_call_result_261744)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2236, 24), tuple_261733, result_add_261745)
    # Adding element type (line 2236)
    # Getting the type of 'z_lp' (line 2237)
    z_lp_261746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 24), 'z_lp', False)
    
    # Call to sqrt(...): (line 2237)
    # Processing the call arguments (line 2237)
    # Getting the type of 'z_lp' (line 2237)
    z_lp_261748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 36), 'z_lp', False)
    int_261749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2237, 42), 'int')
    # Applying the binary operator '**' (line 2237)
    result_pow_261750 = python_operator(stypy.reporting.localization.Localization(__file__, 2237, 36), '**', z_lp_261748, int_261749)
    
    # Getting the type of 'wo' (line 2237)
    wo_261751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 46), 'wo', False)
    int_261752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2237, 50), 'int')
    # Applying the binary operator '**' (line 2237)
    result_pow_261753 = python_operator(stypy.reporting.localization.Localization(__file__, 2237, 46), '**', wo_261751, int_261752)
    
    # Applying the binary operator '-' (line 2237)
    result_sub_261754 = python_operator(stypy.reporting.localization.Localization(__file__, 2237, 36), '-', result_pow_261750, result_pow_261753)
    
    # Processing the call keyword arguments (line 2237)
    kwargs_261755 = {}
    # Getting the type of 'sqrt' (line 2237)
    sqrt_261747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 31), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2237)
    sqrt_call_result_261756 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 31), sqrt_261747, *[result_sub_261754], **kwargs_261755)
    
    # Applying the binary operator '-' (line 2237)
    result_sub_261757 = python_operator(stypy.reporting.localization.Localization(__file__, 2237, 24), '-', z_lp_261746, sqrt_call_result_261756)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2236, 24), tuple_261733, result_sub_261757)
    
    # Processing the call keyword arguments (line 2236)
    kwargs_261758 = {}
    # Getting the type of 'concatenate' (line 2236)
    concatenate_261732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 11), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 2236)
    concatenate_call_result_261759 = invoke(stypy.reporting.localization.Localization(__file__, 2236, 11), concatenate_261732, *[tuple_261733], **kwargs_261758)
    
    # Assigning a type to the variable 'z_bp' (line 2236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2236, 4), 'z_bp', concatenate_call_result_261759)
    
    # Assigning a Call to a Name (line 2238):
    
    # Assigning a Call to a Name (line 2238):
    
    # Call to concatenate(...): (line 2238)
    # Processing the call arguments (line 2238)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2238)
    tuple_261761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2238, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2238)
    # Adding element type (line 2238)
    # Getting the type of 'p_lp' (line 2238)
    p_lp_261762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 24), 'p_lp', False)
    
    # Call to sqrt(...): (line 2238)
    # Processing the call arguments (line 2238)
    # Getting the type of 'p_lp' (line 2238)
    p_lp_261764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 36), 'p_lp', False)
    int_261765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2238, 42), 'int')
    # Applying the binary operator '**' (line 2238)
    result_pow_261766 = python_operator(stypy.reporting.localization.Localization(__file__, 2238, 36), '**', p_lp_261764, int_261765)
    
    # Getting the type of 'wo' (line 2238)
    wo_261767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 46), 'wo', False)
    int_261768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2238, 50), 'int')
    # Applying the binary operator '**' (line 2238)
    result_pow_261769 = python_operator(stypy.reporting.localization.Localization(__file__, 2238, 46), '**', wo_261767, int_261768)
    
    # Applying the binary operator '-' (line 2238)
    result_sub_261770 = python_operator(stypy.reporting.localization.Localization(__file__, 2238, 36), '-', result_pow_261766, result_pow_261769)
    
    # Processing the call keyword arguments (line 2238)
    kwargs_261771 = {}
    # Getting the type of 'sqrt' (line 2238)
    sqrt_261763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 31), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2238)
    sqrt_call_result_261772 = invoke(stypy.reporting.localization.Localization(__file__, 2238, 31), sqrt_261763, *[result_sub_261770], **kwargs_261771)
    
    # Applying the binary operator '+' (line 2238)
    result_add_261773 = python_operator(stypy.reporting.localization.Localization(__file__, 2238, 24), '+', p_lp_261762, sqrt_call_result_261772)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2238, 24), tuple_261761, result_add_261773)
    # Adding element type (line 2238)
    # Getting the type of 'p_lp' (line 2239)
    p_lp_261774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 24), 'p_lp', False)
    
    # Call to sqrt(...): (line 2239)
    # Processing the call arguments (line 2239)
    # Getting the type of 'p_lp' (line 2239)
    p_lp_261776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 36), 'p_lp', False)
    int_261777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2239, 42), 'int')
    # Applying the binary operator '**' (line 2239)
    result_pow_261778 = python_operator(stypy.reporting.localization.Localization(__file__, 2239, 36), '**', p_lp_261776, int_261777)
    
    # Getting the type of 'wo' (line 2239)
    wo_261779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 46), 'wo', False)
    int_261780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2239, 50), 'int')
    # Applying the binary operator '**' (line 2239)
    result_pow_261781 = python_operator(stypy.reporting.localization.Localization(__file__, 2239, 46), '**', wo_261779, int_261780)
    
    # Applying the binary operator '-' (line 2239)
    result_sub_261782 = python_operator(stypy.reporting.localization.Localization(__file__, 2239, 36), '-', result_pow_261778, result_pow_261781)
    
    # Processing the call keyword arguments (line 2239)
    kwargs_261783 = {}
    # Getting the type of 'sqrt' (line 2239)
    sqrt_261775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 31), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2239)
    sqrt_call_result_261784 = invoke(stypy.reporting.localization.Localization(__file__, 2239, 31), sqrt_261775, *[result_sub_261782], **kwargs_261783)
    
    # Applying the binary operator '-' (line 2239)
    result_sub_261785 = python_operator(stypy.reporting.localization.Localization(__file__, 2239, 24), '-', p_lp_261774, sqrt_call_result_261784)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2238, 24), tuple_261761, result_sub_261785)
    
    # Processing the call keyword arguments (line 2238)
    kwargs_261786 = {}
    # Getting the type of 'concatenate' (line 2238)
    concatenate_261760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 11), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 2238)
    concatenate_call_result_261787 = invoke(stypy.reporting.localization.Localization(__file__, 2238, 11), concatenate_261760, *[tuple_261761], **kwargs_261786)
    
    # Assigning a type to the variable 'p_bp' (line 2238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2238, 4), 'p_bp', concatenate_call_result_261787)
    
    # Assigning a Call to a Name (line 2242):
    
    # Assigning a Call to a Name (line 2242):
    
    # Call to append(...): (line 2242)
    # Processing the call arguments (line 2242)
    # Getting the type of 'z_bp' (line 2242)
    z_bp_261789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 18), 'z_bp', False)
    
    # Call to zeros(...): (line 2242)
    # Processing the call arguments (line 2242)
    # Getting the type of 'degree' (line 2242)
    degree_261791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 30), 'degree', False)
    # Processing the call keyword arguments (line 2242)
    kwargs_261792 = {}
    # Getting the type of 'zeros' (line 2242)
    zeros_261790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 24), 'zeros', False)
    # Calling zeros(args, kwargs) (line 2242)
    zeros_call_result_261793 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 24), zeros_261790, *[degree_261791], **kwargs_261792)
    
    # Processing the call keyword arguments (line 2242)
    kwargs_261794 = {}
    # Getting the type of 'append' (line 2242)
    append_261788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 11), 'append', False)
    # Calling append(args, kwargs) (line 2242)
    append_call_result_261795 = invoke(stypy.reporting.localization.Localization(__file__, 2242, 11), append_261788, *[z_bp_261789, zeros_call_result_261793], **kwargs_261794)
    
    # Assigning a type to the variable 'z_bp' (line 2242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 4), 'z_bp', append_call_result_261795)
    
    # Assigning a BinOp to a Name (line 2245):
    
    # Assigning a BinOp to a Name (line 2245):
    # Getting the type of 'k' (line 2245)
    k_261796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 11), 'k')
    # Getting the type of 'bw' (line 2245)
    bw_261797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 15), 'bw')
    # Getting the type of 'degree' (line 2245)
    degree_261798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 19), 'degree')
    # Applying the binary operator '**' (line 2245)
    result_pow_261799 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 15), '**', bw_261797, degree_261798)
    
    # Applying the binary operator '*' (line 2245)
    result_mul_261800 = python_operator(stypy.reporting.localization.Localization(__file__, 2245, 11), '*', k_261796, result_pow_261799)
    
    # Assigning a type to the variable 'k_bp' (line 2245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2245, 4), 'k_bp', result_mul_261800)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2247)
    tuple_261801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2247, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2247)
    # Adding element type (line 2247)
    # Getting the type of 'z_bp' (line 2247)
    z_bp_261802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 11), 'z_bp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2247, 11), tuple_261801, z_bp_261802)
    # Adding element type (line 2247)
    # Getting the type of 'p_bp' (line 2247)
    p_bp_261803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 17), 'p_bp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2247, 11), tuple_261801, p_bp_261803)
    # Adding element type (line 2247)
    # Getting the type of 'k_bp' (line 2247)
    k_bp_261804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 23), 'k_bp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2247, 11), tuple_261801, k_bp_261804)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2247, 4), 'stypy_return_type', tuple_261801)
    
    # ################# End of '_zpklp2bp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_zpklp2bp' in the type store
    # Getting the type of 'stypy_return_type' (line 2178)
    stypy_return_type_261805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_261805)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_zpklp2bp'
    return stypy_return_type_261805

# Assigning a type to the variable '_zpklp2bp' (line 2178)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 0), '_zpklp2bp', _zpklp2bp)

@norecursion
def _zpklp2bs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_261806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 26), 'float')
    float_261807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2250, 34), 'float')
    defaults = [float_261806, float_261807]
    # Create a new context for function '_zpklp2bs'
    module_type_store = module_type_store.open_function_context('_zpklp2bs', 2250, 0, False)
    
    # Passed parameters checking function
    _zpklp2bs.stypy_localization = localization
    _zpklp2bs.stypy_type_of_self = None
    _zpklp2bs.stypy_type_store = module_type_store
    _zpklp2bs.stypy_function_name = '_zpklp2bs'
    _zpklp2bs.stypy_param_names_list = ['z', 'p', 'k', 'wo', 'bw']
    _zpklp2bs.stypy_varargs_param_name = None
    _zpklp2bs.stypy_kwargs_param_name = None
    _zpklp2bs.stypy_call_defaults = defaults
    _zpklp2bs.stypy_call_varargs = varargs
    _zpklp2bs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_zpklp2bs', ['z', 'p', 'k', 'wo', 'bw'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_zpklp2bs', localization, ['z', 'p', 'k', 'wo', 'bw'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_zpklp2bs(...)' code ##################

    str_261808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2291, (-1)), 'str', '\n    Transform a lowpass filter prototype to a bandstop filter.\n\n    Return an analog band-stop filter with center frequency `wo` and\n    stopband width `bw` from an analog low-pass filter prototype with unity\n    cutoff frequency, using zeros, poles, and gain (\'zpk\') representation.\n\n    Parameters\n    ----------\n    z : array_like\n        Zeros of the analog IIR filter transfer function.\n    p : array_like\n        Poles of the analog IIR filter transfer function.\n    k : float\n        System gain of the analog IIR filter transfer function.\n    wo : float\n        Desired stopband center, as angular frequency (e.g. rad/s).\n        Defaults to no change.\n    bw : float\n        Desired stopband width, as angular frequency (e.g. rad/s).\n        Defaults to 1.\n\n    Returns\n    -------\n    z : ndarray\n        Zeros of the transformed band-stop filter transfer function.\n    p : ndarray\n        Poles of the transformed band-stop filter transfer function.\n    k : float\n        System gain of the transformed band-stop filter.\n\n    Notes\n    -----\n    This is derived from the s-plane substitution\n\n    .. math:: s \\rightarrow \\frac{s \\cdot \\mathrm{BW}}{s^2 + {\\omega_0}^2}\n\n    This is the "wideband" transformation, producing a stopband with\n    geometric (log frequency) symmetry about `wo`.\n\n    ')
    
    # Assigning a Call to a Name (line 2292):
    
    # Assigning a Call to a Name (line 2292):
    
    # Call to atleast_1d(...): (line 2292)
    # Processing the call arguments (line 2292)
    # Getting the type of 'z' (line 2292)
    z_261810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 19), 'z', False)
    # Processing the call keyword arguments (line 2292)
    kwargs_261811 = {}
    # Getting the type of 'atleast_1d' (line 2292)
    atleast_1d_261809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2292)
    atleast_1d_call_result_261812 = invoke(stypy.reporting.localization.Localization(__file__, 2292, 8), atleast_1d_261809, *[z_261810], **kwargs_261811)
    
    # Assigning a type to the variable 'z' (line 2292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2292, 4), 'z', atleast_1d_call_result_261812)
    
    # Assigning a Call to a Name (line 2293):
    
    # Assigning a Call to a Name (line 2293):
    
    # Call to atleast_1d(...): (line 2293)
    # Processing the call arguments (line 2293)
    # Getting the type of 'p' (line 2293)
    p_261814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 19), 'p', False)
    # Processing the call keyword arguments (line 2293)
    kwargs_261815 = {}
    # Getting the type of 'atleast_1d' (line 2293)
    atleast_1d_261813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2293)
    atleast_1d_call_result_261816 = invoke(stypy.reporting.localization.Localization(__file__, 2293, 8), atleast_1d_261813, *[p_261814], **kwargs_261815)
    
    # Assigning a type to the variable 'p' (line 2293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 4), 'p', atleast_1d_call_result_261816)
    
    # Assigning a Call to a Name (line 2294):
    
    # Assigning a Call to a Name (line 2294):
    
    # Call to float(...): (line 2294)
    # Processing the call arguments (line 2294)
    # Getting the type of 'wo' (line 2294)
    wo_261818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 15), 'wo', False)
    # Processing the call keyword arguments (line 2294)
    kwargs_261819 = {}
    # Getting the type of 'float' (line 2294)
    float_261817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 9), 'float', False)
    # Calling float(args, kwargs) (line 2294)
    float_call_result_261820 = invoke(stypy.reporting.localization.Localization(__file__, 2294, 9), float_261817, *[wo_261818], **kwargs_261819)
    
    # Assigning a type to the variable 'wo' (line 2294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 4), 'wo', float_call_result_261820)
    
    # Assigning a Call to a Name (line 2295):
    
    # Assigning a Call to a Name (line 2295):
    
    # Call to float(...): (line 2295)
    # Processing the call arguments (line 2295)
    # Getting the type of 'bw' (line 2295)
    bw_261822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 15), 'bw', False)
    # Processing the call keyword arguments (line 2295)
    kwargs_261823 = {}
    # Getting the type of 'float' (line 2295)
    float_261821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 9), 'float', False)
    # Calling float(args, kwargs) (line 2295)
    float_call_result_261824 = invoke(stypy.reporting.localization.Localization(__file__, 2295, 9), float_261821, *[bw_261822], **kwargs_261823)
    
    # Assigning a type to the variable 'bw' (line 2295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 4), 'bw', float_call_result_261824)
    
    # Assigning a Call to a Name (line 2297):
    
    # Assigning a Call to a Name (line 2297):
    
    # Call to _relative_degree(...): (line 2297)
    # Processing the call arguments (line 2297)
    # Getting the type of 'z' (line 2297)
    z_261826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 30), 'z', False)
    # Getting the type of 'p' (line 2297)
    p_261827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 33), 'p', False)
    # Processing the call keyword arguments (line 2297)
    kwargs_261828 = {}
    # Getting the type of '_relative_degree' (line 2297)
    _relative_degree_261825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 13), '_relative_degree', False)
    # Calling _relative_degree(args, kwargs) (line 2297)
    _relative_degree_call_result_261829 = invoke(stypy.reporting.localization.Localization(__file__, 2297, 13), _relative_degree_261825, *[z_261826, p_261827], **kwargs_261828)
    
    # Assigning a type to the variable 'degree' (line 2297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2297, 4), 'degree', _relative_degree_call_result_261829)
    
    # Assigning a BinOp to a Name (line 2300):
    
    # Assigning a BinOp to a Name (line 2300):
    # Getting the type of 'bw' (line 2300)
    bw_261830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 12), 'bw')
    int_261831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2300, 15), 'int')
    # Applying the binary operator 'div' (line 2300)
    result_div_261832 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 12), 'div', bw_261830, int_261831)
    
    # Getting the type of 'z' (line 2300)
    z_261833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 20), 'z')
    # Applying the binary operator 'div' (line 2300)
    result_div_261834 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 11), 'div', result_div_261832, z_261833)
    
    # Assigning a type to the variable 'z_hp' (line 2300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2300, 4), 'z_hp', result_div_261834)
    
    # Assigning a BinOp to a Name (line 2301):
    
    # Assigning a BinOp to a Name (line 2301):
    # Getting the type of 'bw' (line 2301)
    bw_261835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 12), 'bw')
    int_261836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2301, 15), 'int')
    # Applying the binary operator 'div' (line 2301)
    result_div_261837 = python_operator(stypy.reporting.localization.Localization(__file__, 2301, 12), 'div', bw_261835, int_261836)
    
    # Getting the type of 'p' (line 2301)
    p_261838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 20), 'p')
    # Applying the binary operator 'div' (line 2301)
    result_div_261839 = python_operator(stypy.reporting.localization.Localization(__file__, 2301, 11), 'div', result_div_261837, p_261838)
    
    # Assigning a type to the variable 'p_hp' (line 2301)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 4), 'p_hp', result_div_261839)
    
    # Assigning a Call to a Name (line 2304):
    
    # Assigning a Call to a Name (line 2304):
    
    # Call to astype(...): (line 2304)
    # Processing the call arguments (line 2304)
    # Getting the type of 'complex' (line 2304)
    complex_261842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 23), 'complex', False)
    # Processing the call keyword arguments (line 2304)
    kwargs_261843 = {}
    # Getting the type of 'z_hp' (line 2304)
    z_hp_261840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 11), 'z_hp', False)
    # Obtaining the member 'astype' of a type (line 2304)
    astype_261841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 11), z_hp_261840, 'astype')
    # Calling astype(args, kwargs) (line 2304)
    astype_call_result_261844 = invoke(stypy.reporting.localization.Localization(__file__, 2304, 11), astype_261841, *[complex_261842], **kwargs_261843)
    
    # Assigning a type to the variable 'z_hp' (line 2304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 4), 'z_hp', astype_call_result_261844)
    
    # Assigning a Call to a Name (line 2305):
    
    # Assigning a Call to a Name (line 2305):
    
    # Call to astype(...): (line 2305)
    # Processing the call arguments (line 2305)
    # Getting the type of 'complex' (line 2305)
    complex_261847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 23), 'complex', False)
    # Processing the call keyword arguments (line 2305)
    kwargs_261848 = {}
    # Getting the type of 'p_hp' (line 2305)
    p_hp_261845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 11), 'p_hp', False)
    # Obtaining the member 'astype' of a type (line 2305)
    astype_261846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2305, 11), p_hp_261845, 'astype')
    # Calling astype(args, kwargs) (line 2305)
    astype_call_result_261849 = invoke(stypy.reporting.localization.Localization(__file__, 2305, 11), astype_261846, *[complex_261847], **kwargs_261848)
    
    # Assigning a type to the variable 'p_hp' (line 2305)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2305, 4), 'p_hp', astype_call_result_261849)
    
    # Assigning a Call to a Name (line 2308):
    
    # Assigning a Call to a Name (line 2308):
    
    # Call to concatenate(...): (line 2308)
    # Processing the call arguments (line 2308)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2308)
    tuple_261851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2308, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2308)
    # Adding element type (line 2308)
    # Getting the type of 'z_hp' (line 2308)
    z_hp_261852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 24), 'z_hp', False)
    
    # Call to sqrt(...): (line 2308)
    # Processing the call arguments (line 2308)
    # Getting the type of 'z_hp' (line 2308)
    z_hp_261854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 36), 'z_hp', False)
    int_261855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2308, 42), 'int')
    # Applying the binary operator '**' (line 2308)
    result_pow_261856 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 36), '**', z_hp_261854, int_261855)
    
    # Getting the type of 'wo' (line 2308)
    wo_261857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 46), 'wo', False)
    int_261858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2308, 50), 'int')
    # Applying the binary operator '**' (line 2308)
    result_pow_261859 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 46), '**', wo_261857, int_261858)
    
    # Applying the binary operator '-' (line 2308)
    result_sub_261860 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 36), '-', result_pow_261856, result_pow_261859)
    
    # Processing the call keyword arguments (line 2308)
    kwargs_261861 = {}
    # Getting the type of 'sqrt' (line 2308)
    sqrt_261853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 31), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2308)
    sqrt_call_result_261862 = invoke(stypy.reporting.localization.Localization(__file__, 2308, 31), sqrt_261853, *[result_sub_261860], **kwargs_261861)
    
    # Applying the binary operator '+' (line 2308)
    result_add_261863 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 24), '+', z_hp_261852, sqrt_call_result_261862)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2308, 24), tuple_261851, result_add_261863)
    # Adding element type (line 2308)
    # Getting the type of 'z_hp' (line 2309)
    z_hp_261864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 24), 'z_hp', False)
    
    # Call to sqrt(...): (line 2309)
    # Processing the call arguments (line 2309)
    # Getting the type of 'z_hp' (line 2309)
    z_hp_261866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 36), 'z_hp', False)
    int_261867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 42), 'int')
    # Applying the binary operator '**' (line 2309)
    result_pow_261868 = python_operator(stypy.reporting.localization.Localization(__file__, 2309, 36), '**', z_hp_261866, int_261867)
    
    # Getting the type of 'wo' (line 2309)
    wo_261869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 46), 'wo', False)
    int_261870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 50), 'int')
    # Applying the binary operator '**' (line 2309)
    result_pow_261871 = python_operator(stypy.reporting.localization.Localization(__file__, 2309, 46), '**', wo_261869, int_261870)
    
    # Applying the binary operator '-' (line 2309)
    result_sub_261872 = python_operator(stypy.reporting.localization.Localization(__file__, 2309, 36), '-', result_pow_261868, result_pow_261871)
    
    # Processing the call keyword arguments (line 2309)
    kwargs_261873 = {}
    # Getting the type of 'sqrt' (line 2309)
    sqrt_261865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2309, 31), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2309)
    sqrt_call_result_261874 = invoke(stypy.reporting.localization.Localization(__file__, 2309, 31), sqrt_261865, *[result_sub_261872], **kwargs_261873)
    
    # Applying the binary operator '-' (line 2309)
    result_sub_261875 = python_operator(stypy.reporting.localization.Localization(__file__, 2309, 24), '-', z_hp_261864, sqrt_call_result_261874)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2308, 24), tuple_261851, result_sub_261875)
    
    # Processing the call keyword arguments (line 2308)
    kwargs_261876 = {}
    # Getting the type of 'concatenate' (line 2308)
    concatenate_261850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 11), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 2308)
    concatenate_call_result_261877 = invoke(stypy.reporting.localization.Localization(__file__, 2308, 11), concatenate_261850, *[tuple_261851], **kwargs_261876)
    
    # Assigning a type to the variable 'z_bs' (line 2308)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 4), 'z_bs', concatenate_call_result_261877)
    
    # Assigning a Call to a Name (line 2310):
    
    # Assigning a Call to a Name (line 2310):
    
    # Call to concatenate(...): (line 2310)
    # Processing the call arguments (line 2310)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2310)
    tuple_261879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2310, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2310)
    # Adding element type (line 2310)
    # Getting the type of 'p_hp' (line 2310)
    p_hp_261880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 24), 'p_hp', False)
    
    # Call to sqrt(...): (line 2310)
    # Processing the call arguments (line 2310)
    # Getting the type of 'p_hp' (line 2310)
    p_hp_261882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 36), 'p_hp', False)
    int_261883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2310, 42), 'int')
    # Applying the binary operator '**' (line 2310)
    result_pow_261884 = python_operator(stypy.reporting.localization.Localization(__file__, 2310, 36), '**', p_hp_261882, int_261883)
    
    # Getting the type of 'wo' (line 2310)
    wo_261885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 46), 'wo', False)
    int_261886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2310, 50), 'int')
    # Applying the binary operator '**' (line 2310)
    result_pow_261887 = python_operator(stypy.reporting.localization.Localization(__file__, 2310, 46), '**', wo_261885, int_261886)
    
    # Applying the binary operator '-' (line 2310)
    result_sub_261888 = python_operator(stypy.reporting.localization.Localization(__file__, 2310, 36), '-', result_pow_261884, result_pow_261887)
    
    # Processing the call keyword arguments (line 2310)
    kwargs_261889 = {}
    # Getting the type of 'sqrt' (line 2310)
    sqrt_261881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 31), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2310)
    sqrt_call_result_261890 = invoke(stypy.reporting.localization.Localization(__file__, 2310, 31), sqrt_261881, *[result_sub_261888], **kwargs_261889)
    
    # Applying the binary operator '+' (line 2310)
    result_add_261891 = python_operator(stypy.reporting.localization.Localization(__file__, 2310, 24), '+', p_hp_261880, sqrt_call_result_261890)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2310, 24), tuple_261879, result_add_261891)
    # Adding element type (line 2310)
    # Getting the type of 'p_hp' (line 2311)
    p_hp_261892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 24), 'p_hp', False)
    
    # Call to sqrt(...): (line 2311)
    # Processing the call arguments (line 2311)
    # Getting the type of 'p_hp' (line 2311)
    p_hp_261894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 36), 'p_hp', False)
    int_261895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2311, 42), 'int')
    # Applying the binary operator '**' (line 2311)
    result_pow_261896 = python_operator(stypy.reporting.localization.Localization(__file__, 2311, 36), '**', p_hp_261894, int_261895)
    
    # Getting the type of 'wo' (line 2311)
    wo_261897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 46), 'wo', False)
    int_261898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2311, 50), 'int')
    # Applying the binary operator '**' (line 2311)
    result_pow_261899 = python_operator(stypy.reporting.localization.Localization(__file__, 2311, 46), '**', wo_261897, int_261898)
    
    # Applying the binary operator '-' (line 2311)
    result_sub_261900 = python_operator(stypy.reporting.localization.Localization(__file__, 2311, 36), '-', result_pow_261896, result_pow_261899)
    
    # Processing the call keyword arguments (line 2311)
    kwargs_261901 = {}
    # Getting the type of 'sqrt' (line 2311)
    sqrt_261893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2311, 31), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2311)
    sqrt_call_result_261902 = invoke(stypy.reporting.localization.Localization(__file__, 2311, 31), sqrt_261893, *[result_sub_261900], **kwargs_261901)
    
    # Applying the binary operator '-' (line 2311)
    result_sub_261903 = python_operator(stypy.reporting.localization.Localization(__file__, 2311, 24), '-', p_hp_261892, sqrt_call_result_261902)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2310, 24), tuple_261879, result_sub_261903)
    
    # Processing the call keyword arguments (line 2310)
    kwargs_261904 = {}
    # Getting the type of 'concatenate' (line 2310)
    concatenate_261878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 11), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 2310)
    concatenate_call_result_261905 = invoke(stypy.reporting.localization.Localization(__file__, 2310, 11), concatenate_261878, *[tuple_261879], **kwargs_261904)
    
    # Assigning a type to the variable 'p_bs' (line 2310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2310, 4), 'p_bs', concatenate_call_result_261905)
    
    # Assigning a Call to a Name (line 2314):
    
    # Assigning a Call to a Name (line 2314):
    
    # Call to append(...): (line 2314)
    # Processing the call arguments (line 2314)
    # Getting the type of 'z_bs' (line 2314)
    z_bs_261907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 18), 'z_bs', False)
    
    complex_261908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2314, 25), 'complex')
    # Applying the 'uadd' unary operator (line 2314)
    result___pos___261909 = python_operator(stypy.reporting.localization.Localization(__file__, 2314, 24), 'uadd', complex_261908)
    
    # Getting the type of 'wo' (line 2314)
    wo_261910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 28), 'wo', False)
    # Applying the binary operator '*' (line 2314)
    result_mul_261911 = python_operator(stypy.reporting.localization.Localization(__file__, 2314, 24), '*', result___pos___261909, wo_261910)
    
    
    # Call to ones(...): (line 2314)
    # Processing the call arguments (line 2314)
    # Getting the type of 'degree' (line 2314)
    degree_261913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 38), 'degree', False)
    # Processing the call keyword arguments (line 2314)
    kwargs_261914 = {}
    # Getting the type of 'ones' (line 2314)
    ones_261912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 33), 'ones', False)
    # Calling ones(args, kwargs) (line 2314)
    ones_call_result_261915 = invoke(stypy.reporting.localization.Localization(__file__, 2314, 33), ones_261912, *[degree_261913], **kwargs_261914)
    
    # Applying the binary operator '*' (line 2314)
    result_mul_261916 = python_operator(stypy.reporting.localization.Localization(__file__, 2314, 31), '*', result_mul_261911, ones_call_result_261915)
    
    # Processing the call keyword arguments (line 2314)
    kwargs_261917 = {}
    # Getting the type of 'append' (line 2314)
    append_261906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2314, 11), 'append', False)
    # Calling append(args, kwargs) (line 2314)
    append_call_result_261918 = invoke(stypy.reporting.localization.Localization(__file__, 2314, 11), append_261906, *[z_bs_261907, result_mul_261916], **kwargs_261917)
    
    # Assigning a type to the variable 'z_bs' (line 2314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2314, 4), 'z_bs', append_call_result_261918)
    
    # Assigning a Call to a Name (line 2315):
    
    # Assigning a Call to a Name (line 2315):
    
    # Call to append(...): (line 2315)
    # Processing the call arguments (line 2315)
    # Getting the type of 'z_bs' (line 2315)
    z_bs_261920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 18), 'z_bs', False)
    complex_261921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2315, 24), 'complex')
    # Getting the type of 'wo' (line 2315)
    wo_261922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 28), 'wo', False)
    # Applying the binary operator '*' (line 2315)
    result_mul_261923 = python_operator(stypy.reporting.localization.Localization(__file__, 2315, 24), '*', complex_261921, wo_261922)
    
    
    # Call to ones(...): (line 2315)
    # Processing the call arguments (line 2315)
    # Getting the type of 'degree' (line 2315)
    degree_261925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 38), 'degree', False)
    # Processing the call keyword arguments (line 2315)
    kwargs_261926 = {}
    # Getting the type of 'ones' (line 2315)
    ones_261924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 33), 'ones', False)
    # Calling ones(args, kwargs) (line 2315)
    ones_call_result_261927 = invoke(stypy.reporting.localization.Localization(__file__, 2315, 33), ones_261924, *[degree_261925], **kwargs_261926)
    
    # Applying the binary operator '*' (line 2315)
    result_mul_261928 = python_operator(stypy.reporting.localization.Localization(__file__, 2315, 31), '*', result_mul_261923, ones_call_result_261927)
    
    # Processing the call keyword arguments (line 2315)
    kwargs_261929 = {}
    # Getting the type of 'append' (line 2315)
    append_261919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 11), 'append', False)
    # Calling append(args, kwargs) (line 2315)
    append_call_result_261930 = invoke(stypy.reporting.localization.Localization(__file__, 2315, 11), append_261919, *[z_bs_261920, result_mul_261928], **kwargs_261929)
    
    # Assigning a type to the variable 'z_bs' (line 2315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2315, 4), 'z_bs', append_call_result_261930)
    
    # Assigning a BinOp to a Name (line 2318):
    
    # Assigning a BinOp to a Name (line 2318):
    # Getting the type of 'k' (line 2318)
    k_261931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 11), 'k')
    
    # Call to real(...): (line 2318)
    # Processing the call arguments (line 2318)
    
    # Call to prod(...): (line 2318)
    # Processing the call arguments (line 2318)
    
    # Getting the type of 'z' (line 2318)
    z_261934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 26), 'z', False)
    # Applying the 'usub' unary operator (line 2318)
    result___neg___261935 = python_operator(stypy.reporting.localization.Localization(__file__, 2318, 25), 'usub', z_261934)
    
    # Processing the call keyword arguments (line 2318)
    kwargs_261936 = {}
    # Getting the type of 'prod' (line 2318)
    prod_261933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 20), 'prod', False)
    # Calling prod(args, kwargs) (line 2318)
    prod_call_result_261937 = invoke(stypy.reporting.localization.Localization(__file__, 2318, 20), prod_261933, *[result___neg___261935], **kwargs_261936)
    
    
    # Call to prod(...): (line 2318)
    # Processing the call arguments (line 2318)
    
    # Getting the type of 'p' (line 2318)
    p_261939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 37), 'p', False)
    # Applying the 'usub' unary operator (line 2318)
    result___neg___261940 = python_operator(stypy.reporting.localization.Localization(__file__, 2318, 36), 'usub', p_261939)
    
    # Processing the call keyword arguments (line 2318)
    kwargs_261941 = {}
    # Getting the type of 'prod' (line 2318)
    prod_261938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 31), 'prod', False)
    # Calling prod(args, kwargs) (line 2318)
    prod_call_result_261942 = invoke(stypy.reporting.localization.Localization(__file__, 2318, 31), prod_261938, *[result___neg___261940], **kwargs_261941)
    
    # Applying the binary operator 'div' (line 2318)
    result_div_261943 = python_operator(stypy.reporting.localization.Localization(__file__, 2318, 20), 'div', prod_call_result_261937, prod_call_result_261942)
    
    # Processing the call keyword arguments (line 2318)
    kwargs_261944 = {}
    # Getting the type of 'real' (line 2318)
    real_261932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 15), 'real', False)
    # Calling real(args, kwargs) (line 2318)
    real_call_result_261945 = invoke(stypy.reporting.localization.Localization(__file__, 2318, 15), real_261932, *[result_div_261943], **kwargs_261944)
    
    # Applying the binary operator '*' (line 2318)
    result_mul_261946 = python_operator(stypy.reporting.localization.Localization(__file__, 2318, 11), '*', k_261931, real_call_result_261945)
    
    # Assigning a type to the variable 'k_bs' (line 2318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2318, 4), 'k_bs', result_mul_261946)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2320)
    tuple_261947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2320, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2320)
    # Adding element type (line 2320)
    # Getting the type of 'z_bs' (line 2320)
    z_bs_261948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 11), 'z_bs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2320, 11), tuple_261947, z_bs_261948)
    # Adding element type (line 2320)
    # Getting the type of 'p_bs' (line 2320)
    p_bs_261949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 17), 'p_bs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2320, 11), tuple_261947, p_bs_261949)
    # Adding element type (line 2320)
    # Getting the type of 'k_bs' (line 2320)
    k_bs_261950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 23), 'k_bs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2320, 11), tuple_261947, k_bs_261950)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2320, 4), 'stypy_return_type', tuple_261947)
    
    # ################# End of '_zpklp2bs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_zpklp2bs' in the type store
    # Getting the type of 'stypy_return_type' (line 2250)
    stypy_return_type_261951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_261951)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_zpklp2bs'
    return stypy_return_type_261951

# Assigning a type to the variable '_zpklp2bs' (line 2250)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2250, 0), '_zpklp2bs', _zpklp2bs)

@norecursion
def butter(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_261952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2323, 24), 'str', 'low')
    # Getting the type of 'False' (line 2323)
    False_261953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 38), 'False')
    str_261954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2323, 52), 'str', 'ba')
    defaults = [str_261952, False_261953, str_261954]
    # Create a new context for function 'butter'
    module_type_store = module_type_store.open_function_context('butter', 2323, 0, False)
    
    # Passed parameters checking function
    butter.stypy_localization = localization
    butter.stypy_type_of_self = None
    butter.stypy_type_store = module_type_store
    butter.stypy_function_name = 'butter'
    butter.stypy_param_names_list = ['N', 'Wn', 'btype', 'analog', 'output']
    butter.stypy_varargs_param_name = None
    butter.stypy_kwargs_param_name = None
    butter.stypy_call_defaults = defaults
    butter.stypy_call_varargs = varargs
    butter.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'butter', ['N', 'Wn', 'btype', 'analog', 'output'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'butter', localization, ['N', 'Wn', 'btype', 'analog', 'output'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'butter(...)' code ##################

    str_261955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2392, (-1)), 'str', '\n    Butterworth digital and analog filter design.\n\n    Design an Nth-order digital or analog Butterworth filter and return\n    the filter coefficients.\n\n    Parameters\n    ----------\n    N : int\n        The order of the filter.\n    Wn : array_like\n        A scalar or length-2 sequence giving the critical frequencies.\n        For a Butterworth filter, this is the point at which the gain\n        drops to 1/sqrt(2) that of the passband (the "-3 dB point").\n        For digital filters, `Wn` is normalized from 0 to 1, where 1 is the\n        Nyquist frequency, pi radians/sample.  (`Wn` is thus in\n        half-cycles / sample.)\n        For analog filters, `Wn` is an angular frequency (e.g. rad/s).\n    btype : {\'lowpass\', \'highpass\', \'bandpass\', \'bandstop\'}, optional\n        The type of filter.  Default is \'lowpass\'.\n    analog : bool, optional\n        When True, return an analog filter, otherwise a digital filter is\n        returned.\n    output : {\'ba\', \'zpk\', \'sos\'}, optional\n        Type of output:  numerator/denominator (\'ba\'), pole-zero (\'zpk\'), or\n        second-order sections (\'sos\'). Default is \'ba\'.\n\n    Returns\n    -------\n    b, a : ndarray, ndarray\n        Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.\n        Only returned if ``output=\'ba\'``.\n    z, p, k : ndarray, ndarray, float\n        Zeros, poles, and system gain of the IIR filter transfer\n        function.  Only returned if ``output=\'zpk\'``.\n    sos : ndarray\n        Second-order sections representation of the IIR filter.\n        Only returned if ``output==\'sos\'``.\n\n    See Also\n    --------\n    buttord, buttap\n\n    Notes\n    -----\n    The Butterworth filter has maximally flat frequency response in the\n    passband.\n\n    The ``\'sos\'`` output parameter was added in 0.16.0.\n\n    Examples\n    --------\n    Plot the filter\'s frequency response, showing the critical points:\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> b, a = signal.butter(4, 100, \'low\', analog=True)\n    >>> w, h = signal.freqs(b, a)\n    >>> plt.semilogx(w, 20 * np.log10(abs(h)))\n    >>> plt.title(\'Butterworth filter frequency response\')\n    >>> plt.xlabel(\'Frequency [radians / second]\')\n    >>> plt.ylabel(\'Amplitude [dB]\')\n    >>> plt.margins(0, 0.1)\n    >>> plt.grid(which=\'both\', axis=\'both\')\n    >>> plt.axvline(100, color=\'green\') # cutoff frequency\n    >>> plt.show()\n\n    ')
    
    # Call to iirfilter(...): (line 2393)
    # Processing the call arguments (line 2393)
    # Getting the type of 'N' (line 2393)
    N_261957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 21), 'N', False)
    # Getting the type of 'Wn' (line 2393)
    Wn_261958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 24), 'Wn', False)
    # Processing the call keyword arguments (line 2393)
    # Getting the type of 'btype' (line 2393)
    btype_261959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 34), 'btype', False)
    keyword_261960 = btype_261959
    # Getting the type of 'analog' (line 2393)
    analog_261961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 48), 'analog', False)
    keyword_261962 = analog_261961
    # Getting the type of 'output' (line 2394)
    output_261963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 28), 'output', False)
    keyword_261964 = output_261963
    str_261965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2394, 42), 'str', 'butter')
    keyword_261966 = str_261965
    kwargs_261967 = {'output': keyword_261964, 'ftype': keyword_261966, 'analog': keyword_261962, 'btype': keyword_261960}
    # Getting the type of 'iirfilter' (line 2393)
    iirfilter_261956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 11), 'iirfilter', False)
    # Calling iirfilter(args, kwargs) (line 2393)
    iirfilter_call_result_261968 = invoke(stypy.reporting.localization.Localization(__file__, 2393, 11), iirfilter_261956, *[N_261957, Wn_261958], **kwargs_261967)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 4), 'stypy_return_type', iirfilter_call_result_261968)
    
    # ################# End of 'butter(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'butter' in the type store
    # Getting the type of 'stypy_return_type' (line 2323)
    stypy_return_type_261969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_261969)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'butter'
    return stypy_return_type_261969

# Assigning a type to the variable 'butter' (line 2323)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2323, 0), 'butter', butter)

@norecursion
def cheby1(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_261970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2397, 28), 'str', 'low')
    # Getting the type of 'False' (line 2397)
    False_261971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 42), 'False')
    str_261972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2397, 56), 'str', 'ba')
    defaults = [str_261970, False_261971, str_261972]
    # Create a new context for function 'cheby1'
    module_type_store = module_type_store.open_function_context('cheby1', 2397, 0, False)
    
    # Passed parameters checking function
    cheby1.stypy_localization = localization
    cheby1.stypy_type_of_self = None
    cheby1.stypy_type_store = module_type_store
    cheby1.stypy_function_name = 'cheby1'
    cheby1.stypy_param_names_list = ['N', 'rp', 'Wn', 'btype', 'analog', 'output']
    cheby1.stypy_varargs_param_name = None
    cheby1.stypy_kwargs_param_name = None
    cheby1.stypy_call_defaults = defaults
    cheby1.stypy_call_varargs = varargs
    cheby1.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cheby1', ['N', 'rp', 'Wn', 'btype', 'analog', 'output'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cheby1', localization, ['N', 'rp', 'Wn', 'btype', 'analog', 'output'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cheby1(...)' code ##################

    str_261973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2478, (-1)), 'str', "\n    Chebyshev type I digital and analog filter design.\n\n    Design an Nth-order digital or analog Chebyshev type I filter and\n    return the filter coefficients.\n\n    Parameters\n    ----------\n    N : int\n        The order of the filter.\n    rp : float\n        The maximum ripple allowed below unity gain in the passband.\n        Specified in decibels, as a positive number.\n    Wn : array_like\n        A scalar or length-2 sequence giving the critical frequencies.\n        For Type I filters, this is the point in the transition band at which\n        the gain first drops below -`rp`.\n        For digital filters, `Wn` is normalized from 0 to 1, where 1 is the\n        Nyquist frequency, pi radians/sample.  (`Wn` is thus in\n        half-cycles / sample.)\n        For analog filters, `Wn` is an angular frequency (e.g. rad/s).\n    btype : {'lowpass', 'highpass', 'bandpass', 'bandstop'}, optional\n        The type of filter.  Default is 'lowpass'.\n    analog : bool, optional\n        When True, return an analog filter, otherwise a digital filter is\n        returned.\n    output : {'ba', 'zpk', 'sos'}, optional\n        Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or\n        second-order sections ('sos'). Default is 'ba'.\n\n    Returns\n    -------\n    b, a : ndarray, ndarray\n        Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.\n        Only returned if ``output='ba'``.\n    z, p, k : ndarray, ndarray, float\n        Zeros, poles, and system gain of the IIR filter transfer\n        function.  Only returned if ``output='zpk'``.\n    sos : ndarray\n        Second-order sections representation of the IIR filter.\n        Only returned if ``output=='sos'``.\n\n    See Also\n    --------\n    cheb1ord, cheb1ap\n\n    Notes\n    -----\n    The Chebyshev type I filter maximizes the rate of cutoff between the\n    frequency response's passband and stopband, at the expense of ripple in\n    the passband and increased ringing in the step response.\n\n    Type I filters roll off faster than Type II (`cheby2`), but Type II\n    filters do not have any ripple in the passband.\n\n    The equiripple passband has N maxima or minima (for example, a\n    5th-order filter has 3 maxima and 2 minima).  Consequently, the DC gain is\n    unity for odd-order filters, or -rp dB for even-order filters.\n\n    The ``'sos'`` output parameter was added in 0.16.0.\n\n    Examples\n    --------\n    Plot the filter's frequency response, showing the critical points:\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> b, a = signal.cheby1(4, 5, 100, 'low', analog=True)\n    >>> w, h = signal.freqs(b, a)\n    >>> plt.semilogx(w, 20 * np.log10(abs(h)))\n    >>> plt.title('Chebyshev Type I frequency response (rp=5)')\n    >>> plt.xlabel('Frequency [radians / second]')\n    >>> plt.ylabel('Amplitude [dB]')\n    >>> plt.margins(0, 0.1)\n    >>> plt.grid(which='both', axis='both')\n    >>> plt.axvline(100, color='green') # cutoff frequency\n    >>> plt.axhline(-5, color='green') # rp\n    >>> plt.show()\n\n    ")
    
    # Call to iirfilter(...): (line 2479)
    # Processing the call arguments (line 2479)
    # Getting the type of 'N' (line 2479)
    N_261975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 21), 'N', False)
    # Getting the type of 'Wn' (line 2479)
    Wn_261976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 24), 'Wn', False)
    # Processing the call keyword arguments (line 2479)
    # Getting the type of 'rp' (line 2479)
    rp_261977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 31), 'rp', False)
    keyword_261978 = rp_261977
    # Getting the type of 'btype' (line 2479)
    btype_261979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 41), 'btype', False)
    keyword_261980 = btype_261979
    # Getting the type of 'analog' (line 2479)
    analog_261981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 55), 'analog', False)
    keyword_261982 = analog_261981
    # Getting the type of 'output' (line 2480)
    output_261983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 28), 'output', False)
    keyword_261984 = output_261983
    str_261985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2480, 42), 'str', 'cheby1')
    keyword_261986 = str_261985
    kwargs_261987 = {'output': keyword_261984, 'ftype': keyword_261986, 'rp': keyword_261978, 'analog': keyword_261982, 'btype': keyword_261980}
    # Getting the type of 'iirfilter' (line 2479)
    iirfilter_261974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 11), 'iirfilter', False)
    # Calling iirfilter(args, kwargs) (line 2479)
    iirfilter_call_result_261988 = invoke(stypy.reporting.localization.Localization(__file__, 2479, 11), iirfilter_261974, *[N_261975, Wn_261976], **kwargs_261987)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2479, 4), 'stypy_return_type', iirfilter_call_result_261988)
    
    # ################# End of 'cheby1(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cheby1' in the type store
    # Getting the type of 'stypy_return_type' (line 2397)
    stypy_return_type_261989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_261989)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cheby1'
    return stypy_return_type_261989

# Assigning a type to the variable 'cheby1' (line 2397)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2397, 0), 'cheby1', cheby1)

@norecursion
def cheby2(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_261990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 28), 'str', 'low')
    # Getting the type of 'False' (line 2483)
    False_261991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 42), 'False')
    str_261992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 56), 'str', 'ba')
    defaults = [str_261990, False_261991, str_261992]
    # Create a new context for function 'cheby2'
    module_type_store = module_type_store.open_function_context('cheby2', 2483, 0, False)
    
    # Passed parameters checking function
    cheby2.stypy_localization = localization
    cheby2.stypy_type_of_self = None
    cheby2.stypy_type_store = module_type_store
    cheby2.stypy_function_name = 'cheby2'
    cheby2.stypy_param_names_list = ['N', 'rs', 'Wn', 'btype', 'analog', 'output']
    cheby2.stypy_varargs_param_name = None
    cheby2.stypy_kwargs_param_name = None
    cheby2.stypy_call_defaults = defaults
    cheby2.stypy_call_varargs = varargs
    cheby2.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cheby2', ['N', 'rs', 'Wn', 'btype', 'analog', 'output'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cheby2', localization, ['N', 'rs', 'Wn', 'btype', 'analog', 'output'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cheby2(...)' code ##################

    str_261993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2559, (-1)), 'str', "\n    Chebyshev type II digital and analog filter design.\n\n    Design an Nth-order digital or analog Chebyshev type II filter and\n    return the filter coefficients.\n\n    Parameters\n    ----------\n    N : int\n        The order of the filter.\n    rs : float\n        The minimum attenuation required in the stop band.\n        Specified in decibels, as a positive number.\n    Wn : array_like\n        A scalar or length-2 sequence giving the critical frequencies.\n        For Type II filters, this is the point in the transition band at which\n        the gain first reaches -`rs`.\n        For digital filters, `Wn` is normalized from 0 to 1, where 1 is the\n        Nyquist frequency, pi radians/sample.  (`Wn` is thus in\n        half-cycles / sample.)\n        For analog filters, `Wn` is an angular frequency (e.g. rad/s).\n    btype : {'lowpass', 'highpass', 'bandpass', 'bandstop'}, optional\n        The type of filter.  Default is 'lowpass'.\n    analog : bool, optional\n        When True, return an analog filter, otherwise a digital filter is\n        returned.\n    output : {'ba', 'zpk', 'sos'}, optional\n        Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or\n        second-order sections ('sos'). Default is 'ba'.\n\n    Returns\n    -------\n    b, a : ndarray, ndarray\n        Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.\n        Only returned if ``output='ba'``.\n    z, p, k : ndarray, ndarray, float\n        Zeros, poles, and system gain of the IIR filter transfer\n        function.  Only returned if ``output='zpk'``.\n    sos : ndarray\n        Second-order sections representation of the IIR filter.\n        Only returned if ``output=='sos'``.\n\n    See Also\n    --------\n    cheb2ord, cheb2ap\n\n    Notes\n    -----\n    The Chebyshev type II filter maximizes the rate of cutoff between the\n    frequency response's passband and stopband, at the expense of ripple in\n    the stopband and increased ringing in the step response.\n\n    Type II filters do not roll off as fast as Type I (`cheby1`).\n\n    The ``'sos'`` output parameter was added in 0.16.0.\n\n    Examples\n    --------\n    Plot the filter's frequency response, showing the critical points:\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> b, a = signal.cheby2(4, 40, 100, 'low', analog=True)\n    >>> w, h = signal.freqs(b, a)\n    >>> plt.semilogx(w, 20 * np.log10(abs(h)))\n    >>> plt.title('Chebyshev Type II frequency response (rs=40)')\n    >>> plt.xlabel('Frequency [radians / second]')\n    >>> plt.ylabel('Amplitude [dB]')\n    >>> plt.margins(0, 0.1)\n    >>> plt.grid(which='both', axis='both')\n    >>> plt.axvline(100, color='green') # cutoff frequency\n    >>> plt.axhline(-40, color='green') # rs\n    >>> plt.show()\n\n    ")
    
    # Call to iirfilter(...): (line 2560)
    # Processing the call arguments (line 2560)
    # Getting the type of 'N' (line 2560)
    N_261995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 21), 'N', False)
    # Getting the type of 'Wn' (line 2560)
    Wn_261996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 24), 'Wn', False)
    # Processing the call keyword arguments (line 2560)
    # Getting the type of 'rs' (line 2560)
    rs_261997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 31), 'rs', False)
    keyword_261998 = rs_261997
    # Getting the type of 'btype' (line 2560)
    btype_261999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 41), 'btype', False)
    keyword_262000 = btype_261999
    # Getting the type of 'analog' (line 2560)
    analog_262001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 55), 'analog', False)
    keyword_262002 = analog_262001
    # Getting the type of 'output' (line 2561)
    output_262003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 28), 'output', False)
    keyword_262004 = output_262003
    str_262005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2561, 42), 'str', 'cheby2')
    keyword_262006 = str_262005
    kwargs_262007 = {'output': keyword_262004, 'btype': keyword_262000, 'ftype': keyword_262006, 'analog': keyword_262002, 'rs': keyword_261998}
    # Getting the type of 'iirfilter' (line 2560)
    iirfilter_261994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 11), 'iirfilter', False)
    # Calling iirfilter(args, kwargs) (line 2560)
    iirfilter_call_result_262008 = invoke(stypy.reporting.localization.Localization(__file__, 2560, 11), iirfilter_261994, *[N_261995, Wn_261996], **kwargs_262007)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2560)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2560, 4), 'stypy_return_type', iirfilter_call_result_262008)
    
    # ################# End of 'cheby2(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cheby2' in the type store
    # Getting the type of 'stypy_return_type' (line 2483)
    stypy_return_type_262009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_262009)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cheby2'
    return stypy_return_type_262009

# Assigning a type to the variable 'cheby2' (line 2483)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2483, 0), 'cheby2', cheby2)

@norecursion
def ellip(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_262010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 31), 'str', 'low')
    # Getting the type of 'False' (line 2564)
    False_262011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 45), 'False')
    str_262012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 59), 'str', 'ba')
    defaults = [str_262010, False_262011, str_262012]
    # Create a new context for function 'ellip'
    module_type_store = module_type_store.open_function_context('ellip', 2564, 0, False)
    
    # Passed parameters checking function
    ellip.stypy_localization = localization
    ellip.stypy_type_of_self = None
    ellip.stypy_type_store = module_type_store
    ellip.stypy_function_name = 'ellip'
    ellip.stypy_param_names_list = ['N', 'rp', 'rs', 'Wn', 'btype', 'analog', 'output']
    ellip.stypy_varargs_param_name = None
    ellip.stypy_kwargs_param_name = None
    ellip.stypy_call_defaults = defaults
    ellip.stypy_call_varargs = varargs
    ellip.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ellip', ['N', 'rp', 'rs', 'Wn', 'btype', 'analog', 'output'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ellip', localization, ['N', 'rp', 'rs', 'Wn', 'btype', 'analog', 'output'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ellip(...)' code ##################

    str_262013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2652, (-1)), 'str', "\n    Elliptic (Cauer) digital and analog filter design.\n\n    Design an Nth-order digital or analog elliptic filter and return\n    the filter coefficients.\n\n    Parameters\n    ----------\n    N : int\n        The order of the filter.\n    rp : float\n        The maximum ripple allowed below unity gain in the passband.\n        Specified in decibels, as a positive number.\n    rs : float\n        The minimum attenuation required in the stop band.\n        Specified in decibels, as a positive number.\n    Wn : array_like\n        A scalar or length-2 sequence giving the critical frequencies.\n        For elliptic filters, this is the point in the transition band at\n        which the gain first drops below -`rp`.\n        For digital filters, `Wn` is normalized from 0 to 1, where 1 is the\n        Nyquist frequency, pi radians/sample.  (`Wn` is thus in\n        half-cycles / sample.)\n        For analog filters, `Wn` is an angular frequency (e.g. rad/s).\n    btype : {'lowpass', 'highpass', 'bandpass', 'bandstop'}, optional\n        The type of filter.  Default is 'lowpass'.\n    analog : bool, optional\n        When True, return an analog filter, otherwise a digital filter is\n        returned.\n    output : {'ba', 'zpk', 'sos'}, optional\n        Type of output:  numerator/denominator ('ba'), pole-zero ('zpk'), or\n        second-order sections ('sos'). Default is 'ba'.\n\n    Returns\n    -------\n    b, a : ndarray, ndarray\n        Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.\n        Only returned if ``output='ba'``.\n    z, p, k : ndarray, ndarray, float\n        Zeros, poles, and system gain of the IIR filter transfer\n        function.  Only returned if ``output='zpk'``.\n    sos : ndarray\n        Second-order sections representation of the IIR filter.\n        Only returned if ``output=='sos'``.\n\n    See Also\n    --------\n    ellipord, ellipap\n\n    Notes\n    -----\n    Also known as Cauer or Zolotarev filters, the elliptical filter maximizes\n    the rate of transition between the frequency response's passband and\n    stopband, at the expense of ripple in both, and increased ringing in the\n    step response.\n\n    As `rp` approaches 0, the elliptical filter becomes a Chebyshev\n    type II filter (`cheby2`).  As `rs` approaches 0, it becomes a Chebyshev\n    type I filter (`cheby1`).  As both approach 0, it becomes a Butterworth\n    filter (`butter`).\n\n    The equiripple passband has N maxima or minima (for example, a\n    5th-order filter has 3 maxima and 2 minima).  Consequently, the DC gain is\n    unity for odd-order filters, or -rp dB for even-order filters.\n\n    The ``'sos'`` output parameter was added in 0.16.0.\n\n    Examples\n    --------\n    Plot the filter's frequency response, showing the critical points:\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> b, a = signal.ellip(4, 5, 40, 100, 'low', analog=True)\n    >>> w, h = signal.freqs(b, a)\n    >>> plt.semilogx(w, 20 * np.log10(abs(h)))\n    >>> plt.title('Elliptic filter frequency response (rp=5, rs=40)')\n    >>> plt.xlabel('Frequency [radians / second]')\n    >>> plt.ylabel('Amplitude [dB]')\n    >>> plt.margins(0, 0.1)\n    >>> plt.grid(which='both', axis='both')\n    >>> plt.axvline(100, color='green') # cutoff frequency\n    >>> plt.axhline(-40, color='green') # rs\n    >>> plt.axhline(-5, color='green') # rp\n    >>> plt.show()\n\n    ")
    
    # Call to iirfilter(...): (line 2653)
    # Processing the call arguments (line 2653)
    # Getting the type of 'N' (line 2653)
    N_262015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 21), 'N', False)
    # Getting the type of 'Wn' (line 2653)
    Wn_262016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 24), 'Wn', False)
    # Processing the call keyword arguments (line 2653)
    # Getting the type of 'rs' (line 2653)
    rs_262017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 31), 'rs', False)
    keyword_262018 = rs_262017
    # Getting the type of 'rp' (line 2653)
    rp_262019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 38), 'rp', False)
    keyword_262020 = rp_262019
    # Getting the type of 'btype' (line 2653)
    btype_262021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 48), 'btype', False)
    keyword_262022 = btype_262021
    # Getting the type of 'analog' (line 2653)
    analog_262023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 62), 'analog', False)
    keyword_262024 = analog_262023
    # Getting the type of 'output' (line 2654)
    output_262025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 28), 'output', False)
    keyword_262026 = output_262025
    str_262027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2654, 42), 'str', 'elliptic')
    keyword_262028 = str_262027
    kwargs_262029 = {'rp': keyword_262020, 'rs': keyword_262018, 'ftype': keyword_262028, 'btype': keyword_262022, 'output': keyword_262026, 'analog': keyword_262024}
    # Getting the type of 'iirfilter' (line 2653)
    iirfilter_262014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2653, 11), 'iirfilter', False)
    # Calling iirfilter(args, kwargs) (line 2653)
    iirfilter_call_result_262030 = invoke(stypy.reporting.localization.Localization(__file__, 2653, 11), iirfilter_262014, *[N_262015, Wn_262016], **kwargs_262029)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2653)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2653, 4), 'stypy_return_type', iirfilter_call_result_262030)
    
    # ################# End of 'ellip(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ellip' in the type store
    # Getting the type of 'stypy_return_type' (line 2564)
    stypy_return_type_262031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_262031)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ellip'
    return stypy_return_type_262031

# Assigning a type to the variable 'ellip' (line 2564)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2564, 0), 'ellip', ellip)

@norecursion
def bessel(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_262032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2657, 24), 'str', 'low')
    # Getting the type of 'False' (line 2657)
    False_262033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 38), 'False')
    str_262034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2657, 52), 'str', 'ba')
    str_262035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2657, 63), 'str', 'phase')
    defaults = [str_262032, False_262033, str_262034, str_262035]
    # Create a new context for function 'bessel'
    module_type_store = module_type_store.open_function_context('bessel', 2657, 0, False)
    
    # Passed parameters checking function
    bessel.stypy_localization = localization
    bessel.stypy_type_of_self = None
    bessel.stypy_type_store = module_type_store
    bessel.stypy_function_name = 'bessel'
    bessel.stypy_param_names_list = ['N', 'Wn', 'btype', 'analog', 'output', 'norm']
    bessel.stypy_varargs_param_name = None
    bessel.stypy_kwargs_param_name = None
    bessel.stypy_call_defaults = defaults
    bessel.stypy_call_varargs = varargs
    bessel.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bessel', ['N', 'Wn', 'btype', 'analog', 'output', 'norm'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bessel', localization, ['N', 'Wn', 'btype', 'analog', 'output', 'norm'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bessel(...)' code ##################

    str_262036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2807, (-1)), 'str', '\n    Bessel/Thomson digital and analog filter design.\n\n    Design an Nth-order digital or analog Bessel filter and return the\n    filter coefficients.\n\n    Parameters\n    ----------\n    N : int\n        The order of the filter.\n    Wn : array_like\n        A scalar or length-2 sequence giving the critical frequencies (defined\n        by the `norm` parameter).\n        For analog filters, `Wn` is an angular frequency (e.g. rad/s).\n        For digital filters, `Wn` is normalized from 0 to 1, where 1 is the\n        Nyquist frequency, pi radians/sample.  (`Wn` is thus in\n        half-cycles / sample.)\n    btype : {\'lowpass\', \'highpass\', \'bandpass\', \'bandstop\'}, optional\n        The type of filter.  Default is \'lowpass\'.\n    analog : bool, optional\n        When True, return an analog filter, otherwise a digital filter is\n        returned.  (See Notes.)\n    output : {\'ba\', \'zpk\', \'sos\'}, optional\n        Type of output:  numerator/denominator (\'ba\'), pole-zero (\'zpk\'), or\n        second-order sections (\'sos\'). Default is \'ba\'.\n    norm : {\'phase\', \'delay\', \'mag\'}, optional\n        Critical frequency normalization:\n\n        ``phase``\n            The filter is normalized such that the phase response reaches its\n            midpoint at angular (e.g. rad/s) frequency `Wn`.  This happens for\n            both low-pass and high-pass filters, so this is the\n            "phase-matched" case.\n\n            The magnitude response asymptotes are the same as a Butterworth\n            filter of the same order with a cutoff of `Wn`.\n\n            This is the default, and matches MATLAB\'s implementation.\n\n        ``delay``\n            The filter is normalized such that the group delay in the passband\n            is 1/`Wn` (e.g. seconds).  This is the "natural" type obtained by\n            solving Bessel polynomials.\n\n        ``mag``\n            The filter is normalized such that the gain magnitude is -3 dB at\n            angular frequency `Wn`.\n\n        .. versionadded:: 0.18.0\n\n    Returns\n    -------\n    b, a : ndarray, ndarray\n        Numerator (`b`) and denominator (`a`) polynomials of the IIR filter.\n        Only returned if ``output=\'ba\'``.\n    z, p, k : ndarray, ndarray, float\n        Zeros, poles, and system gain of the IIR filter transfer\n        function.  Only returned if ``output=\'zpk\'``.\n    sos : ndarray\n        Second-order sections representation of the IIR filter.\n        Only returned if ``output==\'sos\'``.\n\n    Notes\n    -----\n    Also known as a Thomson filter, the analog Bessel filter has maximally\n    flat group delay and maximally linear phase response, with very little\n    ringing in the step response. [1]_\n\n    The Bessel is inherently an analog filter.  This function generates digital\n    Bessel filters using the bilinear transform, which does not preserve the\n    phase response of the analog filter.  As such, it is only approximately\n    correct at frequencies below about fs/4.  To get maximally-flat group\n    delay at higher frequencies, the analog Bessel filter must be transformed\n    using phase-preserving techniques.\n\n    See `besselap` for implementation details and references.\n\n    The ``\'sos\'`` output parameter was added in 0.16.0.\n\n    Examples\n    --------\n    Plot the phase-normalized frequency response, showing the relationship\n    to the Butterworth\'s cutoff frequency (green):\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> b, a = signal.butter(4, 100, \'low\', analog=True)\n    >>> w, h = signal.freqs(b, a)\n    >>> plt.semilogx(w, 20 * np.log10(np.abs(h)), color=\'silver\', ls=\'dashed\')\n    >>> b, a = signal.bessel(4, 100, \'low\', analog=True, norm=\'phase\')\n    >>> w, h = signal.freqs(b, a)\n    >>> plt.semilogx(w, 20 * np.log10(np.abs(h)))\n    >>> plt.title(\'Bessel filter magnitude response (with Butterworth)\')\n    >>> plt.xlabel(\'Frequency [radians / second]\')\n    >>> plt.ylabel(\'Amplitude [dB]\')\n    >>> plt.margins(0, 0.1)\n    >>> plt.grid(which=\'both\', axis=\'both\')\n    >>> plt.axvline(100, color=\'green\')  # cutoff frequency\n    >>> plt.show()\n\n    and the phase midpoint:\n\n    >>> plt.figure()\n    >>> plt.semilogx(w, np.unwrap(np.angle(h)))\n    >>> plt.axvline(100, color=\'green\')  # cutoff frequency\n    >>> plt.axhline(-np.pi, color=\'red\')  # phase midpoint\n    >>> plt.title(\'Bessel filter phase response\')\n    >>> plt.xlabel(\'Frequency [radians / second]\')\n    >>> plt.ylabel(\'Phase [radians]\')\n    >>> plt.margins(0, 0.1)\n    >>> plt.grid(which=\'both\', axis=\'both\')\n    >>> plt.show()\n\n    Plot the magnitude-normalized frequency response, showing the -3 dB cutoff:\n\n    >>> b, a = signal.bessel(3, 10, \'low\', analog=True, norm=\'mag\')\n    >>> w, h = signal.freqs(b, a)\n    >>> plt.semilogx(w, 20 * np.log10(np.abs(h)))\n    >>> plt.axhline(-3, color=\'red\')  # -3 dB magnitude\n    >>> plt.axvline(10, color=\'green\')  # cutoff frequency\n    >>> plt.title(\'Magnitude-normalized Bessel filter frequency response\')\n    >>> plt.xlabel(\'Frequency [radians / second]\')\n    >>> plt.ylabel(\'Amplitude [dB]\')\n    >>> plt.margins(0, 0.1)\n    >>> plt.grid(which=\'both\', axis=\'both\')\n    >>> plt.show()\n\n    Plot the delay-normalized filter, showing the maximally-flat group delay\n    at 0.1 seconds:\n\n    >>> b, a = signal.bessel(5, 1/0.1, \'low\', analog=True, norm=\'delay\')\n    >>> w, h = signal.freqs(b, a)\n    >>> plt.figure()\n    >>> plt.semilogx(w[1:], -np.diff(np.unwrap(np.angle(h)))/np.diff(w))\n    >>> plt.axhline(0.1, color=\'red\')  # 0.1 seconds group delay\n    >>> plt.title(\'Bessel filter group delay\')\n    >>> plt.xlabel(\'Frequency [radians / second]\')\n    >>> plt.ylabel(\'Group delay [seconds]\')\n    >>> plt.margins(0, 0.1)\n    >>> plt.grid(which=\'both\', axis=\'both\')\n    >>> plt.show()\n\n    References\n    ----------\n    .. [1] Thomson, W.E., "Delay Networks having Maximally Flat Frequency\n           Characteristics", Proceedings of the Institution of Electrical\n           Engineers, Part III, November 1949, Vol. 96, No. 44, pp. 487-490.\n\n    ')
    
    # Call to iirfilter(...): (line 2808)
    # Processing the call arguments (line 2808)
    # Getting the type of 'N' (line 2808)
    N_262038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 21), 'N', False)
    # Getting the type of 'Wn' (line 2808)
    Wn_262039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 24), 'Wn', False)
    # Processing the call keyword arguments (line 2808)
    # Getting the type of 'btype' (line 2808)
    btype_262040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 34), 'btype', False)
    keyword_262041 = btype_262040
    # Getting the type of 'analog' (line 2808)
    analog_262042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 48), 'analog', False)
    keyword_262043 = analog_262042
    # Getting the type of 'output' (line 2809)
    output_262044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2809, 28), 'output', False)
    keyword_262045 = output_262044
    str_262046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2809, 42), 'str', 'bessel_')
    # Getting the type of 'norm' (line 2809)
    norm_262047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2809, 52), 'norm', False)
    # Applying the binary operator '+' (line 2809)
    result_add_262048 = python_operator(stypy.reporting.localization.Localization(__file__, 2809, 42), '+', str_262046, norm_262047)
    
    keyword_262049 = result_add_262048
    kwargs_262050 = {'output': keyword_262045, 'ftype': keyword_262049, 'analog': keyword_262043, 'btype': keyword_262041}
    # Getting the type of 'iirfilter' (line 2808)
    iirfilter_262037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 11), 'iirfilter', False)
    # Calling iirfilter(args, kwargs) (line 2808)
    iirfilter_call_result_262051 = invoke(stypy.reporting.localization.Localization(__file__, 2808, 11), iirfilter_262037, *[N_262038, Wn_262039], **kwargs_262050)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2808, 4), 'stypy_return_type', iirfilter_call_result_262051)
    
    # ################# End of 'bessel(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bessel' in the type store
    # Getting the type of 'stypy_return_type' (line 2657)
    stypy_return_type_262052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_262052)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bessel'
    return stypy_return_type_262052

# Assigning a type to the variable 'bessel' (line 2657)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2657, 0), 'bessel', bessel)

@norecursion
def maxflat(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'maxflat'
    module_type_store = module_type_store.open_function_context('maxflat', 2812, 0, False)
    
    # Passed parameters checking function
    maxflat.stypy_localization = localization
    maxflat.stypy_type_of_self = None
    maxflat.stypy_type_store = module_type_store
    maxflat.stypy_function_name = 'maxflat'
    maxflat.stypy_param_names_list = []
    maxflat.stypy_varargs_param_name = None
    maxflat.stypy_kwargs_param_name = None
    maxflat.stypy_call_defaults = defaults
    maxflat.stypy_call_varargs = varargs
    maxflat.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'maxflat', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'maxflat', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'maxflat(...)' code ##################

    pass
    
    # ################# End of 'maxflat(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'maxflat' in the type store
    # Getting the type of 'stypy_return_type' (line 2812)
    stypy_return_type_262053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2812, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_262053)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'maxflat'
    return stypy_return_type_262053

# Assigning a type to the variable 'maxflat' (line 2812)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2812, 0), 'maxflat', maxflat)

@norecursion
def yulewalk(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'yulewalk'
    module_type_store = module_type_store.open_function_context('yulewalk', 2816, 0, False)
    
    # Passed parameters checking function
    yulewalk.stypy_localization = localization
    yulewalk.stypy_type_of_self = None
    yulewalk.stypy_type_store = module_type_store
    yulewalk.stypy_function_name = 'yulewalk'
    yulewalk.stypy_param_names_list = []
    yulewalk.stypy_varargs_param_name = None
    yulewalk.stypy_kwargs_param_name = None
    yulewalk.stypy_call_defaults = defaults
    yulewalk.stypy_call_varargs = varargs
    yulewalk.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'yulewalk', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'yulewalk', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'yulewalk(...)' code ##################

    pass
    
    # ################# End of 'yulewalk(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'yulewalk' in the type store
    # Getting the type of 'stypy_return_type' (line 2816)
    stypy_return_type_262054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2816, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_262054)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'yulewalk'
    return stypy_return_type_262054

# Assigning a type to the variable 'yulewalk' (line 2816)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2816, 0), 'yulewalk', yulewalk)

@norecursion
def band_stop_obj(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'band_stop_obj'
    module_type_store = module_type_store.open_function_context('band_stop_obj', 2820, 0, False)
    
    # Passed parameters checking function
    band_stop_obj.stypy_localization = localization
    band_stop_obj.stypy_type_of_self = None
    band_stop_obj.stypy_type_store = module_type_store
    band_stop_obj.stypy_function_name = 'band_stop_obj'
    band_stop_obj.stypy_param_names_list = ['wp', 'ind', 'passb', 'stopb', 'gpass', 'gstop', 'type']
    band_stop_obj.stypy_varargs_param_name = None
    band_stop_obj.stypy_kwargs_param_name = None
    band_stop_obj.stypy_call_defaults = defaults
    band_stop_obj.stypy_call_varargs = varargs
    band_stop_obj.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'band_stop_obj', ['wp', 'ind', 'passb', 'stopb', 'gpass', 'gstop', 'type'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'band_stop_obj', localization, ['wp', 'ind', 'passb', 'stopb', 'gpass', 'gstop', 'type'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'band_stop_obj(...)' code ##################

    str_262055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2848, (-1)), 'str', "\n    Band Stop Objective Function for order minimization.\n\n    Returns the non-integer order for an analog band stop filter.\n\n    Parameters\n    ----------\n    wp : scalar\n        Edge of passband `passb`.\n    ind : int, {0, 1}\n        Index specifying which `passb` edge to vary (0 or 1).\n    passb : ndarray\n        Two element sequence of fixed passband edges.\n    stopb : ndarray\n        Two element sequence of fixed stopband edges.\n    gstop : float\n        Amount of attenuation in stopband in dB.\n    gpass : float\n        Amount of ripple in the passband in dB.\n    type : {'butter', 'cheby', 'ellip'}\n        Type of filter.\n\n    Returns\n    -------\n    n : scalar\n        Filter order (possibly non-integer).\n\n    ")
    
    # Assigning a Call to a Name (line 2849):
    
    # Assigning a Call to a Name (line 2849):
    
    # Call to copy(...): (line 2849)
    # Processing the call keyword arguments (line 2849)
    kwargs_262058 = {}
    # Getting the type of 'passb' (line 2849)
    passb_262056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 13), 'passb', False)
    # Obtaining the member 'copy' of a type (line 2849)
    copy_262057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2849, 13), passb_262056, 'copy')
    # Calling copy(args, kwargs) (line 2849)
    copy_call_result_262059 = invoke(stypy.reporting.localization.Localization(__file__, 2849, 13), copy_262057, *[], **kwargs_262058)
    
    # Assigning a type to the variable 'passbC' (line 2849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2849, 4), 'passbC', copy_call_result_262059)
    
    # Assigning a Name to a Subscript (line 2850):
    
    # Assigning a Name to a Subscript (line 2850):
    # Getting the type of 'wp' (line 2850)
    wp_262060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 18), 'wp')
    # Getting the type of 'passbC' (line 2850)
    passbC_262061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 4), 'passbC')
    # Getting the type of 'ind' (line 2850)
    ind_262062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 11), 'ind')
    # Storing an element on a container (line 2850)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2850, 4), passbC_262061, (ind_262062, wp_262060))
    
    # Assigning a BinOp to a Name (line 2851):
    
    # Assigning a BinOp to a Name (line 2851):
    # Getting the type of 'stopb' (line 2851)
    stopb_262063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 11), 'stopb')
    
    # Obtaining the type of the subscript
    int_262064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2851, 27), 'int')
    # Getting the type of 'passbC' (line 2851)
    passbC_262065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 20), 'passbC')
    # Obtaining the member '__getitem__' of a type (line 2851)
    getitem___262066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2851, 20), passbC_262065, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2851)
    subscript_call_result_262067 = invoke(stypy.reporting.localization.Localization(__file__, 2851, 20), getitem___262066, int_262064)
    
    
    # Obtaining the type of the subscript
    int_262068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2851, 39), 'int')
    # Getting the type of 'passbC' (line 2851)
    passbC_262069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 32), 'passbC')
    # Obtaining the member '__getitem__' of a type (line 2851)
    getitem___262070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2851, 32), passbC_262069, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2851)
    subscript_call_result_262071 = invoke(stypy.reporting.localization.Localization(__file__, 2851, 32), getitem___262070, int_262068)
    
    # Applying the binary operator '-' (line 2851)
    result_sub_262072 = python_operator(stypy.reporting.localization.Localization(__file__, 2851, 20), '-', subscript_call_result_262067, subscript_call_result_262071)
    
    # Applying the binary operator '*' (line 2851)
    result_mul_262073 = python_operator(stypy.reporting.localization.Localization(__file__, 2851, 11), '*', stopb_262063, result_sub_262072)
    
    # Getting the type of 'stopb' (line 2852)
    stopb_262074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 12), 'stopb')
    int_262075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2852, 21), 'int')
    # Applying the binary operator '**' (line 2852)
    result_pow_262076 = python_operator(stypy.reporting.localization.Localization(__file__, 2852, 12), '**', stopb_262074, int_262075)
    
    
    # Obtaining the type of the subscript
    int_262077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2852, 32), 'int')
    # Getting the type of 'passbC' (line 2852)
    passbC_262078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 25), 'passbC')
    # Obtaining the member '__getitem__' of a type (line 2852)
    getitem___262079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2852, 25), passbC_262078, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2852)
    subscript_call_result_262080 = invoke(stypy.reporting.localization.Localization(__file__, 2852, 25), getitem___262079, int_262077)
    
    
    # Obtaining the type of the subscript
    int_262081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2852, 44), 'int')
    # Getting the type of 'passbC' (line 2852)
    passbC_262082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 37), 'passbC')
    # Obtaining the member '__getitem__' of a type (line 2852)
    getitem___262083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2852, 37), passbC_262082, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2852)
    subscript_call_result_262084 = invoke(stypy.reporting.localization.Localization(__file__, 2852, 37), getitem___262083, int_262081)
    
    # Applying the binary operator '*' (line 2852)
    result_mul_262085 = python_operator(stypy.reporting.localization.Localization(__file__, 2852, 25), '*', subscript_call_result_262080, subscript_call_result_262084)
    
    # Applying the binary operator '-' (line 2852)
    result_sub_262086 = python_operator(stypy.reporting.localization.Localization(__file__, 2852, 12), '-', result_pow_262076, result_mul_262085)
    
    # Applying the binary operator 'div' (line 2851)
    result_div_262087 = python_operator(stypy.reporting.localization.Localization(__file__, 2851, 43), 'div', result_mul_262073, result_sub_262086)
    
    # Assigning a type to the variable 'nat' (line 2851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2851, 4), 'nat', result_div_262087)
    
    # Assigning a Call to a Name (line 2853):
    
    # Assigning a Call to a Name (line 2853):
    
    # Call to min(...): (line 2853)
    # Processing the call arguments (line 2853)
    
    # Call to abs(...): (line 2853)
    # Processing the call arguments (line 2853)
    # Getting the type of 'nat' (line 2853)
    nat_262090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 18), 'nat', False)
    # Processing the call keyword arguments (line 2853)
    kwargs_262091 = {}
    # Getting the type of 'abs' (line 2853)
    abs_262089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 14), 'abs', False)
    # Calling abs(args, kwargs) (line 2853)
    abs_call_result_262092 = invoke(stypy.reporting.localization.Localization(__file__, 2853, 14), abs_262089, *[nat_262090], **kwargs_262091)
    
    # Processing the call keyword arguments (line 2853)
    kwargs_262093 = {}
    # Getting the type of 'min' (line 2853)
    min_262088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 10), 'min', False)
    # Calling min(args, kwargs) (line 2853)
    min_call_result_262094 = invoke(stypy.reporting.localization.Localization(__file__, 2853, 10), min_262088, *[abs_call_result_262092], **kwargs_262093)
    
    # Assigning a type to the variable 'nat' (line 2853)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2853, 4), 'nat', min_call_result_262094)
    
    
    # Getting the type of 'type' (line 2855)
    type_262095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2855, 7), 'type')
    str_262096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2855, 15), 'str', 'butter')
    # Applying the binary operator '==' (line 2855)
    result_eq_262097 = python_operator(stypy.reporting.localization.Localization(__file__, 2855, 7), '==', type_262095, str_262096)
    
    # Testing the type of an if condition (line 2855)
    if_condition_262098 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2855, 4), result_eq_262097)
    # Assigning a type to the variable 'if_condition_262098' (line 2855)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2855, 4), 'if_condition_262098', if_condition_262098)
    # SSA begins for if statement (line 2855)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2856):
    
    # Assigning a BinOp to a Name (line 2856):
    int_262099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2856, 16), 'int')
    float_262100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2856, 23), 'float')
    
    # Call to abs(...): (line 2856)
    # Processing the call arguments (line 2856)
    # Getting the type of 'gstop' (line 2856)
    gstop_262102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 33), 'gstop', False)
    # Processing the call keyword arguments (line 2856)
    kwargs_262103 = {}
    # Getting the type of 'abs' (line 2856)
    abs_262101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 2856)
    abs_call_result_262104 = invoke(stypy.reporting.localization.Localization(__file__, 2856, 29), abs_262101, *[gstop_262102], **kwargs_262103)
    
    # Applying the binary operator '*' (line 2856)
    result_mul_262105 = python_operator(stypy.reporting.localization.Localization(__file__, 2856, 23), '*', float_262100, abs_call_result_262104)
    
    # Applying the binary operator '**' (line 2856)
    result_pow_262106 = python_operator(stypy.reporting.localization.Localization(__file__, 2856, 16), '**', int_262099, result_mul_262105)
    
    # Assigning a type to the variable 'GSTOP' (line 2856)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2856, 8), 'GSTOP', result_pow_262106)
    
    # Assigning a BinOp to a Name (line 2857):
    
    # Assigning a BinOp to a Name (line 2857):
    int_262107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2857, 16), 'int')
    float_262108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2857, 23), 'float')
    
    # Call to abs(...): (line 2857)
    # Processing the call arguments (line 2857)
    # Getting the type of 'gpass' (line 2857)
    gpass_262110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 33), 'gpass', False)
    # Processing the call keyword arguments (line 2857)
    kwargs_262111 = {}
    # Getting the type of 'abs' (line 2857)
    abs_262109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 2857)
    abs_call_result_262112 = invoke(stypy.reporting.localization.Localization(__file__, 2857, 29), abs_262109, *[gpass_262110], **kwargs_262111)
    
    # Applying the binary operator '*' (line 2857)
    result_mul_262113 = python_operator(stypy.reporting.localization.Localization(__file__, 2857, 23), '*', float_262108, abs_call_result_262112)
    
    # Applying the binary operator '**' (line 2857)
    result_pow_262114 = python_operator(stypy.reporting.localization.Localization(__file__, 2857, 16), '**', int_262107, result_mul_262113)
    
    # Assigning a type to the variable 'GPASS' (line 2857)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2857, 8), 'GPASS', result_pow_262114)
    
    # Assigning a BinOp to a Name (line 2858):
    
    # Assigning a BinOp to a Name (line 2858):
    
    # Call to log10(...): (line 2858)
    # Processing the call arguments (line 2858)
    # Getting the type of 'GSTOP' (line 2858)
    GSTOP_262116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2858, 20), 'GSTOP', False)
    float_262117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2858, 28), 'float')
    # Applying the binary operator '-' (line 2858)
    result_sub_262118 = python_operator(stypy.reporting.localization.Localization(__file__, 2858, 20), '-', GSTOP_262116, float_262117)
    
    # Getting the type of 'GPASS' (line 2858)
    GPASS_262119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2858, 36), 'GPASS', False)
    float_262120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2858, 44), 'float')
    # Applying the binary operator '-' (line 2858)
    result_sub_262121 = python_operator(stypy.reporting.localization.Localization(__file__, 2858, 36), '-', GPASS_262119, float_262120)
    
    # Applying the binary operator 'div' (line 2858)
    result_div_262122 = python_operator(stypy.reporting.localization.Localization(__file__, 2858, 19), 'div', result_sub_262118, result_sub_262121)
    
    # Processing the call keyword arguments (line 2858)
    kwargs_262123 = {}
    # Getting the type of 'log10' (line 2858)
    log10_262115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2858, 13), 'log10', False)
    # Calling log10(args, kwargs) (line 2858)
    log10_call_result_262124 = invoke(stypy.reporting.localization.Localization(__file__, 2858, 13), log10_262115, *[result_div_262122], **kwargs_262123)
    
    int_262125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2858, 53), 'int')
    
    # Call to log10(...): (line 2858)
    # Processing the call arguments (line 2858)
    # Getting the type of 'nat' (line 2858)
    nat_262127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2858, 63), 'nat', False)
    # Processing the call keyword arguments (line 2858)
    kwargs_262128 = {}
    # Getting the type of 'log10' (line 2858)
    log10_262126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2858, 57), 'log10', False)
    # Calling log10(args, kwargs) (line 2858)
    log10_call_result_262129 = invoke(stypy.reporting.localization.Localization(__file__, 2858, 57), log10_262126, *[nat_262127], **kwargs_262128)
    
    # Applying the binary operator '*' (line 2858)
    result_mul_262130 = python_operator(stypy.reporting.localization.Localization(__file__, 2858, 53), '*', int_262125, log10_call_result_262129)
    
    # Applying the binary operator 'div' (line 2858)
    result_div_262131 = python_operator(stypy.reporting.localization.Localization(__file__, 2858, 13), 'div', log10_call_result_262124, result_mul_262130)
    
    # Assigning a type to the variable 'n' (line 2858)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2858, 8), 'n', result_div_262131)
    # SSA branch for the else part of an if statement (line 2855)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'type' (line 2859)
    type_262132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2859, 9), 'type')
    str_262133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2859, 17), 'str', 'cheby')
    # Applying the binary operator '==' (line 2859)
    result_eq_262134 = python_operator(stypy.reporting.localization.Localization(__file__, 2859, 9), '==', type_262132, str_262133)
    
    # Testing the type of an if condition (line 2859)
    if_condition_262135 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2859, 9), result_eq_262134)
    # Assigning a type to the variable 'if_condition_262135' (line 2859)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2859, 9), 'if_condition_262135', if_condition_262135)
    # SSA begins for if statement (line 2859)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2860):
    
    # Assigning a BinOp to a Name (line 2860):
    int_262136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2860, 16), 'int')
    float_262137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2860, 23), 'float')
    
    # Call to abs(...): (line 2860)
    # Processing the call arguments (line 2860)
    # Getting the type of 'gstop' (line 2860)
    gstop_262139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2860, 33), 'gstop', False)
    # Processing the call keyword arguments (line 2860)
    kwargs_262140 = {}
    # Getting the type of 'abs' (line 2860)
    abs_262138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2860, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 2860)
    abs_call_result_262141 = invoke(stypy.reporting.localization.Localization(__file__, 2860, 29), abs_262138, *[gstop_262139], **kwargs_262140)
    
    # Applying the binary operator '*' (line 2860)
    result_mul_262142 = python_operator(stypy.reporting.localization.Localization(__file__, 2860, 23), '*', float_262137, abs_call_result_262141)
    
    # Applying the binary operator '**' (line 2860)
    result_pow_262143 = python_operator(stypy.reporting.localization.Localization(__file__, 2860, 16), '**', int_262136, result_mul_262142)
    
    # Assigning a type to the variable 'GSTOP' (line 2860)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2860, 8), 'GSTOP', result_pow_262143)
    
    # Assigning a BinOp to a Name (line 2861):
    
    # Assigning a BinOp to a Name (line 2861):
    int_262144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2861, 16), 'int')
    float_262145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2861, 23), 'float')
    
    # Call to abs(...): (line 2861)
    # Processing the call arguments (line 2861)
    # Getting the type of 'gpass' (line 2861)
    gpass_262147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 33), 'gpass', False)
    # Processing the call keyword arguments (line 2861)
    kwargs_262148 = {}
    # Getting the type of 'abs' (line 2861)
    abs_262146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 2861)
    abs_call_result_262149 = invoke(stypy.reporting.localization.Localization(__file__, 2861, 29), abs_262146, *[gpass_262147], **kwargs_262148)
    
    # Applying the binary operator '*' (line 2861)
    result_mul_262150 = python_operator(stypy.reporting.localization.Localization(__file__, 2861, 23), '*', float_262145, abs_call_result_262149)
    
    # Applying the binary operator '**' (line 2861)
    result_pow_262151 = python_operator(stypy.reporting.localization.Localization(__file__, 2861, 16), '**', int_262144, result_mul_262150)
    
    # Assigning a type to the variable 'GPASS' (line 2861)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2861, 8), 'GPASS', result_pow_262151)
    
    # Assigning a BinOp to a Name (line 2862):
    
    # Assigning a BinOp to a Name (line 2862):
    
    # Call to arccosh(...): (line 2862)
    # Processing the call arguments (line 2862)
    
    # Call to sqrt(...): (line 2862)
    # Processing the call arguments (line 2862)
    # Getting the type of 'GSTOP' (line 2862)
    GSTOP_262154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 26), 'GSTOP', False)
    float_262155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2862, 34), 'float')
    # Applying the binary operator '-' (line 2862)
    result_sub_262156 = python_operator(stypy.reporting.localization.Localization(__file__, 2862, 26), '-', GSTOP_262154, float_262155)
    
    # Getting the type of 'GPASS' (line 2862)
    GPASS_262157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 42), 'GPASS', False)
    float_262158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2862, 50), 'float')
    # Applying the binary operator '-' (line 2862)
    result_sub_262159 = python_operator(stypy.reporting.localization.Localization(__file__, 2862, 42), '-', GPASS_262157, float_262158)
    
    # Applying the binary operator 'div' (line 2862)
    result_div_262160 = python_operator(stypy.reporting.localization.Localization(__file__, 2862, 25), 'div', result_sub_262156, result_sub_262159)
    
    # Processing the call keyword arguments (line 2862)
    kwargs_262161 = {}
    # Getting the type of 'sqrt' (line 2862)
    sqrt_262153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 20), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2862)
    sqrt_call_result_262162 = invoke(stypy.reporting.localization.Localization(__file__, 2862, 20), sqrt_262153, *[result_div_262160], **kwargs_262161)
    
    # Processing the call keyword arguments (line 2862)
    kwargs_262163 = {}
    # Getting the type of 'arccosh' (line 2862)
    arccosh_262152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 12), 'arccosh', False)
    # Calling arccosh(args, kwargs) (line 2862)
    arccosh_call_result_262164 = invoke(stypy.reporting.localization.Localization(__file__, 2862, 12), arccosh_262152, *[sqrt_call_result_262162], **kwargs_262163)
    
    
    # Call to arccosh(...): (line 2862)
    # Processing the call arguments (line 2862)
    # Getting the type of 'nat' (line 2862)
    nat_262166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 67), 'nat', False)
    # Processing the call keyword arguments (line 2862)
    kwargs_262167 = {}
    # Getting the type of 'arccosh' (line 2862)
    arccosh_262165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 59), 'arccosh', False)
    # Calling arccosh(args, kwargs) (line 2862)
    arccosh_call_result_262168 = invoke(stypy.reporting.localization.Localization(__file__, 2862, 59), arccosh_262165, *[nat_262166], **kwargs_262167)
    
    # Applying the binary operator 'div' (line 2862)
    result_div_262169 = python_operator(stypy.reporting.localization.Localization(__file__, 2862, 12), 'div', arccosh_call_result_262164, arccosh_call_result_262168)
    
    # Assigning a type to the variable 'n' (line 2862)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2862, 8), 'n', result_div_262169)
    # SSA branch for the else part of an if statement (line 2859)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'type' (line 2863)
    type_262170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2863, 9), 'type')
    str_262171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2863, 17), 'str', 'ellip')
    # Applying the binary operator '==' (line 2863)
    result_eq_262172 = python_operator(stypy.reporting.localization.Localization(__file__, 2863, 9), '==', type_262170, str_262171)
    
    # Testing the type of an if condition (line 2863)
    if_condition_262173 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2863, 9), result_eq_262172)
    # Assigning a type to the variable 'if_condition_262173' (line 2863)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2863, 9), 'if_condition_262173', if_condition_262173)
    # SSA begins for if statement (line 2863)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2864):
    
    # Assigning a BinOp to a Name (line 2864):
    int_262174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2864, 16), 'int')
    float_262175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2864, 23), 'float')
    # Getting the type of 'gstop' (line 2864)
    gstop_262176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2864, 29), 'gstop')
    # Applying the binary operator '*' (line 2864)
    result_mul_262177 = python_operator(stypy.reporting.localization.Localization(__file__, 2864, 23), '*', float_262175, gstop_262176)
    
    # Applying the binary operator '**' (line 2864)
    result_pow_262178 = python_operator(stypy.reporting.localization.Localization(__file__, 2864, 16), '**', int_262174, result_mul_262177)
    
    # Assigning a type to the variable 'GSTOP' (line 2864)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2864, 8), 'GSTOP', result_pow_262178)
    
    # Assigning a BinOp to a Name (line 2865):
    
    # Assigning a BinOp to a Name (line 2865):
    int_262179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2865, 16), 'int')
    float_262180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2865, 23), 'float')
    # Getting the type of 'gpass' (line 2865)
    gpass_262181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2865, 29), 'gpass')
    # Applying the binary operator '*' (line 2865)
    result_mul_262182 = python_operator(stypy.reporting.localization.Localization(__file__, 2865, 23), '*', float_262180, gpass_262181)
    
    # Applying the binary operator '**' (line 2865)
    result_pow_262183 = python_operator(stypy.reporting.localization.Localization(__file__, 2865, 16), '**', int_262179, result_mul_262182)
    
    # Assigning a type to the variable 'GPASS' (line 2865)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2865, 8), 'GPASS', result_pow_262183)
    
    # Assigning a Call to a Name (line 2866):
    
    # Assigning a Call to a Name (line 2866):
    
    # Call to sqrt(...): (line 2866)
    # Processing the call arguments (line 2866)
    # Getting the type of 'GPASS' (line 2866)
    GPASS_262185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2866, 21), 'GPASS', False)
    float_262186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2866, 29), 'float')
    # Applying the binary operator '-' (line 2866)
    result_sub_262187 = python_operator(stypy.reporting.localization.Localization(__file__, 2866, 21), '-', GPASS_262185, float_262186)
    
    # Getting the type of 'GSTOP' (line 2866)
    GSTOP_262188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2866, 37), 'GSTOP', False)
    float_262189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2866, 45), 'float')
    # Applying the binary operator '-' (line 2866)
    result_sub_262190 = python_operator(stypy.reporting.localization.Localization(__file__, 2866, 37), '-', GSTOP_262188, float_262189)
    
    # Applying the binary operator 'div' (line 2866)
    result_div_262191 = python_operator(stypy.reporting.localization.Localization(__file__, 2866, 20), 'div', result_sub_262187, result_sub_262190)
    
    # Processing the call keyword arguments (line 2866)
    kwargs_262192 = {}
    # Getting the type of 'sqrt' (line 2866)
    sqrt_262184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2866, 15), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2866)
    sqrt_call_result_262193 = invoke(stypy.reporting.localization.Localization(__file__, 2866, 15), sqrt_262184, *[result_div_262191], **kwargs_262192)
    
    # Assigning a type to the variable 'arg1' (line 2866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2866, 8), 'arg1', sqrt_call_result_262193)
    
    # Assigning a BinOp to a Name (line 2867):
    
    # Assigning a BinOp to a Name (line 2867):
    float_262194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2867, 15), 'float')
    # Getting the type of 'nat' (line 2867)
    nat_262195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2867, 21), 'nat')
    # Applying the binary operator 'div' (line 2867)
    result_div_262196 = python_operator(stypy.reporting.localization.Localization(__file__, 2867, 15), 'div', float_262194, nat_262195)
    
    # Assigning a type to the variable 'arg0' (line 2867)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2867, 8), 'arg0', result_div_262196)
    
    # Assigning a Call to a Name (line 2868):
    
    # Assigning a Call to a Name (line 2868):
    
    # Call to ellipk(...): (line 2868)
    # Processing the call arguments (line 2868)
    
    # Obtaining an instance of the builtin type 'list' (line 2868)
    list_262199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2868, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2868)
    # Adding element type (line 2868)
    # Getting the type of 'arg0' (line 2868)
    arg0_262200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2868, 29), 'arg0', False)
    int_262201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2868, 37), 'int')
    # Applying the binary operator '**' (line 2868)
    result_pow_262202 = python_operator(stypy.reporting.localization.Localization(__file__, 2868, 29), '**', arg0_262200, int_262201)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2868, 28), list_262199, result_pow_262202)
    # Adding element type (line 2868)
    int_262203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2868, 40), 'int')
    # Getting the type of 'arg0' (line 2868)
    arg0_262204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2868, 44), 'arg0', False)
    int_262205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2868, 52), 'int')
    # Applying the binary operator '**' (line 2868)
    result_pow_262206 = python_operator(stypy.reporting.localization.Localization(__file__, 2868, 44), '**', arg0_262204, int_262205)
    
    # Applying the binary operator '-' (line 2868)
    result_sub_262207 = python_operator(stypy.reporting.localization.Localization(__file__, 2868, 40), '-', int_262203, result_pow_262206)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2868, 28), list_262199, result_sub_262207)
    
    # Processing the call keyword arguments (line 2868)
    kwargs_262208 = {}
    # Getting the type of 'special' (line 2868)
    special_262197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2868, 13), 'special', False)
    # Obtaining the member 'ellipk' of a type (line 2868)
    ellipk_262198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2868, 13), special_262197, 'ellipk')
    # Calling ellipk(args, kwargs) (line 2868)
    ellipk_call_result_262209 = invoke(stypy.reporting.localization.Localization(__file__, 2868, 13), ellipk_262198, *[list_262199], **kwargs_262208)
    
    # Assigning a type to the variable 'd0' (line 2868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2868, 8), 'd0', ellipk_call_result_262209)
    
    # Assigning a Call to a Name (line 2869):
    
    # Assigning a Call to a Name (line 2869):
    
    # Call to ellipk(...): (line 2869)
    # Processing the call arguments (line 2869)
    
    # Obtaining an instance of the builtin type 'list' (line 2869)
    list_262212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2869, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2869)
    # Adding element type (line 2869)
    # Getting the type of 'arg1' (line 2869)
    arg1_262213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2869, 29), 'arg1', False)
    int_262214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2869, 37), 'int')
    # Applying the binary operator '**' (line 2869)
    result_pow_262215 = python_operator(stypy.reporting.localization.Localization(__file__, 2869, 29), '**', arg1_262213, int_262214)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2869, 28), list_262212, result_pow_262215)
    # Adding element type (line 2869)
    int_262216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2869, 40), 'int')
    # Getting the type of 'arg1' (line 2869)
    arg1_262217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2869, 44), 'arg1', False)
    int_262218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2869, 52), 'int')
    # Applying the binary operator '**' (line 2869)
    result_pow_262219 = python_operator(stypy.reporting.localization.Localization(__file__, 2869, 44), '**', arg1_262217, int_262218)
    
    # Applying the binary operator '-' (line 2869)
    result_sub_262220 = python_operator(stypy.reporting.localization.Localization(__file__, 2869, 40), '-', int_262216, result_pow_262219)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2869, 28), list_262212, result_sub_262220)
    
    # Processing the call keyword arguments (line 2869)
    kwargs_262221 = {}
    # Getting the type of 'special' (line 2869)
    special_262210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2869, 13), 'special', False)
    # Obtaining the member 'ellipk' of a type (line 2869)
    ellipk_262211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2869, 13), special_262210, 'ellipk')
    # Calling ellipk(args, kwargs) (line 2869)
    ellipk_call_result_262222 = invoke(stypy.reporting.localization.Localization(__file__, 2869, 13), ellipk_262211, *[list_262212], **kwargs_262221)
    
    # Assigning a type to the variable 'd1' (line 2869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2869, 8), 'd1', ellipk_call_result_262222)
    
    # Assigning a BinOp to a Name (line 2870):
    
    # Assigning a BinOp to a Name (line 2870):
    
    # Obtaining the type of the subscript
    int_262223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2870, 16), 'int')
    # Getting the type of 'd0' (line 2870)
    d0_262224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2870, 13), 'd0')
    # Obtaining the member '__getitem__' of a type (line 2870)
    getitem___262225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2870, 13), d0_262224, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2870)
    subscript_call_result_262226 = invoke(stypy.reporting.localization.Localization(__file__, 2870, 13), getitem___262225, int_262223)
    
    
    # Obtaining the type of the subscript
    int_262227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2870, 24), 'int')
    # Getting the type of 'd1' (line 2870)
    d1_262228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2870, 21), 'd1')
    # Obtaining the member '__getitem__' of a type (line 2870)
    getitem___262229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2870, 21), d1_262228, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2870)
    subscript_call_result_262230 = invoke(stypy.reporting.localization.Localization(__file__, 2870, 21), getitem___262229, int_262227)
    
    # Applying the binary operator '*' (line 2870)
    result_mul_262231 = python_operator(stypy.reporting.localization.Localization(__file__, 2870, 13), '*', subscript_call_result_262226, subscript_call_result_262230)
    
    
    # Obtaining the type of the subscript
    int_262232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2870, 33), 'int')
    # Getting the type of 'd0' (line 2870)
    d0_262233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2870, 30), 'd0')
    # Obtaining the member '__getitem__' of a type (line 2870)
    getitem___262234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2870, 30), d0_262233, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2870)
    subscript_call_result_262235 = invoke(stypy.reporting.localization.Localization(__file__, 2870, 30), getitem___262234, int_262232)
    
    
    # Obtaining the type of the subscript
    int_262236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2870, 41), 'int')
    # Getting the type of 'd1' (line 2870)
    d1_262237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2870, 38), 'd1')
    # Obtaining the member '__getitem__' of a type (line 2870)
    getitem___262238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2870, 38), d1_262237, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2870)
    subscript_call_result_262239 = invoke(stypy.reporting.localization.Localization(__file__, 2870, 38), getitem___262238, int_262236)
    
    # Applying the binary operator '*' (line 2870)
    result_mul_262240 = python_operator(stypy.reporting.localization.Localization(__file__, 2870, 30), '*', subscript_call_result_262235, subscript_call_result_262239)
    
    # Applying the binary operator 'div' (line 2870)
    result_div_262241 = python_operator(stypy.reporting.localization.Localization(__file__, 2870, 27), 'div', result_mul_262231, result_mul_262240)
    
    # Assigning a type to the variable 'n' (line 2870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2870, 8), 'n', result_div_262241)
    # SSA branch for the else part of an if statement (line 2863)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 2872)
    # Processing the call arguments (line 2872)
    str_262243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2872, 25), 'str', 'Incorrect type: %s')
    # Getting the type of 'type' (line 2872)
    type_262244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 48), 'type', False)
    # Applying the binary operator '%' (line 2872)
    result_mod_262245 = python_operator(stypy.reporting.localization.Localization(__file__, 2872, 25), '%', str_262243, type_262244)
    
    # Processing the call keyword arguments (line 2872)
    kwargs_262246 = {}
    # Getting the type of 'ValueError' (line 2872)
    ValueError_262242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2872)
    ValueError_call_result_262247 = invoke(stypy.reporting.localization.Localization(__file__, 2872, 14), ValueError_262242, *[result_mod_262245], **kwargs_262246)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2872, 8), ValueError_call_result_262247, 'raise parameter', BaseException)
    # SSA join for if statement (line 2863)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2859)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2855)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'n' (line 2873)
    n_262248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 11), 'n')
    # Assigning a type to the variable 'stypy_return_type' (line 2873)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2873, 4), 'stypy_return_type', n_262248)
    
    # ################# End of 'band_stop_obj(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'band_stop_obj' in the type store
    # Getting the type of 'stypy_return_type' (line 2820)
    stypy_return_type_262249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_262249)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'band_stop_obj'
    return stypy_return_type_262249

# Assigning a type to the variable 'band_stop_obj' (line 2820)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2820, 0), 'band_stop_obj', band_stop_obj)

@norecursion
def buttord(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 2876)
    False_262250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2876, 41), 'False')
    defaults = [False_262250]
    # Create a new context for function 'buttord'
    module_type_store = module_type_store.open_function_context('buttord', 2876, 0, False)
    
    # Passed parameters checking function
    buttord.stypy_localization = localization
    buttord.stypy_type_of_self = None
    buttord.stypy_type_store = module_type_store
    buttord.stypy_function_name = 'buttord'
    buttord.stypy_param_names_list = ['wp', 'ws', 'gpass', 'gstop', 'analog']
    buttord.stypy_varargs_param_name = None
    buttord.stypy_kwargs_param_name = None
    buttord.stypy_call_defaults = defaults
    buttord.stypy_call_varargs = varargs
    buttord.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'buttord', ['wp', 'ws', 'gpass', 'gstop', 'analog'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'buttord', localization, ['wp', 'ws', 'gpass', 'gstop', 'analog'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'buttord(...)' code ##################

    str_262251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2946, (-1)), 'str', 'Butterworth filter order selection.\n\n    Return the order of the lowest order digital or analog Butterworth filter\n    that loses no more than `gpass` dB in the passband and has at least\n    `gstop` dB attenuation in the stopband.\n\n    Parameters\n    ----------\n    wp, ws : float\n        Passband and stopband edge frequencies.\n        For digital filters, these are normalized from 0 to 1, where 1 is the\n        Nyquist frequency, pi radians/sample.  (`wp` and `ws` are thus in\n        half-cycles / sample.)  For example:\n\n            - Lowpass:   wp = 0.2,          ws = 0.3\n            - Highpass:  wp = 0.3,          ws = 0.2\n            - Bandpass:  wp = [0.2, 0.5],   ws = [0.1, 0.6]\n            - Bandstop:  wp = [0.1, 0.6],   ws = [0.2, 0.5]\n\n        For analog filters, `wp` and `ws` are angular frequencies (e.g. rad/s).\n\n    gpass : float\n        The maximum loss in the passband (dB).\n    gstop : float\n        The minimum attenuation in the stopband (dB).\n    analog : bool, optional\n        When True, return an analog filter, otherwise a digital filter is\n        returned.\n\n    Returns\n    -------\n    ord : int\n        The lowest order for a Butterworth filter which meets specs.\n    wn : ndarray or float\n        The Butterworth natural frequency (i.e. the "3dB frequency").  Should\n        be used with `butter` to give filter results.\n\n    See Also\n    --------\n    butter : Filter design using order and critical points\n    cheb1ord : Find order and critical points from passband and stopband spec\n    cheb2ord, ellipord\n    iirfilter : General filter design using order and critical frequencies\n    iirdesign : General filter design using passband and stopband spec\n\n    Examples\n    --------\n    Design an analog bandpass filter with passband within 3 dB from 20 to\n    50 rad/s, while rejecting at least -40 dB below 14 and above 60 rad/s.\n    Plot its frequency response, showing the passband and stopband\n    constraints in gray.\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> N, Wn = signal.buttord([20, 50], [14, 60], 3, 40, True)\n    >>> b, a = signal.butter(N, Wn, \'band\', True)\n    >>> w, h = signal.freqs(b, a, np.logspace(1, 2, 500))\n    >>> plt.semilogx(w, 20 * np.log10(abs(h)))\n    >>> plt.title(\'Butterworth bandpass filter fit to constraints\')\n    >>> plt.xlabel(\'Frequency [radians / second]\')\n    >>> plt.ylabel(\'Amplitude [dB]\')\n    >>> plt.grid(which=\'both\', axis=\'both\')\n    >>> plt.fill([1,  14,  14,   1], [-40, -40, 99, 99], \'0.9\', lw=0) # stop\n    >>> plt.fill([20, 20,  50,  50], [-99, -3, -3, -99], \'0.9\', lw=0) # pass\n    >>> plt.fill([60, 60, 1e9, 1e9], [99, -40, -40, 99], \'0.9\', lw=0) # stop\n    >>> plt.axis([10, 100, -60, 3])\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Name (line 2947):
    
    # Assigning a Call to a Name (line 2947):
    
    # Call to atleast_1d(...): (line 2947)
    # Processing the call arguments (line 2947)
    # Getting the type of 'wp' (line 2947)
    wp_262253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 20), 'wp', False)
    # Processing the call keyword arguments (line 2947)
    kwargs_262254 = {}
    # Getting the type of 'atleast_1d' (line 2947)
    atleast_1d_262252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 9), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2947)
    atleast_1d_call_result_262255 = invoke(stypy.reporting.localization.Localization(__file__, 2947, 9), atleast_1d_262252, *[wp_262253], **kwargs_262254)
    
    # Assigning a type to the variable 'wp' (line 2947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 4), 'wp', atleast_1d_call_result_262255)
    
    # Assigning a Call to a Name (line 2948):
    
    # Assigning a Call to a Name (line 2948):
    
    # Call to atleast_1d(...): (line 2948)
    # Processing the call arguments (line 2948)
    # Getting the type of 'ws' (line 2948)
    ws_262257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 20), 'ws', False)
    # Processing the call keyword arguments (line 2948)
    kwargs_262258 = {}
    # Getting the type of 'atleast_1d' (line 2948)
    atleast_1d_262256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 9), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2948)
    atleast_1d_call_result_262259 = invoke(stypy.reporting.localization.Localization(__file__, 2948, 9), atleast_1d_262256, *[ws_262257], **kwargs_262258)
    
    # Assigning a type to the variable 'ws' (line 2948)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2948, 4), 'ws', atleast_1d_call_result_262259)
    
    # Assigning a BinOp to a Name (line 2949):
    
    # Assigning a BinOp to a Name (line 2949):
    int_262260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2949, 18), 'int')
    
    # Call to len(...): (line 2949)
    # Processing the call arguments (line 2949)
    # Getting the type of 'wp' (line 2949)
    wp_262262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 27), 'wp', False)
    # Processing the call keyword arguments (line 2949)
    kwargs_262263 = {}
    # Getting the type of 'len' (line 2949)
    len_262261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2949, 23), 'len', False)
    # Calling len(args, kwargs) (line 2949)
    len_call_result_262264 = invoke(stypy.reporting.localization.Localization(__file__, 2949, 23), len_262261, *[wp_262262], **kwargs_262263)
    
    int_262265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2949, 33), 'int')
    # Applying the binary operator '-' (line 2949)
    result_sub_262266 = python_operator(stypy.reporting.localization.Localization(__file__, 2949, 23), '-', len_call_result_262264, int_262265)
    
    # Applying the binary operator '*' (line 2949)
    result_mul_262267 = python_operator(stypy.reporting.localization.Localization(__file__, 2949, 18), '*', int_262260, result_sub_262266)
    
    # Assigning a type to the variable 'filter_type' (line 2949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2949, 4), 'filter_type', result_mul_262267)
    
    # Getting the type of 'filter_type' (line 2950)
    filter_type_262268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 4), 'filter_type')
    int_262269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2950, 19), 'int')
    # Applying the binary operator '+=' (line 2950)
    result_iadd_262270 = python_operator(stypy.reporting.localization.Localization(__file__, 2950, 4), '+=', filter_type_262268, int_262269)
    # Assigning a type to the variable 'filter_type' (line 2950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2950, 4), 'filter_type', result_iadd_262270)
    
    
    
    
    # Obtaining the type of the subscript
    int_262271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2951, 10), 'int')
    # Getting the type of 'wp' (line 2951)
    wp_262272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 7), 'wp')
    # Obtaining the member '__getitem__' of a type (line 2951)
    getitem___262273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2951, 7), wp_262272, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2951)
    subscript_call_result_262274 = invoke(stypy.reporting.localization.Localization(__file__, 2951, 7), getitem___262273, int_262271)
    
    
    # Obtaining the type of the subscript
    int_262275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2951, 19), 'int')
    # Getting the type of 'ws' (line 2951)
    ws_262276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 16), 'ws')
    # Obtaining the member '__getitem__' of a type (line 2951)
    getitem___262277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2951, 16), ws_262276, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2951)
    subscript_call_result_262278 = invoke(stypy.reporting.localization.Localization(__file__, 2951, 16), getitem___262277, int_262275)
    
    # Applying the binary operator '>=' (line 2951)
    result_ge_262279 = python_operator(stypy.reporting.localization.Localization(__file__, 2951, 7), '>=', subscript_call_result_262274, subscript_call_result_262278)
    
    # Testing the type of an if condition (line 2951)
    if_condition_262280 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2951, 4), result_ge_262279)
    # Assigning a type to the variable 'if_condition_262280' (line 2951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2951, 4), 'if_condition_262280', if_condition_262280)
    # SSA begins for if statement (line 2951)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'filter_type' (line 2952)
    filter_type_262281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2952, 8), 'filter_type')
    int_262282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2952, 23), 'int')
    # Applying the binary operator '+=' (line 2952)
    result_iadd_262283 = python_operator(stypy.reporting.localization.Localization(__file__, 2952, 8), '+=', filter_type_262281, int_262282)
    # Assigning a type to the variable 'filter_type' (line 2952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2952, 8), 'filter_type', result_iadd_262283)
    
    # SSA join for if statement (line 2951)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'analog' (line 2955)
    analog_262284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2955, 11), 'analog')
    # Applying the 'not' unary operator (line 2955)
    result_not__262285 = python_operator(stypy.reporting.localization.Localization(__file__, 2955, 7), 'not', analog_262284)
    
    # Testing the type of an if condition (line 2955)
    if_condition_262286 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2955, 4), result_not__262285)
    # Assigning a type to the variable 'if_condition_262286' (line 2955)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2955, 4), 'if_condition_262286', if_condition_262286)
    # SSA begins for if statement (line 2955)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2956):
    
    # Assigning a Call to a Name (line 2956):
    
    # Call to tan(...): (line 2956)
    # Processing the call arguments (line 2956)
    # Getting the type of 'pi' (line 2956)
    pi_262288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 20), 'pi', False)
    # Getting the type of 'wp' (line 2956)
    wp_262289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 25), 'wp', False)
    # Applying the binary operator '*' (line 2956)
    result_mul_262290 = python_operator(stypy.reporting.localization.Localization(__file__, 2956, 20), '*', pi_262288, wp_262289)
    
    float_262291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 30), 'float')
    # Applying the binary operator 'div' (line 2956)
    result_div_262292 = python_operator(stypy.reporting.localization.Localization(__file__, 2956, 28), 'div', result_mul_262290, float_262291)
    
    # Processing the call keyword arguments (line 2956)
    kwargs_262293 = {}
    # Getting the type of 'tan' (line 2956)
    tan_262287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 16), 'tan', False)
    # Calling tan(args, kwargs) (line 2956)
    tan_call_result_262294 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 16), tan_262287, *[result_div_262292], **kwargs_262293)
    
    # Assigning a type to the variable 'passb' (line 2956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2956, 8), 'passb', tan_call_result_262294)
    
    # Assigning a Call to a Name (line 2957):
    
    # Assigning a Call to a Name (line 2957):
    
    # Call to tan(...): (line 2957)
    # Processing the call arguments (line 2957)
    # Getting the type of 'pi' (line 2957)
    pi_262296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 20), 'pi', False)
    # Getting the type of 'ws' (line 2957)
    ws_262297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 25), 'ws', False)
    # Applying the binary operator '*' (line 2957)
    result_mul_262298 = python_operator(stypy.reporting.localization.Localization(__file__, 2957, 20), '*', pi_262296, ws_262297)
    
    float_262299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2957, 30), 'float')
    # Applying the binary operator 'div' (line 2957)
    result_div_262300 = python_operator(stypy.reporting.localization.Localization(__file__, 2957, 28), 'div', result_mul_262298, float_262299)
    
    # Processing the call keyword arguments (line 2957)
    kwargs_262301 = {}
    # Getting the type of 'tan' (line 2957)
    tan_262295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 16), 'tan', False)
    # Calling tan(args, kwargs) (line 2957)
    tan_call_result_262302 = invoke(stypy.reporting.localization.Localization(__file__, 2957, 16), tan_262295, *[result_div_262300], **kwargs_262301)
    
    # Assigning a type to the variable 'stopb' (line 2957)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2957, 8), 'stopb', tan_call_result_262302)
    # SSA branch for the else part of an if statement (line 2955)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 2959):
    
    # Assigning a BinOp to a Name (line 2959):
    # Getting the type of 'wp' (line 2959)
    wp_262303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2959, 16), 'wp')
    float_262304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2959, 21), 'float')
    # Applying the binary operator '*' (line 2959)
    result_mul_262305 = python_operator(stypy.reporting.localization.Localization(__file__, 2959, 16), '*', wp_262303, float_262304)
    
    # Assigning a type to the variable 'passb' (line 2959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2959, 8), 'passb', result_mul_262305)
    
    # Assigning a BinOp to a Name (line 2960):
    
    # Assigning a BinOp to a Name (line 2960):
    # Getting the type of 'ws' (line 2960)
    ws_262306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2960, 16), 'ws')
    float_262307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2960, 21), 'float')
    # Applying the binary operator '*' (line 2960)
    result_mul_262308 = python_operator(stypy.reporting.localization.Localization(__file__, 2960, 16), '*', ws_262306, float_262307)
    
    # Assigning a type to the variable 'stopb' (line 2960)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2960, 8), 'stopb', result_mul_262308)
    # SSA join for if statement (line 2955)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'filter_type' (line 2962)
    filter_type_262309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2962, 7), 'filter_type')
    int_262310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2962, 22), 'int')
    # Applying the binary operator '==' (line 2962)
    result_eq_262311 = python_operator(stypy.reporting.localization.Localization(__file__, 2962, 7), '==', filter_type_262309, int_262310)
    
    # Testing the type of an if condition (line 2962)
    if_condition_262312 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2962, 4), result_eq_262311)
    # Assigning a type to the variable 'if_condition_262312' (line 2962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2962, 4), 'if_condition_262312', if_condition_262312)
    # SSA begins for if statement (line 2962)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2963):
    
    # Assigning a BinOp to a Name (line 2963):
    # Getting the type of 'stopb' (line 2963)
    stopb_262313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2963, 14), 'stopb')
    # Getting the type of 'passb' (line 2963)
    passb_262314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2963, 22), 'passb')
    # Applying the binary operator 'div' (line 2963)
    result_div_262315 = python_operator(stypy.reporting.localization.Localization(__file__, 2963, 14), 'div', stopb_262313, passb_262314)
    
    # Assigning a type to the variable 'nat' (line 2963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2963, 8), 'nat', result_div_262315)
    # SSA branch for the else part of an if statement (line 2962)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 2964)
    filter_type_262316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2964, 9), 'filter_type')
    int_262317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2964, 24), 'int')
    # Applying the binary operator '==' (line 2964)
    result_eq_262318 = python_operator(stypy.reporting.localization.Localization(__file__, 2964, 9), '==', filter_type_262316, int_262317)
    
    # Testing the type of an if condition (line 2964)
    if_condition_262319 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2964, 9), result_eq_262318)
    # Assigning a type to the variable 'if_condition_262319' (line 2964)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2964, 9), 'if_condition_262319', if_condition_262319)
    # SSA begins for if statement (line 2964)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2965):
    
    # Assigning a BinOp to a Name (line 2965):
    # Getting the type of 'passb' (line 2965)
    passb_262320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2965, 14), 'passb')
    # Getting the type of 'stopb' (line 2965)
    stopb_262321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2965, 22), 'stopb')
    # Applying the binary operator 'div' (line 2965)
    result_div_262322 = python_operator(stypy.reporting.localization.Localization(__file__, 2965, 14), 'div', passb_262320, stopb_262321)
    
    # Assigning a type to the variable 'nat' (line 2965)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2965, 8), 'nat', result_div_262322)
    # SSA branch for the else part of an if statement (line 2964)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 2966)
    filter_type_262323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 9), 'filter_type')
    int_262324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2966, 24), 'int')
    # Applying the binary operator '==' (line 2966)
    result_eq_262325 = python_operator(stypy.reporting.localization.Localization(__file__, 2966, 9), '==', filter_type_262323, int_262324)
    
    # Testing the type of an if condition (line 2966)
    if_condition_262326 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2966, 9), result_eq_262325)
    # Assigning a type to the variable 'if_condition_262326' (line 2966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2966, 9), 'if_condition_262326', if_condition_262326)
    # SSA begins for if statement (line 2966)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2967):
    
    # Assigning a Call to a Name (line 2967):
    
    # Call to fminbound(...): (line 2967)
    # Processing the call arguments (line 2967)
    # Getting the type of 'band_stop_obj' (line 2967)
    band_stop_obj_262329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 33), 'band_stop_obj', False)
    
    # Obtaining the type of the subscript
    int_262330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2967, 54), 'int')
    # Getting the type of 'passb' (line 2967)
    passb_262331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 48), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 2967)
    getitem___262332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2967, 48), passb_262331, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2967)
    subscript_call_result_262333 = invoke(stypy.reporting.localization.Localization(__file__, 2967, 48), getitem___262332, int_262330)
    
    
    # Obtaining the type of the subscript
    int_262334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2967, 64), 'int')
    # Getting the type of 'stopb' (line 2967)
    stopb_262335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 58), 'stopb', False)
    # Obtaining the member '__getitem__' of a type (line 2967)
    getitem___262336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2967, 58), stopb_262335, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2967)
    subscript_call_result_262337 = invoke(stypy.reporting.localization.Localization(__file__, 2967, 58), getitem___262336, int_262334)
    
    float_262338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2967, 69), 'float')
    # Applying the binary operator '-' (line 2967)
    result_sub_262339 = python_operator(stypy.reporting.localization.Localization(__file__, 2967, 58), '-', subscript_call_result_262337, float_262338)
    
    # Processing the call keyword arguments (line 2967)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2968)
    tuple_262340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2968, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2968)
    # Adding element type (line 2968)
    int_262341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2968, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2968, 39), tuple_262340, int_262341)
    # Adding element type (line 2968)
    # Getting the type of 'passb' (line 2968)
    passb_262342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 42), 'passb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2968, 39), tuple_262340, passb_262342)
    # Adding element type (line 2968)
    # Getting the type of 'stopb' (line 2968)
    stopb_262343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 49), 'stopb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2968, 39), tuple_262340, stopb_262343)
    # Adding element type (line 2968)
    # Getting the type of 'gpass' (line 2968)
    gpass_262344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 56), 'gpass', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2968, 39), tuple_262340, gpass_262344)
    # Adding element type (line 2968)
    # Getting the type of 'gstop' (line 2968)
    gstop_262345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 63), 'gstop', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2968, 39), tuple_262340, gstop_262345)
    # Adding element type (line 2968)
    str_262346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2969, 39), 'str', 'butter')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2968, 39), tuple_262340, str_262346)
    
    keyword_262347 = tuple_262340
    int_262348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2970, 38), 'int')
    keyword_262349 = int_262348
    kwargs_262350 = {'disp': keyword_262349, 'args': keyword_262347}
    # Getting the type of 'optimize' (line 2967)
    optimize_262327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 14), 'optimize', False)
    # Obtaining the member 'fminbound' of a type (line 2967)
    fminbound_262328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2967, 14), optimize_262327, 'fminbound')
    # Calling fminbound(args, kwargs) (line 2967)
    fminbound_call_result_262351 = invoke(stypy.reporting.localization.Localization(__file__, 2967, 14), fminbound_262328, *[band_stop_obj_262329, subscript_call_result_262333, result_sub_262339], **kwargs_262350)
    
    # Assigning a type to the variable 'wp0' (line 2967)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2967, 8), 'wp0', fminbound_call_result_262351)
    
    # Assigning a Name to a Subscript (line 2971):
    
    # Assigning a Name to a Subscript (line 2971):
    # Getting the type of 'wp0' (line 2971)
    wp0_262352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 19), 'wp0')
    # Getting the type of 'passb' (line 2971)
    passb_262353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 8), 'passb')
    int_262354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2971, 14), 'int')
    # Storing an element on a container (line 2971)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2971, 8), passb_262353, (int_262354, wp0_262352))
    
    # Assigning a Call to a Name (line 2972):
    
    # Assigning a Call to a Name (line 2972):
    
    # Call to fminbound(...): (line 2972)
    # Processing the call arguments (line 2972)
    # Getting the type of 'band_stop_obj' (line 2972)
    band_stop_obj_262357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 33), 'band_stop_obj', False)
    
    # Obtaining the type of the subscript
    int_262358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2972, 54), 'int')
    # Getting the type of 'stopb' (line 2972)
    stopb_262359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 48), 'stopb', False)
    # Obtaining the member '__getitem__' of a type (line 2972)
    getitem___262360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2972, 48), stopb_262359, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2972)
    subscript_call_result_262361 = invoke(stypy.reporting.localization.Localization(__file__, 2972, 48), getitem___262360, int_262358)
    
    float_262362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2972, 59), 'float')
    # Applying the binary operator '+' (line 2972)
    result_add_262363 = python_operator(stypy.reporting.localization.Localization(__file__, 2972, 48), '+', subscript_call_result_262361, float_262362)
    
    
    # Obtaining the type of the subscript
    int_262364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2972, 72), 'int')
    # Getting the type of 'passb' (line 2972)
    passb_262365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 66), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 2972)
    getitem___262366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2972, 66), passb_262365, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2972)
    subscript_call_result_262367 = invoke(stypy.reporting.localization.Localization(__file__, 2972, 66), getitem___262366, int_262364)
    
    # Processing the call keyword arguments (line 2972)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2973)
    tuple_262368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2973, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2973)
    # Adding element type (line 2973)
    int_262369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2973, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2973, 39), tuple_262368, int_262369)
    # Adding element type (line 2973)
    # Getting the type of 'passb' (line 2973)
    passb_262370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2973, 42), 'passb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2973, 39), tuple_262368, passb_262370)
    # Adding element type (line 2973)
    # Getting the type of 'stopb' (line 2973)
    stopb_262371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2973, 49), 'stopb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2973, 39), tuple_262368, stopb_262371)
    # Adding element type (line 2973)
    # Getting the type of 'gpass' (line 2973)
    gpass_262372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2973, 56), 'gpass', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2973, 39), tuple_262368, gpass_262372)
    # Adding element type (line 2973)
    # Getting the type of 'gstop' (line 2973)
    gstop_262373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2973, 63), 'gstop', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2973, 39), tuple_262368, gstop_262373)
    # Adding element type (line 2973)
    str_262374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2974, 39), 'str', 'butter')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2973, 39), tuple_262368, str_262374)
    
    keyword_262375 = tuple_262368
    int_262376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2975, 38), 'int')
    keyword_262377 = int_262376
    kwargs_262378 = {'disp': keyword_262377, 'args': keyword_262375}
    # Getting the type of 'optimize' (line 2972)
    optimize_262355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 14), 'optimize', False)
    # Obtaining the member 'fminbound' of a type (line 2972)
    fminbound_262356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2972, 14), optimize_262355, 'fminbound')
    # Calling fminbound(args, kwargs) (line 2972)
    fminbound_call_result_262379 = invoke(stypy.reporting.localization.Localization(__file__, 2972, 14), fminbound_262356, *[band_stop_obj_262357, result_add_262363, subscript_call_result_262367], **kwargs_262378)
    
    # Assigning a type to the variable 'wp1' (line 2972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2972, 8), 'wp1', fminbound_call_result_262379)
    
    # Assigning a Name to a Subscript (line 2976):
    
    # Assigning a Name to a Subscript (line 2976):
    # Getting the type of 'wp1' (line 2976)
    wp1_262380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2976, 19), 'wp1')
    # Getting the type of 'passb' (line 2976)
    passb_262381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2976, 8), 'passb')
    int_262382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2976, 14), 'int')
    # Storing an element on a container (line 2976)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2976, 8), passb_262381, (int_262382, wp1_262380))
    
    # Assigning a BinOp to a Name (line 2977):
    
    # Assigning a BinOp to a Name (line 2977):
    # Getting the type of 'stopb' (line 2977)
    stopb_262383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 16), 'stopb')
    
    # Obtaining the type of the subscript
    int_262384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2977, 31), 'int')
    # Getting the type of 'passb' (line 2977)
    passb_262385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 25), 'passb')
    # Obtaining the member '__getitem__' of a type (line 2977)
    getitem___262386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2977, 25), passb_262385, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2977)
    subscript_call_result_262387 = invoke(stypy.reporting.localization.Localization(__file__, 2977, 25), getitem___262386, int_262384)
    
    
    # Obtaining the type of the subscript
    int_262388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2977, 42), 'int')
    # Getting the type of 'passb' (line 2977)
    passb_262389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2977, 36), 'passb')
    # Obtaining the member '__getitem__' of a type (line 2977)
    getitem___262390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2977, 36), passb_262389, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2977)
    subscript_call_result_262391 = invoke(stypy.reporting.localization.Localization(__file__, 2977, 36), getitem___262390, int_262388)
    
    # Applying the binary operator '-' (line 2977)
    result_sub_262392 = python_operator(stypy.reporting.localization.Localization(__file__, 2977, 25), '-', subscript_call_result_262387, subscript_call_result_262391)
    
    # Applying the binary operator '*' (line 2977)
    result_mul_262393 = python_operator(stypy.reporting.localization.Localization(__file__, 2977, 16), '*', stopb_262383, result_sub_262392)
    
    # Getting the type of 'stopb' (line 2978)
    stopb_262394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 16), 'stopb')
    int_262395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2978, 25), 'int')
    # Applying the binary operator '**' (line 2978)
    result_pow_262396 = python_operator(stypy.reporting.localization.Localization(__file__, 2978, 16), '**', stopb_262394, int_262395)
    
    
    # Obtaining the type of the subscript
    int_262397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2978, 35), 'int')
    # Getting the type of 'passb' (line 2978)
    passb_262398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 29), 'passb')
    # Obtaining the member '__getitem__' of a type (line 2978)
    getitem___262399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2978, 29), passb_262398, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2978)
    subscript_call_result_262400 = invoke(stypy.reporting.localization.Localization(__file__, 2978, 29), getitem___262399, int_262397)
    
    
    # Obtaining the type of the subscript
    int_262401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2978, 46), 'int')
    # Getting the type of 'passb' (line 2978)
    passb_262402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 40), 'passb')
    # Obtaining the member '__getitem__' of a type (line 2978)
    getitem___262403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2978, 40), passb_262402, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2978)
    subscript_call_result_262404 = invoke(stypy.reporting.localization.Localization(__file__, 2978, 40), getitem___262403, int_262401)
    
    # Applying the binary operator '*' (line 2978)
    result_mul_262405 = python_operator(stypy.reporting.localization.Localization(__file__, 2978, 29), '*', subscript_call_result_262400, subscript_call_result_262404)
    
    # Applying the binary operator '-' (line 2978)
    result_sub_262406 = python_operator(stypy.reporting.localization.Localization(__file__, 2978, 16), '-', result_pow_262396, result_mul_262405)
    
    # Applying the binary operator 'div' (line 2977)
    result_div_262407 = python_operator(stypy.reporting.localization.Localization(__file__, 2977, 15), 'div', result_mul_262393, result_sub_262406)
    
    # Assigning a type to the variable 'nat' (line 2977)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2977, 8), 'nat', result_div_262407)
    # SSA branch for the else part of an if statement (line 2966)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 2979)
    filter_type_262408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 9), 'filter_type')
    int_262409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2979, 24), 'int')
    # Applying the binary operator '==' (line 2979)
    result_eq_262410 = python_operator(stypy.reporting.localization.Localization(__file__, 2979, 9), '==', filter_type_262408, int_262409)
    
    # Testing the type of an if condition (line 2979)
    if_condition_262411 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2979, 9), result_eq_262410)
    # Assigning a type to the variable 'if_condition_262411' (line 2979)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2979, 9), 'if_condition_262411', if_condition_262411)
    # SSA begins for if statement (line 2979)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2980):
    
    # Assigning a BinOp to a Name (line 2980):
    # Getting the type of 'stopb' (line 2980)
    stopb_262412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2980, 16), 'stopb')
    int_262413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2980, 25), 'int')
    # Applying the binary operator '**' (line 2980)
    result_pow_262414 = python_operator(stypy.reporting.localization.Localization(__file__, 2980, 16), '**', stopb_262412, int_262413)
    
    
    # Obtaining the type of the subscript
    int_262415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2980, 35), 'int')
    # Getting the type of 'passb' (line 2980)
    passb_262416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2980, 29), 'passb')
    # Obtaining the member '__getitem__' of a type (line 2980)
    getitem___262417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2980, 29), passb_262416, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2980)
    subscript_call_result_262418 = invoke(stypy.reporting.localization.Localization(__file__, 2980, 29), getitem___262417, int_262415)
    
    
    # Obtaining the type of the subscript
    int_262419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2980, 46), 'int')
    # Getting the type of 'passb' (line 2980)
    passb_262420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2980, 40), 'passb')
    # Obtaining the member '__getitem__' of a type (line 2980)
    getitem___262421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2980, 40), passb_262420, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2980)
    subscript_call_result_262422 = invoke(stypy.reporting.localization.Localization(__file__, 2980, 40), getitem___262421, int_262419)
    
    # Applying the binary operator '*' (line 2980)
    result_mul_262423 = python_operator(stypy.reporting.localization.Localization(__file__, 2980, 29), '*', subscript_call_result_262418, subscript_call_result_262422)
    
    # Applying the binary operator '-' (line 2980)
    result_sub_262424 = python_operator(stypy.reporting.localization.Localization(__file__, 2980, 16), '-', result_pow_262414, result_mul_262423)
    
    # Getting the type of 'stopb' (line 2981)
    stopb_262425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2981, 16), 'stopb')
    
    # Obtaining the type of the subscript
    int_262426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2981, 31), 'int')
    # Getting the type of 'passb' (line 2981)
    passb_262427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2981, 25), 'passb')
    # Obtaining the member '__getitem__' of a type (line 2981)
    getitem___262428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2981, 25), passb_262427, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2981)
    subscript_call_result_262429 = invoke(stypy.reporting.localization.Localization(__file__, 2981, 25), getitem___262428, int_262426)
    
    
    # Obtaining the type of the subscript
    int_262430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2981, 42), 'int')
    # Getting the type of 'passb' (line 2981)
    passb_262431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2981, 36), 'passb')
    # Obtaining the member '__getitem__' of a type (line 2981)
    getitem___262432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2981, 36), passb_262431, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2981)
    subscript_call_result_262433 = invoke(stypy.reporting.localization.Localization(__file__, 2981, 36), getitem___262432, int_262430)
    
    # Applying the binary operator '-' (line 2981)
    result_sub_262434 = python_operator(stypy.reporting.localization.Localization(__file__, 2981, 25), '-', subscript_call_result_262429, subscript_call_result_262433)
    
    # Applying the binary operator '*' (line 2981)
    result_mul_262435 = python_operator(stypy.reporting.localization.Localization(__file__, 2981, 16), '*', stopb_262425, result_sub_262434)
    
    # Applying the binary operator 'div' (line 2980)
    result_div_262436 = python_operator(stypy.reporting.localization.Localization(__file__, 2980, 15), 'div', result_sub_262424, result_mul_262435)
    
    # Assigning a type to the variable 'nat' (line 2980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2980, 8), 'nat', result_div_262436)
    # SSA join for if statement (line 2979)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2966)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2964)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2962)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2983):
    
    # Assigning a Call to a Name (line 2983):
    
    # Call to min(...): (line 2983)
    # Processing the call arguments (line 2983)
    
    # Call to abs(...): (line 2983)
    # Processing the call arguments (line 2983)
    # Getting the type of 'nat' (line 2983)
    nat_262439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2983, 18), 'nat', False)
    # Processing the call keyword arguments (line 2983)
    kwargs_262440 = {}
    # Getting the type of 'abs' (line 2983)
    abs_262438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2983, 14), 'abs', False)
    # Calling abs(args, kwargs) (line 2983)
    abs_call_result_262441 = invoke(stypy.reporting.localization.Localization(__file__, 2983, 14), abs_262438, *[nat_262439], **kwargs_262440)
    
    # Processing the call keyword arguments (line 2983)
    kwargs_262442 = {}
    # Getting the type of 'min' (line 2983)
    min_262437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2983, 10), 'min', False)
    # Calling min(args, kwargs) (line 2983)
    min_call_result_262443 = invoke(stypy.reporting.localization.Localization(__file__, 2983, 10), min_262437, *[abs_call_result_262441], **kwargs_262442)
    
    # Assigning a type to the variable 'nat' (line 2983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2983, 4), 'nat', min_call_result_262443)
    
    # Assigning a BinOp to a Name (line 2985):
    
    # Assigning a BinOp to a Name (line 2985):
    int_262444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2985, 12), 'int')
    float_262445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2985, 19), 'float')
    
    # Call to abs(...): (line 2985)
    # Processing the call arguments (line 2985)
    # Getting the type of 'gstop' (line 2985)
    gstop_262447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 29), 'gstop', False)
    # Processing the call keyword arguments (line 2985)
    kwargs_262448 = {}
    # Getting the type of 'abs' (line 2985)
    abs_262446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 25), 'abs', False)
    # Calling abs(args, kwargs) (line 2985)
    abs_call_result_262449 = invoke(stypy.reporting.localization.Localization(__file__, 2985, 25), abs_262446, *[gstop_262447], **kwargs_262448)
    
    # Applying the binary operator '*' (line 2985)
    result_mul_262450 = python_operator(stypy.reporting.localization.Localization(__file__, 2985, 19), '*', float_262445, abs_call_result_262449)
    
    # Applying the binary operator '**' (line 2985)
    result_pow_262451 = python_operator(stypy.reporting.localization.Localization(__file__, 2985, 12), '**', int_262444, result_mul_262450)
    
    # Assigning a type to the variable 'GSTOP' (line 2985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2985, 4), 'GSTOP', result_pow_262451)
    
    # Assigning a BinOp to a Name (line 2986):
    
    # Assigning a BinOp to a Name (line 2986):
    int_262452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2986, 12), 'int')
    float_262453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2986, 19), 'float')
    
    # Call to abs(...): (line 2986)
    # Processing the call arguments (line 2986)
    # Getting the type of 'gpass' (line 2986)
    gpass_262455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 29), 'gpass', False)
    # Processing the call keyword arguments (line 2986)
    kwargs_262456 = {}
    # Getting the type of 'abs' (line 2986)
    abs_262454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 25), 'abs', False)
    # Calling abs(args, kwargs) (line 2986)
    abs_call_result_262457 = invoke(stypy.reporting.localization.Localization(__file__, 2986, 25), abs_262454, *[gpass_262455], **kwargs_262456)
    
    # Applying the binary operator '*' (line 2986)
    result_mul_262458 = python_operator(stypy.reporting.localization.Localization(__file__, 2986, 19), '*', float_262453, abs_call_result_262457)
    
    # Applying the binary operator '**' (line 2986)
    result_pow_262459 = python_operator(stypy.reporting.localization.Localization(__file__, 2986, 12), '**', int_262452, result_mul_262458)
    
    # Assigning a type to the variable 'GPASS' (line 2986)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2986, 4), 'GPASS', result_pow_262459)
    
    # Assigning a Call to a Name (line 2987):
    
    # Assigning a Call to a Name (line 2987):
    
    # Call to int(...): (line 2987)
    # Processing the call arguments (line 2987)
    
    # Call to ceil(...): (line 2987)
    # Processing the call arguments (line 2987)
    
    # Call to log10(...): (line 2987)
    # Processing the call arguments (line 2987)
    # Getting the type of 'GSTOP' (line 2987)
    GSTOP_262463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 26), 'GSTOP', False)
    float_262464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2987, 34), 'float')
    # Applying the binary operator '-' (line 2987)
    result_sub_262465 = python_operator(stypy.reporting.localization.Localization(__file__, 2987, 26), '-', GSTOP_262463, float_262464)
    
    # Getting the type of 'GPASS' (line 2987)
    GPASS_262466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 42), 'GPASS', False)
    float_262467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2987, 50), 'float')
    # Applying the binary operator '-' (line 2987)
    result_sub_262468 = python_operator(stypy.reporting.localization.Localization(__file__, 2987, 42), '-', GPASS_262466, float_262467)
    
    # Applying the binary operator 'div' (line 2987)
    result_div_262469 = python_operator(stypy.reporting.localization.Localization(__file__, 2987, 25), 'div', result_sub_262465, result_sub_262468)
    
    # Processing the call keyword arguments (line 2987)
    kwargs_262470 = {}
    # Getting the type of 'log10' (line 2987)
    log10_262462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 19), 'log10', False)
    # Calling log10(args, kwargs) (line 2987)
    log10_call_result_262471 = invoke(stypy.reporting.localization.Localization(__file__, 2987, 19), log10_262462, *[result_div_262469], **kwargs_262470)
    
    int_262472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2987, 59), 'int')
    
    # Call to log10(...): (line 2987)
    # Processing the call arguments (line 2987)
    # Getting the type of 'nat' (line 2987)
    nat_262474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 69), 'nat', False)
    # Processing the call keyword arguments (line 2987)
    kwargs_262475 = {}
    # Getting the type of 'log10' (line 2987)
    log10_262473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 63), 'log10', False)
    # Calling log10(args, kwargs) (line 2987)
    log10_call_result_262476 = invoke(stypy.reporting.localization.Localization(__file__, 2987, 63), log10_262473, *[nat_262474], **kwargs_262475)
    
    # Applying the binary operator '*' (line 2987)
    result_mul_262477 = python_operator(stypy.reporting.localization.Localization(__file__, 2987, 59), '*', int_262472, log10_call_result_262476)
    
    # Applying the binary operator 'div' (line 2987)
    result_div_262478 = python_operator(stypy.reporting.localization.Localization(__file__, 2987, 19), 'div', log10_call_result_262471, result_mul_262477)
    
    # Processing the call keyword arguments (line 2987)
    kwargs_262479 = {}
    # Getting the type of 'ceil' (line 2987)
    ceil_262461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 14), 'ceil', False)
    # Calling ceil(args, kwargs) (line 2987)
    ceil_call_result_262480 = invoke(stypy.reporting.localization.Localization(__file__, 2987, 14), ceil_262461, *[result_div_262478], **kwargs_262479)
    
    # Processing the call keyword arguments (line 2987)
    kwargs_262481 = {}
    # Getting the type of 'int' (line 2987)
    int_262460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 10), 'int', False)
    # Calling int(args, kwargs) (line 2987)
    int_call_result_262482 = invoke(stypy.reporting.localization.Localization(__file__, 2987, 10), int_262460, *[ceil_call_result_262480], **kwargs_262481)
    
    # Assigning a type to the variable 'ord' (line 2987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2987, 4), 'ord', int_call_result_262482)
    
    
    # SSA begins for try-except statement (line 2991)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a BinOp to a Name (line 2992):
    
    # Assigning a BinOp to a Name (line 2992):
    # Getting the type of 'GPASS' (line 2992)
    GPASS_262483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 14), 'GPASS')
    float_262484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2992, 22), 'float')
    # Applying the binary operator '-' (line 2992)
    result_sub_262485 = python_operator(stypy.reporting.localization.Localization(__file__, 2992, 14), '-', GPASS_262483, float_262484)
    
    float_262486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2992, 31), 'float')
    float_262487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2992, 39), 'float')
    # Getting the type of 'ord' (line 2992)
    ord_262488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 45), 'ord')
    # Applying the binary operator '*' (line 2992)
    result_mul_262489 = python_operator(stypy.reporting.localization.Localization(__file__, 2992, 39), '*', float_262487, ord_262488)
    
    # Applying the binary operator 'div' (line 2992)
    result_div_262490 = python_operator(stypy.reporting.localization.Localization(__file__, 2992, 31), 'div', float_262486, result_mul_262489)
    
    # Applying the binary operator '**' (line 2992)
    result_pow_262491 = python_operator(stypy.reporting.localization.Localization(__file__, 2992, 13), '**', result_sub_262485, result_div_262490)
    
    # Assigning a type to the variable 'W0' (line 2992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2992, 8), 'W0', result_pow_262491)
    # SSA branch for the except part of a try statement (line 2991)
    # SSA branch for the except 'ZeroDivisionError' branch of a try statement (line 2991)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Num to a Name (line 2994):
    
    # Assigning a Num to a Name (line 2994):
    float_262492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2994, 13), 'float')
    # Assigning a type to the variable 'W0' (line 2994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2994, 8), 'W0', float_262492)
    
    # Call to print(...): (line 2995)
    # Processing the call arguments (line 2995)
    str_262494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2995, 14), 'str', 'Warning, order is zero...check input parameters.')
    # Processing the call keyword arguments (line 2995)
    kwargs_262495 = {}
    # Getting the type of 'print' (line 2995)
    print_262493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 8), 'print', False)
    # Calling print(args, kwargs) (line 2995)
    print_call_result_262496 = invoke(stypy.reporting.localization.Localization(__file__, 2995, 8), print_262493, *[str_262494], **kwargs_262495)
    
    # SSA join for try-except statement (line 2991)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'filter_type' (line 3000)
    filter_type_262497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 7), 'filter_type')
    int_262498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3000, 22), 'int')
    # Applying the binary operator '==' (line 3000)
    result_eq_262499 = python_operator(stypy.reporting.localization.Localization(__file__, 3000, 7), '==', filter_type_262497, int_262498)
    
    # Testing the type of an if condition (line 3000)
    if_condition_262500 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3000, 4), result_eq_262499)
    # Assigning a type to the variable 'if_condition_262500' (line 3000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3000, 4), 'if_condition_262500', if_condition_262500)
    # SSA begins for if statement (line 3000)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3001):
    
    # Assigning a BinOp to a Name (line 3001):
    # Getting the type of 'W0' (line 3001)
    W0_262501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 13), 'W0')
    # Getting the type of 'passb' (line 3001)
    passb_262502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 18), 'passb')
    # Applying the binary operator '*' (line 3001)
    result_mul_262503 = python_operator(stypy.reporting.localization.Localization(__file__, 3001, 13), '*', W0_262501, passb_262502)
    
    # Assigning a type to the variable 'WN' (line 3001)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3001, 8), 'WN', result_mul_262503)
    # SSA branch for the else part of an if statement (line 3000)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3002)
    filter_type_262504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 9), 'filter_type')
    int_262505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3002, 24), 'int')
    # Applying the binary operator '==' (line 3002)
    result_eq_262506 = python_operator(stypy.reporting.localization.Localization(__file__, 3002, 9), '==', filter_type_262504, int_262505)
    
    # Testing the type of an if condition (line 3002)
    if_condition_262507 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3002, 9), result_eq_262506)
    # Assigning a type to the variable 'if_condition_262507' (line 3002)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3002, 9), 'if_condition_262507', if_condition_262507)
    # SSA begins for if statement (line 3002)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3003):
    
    # Assigning a BinOp to a Name (line 3003):
    # Getting the type of 'passb' (line 3003)
    passb_262508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 13), 'passb')
    # Getting the type of 'W0' (line 3003)
    W0_262509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 21), 'W0')
    # Applying the binary operator 'div' (line 3003)
    result_div_262510 = python_operator(stypy.reporting.localization.Localization(__file__, 3003, 13), 'div', passb_262508, W0_262509)
    
    # Assigning a type to the variable 'WN' (line 3003)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3003, 8), 'WN', result_div_262510)
    # SSA branch for the else part of an if statement (line 3002)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3004)
    filter_type_262511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 9), 'filter_type')
    int_262512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3004, 24), 'int')
    # Applying the binary operator '==' (line 3004)
    result_eq_262513 = python_operator(stypy.reporting.localization.Localization(__file__, 3004, 9), '==', filter_type_262511, int_262512)
    
    # Testing the type of an if condition (line 3004)
    if_condition_262514 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3004, 9), result_eq_262513)
    # Assigning a type to the variable 'if_condition_262514' (line 3004)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3004, 9), 'if_condition_262514', if_condition_262514)
    # SSA begins for if statement (line 3004)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3005):
    
    # Assigning a Call to a Name (line 3005):
    
    # Call to zeros(...): (line 3005)
    # Processing the call arguments (line 3005)
    int_262517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3005, 25), 'int')
    # Getting the type of 'float' (line 3005)
    float_262518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 28), 'float', False)
    # Processing the call keyword arguments (line 3005)
    kwargs_262519 = {}
    # Getting the type of 'numpy' (line 3005)
    numpy_262515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3005, 13), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 3005)
    zeros_262516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3005, 13), numpy_262515, 'zeros')
    # Calling zeros(args, kwargs) (line 3005)
    zeros_call_result_262520 = invoke(stypy.reporting.localization.Localization(__file__, 3005, 13), zeros_262516, *[int_262517, float_262518], **kwargs_262519)
    
    # Assigning a type to the variable 'WN' (line 3005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3005, 8), 'WN', zeros_call_result_262520)
    
    # Assigning a Call to a Name (line 3006):
    
    # Assigning a Call to a Name (line 3006):
    
    # Call to sqrt(...): (line 3006)
    # Processing the call arguments (line 3006)
    
    # Obtaining the type of the subscript
    int_262522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3006, 28), 'int')
    # Getting the type of 'passb' (line 3006)
    passb_262523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 22), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3006)
    getitem___262524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3006, 22), passb_262523, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3006)
    subscript_call_result_262525 = invoke(stypy.reporting.localization.Localization(__file__, 3006, 22), getitem___262524, int_262522)
    
    
    # Obtaining the type of the subscript
    int_262526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3006, 39), 'int')
    # Getting the type of 'passb' (line 3006)
    passb_262527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 33), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3006)
    getitem___262528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3006, 33), passb_262527, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3006)
    subscript_call_result_262529 = invoke(stypy.reporting.localization.Localization(__file__, 3006, 33), getitem___262528, int_262526)
    
    # Applying the binary operator '-' (line 3006)
    result_sub_262530 = python_operator(stypy.reporting.localization.Localization(__file__, 3006, 22), '-', subscript_call_result_262525, subscript_call_result_262529)
    
    int_262531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3006, 46), 'int')
    # Applying the binary operator '**' (line 3006)
    result_pow_262532 = python_operator(stypy.reporting.localization.Localization(__file__, 3006, 21), '**', result_sub_262530, int_262531)
    
    int_262533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3007, 21), 'int')
    # Getting the type of 'W0' (line 3007)
    W0_262534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 25), 'W0', False)
    int_262535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3007, 31), 'int')
    # Applying the binary operator '**' (line 3007)
    result_pow_262536 = python_operator(stypy.reporting.localization.Localization(__file__, 3007, 25), '**', W0_262534, int_262535)
    
    # Applying the binary operator '*' (line 3007)
    result_mul_262537 = python_operator(stypy.reporting.localization.Localization(__file__, 3007, 21), '*', int_262533, result_pow_262536)
    
    
    # Obtaining the type of the subscript
    int_262538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3007, 41), 'int')
    # Getting the type of 'passb' (line 3007)
    passb_262539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 35), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3007)
    getitem___262540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3007, 35), passb_262539, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3007)
    subscript_call_result_262541 = invoke(stypy.reporting.localization.Localization(__file__, 3007, 35), getitem___262540, int_262538)
    
    # Applying the binary operator '*' (line 3007)
    result_mul_262542 = python_operator(stypy.reporting.localization.Localization(__file__, 3007, 33), '*', result_mul_262537, subscript_call_result_262541)
    
    
    # Obtaining the type of the subscript
    int_262543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3007, 52), 'int')
    # Getting the type of 'passb' (line 3007)
    passb_262544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3007, 46), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3007)
    getitem___262545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3007, 46), passb_262544, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3007)
    subscript_call_result_262546 = invoke(stypy.reporting.localization.Localization(__file__, 3007, 46), getitem___262545, int_262543)
    
    # Applying the binary operator '*' (line 3007)
    result_mul_262547 = python_operator(stypy.reporting.localization.Localization(__file__, 3007, 44), '*', result_mul_262542, subscript_call_result_262546)
    
    # Applying the binary operator '+' (line 3006)
    result_add_262548 = python_operator(stypy.reporting.localization.Localization(__file__, 3006, 21), '+', result_pow_262532, result_mul_262547)
    
    # Processing the call keyword arguments (line 3006)
    kwargs_262549 = {}
    # Getting the type of 'sqrt' (line 3006)
    sqrt_262521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 16), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3006)
    sqrt_call_result_262550 = invoke(stypy.reporting.localization.Localization(__file__, 3006, 16), sqrt_262521, *[result_add_262548], **kwargs_262549)
    
    # Assigning a type to the variable 'discr' (line 3006)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3006, 8), 'discr', sqrt_call_result_262550)
    
    # Assigning a BinOp to a Subscript (line 3008):
    
    # Assigning a BinOp to a Subscript (line 3008):
    
    # Obtaining the type of the subscript
    int_262551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3008, 24), 'int')
    # Getting the type of 'passb' (line 3008)
    passb_262552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3008, 18), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3008)
    getitem___262553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3008, 18), passb_262552, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3008)
    subscript_call_result_262554 = invoke(stypy.reporting.localization.Localization(__file__, 3008, 18), getitem___262553, int_262551)
    
    
    # Obtaining the type of the subscript
    int_262555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3008, 35), 'int')
    # Getting the type of 'passb' (line 3008)
    passb_262556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3008, 29), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3008)
    getitem___262557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3008, 29), passb_262556, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3008)
    subscript_call_result_262558 = invoke(stypy.reporting.localization.Localization(__file__, 3008, 29), getitem___262557, int_262555)
    
    # Applying the binary operator '-' (line 3008)
    result_sub_262559 = python_operator(stypy.reporting.localization.Localization(__file__, 3008, 18), '-', subscript_call_result_262554, subscript_call_result_262558)
    
    # Getting the type of 'discr' (line 3008)
    discr_262560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3008, 41), 'discr')
    # Applying the binary operator '+' (line 3008)
    result_add_262561 = python_operator(stypy.reporting.localization.Localization(__file__, 3008, 17), '+', result_sub_262559, discr_262560)
    
    int_262562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3008, 51), 'int')
    # Getting the type of 'W0' (line 3008)
    W0_262563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3008, 55), 'W0')
    # Applying the binary operator '*' (line 3008)
    result_mul_262564 = python_operator(stypy.reporting.localization.Localization(__file__, 3008, 51), '*', int_262562, W0_262563)
    
    # Applying the binary operator 'div' (line 3008)
    result_div_262565 = python_operator(stypy.reporting.localization.Localization(__file__, 3008, 16), 'div', result_add_262561, result_mul_262564)
    
    # Getting the type of 'WN' (line 3008)
    WN_262566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3008, 8), 'WN')
    int_262567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3008, 11), 'int')
    # Storing an element on a container (line 3008)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 8), WN_262566, (int_262567, result_div_262565))
    
    # Assigning a BinOp to a Subscript (line 3009):
    
    # Assigning a BinOp to a Subscript (line 3009):
    
    # Obtaining the type of the subscript
    int_262568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3009, 24), 'int')
    # Getting the type of 'passb' (line 3009)
    passb_262569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 18), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3009)
    getitem___262570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3009, 18), passb_262569, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3009)
    subscript_call_result_262571 = invoke(stypy.reporting.localization.Localization(__file__, 3009, 18), getitem___262570, int_262568)
    
    
    # Obtaining the type of the subscript
    int_262572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3009, 35), 'int')
    # Getting the type of 'passb' (line 3009)
    passb_262573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 29), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3009)
    getitem___262574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3009, 29), passb_262573, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3009)
    subscript_call_result_262575 = invoke(stypy.reporting.localization.Localization(__file__, 3009, 29), getitem___262574, int_262572)
    
    # Applying the binary operator '-' (line 3009)
    result_sub_262576 = python_operator(stypy.reporting.localization.Localization(__file__, 3009, 18), '-', subscript_call_result_262571, subscript_call_result_262575)
    
    # Getting the type of 'discr' (line 3009)
    discr_262577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 41), 'discr')
    # Applying the binary operator '-' (line 3009)
    result_sub_262578 = python_operator(stypy.reporting.localization.Localization(__file__, 3009, 17), '-', result_sub_262576, discr_262577)
    
    int_262579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3009, 51), 'int')
    # Getting the type of 'W0' (line 3009)
    W0_262580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 55), 'W0')
    # Applying the binary operator '*' (line 3009)
    result_mul_262581 = python_operator(stypy.reporting.localization.Localization(__file__, 3009, 51), '*', int_262579, W0_262580)
    
    # Applying the binary operator 'div' (line 3009)
    result_div_262582 = python_operator(stypy.reporting.localization.Localization(__file__, 3009, 16), 'div', result_sub_262578, result_mul_262581)
    
    # Getting the type of 'WN' (line 3009)
    WN_262583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3009, 8), 'WN')
    int_262584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3009, 11), 'int')
    # Storing an element on a container (line 3009)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3009, 8), WN_262583, (int_262584, result_div_262582))
    
    # Assigning a Call to a Name (line 3010):
    
    # Assigning a Call to a Name (line 3010):
    
    # Call to sort(...): (line 3010)
    # Processing the call arguments (line 3010)
    
    # Call to abs(...): (line 3010)
    # Processing the call arguments (line 3010)
    # Getting the type of 'WN' (line 3010)
    WN_262588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 28), 'WN', False)
    # Processing the call keyword arguments (line 3010)
    kwargs_262589 = {}
    # Getting the type of 'abs' (line 3010)
    abs_262587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 24), 'abs', False)
    # Calling abs(args, kwargs) (line 3010)
    abs_call_result_262590 = invoke(stypy.reporting.localization.Localization(__file__, 3010, 24), abs_262587, *[WN_262588], **kwargs_262589)
    
    # Processing the call keyword arguments (line 3010)
    kwargs_262591 = {}
    # Getting the type of 'numpy' (line 3010)
    numpy_262585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3010, 13), 'numpy', False)
    # Obtaining the member 'sort' of a type (line 3010)
    sort_262586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3010, 13), numpy_262585, 'sort')
    # Calling sort(args, kwargs) (line 3010)
    sort_call_result_262592 = invoke(stypy.reporting.localization.Localization(__file__, 3010, 13), sort_262586, *[abs_call_result_262590], **kwargs_262591)
    
    # Assigning a type to the variable 'WN' (line 3010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3010, 8), 'WN', sort_call_result_262592)
    # SSA branch for the else part of an if statement (line 3004)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3011)
    filter_type_262593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3011, 9), 'filter_type')
    int_262594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3011, 24), 'int')
    # Applying the binary operator '==' (line 3011)
    result_eq_262595 = python_operator(stypy.reporting.localization.Localization(__file__, 3011, 9), '==', filter_type_262593, int_262594)
    
    # Testing the type of an if condition (line 3011)
    if_condition_262596 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3011, 9), result_eq_262595)
    # Assigning a type to the variable 'if_condition_262596' (line 3011)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3011, 9), 'if_condition_262596', if_condition_262596)
    # SSA begins for if statement (line 3011)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3012):
    
    # Assigning a Call to a Name (line 3012):
    
    # Call to array(...): (line 3012)
    # Processing the call arguments (line 3012)
    
    # Obtaining an instance of the builtin type 'list' (line 3012)
    list_262599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3012, 25), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3012)
    # Adding element type (line 3012)
    
    # Getting the type of 'W0' (line 3012)
    W0_262600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 27), 'W0', False)
    # Applying the 'usub' unary operator (line 3012)
    result___neg___262601 = python_operator(stypy.reporting.localization.Localization(__file__, 3012, 26), 'usub', W0_262600)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3012, 25), list_262599, result___neg___262601)
    # Adding element type (line 3012)
    # Getting the type of 'W0' (line 3012)
    W0_262602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 31), 'W0', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3012, 25), list_262599, W0_262602)
    
    # Getting the type of 'float' (line 3012)
    float_262603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 36), 'float', False)
    # Processing the call keyword arguments (line 3012)
    kwargs_262604 = {}
    # Getting the type of 'numpy' (line 3012)
    numpy_262597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 13), 'numpy', False)
    # Obtaining the member 'array' of a type (line 3012)
    array_262598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3012, 13), numpy_262597, 'array')
    # Calling array(args, kwargs) (line 3012)
    array_call_result_262605 = invoke(stypy.reporting.localization.Localization(__file__, 3012, 13), array_262598, *[list_262599, float_262603], **kwargs_262604)
    
    # Assigning a type to the variable 'W0' (line 3012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3012, 8), 'W0', array_call_result_262605)
    
    # Assigning a BinOp to a Name (line 3013):
    
    # Assigning a BinOp to a Name (line 3013):
    
    # Getting the type of 'W0' (line 3013)
    W0_262606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 15), 'W0')
    # Applying the 'usub' unary operator (line 3013)
    result___neg___262607 = python_operator(stypy.reporting.localization.Localization(__file__, 3013, 14), 'usub', W0_262606)
    
    
    # Obtaining the type of the subscript
    int_262608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3013, 27), 'int')
    # Getting the type of 'passb' (line 3013)
    passb_262609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 21), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3013)
    getitem___262610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3013, 21), passb_262609, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3013)
    subscript_call_result_262611 = invoke(stypy.reporting.localization.Localization(__file__, 3013, 21), getitem___262610, int_262608)
    
    
    # Obtaining the type of the subscript
    int_262612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3013, 38), 'int')
    # Getting the type of 'passb' (line 3013)
    passb_262613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 32), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3013)
    getitem___262614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3013, 32), passb_262613, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3013)
    subscript_call_result_262615 = invoke(stypy.reporting.localization.Localization(__file__, 3013, 32), getitem___262614, int_262612)
    
    # Applying the binary operator '-' (line 3013)
    result_sub_262616 = python_operator(stypy.reporting.localization.Localization(__file__, 3013, 21), '-', subscript_call_result_262611, subscript_call_result_262615)
    
    # Applying the binary operator '*' (line 3013)
    result_mul_262617 = python_operator(stypy.reporting.localization.Localization(__file__, 3013, 14), '*', result___neg___262607, result_sub_262616)
    
    float_262618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3013, 44), 'float')
    # Applying the binary operator 'div' (line 3013)
    result_div_262619 = python_operator(stypy.reporting.localization.Localization(__file__, 3013, 42), 'div', result_mul_262617, float_262618)
    
    
    # Call to sqrt(...): (line 3014)
    # Processing the call arguments (line 3014)
    # Getting the type of 'W0' (line 3014)
    W0_262621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 19), 'W0', False)
    int_262622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3014, 25), 'int')
    # Applying the binary operator '**' (line 3014)
    result_pow_262623 = python_operator(stypy.reporting.localization.Localization(__file__, 3014, 19), '**', W0_262621, int_262622)
    
    float_262624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3014, 29), 'float')
    # Applying the binary operator 'div' (line 3014)
    result_div_262625 = python_operator(stypy.reporting.localization.Localization(__file__, 3014, 19), 'div', result_pow_262623, float_262624)
    
    
    # Obtaining the type of the subscript
    int_262626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3014, 42), 'int')
    # Getting the type of 'passb' (line 3014)
    passb_262627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 36), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3014)
    getitem___262628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3014, 36), passb_262627, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3014)
    subscript_call_result_262629 = invoke(stypy.reporting.localization.Localization(__file__, 3014, 36), getitem___262628, int_262626)
    
    
    # Obtaining the type of the subscript
    int_262630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3014, 53), 'int')
    # Getting the type of 'passb' (line 3014)
    passb_262631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 47), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3014)
    getitem___262632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3014, 47), passb_262631, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3014)
    subscript_call_result_262633 = invoke(stypy.reporting.localization.Localization(__file__, 3014, 47), getitem___262632, int_262630)
    
    # Applying the binary operator '-' (line 3014)
    result_sub_262634 = python_operator(stypy.reporting.localization.Localization(__file__, 3014, 36), '-', subscript_call_result_262629, subscript_call_result_262633)
    
    int_262635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3014, 60), 'int')
    # Applying the binary operator '**' (line 3014)
    result_pow_262636 = python_operator(stypy.reporting.localization.Localization(__file__, 3014, 35), '**', result_sub_262634, int_262635)
    
    # Applying the binary operator '*' (line 3014)
    result_mul_262637 = python_operator(stypy.reporting.localization.Localization(__file__, 3014, 33), '*', result_div_262625, result_pow_262636)
    
    
    # Obtaining the type of the subscript
    int_262638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3015, 25), 'int')
    # Getting the type of 'passb' (line 3015)
    passb_262639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 19), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3015)
    getitem___262640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3015, 19), passb_262639, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3015)
    subscript_call_result_262641 = invoke(stypy.reporting.localization.Localization(__file__, 3015, 19), getitem___262640, int_262638)
    
    
    # Obtaining the type of the subscript
    int_262642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3015, 36), 'int')
    # Getting the type of 'passb' (line 3015)
    passb_262643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 30), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3015)
    getitem___262644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3015, 30), passb_262643, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3015)
    subscript_call_result_262645 = invoke(stypy.reporting.localization.Localization(__file__, 3015, 30), getitem___262644, int_262642)
    
    # Applying the binary operator '*' (line 3015)
    result_mul_262646 = python_operator(stypy.reporting.localization.Localization(__file__, 3015, 19), '*', subscript_call_result_262641, subscript_call_result_262645)
    
    # Applying the binary operator '+' (line 3014)
    result_add_262647 = python_operator(stypy.reporting.localization.Localization(__file__, 3014, 19), '+', result_mul_262637, result_mul_262646)
    
    # Processing the call keyword arguments (line 3014)
    kwargs_262648 = {}
    # Getting the type of 'sqrt' (line 3014)
    sqrt_262620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 14), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3014)
    sqrt_call_result_262649 = invoke(stypy.reporting.localization.Localization(__file__, 3014, 14), sqrt_262620, *[result_add_262647], **kwargs_262648)
    
    # Applying the binary operator '+' (line 3013)
    result_add_262650 = python_operator(stypy.reporting.localization.Localization(__file__, 3013, 14), '+', result_div_262619, sqrt_call_result_262649)
    
    # Assigning a type to the variable 'WN' (line 3013)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3013, 8), 'WN', result_add_262650)
    
    # Assigning a Call to a Name (line 3016):
    
    # Assigning a Call to a Name (line 3016):
    
    # Call to sort(...): (line 3016)
    # Processing the call arguments (line 3016)
    
    # Call to abs(...): (line 3016)
    # Processing the call arguments (line 3016)
    # Getting the type of 'WN' (line 3016)
    WN_262654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 28), 'WN', False)
    # Processing the call keyword arguments (line 3016)
    kwargs_262655 = {}
    # Getting the type of 'abs' (line 3016)
    abs_262653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 24), 'abs', False)
    # Calling abs(args, kwargs) (line 3016)
    abs_call_result_262656 = invoke(stypy.reporting.localization.Localization(__file__, 3016, 24), abs_262653, *[WN_262654], **kwargs_262655)
    
    # Processing the call keyword arguments (line 3016)
    kwargs_262657 = {}
    # Getting the type of 'numpy' (line 3016)
    numpy_262651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 13), 'numpy', False)
    # Obtaining the member 'sort' of a type (line 3016)
    sort_262652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3016, 13), numpy_262651, 'sort')
    # Calling sort(args, kwargs) (line 3016)
    sort_call_result_262658 = invoke(stypy.reporting.localization.Localization(__file__, 3016, 13), sort_262652, *[abs_call_result_262656], **kwargs_262657)
    
    # Assigning a type to the variable 'WN' (line 3016)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3016, 8), 'WN', sort_call_result_262658)
    # SSA branch for the else part of an if statement (line 3011)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 3018)
    # Processing the call arguments (line 3018)
    str_262660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3018, 25), 'str', 'Bad type: %s')
    # Getting the type of 'filter_type' (line 3018)
    filter_type_262661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 42), 'filter_type', False)
    # Applying the binary operator '%' (line 3018)
    result_mod_262662 = python_operator(stypy.reporting.localization.Localization(__file__, 3018, 25), '%', str_262660, filter_type_262661)
    
    # Processing the call keyword arguments (line 3018)
    kwargs_262663 = {}
    # Getting the type of 'ValueError' (line 3018)
    ValueError_262659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3018)
    ValueError_call_result_262664 = invoke(stypy.reporting.localization.Localization(__file__, 3018, 14), ValueError_262659, *[result_mod_262662], **kwargs_262663)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3018, 8), ValueError_call_result_262664, 'raise parameter', BaseException)
    # SSA join for if statement (line 3011)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3004)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3002)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3000)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'analog' (line 3020)
    analog_262665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 11), 'analog')
    # Applying the 'not' unary operator (line 3020)
    result_not__262666 = python_operator(stypy.reporting.localization.Localization(__file__, 3020, 7), 'not', analog_262665)
    
    # Testing the type of an if condition (line 3020)
    if_condition_262667 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3020, 4), result_not__262666)
    # Assigning a type to the variable 'if_condition_262667' (line 3020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3020, 4), 'if_condition_262667', if_condition_262667)
    # SSA begins for if statement (line 3020)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3021):
    
    # Assigning a BinOp to a Name (line 3021):
    float_262668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3021, 14), 'float')
    # Getting the type of 'pi' (line 3021)
    pi_262669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 20), 'pi')
    # Applying the binary operator 'div' (line 3021)
    result_div_262670 = python_operator(stypy.reporting.localization.Localization(__file__, 3021, 14), 'div', float_262668, pi_262669)
    
    
    # Call to arctan(...): (line 3021)
    # Processing the call arguments (line 3021)
    # Getting the type of 'WN' (line 3021)
    WN_262672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 33), 'WN', False)
    # Processing the call keyword arguments (line 3021)
    kwargs_262673 = {}
    # Getting the type of 'arctan' (line 3021)
    arctan_262671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 26), 'arctan', False)
    # Calling arctan(args, kwargs) (line 3021)
    arctan_call_result_262674 = invoke(stypy.reporting.localization.Localization(__file__, 3021, 26), arctan_262671, *[WN_262672], **kwargs_262673)
    
    # Applying the binary operator '*' (line 3021)
    result_mul_262675 = python_operator(stypy.reporting.localization.Localization(__file__, 3021, 13), '*', result_div_262670, arctan_call_result_262674)
    
    # Assigning a type to the variable 'wn' (line 3021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3021, 8), 'wn', result_mul_262675)
    # SSA branch for the else part of an if statement (line 3020)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 3023):
    
    # Assigning a Name to a Name (line 3023):
    # Getting the type of 'WN' (line 3023)
    WN_262676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3023, 13), 'WN')
    # Assigning a type to the variable 'wn' (line 3023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3023, 8), 'wn', WN_262676)
    # SSA join for if statement (line 3020)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 3025)
    # Processing the call arguments (line 3025)
    # Getting the type of 'wn' (line 3025)
    wn_262678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 11), 'wn', False)
    # Processing the call keyword arguments (line 3025)
    kwargs_262679 = {}
    # Getting the type of 'len' (line 3025)
    len_262677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 7), 'len', False)
    # Calling len(args, kwargs) (line 3025)
    len_call_result_262680 = invoke(stypy.reporting.localization.Localization(__file__, 3025, 7), len_262677, *[wn_262678], **kwargs_262679)
    
    int_262681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3025, 18), 'int')
    # Applying the binary operator '==' (line 3025)
    result_eq_262682 = python_operator(stypy.reporting.localization.Localization(__file__, 3025, 7), '==', len_call_result_262680, int_262681)
    
    # Testing the type of an if condition (line 3025)
    if_condition_262683 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3025, 4), result_eq_262682)
    # Assigning a type to the variable 'if_condition_262683' (line 3025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3025, 4), 'if_condition_262683', if_condition_262683)
    # SSA begins for if statement (line 3025)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 3026):
    
    # Assigning a Subscript to a Name (line 3026):
    
    # Obtaining the type of the subscript
    int_262684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3026, 16), 'int')
    # Getting the type of 'wn' (line 3026)
    wn_262685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 13), 'wn')
    # Obtaining the member '__getitem__' of a type (line 3026)
    getitem___262686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3026, 13), wn_262685, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3026)
    subscript_call_result_262687 = invoke(stypy.reporting.localization.Localization(__file__, 3026, 13), getitem___262686, int_262684)
    
    # Assigning a type to the variable 'wn' (line 3026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3026, 8), 'wn', subscript_call_result_262687)
    # SSA join for if statement (line 3025)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3027)
    tuple_262688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3027, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3027)
    # Adding element type (line 3027)
    # Getting the type of 'ord' (line 3027)
    ord_262689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 11), 'ord')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3027, 11), tuple_262688, ord_262689)
    # Adding element type (line 3027)
    # Getting the type of 'wn' (line 3027)
    wn_262690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 16), 'wn')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3027, 11), tuple_262688, wn_262690)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3027, 4), 'stypy_return_type', tuple_262688)
    
    # ################# End of 'buttord(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'buttord' in the type store
    # Getting the type of 'stypy_return_type' (line 2876)
    stypy_return_type_262691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2876, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_262691)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'buttord'
    return stypy_return_type_262691

# Assigning a type to the variable 'buttord' (line 2876)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2876, 0), 'buttord', buttord)

@norecursion
def cheb1ord(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 3030)
    False_262692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 42), 'False')
    defaults = [False_262692]
    # Create a new context for function 'cheb1ord'
    module_type_store = module_type_store.open_function_context('cheb1ord', 3030, 0, False)
    
    # Passed parameters checking function
    cheb1ord.stypy_localization = localization
    cheb1ord.stypy_type_of_self = None
    cheb1ord.stypy_type_store = module_type_store
    cheb1ord.stypy_function_name = 'cheb1ord'
    cheb1ord.stypy_param_names_list = ['wp', 'ws', 'gpass', 'gstop', 'analog']
    cheb1ord.stypy_varargs_param_name = None
    cheb1ord.stypy_kwargs_param_name = None
    cheb1ord.stypy_call_defaults = defaults
    cheb1ord.stypy_call_varargs = varargs
    cheb1ord.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cheb1ord', ['wp', 'ws', 'gpass', 'gstop', 'analog'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cheb1ord', localization, ['wp', 'ws', 'gpass', 'gstop', 'analog'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cheb1ord(...)' code ##################

    str_262693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3098, (-1)), 'str', 'Chebyshev type I filter order selection.\n\n    Return the order of the lowest order digital or analog Chebyshev Type I\n    filter that loses no more than `gpass` dB in the passband and has at\n    least `gstop` dB attenuation in the stopband.\n\n    Parameters\n    ----------\n    wp, ws : float\n        Passband and stopband edge frequencies.\n        For digital filters, these are normalized from 0 to 1, where 1 is the\n        Nyquist frequency, pi radians/sample.  (`wp` and `ws` are thus in\n        half-cycles / sample.)  For example:\n\n            - Lowpass:   wp = 0.2,          ws = 0.3\n            - Highpass:  wp = 0.3,          ws = 0.2\n            - Bandpass:  wp = [0.2, 0.5],   ws = [0.1, 0.6]\n            - Bandstop:  wp = [0.1, 0.6],   ws = [0.2, 0.5]\n\n        For analog filters, `wp` and `ws` are angular frequencies (e.g. rad/s).\n\n    gpass : float\n        The maximum loss in the passband (dB).\n    gstop : float\n        The minimum attenuation in the stopband (dB).\n    analog : bool, optional\n        When True, return an analog filter, otherwise a digital filter is\n        returned.\n\n    Returns\n    -------\n    ord : int\n        The lowest order for a Chebyshev type I filter that meets specs.\n    wn : ndarray or float\n        The Chebyshev natural frequency (the "3dB frequency") for use with\n        `cheby1` to give filter results.\n\n    See Also\n    --------\n    cheby1 : Filter design using order and critical points\n    buttord : Find order and critical points from passband and stopband spec\n    cheb2ord, ellipord\n    iirfilter : General filter design using order and critical frequencies\n    iirdesign : General filter design using passband and stopband spec\n\n    Examples\n    --------\n    Design a digital lowpass filter such that the passband is within 3 dB up\n    to 0.2*(fs/2), while rejecting at least -40 dB above 0.3*(fs/2).  Plot its\n    frequency response, showing the passband and stopband constraints in gray.\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> N, Wn = signal.cheb1ord(0.2, 0.3, 3, 40)\n    >>> b, a = signal.cheby1(N, 3, Wn, \'low\')\n    >>> w, h = signal.freqz(b, a)\n    >>> plt.semilogx(w / np.pi, 20 * np.log10(abs(h)))\n    >>> plt.title(\'Chebyshev I lowpass filter fit to constraints\')\n    >>> plt.xlabel(\'Normalized frequency\')\n    >>> plt.ylabel(\'Amplitude [dB]\')\n    >>> plt.grid(which=\'both\', axis=\'both\')\n    >>> plt.fill([.01, 0.2, 0.2, .01], [-3, -3, -99, -99], \'0.9\', lw=0) # stop\n    >>> plt.fill([0.3, 0.3,   2,   2], [ 9, -40, -40,  9], \'0.9\', lw=0) # pass\n    >>> plt.axis([0.08, 1, -60, 3])\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Name (line 3099):
    
    # Assigning a Call to a Name (line 3099):
    
    # Call to atleast_1d(...): (line 3099)
    # Processing the call arguments (line 3099)
    # Getting the type of 'wp' (line 3099)
    wp_262695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 20), 'wp', False)
    # Processing the call keyword arguments (line 3099)
    kwargs_262696 = {}
    # Getting the type of 'atleast_1d' (line 3099)
    atleast_1d_262694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 9), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 3099)
    atleast_1d_call_result_262697 = invoke(stypy.reporting.localization.Localization(__file__, 3099, 9), atleast_1d_262694, *[wp_262695], **kwargs_262696)
    
    # Assigning a type to the variable 'wp' (line 3099)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3099, 4), 'wp', atleast_1d_call_result_262697)
    
    # Assigning a Call to a Name (line 3100):
    
    # Assigning a Call to a Name (line 3100):
    
    # Call to atleast_1d(...): (line 3100)
    # Processing the call arguments (line 3100)
    # Getting the type of 'ws' (line 3100)
    ws_262699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 20), 'ws', False)
    # Processing the call keyword arguments (line 3100)
    kwargs_262700 = {}
    # Getting the type of 'atleast_1d' (line 3100)
    atleast_1d_262698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 9), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 3100)
    atleast_1d_call_result_262701 = invoke(stypy.reporting.localization.Localization(__file__, 3100, 9), atleast_1d_262698, *[ws_262699], **kwargs_262700)
    
    # Assigning a type to the variable 'ws' (line 3100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3100, 4), 'ws', atleast_1d_call_result_262701)
    
    # Assigning a BinOp to a Name (line 3101):
    
    # Assigning a BinOp to a Name (line 3101):
    int_262702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3101, 18), 'int')
    
    # Call to len(...): (line 3101)
    # Processing the call arguments (line 3101)
    # Getting the type of 'wp' (line 3101)
    wp_262704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 27), 'wp', False)
    # Processing the call keyword arguments (line 3101)
    kwargs_262705 = {}
    # Getting the type of 'len' (line 3101)
    len_262703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 23), 'len', False)
    # Calling len(args, kwargs) (line 3101)
    len_call_result_262706 = invoke(stypy.reporting.localization.Localization(__file__, 3101, 23), len_262703, *[wp_262704], **kwargs_262705)
    
    int_262707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3101, 33), 'int')
    # Applying the binary operator '-' (line 3101)
    result_sub_262708 = python_operator(stypy.reporting.localization.Localization(__file__, 3101, 23), '-', len_call_result_262706, int_262707)
    
    # Applying the binary operator '*' (line 3101)
    result_mul_262709 = python_operator(stypy.reporting.localization.Localization(__file__, 3101, 18), '*', int_262702, result_sub_262708)
    
    # Assigning a type to the variable 'filter_type' (line 3101)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3101, 4), 'filter_type', result_mul_262709)
    
    
    
    # Obtaining the type of the subscript
    int_262710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3102, 10), 'int')
    # Getting the type of 'wp' (line 3102)
    wp_262711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 7), 'wp')
    # Obtaining the member '__getitem__' of a type (line 3102)
    getitem___262712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3102, 7), wp_262711, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3102)
    subscript_call_result_262713 = invoke(stypy.reporting.localization.Localization(__file__, 3102, 7), getitem___262712, int_262710)
    
    
    # Obtaining the type of the subscript
    int_262714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3102, 18), 'int')
    # Getting the type of 'ws' (line 3102)
    ws_262715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3102, 15), 'ws')
    # Obtaining the member '__getitem__' of a type (line 3102)
    getitem___262716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3102, 15), ws_262715, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3102)
    subscript_call_result_262717 = invoke(stypy.reporting.localization.Localization(__file__, 3102, 15), getitem___262716, int_262714)
    
    # Applying the binary operator '<' (line 3102)
    result_lt_262718 = python_operator(stypy.reporting.localization.Localization(__file__, 3102, 7), '<', subscript_call_result_262713, subscript_call_result_262717)
    
    # Testing the type of an if condition (line 3102)
    if_condition_262719 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3102, 4), result_lt_262718)
    # Assigning a type to the variable 'if_condition_262719' (line 3102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3102, 4), 'if_condition_262719', if_condition_262719)
    # SSA begins for if statement (line 3102)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'filter_type' (line 3103)
    filter_type_262720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 8), 'filter_type')
    int_262721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3103, 23), 'int')
    # Applying the binary operator '+=' (line 3103)
    result_iadd_262722 = python_operator(stypy.reporting.localization.Localization(__file__, 3103, 8), '+=', filter_type_262720, int_262721)
    # Assigning a type to the variable 'filter_type' (line 3103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3103, 8), 'filter_type', result_iadd_262722)
    
    # SSA branch for the else part of an if statement (line 3102)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'filter_type' (line 3105)
    filter_type_262723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 8), 'filter_type')
    int_262724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3105, 23), 'int')
    # Applying the binary operator '+=' (line 3105)
    result_iadd_262725 = python_operator(stypy.reporting.localization.Localization(__file__, 3105, 8), '+=', filter_type_262723, int_262724)
    # Assigning a type to the variable 'filter_type' (line 3105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3105, 8), 'filter_type', result_iadd_262725)
    
    # SSA join for if statement (line 3102)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'analog' (line 3108)
    analog_262726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3108, 11), 'analog')
    # Applying the 'not' unary operator (line 3108)
    result_not__262727 = python_operator(stypy.reporting.localization.Localization(__file__, 3108, 7), 'not', analog_262726)
    
    # Testing the type of an if condition (line 3108)
    if_condition_262728 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3108, 4), result_not__262727)
    # Assigning a type to the variable 'if_condition_262728' (line 3108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3108, 4), 'if_condition_262728', if_condition_262728)
    # SSA begins for if statement (line 3108)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3109):
    
    # Assigning a Call to a Name (line 3109):
    
    # Call to tan(...): (line 3109)
    # Processing the call arguments (line 3109)
    # Getting the type of 'pi' (line 3109)
    pi_262730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3109, 20), 'pi', False)
    # Getting the type of 'wp' (line 3109)
    wp_262731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3109, 25), 'wp', False)
    # Applying the binary operator '*' (line 3109)
    result_mul_262732 = python_operator(stypy.reporting.localization.Localization(__file__, 3109, 20), '*', pi_262730, wp_262731)
    
    float_262733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3109, 30), 'float')
    # Applying the binary operator 'div' (line 3109)
    result_div_262734 = python_operator(stypy.reporting.localization.Localization(__file__, 3109, 28), 'div', result_mul_262732, float_262733)
    
    # Processing the call keyword arguments (line 3109)
    kwargs_262735 = {}
    # Getting the type of 'tan' (line 3109)
    tan_262729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3109, 16), 'tan', False)
    # Calling tan(args, kwargs) (line 3109)
    tan_call_result_262736 = invoke(stypy.reporting.localization.Localization(__file__, 3109, 16), tan_262729, *[result_div_262734], **kwargs_262735)
    
    # Assigning a type to the variable 'passb' (line 3109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3109, 8), 'passb', tan_call_result_262736)
    
    # Assigning a Call to a Name (line 3110):
    
    # Assigning a Call to a Name (line 3110):
    
    # Call to tan(...): (line 3110)
    # Processing the call arguments (line 3110)
    # Getting the type of 'pi' (line 3110)
    pi_262738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 20), 'pi', False)
    # Getting the type of 'ws' (line 3110)
    ws_262739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 25), 'ws', False)
    # Applying the binary operator '*' (line 3110)
    result_mul_262740 = python_operator(stypy.reporting.localization.Localization(__file__, 3110, 20), '*', pi_262738, ws_262739)
    
    float_262741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3110, 30), 'float')
    # Applying the binary operator 'div' (line 3110)
    result_div_262742 = python_operator(stypy.reporting.localization.Localization(__file__, 3110, 28), 'div', result_mul_262740, float_262741)
    
    # Processing the call keyword arguments (line 3110)
    kwargs_262743 = {}
    # Getting the type of 'tan' (line 3110)
    tan_262737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 16), 'tan', False)
    # Calling tan(args, kwargs) (line 3110)
    tan_call_result_262744 = invoke(stypy.reporting.localization.Localization(__file__, 3110, 16), tan_262737, *[result_div_262742], **kwargs_262743)
    
    # Assigning a type to the variable 'stopb' (line 3110)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3110, 8), 'stopb', tan_call_result_262744)
    # SSA branch for the else part of an if statement (line 3108)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 3112):
    
    # Assigning a BinOp to a Name (line 3112):
    # Getting the type of 'wp' (line 3112)
    wp_262745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3112, 16), 'wp')
    float_262746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3112, 21), 'float')
    # Applying the binary operator '*' (line 3112)
    result_mul_262747 = python_operator(stypy.reporting.localization.Localization(__file__, 3112, 16), '*', wp_262745, float_262746)
    
    # Assigning a type to the variable 'passb' (line 3112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3112, 8), 'passb', result_mul_262747)
    
    # Assigning a BinOp to a Name (line 3113):
    
    # Assigning a BinOp to a Name (line 3113):
    # Getting the type of 'ws' (line 3113)
    ws_262748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3113, 16), 'ws')
    float_262749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3113, 21), 'float')
    # Applying the binary operator '*' (line 3113)
    result_mul_262750 = python_operator(stypy.reporting.localization.Localization(__file__, 3113, 16), '*', ws_262748, float_262749)
    
    # Assigning a type to the variable 'stopb' (line 3113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3113, 8), 'stopb', result_mul_262750)
    # SSA join for if statement (line 3108)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'filter_type' (line 3115)
    filter_type_262751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 7), 'filter_type')
    int_262752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3115, 22), 'int')
    # Applying the binary operator '==' (line 3115)
    result_eq_262753 = python_operator(stypy.reporting.localization.Localization(__file__, 3115, 7), '==', filter_type_262751, int_262752)
    
    # Testing the type of an if condition (line 3115)
    if_condition_262754 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3115, 4), result_eq_262753)
    # Assigning a type to the variable 'if_condition_262754' (line 3115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3115, 4), 'if_condition_262754', if_condition_262754)
    # SSA begins for if statement (line 3115)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3116):
    
    # Assigning a BinOp to a Name (line 3116):
    # Getting the type of 'stopb' (line 3116)
    stopb_262755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 14), 'stopb')
    # Getting the type of 'passb' (line 3116)
    passb_262756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 22), 'passb')
    # Applying the binary operator 'div' (line 3116)
    result_div_262757 = python_operator(stypy.reporting.localization.Localization(__file__, 3116, 14), 'div', stopb_262755, passb_262756)
    
    # Assigning a type to the variable 'nat' (line 3116)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3116, 8), 'nat', result_div_262757)
    # SSA branch for the else part of an if statement (line 3115)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3117)
    filter_type_262758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 9), 'filter_type')
    int_262759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3117, 24), 'int')
    # Applying the binary operator '==' (line 3117)
    result_eq_262760 = python_operator(stypy.reporting.localization.Localization(__file__, 3117, 9), '==', filter_type_262758, int_262759)
    
    # Testing the type of an if condition (line 3117)
    if_condition_262761 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3117, 9), result_eq_262760)
    # Assigning a type to the variable 'if_condition_262761' (line 3117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3117, 9), 'if_condition_262761', if_condition_262761)
    # SSA begins for if statement (line 3117)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3118):
    
    # Assigning a BinOp to a Name (line 3118):
    # Getting the type of 'passb' (line 3118)
    passb_262762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 14), 'passb')
    # Getting the type of 'stopb' (line 3118)
    stopb_262763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 22), 'stopb')
    # Applying the binary operator 'div' (line 3118)
    result_div_262764 = python_operator(stypy.reporting.localization.Localization(__file__, 3118, 14), 'div', passb_262762, stopb_262763)
    
    # Assigning a type to the variable 'nat' (line 3118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3118, 8), 'nat', result_div_262764)
    # SSA branch for the else part of an if statement (line 3117)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3119)
    filter_type_262765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 9), 'filter_type')
    int_262766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3119, 24), 'int')
    # Applying the binary operator '==' (line 3119)
    result_eq_262767 = python_operator(stypy.reporting.localization.Localization(__file__, 3119, 9), '==', filter_type_262765, int_262766)
    
    # Testing the type of an if condition (line 3119)
    if_condition_262768 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3119, 9), result_eq_262767)
    # Assigning a type to the variable 'if_condition_262768' (line 3119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3119, 9), 'if_condition_262768', if_condition_262768)
    # SSA begins for if statement (line 3119)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3120):
    
    # Assigning a Call to a Name (line 3120):
    
    # Call to fminbound(...): (line 3120)
    # Processing the call arguments (line 3120)
    # Getting the type of 'band_stop_obj' (line 3120)
    band_stop_obj_262771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 33), 'band_stop_obj', False)
    
    # Obtaining the type of the subscript
    int_262772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3120, 54), 'int')
    # Getting the type of 'passb' (line 3120)
    passb_262773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 48), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3120)
    getitem___262774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3120, 48), passb_262773, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3120)
    subscript_call_result_262775 = invoke(stypy.reporting.localization.Localization(__file__, 3120, 48), getitem___262774, int_262772)
    
    
    # Obtaining the type of the subscript
    int_262776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3120, 64), 'int')
    # Getting the type of 'stopb' (line 3120)
    stopb_262777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 58), 'stopb', False)
    # Obtaining the member '__getitem__' of a type (line 3120)
    getitem___262778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3120, 58), stopb_262777, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3120)
    subscript_call_result_262779 = invoke(stypy.reporting.localization.Localization(__file__, 3120, 58), getitem___262778, int_262776)
    
    float_262780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3120, 69), 'float')
    # Applying the binary operator '-' (line 3120)
    result_sub_262781 = python_operator(stypy.reporting.localization.Localization(__file__, 3120, 58), '-', subscript_call_result_262779, float_262780)
    
    # Processing the call keyword arguments (line 3120)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3121)
    tuple_262782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3121, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3121)
    # Adding element type (line 3121)
    int_262783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3121, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3121, 39), tuple_262782, int_262783)
    # Adding element type (line 3121)
    # Getting the type of 'passb' (line 3121)
    passb_262784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3121, 42), 'passb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3121, 39), tuple_262782, passb_262784)
    # Adding element type (line 3121)
    # Getting the type of 'stopb' (line 3121)
    stopb_262785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3121, 49), 'stopb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3121, 39), tuple_262782, stopb_262785)
    # Adding element type (line 3121)
    # Getting the type of 'gpass' (line 3121)
    gpass_262786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3121, 56), 'gpass', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3121, 39), tuple_262782, gpass_262786)
    # Adding element type (line 3121)
    # Getting the type of 'gstop' (line 3121)
    gstop_262787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3121, 63), 'gstop', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3121, 39), tuple_262782, gstop_262787)
    # Adding element type (line 3121)
    str_262788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3121, 70), 'str', 'cheby')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3121, 39), tuple_262782, str_262788)
    
    keyword_262789 = tuple_262782
    int_262790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3122, 38), 'int')
    keyword_262791 = int_262790
    kwargs_262792 = {'disp': keyword_262791, 'args': keyword_262789}
    # Getting the type of 'optimize' (line 3120)
    optimize_262769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 14), 'optimize', False)
    # Obtaining the member 'fminbound' of a type (line 3120)
    fminbound_262770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3120, 14), optimize_262769, 'fminbound')
    # Calling fminbound(args, kwargs) (line 3120)
    fminbound_call_result_262793 = invoke(stypy.reporting.localization.Localization(__file__, 3120, 14), fminbound_262770, *[band_stop_obj_262771, subscript_call_result_262775, result_sub_262781], **kwargs_262792)
    
    # Assigning a type to the variable 'wp0' (line 3120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3120, 8), 'wp0', fminbound_call_result_262793)
    
    # Assigning a Name to a Subscript (line 3123):
    
    # Assigning a Name to a Subscript (line 3123):
    # Getting the type of 'wp0' (line 3123)
    wp0_262794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 19), 'wp0')
    # Getting the type of 'passb' (line 3123)
    passb_262795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 8), 'passb')
    int_262796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3123, 14), 'int')
    # Storing an element on a container (line 3123)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3123, 8), passb_262795, (int_262796, wp0_262794))
    
    # Assigning a Call to a Name (line 3124):
    
    # Assigning a Call to a Name (line 3124):
    
    # Call to fminbound(...): (line 3124)
    # Processing the call arguments (line 3124)
    # Getting the type of 'band_stop_obj' (line 3124)
    band_stop_obj_262799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 33), 'band_stop_obj', False)
    
    # Obtaining the type of the subscript
    int_262800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3124, 54), 'int')
    # Getting the type of 'stopb' (line 3124)
    stopb_262801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 48), 'stopb', False)
    # Obtaining the member '__getitem__' of a type (line 3124)
    getitem___262802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3124, 48), stopb_262801, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3124)
    subscript_call_result_262803 = invoke(stypy.reporting.localization.Localization(__file__, 3124, 48), getitem___262802, int_262800)
    
    float_262804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3124, 59), 'float')
    # Applying the binary operator '+' (line 3124)
    result_add_262805 = python_operator(stypy.reporting.localization.Localization(__file__, 3124, 48), '+', subscript_call_result_262803, float_262804)
    
    
    # Obtaining the type of the subscript
    int_262806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3124, 72), 'int')
    # Getting the type of 'passb' (line 3124)
    passb_262807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 66), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3124)
    getitem___262808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3124, 66), passb_262807, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3124)
    subscript_call_result_262809 = invoke(stypy.reporting.localization.Localization(__file__, 3124, 66), getitem___262808, int_262806)
    
    # Processing the call keyword arguments (line 3124)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3125)
    tuple_262810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3125, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3125)
    # Adding element type (line 3125)
    int_262811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3125, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3125, 39), tuple_262810, int_262811)
    # Adding element type (line 3125)
    # Getting the type of 'passb' (line 3125)
    passb_262812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 42), 'passb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3125, 39), tuple_262810, passb_262812)
    # Adding element type (line 3125)
    # Getting the type of 'stopb' (line 3125)
    stopb_262813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 49), 'stopb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3125, 39), tuple_262810, stopb_262813)
    # Adding element type (line 3125)
    # Getting the type of 'gpass' (line 3125)
    gpass_262814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 56), 'gpass', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3125, 39), tuple_262810, gpass_262814)
    # Adding element type (line 3125)
    # Getting the type of 'gstop' (line 3125)
    gstop_262815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 63), 'gstop', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3125, 39), tuple_262810, gstop_262815)
    # Adding element type (line 3125)
    str_262816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3125, 70), 'str', 'cheby')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3125, 39), tuple_262810, str_262816)
    
    keyword_262817 = tuple_262810
    int_262818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3126, 38), 'int')
    keyword_262819 = int_262818
    kwargs_262820 = {'disp': keyword_262819, 'args': keyword_262817}
    # Getting the type of 'optimize' (line 3124)
    optimize_262797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 14), 'optimize', False)
    # Obtaining the member 'fminbound' of a type (line 3124)
    fminbound_262798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3124, 14), optimize_262797, 'fminbound')
    # Calling fminbound(args, kwargs) (line 3124)
    fminbound_call_result_262821 = invoke(stypy.reporting.localization.Localization(__file__, 3124, 14), fminbound_262798, *[band_stop_obj_262799, result_add_262805, subscript_call_result_262809], **kwargs_262820)
    
    # Assigning a type to the variable 'wp1' (line 3124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3124, 8), 'wp1', fminbound_call_result_262821)
    
    # Assigning a Name to a Subscript (line 3127):
    
    # Assigning a Name to a Subscript (line 3127):
    # Getting the type of 'wp1' (line 3127)
    wp1_262822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 19), 'wp1')
    # Getting the type of 'passb' (line 3127)
    passb_262823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 8), 'passb')
    int_262824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3127, 14), 'int')
    # Storing an element on a container (line 3127)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3127, 8), passb_262823, (int_262824, wp1_262822))
    
    # Assigning a BinOp to a Name (line 3128):
    
    # Assigning a BinOp to a Name (line 3128):
    # Getting the type of 'stopb' (line 3128)
    stopb_262825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 16), 'stopb')
    
    # Obtaining the type of the subscript
    int_262826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3128, 31), 'int')
    # Getting the type of 'passb' (line 3128)
    passb_262827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 25), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3128)
    getitem___262828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3128, 25), passb_262827, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3128)
    subscript_call_result_262829 = invoke(stypy.reporting.localization.Localization(__file__, 3128, 25), getitem___262828, int_262826)
    
    
    # Obtaining the type of the subscript
    int_262830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3128, 42), 'int')
    # Getting the type of 'passb' (line 3128)
    passb_262831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3128, 36), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3128)
    getitem___262832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3128, 36), passb_262831, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3128)
    subscript_call_result_262833 = invoke(stypy.reporting.localization.Localization(__file__, 3128, 36), getitem___262832, int_262830)
    
    # Applying the binary operator '-' (line 3128)
    result_sub_262834 = python_operator(stypy.reporting.localization.Localization(__file__, 3128, 25), '-', subscript_call_result_262829, subscript_call_result_262833)
    
    # Applying the binary operator '*' (line 3128)
    result_mul_262835 = python_operator(stypy.reporting.localization.Localization(__file__, 3128, 16), '*', stopb_262825, result_sub_262834)
    
    # Getting the type of 'stopb' (line 3129)
    stopb_262836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 16), 'stopb')
    int_262837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3129, 25), 'int')
    # Applying the binary operator '**' (line 3129)
    result_pow_262838 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 16), '**', stopb_262836, int_262837)
    
    
    # Obtaining the type of the subscript
    int_262839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3129, 35), 'int')
    # Getting the type of 'passb' (line 3129)
    passb_262840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 29), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3129)
    getitem___262841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 29), passb_262840, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3129)
    subscript_call_result_262842 = invoke(stypy.reporting.localization.Localization(__file__, 3129, 29), getitem___262841, int_262839)
    
    
    # Obtaining the type of the subscript
    int_262843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3129, 46), 'int')
    # Getting the type of 'passb' (line 3129)
    passb_262844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 40), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3129)
    getitem___262845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 40), passb_262844, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3129)
    subscript_call_result_262846 = invoke(stypy.reporting.localization.Localization(__file__, 3129, 40), getitem___262845, int_262843)
    
    # Applying the binary operator '*' (line 3129)
    result_mul_262847 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 29), '*', subscript_call_result_262842, subscript_call_result_262846)
    
    # Applying the binary operator '-' (line 3129)
    result_sub_262848 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 16), '-', result_pow_262838, result_mul_262847)
    
    # Applying the binary operator 'div' (line 3128)
    result_div_262849 = python_operator(stypy.reporting.localization.Localization(__file__, 3128, 15), 'div', result_mul_262835, result_sub_262848)
    
    # Assigning a type to the variable 'nat' (line 3128)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3128, 8), 'nat', result_div_262849)
    # SSA branch for the else part of an if statement (line 3119)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3130)
    filter_type_262850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 9), 'filter_type')
    int_262851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3130, 24), 'int')
    # Applying the binary operator '==' (line 3130)
    result_eq_262852 = python_operator(stypy.reporting.localization.Localization(__file__, 3130, 9), '==', filter_type_262850, int_262851)
    
    # Testing the type of an if condition (line 3130)
    if_condition_262853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3130, 9), result_eq_262852)
    # Assigning a type to the variable 'if_condition_262853' (line 3130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3130, 9), 'if_condition_262853', if_condition_262853)
    # SSA begins for if statement (line 3130)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3131):
    
    # Assigning a BinOp to a Name (line 3131):
    # Getting the type of 'stopb' (line 3131)
    stopb_262854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 16), 'stopb')
    int_262855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3131, 25), 'int')
    # Applying the binary operator '**' (line 3131)
    result_pow_262856 = python_operator(stypy.reporting.localization.Localization(__file__, 3131, 16), '**', stopb_262854, int_262855)
    
    
    # Obtaining the type of the subscript
    int_262857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3131, 35), 'int')
    # Getting the type of 'passb' (line 3131)
    passb_262858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 29), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3131)
    getitem___262859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3131, 29), passb_262858, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3131)
    subscript_call_result_262860 = invoke(stypy.reporting.localization.Localization(__file__, 3131, 29), getitem___262859, int_262857)
    
    
    # Obtaining the type of the subscript
    int_262861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3131, 46), 'int')
    # Getting the type of 'passb' (line 3131)
    passb_262862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 40), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3131)
    getitem___262863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3131, 40), passb_262862, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3131)
    subscript_call_result_262864 = invoke(stypy.reporting.localization.Localization(__file__, 3131, 40), getitem___262863, int_262861)
    
    # Applying the binary operator '*' (line 3131)
    result_mul_262865 = python_operator(stypy.reporting.localization.Localization(__file__, 3131, 29), '*', subscript_call_result_262860, subscript_call_result_262864)
    
    # Applying the binary operator '-' (line 3131)
    result_sub_262866 = python_operator(stypy.reporting.localization.Localization(__file__, 3131, 16), '-', result_pow_262856, result_mul_262865)
    
    # Getting the type of 'stopb' (line 3132)
    stopb_262867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 16), 'stopb')
    
    # Obtaining the type of the subscript
    int_262868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3132, 31), 'int')
    # Getting the type of 'passb' (line 3132)
    passb_262869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 25), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3132)
    getitem___262870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3132, 25), passb_262869, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3132)
    subscript_call_result_262871 = invoke(stypy.reporting.localization.Localization(__file__, 3132, 25), getitem___262870, int_262868)
    
    
    # Obtaining the type of the subscript
    int_262872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3132, 42), 'int')
    # Getting the type of 'passb' (line 3132)
    passb_262873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3132, 36), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3132)
    getitem___262874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3132, 36), passb_262873, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3132)
    subscript_call_result_262875 = invoke(stypy.reporting.localization.Localization(__file__, 3132, 36), getitem___262874, int_262872)
    
    # Applying the binary operator '-' (line 3132)
    result_sub_262876 = python_operator(stypy.reporting.localization.Localization(__file__, 3132, 25), '-', subscript_call_result_262871, subscript_call_result_262875)
    
    # Applying the binary operator '*' (line 3132)
    result_mul_262877 = python_operator(stypy.reporting.localization.Localization(__file__, 3132, 16), '*', stopb_262867, result_sub_262876)
    
    # Applying the binary operator 'div' (line 3131)
    result_div_262878 = python_operator(stypy.reporting.localization.Localization(__file__, 3131, 15), 'div', result_sub_262866, result_mul_262877)
    
    # Assigning a type to the variable 'nat' (line 3131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3131, 8), 'nat', result_div_262878)
    # SSA join for if statement (line 3130)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3119)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3117)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3115)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3134):
    
    # Assigning a Call to a Name (line 3134):
    
    # Call to min(...): (line 3134)
    # Processing the call arguments (line 3134)
    
    # Call to abs(...): (line 3134)
    # Processing the call arguments (line 3134)
    # Getting the type of 'nat' (line 3134)
    nat_262881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 18), 'nat', False)
    # Processing the call keyword arguments (line 3134)
    kwargs_262882 = {}
    # Getting the type of 'abs' (line 3134)
    abs_262880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 14), 'abs', False)
    # Calling abs(args, kwargs) (line 3134)
    abs_call_result_262883 = invoke(stypy.reporting.localization.Localization(__file__, 3134, 14), abs_262880, *[nat_262881], **kwargs_262882)
    
    # Processing the call keyword arguments (line 3134)
    kwargs_262884 = {}
    # Getting the type of 'min' (line 3134)
    min_262879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3134, 10), 'min', False)
    # Calling min(args, kwargs) (line 3134)
    min_call_result_262885 = invoke(stypy.reporting.localization.Localization(__file__, 3134, 10), min_262879, *[abs_call_result_262883], **kwargs_262884)
    
    # Assigning a type to the variable 'nat' (line 3134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3134, 4), 'nat', min_call_result_262885)
    
    # Assigning a BinOp to a Name (line 3136):
    
    # Assigning a BinOp to a Name (line 3136):
    int_262886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3136, 12), 'int')
    float_262887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3136, 19), 'float')
    
    # Call to abs(...): (line 3136)
    # Processing the call arguments (line 3136)
    # Getting the type of 'gstop' (line 3136)
    gstop_262889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 29), 'gstop', False)
    # Processing the call keyword arguments (line 3136)
    kwargs_262890 = {}
    # Getting the type of 'abs' (line 3136)
    abs_262888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 25), 'abs', False)
    # Calling abs(args, kwargs) (line 3136)
    abs_call_result_262891 = invoke(stypy.reporting.localization.Localization(__file__, 3136, 25), abs_262888, *[gstop_262889], **kwargs_262890)
    
    # Applying the binary operator '*' (line 3136)
    result_mul_262892 = python_operator(stypy.reporting.localization.Localization(__file__, 3136, 19), '*', float_262887, abs_call_result_262891)
    
    # Applying the binary operator '**' (line 3136)
    result_pow_262893 = python_operator(stypy.reporting.localization.Localization(__file__, 3136, 12), '**', int_262886, result_mul_262892)
    
    # Assigning a type to the variable 'GSTOP' (line 3136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3136, 4), 'GSTOP', result_pow_262893)
    
    # Assigning a BinOp to a Name (line 3137):
    
    # Assigning a BinOp to a Name (line 3137):
    int_262894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3137, 12), 'int')
    float_262895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3137, 19), 'float')
    
    # Call to abs(...): (line 3137)
    # Processing the call arguments (line 3137)
    # Getting the type of 'gpass' (line 3137)
    gpass_262897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 29), 'gpass', False)
    # Processing the call keyword arguments (line 3137)
    kwargs_262898 = {}
    # Getting the type of 'abs' (line 3137)
    abs_262896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 25), 'abs', False)
    # Calling abs(args, kwargs) (line 3137)
    abs_call_result_262899 = invoke(stypy.reporting.localization.Localization(__file__, 3137, 25), abs_262896, *[gpass_262897], **kwargs_262898)
    
    # Applying the binary operator '*' (line 3137)
    result_mul_262900 = python_operator(stypy.reporting.localization.Localization(__file__, 3137, 19), '*', float_262895, abs_call_result_262899)
    
    # Applying the binary operator '**' (line 3137)
    result_pow_262901 = python_operator(stypy.reporting.localization.Localization(__file__, 3137, 12), '**', int_262894, result_mul_262900)
    
    # Assigning a type to the variable 'GPASS' (line 3137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3137, 4), 'GPASS', result_pow_262901)
    
    # Assigning a Call to a Name (line 3138):
    
    # Assigning a Call to a Name (line 3138):
    
    # Call to int(...): (line 3138)
    # Processing the call arguments (line 3138)
    
    # Call to ceil(...): (line 3138)
    # Processing the call arguments (line 3138)
    
    # Call to arccosh(...): (line 3138)
    # Processing the call arguments (line 3138)
    
    # Call to sqrt(...): (line 3138)
    # Processing the call arguments (line 3138)
    # Getting the type of 'GSTOP' (line 3138)
    GSTOP_262906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 33), 'GSTOP', False)
    float_262907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3138, 41), 'float')
    # Applying the binary operator '-' (line 3138)
    result_sub_262908 = python_operator(stypy.reporting.localization.Localization(__file__, 3138, 33), '-', GSTOP_262906, float_262907)
    
    # Getting the type of 'GPASS' (line 3138)
    GPASS_262909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 49), 'GPASS', False)
    float_262910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3138, 57), 'float')
    # Applying the binary operator '-' (line 3138)
    result_sub_262911 = python_operator(stypy.reporting.localization.Localization(__file__, 3138, 49), '-', GPASS_262909, float_262910)
    
    # Applying the binary operator 'div' (line 3138)
    result_div_262912 = python_operator(stypy.reporting.localization.Localization(__file__, 3138, 32), 'div', result_sub_262908, result_sub_262911)
    
    # Processing the call keyword arguments (line 3138)
    kwargs_262913 = {}
    # Getting the type of 'sqrt' (line 3138)
    sqrt_262905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 27), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3138)
    sqrt_call_result_262914 = invoke(stypy.reporting.localization.Localization(__file__, 3138, 27), sqrt_262905, *[result_div_262912], **kwargs_262913)
    
    # Processing the call keyword arguments (line 3138)
    kwargs_262915 = {}
    # Getting the type of 'arccosh' (line 3138)
    arccosh_262904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 19), 'arccosh', False)
    # Calling arccosh(args, kwargs) (line 3138)
    arccosh_call_result_262916 = invoke(stypy.reporting.localization.Localization(__file__, 3138, 19), arccosh_262904, *[sqrt_call_result_262914], **kwargs_262915)
    
    
    # Call to arccosh(...): (line 3139)
    # Processing the call arguments (line 3139)
    # Getting the type of 'nat' (line 3139)
    nat_262918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 27), 'nat', False)
    # Processing the call keyword arguments (line 3139)
    kwargs_262919 = {}
    # Getting the type of 'arccosh' (line 3139)
    arccosh_262917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 19), 'arccosh', False)
    # Calling arccosh(args, kwargs) (line 3139)
    arccosh_call_result_262920 = invoke(stypy.reporting.localization.Localization(__file__, 3139, 19), arccosh_262917, *[nat_262918], **kwargs_262919)
    
    # Applying the binary operator 'div' (line 3138)
    result_div_262921 = python_operator(stypy.reporting.localization.Localization(__file__, 3138, 19), 'div', arccosh_call_result_262916, arccosh_call_result_262920)
    
    # Processing the call keyword arguments (line 3138)
    kwargs_262922 = {}
    # Getting the type of 'ceil' (line 3138)
    ceil_262903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 14), 'ceil', False)
    # Calling ceil(args, kwargs) (line 3138)
    ceil_call_result_262923 = invoke(stypy.reporting.localization.Localization(__file__, 3138, 14), ceil_262903, *[result_div_262921], **kwargs_262922)
    
    # Processing the call keyword arguments (line 3138)
    kwargs_262924 = {}
    # Getting the type of 'int' (line 3138)
    int_262902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 10), 'int', False)
    # Calling int(args, kwargs) (line 3138)
    int_call_result_262925 = invoke(stypy.reporting.localization.Localization(__file__, 3138, 10), int_262902, *[ceil_call_result_262923], **kwargs_262924)
    
    # Assigning a type to the variable 'ord' (line 3138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3138, 4), 'ord', int_call_result_262925)
    
    
    # Getting the type of 'analog' (line 3142)
    analog_262926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3142, 11), 'analog')
    # Applying the 'not' unary operator (line 3142)
    result_not__262927 = python_operator(stypy.reporting.localization.Localization(__file__, 3142, 7), 'not', analog_262926)
    
    # Testing the type of an if condition (line 3142)
    if_condition_262928 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3142, 4), result_not__262927)
    # Assigning a type to the variable 'if_condition_262928' (line 3142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3142, 4), 'if_condition_262928', if_condition_262928)
    # SSA begins for if statement (line 3142)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3143):
    
    # Assigning a BinOp to a Name (line 3143):
    float_262929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3143, 14), 'float')
    # Getting the type of 'pi' (line 3143)
    pi_262930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3143, 20), 'pi')
    # Applying the binary operator 'div' (line 3143)
    result_div_262931 = python_operator(stypy.reporting.localization.Localization(__file__, 3143, 14), 'div', float_262929, pi_262930)
    
    
    # Call to arctan(...): (line 3143)
    # Processing the call arguments (line 3143)
    # Getting the type of 'passb' (line 3143)
    passb_262933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3143, 33), 'passb', False)
    # Processing the call keyword arguments (line 3143)
    kwargs_262934 = {}
    # Getting the type of 'arctan' (line 3143)
    arctan_262932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3143, 26), 'arctan', False)
    # Calling arctan(args, kwargs) (line 3143)
    arctan_call_result_262935 = invoke(stypy.reporting.localization.Localization(__file__, 3143, 26), arctan_262932, *[passb_262933], **kwargs_262934)
    
    # Applying the binary operator '*' (line 3143)
    result_mul_262936 = python_operator(stypy.reporting.localization.Localization(__file__, 3143, 13), '*', result_div_262931, arctan_call_result_262935)
    
    # Assigning a type to the variable 'wn' (line 3143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3143, 8), 'wn', result_mul_262936)
    # SSA branch for the else part of an if statement (line 3142)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 3145):
    
    # Assigning a Name to a Name (line 3145):
    # Getting the type of 'passb' (line 3145)
    passb_262937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3145, 13), 'passb')
    # Assigning a type to the variable 'wn' (line 3145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3145, 8), 'wn', passb_262937)
    # SSA join for if statement (line 3142)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 3147)
    # Processing the call arguments (line 3147)
    # Getting the type of 'wn' (line 3147)
    wn_262939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 11), 'wn', False)
    # Processing the call keyword arguments (line 3147)
    kwargs_262940 = {}
    # Getting the type of 'len' (line 3147)
    len_262938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 7), 'len', False)
    # Calling len(args, kwargs) (line 3147)
    len_call_result_262941 = invoke(stypy.reporting.localization.Localization(__file__, 3147, 7), len_262938, *[wn_262939], **kwargs_262940)
    
    int_262942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3147, 18), 'int')
    # Applying the binary operator '==' (line 3147)
    result_eq_262943 = python_operator(stypy.reporting.localization.Localization(__file__, 3147, 7), '==', len_call_result_262941, int_262942)
    
    # Testing the type of an if condition (line 3147)
    if_condition_262944 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3147, 4), result_eq_262943)
    # Assigning a type to the variable 'if_condition_262944' (line 3147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3147, 4), 'if_condition_262944', if_condition_262944)
    # SSA begins for if statement (line 3147)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 3148):
    
    # Assigning a Subscript to a Name (line 3148):
    
    # Obtaining the type of the subscript
    int_262945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3148, 16), 'int')
    # Getting the type of 'wn' (line 3148)
    wn_262946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 13), 'wn')
    # Obtaining the member '__getitem__' of a type (line 3148)
    getitem___262947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3148, 13), wn_262946, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3148)
    subscript_call_result_262948 = invoke(stypy.reporting.localization.Localization(__file__, 3148, 13), getitem___262947, int_262945)
    
    # Assigning a type to the variable 'wn' (line 3148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3148, 8), 'wn', subscript_call_result_262948)
    # SSA join for if statement (line 3147)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3149)
    tuple_262949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3149, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3149)
    # Adding element type (line 3149)
    # Getting the type of 'ord' (line 3149)
    ord_262950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3149, 11), 'ord')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3149, 11), tuple_262949, ord_262950)
    # Adding element type (line 3149)
    # Getting the type of 'wn' (line 3149)
    wn_262951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3149, 16), 'wn')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3149, 11), tuple_262949, wn_262951)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3149, 4), 'stypy_return_type', tuple_262949)
    
    # ################# End of 'cheb1ord(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cheb1ord' in the type store
    # Getting the type of 'stypy_return_type' (line 3030)
    stypy_return_type_262952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_262952)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cheb1ord'
    return stypy_return_type_262952

# Assigning a type to the variable 'cheb1ord' (line 3030)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3030, 0), 'cheb1ord', cheb1ord)

@norecursion
def cheb2ord(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 3152)
    False_262953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3152, 42), 'False')
    defaults = [False_262953]
    # Create a new context for function 'cheb2ord'
    module_type_store = module_type_store.open_function_context('cheb2ord', 3152, 0, False)
    
    # Passed parameters checking function
    cheb2ord.stypy_localization = localization
    cheb2ord.stypy_type_of_self = None
    cheb2ord.stypy_type_store = module_type_store
    cheb2ord.stypy_function_name = 'cheb2ord'
    cheb2ord.stypy_param_names_list = ['wp', 'ws', 'gpass', 'gstop', 'analog']
    cheb2ord.stypy_varargs_param_name = None
    cheb2ord.stypy_kwargs_param_name = None
    cheb2ord.stypy_call_defaults = defaults
    cheb2ord.stypy_call_varargs = varargs
    cheb2ord.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cheb2ord', ['wp', 'ws', 'gpass', 'gstop', 'analog'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cheb2ord', localization, ['wp', 'ws', 'gpass', 'gstop', 'analog'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cheb2ord(...)' code ##################

    str_262954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3222, (-1)), 'str', 'Chebyshev type II filter order selection.\n\n    Return the order of the lowest order digital or analog Chebyshev Type II\n    filter that loses no more than `gpass` dB in the passband and has at least\n    `gstop` dB attenuation in the stopband.\n\n    Parameters\n    ----------\n    wp, ws : float\n        Passband and stopband edge frequencies.\n        For digital filters, these are normalized from 0 to 1, where 1 is the\n        Nyquist frequency, pi radians/sample.  (`wp` and `ws` are thus in\n        half-cycles / sample.)  For example:\n\n            - Lowpass:   wp = 0.2,          ws = 0.3\n            - Highpass:  wp = 0.3,          ws = 0.2\n            - Bandpass:  wp = [0.2, 0.5],   ws = [0.1, 0.6]\n            - Bandstop:  wp = [0.1, 0.6],   ws = [0.2, 0.5]\n\n        For analog filters, `wp` and `ws` are angular frequencies (e.g. rad/s).\n\n    gpass : float\n        The maximum loss in the passband (dB).\n    gstop : float\n        The minimum attenuation in the stopband (dB).\n    analog : bool, optional\n        When True, return an analog filter, otherwise a digital filter is\n        returned.\n\n    Returns\n    -------\n    ord : int\n        The lowest order for a Chebyshev type II filter that meets specs.\n    wn : ndarray or float\n        The Chebyshev natural frequency (the "3dB frequency") for use with\n        `cheby2` to give filter results.\n\n    See Also\n    --------\n    cheby2 : Filter design using order and critical points\n    buttord : Find order and critical points from passband and stopband spec\n    cheb1ord, ellipord\n    iirfilter : General filter design using order and critical frequencies\n    iirdesign : General filter design using passband and stopband spec\n\n    Examples\n    --------\n    Design a digital bandstop filter which rejects -60 dB from 0.2*(fs/2) to\n    0.5*(fs/2), while staying within 3 dB below 0.1*(fs/2) or above\n    0.6*(fs/2).  Plot its frequency response, showing the passband and\n    stopband constraints in gray.\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> N, Wn = signal.cheb2ord([0.1, 0.6], [0.2, 0.5], 3, 60)\n    >>> b, a = signal.cheby2(N, 60, Wn, \'stop\')\n    >>> w, h = signal.freqz(b, a)\n    >>> plt.semilogx(w / np.pi, 20 * np.log10(abs(h)))\n    >>> plt.title(\'Chebyshev II bandstop filter fit to constraints\')\n    >>> plt.xlabel(\'Normalized frequency\')\n    >>> plt.ylabel(\'Amplitude [dB]\')\n    >>> plt.grid(which=\'both\', axis=\'both\')\n    >>> plt.fill([.01, .1, .1, .01], [-3,  -3, -99, -99], \'0.9\', lw=0) # stop\n    >>> plt.fill([.2,  .2, .5,  .5], [ 9, -60, -60,   9], \'0.9\', lw=0) # pass\n    >>> plt.fill([.6,  .6,  2,   2], [-99, -3,  -3, -99], \'0.9\', lw=0) # stop\n    >>> plt.axis([0.06, 1, -80, 3])\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Name (line 3223):
    
    # Assigning a Call to a Name (line 3223):
    
    # Call to atleast_1d(...): (line 3223)
    # Processing the call arguments (line 3223)
    # Getting the type of 'wp' (line 3223)
    wp_262956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 20), 'wp', False)
    # Processing the call keyword arguments (line 3223)
    kwargs_262957 = {}
    # Getting the type of 'atleast_1d' (line 3223)
    atleast_1d_262955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 9), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 3223)
    atleast_1d_call_result_262958 = invoke(stypy.reporting.localization.Localization(__file__, 3223, 9), atleast_1d_262955, *[wp_262956], **kwargs_262957)
    
    # Assigning a type to the variable 'wp' (line 3223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3223, 4), 'wp', atleast_1d_call_result_262958)
    
    # Assigning a Call to a Name (line 3224):
    
    # Assigning a Call to a Name (line 3224):
    
    # Call to atleast_1d(...): (line 3224)
    # Processing the call arguments (line 3224)
    # Getting the type of 'ws' (line 3224)
    ws_262960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3224, 20), 'ws', False)
    # Processing the call keyword arguments (line 3224)
    kwargs_262961 = {}
    # Getting the type of 'atleast_1d' (line 3224)
    atleast_1d_262959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3224, 9), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 3224)
    atleast_1d_call_result_262962 = invoke(stypy.reporting.localization.Localization(__file__, 3224, 9), atleast_1d_262959, *[ws_262960], **kwargs_262961)
    
    # Assigning a type to the variable 'ws' (line 3224)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3224, 4), 'ws', atleast_1d_call_result_262962)
    
    # Assigning a BinOp to a Name (line 3225):
    
    # Assigning a BinOp to a Name (line 3225):
    int_262963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3225, 18), 'int')
    
    # Call to len(...): (line 3225)
    # Processing the call arguments (line 3225)
    # Getting the type of 'wp' (line 3225)
    wp_262965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 27), 'wp', False)
    # Processing the call keyword arguments (line 3225)
    kwargs_262966 = {}
    # Getting the type of 'len' (line 3225)
    len_262964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 23), 'len', False)
    # Calling len(args, kwargs) (line 3225)
    len_call_result_262967 = invoke(stypy.reporting.localization.Localization(__file__, 3225, 23), len_262964, *[wp_262965], **kwargs_262966)
    
    int_262968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3225, 33), 'int')
    # Applying the binary operator '-' (line 3225)
    result_sub_262969 = python_operator(stypy.reporting.localization.Localization(__file__, 3225, 23), '-', len_call_result_262967, int_262968)
    
    # Applying the binary operator '*' (line 3225)
    result_mul_262970 = python_operator(stypy.reporting.localization.Localization(__file__, 3225, 18), '*', int_262963, result_sub_262969)
    
    # Assigning a type to the variable 'filter_type' (line 3225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3225, 4), 'filter_type', result_mul_262970)
    
    
    
    # Obtaining the type of the subscript
    int_262971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3226, 10), 'int')
    # Getting the type of 'wp' (line 3226)
    wp_262972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3226, 7), 'wp')
    # Obtaining the member '__getitem__' of a type (line 3226)
    getitem___262973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3226, 7), wp_262972, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3226)
    subscript_call_result_262974 = invoke(stypy.reporting.localization.Localization(__file__, 3226, 7), getitem___262973, int_262971)
    
    
    # Obtaining the type of the subscript
    int_262975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3226, 18), 'int')
    # Getting the type of 'ws' (line 3226)
    ws_262976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3226, 15), 'ws')
    # Obtaining the member '__getitem__' of a type (line 3226)
    getitem___262977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3226, 15), ws_262976, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3226)
    subscript_call_result_262978 = invoke(stypy.reporting.localization.Localization(__file__, 3226, 15), getitem___262977, int_262975)
    
    # Applying the binary operator '<' (line 3226)
    result_lt_262979 = python_operator(stypy.reporting.localization.Localization(__file__, 3226, 7), '<', subscript_call_result_262974, subscript_call_result_262978)
    
    # Testing the type of an if condition (line 3226)
    if_condition_262980 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3226, 4), result_lt_262979)
    # Assigning a type to the variable 'if_condition_262980' (line 3226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3226, 4), 'if_condition_262980', if_condition_262980)
    # SSA begins for if statement (line 3226)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'filter_type' (line 3227)
    filter_type_262981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3227, 8), 'filter_type')
    int_262982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3227, 23), 'int')
    # Applying the binary operator '+=' (line 3227)
    result_iadd_262983 = python_operator(stypy.reporting.localization.Localization(__file__, 3227, 8), '+=', filter_type_262981, int_262982)
    # Assigning a type to the variable 'filter_type' (line 3227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3227, 8), 'filter_type', result_iadd_262983)
    
    # SSA branch for the else part of an if statement (line 3226)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'filter_type' (line 3229)
    filter_type_262984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3229, 8), 'filter_type')
    int_262985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3229, 23), 'int')
    # Applying the binary operator '+=' (line 3229)
    result_iadd_262986 = python_operator(stypy.reporting.localization.Localization(__file__, 3229, 8), '+=', filter_type_262984, int_262985)
    # Assigning a type to the variable 'filter_type' (line 3229)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3229, 8), 'filter_type', result_iadd_262986)
    
    # SSA join for if statement (line 3226)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'analog' (line 3232)
    analog_262987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3232, 11), 'analog')
    # Applying the 'not' unary operator (line 3232)
    result_not__262988 = python_operator(stypy.reporting.localization.Localization(__file__, 3232, 7), 'not', analog_262987)
    
    # Testing the type of an if condition (line 3232)
    if_condition_262989 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3232, 4), result_not__262988)
    # Assigning a type to the variable 'if_condition_262989' (line 3232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3232, 4), 'if_condition_262989', if_condition_262989)
    # SSA begins for if statement (line 3232)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3233):
    
    # Assigning a Call to a Name (line 3233):
    
    # Call to tan(...): (line 3233)
    # Processing the call arguments (line 3233)
    # Getting the type of 'pi' (line 3233)
    pi_262991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 20), 'pi', False)
    # Getting the type of 'wp' (line 3233)
    wp_262992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 25), 'wp', False)
    # Applying the binary operator '*' (line 3233)
    result_mul_262993 = python_operator(stypy.reporting.localization.Localization(__file__, 3233, 20), '*', pi_262991, wp_262992)
    
    float_262994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3233, 30), 'float')
    # Applying the binary operator 'div' (line 3233)
    result_div_262995 = python_operator(stypy.reporting.localization.Localization(__file__, 3233, 28), 'div', result_mul_262993, float_262994)
    
    # Processing the call keyword arguments (line 3233)
    kwargs_262996 = {}
    # Getting the type of 'tan' (line 3233)
    tan_262990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 16), 'tan', False)
    # Calling tan(args, kwargs) (line 3233)
    tan_call_result_262997 = invoke(stypy.reporting.localization.Localization(__file__, 3233, 16), tan_262990, *[result_div_262995], **kwargs_262996)
    
    # Assigning a type to the variable 'passb' (line 3233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3233, 8), 'passb', tan_call_result_262997)
    
    # Assigning a Call to a Name (line 3234):
    
    # Assigning a Call to a Name (line 3234):
    
    # Call to tan(...): (line 3234)
    # Processing the call arguments (line 3234)
    # Getting the type of 'pi' (line 3234)
    pi_262999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3234, 20), 'pi', False)
    # Getting the type of 'ws' (line 3234)
    ws_263000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3234, 25), 'ws', False)
    # Applying the binary operator '*' (line 3234)
    result_mul_263001 = python_operator(stypy.reporting.localization.Localization(__file__, 3234, 20), '*', pi_262999, ws_263000)
    
    float_263002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3234, 30), 'float')
    # Applying the binary operator 'div' (line 3234)
    result_div_263003 = python_operator(stypy.reporting.localization.Localization(__file__, 3234, 28), 'div', result_mul_263001, float_263002)
    
    # Processing the call keyword arguments (line 3234)
    kwargs_263004 = {}
    # Getting the type of 'tan' (line 3234)
    tan_262998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3234, 16), 'tan', False)
    # Calling tan(args, kwargs) (line 3234)
    tan_call_result_263005 = invoke(stypy.reporting.localization.Localization(__file__, 3234, 16), tan_262998, *[result_div_263003], **kwargs_263004)
    
    # Assigning a type to the variable 'stopb' (line 3234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3234, 8), 'stopb', tan_call_result_263005)
    # SSA branch for the else part of an if statement (line 3232)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 3236):
    
    # Assigning a BinOp to a Name (line 3236):
    # Getting the type of 'wp' (line 3236)
    wp_263006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 16), 'wp')
    float_263007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3236, 21), 'float')
    # Applying the binary operator '*' (line 3236)
    result_mul_263008 = python_operator(stypy.reporting.localization.Localization(__file__, 3236, 16), '*', wp_263006, float_263007)
    
    # Assigning a type to the variable 'passb' (line 3236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3236, 8), 'passb', result_mul_263008)
    
    # Assigning a BinOp to a Name (line 3237):
    
    # Assigning a BinOp to a Name (line 3237):
    # Getting the type of 'ws' (line 3237)
    ws_263009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3237, 16), 'ws')
    float_263010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3237, 21), 'float')
    # Applying the binary operator '*' (line 3237)
    result_mul_263011 = python_operator(stypy.reporting.localization.Localization(__file__, 3237, 16), '*', ws_263009, float_263010)
    
    # Assigning a type to the variable 'stopb' (line 3237)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3237, 8), 'stopb', result_mul_263011)
    # SSA join for if statement (line 3232)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'filter_type' (line 3239)
    filter_type_263012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 7), 'filter_type')
    int_263013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3239, 22), 'int')
    # Applying the binary operator '==' (line 3239)
    result_eq_263014 = python_operator(stypy.reporting.localization.Localization(__file__, 3239, 7), '==', filter_type_263012, int_263013)
    
    # Testing the type of an if condition (line 3239)
    if_condition_263015 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3239, 4), result_eq_263014)
    # Assigning a type to the variable 'if_condition_263015' (line 3239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3239, 4), 'if_condition_263015', if_condition_263015)
    # SSA begins for if statement (line 3239)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3240):
    
    # Assigning a BinOp to a Name (line 3240):
    # Getting the type of 'stopb' (line 3240)
    stopb_263016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3240, 14), 'stopb')
    # Getting the type of 'passb' (line 3240)
    passb_263017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3240, 22), 'passb')
    # Applying the binary operator 'div' (line 3240)
    result_div_263018 = python_operator(stypy.reporting.localization.Localization(__file__, 3240, 14), 'div', stopb_263016, passb_263017)
    
    # Assigning a type to the variable 'nat' (line 3240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3240, 8), 'nat', result_div_263018)
    # SSA branch for the else part of an if statement (line 3239)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3241)
    filter_type_263019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3241, 9), 'filter_type')
    int_263020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3241, 24), 'int')
    # Applying the binary operator '==' (line 3241)
    result_eq_263021 = python_operator(stypy.reporting.localization.Localization(__file__, 3241, 9), '==', filter_type_263019, int_263020)
    
    # Testing the type of an if condition (line 3241)
    if_condition_263022 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3241, 9), result_eq_263021)
    # Assigning a type to the variable 'if_condition_263022' (line 3241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3241, 9), 'if_condition_263022', if_condition_263022)
    # SSA begins for if statement (line 3241)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3242):
    
    # Assigning a BinOp to a Name (line 3242):
    # Getting the type of 'passb' (line 3242)
    passb_263023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3242, 14), 'passb')
    # Getting the type of 'stopb' (line 3242)
    stopb_263024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3242, 22), 'stopb')
    # Applying the binary operator 'div' (line 3242)
    result_div_263025 = python_operator(stypy.reporting.localization.Localization(__file__, 3242, 14), 'div', passb_263023, stopb_263024)
    
    # Assigning a type to the variable 'nat' (line 3242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3242, 8), 'nat', result_div_263025)
    # SSA branch for the else part of an if statement (line 3241)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3243)
    filter_type_263026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3243, 9), 'filter_type')
    int_263027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3243, 24), 'int')
    # Applying the binary operator '==' (line 3243)
    result_eq_263028 = python_operator(stypy.reporting.localization.Localization(__file__, 3243, 9), '==', filter_type_263026, int_263027)
    
    # Testing the type of an if condition (line 3243)
    if_condition_263029 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3243, 9), result_eq_263028)
    # Assigning a type to the variable 'if_condition_263029' (line 3243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3243, 9), 'if_condition_263029', if_condition_263029)
    # SSA begins for if statement (line 3243)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3244):
    
    # Assigning a Call to a Name (line 3244):
    
    # Call to fminbound(...): (line 3244)
    # Processing the call arguments (line 3244)
    # Getting the type of 'band_stop_obj' (line 3244)
    band_stop_obj_263032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3244, 33), 'band_stop_obj', False)
    
    # Obtaining the type of the subscript
    int_263033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3244, 54), 'int')
    # Getting the type of 'passb' (line 3244)
    passb_263034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3244, 48), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3244)
    getitem___263035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3244, 48), passb_263034, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3244)
    subscript_call_result_263036 = invoke(stypy.reporting.localization.Localization(__file__, 3244, 48), getitem___263035, int_263033)
    
    
    # Obtaining the type of the subscript
    int_263037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3244, 64), 'int')
    # Getting the type of 'stopb' (line 3244)
    stopb_263038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3244, 58), 'stopb', False)
    # Obtaining the member '__getitem__' of a type (line 3244)
    getitem___263039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3244, 58), stopb_263038, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3244)
    subscript_call_result_263040 = invoke(stypy.reporting.localization.Localization(__file__, 3244, 58), getitem___263039, int_263037)
    
    float_263041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3244, 69), 'float')
    # Applying the binary operator '-' (line 3244)
    result_sub_263042 = python_operator(stypy.reporting.localization.Localization(__file__, 3244, 58), '-', subscript_call_result_263040, float_263041)
    
    # Processing the call keyword arguments (line 3244)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3245)
    tuple_263043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3245, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3245)
    # Adding element type (line 3245)
    int_263044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3245, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3245, 39), tuple_263043, int_263044)
    # Adding element type (line 3245)
    # Getting the type of 'passb' (line 3245)
    passb_263045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3245, 42), 'passb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3245, 39), tuple_263043, passb_263045)
    # Adding element type (line 3245)
    # Getting the type of 'stopb' (line 3245)
    stopb_263046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3245, 49), 'stopb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3245, 39), tuple_263043, stopb_263046)
    # Adding element type (line 3245)
    # Getting the type of 'gpass' (line 3245)
    gpass_263047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3245, 56), 'gpass', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3245, 39), tuple_263043, gpass_263047)
    # Adding element type (line 3245)
    # Getting the type of 'gstop' (line 3245)
    gstop_263048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3245, 63), 'gstop', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3245, 39), tuple_263043, gstop_263048)
    # Adding element type (line 3245)
    str_263049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3245, 70), 'str', 'cheby')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3245, 39), tuple_263043, str_263049)
    
    keyword_263050 = tuple_263043
    int_263051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3246, 38), 'int')
    keyword_263052 = int_263051
    kwargs_263053 = {'disp': keyword_263052, 'args': keyword_263050}
    # Getting the type of 'optimize' (line 3244)
    optimize_263030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3244, 14), 'optimize', False)
    # Obtaining the member 'fminbound' of a type (line 3244)
    fminbound_263031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3244, 14), optimize_263030, 'fminbound')
    # Calling fminbound(args, kwargs) (line 3244)
    fminbound_call_result_263054 = invoke(stypy.reporting.localization.Localization(__file__, 3244, 14), fminbound_263031, *[band_stop_obj_263032, subscript_call_result_263036, result_sub_263042], **kwargs_263053)
    
    # Assigning a type to the variable 'wp0' (line 3244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3244, 8), 'wp0', fminbound_call_result_263054)
    
    # Assigning a Name to a Subscript (line 3247):
    
    # Assigning a Name to a Subscript (line 3247):
    # Getting the type of 'wp0' (line 3247)
    wp0_263055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 19), 'wp0')
    # Getting the type of 'passb' (line 3247)
    passb_263056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 8), 'passb')
    int_263057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3247, 14), 'int')
    # Storing an element on a container (line 3247)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3247, 8), passb_263056, (int_263057, wp0_263055))
    
    # Assigning a Call to a Name (line 3248):
    
    # Assigning a Call to a Name (line 3248):
    
    # Call to fminbound(...): (line 3248)
    # Processing the call arguments (line 3248)
    # Getting the type of 'band_stop_obj' (line 3248)
    band_stop_obj_263060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 33), 'band_stop_obj', False)
    
    # Obtaining the type of the subscript
    int_263061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3248, 54), 'int')
    # Getting the type of 'stopb' (line 3248)
    stopb_263062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 48), 'stopb', False)
    # Obtaining the member '__getitem__' of a type (line 3248)
    getitem___263063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3248, 48), stopb_263062, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3248)
    subscript_call_result_263064 = invoke(stypy.reporting.localization.Localization(__file__, 3248, 48), getitem___263063, int_263061)
    
    float_263065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3248, 59), 'float')
    # Applying the binary operator '+' (line 3248)
    result_add_263066 = python_operator(stypy.reporting.localization.Localization(__file__, 3248, 48), '+', subscript_call_result_263064, float_263065)
    
    
    # Obtaining the type of the subscript
    int_263067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3248, 72), 'int')
    # Getting the type of 'passb' (line 3248)
    passb_263068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 66), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3248)
    getitem___263069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3248, 66), passb_263068, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3248)
    subscript_call_result_263070 = invoke(stypy.reporting.localization.Localization(__file__, 3248, 66), getitem___263069, int_263067)
    
    # Processing the call keyword arguments (line 3248)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3249)
    tuple_263071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3249, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3249)
    # Adding element type (line 3249)
    int_263072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3249, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3249, 39), tuple_263071, int_263072)
    # Adding element type (line 3249)
    # Getting the type of 'passb' (line 3249)
    passb_263073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 42), 'passb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3249, 39), tuple_263071, passb_263073)
    # Adding element type (line 3249)
    # Getting the type of 'stopb' (line 3249)
    stopb_263074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 49), 'stopb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3249, 39), tuple_263071, stopb_263074)
    # Adding element type (line 3249)
    # Getting the type of 'gpass' (line 3249)
    gpass_263075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 56), 'gpass', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3249, 39), tuple_263071, gpass_263075)
    # Adding element type (line 3249)
    # Getting the type of 'gstop' (line 3249)
    gstop_263076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 63), 'gstop', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3249, 39), tuple_263071, gstop_263076)
    # Adding element type (line 3249)
    str_263077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3249, 70), 'str', 'cheby')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3249, 39), tuple_263071, str_263077)
    
    keyword_263078 = tuple_263071
    int_263079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3250, 38), 'int')
    keyword_263080 = int_263079
    kwargs_263081 = {'disp': keyword_263080, 'args': keyword_263078}
    # Getting the type of 'optimize' (line 3248)
    optimize_263058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 14), 'optimize', False)
    # Obtaining the member 'fminbound' of a type (line 3248)
    fminbound_263059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3248, 14), optimize_263058, 'fminbound')
    # Calling fminbound(args, kwargs) (line 3248)
    fminbound_call_result_263082 = invoke(stypy.reporting.localization.Localization(__file__, 3248, 14), fminbound_263059, *[band_stop_obj_263060, result_add_263066, subscript_call_result_263070], **kwargs_263081)
    
    # Assigning a type to the variable 'wp1' (line 3248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3248, 8), 'wp1', fminbound_call_result_263082)
    
    # Assigning a Name to a Subscript (line 3251):
    
    # Assigning a Name to a Subscript (line 3251):
    # Getting the type of 'wp1' (line 3251)
    wp1_263083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 19), 'wp1')
    # Getting the type of 'passb' (line 3251)
    passb_263084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 8), 'passb')
    int_263085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3251, 14), 'int')
    # Storing an element on a container (line 3251)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3251, 8), passb_263084, (int_263085, wp1_263083))
    
    # Assigning a BinOp to a Name (line 3252):
    
    # Assigning a BinOp to a Name (line 3252):
    # Getting the type of 'stopb' (line 3252)
    stopb_263086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 16), 'stopb')
    
    # Obtaining the type of the subscript
    int_263087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3252, 31), 'int')
    # Getting the type of 'passb' (line 3252)
    passb_263088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 25), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3252)
    getitem___263089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3252, 25), passb_263088, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3252)
    subscript_call_result_263090 = invoke(stypy.reporting.localization.Localization(__file__, 3252, 25), getitem___263089, int_263087)
    
    
    # Obtaining the type of the subscript
    int_263091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3252, 42), 'int')
    # Getting the type of 'passb' (line 3252)
    passb_263092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3252, 36), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3252)
    getitem___263093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3252, 36), passb_263092, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3252)
    subscript_call_result_263094 = invoke(stypy.reporting.localization.Localization(__file__, 3252, 36), getitem___263093, int_263091)
    
    # Applying the binary operator '-' (line 3252)
    result_sub_263095 = python_operator(stypy.reporting.localization.Localization(__file__, 3252, 25), '-', subscript_call_result_263090, subscript_call_result_263094)
    
    # Applying the binary operator '*' (line 3252)
    result_mul_263096 = python_operator(stypy.reporting.localization.Localization(__file__, 3252, 16), '*', stopb_263086, result_sub_263095)
    
    # Getting the type of 'stopb' (line 3253)
    stopb_263097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3253, 16), 'stopb')
    int_263098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3253, 25), 'int')
    # Applying the binary operator '**' (line 3253)
    result_pow_263099 = python_operator(stypy.reporting.localization.Localization(__file__, 3253, 16), '**', stopb_263097, int_263098)
    
    
    # Obtaining the type of the subscript
    int_263100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3253, 35), 'int')
    # Getting the type of 'passb' (line 3253)
    passb_263101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3253, 29), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3253)
    getitem___263102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3253, 29), passb_263101, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3253)
    subscript_call_result_263103 = invoke(stypy.reporting.localization.Localization(__file__, 3253, 29), getitem___263102, int_263100)
    
    
    # Obtaining the type of the subscript
    int_263104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3253, 46), 'int')
    # Getting the type of 'passb' (line 3253)
    passb_263105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3253, 40), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3253)
    getitem___263106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3253, 40), passb_263105, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3253)
    subscript_call_result_263107 = invoke(stypy.reporting.localization.Localization(__file__, 3253, 40), getitem___263106, int_263104)
    
    # Applying the binary operator '*' (line 3253)
    result_mul_263108 = python_operator(stypy.reporting.localization.Localization(__file__, 3253, 29), '*', subscript_call_result_263103, subscript_call_result_263107)
    
    # Applying the binary operator '-' (line 3253)
    result_sub_263109 = python_operator(stypy.reporting.localization.Localization(__file__, 3253, 16), '-', result_pow_263099, result_mul_263108)
    
    # Applying the binary operator 'div' (line 3252)
    result_div_263110 = python_operator(stypy.reporting.localization.Localization(__file__, 3252, 15), 'div', result_mul_263096, result_sub_263109)
    
    # Assigning a type to the variable 'nat' (line 3252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3252, 8), 'nat', result_div_263110)
    # SSA branch for the else part of an if statement (line 3243)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3254)
    filter_type_263111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 9), 'filter_type')
    int_263112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3254, 24), 'int')
    # Applying the binary operator '==' (line 3254)
    result_eq_263113 = python_operator(stypy.reporting.localization.Localization(__file__, 3254, 9), '==', filter_type_263111, int_263112)
    
    # Testing the type of an if condition (line 3254)
    if_condition_263114 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3254, 9), result_eq_263113)
    # Assigning a type to the variable 'if_condition_263114' (line 3254)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3254, 9), 'if_condition_263114', if_condition_263114)
    # SSA begins for if statement (line 3254)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3255):
    
    # Assigning a BinOp to a Name (line 3255):
    # Getting the type of 'stopb' (line 3255)
    stopb_263115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 16), 'stopb')
    int_263116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3255, 25), 'int')
    # Applying the binary operator '**' (line 3255)
    result_pow_263117 = python_operator(stypy.reporting.localization.Localization(__file__, 3255, 16), '**', stopb_263115, int_263116)
    
    
    # Obtaining the type of the subscript
    int_263118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3255, 35), 'int')
    # Getting the type of 'passb' (line 3255)
    passb_263119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 29), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3255)
    getitem___263120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3255, 29), passb_263119, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3255)
    subscript_call_result_263121 = invoke(stypy.reporting.localization.Localization(__file__, 3255, 29), getitem___263120, int_263118)
    
    
    # Obtaining the type of the subscript
    int_263122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3255, 46), 'int')
    # Getting the type of 'passb' (line 3255)
    passb_263123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3255, 40), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3255)
    getitem___263124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3255, 40), passb_263123, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3255)
    subscript_call_result_263125 = invoke(stypy.reporting.localization.Localization(__file__, 3255, 40), getitem___263124, int_263122)
    
    # Applying the binary operator '*' (line 3255)
    result_mul_263126 = python_operator(stypy.reporting.localization.Localization(__file__, 3255, 29), '*', subscript_call_result_263121, subscript_call_result_263125)
    
    # Applying the binary operator '-' (line 3255)
    result_sub_263127 = python_operator(stypy.reporting.localization.Localization(__file__, 3255, 16), '-', result_pow_263117, result_mul_263126)
    
    # Getting the type of 'stopb' (line 3256)
    stopb_263128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 16), 'stopb')
    
    # Obtaining the type of the subscript
    int_263129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3256, 31), 'int')
    # Getting the type of 'passb' (line 3256)
    passb_263130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 25), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3256)
    getitem___263131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3256, 25), passb_263130, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3256)
    subscript_call_result_263132 = invoke(stypy.reporting.localization.Localization(__file__, 3256, 25), getitem___263131, int_263129)
    
    
    # Obtaining the type of the subscript
    int_263133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3256, 42), 'int')
    # Getting the type of 'passb' (line 3256)
    passb_263134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 36), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3256)
    getitem___263135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3256, 36), passb_263134, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3256)
    subscript_call_result_263136 = invoke(stypy.reporting.localization.Localization(__file__, 3256, 36), getitem___263135, int_263133)
    
    # Applying the binary operator '-' (line 3256)
    result_sub_263137 = python_operator(stypy.reporting.localization.Localization(__file__, 3256, 25), '-', subscript_call_result_263132, subscript_call_result_263136)
    
    # Applying the binary operator '*' (line 3256)
    result_mul_263138 = python_operator(stypy.reporting.localization.Localization(__file__, 3256, 16), '*', stopb_263128, result_sub_263137)
    
    # Applying the binary operator 'div' (line 3255)
    result_div_263139 = python_operator(stypy.reporting.localization.Localization(__file__, 3255, 15), 'div', result_sub_263127, result_mul_263138)
    
    # Assigning a type to the variable 'nat' (line 3255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3255, 8), 'nat', result_div_263139)
    # SSA join for if statement (line 3254)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3243)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3241)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3239)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3258):
    
    # Assigning a Call to a Name (line 3258):
    
    # Call to min(...): (line 3258)
    # Processing the call arguments (line 3258)
    
    # Call to abs(...): (line 3258)
    # Processing the call arguments (line 3258)
    # Getting the type of 'nat' (line 3258)
    nat_263142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 18), 'nat', False)
    # Processing the call keyword arguments (line 3258)
    kwargs_263143 = {}
    # Getting the type of 'abs' (line 3258)
    abs_263141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 14), 'abs', False)
    # Calling abs(args, kwargs) (line 3258)
    abs_call_result_263144 = invoke(stypy.reporting.localization.Localization(__file__, 3258, 14), abs_263141, *[nat_263142], **kwargs_263143)
    
    # Processing the call keyword arguments (line 3258)
    kwargs_263145 = {}
    # Getting the type of 'min' (line 3258)
    min_263140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3258, 10), 'min', False)
    # Calling min(args, kwargs) (line 3258)
    min_call_result_263146 = invoke(stypy.reporting.localization.Localization(__file__, 3258, 10), min_263140, *[abs_call_result_263144], **kwargs_263145)
    
    # Assigning a type to the variable 'nat' (line 3258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3258, 4), 'nat', min_call_result_263146)
    
    # Assigning a BinOp to a Name (line 3260):
    
    # Assigning a BinOp to a Name (line 3260):
    int_263147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3260, 12), 'int')
    float_263148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3260, 19), 'float')
    
    # Call to abs(...): (line 3260)
    # Processing the call arguments (line 3260)
    # Getting the type of 'gstop' (line 3260)
    gstop_263150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 29), 'gstop', False)
    # Processing the call keyword arguments (line 3260)
    kwargs_263151 = {}
    # Getting the type of 'abs' (line 3260)
    abs_263149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 25), 'abs', False)
    # Calling abs(args, kwargs) (line 3260)
    abs_call_result_263152 = invoke(stypy.reporting.localization.Localization(__file__, 3260, 25), abs_263149, *[gstop_263150], **kwargs_263151)
    
    # Applying the binary operator '*' (line 3260)
    result_mul_263153 = python_operator(stypy.reporting.localization.Localization(__file__, 3260, 19), '*', float_263148, abs_call_result_263152)
    
    # Applying the binary operator '**' (line 3260)
    result_pow_263154 = python_operator(stypy.reporting.localization.Localization(__file__, 3260, 12), '**', int_263147, result_mul_263153)
    
    # Assigning a type to the variable 'GSTOP' (line 3260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3260, 4), 'GSTOP', result_pow_263154)
    
    # Assigning a BinOp to a Name (line 3261):
    
    # Assigning a BinOp to a Name (line 3261):
    int_263155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3261, 12), 'int')
    float_263156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3261, 19), 'float')
    
    # Call to abs(...): (line 3261)
    # Processing the call arguments (line 3261)
    # Getting the type of 'gpass' (line 3261)
    gpass_263158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 29), 'gpass', False)
    # Processing the call keyword arguments (line 3261)
    kwargs_263159 = {}
    # Getting the type of 'abs' (line 3261)
    abs_263157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3261, 25), 'abs', False)
    # Calling abs(args, kwargs) (line 3261)
    abs_call_result_263160 = invoke(stypy.reporting.localization.Localization(__file__, 3261, 25), abs_263157, *[gpass_263158], **kwargs_263159)
    
    # Applying the binary operator '*' (line 3261)
    result_mul_263161 = python_operator(stypy.reporting.localization.Localization(__file__, 3261, 19), '*', float_263156, abs_call_result_263160)
    
    # Applying the binary operator '**' (line 3261)
    result_pow_263162 = python_operator(stypy.reporting.localization.Localization(__file__, 3261, 12), '**', int_263155, result_mul_263161)
    
    # Assigning a type to the variable 'GPASS' (line 3261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3261, 4), 'GPASS', result_pow_263162)
    
    # Assigning a Call to a Name (line 3262):
    
    # Assigning a Call to a Name (line 3262):
    
    # Call to int(...): (line 3262)
    # Processing the call arguments (line 3262)
    
    # Call to ceil(...): (line 3262)
    # Processing the call arguments (line 3262)
    
    # Call to arccosh(...): (line 3262)
    # Processing the call arguments (line 3262)
    
    # Call to sqrt(...): (line 3262)
    # Processing the call arguments (line 3262)
    # Getting the type of 'GSTOP' (line 3262)
    GSTOP_263167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 33), 'GSTOP', False)
    float_263168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3262, 41), 'float')
    # Applying the binary operator '-' (line 3262)
    result_sub_263169 = python_operator(stypy.reporting.localization.Localization(__file__, 3262, 33), '-', GSTOP_263167, float_263168)
    
    # Getting the type of 'GPASS' (line 3262)
    GPASS_263170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 49), 'GPASS', False)
    float_263171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3262, 57), 'float')
    # Applying the binary operator '-' (line 3262)
    result_sub_263172 = python_operator(stypy.reporting.localization.Localization(__file__, 3262, 49), '-', GPASS_263170, float_263171)
    
    # Applying the binary operator 'div' (line 3262)
    result_div_263173 = python_operator(stypy.reporting.localization.Localization(__file__, 3262, 32), 'div', result_sub_263169, result_sub_263172)
    
    # Processing the call keyword arguments (line 3262)
    kwargs_263174 = {}
    # Getting the type of 'sqrt' (line 3262)
    sqrt_263166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 27), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3262)
    sqrt_call_result_263175 = invoke(stypy.reporting.localization.Localization(__file__, 3262, 27), sqrt_263166, *[result_div_263173], **kwargs_263174)
    
    # Processing the call keyword arguments (line 3262)
    kwargs_263176 = {}
    # Getting the type of 'arccosh' (line 3262)
    arccosh_263165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 19), 'arccosh', False)
    # Calling arccosh(args, kwargs) (line 3262)
    arccosh_call_result_263177 = invoke(stypy.reporting.localization.Localization(__file__, 3262, 19), arccosh_263165, *[sqrt_call_result_263175], **kwargs_263176)
    
    
    # Call to arccosh(...): (line 3263)
    # Processing the call arguments (line 3263)
    # Getting the type of 'nat' (line 3263)
    nat_263179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3263, 27), 'nat', False)
    # Processing the call keyword arguments (line 3263)
    kwargs_263180 = {}
    # Getting the type of 'arccosh' (line 3263)
    arccosh_263178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3263, 19), 'arccosh', False)
    # Calling arccosh(args, kwargs) (line 3263)
    arccosh_call_result_263181 = invoke(stypy.reporting.localization.Localization(__file__, 3263, 19), arccosh_263178, *[nat_263179], **kwargs_263180)
    
    # Applying the binary operator 'div' (line 3262)
    result_div_263182 = python_operator(stypy.reporting.localization.Localization(__file__, 3262, 19), 'div', arccosh_call_result_263177, arccosh_call_result_263181)
    
    # Processing the call keyword arguments (line 3262)
    kwargs_263183 = {}
    # Getting the type of 'ceil' (line 3262)
    ceil_263164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 14), 'ceil', False)
    # Calling ceil(args, kwargs) (line 3262)
    ceil_call_result_263184 = invoke(stypy.reporting.localization.Localization(__file__, 3262, 14), ceil_263164, *[result_div_263182], **kwargs_263183)
    
    # Processing the call keyword arguments (line 3262)
    kwargs_263185 = {}
    # Getting the type of 'int' (line 3262)
    int_263163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 10), 'int', False)
    # Calling int(args, kwargs) (line 3262)
    int_call_result_263186 = invoke(stypy.reporting.localization.Localization(__file__, 3262, 10), int_263163, *[ceil_call_result_263184], **kwargs_263185)
    
    # Assigning a type to the variable 'ord' (line 3262)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3262, 4), 'ord', int_call_result_263186)
    
    # Assigning a Call to a Name (line 3268):
    
    # Assigning a Call to a Name (line 3268):
    
    # Call to cosh(...): (line 3268)
    # Processing the call arguments (line 3268)
    float_263188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3268, 20), 'float')
    # Getting the type of 'ord' (line 3268)
    ord_263189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3268, 26), 'ord', False)
    # Applying the binary operator 'div' (line 3268)
    result_div_263190 = python_operator(stypy.reporting.localization.Localization(__file__, 3268, 20), 'div', float_263188, ord_263189)
    
    
    # Call to arccosh(...): (line 3268)
    # Processing the call arguments (line 3268)
    
    # Call to sqrt(...): (line 3268)
    # Processing the call arguments (line 3268)
    # Getting the type of 'GSTOP' (line 3268)
    GSTOP_263193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3268, 46), 'GSTOP', False)
    float_263194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3268, 54), 'float')
    # Applying the binary operator '-' (line 3268)
    result_sub_263195 = python_operator(stypy.reporting.localization.Localization(__file__, 3268, 46), '-', GSTOP_263193, float_263194)
    
    # Getting the type of 'GPASS' (line 3268)
    GPASS_263196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3268, 62), 'GPASS', False)
    float_263197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3268, 70), 'float')
    # Applying the binary operator '-' (line 3268)
    result_sub_263198 = python_operator(stypy.reporting.localization.Localization(__file__, 3268, 62), '-', GPASS_263196, float_263197)
    
    # Applying the binary operator 'div' (line 3268)
    result_div_263199 = python_operator(stypy.reporting.localization.Localization(__file__, 3268, 45), 'div', result_sub_263195, result_sub_263198)
    
    # Processing the call keyword arguments (line 3268)
    kwargs_263200 = {}
    # Getting the type of 'sqrt' (line 3268)
    sqrt_263192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3268, 40), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3268)
    sqrt_call_result_263201 = invoke(stypy.reporting.localization.Localization(__file__, 3268, 40), sqrt_263192, *[result_div_263199], **kwargs_263200)
    
    # Processing the call keyword arguments (line 3268)
    kwargs_263202 = {}
    # Getting the type of 'arccosh' (line 3268)
    arccosh_263191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3268, 32), 'arccosh', False)
    # Calling arccosh(args, kwargs) (line 3268)
    arccosh_call_result_263203 = invoke(stypy.reporting.localization.Localization(__file__, 3268, 32), arccosh_263191, *[sqrt_call_result_263201], **kwargs_263202)
    
    # Applying the binary operator '*' (line 3268)
    result_mul_263204 = python_operator(stypy.reporting.localization.Localization(__file__, 3268, 30), '*', result_div_263190, arccosh_call_result_263203)
    
    # Processing the call keyword arguments (line 3268)
    kwargs_263205 = {}
    # Getting the type of 'cosh' (line 3268)
    cosh_263187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3268, 15), 'cosh', False)
    # Calling cosh(args, kwargs) (line 3268)
    cosh_call_result_263206 = invoke(stypy.reporting.localization.Localization(__file__, 3268, 15), cosh_263187, *[result_mul_263204], **kwargs_263205)
    
    # Assigning a type to the variable 'new_freq' (line 3268)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3268, 4), 'new_freq', cosh_call_result_263206)
    
    # Assigning a BinOp to a Name (line 3269):
    
    # Assigning a BinOp to a Name (line 3269):
    float_263207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3269, 15), 'float')
    # Getting the type of 'new_freq' (line 3269)
    new_freq_263208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3269, 21), 'new_freq')
    # Applying the binary operator 'div' (line 3269)
    result_div_263209 = python_operator(stypy.reporting.localization.Localization(__file__, 3269, 15), 'div', float_263207, new_freq_263208)
    
    # Assigning a type to the variable 'new_freq' (line 3269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3269, 4), 'new_freq', result_div_263209)
    
    
    # Getting the type of 'filter_type' (line 3271)
    filter_type_263210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3271, 7), 'filter_type')
    int_263211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3271, 22), 'int')
    # Applying the binary operator '==' (line 3271)
    result_eq_263212 = python_operator(stypy.reporting.localization.Localization(__file__, 3271, 7), '==', filter_type_263210, int_263211)
    
    # Testing the type of an if condition (line 3271)
    if_condition_263213 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3271, 4), result_eq_263212)
    # Assigning a type to the variable 'if_condition_263213' (line 3271)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3271, 4), 'if_condition_263213', if_condition_263213)
    # SSA begins for if statement (line 3271)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3272):
    
    # Assigning a BinOp to a Name (line 3272):
    # Getting the type of 'passb' (line 3272)
    passb_263214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 14), 'passb')
    # Getting the type of 'new_freq' (line 3272)
    new_freq_263215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 22), 'new_freq')
    # Applying the binary operator 'div' (line 3272)
    result_div_263216 = python_operator(stypy.reporting.localization.Localization(__file__, 3272, 14), 'div', passb_263214, new_freq_263215)
    
    # Assigning a type to the variable 'nat' (line 3272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3272, 8), 'nat', result_div_263216)
    # SSA branch for the else part of an if statement (line 3271)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3273)
    filter_type_263217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 9), 'filter_type')
    int_263218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3273, 24), 'int')
    # Applying the binary operator '==' (line 3273)
    result_eq_263219 = python_operator(stypy.reporting.localization.Localization(__file__, 3273, 9), '==', filter_type_263217, int_263218)
    
    # Testing the type of an if condition (line 3273)
    if_condition_263220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3273, 9), result_eq_263219)
    # Assigning a type to the variable 'if_condition_263220' (line 3273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3273, 9), 'if_condition_263220', if_condition_263220)
    # SSA begins for if statement (line 3273)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3274):
    
    # Assigning a BinOp to a Name (line 3274):
    # Getting the type of 'passb' (line 3274)
    passb_263221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 14), 'passb')
    # Getting the type of 'new_freq' (line 3274)
    new_freq_263222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 22), 'new_freq')
    # Applying the binary operator '*' (line 3274)
    result_mul_263223 = python_operator(stypy.reporting.localization.Localization(__file__, 3274, 14), '*', passb_263221, new_freq_263222)
    
    # Assigning a type to the variable 'nat' (line 3274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3274, 8), 'nat', result_mul_263223)
    # SSA branch for the else part of an if statement (line 3273)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3275)
    filter_type_263224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3275, 9), 'filter_type')
    int_263225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3275, 24), 'int')
    # Applying the binary operator '==' (line 3275)
    result_eq_263226 = python_operator(stypy.reporting.localization.Localization(__file__, 3275, 9), '==', filter_type_263224, int_263225)
    
    # Testing the type of an if condition (line 3275)
    if_condition_263227 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3275, 9), result_eq_263226)
    # Assigning a type to the variable 'if_condition_263227' (line 3275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3275, 9), 'if_condition_263227', if_condition_263227)
    # SSA begins for if statement (line 3275)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3276):
    
    # Assigning a Call to a Name (line 3276):
    
    # Call to zeros(...): (line 3276)
    # Processing the call arguments (line 3276)
    int_263230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3276, 26), 'int')
    # Getting the type of 'float' (line 3276)
    float_263231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3276, 29), 'float', False)
    # Processing the call keyword arguments (line 3276)
    kwargs_263232 = {}
    # Getting the type of 'numpy' (line 3276)
    numpy_263228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3276, 14), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 3276)
    zeros_263229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3276, 14), numpy_263228, 'zeros')
    # Calling zeros(args, kwargs) (line 3276)
    zeros_call_result_263233 = invoke(stypy.reporting.localization.Localization(__file__, 3276, 14), zeros_263229, *[int_263230, float_263231], **kwargs_263232)
    
    # Assigning a type to the variable 'nat' (line 3276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3276, 8), 'nat', zeros_call_result_263233)
    
    # Assigning a BinOp to a Subscript (line 3277):
    
    # Assigning a BinOp to a Subscript (line 3277):
    # Getting the type of 'new_freq' (line 3277)
    new_freq_263234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3277, 18), 'new_freq')
    float_263235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3277, 29), 'float')
    # Applying the binary operator 'div' (line 3277)
    result_div_263236 = python_operator(stypy.reporting.localization.Localization(__file__, 3277, 18), 'div', new_freq_263234, float_263235)
    
    
    # Obtaining the type of the subscript
    int_263237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3277, 42), 'int')
    # Getting the type of 'passb' (line 3277)
    passb_263238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3277, 36), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3277)
    getitem___263239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3277, 36), passb_263238, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3277)
    subscript_call_result_263240 = invoke(stypy.reporting.localization.Localization(__file__, 3277, 36), getitem___263239, int_263237)
    
    
    # Obtaining the type of the subscript
    int_263241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3277, 53), 'int')
    # Getting the type of 'passb' (line 3277)
    passb_263242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3277, 47), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3277)
    getitem___263243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3277, 47), passb_263242, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3277)
    subscript_call_result_263244 = invoke(stypy.reporting.localization.Localization(__file__, 3277, 47), getitem___263243, int_263241)
    
    # Applying the binary operator '-' (line 3277)
    result_sub_263245 = python_operator(stypy.reporting.localization.Localization(__file__, 3277, 36), '-', subscript_call_result_263240, subscript_call_result_263244)
    
    # Applying the binary operator '*' (line 3277)
    result_mul_263246 = python_operator(stypy.reporting.localization.Localization(__file__, 3277, 33), '*', result_div_263236, result_sub_263245)
    
    
    # Call to sqrt(...): (line 3278)
    # Processing the call arguments (line 3278)
    # Getting the type of 'new_freq' (line 3278)
    new_freq_263248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3278, 23), 'new_freq', False)
    int_263249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3278, 35), 'int')
    # Applying the binary operator '**' (line 3278)
    result_pow_263250 = python_operator(stypy.reporting.localization.Localization(__file__, 3278, 23), '**', new_freq_263248, int_263249)
    
    
    # Obtaining the type of the subscript
    int_263251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3278, 46), 'int')
    # Getting the type of 'passb' (line 3278)
    passb_263252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3278, 40), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3278)
    getitem___263253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3278, 40), passb_263252, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3278)
    subscript_call_result_263254 = invoke(stypy.reporting.localization.Localization(__file__, 3278, 40), getitem___263253, int_263251)
    
    
    # Obtaining the type of the subscript
    int_263255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3278, 57), 'int')
    # Getting the type of 'passb' (line 3278)
    passb_263256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3278, 51), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3278)
    getitem___263257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3278, 51), passb_263256, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3278)
    subscript_call_result_263258 = invoke(stypy.reporting.localization.Localization(__file__, 3278, 51), getitem___263257, int_263255)
    
    # Applying the binary operator '-' (line 3278)
    result_sub_263259 = python_operator(stypy.reporting.localization.Localization(__file__, 3278, 40), '-', subscript_call_result_263254, subscript_call_result_263258)
    
    int_263260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3278, 64), 'int')
    # Applying the binary operator '**' (line 3278)
    result_pow_263261 = python_operator(stypy.reporting.localization.Localization(__file__, 3278, 39), '**', result_sub_263259, int_263260)
    
    # Applying the binary operator '*' (line 3278)
    result_mul_263262 = python_operator(stypy.reporting.localization.Localization(__file__, 3278, 23), '*', result_pow_263250, result_pow_263261)
    
    float_263263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3278, 68), 'float')
    # Applying the binary operator 'div' (line 3278)
    result_div_263264 = python_operator(stypy.reporting.localization.Localization(__file__, 3278, 66), 'div', result_mul_263262, float_263263)
    
    
    # Obtaining the type of the subscript
    int_263265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3279, 29), 'int')
    # Getting the type of 'passb' (line 3279)
    passb_263266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 23), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3279)
    getitem___263267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3279, 23), passb_263266, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3279)
    subscript_call_result_263268 = invoke(stypy.reporting.localization.Localization(__file__, 3279, 23), getitem___263267, int_263265)
    
    
    # Obtaining the type of the subscript
    int_263269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3279, 40), 'int')
    # Getting the type of 'passb' (line 3279)
    passb_263270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3279, 34), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3279)
    getitem___263271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3279, 34), passb_263270, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3279)
    subscript_call_result_263272 = invoke(stypy.reporting.localization.Localization(__file__, 3279, 34), getitem___263271, int_263269)
    
    # Applying the binary operator '*' (line 3279)
    result_mul_263273 = python_operator(stypy.reporting.localization.Localization(__file__, 3279, 23), '*', subscript_call_result_263268, subscript_call_result_263272)
    
    # Applying the binary operator '+' (line 3278)
    result_add_263274 = python_operator(stypy.reporting.localization.Localization(__file__, 3278, 23), '+', result_div_263264, result_mul_263273)
    
    # Processing the call keyword arguments (line 3278)
    kwargs_263275 = {}
    # Getting the type of 'sqrt' (line 3278)
    sqrt_263247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3278, 18), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3278)
    sqrt_call_result_263276 = invoke(stypy.reporting.localization.Localization(__file__, 3278, 18), sqrt_263247, *[result_add_263274], **kwargs_263275)
    
    # Applying the binary operator '+' (line 3277)
    result_add_263277 = python_operator(stypy.reporting.localization.Localization(__file__, 3277, 18), '+', result_mul_263246, sqrt_call_result_263276)
    
    # Getting the type of 'nat' (line 3277)
    nat_263278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3277, 8), 'nat')
    int_263279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3277, 12), 'int')
    # Storing an element on a container (line 3277)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3277, 8), nat_263278, (int_263279, result_add_263277))
    
    # Assigning a BinOp to a Subscript (line 3280):
    
    # Assigning a BinOp to a Subscript (line 3280):
    
    # Obtaining the type of the subscript
    int_263280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3280, 23), 'int')
    # Getting the type of 'passb' (line 3280)
    passb_263281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3280, 17), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3280)
    getitem___263282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3280, 17), passb_263281, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3280)
    subscript_call_result_263283 = invoke(stypy.reporting.localization.Localization(__file__, 3280, 17), getitem___263282, int_263280)
    
    
    # Obtaining the type of the subscript
    int_263284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3280, 34), 'int')
    # Getting the type of 'passb' (line 3280)
    passb_263285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3280, 28), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3280)
    getitem___263286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3280, 28), passb_263285, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3280)
    subscript_call_result_263287 = invoke(stypy.reporting.localization.Localization(__file__, 3280, 28), getitem___263286, int_263284)
    
    # Applying the binary operator '*' (line 3280)
    result_mul_263288 = python_operator(stypy.reporting.localization.Localization(__file__, 3280, 17), '*', subscript_call_result_263283, subscript_call_result_263287)
    
    
    # Obtaining the type of the subscript
    int_263289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3280, 43), 'int')
    # Getting the type of 'nat' (line 3280)
    nat_263290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3280, 39), 'nat')
    # Obtaining the member '__getitem__' of a type (line 3280)
    getitem___263291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3280, 39), nat_263290, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3280)
    subscript_call_result_263292 = invoke(stypy.reporting.localization.Localization(__file__, 3280, 39), getitem___263291, int_263289)
    
    # Applying the binary operator 'div' (line 3280)
    result_div_263293 = python_operator(stypy.reporting.localization.Localization(__file__, 3280, 37), 'div', result_mul_263288, subscript_call_result_263292)
    
    # Getting the type of 'nat' (line 3280)
    nat_263294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3280, 8), 'nat')
    int_263295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3280, 12), 'int')
    # Storing an element on a container (line 3280)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3280, 8), nat_263294, (int_263295, result_div_263293))
    # SSA branch for the else part of an if statement (line 3275)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3281)
    filter_type_263296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 9), 'filter_type')
    int_263297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3281, 24), 'int')
    # Applying the binary operator '==' (line 3281)
    result_eq_263298 = python_operator(stypy.reporting.localization.Localization(__file__, 3281, 9), '==', filter_type_263296, int_263297)
    
    # Testing the type of an if condition (line 3281)
    if_condition_263299 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3281, 9), result_eq_263298)
    # Assigning a type to the variable 'if_condition_263299' (line 3281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3281, 9), 'if_condition_263299', if_condition_263299)
    # SSA begins for if statement (line 3281)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3282):
    
    # Assigning a Call to a Name (line 3282):
    
    # Call to zeros(...): (line 3282)
    # Processing the call arguments (line 3282)
    int_263302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3282, 26), 'int')
    # Getting the type of 'float' (line 3282)
    float_263303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3282, 29), 'float', False)
    # Processing the call keyword arguments (line 3282)
    kwargs_263304 = {}
    # Getting the type of 'numpy' (line 3282)
    numpy_263300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3282, 14), 'numpy', False)
    # Obtaining the member 'zeros' of a type (line 3282)
    zeros_263301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3282, 14), numpy_263300, 'zeros')
    # Calling zeros(args, kwargs) (line 3282)
    zeros_call_result_263305 = invoke(stypy.reporting.localization.Localization(__file__, 3282, 14), zeros_263301, *[int_263302, float_263303], **kwargs_263304)
    
    # Assigning a type to the variable 'nat' (line 3282)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3282, 8), 'nat', zeros_call_result_263305)
    
    # Assigning a BinOp to a Subscript (line 3283):
    
    # Assigning a BinOp to a Subscript (line 3283):
    float_263306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3283, 18), 'float')
    float_263307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3283, 25), 'float')
    # Getting the type of 'new_freq' (line 3283)
    new_freq_263308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3283, 31), 'new_freq')
    # Applying the binary operator '*' (line 3283)
    result_mul_263309 = python_operator(stypy.reporting.localization.Localization(__file__, 3283, 25), '*', float_263307, new_freq_263308)
    
    # Applying the binary operator 'div' (line 3283)
    result_div_263310 = python_operator(stypy.reporting.localization.Localization(__file__, 3283, 18), 'div', float_263306, result_mul_263309)
    
    
    # Obtaining the type of the subscript
    int_263311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3283, 50), 'int')
    # Getting the type of 'passb' (line 3283)
    passb_263312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3283, 44), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3283)
    getitem___263313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3283, 44), passb_263312, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3283)
    subscript_call_result_263314 = invoke(stypy.reporting.localization.Localization(__file__, 3283, 44), getitem___263313, int_263311)
    
    
    # Obtaining the type of the subscript
    int_263315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3283, 61), 'int')
    # Getting the type of 'passb' (line 3283)
    passb_263316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3283, 55), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3283)
    getitem___263317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3283, 55), passb_263316, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3283)
    subscript_call_result_263318 = invoke(stypy.reporting.localization.Localization(__file__, 3283, 55), getitem___263317, int_263315)
    
    # Applying the binary operator '-' (line 3283)
    result_sub_263319 = python_operator(stypy.reporting.localization.Localization(__file__, 3283, 44), '-', subscript_call_result_263314, subscript_call_result_263318)
    
    # Applying the binary operator '*' (line 3283)
    result_mul_263320 = python_operator(stypy.reporting.localization.Localization(__file__, 3283, 41), '*', result_div_263310, result_sub_263319)
    
    
    # Call to sqrt(...): (line 3284)
    # Processing the call arguments (line 3284)
    
    # Obtaining the type of the subscript
    int_263322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3284, 30), 'int')
    # Getting the type of 'passb' (line 3284)
    passb_263323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3284, 24), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3284)
    getitem___263324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3284, 24), passb_263323, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3284)
    subscript_call_result_263325 = invoke(stypy.reporting.localization.Localization(__file__, 3284, 24), getitem___263324, int_263322)
    
    
    # Obtaining the type of the subscript
    int_263326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3284, 41), 'int')
    # Getting the type of 'passb' (line 3284)
    passb_263327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3284, 35), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3284)
    getitem___263328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3284, 35), passb_263327, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3284)
    subscript_call_result_263329 = invoke(stypy.reporting.localization.Localization(__file__, 3284, 35), getitem___263328, int_263326)
    
    # Applying the binary operator '-' (line 3284)
    result_sub_263330 = python_operator(stypy.reporting.localization.Localization(__file__, 3284, 24), '-', subscript_call_result_263325, subscript_call_result_263329)
    
    int_263331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3284, 48), 'int')
    # Applying the binary operator '**' (line 3284)
    result_pow_263332 = python_operator(stypy.reporting.localization.Localization(__file__, 3284, 23), '**', result_sub_263330, int_263331)
    
    float_263333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3284, 53), 'float')
    # Getting the type of 'new_freq' (line 3284)
    new_freq_263334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3284, 59), 'new_freq', False)
    int_263335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3284, 71), 'int')
    # Applying the binary operator '**' (line 3284)
    result_pow_263336 = python_operator(stypy.reporting.localization.Localization(__file__, 3284, 59), '**', new_freq_263334, int_263335)
    
    # Applying the binary operator '*' (line 3284)
    result_mul_263337 = python_operator(stypy.reporting.localization.Localization(__file__, 3284, 53), '*', float_263333, result_pow_263336)
    
    # Applying the binary operator 'div' (line 3284)
    result_div_263338 = python_operator(stypy.reporting.localization.Localization(__file__, 3284, 23), 'div', result_pow_263332, result_mul_263337)
    
    
    # Obtaining the type of the subscript
    int_263339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3285, 29), 'int')
    # Getting the type of 'passb' (line 3285)
    passb_263340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3285, 23), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3285)
    getitem___263341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3285, 23), passb_263340, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3285)
    subscript_call_result_263342 = invoke(stypy.reporting.localization.Localization(__file__, 3285, 23), getitem___263341, int_263339)
    
    
    # Obtaining the type of the subscript
    int_263343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3285, 40), 'int')
    # Getting the type of 'passb' (line 3285)
    passb_263344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3285, 34), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3285)
    getitem___263345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3285, 34), passb_263344, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3285)
    subscript_call_result_263346 = invoke(stypy.reporting.localization.Localization(__file__, 3285, 34), getitem___263345, int_263343)
    
    # Applying the binary operator '*' (line 3285)
    result_mul_263347 = python_operator(stypy.reporting.localization.Localization(__file__, 3285, 23), '*', subscript_call_result_263342, subscript_call_result_263346)
    
    # Applying the binary operator '+' (line 3284)
    result_add_263348 = python_operator(stypy.reporting.localization.Localization(__file__, 3284, 23), '+', result_div_263338, result_mul_263347)
    
    # Processing the call keyword arguments (line 3284)
    kwargs_263349 = {}
    # Getting the type of 'sqrt' (line 3284)
    sqrt_263321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3284, 18), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3284)
    sqrt_call_result_263350 = invoke(stypy.reporting.localization.Localization(__file__, 3284, 18), sqrt_263321, *[result_add_263348], **kwargs_263349)
    
    # Applying the binary operator '+' (line 3283)
    result_add_263351 = python_operator(stypy.reporting.localization.Localization(__file__, 3283, 18), '+', result_mul_263320, sqrt_call_result_263350)
    
    # Getting the type of 'nat' (line 3283)
    nat_263352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3283, 8), 'nat')
    int_263353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3283, 12), 'int')
    # Storing an element on a container (line 3283)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3283, 8), nat_263352, (int_263353, result_add_263351))
    
    # Assigning a BinOp to a Subscript (line 3286):
    
    # Assigning a BinOp to a Subscript (line 3286):
    
    # Obtaining the type of the subscript
    int_263354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3286, 23), 'int')
    # Getting the type of 'passb' (line 3286)
    passb_263355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3286, 17), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3286)
    getitem___263356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3286, 17), passb_263355, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3286)
    subscript_call_result_263357 = invoke(stypy.reporting.localization.Localization(__file__, 3286, 17), getitem___263356, int_263354)
    
    
    # Obtaining the type of the subscript
    int_263358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3286, 34), 'int')
    # Getting the type of 'passb' (line 3286)
    passb_263359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3286, 28), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3286)
    getitem___263360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3286, 28), passb_263359, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3286)
    subscript_call_result_263361 = invoke(stypy.reporting.localization.Localization(__file__, 3286, 28), getitem___263360, int_263358)
    
    # Applying the binary operator '*' (line 3286)
    result_mul_263362 = python_operator(stypy.reporting.localization.Localization(__file__, 3286, 17), '*', subscript_call_result_263357, subscript_call_result_263361)
    
    
    # Obtaining the type of the subscript
    int_263363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3286, 43), 'int')
    # Getting the type of 'nat' (line 3286)
    nat_263364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3286, 39), 'nat')
    # Obtaining the member '__getitem__' of a type (line 3286)
    getitem___263365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3286, 39), nat_263364, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3286)
    subscript_call_result_263366 = invoke(stypy.reporting.localization.Localization(__file__, 3286, 39), getitem___263365, int_263363)
    
    # Applying the binary operator 'div' (line 3286)
    result_div_263367 = python_operator(stypy.reporting.localization.Localization(__file__, 3286, 37), 'div', result_mul_263362, subscript_call_result_263366)
    
    # Getting the type of 'nat' (line 3286)
    nat_263368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3286, 8), 'nat')
    int_263369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3286, 12), 'int')
    # Storing an element on a container (line 3286)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3286, 8), nat_263368, (int_263369, result_div_263367))
    # SSA join for if statement (line 3281)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3275)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3273)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3271)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'analog' (line 3288)
    analog_263370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 11), 'analog')
    # Applying the 'not' unary operator (line 3288)
    result_not__263371 = python_operator(stypy.reporting.localization.Localization(__file__, 3288, 7), 'not', analog_263370)
    
    # Testing the type of an if condition (line 3288)
    if_condition_263372 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3288, 4), result_not__263371)
    # Assigning a type to the variable 'if_condition_263372' (line 3288)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3288, 4), 'if_condition_263372', if_condition_263372)
    # SSA begins for if statement (line 3288)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3289):
    
    # Assigning a BinOp to a Name (line 3289):
    float_263373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3289, 14), 'float')
    # Getting the type of 'pi' (line 3289)
    pi_263374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 20), 'pi')
    # Applying the binary operator 'div' (line 3289)
    result_div_263375 = python_operator(stypy.reporting.localization.Localization(__file__, 3289, 14), 'div', float_263373, pi_263374)
    
    
    # Call to arctan(...): (line 3289)
    # Processing the call arguments (line 3289)
    # Getting the type of 'nat' (line 3289)
    nat_263377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 33), 'nat', False)
    # Processing the call keyword arguments (line 3289)
    kwargs_263378 = {}
    # Getting the type of 'arctan' (line 3289)
    arctan_263376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 26), 'arctan', False)
    # Calling arctan(args, kwargs) (line 3289)
    arctan_call_result_263379 = invoke(stypy.reporting.localization.Localization(__file__, 3289, 26), arctan_263376, *[nat_263377], **kwargs_263378)
    
    # Applying the binary operator '*' (line 3289)
    result_mul_263380 = python_operator(stypy.reporting.localization.Localization(__file__, 3289, 13), '*', result_div_263375, arctan_call_result_263379)
    
    # Assigning a type to the variable 'wn' (line 3289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3289, 8), 'wn', result_mul_263380)
    # SSA branch for the else part of an if statement (line 3288)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 3291):
    
    # Assigning a Name to a Name (line 3291):
    # Getting the type of 'nat' (line 3291)
    nat_263381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3291, 13), 'nat')
    # Assigning a type to the variable 'wn' (line 3291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3291, 8), 'wn', nat_263381)
    # SSA join for if statement (line 3288)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 3293)
    # Processing the call arguments (line 3293)
    # Getting the type of 'wn' (line 3293)
    wn_263383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 11), 'wn', False)
    # Processing the call keyword arguments (line 3293)
    kwargs_263384 = {}
    # Getting the type of 'len' (line 3293)
    len_263382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 7), 'len', False)
    # Calling len(args, kwargs) (line 3293)
    len_call_result_263385 = invoke(stypy.reporting.localization.Localization(__file__, 3293, 7), len_263382, *[wn_263383], **kwargs_263384)
    
    int_263386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3293, 18), 'int')
    # Applying the binary operator '==' (line 3293)
    result_eq_263387 = python_operator(stypy.reporting.localization.Localization(__file__, 3293, 7), '==', len_call_result_263385, int_263386)
    
    # Testing the type of an if condition (line 3293)
    if_condition_263388 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3293, 4), result_eq_263387)
    # Assigning a type to the variable 'if_condition_263388' (line 3293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3293, 4), 'if_condition_263388', if_condition_263388)
    # SSA begins for if statement (line 3293)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 3294):
    
    # Assigning a Subscript to a Name (line 3294):
    
    # Obtaining the type of the subscript
    int_263389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3294, 16), 'int')
    # Getting the type of 'wn' (line 3294)
    wn_263390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3294, 13), 'wn')
    # Obtaining the member '__getitem__' of a type (line 3294)
    getitem___263391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3294, 13), wn_263390, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3294)
    subscript_call_result_263392 = invoke(stypy.reporting.localization.Localization(__file__, 3294, 13), getitem___263391, int_263389)
    
    # Assigning a type to the variable 'wn' (line 3294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3294, 8), 'wn', subscript_call_result_263392)
    # SSA join for if statement (line 3293)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3295)
    tuple_263393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3295, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3295)
    # Adding element type (line 3295)
    # Getting the type of 'ord' (line 3295)
    ord_263394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 11), 'ord')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3295, 11), tuple_263393, ord_263394)
    # Adding element type (line 3295)
    # Getting the type of 'wn' (line 3295)
    wn_263395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3295, 16), 'wn')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3295, 11), tuple_263393, wn_263395)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3295, 4), 'stypy_return_type', tuple_263393)
    
    # ################# End of 'cheb2ord(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cheb2ord' in the type store
    # Getting the type of 'stypy_return_type' (line 3152)
    stypy_return_type_263396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3152, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_263396)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cheb2ord'
    return stypy_return_type_263396

# Assigning a type to the variable 'cheb2ord' (line 3152)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3152, 0), 'cheb2ord', cheb2ord)

@norecursion
def ellipord(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 3298)
    False_263397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3298, 42), 'False')
    defaults = [False_263397]
    # Create a new context for function 'ellipord'
    module_type_store = module_type_store.open_function_context('ellipord', 3298, 0, False)
    
    # Passed parameters checking function
    ellipord.stypy_localization = localization
    ellipord.stypy_type_of_self = None
    ellipord.stypy_type_store = module_type_store
    ellipord.stypy_function_name = 'ellipord'
    ellipord.stypy_param_names_list = ['wp', 'ws', 'gpass', 'gstop', 'analog']
    ellipord.stypy_varargs_param_name = None
    ellipord.stypy_kwargs_param_name = None
    ellipord.stypy_call_defaults = defaults
    ellipord.stypy_call_varargs = varargs
    ellipord.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ellipord', ['wp', 'ws', 'gpass', 'gstop', 'analog'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ellipord', localization, ['wp', 'ws', 'gpass', 'gstop', 'analog'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ellipord(...)' code ##################

    str_263398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3366, (-1)), 'str', 'Elliptic (Cauer) filter order selection.\n\n    Return the order of the lowest order digital or analog elliptic filter\n    that loses no more than `gpass` dB in the passband and has at least\n    `gstop` dB attenuation in the stopband.\n\n    Parameters\n    ----------\n    wp, ws : float\n        Passband and stopband edge frequencies.\n        For digital filters, these are normalized from 0 to 1, where 1 is the\n        Nyquist frequency, pi radians/sample.  (`wp` and `ws` are thus in\n        half-cycles / sample.)  For example:\n\n            - Lowpass:   wp = 0.2,          ws = 0.3\n            - Highpass:  wp = 0.3,          ws = 0.2\n            - Bandpass:  wp = [0.2, 0.5],   ws = [0.1, 0.6]\n            - Bandstop:  wp = [0.1, 0.6],   ws = [0.2, 0.5]\n\n        For analog filters, `wp` and `ws` are angular frequencies (e.g. rad/s).\n\n    gpass : float\n        The maximum loss in the passband (dB).\n    gstop : float\n        The minimum attenuation in the stopband (dB).\n    analog : bool, optional\n        When True, return an analog filter, otherwise a digital filter is\n        returned.\n\n    Returns\n    -------\n    ord : int\n        The lowest order for an Elliptic (Cauer) filter that meets specs.\n    wn : ndarray or float\n        The Chebyshev natural frequency (the "3dB frequency") for use with\n        `ellip` to give filter results.\n\n    See Also\n    --------\n    ellip : Filter design using order and critical points\n    buttord : Find order and critical points from passband and stopband spec\n    cheb1ord, cheb2ord\n    iirfilter : General filter design using order and critical frequencies\n    iirdesign : General filter design using passband and stopband spec\n\n    Examples\n    --------\n    Design an analog highpass filter such that the passband is within 3 dB\n    above 30 rad/s, while rejecting -60 dB at 10 rad/s.  Plot its\n    frequency response, showing the passband and stopband constraints in gray.\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> N, Wn = signal.ellipord(30, 10, 3, 60, True)\n    >>> b, a = signal.ellip(N, 3, 60, Wn, \'high\', True)\n    >>> w, h = signal.freqs(b, a, np.logspace(0, 3, 500))\n    >>> plt.semilogx(w, 20 * np.log10(abs(h)))\n    >>> plt.title(\'Elliptical highpass filter fit to constraints\')\n    >>> plt.xlabel(\'Frequency [radians / second]\')\n    >>> plt.ylabel(\'Amplitude [dB]\')\n    >>> plt.grid(which=\'both\', axis=\'both\')\n    >>> plt.fill([.1, 10,  10,  .1], [1e4, 1e4, -60, -60], \'0.9\', lw=0) # stop\n    >>> plt.fill([30, 30, 1e9, 1e9], [-99,  -3,  -3, -99], \'0.9\', lw=0) # pass\n    >>> plt.axis([1, 300, -80, 3])\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Name (line 3367):
    
    # Assigning a Call to a Name (line 3367):
    
    # Call to atleast_1d(...): (line 3367)
    # Processing the call arguments (line 3367)
    # Getting the type of 'wp' (line 3367)
    wp_263400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3367, 20), 'wp', False)
    # Processing the call keyword arguments (line 3367)
    kwargs_263401 = {}
    # Getting the type of 'atleast_1d' (line 3367)
    atleast_1d_263399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3367, 9), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 3367)
    atleast_1d_call_result_263402 = invoke(stypy.reporting.localization.Localization(__file__, 3367, 9), atleast_1d_263399, *[wp_263400], **kwargs_263401)
    
    # Assigning a type to the variable 'wp' (line 3367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3367, 4), 'wp', atleast_1d_call_result_263402)
    
    # Assigning a Call to a Name (line 3368):
    
    # Assigning a Call to a Name (line 3368):
    
    # Call to atleast_1d(...): (line 3368)
    # Processing the call arguments (line 3368)
    # Getting the type of 'ws' (line 3368)
    ws_263404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3368, 20), 'ws', False)
    # Processing the call keyword arguments (line 3368)
    kwargs_263405 = {}
    # Getting the type of 'atleast_1d' (line 3368)
    atleast_1d_263403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3368, 9), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 3368)
    atleast_1d_call_result_263406 = invoke(stypy.reporting.localization.Localization(__file__, 3368, 9), atleast_1d_263403, *[ws_263404], **kwargs_263405)
    
    # Assigning a type to the variable 'ws' (line 3368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3368, 4), 'ws', atleast_1d_call_result_263406)
    
    # Assigning a BinOp to a Name (line 3369):
    
    # Assigning a BinOp to a Name (line 3369):
    int_263407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3369, 18), 'int')
    
    # Call to len(...): (line 3369)
    # Processing the call arguments (line 3369)
    # Getting the type of 'wp' (line 3369)
    wp_263409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3369, 27), 'wp', False)
    # Processing the call keyword arguments (line 3369)
    kwargs_263410 = {}
    # Getting the type of 'len' (line 3369)
    len_263408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3369, 23), 'len', False)
    # Calling len(args, kwargs) (line 3369)
    len_call_result_263411 = invoke(stypy.reporting.localization.Localization(__file__, 3369, 23), len_263408, *[wp_263409], **kwargs_263410)
    
    int_263412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3369, 33), 'int')
    # Applying the binary operator '-' (line 3369)
    result_sub_263413 = python_operator(stypy.reporting.localization.Localization(__file__, 3369, 23), '-', len_call_result_263411, int_263412)
    
    # Applying the binary operator '*' (line 3369)
    result_mul_263414 = python_operator(stypy.reporting.localization.Localization(__file__, 3369, 18), '*', int_263407, result_sub_263413)
    
    # Assigning a type to the variable 'filter_type' (line 3369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3369, 4), 'filter_type', result_mul_263414)
    
    # Getting the type of 'filter_type' (line 3370)
    filter_type_263415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3370, 4), 'filter_type')
    int_263416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3370, 19), 'int')
    # Applying the binary operator '+=' (line 3370)
    result_iadd_263417 = python_operator(stypy.reporting.localization.Localization(__file__, 3370, 4), '+=', filter_type_263415, int_263416)
    # Assigning a type to the variable 'filter_type' (line 3370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3370, 4), 'filter_type', result_iadd_263417)
    
    
    
    
    # Obtaining the type of the subscript
    int_263418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3371, 10), 'int')
    # Getting the type of 'wp' (line 3371)
    wp_263419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3371, 7), 'wp')
    # Obtaining the member '__getitem__' of a type (line 3371)
    getitem___263420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3371, 7), wp_263419, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3371)
    subscript_call_result_263421 = invoke(stypy.reporting.localization.Localization(__file__, 3371, 7), getitem___263420, int_263418)
    
    
    # Obtaining the type of the subscript
    int_263422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3371, 19), 'int')
    # Getting the type of 'ws' (line 3371)
    ws_263423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3371, 16), 'ws')
    # Obtaining the member '__getitem__' of a type (line 3371)
    getitem___263424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3371, 16), ws_263423, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3371)
    subscript_call_result_263425 = invoke(stypy.reporting.localization.Localization(__file__, 3371, 16), getitem___263424, int_263422)
    
    # Applying the binary operator '>=' (line 3371)
    result_ge_263426 = python_operator(stypy.reporting.localization.Localization(__file__, 3371, 7), '>=', subscript_call_result_263421, subscript_call_result_263425)
    
    # Testing the type of an if condition (line 3371)
    if_condition_263427 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3371, 4), result_ge_263426)
    # Assigning a type to the variable 'if_condition_263427' (line 3371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3371, 4), 'if_condition_263427', if_condition_263427)
    # SSA begins for if statement (line 3371)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'filter_type' (line 3372)
    filter_type_263428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3372, 8), 'filter_type')
    int_263429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3372, 23), 'int')
    # Applying the binary operator '+=' (line 3372)
    result_iadd_263430 = python_operator(stypy.reporting.localization.Localization(__file__, 3372, 8), '+=', filter_type_263428, int_263429)
    # Assigning a type to the variable 'filter_type' (line 3372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3372, 8), 'filter_type', result_iadd_263430)
    
    # SSA join for if statement (line 3371)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'analog' (line 3375)
    analog_263431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3375, 11), 'analog')
    # Applying the 'not' unary operator (line 3375)
    result_not__263432 = python_operator(stypy.reporting.localization.Localization(__file__, 3375, 7), 'not', analog_263431)
    
    # Testing the type of an if condition (line 3375)
    if_condition_263433 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3375, 4), result_not__263432)
    # Assigning a type to the variable 'if_condition_263433' (line 3375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3375, 4), 'if_condition_263433', if_condition_263433)
    # SSA begins for if statement (line 3375)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3376):
    
    # Assigning a Call to a Name (line 3376):
    
    # Call to tan(...): (line 3376)
    # Processing the call arguments (line 3376)
    # Getting the type of 'pi' (line 3376)
    pi_263435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3376, 20), 'pi', False)
    # Getting the type of 'wp' (line 3376)
    wp_263436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3376, 25), 'wp', False)
    # Applying the binary operator '*' (line 3376)
    result_mul_263437 = python_operator(stypy.reporting.localization.Localization(__file__, 3376, 20), '*', pi_263435, wp_263436)
    
    float_263438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3376, 30), 'float')
    # Applying the binary operator 'div' (line 3376)
    result_div_263439 = python_operator(stypy.reporting.localization.Localization(__file__, 3376, 28), 'div', result_mul_263437, float_263438)
    
    # Processing the call keyword arguments (line 3376)
    kwargs_263440 = {}
    # Getting the type of 'tan' (line 3376)
    tan_263434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3376, 16), 'tan', False)
    # Calling tan(args, kwargs) (line 3376)
    tan_call_result_263441 = invoke(stypy.reporting.localization.Localization(__file__, 3376, 16), tan_263434, *[result_div_263439], **kwargs_263440)
    
    # Assigning a type to the variable 'passb' (line 3376)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3376, 8), 'passb', tan_call_result_263441)
    
    # Assigning a Call to a Name (line 3377):
    
    # Assigning a Call to a Name (line 3377):
    
    # Call to tan(...): (line 3377)
    # Processing the call arguments (line 3377)
    # Getting the type of 'pi' (line 3377)
    pi_263443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3377, 20), 'pi', False)
    # Getting the type of 'ws' (line 3377)
    ws_263444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3377, 25), 'ws', False)
    # Applying the binary operator '*' (line 3377)
    result_mul_263445 = python_operator(stypy.reporting.localization.Localization(__file__, 3377, 20), '*', pi_263443, ws_263444)
    
    float_263446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3377, 30), 'float')
    # Applying the binary operator 'div' (line 3377)
    result_div_263447 = python_operator(stypy.reporting.localization.Localization(__file__, 3377, 28), 'div', result_mul_263445, float_263446)
    
    # Processing the call keyword arguments (line 3377)
    kwargs_263448 = {}
    # Getting the type of 'tan' (line 3377)
    tan_263442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3377, 16), 'tan', False)
    # Calling tan(args, kwargs) (line 3377)
    tan_call_result_263449 = invoke(stypy.reporting.localization.Localization(__file__, 3377, 16), tan_263442, *[result_div_263447], **kwargs_263448)
    
    # Assigning a type to the variable 'stopb' (line 3377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3377, 8), 'stopb', tan_call_result_263449)
    # SSA branch for the else part of an if statement (line 3375)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 3379):
    
    # Assigning a BinOp to a Name (line 3379):
    # Getting the type of 'wp' (line 3379)
    wp_263450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3379, 16), 'wp')
    float_263451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3379, 21), 'float')
    # Applying the binary operator '*' (line 3379)
    result_mul_263452 = python_operator(stypy.reporting.localization.Localization(__file__, 3379, 16), '*', wp_263450, float_263451)
    
    # Assigning a type to the variable 'passb' (line 3379)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3379, 8), 'passb', result_mul_263452)
    
    # Assigning a BinOp to a Name (line 3380):
    
    # Assigning a BinOp to a Name (line 3380):
    # Getting the type of 'ws' (line 3380)
    ws_263453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3380, 16), 'ws')
    float_263454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3380, 21), 'float')
    # Applying the binary operator '*' (line 3380)
    result_mul_263455 = python_operator(stypy.reporting.localization.Localization(__file__, 3380, 16), '*', ws_263453, float_263454)
    
    # Assigning a type to the variable 'stopb' (line 3380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3380, 8), 'stopb', result_mul_263455)
    # SSA join for if statement (line 3375)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'filter_type' (line 3382)
    filter_type_263456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3382, 7), 'filter_type')
    int_263457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3382, 22), 'int')
    # Applying the binary operator '==' (line 3382)
    result_eq_263458 = python_operator(stypy.reporting.localization.Localization(__file__, 3382, 7), '==', filter_type_263456, int_263457)
    
    # Testing the type of an if condition (line 3382)
    if_condition_263459 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3382, 4), result_eq_263458)
    # Assigning a type to the variable 'if_condition_263459' (line 3382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3382, 4), 'if_condition_263459', if_condition_263459)
    # SSA begins for if statement (line 3382)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3383):
    
    # Assigning a BinOp to a Name (line 3383):
    # Getting the type of 'stopb' (line 3383)
    stopb_263460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3383, 14), 'stopb')
    # Getting the type of 'passb' (line 3383)
    passb_263461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3383, 22), 'passb')
    # Applying the binary operator 'div' (line 3383)
    result_div_263462 = python_operator(stypy.reporting.localization.Localization(__file__, 3383, 14), 'div', stopb_263460, passb_263461)
    
    # Assigning a type to the variable 'nat' (line 3383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3383, 8), 'nat', result_div_263462)
    # SSA branch for the else part of an if statement (line 3382)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3384)
    filter_type_263463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3384, 9), 'filter_type')
    int_263464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3384, 24), 'int')
    # Applying the binary operator '==' (line 3384)
    result_eq_263465 = python_operator(stypy.reporting.localization.Localization(__file__, 3384, 9), '==', filter_type_263463, int_263464)
    
    # Testing the type of an if condition (line 3384)
    if_condition_263466 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3384, 9), result_eq_263465)
    # Assigning a type to the variable 'if_condition_263466' (line 3384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3384, 9), 'if_condition_263466', if_condition_263466)
    # SSA begins for if statement (line 3384)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3385):
    
    # Assigning a BinOp to a Name (line 3385):
    # Getting the type of 'passb' (line 3385)
    passb_263467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3385, 14), 'passb')
    # Getting the type of 'stopb' (line 3385)
    stopb_263468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3385, 22), 'stopb')
    # Applying the binary operator 'div' (line 3385)
    result_div_263469 = python_operator(stypy.reporting.localization.Localization(__file__, 3385, 14), 'div', passb_263467, stopb_263468)
    
    # Assigning a type to the variable 'nat' (line 3385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3385, 8), 'nat', result_div_263469)
    # SSA branch for the else part of an if statement (line 3384)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3386)
    filter_type_263470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3386, 9), 'filter_type')
    int_263471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3386, 24), 'int')
    # Applying the binary operator '==' (line 3386)
    result_eq_263472 = python_operator(stypy.reporting.localization.Localization(__file__, 3386, 9), '==', filter_type_263470, int_263471)
    
    # Testing the type of an if condition (line 3386)
    if_condition_263473 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3386, 9), result_eq_263472)
    # Assigning a type to the variable 'if_condition_263473' (line 3386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3386, 9), 'if_condition_263473', if_condition_263473)
    # SSA begins for if statement (line 3386)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3387):
    
    # Assigning a Call to a Name (line 3387):
    
    # Call to fminbound(...): (line 3387)
    # Processing the call arguments (line 3387)
    # Getting the type of 'band_stop_obj' (line 3387)
    band_stop_obj_263476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3387, 33), 'band_stop_obj', False)
    
    # Obtaining the type of the subscript
    int_263477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3387, 54), 'int')
    # Getting the type of 'passb' (line 3387)
    passb_263478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3387, 48), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3387)
    getitem___263479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3387, 48), passb_263478, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3387)
    subscript_call_result_263480 = invoke(stypy.reporting.localization.Localization(__file__, 3387, 48), getitem___263479, int_263477)
    
    
    # Obtaining the type of the subscript
    int_263481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3387, 64), 'int')
    # Getting the type of 'stopb' (line 3387)
    stopb_263482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3387, 58), 'stopb', False)
    # Obtaining the member '__getitem__' of a type (line 3387)
    getitem___263483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3387, 58), stopb_263482, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3387)
    subscript_call_result_263484 = invoke(stypy.reporting.localization.Localization(__file__, 3387, 58), getitem___263483, int_263481)
    
    float_263485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3387, 69), 'float')
    # Applying the binary operator '-' (line 3387)
    result_sub_263486 = python_operator(stypy.reporting.localization.Localization(__file__, 3387, 58), '-', subscript_call_result_263484, float_263485)
    
    # Processing the call keyword arguments (line 3387)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3388)
    tuple_263487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3388, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3388)
    # Adding element type (line 3388)
    int_263488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3388, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3388, 39), tuple_263487, int_263488)
    # Adding element type (line 3388)
    # Getting the type of 'passb' (line 3388)
    passb_263489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 42), 'passb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3388, 39), tuple_263487, passb_263489)
    # Adding element type (line 3388)
    # Getting the type of 'stopb' (line 3388)
    stopb_263490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 49), 'stopb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3388, 39), tuple_263487, stopb_263490)
    # Adding element type (line 3388)
    # Getting the type of 'gpass' (line 3388)
    gpass_263491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 56), 'gpass', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3388, 39), tuple_263487, gpass_263491)
    # Adding element type (line 3388)
    # Getting the type of 'gstop' (line 3388)
    gstop_263492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 63), 'gstop', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3388, 39), tuple_263487, gstop_263492)
    # Adding element type (line 3388)
    str_263493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3388, 70), 'str', 'ellip')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3388, 39), tuple_263487, str_263493)
    
    keyword_263494 = tuple_263487
    int_263495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3389, 38), 'int')
    keyword_263496 = int_263495
    kwargs_263497 = {'disp': keyword_263496, 'args': keyword_263494}
    # Getting the type of 'optimize' (line 3387)
    optimize_263474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3387, 14), 'optimize', False)
    # Obtaining the member 'fminbound' of a type (line 3387)
    fminbound_263475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3387, 14), optimize_263474, 'fminbound')
    # Calling fminbound(args, kwargs) (line 3387)
    fminbound_call_result_263498 = invoke(stypy.reporting.localization.Localization(__file__, 3387, 14), fminbound_263475, *[band_stop_obj_263476, subscript_call_result_263480, result_sub_263486], **kwargs_263497)
    
    # Assigning a type to the variable 'wp0' (line 3387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3387, 8), 'wp0', fminbound_call_result_263498)
    
    # Assigning a Name to a Subscript (line 3390):
    
    # Assigning a Name to a Subscript (line 3390):
    # Getting the type of 'wp0' (line 3390)
    wp0_263499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3390, 19), 'wp0')
    # Getting the type of 'passb' (line 3390)
    passb_263500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3390, 8), 'passb')
    int_263501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3390, 14), 'int')
    # Storing an element on a container (line 3390)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3390, 8), passb_263500, (int_263501, wp0_263499))
    
    # Assigning a Call to a Name (line 3391):
    
    # Assigning a Call to a Name (line 3391):
    
    # Call to fminbound(...): (line 3391)
    # Processing the call arguments (line 3391)
    # Getting the type of 'band_stop_obj' (line 3391)
    band_stop_obj_263504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3391, 33), 'band_stop_obj', False)
    
    # Obtaining the type of the subscript
    int_263505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3391, 54), 'int')
    # Getting the type of 'stopb' (line 3391)
    stopb_263506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3391, 48), 'stopb', False)
    # Obtaining the member '__getitem__' of a type (line 3391)
    getitem___263507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3391, 48), stopb_263506, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3391)
    subscript_call_result_263508 = invoke(stypy.reporting.localization.Localization(__file__, 3391, 48), getitem___263507, int_263505)
    
    float_263509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3391, 59), 'float')
    # Applying the binary operator '+' (line 3391)
    result_add_263510 = python_operator(stypy.reporting.localization.Localization(__file__, 3391, 48), '+', subscript_call_result_263508, float_263509)
    
    
    # Obtaining the type of the subscript
    int_263511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3391, 72), 'int')
    # Getting the type of 'passb' (line 3391)
    passb_263512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3391, 66), 'passb', False)
    # Obtaining the member '__getitem__' of a type (line 3391)
    getitem___263513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3391, 66), passb_263512, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3391)
    subscript_call_result_263514 = invoke(stypy.reporting.localization.Localization(__file__, 3391, 66), getitem___263513, int_263511)
    
    # Processing the call keyword arguments (line 3391)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3392)
    tuple_263515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3392, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3392)
    # Adding element type (line 3392)
    int_263516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3392, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3392, 39), tuple_263515, int_263516)
    # Adding element type (line 3392)
    # Getting the type of 'passb' (line 3392)
    passb_263517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 42), 'passb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3392, 39), tuple_263515, passb_263517)
    # Adding element type (line 3392)
    # Getting the type of 'stopb' (line 3392)
    stopb_263518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 49), 'stopb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3392, 39), tuple_263515, stopb_263518)
    # Adding element type (line 3392)
    # Getting the type of 'gpass' (line 3392)
    gpass_263519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 56), 'gpass', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3392, 39), tuple_263515, gpass_263519)
    # Adding element type (line 3392)
    # Getting the type of 'gstop' (line 3392)
    gstop_263520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 63), 'gstop', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3392, 39), tuple_263515, gstop_263520)
    # Adding element type (line 3392)
    str_263521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3392, 70), 'str', 'ellip')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3392, 39), tuple_263515, str_263521)
    
    keyword_263522 = tuple_263515
    int_263523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3393, 38), 'int')
    keyword_263524 = int_263523
    kwargs_263525 = {'disp': keyword_263524, 'args': keyword_263522}
    # Getting the type of 'optimize' (line 3391)
    optimize_263502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3391, 14), 'optimize', False)
    # Obtaining the member 'fminbound' of a type (line 3391)
    fminbound_263503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3391, 14), optimize_263502, 'fminbound')
    # Calling fminbound(args, kwargs) (line 3391)
    fminbound_call_result_263526 = invoke(stypy.reporting.localization.Localization(__file__, 3391, 14), fminbound_263503, *[band_stop_obj_263504, result_add_263510, subscript_call_result_263514], **kwargs_263525)
    
    # Assigning a type to the variable 'wp1' (line 3391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3391, 8), 'wp1', fminbound_call_result_263526)
    
    # Assigning a Name to a Subscript (line 3394):
    
    # Assigning a Name to a Subscript (line 3394):
    # Getting the type of 'wp1' (line 3394)
    wp1_263527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3394, 19), 'wp1')
    # Getting the type of 'passb' (line 3394)
    passb_263528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3394, 8), 'passb')
    int_263529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3394, 14), 'int')
    # Storing an element on a container (line 3394)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3394, 8), passb_263528, (int_263529, wp1_263527))
    
    # Assigning a BinOp to a Name (line 3395):
    
    # Assigning a BinOp to a Name (line 3395):
    # Getting the type of 'stopb' (line 3395)
    stopb_263530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3395, 16), 'stopb')
    
    # Obtaining the type of the subscript
    int_263531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3395, 31), 'int')
    # Getting the type of 'passb' (line 3395)
    passb_263532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3395, 25), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3395)
    getitem___263533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3395, 25), passb_263532, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3395)
    subscript_call_result_263534 = invoke(stypy.reporting.localization.Localization(__file__, 3395, 25), getitem___263533, int_263531)
    
    
    # Obtaining the type of the subscript
    int_263535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3395, 42), 'int')
    # Getting the type of 'passb' (line 3395)
    passb_263536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3395, 36), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3395)
    getitem___263537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3395, 36), passb_263536, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3395)
    subscript_call_result_263538 = invoke(stypy.reporting.localization.Localization(__file__, 3395, 36), getitem___263537, int_263535)
    
    # Applying the binary operator '-' (line 3395)
    result_sub_263539 = python_operator(stypy.reporting.localization.Localization(__file__, 3395, 25), '-', subscript_call_result_263534, subscript_call_result_263538)
    
    # Applying the binary operator '*' (line 3395)
    result_mul_263540 = python_operator(stypy.reporting.localization.Localization(__file__, 3395, 16), '*', stopb_263530, result_sub_263539)
    
    # Getting the type of 'stopb' (line 3396)
    stopb_263541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3396, 16), 'stopb')
    int_263542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3396, 25), 'int')
    # Applying the binary operator '**' (line 3396)
    result_pow_263543 = python_operator(stypy.reporting.localization.Localization(__file__, 3396, 16), '**', stopb_263541, int_263542)
    
    
    # Obtaining the type of the subscript
    int_263544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3396, 35), 'int')
    # Getting the type of 'passb' (line 3396)
    passb_263545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3396, 29), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3396)
    getitem___263546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3396, 29), passb_263545, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3396)
    subscript_call_result_263547 = invoke(stypy.reporting.localization.Localization(__file__, 3396, 29), getitem___263546, int_263544)
    
    
    # Obtaining the type of the subscript
    int_263548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3396, 46), 'int')
    # Getting the type of 'passb' (line 3396)
    passb_263549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3396, 40), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3396)
    getitem___263550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3396, 40), passb_263549, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3396)
    subscript_call_result_263551 = invoke(stypy.reporting.localization.Localization(__file__, 3396, 40), getitem___263550, int_263548)
    
    # Applying the binary operator '*' (line 3396)
    result_mul_263552 = python_operator(stypy.reporting.localization.Localization(__file__, 3396, 29), '*', subscript_call_result_263547, subscript_call_result_263551)
    
    # Applying the binary operator '-' (line 3396)
    result_sub_263553 = python_operator(stypy.reporting.localization.Localization(__file__, 3396, 16), '-', result_pow_263543, result_mul_263552)
    
    # Applying the binary operator 'div' (line 3395)
    result_div_263554 = python_operator(stypy.reporting.localization.Localization(__file__, 3395, 15), 'div', result_mul_263540, result_sub_263553)
    
    # Assigning a type to the variable 'nat' (line 3395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3395, 8), 'nat', result_div_263554)
    # SSA branch for the else part of an if statement (line 3386)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'filter_type' (line 3397)
    filter_type_263555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3397, 9), 'filter_type')
    int_263556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3397, 24), 'int')
    # Applying the binary operator '==' (line 3397)
    result_eq_263557 = python_operator(stypy.reporting.localization.Localization(__file__, 3397, 9), '==', filter_type_263555, int_263556)
    
    # Testing the type of an if condition (line 3397)
    if_condition_263558 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3397, 9), result_eq_263557)
    # Assigning a type to the variable 'if_condition_263558' (line 3397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3397, 9), 'if_condition_263558', if_condition_263558)
    # SSA begins for if statement (line 3397)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3398):
    
    # Assigning a BinOp to a Name (line 3398):
    # Getting the type of 'stopb' (line 3398)
    stopb_263559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 16), 'stopb')
    int_263560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3398, 25), 'int')
    # Applying the binary operator '**' (line 3398)
    result_pow_263561 = python_operator(stypy.reporting.localization.Localization(__file__, 3398, 16), '**', stopb_263559, int_263560)
    
    
    # Obtaining the type of the subscript
    int_263562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3398, 35), 'int')
    # Getting the type of 'passb' (line 3398)
    passb_263563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 29), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3398)
    getitem___263564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3398, 29), passb_263563, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3398)
    subscript_call_result_263565 = invoke(stypy.reporting.localization.Localization(__file__, 3398, 29), getitem___263564, int_263562)
    
    
    # Obtaining the type of the subscript
    int_263566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3398, 46), 'int')
    # Getting the type of 'passb' (line 3398)
    passb_263567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 40), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3398)
    getitem___263568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3398, 40), passb_263567, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3398)
    subscript_call_result_263569 = invoke(stypy.reporting.localization.Localization(__file__, 3398, 40), getitem___263568, int_263566)
    
    # Applying the binary operator '*' (line 3398)
    result_mul_263570 = python_operator(stypy.reporting.localization.Localization(__file__, 3398, 29), '*', subscript_call_result_263565, subscript_call_result_263569)
    
    # Applying the binary operator '-' (line 3398)
    result_sub_263571 = python_operator(stypy.reporting.localization.Localization(__file__, 3398, 16), '-', result_pow_263561, result_mul_263570)
    
    # Getting the type of 'stopb' (line 3399)
    stopb_263572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 16), 'stopb')
    
    # Obtaining the type of the subscript
    int_263573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3399, 31), 'int')
    # Getting the type of 'passb' (line 3399)
    passb_263574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 25), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3399)
    getitem___263575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3399, 25), passb_263574, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3399)
    subscript_call_result_263576 = invoke(stypy.reporting.localization.Localization(__file__, 3399, 25), getitem___263575, int_263573)
    
    
    # Obtaining the type of the subscript
    int_263577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3399, 42), 'int')
    # Getting the type of 'passb' (line 3399)
    passb_263578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 36), 'passb')
    # Obtaining the member '__getitem__' of a type (line 3399)
    getitem___263579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3399, 36), passb_263578, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3399)
    subscript_call_result_263580 = invoke(stypy.reporting.localization.Localization(__file__, 3399, 36), getitem___263579, int_263577)
    
    # Applying the binary operator '-' (line 3399)
    result_sub_263581 = python_operator(stypy.reporting.localization.Localization(__file__, 3399, 25), '-', subscript_call_result_263576, subscript_call_result_263580)
    
    # Applying the binary operator '*' (line 3399)
    result_mul_263582 = python_operator(stypy.reporting.localization.Localization(__file__, 3399, 16), '*', stopb_263572, result_sub_263581)
    
    # Applying the binary operator 'div' (line 3398)
    result_div_263583 = python_operator(stypy.reporting.localization.Localization(__file__, 3398, 15), 'div', result_sub_263571, result_mul_263582)
    
    # Assigning a type to the variable 'nat' (line 3398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3398, 8), 'nat', result_div_263583)
    # SSA join for if statement (line 3397)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3386)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3384)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3382)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3401):
    
    # Assigning a Call to a Name (line 3401):
    
    # Call to min(...): (line 3401)
    # Processing the call arguments (line 3401)
    
    # Call to abs(...): (line 3401)
    # Processing the call arguments (line 3401)
    # Getting the type of 'nat' (line 3401)
    nat_263586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 18), 'nat', False)
    # Processing the call keyword arguments (line 3401)
    kwargs_263587 = {}
    # Getting the type of 'abs' (line 3401)
    abs_263585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 14), 'abs', False)
    # Calling abs(args, kwargs) (line 3401)
    abs_call_result_263588 = invoke(stypy.reporting.localization.Localization(__file__, 3401, 14), abs_263585, *[nat_263586], **kwargs_263587)
    
    # Processing the call keyword arguments (line 3401)
    kwargs_263589 = {}
    # Getting the type of 'min' (line 3401)
    min_263584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 10), 'min', False)
    # Calling min(args, kwargs) (line 3401)
    min_call_result_263590 = invoke(stypy.reporting.localization.Localization(__file__, 3401, 10), min_263584, *[abs_call_result_263588], **kwargs_263589)
    
    # Assigning a type to the variable 'nat' (line 3401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3401, 4), 'nat', min_call_result_263590)
    
    # Assigning a BinOp to a Name (line 3403):
    
    # Assigning a BinOp to a Name (line 3403):
    int_263591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3403, 12), 'int')
    float_263592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3403, 19), 'float')
    # Getting the type of 'gstop' (line 3403)
    gstop_263593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3403, 25), 'gstop')
    # Applying the binary operator '*' (line 3403)
    result_mul_263594 = python_operator(stypy.reporting.localization.Localization(__file__, 3403, 19), '*', float_263592, gstop_263593)
    
    # Applying the binary operator '**' (line 3403)
    result_pow_263595 = python_operator(stypy.reporting.localization.Localization(__file__, 3403, 12), '**', int_263591, result_mul_263594)
    
    # Assigning a type to the variable 'GSTOP' (line 3403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3403, 4), 'GSTOP', result_pow_263595)
    
    # Assigning a BinOp to a Name (line 3404):
    
    # Assigning a BinOp to a Name (line 3404):
    int_263596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3404, 12), 'int')
    float_263597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3404, 19), 'float')
    # Getting the type of 'gpass' (line 3404)
    gpass_263598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3404, 25), 'gpass')
    # Applying the binary operator '*' (line 3404)
    result_mul_263599 = python_operator(stypy.reporting.localization.Localization(__file__, 3404, 19), '*', float_263597, gpass_263598)
    
    # Applying the binary operator '**' (line 3404)
    result_pow_263600 = python_operator(stypy.reporting.localization.Localization(__file__, 3404, 12), '**', int_263596, result_mul_263599)
    
    # Assigning a type to the variable 'GPASS' (line 3404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3404, 4), 'GPASS', result_pow_263600)
    
    # Assigning a Call to a Name (line 3405):
    
    # Assigning a Call to a Name (line 3405):
    
    # Call to sqrt(...): (line 3405)
    # Processing the call arguments (line 3405)
    # Getting the type of 'GPASS' (line 3405)
    GPASS_263602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3405, 17), 'GPASS', False)
    float_263603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3405, 25), 'float')
    # Applying the binary operator '-' (line 3405)
    result_sub_263604 = python_operator(stypy.reporting.localization.Localization(__file__, 3405, 17), '-', GPASS_263602, float_263603)
    
    # Getting the type of 'GSTOP' (line 3405)
    GSTOP_263605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3405, 33), 'GSTOP', False)
    float_263606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3405, 41), 'float')
    # Applying the binary operator '-' (line 3405)
    result_sub_263607 = python_operator(stypy.reporting.localization.Localization(__file__, 3405, 33), '-', GSTOP_263605, float_263606)
    
    # Applying the binary operator 'div' (line 3405)
    result_div_263608 = python_operator(stypy.reporting.localization.Localization(__file__, 3405, 16), 'div', result_sub_263604, result_sub_263607)
    
    # Processing the call keyword arguments (line 3405)
    kwargs_263609 = {}
    # Getting the type of 'sqrt' (line 3405)
    sqrt_263601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3405, 11), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3405)
    sqrt_call_result_263610 = invoke(stypy.reporting.localization.Localization(__file__, 3405, 11), sqrt_263601, *[result_div_263608], **kwargs_263609)
    
    # Assigning a type to the variable 'arg1' (line 3405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3405, 4), 'arg1', sqrt_call_result_263610)
    
    # Assigning a BinOp to a Name (line 3406):
    
    # Assigning a BinOp to a Name (line 3406):
    float_263611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3406, 11), 'float')
    # Getting the type of 'nat' (line 3406)
    nat_263612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3406, 17), 'nat')
    # Applying the binary operator 'div' (line 3406)
    result_div_263613 = python_operator(stypy.reporting.localization.Localization(__file__, 3406, 11), 'div', float_263611, nat_263612)
    
    # Assigning a type to the variable 'arg0' (line 3406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3406, 4), 'arg0', result_div_263613)
    
    # Assigning a Call to a Name (line 3407):
    
    # Assigning a Call to a Name (line 3407):
    
    # Call to ellipk(...): (line 3407)
    # Processing the call arguments (line 3407)
    
    # Obtaining an instance of the builtin type 'list' (line 3407)
    list_263616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3407, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3407)
    # Adding element type (line 3407)
    # Getting the type of 'arg0' (line 3407)
    arg0_263617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 25), 'arg0', False)
    int_263618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3407, 33), 'int')
    # Applying the binary operator '**' (line 3407)
    result_pow_263619 = python_operator(stypy.reporting.localization.Localization(__file__, 3407, 25), '**', arg0_263617, int_263618)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3407, 24), list_263616, result_pow_263619)
    # Adding element type (line 3407)
    int_263620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3407, 36), 'int')
    # Getting the type of 'arg0' (line 3407)
    arg0_263621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 40), 'arg0', False)
    int_263622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3407, 48), 'int')
    # Applying the binary operator '**' (line 3407)
    result_pow_263623 = python_operator(stypy.reporting.localization.Localization(__file__, 3407, 40), '**', arg0_263621, int_263622)
    
    # Applying the binary operator '-' (line 3407)
    result_sub_263624 = python_operator(stypy.reporting.localization.Localization(__file__, 3407, 36), '-', int_263620, result_pow_263623)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3407, 24), list_263616, result_sub_263624)
    
    # Processing the call keyword arguments (line 3407)
    kwargs_263625 = {}
    # Getting the type of 'special' (line 3407)
    special_263614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 9), 'special', False)
    # Obtaining the member 'ellipk' of a type (line 3407)
    ellipk_263615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3407, 9), special_263614, 'ellipk')
    # Calling ellipk(args, kwargs) (line 3407)
    ellipk_call_result_263626 = invoke(stypy.reporting.localization.Localization(__file__, 3407, 9), ellipk_263615, *[list_263616], **kwargs_263625)
    
    # Assigning a type to the variable 'd0' (line 3407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3407, 4), 'd0', ellipk_call_result_263626)
    
    # Assigning a Call to a Name (line 3408):
    
    # Assigning a Call to a Name (line 3408):
    
    # Call to ellipk(...): (line 3408)
    # Processing the call arguments (line 3408)
    
    # Obtaining an instance of the builtin type 'list' (line 3408)
    list_263629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3408, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3408)
    # Adding element type (line 3408)
    # Getting the type of 'arg1' (line 3408)
    arg1_263630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 25), 'arg1', False)
    int_263631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3408, 33), 'int')
    # Applying the binary operator '**' (line 3408)
    result_pow_263632 = python_operator(stypy.reporting.localization.Localization(__file__, 3408, 25), '**', arg1_263630, int_263631)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3408, 24), list_263629, result_pow_263632)
    # Adding element type (line 3408)
    int_263633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3408, 36), 'int')
    # Getting the type of 'arg1' (line 3408)
    arg1_263634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 40), 'arg1', False)
    int_263635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3408, 48), 'int')
    # Applying the binary operator '**' (line 3408)
    result_pow_263636 = python_operator(stypy.reporting.localization.Localization(__file__, 3408, 40), '**', arg1_263634, int_263635)
    
    # Applying the binary operator '-' (line 3408)
    result_sub_263637 = python_operator(stypy.reporting.localization.Localization(__file__, 3408, 36), '-', int_263633, result_pow_263636)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3408, 24), list_263629, result_sub_263637)
    
    # Processing the call keyword arguments (line 3408)
    kwargs_263638 = {}
    # Getting the type of 'special' (line 3408)
    special_263627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 9), 'special', False)
    # Obtaining the member 'ellipk' of a type (line 3408)
    ellipk_263628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3408, 9), special_263627, 'ellipk')
    # Calling ellipk(args, kwargs) (line 3408)
    ellipk_call_result_263639 = invoke(stypy.reporting.localization.Localization(__file__, 3408, 9), ellipk_263628, *[list_263629], **kwargs_263638)
    
    # Assigning a type to the variable 'd1' (line 3408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3408, 4), 'd1', ellipk_call_result_263639)
    
    # Assigning a Call to a Name (line 3409):
    
    # Assigning a Call to a Name (line 3409):
    
    # Call to int(...): (line 3409)
    # Processing the call arguments (line 3409)
    
    # Call to ceil(...): (line 3409)
    # Processing the call arguments (line 3409)
    
    # Obtaining the type of the subscript
    int_263642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3409, 22), 'int')
    # Getting the type of 'd0' (line 3409)
    d0_263643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 19), 'd0', False)
    # Obtaining the member '__getitem__' of a type (line 3409)
    getitem___263644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3409, 19), d0_263643, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3409)
    subscript_call_result_263645 = invoke(stypy.reporting.localization.Localization(__file__, 3409, 19), getitem___263644, int_263642)
    
    
    # Obtaining the type of the subscript
    int_263646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3409, 30), 'int')
    # Getting the type of 'd1' (line 3409)
    d1_263647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 27), 'd1', False)
    # Obtaining the member '__getitem__' of a type (line 3409)
    getitem___263648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3409, 27), d1_263647, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3409)
    subscript_call_result_263649 = invoke(stypy.reporting.localization.Localization(__file__, 3409, 27), getitem___263648, int_263646)
    
    # Applying the binary operator '*' (line 3409)
    result_mul_263650 = python_operator(stypy.reporting.localization.Localization(__file__, 3409, 19), '*', subscript_call_result_263645, subscript_call_result_263649)
    
    
    # Obtaining the type of the subscript
    int_263651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3409, 39), 'int')
    # Getting the type of 'd0' (line 3409)
    d0_263652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 36), 'd0', False)
    # Obtaining the member '__getitem__' of a type (line 3409)
    getitem___263653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3409, 36), d0_263652, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3409)
    subscript_call_result_263654 = invoke(stypy.reporting.localization.Localization(__file__, 3409, 36), getitem___263653, int_263651)
    
    
    # Obtaining the type of the subscript
    int_263655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3409, 47), 'int')
    # Getting the type of 'd1' (line 3409)
    d1_263656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 44), 'd1', False)
    # Obtaining the member '__getitem__' of a type (line 3409)
    getitem___263657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3409, 44), d1_263656, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3409)
    subscript_call_result_263658 = invoke(stypy.reporting.localization.Localization(__file__, 3409, 44), getitem___263657, int_263655)
    
    # Applying the binary operator '*' (line 3409)
    result_mul_263659 = python_operator(stypy.reporting.localization.Localization(__file__, 3409, 36), '*', subscript_call_result_263654, subscript_call_result_263658)
    
    # Applying the binary operator 'div' (line 3409)
    result_div_263660 = python_operator(stypy.reporting.localization.Localization(__file__, 3409, 33), 'div', result_mul_263650, result_mul_263659)
    
    # Processing the call keyword arguments (line 3409)
    kwargs_263661 = {}
    # Getting the type of 'ceil' (line 3409)
    ceil_263641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 14), 'ceil', False)
    # Calling ceil(args, kwargs) (line 3409)
    ceil_call_result_263662 = invoke(stypy.reporting.localization.Localization(__file__, 3409, 14), ceil_263641, *[result_div_263660], **kwargs_263661)
    
    # Processing the call keyword arguments (line 3409)
    kwargs_263663 = {}
    # Getting the type of 'int' (line 3409)
    int_263640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 10), 'int', False)
    # Calling int(args, kwargs) (line 3409)
    int_call_result_263664 = invoke(stypy.reporting.localization.Localization(__file__, 3409, 10), int_263640, *[ceil_call_result_263662], **kwargs_263663)
    
    # Assigning a type to the variable 'ord' (line 3409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3409, 4), 'ord', int_call_result_263664)
    
    
    # Getting the type of 'analog' (line 3411)
    analog_263665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 11), 'analog')
    # Applying the 'not' unary operator (line 3411)
    result_not__263666 = python_operator(stypy.reporting.localization.Localization(__file__, 3411, 7), 'not', analog_263665)
    
    # Testing the type of an if condition (line 3411)
    if_condition_263667 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3411, 4), result_not__263666)
    # Assigning a type to the variable 'if_condition_263667' (line 3411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3411, 4), 'if_condition_263667', if_condition_263667)
    # SSA begins for if statement (line 3411)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3412):
    
    # Assigning a BinOp to a Name (line 3412):
    
    # Call to arctan(...): (line 3412)
    # Processing the call arguments (line 3412)
    # Getting the type of 'passb' (line 3412)
    passb_263669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 20), 'passb', False)
    # Processing the call keyword arguments (line 3412)
    kwargs_263670 = {}
    # Getting the type of 'arctan' (line 3412)
    arctan_263668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 13), 'arctan', False)
    # Calling arctan(args, kwargs) (line 3412)
    arctan_call_result_263671 = invoke(stypy.reporting.localization.Localization(__file__, 3412, 13), arctan_263668, *[passb_263669], **kwargs_263670)
    
    float_263672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3412, 29), 'float')
    # Applying the binary operator '*' (line 3412)
    result_mul_263673 = python_operator(stypy.reporting.localization.Localization(__file__, 3412, 13), '*', arctan_call_result_263671, float_263672)
    
    # Getting the type of 'pi' (line 3412)
    pi_263674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 35), 'pi')
    # Applying the binary operator 'div' (line 3412)
    result_div_263675 = python_operator(stypy.reporting.localization.Localization(__file__, 3412, 33), 'div', result_mul_263673, pi_263674)
    
    # Assigning a type to the variable 'wn' (line 3412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3412, 8), 'wn', result_div_263675)
    # SSA branch for the else part of an if statement (line 3411)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 3414):
    
    # Assigning a Name to a Name (line 3414):
    # Getting the type of 'passb' (line 3414)
    passb_263676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 13), 'passb')
    # Assigning a type to the variable 'wn' (line 3414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3414, 8), 'wn', passb_263676)
    # SSA join for if statement (line 3411)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 3416)
    # Processing the call arguments (line 3416)
    # Getting the type of 'wn' (line 3416)
    wn_263678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 11), 'wn', False)
    # Processing the call keyword arguments (line 3416)
    kwargs_263679 = {}
    # Getting the type of 'len' (line 3416)
    len_263677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 7), 'len', False)
    # Calling len(args, kwargs) (line 3416)
    len_call_result_263680 = invoke(stypy.reporting.localization.Localization(__file__, 3416, 7), len_263677, *[wn_263678], **kwargs_263679)
    
    int_263681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3416, 18), 'int')
    # Applying the binary operator '==' (line 3416)
    result_eq_263682 = python_operator(stypy.reporting.localization.Localization(__file__, 3416, 7), '==', len_call_result_263680, int_263681)
    
    # Testing the type of an if condition (line 3416)
    if_condition_263683 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3416, 4), result_eq_263682)
    # Assigning a type to the variable 'if_condition_263683' (line 3416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3416, 4), 'if_condition_263683', if_condition_263683)
    # SSA begins for if statement (line 3416)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 3417):
    
    # Assigning a Subscript to a Name (line 3417):
    
    # Obtaining the type of the subscript
    int_263684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3417, 16), 'int')
    # Getting the type of 'wn' (line 3417)
    wn_263685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 13), 'wn')
    # Obtaining the member '__getitem__' of a type (line 3417)
    getitem___263686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3417, 13), wn_263685, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3417)
    subscript_call_result_263687 = invoke(stypy.reporting.localization.Localization(__file__, 3417, 13), getitem___263686, int_263684)
    
    # Assigning a type to the variable 'wn' (line 3417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3417, 8), 'wn', subscript_call_result_263687)
    # SSA join for if statement (line 3416)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3418)
    tuple_263688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3418, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3418)
    # Adding element type (line 3418)
    # Getting the type of 'ord' (line 3418)
    ord_263689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 11), 'ord')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3418, 11), tuple_263688, ord_263689)
    # Adding element type (line 3418)
    # Getting the type of 'wn' (line 3418)
    wn_263690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 16), 'wn')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3418, 11), tuple_263688, wn_263690)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3418, 4), 'stypy_return_type', tuple_263688)
    
    # ################# End of 'ellipord(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ellipord' in the type store
    # Getting the type of 'stypy_return_type' (line 3298)
    stypy_return_type_263691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3298, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_263691)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ellipord'
    return stypy_return_type_263691

# Assigning a type to the variable 'ellipord' (line 3298)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3298, 0), 'ellipord', ellipord)

@norecursion
def buttap(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'buttap'
    module_type_store = module_type_store.open_function_context('buttap', 3421, 0, False)
    
    # Passed parameters checking function
    buttap.stypy_localization = localization
    buttap.stypy_type_of_self = None
    buttap.stypy_type_store = module_type_store
    buttap.stypy_function_name = 'buttap'
    buttap.stypy_param_names_list = ['N']
    buttap.stypy_varargs_param_name = None
    buttap.stypy_kwargs_param_name = None
    buttap.stypy_call_defaults = defaults
    buttap.stypy_call_varargs = varargs
    buttap.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'buttap', ['N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'buttap', localization, ['N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'buttap(...)' code ##################

    str_263692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3430, (-1)), 'str', 'Return (z,p,k) for analog prototype of Nth-order Butterworth filter.\n\n    The filter will have an angular (e.g. rad/s) cutoff frequency of 1.\n\n    See Also\n    --------\n    butter : Filter design function using this prototype\n\n    ')
    
    
    
    # Call to abs(...): (line 3431)
    # Processing the call arguments (line 3431)
    
    # Call to int(...): (line 3431)
    # Processing the call arguments (line 3431)
    # Getting the type of 'N' (line 3431)
    N_263695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3431, 15), 'N', False)
    # Processing the call keyword arguments (line 3431)
    kwargs_263696 = {}
    # Getting the type of 'int' (line 3431)
    int_263694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3431, 11), 'int', False)
    # Calling int(args, kwargs) (line 3431)
    int_call_result_263697 = invoke(stypy.reporting.localization.Localization(__file__, 3431, 11), int_263694, *[N_263695], **kwargs_263696)
    
    # Processing the call keyword arguments (line 3431)
    kwargs_263698 = {}
    # Getting the type of 'abs' (line 3431)
    abs_263693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3431, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 3431)
    abs_call_result_263699 = invoke(stypy.reporting.localization.Localization(__file__, 3431, 7), abs_263693, *[int_call_result_263697], **kwargs_263698)
    
    # Getting the type of 'N' (line 3431)
    N_263700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3431, 22), 'N')
    # Applying the binary operator '!=' (line 3431)
    result_ne_263701 = python_operator(stypy.reporting.localization.Localization(__file__, 3431, 7), '!=', abs_call_result_263699, N_263700)
    
    # Testing the type of an if condition (line 3431)
    if_condition_263702 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3431, 4), result_ne_263701)
    # Assigning a type to the variable 'if_condition_263702' (line 3431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3431, 4), 'if_condition_263702', if_condition_263702)
    # SSA begins for if statement (line 3431)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3432)
    # Processing the call arguments (line 3432)
    str_263704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3432, 25), 'str', 'Filter order must be a nonnegative integer')
    # Processing the call keyword arguments (line 3432)
    kwargs_263705 = {}
    # Getting the type of 'ValueError' (line 3432)
    ValueError_263703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3432, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3432)
    ValueError_call_result_263706 = invoke(stypy.reporting.localization.Localization(__file__, 3432, 14), ValueError_263703, *[str_263704], **kwargs_263705)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3432, 8), ValueError_call_result_263706, 'raise parameter', BaseException)
    # SSA join for if statement (line 3431)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3433):
    
    # Assigning a Call to a Name (line 3433):
    
    # Call to array(...): (line 3433)
    # Processing the call arguments (line 3433)
    
    # Obtaining an instance of the builtin type 'list' (line 3433)
    list_263709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3433, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3433)
    
    # Processing the call keyword arguments (line 3433)
    kwargs_263710 = {}
    # Getting the type of 'numpy' (line 3433)
    numpy_263707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3433, 8), 'numpy', False)
    # Obtaining the member 'array' of a type (line 3433)
    array_263708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3433, 8), numpy_263707, 'array')
    # Calling array(args, kwargs) (line 3433)
    array_call_result_263711 = invoke(stypy.reporting.localization.Localization(__file__, 3433, 8), array_263708, *[list_263709], **kwargs_263710)
    
    # Assigning a type to the variable 'z' (line 3433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3433, 4), 'z', array_call_result_263711)
    
    # Assigning a Call to a Name (line 3434):
    
    # Assigning a Call to a Name (line 3434):
    
    # Call to arange(...): (line 3434)
    # Processing the call arguments (line 3434)
    
    # Getting the type of 'N' (line 3434)
    N_263714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 22), 'N', False)
    # Applying the 'usub' unary operator (line 3434)
    result___neg___263715 = python_operator(stypy.reporting.localization.Localization(__file__, 3434, 21), 'usub', N_263714)
    
    int_263716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3434, 24), 'int')
    # Applying the binary operator '+' (line 3434)
    result_add_263717 = python_operator(stypy.reporting.localization.Localization(__file__, 3434, 21), '+', result___neg___263715, int_263716)
    
    # Getting the type of 'N' (line 3434)
    N_263718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 27), 'N', False)
    int_263719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3434, 30), 'int')
    # Processing the call keyword arguments (line 3434)
    kwargs_263720 = {}
    # Getting the type of 'numpy' (line 3434)
    numpy_263712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 8), 'numpy', False)
    # Obtaining the member 'arange' of a type (line 3434)
    arange_263713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3434, 8), numpy_263712, 'arange')
    # Calling arange(args, kwargs) (line 3434)
    arange_call_result_263721 = invoke(stypy.reporting.localization.Localization(__file__, 3434, 8), arange_263713, *[result_add_263717, N_263718, int_263719], **kwargs_263720)
    
    # Assigning a type to the variable 'm' (line 3434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3434, 4), 'm', arange_call_result_263721)
    
    # Assigning a UnaryOp to a Name (line 3436):
    
    # Assigning a UnaryOp to a Name (line 3436):
    
    
    # Call to exp(...): (line 3436)
    # Processing the call arguments (line 3436)
    complex_263724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3436, 19), 'complex')
    # Getting the type of 'pi' (line 3436)
    pi_263725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3436, 24), 'pi', False)
    # Applying the binary operator '*' (line 3436)
    result_mul_263726 = python_operator(stypy.reporting.localization.Localization(__file__, 3436, 19), '*', complex_263724, pi_263725)
    
    # Getting the type of 'm' (line 3436)
    m_263727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3436, 29), 'm', False)
    # Applying the binary operator '*' (line 3436)
    result_mul_263728 = python_operator(stypy.reporting.localization.Localization(__file__, 3436, 27), '*', result_mul_263726, m_263727)
    
    int_263729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3436, 34), 'int')
    # Getting the type of 'N' (line 3436)
    N_263730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3436, 38), 'N', False)
    # Applying the binary operator '*' (line 3436)
    result_mul_263731 = python_operator(stypy.reporting.localization.Localization(__file__, 3436, 34), '*', int_263729, N_263730)
    
    # Applying the binary operator 'div' (line 3436)
    result_div_263732 = python_operator(stypy.reporting.localization.Localization(__file__, 3436, 31), 'div', result_mul_263728, result_mul_263731)
    
    # Processing the call keyword arguments (line 3436)
    kwargs_263733 = {}
    # Getting the type of 'numpy' (line 3436)
    numpy_263722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3436, 9), 'numpy', False)
    # Obtaining the member 'exp' of a type (line 3436)
    exp_263723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3436, 9), numpy_263722, 'exp')
    # Calling exp(args, kwargs) (line 3436)
    exp_call_result_263734 = invoke(stypy.reporting.localization.Localization(__file__, 3436, 9), exp_263723, *[result_div_263732], **kwargs_263733)
    
    # Applying the 'usub' unary operator (line 3436)
    result___neg___263735 = python_operator(stypy.reporting.localization.Localization(__file__, 3436, 8), 'usub', exp_call_result_263734)
    
    # Assigning a type to the variable 'p' (line 3436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3436, 4), 'p', result___neg___263735)
    
    # Assigning a Num to a Name (line 3437):
    
    # Assigning a Num to a Name (line 3437):
    int_263736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3437, 8), 'int')
    # Assigning a type to the variable 'k' (line 3437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3437, 4), 'k', int_263736)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3438)
    tuple_263737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3438, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3438)
    # Adding element type (line 3438)
    # Getting the type of 'z' (line 3438)
    z_263738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3438, 11), 'z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3438, 11), tuple_263737, z_263738)
    # Adding element type (line 3438)
    # Getting the type of 'p' (line 3438)
    p_263739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3438, 14), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3438, 11), tuple_263737, p_263739)
    # Adding element type (line 3438)
    # Getting the type of 'k' (line 3438)
    k_263740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3438, 17), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3438, 11), tuple_263737, k_263740)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3438, 4), 'stypy_return_type', tuple_263737)
    
    # ################# End of 'buttap(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'buttap' in the type store
    # Getting the type of 'stypy_return_type' (line 3421)
    stypy_return_type_263741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3421, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_263741)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'buttap'
    return stypy_return_type_263741

# Assigning a type to the variable 'buttap' (line 3421)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3421, 0), 'buttap', buttap)

@norecursion
def cheb1ap(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'cheb1ap'
    module_type_store = module_type_store.open_function_context('cheb1ap', 3441, 0, False)
    
    # Passed parameters checking function
    cheb1ap.stypy_localization = localization
    cheb1ap.stypy_type_of_self = None
    cheb1ap.stypy_type_store = module_type_store
    cheb1ap.stypy_function_name = 'cheb1ap'
    cheb1ap.stypy_param_names_list = ['N', 'rp']
    cheb1ap.stypy_varargs_param_name = None
    cheb1ap.stypy_kwargs_param_name = None
    cheb1ap.stypy_call_defaults = defaults
    cheb1ap.stypy_call_varargs = varargs
    cheb1ap.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cheb1ap', ['N', 'rp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cheb1ap', localization, ['N', 'rp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cheb1ap(...)' code ##################

    str_263742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3454, (-1)), 'str', "\n    Return (z,p,k) for Nth-order Chebyshev type I analog lowpass filter.\n\n    The returned filter prototype has `rp` decibels of ripple in the passband.\n\n    The filter's angular (e.g. rad/s) cutoff frequency is normalized to 1,\n    defined as the point at which the gain first drops below ``-rp``.\n\n    See Also\n    --------\n    cheby1 : Filter design function using this prototype\n\n    ")
    
    
    
    # Call to abs(...): (line 3455)
    # Processing the call arguments (line 3455)
    
    # Call to int(...): (line 3455)
    # Processing the call arguments (line 3455)
    # Getting the type of 'N' (line 3455)
    N_263745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3455, 15), 'N', False)
    # Processing the call keyword arguments (line 3455)
    kwargs_263746 = {}
    # Getting the type of 'int' (line 3455)
    int_263744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3455, 11), 'int', False)
    # Calling int(args, kwargs) (line 3455)
    int_call_result_263747 = invoke(stypy.reporting.localization.Localization(__file__, 3455, 11), int_263744, *[N_263745], **kwargs_263746)
    
    # Processing the call keyword arguments (line 3455)
    kwargs_263748 = {}
    # Getting the type of 'abs' (line 3455)
    abs_263743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3455, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 3455)
    abs_call_result_263749 = invoke(stypy.reporting.localization.Localization(__file__, 3455, 7), abs_263743, *[int_call_result_263747], **kwargs_263748)
    
    # Getting the type of 'N' (line 3455)
    N_263750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3455, 22), 'N')
    # Applying the binary operator '!=' (line 3455)
    result_ne_263751 = python_operator(stypy.reporting.localization.Localization(__file__, 3455, 7), '!=', abs_call_result_263749, N_263750)
    
    # Testing the type of an if condition (line 3455)
    if_condition_263752 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3455, 4), result_ne_263751)
    # Assigning a type to the variable 'if_condition_263752' (line 3455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3455, 4), 'if_condition_263752', if_condition_263752)
    # SSA begins for if statement (line 3455)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3456)
    # Processing the call arguments (line 3456)
    str_263754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3456, 25), 'str', 'Filter order must be a nonnegative integer')
    # Processing the call keyword arguments (line 3456)
    kwargs_263755 = {}
    # Getting the type of 'ValueError' (line 3456)
    ValueError_263753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3456, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3456)
    ValueError_call_result_263756 = invoke(stypy.reporting.localization.Localization(__file__, 3456, 14), ValueError_263753, *[str_263754], **kwargs_263755)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3456, 8), ValueError_call_result_263756, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 3455)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'N' (line 3457)
    N_263757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3457, 9), 'N')
    int_263758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3457, 14), 'int')
    # Applying the binary operator '==' (line 3457)
    result_eq_263759 = python_operator(stypy.reporting.localization.Localization(__file__, 3457, 9), '==', N_263757, int_263758)
    
    # Testing the type of an if condition (line 3457)
    if_condition_263760 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3457, 9), result_eq_263759)
    # Assigning a type to the variable 'if_condition_263760' (line 3457)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3457, 9), 'if_condition_263760', if_condition_263760)
    # SSA begins for if statement (line 3457)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3460)
    tuple_263761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3460, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3460)
    # Adding element type (line 3460)
    
    # Call to array(...): (line 3460)
    # Processing the call arguments (line 3460)
    
    # Obtaining an instance of the builtin type 'list' (line 3460)
    list_263764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3460, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3460)
    
    # Processing the call keyword arguments (line 3460)
    kwargs_263765 = {}
    # Getting the type of 'numpy' (line 3460)
    numpy_263762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3460, 15), 'numpy', False)
    # Obtaining the member 'array' of a type (line 3460)
    array_263763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3460, 15), numpy_263762, 'array')
    # Calling array(args, kwargs) (line 3460)
    array_call_result_263766 = invoke(stypy.reporting.localization.Localization(__file__, 3460, 15), array_263763, *[list_263764], **kwargs_263765)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3460, 15), tuple_263761, array_call_result_263766)
    # Adding element type (line 3460)
    
    # Call to array(...): (line 3460)
    # Processing the call arguments (line 3460)
    
    # Obtaining an instance of the builtin type 'list' (line 3460)
    list_263769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3460, 44), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3460)
    
    # Processing the call keyword arguments (line 3460)
    kwargs_263770 = {}
    # Getting the type of 'numpy' (line 3460)
    numpy_263767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3460, 32), 'numpy', False)
    # Obtaining the member 'array' of a type (line 3460)
    array_263768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3460, 32), numpy_263767, 'array')
    # Calling array(args, kwargs) (line 3460)
    array_call_result_263771 = invoke(stypy.reporting.localization.Localization(__file__, 3460, 32), array_263768, *[list_263769], **kwargs_263770)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3460, 15), tuple_263761, array_call_result_263771)
    # Adding element type (line 3460)
    int_263772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3460, 49), 'int')
    
    # Getting the type of 'rp' (line 3460)
    rp_263773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3460, 55), 'rp')
    # Applying the 'usub' unary operator (line 3460)
    result___neg___263774 = python_operator(stypy.reporting.localization.Localization(__file__, 3460, 54), 'usub', rp_263773)
    
    int_263775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3460, 58), 'int')
    # Applying the binary operator 'div' (line 3460)
    result_div_263776 = python_operator(stypy.reporting.localization.Localization(__file__, 3460, 54), 'div', result___neg___263774, int_263775)
    
    # Applying the binary operator '**' (line 3460)
    result_pow_263777 = python_operator(stypy.reporting.localization.Localization(__file__, 3460, 49), '**', int_263772, result_div_263776)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3460, 15), tuple_263761, result_pow_263777)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3460, 8), 'stypy_return_type', tuple_263761)
    # SSA join for if statement (line 3457)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3455)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3461):
    
    # Assigning a Call to a Name (line 3461):
    
    # Call to array(...): (line 3461)
    # Processing the call arguments (line 3461)
    
    # Obtaining an instance of the builtin type 'list' (line 3461)
    list_263780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3461, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3461)
    
    # Processing the call keyword arguments (line 3461)
    kwargs_263781 = {}
    # Getting the type of 'numpy' (line 3461)
    numpy_263778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3461, 8), 'numpy', False)
    # Obtaining the member 'array' of a type (line 3461)
    array_263779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3461, 8), numpy_263778, 'array')
    # Calling array(args, kwargs) (line 3461)
    array_call_result_263782 = invoke(stypy.reporting.localization.Localization(__file__, 3461, 8), array_263779, *[list_263780], **kwargs_263781)
    
    # Assigning a type to the variable 'z' (line 3461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3461, 4), 'z', array_call_result_263782)
    
    # Assigning a Call to a Name (line 3464):
    
    # Assigning a Call to a Name (line 3464):
    
    # Call to sqrt(...): (line 3464)
    # Processing the call arguments (line 3464)
    int_263785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3464, 21), 'int')
    float_263786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3464, 28), 'float')
    # Getting the type of 'rp' (line 3464)
    rp_263787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3464, 34), 'rp', False)
    # Applying the binary operator '*' (line 3464)
    result_mul_263788 = python_operator(stypy.reporting.localization.Localization(__file__, 3464, 28), '*', float_263786, rp_263787)
    
    # Applying the binary operator '**' (line 3464)
    result_pow_263789 = python_operator(stypy.reporting.localization.Localization(__file__, 3464, 21), '**', int_263785, result_mul_263788)
    
    float_263790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3464, 40), 'float')
    # Applying the binary operator '-' (line 3464)
    result_sub_263791 = python_operator(stypy.reporting.localization.Localization(__file__, 3464, 21), '-', result_pow_263789, float_263790)
    
    # Processing the call keyword arguments (line 3464)
    kwargs_263792 = {}
    # Getting the type of 'numpy' (line 3464)
    numpy_263783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3464, 10), 'numpy', False)
    # Obtaining the member 'sqrt' of a type (line 3464)
    sqrt_263784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3464, 10), numpy_263783, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3464)
    sqrt_call_result_263793 = invoke(stypy.reporting.localization.Localization(__file__, 3464, 10), sqrt_263784, *[result_sub_263791], **kwargs_263792)
    
    # Assigning a type to the variable 'eps' (line 3464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3464, 4), 'eps', sqrt_call_result_263793)
    
    # Assigning a BinOp to a Name (line 3465):
    
    # Assigning a BinOp to a Name (line 3465):
    float_263794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3465, 9), 'float')
    # Getting the type of 'N' (line 3465)
    N_263795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3465, 15), 'N')
    # Applying the binary operator 'div' (line 3465)
    result_div_263796 = python_operator(stypy.reporting.localization.Localization(__file__, 3465, 9), 'div', float_263794, N_263795)
    
    
    # Call to arcsinh(...): (line 3465)
    # Processing the call arguments (line 3465)
    int_263798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3465, 27), 'int')
    # Getting the type of 'eps' (line 3465)
    eps_263799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3465, 31), 'eps', False)
    # Applying the binary operator 'div' (line 3465)
    result_div_263800 = python_operator(stypy.reporting.localization.Localization(__file__, 3465, 27), 'div', int_263798, eps_263799)
    
    # Processing the call keyword arguments (line 3465)
    kwargs_263801 = {}
    # Getting the type of 'arcsinh' (line 3465)
    arcsinh_263797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3465, 19), 'arcsinh', False)
    # Calling arcsinh(args, kwargs) (line 3465)
    arcsinh_call_result_263802 = invoke(stypy.reporting.localization.Localization(__file__, 3465, 19), arcsinh_263797, *[result_div_263800], **kwargs_263801)
    
    # Applying the binary operator '*' (line 3465)
    result_mul_263803 = python_operator(stypy.reporting.localization.Localization(__file__, 3465, 17), '*', result_div_263796, arcsinh_call_result_263802)
    
    # Assigning a type to the variable 'mu' (line 3465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3465, 4), 'mu', result_mul_263803)
    
    # Assigning a Call to a Name (line 3468):
    
    # Assigning a Call to a Name (line 3468):
    
    # Call to arange(...): (line 3468)
    # Processing the call arguments (line 3468)
    
    # Getting the type of 'N' (line 3468)
    N_263806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3468, 22), 'N', False)
    # Applying the 'usub' unary operator (line 3468)
    result___neg___263807 = python_operator(stypy.reporting.localization.Localization(__file__, 3468, 21), 'usub', N_263806)
    
    int_263808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3468, 24), 'int')
    # Applying the binary operator '+' (line 3468)
    result_add_263809 = python_operator(stypy.reporting.localization.Localization(__file__, 3468, 21), '+', result___neg___263807, int_263808)
    
    # Getting the type of 'N' (line 3468)
    N_263810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3468, 27), 'N', False)
    int_263811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3468, 30), 'int')
    # Processing the call keyword arguments (line 3468)
    kwargs_263812 = {}
    # Getting the type of 'numpy' (line 3468)
    numpy_263804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3468, 8), 'numpy', False)
    # Obtaining the member 'arange' of a type (line 3468)
    arange_263805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3468, 8), numpy_263804, 'arange')
    # Calling arange(args, kwargs) (line 3468)
    arange_call_result_263813 = invoke(stypy.reporting.localization.Localization(__file__, 3468, 8), arange_263805, *[result_add_263809, N_263810, int_263811], **kwargs_263812)
    
    # Assigning a type to the variable 'm' (line 3468)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3468, 4), 'm', arange_call_result_263813)
    
    # Assigning a BinOp to a Name (line 3469):
    
    # Assigning a BinOp to a Name (line 3469):
    # Getting the type of 'pi' (line 3469)
    pi_263814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3469, 12), 'pi')
    # Getting the type of 'm' (line 3469)
    m_263815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3469, 17), 'm')
    # Applying the binary operator '*' (line 3469)
    result_mul_263816 = python_operator(stypy.reporting.localization.Localization(__file__, 3469, 12), '*', pi_263814, m_263815)
    
    int_263817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3469, 22), 'int')
    # Getting the type of 'N' (line 3469)
    N_263818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3469, 24), 'N')
    # Applying the binary operator '*' (line 3469)
    result_mul_263819 = python_operator(stypy.reporting.localization.Localization(__file__, 3469, 22), '*', int_263817, N_263818)
    
    # Applying the binary operator 'div' (line 3469)
    result_div_263820 = python_operator(stypy.reporting.localization.Localization(__file__, 3469, 19), 'div', result_mul_263816, result_mul_263819)
    
    # Assigning a type to the variable 'theta' (line 3469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3469, 4), 'theta', result_div_263820)
    
    # Assigning a UnaryOp to a Name (line 3470):
    
    # Assigning a UnaryOp to a Name (line 3470):
    
    
    # Call to sinh(...): (line 3470)
    # Processing the call arguments (line 3470)
    # Getting the type of 'mu' (line 3470)
    mu_263822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3470, 14), 'mu', False)
    complex_263823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3470, 19), 'complex')
    # Getting the type of 'theta' (line 3470)
    theta_263824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3470, 22), 'theta', False)
    # Applying the binary operator '*' (line 3470)
    result_mul_263825 = python_operator(stypy.reporting.localization.Localization(__file__, 3470, 19), '*', complex_263823, theta_263824)
    
    # Applying the binary operator '+' (line 3470)
    result_add_263826 = python_operator(stypy.reporting.localization.Localization(__file__, 3470, 14), '+', mu_263822, result_mul_263825)
    
    # Processing the call keyword arguments (line 3470)
    kwargs_263827 = {}
    # Getting the type of 'sinh' (line 3470)
    sinh_263821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3470, 9), 'sinh', False)
    # Calling sinh(args, kwargs) (line 3470)
    sinh_call_result_263828 = invoke(stypy.reporting.localization.Localization(__file__, 3470, 9), sinh_263821, *[result_add_263826], **kwargs_263827)
    
    # Applying the 'usub' unary operator (line 3470)
    result___neg___263829 = python_operator(stypy.reporting.localization.Localization(__file__, 3470, 8), 'usub', sinh_call_result_263828)
    
    # Assigning a type to the variable 'p' (line 3470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3470, 4), 'p', result___neg___263829)
    
    # Assigning a Attribute to a Name (line 3472):
    
    # Assigning a Attribute to a Name (line 3472):
    
    # Call to prod(...): (line 3472)
    # Processing the call arguments (line 3472)
    
    # Getting the type of 'p' (line 3472)
    p_263832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3472, 20), 'p', False)
    # Applying the 'usub' unary operator (line 3472)
    result___neg___263833 = python_operator(stypy.reporting.localization.Localization(__file__, 3472, 19), 'usub', p_263832)
    
    # Processing the call keyword arguments (line 3472)
    int_263834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3472, 28), 'int')
    keyword_263835 = int_263834
    kwargs_263836 = {'axis': keyword_263835}
    # Getting the type of 'numpy' (line 3472)
    numpy_263830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3472, 8), 'numpy', False)
    # Obtaining the member 'prod' of a type (line 3472)
    prod_263831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3472, 8), numpy_263830, 'prod')
    # Calling prod(args, kwargs) (line 3472)
    prod_call_result_263837 = invoke(stypy.reporting.localization.Localization(__file__, 3472, 8), prod_263831, *[result___neg___263833], **kwargs_263836)
    
    # Obtaining the member 'real' of a type (line 3472)
    real_263838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3472, 8), prod_call_result_263837, 'real')
    # Assigning a type to the variable 'k' (line 3472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3472, 4), 'k', real_263838)
    
    
    # Getting the type of 'N' (line 3473)
    N_263839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3473, 7), 'N')
    int_263840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3473, 11), 'int')
    # Applying the binary operator '%' (line 3473)
    result_mod_263841 = python_operator(stypy.reporting.localization.Localization(__file__, 3473, 7), '%', N_263839, int_263840)
    
    int_263842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3473, 16), 'int')
    # Applying the binary operator '==' (line 3473)
    result_eq_263843 = python_operator(stypy.reporting.localization.Localization(__file__, 3473, 7), '==', result_mod_263841, int_263842)
    
    # Testing the type of an if condition (line 3473)
    if_condition_263844 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3473, 4), result_eq_263843)
    # Assigning a type to the variable 'if_condition_263844' (line 3473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3473, 4), 'if_condition_263844', if_condition_263844)
    # SSA begins for if statement (line 3473)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3474):
    
    # Assigning a BinOp to a Name (line 3474):
    # Getting the type of 'k' (line 3474)
    k_263845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3474, 12), 'k')
    
    # Call to sqrt(...): (line 3474)
    # Processing the call arguments (line 3474)
    int_263847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3474, 22), 'int')
    # Getting the type of 'eps' (line 3474)
    eps_263848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3474, 26), 'eps', False)
    # Getting the type of 'eps' (line 3474)
    eps_263849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3474, 32), 'eps', False)
    # Applying the binary operator '*' (line 3474)
    result_mul_263850 = python_operator(stypy.reporting.localization.Localization(__file__, 3474, 26), '*', eps_263848, eps_263849)
    
    # Applying the binary operator '+' (line 3474)
    result_add_263851 = python_operator(stypy.reporting.localization.Localization(__file__, 3474, 22), '+', int_263847, result_mul_263850)
    
    # Processing the call keyword arguments (line 3474)
    kwargs_263852 = {}
    # Getting the type of 'sqrt' (line 3474)
    sqrt_263846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3474, 16), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3474)
    sqrt_call_result_263853 = invoke(stypy.reporting.localization.Localization(__file__, 3474, 16), sqrt_263846, *[result_add_263851], **kwargs_263852)
    
    # Applying the binary operator 'div' (line 3474)
    result_div_263854 = python_operator(stypy.reporting.localization.Localization(__file__, 3474, 12), 'div', k_263845, sqrt_call_result_263853)
    
    # Assigning a type to the variable 'k' (line 3474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3474, 8), 'k', result_div_263854)
    # SSA join for if statement (line 3473)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3476)
    tuple_263855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3476, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3476)
    # Adding element type (line 3476)
    # Getting the type of 'z' (line 3476)
    z_263856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3476, 11), 'z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3476, 11), tuple_263855, z_263856)
    # Adding element type (line 3476)
    # Getting the type of 'p' (line 3476)
    p_263857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3476, 14), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3476, 11), tuple_263855, p_263857)
    # Adding element type (line 3476)
    # Getting the type of 'k' (line 3476)
    k_263858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3476, 17), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3476, 11), tuple_263855, k_263858)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3476)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3476, 4), 'stypy_return_type', tuple_263855)
    
    # ################# End of 'cheb1ap(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cheb1ap' in the type store
    # Getting the type of 'stypy_return_type' (line 3441)
    stypy_return_type_263859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3441, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_263859)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cheb1ap'
    return stypy_return_type_263859

# Assigning a type to the variable 'cheb1ap' (line 3441)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3441, 0), 'cheb1ap', cheb1ap)

@norecursion
def cheb2ap(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'cheb2ap'
    module_type_store = module_type_store.open_function_context('cheb2ap', 3479, 0, False)
    
    # Passed parameters checking function
    cheb2ap.stypy_localization = localization
    cheb2ap.stypy_type_of_self = None
    cheb2ap.stypy_type_store = module_type_store
    cheb2ap.stypy_function_name = 'cheb2ap'
    cheb2ap.stypy_param_names_list = ['N', 'rs']
    cheb2ap.stypy_varargs_param_name = None
    cheb2ap.stypy_kwargs_param_name = None
    cheb2ap.stypy_call_defaults = defaults
    cheb2ap.stypy_call_varargs = varargs
    cheb2ap.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cheb2ap', ['N', 'rs'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cheb2ap', localization, ['N', 'rs'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cheb2ap(...)' code ##################

    str_263860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3492, (-1)), 'str', "\n    Return (z,p,k) for Nth-order Chebyshev type I analog lowpass filter.\n\n    The returned filter prototype has `rs` decibels of ripple in the stopband.\n\n    The filter's angular (e.g. rad/s) cutoff frequency is normalized to 1,\n    defined as the point at which the gain first reaches ``-rs``.\n\n    See Also\n    --------\n    cheby2 : Filter design function using this prototype\n\n    ")
    
    
    
    # Call to abs(...): (line 3493)
    # Processing the call arguments (line 3493)
    
    # Call to int(...): (line 3493)
    # Processing the call arguments (line 3493)
    # Getting the type of 'N' (line 3493)
    N_263863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3493, 15), 'N', False)
    # Processing the call keyword arguments (line 3493)
    kwargs_263864 = {}
    # Getting the type of 'int' (line 3493)
    int_263862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3493, 11), 'int', False)
    # Calling int(args, kwargs) (line 3493)
    int_call_result_263865 = invoke(stypy.reporting.localization.Localization(__file__, 3493, 11), int_263862, *[N_263863], **kwargs_263864)
    
    # Processing the call keyword arguments (line 3493)
    kwargs_263866 = {}
    # Getting the type of 'abs' (line 3493)
    abs_263861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3493, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 3493)
    abs_call_result_263867 = invoke(stypy.reporting.localization.Localization(__file__, 3493, 7), abs_263861, *[int_call_result_263865], **kwargs_263866)
    
    # Getting the type of 'N' (line 3493)
    N_263868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3493, 22), 'N')
    # Applying the binary operator '!=' (line 3493)
    result_ne_263869 = python_operator(stypy.reporting.localization.Localization(__file__, 3493, 7), '!=', abs_call_result_263867, N_263868)
    
    # Testing the type of an if condition (line 3493)
    if_condition_263870 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3493, 4), result_ne_263869)
    # Assigning a type to the variable 'if_condition_263870' (line 3493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3493, 4), 'if_condition_263870', if_condition_263870)
    # SSA begins for if statement (line 3493)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3494)
    # Processing the call arguments (line 3494)
    str_263872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3494, 25), 'str', 'Filter order must be a nonnegative integer')
    # Processing the call keyword arguments (line 3494)
    kwargs_263873 = {}
    # Getting the type of 'ValueError' (line 3494)
    ValueError_263871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3494, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3494)
    ValueError_call_result_263874 = invoke(stypy.reporting.localization.Localization(__file__, 3494, 14), ValueError_263871, *[str_263872], **kwargs_263873)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3494, 8), ValueError_call_result_263874, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 3493)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'N' (line 3495)
    N_263875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3495, 9), 'N')
    int_263876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3495, 14), 'int')
    # Applying the binary operator '==' (line 3495)
    result_eq_263877 = python_operator(stypy.reporting.localization.Localization(__file__, 3495, 9), '==', N_263875, int_263876)
    
    # Testing the type of an if condition (line 3495)
    if_condition_263878 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3495, 9), result_eq_263877)
    # Assigning a type to the variable 'if_condition_263878' (line 3495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3495, 9), 'if_condition_263878', if_condition_263878)
    # SSA begins for if statement (line 3495)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3497)
    tuple_263879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3497, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3497)
    # Adding element type (line 3497)
    
    # Call to array(...): (line 3497)
    # Processing the call arguments (line 3497)
    
    # Obtaining an instance of the builtin type 'list' (line 3497)
    list_263882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3497, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3497)
    
    # Processing the call keyword arguments (line 3497)
    kwargs_263883 = {}
    # Getting the type of 'numpy' (line 3497)
    numpy_263880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3497, 15), 'numpy', False)
    # Obtaining the member 'array' of a type (line 3497)
    array_263881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3497, 15), numpy_263880, 'array')
    # Calling array(args, kwargs) (line 3497)
    array_call_result_263884 = invoke(stypy.reporting.localization.Localization(__file__, 3497, 15), array_263881, *[list_263882], **kwargs_263883)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3497, 15), tuple_263879, array_call_result_263884)
    # Adding element type (line 3497)
    
    # Call to array(...): (line 3497)
    # Processing the call arguments (line 3497)
    
    # Obtaining an instance of the builtin type 'list' (line 3497)
    list_263887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3497, 44), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3497)
    
    # Processing the call keyword arguments (line 3497)
    kwargs_263888 = {}
    # Getting the type of 'numpy' (line 3497)
    numpy_263885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3497, 32), 'numpy', False)
    # Obtaining the member 'array' of a type (line 3497)
    array_263886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3497, 32), numpy_263885, 'array')
    # Calling array(args, kwargs) (line 3497)
    array_call_result_263889 = invoke(stypy.reporting.localization.Localization(__file__, 3497, 32), array_263886, *[list_263887], **kwargs_263888)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3497, 15), tuple_263879, array_call_result_263889)
    # Adding element type (line 3497)
    int_263890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3497, 49), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3497, 15), tuple_263879, int_263890)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3497)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3497, 8), 'stypy_return_type', tuple_263879)
    # SSA join for if statement (line 3495)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3493)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 3500):
    
    # Assigning a BinOp to a Name (line 3500):
    float_263891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3500, 9), 'float')
    
    # Call to sqrt(...): (line 3500)
    # Processing the call arguments (line 3500)
    int_263893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3500, 20), 'int')
    float_263894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3500, 27), 'float')
    # Getting the type of 'rs' (line 3500)
    rs_263895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3500, 33), 'rs', False)
    # Applying the binary operator '*' (line 3500)
    result_mul_263896 = python_operator(stypy.reporting.localization.Localization(__file__, 3500, 27), '*', float_263894, rs_263895)
    
    # Applying the binary operator '**' (line 3500)
    result_pow_263897 = python_operator(stypy.reporting.localization.Localization(__file__, 3500, 20), '**', int_263893, result_mul_263896)
    
    int_263898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3500, 39), 'int')
    # Applying the binary operator '-' (line 3500)
    result_sub_263899 = python_operator(stypy.reporting.localization.Localization(__file__, 3500, 20), '-', result_pow_263897, int_263898)
    
    # Processing the call keyword arguments (line 3500)
    kwargs_263900 = {}
    # Getting the type of 'sqrt' (line 3500)
    sqrt_263892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3500, 15), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3500)
    sqrt_call_result_263901 = invoke(stypy.reporting.localization.Localization(__file__, 3500, 15), sqrt_263892, *[result_sub_263899], **kwargs_263900)
    
    # Applying the binary operator 'div' (line 3500)
    result_div_263902 = python_operator(stypy.reporting.localization.Localization(__file__, 3500, 9), 'div', float_263891, sqrt_call_result_263901)
    
    # Assigning a type to the variable 'de' (line 3500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3500, 4), 'de', result_div_263902)
    
    # Assigning a BinOp to a Name (line 3501):
    
    # Assigning a BinOp to a Name (line 3501):
    
    # Call to arcsinh(...): (line 3501)
    # Processing the call arguments (line 3501)
    float_263904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3501, 17), 'float')
    # Getting the type of 'de' (line 3501)
    de_263905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 23), 'de', False)
    # Applying the binary operator 'div' (line 3501)
    result_div_263906 = python_operator(stypy.reporting.localization.Localization(__file__, 3501, 17), 'div', float_263904, de_263905)
    
    # Processing the call keyword arguments (line 3501)
    kwargs_263907 = {}
    # Getting the type of 'arcsinh' (line 3501)
    arcsinh_263903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 9), 'arcsinh', False)
    # Calling arcsinh(args, kwargs) (line 3501)
    arcsinh_call_result_263908 = invoke(stypy.reporting.localization.Localization(__file__, 3501, 9), arcsinh_263903, *[result_div_263906], **kwargs_263907)
    
    # Getting the type of 'N' (line 3501)
    N_263909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 29), 'N')
    # Applying the binary operator 'div' (line 3501)
    result_div_263910 = python_operator(stypy.reporting.localization.Localization(__file__, 3501, 9), 'div', arcsinh_call_result_263908, N_263909)
    
    # Assigning a type to the variable 'mu' (line 3501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3501, 4), 'mu', result_div_263910)
    
    # Getting the type of 'N' (line 3503)
    N_263911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3503, 7), 'N')
    int_263912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3503, 11), 'int')
    # Applying the binary operator '%' (line 3503)
    result_mod_263913 = python_operator(stypy.reporting.localization.Localization(__file__, 3503, 7), '%', N_263911, int_263912)
    
    # Testing the type of an if condition (line 3503)
    if_condition_263914 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3503, 4), result_mod_263913)
    # Assigning a type to the variable 'if_condition_263914' (line 3503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3503, 4), 'if_condition_263914', if_condition_263914)
    # SSA begins for if statement (line 3503)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3504):
    
    # Assigning a Call to a Name (line 3504):
    
    # Call to concatenate(...): (line 3504)
    # Processing the call arguments (line 3504)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3504)
    tuple_263917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3504, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3504)
    # Adding element type (line 3504)
    
    # Call to arange(...): (line 3504)
    # Processing the call arguments (line 3504)
    
    # Getting the type of 'N' (line 3504)
    N_263920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3504, 45), 'N', False)
    # Applying the 'usub' unary operator (line 3504)
    result___neg___263921 = python_operator(stypy.reporting.localization.Localization(__file__, 3504, 44), 'usub', N_263920)
    
    int_263922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3504, 47), 'int')
    # Applying the binary operator '+' (line 3504)
    result_add_263923 = python_operator(stypy.reporting.localization.Localization(__file__, 3504, 44), '+', result___neg___263921, int_263922)
    
    int_263924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3504, 50), 'int')
    int_263925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3504, 53), 'int')
    # Processing the call keyword arguments (line 3504)
    kwargs_263926 = {}
    # Getting the type of 'numpy' (line 3504)
    numpy_263918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3504, 31), 'numpy', False)
    # Obtaining the member 'arange' of a type (line 3504)
    arange_263919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3504, 31), numpy_263918, 'arange')
    # Calling arange(args, kwargs) (line 3504)
    arange_call_result_263927 = invoke(stypy.reporting.localization.Localization(__file__, 3504, 31), arange_263919, *[result_add_263923, int_263924, int_263925], **kwargs_263926)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3504, 31), tuple_263917, arange_call_result_263927)
    # Adding element type (line 3504)
    
    # Call to arange(...): (line 3505)
    # Processing the call arguments (line 3505)
    int_263930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3505, 44), 'int')
    # Getting the type of 'N' (line 3505)
    N_263931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3505, 47), 'N', False)
    int_263932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3505, 50), 'int')
    # Processing the call keyword arguments (line 3505)
    kwargs_263933 = {}
    # Getting the type of 'numpy' (line 3505)
    numpy_263928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3505, 31), 'numpy', False)
    # Obtaining the member 'arange' of a type (line 3505)
    arange_263929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3505, 31), numpy_263928, 'arange')
    # Calling arange(args, kwargs) (line 3505)
    arange_call_result_263934 = invoke(stypy.reporting.localization.Localization(__file__, 3505, 31), arange_263929, *[int_263930, N_263931, int_263932], **kwargs_263933)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3504, 31), tuple_263917, arange_call_result_263934)
    
    # Processing the call keyword arguments (line 3504)
    kwargs_263935 = {}
    # Getting the type of 'numpy' (line 3504)
    numpy_263915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3504, 12), 'numpy', False)
    # Obtaining the member 'concatenate' of a type (line 3504)
    concatenate_263916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3504, 12), numpy_263915, 'concatenate')
    # Calling concatenate(args, kwargs) (line 3504)
    concatenate_call_result_263936 = invoke(stypy.reporting.localization.Localization(__file__, 3504, 12), concatenate_263916, *[tuple_263917], **kwargs_263935)
    
    # Assigning a type to the variable 'm' (line 3504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3504, 8), 'm', concatenate_call_result_263936)
    # SSA branch for the else part of an if statement (line 3503)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3507):
    
    # Assigning a Call to a Name (line 3507):
    
    # Call to arange(...): (line 3507)
    # Processing the call arguments (line 3507)
    
    # Getting the type of 'N' (line 3507)
    N_263939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3507, 26), 'N', False)
    # Applying the 'usub' unary operator (line 3507)
    result___neg___263940 = python_operator(stypy.reporting.localization.Localization(__file__, 3507, 25), 'usub', N_263939)
    
    int_263941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3507, 28), 'int')
    # Applying the binary operator '+' (line 3507)
    result_add_263942 = python_operator(stypy.reporting.localization.Localization(__file__, 3507, 25), '+', result___neg___263940, int_263941)
    
    # Getting the type of 'N' (line 3507)
    N_263943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3507, 31), 'N', False)
    int_263944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3507, 34), 'int')
    # Processing the call keyword arguments (line 3507)
    kwargs_263945 = {}
    # Getting the type of 'numpy' (line 3507)
    numpy_263937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3507, 12), 'numpy', False)
    # Obtaining the member 'arange' of a type (line 3507)
    arange_263938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3507, 12), numpy_263937, 'arange')
    # Calling arange(args, kwargs) (line 3507)
    arange_call_result_263946 = invoke(stypy.reporting.localization.Localization(__file__, 3507, 12), arange_263938, *[result_add_263942, N_263943, int_263944], **kwargs_263945)
    
    # Assigning a type to the variable 'm' (line 3507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3507, 8), 'm', arange_call_result_263946)
    # SSA join for if statement (line 3503)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a UnaryOp to a Name (line 3509):
    
    # Assigning a UnaryOp to a Name (line 3509):
    
    
    # Call to conjugate(...): (line 3509)
    # Processing the call arguments (line 3509)
    complex_263948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3509, 19), 'complex')
    
    # Call to sin(...): (line 3509)
    # Processing the call arguments (line 3509)
    # Getting the type of 'm' (line 3509)
    m_263950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3509, 28), 'm', False)
    # Getting the type of 'pi' (line 3509)
    pi_263951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3509, 32), 'pi', False)
    # Applying the binary operator '*' (line 3509)
    result_mul_263952 = python_operator(stypy.reporting.localization.Localization(__file__, 3509, 28), '*', m_263950, pi_263951)
    
    float_263953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3509, 38), 'float')
    # Getting the type of 'N' (line 3509)
    N_263954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3509, 44), 'N', False)
    # Applying the binary operator '*' (line 3509)
    result_mul_263955 = python_operator(stypy.reporting.localization.Localization(__file__, 3509, 38), '*', float_263953, N_263954)
    
    # Applying the binary operator 'div' (line 3509)
    result_div_263956 = python_operator(stypy.reporting.localization.Localization(__file__, 3509, 35), 'div', result_mul_263952, result_mul_263955)
    
    # Processing the call keyword arguments (line 3509)
    kwargs_263957 = {}
    # Getting the type of 'sin' (line 3509)
    sin_263949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3509, 24), 'sin', False)
    # Calling sin(args, kwargs) (line 3509)
    sin_call_result_263958 = invoke(stypy.reporting.localization.Localization(__file__, 3509, 24), sin_263949, *[result_div_263956], **kwargs_263957)
    
    # Applying the binary operator 'div' (line 3509)
    result_div_263959 = python_operator(stypy.reporting.localization.Localization(__file__, 3509, 19), 'div', complex_263948, sin_call_result_263958)
    
    # Processing the call keyword arguments (line 3509)
    kwargs_263960 = {}
    # Getting the type of 'conjugate' (line 3509)
    conjugate_263947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3509, 9), 'conjugate', False)
    # Calling conjugate(args, kwargs) (line 3509)
    conjugate_call_result_263961 = invoke(stypy.reporting.localization.Localization(__file__, 3509, 9), conjugate_263947, *[result_div_263959], **kwargs_263960)
    
    # Applying the 'usub' unary operator (line 3509)
    result___neg___263962 = python_operator(stypy.reporting.localization.Localization(__file__, 3509, 8), 'usub', conjugate_call_result_263961)
    
    # Assigning a type to the variable 'z' (line 3509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3509, 4), 'z', result___neg___263962)
    
    # Assigning a UnaryOp to a Name (line 3512):
    
    # Assigning a UnaryOp to a Name (line 3512):
    
    
    # Call to exp(...): (line 3512)
    # Processing the call arguments (line 3512)
    complex_263964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3512, 13), 'complex')
    # Getting the type of 'pi' (line 3512)
    pi_263965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 18), 'pi', False)
    # Applying the binary operator '*' (line 3512)
    result_mul_263966 = python_operator(stypy.reporting.localization.Localization(__file__, 3512, 13), '*', complex_263964, pi_263965)
    
    
    # Call to arange(...): (line 3512)
    # Processing the call arguments (line 3512)
    
    # Getting the type of 'N' (line 3512)
    N_263969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 37), 'N', False)
    # Applying the 'usub' unary operator (line 3512)
    result___neg___263970 = python_operator(stypy.reporting.localization.Localization(__file__, 3512, 36), 'usub', N_263969)
    
    int_263971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3512, 39), 'int')
    # Applying the binary operator '+' (line 3512)
    result_add_263972 = python_operator(stypy.reporting.localization.Localization(__file__, 3512, 36), '+', result___neg___263970, int_263971)
    
    # Getting the type of 'N' (line 3512)
    N_263973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 42), 'N', False)
    int_263974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3512, 45), 'int')
    # Processing the call keyword arguments (line 3512)
    kwargs_263975 = {}
    # Getting the type of 'numpy' (line 3512)
    numpy_263967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 23), 'numpy', False)
    # Obtaining the member 'arange' of a type (line 3512)
    arange_263968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3512, 23), numpy_263967, 'arange')
    # Calling arange(args, kwargs) (line 3512)
    arange_call_result_263976 = invoke(stypy.reporting.localization.Localization(__file__, 3512, 23), arange_263968, *[result_add_263972, N_263973, int_263974], **kwargs_263975)
    
    # Applying the binary operator '*' (line 3512)
    result_mul_263977 = python_operator(stypy.reporting.localization.Localization(__file__, 3512, 21), '*', result_mul_263966, arange_call_result_263976)
    
    int_263978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3512, 51), 'int')
    # Getting the type of 'N' (line 3512)
    N_263979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 55), 'N', False)
    # Applying the binary operator '*' (line 3512)
    result_mul_263980 = python_operator(stypy.reporting.localization.Localization(__file__, 3512, 51), '*', int_263978, N_263979)
    
    # Applying the binary operator 'div' (line 3512)
    result_div_263981 = python_operator(stypy.reporting.localization.Localization(__file__, 3512, 48), 'div', result_mul_263977, result_mul_263980)
    
    # Processing the call keyword arguments (line 3512)
    kwargs_263982 = {}
    # Getting the type of 'exp' (line 3512)
    exp_263963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 9), 'exp', False)
    # Calling exp(args, kwargs) (line 3512)
    exp_call_result_263983 = invoke(stypy.reporting.localization.Localization(__file__, 3512, 9), exp_263963, *[result_div_263981], **kwargs_263982)
    
    # Applying the 'usub' unary operator (line 3512)
    result___neg___263984 = python_operator(stypy.reporting.localization.Localization(__file__, 3512, 8), 'usub', exp_call_result_263983)
    
    # Assigning a type to the variable 'p' (line 3512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3512, 4), 'p', result___neg___263984)
    
    # Assigning a BinOp to a Name (line 3514):
    
    # Assigning a BinOp to a Name (line 3514):
    
    # Call to sinh(...): (line 3514)
    # Processing the call arguments (line 3514)
    # Getting the type of 'mu' (line 3514)
    mu_263986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 13), 'mu', False)
    # Processing the call keyword arguments (line 3514)
    kwargs_263987 = {}
    # Getting the type of 'sinh' (line 3514)
    sinh_263985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 8), 'sinh', False)
    # Calling sinh(args, kwargs) (line 3514)
    sinh_call_result_263988 = invoke(stypy.reporting.localization.Localization(__file__, 3514, 8), sinh_263985, *[mu_263986], **kwargs_263987)
    
    # Getting the type of 'p' (line 3514)
    p_263989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 19), 'p')
    # Obtaining the member 'real' of a type (line 3514)
    real_263990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3514, 19), p_263989, 'real')
    # Applying the binary operator '*' (line 3514)
    result_mul_263991 = python_operator(stypy.reporting.localization.Localization(__file__, 3514, 8), '*', sinh_call_result_263988, real_263990)
    
    complex_263992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3514, 28), 'complex')
    
    # Call to cosh(...): (line 3514)
    # Processing the call arguments (line 3514)
    # Getting the type of 'mu' (line 3514)
    mu_263994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 38), 'mu', False)
    # Processing the call keyword arguments (line 3514)
    kwargs_263995 = {}
    # Getting the type of 'cosh' (line 3514)
    cosh_263993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 33), 'cosh', False)
    # Calling cosh(args, kwargs) (line 3514)
    cosh_call_result_263996 = invoke(stypy.reporting.localization.Localization(__file__, 3514, 33), cosh_263993, *[mu_263994], **kwargs_263995)
    
    # Applying the binary operator '*' (line 3514)
    result_mul_263997 = python_operator(stypy.reporting.localization.Localization(__file__, 3514, 28), '*', complex_263992, cosh_call_result_263996)
    
    # Getting the type of 'p' (line 3514)
    p_263998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 44), 'p')
    # Obtaining the member 'imag' of a type (line 3514)
    imag_263999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3514, 44), p_263998, 'imag')
    # Applying the binary operator '*' (line 3514)
    result_mul_264000 = python_operator(stypy.reporting.localization.Localization(__file__, 3514, 42), '*', result_mul_263997, imag_263999)
    
    # Applying the binary operator '+' (line 3514)
    result_add_264001 = python_operator(stypy.reporting.localization.Localization(__file__, 3514, 8), '+', result_mul_263991, result_mul_264000)
    
    # Assigning a type to the variable 'p' (line 3514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3514, 4), 'p', result_add_264001)
    
    # Assigning a BinOp to a Name (line 3515):
    
    # Assigning a BinOp to a Name (line 3515):
    float_264002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3515, 8), 'float')
    # Getting the type of 'p' (line 3515)
    p_264003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3515, 14), 'p')
    # Applying the binary operator 'div' (line 3515)
    result_div_264004 = python_operator(stypy.reporting.localization.Localization(__file__, 3515, 8), 'div', float_264002, p_264003)
    
    # Assigning a type to the variable 'p' (line 3515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3515, 4), 'p', result_div_264004)
    
    # Assigning a Attribute to a Name (line 3517):
    
    # Assigning a Attribute to a Name (line 3517):
    
    # Call to prod(...): (line 3517)
    # Processing the call arguments (line 3517)
    
    # Getting the type of 'p' (line 3517)
    p_264007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3517, 21), 'p', False)
    # Applying the 'usub' unary operator (line 3517)
    result___neg___264008 = python_operator(stypy.reporting.localization.Localization(__file__, 3517, 20), 'usub', p_264007)
    
    # Processing the call keyword arguments (line 3517)
    int_264009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3517, 29), 'int')
    keyword_264010 = int_264009
    kwargs_264011 = {'axis': keyword_264010}
    # Getting the type of 'numpy' (line 3517)
    numpy_264005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3517, 9), 'numpy', False)
    # Obtaining the member 'prod' of a type (line 3517)
    prod_264006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3517, 9), numpy_264005, 'prod')
    # Calling prod(args, kwargs) (line 3517)
    prod_call_result_264012 = invoke(stypy.reporting.localization.Localization(__file__, 3517, 9), prod_264006, *[result___neg___264008], **kwargs_264011)
    
    
    # Call to prod(...): (line 3517)
    # Processing the call arguments (line 3517)
    
    # Getting the type of 'z' (line 3517)
    z_264015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3517, 46), 'z', False)
    # Applying the 'usub' unary operator (line 3517)
    result___neg___264016 = python_operator(stypy.reporting.localization.Localization(__file__, 3517, 45), 'usub', z_264015)
    
    # Processing the call keyword arguments (line 3517)
    int_264017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3517, 54), 'int')
    keyword_264018 = int_264017
    kwargs_264019 = {'axis': keyword_264018}
    # Getting the type of 'numpy' (line 3517)
    numpy_264013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3517, 34), 'numpy', False)
    # Obtaining the member 'prod' of a type (line 3517)
    prod_264014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3517, 34), numpy_264013, 'prod')
    # Calling prod(args, kwargs) (line 3517)
    prod_call_result_264020 = invoke(stypy.reporting.localization.Localization(__file__, 3517, 34), prod_264014, *[result___neg___264016], **kwargs_264019)
    
    # Applying the binary operator 'div' (line 3517)
    result_div_264021 = python_operator(stypy.reporting.localization.Localization(__file__, 3517, 9), 'div', prod_call_result_264012, prod_call_result_264020)
    
    # Obtaining the member 'real' of a type (line 3517)
    real_264022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3517, 9), result_div_264021, 'real')
    # Assigning a type to the variable 'k' (line 3517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3517, 4), 'k', real_264022)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3518)
    tuple_264023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3518, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3518)
    # Adding element type (line 3518)
    # Getting the type of 'z' (line 3518)
    z_264024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3518, 11), 'z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3518, 11), tuple_264023, z_264024)
    # Adding element type (line 3518)
    # Getting the type of 'p' (line 3518)
    p_264025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3518, 14), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3518, 11), tuple_264023, p_264025)
    # Adding element type (line 3518)
    # Getting the type of 'k' (line 3518)
    k_264026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3518, 17), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3518, 11), tuple_264023, k_264026)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3518, 4), 'stypy_return_type', tuple_264023)
    
    # ################# End of 'cheb2ap(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cheb2ap' in the type store
    # Getting the type of 'stypy_return_type' (line 3479)
    stypy_return_type_264027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3479, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_264027)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cheb2ap'
    return stypy_return_type_264027

# Assigning a type to the variable 'cheb2ap' (line 3479)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3479, 0), 'cheb2ap', cheb2ap)

# Assigning a Num to a Name (line 3521):

# Assigning a Num to a Name (line 3521):
float_264028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3521, 10), 'float')
# Assigning a type to the variable 'EPSILON' (line 3521)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3521, 0), 'EPSILON', float_264028)

@norecursion
def _vratio(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_vratio'
    module_type_store = module_type_store.open_function_context('_vratio', 3524, 0, False)
    
    # Passed parameters checking function
    _vratio.stypy_localization = localization
    _vratio.stypy_type_of_self = None
    _vratio.stypy_type_store = module_type_store
    _vratio.stypy_function_name = '_vratio'
    _vratio.stypy_param_names_list = ['u', 'ineps', 'mp']
    _vratio.stypy_varargs_param_name = None
    _vratio.stypy_kwargs_param_name = None
    _vratio.stypy_call_defaults = defaults
    _vratio.stypy_call_varargs = varargs
    _vratio.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_vratio', ['u', 'ineps', 'mp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_vratio', localization, ['u', 'ineps', 'mp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_vratio(...)' code ##################

    
    # Assigning a Call to a List (line 3525):
    
    # Assigning a Subscript to a Name (line 3525):
    
    # Obtaining the type of the subscript
    int_264029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3525, 4), 'int')
    
    # Call to ellipj(...): (line 3525)
    # Processing the call arguments (line 3525)
    # Getting the type of 'u' (line 3525)
    u_264032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 36), 'u', False)
    # Getting the type of 'mp' (line 3525)
    mp_264033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 39), 'mp', False)
    # Processing the call keyword arguments (line 3525)
    kwargs_264034 = {}
    # Getting the type of 'special' (line 3525)
    special_264030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 21), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3525)
    ellipj_264031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3525, 21), special_264030, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3525)
    ellipj_call_result_264035 = invoke(stypy.reporting.localization.Localization(__file__, 3525, 21), ellipj_264031, *[u_264032, mp_264033], **kwargs_264034)
    
    # Obtaining the member '__getitem__' of a type (line 3525)
    getitem___264036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3525, 4), ellipj_call_result_264035, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3525)
    subscript_call_result_264037 = invoke(stypy.reporting.localization.Localization(__file__, 3525, 4), getitem___264036, int_264029)
    
    # Assigning a type to the variable 'list_var_assignment_257367' (line 3525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3525, 4), 'list_var_assignment_257367', subscript_call_result_264037)
    
    # Assigning a Subscript to a Name (line 3525):
    
    # Obtaining the type of the subscript
    int_264038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3525, 4), 'int')
    
    # Call to ellipj(...): (line 3525)
    # Processing the call arguments (line 3525)
    # Getting the type of 'u' (line 3525)
    u_264041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 36), 'u', False)
    # Getting the type of 'mp' (line 3525)
    mp_264042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 39), 'mp', False)
    # Processing the call keyword arguments (line 3525)
    kwargs_264043 = {}
    # Getting the type of 'special' (line 3525)
    special_264039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 21), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3525)
    ellipj_264040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3525, 21), special_264039, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3525)
    ellipj_call_result_264044 = invoke(stypy.reporting.localization.Localization(__file__, 3525, 21), ellipj_264040, *[u_264041, mp_264042], **kwargs_264043)
    
    # Obtaining the member '__getitem__' of a type (line 3525)
    getitem___264045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3525, 4), ellipj_call_result_264044, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3525)
    subscript_call_result_264046 = invoke(stypy.reporting.localization.Localization(__file__, 3525, 4), getitem___264045, int_264038)
    
    # Assigning a type to the variable 'list_var_assignment_257368' (line 3525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3525, 4), 'list_var_assignment_257368', subscript_call_result_264046)
    
    # Assigning a Subscript to a Name (line 3525):
    
    # Obtaining the type of the subscript
    int_264047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3525, 4), 'int')
    
    # Call to ellipj(...): (line 3525)
    # Processing the call arguments (line 3525)
    # Getting the type of 'u' (line 3525)
    u_264050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 36), 'u', False)
    # Getting the type of 'mp' (line 3525)
    mp_264051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 39), 'mp', False)
    # Processing the call keyword arguments (line 3525)
    kwargs_264052 = {}
    # Getting the type of 'special' (line 3525)
    special_264048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 21), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3525)
    ellipj_264049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3525, 21), special_264048, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3525)
    ellipj_call_result_264053 = invoke(stypy.reporting.localization.Localization(__file__, 3525, 21), ellipj_264049, *[u_264050, mp_264051], **kwargs_264052)
    
    # Obtaining the member '__getitem__' of a type (line 3525)
    getitem___264054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3525, 4), ellipj_call_result_264053, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3525)
    subscript_call_result_264055 = invoke(stypy.reporting.localization.Localization(__file__, 3525, 4), getitem___264054, int_264047)
    
    # Assigning a type to the variable 'list_var_assignment_257369' (line 3525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3525, 4), 'list_var_assignment_257369', subscript_call_result_264055)
    
    # Assigning a Subscript to a Name (line 3525):
    
    # Obtaining the type of the subscript
    int_264056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3525, 4), 'int')
    
    # Call to ellipj(...): (line 3525)
    # Processing the call arguments (line 3525)
    # Getting the type of 'u' (line 3525)
    u_264059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 36), 'u', False)
    # Getting the type of 'mp' (line 3525)
    mp_264060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 39), 'mp', False)
    # Processing the call keyword arguments (line 3525)
    kwargs_264061 = {}
    # Getting the type of 'special' (line 3525)
    special_264057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 21), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3525)
    ellipj_264058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3525, 21), special_264057, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3525)
    ellipj_call_result_264062 = invoke(stypy.reporting.localization.Localization(__file__, 3525, 21), ellipj_264058, *[u_264059, mp_264060], **kwargs_264061)
    
    # Obtaining the member '__getitem__' of a type (line 3525)
    getitem___264063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3525, 4), ellipj_call_result_264062, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3525)
    subscript_call_result_264064 = invoke(stypy.reporting.localization.Localization(__file__, 3525, 4), getitem___264063, int_264056)
    
    # Assigning a type to the variable 'list_var_assignment_257370' (line 3525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3525, 4), 'list_var_assignment_257370', subscript_call_result_264064)
    
    # Assigning a Name to a Name (line 3525):
    # Getting the type of 'list_var_assignment_257367' (line 3525)
    list_var_assignment_257367_264065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 4), 'list_var_assignment_257367')
    # Assigning a type to the variable 's' (line 3525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3525, 5), 's', list_var_assignment_257367_264065)
    
    # Assigning a Name to a Name (line 3525):
    # Getting the type of 'list_var_assignment_257368' (line 3525)
    list_var_assignment_257368_264066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 4), 'list_var_assignment_257368')
    # Assigning a type to the variable 'c' (line 3525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3525, 8), 'c', list_var_assignment_257368_264066)
    
    # Assigning a Name to a Name (line 3525):
    # Getting the type of 'list_var_assignment_257369' (line 3525)
    list_var_assignment_257369_264067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 4), 'list_var_assignment_257369')
    # Assigning a type to the variable 'd' (line 3525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3525, 11), 'd', list_var_assignment_257369_264067)
    
    # Assigning a Name to a Name (line 3525):
    # Getting the type of 'list_var_assignment_257370' (line 3525)
    list_var_assignment_257370_264068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 4), 'list_var_assignment_257370')
    # Assigning a type to the variable 'phi' (line 3525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3525, 14), 'phi', list_var_assignment_257370_264068)
    
    # Assigning a Call to a Name (line 3526):
    
    # Assigning a Call to a Name (line 3526):
    
    # Call to abs(...): (line 3526)
    # Processing the call arguments (line 3526)
    # Getting the type of 'ineps' (line 3526)
    ineps_264070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3526, 14), 'ineps', False)
    # Getting the type of 's' (line 3526)
    s_264071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3526, 22), 's', False)
    # Getting the type of 'c' (line 3526)
    c_264072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3526, 26), 'c', False)
    # Applying the binary operator 'div' (line 3526)
    result_div_264073 = python_operator(stypy.reporting.localization.Localization(__file__, 3526, 22), 'div', s_264071, c_264072)
    
    # Applying the binary operator '-' (line 3526)
    result_sub_264074 = python_operator(stypy.reporting.localization.Localization(__file__, 3526, 14), '-', ineps_264070, result_div_264073)
    
    # Processing the call keyword arguments (line 3526)
    kwargs_264075 = {}
    # Getting the type of 'abs' (line 3526)
    abs_264069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3526, 10), 'abs', False)
    # Calling abs(args, kwargs) (line 3526)
    abs_call_result_264076 = invoke(stypy.reporting.localization.Localization(__file__, 3526, 10), abs_264069, *[result_sub_264074], **kwargs_264075)
    
    # Assigning a type to the variable 'ret' (line 3526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3526, 4), 'ret', abs_call_result_264076)
    # Getting the type of 'ret' (line 3527)
    ret_264077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3527, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3527, 4), 'stypy_return_type', ret_264077)
    
    # ################# End of '_vratio(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_vratio' in the type store
    # Getting the type of 'stypy_return_type' (line 3524)
    stypy_return_type_264078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3524, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_264078)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_vratio'
    return stypy_return_type_264078

# Assigning a type to the variable '_vratio' (line 3524)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3524, 0), '_vratio', _vratio)

@norecursion
def _kratio(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_kratio'
    module_type_store = module_type_store.open_function_context('_kratio', 3530, 0, False)
    
    # Passed parameters checking function
    _kratio.stypy_localization = localization
    _kratio.stypy_type_of_self = None
    _kratio.stypy_type_store = module_type_store
    _kratio.stypy_function_name = '_kratio'
    _kratio.stypy_param_names_list = ['m', 'k_ratio']
    _kratio.stypy_varargs_param_name = None
    _kratio.stypy_kwargs_param_name = None
    _kratio.stypy_call_defaults = defaults
    _kratio.stypy_call_varargs = varargs
    _kratio.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_kratio', ['m', 'k_ratio'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_kratio', localization, ['m', 'k_ratio'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_kratio(...)' code ##################

    
    # Assigning a Call to a Name (line 3531):
    
    # Assigning a Call to a Name (line 3531):
    
    # Call to float(...): (line 3531)
    # Processing the call arguments (line 3531)
    # Getting the type of 'm' (line 3531)
    m_264080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 14), 'm', False)
    # Processing the call keyword arguments (line 3531)
    kwargs_264081 = {}
    # Getting the type of 'float' (line 3531)
    float_264079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 8), 'float', False)
    # Calling float(args, kwargs) (line 3531)
    float_call_result_264082 = invoke(stypy.reporting.localization.Localization(__file__, 3531, 8), float_264079, *[m_264080], **kwargs_264081)
    
    # Assigning a type to the variable 'm' (line 3531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3531, 4), 'm', float_call_result_264082)
    
    
    # Getting the type of 'm' (line 3532)
    m_264083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3532, 7), 'm')
    int_264084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3532, 11), 'int')
    # Applying the binary operator '<' (line 3532)
    result_lt_264085 = python_operator(stypy.reporting.localization.Localization(__file__, 3532, 7), '<', m_264083, int_264084)
    
    # Testing the type of an if condition (line 3532)
    if_condition_264086 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3532, 4), result_lt_264085)
    # Assigning a type to the variable 'if_condition_264086' (line 3532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3532, 4), 'if_condition_264086', if_condition_264086)
    # SSA begins for if statement (line 3532)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 3533):
    
    # Assigning a Num to a Name (line 3533):
    float_264087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3533, 12), 'float')
    # Assigning a type to the variable 'm' (line 3533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3533, 8), 'm', float_264087)
    # SSA join for if statement (line 3532)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'm' (line 3534)
    m_264088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3534, 7), 'm')
    int_264089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3534, 11), 'int')
    # Applying the binary operator '>' (line 3534)
    result_gt_264090 = python_operator(stypy.reporting.localization.Localization(__file__, 3534, 7), '>', m_264088, int_264089)
    
    # Testing the type of an if condition (line 3534)
    if_condition_264091 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3534, 4), result_gt_264090)
    # Assigning a type to the variable 'if_condition_264091' (line 3534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3534, 4), 'if_condition_264091', if_condition_264091)
    # SSA begins for if statement (line 3534)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 3535):
    
    # Assigning a Num to a Name (line 3535):
    float_264092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3535, 12), 'float')
    # Assigning a type to the variable 'm' (line 3535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3535, 8), 'm', float_264092)
    # SSA join for if statement (line 3534)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to abs(...): (line 3536)
    # Processing the call arguments (line 3536)
    # Getting the type of 'm' (line 3536)
    m_264094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 11), 'm', False)
    # Processing the call keyword arguments (line 3536)
    kwargs_264095 = {}
    # Getting the type of 'abs' (line 3536)
    abs_264093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 3536)
    abs_call_result_264096 = invoke(stypy.reporting.localization.Localization(__file__, 3536, 7), abs_264093, *[m_264094], **kwargs_264095)
    
    # Getting the type of 'EPSILON' (line 3536)
    EPSILON_264097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 16), 'EPSILON')
    # Applying the binary operator '>' (line 3536)
    result_gt_264098 = python_operator(stypy.reporting.localization.Localization(__file__, 3536, 7), '>', abs_call_result_264096, EPSILON_264097)
    
    
    
    # Call to abs(...): (line 3536)
    # Processing the call arguments (line 3536)
    # Getting the type of 'm' (line 3536)
    m_264100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 33), 'm', False)
    # Processing the call keyword arguments (line 3536)
    kwargs_264101 = {}
    # Getting the type of 'abs' (line 3536)
    abs_264099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 29), 'abs', False)
    # Calling abs(args, kwargs) (line 3536)
    abs_call_result_264102 = invoke(stypy.reporting.localization.Localization(__file__, 3536, 29), abs_264099, *[m_264100], **kwargs_264101)
    
    # Getting the type of 'EPSILON' (line 3536)
    EPSILON_264103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 38), 'EPSILON')
    # Applying the binary operator '+' (line 3536)
    result_add_264104 = python_operator(stypy.reporting.localization.Localization(__file__, 3536, 29), '+', abs_call_result_264102, EPSILON_264103)
    
    int_264105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3536, 49), 'int')
    # Applying the binary operator '<' (line 3536)
    result_lt_264106 = python_operator(stypy.reporting.localization.Localization(__file__, 3536, 28), '<', result_add_264104, int_264105)
    
    # Applying the binary operator 'and' (line 3536)
    result_and_keyword_264107 = python_operator(stypy.reporting.localization.Localization(__file__, 3536, 7), 'and', result_gt_264098, result_lt_264106)
    
    # Testing the type of an if condition (line 3536)
    if_condition_264108 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3536, 4), result_and_keyword_264107)
    # Assigning a type to the variable 'if_condition_264108' (line 3536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3536, 4), 'if_condition_264108', if_condition_264108)
    # SSA begins for if statement (line 3536)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3537):
    
    # Assigning a Call to a Name (line 3537):
    
    # Call to ellipk(...): (line 3537)
    # Processing the call arguments (line 3537)
    
    # Obtaining an instance of the builtin type 'list' (line 3537)
    list_264111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3537, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3537)
    # Adding element type (line 3537)
    # Getting the type of 'm' (line 3537)
    m_264112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 28), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3537, 27), list_264111, m_264112)
    # Adding element type (line 3537)
    int_264113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3537, 31), 'int')
    # Getting the type of 'm' (line 3537)
    m_264114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 35), 'm', False)
    # Applying the binary operator '-' (line 3537)
    result_sub_264115 = python_operator(stypy.reporting.localization.Localization(__file__, 3537, 31), '-', int_264113, m_264114)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3537, 27), list_264111, result_sub_264115)
    
    # Processing the call keyword arguments (line 3537)
    kwargs_264116 = {}
    # Getting the type of 'special' (line 3537)
    special_264109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 12), 'special', False)
    # Obtaining the member 'ellipk' of a type (line 3537)
    ellipk_264110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 12), special_264109, 'ellipk')
    # Calling ellipk(args, kwargs) (line 3537)
    ellipk_call_result_264117 = invoke(stypy.reporting.localization.Localization(__file__, 3537, 12), ellipk_264110, *[list_264111], **kwargs_264116)
    
    # Assigning a type to the variable 'k' (line 3537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3537, 8), 'k', ellipk_call_result_264117)
    
    # Assigning a BinOp to a Name (line 3538):
    
    # Assigning a BinOp to a Name (line 3538):
    
    # Obtaining the type of the subscript
    int_264118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3538, 14), 'int')
    # Getting the type of 'k' (line 3538)
    k_264119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 12), 'k')
    # Obtaining the member '__getitem__' of a type (line 3538)
    getitem___264120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3538, 12), k_264119, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3538)
    subscript_call_result_264121 = invoke(stypy.reporting.localization.Localization(__file__, 3538, 12), getitem___264120, int_264118)
    
    
    # Obtaining the type of the subscript
    int_264122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3538, 21), 'int')
    # Getting the type of 'k' (line 3538)
    k_264123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 19), 'k')
    # Obtaining the member '__getitem__' of a type (line 3538)
    getitem___264124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3538, 19), k_264123, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3538)
    subscript_call_result_264125 = invoke(stypy.reporting.localization.Localization(__file__, 3538, 19), getitem___264124, int_264122)
    
    # Applying the binary operator 'div' (line 3538)
    result_div_264126 = python_operator(stypy.reporting.localization.Localization(__file__, 3538, 12), 'div', subscript_call_result_264121, subscript_call_result_264125)
    
    # Getting the type of 'k_ratio' (line 3538)
    k_ratio_264127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 26), 'k_ratio')
    # Applying the binary operator '-' (line 3538)
    result_sub_264128 = python_operator(stypy.reporting.localization.Localization(__file__, 3538, 12), '-', result_div_264126, k_ratio_264127)
    
    # Assigning a type to the variable 'r' (line 3538)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3538, 8), 'r', result_sub_264128)
    # SSA branch for the else part of an if statement (line 3536)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to abs(...): (line 3539)
    # Processing the call arguments (line 3539)
    # Getting the type of 'm' (line 3539)
    m_264130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3539, 13), 'm', False)
    # Processing the call keyword arguments (line 3539)
    kwargs_264131 = {}
    # Getting the type of 'abs' (line 3539)
    abs_264129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3539, 9), 'abs', False)
    # Calling abs(args, kwargs) (line 3539)
    abs_call_result_264132 = invoke(stypy.reporting.localization.Localization(__file__, 3539, 9), abs_264129, *[m_264130], **kwargs_264131)
    
    # Getting the type of 'EPSILON' (line 3539)
    EPSILON_264133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3539, 18), 'EPSILON')
    # Applying the binary operator '>' (line 3539)
    result_gt_264134 = python_operator(stypy.reporting.localization.Localization(__file__, 3539, 9), '>', abs_call_result_264132, EPSILON_264133)
    
    # Testing the type of an if condition (line 3539)
    if_condition_264135 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3539, 9), result_gt_264134)
    # Assigning a type to the variable 'if_condition_264135' (line 3539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3539, 9), 'if_condition_264135', if_condition_264135)
    # SSA begins for if statement (line 3539)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a UnaryOp to a Name (line 3540):
    
    # Assigning a UnaryOp to a Name (line 3540):
    
    # Getting the type of 'k_ratio' (line 3540)
    k_ratio_264136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3540, 13), 'k_ratio')
    # Applying the 'usub' unary operator (line 3540)
    result___neg___264137 = python_operator(stypy.reporting.localization.Localization(__file__, 3540, 12), 'usub', k_ratio_264136)
    
    # Assigning a type to the variable 'r' (line 3540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3540, 8), 'r', result___neg___264137)
    # SSA branch for the else part of an if statement (line 3539)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 3542):
    
    # Assigning a Num to a Name (line 3542):
    float_264138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3542, 12), 'float')
    # Assigning a type to the variable 'r' (line 3542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3542, 8), 'r', float_264138)
    # SSA join for if statement (line 3539)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3536)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to abs(...): (line 3543)
    # Processing the call arguments (line 3543)
    # Getting the type of 'r' (line 3543)
    r_264140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3543, 15), 'r', False)
    # Processing the call keyword arguments (line 3543)
    kwargs_264141 = {}
    # Getting the type of 'abs' (line 3543)
    abs_264139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3543, 11), 'abs', False)
    # Calling abs(args, kwargs) (line 3543)
    abs_call_result_264142 = invoke(stypy.reporting.localization.Localization(__file__, 3543, 11), abs_264139, *[r_264140], **kwargs_264141)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3543, 4), 'stypy_return_type', abs_call_result_264142)
    
    # ################# End of '_kratio(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_kratio' in the type store
    # Getting the type of 'stypy_return_type' (line 3530)
    stypy_return_type_264143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3530, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_264143)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_kratio'
    return stypy_return_type_264143

# Assigning a type to the variable '_kratio' (line 3530)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3530, 0), '_kratio', _kratio)

@norecursion
def ellipap(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ellipap'
    module_type_store = module_type_store.open_function_context('ellipap', 3546, 0, False)
    
    # Passed parameters checking function
    ellipap.stypy_localization = localization
    ellipap.stypy_type_of_self = None
    ellipap.stypy_type_store = module_type_store
    ellipap.stypy_function_name = 'ellipap'
    ellipap.stypy_param_names_list = ['N', 'rp', 'rs']
    ellipap.stypy_varargs_param_name = None
    ellipap.stypy_kwargs_param_name = None
    ellipap.stypy_call_defaults = defaults
    ellipap.stypy_call_varargs = varargs
    ellipap.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ellipap', ['N', 'rp', 'rs'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ellipap', localization, ['N', 'rp', 'rs'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ellipap(...)' code ##################

    str_264144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3564, (-1)), 'str', 'Return (z,p,k) of Nth-order elliptic analog lowpass filter.\n\n    The filter is a normalized prototype that has `rp` decibels of ripple\n    in the passband and a stopband `rs` decibels down.\n\n    The filter\'s angular (e.g. rad/s) cutoff frequency is normalized to 1,\n    defined as the point at which the gain first drops below ``-rp``.\n\n    See Also\n    --------\n    ellip : Filter design function using this prototype\n\n    References\n    ----------\n    .. [1] Lutova, Tosic, and Evans, "Filter Design for Signal Processing",\n           Chapters 5 and 12.\n\n    ')
    
    
    
    # Call to abs(...): (line 3565)
    # Processing the call arguments (line 3565)
    
    # Call to int(...): (line 3565)
    # Processing the call arguments (line 3565)
    # Getting the type of 'N' (line 3565)
    N_264147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3565, 15), 'N', False)
    # Processing the call keyword arguments (line 3565)
    kwargs_264148 = {}
    # Getting the type of 'int' (line 3565)
    int_264146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3565, 11), 'int', False)
    # Calling int(args, kwargs) (line 3565)
    int_call_result_264149 = invoke(stypy.reporting.localization.Localization(__file__, 3565, 11), int_264146, *[N_264147], **kwargs_264148)
    
    # Processing the call keyword arguments (line 3565)
    kwargs_264150 = {}
    # Getting the type of 'abs' (line 3565)
    abs_264145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3565, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 3565)
    abs_call_result_264151 = invoke(stypy.reporting.localization.Localization(__file__, 3565, 7), abs_264145, *[int_call_result_264149], **kwargs_264150)
    
    # Getting the type of 'N' (line 3565)
    N_264152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3565, 22), 'N')
    # Applying the binary operator '!=' (line 3565)
    result_ne_264153 = python_operator(stypy.reporting.localization.Localization(__file__, 3565, 7), '!=', abs_call_result_264151, N_264152)
    
    # Testing the type of an if condition (line 3565)
    if_condition_264154 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3565, 4), result_ne_264153)
    # Assigning a type to the variable 'if_condition_264154' (line 3565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3565, 4), 'if_condition_264154', if_condition_264154)
    # SSA begins for if statement (line 3565)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3566)
    # Processing the call arguments (line 3566)
    str_264156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3566, 25), 'str', 'Filter order must be a nonnegative integer')
    # Processing the call keyword arguments (line 3566)
    kwargs_264157 = {}
    # Getting the type of 'ValueError' (line 3566)
    ValueError_264155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3566)
    ValueError_call_result_264158 = invoke(stypy.reporting.localization.Localization(__file__, 3566, 14), ValueError_264155, *[str_264156], **kwargs_264157)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3566, 8), ValueError_call_result_264158, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 3565)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'N' (line 3567)
    N_264159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3567, 9), 'N')
    int_264160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3567, 14), 'int')
    # Applying the binary operator '==' (line 3567)
    result_eq_264161 = python_operator(stypy.reporting.localization.Localization(__file__, 3567, 9), '==', N_264159, int_264160)
    
    # Testing the type of an if condition (line 3567)
    if_condition_264162 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3567, 9), result_eq_264161)
    # Assigning a type to the variable 'if_condition_264162' (line 3567)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3567, 9), 'if_condition_264162', if_condition_264162)
    # SSA begins for if statement (line 3567)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3570)
    tuple_264163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3570, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3570)
    # Adding element type (line 3570)
    
    # Call to array(...): (line 3570)
    # Processing the call arguments (line 3570)
    
    # Obtaining an instance of the builtin type 'list' (line 3570)
    list_264166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3570, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3570)
    
    # Processing the call keyword arguments (line 3570)
    kwargs_264167 = {}
    # Getting the type of 'numpy' (line 3570)
    numpy_264164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3570, 15), 'numpy', False)
    # Obtaining the member 'array' of a type (line 3570)
    array_264165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3570, 15), numpy_264164, 'array')
    # Calling array(args, kwargs) (line 3570)
    array_call_result_264168 = invoke(stypy.reporting.localization.Localization(__file__, 3570, 15), array_264165, *[list_264166], **kwargs_264167)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3570, 15), tuple_264163, array_call_result_264168)
    # Adding element type (line 3570)
    
    # Call to array(...): (line 3570)
    # Processing the call arguments (line 3570)
    
    # Obtaining an instance of the builtin type 'list' (line 3570)
    list_264171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3570, 44), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3570)
    
    # Processing the call keyword arguments (line 3570)
    kwargs_264172 = {}
    # Getting the type of 'numpy' (line 3570)
    numpy_264169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3570, 32), 'numpy', False)
    # Obtaining the member 'array' of a type (line 3570)
    array_264170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3570, 32), numpy_264169, 'array')
    # Calling array(args, kwargs) (line 3570)
    array_call_result_264173 = invoke(stypy.reporting.localization.Localization(__file__, 3570, 32), array_264170, *[list_264171], **kwargs_264172)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3570, 15), tuple_264163, array_call_result_264173)
    # Adding element type (line 3570)
    int_264174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3570, 49), 'int')
    
    # Getting the type of 'rp' (line 3570)
    rp_264175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3570, 55), 'rp')
    # Applying the 'usub' unary operator (line 3570)
    result___neg___264176 = python_operator(stypy.reporting.localization.Localization(__file__, 3570, 54), 'usub', rp_264175)
    
    int_264177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3570, 58), 'int')
    # Applying the binary operator 'div' (line 3570)
    result_div_264178 = python_operator(stypy.reporting.localization.Localization(__file__, 3570, 54), 'div', result___neg___264176, int_264177)
    
    # Applying the binary operator '**' (line 3570)
    result_pow_264179 = python_operator(stypy.reporting.localization.Localization(__file__, 3570, 49), '**', int_264174, result_div_264178)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3570, 15), tuple_264163, result_pow_264179)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3570, 8), 'stypy_return_type', tuple_264163)
    # SSA branch for the else part of an if statement (line 3567)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'N' (line 3571)
    N_264180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3571, 9), 'N')
    int_264181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3571, 14), 'int')
    # Applying the binary operator '==' (line 3571)
    result_eq_264182 = python_operator(stypy.reporting.localization.Localization(__file__, 3571, 9), '==', N_264180, int_264181)
    
    # Testing the type of an if condition (line 3571)
    if_condition_264183 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3571, 9), result_eq_264182)
    # Assigning a type to the variable 'if_condition_264183' (line 3571)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3571, 9), 'if_condition_264183', if_condition_264183)
    # SSA begins for if statement (line 3571)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a UnaryOp to a Name (line 3572):
    
    # Assigning a UnaryOp to a Name (line 3572):
    
    
    # Call to sqrt(...): (line 3572)
    # Processing the call arguments (line 3572)
    float_264185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3572, 18), 'float')
    int_264186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3572, 25), 'int')
    float_264187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3572, 32), 'float')
    # Getting the type of 'rp' (line 3572)
    rp_264188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3572, 38), 'rp', False)
    # Applying the binary operator '*' (line 3572)
    result_mul_264189 = python_operator(stypy.reporting.localization.Localization(__file__, 3572, 32), '*', float_264187, rp_264188)
    
    # Applying the binary operator '**' (line 3572)
    result_pow_264190 = python_operator(stypy.reporting.localization.Localization(__file__, 3572, 25), '**', int_264186, result_mul_264189)
    
    float_264191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3572, 44), 'float')
    # Applying the binary operator '-' (line 3572)
    result_sub_264192 = python_operator(stypy.reporting.localization.Localization(__file__, 3572, 25), '-', result_pow_264190, float_264191)
    
    # Applying the binary operator 'div' (line 3572)
    result_div_264193 = python_operator(stypy.reporting.localization.Localization(__file__, 3572, 18), 'div', float_264185, result_sub_264192)
    
    # Processing the call keyword arguments (line 3572)
    kwargs_264194 = {}
    # Getting the type of 'sqrt' (line 3572)
    sqrt_264184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3572, 13), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3572)
    sqrt_call_result_264195 = invoke(stypy.reporting.localization.Localization(__file__, 3572, 13), sqrt_264184, *[result_div_264193], **kwargs_264194)
    
    # Applying the 'usub' unary operator (line 3572)
    result___neg___264196 = python_operator(stypy.reporting.localization.Localization(__file__, 3572, 12), 'usub', sqrt_call_result_264195)
    
    # Assigning a type to the variable 'p' (line 3572)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3572, 8), 'p', result___neg___264196)
    
    # Assigning a UnaryOp to a Name (line 3573):
    
    # Assigning a UnaryOp to a Name (line 3573):
    
    # Getting the type of 'p' (line 3573)
    p_264197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 13), 'p')
    # Applying the 'usub' unary operator (line 3573)
    result___neg___264198 = python_operator(stypy.reporting.localization.Localization(__file__, 3573, 12), 'usub', p_264197)
    
    # Assigning a type to the variable 'k' (line 3573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3573, 8), 'k', result___neg___264198)
    
    # Assigning a List to a Name (line 3574):
    
    # Assigning a List to a Name (line 3574):
    
    # Obtaining an instance of the builtin type 'list' (line 3574)
    list_264199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3574, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3574)
    
    # Assigning a type to the variable 'z' (line 3574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3574, 8), 'z', list_264199)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3575)
    tuple_264200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3575, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3575)
    # Adding element type (line 3575)
    
    # Call to asarray(...): (line 3575)
    # Processing the call arguments (line 3575)
    # Getting the type of 'z' (line 3575)
    z_264202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 23), 'z', False)
    # Processing the call keyword arguments (line 3575)
    kwargs_264203 = {}
    # Getting the type of 'asarray' (line 3575)
    asarray_264201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 15), 'asarray', False)
    # Calling asarray(args, kwargs) (line 3575)
    asarray_call_result_264204 = invoke(stypy.reporting.localization.Localization(__file__, 3575, 15), asarray_264201, *[z_264202], **kwargs_264203)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3575, 15), tuple_264200, asarray_call_result_264204)
    # Adding element type (line 3575)
    
    # Call to asarray(...): (line 3575)
    # Processing the call arguments (line 3575)
    # Getting the type of 'p' (line 3575)
    p_264206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 35), 'p', False)
    # Processing the call keyword arguments (line 3575)
    kwargs_264207 = {}
    # Getting the type of 'asarray' (line 3575)
    asarray_264205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 27), 'asarray', False)
    # Calling asarray(args, kwargs) (line 3575)
    asarray_call_result_264208 = invoke(stypy.reporting.localization.Localization(__file__, 3575, 27), asarray_264205, *[p_264206], **kwargs_264207)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3575, 15), tuple_264200, asarray_call_result_264208)
    # Adding element type (line 3575)
    # Getting the type of 'k' (line 3575)
    k_264209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3575, 39), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3575, 15), tuple_264200, k_264209)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3575, 8), 'stypy_return_type', tuple_264200)
    # SSA join for if statement (line 3571)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3567)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3565)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3577):
    
    # Assigning a Call to a Name (line 3577):
    
    # Call to sqrt(...): (line 3577)
    # Processing the call arguments (line 3577)
    int_264212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3577, 21), 'int')
    float_264213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3577, 28), 'float')
    # Getting the type of 'rp' (line 3577)
    rp_264214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 34), 'rp', False)
    # Applying the binary operator '*' (line 3577)
    result_mul_264215 = python_operator(stypy.reporting.localization.Localization(__file__, 3577, 28), '*', float_264213, rp_264214)
    
    # Applying the binary operator '**' (line 3577)
    result_pow_264216 = python_operator(stypy.reporting.localization.Localization(__file__, 3577, 21), '**', int_264212, result_mul_264215)
    
    int_264217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3577, 40), 'int')
    # Applying the binary operator '-' (line 3577)
    result_sub_264218 = python_operator(stypy.reporting.localization.Localization(__file__, 3577, 21), '-', result_pow_264216, int_264217)
    
    # Processing the call keyword arguments (line 3577)
    kwargs_264219 = {}
    # Getting the type of 'numpy' (line 3577)
    numpy_264210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 10), 'numpy', False)
    # Obtaining the member 'sqrt' of a type (line 3577)
    sqrt_264211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3577, 10), numpy_264210, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3577)
    sqrt_call_result_264220 = invoke(stypy.reporting.localization.Localization(__file__, 3577, 10), sqrt_264211, *[result_sub_264218], **kwargs_264219)
    
    # Assigning a type to the variable 'eps' (line 3577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3577, 4), 'eps', sqrt_call_result_264220)
    
    # Assigning a BinOp to a Name (line 3578):
    
    # Assigning a BinOp to a Name (line 3578):
    # Getting the type of 'eps' (line 3578)
    eps_264221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3578, 10), 'eps')
    
    # Call to sqrt(...): (line 3578)
    # Processing the call arguments (line 3578)
    int_264224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3578, 27), 'int')
    float_264225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3578, 34), 'float')
    # Getting the type of 'rs' (line 3578)
    rs_264226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3578, 40), 'rs', False)
    # Applying the binary operator '*' (line 3578)
    result_mul_264227 = python_operator(stypy.reporting.localization.Localization(__file__, 3578, 34), '*', float_264225, rs_264226)
    
    # Applying the binary operator '**' (line 3578)
    result_pow_264228 = python_operator(stypy.reporting.localization.Localization(__file__, 3578, 27), '**', int_264224, result_mul_264227)
    
    int_264229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3578, 46), 'int')
    # Applying the binary operator '-' (line 3578)
    result_sub_264230 = python_operator(stypy.reporting.localization.Localization(__file__, 3578, 27), '-', result_pow_264228, int_264229)
    
    # Processing the call keyword arguments (line 3578)
    kwargs_264231 = {}
    # Getting the type of 'numpy' (line 3578)
    numpy_264222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3578, 16), 'numpy', False)
    # Obtaining the member 'sqrt' of a type (line 3578)
    sqrt_264223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3578, 16), numpy_264222, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3578)
    sqrt_call_result_264232 = invoke(stypy.reporting.localization.Localization(__file__, 3578, 16), sqrt_264223, *[result_sub_264230], **kwargs_264231)
    
    # Applying the binary operator 'div' (line 3578)
    result_div_264233 = python_operator(stypy.reporting.localization.Localization(__file__, 3578, 10), 'div', eps_264221, sqrt_call_result_264232)
    
    # Assigning a type to the variable 'ck1' (line 3578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3578, 4), 'ck1', result_div_264233)
    
    # Assigning a Call to a Name (line 3579):
    
    # Assigning a Call to a Name (line 3579):
    
    # Call to sqrt(...): (line 3579)
    # Processing the call arguments (line 3579)
    int_264236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3579, 22), 'int')
    # Getting the type of 'ck1' (line 3579)
    ck1_264237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3579, 26), 'ck1', False)
    # Getting the type of 'ck1' (line 3579)
    ck1_264238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3579, 32), 'ck1', False)
    # Applying the binary operator '*' (line 3579)
    result_mul_264239 = python_operator(stypy.reporting.localization.Localization(__file__, 3579, 26), '*', ck1_264237, ck1_264238)
    
    # Applying the binary operator '-' (line 3579)
    result_sub_264240 = python_operator(stypy.reporting.localization.Localization(__file__, 3579, 22), '-', int_264236, result_mul_264239)
    
    # Processing the call keyword arguments (line 3579)
    kwargs_264241 = {}
    # Getting the type of 'numpy' (line 3579)
    numpy_264234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3579, 11), 'numpy', False)
    # Obtaining the member 'sqrt' of a type (line 3579)
    sqrt_264235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3579, 11), numpy_264234, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3579)
    sqrt_call_result_264242 = invoke(stypy.reporting.localization.Localization(__file__, 3579, 11), sqrt_264235, *[result_sub_264240], **kwargs_264241)
    
    # Assigning a type to the variable 'ck1p' (line 3579)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3579, 4), 'ck1p', sqrt_call_result_264242)
    
    
    # Getting the type of 'ck1p' (line 3580)
    ck1p_264243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3580, 7), 'ck1p')
    int_264244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3580, 15), 'int')
    # Applying the binary operator '==' (line 3580)
    result_eq_264245 = python_operator(stypy.reporting.localization.Localization(__file__, 3580, 7), '==', ck1p_264243, int_264244)
    
    # Testing the type of an if condition (line 3580)
    if_condition_264246 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3580, 4), result_eq_264245)
    # Assigning a type to the variable 'if_condition_264246' (line 3580)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3580, 4), 'if_condition_264246', if_condition_264246)
    # SSA begins for if statement (line 3580)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3581)
    # Processing the call arguments (line 3581)
    str_264248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3581, 25), 'str', 'Cannot design a filter with given rp and rs specifications.')
    # Processing the call keyword arguments (line 3581)
    kwargs_264249 = {}
    # Getting the type of 'ValueError' (line 3581)
    ValueError_264247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3581, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3581)
    ValueError_call_result_264250 = invoke(stypy.reporting.localization.Localization(__file__, 3581, 14), ValueError_264247, *[str_264248], **kwargs_264249)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3581, 8), ValueError_call_result_264250, 'raise parameter', BaseException)
    # SSA join for if statement (line 3580)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3584):
    
    # Assigning a Call to a Name (line 3584):
    
    # Call to ellipk(...): (line 3584)
    # Processing the call arguments (line 3584)
    
    # Obtaining an instance of the builtin type 'list' (line 3584)
    list_264253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3584, 25), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3584)
    # Adding element type (line 3584)
    # Getting the type of 'ck1' (line 3584)
    ck1_264254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 26), 'ck1', False)
    # Getting the type of 'ck1' (line 3584)
    ck1_264255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 32), 'ck1', False)
    # Applying the binary operator '*' (line 3584)
    result_mul_264256 = python_operator(stypy.reporting.localization.Localization(__file__, 3584, 26), '*', ck1_264254, ck1_264255)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3584, 25), list_264253, result_mul_264256)
    # Adding element type (line 3584)
    # Getting the type of 'ck1p' (line 3584)
    ck1p_264257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 37), 'ck1p', False)
    # Getting the type of 'ck1p' (line 3584)
    ck1p_264258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 44), 'ck1p', False)
    # Applying the binary operator '*' (line 3584)
    result_mul_264259 = python_operator(stypy.reporting.localization.Localization(__file__, 3584, 37), '*', ck1p_264257, ck1p_264258)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3584, 25), list_264253, result_mul_264259)
    
    # Processing the call keyword arguments (line 3584)
    kwargs_264260 = {}
    # Getting the type of 'special' (line 3584)
    special_264251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 10), 'special', False)
    # Obtaining the member 'ellipk' of a type (line 3584)
    ellipk_264252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3584, 10), special_264251, 'ellipk')
    # Calling ellipk(args, kwargs) (line 3584)
    ellipk_call_result_264261 = invoke(stypy.reporting.localization.Localization(__file__, 3584, 10), ellipk_264252, *[list_264253], **kwargs_264260)
    
    # Assigning a type to the variable 'val' (line 3584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3584, 4), 'val', ellipk_call_result_264261)
    
    
    
    # Call to abs(...): (line 3585)
    # Processing the call arguments (line 3585)
    int_264263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3585, 11), 'int')
    # Getting the type of 'ck1p' (line 3585)
    ck1p_264264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3585, 15), 'ck1p', False)
    # Getting the type of 'ck1p' (line 3585)
    ck1p_264265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3585, 22), 'ck1p', False)
    # Applying the binary operator '*' (line 3585)
    result_mul_264266 = python_operator(stypy.reporting.localization.Localization(__file__, 3585, 15), '*', ck1p_264264, ck1p_264265)
    
    # Applying the binary operator '-' (line 3585)
    result_sub_264267 = python_operator(stypy.reporting.localization.Localization(__file__, 3585, 11), '-', int_264263, result_mul_264266)
    
    # Processing the call keyword arguments (line 3585)
    kwargs_264268 = {}
    # Getting the type of 'abs' (line 3585)
    abs_264262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3585, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 3585)
    abs_call_result_264269 = invoke(stypy.reporting.localization.Localization(__file__, 3585, 7), abs_264262, *[result_sub_264267], **kwargs_264268)
    
    # Getting the type of 'EPSILON' (line 3585)
    EPSILON_264270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3585, 30), 'EPSILON')
    # Applying the binary operator '<' (line 3585)
    result_lt_264271 = python_operator(stypy.reporting.localization.Localization(__file__, 3585, 7), '<', abs_call_result_264269, EPSILON_264270)
    
    # Testing the type of an if condition (line 3585)
    if_condition_264272 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3585, 4), result_lt_264271)
    # Assigning a type to the variable 'if_condition_264272' (line 3585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3585, 4), 'if_condition_264272', if_condition_264272)
    # SSA begins for if statement (line 3585)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 3586):
    
    # Assigning a Num to a Name (line 3586):
    int_264273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3586, 15), 'int')
    # Assigning a type to the variable 'krat' (line 3586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3586, 8), 'krat', int_264273)
    # SSA branch for the else part of an if statement (line 3585)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 3588):
    
    # Assigning a BinOp to a Name (line 3588):
    # Getting the type of 'N' (line 3588)
    N_264274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3588, 15), 'N')
    
    # Obtaining the type of the subscript
    int_264275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3588, 23), 'int')
    # Getting the type of 'val' (line 3588)
    val_264276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3588, 19), 'val')
    # Obtaining the member '__getitem__' of a type (line 3588)
    getitem___264277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3588, 19), val_264276, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3588)
    subscript_call_result_264278 = invoke(stypy.reporting.localization.Localization(__file__, 3588, 19), getitem___264277, int_264275)
    
    # Applying the binary operator '*' (line 3588)
    result_mul_264279 = python_operator(stypy.reporting.localization.Localization(__file__, 3588, 15), '*', N_264274, subscript_call_result_264278)
    
    
    # Obtaining the type of the subscript
    int_264280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3588, 32), 'int')
    # Getting the type of 'val' (line 3588)
    val_264281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3588, 28), 'val')
    # Obtaining the member '__getitem__' of a type (line 3588)
    getitem___264282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3588, 28), val_264281, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3588)
    subscript_call_result_264283 = invoke(stypy.reporting.localization.Localization(__file__, 3588, 28), getitem___264282, int_264280)
    
    # Applying the binary operator 'div' (line 3588)
    result_div_264284 = python_operator(stypy.reporting.localization.Localization(__file__, 3588, 26), 'div', result_mul_264279, subscript_call_result_264283)
    
    # Assigning a type to the variable 'krat' (line 3588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3588, 8), 'krat', result_div_264284)
    # SSA join for if statement (line 3585)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3590):
    
    # Assigning a Call to a Name (line 3590):
    
    # Call to fmin(...): (line 3590)
    # Processing the call arguments (line 3590)
    # Getting the type of '_kratio' (line 3590)
    _kratio_264287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3590, 22), '_kratio', False)
    
    # Obtaining an instance of the builtin type 'list' (line 3590)
    list_264288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3590, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3590)
    # Adding element type (line 3590)
    float_264289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3590, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3590, 31), list_264288, float_264289)
    
    # Processing the call keyword arguments (line 3590)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3590)
    tuple_264290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3590, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3590)
    # Adding element type (line 3590)
    # Getting the type of 'krat' (line 3590)
    krat_264291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3590, 44), 'krat', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3590, 44), tuple_264290, krat_264291)
    
    keyword_264292 = tuple_264290
    int_264293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3590, 59), 'int')
    keyword_264294 = int_264293
    int_264295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3590, 72), 'int')
    keyword_264296 = int_264295
    int_264297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3591, 27), 'int')
    keyword_264298 = int_264297
    kwargs_264299 = {'disp': keyword_264298, 'maxiter': keyword_264296, 'args': keyword_264292, 'maxfun': keyword_264294}
    # Getting the type of 'optimize' (line 3590)
    optimize_264285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3590, 8), 'optimize', False)
    # Obtaining the member 'fmin' of a type (line 3590)
    fmin_264286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3590, 8), optimize_264285, 'fmin')
    # Calling fmin(args, kwargs) (line 3590)
    fmin_call_result_264300 = invoke(stypy.reporting.localization.Localization(__file__, 3590, 8), fmin_264286, *[_kratio_264287, list_264288], **kwargs_264299)
    
    # Assigning a type to the variable 'm' (line 3590)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3590, 4), 'm', fmin_call_result_264300)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'm' (line 3592)
    m_264301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3592, 7), 'm')
    int_264302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3592, 11), 'int')
    # Applying the binary operator '<' (line 3592)
    result_lt_264303 = python_operator(stypy.reporting.localization.Localization(__file__, 3592, 7), '<', m_264301, int_264302)
    
    
    # Getting the type of 'm' (line 3592)
    m_264304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3592, 16), 'm')
    int_264305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3592, 20), 'int')
    # Applying the binary operator '>' (line 3592)
    result_gt_264306 = python_operator(stypy.reporting.localization.Localization(__file__, 3592, 16), '>', m_264304, int_264305)
    
    # Applying the binary operator 'or' (line 3592)
    result_or_keyword_264307 = python_operator(stypy.reporting.localization.Localization(__file__, 3592, 7), 'or', result_lt_264303, result_gt_264306)
    
    # Testing the type of an if condition (line 3592)
    if_condition_264308 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3592, 4), result_or_keyword_264307)
    # Assigning a type to the variable 'if_condition_264308' (line 3592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3592, 4), 'if_condition_264308', if_condition_264308)
    # SSA begins for if statement (line 3592)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3593):
    
    # Assigning a Call to a Name (line 3593):
    
    # Call to fminbound(...): (line 3593)
    # Processing the call arguments (line 3593)
    # Getting the type of '_kratio' (line 3593)
    _kratio_264311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3593, 31), '_kratio', False)
    int_264312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3593, 40), 'int')
    int_264313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3593, 43), 'int')
    # Processing the call keyword arguments (line 3593)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3593)
    tuple_264314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3593, 52), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3593)
    # Adding element type (line 3593)
    # Getting the type of 'krat' (line 3593)
    krat_264315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3593, 52), 'krat', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3593, 52), tuple_264314, krat_264315)
    
    keyword_264316 = tuple_264314
    int_264317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3593, 67), 'int')
    keyword_264318 = int_264317
    int_264319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3594, 36), 'int')
    keyword_264320 = int_264319
    kwargs_264321 = {'disp': keyword_264320, 'args': keyword_264316, 'maxfun': keyword_264318}
    # Getting the type of 'optimize' (line 3593)
    optimize_264309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3593, 12), 'optimize', False)
    # Obtaining the member 'fminbound' of a type (line 3593)
    fminbound_264310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3593, 12), optimize_264309, 'fminbound')
    # Calling fminbound(args, kwargs) (line 3593)
    fminbound_call_result_264322 = invoke(stypy.reporting.localization.Localization(__file__, 3593, 12), fminbound_264310, *[_kratio_264311, int_264312, int_264313], **kwargs_264321)
    
    # Assigning a type to the variable 'm' (line 3593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3593, 8), 'm', fminbound_call_result_264322)
    # SSA join for if statement (line 3592)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3596):
    
    # Assigning a Call to a Name (line 3596):
    
    # Call to ellipk(...): (line 3596)
    # Processing the call arguments (line 3596)
    # Getting the type of 'm' (line 3596)
    m_264325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3596, 26), 'm', False)
    # Processing the call keyword arguments (line 3596)
    kwargs_264326 = {}
    # Getting the type of 'special' (line 3596)
    special_264323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3596, 11), 'special', False)
    # Obtaining the member 'ellipk' of a type (line 3596)
    ellipk_264324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3596, 11), special_264323, 'ellipk')
    # Calling ellipk(args, kwargs) (line 3596)
    ellipk_call_result_264327 = invoke(stypy.reporting.localization.Localization(__file__, 3596, 11), ellipk_264324, *[m_264325], **kwargs_264326)
    
    # Assigning a type to the variable 'capk' (line 3596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3596, 4), 'capk', ellipk_call_result_264327)
    
    # Assigning a Call to a Name (line 3598):
    
    # Assigning a Call to a Name (line 3598):
    
    # Call to arange(...): (line 3598)
    # Processing the call arguments (line 3598)
    int_264330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3598, 21), 'int')
    # Getting the type of 'N' (line 3598)
    N_264331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3598, 25), 'N', False)
    int_264332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3598, 29), 'int')
    # Applying the binary operator '%' (line 3598)
    result_mod_264333 = python_operator(stypy.reporting.localization.Localization(__file__, 3598, 25), '%', N_264331, int_264332)
    
    # Applying the binary operator '-' (line 3598)
    result_sub_264334 = python_operator(stypy.reporting.localization.Localization(__file__, 3598, 21), '-', int_264330, result_mod_264333)
    
    # Getting the type of 'N' (line 3598)
    N_264335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3598, 32), 'N', False)
    int_264336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3598, 35), 'int')
    # Processing the call keyword arguments (line 3598)
    kwargs_264337 = {}
    # Getting the type of 'numpy' (line 3598)
    numpy_264328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3598, 8), 'numpy', False)
    # Obtaining the member 'arange' of a type (line 3598)
    arange_264329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3598, 8), numpy_264328, 'arange')
    # Calling arange(args, kwargs) (line 3598)
    arange_call_result_264338 = invoke(stypy.reporting.localization.Localization(__file__, 3598, 8), arange_264329, *[result_sub_264334, N_264335, int_264336], **kwargs_264337)
    
    # Assigning a type to the variable 'j' (line 3598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3598, 4), 'j', arange_call_result_264338)
    
    # Assigning a Call to a Name (line 3599):
    
    # Assigning a Call to a Name (line 3599):
    
    # Call to len(...): (line 3599)
    # Processing the call arguments (line 3599)
    # Getting the type of 'j' (line 3599)
    j_264340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3599, 13), 'j', False)
    # Processing the call keyword arguments (line 3599)
    kwargs_264341 = {}
    # Getting the type of 'len' (line 3599)
    len_264339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3599, 9), 'len', False)
    # Calling len(args, kwargs) (line 3599)
    len_call_result_264342 = invoke(stypy.reporting.localization.Localization(__file__, 3599, 9), len_264339, *[j_264340], **kwargs_264341)
    
    # Assigning a type to the variable 'jj' (line 3599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3599, 4), 'jj', len_call_result_264342)
    
    # Assigning a Call to a List (line 3601):
    
    # Assigning a Subscript to a Name (line 3601):
    
    # Obtaining the type of the subscript
    int_264343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3601, 4), 'int')
    
    # Call to ellipj(...): (line 3601)
    # Processing the call arguments (line 3601)
    # Getting the type of 'j' (line 3601)
    j_264346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 36), 'j', False)
    # Getting the type of 'capk' (line 3601)
    capk_264347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 40), 'capk', False)
    # Applying the binary operator '*' (line 3601)
    result_mul_264348 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 36), '*', j_264346, capk_264347)
    
    # Getting the type of 'N' (line 3601)
    N_264349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 47), 'N', False)
    # Applying the binary operator 'div' (line 3601)
    result_div_264350 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 45), 'div', result_mul_264348, N_264349)
    
    # Getting the type of 'm' (line 3601)
    m_264351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 50), 'm', False)
    
    # Call to ones(...): (line 3601)
    # Processing the call arguments (line 3601)
    # Getting the type of 'jj' (line 3601)
    jj_264354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 65), 'jj', False)
    # Processing the call keyword arguments (line 3601)
    kwargs_264355 = {}
    # Getting the type of 'numpy' (line 3601)
    numpy_264352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 54), 'numpy', False)
    # Obtaining the member 'ones' of a type (line 3601)
    ones_264353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 54), numpy_264352, 'ones')
    # Calling ones(args, kwargs) (line 3601)
    ones_call_result_264356 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 54), ones_264353, *[jj_264354], **kwargs_264355)
    
    # Applying the binary operator '*' (line 3601)
    result_mul_264357 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 50), '*', m_264351, ones_call_result_264356)
    
    # Processing the call keyword arguments (line 3601)
    kwargs_264358 = {}
    # Getting the type of 'special' (line 3601)
    special_264344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 21), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3601)
    ellipj_264345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 21), special_264344, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3601)
    ellipj_call_result_264359 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 21), ellipj_264345, *[result_div_264350, result_mul_264357], **kwargs_264358)
    
    # Obtaining the member '__getitem__' of a type (line 3601)
    getitem___264360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 4), ellipj_call_result_264359, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3601)
    subscript_call_result_264361 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 4), getitem___264360, int_264343)
    
    # Assigning a type to the variable 'list_var_assignment_257371' (line 3601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3601, 4), 'list_var_assignment_257371', subscript_call_result_264361)
    
    # Assigning a Subscript to a Name (line 3601):
    
    # Obtaining the type of the subscript
    int_264362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3601, 4), 'int')
    
    # Call to ellipj(...): (line 3601)
    # Processing the call arguments (line 3601)
    # Getting the type of 'j' (line 3601)
    j_264365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 36), 'j', False)
    # Getting the type of 'capk' (line 3601)
    capk_264366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 40), 'capk', False)
    # Applying the binary operator '*' (line 3601)
    result_mul_264367 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 36), '*', j_264365, capk_264366)
    
    # Getting the type of 'N' (line 3601)
    N_264368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 47), 'N', False)
    # Applying the binary operator 'div' (line 3601)
    result_div_264369 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 45), 'div', result_mul_264367, N_264368)
    
    # Getting the type of 'm' (line 3601)
    m_264370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 50), 'm', False)
    
    # Call to ones(...): (line 3601)
    # Processing the call arguments (line 3601)
    # Getting the type of 'jj' (line 3601)
    jj_264373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 65), 'jj', False)
    # Processing the call keyword arguments (line 3601)
    kwargs_264374 = {}
    # Getting the type of 'numpy' (line 3601)
    numpy_264371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 54), 'numpy', False)
    # Obtaining the member 'ones' of a type (line 3601)
    ones_264372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 54), numpy_264371, 'ones')
    # Calling ones(args, kwargs) (line 3601)
    ones_call_result_264375 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 54), ones_264372, *[jj_264373], **kwargs_264374)
    
    # Applying the binary operator '*' (line 3601)
    result_mul_264376 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 50), '*', m_264370, ones_call_result_264375)
    
    # Processing the call keyword arguments (line 3601)
    kwargs_264377 = {}
    # Getting the type of 'special' (line 3601)
    special_264363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 21), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3601)
    ellipj_264364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 21), special_264363, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3601)
    ellipj_call_result_264378 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 21), ellipj_264364, *[result_div_264369, result_mul_264376], **kwargs_264377)
    
    # Obtaining the member '__getitem__' of a type (line 3601)
    getitem___264379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 4), ellipj_call_result_264378, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3601)
    subscript_call_result_264380 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 4), getitem___264379, int_264362)
    
    # Assigning a type to the variable 'list_var_assignment_257372' (line 3601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3601, 4), 'list_var_assignment_257372', subscript_call_result_264380)
    
    # Assigning a Subscript to a Name (line 3601):
    
    # Obtaining the type of the subscript
    int_264381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3601, 4), 'int')
    
    # Call to ellipj(...): (line 3601)
    # Processing the call arguments (line 3601)
    # Getting the type of 'j' (line 3601)
    j_264384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 36), 'j', False)
    # Getting the type of 'capk' (line 3601)
    capk_264385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 40), 'capk', False)
    # Applying the binary operator '*' (line 3601)
    result_mul_264386 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 36), '*', j_264384, capk_264385)
    
    # Getting the type of 'N' (line 3601)
    N_264387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 47), 'N', False)
    # Applying the binary operator 'div' (line 3601)
    result_div_264388 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 45), 'div', result_mul_264386, N_264387)
    
    # Getting the type of 'm' (line 3601)
    m_264389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 50), 'm', False)
    
    # Call to ones(...): (line 3601)
    # Processing the call arguments (line 3601)
    # Getting the type of 'jj' (line 3601)
    jj_264392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 65), 'jj', False)
    # Processing the call keyword arguments (line 3601)
    kwargs_264393 = {}
    # Getting the type of 'numpy' (line 3601)
    numpy_264390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 54), 'numpy', False)
    # Obtaining the member 'ones' of a type (line 3601)
    ones_264391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 54), numpy_264390, 'ones')
    # Calling ones(args, kwargs) (line 3601)
    ones_call_result_264394 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 54), ones_264391, *[jj_264392], **kwargs_264393)
    
    # Applying the binary operator '*' (line 3601)
    result_mul_264395 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 50), '*', m_264389, ones_call_result_264394)
    
    # Processing the call keyword arguments (line 3601)
    kwargs_264396 = {}
    # Getting the type of 'special' (line 3601)
    special_264382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 21), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3601)
    ellipj_264383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 21), special_264382, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3601)
    ellipj_call_result_264397 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 21), ellipj_264383, *[result_div_264388, result_mul_264395], **kwargs_264396)
    
    # Obtaining the member '__getitem__' of a type (line 3601)
    getitem___264398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 4), ellipj_call_result_264397, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3601)
    subscript_call_result_264399 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 4), getitem___264398, int_264381)
    
    # Assigning a type to the variable 'list_var_assignment_257373' (line 3601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3601, 4), 'list_var_assignment_257373', subscript_call_result_264399)
    
    # Assigning a Subscript to a Name (line 3601):
    
    # Obtaining the type of the subscript
    int_264400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3601, 4), 'int')
    
    # Call to ellipj(...): (line 3601)
    # Processing the call arguments (line 3601)
    # Getting the type of 'j' (line 3601)
    j_264403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 36), 'j', False)
    # Getting the type of 'capk' (line 3601)
    capk_264404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 40), 'capk', False)
    # Applying the binary operator '*' (line 3601)
    result_mul_264405 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 36), '*', j_264403, capk_264404)
    
    # Getting the type of 'N' (line 3601)
    N_264406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 47), 'N', False)
    # Applying the binary operator 'div' (line 3601)
    result_div_264407 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 45), 'div', result_mul_264405, N_264406)
    
    # Getting the type of 'm' (line 3601)
    m_264408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 50), 'm', False)
    
    # Call to ones(...): (line 3601)
    # Processing the call arguments (line 3601)
    # Getting the type of 'jj' (line 3601)
    jj_264411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 65), 'jj', False)
    # Processing the call keyword arguments (line 3601)
    kwargs_264412 = {}
    # Getting the type of 'numpy' (line 3601)
    numpy_264409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 54), 'numpy', False)
    # Obtaining the member 'ones' of a type (line 3601)
    ones_264410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 54), numpy_264409, 'ones')
    # Calling ones(args, kwargs) (line 3601)
    ones_call_result_264413 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 54), ones_264410, *[jj_264411], **kwargs_264412)
    
    # Applying the binary operator '*' (line 3601)
    result_mul_264414 = python_operator(stypy.reporting.localization.Localization(__file__, 3601, 50), '*', m_264408, ones_call_result_264413)
    
    # Processing the call keyword arguments (line 3601)
    kwargs_264415 = {}
    # Getting the type of 'special' (line 3601)
    special_264401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 21), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3601)
    ellipj_264402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 21), special_264401, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3601)
    ellipj_call_result_264416 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 21), ellipj_264402, *[result_div_264407, result_mul_264414], **kwargs_264415)
    
    # Obtaining the member '__getitem__' of a type (line 3601)
    getitem___264417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3601, 4), ellipj_call_result_264416, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3601)
    subscript_call_result_264418 = invoke(stypy.reporting.localization.Localization(__file__, 3601, 4), getitem___264417, int_264400)
    
    # Assigning a type to the variable 'list_var_assignment_257374' (line 3601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3601, 4), 'list_var_assignment_257374', subscript_call_result_264418)
    
    # Assigning a Name to a Name (line 3601):
    # Getting the type of 'list_var_assignment_257371' (line 3601)
    list_var_assignment_257371_264419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 4), 'list_var_assignment_257371')
    # Assigning a type to the variable 's' (line 3601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3601, 5), 's', list_var_assignment_257371_264419)
    
    # Assigning a Name to a Name (line 3601):
    # Getting the type of 'list_var_assignment_257372' (line 3601)
    list_var_assignment_257372_264420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 4), 'list_var_assignment_257372')
    # Assigning a type to the variable 'c' (line 3601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3601, 8), 'c', list_var_assignment_257372_264420)
    
    # Assigning a Name to a Name (line 3601):
    # Getting the type of 'list_var_assignment_257373' (line 3601)
    list_var_assignment_257373_264421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 4), 'list_var_assignment_257373')
    # Assigning a type to the variable 'd' (line 3601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3601, 11), 'd', list_var_assignment_257373_264421)
    
    # Assigning a Name to a Name (line 3601):
    # Getting the type of 'list_var_assignment_257374' (line 3601)
    list_var_assignment_257374_264422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3601, 4), 'list_var_assignment_257374')
    # Assigning a type to the variable 'phi' (line 3601)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3601, 14), 'phi', list_var_assignment_257374_264422)
    
    # Assigning a Call to a Name (line 3602):
    
    # Assigning a Call to a Name (line 3602):
    
    # Call to compress(...): (line 3602)
    # Processing the call arguments (line 3602)
    
    
    # Call to abs(...): (line 3602)
    # Processing the call arguments (line 3602)
    # Getting the type of 's' (line 3602)
    s_264426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3602, 30), 's', False)
    # Processing the call keyword arguments (line 3602)
    kwargs_264427 = {}
    # Getting the type of 'abs' (line 3602)
    abs_264425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3602, 26), 'abs', False)
    # Calling abs(args, kwargs) (line 3602)
    abs_call_result_264428 = invoke(stypy.reporting.localization.Localization(__file__, 3602, 26), abs_264425, *[s_264426], **kwargs_264427)
    
    # Getting the type of 'EPSILON' (line 3602)
    EPSILON_264429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3602, 35), 'EPSILON', False)
    # Applying the binary operator '>' (line 3602)
    result_gt_264430 = python_operator(stypy.reporting.localization.Localization(__file__, 3602, 26), '>', abs_call_result_264428, EPSILON_264429)
    
    # Getting the type of 's' (line 3602)
    s_264431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3602, 44), 's', False)
    # Processing the call keyword arguments (line 3602)
    int_264432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3602, 52), 'int')
    keyword_264433 = int_264432
    kwargs_264434 = {'axis': keyword_264433}
    # Getting the type of 'numpy' (line 3602)
    numpy_264423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3602, 11), 'numpy', False)
    # Obtaining the member 'compress' of a type (line 3602)
    compress_264424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3602, 11), numpy_264423, 'compress')
    # Calling compress(args, kwargs) (line 3602)
    compress_call_result_264435 = invoke(stypy.reporting.localization.Localization(__file__, 3602, 11), compress_264424, *[result_gt_264430, s_264431], **kwargs_264434)
    
    # Assigning a type to the variable 'snew' (line 3602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3602, 4), 'snew', compress_call_result_264435)
    
    # Assigning a BinOp to a Name (line 3603):
    
    # Assigning a BinOp to a Name (line 3603):
    float_264436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3603, 8), 'float')
    
    # Call to sqrt(...): (line 3603)
    # Processing the call arguments (line 3603)
    # Getting the type of 'm' (line 3603)
    m_264438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3603, 20), 'm', False)
    # Processing the call keyword arguments (line 3603)
    kwargs_264439 = {}
    # Getting the type of 'sqrt' (line 3603)
    sqrt_264437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3603, 15), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3603)
    sqrt_call_result_264440 = invoke(stypy.reporting.localization.Localization(__file__, 3603, 15), sqrt_264437, *[m_264438], **kwargs_264439)
    
    # Getting the type of 'snew' (line 3603)
    snew_264441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3603, 25), 'snew')
    # Applying the binary operator '*' (line 3603)
    result_mul_264442 = python_operator(stypy.reporting.localization.Localization(__file__, 3603, 15), '*', sqrt_call_result_264440, snew_264441)
    
    # Applying the binary operator 'div' (line 3603)
    result_div_264443 = python_operator(stypy.reporting.localization.Localization(__file__, 3603, 8), 'div', float_264436, result_mul_264442)
    
    # Assigning a type to the variable 'z' (line 3603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3603, 4), 'z', result_div_264443)
    
    # Assigning a BinOp to a Name (line 3604):
    
    # Assigning a BinOp to a Name (line 3604):
    complex_264444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3604, 8), 'complex')
    # Getting the type of 'z' (line 3604)
    z_264445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3604, 13), 'z')
    # Applying the binary operator '*' (line 3604)
    result_mul_264446 = python_operator(stypy.reporting.localization.Localization(__file__, 3604, 8), '*', complex_264444, z_264445)
    
    # Assigning a type to the variable 'z' (line 3604)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3604, 4), 'z', result_mul_264446)
    
    # Assigning a Call to a Name (line 3605):
    
    # Assigning a Call to a Name (line 3605):
    
    # Call to concatenate(...): (line 3605)
    # Processing the call arguments (line 3605)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3605)
    tuple_264449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3605, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3605)
    # Adding element type (line 3605)
    # Getting the type of 'z' (line 3605)
    z_264450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 27), 'z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 27), tuple_264449, z_264450)
    # Adding element type (line 3605)
    
    # Call to conjugate(...): (line 3605)
    # Processing the call arguments (line 3605)
    # Getting the type of 'z' (line 3605)
    z_264452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 40), 'z', False)
    # Processing the call keyword arguments (line 3605)
    kwargs_264453 = {}
    # Getting the type of 'conjugate' (line 3605)
    conjugate_264451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 30), 'conjugate', False)
    # Calling conjugate(args, kwargs) (line 3605)
    conjugate_call_result_264454 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 30), conjugate_264451, *[z_264452], **kwargs_264453)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3605, 27), tuple_264449, conjugate_call_result_264454)
    
    # Processing the call keyword arguments (line 3605)
    kwargs_264455 = {}
    # Getting the type of 'numpy' (line 3605)
    numpy_264447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 8), 'numpy', False)
    # Obtaining the member 'concatenate' of a type (line 3605)
    concatenate_264448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 8), numpy_264447, 'concatenate')
    # Calling concatenate(args, kwargs) (line 3605)
    concatenate_call_result_264456 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 8), concatenate_264448, *[tuple_264449], **kwargs_264455)
    
    # Assigning a type to the variable 'z' (line 3605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3605, 4), 'z', concatenate_call_result_264456)
    
    # Assigning a Call to a Name (line 3607):
    
    # Assigning a Call to a Name (line 3607):
    
    # Call to fmin(...): (line 3607)
    # Processing the call arguments (line 3607)
    # Getting the type of '_vratio' (line 3607)
    _vratio_264459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 22), '_vratio', False)
    
    # Call to ellipk(...): (line 3607)
    # Processing the call arguments (line 3607)
    # Getting the type of 'm' (line 3607)
    m_264462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 46), 'm', False)
    # Processing the call keyword arguments (line 3607)
    kwargs_264463 = {}
    # Getting the type of 'special' (line 3607)
    special_264460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 31), 'special', False)
    # Obtaining the member 'ellipk' of a type (line 3607)
    ellipk_264461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3607, 31), special_264460, 'ellipk')
    # Calling ellipk(args, kwargs) (line 3607)
    ellipk_call_result_264464 = invoke(stypy.reporting.localization.Localization(__file__, 3607, 31), ellipk_264461, *[m_264462], **kwargs_264463)
    
    # Processing the call keyword arguments (line 3607)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3607)
    tuple_264465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3607, 56), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3607)
    # Adding element type (line 3607)
    float_264466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3607, 56), 'float')
    # Getting the type of 'eps' (line 3607)
    eps_264467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 61), 'eps', False)
    # Applying the binary operator 'div' (line 3607)
    result_div_264468 = python_operator(stypy.reporting.localization.Localization(__file__, 3607, 56), 'div', float_264466, eps_264467)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3607, 56), tuple_264465, result_div_264468)
    # Adding element type (line 3607)
    # Getting the type of 'ck1p' (line 3607)
    ck1p_264469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 66), 'ck1p', False)
    # Getting the type of 'ck1p' (line 3607)
    ck1p_264470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 73), 'ck1p', False)
    # Applying the binary operator '*' (line 3607)
    result_mul_264471 = python_operator(stypy.reporting.localization.Localization(__file__, 3607, 66), '*', ck1p_264469, ck1p_264470)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3607, 56), tuple_264465, result_mul_264471)
    
    keyword_264472 = tuple_264465
    int_264473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3608, 29), 'int')
    keyword_264474 = int_264473
    int_264475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3608, 42), 'int')
    keyword_264476 = int_264475
    int_264477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3608, 52), 'int')
    keyword_264478 = int_264477
    kwargs_264479 = {'disp': keyword_264478, 'maxiter': keyword_264476, 'args': keyword_264472, 'maxfun': keyword_264474}
    # Getting the type of 'optimize' (line 3607)
    optimize_264457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 8), 'optimize', False)
    # Obtaining the member 'fmin' of a type (line 3607)
    fmin_264458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3607, 8), optimize_264457, 'fmin')
    # Calling fmin(args, kwargs) (line 3607)
    fmin_call_result_264480 = invoke(stypy.reporting.localization.Localization(__file__, 3607, 8), fmin_264458, *[_vratio_264459, ellipk_call_result_264464], **kwargs_264479)
    
    # Assigning a type to the variable 'r' (line 3607)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3607, 4), 'r', fmin_call_result_264480)
    
    # Assigning a BinOp to a Name (line 3609):
    
    # Assigning a BinOp to a Name (line 3609):
    # Getting the type of 'capk' (line 3609)
    capk_264481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3609, 9), 'capk')
    # Getting the type of 'r' (line 3609)
    r_264482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3609, 16), 'r')
    # Applying the binary operator '*' (line 3609)
    result_mul_264483 = python_operator(stypy.reporting.localization.Localization(__file__, 3609, 9), '*', capk_264481, r_264482)
    
    # Getting the type of 'N' (line 3609)
    N_264484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3609, 21), 'N')
    
    # Obtaining the type of the subscript
    int_264485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3609, 29), 'int')
    # Getting the type of 'val' (line 3609)
    val_264486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3609, 25), 'val')
    # Obtaining the member '__getitem__' of a type (line 3609)
    getitem___264487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3609, 25), val_264486, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3609)
    subscript_call_result_264488 = invoke(stypy.reporting.localization.Localization(__file__, 3609, 25), getitem___264487, int_264485)
    
    # Applying the binary operator '*' (line 3609)
    result_mul_264489 = python_operator(stypy.reporting.localization.Localization(__file__, 3609, 21), '*', N_264484, subscript_call_result_264488)
    
    # Applying the binary operator 'div' (line 3609)
    result_div_264490 = python_operator(stypy.reporting.localization.Localization(__file__, 3609, 18), 'div', result_mul_264483, result_mul_264489)
    
    # Assigning a type to the variable 'v0' (line 3609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3609, 4), 'v0', result_div_264490)
    
    # Assigning a Call to a List (line 3611):
    
    # Assigning a Subscript to a Name (line 3611):
    
    # Obtaining the type of the subscript
    int_264491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3611, 4), 'int')
    
    # Call to ellipj(...): (line 3611)
    # Processing the call arguments (line 3611)
    # Getting the type of 'v0' (line 3611)
    v0_264494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 39), 'v0', False)
    int_264495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3611, 43), 'int')
    # Getting the type of 'm' (line 3611)
    m_264496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 47), 'm', False)
    # Applying the binary operator '-' (line 3611)
    result_sub_264497 = python_operator(stypy.reporting.localization.Localization(__file__, 3611, 43), '-', int_264495, m_264496)
    
    # Processing the call keyword arguments (line 3611)
    kwargs_264498 = {}
    # Getting the type of 'special' (line 3611)
    special_264492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 24), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3611)
    ellipj_264493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3611, 24), special_264492, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3611)
    ellipj_call_result_264499 = invoke(stypy.reporting.localization.Localization(__file__, 3611, 24), ellipj_264493, *[v0_264494, result_sub_264497], **kwargs_264498)
    
    # Obtaining the member '__getitem__' of a type (line 3611)
    getitem___264500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3611, 4), ellipj_call_result_264499, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3611)
    subscript_call_result_264501 = invoke(stypy.reporting.localization.Localization(__file__, 3611, 4), getitem___264500, int_264491)
    
    # Assigning a type to the variable 'list_var_assignment_257375' (line 3611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 4), 'list_var_assignment_257375', subscript_call_result_264501)
    
    # Assigning a Subscript to a Name (line 3611):
    
    # Obtaining the type of the subscript
    int_264502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3611, 4), 'int')
    
    # Call to ellipj(...): (line 3611)
    # Processing the call arguments (line 3611)
    # Getting the type of 'v0' (line 3611)
    v0_264505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 39), 'v0', False)
    int_264506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3611, 43), 'int')
    # Getting the type of 'm' (line 3611)
    m_264507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 47), 'm', False)
    # Applying the binary operator '-' (line 3611)
    result_sub_264508 = python_operator(stypy.reporting.localization.Localization(__file__, 3611, 43), '-', int_264506, m_264507)
    
    # Processing the call keyword arguments (line 3611)
    kwargs_264509 = {}
    # Getting the type of 'special' (line 3611)
    special_264503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 24), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3611)
    ellipj_264504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3611, 24), special_264503, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3611)
    ellipj_call_result_264510 = invoke(stypy.reporting.localization.Localization(__file__, 3611, 24), ellipj_264504, *[v0_264505, result_sub_264508], **kwargs_264509)
    
    # Obtaining the member '__getitem__' of a type (line 3611)
    getitem___264511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3611, 4), ellipj_call_result_264510, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3611)
    subscript_call_result_264512 = invoke(stypy.reporting.localization.Localization(__file__, 3611, 4), getitem___264511, int_264502)
    
    # Assigning a type to the variable 'list_var_assignment_257376' (line 3611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 4), 'list_var_assignment_257376', subscript_call_result_264512)
    
    # Assigning a Subscript to a Name (line 3611):
    
    # Obtaining the type of the subscript
    int_264513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3611, 4), 'int')
    
    # Call to ellipj(...): (line 3611)
    # Processing the call arguments (line 3611)
    # Getting the type of 'v0' (line 3611)
    v0_264516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 39), 'v0', False)
    int_264517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3611, 43), 'int')
    # Getting the type of 'm' (line 3611)
    m_264518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 47), 'm', False)
    # Applying the binary operator '-' (line 3611)
    result_sub_264519 = python_operator(stypy.reporting.localization.Localization(__file__, 3611, 43), '-', int_264517, m_264518)
    
    # Processing the call keyword arguments (line 3611)
    kwargs_264520 = {}
    # Getting the type of 'special' (line 3611)
    special_264514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 24), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3611)
    ellipj_264515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3611, 24), special_264514, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3611)
    ellipj_call_result_264521 = invoke(stypy.reporting.localization.Localization(__file__, 3611, 24), ellipj_264515, *[v0_264516, result_sub_264519], **kwargs_264520)
    
    # Obtaining the member '__getitem__' of a type (line 3611)
    getitem___264522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3611, 4), ellipj_call_result_264521, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3611)
    subscript_call_result_264523 = invoke(stypy.reporting.localization.Localization(__file__, 3611, 4), getitem___264522, int_264513)
    
    # Assigning a type to the variable 'list_var_assignment_257377' (line 3611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 4), 'list_var_assignment_257377', subscript_call_result_264523)
    
    # Assigning a Subscript to a Name (line 3611):
    
    # Obtaining the type of the subscript
    int_264524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3611, 4), 'int')
    
    # Call to ellipj(...): (line 3611)
    # Processing the call arguments (line 3611)
    # Getting the type of 'v0' (line 3611)
    v0_264527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 39), 'v0', False)
    int_264528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3611, 43), 'int')
    # Getting the type of 'm' (line 3611)
    m_264529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 47), 'm', False)
    # Applying the binary operator '-' (line 3611)
    result_sub_264530 = python_operator(stypy.reporting.localization.Localization(__file__, 3611, 43), '-', int_264528, m_264529)
    
    # Processing the call keyword arguments (line 3611)
    kwargs_264531 = {}
    # Getting the type of 'special' (line 3611)
    special_264525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 24), 'special', False)
    # Obtaining the member 'ellipj' of a type (line 3611)
    ellipj_264526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3611, 24), special_264525, 'ellipj')
    # Calling ellipj(args, kwargs) (line 3611)
    ellipj_call_result_264532 = invoke(stypy.reporting.localization.Localization(__file__, 3611, 24), ellipj_264526, *[v0_264527, result_sub_264530], **kwargs_264531)
    
    # Obtaining the member '__getitem__' of a type (line 3611)
    getitem___264533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3611, 4), ellipj_call_result_264532, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3611)
    subscript_call_result_264534 = invoke(stypy.reporting.localization.Localization(__file__, 3611, 4), getitem___264533, int_264524)
    
    # Assigning a type to the variable 'list_var_assignment_257378' (line 3611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 4), 'list_var_assignment_257378', subscript_call_result_264534)
    
    # Assigning a Name to a Name (line 3611):
    # Getting the type of 'list_var_assignment_257375' (line 3611)
    list_var_assignment_257375_264535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 4), 'list_var_assignment_257375')
    # Assigning a type to the variable 'sv' (line 3611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 5), 'sv', list_var_assignment_257375_264535)
    
    # Assigning a Name to a Name (line 3611):
    # Getting the type of 'list_var_assignment_257376' (line 3611)
    list_var_assignment_257376_264536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 4), 'list_var_assignment_257376')
    # Assigning a type to the variable 'cv' (line 3611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 9), 'cv', list_var_assignment_257376_264536)
    
    # Assigning a Name to a Name (line 3611):
    # Getting the type of 'list_var_assignment_257377' (line 3611)
    list_var_assignment_257377_264537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 4), 'list_var_assignment_257377')
    # Assigning a type to the variable 'dv' (line 3611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 13), 'dv', list_var_assignment_257377_264537)
    
    # Assigning a Name to a Name (line 3611):
    # Getting the type of 'list_var_assignment_257378' (line 3611)
    list_var_assignment_257378_264538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3611, 4), 'list_var_assignment_257378')
    # Assigning a type to the variable 'phi' (line 3611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3611, 17), 'phi', list_var_assignment_257378_264538)
    
    # Assigning a BinOp to a Name (line 3612):
    
    # Assigning a BinOp to a Name (line 3612):
    
    # Getting the type of 'c' (line 3612)
    c_264539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 10), 'c')
    # Getting the type of 'd' (line 3612)
    d_264540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 14), 'd')
    # Applying the binary operator '*' (line 3612)
    result_mul_264541 = python_operator(stypy.reporting.localization.Localization(__file__, 3612, 10), '*', c_264539, d_264540)
    
    # Getting the type of 'sv' (line 3612)
    sv_264542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 18), 'sv')
    # Applying the binary operator '*' (line 3612)
    result_mul_264543 = python_operator(stypy.reporting.localization.Localization(__file__, 3612, 16), '*', result_mul_264541, sv_264542)
    
    # Getting the type of 'cv' (line 3612)
    cv_264544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 23), 'cv')
    # Applying the binary operator '*' (line 3612)
    result_mul_264545 = python_operator(stypy.reporting.localization.Localization(__file__, 3612, 21), '*', result_mul_264543, cv_264544)
    
    complex_264546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3612, 28), 'complex')
    # Getting the type of 's' (line 3612)
    s_264547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 33), 's')
    # Applying the binary operator '*' (line 3612)
    result_mul_264548 = python_operator(stypy.reporting.localization.Localization(__file__, 3612, 28), '*', complex_264546, s_264547)
    
    # Getting the type of 'dv' (line 3612)
    dv_264549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 37), 'dv')
    # Applying the binary operator '*' (line 3612)
    result_mul_264550 = python_operator(stypy.reporting.localization.Localization(__file__, 3612, 35), '*', result_mul_264548, dv_264549)
    
    # Applying the binary operator '+' (line 3612)
    result_add_264551 = python_operator(stypy.reporting.localization.Localization(__file__, 3612, 10), '+', result_mul_264545, result_mul_264550)
    
    # Applying the 'usub' unary operator (line 3612)
    result___neg___264552 = python_operator(stypy.reporting.localization.Localization(__file__, 3612, 8), 'usub', result_add_264551)
    
    int_264553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3612, 44), 'int')
    # Getting the type of 'd' (line 3612)
    d_264554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 49), 'd')
    # Getting the type of 'sv' (line 3612)
    sv_264555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3612, 53), 'sv')
    # Applying the binary operator '*' (line 3612)
    result_mul_264556 = python_operator(stypy.reporting.localization.Localization(__file__, 3612, 49), '*', d_264554, sv_264555)
    
    float_264557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3612, 60), 'float')
    # Applying the binary operator '**' (line 3612)
    result_pow_264558 = python_operator(stypy.reporting.localization.Localization(__file__, 3612, 48), '**', result_mul_264556, float_264557)
    
    # Applying the binary operator '-' (line 3612)
    result_sub_264559 = python_operator(stypy.reporting.localization.Localization(__file__, 3612, 44), '-', int_264553, result_pow_264558)
    
    # Applying the binary operator 'div' (line 3612)
    result_div_264560 = python_operator(stypy.reporting.localization.Localization(__file__, 3612, 8), 'div', result___neg___264552, result_sub_264559)
    
    # Assigning a type to the variable 'p' (line 3612)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3612, 4), 'p', result_div_264560)
    
    # Getting the type of 'N' (line 3614)
    N_264561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 7), 'N')
    int_264562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3614, 11), 'int')
    # Applying the binary operator '%' (line 3614)
    result_mod_264563 = python_operator(stypy.reporting.localization.Localization(__file__, 3614, 7), '%', N_264561, int_264562)
    
    # Testing the type of an if condition (line 3614)
    if_condition_264564 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3614, 4), result_mod_264563)
    # Assigning a type to the variable 'if_condition_264564' (line 3614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3614, 4), 'if_condition_264564', if_condition_264564)
    # SSA begins for if statement (line 3614)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3615):
    
    # Assigning a Call to a Name (line 3615):
    
    # Call to compress(...): (line 3615)
    # Processing the call arguments (line 3615)
    
    
    # Call to abs(...): (line 3615)
    # Processing the call arguments (line 3615)
    # Getting the type of 'p' (line 3615)
    p_264568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 34), 'p', False)
    # Obtaining the member 'imag' of a type (line 3615)
    imag_264569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3615, 34), p_264568, 'imag')
    # Processing the call keyword arguments (line 3615)
    kwargs_264570 = {}
    # Getting the type of 'abs' (line 3615)
    abs_264567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 30), 'abs', False)
    # Calling abs(args, kwargs) (line 3615)
    abs_call_result_264571 = invoke(stypy.reporting.localization.Localization(__file__, 3615, 30), abs_264567, *[imag_264569], **kwargs_264570)
    
    # Getting the type of 'EPSILON' (line 3615)
    EPSILON_264572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 44), 'EPSILON', False)
    
    # Call to sqrt(...): (line 3616)
    # Processing the call arguments (line 3616)
    
    # Call to sum(...): (line 3616)
    # Processing the call arguments (line 3616)
    # Getting the type of 'p' (line 3616)
    p_264577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 51), 'p', False)
    
    # Call to conjugate(...): (line 3616)
    # Processing the call arguments (line 3616)
    # Getting the type of 'p' (line 3616)
    p_264580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 71), 'p', False)
    # Processing the call keyword arguments (line 3616)
    kwargs_264581 = {}
    # Getting the type of 'numpy' (line 3616)
    numpy_264578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 55), 'numpy', False)
    # Obtaining the member 'conjugate' of a type (line 3616)
    conjugate_264579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3616, 55), numpy_264578, 'conjugate')
    # Calling conjugate(args, kwargs) (line 3616)
    conjugate_call_result_264582 = invoke(stypy.reporting.localization.Localization(__file__, 3616, 55), conjugate_264579, *[p_264580], **kwargs_264581)
    
    # Applying the binary operator '*' (line 3616)
    result_mul_264583 = python_operator(stypy.reporting.localization.Localization(__file__, 3616, 51), '*', p_264577, conjugate_call_result_264582)
    
    # Processing the call keyword arguments (line 3616)
    int_264584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3617, 56), 'int')
    keyword_264585 = int_264584
    kwargs_264586 = {'axis': keyword_264585}
    # Getting the type of 'numpy' (line 3616)
    numpy_264575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 41), 'numpy', False)
    # Obtaining the member 'sum' of a type (line 3616)
    sum_264576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3616, 41), numpy_264575, 'sum')
    # Calling sum(args, kwargs) (line 3616)
    sum_call_result_264587 = invoke(stypy.reporting.localization.Localization(__file__, 3616, 41), sum_264576, *[result_mul_264583], **kwargs_264586)
    
    # Obtaining the member 'real' of a type (line 3616)
    real_264588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3616, 41), sum_call_result_264587, 'real')
    # Processing the call keyword arguments (line 3616)
    kwargs_264589 = {}
    # Getting the type of 'numpy' (line 3616)
    numpy_264573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 30), 'numpy', False)
    # Obtaining the member 'sqrt' of a type (line 3616)
    sqrt_264574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3616, 30), numpy_264573, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3616)
    sqrt_call_result_264590 = invoke(stypy.reporting.localization.Localization(__file__, 3616, 30), sqrt_264574, *[real_264588], **kwargs_264589)
    
    # Applying the binary operator '*' (line 3615)
    result_mul_264591 = python_operator(stypy.reporting.localization.Localization(__file__, 3615, 44), '*', EPSILON_264572, sqrt_call_result_264590)
    
    # Applying the binary operator '>' (line 3615)
    result_gt_264592 = python_operator(stypy.reporting.localization.Localization(__file__, 3615, 30), '>', abs_call_result_264571, result_mul_264591)
    
    # Getting the type of 'p' (line 3618)
    p_264593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3618, 30), 'p', False)
    # Processing the call keyword arguments (line 3615)
    int_264594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3618, 38), 'int')
    keyword_264595 = int_264594
    kwargs_264596 = {'axis': keyword_264595}
    # Getting the type of 'numpy' (line 3615)
    numpy_264565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 15), 'numpy', False)
    # Obtaining the member 'compress' of a type (line 3615)
    compress_264566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3615, 15), numpy_264565, 'compress')
    # Calling compress(args, kwargs) (line 3615)
    compress_call_result_264597 = invoke(stypy.reporting.localization.Localization(__file__, 3615, 15), compress_264566, *[result_gt_264592, p_264593], **kwargs_264596)
    
    # Assigning a type to the variable 'newp' (line 3615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3615, 8), 'newp', compress_call_result_264597)
    
    # Assigning a Call to a Name (line 3619):
    
    # Assigning a Call to a Name (line 3619):
    
    # Call to concatenate(...): (line 3619)
    # Processing the call arguments (line 3619)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3619)
    tuple_264600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3619, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3619)
    # Adding element type (line 3619)
    # Getting the type of 'p' (line 3619)
    p_264601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3619, 31), 'p', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3619, 31), tuple_264600, p_264601)
    # Adding element type (line 3619)
    
    # Call to conjugate(...): (line 3619)
    # Processing the call arguments (line 3619)
    # Getting the type of 'newp' (line 3619)
    newp_264603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3619, 44), 'newp', False)
    # Processing the call keyword arguments (line 3619)
    kwargs_264604 = {}
    # Getting the type of 'conjugate' (line 3619)
    conjugate_264602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3619, 34), 'conjugate', False)
    # Calling conjugate(args, kwargs) (line 3619)
    conjugate_call_result_264605 = invoke(stypy.reporting.localization.Localization(__file__, 3619, 34), conjugate_264602, *[newp_264603], **kwargs_264604)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3619, 31), tuple_264600, conjugate_call_result_264605)
    
    # Processing the call keyword arguments (line 3619)
    kwargs_264606 = {}
    # Getting the type of 'numpy' (line 3619)
    numpy_264598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3619, 12), 'numpy', False)
    # Obtaining the member 'concatenate' of a type (line 3619)
    concatenate_264599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3619, 12), numpy_264598, 'concatenate')
    # Calling concatenate(args, kwargs) (line 3619)
    concatenate_call_result_264607 = invoke(stypy.reporting.localization.Localization(__file__, 3619, 12), concatenate_264599, *[tuple_264600], **kwargs_264606)
    
    # Assigning a type to the variable 'p' (line 3619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3619, 8), 'p', concatenate_call_result_264607)
    # SSA branch for the else part of an if statement (line 3614)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3621):
    
    # Assigning a Call to a Name (line 3621):
    
    # Call to concatenate(...): (line 3621)
    # Processing the call arguments (line 3621)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3621)
    tuple_264610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3621, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3621)
    # Adding element type (line 3621)
    # Getting the type of 'p' (line 3621)
    p_264611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3621, 31), 'p', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3621, 31), tuple_264610, p_264611)
    # Adding element type (line 3621)
    
    # Call to conjugate(...): (line 3621)
    # Processing the call arguments (line 3621)
    # Getting the type of 'p' (line 3621)
    p_264613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3621, 44), 'p', False)
    # Processing the call keyword arguments (line 3621)
    kwargs_264614 = {}
    # Getting the type of 'conjugate' (line 3621)
    conjugate_264612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3621, 34), 'conjugate', False)
    # Calling conjugate(args, kwargs) (line 3621)
    conjugate_call_result_264615 = invoke(stypy.reporting.localization.Localization(__file__, 3621, 34), conjugate_264612, *[p_264613], **kwargs_264614)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3621, 31), tuple_264610, conjugate_call_result_264615)
    
    # Processing the call keyword arguments (line 3621)
    kwargs_264616 = {}
    # Getting the type of 'numpy' (line 3621)
    numpy_264608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3621, 12), 'numpy', False)
    # Obtaining the member 'concatenate' of a type (line 3621)
    concatenate_264609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3621, 12), numpy_264608, 'concatenate')
    # Calling concatenate(args, kwargs) (line 3621)
    concatenate_call_result_264617 = invoke(stypy.reporting.localization.Localization(__file__, 3621, 12), concatenate_264609, *[tuple_264610], **kwargs_264616)
    
    # Assigning a type to the variable 'p' (line 3621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3621, 8), 'p', concatenate_call_result_264617)
    # SSA join for if statement (line 3614)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 3623):
    
    # Assigning a Attribute to a Name (line 3623):
    
    # Call to prod(...): (line 3623)
    # Processing the call arguments (line 3623)
    
    # Getting the type of 'p' (line 3623)
    p_264620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3623, 21), 'p', False)
    # Applying the 'usub' unary operator (line 3623)
    result___neg___264621 = python_operator(stypy.reporting.localization.Localization(__file__, 3623, 20), 'usub', p_264620)
    
    # Processing the call keyword arguments (line 3623)
    int_264622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3623, 29), 'int')
    keyword_264623 = int_264622
    kwargs_264624 = {'axis': keyword_264623}
    # Getting the type of 'numpy' (line 3623)
    numpy_264618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3623, 9), 'numpy', False)
    # Obtaining the member 'prod' of a type (line 3623)
    prod_264619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3623, 9), numpy_264618, 'prod')
    # Calling prod(args, kwargs) (line 3623)
    prod_call_result_264625 = invoke(stypy.reporting.localization.Localization(__file__, 3623, 9), prod_264619, *[result___neg___264621], **kwargs_264624)
    
    
    # Call to prod(...): (line 3623)
    # Processing the call arguments (line 3623)
    
    # Getting the type of 'z' (line 3623)
    z_264628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3623, 46), 'z', False)
    # Applying the 'usub' unary operator (line 3623)
    result___neg___264629 = python_operator(stypy.reporting.localization.Localization(__file__, 3623, 45), 'usub', z_264628)
    
    # Processing the call keyword arguments (line 3623)
    int_264630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3623, 54), 'int')
    keyword_264631 = int_264630
    kwargs_264632 = {'axis': keyword_264631}
    # Getting the type of 'numpy' (line 3623)
    numpy_264626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3623, 34), 'numpy', False)
    # Obtaining the member 'prod' of a type (line 3623)
    prod_264627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3623, 34), numpy_264626, 'prod')
    # Calling prod(args, kwargs) (line 3623)
    prod_call_result_264633 = invoke(stypy.reporting.localization.Localization(__file__, 3623, 34), prod_264627, *[result___neg___264629], **kwargs_264632)
    
    # Applying the binary operator 'div' (line 3623)
    result_div_264634 = python_operator(stypy.reporting.localization.Localization(__file__, 3623, 9), 'div', prod_call_result_264625, prod_call_result_264633)
    
    # Obtaining the member 'real' of a type (line 3623)
    real_264635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3623, 9), result_div_264634, 'real')
    # Assigning a type to the variable 'k' (line 3623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3623, 4), 'k', real_264635)
    
    
    # Getting the type of 'N' (line 3624)
    N_264636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3624, 7), 'N')
    int_264637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3624, 11), 'int')
    # Applying the binary operator '%' (line 3624)
    result_mod_264638 = python_operator(stypy.reporting.localization.Localization(__file__, 3624, 7), '%', N_264636, int_264637)
    
    int_264639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3624, 16), 'int')
    # Applying the binary operator '==' (line 3624)
    result_eq_264640 = python_operator(stypy.reporting.localization.Localization(__file__, 3624, 7), '==', result_mod_264638, int_264639)
    
    # Testing the type of an if condition (line 3624)
    if_condition_264641 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3624, 4), result_eq_264640)
    # Assigning a type to the variable 'if_condition_264641' (line 3624)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3624, 4), 'if_condition_264641', if_condition_264641)
    # SSA begins for if statement (line 3624)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3625):
    
    # Assigning a BinOp to a Name (line 3625):
    # Getting the type of 'k' (line 3625)
    k_264642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3625, 12), 'k')
    
    # Call to sqrt(...): (line 3625)
    # Processing the call arguments (line 3625)
    int_264645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3625, 28), 'int')
    # Getting the type of 'eps' (line 3625)
    eps_264646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3625, 32), 'eps', False)
    # Getting the type of 'eps' (line 3625)
    eps_264647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3625, 38), 'eps', False)
    # Applying the binary operator '*' (line 3625)
    result_mul_264648 = python_operator(stypy.reporting.localization.Localization(__file__, 3625, 32), '*', eps_264646, eps_264647)
    
    # Applying the binary operator '+' (line 3625)
    result_add_264649 = python_operator(stypy.reporting.localization.Localization(__file__, 3625, 28), '+', int_264645, result_mul_264648)
    
    # Processing the call keyword arguments (line 3625)
    kwargs_264650 = {}
    # Getting the type of 'numpy' (line 3625)
    numpy_264643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3625, 16), 'numpy', False)
    # Obtaining the member 'sqrt' of a type (line 3625)
    sqrt_264644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3625, 16), numpy_264643, 'sqrt')
    # Calling sqrt(args, kwargs) (line 3625)
    sqrt_call_result_264651 = invoke(stypy.reporting.localization.Localization(__file__, 3625, 16), sqrt_264644, *[result_add_264649], **kwargs_264650)
    
    # Applying the binary operator 'div' (line 3625)
    result_div_264652 = python_operator(stypy.reporting.localization.Localization(__file__, 3625, 12), 'div', k_264642, sqrt_call_result_264651)
    
    # Assigning a type to the variable 'k' (line 3625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3625, 8), 'k', result_div_264652)
    # SSA join for if statement (line 3624)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3627)
    tuple_264653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3627, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3627)
    # Adding element type (line 3627)
    # Getting the type of 'z' (line 3627)
    z_264654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 11), 'z')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3627, 11), tuple_264653, z_264654)
    # Adding element type (line 3627)
    # Getting the type of 'p' (line 3627)
    p_264655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 14), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3627, 11), tuple_264653, p_264655)
    # Adding element type (line 3627)
    # Getting the type of 'k' (line 3627)
    k_264656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3627, 17), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3627, 11), tuple_264653, k_264656)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3627, 4), 'stypy_return_type', tuple_264653)
    
    # ################# End of 'ellipap(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ellipap' in the type store
    # Getting the type of 'stypy_return_type' (line 3546)
    stypy_return_type_264657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3546, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_264657)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ellipap'
    return stypy_return_type_264657

# Assigning a type to the variable 'ellipap' (line 3546)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3546, 0), 'ellipap', ellipap)

@norecursion
def _falling_factorial(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_falling_factorial'
    module_type_store = module_type_store.open_function_context('_falling_factorial', 3631, 0, False)
    
    # Passed parameters checking function
    _falling_factorial.stypy_localization = localization
    _falling_factorial.stypy_type_of_self = None
    _falling_factorial.stypy_type_store = module_type_store
    _falling_factorial.stypy_function_name = '_falling_factorial'
    _falling_factorial.stypy_param_names_list = ['x', 'n']
    _falling_factorial.stypy_varargs_param_name = None
    _falling_factorial.stypy_kwargs_param_name = None
    _falling_factorial.stypy_call_defaults = defaults
    _falling_factorial.stypy_call_varargs = varargs
    _falling_factorial.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_falling_factorial', ['x', 'n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_falling_factorial', localization, ['x', 'n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_falling_factorial(...)' code ##################

    str_264658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3648, (-1)), 'str', '\n    Return the factorial of `x` to the `n` falling.\n\n    This is defined as:\n\n    .. math::   x^\\underline n = (x)_n = x (x-1) \\cdots (x-n+1)\n\n    This can more efficiently calculate ratios of factorials, since:\n\n    n!/m! == falling_factorial(n, n-m)\n\n    where n >= m\n\n    skipping the factors that cancel out\n\n    the usual factorial n! == ff(n, n)\n    ')
    
    # Assigning a Num to a Name (line 3649):
    
    # Assigning a Num to a Name (line 3649):
    int_264659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3649, 10), 'int')
    # Assigning a type to the variable 'val' (line 3649)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3649, 4), 'val', int_264659)
    
    
    # Call to range(...): (line 3650)
    # Processing the call arguments (line 3650)
    # Getting the type of 'x' (line 3650)
    x_264661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 19), 'x', False)
    # Getting the type of 'n' (line 3650)
    n_264662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 23), 'n', False)
    # Applying the binary operator '-' (line 3650)
    result_sub_264663 = python_operator(stypy.reporting.localization.Localization(__file__, 3650, 19), '-', x_264661, n_264662)
    
    int_264664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3650, 27), 'int')
    # Applying the binary operator '+' (line 3650)
    result_add_264665 = python_operator(stypy.reporting.localization.Localization(__file__, 3650, 25), '+', result_sub_264663, int_264664)
    
    # Getting the type of 'x' (line 3650)
    x_264666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 30), 'x', False)
    int_264667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3650, 34), 'int')
    # Applying the binary operator '+' (line 3650)
    result_add_264668 = python_operator(stypy.reporting.localization.Localization(__file__, 3650, 30), '+', x_264666, int_264667)
    
    # Processing the call keyword arguments (line 3650)
    kwargs_264669 = {}
    # Getting the type of 'range' (line 3650)
    range_264660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 13), 'range', False)
    # Calling range(args, kwargs) (line 3650)
    range_call_result_264670 = invoke(stypy.reporting.localization.Localization(__file__, 3650, 13), range_264660, *[result_add_264665, result_add_264668], **kwargs_264669)
    
    # Testing the type of a for loop iterable (line 3650)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3650, 4), range_call_result_264670)
    # Getting the type of the for loop variable (line 3650)
    for_loop_var_264671 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3650, 4), range_call_result_264670)
    # Assigning a type to the variable 'k' (line 3650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3650, 4), 'k', for_loop_var_264671)
    # SSA begins for a for statement (line 3650)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'val' (line 3651)
    val_264672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 8), 'val')
    # Getting the type of 'k' (line 3651)
    k_264673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 15), 'k')
    # Applying the binary operator '*=' (line 3651)
    result_imul_264674 = python_operator(stypy.reporting.localization.Localization(__file__, 3651, 8), '*=', val_264672, k_264673)
    # Assigning a type to the variable 'val' (line 3651)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3651, 8), 'val', result_imul_264674)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'val' (line 3652)
    val_264675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3652, 11), 'val')
    # Assigning a type to the variable 'stypy_return_type' (line 3652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3652, 4), 'stypy_return_type', val_264675)
    
    # ################# End of '_falling_factorial(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_falling_factorial' in the type store
    # Getting the type of 'stypy_return_type' (line 3631)
    stypy_return_type_264676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_264676)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_falling_factorial'
    return stypy_return_type_264676

# Assigning a type to the variable '_falling_factorial' (line 3631)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3631, 0), '_falling_factorial', _falling_factorial)

@norecursion
def _bessel_poly(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 3655)
    False_264677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3655, 28), 'False')
    defaults = [False_264677]
    # Create a new context for function '_bessel_poly'
    module_type_store = module_type_store.open_function_context('_bessel_poly', 3655, 0, False)
    
    # Passed parameters checking function
    _bessel_poly.stypy_localization = localization
    _bessel_poly.stypy_type_of_self = None
    _bessel_poly.stypy_type_store = module_type_store
    _bessel_poly.stypy_function_name = '_bessel_poly'
    _bessel_poly.stypy_param_names_list = ['n', 'reverse']
    _bessel_poly.stypy_varargs_param_name = None
    _bessel_poly.stypy_kwargs_param_name = None
    _bessel_poly.stypy_call_defaults = defaults
    _bessel_poly.stypy_call_varargs = varargs
    _bessel_poly.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_bessel_poly', ['n', 'reverse'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_bessel_poly', localization, ['n', 'reverse'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_bessel_poly(...)' code ##################

    str_264678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3681, (-1)), 'str', "\n    Return the coefficients of Bessel polynomial of degree `n`\n\n    If `reverse` is true, a reverse Bessel polynomial is output.\n\n    Output is a list of coefficients:\n    [1]                   = 1\n    [1,  1]               = 1*s   +  1\n    [1,  3,  3]           = 1*s^2 +  3*s   +  3\n    [1,  6, 15, 15]       = 1*s^3 +  6*s^2 + 15*s   +  15\n    [1, 10, 45, 105, 105] = 1*s^4 + 10*s^3 + 45*s^2 + 105*s + 105\n    etc.\n\n    Output is a Python list of arbitrary precision long ints, so n is only\n    limited by your hardware's memory.\n\n    Sequence is http://oeis.org/A001498 , and output can be confirmed to\n    match http://oeis.org/A001498/b001498.txt :\n\n    >>> i = 0\n    >>> for n in range(51):\n    ...     for x in _bessel_poly(n, reverse=True):\n    ...         print(i, x)\n    ...         i += 1\n\n    ")
    
    
    
    # Call to abs(...): (line 3682)
    # Processing the call arguments (line 3682)
    
    # Call to int(...): (line 3682)
    # Processing the call arguments (line 3682)
    # Getting the type of 'n' (line 3682)
    n_264681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3682, 15), 'n', False)
    # Processing the call keyword arguments (line 3682)
    kwargs_264682 = {}
    # Getting the type of 'int' (line 3682)
    int_264680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3682, 11), 'int', False)
    # Calling int(args, kwargs) (line 3682)
    int_call_result_264683 = invoke(stypy.reporting.localization.Localization(__file__, 3682, 11), int_264680, *[n_264681], **kwargs_264682)
    
    # Processing the call keyword arguments (line 3682)
    kwargs_264684 = {}
    # Getting the type of 'abs' (line 3682)
    abs_264679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3682, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 3682)
    abs_call_result_264685 = invoke(stypy.reporting.localization.Localization(__file__, 3682, 7), abs_264679, *[int_call_result_264683], **kwargs_264684)
    
    # Getting the type of 'n' (line 3682)
    n_264686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3682, 22), 'n')
    # Applying the binary operator '!=' (line 3682)
    result_ne_264687 = python_operator(stypy.reporting.localization.Localization(__file__, 3682, 7), '!=', abs_call_result_264685, n_264686)
    
    # Testing the type of an if condition (line 3682)
    if_condition_264688 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3682, 4), result_ne_264687)
    # Assigning a type to the variable 'if_condition_264688' (line 3682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3682, 4), 'if_condition_264688', if_condition_264688)
    # SSA begins for if statement (line 3682)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3683)
    # Processing the call arguments (line 3683)
    str_264690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3683, 25), 'str', 'Polynomial order must be a nonnegative integer')
    # Processing the call keyword arguments (line 3683)
    kwargs_264691 = {}
    # Getting the type of 'ValueError' (line 3683)
    ValueError_264689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3683, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3683)
    ValueError_call_result_264692 = invoke(stypy.reporting.localization.Localization(__file__, 3683, 14), ValueError_264689, *[str_264690], **kwargs_264691)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3683, 8), ValueError_call_result_264692, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 3682)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3685):
    
    # Assigning a Call to a Name (line 3685):
    
    # Call to int(...): (line 3685)
    # Processing the call arguments (line 3685)
    # Getting the type of 'n' (line 3685)
    n_264694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3685, 16), 'n', False)
    # Processing the call keyword arguments (line 3685)
    kwargs_264695 = {}
    # Getting the type of 'int' (line 3685)
    int_264693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3685, 12), 'int', False)
    # Calling int(args, kwargs) (line 3685)
    int_call_result_264696 = invoke(stypy.reporting.localization.Localization(__file__, 3685, 12), int_264693, *[n_264694], **kwargs_264695)
    
    # Assigning a type to the variable 'n' (line 3685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3685, 8), 'n', int_call_result_264696)
    # SSA join for if statement (line 3682)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 3687):
    
    # Assigning a List to a Name (line 3687):
    
    # Obtaining an instance of the builtin type 'list' (line 3687)
    list_264697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3687, 10), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3687)
    
    # Assigning a type to the variable 'out' (line 3687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3687, 4), 'out', list_264697)
    
    
    # Call to range(...): (line 3688)
    # Processing the call arguments (line 3688)
    # Getting the type of 'n' (line 3688)
    n_264699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3688, 19), 'n', False)
    int_264700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3688, 23), 'int')
    # Applying the binary operator '+' (line 3688)
    result_add_264701 = python_operator(stypy.reporting.localization.Localization(__file__, 3688, 19), '+', n_264699, int_264700)
    
    # Processing the call keyword arguments (line 3688)
    kwargs_264702 = {}
    # Getting the type of 'range' (line 3688)
    range_264698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3688, 13), 'range', False)
    # Calling range(args, kwargs) (line 3688)
    range_call_result_264703 = invoke(stypy.reporting.localization.Localization(__file__, 3688, 13), range_264698, *[result_add_264701], **kwargs_264702)
    
    # Testing the type of a for loop iterable (line 3688)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3688, 4), range_call_result_264703)
    # Getting the type of the for loop variable (line 3688)
    for_loop_var_264704 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3688, 4), range_call_result_264703)
    # Assigning a type to the variable 'k' (line 3688)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3688, 4), 'k', for_loop_var_264704)
    # SSA begins for a for statement (line 3688)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 3689):
    
    # Assigning a Call to a Name (line 3689):
    
    # Call to _falling_factorial(...): (line 3689)
    # Processing the call arguments (line 3689)
    int_264706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3689, 33), 'int')
    # Getting the type of 'n' (line 3689)
    n_264707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3689, 35), 'n', False)
    # Applying the binary operator '*' (line 3689)
    result_mul_264708 = python_operator(stypy.reporting.localization.Localization(__file__, 3689, 33), '*', int_264706, n_264707)
    
    # Getting the type of 'k' (line 3689)
    k_264709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3689, 39), 'k', False)
    # Applying the binary operator '-' (line 3689)
    result_sub_264710 = python_operator(stypy.reporting.localization.Localization(__file__, 3689, 33), '-', result_mul_264708, k_264709)
    
    # Getting the type of 'n' (line 3689)
    n_264711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3689, 42), 'n', False)
    # Processing the call keyword arguments (line 3689)
    kwargs_264712 = {}
    # Getting the type of '_falling_factorial' (line 3689)
    _falling_factorial_264705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3689, 14), '_falling_factorial', False)
    # Calling _falling_factorial(args, kwargs) (line 3689)
    _falling_factorial_call_result_264713 = invoke(stypy.reporting.localization.Localization(__file__, 3689, 14), _falling_factorial_264705, *[result_sub_264710, n_264711], **kwargs_264712)
    
    # Assigning a type to the variable 'num' (line 3689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3689, 8), 'num', _falling_factorial_call_result_264713)
    
    # Assigning a BinOp to a Name (line 3690):
    
    # Assigning a BinOp to a Name (line 3690):
    int_264714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3690, 14), 'int')
    # Getting the type of 'n' (line 3690)
    n_264715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3690, 18), 'n')
    # Getting the type of 'k' (line 3690)
    k_264716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3690, 22), 'k')
    # Applying the binary operator '-' (line 3690)
    result_sub_264717 = python_operator(stypy.reporting.localization.Localization(__file__, 3690, 18), '-', n_264715, k_264716)
    
    # Applying the binary operator '**' (line 3690)
    result_pow_264718 = python_operator(stypy.reporting.localization.Localization(__file__, 3690, 14), '**', int_264714, result_sub_264717)
    
    
    # Call to factorial(...): (line 3690)
    # Processing the call arguments (line 3690)
    # Getting the type of 'k' (line 3690)
    k_264720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3690, 37), 'k', False)
    # Processing the call keyword arguments (line 3690)
    # Getting the type of 'True' (line 3690)
    True_264721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3690, 46), 'True', False)
    keyword_264722 = True_264721
    kwargs_264723 = {'exact': keyword_264722}
    # Getting the type of 'factorial' (line 3690)
    factorial_264719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3690, 27), 'factorial', False)
    # Calling factorial(args, kwargs) (line 3690)
    factorial_call_result_264724 = invoke(stypy.reporting.localization.Localization(__file__, 3690, 27), factorial_264719, *[k_264720], **kwargs_264723)
    
    # Applying the binary operator '*' (line 3690)
    result_mul_264725 = python_operator(stypy.reporting.localization.Localization(__file__, 3690, 14), '*', result_pow_264718, factorial_call_result_264724)
    
    # Assigning a type to the variable 'den' (line 3690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3690, 8), 'den', result_mul_264725)
    
    # Call to append(...): (line 3691)
    # Processing the call arguments (line 3691)
    # Getting the type of 'num' (line 3691)
    num_264728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3691, 19), 'num', False)
    # Getting the type of 'den' (line 3691)
    den_264729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3691, 26), 'den', False)
    # Applying the binary operator '//' (line 3691)
    result_floordiv_264730 = python_operator(stypy.reporting.localization.Localization(__file__, 3691, 19), '//', num_264728, den_264729)
    
    # Processing the call keyword arguments (line 3691)
    kwargs_264731 = {}
    # Getting the type of 'out' (line 3691)
    out_264726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3691, 8), 'out', False)
    # Obtaining the member 'append' of a type (line 3691)
    append_264727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3691, 8), out_264726, 'append')
    # Calling append(args, kwargs) (line 3691)
    append_call_result_264732 = invoke(stypy.reporting.localization.Localization(__file__, 3691, 8), append_264727, *[result_floordiv_264730], **kwargs_264731)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'reverse' (line 3693)
    reverse_264733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3693, 7), 'reverse')
    # Testing the type of an if condition (line 3693)
    if_condition_264734 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3693, 4), reverse_264733)
    # Assigning a type to the variable 'if_condition_264734' (line 3693)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3693, 4), 'if_condition_264734', if_condition_264734)
    # SSA begins for if statement (line 3693)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    int_264735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3694, 21), 'int')
    slice_264736 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3694, 15), None, None, int_264735)
    # Getting the type of 'out' (line 3694)
    out_264737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3694, 15), 'out')
    # Obtaining the member '__getitem__' of a type (line 3694)
    getitem___264738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3694, 15), out_264737, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3694)
    subscript_call_result_264739 = invoke(stypy.reporting.localization.Localization(__file__, 3694, 15), getitem___264738, slice_264736)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3694, 8), 'stypy_return_type', subscript_call_result_264739)
    # SSA branch for the else part of an if statement (line 3693)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'out' (line 3696)
    out_264740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3696, 15), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 3696)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3696, 8), 'stypy_return_type', out_264740)
    # SSA join for if statement (line 3693)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_bessel_poly(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_bessel_poly' in the type store
    # Getting the type of 'stypy_return_type' (line 3655)
    stypy_return_type_264741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3655, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_264741)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_bessel_poly'
    return stypy_return_type_264741

# Assigning a type to the variable '_bessel_poly' (line 3655)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3655, 0), '_bessel_poly', _bessel_poly)

@norecursion
def _campos_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_campos_zeros'
    module_type_store = module_type_store.open_function_context('_campos_zeros', 3699, 0, False)
    
    # Passed parameters checking function
    _campos_zeros.stypy_localization = localization
    _campos_zeros.stypy_type_of_self = None
    _campos_zeros.stypy_type_store = module_type_store
    _campos_zeros.stypy_function_name = '_campos_zeros'
    _campos_zeros.stypy_param_names_list = ['n']
    _campos_zeros.stypy_varargs_param_name = None
    _campos_zeros.stypy_kwargs_param_name = None
    _campos_zeros.stypy_call_defaults = defaults
    _campos_zeros.stypy_call_varargs = varargs
    _campos_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_campos_zeros', ['n'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_campos_zeros', localization, ['n'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_campos_zeros(...)' code ##################

    str_264742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3703, (-1)), 'str', '\n    Return approximate zero locations of Bessel polynomials y_n(x) for order\n    `n` using polynomial fit (Campos-Calderon 2011)\n    ')
    
    
    # Getting the type of 'n' (line 3704)
    n_264743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3704, 7), 'n')
    int_264744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3704, 12), 'int')
    # Applying the binary operator '==' (line 3704)
    result_eq_264745 = python_operator(stypy.reporting.localization.Localization(__file__, 3704, 7), '==', n_264743, int_264744)
    
    # Testing the type of an if condition (line 3704)
    if_condition_264746 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3704, 4), result_eq_264745)
    # Assigning a type to the variable 'if_condition_264746' (line 3704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3704, 4), 'if_condition_264746', if_condition_264746)
    # SSA begins for if statement (line 3704)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to asarray(...): (line 3705)
    # Processing the call arguments (line 3705)
    
    # Obtaining an instance of the builtin type 'list' (line 3705)
    list_264748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3705, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3705)
    # Adding element type (line 3705)
    int_264749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3705, 24), 'int')
    complex_264750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3705, 27), 'complex')
    # Applying the binary operator '+' (line 3705)
    result_add_264751 = python_operator(stypy.reporting.localization.Localization(__file__, 3705, 24), '+', int_264749, complex_264750)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3705, 23), list_264748, result_add_264751)
    
    # Processing the call keyword arguments (line 3705)
    kwargs_264752 = {}
    # Getting the type of 'asarray' (line 3705)
    asarray_264747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3705, 15), 'asarray', False)
    # Calling asarray(args, kwargs) (line 3705)
    asarray_call_result_264753 = invoke(stypy.reporting.localization.Localization(__file__, 3705, 15), asarray_264747, *[list_264748], **kwargs_264752)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3705, 8), 'stypy_return_type', asarray_call_result_264753)
    # SSA join for if statement (line 3704)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3707):
    
    # Assigning a Call to a Name (line 3707):
    
    # Call to npp_polyval(...): (line 3707)
    # Processing the call arguments (line 3707)
    # Getting the type of 'n' (line 3707)
    n_264755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3707, 20), 'n', False)
    
    # Obtaining an instance of the builtin type 'list' (line 3707)
    list_264756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3707, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3707)
    # Adding element type (line 3707)
    int_264757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3707, 24), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3707, 23), list_264756, int_264757)
    # Adding element type (line 3707)
    int_264758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3707, 27), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3707, 23), list_264756, int_264758)
    # Adding element type (line 3707)
    int_264759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3707, 30), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3707, 23), list_264756, int_264759)
    # Adding element type (line 3707)
    int_264760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3707, 33), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3707, 23), list_264756, int_264760)
    # Adding element type (line 3707)
    int_264761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3707, 36), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3707, 23), list_264756, int_264761)
    # Adding element type (line 3707)
    int_264762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3707, 40), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3707, 23), list_264756, int_264762)
    
    # Processing the call keyword arguments (line 3707)
    kwargs_264763 = {}
    # Getting the type of 'npp_polyval' (line 3707)
    npp_polyval_264754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3707, 8), 'npp_polyval', False)
    # Calling npp_polyval(args, kwargs) (line 3707)
    npp_polyval_call_result_264764 = invoke(stypy.reporting.localization.Localization(__file__, 3707, 8), npp_polyval_264754, *[n_264755, list_264756], **kwargs_264763)
    
    # Assigning a type to the variable 's' (line 3707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3707, 4), 's', npp_polyval_call_result_264764)
    
    # Assigning a BinOp to a Name (line 3708):
    
    # Assigning a BinOp to a Name (line 3708):
    
    # Call to npp_polyval(...): (line 3708)
    # Processing the call arguments (line 3708)
    # Getting the type of 'n' (line 3708)
    n_264766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 21), 'n', False)
    
    # Obtaining an instance of the builtin type 'list' (line 3708)
    list_264767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3708, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3708)
    # Adding element type (line 3708)
    int_264768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3708, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3708, 24), list_264767, int_264768)
    # Adding element type (line 3708)
    int_264769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3708, 29), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3708, 24), list_264767, int_264769)
    
    # Processing the call keyword arguments (line 3708)
    kwargs_264770 = {}
    # Getting the type of 'npp_polyval' (line 3708)
    npp_polyval_264765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 9), 'npp_polyval', False)
    # Calling npp_polyval(args, kwargs) (line 3708)
    npp_polyval_call_result_264771 = invoke(stypy.reporting.localization.Localization(__file__, 3708, 9), npp_polyval_264765, *[n_264766, list_264767], **kwargs_264770)
    
    # Getting the type of 's' (line 3708)
    s_264772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3708, 36), 's')
    # Applying the binary operator 'div' (line 3708)
    result_div_264773 = python_operator(stypy.reporting.localization.Localization(__file__, 3708, 9), 'div', npp_polyval_call_result_264771, s_264772)
    
    # Assigning a type to the variable 'b3' (line 3708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3708, 4), 'b3', result_div_264773)
    
    # Assigning a BinOp to a Name (line 3709):
    
    # Assigning a BinOp to a Name (line 3709):
    
    # Call to npp_polyval(...): (line 3709)
    # Processing the call arguments (line 3709)
    # Getting the type of 'n' (line 3709)
    n_264775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3709, 21), 'n', False)
    
    # Obtaining an instance of the builtin type 'list' (line 3709)
    list_264776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3709, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3709)
    # Adding element type (line 3709)
    int_264777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3709, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3709, 24), list_264776, int_264777)
    # Adding element type (line 3709)
    int_264778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3709, 30), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3709, 24), list_264776, int_264778)
    # Adding element type (line 3709)
    int_264779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3709, 35), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3709, 24), list_264776, int_264779)
    
    # Processing the call keyword arguments (line 3709)
    kwargs_264780 = {}
    # Getting the type of 'npp_polyval' (line 3709)
    npp_polyval_264774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3709, 9), 'npp_polyval', False)
    # Calling npp_polyval(args, kwargs) (line 3709)
    npp_polyval_call_result_264781 = invoke(stypy.reporting.localization.Localization(__file__, 3709, 9), npp_polyval_264774, *[n_264775, list_264776], **kwargs_264780)
    
    # Getting the type of 's' (line 3709)
    s_264782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3709, 42), 's')
    # Applying the binary operator 'div' (line 3709)
    result_div_264783 = python_operator(stypy.reporting.localization.Localization(__file__, 3709, 9), 'div', npp_polyval_call_result_264781, s_264782)
    
    # Assigning a type to the variable 'b2' (line 3709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3709, 4), 'b2', result_div_264783)
    
    # Assigning a BinOp to a Name (line 3710):
    
    # Assigning a BinOp to a Name (line 3710):
    
    # Call to npp_polyval(...): (line 3710)
    # Processing the call arguments (line 3710)
    # Getting the type of 'n' (line 3710)
    n_264785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 21), 'n', False)
    
    # Obtaining an instance of the builtin type 'list' (line 3710)
    list_264786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3710, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3710)
    # Adding element type (line 3710)
    int_264787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3710, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3710, 24), list_264786, int_264787)
    # Adding element type (line 3710)
    int_264788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3710, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3710, 24), list_264786, int_264788)
    # Adding element type (line 3710)
    int_264789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3710, 32), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3710, 24), list_264786, int_264789)
    # Adding element type (line 3710)
    int_264790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3710, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3710, 24), list_264786, int_264790)
    
    # Processing the call keyword arguments (line 3710)
    kwargs_264791 = {}
    # Getting the type of 'npp_polyval' (line 3710)
    npp_polyval_264784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 9), 'npp_polyval', False)
    # Calling npp_polyval(args, kwargs) (line 3710)
    npp_polyval_call_result_264792 = invoke(stypy.reporting.localization.Localization(__file__, 3710, 9), npp_polyval_264784, *[n_264785, list_264786], **kwargs_264791)
    
    # Getting the type of 's' (line 3710)
    s_264793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 44), 's')
    # Applying the binary operator 'div' (line 3710)
    result_div_264794 = python_operator(stypy.reporting.localization.Localization(__file__, 3710, 9), 'div', npp_polyval_call_result_264792, s_264793)
    
    # Assigning a type to the variable 'b1' (line 3710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3710, 4), 'b1', result_div_264794)
    
    # Assigning a BinOp to a Name (line 3711):
    
    # Assigning a BinOp to a Name (line 3711):
    
    # Call to npp_polyval(...): (line 3711)
    # Processing the call arguments (line 3711)
    # Getting the type of 'n' (line 3711)
    n_264796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 21), 'n', False)
    
    # Obtaining an instance of the builtin type 'list' (line 3711)
    list_264797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3711, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3711)
    # Adding element type (line 3711)
    int_264798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3711, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3711, 24), list_264797, int_264798)
    # Adding element type (line 3711)
    int_264799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3711, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3711, 24), list_264797, int_264799)
    # Adding element type (line 3711)
    int_264800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3711, 32), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3711, 24), list_264797, int_264800)
    # Adding element type (line 3711)
    int_264801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3711, 35), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3711, 24), list_264797, int_264801)
    # Adding element type (line 3711)
    int_264802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3711, 38), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3711, 24), list_264797, int_264802)
    
    # Processing the call keyword arguments (line 3711)
    kwargs_264803 = {}
    # Getting the type of 'npp_polyval' (line 3711)
    npp_polyval_264795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 9), 'npp_polyval', False)
    # Calling npp_polyval(args, kwargs) (line 3711)
    npp_polyval_call_result_264804 = invoke(stypy.reporting.localization.Localization(__file__, 3711, 9), npp_polyval_264795, *[n_264796, list_264797], **kwargs_264803)
    
    # Getting the type of 's' (line 3711)
    s_264805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 45), 's')
    # Applying the binary operator 'div' (line 3711)
    result_div_264806 = python_operator(stypy.reporting.localization.Localization(__file__, 3711, 9), 'div', npp_polyval_call_result_264804, s_264805)
    
    # Assigning a type to the variable 'b0' (line 3711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3711, 4), 'b0', result_div_264806)
    
    # Assigning a Call to a Name (line 3713):
    
    # Assigning a Call to a Name (line 3713):
    
    # Call to npp_polyval(...): (line 3713)
    # Processing the call arguments (line 3713)
    # Getting the type of 'n' (line 3713)
    n_264808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 20), 'n', False)
    
    # Obtaining an instance of the builtin type 'list' (line 3713)
    list_264809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3713, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3713)
    # Adding element type (line 3713)
    int_264810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3713, 24), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3713, 23), list_264809, int_264810)
    # Adding element type (line 3713)
    int_264811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3713, 27), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3713, 23), list_264809, int_264811)
    # Adding element type (line 3713)
    int_264812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3713, 30), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3713, 23), list_264809, int_264812)
    # Adding element type (line 3713)
    int_264813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3713, 33), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3713, 23), list_264809, int_264813)
    
    # Processing the call keyword arguments (line 3713)
    kwargs_264814 = {}
    # Getting the type of 'npp_polyval' (line 3713)
    npp_polyval_264807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 8), 'npp_polyval', False)
    # Calling npp_polyval(args, kwargs) (line 3713)
    npp_polyval_call_result_264815 = invoke(stypy.reporting.localization.Localization(__file__, 3713, 8), npp_polyval_264807, *[n_264808, list_264809], **kwargs_264814)
    
    # Assigning a type to the variable 'r' (line 3713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3713, 4), 'r', npp_polyval_call_result_264815)
    
    # Assigning a BinOp to a Name (line 3714):
    
    # Assigning a BinOp to a Name (line 3714):
    
    # Call to npp_polyval(...): (line 3714)
    # Processing the call arguments (line 3714)
    # Getting the type of 'n' (line 3714)
    n_264817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 21), 'n', False)
    
    # Obtaining an instance of the builtin type 'list' (line 3714)
    list_264818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3714, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3714)
    # Adding element type (line 3714)
    int_264819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3714, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3714, 24), list_264818, int_264819)
    # Adding element type (line 3714)
    int_264820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3714, 29), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3714, 24), list_264818, int_264820)
    
    # Processing the call keyword arguments (line 3714)
    kwargs_264821 = {}
    # Getting the type of 'npp_polyval' (line 3714)
    npp_polyval_264816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 9), 'npp_polyval', False)
    # Calling npp_polyval(args, kwargs) (line 3714)
    npp_polyval_call_result_264822 = invoke(stypy.reporting.localization.Localization(__file__, 3714, 9), npp_polyval_264816, *[n_264817, list_264818], **kwargs_264821)
    
    # Getting the type of 'r' (line 3714)
    r_264823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 36), 'r')
    # Applying the binary operator 'div' (line 3714)
    result_div_264824 = python_operator(stypy.reporting.localization.Localization(__file__, 3714, 9), 'div', npp_polyval_call_result_264822, r_264823)
    
    # Assigning a type to the variable 'a1' (line 3714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3714, 4), 'a1', result_div_264824)
    
    # Assigning a BinOp to a Name (line 3715):
    
    # Assigning a BinOp to a Name (line 3715):
    int_264825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3715, 9), 'int')
    # Getting the type of 'r' (line 3715)
    r_264826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3715, 13), 'r')
    # Applying the binary operator 'div' (line 3715)
    result_div_264827 = python_operator(stypy.reporting.localization.Localization(__file__, 3715, 9), 'div', int_264825, r_264826)
    
    # Assigning a type to the variable 'a2' (line 3715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3715, 4), 'a2', result_div_264827)
    
    # Assigning a Call to a Name (line 3717):
    
    # Assigning a Call to a Name (line 3717):
    
    # Call to arange(...): (line 3717)
    # Processing the call arguments (line 3717)
    int_264830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3717, 18), 'int')
    # Getting the type of 'n' (line 3717)
    n_264831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3717, 21), 'n', False)
    int_264832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3717, 23), 'int')
    # Applying the binary operator '+' (line 3717)
    result_add_264833 = python_operator(stypy.reporting.localization.Localization(__file__, 3717, 21), '+', n_264831, int_264832)
    
    # Processing the call keyword arguments (line 3717)
    kwargs_264834 = {}
    # Getting the type of 'np' (line 3717)
    np_264828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3717, 8), 'np', False)
    # Obtaining the member 'arange' of a type (line 3717)
    arange_264829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3717, 8), np_264828, 'arange')
    # Calling arange(args, kwargs) (line 3717)
    arange_call_result_264835 = invoke(stypy.reporting.localization.Localization(__file__, 3717, 8), arange_264829, *[int_264830, result_add_264833], **kwargs_264834)
    
    # Assigning a type to the variable 'k' (line 3717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3717, 4), 'k', arange_call_result_264835)
    
    # Assigning a Call to a Name (line 3718):
    
    # Assigning a Call to a Name (line 3718):
    
    # Call to npp_polyval(...): (line 3718)
    # Processing the call arguments (line 3718)
    # Getting the type of 'k' (line 3718)
    k_264837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 20), 'k', False)
    
    # Obtaining an instance of the builtin type 'list' (line 3718)
    list_264838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3718, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3718)
    # Adding element type (line 3718)
    int_264839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3718, 24), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3718, 23), list_264838, int_264839)
    # Adding element type (line 3718)
    # Getting the type of 'a1' (line 3718)
    a1_264840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 27), 'a1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3718, 23), list_264838, a1_264840)
    # Adding element type (line 3718)
    # Getting the type of 'a2' (line 3718)
    a2_264841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 31), 'a2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3718, 23), list_264838, a2_264841)
    
    # Processing the call keyword arguments (line 3718)
    kwargs_264842 = {}
    # Getting the type of 'npp_polyval' (line 3718)
    npp_polyval_264836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 8), 'npp_polyval', False)
    # Calling npp_polyval(args, kwargs) (line 3718)
    npp_polyval_call_result_264843 = invoke(stypy.reporting.localization.Localization(__file__, 3718, 8), npp_polyval_264836, *[k_264837, list_264838], **kwargs_264842)
    
    # Assigning a type to the variable 'x' (line 3718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3718, 4), 'x', npp_polyval_call_result_264843)
    
    # Assigning a Call to a Name (line 3719):
    
    # Assigning a Call to a Name (line 3719):
    
    # Call to npp_polyval(...): (line 3719)
    # Processing the call arguments (line 3719)
    # Getting the type of 'k' (line 3719)
    k_264845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3719, 20), 'k', False)
    
    # Obtaining an instance of the builtin type 'list' (line 3719)
    list_264846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3719, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3719)
    # Adding element type (line 3719)
    # Getting the type of 'b0' (line 3719)
    b0_264847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3719, 24), 'b0', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3719, 23), list_264846, b0_264847)
    # Adding element type (line 3719)
    # Getting the type of 'b1' (line 3719)
    b1_264848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3719, 28), 'b1', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3719, 23), list_264846, b1_264848)
    # Adding element type (line 3719)
    # Getting the type of 'b2' (line 3719)
    b2_264849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3719, 32), 'b2', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3719, 23), list_264846, b2_264849)
    # Adding element type (line 3719)
    # Getting the type of 'b3' (line 3719)
    b3_264850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3719, 36), 'b3', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3719, 23), list_264846, b3_264850)
    
    # Processing the call keyword arguments (line 3719)
    kwargs_264851 = {}
    # Getting the type of 'npp_polyval' (line 3719)
    npp_polyval_264844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3719, 8), 'npp_polyval', False)
    # Calling npp_polyval(args, kwargs) (line 3719)
    npp_polyval_call_result_264852 = invoke(stypy.reporting.localization.Localization(__file__, 3719, 8), npp_polyval_264844, *[k_264845, list_264846], **kwargs_264851)
    
    # Assigning a type to the variable 'y' (line 3719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3719, 4), 'y', npp_polyval_call_result_264852)
    # Getting the type of 'x' (line 3721)
    x_264853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 11), 'x')
    complex_264854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3721, 15), 'complex')
    # Getting the type of 'y' (line 3721)
    y_264855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 18), 'y')
    # Applying the binary operator '*' (line 3721)
    result_mul_264856 = python_operator(stypy.reporting.localization.Localization(__file__, 3721, 15), '*', complex_264854, y_264855)
    
    # Applying the binary operator '+' (line 3721)
    result_add_264857 = python_operator(stypy.reporting.localization.Localization(__file__, 3721, 11), '+', x_264853, result_mul_264856)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3721, 4), 'stypy_return_type', result_add_264857)
    
    # ################# End of '_campos_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_campos_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 3699)
    stypy_return_type_264858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_264858)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_campos_zeros'
    return stypy_return_type_264858

# Assigning a type to the variable '_campos_zeros' (line 3699)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3699, 0), '_campos_zeros', _campos_zeros)

@norecursion
def _aberth(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_264859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3724, 27), 'float')
    int_264860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3724, 42), 'int')
    defaults = [float_264859, int_264860]
    # Create a new context for function '_aberth'
    module_type_store = module_type_store.open_function_context('_aberth', 3724, 0, False)
    
    # Passed parameters checking function
    _aberth.stypy_localization = localization
    _aberth.stypy_type_of_self = None
    _aberth.stypy_type_store = module_type_store
    _aberth.stypy_function_name = '_aberth'
    _aberth.stypy_param_names_list = ['f', 'fp', 'x0', 'tol', 'maxiter']
    _aberth.stypy_varargs_param_name = None
    _aberth.stypy_kwargs_param_name = None
    _aberth.stypy_call_defaults = defaults
    _aberth.stypy_call_varargs = varargs
    _aberth.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_aberth', ['f', 'fp', 'x0', 'tol', 'maxiter'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_aberth', localization, ['f', 'fp', 'x0', 'tol', 'maxiter'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_aberth(...)' code ##################

    str_264861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3733, (-1)), 'str', "\n    Given a function `f`, its first derivative `fp`, and a set of initial\n    guesses `x0`, simultaneously find the roots of the polynomial using the\n    Aberth-Ehrlich method.\n\n    ``len(x0)`` should equal the number of roots of `f`.\n\n    (This is not a complete implementation of Bini's algorithm.)\n    ")
    
    # Assigning a Call to a Name (line 3735):
    
    # Assigning a Call to a Name (line 3735):
    
    # Call to len(...): (line 3735)
    # Processing the call arguments (line 3735)
    # Getting the type of 'x0' (line 3735)
    x0_264863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 12), 'x0', False)
    # Processing the call keyword arguments (line 3735)
    kwargs_264864 = {}
    # Getting the type of 'len' (line 3735)
    len_264862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 8), 'len', False)
    # Calling len(args, kwargs) (line 3735)
    len_call_result_264865 = invoke(stypy.reporting.localization.Localization(__file__, 3735, 8), len_264862, *[x0_264863], **kwargs_264864)
    
    # Assigning a type to the variable 'N' (line 3735)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3735, 4), 'N', len_call_result_264865)
    
    # Assigning a Call to a Name (line 3737):
    
    # Assigning a Call to a Name (line 3737):
    
    # Call to array(...): (line 3737)
    # Processing the call arguments (line 3737)
    # Getting the type of 'x0' (line 3737)
    x0_264867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 14), 'x0', False)
    # Getting the type of 'complex' (line 3737)
    complex_264868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 18), 'complex', False)
    # Processing the call keyword arguments (line 3737)
    kwargs_264869 = {}
    # Getting the type of 'array' (line 3737)
    array_264866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 8), 'array', False)
    # Calling array(args, kwargs) (line 3737)
    array_call_result_264870 = invoke(stypy.reporting.localization.Localization(__file__, 3737, 8), array_264866, *[x0_264867, complex_264868], **kwargs_264869)
    
    # Assigning a type to the variable 'x' (line 3737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3737, 4), 'x', array_call_result_264870)
    
    # Assigning a Call to a Name (line 3738):
    
    # Assigning a Call to a Name (line 3738):
    
    # Call to empty_like(...): (line 3738)
    # Processing the call arguments (line 3738)
    # Getting the type of 'x0' (line 3738)
    x0_264873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3738, 25), 'x0', False)
    # Processing the call keyword arguments (line 3738)
    kwargs_264874 = {}
    # Getting the type of 'np' (line 3738)
    np_264871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3738, 11), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 3738)
    empty_like_264872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3738, 11), np_264871, 'empty_like')
    # Calling empty_like(args, kwargs) (line 3738)
    empty_like_call_result_264875 = invoke(stypy.reporting.localization.Localization(__file__, 3738, 11), empty_like_264872, *[x0_264873], **kwargs_264874)
    
    # Assigning a type to the variable 'beta' (line 3738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3738, 4), 'beta', empty_like_call_result_264875)
    
    
    # Call to range(...): (line 3740)
    # Processing the call arguments (line 3740)
    # Getting the type of 'maxiter' (line 3740)
    maxiter_264877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3740, 27), 'maxiter', False)
    # Processing the call keyword arguments (line 3740)
    kwargs_264878 = {}
    # Getting the type of 'range' (line 3740)
    range_264876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3740, 21), 'range', False)
    # Calling range(args, kwargs) (line 3740)
    range_call_result_264879 = invoke(stypy.reporting.localization.Localization(__file__, 3740, 21), range_264876, *[maxiter_264877], **kwargs_264878)
    
    # Testing the type of a for loop iterable (line 3740)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3740, 4), range_call_result_264879)
    # Getting the type of the for loop variable (line 3740)
    for_loop_var_264880 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3740, 4), range_call_result_264879)
    # Assigning a type to the variable 'iteration' (line 3740)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3740, 4), 'iteration', for_loop_var_264880)
    # SSA begins for a for statement (line 3740)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 3741):
    
    # Assigning a BinOp to a Name (line 3741):
    
    
    # Call to f(...): (line 3741)
    # Processing the call arguments (line 3741)
    # Getting the type of 'x' (line 3741)
    x_264882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 19), 'x', False)
    # Processing the call keyword arguments (line 3741)
    kwargs_264883 = {}
    # Getting the type of 'f' (line 3741)
    f_264881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 17), 'f', False)
    # Calling f(args, kwargs) (line 3741)
    f_call_result_264884 = invoke(stypy.reporting.localization.Localization(__file__, 3741, 17), f_264881, *[x_264882], **kwargs_264883)
    
    # Applying the 'usub' unary operator (line 3741)
    result___neg___264885 = python_operator(stypy.reporting.localization.Localization(__file__, 3741, 16), 'usub', f_call_result_264884)
    
    
    # Call to fp(...): (line 3741)
    # Processing the call arguments (line 3741)
    # Getting the type of 'x' (line 3741)
    x_264887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 27), 'x', False)
    # Processing the call keyword arguments (line 3741)
    kwargs_264888 = {}
    # Getting the type of 'fp' (line 3741)
    fp_264886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 24), 'fp', False)
    # Calling fp(args, kwargs) (line 3741)
    fp_call_result_264889 = invoke(stypy.reporting.localization.Localization(__file__, 3741, 24), fp_264886, *[x_264887], **kwargs_264888)
    
    # Applying the binary operator 'div' (line 3741)
    result_div_264890 = python_operator(stypy.reporting.localization.Localization(__file__, 3741, 16), 'div', result___neg___264885, fp_call_result_264889)
    
    # Assigning a type to the variable 'alpha' (line 3741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3741, 8), 'alpha', result_div_264890)
    
    
    # Call to range(...): (line 3744)
    # Processing the call arguments (line 3744)
    # Getting the type of 'N' (line 3744)
    N_264892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 23), 'N', False)
    # Processing the call keyword arguments (line 3744)
    kwargs_264893 = {}
    # Getting the type of 'range' (line 3744)
    range_264891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 17), 'range', False)
    # Calling range(args, kwargs) (line 3744)
    range_call_result_264894 = invoke(stypy.reporting.localization.Localization(__file__, 3744, 17), range_264891, *[N_264892], **kwargs_264893)
    
    # Testing the type of a for loop iterable (line 3744)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3744, 8), range_call_result_264894)
    # Getting the type of the for loop variable (line 3744)
    for_loop_var_264895 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3744, 8), range_call_result_264894)
    # Assigning a type to the variable 'k' (line 3744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3744, 8), 'k', for_loop_var_264895)
    # SSA begins for a for statement (line 3744)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 3745):
    
    # Assigning a Call to a Subscript (line 3745):
    
    # Call to sum(...): (line 3745)
    # Processing the call arguments (line 3745)
    int_264898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3745, 29), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 3745)
    k_264899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 34), 'k', False)
    # Getting the type of 'x' (line 3745)
    x_264900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 32), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3745)
    getitem___264901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3745, 32), x_264900, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3745)
    subscript_call_result_264902 = invoke(stypy.reporting.localization.Localization(__file__, 3745, 32), getitem___264901, k_264899)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 3745)
    k_264903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 41), 'k', False)
    int_264904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3745, 43), 'int')
    # Applying the binary operator '+' (line 3745)
    result_add_264905 = python_operator(stypy.reporting.localization.Localization(__file__, 3745, 41), '+', k_264903, int_264904)
    
    slice_264906 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3745, 39), result_add_264905, None, None)
    # Getting the type of 'x' (line 3745)
    x_264907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 39), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3745)
    getitem___264908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3745, 39), x_264907, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3745)
    subscript_call_result_264909 = invoke(stypy.reporting.localization.Localization(__file__, 3745, 39), getitem___264908, slice_264906)
    
    # Applying the binary operator '-' (line 3745)
    result_sub_264910 = python_operator(stypy.reporting.localization.Localization(__file__, 3745, 32), '-', subscript_call_result_264902, subscript_call_result_264909)
    
    # Applying the binary operator 'div' (line 3745)
    result_div_264911 = python_operator(stypy.reporting.localization.Localization(__file__, 3745, 29), 'div', int_264898, result_sub_264910)
    
    # Processing the call keyword arguments (line 3745)
    kwargs_264912 = {}
    # Getting the type of 'np' (line 3745)
    np_264896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 22), 'np', False)
    # Obtaining the member 'sum' of a type (line 3745)
    sum_264897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3745, 22), np_264896, 'sum')
    # Calling sum(args, kwargs) (line 3745)
    sum_call_result_264913 = invoke(stypy.reporting.localization.Localization(__file__, 3745, 22), sum_264897, *[result_div_264911], **kwargs_264912)
    
    # Getting the type of 'beta' (line 3745)
    beta_264914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 12), 'beta')
    # Getting the type of 'k' (line 3745)
    k_264915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 17), 'k')
    # Storing an element on a container (line 3745)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3745, 12), beta_264914, (k_264915, sum_call_result_264913))
    
    # Getting the type of 'beta' (line 3746)
    beta_264916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 12), 'beta')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 3746)
    k_264917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 17), 'k')
    # Getting the type of 'beta' (line 3746)
    beta_264918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 12), 'beta')
    # Obtaining the member '__getitem__' of a type (line 3746)
    getitem___264919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3746, 12), beta_264918, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3746)
    subscript_call_result_264920 = invoke(stypy.reporting.localization.Localization(__file__, 3746, 12), getitem___264919, k_264917)
    
    
    # Call to sum(...): (line 3746)
    # Processing the call arguments (line 3746)
    int_264923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3746, 30), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 3746)
    k_264924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 35), 'k', False)
    # Getting the type of 'x' (line 3746)
    x_264925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 33), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3746)
    getitem___264926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3746, 33), x_264925, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3746)
    subscript_call_result_264927 = invoke(stypy.reporting.localization.Localization(__file__, 3746, 33), getitem___264926, k_264924)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 3746)
    k_264928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 43), 'k', False)
    slice_264929 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3746, 40), None, k_264928, None)
    # Getting the type of 'x' (line 3746)
    x_264930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 40), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3746)
    getitem___264931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3746, 40), x_264930, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3746)
    subscript_call_result_264932 = invoke(stypy.reporting.localization.Localization(__file__, 3746, 40), getitem___264931, slice_264929)
    
    # Applying the binary operator '-' (line 3746)
    result_sub_264933 = python_operator(stypy.reporting.localization.Localization(__file__, 3746, 33), '-', subscript_call_result_264927, subscript_call_result_264932)
    
    # Applying the binary operator 'div' (line 3746)
    result_div_264934 = python_operator(stypy.reporting.localization.Localization(__file__, 3746, 30), 'div', int_264923, result_sub_264933)
    
    # Processing the call keyword arguments (line 3746)
    kwargs_264935 = {}
    # Getting the type of 'np' (line 3746)
    np_264921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 23), 'np', False)
    # Obtaining the member 'sum' of a type (line 3746)
    sum_264922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3746, 23), np_264921, 'sum')
    # Calling sum(args, kwargs) (line 3746)
    sum_call_result_264936 = invoke(stypy.reporting.localization.Localization(__file__, 3746, 23), sum_264922, *[result_div_264934], **kwargs_264935)
    
    # Applying the binary operator '+=' (line 3746)
    result_iadd_264937 = python_operator(stypy.reporting.localization.Localization(__file__, 3746, 12), '+=', subscript_call_result_264920, sum_call_result_264936)
    # Getting the type of 'beta' (line 3746)
    beta_264938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 12), 'beta')
    # Getting the type of 'k' (line 3746)
    k_264939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 17), 'k')
    # Storing an element on a container (line 3746)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3746, 12), beta_264938, (k_264939, result_iadd_264937))
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'x' (line 3748)
    x_264940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3748, 8), 'x')
    # Getting the type of 'alpha' (line 3748)
    alpha_264941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3748, 13), 'alpha')
    int_264942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3748, 22), 'int')
    # Getting the type of 'alpha' (line 3748)
    alpha_264943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3748, 26), 'alpha')
    # Getting the type of 'beta' (line 3748)
    beta_264944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3748, 34), 'beta')
    # Applying the binary operator '*' (line 3748)
    result_mul_264945 = python_operator(stypy.reporting.localization.Localization(__file__, 3748, 26), '*', alpha_264943, beta_264944)
    
    # Applying the binary operator '+' (line 3748)
    result_add_264946 = python_operator(stypy.reporting.localization.Localization(__file__, 3748, 22), '+', int_264942, result_mul_264945)
    
    # Applying the binary operator 'div' (line 3748)
    result_div_264947 = python_operator(stypy.reporting.localization.Localization(__file__, 3748, 13), 'div', alpha_264941, result_add_264946)
    
    # Applying the binary operator '+=' (line 3748)
    result_iadd_264948 = python_operator(stypy.reporting.localization.Localization(__file__, 3748, 8), '+=', x_264940, result_div_264947)
    # Assigning a type to the variable 'x' (line 3748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3748, 8), 'x', result_iadd_264948)
    
    
    
    
    # Call to all(...): (line 3750)
    # Processing the call arguments (line 3750)
    
    # Call to isfinite(...): (line 3750)
    # Processing the call arguments (line 3750)
    # Getting the type of 'x' (line 3750)
    x_264952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3750, 31), 'x', False)
    # Processing the call keyword arguments (line 3750)
    kwargs_264953 = {}
    # Getting the type of 'np' (line 3750)
    np_264950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3750, 19), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 3750)
    isfinite_264951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3750, 19), np_264950, 'isfinite')
    # Calling isfinite(args, kwargs) (line 3750)
    isfinite_call_result_264954 = invoke(stypy.reporting.localization.Localization(__file__, 3750, 19), isfinite_264951, *[x_264952], **kwargs_264953)
    
    # Processing the call keyword arguments (line 3750)
    kwargs_264955 = {}
    # Getting the type of 'all' (line 3750)
    all_264949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3750, 15), 'all', False)
    # Calling all(args, kwargs) (line 3750)
    all_call_result_264956 = invoke(stypy.reporting.localization.Localization(__file__, 3750, 15), all_264949, *[isfinite_call_result_264954], **kwargs_264955)
    
    # Applying the 'not' unary operator (line 3750)
    result_not__264957 = python_operator(stypy.reporting.localization.Localization(__file__, 3750, 11), 'not', all_call_result_264956)
    
    # Testing the type of an if condition (line 3750)
    if_condition_264958 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3750, 8), result_not__264957)
    # Assigning a type to the variable 'if_condition_264958' (line 3750)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3750, 8), 'if_condition_264958', if_condition_264958)
    # SSA begins for if statement (line 3750)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to RuntimeError(...): (line 3751)
    # Processing the call arguments (line 3751)
    str_264960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3751, 31), 'str', 'Root-finding calculation failed')
    # Processing the call keyword arguments (line 3751)
    kwargs_264961 = {}
    # Getting the type of 'RuntimeError' (line 3751)
    RuntimeError_264959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3751, 18), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 3751)
    RuntimeError_call_result_264962 = invoke(stypy.reporting.localization.Localization(__file__, 3751, 18), RuntimeError_264959, *[str_264960], **kwargs_264961)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3751, 12), RuntimeError_call_result_264962, 'raise parameter', BaseException)
    # SSA join for if statement (line 3750)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to all(...): (line 3755)
    # Processing the call arguments (line 3755)
    
    
    # Call to abs(...): (line 3755)
    # Processing the call arguments (line 3755)
    # Getting the type of 'alpha' (line 3755)
    alpha_264965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 19), 'alpha', False)
    # Processing the call keyword arguments (line 3755)
    kwargs_264966 = {}
    # Getting the type of 'abs' (line 3755)
    abs_264964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 15), 'abs', False)
    # Calling abs(args, kwargs) (line 3755)
    abs_call_result_264967 = invoke(stypy.reporting.localization.Localization(__file__, 3755, 15), abs_264964, *[alpha_264965], **kwargs_264966)
    
    # Getting the type of 'tol' (line 3755)
    tol_264968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 29), 'tol', False)
    # Applying the binary operator '<=' (line 3755)
    result_le_264969 = python_operator(stypy.reporting.localization.Localization(__file__, 3755, 15), '<=', abs_call_result_264967, tol_264968)
    
    # Processing the call keyword arguments (line 3755)
    kwargs_264970 = {}
    # Getting the type of 'all' (line 3755)
    all_264963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 11), 'all', False)
    # Calling all(args, kwargs) (line 3755)
    all_call_result_264971 = invoke(stypy.reporting.localization.Localization(__file__, 3755, 11), all_264963, *[result_le_264969], **kwargs_264970)
    
    # Testing the type of an if condition (line 3755)
    if_condition_264972 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3755, 8), all_call_result_264971)
    # Assigning a type to the variable 'if_condition_264972' (line 3755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3755, 8), 'if_condition_264972', if_condition_264972)
    # SSA begins for if statement (line 3755)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 3755)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of a for statement (line 3740)
    module_type_store.open_ssa_branch('for loop else')
    
    # Call to Exception(...): (line 3758)
    # Processing the call arguments (line 3758)
    str_264974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3758, 24), 'str', 'Zeros failed to converge')
    # Processing the call keyword arguments (line 3758)
    kwargs_264975 = {}
    # Getting the type of 'Exception' (line 3758)
    Exception_264973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3758, 14), 'Exception', False)
    # Calling Exception(args, kwargs) (line 3758)
    Exception_call_result_264976 = invoke(stypy.reporting.localization.Localization(__file__, 3758, 14), Exception_264973, *[str_264974], **kwargs_264975)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3758, 8), Exception_call_result_264976, 'raise parameter', BaseException)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'x' (line 3760)
    x_264977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3760, 11), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 3760)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3760, 4), 'stypy_return_type', x_264977)
    
    # ################# End of '_aberth(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_aberth' in the type store
    # Getting the type of 'stypy_return_type' (line 3724)
    stypy_return_type_264978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3724, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_264978)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_aberth'
    return stypy_return_type_264978

# Assigning a type to the variable '_aberth' (line 3724)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3724, 0), '_aberth', _aberth)

@norecursion
def _bessel_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_bessel_zeros'
    module_type_store = module_type_store.open_function_context('_bessel_zeros', 3763, 0, False)
    
    # Passed parameters checking function
    _bessel_zeros.stypy_localization = localization
    _bessel_zeros.stypy_type_of_self = None
    _bessel_zeros.stypy_type_store = module_type_store
    _bessel_zeros.stypy_function_name = '_bessel_zeros'
    _bessel_zeros.stypy_param_names_list = ['N']
    _bessel_zeros.stypy_varargs_param_name = None
    _bessel_zeros.stypy_kwargs_param_name = None
    _bessel_zeros.stypy_call_defaults = defaults
    _bessel_zeros.stypy_call_varargs = varargs
    _bessel_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_bessel_zeros', ['N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_bessel_zeros', localization, ['N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_bessel_zeros(...)' code ##################

    str_264979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3767, (-1)), 'str', '\n    Find zeros of ordinary Bessel polynomial of order `N`, by root-finding of\n    modified Bessel function of the second kind\n    ')
    
    
    # Getting the type of 'N' (line 3768)
    N_264980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3768, 7), 'N')
    int_264981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3768, 12), 'int')
    # Applying the binary operator '==' (line 3768)
    result_eq_264982 = python_operator(stypy.reporting.localization.Localization(__file__, 3768, 7), '==', N_264980, int_264981)
    
    # Testing the type of an if condition (line 3768)
    if_condition_264983 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3768, 4), result_eq_264982)
    # Assigning a type to the variable 'if_condition_264983' (line 3768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3768, 4), 'if_condition_264983', if_condition_264983)
    # SSA begins for if statement (line 3768)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to asarray(...): (line 3769)
    # Processing the call arguments (line 3769)
    
    # Obtaining an instance of the builtin type 'list' (line 3769)
    list_264985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3769, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3769)
    
    # Processing the call keyword arguments (line 3769)
    kwargs_264986 = {}
    # Getting the type of 'asarray' (line 3769)
    asarray_264984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3769, 15), 'asarray', False)
    # Calling asarray(args, kwargs) (line 3769)
    asarray_call_result_264987 = invoke(stypy.reporting.localization.Localization(__file__, 3769, 15), asarray_264984, *[list_264985], **kwargs_264986)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3769, 8), 'stypy_return_type', asarray_call_result_264987)
    # SSA join for if statement (line 3768)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3772):
    
    # Assigning a Call to a Name (line 3772):
    
    # Call to _campos_zeros(...): (line 3772)
    # Processing the call arguments (line 3772)
    # Getting the type of 'N' (line 3772)
    N_264989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3772, 23), 'N', False)
    # Processing the call keyword arguments (line 3772)
    kwargs_264990 = {}
    # Getting the type of '_campos_zeros' (line 3772)
    _campos_zeros_264988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3772, 9), '_campos_zeros', False)
    # Calling _campos_zeros(args, kwargs) (line 3772)
    _campos_zeros_call_result_264991 = invoke(stypy.reporting.localization.Localization(__file__, 3772, 9), _campos_zeros_264988, *[N_264989], **kwargs_264990)
    
    # Assigning a type to the variable 'x0' (line 3772)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3772, 4), 'x0', _campos_zeros_call_result_264991)

    @norecursion
    def f(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'f'
        module_type_store = module_type_store.open_function_context('f', 3776, 4, False)
        
        # Passed parameters checking function
        f.stypy_localization = localization
        f.stypy_type_of_self = None
        f.stypy_type_store = module_type_store
        f.stypy_function_name = 'f'
        f.stypy_param_names_list = ['x']
        f.stypy_varargs_param_name = None
        f.stypy_kwargs_param_name = None
        f.stypy_call_defaults = defaults
        f.stypy_call_varargs = varargs
        f.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'f', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'f', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'f(...)' code ##################

        
        # Call to kve(...): (line 3777)
        # Processing the call arguments (line 3777)
        # Getting the type of 'N' (line 3777)
        N_264994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3777, 27), 'N', False)
        float_264995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3777, 29), 'float')
        # Applying the binary operator '+' (line 3777)
        result_add_264996 = python_operator(stypy.reporting.localization.Localization(__file__, 3777, 27), '+', N_264994, float_264995)
        
        int_264997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3777, 34), 'int')
        # Getting the type of 'x' (line 3777)
        x_264998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3777, 36), 'x', False)
        # Applying the binary operator 'div' (line 3777)
        result_div_264999 = python_operator(stypy.reporting.localization.Localization(__file__, 3777, 34), 'div', int_264997, x_264998)
        
        # Processing the call keyword arguments (line 3777)
        kwargs_265000 = {}
        # Getting the type of 'special' (line 3777)
        special_264992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3777, 15), 'special', False)
        # Obtaining the member 'kve' of a type (line 3777)
        kve_264993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3777, 15), special_264992, 'kve')
        # Calling kve(args, kwargs) (line 3777)
        kve_call_result_265001 = invoke(stypy.reporting.localization.Localization(__file__, 3777, 15), kve_264993, *[result_add_264996, result_div_264999], **kwargs_265000)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3777, 8), 'stypy_return_type', kve_call_result_265001)
        
        # ################# End of 'f(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'f' in the type store
        # Getting the type of 'stypy_return_type' (line 3776)
        stypy_return_type_265002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3776, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265002)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'f'
        return stypy_return_type_265002

    # Assigning a type to the variable 'f' (line 3776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3776, 4), 'f', f)

    @norecursion
    def fp(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'fp'
        module_type_store = module_type_store.open_function_context('fp', 3780, 4, False)
        
        # Passed parameters checking function
        fp.stypy_localization = localization
        fp.stypy_type_of_self = None
        fp.stypy_type_store = module_type_store
        fp.stypy_function_name = 'fp'
        fp.stypy_param_names_list = ['x']
        fp.stypy_varargs_param_name = None
        fp.stypy_kwargs_param_name = None
        fp.stypy_call_defaults = defaults
        fp.stypy_call_varargs = varargs
        fp.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'fp', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'fp', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'fp(...)' code ##################

        
        # Call to kve(...): (line 3781)
        # Processing the call arguments (line 3781)
        # Getting the type of 'N' (line 3781)
        N_265005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 28), 'N', False)
        float_265006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3781, 30), 'float')
        # Applying the binary operator '-' (line 3781)
        result_sub_265007 = python_operator(stypy.reporting.localization.Localization(__file__, 3781, 28), '-', N_265005, float_265006)
        
        int_265008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3781, 35), 'int')
        # Getting the type of 'x' (line 3781)
        x_265009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 37), 'x', False)
        # Applying the binary operator 'div' (line 3781)
        result_div_265010 = python_operator(stypy.reporting.localization.Localization(__file__, 3781, 35), 'div', int_265008, x_265009)
        
        # Processing the call keyword arguments (line 3781)
        kwargs_265011 = {}
        # Getting the type of 'special' (line 3781)
        special_265003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 16), 'special', False)
        # Obtaining the member 'kve' of a type (line 3781)
        kve_265004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3781, 16), special_265003, 'kve')
        # Calling kve(args, kwargs) (line 3781)
        kve_call_result_265012 = invoke(stypy.reporting.localization.Localization(__file__, 3781, 16), kve_265004, *[result_sub_265007, result_div_265010], **kwargs_265011)
        
        int_265013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3781, 41), 'int')
        # Getting the type of 'x' (line 3781)
        x_265014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 43), 'x')
        int_265015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3781, 46), 'int')
        # Applying the binary operator '**' (line 3781)
        result_pow_265016 = python_operator(stypy.reporting.localization.Localization(__file__, 3781, 43), '**', x_265014, int_265015)
        
        # Applying the binary operator '*' (line 3781)
        result_mul_265017 = python_operator(stypy.reporting.localization.Localization(__file__, 3781, 41), '*', int_265013, result_pow_265016)
        
        # Applying the binary operator 'div' (line 3781)
        result_div_265018 = python_operator(stypy.reporting.localization.Localization(__file__, 3781, 16), 'div', kve_call_result_265012, result_mul_265017)
        
        
        # Call to kve(...): (line 3782)
        # Processing the call arguments (line 3782)
        # Getting the type of 'N' (line 3782)
        N_265021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 28), 'N', False)
        float_265022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3782, 30), 'float')
        # Applying the binary operator '+' (line 3782)
        result_add_265023 = python_operator(stypy.reporting.localization.Localization(__file__, 3782, 28), '+', N_265021, float_265022)
        
        int_265024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3782, 35), 'int')
        # Getting the type of 'x' (line 3782)
        x_265025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 37), 'x', False)
        # Applying the binary operator 'div' (line 3782)
        result_div_265026 = python_operator(stypy.reporting.localization.Localization(__file__, 3782, 35), 'div', int_265024, x_265025)
        
        # Processing the call keyword arguments (line 3782)
        kwargs_265027 = {}
        # Getting the type of 'special' (line 3782)
        special_265019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 16), 'special', False)
        # Obtaining the member 'kve' of a type (line 3782)
        kve_265020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3782, 16), special_265019, 'kve')
        # Calling kve(args, kwargs) (line 3782)
        kve_call_result_265028 = invoke(stypy.reporting.localization.Localization(__file__, 3782, 16), kve_265020, *[result_add_265023, result_div_265026], **kwargs_265027)
        
        # Getting the type of 'x' (line 3782)
        x_265029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 41), 'x')
        int_265030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3782, 44), 'int')
        # Applying the binary operator '**' (line 3782)
        result_pow_265031 = python_operator(stypy.reporting.localization.Localization(__file__, 3782, 41), '**', x_265029, int_265030)
        
        # Applying the binary operator 'div' (line 3782)
        result_div_265032 = python_operator(stypy.reporting.localization.Localization(__file__, 3782, 16), 'div', kve_call_result_265028, result_pow_265031)
        
        # Applying the binary operator '-' (line 3781)
        result_sub_265033 = python_operator(stypy.reporting.localization.Localization(__file__, 3781, 16), '-', result_div_265018, result_div_265032)
        
        
        # Call to kve(...): (line 3783)
        # Processing the call arguments (line 3783)
        # Getting the type of 'N' (line 3783)
        N_265036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 28), 'N', False)
        float_265037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3783, 30), 'float')
        # Applying the binary operator '+' (line 3783)
        result_add_265038 = python_operator(stypy.reporting.localization.Localization(__file__, 3783, 28), '+', N_265036, float_265037)
        
        int_265039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3783, 35), 'int')
        # Getting the type of 'x' (line 3783)
        x_265040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 37), 'x', False)
        # Applying the binary operator 'div' (line 3783)
        result_div_265041 = python_operator(stypy.reporting.localization.Localization(__file__, 3783, 35), 'div', int_265039, x_265040)
        
        # Processing the call keyword arguments (line 3783)
        kwargs_265042 = {}
        # Getting the type of 'special' (line 3783)
        special_265034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 16), 'special', False)
        # Obtaining the member 'kve' of a type (line 3783)
        kve_265035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3783, 16), special_265034, 'kve')
        # Calling kve(args, kwargs) (line 3783)
        kve_call_result_265043 = invoke(stypy.reporting.localization.Localization(__file__, 3783, 16), kve_265035, *[result_add_265038, result_div_265041], **kwargs_265042)
        
        int_265044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3783, 41), 'int')
        # Getting the type of 'x' (line 3783)
        x_265045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3783, 43), 'x')
        int_265046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3783, 46), 'int')
        # Applying the binary operator '**' (line 3783)
        result_pow_265047 = python_operator(stypy.reporting.localization.Localization(__file__, 3783, 43), '**', x_265045, int_265046)
        
        # Applying the binary operator '*' (line 3783)
        result_mul_265048 = python_operator(stypy.reporting.localization.Localization(__file__, 3783, 41), '*', int_265044, result_pow_265047)
        
        # Applying the binary operator 'div' (line 3783)
        result_div_265049 = python_operator(stypy.reporting.localization.Localization(__file__, 3783, 16), 'div', kve_call_result_265043, result_mul_265048)
        
        # Applying the binary operator '+' (line 3782)
        result_add_265050 = python_operator(stypy.reporting.localization.Localization(__file__, 3782, 47), '+', result_sub_265033, result_div_265049)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3781, 8), 'stypy_return_type', result_add_265050)
        
        # ################# End of 'fp(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'fp' in the type store
        # Getting the type of 'stypy_return_type' (line 3780)
        stypy_return_type_265051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3780, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265051)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'fp'
        return stypy_return_type_265051

    # Assigning a type to the variable 'fp' (line 3780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3780, 4), 'fp', fp)
    
    # Assigning a Call to a Name (line 3786):
    
    # Assigning a Call to a Name (line 3786):
    
    # Call to _aberth(...): (line 3786)
    # Processing the call arguments (line 3786)
    # Getting the type of 'f' (line 3786)
    f_265053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3786, 16), 'f', False)
    # Getting the type of 'fp' (line 3786)
    fp_265054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3786, 19), 'fp', False)
    # Getting the type of 'x0' (line 3786)
    x0_265055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3786, 23), 'x0', False)
    # Processing the call keyword arguments (line 3786)
    kwargs_265056 = {}
    # Getting the type of '_aberth' (line 3786)
    _aberth_265052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3786, 8), '_aberth', False)
    # Calling _aberth(args, kwargs) (line 3786)
    _aberth_call_result_265057 = invoke(stypy.reporting.localization.Localization(__file__, 3786, 8), _aberth_265052, *[f_265053, fp_265054, x0_265055], **kwargs_265056)
    
    # Assigning a type to the variable 'x' (line 3786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3786, 4), 'x', _aberth_call_result_265057)
    
    
    # Call to range(...): (line 3789)
    # Processing the call arguments (line 3789)
    
    # Call to len(...): (line 3789)
    # Processing the call arguments (line 3789)
    # Getting the type of 'x' (line 3789)
    x_265060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 23), 'x', False)
    # Processing the call keyword arguments (line 3789)
    kwargs_265061 = {}
    # Getting the type of 'len' (line 3789)
    len_265059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 19), 'len', False)
    # Calling len(args, kwargs) (line 3789)
    len_call_result_265062 = invoke(stypy.reporting.localization.Localization(__file__, 3789, 19), len_265059, *[x_265060], **kwargs_265061)
    
    # Processing the call keyword arguments (line 3789)
    kwargs_265063 = {}
    # Getting the type of 'range' (line 3789)
    range_265058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 13), 'range', False)
    # Calling range(args, kwargs) (line 3789)
    range_call_result_265064 = invoke(stypy.reporting.localization.Localization(__file__, 3789, 13), range_265058, *[len_call_result_265062], **kwargs_265063)
    
    # Testing the type of a for loop iterable (line 3789)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3789, 4), range_call_result_265064)
    # Getting the type of the for loop variable (line 3789)
    for_loop_var_265065 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3789, 4), range_call_result_265064)
    # Assigning a type to the variable 'i' (line 3789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3789, 4), 'i', for_loop_var_265065)
    # SSA begins for a for statement (line 3789)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 3790):
    
    # Assigning a Call to a Subscript (line 3790):
    
    # Call to newton(...): (line 3790)
    # Processing the call arguments (line 3790)
    # Getting the type of 'f' (line 3790)
    f_265068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 31), 'f', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3790)
    i_265069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 36), 'i', False)
    # Getting the type of 'x' (line 3790)
    x_265070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 34), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3790)
    getitem___265071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3790, 34), x_265070, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3790)
    subscript_call_result_265072 = invoke(stypy.reporting.localization.Localization(__file__, 3790, 34), getitem___265071, i_265069)
    
    # Getting the type of 'fp' (line 3790)
    fp_265073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 40), 'fp', False)
    # Processing the call keyword arguments (line 3790)
    float_265074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3790, 48), 'float')
    keyword_265075 = float_265074
    kwargs_265076 = {'tol': keyword_265075}
    # Getting the type of 'optimize' (line 3790)
    optimize_265066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 15), 'optimize', False)
    # Obtaining the member 'newton' of a type (line 3790)
    newton_265067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3790, 15), optimize_265066, 'newton')
    # Calling newton(args, kwargs) (line 3790)
    newton_call_result_265077 = invoke(stypy.reporting.localization.Localization(__file__, 3790, 15), newton_265067, *[f_265068, subscript_call_result_265072, fp_265073], **kwargs_265076)
    
    # Getting the type of 'x' (line 3790)
    x_265078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 8), 'x')
    # Getting the type of 'i' (line 3790)
    i_265079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 10), 'i')
    # Storing an element on a container (line 3790)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3790, 8), x_265078, (i_265079, newton_call_result_265077))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3793):
    
    # Assigning a Call to a Name (line 3793):
    
    # Call to mean(...): (line 3793)
    # Processing the call arguments (line 3793)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3793)
    tuple_265082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3793, 17), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3793)
    # Adding element type (line 3793)
    # Getting the type of 'x' (line 3793)
    x_265083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3793, 17), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3793, 17), tuple_265082, x_265083)
    # Adding element type (line 3793)
    
    # Call to conj(...): (line 3793)
    # Processing the call keyword arguments (line 3793)
    kwargs_265090 = {}
    
    # Obtaining the type of the subscript
    int_265084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3793, 24), 'int')
    slice_265085 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3793, 20), None, None, int_265084)
    # Getting the type of 'x' (line 3793)
    x_265086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3793, 20), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3793)
    getitem___265087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3793, 20), x_265086, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3793)
    subscript_call_result_265088 = invoke(stypy.reporting.localization.Localization(__file__, 3793, 20), getitem___265087, slice_265085)
    
    # Obtaining the member 'conj' of a type (line 3793)
    conj_265089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3793, 20), subscript_call_result_265088, 'conj')
    # Calling conj(args, kwargs) (line 3793)
    conj_call_result_265091 = invoke(stypy.reporting.localization.Localization(__file__, 3793, 20), conj_265089, *[], **kwargs_265090)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3793, 17), tuple_265082, conj_call_result_265091)
    
    int_265092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3793, 37), 'int')
    # Processing the call keyword arguments (line 3793)
    kwargs_265093 = {}
    # Getting the type of 'np' (line 3793)
    np_265080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3793, 8), 'np', False)
    # Obtaining the member 'mean' of a type (line 3793)
    mean_265081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3793, 8), np_265080, 'mean')
    # Calling mean(args, kwargs) (line 3793)
    mean_call_result_265094 = invoke(stypy.reporting.localization.Localization(__file__, 3793, 8), mean_265081, *[tuple_265082, int_265092], **kwargs_265093)
    
    # Assigning a type to the variable 'x' (line 3793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3793, 4), 'x', mean_call_result_265094)
    
    
    
    # Call to abs(...): (line 3796)
    # Processing the call arguments (line 3796)
    
    # Call to sum(...): (line 3796)
    # Processing the call arguments (line 3796)
    # Getting the type of 'x' (line 3796)
    x_265098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3796, 18), 'x', False)
    # Processing the call keyword arguments (line 3796)
    kwargs_265099 = {}
    # Getting the type of 'np' (line 3796)
    np_265096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3796, 11), 'np', False)
    # Obtaining the member 'sum' of a type (line 3796)
    sum_265097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3796, 11), np_265096, 'sum')
    # Calling sum(args, kwargs) (line 3796)
    sum_call_result_265100 = invoke(stypy.reporting.localization.Localization(__file__, 3796, 11), sum_265097, *[x_265098], **kwargs_265099)
    
    int_265101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3796, 23), 'int')
    # Applying the binary operator '+' (line 3796)
    result_add_265102 = python_operator(stypy.reporting.localization.Localization(__file__, 3796, 11), '+', sum_call_result_265100, int_265101)
    
    # Processing the call keyword arguments (line 3796)
    kwargs_265103 = {}
    # Getting the type of 'abs' (line 3796)
    abs_265095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3796, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 3796)
    abs_call_result_265104 = invoke(stypy.reporting.localization.Localization(__file__, 3796, 7), abs_265095, *[result_add_265102], **kwargs_265103)
    
    float_265105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3796, 28), 'float')
    # Applying the binary operator '>' (line 3796)
    result_gt_265106 = python_operator(stypy.reporting.localization.Localization(__file__, 3796, 7), '>', abs_call_result_265104, float_265105)
    
    # Testing the type of an if condition (line 3796)
    if_condition_265107 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3796, 4), result_gt_265106)
    # Assigning a type to the variable 'if_condition_265107' (line 3796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3796, 4), 'if_condition_265107', if_condition_265107)
    # SSA begins for if statement (line 3796)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to RuntimeError(...): (line 3797)
    # Processing the call arguments (line 3797)
    str_265109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3797, 27), 'str', 'Generated zeros are inaccurate')
    # Processing the call keyword arguments (line 3797)
    kwargs_265110 = {}
    # Getting the type of 'RuntimeError' (line 3797)
    RuntimeError_265108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3797, 14), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 3797)
    RuntimeError_call_result_265111 = invoke(stypy.reporting.localization.Localization(__file__, 3797, 14), RuntimeError_265108, *[str_265109], **kwargs_265110)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3797, 8), RuntimeError_call_result_265111, 'raise parameter', BaseException)
    # SSA join for if statement (line 3796)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'x' (line 3799)
    x_265112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3799, 11), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 3799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3799, 4), 'stypy_return_type', x_265112)
    
    # ################# End of '_bessel_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_bessel_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 3763)
    stypy_return_type_265113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3763, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_265113)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_bessel_zeros'
    return stypy_return_type_265113

# Assigning a type to the variable '_bessel_zeros' (line 3763)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3763, 0), '_bessel_zeros', _bessel_zeros)

@norecursion
def _norm_factor(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_norm_factor'
    module_type_store = module_type_store.open_function_context('_norm_factor', 3802, 0, False)
    
    # Passed parameters checking function
    _norm_factor.stypy_localization = localization
    _norm_factor.stypy_type_of_self = None
    _norm_factor.stypy_type_store = module_type_store
    _norm_factor.stypy_function_name = '_norm_factor'
    _norm_factor.stypy_param_names_list = ['p', 'k']
    _norm_factor.stypy_varargs_param_name = None
    _norm_factor.stypy_kwargs_param_name = None
    _norm_factor.stypy_call_defaults = defaults
    _norm_factor.stypy_call_varargs = varargs
    _norm_factor.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_norm_factor', ['p', 'k'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_norm_factor', localization, ['p', 'k'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_norm_factor(...)' code ##################

    str_265114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3812, (-1)), 'str', '\n    Numerically find frequency shift to apply to delay-normalized filter such\n    that -3 dB point is at 1 rad/sec.\n\n    `p` is an array_like of polynomial poles\n    `k` is a float gain\n\n    First 10 values are listed in "Bessel Scale Factors" table,\n    "Bessel Filters Polynomials, Poles and Circuit Elements 2003, C. Bond."\n    ')
    
    # Assigning a Call to a Name (line 3813):
    
    # Assigning a Call to a Name (line 3813):
    
    # Call to asarray(...): (line 3813)
    # Processing the call arguments (line 3813)
    # Getting the type of 'p' (line 3813)
    p_265116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3813, 16), 'p', False)
    # Processing the call keyword arguments (line 3813)
    # Getting the type of 'complex' (line 3813)
    complex_265117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3813, 25), 'complex', False)
    keyword_265118 = complex_265117
    kwargs_265119 = {'dtype': keyword_265118}
    # Getting the type of 'asarray' (line 3813)
    asarray_265115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3813, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 3813)
    asarray_call_result_265120 = invoke(stypy.reporting.localization.Localization(__file__, 3813, 8), asarray_265115, *[p_265116], **kwargs_265119)
    
    # Assigning a type to the variable 'p' (line 3813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3813, 4), 'p', asarray_call_result_265120)

    @norecursion
    def G(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'G'
        module_type_store = module_type_store.open_function_context('G', 3815, 4, False)
        
        # Passed parameters checking function
        G.stypy_localization = localization
        G.stypy_type_of_self = None
        G.stypy_type_store = module_type_store
        G.stypy_function_name = 'G'
        G.stypy_param_names_list = ['w']
        G.stypy_varargs_param_name = None
        G.stypy_kwargs_param_name = None
        G.stypy_call_defaults = defaults
        G.stypy_call_varargs = varargs
        G.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'G', ['w'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'G', localization, ['w'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'G(...)' code ##################

        str_265121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3818, (-1)), 'str', '\n        Gain of filter\n        ')
        
        # Call to abs(...): (line 3819)
        # Processing the call arguments (line 3819)
        # Getting the type of 'k' (line 3819)
        k_265123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3819, 19), 'k', False)
        
        # Call to prod(...): (line 3819)
        # Processing the call arguments (line 3819)
        complex_265125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3819, 28), 'complex')
        # Getting the type of 'w' (line 3819)
        w_265126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3819, 31), 'w', False)
        # Applying the binary operator '*' (line 3819)
        result_mul_265127 = python_operator(stypy.reporting.localization.Localization(__file__, 3819, 28), '*', complex_265125, w_265126)
        
        # Getting the type of 'p' (line 3819)
        p_265128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3819, 35), 'p', False)
        # Applying the binary operator '-' (line 3819)
        result_sub_265129 = python_operator(stypy.reporting.localization.Localization(__file__, 3819, 28), '-', result_mul_265127, p_265128)
        
        # Processing the call keyword arguments (line 3819)
        kwargs_265130 = {}
        # Getting the type of 'prod' (line 3819)
        prod_265124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3819, 23), 'prod', False)
        # Calling prod(args, kwargs) (line 3819)
        prod_call_result_265131 = invoke(stypy.reporting.localization.Localization(__file__, 3819, 23), prod_265124, *[result_sub_265129], **kwargs_265130)
        
        # Applying the binary operator 'div' (line 3819)
        result_div_265132 = python_operator(stypy.reporting.localization.Localization(__file__, 3819, 19), 'div', k_265123, prod_call_result_265131)
        
        # Processing the call keyword arguments (line 3819)
        kwargs_265133 = {}
        # Getting the type of 'abs' (line 3819)
        abs_265122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3819, 15), 'abs', False)
        # Calling abs(args, kwargs) (line 3819)
        abs_call_result_265134 = invoke(stypy.reporting.localization.Localization(__file__, 3819, 15), abs_265122, *[result_div_265132], **kwargs_265133)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3819, 8), 'stypy_return_type', abs_call_result_265134)
        
        # ################# End of 'G(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'G' in the type store
        # Getting the type of 'stypy_return_type' (line 3815)
        stypy_return_type_265135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3815, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265135)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'G'
        return stypy_return_type_265135

    # Assigning a type to the variable 'G' (line 3815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3815, 4), 'G', G)

    @norecursion
    def cutoff(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cutoff'
        module_type_store = module_type_store.open_function_context('cutoff', 3821, 4, False)
        
        # Passed parameters checking function
        cutoff.stypy_localization = localization
        cutoff.stypy_type_of_self = None
        cutoff.stypy_type_store = module_type_store
        cutoff.stypy_function_name = 'cutoff'
        cutoff.stypy_param_names_list = ['w']
        cutoff.stypy_varargs_param_name = None
        cutoff.stypy_kwargs_param_name = None
        cutoff.stypy_call_defaults = defaults
        cutoff.stypy_call_varargs = varargs
        cutoff.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'cutoff', ['w'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cutoff', localization, ['w'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cutoff(...)' code ##################

        str_265136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3824, (-1)), 'str', '\n        When gain = -3 dB, return 0\n        ')
        
        # Call to G(...): (line 3825)
        # Processing the call arguments (line 3825)
        # Getting the type of 'w' (line 3825)
        w_265138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3825, 17), 'w', False)
        # Processing the call keyword arguments (line 3825)
        kwargs_265139 = {}
        # Getting the type of 'G' (line 3825)
        G_265137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3825, 15), 'G', False)
        # Calling G(args, kwargs) (line 3825)
        G_call_result_265140 = invoke(stypy.reporting.localization.Localization(__file__, 3825, 15), G_265137, *[w_265138], **kwargs_265139)
        
        int_265141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3825, 22), 'int')
        
        # Call to sqrt(...): (line 3825)
        # Processing the call arguments (line 3825)
        int_265144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3825, 32), 'int')
        # Processing the call keyword arguments (line 3825)
        kwargs_265145 = {}
        # Getting the type of 'np' (line 3825)
        np_265142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3825, 24), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 3825)
        sqrt_265143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3825, 24), np_265142, 'sqrt')
        # Calling sqrt(args, kwargs) (line 3825)
        sqrt_call_result_265146 = invoke(stypy.reporting.localization.Localization(__file__, 3825, 24), sqrt_265143, *[int_265144], **kwargs_265145)
        
        # Applying the binary operator 'div' (line 3825)
        result_div_265147 = python_operator(stypy.reporting.localization.Localization(__file__, 3825, 22), 'div', int_265141, sqrt_call_result_265146)
        
        # Applying the binary operator '-' (line 3825)
        result_sub_265148 = python_operator(stypy.reporting.localization.Localization(__file__, 3825, 15), '-', G_call_result_265140, result_div_265147)
        
        # Assigning a type to the variable 'stypy_return_type' (line 3825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3825, 8), 'stypy_return_type', result_sub_265148)
        
        # ################# End of 'cutoff(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cutoff' in the type store
        # Getting the type of 'stypy_return_type' (line 3821)
        stypy_return_type_265149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_265149)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cutoff'
        return stypy_return_type_265149

    # Assigning a type to the variable 'cutoff' (line 3821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3821, 4), 'cutoff', cutoff)
    
    # Call to newton(...): (line 3827)
    # Processing the call arguments (line 3827)
    # Getting the type of 'cutoff' (line 3827)
    cutoff_265152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3827, 27), 'cutoff', False)
    float_265153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3827, 35), 'float')
    # Processing the call keyword arguments (line 3827)
    kwargs_265154 = {}
    # Getting the type of 'optimize' (line 3827)
    optimize_265150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3827, 11), 'optimize', False)
    # Obtaining the member 'newton' of a type (line 3827)
    newton_265151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3827, 11), optimize_265150, 'newton')
    # Calling newton(args, kwargs) (line 3827)
    newton_call_result_265155 = invoke(stypy.reporting.localization.Localization(__file__, 3827, 11), newton_265151, *[cutoff_265152, float_265153], **kwargs_265154)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3827, 4), 'stypy_return_type', newton_call_result_265155)
    
    # ################# End of '_norm_factor(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_norm_factor' in the type store
    # Getting the type of 'stypy_return_type' (line 3802)
    stypy_return_type_265156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3802, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_265156)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_norm_factor'
    return stypy_return_type_265156

# Assigning a type to the variable '_norm_factor' (line 3802)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3802, 0), '_norm_factor', _norm_factor)

@norecursion
def besselap(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_265157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3830, 21), 'str', 'phase')
    defaults = [str_265157]
    # Create a new context for function 'besselap'
    module_type_store = module_type_store.open_function_context('besselap', 3830, 0, False)
    
    # Passed parameters checking function
    besselap.stypy_localization = localization
    besselap.stypy_type_of_self = None
    besselap.stypy_type_store = module_type_store
    besselap.stypy_function_name = 'besselap'
    besselap.stypy_param_names_list = ['N', 'norm']
    besselap.stypy_varargs_param_name = None
    besselap.stypy_kwargs_param_name = None
    besselap.stypy_call_defaults = defaults
    besselap.stypy_call_varargs = varargs
    besselap.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'besselap', ['N', 'norm'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'besselap', localization, ['N', 'norm'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'besselap(...)' code ##################

    str_265158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3903, (-1)), 'str', '\n    Return (z,p,k) for analog prototype of an Nth-order Bessel filter.\n\n    Parameters\n    ----------\n    N : int\n        The order of the filter.\n    norm : {\'phase\', \'delay\', \'mag\'}, optional\n        Frequency normalization:\n\n        ``phase``\n            The filter is normalized such that the phase response reaches its\n            midpoint at an angular (e.g. rad/s) cutoff frequency of 1.  This\n            happens for both low-pass and high-pass filters, so this is the\n            "phase-matched" case. [6]_\n\n            The magnitude response asymptotes are the same as a Butterworth\n            filter of the same order with a cutoff of `Wn`.\n\n            This is the default, and matches MATLAB\'s implementation.\n\n        ``delay``\n            The filter is normalized such that the group delay in the passband\n            is 1 (e.g. 1 second).  This is the "natural" type obtained by\n            solving Bessel polynomials\n\n        ``mag``\n            The filter is normalized such that the gain magnitude is -3 dB at\n            angular frequency 1.  This is called "frequency normalization" by\n            Bond. [1]_\n\n        .. versionadded:: 0.18.0\n\n    Returns\n    -------\n    z : ndarray\n        Zeros of the transfer function. Is always an empty array.\n    p : ndarray\n        Poles of the transfer function.\n    k : scalar\n        Gain of the transfer function.  For phase-normalized, this is always 1.\n\n    See Also\n    --------\n    bessel : Filter design function using this prototype\n\n    Notes\n    -----\n    To find the pole locations, approximate starting points are generated [2]_\n    for the zeros of the ordinary Bessel polynomial [3]_, then the\n    Aberth-Ehrlich method [4]_ [5]_ is used on the Kv(x) Bessel function to\n    calculate more accurate zeros, and these locations are then inverted about\n    the unit circle.\n\n    References\n    ----------\n    .. [1] C.R. Bond, "Bessel Filter Constants",\n           http://www.crbond.com/papers/bsf.pdf\n    .. [2] Campos and Calderon, "Approximate closed-form formulas for the\n           zeros of the Bessel Polynomials", :arXiv:`1105.0957`.\n    .. [3] Thomson, W.E., "Delay Networks having Maximally Flat Frequency\n           Characteristics", Proceedings of the Institution of Electrical\n           Engineers, Part III, November 1949, Vol. 96, No. 44, pp. 487-490.\n    .. [4] Aberth, "Iteration Methods for Finding all Zeros of a Polynomial\n           Simultaneously", Mathematics of Computation, Vol. 27, No. 122,\n           April 1973\n    .. [5] Ehrlich, "A modified Newton method for polynomials", Communications\n           of the ACM, Vol. 10, Issue 2, pp. 107-108, Feb. 1967,\n           :DOI:`10.1145/363067.363115`\n    .. [6] Miller and Bohn, "A Bessel Filter Crossover, and Its Relation to\n           Others", RaneNote 147, 1998, http://www.rane.com/note147.html\n\n    ')
    
    
    
    # Call to abs(...): (line 3904)
    # Processing the call arguments (line 3904)
    
    # Call to int(...): (line 3904)
    # Processing the call arguments (line 3904)
    # Getting the type of 'N' (line 3904)
    N_265161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 15), 'N', False)
    # Processing the call keyword arguments (line 3904)
    kwargs_265162 = {}
    # Getting the type of 'int' (line 3904)
    int_265160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 11), 'int', False)
    # Calling int(args, kwargs) (line 3904)
    int_call_result_265163 = invoke(stypy.reporting.localization.Localization(__file__, 3904, 11), int_265160, *[N_265161], **kwargs_265162)
    
    # Processing the call keyword arguments (line 3904)
    kwargs_265164 = {}
    # Getting the type of 'abs' (line 3904)
    abs_265159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 7), 'abs', False)
    # Calling abs(args, kwargs) (line 3904)
    abs_call_result_265165 = invoke(stypy.reporting.localization.Localization(__file__, 3904, 7), abs_265159, *[int_call_result_265163], **kwargs_265164)
    
    # Getting the type of 'N' (line 3904)
    N_265166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 22), 'N')
    # Applying the binary operator '!=' (line 3904)
    result_ne_265167 = python_operator(stypy.reporting.localization.Localization(__file__, 3904, 7), '!=', abs_call_result_265165, N_265166)
    
    # Testing the type of an if condition (line 3904)
    if_condition_265168 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3904, 4), result_ne_265167)
    # Assigning a type to the variable 'if_condition_265168' (line 3904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3904, 4), 'if_condition_265168', if_condition_265168)
    # SSA begins for if statement (line 3904)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3905)
    # Processing the call arguments (line 3905)
    str_265170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3905, 25), 'str', 'Filter order must be a nonnegative integer')
    # Processing the call keyword arguments (line 3905)
    kwargs_265171 = {}
    # Getting the type of 'ValueError' (line 3905)
    ValueError_265169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3905, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3905)
    ValueError_call_result_265172 = invoke(stypy.reporting.localization.Localization(__file__, 3905, 14), ValueError_265169, *[str_265170], **kwargs_265171)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3905, 8), ValueError_call_result_265172, 'raise parameter', BaseException)
    # SSA join for if statement (line 3904)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'N' (line 3906)
    N_265173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3906, 7), 'N')
    int_265174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3906, 12), 'int')
    # Applying the binary operator '==' (line 3906)
    result_eq_265175 = python_operator(stypy.reporting.localization.Localization(__file__, 3906, 7), '==', N_265173, int_265174)
    
    # Testing the type of an if condition (line 3906)
    if_condition_265176 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3906, 4), result_eq_265175)
    # Assigning a type to the variable 'if_condition_265176' (line 3906)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3906, 4), 'if_condition_265176', if_condition_265176)
    # SSA begins for if statement (line 3906)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 3907):
    
    # Assigning a List to a Name (line 3907):
    
    # Obtaining an instance of the builtin type 'list' (line 3907)
    list_265177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3907, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3907)
    
    # Assigning a type to the variable 'p' (line 3907)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3907, 8), 'p', list_265177)
    
    # Assigning a Num to a Name (line 3908):
    
    # Assigning a Num to a Name (line 3908):
    int_265178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3908, 12), 'int')
    # Assigning a type to the variable 'k' (line 3908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3908, 8), 'k', int_265178)
    # SSA branch for the else part of an if statement (line 3906)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 3911):
    
    # Assigning a BinOp to a Name (line 3911):
    int_265179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3911, 12), 'int')
    
    # Call to _bessel_zeros(...): (line 3911)
    # Processing the call arguments (line 3911)
    # Getting the type of 'N' (line 3911)
    N_265181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3911, 28), 'N', False)
    # Processing the call keyword arguments (line 3911)
    kwargs_265182 = {}
    # Getting the type of '_bessel_zeros' (line 3911)
    _bessel_zeros_265180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3911, 14), '_bessel_zeros', False)
    # Calling _bessel_zeros(args, kwargs) (line 3911)
    _bessel_zeros_call_result_265183 = invoke(stypy.reporting.localization.Localization(__file__, 3911, 14), _bessel_zeros_265180, *[N_265181], **kwargs_265182)
    
    # Applying the binary operator 'div' (line 3911)
    result_div_265184 = python_operator(stypy.reporting.localization.Localization(__file__, 3911, 12), 'div', int_265179, _bessel_zeros_call_result_265183)
    
    # Assigning a type to the variable 'p' (line 3911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3911, 8), 'p', result_div_265184)
    
    # Assigning a BinOp to a Name (line 3913):
    
    # Assigning a BinOp to a Name (line 3913):
    
    # Call to _falling_factorial(...): (line 3913)
    # Processing the call arguments (line 3913)
    int_265186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3913, 36), 'int')
    # Getting the type of 'N' (line 3913)
    N_265187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3913, 38), 'N', False)
    # Applying the binary operator '*' (line 3913)
    result_mul_265188 = python_operator(stypy.reporting.localization.Localization(__file__, 3913, 36), '*', int_265186, N_265187)
    
    # Getting the type of 'N' (line 3913)
    N_265189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3913, 41), 'N', False)
    # Processing the call keyword arguments (line 3913)
    kwargs_265190 = {}
    # Getting the type of '_falling_factorial' (line 3913)
    _falling_factorial_265185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3913, 17), '_falling_factorial', False)
    # Calling _falling_factorial(args, kwargs) (line 3913)
    _falling_factorial_call_result_265191 = invoke(stypy.reporting.localization.Localization(__file__, 3913, 17), _falling_factorial_265185, *[result_mul_265188, N_265189], **kwargs_265190)
    
    int_265192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3913, 47), 'int')
    # Getting the type of 'N' (line 3913)
    N_265193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3913, 50), 'N')
    # Applying the binary operator '**' (line 3913)
    result_pow_265194 = python_operator(stypy.reporting.localization.Localization(__file__, 3913, 47), '**', int_265192, N_265193)
    
    # Applying the binary operator '//' (line 3913)
    result_floordiv_265195 = python_operator(stypy.reporting.localization.Localization(__file__, 3913, 17), '//', _falling_factorial_call_result_265191, result_pow_265194)
    
    # Assigning a type to the variable 'a_last' (line 3913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3913, 8), 'a_last', result_floordiv_265195)
    
    
    # Getting the type of 'norm' (line 3916)
    norm_265196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3916, 11), 'norm')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3916)
    tuple_265197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3916, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3916)
    # Adding element type (line 3916)
    str_265198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3916, 20), 'str', 'delay')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3916, 20), tuple_265197, str_265198)
    # Adding element type (line 3916)
    str_265199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3916, 29), 'str', 'mag')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3916, 20), tuple_265197, str_265199)
    
    # Applying the binary operator 'in' (line 3916)
    result_contains_265200 = python_operator(stypy.reporting.localization.Localization(__file__, 3916, 11), 'in', norm_265196, tuple_265197)
    
    # Testing the type of an if condition (line 3916)
    if_condition_265201 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3916, 8), result_contains_265200)
    # Assigning a type to the variable 'if_condition_265201' (line 3916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3916, 8), 'if_condition_265201', if_condition_265201)
    # SSA begins for if statement (line 3916)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 3918):
    
    # Assigning a Name to a Name (line 3918):
    # Getting the type of 'a_last' (line 3918)
    a_last_265202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3918, 16), 'a_last')
    # Assigning a type to the variable 'k' (line 3918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3918, 12), 'k', a_last_265202)
    
    
    # Getting the type of 'norm' (line 3919)
    norm_265203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3919, 15), 'norm')
    str_265204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3919, 23), 'str', 'mag')
    # Applying the binary operator '==' (line 3919)
    result_eq_265205 = python_operator(stypy.reporting.localization.Localization(__file__, 3919, 15), '==', norm_265203, str_265204)
    
    # Testing the type of an if condition (line 3919)
    if_condition_265206 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3919, 12), result_eq_265205)
    # Assigning a type to the variable 'if_condition_265206' (line 3919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3919, 12), 'if_condition_265206', if_condition_265206)
    # SSA begins for if statement (line 3919)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3921):
    
    # Assigning a Call to a Name (line 3921):
    
    # Call to _norm_factor(...): (line 3921)
    # Processing the call arguments (line 3921)
    # Getting the type of 'p' (line 3921)
    p_265208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3921, 43), 'p', False)
    # Getting the type of 'k' (line 3921)
    k_265209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3921, 46), 'k', False)
    # Processing the call keyword arguments (line 3921)
    kwargs_265210 = {}
    # Getting the type of '_norm_factor' (line 3921)
    _norm_factor_265207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3921, 30), '_norm_factor', False)
    # Calling _norm_factor(args, kwargs) (line 3921)
    _norm_factor_call_result_265211 = invoke(stypy.reporting.localization.Localization(__file__, 3921, 30), _norm_factor_265207, *[p_265208, k_265209], **kwargs_265210)
    
    # Assigning a type to the variable 'norm_factor' (line 3921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3921, 16), 'norm_factor', _norm_factor_call_result_265211)
    
    # Getting the type of 'p' (line 3922)
    p_265212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3922, 16), 'p')
    # Getting the type of 'norm_factor' (line 3922)
    norm_factor_265213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3922, 21), 'norm_factor')
    # Applying the binary operator 'div=' (line 3922)
    result_div_265214 = python_operator(stypy.reporting.localization.Localization(__file__, 3922, 16), 'div=', p_265212, norm_factor_265213)
    # Assigning a type to the variable 'p' (line 3922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3922, 16), 'p', result_div_265214)
    
    
    # Assigning a BinOp to a Name (line 3923):
    
    # Assigning a BinOp to a Name (line 3923):
    # Getting the type of 'norm_factor' (line 3923)
    norm_factor_265215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 20), 'norm_factor')
    
    # Getting the type of 'N' (line 3923)
    N_265216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 34), 'N')
    # Applying the 'usub' unary operator (line 3923)
    result___neg___265217 = python_operator(stypy.reporting.localization.Localization(__file__, 3923, 33), 'usub', N_265216)
    
    # Applying the binary operator '**' (line 3923)
    result_pow_265218 = python_operator(stypy.reporting.localization.Localization(__file__, 3923, 20), '**', norm_factor_265215, result___neg___265217)
    
    # Getting the type of 'a_last' (line 3923)
    a_last_265219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 38), 'a_last')
    # Applying the binary operator '*' (line 3923)
    result_mul_265220 = python_operator(stypy.reporting.localization.Localization(__file__, 3923, 20), '*', result_pow_265218, a_last_265219)
    
    # Assigning a type to the variable 'k' (line 3923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3923, 16), 'k', result_mul_265220)
    # SSA join for if statement (line 3919)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 3916)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'norm' (line 3924)
    norm_265221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3924, 13), 'norm')
    str_265222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3924, 21), 'str', 'phase')
    # Applying the binary operator '==' (line 3924)
    result_eq_265223 = python_operator(stypy.reporting.localization.Localization(__file__, 3924, 13), '==', norm_265221, str_265222)
    
    # Testing the type of an if condition (line 3924)
    if_condition_265224 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3924, 13), result_eq_265223)
    # Assigning a type to the variable 'if_condition_265224' (line 3924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3924, 13), 'if_condition_265224', if_condition_265224)
    # SSA begins for if statement (line 3924)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'p' (line 3927)
    p_265225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3927, 12), 'p')
    int_265226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3927, 17), 'int')
    
    
    # Call to log10(...): (line 3927)
    # Processing the call arguments (line 3927)
    # Getting the type of 'a_last' (line 3927)
    a_last_265229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3927, 34), 'a_last', False)
    # Processing the call keyword arguments (line 3927)
    kwargs_265230 = {}
    # Getting the type of 'math' (line 3927)
    math_265227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3927, 23), 'math', False)
    # Obtaining the member 'log10' of a type (line 3927)
    log10_265228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3927, 23), math_265227, 'log10')
    # Calling log10(args, kwargs) (line 3927)
    log10_call_result_265231 = invoke(stypy.reporting.localization.Localization(__file__, 3927, 23), log10_265228, *[a_last_265229], **kwargs_265230)
    
    # Applying the 'usub' unary operator (line 3927)
    result___neg___265232 = python_operator(stypy.reporting.localization.Localization(__file__, 3927, 22), 'usub', log10_call_result_265231)
    
    # Getting the type of 'N' (line 3927)
    N_265233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3927, 42), 'N')
    # Applying the binary operator 'div' (line 3927)
    result_div_265234 = python_operator(stypy.reporting.localization.Localization(__file__, 3927, 22), 'div', result___neg___265232, N_265233)
    
    # Applying the binary operator '**' (line 3927)
    result_pow_265235 = python_operator(stypy.reporting.localization.Localization(__file__, 3927, 17), '**', int_265226, result_div_265234)
    
    # Applying the binary operator '*=' (line 3927)
    result_imul_265236 = python_operator(stypy.reporting.localization.Localization(__file__, 3927, 12), '*=', p_265225, result_pow_265235)
    # Assigning a type to the variable 'p' (line 3927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3927, 12), 'p', result_imul_265236)
    
    
    # Assigning a Num to a Name (line 3928):
    
    # Assigning a Num to a Name (line 3928):
    int_265237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3928, 16), 'int')
    # Assigning a type to the variable 'k' (line 3928)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3928, 12), 'k', int_265237)
    # SSA branch for the else part of an if statement (line 3924)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 3930)
    # Processing the call arguments (line 3930)
    str_265239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3930, 29), 'str', 'normalization not understood')
    # Processing the call keyword arguments (line 3930)
    kwargs_265240 = {}
    # Getting the type of 'ValueError' (line 3930)
    ValueError_265238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3930, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3930)
    ValueError_call_result_265241 = invoke(stypy.reporting.localization.Localization(__file__, 3930, 18), ValueError_265238, *[str_265239], **kwargs_265240)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3930, 12), ValueError_call_result_265241, 'raise parameter', BaseException)
    # SSA join for if statement (line 3924)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3916)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3906)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3932)
    tuple_265242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3932, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3932)
    # Adding element type (line 3932)
    
    # Call to asarray(...): (line 3932)
    # Processing the call arguments (line 3932)
    
    # Obtaining an instance of the builtin type 'list' (line 3932)
    list_265244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3932, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3932)
    
    # Processing the call keyword arguments (line 3932)
    kwargs_265245 = {}
    # Getting the type of 'asarray' (line 3932)
    asarray_265243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 11), 'asarray', False)
    # Calling asarray(args, kwargs) (line 3932)
    asarray_call_result_265246 = invoke(stypy.reporting.localization.Localization(__file__, 3932, 11), asarray_265243, *[list_265244], **kwargs_265245)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3932, 11), tuple_265242, asarray_call_result_265246)
    # Adding element type (line 3932)
    
    # Call to asarray(...): (line 3932)
    # Processing the call arguments (line 3932)
    # Getting the type of 'p' (line 3932)
    p_265248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 32), 'p', False)
    # Processing the call keyword arguments (line 3932)
    # Getting the type of 'complex' (line 3932)
    complex_265249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 41), 'complex', False)
    keyword_265250 = complex_265249
    kwargs_265251 = {'dtype': keyword_265250}
    # Getting the type of 'asarray' (line 3932)
    asarray_265247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 24), 'asarray', False)
    # Calling asarray(args, kwargs) (line 3932)
    asarray_call_result_265252 = invoke(stypy.reporting.localization.Localization(__file__, 3932, 24), asarray_265247, *[p_265248], **kwargs_265251)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3932, 11), tuple_265242, asarray_call_result_265252)
    # Adding element type (line 3932)
    
    # Call to float(...): (line 3932)
    # Processing the call arguments (line 3932)
    # Getting the type of 'k' (line 3932)
    k_265254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 57), 'k', False)
    # Processing the call keyword arguments (line 3932)
    kwargs_265255 = {}
    # Getting the type of 'float' (line 3932)
    float_265253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 51), 'float', False)
    # Calling float(args, kwargs) (line 3932)
    float_call_result_265256 = invoke(stypy.reporting.localization.Localization(__file__, 3932, 51), float_265253, *[k_265254], **kwargs_265255)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3932, 11), tuple_265242, float_call_result_265256)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3932)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3932, 4), 'stypy_return_type', tuple_265242)
    
    # ################# End of 'besselap(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'besselap' in the type store
    # Getting the type of 'stypy_return_type' (line 3830)
    stypy_return_type_265257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3830, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_265257)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'besselap'
    return stypy_return_type_265257

# Assigning a type to the variable 'besselap' (line 3830)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3830, 0), 'besselap', besselap)

@norecursion
def iirnotch(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'iirnotch'
    module_type_store = module_type_store.open_function_context('iirnotch', 3935, 0, False)
    
    # Passed parameters checking function
    iirnotch.stypy_localization = localization
    iirnotch.stypy_type_of_self = None
    iirnotch.stypy_type_store = module_type_store
    iirnotch.stypy_function_name = 'iirnotch'
    iirnotch.stypy_param_names_list = ['w0', 'Q']
    iirnotch.stypy_varargs_param_name = None
    iirnotch.stypy_kwargs_param_name = None
    iirnotch.stypy_call_defaults = defaults
    iirnotch.stypy_call_varargs = varargs
    iirnotch.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'iirnotch', ['w0', 'Q'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'iirnotch', localization, ['w0', 'Q'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'iirnotch(...)' code ##################

    str_265258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4009, (-1)), 'str', '\n    Design second-order IIR notch digital filter.\n\n    A notch filter is a band-stop filter with a narrow bandwidth\n    (high quality factor). It rejects a narrow frequency band and\n    leaves the rest of the spectrum little changed.\n\n    Parameters\n    ----------\n    w0 : float\n        Normalized frequency to remove from a signal. It is a\n        scalar that must satisfy  ``0 < w0 < 1``, with ``w0 = 1``\n        corresponding to half of the sampling frequency.\n    Q : float\n        Quality factor. Dimensionless parameter that characterizes\n        notch filter -3 dB bandwidth ``bw`` relative to its center\n        frequency, ``Q = w0/bw``.\n\n    Returns\n    -------\n    b, a : ndarray, ndarray\n        Numerator (``b``) and denominator (``a``) polynomials\n        of the IIR filter.\n\n    See Also\n    --------\n    iirpeak\n\n    Notes\n    -----\n    .. versionadded: 0.19.0\n\n    References\n    ----------\n    .. [1] Sophocles J. Orfanidis, "Introduction To Signal Processing",\n           Prentice-Hall, 1996\n\n    Examples\n    --------\n    Design and plot filter to remove the 60Hz component from a\n    signal sampled at 200Hz, using a quality factor Q = 30\n\n    >>> from scipy import signal\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n\n    >>> fs = 200.0  # Sample frequency (Hz)\n    >>> f0 = 60.0  # Frequency to be removed from signal (Hz)\n    >>> Q = 30.0  # Quality factor\n    >>> w0 = f0/(fs/2)  # Normalized Frequency\n    >>> # Design notch filter\n    >>> b, a = signal.iirnotch(w0, Q)\n\n    >>> # Frequency response\n    >>> w, h = signal.freqz(b, a)\n    >>> # Generate frequency axis\n    >>> freq = w*fs/(2*np.pi)\n    >>> # Plot\n    >>> fig, ax = plt.subplots(2, 1, figsize=(8, 6))\n    >>> ax[0].plot(freq, 20*np.log10(abs(h)), color=\'blue\')\n    >>> ax[0].set_title("Frequency Response")\n    >>> ax[0].set_ylabel("Amplitude (dB)", color=\'blue\')\n    >>> ax[0].set_xlim([0, 100])\n    >>> ax[0].set_ylim([-25, 10])\n    >>> ax[0].grid()\n    >>> ax[1].plot(freq, np.unwrap(np.angle(h))*180/np.pi, color=\'green\')\n    >>> ax[1].set_ylabel("Angle (degrees)", color=\'green\')\n    >>> ax[1].set_xlabel("Frequency (Hz)")\n    >>> ax[1].set_xlim([0, 100])\n    >>> ax[1].set_yticks([-90, -60, -30, 0, 30, 60, 90])\n    >>> ax[1].set_ylim([-90, 90])\n    >>> ax[1].grid()\n    >>> plt.show()\n    ')
    
    # Call to _design_notch_peak_filter(...): (line 4011)
    # Processing the call arguments (line 4011)
    # Getting the type of 'w0' (line 4011)
    w0_265260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4011, 37), 'w0', False)
    # Getting the type of 'Q' (line 4011)
    Q_265261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4011, 41), 'Q', False)
    str_265262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4011, 44), 'str', 'notch')
    # Processing the call keyword arguments (line 4011)
    kwargs_265263 = {}
    # Getting the type of '_design_notch_peak_filter' (line 4011)
    _design_notch_peak_filter_265259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4011, 11), '_design_notch_peak_filter', False)
    # Calling _design_notch_peak_filter(args, kwargs) (line 4011)
    _design_notch_peak_filter_call_result_265264 = invoke(stypy.reporting.localization.Localization(__file__, 4011, 11), _design_notch_peak_filter_265259, *[w0_265260, Q_265261, str_265262], **kwargs_265263)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4011)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4011, 4), 'stypy_return_type', _design_notch_peak_filter_call_result_265264)
    
    # ################# End of 'iirnotch(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'iirnotch' in the type store
    # Getting the type of 'stypy_return_type' (line 3935)
    stypy_return_type_265265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3935, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_265265)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'iirnotch'
    return stypy_return_type_265265

# Assigning a type to the variable 'iirnotch' (line 3935)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3935, 0), 'iirnotch', iirnotch)

@norecursion
def iirpeak(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'iirpeak'
    module_type_store = module_type_store.open_function_context('iirpeak', 4014, 0, False)
    
    # Passed parameters checking function
    iirpeak.stypy_localization = localization
    iirpeak.stypy_type_of_self = None
    iirpeak.stypy_type_store = module_type_store
    iirpeak.stypy_function_name = 'iirpeak'
    iirpeak.stypy_param_names_list = ['w0', 'Q']
    iirpeak.stypy_varargs_param_name = None
    iirpeak.stypy_kwargs_param_name = None
    iirpeak.stypy_call_defaults = defaults
    iirpeak.stypy_call_varargs = varargs
    iirpeak.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'iirpeak', ['w0', 'Q'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'iirpeak', localization, ['w0', 'Q'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'iirpeak(...)' code ##################

    str_265266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4088, (-1)), 'str', '\n    Design second-order IIR peak (resonant) digital filter.\n\n    A peak filter is a band-pass filter with a narrow bandwidth\n    (high quality factor). It rejects components outside a narrow\n    frequency band.\n\n    Parameters\n    ----------\n    w0 : float\n        Normalized frequency to be retained in a signal. It is a\n        scalar that must satisfy  ``0 < w0 < 1``, with ``w0 = 1`` corresponding\n        to half of the sampling frequency.\n    Q : float\n        Quality factor. Dimensionless parameter that characterizes\n        peak filter -3 dB bandwidth ``bw`` relative to its center\n        frequency, ``Q = w0/bw``.\n\n    Returns\n    -------\n    b, a : ndarray, ndarray\n        Numerator (``b``) and denominator (``a``) polynomials\n        of the IIR filter.\n\n    See Also\n    --------\n    iirnotch\n\n    Notes\n    -----\n    .. versionadded: 0.19.0\n\n    References\n    ----------\n    .. [1] Sophocles J. Orfanidis, "Introduction To Signal Processing",\n           Prentice-Hall, 1996\n\n    Examples\n    --------\n    Design and plot filter to remove the frequencies other than the 300Hz\n    component from a signal sampled at 1000Hz, using a quality factor Q = 30\n\n    >>> from scipy import signal\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n\n    >>> fs = 1000.0  # Sample frequency (Hz)\n    >>> f0 = 300.0  # Frequency to be retained (Hz)\n    >>> Q = 30.0  # Quality factor\n    >>> w0 = f0/(fs/2)  # Normalized Frequency\n    >>> # Design peak filter\n    >>> b, a = signal.iirpeak(w0, Q)\n\n    >>> # Frequency response\n    >>> w, h = signal.freqz(b, a)\n    >>> # Generate frequency axis\n    >>> freq = w*fs/(2*np.pi)\n    >>> # Plot\n    >>> fig, ax = plt.subplots(2, 1, figsize=(8, 6))\n    >>> ax[0].plot(freq, 20*np.log10(abs(h)), color=\'blue\')\n    >>> ax[0].set_title("Frequency Response")\n    >>> ax[0].set_ylabel("Amplitude (dB)", color=\'blue\')\n    >>> ax[0].set_xlim([0, 500])\n    >>> ax[0].set_ylim([-50, 10])\n    >>> ax[0].grid()\n    >>> ax[1].plot(freq, np.unwrap(np.angle(h))*180/np.pi, color=\'green\')\n    >>> ax[1].set_ylabel("Angle (degrees)", color=\'green\')\n    >>> ax[1].set_xlabel("Frequency (Hz)")\n    >>> ax[1].set_xlim([0, 500])\n    >>> ax[1].set_yticks([-90, -60, -30, 0, 30, 60, 90])\n    >>> ax[1].set_ylim([-90, 90])\n    >>> ax[1].grid()\n    >>> plt.show()\n    ')
    
    # Call to _design_notch_peak_filter(...): (line 4090)
    # Processing the call arguments (line 4090)
    # Getting the type of 'w0' (line 4090)
    w0_265268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4090, 37), 'w0', False)
    # Getting the type of 'Q' (line 4090)
    Q_265269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4090, 41), 'Q', False)
    str_265270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4090, 44), 'str', 'peak')
    # Processing the call keyword arguments (line 4090)
    kwargs_265271 = {}
    # Getting the type of '_design_notch_peak_filter' (line 4090)
    _design_notch_peak_filter_265267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4090, 11), '_design_notch_peak_filter', False)
    # Calling _design_notch_peak_filter(args, kwargs) (line 4090)
    _design_notch_peak_filter_call_result_265272 = invoke(stypy.reporting.localization.Localization(__file__, 4090, 11), _design_notch_peak_filter_265267, *[w0_265268, Q_265269, str_265270], **kwargs_265271)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4090, 4), 'stypy_return_type', _design_notch_peak_filter_call_result_265272)
    
    # ################# End of 'iirpeak(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'iirpeak' in the type store
    # Getting the type of 'stypy_return_type' (line 4014)
    stypy_return_type_265273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4014, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_265273)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'iirpeak'
    return stypy_return_type_265273

# Assigning a type to the variable 'iirpeak' (line 4014)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4014, 0), 'iirpeak', iirpeak)

@norecursion
def _design_notch_peak_filter(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_design_notch_peak_filter'
    module_type_store = module_type_store.open_function_context('_design_notch_peak_filter', 4093, 0, False)
    
    # Passed parameters checking function
    _design_notch_peak_filter.stypy_localization = localization
    _design_notch_peak_filter.stypy_type_of_self = None
    _design_notch_peak_filter.stypy_type_store = module_type_store
    _design_notch_peak_filter.stypy_function_name = '_design_notch_peak_filter'
    _design_notch_peak_filter.stypy_param_names_list = ['w0', 'Q', 'ftype']
    _design_notch_peak_filter.stypy_varargs_param_name = None
    _design_notch_peak_filter.stypy_kwargs_param_name = None
    _design_notch_peak_filter.stypy_call_defaults = defaults
    _design_notch_peak_filter.stypy_call_varargs = varargs
    _design_notch_peak_filter.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_design_notch_peak_filter', ['w0', 'Q', 'ftype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_design_notch_peak_filter', localization, ['w0', 'Q', 'ftype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_design_notch_peak_filter(...)' code ##################

    str_265274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4118, (-1)), 'str', '\n    Design notch or peak digital filter.\n\n    Parameters\n    ----------\n    w0 : float\n        Normalized frequency to remove from a signal. It is a\n        scalar that must satisfy  ``0 < w0 < 1``, with ``w0 = 1``\n        corresponding to half of the sampling frequency.\n    Q : float\n        Quality factor. Dimensionless parameter that characterizes\n        notch filter -3 dB bandwidth ``bw`` relative to its center\n        frequency, ``Q = w0/bw``.\n    ftype : str\n        The type of IIR filter to design:\n\n            - notch filter : ``notch``\n            - peak filter  : ``peak``\n\n    Returns\n    -------\n    b, a : ndarray, ndarray\n        Numerator (``b``) and denominator (``a``) polynomials\n        of the IIR filter.\n    ')
    
    # Assigning a Call to a Name (line 4121):
    
    # Assigning a Call to a Name (line 4121):
    
    # Call to float(...): (line 4121)
    # Processing the call arguments (line 4121)
    # Getting the type of 'w0' (line 4121)
    w0_265276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4121, 15), 'w0', False)
    # Processing the call keyword arguments (line 4121)
    kwargs_265277 = {}
    # Getting the type of 'float' (line 4121)
    float_265275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4121, 9), 'float', False)
    # Calling float(args, kwargs) (line 4121)
    float_call_result_265278 = invoke(stypy.reporting.localization.Localization(__file__, 4121, 9), float_265275, *[w0_265276], **kwargs_265277)
    
    # Assigning a type to the variable 'w0' (line 4121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4121, 4), 'w0', float_call_result_265278)
    
    # Assigning a Call to a Name (line 4122):
    
    # Assigning a Call to a Name (line 4122):
    
    # Call to float(...): (line 4122)
    # Processing the call arguments (line 4122)
    # Getting the type of 'Q' (line 4122)
    Q_265280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4122, 14), 'Q', False)
    # Processing the call keyword arguments (line 4122)
    kwargs_265281 = {}
    # Getting the type of 'float' (line 4122)
    float_265279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4122, 8), 'float', False)
    # Calling float(args, kwargs) (line 4122)
    float_call_result_265282 = invoke(stypy.reporting.localization.Localization(__file__, 4122, 8), float_265279, *[Q_265280], **kwargs_265281)
    
    # Assigning a type to the variable 'Q' (line 4122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4122, 4), 'Q', float_call_result_265282)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'w0' (line 4125)
    w0_265283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4125, 7), 'w0')
    float_265284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4125, 12), 'float')
    # Applying the binary operator '>' (line 4125)
    result_gt_265285 = python_operator(stypy.reporting.localization.Localization(__file__, 4125, 7), '>', w0_265283, float_265284)
    
    
    # Getting the type of 'w0' (line 4125)
    w0_265286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4125, 19), 'w0')
    float_265287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4125, 24), 'float')
    # Applying the binary operator '<' (line 4125)
    result_lt_265288 = python_operator(stypy.reporting.localization.Localization(__file__, 4125, 19), '<', w0_265286, float_265287)
    
    # Applying the binary operator 'or' (line 4125)
    result_or_keyword_265289 = python_operator(stypy.reporting.localization.Localization(__file__, 4125, 7), 'or', result_gt_265285, result_lt_265288)
    
    # Testing the type of an if condition (line 4125)
    if_condition_265290 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4125, 4), result_or_keyword_265289)
    # Assigning a type to the variable 'if_condition_265290' (line 4125)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4125, 4), 'if_condition_265290', if_condition_265290)
    # SSA begins for if statement (line 4125)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 4126)
    # Processing the call arguments (line 4126)
    str_265292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4126, 25), 'str', 'w0 should be such that 0 < w0 < 1')
    # Processing the call keyword arguments (line 4126)
    kwargs_265293 = {}
    # Getting the type of 'ValueError' (line 4126)
    ValueError_265291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4126, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 4126)
    ValueError_call_result_265294 = invoke(stypy.reporting.localization.Localization(__file__, 4126, 14), ValueError_265291, *[str_265292], **kwargs_265293)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4126, 8), ValueError_call_result_265294, 'raise parameter', BaseException)
    # SSA join for if statement (line 4125)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 4129):
    
    # Assigning a BinOp to a Name (line 4129):
    # Getting the type of 'w0' (line 4129)
    w0_265295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4129, 9), 'w0')
    # Getting the type of 'Q' (line 4129)
    Q_265296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4129, 12), 'Q')
    # Applying the binary operator 'div' (line 4129)
    result_div_265297 = python_operator(stypy.reporting.localization.Localization(__file__, 4129, 9), 'div', w0_265295, Q_265296)
    
    # Assigning a type to the variable 'bw' (line 4129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4129, 4), 'bw', result_div_265297)
    
    # Assigning a BinOp to a Name (line 4132):
    
    # Assigning a BinOp to a Name (line 4132):
    # Getting the type of 'bw' (line 4132)
    bw_265298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4132, 9), 'bw')
    # Getting the type of 'np' (line 4132)
    np_265299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4132, 12), 'np')
    # Obtaining the member 'pi' of a type (line 4132)
    pi_265300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4132, 12), np_265299, 'pi')
    # Applying the binary operator '*' (line 4132)
    result_mul_265301 = python_operator(stypy.reporting.localization.Localization(__file__, 4132, 9), '*', bw_265298, pi_265300)
    
    # Assigning a type to the variable 'bw' (line 4132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4132, 4), 'bw', result_mul_265301)
    
    # Assigning a BinOp to a Name (line 4133):
    
    # Assigning a BinOp to a Name (line 4133):
    # Getting the type of 'w0' (line 4133)
    w0_265302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4133, 9), 'w0')
    # Getting the type of 'np' (line 4133)
    np_265303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4133, 12), 'np')
    # Obtaining the member 'pi' of a type (line 4133)
    pi_265304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4133, 12), np_265303, 'pi')
    # Applying the binary operator '*' (line 4133)
    result_mul_265305 = python_operator(stypy.reporting.localization.Localization(__file__, 4133, 9), '*', w0_265302, pi_265304)
    
    # Assigning a type to the variable 'w0' (line 4133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4133, 4), 'w0', result_mul_265305)
    
    # Assigning a BinOp to a Name (line 4136):
    
    # Assigning a BinOp to a Name (line 4136):
    int_265306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4136, 9), 'int')
    
    # Call to sqrt(...): (line 4136)
    # Processing the call arguments (line 4136)
    int_265309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4136, 19), 'int')
    # Processing the call keyword arguments (line 4136)
    kwargs_265310 = {}
    # Getting the type of 'np' (line 4136)
    np_265307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4136, 11), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 4136)
    sqrt_265308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4136, 11), np_265307, 'sqrt')
    # Calling sqrt(args, kwargs) (line 4136)
    sqrt_call_result_265311 = invoke(stypy.reporting.localization.Localization(__file__, 4136, 11), sqrt_265308, *[int_265309], **kwargs_265310)
    
    # Applying the binary operator 'div' (line 4136)
    result_div_265312 = python_operator(stypy.reporting.localization.Localization(__file__, 4136, 9), 'div', int_265306, sqrt_call_result_265311)
    
    # Assigning a type to the variable 'gb' (line 4136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4136, 4), 'gb', result_div_265312)
    
    
    # Getting the type of 'ftype' (line 4138)
    ftype_265313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4138, 7), 'ftype')
    str_265314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4138, 16), 'str', 'notch')
    # Applying the binary operator '==' (line 4138)
    result_eq_265315 = python_operator(stypy.reporting.localization.Localization(__file__, 4138, 7), '==', ftype_265313, str_265314)
    
    # Testing the type of an if condition (line 4138)
    if_condition_265316 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4138, 4), result_eq_265315)
    # Assigning a type to the variable 'if_condition_265316' (line 4138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4138, 4), 'if_condition_265316', if_condition_265316)
    # SSA begins for if statement (line 4138)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 4140):
    
    # Assigning a BinOp to a Name (line 4140):
    
    # Call to sqrt(...): (line 4140)
    # Processing the call arguments (line 4140)
    float_265319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4140, 24), 'float')
    # Getting the type of 'gb' (line 4140)
    gb_265320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4140, 28), 'gb', False)
    float_265321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4140, 32), 'float')
    # Applying the binary operator '**' (line 4140)
    result_pow_265322 = python_operator(stypy.reporting.localization.Localization(__file__, 4140, 28), '**', gb_265320, float_265321)
    
    # Applying the binary operator '-' (line 4140)
    result_sub_265323 = python_operator(stypy.reporting.localization.Localization(__file__, 4140, 24), '-', float_265319, result_pow_265322)
    
    # Processing the call keyword arguments (line 4140)
    kwargs_265324 = {}
    # Getting the type of 'np' (line 4140)
    np_265317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4140, 16), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 4140)
    sqrt_265318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4140, 16), np_265317, 'sqrt')
    # Calling sqrt(args, kwargs) (line 4140)
    sqrt_call_result_265325 = invoke(stypy.reporting.localization.Localization(__file__, 4140, 16), sqrt_265318, *[result_sub_265323], **kwargs_265324)
    
    # Getting the type of 'gb' (line 4140)
    gb_265326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4140, 37), 'gb')
    # Applying the binary operator 'div' (line 4140)
    result_div_265327 = python_operator(stypy.reporting.localization.Localization(__file__, 4140, 16), 'div', sqrt_call_result_265325, gb_265326)
    
    
    # Call to tan(...): (line 4140)
    # Processing the call arguments (line 4140)
    # Getting the type of 'bw' (line 4140)
    bw_265330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4140, 48), 'bw', False)
    float_265331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4140, 51), 'float')
    # Applying the binary operator 'div' (line 4140)
    result_div_265332 = python_operator(stypy.reporting.localization.Localization(__file__, 4140, 48), 'div', bw_265330, float_265331)
    
    # Processing the call keyword arguments (line 4140)
    kwargs_265333 = {}
    # Getting the type of 'np' (line 4140)
    np_265328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4140, 41), 'np', False)
    # Obtaining the member 'tan' of a type (line 4140)
    tan_265329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4140, 41), np_265328, 'tan')
    # Calling tan(args, kwargs) (line 4140)
    tan_call_result_265334 = invoke(stypy.reporting.localization.Localization(__file__, 4140, 41), tan_265329, *[result_div_265332], **kwargs_265333)
    
    # Applying the binary operator '*' (line 4140)
    result_mul_265335 = python_operator(stypy.reporting.localization.Localization(__file__, 4140, 15), '*', result_div_265327, tan_call_result_265334)
    
    # Assigning a type to the variable 'beta' (line 4140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4140, 8), 'beta', result_mul_265335)
    # SSA branch for the else part of an if statement (line 4138)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ftype' (line 4141)
    ftype_265336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4141, 9), 'ftype')
    str_265337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4141, 18), 'str', 'peak')
    # Applying the binary operator '==' (line 4141)
    result_eq_265338 = python_operator(stypy.reporting.localization.Localization(__file__, 4141, 9), '==', ftype_265336, str_265337)
    
    # Testing the type of an if condition (line 4141)
    if_condition_265339 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4141, 9), result_eq_265338)
    # Assigning a type to the variable 'if_condition_265339' (line 4141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4141, 9), 'if_condition_265339', if_condition_265339)
    # SSA begins for if statement (line 4141)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 4143):
    
    # Assigning a BinOp to a Name (line 4143):
    # Getting the type of 'gb' (line 4143)
    gb_265340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4143, 16), 'gb')
    
    # Call to sqrt(...): (line 4143)
    # Processing the call arguments (line 4143)
    float_265343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4143, 27), 'float')
    # Getting the type of 'gb' (line 4143)
    gb_265344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4143, 31), 'gb', False)
    float_265345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4143, 35), 'float')
    # Applying the binary operator '**' (line 4143)
    result_pow_265346 = python_operator(stypy.reporting.localization.Localization(__file__, 4143, 31), '**', gb_265344, float_265345)
    
    # Applying the binary operator '-' (line 4143)
    result_sub_265347 = python_operator(stypy.reporting.localization.Localization(__file__, 4143, 27), '-', float_265343, result_pow_265346)
    
    # Processing the call keyword arguments (line 4143)
    kwargs_265348 = {}
    # Getting the type of 'np' (line 4143)
    np_265341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4143, 19), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 4143)
    sqrt_265342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4143, 19), np_265341, 'sqrt')
    # Calling sqrt(args, kwargs) (line 4143)
    sqrt_call_result_265349 = invoke(stypy.reporting.localization.Localization(__file__, 4143, 19), sqrt_265342, *[result_sub_265347], **kwargs_265348)
    
    # Applying the binary operator 'div' (line 4143)
    result_div_265350 = python_operator(stypy.reporting.localization.Localization(__file__, 4143, 16), 'div', gb_265340, sqrt_call_result_265349)
    
    
    # Call to tan(...): (line 4143)
    # Processing the call arguments (line 4143)
    # Getting the type of 'bw' (line 4143)
    bw_265353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4143, 48), 'bw', False)
    float_265354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4143, 51), 'float')
    # Applying the binary operator 'div' (line 4143)
    result_div_265355 = python_operator(stypy.reporting.localization.Localization(__file__, 4143, 48), 'div', bw_265353, float_265354)
    
    # Processing the call keyword arguments (line 4143)
    kwargs_265356 = {}
    # Getting the type of 'np' (line 4143)
    np_265351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4143, 41), 'np', False)
    # Obtaining the member 'tan' of a type (line 4143)
    tan_265352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4143, 41), np_265351, 'tan')
    # Calling tan(args, kwargs) (line 4143)
    tan_call_result_265357 = invoke(stypy.reporting.localization.Localization(__file__, 4143, 41), tan_265352, *[result_div_265355], **kwargs_265356)
    
    # Applying the binary operator '*' (line 4143)
    result_mul_265358 = python_operator(stypy.reporting.localization.Localization(__file__, 4143, 15), '*', result_div_265350, tan_call_result_265357)
    
    # Assigning a type to the variable 'beta' (line 4143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4143, 8), 'beta', result_mul_265358)
    # SSA branch for the else part of an if statement (line 4141)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 4145)
    # Processing the call arguments (line 4145)
    str_265360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4145, 25), 'str', 'Unknown ftype.')
    # Processing the call keyword arguments (line 4145)
    kwargs_265361 = {}
    # Getting the type of 'ValueError' (line 4145)
    ValueError_265359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4145, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 4145)
    ValueError_call_result_265362 = invoke(stypy.reporting.localization.Localization(__file__, 4145, 14), ValueError_265359, *[str_265360], **kwargs_265361)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4145, 8), ValueError_call_result_265362, 'raise parameter', BaseException)
    # SSA join for if statement (line 4141)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4138)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 4148):
    
    # Assigning a BinOp to a Name (line 4148):
    float_265363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4148, 11), 'float')
    float_265364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4148, 16), 'float')
    # Getting the type of 'beta' (line 4148)
    beta_265365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4148, 20), 'beta')
    # Applying the binary operator '+' (line 4148)
    result_add_265366 = python_operator(stypy.reporting.localization.Localization(__file__, 4148, 16), '+', float_265364, beta_265365)
    
    # Applying the binary operator 'div' (line 4148)
    result_div_265367 = python_operator(stypy.reporting.localization.Localization(__file__, 4148, 11), 'div', float_265363, result_add_265366)
    
    # Assigning a type to the variable 'gain' (line 4148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4148, 4), 'gain', result_div_265367)
    
    
    # Getting the type of 'ftype' (line 4153)
    ftype_265368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4153, 7), 'ftype')
    str_265369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4153, 16), 'str', 'notch')
    # Applying the binary operator '==' (line 4153)
    result_eq_265370 = python_operator(stypy.reporting.localization.Localization(__file__, 4153, 7), '==', ftype_265368, str_265369)
    
    # Testing the type of an if condition (line 4153)
    if_condition_265371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4153, 4), result_eq_265370)
    # Assigning a type to the variable 'if_condition_265371' (line 4153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4153, 4), 'if_condition_265371', if_condition_265371)
    # SSA begins for if statement (line 4153)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 4154):
    
    # Assigning a BinOp to a Name (line 4154):
    # Getting the type of 'gain' (line 4154)
    gain_265372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4154, 12), 'gain')
    
    # Call to array(...): (line 4154)
    # Processing the call arguments (line 4154)
    
    # Obtaining an instance of the builtin type 'list' (line 4154)
    list_265375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4154, 26), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4154)
    # Adding element type (line 4154)
    float_265376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4154, 27), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4154, 26), list_265375, float_265376)
    # Adding element type (line 4154)
    float_265377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4154, 32), 'float')
    
    # Call to cos(...): (line 4154)
    # Processing the call arguments (line 4154)
    # Getting the type of 'w0' (line 4154)
    w0_265380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4154, 44), 'w0', False)
    # Processing the call keyword arguments (line 4154)
    kwargs_265381 = {}
    # Getting the type of 'np' (line 4154)
    np_265378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4154, 37), 'np', False)
    # Obtaining the member 'cos' of a type (line 4154)
    cos_265379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4154, 37), np_265378, 'cos')
    # Calling cos(args, kwargs) (line 4154)
    cos_call_result_265382 = invoke(stypy.reporting.localization.Localization(__file__, 4154, 37), cos_265379, *[w0_265380], **kwargs_265381)
    
    # Applying the binary operator '*' (line 4154)
    result_mul_265383 = python_operator(stypy.reporting.localization.Localization(__file__, 4154, 32), '*', float_265377, cos_call_result_265382)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4154, 26), list_265375, result_mul_265383)
    # Adding element type (line 4154)
    float_265384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4154, 49), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4154, 26), list_265375, float_265384)
    
    # Processing the call keyword arguments (line 4154)
    kwargs_265385 = {}
    # Getting the type of 'np' (line 4154)
    np_265373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4154, 17), 'np', False)
    # Obtaining the member 'array' of a type (line 4154)
    array_265374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4154, 17), np_265373, 'array')
    # Calling array(args, kwargs) (line 4154)
    array_call_result_265386 = invoke(stypy.reporting.localization.Localization(__file__, 4154, 17), array_265374, *[list_265375], **kwargs_265385)
    
    # Applying the binary operator '*' (line 4154)
    result_mul_265387 = python_operator(stypy.reporting.localization.Localization(__file__, 4154, 12), '*', gain_265372, array_call_result_265386)
    
    # Assigning a type to the variable 'b' (line 4154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4154, 8), 'b', result_mul_265387)
    # SSA branch for the else part of an if statement (line 4153)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 4156):
    
    # Assigning a BinOp to a Name (line 4156):
    float_265388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4156, 13), 'float')
    # Getting the type of 'gain' (line 4156)
    gain_265389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4156, 17), 'gain')
    # Applying the binary operator '-' (line 4156)
    result_sub_265390 = python_operator(stypy.reporting.localization.Localization(__file__, 4156, 13), '-', float_265388, gain_265389)
    
    
    # Call to array(...): (line 4156)
    # Processing the call arguments (line 4156)
    
    # Obtaining an instance of the builtin type 'list' (line 4156)
    list_265393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4156, 32), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4156)
    # Adding element type (line 4156)
    float_265394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4156, 33), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4156, 32), list_265393, float_265394)
    # Adding element type (line 4156)
    float_265395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4156, 38), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4156, 32), list_265393, float_265395)
    # Adding element type (line 4156)
    float_265396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4156, 43), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4156, 32), list_265393, float_265396)
    
    # Processing the call keyword arguments (line 4156)
    kwargs_265397 = {}
    # Getting the type of 'np' (line 4156)
    np_265391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4156, 23), 'np', False)
    # Obtaining the member 'array' of a type (line 4156)
    array_265392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4156, 23), np_265391, 'array')
    # Calling array(args, kwargs) (line 4156)
    array_call_result_265398 = invoke(stypy.reporting.localization.Localization(__file__, 4156, 23), array_265392, *[list_265393], **kwargs_265397)
    
    # Applying the binary operator '*' (line 4156)
    result_mul_265399 = python_operator(stypy.reporting.localization.Localization(__file__, 4156, 12), '*', result_sub_265390, array_call_result_265398)
    
    # Assigning a type to the variable 'b' (line 4156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4156, 8), 'b', result_mul_265399)
    # SSA join for if statement (line 4153)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 4157):
    
    # Assigning a Call to a Name (line 4157):
    
    # Call to array(...): (line 4157)
    # Processing the call arguments (line 4157)
    
    # Obtaining an instance of the builtin type 'list' (line 4157)
    list_265402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4157, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4157)
    # Adding element type (line 4157)
    float_265403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4157, 18), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4157, 17), list_265402, float_265403)
    # Adding element type (line 4157)
    float_265404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4157, 23), 'float')
    # Getting the type of 'gain' (line 4157)
    gain_265405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4157, 28), 'gain', False)
    # Applying the binary operator '*' (line 4157)
    result_mul_265406 = python_operator(stypy.reporting.localization.Localization(__file__, 4157, 23), '*', float_265404, gain_265405)
    
    
    # Call to cos(...): (line 4157)
    # Processing the call arguments (line 4157)
    # Getting the type of 'w0' (line 4157)
    w0_265409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4157, 40), 'w0', False)
    # Processing the call keyword arguments (line 4157)
    kwargs_265410 = {}
    # Getting the type of 'np' (line 4157)
    np_265407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4157, 33), 'np', False)
    # Obtaining the member 'cos' of a type (line 4157)
    cos_265408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4157, 33), np_265407, 'cos')
    # Calling cos(args, kwargs) (line 4157)
    cos_call_result_265411 = invoke(stypy.reporting.localization.Localization(__file__, 4157, 33), cos_265408, *[w0_265409], **kwargs_265410)
    
    # Applying the binary operator '*' (line 4157)
    result_mul_265412 = python_operator(stypy.reporting.localization.Localization(__file__, 4157, 32), '*', result_mul_265406, cos_call_result_265411)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4157, 17), list_265402, result_mul_265412)
    # Adding element type (line 4157)
    float_265413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4157, 46), 'float')
    # Getting the type of 'gain' (line 4157)
    gain_265414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4157, 50), 'gain', False)
    # Applying the binary operator '*' (line 4157)
    result_mul_265415 = python_operator(stypy.reporting.localization.Localization(__file__, 4157, 46), '*', float_265413, gain_265414)
    
    float_265416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4157, 55), 'float')
    # Applying the binary operator '-' (line 4157)
    result_sub_265417 = python_operator(stypy.reporting.localization.Localization(__file__, 4157, 46), '-', result_mul_265415, float_265416)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4157, 17), list_265402, result_sub_265417)
    
    # Processing the call keyword arguments (line 4157)
    kwargs_265418 = {}
    # Getting the type of 'np' (line 4157)
    np_265400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4157, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 4157)
    array_265401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4157, 8), np_265400, 'array')
    # Calling array(args, kwargs) (line 4157)
    array_call_result_265419 = invoke(stypy.reporting.localization.Localization(__file__, 4157, 8), array_265401, *[list_265402], **kwargs_265418)
    
    # Assigning a type to the variable 'a' (line 4157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4157, 4), 'a', array_call_result_265419)
    
    # Obtaining an instance of the builtin type 'tuple' (line 4159)
    tuple_265420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4159, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4159)
    # Adding element type (line 4159)
    # Getting the type of 'b' (line 4159)
    b_265421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4159, 11), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4159, 11), tuple_265420, b_265421)
    # Adding element type (line 4159)
    # Getting the type of 'a' (line 4159)
    a_265422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4159, 14), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4159, 11), tuple_265420, a_265422)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4159, 4), 'stypy_return_type', tuple_265420)
    
    # ################# End of '_design_notch_peak_filter(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_design_notch_peak_filter' in the type store
    # Getting the type of 'stypy_return_type' (line 4093)
    stypy_return_type_265423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4093, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_265423)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_design_notch_peak_filter'
    return stypy_return_type_265423

# Assigning a type to the variable '_design_notch_peak_filter' (line 4093)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4093, 0), '_design_notch_peak_filter', _design_notch_peak_filter)

# Assigning a Dict to a Name (line 4162):

# Assigning a Dict to a Name (line 4162):

# Obtaining an instance of the builtin type 'dict' (line 4162)
dict_265424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4162, 14), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 4162)
# Adding element type (key, value) (line 4162)
str_265425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4162, 15), 'str', 'butter')

# Obtaining an instance of the builtin type 'list' (line 4162)
list_265426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4162, 25), 'list')
# Adding type elements to the builtin type 'list' instance (line 4162)
# Adding element type (line 4162)
# Getting the type of 'buttap' (line 4162)
buttap_265427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4162, 26), 'buttap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 25), list_265426, buttap_265427)
# Adding element type (line 4162)
# Getting the type of 'buttord' (line 4162)
buttord_265428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4162, 34), 'buttord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 25), list_265426, buttord_265428)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265425, list_265426))
# Adding element type (key, value) (line 4162)
str_265429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4163, 15), 'str', 'butterworth')

# Obtaining an instance of the builtin type 'list' (line 4163)
list_265430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4163, 30), 'list')
# Adding type elements to the builtin type 'list' instance (line 4163)
# Adding element type (line 4163)
# Getting the type of 'buttap' (line 4163)
buttap_265431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4163, 31), 'buttap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4163, 30), list_265430, buttap_265431)
# Adding element type (line 4163)
# Getting the type of 'buttord' (line 4163)
buttord_265432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4163, 39), 'buttord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4163, 30), list_265430, buttord_265432)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265429, list_265430))
# Adding element type (key, value) (line 4162)
str_265433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4165, 15), 'str', 'cauer')

# Obtaining an instance of the builtin type 'list' (line 4165)
list_265434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4165, 24), 'list')
# Adding type elements to the builtin type 'list' instance (line 4165)
# Adding element type (line 4165)
# Getting the type of 'ellipap' (line 4165)
ellipap_265435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4165, 25), 'ellipap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4165, 24), list_265434, ellipap_265435)
# Adding element type (line 4165)
# Getting the type of 'ellipord' (line 4165)
ellipord_265436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4165, 34), 'ellipord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4165, 24), list_265434, ellipord_265436)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265433, list_265434))
# Adding element type (key, value) (line 4162)
str_265437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4166, 15), 'str', 'elliptic')

# Obtaining an instance of the builtin type 'list' (line 4166)
list_265438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4166, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 4166)
# Adding element type (line 4166)
# Getting the type of 'ellipap' (line 4166)
ellipap_265439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4166, 28), 'ellipap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4166, 27), list_265438, ellipap_265439)
# Adding element type (line 4166)
# Getting the type of 'ellipord' (line 4166)
ellipord_265440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4166, 37), 'ellipord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4166, 27), list_265438, ellipord_265440)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265437, list_265438))
# Adding element type (key, value) (line 4162)
str_265441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4167, 15), 'str', 'ellip')

# Obtaining an instance of the builtin type 'list' (line 4167)
list_265442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4167, 24), 'list')
# Adding type elements to the builtin type 'list' instance (line 4167)
# Adding element type (line 4167)
# Getting the type of 'ellipap' (line 4167)
ellipap_265443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4167, 25), 'ellipap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4167, 24), list_265442, ellipap_265443)
# Adding element type (line 4167)
# Getting the type of 'ellipord' (line 4167)
ellipord_265444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4167, 34), 'ellipord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4167, 24), list_265442, ellipord_265444)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265441, list_265442))
# Adding element type (key, value) (line 4162)
str_265445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4169, 15), 'str', 'bessel')

# Obtaining an instance of the builtin type 'list' (line 4169)
list_265446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4169, 25), 'list')
# Adding type elements to the builtin type 'list' instance (line 4169)
# Adding element type (line 4169)
# Getting the type of 'besselap' (line 4169)
besselap_265447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4169, 26), 'besselap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4169, 25), list_265446, besselap_265447)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265445, list_265446))
# Adding element type (key, value) (line 4162)
str_265448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4170, 15), 'str', 'bessel_phase')

# Obtaining an instance of the builtin type 'list' (line 4170)
list_265449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4170, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 4170)
# Adding element type (line 4170)
# Getting the type of 'besselap' (line 4170)
besselap_265450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4170, 32), 'besselap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4170, 31), list_265449, besselap_265450)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265448, list_265449))
# Adding element type (key, value) (line 4162)
str_265451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4171, 15), 'str', 'bessel_delay')

# Obtaining an instance of the builtin type 'list' (line 4171)
list_265452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4171, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 4171)
# Adding element type (line 4171)
# Getting the type of 'besselap' (line 4171)
besselap_265453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4171, 32), 'besselap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4171, 31), list_265452, besselap_265453)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265451, list_265452))
# Adding element type (key, value) (line 4162)
str_265454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4172, 15), 'str', 'bessel_mag')

# Obtaining an instance of the builtin type 'list' (line 4172)
list_265455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4172, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 4172)
# Adding element type (line 4172)
# Getting the type of 'besselap' (line 4172)
besselap_265456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4172, 30), 'besselap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4172, 29), list_265455, besselap_265456)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265454, list_265455))
# Adding element type (key, value) (line 4162)
str_265457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4174, 15), 'str', 'cheby1')

# Obtaining an instance of the builtin type 'list' (line 4174)
list_265458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4174, 25), 'list')
# Adding type elements to the builtin type 'list' instance (line 4174)
# Adding element type (line 4174)
# Getting the type of 'cheb1ap' (line 4174)
cheb1ap_265459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4174, 26), 'cheb1ap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4174, 25), list_265458, cheb1ap_265459)
# Adding element type (line 4174)
# Getting the type of 'cheb1ord' (line 4174)
cheb1ord_265460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4174, 35), 'cheb1ord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4174, 25), list_265458, cheb1ord_265460)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265457, list_265458))
# Adding element type (key, value) (line 4162)
str_265461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4175, 15), 'str', 'chebyshev1')

# Obtaining an instance of the builtin type 'list' (line 4175)
list_265462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4175, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 4175)
# Adding element type (line 4175)
# Getting the type of 'cheb1ap' (line 4175)
cheb1ap_265463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4175, 30), 'cheb1ap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4175, 29), list_265462, cheb1ap_265463)
# Adding element type (line 4175)
# Getting the type of 'cheb1ord' (line 4175)
cheb1ord_265464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4175, 39), 'cheb1ord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4175, 29), list_265462, cheb1ord_265464)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265461, list_265462))
# Adding element type (key, value) (line 4162)
str_265465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4176, 15), 'str', 'chebyshevi')

# Obtaining an instance of the builtin type 'list' (line 4176)
list_265466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4176, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 4176)
# Adding element type (line 4176)
# Getting the type of 'cheb1ap' (line 4176)
cheb1ap_265467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4176, 30), 'cheb1ap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4176, 29), list_265466, cheb1ap_265467)
# Adding element type (line 4176)
# Getting the type of 'cheb1ord' (line 4176)
cheb1ord_265468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4176, 39), 'cheb1ord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4176, 29), list_265466, cheb1ord_265468)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265465, list_265466))
# Adding element type (key, value) (line 4162)
str_265469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4178, 15), 'str', 'cheby2')

# Obtaining an instance of the builtin type 'list' (line 4178)
list_265470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4178, 25), 'list')
# Adding type elements to the builtin type 'list' instance (line 4178)
# Adding element type (line 4178)
# Getting the type of 'cheb2ap' (line 4178)
cheb2ap_265471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4178, 26), 'cheb2ap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4178, 25), list_265470, cheb2ap_265471)
# Adding element type (line 4178)
# Getting the type of 'cheb2ord' (line 4178)
cheb2ord_265472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4178, 35), 'cheb2ord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4178, 25), list_265470, cheb2ord_265472)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265469, list_265470))
# Adding element type (key, value) (line 4162)
str_265473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4179, 15), 'str', 'chebyshev2')

# Obtaining an instance of the builtin type 'list' (line 4179)
list_265474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4179, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 4179)
# Adding element type (line 4179)
# Getting the type of 'cheb2ap' (line 4179)
cheb2ap_265475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4179, 30), 'cheb2ap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4179, 29), list_265474, cheb2ap_265475)
# Adding element type (line 4179)
# Getting the type of 'cheb2ord' (line 4179)
cheb2ord_265476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4179, 39), 'cheb2ord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4179, 29), list_265474, cheb2ord_265476)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265473, list_265474))
# Adding element type (key, value) (line 4162)
str_265477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4180, 15), 'str', 'chebyshevii')

# Obtaining an instance of the builtin type 'list' (line 4180)
list_265478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4180, 30), 'list')
# Adding type elements to the builtin type 'list' instance (line 4180)
# Adding element type (line 4180)
# Getting the type of 'cheb2ap' (line 4180)
cheb2ap_265479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4180, 31), 'cheb2ap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4180, 30), list_265478, cheb2ap_265479)
# Adding element type (line 4180)
# Getting the type of 'cheb2ord' (line 4180)
cheb2ord_265480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4180, 40), 'cheb2ord')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4180, 30), list_265478, cheb2ord_265480)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4162, 14), dict_265424, (str_265477, list_265478))

# Assigning a type to the variable 'filter_dict' (line 4162)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4162, 0), 'filter_dict', dict_265424)

# Assigning a Dict to a Name (line 4183):

# Assigning a Dict to a Name (line 4183):

# Obtaining an instance of the builtin type 'dict' (line 4183)
dict_265481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4183, 12), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 4183)
# Adding element type (key, value) (line 4183)
str_265482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4183, 13), 'str', 'band')
str_265483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4183, 21), 'str', 'bandpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265482, str_265483))
# Adding element type (key, value) (line 4183)
str_265484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4184, 13), 'str', 'bandpass')
str_265485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4184, 25), 'str', 'bandpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265484, str_265485))
# Adding element type (key, value) (line 4183)
str_265486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4185, 13), 'str', 'pass')
str_265487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4185, 21), 'str', 'bandpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265486, str_265487))
# Adding element type (key, value) (line 4183)
str_265488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4186, 13), 'str', 'bp')
str_265489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4186, 19), 'str', 'bandpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265488, str_265489))
# Adding element type (key, value) (line 4183)
str_265490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4188, 13), 'str', 'bs')
str_265491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4188, 19), 'str', 'bandstop')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265490, str_265491))
# Adding element type (key, value) (line 4183)
str_265492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4189, 13), 'str', 'bandstop')
str_265493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4189, 25), 'str', 'bandstop')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265492, str_265493))
# Adding element type (key, value) (line 4183)
str_265494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4190, 13), 'str', 'bands')
str_265495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4190, 22), 'str', 'bandstop')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265494, str_265495))
# Adding element type (key, value) (line 4183)
str_265496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4191, 13), 'str', 'stop')
str_265497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4191, 21), 'str', 'bandstop')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265496, str_265497))
# Adding element type (key, value) (line 4183)
str_265498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4193, 13), 'str', 'l')
str_265499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4193, 18), 'str', 'lowpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265498, str_265499))
# Adding element type (key, value) (line 4183)
str_265500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4194, 13), 'str', 'low')
str_265501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4194, 20), 'str', 'lowpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265500, str_265501))
# Adding element type (key, value) (line 4183)
str_265502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4195, 13), 'str', 'lowpass')
str_265503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4195, 24), 'str', 'lowpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265502, str_265503))
# Adding element type (key, value) (line 4183)
str_265504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4196, 13), 'str', 'lp')
str_265505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4196, 19), 'str', 'lowpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265504, str_265505))
# Adding element type (key, value) (line 4183)
str_265506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4198, 13), 'str', 'high')
str_265507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4198, 21), 'str', 'highpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265506, str_265507))
# Adding element type (key, value) (line 4183)
str_265508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4199, 13), 'str', 'highpass')
str_265509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4199, 25), 'str', 'highpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265508, str_265509))
# Adding element type (key, value) (line 4183)
str_265510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4200, 13), 'str', 'h')
str_265511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4200, 18), 'str', 'highpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265510, str_265511))
# Adding element type (key, value) (line 4183)
str_265512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4201, 13), 'str', 'hp')
str_265513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4201, 19), 'str', 'highpass')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4183, 12), dict_265481, (str_265512, str_265513))

# Assigning a type to the variable 'band_dict' (line 4183)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4183, 0), 'band_dict', dict_265481)

# Assigning a Dict to a Name (line 4204):

# Assigning a Dict to a Name (line 4204):

# Obtaining an instance of the builtin type 'dict' (line 4204)
dict_265514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4204, 15), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 4204)
# Adding element type (key, value) (line 4204)
str_265515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4204, 16), 'str', 'bessel')
str_265516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4204, 26), 'str', 'phase')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4204, 15), dict_265514, (str_265515, str_265516))
# Adding element type (key, value) (line 4204)
str_265517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4205, 16), 'str', 'bessel_phase')
str_265518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4205, 32), 'str', 'phase')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4204, 15), dict_265514, (str_265517, str_265518))
# Adding element type (key, value) (line 4204)
str_265519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4206, 16), 'str', 'bessel_delay')
str_265520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4206, 32), 'str', 'delay')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4204, 15), dict_265514, (str_265519, str_265520))
# Adding element type (key, value) (line 4204)
str_265521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4207, 16), 'str', 'bessel_mag')
str_265522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4207, 30), 'str', 'mag')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4204, 15), dict_265514, (str_265521, str_265522))

# Assigning a type to the variable 'bessel_norms' (line 4204)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4204, 0), 'bessel_norms', dict_265514)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
