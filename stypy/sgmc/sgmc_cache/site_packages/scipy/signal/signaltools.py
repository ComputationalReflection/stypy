
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: # Author: Travis Oliphant
2: # 1999 -- 2002
3: 
4: from __future__ import division, print_function, absolute_import
5: 
6: import operator
7: import threading
8: import sys
9: import timeit
10: 
11: from . import sigtools, dlti
12: from ._upfirdn import upfirdn, _output_len
13: from scipy._lib.six import callable
14: from scipy._lib._version import NumpyVersion
15: from scipy import fftpack, linalg
16: from numpy import (allclose, angle, arange, argsort, array, asarray,
17:                    atleast_1d, atleast_2d, cast, dot, exp, expand_dims,
18:                    iscomplexobj, mean, ndarray, newaxis, ones, pi,
19:                    poly, polyadd, polyder, polydiv, polymul, polysub, polyval,
20:                    product, r_, ravel, real_if_close, reshape,
21:                    roots, sort, take, transpose, unique, where, zeros,
22:                    zeros_like)
23: import numpy as np
24: import math
25: from scipy.special import factorial
26: from .windows import get_window
27: from ._arraytools import axis_slice, axis_reverse, odd_ext, even_ext, const_ext
28: from .filter_design import cheby1, _validate_sos
29: from .fir_filter_design import firwin
30: 
31: if sys.version_info.major >= 3 and sys.version_info.minor >= 5:
32:     from math import gcd
33: else:
34:     from fractions import gcd
35: 
36: 
37: __all__ = ['correlate', 'fftconvolve', 'convolve', 'convolve2d', 'correlate2d',
38:            'order_filter', 'medfilt', 'medfilt2d', 'wiener', 'lfilter',
39:            'lfiltic', 'sosfilt', 'deconvolve', 'hilbert', 'hilbert2',
40:            'cmplx_sort', 'unique_roots', 'invres', 'invresz', 'residue',
41:            'residuez', 'resample', 'resample_poly', 'detrend',
42:            'lfilter_zi', 'sosfilt_zi', 'sosfiltfilt', 'choose_conv_method',
43:            'filtfilt', 'decimate', 'vectorstrength']
44: 
45: 
46: _modedict = {'valid': 0, 'same': 1, 'full': 2}
47: 
48: _boundarydict = {'fill': 0, 'pad': 0, 'wrap': 2, 'circular': 2, 'symm': 1,
49:                  'symmetric': 1, 'reflect': 4}
50: 
51: 
52: _rfft_mt_safe = (NumpyVersion(np.__version__) >= '1.9.0.dev-e24486e')
53: 
54: _rfft_lock = threading.Lock()
55: 
56: 
57: def _valfrommode(mode):
58:     try:
59:         val = _modedict[mode]
60:     except KeyError:
61:         if mode not in [0, 1, 2]:
62:             raise ValueError("Acceptable mode flags are 'valid' (0),"
63:                              " 'same' (1), or 'full' (2).")
64:         val = mode
65:     return val
66: 
67: 
68: def _bvalfromboundary(boundary):
69:     try:
70:         val = _boundarydict[boundary] << 2
71:     except KeyError:
72:         if val not in [0, 1, 2]:
73:             raise ValueError("Acceptable boundary flags are 'fill', 'wrap'"
74:                              " (or 'circular'), \n  and 'symm'"
75:                              " (or 'symmetric').")
76:         val = boundary << 2
77:     return val
78: 
79: 
80: def _inputs_swap_needed(mode, shape1, shape2):
81:     '''
82:     If in 'valid' mode, returns whether or not the input arrays need to be
83:     swapped depending on whether `shape1` is at least as large as `shape2` in
84:     every dimension.
85: 
86:     This is important for some of the correlation and convolution
87:     implementations in this module, where the larger array input needs to come
88:     before the smaller array input when operating in this mode.
89: 
90:     Note that if the mode provided is not 'valid', False is immediately
91:     returned.
92:     '''
93:     if mode == 'valid':
94:         ok1, ok2 = True, True
95: 
96:         for d1, d2 in zip(shape1, shape2):
97:             if not d1 >= d2:
98:                 ok1 = False
99:             if not d2 >= d1:
100:                 ok2 = False
101: 
102:         if not (ok1 or ok2):
103:             raise ValueError("For 'valid' mode, one must be at least "
104:                              "as large as the other in every dimension")
105: 
106:         return not ok1
107: 
108:     return False
109: 
110: 
111: def correlate(in1, in2, mode='full', method='auto'):
112:     r'''
113:     Cross-correlate two N-dimensional arrays.
114: 
115:     Cross-correlate `in1` and `in2`, with the output size determined by the
116:     `mode` argument.
117: 
118:     Parameters
119:     ----------
120:     in1 : array_like
121:         First input.
122:     in2 : array_like
123:         Second input. Should have the same number of dimensions as `in1`.
124:     mode : str {'full', 'valid', 'same'}, optional
125:         A string indicating the size of the output:
126: 
127:         ``full``
128:            The output is the full discrete linear cross-correlation
129:            of the inputs. (Default)
130:         ``valid``
131:            The output consists only of those elements that do not
132:            rely on the zero-padding. In 'valid' mode, either `in1` or `in2`
133:            must be at least as large as the other in every dimension.
134:         ``same``
135:            The output is the same size as `in1`, centered
136:            with respect to the 'full' output.
137:     method : str {'auto', 'direct', 'fft'}, optional
138:         A string indicating which method to use to calculate the correlation.
139: 
140:         ``direct``
141:            The correlation is determined directly from sums, the definition of
142:            correlation.
143:         ``fft``
144:            The Fast Fourier Transform is used to perform the correlation more
145:            quickly (only available for numerical arrays.)
146:         ``auto``
147:            Automatically chooses direct or Fourier method based on an estimate
148:            of which is faster (default).  See `convolve` Notes for more detail.
149: 
150:            .. versionadded:: 0.19.0
151: 
152:     Returns
153:     -------
154:     correlate : array
155:         An N-dimensional array containing a subset of the discrete linear
156:         cross-correlation of `in1` with `in2`.
157: 
158:     See Also
159:     --------
160:     choose_conv_method : contains more documentation on `method`.
161: 
162:     Notes
163:     -----
164:     The correlation z of two d-dimensional arrays x and y is defined as::
165: 
166:         z[...,k,...] = sum[..., i_l, ...] x[..., i_l,...] * conj(y[..., i_l - k,...])
167: 
168:     This way, if x and y are 1-D arrays and ``z = correlate(x, y, 'full')`` then
169: 
170:     .. math::
171: 
172:           z[k] = (x * y)(k - N + 1)
173:                = \sum_{l=0}^{||x||-1}x_l y_{l-k+N-1}^{*}
174: 
175:     for :math:`k = 0, 1, ..., ||x|| + ||y|| - 2`
176: 
177:     where :math:`||x||` is the length of ``x``, :math:`N = \max(||x||,||y||)`,
178:     and :math:`y_m` is 0 when m is outside the range of y.
179: 
180:     ``method='fft'`` only works for numerical arrays as it relies on
181:     `fftconvolve`. In certain cases (i.e., arrays of objects or when
182:     rounding integers can lose precision), ``method='direct'`` is always used.
183: 
184:     Examples
185:     --------
186:     Implement a matched filter using cross-correlation, to recover a signal
187:     that has passed through a noisy channel.
188: 
189:     >>> from scipy import signal
190:     >>> sig = np.repeat([0., 1., 1., 0., 1., 0., 0., 1.], 128)
191:     >>> sig_noise = sig + np.random.randn(len(sig))
192:     >>> corr = signal.correlate(sig_noise, np.ones(128), mode='same') / 128
193: 
194:     >>> import matplotlib.pyplot as plt
195:     >>> clock = np.arange(64, len(sig), 128)
196:     >>> fig, (ax_orig, ax_noise, ax_corr) = plt.subplots(3, 1, sharex=True)
197:     >>> ax_orig.plot(sig)
198:     >>> ax_orig.plot(clock, sig[clock], 'ro')
199:     >>> ax_orig.set_title('Original signal')
200:     >>> ax_noise.plot(sig_noise)
201:     >>> ax_noise.set_title('Signal with noise')
202:     >>> ax_corr.plot(corr)
203:     >>> ax_corr.plot(clock, corr[clock], 'ro')
204:     >>> ax_corr.axhline(0.5, ls=':')
205:     >>> ax_corr.set_title('Cross-correlated with rectangular pulse')
206:     >>> ax_orig.margins(0, 0.1)
207:     >>> fig.tight_layout()
208:     >>> fig.show()
209: 
210:     '''
211:     in1 = asarray(in1)
212:     in2 = asarray(in2)
213: 
214:     if in1.ndim == in2.ndim == 0:
215:         return in1 * in2
216:     elif in1.ndim != in2.ndim:
217:         raise ValueError("in1 and in2 should have the same dimensionality")
218: 
219:     # Don't use _valfrommode, since correlate should not accept numeric modes
220:     try:
221:         val = _modedict[mode]
222:     except KeyError:
223:         raise ValueError("Acceptable mode flags are 'valid',"
224:                          " 'same', or 'full'.")
225: 
226:     # this either calls fftconvolve or this function with method=='direct'
227:     if method in ('fft', 'auto'):
228:         return convolve(in1, _reverse_and_conj(in2), mode, method)
229: 
230:     # fastpath to faster numpy.correlate for 1d inputs when possible
231:     if _np_conv_ok(in1, in2, mode):
232:         return np.correlate(in1, in2, mode)
233: 
234:     # _correlateND is far slower when in2.size > in1.size, so swap them
235:     # and then undo the effect afterward if mode == 'full'.  Also, it fails
236:     # with 'valid' mode if in2 is larger than in1, so swap those, too.
237:     # Don't swap inputs for 'same' mode, since shape of in1 matters.
238:     swapped_inputs = ((mode == 'full') and (in2.size > in1.size) or
239:                       _inputs_swap_needed(mode, in1.shape, in2.shape))
240: 
241:     if swapped_inputs:
242:         in1, in2 = in2, in1
243: 
244:     if mode == 'valid':
245:         ps = [i - j + 1 for i, j in zip(in1.shape, in2.shape)]
246:         out = np.empty(ps, in1.dtype)
247: 
248:         z = sigtools._correlateND(in1, in2, out, val)
249: 
250:     else:
251:         ps = [i + j - 1 for i, j in zip(in1.shape, in2.shape)]
252: 
253:         # zero pad input
254:         in1zpadded = np.zeros(ps, in1.dtype)
255:         sc = [slice(0, i) for i in in1.shape]
256:         in1zpadded[sc] = in1.copy()
257: 
258:         if mode == 'full':
259:             out = np.empty(ps, in1.dtype)
260:         elif mode == 'same':
261:             out = np.empty(in1.shape, in1.dtype)
262: 
263:         z = sigtools._correlateND(in1zpadded, in2, out, val)
264: 
265:     if swapped_inputs:
266:         # Reverse and conjugate to undo the effect of swapping inputs
267:         z = _reverse_and_conj(z)
268: 
269:     return z
270: 
271: 
272: def _centered(arr, newshape):
273:     # Return the center newshape portion of the array.
274:     newshape = asarray(newshape)
275:     currshape = array(arr.shape)
276:     startind = (currshape - newshape) // 2
277:     endind = startind + newshape
278:     myslice = [slice(startind[k], endind[k]) for k in range(len(endind))]
279:     return arr[tuple(myslice)]
280: 
281: 
282: def fftconvolve(in1, in2, mode="full"):
283:     '''Convolve two N-dimensional arrays using FFT.
284: 
285:     Convolve `in1` and `in2` using the fast Fourier transform method, with
286:     the output size determined by the `mode` argument.
287: 
288:     This is generally much faster than `convolve` for large arrays (n > ~500),
289:     but can be slower when only a few output values are needed, and can only
290:     output float arrays (int or object array inputs will be cast to float).
291: 
292:     As of v0.19, `convolve` automatically chooses this method or the direct
293:     method based on an estimation of which is faster.
294: 
295:     Parameters
296:     ----------
297:     in1 : array_like
298:         First input.
299:     in2 : array_like
300:         Second input. Should have the same number of dimensions as `in1`.
301:         If operating in 'valid' mode, either `in1` or `in2` must be
302:         at least as large as the other in every dimension.
303:     mode : str {'full', 'valid', 'same'}, optional
304:         A string indicating the size of the output:
305: 
306:         ``full``
307:            The output is the full discrete linear convolution
308:            of the inputs. (Default)
309:         ``valid``
310:            The output consists only of those elements that do not
311:            rely on the zero-padding.
312:         ``same``
313:            The output is the same size as `in1`, centered
314:            with respect to the 'full' output.
315: 
316:     Returns
317:     -------
318:     out : array
319:         An N-dimensional array containing a subset of the discrete linear
320:         convolution of `in1` with `in2`.
321: 
322:     Examples
323:     --------
324:     Autocorrelation of white noise is an impulse.
325: 
326:     >>> from scipy import signal
327:     >>> sig = np.random.randn(1000)
328:     >>> autocorr = signal.fftconvolve(sig, sig[::-1], mode='full')
329: 
330:     >>> import matplotlib.pyplot as plt
331:     >>> fig, (ax_orig, ax_mag) = plt.subplots(2, 1)
332:     >>> ax_orig.plot(sig)
333:     >>> ax_orig.set_title('White noise')
334:     >>> ax_mag.plot(np.arange(-len(sig)+1,len(sig)), autocorr)
335:     >>> ax_mag.set_title('Autocorrelation')
336:     >>> fig.tight_layout()
337:     >>> fig.show()
338: 
339:     Gaussian blur implemented using FFT convolution.  Notice the dark borders
340:     around the image, due to the zero-padding beyond its boundaries.
341:     The `convolve2d` function allows for other types of image boundaries,
342:     but is far slower.
343: 
344:     >>> from scipy import misc
345:     >>> face = misc.face(gray=True)
346:     >>> kernel = np.outer(signal.gaussian(70, 8), signal.gaussian(70, 8))
347:     >>> blurred = signal.fftconvolve(face, kernel, mode='same')
348: 
349:     >>> fig, (ax_orig, ax_kernel, ax_blurred) = plt.subplots(3, 1,
350:     ...                                                      figsize=(6, 15))
351:     >>> ax_orig.imshow(face, cmap='gray')
352:     >>> ax_orig.set_title('Original')
353:     >>> ax_orig.set_axis_off()
354:     >>> ax_kernel.imshow(kernel, cmap='gray')
355:     >>> ax_kernel.set_title('Gaussian kernel')
356:     >>> ax_kernel.set_axis_off()
357:     >>> ax_blurred.imshow(blurred, cmap='gray')
358:     >>> ax_blurred.set_title('Blurred')
359:     >>> ax_blurred.set_axis_off()
360:     >>> fig.show()
361: 
362:     '''
363:     in1 = asarray(in1)
364:     in2 = asarray(in2)
365: 
366:     if in1.ndim == in2.ndim == 0:  # scalar inputs
367:         return in1 * in2
368:     elif not in1.ndim == in2.ndim:
369:         raise ValueError("in1 and in2 should have the same dimensionality")
370:     elif in1.size == 0 or in2.size == 0:  # empty arrays
371:         return array([])
372: 
373:     s1 = array(in1.shape)
374:     s2 = array(in2.shape)
375:     complex_result = (np.issubdtype(in1.dtype, np.complexfloating) or
376:                       np.issubdtype(in2.dtype, np.complexfloating))
377:     shape = s1 + s2 - 1
378: 
379:     # Check that input sizes are compatible with 'valid' mode
380:     if _inputs_swap_needed(mode, s1, s2):
381:         # Convolution is commutative; order doesn't have any effect on output
382:         in1, s1, in2, s2 = in2, s2, in1, s1
383: 
384:     # Speed up FFT by padding to optimal size for FFTPACK
385:     fshape = [fftpack.helper.next_fast_len(int(d)) for d in shape]
386:     fslice = tuple([slice(0, int(sz)) for sz in shape])
387:     # Pre-1.9 NumPy FFT routines are not threadsafe.  For older NumPys, make
388:     # sure we only call rfftn/irfftn from one thread at a time.
389:     if not complex_result and (_rfft_mt_safe or _rfft_lock.acquire(False)):
390:         try:
391:             sp1 = np.fft.rfftn(in1, fshape)
392:             sp2 = np.fft.rfftn(in2, fshape)
393:             ret = (np.fft.irfftn(sp1 * sp2, fshape)[fslice].copy())
394:         finally:
395:             if not _rfft_mt_safe:
396:                 _rfft_lock.release()
397:     else:
398:         # If we're here, it's either because we need a complex result, or we
399:         # failed to acquire _rfft_lock (meaning rfftn isn't threadsafe and
400:         # is already in use by another thread).  In either case, use the
401:         # (threadsafe but slower) SciPy complex-FFT routines instead.
402:         sp1 = fftpack.fftn(in1, fshape)
403:         sp2 = fftpack.fftn(in2, fshape)
404:         ret = fftpack.ifftn(sp1 * sp2)[fslice].copy()
405:         if not complex_result:
406:             ret = ret.real
407: 
408:     if mode == "full":
409:         return ret
410:     elif mode == "same":
411:         return _centered(ret, s1)
412:     elif mode == "valid":
413:         return _centered(ret, s1 - s2 + 1)
414:     else:
415:         raise ValueError("Acceptable mode flags are 'valid',"
416:                          " 'same', or 'full'.")
417: 
418: 
419: def _numeric_arrays(arrays, kinds='buifc'):
420:     '''
421:     See if a list of arrays are all numeric.
422: 
423:     Parameters
424:     ----------
425:     ndarrays : array or list of arrays
426:         arrays to check if numeric.
427:     numeric_kinds : string-like
428:         The dtypes of the arrays to be checked. If the dtype.kind of
429:         the ndarrays are not in this string the function returns False and
430:         otherwise returns True.
431:     '''
432:     if type(arrays) == ndarray:
433:         return arrays.dtype.kind in kinds
434:     for array_ in arrays:
435:         if array_.dtype.kind not in kinds:
436:             return False
437:     return True
438: 
439: 
440: def _prod(iterable):
441:     '''
442:     Product of a list of numbers.
443:     Faster than np.prod for short lists like array shapes.
444:     '''
445:     product = 1
446:     for x in iterable:
447:         product *= x
448:     return product
449: 
450: 
451: def _fftconv_faster(x, h, mode):
452:     '''
453:     See if using `fftconvolve` or `_correlateND` is faster. The boolean value
454:     returned depends on the sizes and shapes of the input values.
455: 
456:     The big O ratios were found to hold across different machines, which makes
457:     sense as it's the ratio that matters (the effective speed of the computer
458:     is found in both big O constants). Regardless, this had been tuned on an
459:     early 2015 MacBook Pro with 8GB RAM and an Intel i5 processor.
460:     '''
461:     if mode == 'full':
462:         out_shape = [n + k - 1 for n, k in zip(x.shape, h.shape)]
463:         big_O_constant = 10963.92823819 if x.ndim == 1 else 8899.1104874
464:     elif mode == 'same':
465:         out_shape = x.shape
466:         if x.ndim == 1:
467:             if h.size <= x.size:
468:                 big_O_constant = 7183.41306773
469:             else:
470:                 big_O_constant = 856.78174111
471:         else:
472:             big_O_constant = 34519.21021589
473:     elif mode == 'valid':
474:         out_shape = [n - k + 1 for n, k in zip(x.shape, h.shape)]
475:         big_O_constant = 41954.28006344 if x.ndim == 1 else 66453.24316434
476:     else:
477:         raise ValueError('mode is invalid')
478: 
479:     # see whether the Fourier transform convolution method or the direct
480:     # convolution method is faster (discussed in scikit-image PR #1792)
481:     direct_time = (x.size * h.size * _prod(out_shape))
482:     fft_time = sum(n * math.log(n) for n in (x.shape + h.shape +
483:                                              tuple(out_shape)))
484:     return big_O_constant * fft_time < direct_time
485: 
486: 
487: def _reverse_and_conj(x):
488:     '''
489:     Reverse array `x` in all dimensions and perform the complex conjugate
490:     '''
491:     reverse = [slice(None, None, -1)] * x.ndim
492:     return x[reverse].conj()
493: 
494: 
495: def _np_conv_ok(volume, kernel, mode):
496:     '''
497:     See if numpy supports convolution of `volume` and `kernel` (i.e. both are
498:     1D ndarrays and of the appropriate shape).  Numpy's 'same' mode uses the
499:     size of the larger input, while Scipy's uses the size of the first input.
500:     '''
501:     np_conv_ok = volume.ndim == kernel.ndim == 1
502:     return np_conv_ok and (volume.size >= kernel.size or mode != 'same')
503: 
504: 
505: def _timeit_fast(stmt="pass", setup="pass", repeat=3):
506:     '''
507:     Returns the time the statement/function took, in seconds.
508: 
509:     Faster, less precise version of IPython's timeit. `stmt` can be a statement
510:     written as a string or a callable.
511: 
512:     Will do only 1 loop (like IPython's timeit) with no repetitions
513:     (unlike IPython) for very slow functions.  For fast functions, only does
514:     enough loops to take 5 ms, which seems to produce similar results (on
515:     Windows at least), and avoids doing an extraneous cycle that isn't
516:     measured.
517: 
518:     '''
519:     timer = timeit.Timer(stmt, setup)
520: 
521:     # determine number of calls per rep so total time for 1 rep >= 5 ms
522:     x = 0
523:     for p in range(0, 10):
524:         number = 10**p
525:         x = timer.timeit(number)  # seconds
526:         if x >= 5e-3 / 10:  # 5 ms for final test, 1/10th that for this one
527:             break
528:     if x > 1:  # second
529:         # If it's macroscopic, don't bother with repetitions
530:         best = x
531:     else:
532:         number *= 10
533:         r = timer.repeat(repeat, number)
534:         best = min(r)
535: 
536:     sec = best / number
537:     return sec
538: 
539: 
540: def choose_conv_method(in1, in2, mode='full', measure=False):
541:     '''
542:     Find the fastest convolution/correlation method.
543: 
544:     This primarily exists to be called during the ``method='auto'`` option in
545:     `convolve` and `correlate`, but can also be used when performing many
546:     convolutions of the same input shapes and dtypes, determining
547:     which method to use for all of them, either to avoid the overhead of the
548:     'auto' option or to use accurate real-world measurements.
549: 
550:     Parameters
551:     ----------
552:     in1 : array_like
553:         The first argument passed into the convolution function.
554:     in2 : array_like
555:         The second argument passed into the convolution function.
556:     mode : str {'full', 'valid', 'same'}, optional
557:         A string indicating the size of the output:
558: 
559:         ``full``
560:            The output is the full discrete linear convolution
561:            of the inputs. (Default)
562:         ``valid``
563:            The output consists only of those elements that do not
564:            rely on the zero-padding.
565:         ``same``
566:            The output is the same size as `in1`, centered
567:            with respect to the 'full' output.
568:     measure : bool, optional
569:         If True, run and time the convolution of `in1` and `in2` with both
570:         methods and return the fastest. If False (default), predict the fastest
571:         method using precomputed values.
572: 
573:     Returns
574:     -------
575:     method : str
576:         A string indicating which convolution method is fastest, either
577:         'direct' or 'fft'
578:     times : dict, optional
579:         A dictionary containing the times (in seconds) needed for each method.
580:         This value is only returned if ``measure=True``.
581: 
582:     See Also
583:     --------
584:     convolve
585:     correlate
586: 
587:     Notes
588:     -----
589:     For large n, ``measure=False`` is accurate and can quickly determine the
590:     fastest method to perform the convolution.  However, this is not as
591:     accurate for small n (when any dimension in the input or output is small).
592: 
593:     In practice, we found that this function estimates the faster method up to
594:     a multiplicative factor of 5 (i.e., the estimated method is *at most* 5
595:     times slower than the fastest method). The estimation values were tuned on
596:     an early 2015 MacBook Pro with 8GB RAM but we found that the prediction
597:     held *fairly* accurately across different machines.
598: 
599:     If ``measure=True``, time the convolutions. Because this function uses
600:     `fftconvolve`, an error will be thrown if it does not support the inputs.
601:     There are cases when `fftconvolve` supports the inputs but this function
602:     returns `direct` (e.g., to protect against floating point integer
603:     precision).
604: 
605:     .. versionadded:: 0.19
606: 
607:     Examples
608:     --------
609:     Estimate the fastest method for a given input:
610: 
611:     >>> from scipy import signal
612:     >>> a = np.random.randn(1000)
613:     >>> b = np.random.randn(1000000)
614:     >>> method = signal.choose_conv_method(a, b, mode='same')
615:     >>> method
616:     'fft'
617: 
618:     This can then be applied to other arrays of the same dtype and shape:
619: 
620:     >>> c = np.random.randn(1000)
621:     >>> d = np.random.randn(1000000)
622:     >>> # `method` works with correlate and convolve
623:     >>> corr1 = signal.correlate(a, b, mode='same', method=method)
624:     >>> corr2 = signal.correlate(c, d, mode='same', method=method)
625:     >>> conv1 = signal.convolve(a, b, mode='same', method=method)
626:     >>> conv2 = signal.convolve(c, d, mode='same', method=method)
627: 
628:     '''
629:     volume = asarray(in1)
630:     kernel = asarray(in2)
631: 
632:     if measure:
633:         times = {}
634:         for method in ['fft', 'direct']:
635:             times[method] = _timeit_fast(lambda: convolve(volume, kernel,
636:                                          mode=mode, method=method))
637: 
638:         chosen_method = 'fft' if times['fft'] < times['direct'] else 'direct'
639:         return chosen_method, times
640: 
641:     # fftconvolve doesn't support complex256
642:     fftconv_unsup = "complex256" if sys.maxsize > 2**32 else "complex192"
643:     if hasattr(np, fftconv_unsup):
644:         if volume.dtype == fftconv_unsup or kernel.dtype == fftconv_unsup:
645:             return 'direct'
646: 
647:     # for integer input,
648:     # catch when more precision required than float provides (representing an
649:     # integer as float can lose precision in fftconvolve if larger than 2**52)
650:     if any([_numeric_arrays([x], kinds='ui') for x in [volume, kernel]]):
651:         max_value = int(np.abs(volume).max()) * int(np.abs(kernel).max())
652:         max_value *= int(min(volume.size, kernel.size))
653:         if max_value > 2**np.finfo('float').nmant - 1:
654:             return 'direct'
655: 
656:     if _numeric_arrays([volume, kernel], kinds='b'):
657:         return 'direct'
658: 
659:     if _numeric_arrays([volume, kernel]):
660:         if _fftconv_faster(volume, kernel, mode):
661:             return 'fft'
662: 
663:     return 'direct'
664: 
665: 
666: def convolve(in1, in2, mode='full', method='auto'):
667:     '''
668:     Convolve two N-dimensional arrays.
669: 
670:     Convolve `in1` and `in2`, with the output size determined by the
671:     `mode` argument.
672: 
673:     Parameters
674:     ----------
675:     in1 : array_like
676:         First input.
677:     in2 : array_like
678:         Second input. Should have the same number of dimensions as `in1`.
679:     mode : str {'full', 'valid', 'same'}, optional
680:         A string indicating the size of the output:
681: 
682:         ``full``
683:            The output is the full discrete linear convolution
684:            of the inputs. (Default)
685:         ``valid``
686:            The output consists only of those elements that do not
687:            rely on the zero-padding. In 'valid' mode, either `in1` or `in2`
688:            must be at least as large as the other in every dimension.
689:         ``same``
690:            The output is the same size as `in1`, centered
691:            with respect to the 'full' output.
692:     method : str {'auto', 'direct', 'fft'}, optional
693:         A string indicating which method to use to calculate the convolution.
694: 
695:         ``direct``
696:            The convolution is determined directly from sums, the definition of
697:            convolution.
698:         ``fft``
699:            The Fourier Transform is used to perform the convolution by calling
700:            `fftconvolve`.
701:         ``auto``
702:            Automatically chooses direct or Fourier method based on an estimate
703:            of which is faster (default).  See Notes for more detail.
704: 
705:            .. versionadded:: 0.19.0
706: 
707:     Returns
708:     -------
709:     convolve : array
710:         An N-dimensional array containing a subset of the discrete linear
711:         convolution of `in1` with `in2`.
712: 
713:     See Also
714:     --------
715:     numpy.polymul : performs polynomial multiplication (same operation, but
716:                     also accepts poly1d objects)
717:     choose_conv_method : chooses the fastest appropriate convolution method
718:     fftconvolve
719: 
720:     Notes
721:     -----
722:     By default, `convolve` and `correlate` use ``method='auto'``, which calls
723:     `choose_conv_method` to choose the fastest method using pre-computed
724:     values (`choose_conv_method` can also measure real-world timing with a
725:     keyword argument). Because `fftconvolve` relies on floating point numbers,
726:     there are certain constraints that may force `method=direct` (more detail
727:     in `choose_conv_method` docstring).
728: 
729:     Examples
730:     --------
731:     Smooth a square pulse using a Hann window:
732: 
733:     >>> from scipy import signal
734:     >>> sig = np.repeat([0., 1., 0.], 100)
735:     >>> win = signal.hann(50)
736:     >>> filtered = signal.convolve(sig, win, mode='same') / sum(win)
737: 
738:     >>> import matplotlib.pyplot as plt
739:     >>> fig, (ax_orig, ax_win, ax_filt) = plt.subplots(3, 1, sharex=True)
740:     >>> ax_orig.plot(sig)
741:     >>> ax_orig.set_title('Original pulse')
742:     >>> ax_orig.margins(0, 0.1)
743:     >>> ax_win.plot(win)
744:     >>> ax_win.set_title('Filter impulse response')
745:     >>> ax_win.margins(0, 0.1)
746:     >>> ax_filt.plot(filtered)
747:     >>> ax_filt.set_title('Filtered signal')
748:     >>> ax_filt.margins(0, 0.1)
749:     >>> fig.tight_layout()
750:     >>> fig.show()
751: 
752:     '''
753:     volume = asarray(in1)
754:     kernel = asarray(in2)
755: 
756:     if volume.ndim == kernel.ndim == 0:
757:         return volume * kernel
758: 
759:     if _inputs_swap_needed(mode, volume.shape, kernel.shape):
760:         # Convolution is commutative; order doesn't have any effect on output
761:         volume, kernel = kernel, volume
762: 
763:     if method == 'auto':
764:         method = choose_conv_method(volume, kernel, mode=mode)
765: 
766:     if method == 'fft':
767:         out = fftconvolve(volume, kernel, mode=mode)
768:         result_type = np.result_type(volume, kernel)
769:         if result_type.kind in {'u', 'i'}:
770:             out = np.around(out)
771:         return out.astype(result_type)
772: 
773:     # fastpath to faster numpy.convolve for 1d inputs when possible
774:     if _np_conv_ok(volume, kernel, mode):
775:         return np.convolve(volume, kernel, mode)
776: 
777:     return correlate(volume, _reverse_and_conj(kernel), mode, 'direct')
778: 
779: 
780: def order_filter(a, domain, rank):
781:     '''
782:     Perform an order filter on an N-dimensional array.
783: 
784:     Perform an order filter on the array in.  The domain argument acts as a
785:     mask centered over each pixel.  The non-zero elements of domain are
786:     used to select elements surrounding each input pixel which are placed
787:     in a list.   The list is sorted, and the output for that pixel is the
788:     element corresponding to rank in the sorted list.
789: 
790:     Parameters
791:     ----------
792:     a : ndarray
793:         The N-dimensional input array.
794:     domain : array_like
795:         A mask array with the same number of dimensions as `a`.
796:         Each dimension should have an odd number of elements.
797:     rank : int
798:         A non-negative integer which selects the element from the
799:         sorted list (0 corresponds to the smallest element, 1 is the
800:         next smallest element, etc.).
801: 
802:     Returns
803:     -------
804:     out : ndarray
805:         The results of the order filter in an array with the same
806:         shape as `a`.
807: 
808:     Examples
809:     --------
810:     >>> from scipy import signal
811:     >>> x = np.arange(25).reshape(5, 5)
812:     >>> domain = np.identity(3)
813:     >>> x
814:     array([[ 0,  1,  2,  3,  4],
815:            [ 5,  6,  7,  8,  9],
816:            [10, 11, 12, 13, 14],
817:            [15, 16, 17, 18, 19],
818:            [20, 21, 22, 23, 24]])
819:     >>> signal.order_filter(x, domain, 0)
820:     array([[  0.,   0.,   0.,   0.,   0.],
821:            [  0.,   0.,   1.,   2.,   0.],
822:            [  0.,   5.,   6.,   7.,   0.],
823:            [  0.,  10.,  11.,  12.,   0.],
824:            [  0.,   0.,   0.,   0.,   0.]])
825:     >>> signal.order_filter(x, domain, 2)
826:     array([[  6.,   7.,   8.,   9.,   4.],
827:            [ 11.,  12.,  13.,  14.,   9.],
828:            [ 16.,  17.,  18.,  19.,  14.],
829:            [ 21.,  22.,  23.,  24.,  19.],
830:            [ 20.,  21.,  22.,  23.,  24.]])
831: 
832:     '''
833:     domain = asarray(domain)
834:     size = domain.shape
835:     for k in range(len(size)):
836:         if (size[k] % 2) != 1:
837:             raise ValueError("Each dimension of domain argument "
838:                              " should have an odd number of elements.")
839:     return sigtools._order_filterND(a, domain, rank)
840: 
841: 
842: def medfilt(volume, kernel_size=None):
843:     '''
844:     Perform a median filter on an N-dimensional array.
845: 
846:     Apply a median filter to the input array using a local window-size
847:     given by `kernel_size`.
848: 
849:     Parameters
850:     ----------
851:     volume : array_like
852:         An N-dimensional input array.
853:     kernel_size : array_like, optional
854:         A scalar or an N-length list giving the size of the median filter
855:         window in each dimension.  Elements of `kernel_size` should be odd.
856:         If `kernel_size` is a scalar, then this scalar is used as the size in
857:         each dimension. Default size is 3 for each dimension.
858: 
859:     Returns
860:     -------
861:     out : ndarray
862:         An array the same size as input containing the median filtered
863:         result.
864: 
865:     '''
866:     volume = atleast_1d(volume)
867:     if kernel_size is None:
868:         kernel_size = [3] * volume.ndim
869:     kernel_size = asarray(kernel_size)
870:     if kernel_size.shape == ():
871:         kernel_size = np.repeat(kernel_size.item(), volume.ndim)
872: 
873:     for k in range(volume.ndim):
874:         if (kernel_size[k] % 2) != 1:
875:             raise ValueError("Each element of kernel_size should be odd.")
876: 
877:     domain = ones(kernel_size)
878: 
879:     numels = product(kernel_size, axis=0)
880:     order = numels // 2
881:     return sigtools._order_filterND(volume, domain, order)
882: 
883: 
884: def wiener(im, mysize=None, noise=None):
885:     '''
886:     Perform a Wiener filter on an N-dimensional array.
887: 
888:     Apply a Wiener filter to the N-dimensional array `im`.
889: 
890:     Parameters
891:     ----------
892:     im : ndarray
893:         An N-dimensional array.
894:     mysize : int or array_like, optional
895:         A scalar or an N-length list giving the size of the Wiener filter
896:         window in each dimension.  Elements of mysize should be odd.
897:         If mysize is a scalar, then this scalar is used as the size
898:         in each dimension.
899:     noise : float, optional
900:         The noise-power to use. If None, then noise is estimated as the
901:         average of the local variance of the input.
902: 
903:     Returns
904:     -------
905:     out : ndarray
906:         Wiener filtered result with the same shape as `im`.
907: 
908:     '''
909:     im = asarray(im)
910:     if mysize is None:
911:         mysize = [3] * im.ndim
912:     mysize = asarray(mysize)
913:     if mysize.shape == ():
914:         mysize = np.repeat(mysize.item(), im.ndim)
915: 
916:     # Estimate the local mean
917:     lMean = correlate(im, ones(mysize), 'same') / product(mysize, axis=0)
918: 
919:     # Estimate the local variance
920:     lVar = (correlate(im ** 2, ones(mysize), 'same') /
921:             product(mysize, axis=0) - lMean ** 2)
922: 
923:     # Estimate the noise power if needed.
924:     if noise is None:
925:         noise = mean(ravel(lVar), axis=0)
926: 
927:     res = (im - lMean)
928:     res *= (1 - noise / lVar)
929:     res += lMean
930:     out = where(lVar < noise, lMean, res)
931: 
932:     return out
933: 
934: 
935: def convolve2d(in1, in2, mode='full', boundary='fill', fillvalue=0):
936:     '''
937:     Convolve two 2-dimensional arrays.
938: 
939:     Convolve `in1` and `in2` with output size determined by `mode`, and
940:     boundary conditions determined by `boundary` and `fillvalue`.
941: 
942:     Parameters
943:     ----------
944:     in1 : array_like
945:         First input.
946:     in2 : array_like
947:         Second input. Should have the same number of dimensions as `in1`.
948:         If operating in 'valid' mode, either `in1` or `in2` must be
949:         at least as large as the other in every dimension.
950:     mode : str {'full', 'valid', 'same'}, optional
951:         A string indicating the size of the output:
952: 
953:         ``full``
954:            The output is the full discrete linear convolution
955:            of the inputs. (Default)
956:         ``valid``
957:            The output consists only of those elements that do not
958:            rely on the zero-padding.
959:         ``same``
960:            The output is the same size as `in1`, centered
961:            with respect to the 'full' output.
962: 
963:     boundary : str {'fill', 'wrap', 'symm'}, optional
964:         A flag indicating how to handle boundaries:
965: 
966:         ``fill``
967:            pad input arrays with fillvalue. (default)
968:         ``wrap``
969:            circular boundary conditions.
970:         ``symm``
971:            symmetrical boundary conditions.
972: 
973:     fillvalue : scalar, optional
974:         Value to fill pad input arrays with. Default is 0.
975: 
976:     Returns
977:     -------
978:     out : ndarray
979:         A 2-dimensional array containing a subset of the discrete linear
980:         convolution of `in1` with `in2`.
981: 
982:     Examples
983:     --------
984:     Compute the gradient of an image by 2D convolution with a complex Scharr
985:     operator.  (Horizontal operator is real, vertical is imaginary.)  Use
986:     symmetric boundary condition to avoid creating edges at the image
987:     boundaries.
988: 
989:     >>> from scipy import signal
990:     >>> from scipy import misc
991:     >>> ascent = misc.ascent()
992:     >>> scharr = np.array([[ -3-3j, 0-10j,  +3 -3j],
993:     ...                    [-10+0j, 0+ 0j, +10 +0j],
994:     ...                    [ -3+3j, 0+10j,  +3 +3j]]) # Gx + j*Gy
995:     >>> grad = signal.convolve2d(ascent, scharr, boundary='symm', mode='same')
996: 
997:     >>> import matplotlib.pyplot as plt
998:     >>> fig, (ax_orig, ax_mag, ax_ang) = plt.subplots(3, 1, figsize=(6, 15))
999:     >>> ax_orig.imshow(ascent, cmap='gray')
1000:     >>> ax_orig.set_title('Original')
1001:     >>> ax_orig.set_axis_off()
1002:     >>> ax_mag.imshow(np.absolute(grad), cmap='gray')
1003:     >>> ax_mag.set_title('Gradient magnitude')
1004:     >>> ax_mag.set_axis_off()
1005:     >>> ax_ang.imshow(np.angle(grad), cmap='hsv') # hsv is cyclic, like angles
1006:     >>> ax_ang.set_title('Gradient orientation')
1007:     >>> ax_ang.set_axis_off()
1008:     >>> fig.show()
1009: 
1010:     '''
1011:     in1 = asarray(in1)
1012:     in2 = asarray(in2)
1013: 
1014:     if not in1.ndim == in2.ndim == 2:
1015:         raise ValueError('convolve2d inputs must both be 2D arrays')
1016: 
1017:     if _inputs_swap_needed(mode, in1.shape, in2.shape):
1018:         in1, in2 = in2, in1
1019: 
1020:     val = _valfrommode(mode)
1021:     bval = _bvalfromboundary(boundary)
1022:     out = sigtools._convolve2d(in1, in2, 1, val, bval, fillvalue)
1023:     return out
1024: 
1025: 
1026: def correlate2d(in1, in2, mode='full', boundary='fill', fillvalue=0):
1027:     '''
1028:     Cross-correlate two 2-dimensional arrays.
1029: 
1030:     Cross correlate `in1` and `in2` with output size determined by `mode`, and
1031:     boundary conditions determined by `boundary` and `fillvalue`.
1032: 
1033:     Parameters
1034:     ----------
1035:     in1 : array_like
1036:         First input.
1037:     in2 : array_like
1038:         Second input. Should have the same number of dimensions as `in1`.
1039:         If operating in 'valid' mode, either `in1` or `in2` must be
1040:         at least as large as the other in every dimension.
1041:     mode : str {'full', 'valid', 'same'}, optional
1042:         A string indicating the size of the output:
1043: 
1044:         ``full``
1045:            The output is the full discrete linear cross-correlation
1046:            of the inputs. (Default)
1047:         ``valid``
1048:            The output consists only of those elements that do not
1049:            rely on the zero-padding.
1050:         ``same``
1051:            The output is the same size as `in1`, centered
1052:            with respect to the 'full' output.
1053: 
1054:     boundary : str {'fill', 'wrap', 'symm'}, optional
1055:         A flag indicating how to handle boundaries:
1056: 
1057:         ``fill``
1058:            pad input arrays with fillvalue. (default)
1059:         ``wrap``
1060:            circular boundary conditions.
1061:         ``symm``
1062:            symmetrical boundary conditions.
1063: 
1064:     fillvalue : scalar, optional
1065:         Value to fill pad input arrays with. Default is 0.
1066: 
1067:     Returns
1068:     -------
1069:     correlate2d : ndarray
1070:         A 2-dimensional array containing a subset of the discrete linear
1071:         cross-correlation of `in1` with `in2`.
1072: 
1073:     Examples
1074:     --------
1075:     Use 2D cross-correlation to find the location of a template in a noisy
1076:     image:
1077: 
1078:     >>> from scipy import signal
1079:     >>> from scipy import misc
1080:     >>> face = misc.face(gray=True) - misc.face(gray=True).mean()
1081:     >>> template = np.copy(face[300:365, 670:750])  # right eye
1082:     >>> template -= template.mean()
1083:     >>> face = face + np.random.randn(*face.shape) * 50  # add noise
1084:     >>> corr = signal.correlate2d(face, template, boundary='symm', mode='same')
1085:     >>> y, x = np.unravel_index(np.argmax(corr), corr.shape)  # find the match
1086: 
1087:     >>> import matplotlib.pyplot as plt
1088:     >>> fig, (ax_orig, ax_template, ax_corr) = plt.subplots(3, 1,
1089:     ...                                                     figsize=(6, 15))
1090:     >>> ax_orig.imshow(face, cmap='gray')
1091:     >>> ax_orig.set_title('Original')
1092:     >>> ax_orig.set_axis_off()
1093:     >>> ax_template.imshow(template, cmap='gray')
1094:     >>> ax_template.set_title('Template')
1095:     >>> ax_template.set_axis_off()
1096:     >>> ax_corr.imshow(corr, cmap='gray')
1097:     >>> ax_corr.set_title('Cross-correlation')
1098:     >>> ax_corr.set_axis_off()
1099:     >>> ax_orig.plot(x, y, 'ro')
1100:     >>> fig.show()
1101: 
1102:     '''
1103:     in1 = asarray(in1)
1104:     in2 = asarray(in2)
1105: 
1106:     if not in1.ndim == in2.ndim == 2:
1107:         raise ValueError('correlate2d inputs must both be 2D arrays')
1108: 
1109:     swapped_inputs = _inputs_swap_needed(mode, in1.shape, in2.shape)
1110:     if swapped_inputs:
1111:         in1, in2 = in2, in1
1112: 
1113:     val = _valfrommode(mode)
1114:     bval = _bvalfromboundary(boundary)
1115:     out = sigtools._convolve2d(in1, in2, 0, val, bval, fillvalue)
1116: 
1117:     if swapped_inputs:
1118:         out = out[::-1, ::-1]
1119: 
1120:     return out
1121: 
1122: 
1123: def medfilt2d(input, kernel_size=3):
1124:     '''
1125:     Median filter a 2-dimensional array.
1126: 
1127:     Apply a median filter to the `input` array using a local window-size
1128:     given by `kernel_size` (must be odd).
1129: 
1130:     Parameters
1131:     ----------
1132:     input : array_like
1133:         A 2-dimensional input array.
1134:     kernel_size : array_like, optional
1135:         A scalar or a list of length 2, giving the size of the
1136:         median filter window in each dimension.  Elements of
1137:         `kernel_size` should be odd.  If `kernel_size` is a scalar,
1138:         then this scalar is used as the size in each dimension.
1139:         Default is a kernel of size (3, 3).
1140: 
1141:     Returns
1142:     -------
1143:     out : ndarray
1144:         An array the same size as input containing the median filtered
1145:         result.
1146: 
1147:     '''
1148:     image = asarray(input)
1149:     if kernel_size is None:
1150:         kernel_size = [3] * 2
1151:     kernel_size = asarray(kernel_size)
1152:     if kernel_size.shape == ():
1153:         kernel_size = np.repeat(kernel_size.item(), 2)
1154: 
1155:     for size in kernel_size:
1156:         if (size % 2) != 1:
1157:             raise ValueError("Each element of kernel_size should be odd.")
1158: 
1159:     return sigtools._medfilt2d(image, kernel_size)
1160: 
1161: 
1162: def lfilter(b, a, x, axis=-1, zi=None):
1163:     '''
1164:     Filter data along one-dimension with an IIR or FIR filter.
1165: 
1166:     Filter a data sequence, `x`, using a digital filter.  This works for many
1167:     fundamental data types (including Object type).  The filter is a direct
1168:     form II transposed implementation of the standard difference equation
1169:     (see Notes).
1170: 
1171:     Parameters
1172:     ----------
1173:     b : array_like
1174:         The numerator coefficient vector in a 1-D sequence.
1175:     a : array_like
1176:         The denominator coefficient vector in a 1-D sequence.  If ``a[0]``
1177:         is not 1, then both `a` and `b` are normalized by ``a[0]``.
1178:     x : array_like
1179:         An N-dimensional input array.
1180:     axis : int, optional
1181:         The axis of the input data array along which to apply the
1182:         linear filter. The filter is applied to each subarray along
1183:         this axis.  Default is -1.
1184:     zi : array_like, optional
1185:         Initial conditions for the filter delays.  It is a vector
1186:         (or array of vectors for an N-dimensional input) of length
1187:         ``max(len(a), len(b)) - 1``.  If `zi` is None or is not given then
1188:         initial rest is assumed.  See `lfiltic` for more information.
1189: 
1190:     Returns
1191:     -------
1192:     y : array
1193:         The output of the digital filter.
1194:     zf : array, optional
1195:         If `zi` is None, this is not returned, otherwise, `zf` holds the
1196:         final filter delay values.
1197: 
1198:     See Also
1199:     --------
1200:     lfiltic : Construct initial conditions for `lfilter`.
1201:     lfilter_zi : Compute initial state (steady state of step response) for
1202:                  `lfilter`.
1203:     filtfilt : A forward-backward filter, to obtain a filter with linear phase.
1204:     savgol_filter : A Savitzky-Golay filter.
1205:     sosfilt: Filter data using cascaded second-order sections.
1206:     sosfiltfilt: A forward-backward filter using second-order sections.
1207: 
1208:     Notes
1209:     -----
1210:     The filter function is implemented as a direct II transposed structure.
1211:     This means that the filter implements::
1212: 
1213:        a[0]*y[n] = b[0]*x[n] + b[1]*x[n-1] + ... + b[M]*x[n-M]
1214:                              - a[1]*y[n-1] - ... - a[N]*y[n-N]
1215: 
1216:     where `M` is the degree of the numerator, `N` is the degree of the
1217:     denominator, and `n` is the sample number.  It is implemented using
1218:     the following difference equations (assuming M = N)::
1219: 
1220:          a[0]*y[n] = b[0] * x[n]               + d[0][n-1]
1221:            d[0][n] = b[1] * x[n] - a[1] * y[n] + d[1][n-1]
1222:            d[1][n] = b[2] * x[n] - a[2] * y[n] + d[2][n-1]
1223:          ...
1224:          d[N-2][n] = b[N-1]*x[n] - a[N-1]*y[n] + d[N-1][n-1]
1225:          d[N-1][n] = b[N] * x[n] - a[N] * y[n]
1226: 
1227:     where `d` are the state variables.
1228: 
1229:     The rational transfer function describing this filter in the
1230:     z-transform domain is::
1231: 
1232:                              -1              -M
1233:                  b[0] + b[1]z  + ... + b[M] z
1234:          Y(z) = -------------------------------- X(z)
1235:                              -1              -N
1236:                  a[0] + a[1]z  + ... + a[N] z
1237: 
1238:     Examples
1239:     --------
1240:     Generate a noisy signal to be filtered:
1241: 
1242:     >>> from scipy import signal
1243:     >>> import matplotlib.pyplot as plt
1244:     >>> t = np.linspace(-1, 1, 201)
1245:     >>> x = (np.sin(2*np.pi*0.75*t*(1-t) + 2.1) +
1246:     ...      0.1*np.sin(2*np.pi*1.25*t + 1) +
1247:     ...      0.18*np.cos(2*np.pi*3.85*t))
1248:     >>> xn = x + np.random.randn(len(t)) * 0.08
1249: 
1250:     Create an order 3 lowpass butterworth filter:
1251: 
1252:     >>> b, a = signal.butter(3, 0.05)
1253: 
1254:     Apply the filter to xn.  Use lfilter_zi to choose the initial condition of
1255:     the filter:
1256: 
1257:     >>> zi = signal.lfilter_zi(b, a)
1258:     >>> z, _ = signal.lfilter(b, a, xn, zi=zi*xn[0])
1259: 
1260:     Apply the filter again, to have a result filtered at an order the same as
1261:     filtfilt:
1262: 
1263:     >>> z2, _ = signal.lfilter(b, a, z, zi=zi*z[0])
1264: 
1265:     Use filtfilt to apply the filter:
1266: 
1267:     >>> y = signal.filtfilt(b, a, xn)
1268: 
1269:     Plot the original signal and the various filtered versions:
1270: 
1271:     >>> plt.figure
1272:     >>> plt.plot(t, xn, 'b', alpha=0.75)
1273:     >>> plt.plot(t, z, 'r--', t, z2, 'r', t, y, 'k')
1274:     >>> plt.legend(('noisy signal', 'lfilter, once', 'lfilter, twice',
1275:     ...             'filtfilt'), loc='best')
1276:     >>> plt.grid(True)
1277:     >>> plt.show()
1278: 
1279:     '''
1280:     a = np.atleast_1d(a)
1281:     if len(a) == 1:
1282:         # This path only supports types fdgFDGO to mirror _linear_filter below.
1283:         # Any of b, a, x, or zi can set the dtype, but there is no default
1284:         # casting of other types; instead a NotImplementedError is raised.
1285:         b = np.asarray(b)
1286:         a = np.asarray(a)
1287:         if b.ndim != 1 and a.ndim != 1:
1288:             raise ValueError('object of too small depth for desired array')
1289:         x = np.asarray(x)
1290:         inputs = [b, a, x]
1291:         if zi is not None:
1292:             # _linear_filter does not broadcast zi, but does do expansion of
1293:             # singleton dims.
1294:             zi = np.asarray(zi)
1295:             if zi.ndim != x.ndim:
1296:                 raise ValueError('object of too small depth for desired array')
1297:             expected_shape = list(x.shape)
1298:             expected_shape[axis] = b.shape[0] - 1
1299:             expected_shape = tuple(expected_shape)
1300:             # check the trivial case where zi is the right shape first
1301:             if zi.shape != expected_shape:
1302:                 strides = zi.ndim * [None]
1303:                 if axis < 0:
1304:                     axis += zi.ndim
1305:                 for k in range(zi.ndim):
1306:                     if k == axis and zi.shape[k] == expected_shape[k]:
1307:                         strides[k] = zi.strides[k]
1308:                     elif k != axis and zi.shape[k] == expected_shape[k]:
1309:                         strides[k] = zi.strides[k]
1310:                     elif k != axis and zi.shape[k] == 1:
1311:                         strides[k] = 0
1312:                     else:
1313:                         raise ValueError('Unexpected shape for zi: expected '
1314:                                          '%s, found %s.' %
1315:                                          (expected_shape, zi.shape))
1316:                 zi = np.lib.stride_tricks.as_strided(zi, expected_shape,
1317:                                                      strides)
1318:             inputs.append(zi)
1319:         dtype = np.result_type(*inputs)
1320: 
1321:         if dtype.char not in 'fdgFDGO':
1322:             raise NotImplementedError("input type '%s' not supported" % dtype)
1323: 
1324:         b = np.array(b, dtype=dtype)
1325:         a = np.array(a, dtype=dtype, copy=False)
1326:         b /= a[0]
1327:         x = np.array(x, dtype=dtype, copy=False)
1328: 
1329:         out_full = np.apply_along_axis(lambda y: np.convolve(b, y), axis, x)
1330:         ind = out_full.ndim * [slice(None)]
1331:         if zi is not None:
1332:             ind[axis] = slice(zi.shape[axis])
1333:             out_full[ind] += zi
1334: 
1335:         ind[axis] = slice(out_full.shape[axis] - len(b) + 1)
1336:         out = out_full[ind]
1337: 
1338:         if zi is None:
1339:             return out
1340:         else:
1341:             ind[axis] = slice(out_full.shape[axis] - len(b) + 1, None)
1342:             zf = out_full[ind]
1343:             return out, zf
1344:     else:
1345:         if zi is None:
1346:             return sigtools._linear_filter(b, a, x, axis)
1347:         else:
1348:             return sigtools._linear_filter(b, a, x, axis, zi)
1349: 
1350: 
1351: def lfiltic(b, a, y, x=None):
1352:     '''
1353:     Construct initial conditions for lfilter given input and output vectors.
1354: 
1355:     Given a linear filter (b, a) and initial conditions on the output `y`
1356:     and the input `x`, return the initial conditions on the state vector zi
1357:     which is used by `lfilter` to generate the output given the input.
1358: 
1359:     Parameters
1360:     ----------
1361:     b : array_like
1362:         Linear filter term.
1363:     a : array_like
1364:         Linear filter term.
1365:     y : array_like
1366:         Initial conditions.
1367: 
1368:         If ``N = len(a) - 1``, then ``y = {y[-1], y[-2], ..., y[-N]}``.
1369: 
1370:         If `y` is too short, it is padded with zeros.
1371:     x : array_like, optional
1372:         Initial conditions.
1373: 
1374:         If ``M = len(b) - 1``, then ``x = {x[-1], x[-2], ..., x[-M]}``.
1375: 
1376:         If `x` is not given, its initial conditions are assumed zero.
1377: 
1378:         If `x` is too short, it is padded with zeros.
1379: 
1380:     Returns
1381:     -------
1382:     zi : ndarray
1383:         The state vector ``zi = {z_0[-1], z_1[-1], ..., z_K-1[-1]}``,
1384:         where ``K = max(M, N)``.
1385: 
1386:     See Also
1387:     --------
1388:     lfilter, lfilter_zi
1389: 
1390:     '''
1391:     N = np.size(a) - 1
1392:     M = np.size(b) - 1
1393:     K = max(M, N)
1394:     y = asarray(y)
1395:     if y.dtype.kind in 'bui':
1396:         # ensure calculations are floating point
1397:         y = y.astype(np.float64)
1398:     zi = zeros(K, y.dtype)
1399:     if x is None:
1400:         x = zeros(M, y.dtype)
1401:     else:
1402:         x = asarray(x)
1403:         L = np.size(x)
1404:         if L < M:
1405:             x = r_[x, zeros(M - L)]
1406:     L = np.size(y)
1407:     if L < N:
1408:         y = r_[y, zeros(N - L)]
1409: 
1410:     for m in range(M):
1411:         zi[m] = np.sum(b[m + 1:] * x[:M - m], axis=0)
1412: 
1413:     for m in range(N):
1414:         zi[m] -= np.sum(a[m + 1:] * y[:N - m], axis=0)
1415: 
1416:     return zi
1417: 
1418: 
1419: def deconvolve(signal, divisor):
1420:     '''Deconvolves ``divisor`` out of ``signal`` using inverse filtering.
1421: 
1422:     Returns the quotient and remainder such that
1423:     ``signal = convolve(divisor, quotient) + remainder``
1424: 
1425:     Parameters
1426:     ----------
1427:     signal : array_like
1428:         Signal data, typically a recorded signal
1429:     divisor : array_like
1430:         Divisor data, typically an impulse response or filter that was
1431:         applied to the original signal
1432: 
1433:     Returns
1434:     -------
1435:     quotient : ndarray
1436:         Quotient, typically the recovered original signal
1437:     remainder : ndarray
1438:         Remainder
1439: 
1440:     Examples
1441:     --------
1442:     Deconvolve a signal that's been filtered:
1443: 
1444:     >>> from scipy import signal
1445:     >>> original = [0, 1, 0, 0, 1, 1, 0, 0]
1446:     >>> impulse_response = [2, 1]
1447:     >>> recorded = signal.convolve(impulse_response, original)
1448:     >>> recorded
1449:     array([0, 2, 1, 0, 2, 3, 1, 0, 0])
1450:     >>> recovered, remainder = signal.deconvolve(recorded, impulse_response)
1451:     >>> recovered
1452:     array([ 0.,  1.,  0.,  0.,  1.,  1.,  0.,  0.])
1453: 
1454:     See Also
1455:     --------
1456:     numpy.polydiv : performs polynomial division (same operation, but
1457:                     also accepts poly1d objects)
1458: 
1459:     '''
1460:     num = atleast_1d(signal)
1461:     den = atleast_1d(divisor)
1462:     N = len(num)
1463:     D = len(den)
1464:     if D > N:
1465:         quot = []
1466:         rem = num
1467:     else:
1468:         input = zeros(N - D + 1, float)
1469:         input[0] = 1
1470:         quot = lfilter(num, den, input)
1471:         rem = num - convolve(den, quot, mode='full')
1472:     return quot, rem
1473: 
1474: 
1475: def hilbert(x, N=None, axis=-1):
1476:     '''
1477:     Compute the analytic signal, using the Hilbert transform.
1478: 
1479:     The transformation is done along the last axis by default.
1480: 
1481:     Parameters
1482:     ----------
1483:     x : array_like
1484:         Signal data.  Must be real.
1485:     N : int, optional
1486:         Number of Fourier components.  Default: ``x.shape[axis]``
1487:     axis : int, optional
1488:         Axis along which to do the transformation.  Default: -1.
1489: 
1490:     Returns
1491:     -------
1492:     xa : ndarray
1493:         Analytic signal of `x`, of each 1-D array along `axis`
1494: 
1495:     See Also
1496:     --------
1497:     scipy.fftpack.hilbert : Return Hilbert transform of a periodic sequence x.
1498: 
1499:     Notes
1500:     -----
1501:     The analytic signal ``x_a(t)`` of signal ``x(t)`` is:
1502: 
1503:     .. math:: x_a = F^{-1}(F(x) 2U) = x + i y
1504: 
1505:     where `F` is the Fourier transform, `U` the unit step function,
1506:     and `y` the Hilbert transform of `x`. [1]_
1507: 
1508:     In other words, the negative half of the frequency spectrum is zeroed
1509:     out, turning the real-valued signal into a complex signal.  The Hilbert
1510:     transformed signal can be obtained from ``np.imag(hilbert(x))``, and the
1511:     original signal from ``np.real(hilbert(x))``.
1512: 
1513:     Examples
1514:     ---------
1515:     In this example we use the Hilbert transform to determine the amplitude
1516:     envelope and instantaneous frequency of an amplitude-modulated signal.
1517: 
1518:     >>> import numpy as np
1519:     >>> import matplotlib.pyplot as plt
1520:     >>> from scipy.signal import hilbert, chirp
1521: 
1522:     >>> duration = 1.0
1523:     >>> fs = 400.0
1524:     >>> samples = int(fs*duration)
1525:     >>> t = np.arange(samples) / fs
1526: 
1527:     We create a chirp of which the frequency increases from 20 Hz to 100 Hz and
1528:     apply an amplitude modulation.
1529: 
1530:     >>> signal = chirp(t, 20.0, t[-1], 100.0)
1531:     >>> signal *= (1.0 + 0.5 * np.sin(2.0*np.pi*3.0*t) )
1532: 
1533:     The amplitude envelope is given by magnitude of the analytic signal. The
1534:     instantaneous frequency can be obtained by differentiating the
1535:     instantaneous phase in respect to time. The instantaneous phase corresponds
1536:     to the phase angle of the analytic signal.
1537: 
1538:     >>> analytic_signal = hilbert(signal)
1539:     >>> amplitude_envelope = np.abs(analytic_signal)
1540:     >>> instantaneous_phase = np.unwrap(np.angle(analytic_signal))
1541:     >>> instantaneous_frequency = (np.diff(instantaneous_phase) /
1542:     ...                            (2.0*np.pi) * fs)
1543: 
1544:     >>> fig = plt.figure()
1545:     >>> ax0 = fig.add_subplot(211)
1546:     >>> ax0.plot(t, signal, label='signal')
1547:     >>> ax0.plot(t, amplitude_envelope, label='envelope')
1548:     >>> ax0.set_xlabel("time in seconds")
1549:     >>> ax0.legend()
1550:     >>> ax1 = fig.add_subplot(212)
1551:     >>> ax1.plot(t[1:], instantaneous_frequency)
1552:     >>> ax1.set_xlabel("time in seconds")
1553:     >>> ax1.set_ylim(0.0, 120.0)
1554: 
1555:     References
1556:     ----------
1557:     .. [1] Wikipedia, "Analytic signal".
1558:            http://en.wikipedia.org/wiki/Analytic_signal
1559:     .. [2] Leon Cohen, "Time-Frequency Analysis", 1995. Chapter 2.
1560:     .. [3] Alan V. Oppenheim, Ronald W. Schafer. Discrete-Time Signal
1561:            Processing, Third Edition, 2009. Chapter 12.
1562:            ISBN 13: 978-1292-02572-8
1563: 
1564:     '''
1565:     x = asarray(x)
1566:     if iscomplexobj(x):
1567:         raise ValueError("x must be real.")
1568:     if N is None:
1569:         N = x.shape[axis]
1570:     if N <= 0:
1571:         raise ValueError("N must be positive.")
1572: 
1573:     Xf = fftpack.fft(x, N, axis=axis)
1574:     h = zeros(N)
1575:     if N % 2 == 0:
1576:         h[0] = h[N // 2] = 1
1577:         h[1:N // 2] = 2
1578:     else:
1579:         h[0] = 1
1580:         h[1:(N + 1) // 2] = 2
1581: 
1582:     if x.ndim > 1:
1583:         ind = [newaxis] * x.ndim
1584:         ind[axis] = slice(None)
1585:         h = h[ind]
1586:     x = fftpack.ifft(Xf * h, axis=axis)
1587:     return x
1588: 
1589: 
1590: def hilbert2(x, N=None):
1591:     '''
1592:     Compute the '2-D' analytic signal of `x`
1593: 
1594:     Parameters
1595:     ----------
1596:     x : array_like
1597:         2-D signal data.
1598:     N : int or tuple of two ints, optional
1599:         Number of Fourier components. Default is ``x.shape``
1600: 
1601:     Returns
1602:     -------
1603:     xa : ndarray
1604:         Analytic signal of `x` taken along axes (0,1).
1605: 
1606:     References
1607:     ----------
1608:     .. [1] Wikipedia, "Analytic signal",
1609:         http://en.wikipedia.org/wiki/Analytic_signal
1610: 
1611:     '''
1612:     x = atleast_2d(x)
1613:     if x.ndim > 2:
1614:         raise ValueError("x must be 2-D.")
1615:     if iscomplexobj(x):
1616:         raise ValueError("x must be real.")
1617:     if N is None:
1618:         N = x.shape
1619:     elif isinstance(N, int):
1620:         if N <= 0:
1621:             raise ValueError("N must be positive.")
1622:         N = (N, N)
1623:     elif len(N) != 2 or np.any(np.asarray(N) <= 0):
1624:         raise ValueError("When given as a tuple, N must hold exactly "
1625:                          "two positive integers")
1626: 
1627:     Xf = fftpack.fft2(x, N, axes=(0, 1))
1628:     h1 = zeros(N[0], 'd')
1629:     h2 = zeros(N[1], 'd')
1630:     for p in range(2):
1631:         h = eval("h%d" % (p + 1))
1632:         N1 = N[p]
1633:         if N1 % 2 == 0:
1634:             h[0] = h[N1 // 2] = 1
1635:             h[1:N1 // 2] = 2
1636:         else:
1637:             h[0] = 1
1638:             h[1:(N1 + 1) // 2] = 2
1639:         exec("h%d = h" % (p + 1), globals(), locals())
1640: 
1641:     h = h1[:, newaxis] * h2[newaxis, :]
1642:     k = x.ndim
1643:     while k > 2:
1644:         h = h[:, newaxis]
1645:         k -= 1
1646:     x = fftpack.ifft2(Xf * h, axes=(0, 1))
1647:     return x
1648: 
1649: 
1650: def cmplx_sort(p):
1651:     '''Sort roots based on magnitude.
1652: 
1653:     Parameters
1654:     ----------
1655:     p : array_like
1656:         The roots to sort, as a 1-D array.
1657: 
1658:     Returns
1659:     -------
1660:     p_sorted : ndarray
1661:         Sorted roots.
1662:     indx : ndarray
1663:         Array of indices needed to sort the input `p`.
1664: 
1665:     '''
1666:     p = asarray(p)
1667:     if iscomplexobj(p):
1668:         indx = argsort(abs(p))
1669:     else:
1670:         indx = argsort(p)
1671:     return take(p, indx, 0), indx
1672: 
1673: 
1674: def unique_roots(p, tol=1e-3, rtype='min'):
1675:     '''
1676:     Determine unique roots and their multiplicities from a list of roots.
1677: 
1678:     Parameters
1679:     ----------
1680:     p : array_like
1681:         The list of roots.
1682:     tol : float, optional
1683:         The tolerance for two roots to be considered equal. Default is 1e-3.
1684:     rtype : {'max', 'min, 'avg'}, optional
1685:         How to determine the returned root if multiple roots are within
1686:         `tol` of each other.
1687: 
1688:           - 'max': pick the maximum of those roots.
1689:           - 'min': pick the minimum of those roots.
1690:           - 'avg': take the average of those roots.
1691: 
1692:     Returns
1693:     -------
1694:     pout : ndarray
1695:         The list of unique roots, sorted from low to high.
1696:     mult : ndarray
1697:         The multiplicity of each root.
1698: 
1699:     Notes
1700:     -----
1701:     This utility function is not specific to roots but can be used for any
1702:     sequence of values for which uniqueness and multiplicity has to be
1703:     determined. For a more general routine, see `numpy.unique`.
1704: 
1705:     Examples
1706:     --------
1707:     >>> from scipy import signal
1708:     >>> vals = [0, 1.3, 1.31, 2.8, 1.25, 2.2, 10.3]
1709:     >>> uniq, mult = signal.unique_roots(vals, tol=2e-2, rtype='avg')
1710: 
1711:     Check which roots have multiplicity larger than 1:
1712: 
1713:     >>> uniq[mult > 1]
1714:     array([ 1.305])
1715: 
1716:     '''
1717:     if rtype in ['max', 'maximum']:
1718:         comproot = np.max
1719:     elif rtype in ['min', 'minimum']:
1720:         comproot = np.min
1721:     elif rtype in ['avg', 'mean']:
1722:         comproot = np.mean
1723:     else:
1724:         raise ValueError("`rtype` must be one of "
1725:                          "{'max', 'maximum', 'min', 'minimum', 'avg', 'mean'}")
1726:     p = asarray(p) * 1.0
1727:     tol = abs(tol)
1728:     p, indx = cmplx_sort(p)
1729:     pout = []
1730:     mult = []
1731:     indx = -1
1732:     curp = p[0] + 5 * tol
1733:     sameroots = []
1734:     for k in range(len(p)):
1735:         tr = p[k]
1736:         if abs(tr - curp) < tol:
1737:             sameroots.append(tr)
1738:             curp = comproot(sameroots)
1739:             pout[indx] = curp
1740:             mult[indx] += 1
1741:         else:
1742:             pout.append(tr)
1743:             curp = tr
1744:             sameroots = [tr]
1745:             indx += 1
1746:             mult.append(1)
1747:     return array(pout), array(mult)
1748: 
1749: 
1750: def invres(r, p, k, tol=1e-3, rtype='avg'):
1751:     '''
1752:     Compute b(s) and a(s) from partial fraction expansion.
1753: 
1754:     If `M` is the degree of numerator `b` and `N` the degree of denominator
1755:     `a`::
1756: 
1757:               b(s)     b[0] s**(M) + b[1] s**(M-1) + ... + b[M]
1758:       H(s) = ------ = ------------------------------------------
1759:               a(s)     a[0] s**(N) + a[1] s**(N-1) + ... + a[N]
1760: 
1761:     then the partial-fraction expansion H(s) is defined as::
1762: 
1763:                r[0]       r[1]             r[-1]
1764:            = -------- + -------- + ... + --------- + k(s)
1765:              (s-p[0])   (s-p[1])         (s-p[-1])
1766: 
1767:     If there are any repeated roots (closer together than `tol`), then H(s)
1768:     has terms like::
1769: 
1770:           r[i]      r[i+1]              r[i+n-1]
1771:         -------- + ----------- + ... + -----------
1772:         (s-p[i])  (s-p[i])**2          (s-p[i])**n
1773: 
1774:     This function is used for polynomials in positive powers of s or z,
1775:     such as analog filters or digital filters in controls engineering.  For
1776:     negative powers of z (typical for digital filters in DSP), use `invresz`.
1777: 
1778:     Parameters
1779:     ----------
1780:     r : array_like
1781:         Residues.
1782:     p : array_like
1783:         Poles.
1784:     k : array_like
1785:         Coefficients of the direct polynomial term.
1786:     tol : float, optional
1787:         The tolerance for two roots to be considered equal. Default is 1e-3.
1788:     rtype : {'max', 'min, 'avg'}, optional
1789:         How to determine the returned root if multiple roots are within
1790:         `tol` of each other.
1791: 
1792:           - 'max': pick the maximum of those roots.
1793:           - 'min': pick the minimum of those roots.
1794:           - 'avg': take the average of those roots.
1795: 
1796:     Returns
1797:     -------
1798:     b : ndarray
1799:         Numerator polynomial coefficients.
1800:     a : ndarray
1801:         Denominator polynomial coefficients.
1802: 
1803:     See Also
1804:     --------
1805:     residue, invresz, unique_roots
1806: 
1807:     '''
1808:     extra = k
1809:     p, indx = cmplx_sort(p)
1810:     r = take(r, indx, 0)
1811:     pout, mult = unique_roots(p, tol=tol, rtype=rtype)
1812:     p = []
1813:     for k in range(len(pout)):
1814:         p.extend([pout[k]] * mult[k])
1815:     a = atleast_1d(poly(p))
1816:     if len(extra) > 0:
1817:         b = polymul(extra, a)
1818:     else:
1819:         b = [0]
1820:     indx = 0
1821:     for k in range(len(pout)):
1822:         temp = []
1823:         for l in range(len(pout)):
1824:             if l != k:
1825:                 temp.extend([pout[l]] * mult[l])
1826:         for m in range(mult[k]):
1827:             t2 = temp[:]
1828:             t2.extend([pout[k]] * (mult[k] - m - 1))
1829:             b = polyadd(b, r[indx] * atleast_1d(poly(t2)))
1830:             indx += 1
1831:     b = real_if_close(b)
1832:     while allclose(b[0], 0, rtol=1e-14) and (b.shape[-1] > 1):
1833:         b = b[1:]
1834:     return b, a
1835: 
1836: 
1837: def residue(b, a, tol=1e-3, rtype='avg'):
1838:     '''
1839:     Compute partial-fraction expansion of b(s) / a(s).
1840: 
1841:     If `M` is the degree of numerator `b` and `N` the degree of denominator
1842:     `a`::
1843: 
1844:               b(s)     b[0] s**(M) + b[1] s**(M-1) + ... + b[M]
1845:       H(s) = ------ = ------------------------------------------
1846:               a(s)     a[0] s**(N) + a[1] s**(N-1) + ... + a[N]
1847: 
1848:     then the partial-fraction expansion H(s) is defined as::
1849: 
1850:                r[0]       r[1]             r[-1]
1851:            = -------- + -------- + ... + --------- + k(s)
1852:              (s-p[0])   (s-p[1])         (s-p[-1])
1853: 
1854:     If there are any repeated roots (closer together than `tol`), then H(s)
1855:     has terms like::
1856: 
1857:           r[i]      r[i+1]              r[i+n-1]
1858:         -------- + ----------- + ... + -----------
1859:         (s-p[i])  (s-p[i])**2          (s-p[i])**n
1860: 
1861:     This function is used for polynomials in positive powers of s or z,
1862:     such as analog filters or digital filters in controls engineering.  For
1863:     negative powers of z (typical for digital filters in DSP), use `residuez`.
1864: 
1865:     Parameters
1866:     ----------
1867:     b : array_like
1868:         Numerator polynomial coefficients.
1869:     a : array_like
1870:         Denominator polynomial coefficients.
1871: 
1872:     Returns
1873:     -------
1874:     r : ndarray
1875:         Residues.
1876:     p : ndarray
1877:         Poles.
1878:     k : ndarray
1879:         Coefficients of the direct polynomial term.
1880: 
1881:     See Also
1882:     --------
1883:     invres, residuez, numpy.poly, unique_roots
1884: 
1885:     '''
1886: 
1887:     b, a = map(asarray, (b, a))
1888:     rscale = a[0]
1889:     k, b = polydiv(b, a)
1890:     p = roots(a)
1891:     r = p * 0.0
1892:     pout, mult = unique_roots(p, tol=tol, rtype=rtype)
1893:     p = []
1894:     for n in range(len(pout)):
1895:         p.extend([pout[n]] * mult[n])
1896:     p = asarray(p)
1897:     # Compute the residue from the general formula
1898:     indx = 0
1899:     for n in range(len(pout)):
1900:         bn = b.copy()
1901:         pn = []
1902:         for l in range(len(pout)):
1903:             if l != n:
1904:                 pn.extend([pout[l]] * mult[l])
1905:         an = atleast_1d(poly(pn))
1906:         # bn(s) / an(s) is (s-po[n])**Nn * b(s) / a(s) where Nn is
1907:         # multiplicity of pole at po[n]
1908:         sig = mult[n]
1909:         for m in range(sig, 0, -1):
1910:             if sig > m:
1911:                 # compute next derivative of bn(s) / an(s)
1912:                 term1 = polymul(polyder(bn, 1), an)
1913:                 term2 = polymul(bn, polyder(an, 1))
1914:                 bn = polysub(term1, term2)
1915:                 an = polymul(an, an)
1916:             r[indx + m - 1] = (polyval(bn, pout[n]) / polyval(an, pout[n]) /
1917:                                factorial(sig - m))
1918:         indx += sig
1919:     return r / rscale, p, k
1920: 
1921: 
1922: def residuez(b, a, tol=1e-3, rtype='avg'):
1923:     '''
1924:     Compute partial-fraction expansion of b(z) / a(z).
1925: 
1926:     If `M` is the degree of numerator `b` and `N` the degree of denominator
1927:     `a`::
1928: 
1929:                 b(z)     b[0] + b[1] z**(-1) + ... + b[M] z**(-M)
1930:         H(z) = ------ = ------------------------------------------
1931:                 a(z)     a[0] + a[1] z**(-1) + ... + a[N] z**(-N)
1932: 
1933:     then the partial-fraction expansion H(z) is defined as::
1934: 
1935:                  r[0]                   r[-1]
1936:          = --------------- + ... + ---------------- + k[0] + k[1]z**(-1) ...
1937:            (1-p[0]z**(-1))         (1-p[-1]z**(-1))
1938: 
1939:     If there are any repeated roots (closer than `tol`), then the partial
1940:     fraction expansion has terms like::
1941: 
1942:              r[i]              r[i+1]                    r[i+n-1]
1943:         -------------- + ------------------ + ... + ------------------
1944:         (1-p[i]z**(-1))  (1-p[i]z**(-1))**2         (1-p[i]z**(-1))**n
1945: 
1946:     This function is used for polynomials in negative powers of z,
1947:     such as digital filters in DSP.  For positive powers, use `residue`.
1948: 
1949:     Parameters
1950:     ----------
1951:     b : array_like
1952:         Numerator polynomial coefficients.
1953:     a : array_like
1954:         Denominator polynomial coefficients.
1955: 
1956:     Returns
1957:     -------
1958:     r : ndarray
1959:         Residues.
1960:     p : ndarray
1961:         Poles.
1962:     k : ndarray
1963:         Coefficients of the direct polynomial term.
1964: 
1965:     See Also
1966:     --------
1967:     invresz, residue, unique_roots
1968: 
1969:     '''
1970:     b, a = map(asarray, (b, a))
1971:     gain = a[0]
1972:     brev, arev = b[::-1], a[::-1]
1973:     krev, brev = polydiv(brev, arev)
1974:     if krev == []:
1975:         k = []
1976:     else:
1977:         k = krev[::-1]
1978:     b = brev[::-1]
1979:     p = roots(a)
1980:     r = p * 0.0
1981:     pout, mult = unique_roots(p, tol=tol, rtype=rtype)
1982:     p = []
1983:     for n in range(len(pout)):
1984:         p.extend([pout[n]] * mult[n])
1985:     p = asarray(p)
1986:     # Compute the residue from the general formula (for discrete-time)
1987:     #  the polynomial is in z**(-1) and the multiplication is by terms
1988:     #  like this (1-p[i] z**(-1))**mult[i].  After differentiation,
1989:     #  we must divide by (-p[i])**(m-k) as well as (m-k)!
1990:     indx = 0
1991:     for n in range(len(pout)):
1992:         bn = brev.copy()
1993:         pn = []
1994:         for l in range(len(pout)):
1995:             if l != n:
1996:                 pn.extend([pout[l]] * mult[l])
1997:         an = atleast_1d(poly(pn))[::-1]
1998:         # bn(z) / an(z) is (1-po[n] z**(-1))**Nn * b(z) / a(z) where Nn is
1999:         # multiplicity of pole at po[n] and b(z) and a(z) are polynomials.
2000:         sig = mult[n]
2001:         for m in range(sig, 0, -1):
2002:             if sig > m:
2003:                 # compute next derivative of bn(s) / an(s)
2004:                 term1 = polymul(polyder(bn, 1), an)
2005:                 term2 = polymul(bn, polyder(an, 1))
2006:                 bn = polysub(term1, term2)
2007:                 an = polymul(an, an)
2008:             r[indx + m - 1] = (polyval(bn, 1.0 / pout[n]) /
2009:                                polyval(an, 1.0 / pout[n]) /
2010:                                factorial(sig - m) / (-pout[n]) ** (sig - m))
2011:         indx += sig
2012:     return r / gain, p, k
2013: 
2014: 
2015: def invresz(r, p, k, tol=1e-3, rtype='avg'):
2016:     '''
2017:     Compute b(z) and a(z) from partial fraction expansion.
2018: 
2019:     If `M` is the degree of numerator `b` and `N` the degree of denominator
2020:     `a`::
2021: 
2022:                 b(z)     b[0] + b[1] z**(-1) + ... + b[M] z**(-M)
2023:         H(z) = ------ = ------------------------------------------
2024:                 a(z)     a[0] + a[1] z**(-1) + ... + a[N] z**(-N)
2025: 
2026:     then the partial-fraction expansion H(z) is defined as::
2027: 
2028:                  r[0]                   r[-1]
2029:          = --------------- + ... + ---------------- + k[0] + k[1]z**(-1) ...
2030:            (1-p[0]z**(-1))         (1-p[-1]z**(-1))
2031: 
2032:     If there are any repeated roots (closer than `tol`), then the partial
2033:     fraction expansion has terms like::
2034: 
2035:              r[i]              r[i+1]                    r[i+n-1]
2036:         -------------- + ------------------ + ... + ------------------
2037:         (1-p[i]z**(-1))  (1-p[i]z**(-1))**2         (1-p[i]z**(-1))**n
2038: 
2039:     This function is used for polynomials in negative powers of z,
2040:     such as digital filters in DSP.  For positive powers, use `invres`.
2041: 
2042:     Parameters
2043:     ----------
2044:     r : array_like
2045:         Residues.
2046:     p : array_like
2047:         Poles.
2048:     k : array_like
2049:         Coefficients of the direct polynomial term.
2050:     tol : float, optional
2051:         The tolerance for two roots to be considered equal. Default is 1e-3.
2052:     rtype : {'max', 'min, 'avg'}, optional
2053:         How to determine the returned root if multiple roots are within
2054:         `tol` of each other.
2055: 
2056:           - 'max': pick the maximum of those roots.
2057:           - 'min': pick the minimum of those roots.
2058:           - 'avg': take the average of those roots.
2059: 
2060:     Returns
2061:     -------
2062:     b : ndarray
2063:         Numerator polynomial coefficients.
2064:     a : ndarray
2065:         Denominator polynomial coefficients.
2066: 
2067:     See Also
2068:     --------
2069:     residuez, unique_roots, invres
2070: 
2071:     '''
2072:     extra = asarray(k)
2073:     p, indx = cmplx_sort(p)
2074:     r = take(r, indx, 0)
2075:     pout, mult = unique_roots(p, tol=tol, rtype=rtype)
2076:     p = []
2077:     for k in range(len(pout)):
2078:         p.extend([pout[k]] * mult[k])
2079:     a = atleast_1d(poly(p))
2080:     if len(extra) > 0:
2081:         b = polymul(extra, a)
2082:     else:
2083:         b = [0]
2084:     indx = 0
2085:     brev = asarray(b)[::-1]
2086:     for k in range(len(pout)):
2087:         temp = []
2088:         # Construct polynomial which does not include any of this root
2089:         for l in range(len(pout)):
2090:             if l != k:
2091:                 temp.extend([pout[l]] * mult[l])
2092:         for m in range(mult[k]):
2093:             t2 = temp[:]
2094:             t2.extend([pout[k]] * (mult[k] - m - 1))
2095:             brev = polyadd(brev, (r[indx] * atleast_1d(poly(t2)))[::-1])
2096:             indx += 1
2097:     b = real_if_close(brev[::-1])
2098:     return b, a
2099: 
2100: 
2101: def resample(x, num, t=None, axis=0, window=None):
2102:     '''
2103:     Resample `x` to `num` samples using Fourier method along the given axis.
2104: 
2105:     The resampled signal starts at the same value as `x` but is sampled
2106:     with a spacing of ``len(x) / num * (spacing of x)``.  Because a
2107:     Fourier method is used, the signal is assumed to be periodic.
2108: 
2109:     Parameters
2110:     ----------
2111:     x : array_like
2112:         The data to be resampled.
2113:     num : int
2114:         The number of samples in the resampled signal.
2115:     t : array_like, optional
2116:         If `t` is given, it is assumed to be the sample positions
2117:         associated with the signal data in `x`.
2118:     axis : int, optional
2119:         The axis of `x` that is resampled.  Default is 0.
2120:     window : array_like, callable, string, float, or tuple, optional
2121:         Specifies the window applied to the signal in the Fourier
2122:         domain.  See below for details.
2123: 
2124:     Returns
2125:     -------
2126:     resampled_x or (resampled_x, resampled_t)
2127:         Either the resampled array, or, if `t` was given, a tuple
2128:         containing the resampled array and the corresponding resampled
2129:         positions.
2130: 
2131:     See Also
2132:     --------
2133:     decimate : Downsample the signal after applying an FIR or IIR filter.
2134:     resample_poly : Resample using polyphase filtering and an FIR filter.
2135: 
2136:     Notes
2137:     -----
2138:     The argument `window` controls a Fourier-domain window that tapers
2139:     the Fourier spectrum before zero-padding to alleviate ringing in
2140:     the resampled values for sampled signals you didn't intend to be
2141:     interpreted as band-limited.
2142: 
2143:     If `window` is a function, then it is called with a vector of inputs
2144:     indicating the frequency bins (i.e. fftfreq(x.shape[axis]) ).
2145: 
2146:     If `window` is an array of the same length as `x.shape[axis]` it is
2147:     assumed to be the window to be applied directly in the Fourier
2148:     domain (with dc and low-frequency first).
2149: 
2150:     For any other type of `window`, the function `scipy.signal.get_window`
2151:     is called to generate the window.
2152: 
2153:     The first sample of the returned vector is the same as the first
2154:     sample of the input vector.  The spacing between samples is changed
2155:     from ``dx`` to ``dx * len(x) / num``.
2156: 
2157:     If `t` is not None, then it represents the old sample positions,
2158:     and the new sample positions will be returned as well as the new
2159:     samples.
2160: 
2161:     As noted, `resample` uses FFT transformations, which can be very
2162:     slow if the number of input or output samples is large and prime;
2163:     see `scipy.fftpack.fft`.
2164: 
2165:     Examples
2166:     --------
2167:     Note that the end of the resampled data rises to meet the first
2168:     sample of the next cycle:
2169: 
2170:     >>> from scipy import signal
2171: 
2172:     >>> x = np.linspace(0, 10, 20, endpoint=False)
2173:     >>> y = np.cos(-x**2/6.0)
2174:     >>> f = signal.resample(y, 100)
2175:     >>> xnew = np.linspace(0, 10, 100, endpoint=False)
2176: 
2177:     >>> import matplotlib.pyplot as plt
2178:     >>> plt.plot(x, y, 'go-', xnew, f, '.-', 10, y[0], 'ro')
2179:     >>> plt.legend(['data', 'resampled'], loc='best')
2180:     >>> plt.show()
2181:     '''
2182:     x = asarray(x)
2183:     X = fftpack.fft(x, axis=axis)
2184:     Nx = x.shape[axis]
2185:     if window is not None:
2186:         if callable(window):
2187:             W = window(fftpack.fftfreq(Nx))
2188:         elif isinstance(window, ndarray):
2189:             if window.shape != (Nx,):
2190:                 raise ValueError('window must have the same length as data')
2191:             W = window
2192:         else:
2193:             W = fftpack.ifftshift(get_window(window, Nx))
2194:         newshape = [1] * x.ndim
2195:         newshape[axis] = len(W)
2196:         W.shape = newshape
2197:         X = X * W
2198:         W.shape = (Nx,)
2199:     sl = [slice(None)] * x.ndim
2200:     newshape = list(x.shape)
2201:     newshape[axis] = num
2202:     N = int(np.minimum(num, Nx))
2203:     Y = zeros(newshape, 'D')
2204:     sl[axis] = slice(0, (N + 1) // 2)
2205:     Y[sl] = X[sl]
2206:     sl[axis] = slice(-(N - 1) // 2, None)
2207:     Y[sl] = X[sl]
2208: 
2209:     if N % 2 == 0:  # special treatment if low number of points is even. So far we have set Y[-N/2]=X[-N/2]
2210:         if N < Nx:  # if downsampling
2211:             sl[axis] = slice(N//2,N//2+1,None)  # select the component at frequency N/2
2212:             Y[sl] += X[sl]  # add the component of X at N/2
2213:         elif N < num:  # if upsampling
2214:             sl[axis] = slice(num-N//2,num-N//2+1,None)  # select the component at frequency -N/2
2215:             Y[sl] /= 2  # halve the component at -N/2
2216:             temp = Y[sl]
2217:             sl[axis] = slice(N//2,N//2+1,None)  # select the component at +N/2
2218:             Y[sl] = temp  # set that equal to the component at -N/2
2219: 
2220:     y = fftpack.ifft(Y, axis=axis) * (float(num) / float(Nx))
2221: 
2222:     if x.dtype.char not in ['F', 'D']:
2223:         y = y.real
2224: 
2225:     if t is None:
2226:         return y
2227:     else:
2228:         new_t = arange(0, num) * (t[1] - t[0]) * Nx / float(num) + t[0]
2229:         return y, new_t
2230: 
2231: 
2232: def resample_poly(x, up, down, axis=0, window=('kaiser', 5.0)):
2233:     '''
2234:     Resample `x` along the given axis using polyphase filtering.
2235: 
2236:     The signal `x` is upsampled by the factor `up`, a zero-phase low-pass
2237:     FIR filter is applied, and then it is downsampled by the factor `down`.
2238:     The resulting sample rate is ``up / down`` times the original sample
2239:     rate. Values beyond the boundary of the signal are assumed to be zero
2240:     during the filtering step.
2241: 
2242:     Parameters
2243:     ----------
2244:     x : array_like
2245:         The data to be resampled.
2246:     up : int
2247:         The upsampling factor.
2248:     down : int
2249:         The downsampling factor.
2250:     axis : int, optional
2251:         The axis of `x` that is resampled. Default is 0.
2252:     window : string, tuple, or array_like, optional
2253:         Desired window to use to design the low-pass filter, or the FIR filter
2254:         coefficients to employ. See below for details.
2255: 
2256:     Returns
2257:     -------
2258:     resampled_x : array
2259:         The resampled array.
2260: 
2261:     See Also
2262:     --------
2263:     decimate : Downsample the signal after applying an FIR or IIR filter.
2264:     resample : Resample up or down using the FFT method.
2265: 
2266:     Notes
2267:     -----
2268:     This polyphase method will likely be faster than the Fourier method
2269:     in `scipy.signal.resample` when the number of samples is large and
2270:     prime, or when the number of samples is large and `up` and `down`
2271:     share a large greatest common denominator. The length of the FIR
2272:     filter used will depend on ``max(up, down) // gcd(up, down)``, and
2273:     the number of operations during polyphase filtering will depend on
2274:     the filter length and `down` (see `scipy.signal.upfirdn` for details).
2275: 
2276:     The argument `window` specifies the FIR low-pass filter design.
2277: 
2278:     If `window` is an array_like it is assumed to be the FIR filter
2279:     coefficients. Note that the FIR filter is applied after the upsampling
2280:     step, so it should be designed to operate on a signal at a sampling
2281:     frequency higher than the original by a factor of `up//gcd(up, down)`.
2282:     This function's output will be centered with respect to this array, so it
2283:     is best to pass a symmetric filter with an odd number of samples if, as
2284:     is usually the case, a zero-phase filter is desired.
2285: 
2286:     For any other type of `window`, the functions `scipy.signal.get_window`
2287:     and `scipy.signal.firwin` are called to generate the appropriate filter
2288:     coefficients.
2289: 
2290:     The first sample of the returned vector is the same as the first
2291:     sample of the input vector. The spacing between samples is changed
2292:     from ``dx`` to ``dx * down / float(up)``.
2293: 
2294:     Examples
2295:     --------
2296:     Note that the end of the resampled data rises to meet the first
2297:     sample of the next cycle for the FFT method, and gets closer to zero
2298:     for the polyphase method:
2299: 
2300:     >>> from scipy import signal
2301: 
2302:     >>> x = np.linspace(0, 10, 20, endpoint=False)
2303:     >>> y = np.cos(-x**2/6.0)
2304:     >>> f_fft = signal.resample(y, 100)
2305:     >>> f_poly = signal.resample_poly(y, 100, 20)
2306:     >>> xnew = np.linspace(0, 10, 100, endpoint=False)
2307: 
2308:     >>> import matplotlib.pyplot as plt
2309:     >>> plt.plot(xnew, f_fft, 'b.-', xnew, f_poly, 'r.-')
2310:     >>> plt.plot(x, y, 'ko-')
2311:     >>> plt.plot(10, y[0], 'bo', 10, 0., 'ro')  # boundaries
2312:     >>> plt.legend(['resample', 'resamp_poly', 'data'], loc='best')
2313:     >>> plt.show()
2314:     '''
2315:     x = asarray(x)
2316:     if up != int(up):
2317:         raise ValueError("up must be an integer")
2318:     if down != int(down):
2319:         raise ValueError("down must be an integer")
2320:     up = int(up)
2321:     down = int(down)
2322:     if up < 1 or down < 1:
2323:         raise ValueError('up and down must be >= 1')
2324: 
2325:     # Determine our up and down factors
2326:     # Use a rational approimation to save computation time on really long
2327:     # signals
2328:     g_ = gcd(up, down)
2329:     up //= g_
2330:     down //= g_
2331:     if up == down == 1:
2332:         return x.copy()
2333:     n_out = x.shape[axis] * up
2334:     n_out = n_out // down + bool(n_out % down)
2335: 
2336:     if isinstance(window, (list, np.ndarray)):
2337:         window = array(window)  # use array to force a copy (we modify it)
2338:         if window.ndim > 1:
2339:             raise ValueError('window must be 1-D')
2340:         half_len = (window.size - 1) // 2
2341:         h = window
2342:     else:
2343:         # Design a linear-phase low-pass FIR filter
2344:         max_rate = max(up, down)
2345:         f_c = 1. / max_rate  # cutoff of FIR filter (rel. to Nyquist)
2346:         half_len = 10 * max_rate  # reasonable cutoff for our sinc-like function
2347:         h = firwin(2 * half_len + 1, f_c, window=window)
2348:     h *= up
2349: 
2350:     # Zero-pad our filter to put the output samples at the center
2351:     n_pre_pad = (down - half_len % down)
2352:     n_post_pad = 0
2353:     n_pre_remove = (half_len + n_pre_pad) // down
2354:     # We should rarely need to do this given our filter lengths...
2355:     while _output_len(len(h) + n_pre_pad + n_post_pad, x.shape[axis],
2356:                       up, down) < n_out + n_pre_remove:
2357:         n_post_pad += 1
2358:     h = np.concatenate((np.zeros(n_pre_pad), h, np.zeros(n_post_pad)))
2359:     n_pre_remove_end = n_pre_remove + n_out
2360: 
2361:     # filter then remove excess
2362:     y = upfirdn(h, x, up, down, axis=axis)
2363:     keep = [slice(None), ]*x.ndim
2364:     keep[axis] = slice(n_pre_remove, n_pre_remove_end)
2365:     return y[keep]
2366: 
2367: 
2368: def vectorstrength(events, period):
2369:     '''
2370:     Determine the vector strength of the events corresponding to the given
2371:     period.
2372: 
2373:     The vector strength is a measure of phase synchrony, how well the
2374:     timing of the events is synchronized to a single period of a periodic
2375:     signal.
2376: 
2377:     If multiple periods are used, calculate the vector strength of each.
2378:     This is called the "resonating vector strength".
2379: 
2380:     Parameters
2381:     ----------
2382:     events : 1D array_like
2383:         An array of time points containing the timing of the events.
2384:     period : float or array_like
2385:         The period of the signal that the events should synchronize to.
2386:         The period is in the same units as `events`.  It can also be an array
2387:         of periods, in which case the outputs are arrays of the same length.
2388: 
2389:     Returns
2390:     -------
2391:     strength : float or 1D array
2392:         The strength of the synchronization.  1.0 is perfect synchronization
2393:         and 0.0 is no synchronization.  If `period` is an array, this is also
2394:         an array with each element containing the vector strength at the
2395:         corresponding period.
2396:     phase : float or array
2397:         The phase that the events are most strongly synchronized to in radians.
2398:         If `period` is an array, this is also an array with each element
2399:         containing the phase for the corresponding period.
2400: 
2401:     References
2402:     ----------
2403:     van Hemmen, JL, Longtin, A, and Vollmayr, AN. Testing resonating vector
2404:         strength: Auditory system, electric fish, and noise.
2405:         Chaos 21, 047508 (2011);
2406:         :doi:`10.1063/1.3670512`.
2407:     van Hemmen, JL.  Vector strength after Goldberg, Brown, and von Mises:
2408:         biological and mathematical perspectives.  Biol Cybern.
2409:         2013 Aug;107(4):385-96. :doi:`10.1007/s00422-013-0561-7`.
2410:     van Hemmen, JL and Vollmayr, AN.  Resonating vector strength: what happens
2411:         when we vary the "probing" frequency while keeping the spike times
2412:         fixed.  Biol Cybern. 2013 Aug;107(4):491-94.
2413:         :doi:`10.1007/s00422-013-0560-8`.
2414:     '''
2415:     events = asarray(events)
2416:     period = asarray(period)
2417:     if events.ndim > 1:
2418:         raise ValueError('events cannot have dimensions more than 1')
2419:     if period.ndim > 1:
2420:         raise ValueError('period cannot have dimensions more than 1')
2421: 
2422:     # we need to know later if period was originally a scalar
2423:     scalarperiod = not period.ndim
2424: 
2425:     events = atleast_2d(events)
2426:     period = atleast_2d(period)
2427:     if (period <= 0).any():
2428:         raise ValueError('periods must be positive')
2429: 
2430:     # this converts the times to vectors
2431:     vectors = exp(dot(2j*pi/period.T, events))
2432: 
2433:     # the vector strength is just the magnitude of the mean of the vectors
2434:     # the vector phase is the angle of the mean of the vectors
2435:     vectormean = mean(vectors, axis=1)
2436:     strength = abs(vectormean)
2437:     phase = angle(vectormean)
2438: 
2439:     # if the original period was a scalar, return scalars
2440:     if scalarperiod:
2441:         strength = strength[0]
2442:         phase = phase[0]
2443:     return strength, phase
2444: 
2445: 
2446: def detrend(data, axis=-1, type='linear', bp=0):
2447:     '''
2448:     Remove linear trend along axis from data.
2449: 
2450:     Parameters
2451:     ----------
2452:     data : array_like
2453:         The input data.
2454:     axis : int, optional
2455:         The axis along which to detrend the data. By default this is the
2456:         last axis (-1).
2457:     type : {'linear', 'constant'}, optional
2458:         The type of detrending. If ``type == 'linear'`` (default),
2459:         the result of a linear least-squares fit to `data` is subtracted
2460:         from `data`.
2461:         If ``type == 'constant'``, only the mean of `data` is subtracted.
2462:     bp : array_like of ints, optional
2463:         A sequence of break points. If given, an individual linear fit is
2464:         performed for each part of `data` between two break points.
2465:         Break points are specified as indices into `data`.
2466: 
2467:     Returns
2468:     -------
2469:     ret : ndarray
2470:         The detrended input data.
2471: 
2472:     Examples
2473:     --------
2474:     >>> from scipy import signal
2475:     >>> randgen = np.random.RandomState(9)
2476:     >>> npoints = 1000
2477:     >>> noise = randgen.randn(npoints)
2478:     >>> x = 3 + 2*np.linspace(0, 1, npoints) + noise
2479:     >>> (signal.detrend(x) - noise).max() < 0.01
2480:     True
2481: 
2482:     '''
2483:     if type not in ['linear', 'l', 'constant', 'c']:
2484:         raise ValueError("Trend type must be 'linear' or 'constant'.")
2485:     data = asarray(data)
2486:     dtype = data.dtype.char
2487:     if dtype not in 'dfDF':
2488:         dtype = 'd'
2489:     if type in ['constant', 'c']:
2490:         ret = data - expand_dims(mean(data, axis), axis)
2491:         return ret
2492:     else:
2493:         dshape = data.shape
2494:         N = dshape[axis]
2495:         bp = sort(unique(r_[0, bp, N]))
2496:         if np.any(bp > N):
2497:             raise ValueError("Breakpoints must be less than length "
2498:                              "of data along given axis.")
2499:         Nreg = len(bp) - 1
2500:         # Restructure data so that axis is along first dimension and
2501:         #  all other dimensions are collapsed into second dimension
2502:         rnk = len(dshape)
2503:         if axis < 0:
2504:             axis = axis + rnk
2505:         newdims = r_[axis, 0:axis, axis + 1:rnk]
2506:         newdata = reshape(transpose(data, tuple(newdims)),
2507:                           (N, _prod(dshape) // N))
2508:         newdata = newdata.copy()  # make sure we have a copy
2509:         if newdata.dtype.char not in 'dfDF':
2510:             newdata = newdata.astype(dtype)
2511:         # Find leastsq fit and remove it for each piece
2512:         for m in range(Nreg):
2513:             Npts = bp[m + 1] - bp[m]
2514:             A = ones((Npts, 2), dtype)
2515:             A[:, 0] = cast[dtype](arange(1, Npts + 1) * 1.0 / Npts)
2516:             sl = slice(bp[m], bp[m + 1])
2517:             coef, resids, rank, s = linalg.lstsq(A, newdata[sl])
2518:             newdata[sl] = newdata[sl] - dot(A, coef)
2519:         # Put data back in original shape.
2520:         tdshape = take(dshape, newdims, 0)
2521:         ret = reshape(newdata, tuple(tdshape))
2522:         vals = list(range(1, rnk))
2523:         olddims = vals[:axis] + [0] + vals[axis:]
2524:         ret = transpose(ret, tuple(olddims))
2525:         return ret
2526: 
2527: 
2528: def lfilter_zi(b, a):
2529:     '''
2530:     Construct initial conditions for lfilter for step response steady-state.
2531: 
2532:     Compute an initial state `zi` for the `lfilter` function that corresponds
2533:     to the steady state of the step response.
2534: 
2535:     A typical use of this function is to set the initial state so that the
2536:     output of the filter starts at the same value as the first element of
2537:     the signal to be filtered.
2538: 
2539:     Parameters
2540:     ----------
2541:     b, a : array_like (1-D)
2542:         The IIR filter coefficients. See `lfilter` for more
2543:         information.
2544: 
2545:     Returns
2546:     -------
2547:     zi : 1-D ndarray
2548:         The initial state for the filter.
2549: 
2550:     See Also
2551:     --------
2552:     lfilter, lfiltic, filtfilt
2553: 
2554:     Notes
2555:     -----
2556:     A linear filter with order m has a state space representation (A, B, C, D),
2557:     for which the output y of the filter can be expressed as::
2558: 
2559:         z(n+1) = A*z(n) + B*x(n)
2560:         y(n)   = C*z(n) + D*x(n)
2561: 
2562:     where z(n) is a vector of length m, A has shape (m, m), B has shape
2563:     (m, 1), C has shape (1, m) and D has shape (1, 1) (assuming x(n) is
2564:     a scalar).  lfilter_zi solves::
2565: 
2566:         zi = A*zi + B
2567: 
2568:     In other words, it finds the initial condition for which the response
2569:     to an input of all ones is a constant.
2570: 
2571:     Given the filter coefficients `a` and `b`, the state space matrices
2572:     for the transposed direct form II implementation of the linear filter,
2573:     which is the implementation used by scipy.signal.lfilter, are::
2574: 
2575:         A = scipy.linalg.companion(a).T
2576:         B = b[1:] - a[1:]*b[0]
2577: 
2578:     assuming `a[0]` is 1.0; if `a[0]` is not 1, `a` and `b` are first
2579:     divided by a[0].
2580: 
2581:     Examples
2582:     --------
2583:     The following code creates a lowpass Butterworth filter. Then it
2584:     applies that filter to an array whose values are all 1.0; the
2585:     output is also all 1.0, as expected for a lowpass filter.  If the
2586:     `zi` argument of `lfilter` had not been given, the output would have
2587:     shown the transient signal.
2588: 
2589:     >>> from numpy import array, ones
2590:     >>> from scipy.signal import lfilter, lfilter_zi, butter
2591:     >>> b, a = butter(5, 0.25)
2592:     >>> zi = lfilter_zi(b, a)
2593:     >>> y, zo = lfilter(b, a, ones(10), zi=zi)
2594:     >>> y
2595:     array([1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])
2596: 
2597:     Another example:
2598: 
2599:     >>> x = array([0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0])
2600:     >>> y, zf = lfilter(b, a, x, zi=zi*x[0])
2601:     >>> y
2602:     array([ 0.5       ,  0.5       ,  0.5       ,  0.49836039,  0.48610528,
2603:         0.44399389,  0.35505241])
2604: 
2605:     Note that the `zi` argument to `lfilter` was computed using
2606:     `lfilter_zi` and scaled by `x[0]`.  Then the output `y` has no
2607:     transient until the input drops from 0.5 to 0.0.
2608: 
2609:     '''
2610: 
2611:     # FIXME: Can this function be replaced with an appropriate
2612:     # use of lfiltic?  For example, when b,a = butter(N,Wn),
2613:     #    lfiltic(b, a, y=numpy.ones_like(a), x=numpy.ones_like(b)).
2614:     #
2615: 
2616:     # We could use scipy.signal.normalize, but it uses warnings in
2617:     # cases where a ValueError is more appropriate, and it allows
2618:     # b to be 2D.
2619:     b = np.atleast_1d(b)
2620:     if b.ndim != 1:
2621:         raise ValueError("Numerator b must be 1-D.")
2622:     a = np.atleast_1d(a)
2623:     if a.ndim != 1:
2624:         raise ValueError("Denominator a must be 1-D.")
2625: 
2626:     while len(a) > 1 and a[0] == 0.0:
2627:         a = a[1:]
2628:     if a.size < 1:
2629:         raise ValueError("There must be at least one nonzero `a` coefficient.")
2630: 
2631:     if a[0] != 1.0:
2632:         # Normalize the coefficients so a[0] == 1.
2633:         b = b / a[0]
2634:         a = a / a[0]
2635: 
2636:     n = max(len(a), len(b))
2637: 
2638:     # Pad a or b with zeros so they are the same length.
2639:     if len(a) < n:
2640:         a = np.r_[a, np.zeros(n - len(a))]
2641:     elif len(b) < n:
2642:         b = np.r_[b, np.zeros(n - len(b))]
2643: 
2644:     IminusA = np.eye(n - 1) - linalg.companion(a).T
2645:     B = b[1:] - a[1:] * b[0]
2646:     # Solve zi = A*zi + B
2647:     zi = np.linalg.solve(IminusA, B)
2648: 
2649:     # For future reference: we could also use the following
2650:     # explicit formulas to solve the linear system:
2651:     #
2652:     # zi = np.zeros(n - 1)
2653:     # zi[0] = B.sum() / IminusA[:,0].sum()
2654:     # asum = 1.0
2655:     # csum = 0.0
2656:     # for k in range(1,n-1):
2657:     #     asum += a[k]
2658:     #     csum += b[k] - a[k]*b[0]
2659:     #     zi[k] = asum*zi[0] - csum
2660: 
2661:     return zi
2662: 
2663: 
2664: def sosfilt_zi(sos):
2665:     '''
2666:     Construct initial conditions for sosfilt for step response steady-state.
2667: 
2668:     Compute an initial state `zi` for the `sosfilt` function that corresponds
2669:     to the steady state of the step response.
2670: 
2671:     A typical use of this function is to set the initial state so that the
2672:     output of the filter starts at the same value as the first element of
2673:     the signal to be filtered.
2674: 
2675:     Parameters
2676:     ----------
2677:     sos : array_like
2678:         Array of second-order filter coefficients, must have shape
2679:         ``(n_sections, 6)``. See `sosfilt` for the SOS filter format
2680:         specification.
2681: 
2682:     Returns
2683:     -------
2684:     zi : ndarray
2685:         Initial conditions suitable for use with ``sosfilt``, shape
2686:         ``(n_sections, 2)``.
2687: 
2688:     See Also
2689:     --------
2690:     sosfilt, zpk2sos
2691: 
2692:     Notes
2693:     -----
2694:     .. versionadded:: 0.16.0
2695: 
2696:     Examples
2697:     --------
2698:     Filter a rectangular pulse that begins at time 0, with and without
2699:     the use of the `zi` argument of `scipy.signal.sosfilt`.
2700: 
2701:     >>> from scipy import signal
2702:     >>> import matplotlib.pyplot as plt
2703: 
2704:     >>> sos = signal.butter(9, 0.125, output='sos')
2705:     >>> zi = signal.sosfilt_zi(sos)
2706:     >>> x = (np.arange(250) < 100).astype(int)
2707:     >>> f1 = signal.sosfilt(sos, x)
2708:     >>> f2, zo = signal.sosfilt(sos, x, zi=zi)
2709: 
2710:     >>> plt.plot(x, 'k--', label='x')
2711:     >>> plt.plot(f1, 'b', alpha=0.5, linewidth=2, label='filtered')
2712:     >>> plt.plot(f2, 'g', alpha=0.25, linewidth=4, label='filtered with zi')
2713:     >>> plt.legend(loc='best')
2714:     >>> plt.show()
2715: 
2716:     '''
2717:     sos = np.asarray(sos)
2718:     if sos.ndim != 2 or sos.shape[1] != 6:
2719:         raise ValueError('sos must be shape (n_sections, 6)')
2720: 
2721:     n_sections = sos.shape[0]
2722:     zi = np.empty((n_sections, 2))
2723:     scale = 1.0
2724:     for section in range(n_sections):
2725:         b = sos[section, :3]
2726:         a = sos[section, 3:]
2727:         zi[section] = scale * lfilter_zi(b, a)
2728:         # If H(z) = B(z)/A(z) is this section's transfer function, then
2729:         # b.sum()/a.sum() is H(1), the gain at omega=0.  That's the steady
2730:         # state value of this section's step response.
2731:         scale *= b.sum() / a.sum()
2732: 
2733:     return zi
2734: 
2735: 
2736: def _filtfilt_gust(b, a, x, axis=-1, irlen=None):
2737:     '''Forward-backward IIR filter that uses Gustafsson's method.
2738: 
2739:     Apply the IIR filter defined by `(b,a)` to `x` twice, first forward
2740:     then backward, using Gustafsson's initial conditions [1]_.
2741: 
2742:     Let ``y_fb`` be the result of filtering first forward and then backward,
2743:     and let ``y_bf`` be the result of filtering first backward then forward.
2744:     Gustafsson's method is to compute initial conditions for the forward
2745:     pass and the backward pass such that ``y_fb == y_bf``.
2746: 
2747:     Parameters
2748:     ----------
2749:     b : scalar or 1-D ndarray
2750:         Numerator coefficients of the filter.
2751:     a : scalar or 1-D ndarray
2752:         Denominator coefficients of the filter.
2753:     x : ndarray
2754:         Data to be filtered.
2755:     axis : int, optional
2756:         Axis of `x` to be filtered.  Default is -1.
2757:     irlen : int or None, optional
2758:         The length of the nonnegligible part of the impulse response.
2759:         If `irlen` is None, or if the length of the signal is less than
2760:         ``2 * irlen``, then no part of the impulse response is ignored.
2761: 
2762:     Returns
2763:     -------
2764:     y : ndarray
2765:         The filtered data.
2766:     x0 : ndarray
2767:         Initial condition for the forward filter.
2768:     x1 : ndarray
2769:         Initial condition for the backward filter.
2770: 
2771:     Notes
2772:     -----
2773:     Typically the return values `x0` and `x1` are not needed by the
2774:     caller.  The intended use of these return values is in unit tests.
2775: 
2776:     References
2777:     ----------
2778:     .. [1] F. Gustaffson. Determining the initial states in forward-backward
2779:            filtering. Transactions on Signal Processing, 46(4):988-992, 1996.
2780: 
2781:     '''
2782:     # In the comments, "Gustafsson's paper" and [1] refer to the
2783:     # paper referenced in the docstring.
2784: 
2785:     b = np.atleast_1d(b)
2786:     a = np.atleast_1d(a)
2787: 
2788:     order = max(len(b), len(a)) - 1
2789:     if order == 0:
2790:         # The filter is just scalar multiplication, with no state.
2791:         scale = (b[0] / a[0])**2
2792:         y = scale * x
2793:         return y, np.array([]), np.array([])
2794: 
2795:     if axis != -1 or axis != x.ndim - 1:
2796:         # Move the axis containing the data to the end.
2797:         x = np.swapaxes(x, axis, x.ndim - 1)
2798: 
2799:     # n is the number of samples in the data to be filtered.
2800:     n = x.shape[-1]
2801: 
2802:     if irlen is None or n <= 2*irlen:
2803:         m = n
2804:     else:
2805:         m = irlen
2806: 
2807:     # Create Obs, the observability matrix (called O in the paper).
2808:     # This matrix can be interpreted as the operator that propagates
2809:     # an arbitrary initial state to the output, assuming the input is
2810:     # zero.
2811:     # In Gustafsson's paper, the forward and backward filters are not
2812:     # necessarily the same, so he has both O_f and O_b.  We use the same
2813:     # filter in both directions, so we only need O. The same comment
2814:     # applies to S below.
2815:     Obs = np.zeros((m, order))
2816:     zi = np.zeros(order)
2817:     zi[0] = 1
2818:     Obs[:, 0] = lfilter(b, a, np.zeros(m), zi=zi)[0]
2819:     for k in range(1, order):
2820:         Obs[k:, k] = Obs[:-k, 0]
2821: 
2822:     # Obsr is O^R (Gustafsson's notation for row-reversed O)
2823:     Obsr = Obs[::-1]
2824: 
2825:     # Create S.  S is the matrix that applies the filter to the reversed
2826:     # propagated initial conditions.  That is,
2827:     #     out = S.dot(zi)
2828:     # is the same as
2829:     #     tmp, _ = lfilter(b, a, zeros(), zi=zi)  # Propagate ICs.
2830:     #     out = lfilter(b, a, tmp[::-1])          # Reverse and filter.
2831: 
2832:     # Equations (5) & (6) of [1]
2833:     S = lfilter(b, a, Obs[::-1], axis=0)
2834: 
2835:     # Sr is S^R (row-reversed S)
2836:     Sr = S[::-1]
2837: 
2838:     # M is [(S^R - O), (O^R - S)]
2839:     if m == n:
2840:         M = np.hstack((Sr - Obs, Obsr - S))
2841:     else:
2842:         # Matrix described in section IV of [1].
2843:         M = np.zeros((2*m, 2*order))
2844:         M[:m, :order] = Sr - Obs
2845:         M[m:, order:] = Obsr - S
2846: 
2847:     # Naive forward-backward and backward-forward filters.
2848:     # These have large transients because the filters use zero initial
2849:     # conditions.
2850:     y_f = lfilter(b, a, x)
2851:     y_fb = lfilter(b, a, y_f[..., ::-1])[..., ::-1]
2852: 
2853:     y_b = lfilter(b, a, x[..., ::-1])[..., ::-1]
2854:     y_bf = lfilter(b, a, y_b)
2855: 
2856:     delta_y_bf_fb = y_bf - y_fb
2857:     if m == n:
2858:         delta = delta_y_bf_fb
2859:     else:
2860:         start_m = delta_y_bf_fb[..., :m]
2861:         end_m = delta_y_bf_fb[..., -m:]
2862:         delta = np.concatenate((start_m, end_m), axis=-1)
2863: 
2864:     # ic_opt holds the "optimal" initial conditions.
2865:     # The following code computes the result shown in the formula
2866:     # of the paper between equations (6) and (7).
2867:     if delta.ndim == 1:
2868:         ic_opt = linalg.lstsq(M, delta)[0]
2869:     else:
2870:         # Reshape delta so it can be used as an array of multiple
2871:         # right-hand-sides in linalg.lstsq.
2872:         delta2d = delta.reshape(-1, delta.shape[-1]).T
2873:         ic_opt0 = linalg.lstsq(M, delta2d)[0].T
2874:         ic_opt = ic_opt0.reshape(delta.shape[:-1] + (M.shape[-1],))
2875: 
2876:     # Now compute the filtered signal using equation (7) of [1].
2877:     # First, form [S^R, O^R] and call it W.
2878:     if m == n:
2879:         W = np.hstack((Sr, Obsr))
2880:     else:
2881:         W = np.zeros((2*m, 2*order))
2882:         W[:m, :order] = Sr
2883:         W[m:, order:] = Obsr
2884: 
2885:     # Equation (7) of [1] says
2886:     #     Y_fb^opt = Y_fb^0 + W * [x_0^opt; x_{N-1}^opt]
2887:     # `wic` is (almost) the product on the right.
2888:     # W has shape (m, 2*order), and ic_opt has shape (..., 2*order),
2889:     # so we can't use W.dot(ic_opt).  Instead, we dot ic_opt with W.T,
2890:     # so wic has shape (..., m).
2891:     wic = ic_opt.dot(W.T)
2892: 
2893:     # `wic` is "almost" the product of W and the optimal ICs in equation
2894:     # (7)--if we're using a truncated impulse response (m < n), `wic`
2895:     # contains only the adjustments required for the ends of the signal.
2896:     # Here we form y_opt, taking this into account if necessary.
2897:     y_opt = y_fb
2898:     if m == n:
2899:         y_opt += wic
2900:     else:
2901:         y_opt[..., :m] += wic[..., :m]
2902:         y_opt[..., -m:] += wic[..., -m:]
2903: 
2904:     x0 = ic_opt[..., :order]
2905:     x1 = ic_opt[..., -order:]
2906:     if axis != -1 or axis != x.ndim - 1:
2907:         # Restore the data axis to its original position.
2908:         x0 = np.swapaxes(x0, axis, x.ndim - 1)
2909:         x1 = np.swapaxes(x1, axis, x.ndim - 1)
2910:         y_opt = np.swapaxes(y_opt, axis, x.ndim - 1)
2911: 
2912:     return y_opt, x0, x1
2913: 
2914: 
2915: def filtfilt(b, a, x, axis=-1, padtype='odd', padlen=None, method='pad',
2916:              irlen=None):
2917:     '''
2918:     Apply a digital filter forward and backward to a signal.
2919: 
2920:     This function applies a linear digital filter twice, once forward and
2921:     once backwards.  The combined filter has zero phase and a filter order
2922:     twice that of the original.
2923: 
2924:     The function provides options for handling the edges of the signal.
2925: 
2926:     Parameters
2927:     ----------
2928:     b : (N,) array_like
2929:         The numerator coefficient vector of the filter.
2930:     a : (N,) array_like
2931:         The denominator coefficient vector of the filter.  If ``a[0]``
2932:         is not 1, then both `a` and `b` are normalized by ``a[0]``.
2933:     x : array_like
2934:         The array of data to be filtered.
2935:     axis : int, optional
2936:         The axis of `x` to which the filter is applied.
2937:         Default is -1.
2938:     padtype : str or None, optional
2939:         Must be 'odd', 'even', 'constant', or None.  This determines the
2940:         type of extension to use for the padded signal to which the filter
2941:         is applied.  If `padtype` is None, no padding is used.  The default
2942:         is 'odd'.
2943:     padlen : int or None, optional
2944:         The number of elements by which to extend `x` at both ends of
2945:         `axis` before applying the filter.  This value must be less than
2946:         ``x.shape[axis] - 1``.  ``padlen=0`` implies no padding.
2947:         The default value is ``3 * max(len(a), len(b))``.
2948:     method : str, optional
2949:         Determines the method for handling the edges of the signal, either
2950:         "pad" or "gust".  When `method` is "pad", the signal is padded; the
2951:         type of padding is determined by `padtype` and `padlen`, and `irlen`
2952:         is ignored.  When `method` is "gust", Gustafsson's method is used,
2953:         and `padtype` and `padlen` are ignored.
2954:     irlen : int or None, optional
2955:         When `method` is "gust", `irlen` specifies the length of the
2956:         impulse response of the filter.  If `irlen` is None, no part
2957:         of the impulse response is ignored.  For a long signal, specifying
2958:         `irlen` can significantly improve the performance of the filter.
2959: 
2960:     Returns
2961:     -------
2962:     y : ndarray
2963:         The filtered output with the same shape as `x`.
2964: 
2965:     See Also
2966:     --------
2967:     sosfiltfilt, lfilter_zi, lfilter, lfiltic, savgol_filter, sosfilt
2968: 
2969:     Notes
2970:     -----
2971:     When `method` is "pad", the function pads the data along the given axis
2972:     in one of three ways: odd, even or constant.  The odd and even extensions
2973:     have the corresponding symmetry about the end point of the data.  The
2974:     constant extension extends the data with the values at the end points. On
2975:     both the forward and backward passes, the initial condition of the
2976:     filter is found by using `lfilter_zi` and scaling it by the end point of
2977:     the extended data.
2978: 
2979:     When `method` is "gust", Gustafsson's method [1]_ is used.  Initial
2980:     conditions are chosen for the forward and backward passes so that the
2981:     forward-backward filter gives the same result as the backward-forward
2982:     filter.
2983: 
2984:     The option to use Gustaffson's method was added in scipy version 0.16.0.
2985: 
2986:     References
2987:     ----------
2988:     .. [1] F. Gustaffson, "Determining the initial states in forward-backward
2989:            filtering", Transactions on Signal Processing, Vol. 46, pp. 988-992,
2990:            1996.
2991: 
2992:     Examples
2993:     --------
2994:     The examples will use several functions from `scipy.signal`.
2995: 
2996:     >>> from scipy import signal
2997:     >>> import matplotlib.pyplot as plt
2998: 
2999:     First we create a one second signal that is the sum of two pure sine
3000:     waves, with frequencies 5 Hz and 250 Hz, sampled at 2000 Hz.
3001: 
3002:     >>> t = np.linspace(0, 1.0, 2001)
3003:     >>> xlow = np.sin(2 * np.pi * 5 * t)
3004:     >>> xhigh = np.sin(2 * np.pi * 250 * t)
3005:     >>> x = xlow + xhigh
3006: 
3007:     Now create a lowpass Butterworth filter with a cutoff of 0.125 times
3008:     the Nyquist rate, or 125 Hz, and apply it to ``x`` with `filtfilt`.
3009:     The result should be approximately ``xlow``, with no phase shift.
3010: 
3011:     >>> b, a = signal.butter(8, 0.125)
3012:     >>> y = signal.filtfilt(b, a, x, padlen=150)
3013:     >>> np.abs(y - xlow).max()
3014:     9.1086182074789912e-06
3015: 
3016:     We get a fairly clean result for this artificial example because
3017:     the odd extension is exact, and with the moderately long padding,
3018:     the filter's transients have dissipated by the time the actual data
3019:     is reached.  In general, transient effects at the edges are
3020:     unavoidable.
3021: 
3022:     The following example demonstrates the option ``method="gust"``.
3023: 
3024:     First, create a filter.
3025: 
3026:     >>> b, a = signal.ellip(4, 0.01, 120, 0.125)  # Filter to be applied.
3027:     >>> np.random.seed(123456)
3028: 
3029:     `sig` is a random input signal to be filtered.
3030: 
3031:     >>> n = 60
3032:     >>> sig = np.random.randn(n)**3 + 3*np.random.randn(n).cumsum()
3033: 
3034:     Apply `filtfilt` to `sig`, once using the Gustafsson method, and
3035:     once using padding, and plot the results for comparison.
3036: 
3037:     >>> fgust = signal.filtfilt(b, a, sig, method="gust")
3038:     >>> fpad = signal.filtfilt(b, a, sig, padlen=50)
3039:     >>> plt.plot(sig, 'k-', label='input')
3040:     >>> plt.plot(fgust, 'b-', linewidth=4, label='gust')
3041:     >>> plt.plot(fpad, 'c-', linewidth=1.5, label='pad')
3042:     >>> plt.legend(loc='best')
3043:     >>> plt.show()
3044: 
3045:     The `irlen` argument can be used to improve the performance
3046:     of Gustafsson's method.
3047: 
3048:     Estimate the impulse response length of the filter.
3049: 
3050:     >>> z, p, k = signal.tf2zpk(b, a)
3051:     >>> eps = 1e-9
3052:     >>> r = np.max(np.abs(p))
3053:     >>> approx_impulse_len = int(np.ceil(np.log(eps) / np.log(r)))
3054:     >>> approx_impulse_len
3055:     137
3056: 
3057:     Apply the filter to a longer signal, with and without the `irlen`
3058:     argument.  The difference between `y1` and `y2` is small.  For long
3059:     signals, using `irlen` gives a significant performance improvement.
3060: 
3061:     >>> x = np.random.randn(5000)
3062:     >>> y1 = signal.filtfilt(b, a, x, method='gust')
3063:     >>> y2 = signal.filtfilt(b, a, x, method='gust', irlen=approx_impulse_len)
3064:     >>> print(np.max(np.abs(y1 - y2)))
3065:     1.80056858312e-10
3066: 
3067:     '''
3068:     b = np.atleast_1d(b)
3069:     a = np.atleast_1d(a)
3070:     x = np.asarray(x)
3071: 
3072:     if method not in ["pad", "gust"]:
3073:         raise ValueError("method must be 'pad' or 'gust'.")
3074: 
3075:     if method == "gust":
3076:         y, z1, z2 = _filtfilt_gust(b, a, x, axis=axis, irlen=irlen)
3077:         return y
3078: 
3079:     # method == "pad"
3080:     edge, ext = _validate_pad(padtype, padlen, x, axis,
3081:                               ntaps=max(len(a), len(b)))
3082: 
3083:     # Get the steady state of the filter's step response.
3084:     zi = lfilter_zi(b, a)
3085: 
3086:     # Reshape zi and create x0 so that zi*x0 broadcasts
3087:     # to the correct value for the 'zi' keyword argument
3088:     # to lfilter.
3089:     zi_shape = [1] * x.ndim
3090:     zi_shape[axis] = zi.size
3091:     zi = np.reshape(zi, zi_shape)
3092:     x0 = axis_slice(ext, stop=1, axis=axis)
3093: 
3094:     # Forward filter.
3095:     (y, zf) = lfilter(b, a, ext, axis=axis, zi=zi * x0)
3096: 
3097:     # Backward filter.
3098:     # Create y0 so zi*y0 broadcasts appropriately.
3099:     y0 = axis_slice(y, start=-1, axis=axis)
3100:     (y, zf) = lfilter(b, a, axis_reverse(y, axis=axis), axis=axis, zi=zi * y0)
3101: 
3102:     # Reverse y.
3103:     y = axis_reverse(y, axis=axis)
3104: 
3105:     if edge > 0:
3106:         # Slice the actual signal from the extended signal.
3107:         y = axis_slice(y, start=edge, stop=-edge, axis=axis)
3108: 
3109:     return y
3110: 
3111: 
3112: def _validate_pad(padtype, padlen, x, axis, ntaps):
3113:     '''Helper to validate padding for filtfilt'''
3114:     if padtype not in ['even', 'odd', 'constant', None]:
3115:         raise ValueError(("Unknown value '%s' given to padtype.  padtype "
3116:                           "must be 'even', 'odd', 'constant', or None.") %
3117:                          padtype)
3118: 
3119:     if padtype is None:
3120:         padlen = 0
3121: 
3122:     if padlen is None:
3123:         # Original padding; preserved for backwards compatibility.
3124:         edge = ntaps * 3
3125:     else:
3126:         edge = padlen
3127: 
3128:     # x's 'axis' dimension must be bigger than edge.
3129:     if x.shape[axis] <= edge:
3130:         raise ValueError("The length of the input vector x must be at least "
3131:                          "padlen, which is %d." % edge)
3132: 
3133:     if padtype is not None and edge > 0:
3134:         # Make an extension of length `edge` at each
3135:         # end of the input array.
3136:         if padtype == 'even':
3137:             ext = even_ext(x, edge, axis=axis)
3138:         elif padtype == 'odd':
3139:             ext = odd_ext(x, edge, axis=axis)
3140:         else:
3141:             ext = const_ext(x, edge, axis=axis)
3142:     else:
3143:         ext = x
3144:     return edge, ext
3145: 
3146: 
3147: def sosfilt(sos, x, axis=-1, zi=None):
3148:     '''
3149:     Filter data along one dimension using cascaded second-order sections.
3150: 
3151:     Filter a data sequence, `x`, using a digital IIR filter defined by
3152:     `sos`. This is implemented by performing `lfilter` for each
3153:     second-order section.  See `lfilter` for details.
3154: 
3155:     Parameters
3156:     ----------
3157:     sos : array_like
3158:         Array of second-order filter coefficients, must have shape
3159:         ``(n_sections, 6)``. Each row corresponds to a second-order
3160:         section, with the first three columns providing the numerator
3161:         coefficients and the last three providing the denominator
3162:         coefficients.
3163:     x : array_like
3164:         An N-dimensional input array.
3165:     axis : int, optional
3166:         The axis of the input data array along which to apply the
3167:         linear filter. The filter is applied to each subarray along
3168:         this axis.  Default is -1.
3169:     zi : array_like, optional
3170:         Initial conditions for the cascaded filter delays.  It is a (at
3171:         least 2D) vector of shape ``(n_sections, ..., 2, ...)``, where
3172:         ``..., 2, ...`` denotes the shape of `x`, but with ``x.shape[axis]``
3173:         replaced by 2.  If `zi` is None or is not given then initial rest
3174:         (i.e. all zeros) is assumed.
3175:         Note that these initial conditions are *not* the same as the initial
3176:         conditions given by `lfiltic` or `lfilter_zi`.
3177: 
3178:     Returns
3179:     -------
3180:     y : ndarray
3181:         The output of the digital filter.
3182:     zf : ndarray, optional
3183:         If `zi` is None, this is not returned, otherwise, `zf` holds the
3184:         final filter delay values.
3185: 
3186:     See Also
3187:     --------
3188:     zpk2sos, sos2zpk, sosfilt_zi, sosfiltfilt, sosfreqz
3189: 
3190:     Notes
3191:     -----
3192:     The filter function is implemented as a series of second-order filters
3193:     with direct-form II transposed structure. It is designed to minimize
3194:     numerical precision errors for high-order filters.
3195: 
3196:     .. versionadded:: 0.16.0
3197: 
3198:     Examples
3199:     --------
3200:     Plot a 13th-order filter's impulse response using both `lfilter` and
3201:     `sosfilt`, showing the instability that results from trying to do a
3202:     13th-order filter in a single stage (the numerical error pushes some poles
3203:     outside of the unit circle):
3204: 
3205:     >>> import matplotlib.pyplot as plt
3206:     >>> from scipy import signal
3207:     >>> b, a = signal.ellip(13, 0.009, 80, 0.05, output='ba')
3208:     >>> sos = signal.ellip(13, 0.009, 80, 0.05, output='sos')
3209:     >>> x = signal.unit_impulse(700)
3210:     >>> y_tf = signal.lfilter(b, a, x)
3211:     >>> y_sos = signal.sosfilt(sos, x)
3212:     >>> plt.plot(y_tf, 'r', label='TF')
3213:     >>> plt.plot(y_sos, 'k', label='SOS')
3214:     >>> plt.legend(loc='best')
3215:     >>> plt.show()
3216: 
3217:     '''
3218:     x = np.asarray(x)
3219:     sos, n_sections = _validate_sos(sos)
3220:     use_zi = zi is not None
3221:     if use_zi:
3222:         zi = np.asarray(zi)
3223:         x_zi_shape = list(x.shape)
3224:         x_zi_shape[axis] = 2
3225:         x_zi_shape = tuple([n_sections] + x_zi_shape)
3226:         if zi.shape != x_zi_shape:
3227:             raise ValueError('Invalid zi shape. With axis=%r, an input with '
3228:                              'shape %r, and an sos array with %d sections, zi '
3229:                              'must have shape %r, got %r.' %
3230:                              (axis, x.shape, n_sections, x_zi_shape, zi.shape))
3231:         zf = zeros_like(zi)
3232: 
3233:     for section in range(n_sections):
3234:         if use_zi:
3235:             x, zf[section] = lfilter(sos[section, :3], sos[section, 3:],
3236:                                      x, axis, zi=zi[section])
3237:         else:
3238:             x = lfilter(sos[section, :3], sos[section, 3:], x, axis)
3239:     out = (x, zf) if use_zi else x
3240:     return out
3241: 
3242: 
3243: def sosfiltfilt(sos, x, axis=-1, padtype='odd', padlen=None):
3244:     '''
3245:     A forward-backward digital filter using cascaded second-order sections.
3246: 
3247:     See `filtfilt` for more complete information about this method.
3248: 
3249:     Parameters
3250:     ----------
3251:     sos : array_like
3252:         Array of second-order filter coefficients, must have shape
3253:         ``(n_sections, 6)``. Each row corresponds to a second-order
3254:         section, with the first three columns providing the numerator
3255:         coefficients and the last three providing the denominator
3256:         coefficients.
3257:     x : array_like
3258:         The array of data to be filtered.
3259:     axis : int, optional
3260:         The axis of `x` to which the filter is applied.
3261:         Default is -1.
3262:     padtype : str or None, optional
3263:         Must be 'odd', 'even', 'constant', or None.  This determines the
3264:         type of extension to use for the padded signal to which the filter
3265:         is applied.  If `padtype` is None, no padding is used.  The default
3266:         is 'odd'.
3267:     padlen : int or None, optional
3268:         The number of elements by which to extend `x` at both ends of
3269:         `axis` before applying the filter.  This value must be less than
3270:         ``x.shape[axis] - 1``.  ``padlen=0`` implies no padding.
3271:         The default value is::
3272: 
3273:             3 * (2 * len(sos) + 1 - min((sos[:, 2] == 0).sum(),
3274:                                         (sos[:, 5] == 0).sum()))
3275: 
3276:         The extra subtraction at the end attempts to compensate for poles
3277:         and zeros at the origin (e.g. for odd-order filters) to yield
3278:         equivalent estimates of `padlen` to those of `filtfilt` for
3279:         second-order section filters built with `scipy.signal` functions.
3280: 
3281:     Returns
3282:     -------
3283:     y : ndarray
3284:         The filtered output with the same shape as `x`.
3285: 
3286:     See Also
3287:     --------
3288:     filtfilt, sosfilt, sosfilt_zi, sosfreqz
3289: 
3290:     Notes
3291:     -----
3292:     .. versionadded:: 0.18.0
3293: 
3294:     Examples
3295:     --------
3296:     >>> from scipy.signal import sosfiltfilt, butter
3297:     >>> import matplotlib.pyplot as plt
3298: 
3299:     Create an interesting signal to filter.
3300: 
3301:     >>> n = 201
3302:     >>> t = np.linspace(0, 1, n)
3303:     >>> np.random.seed(123)
3304:     >>> x = 1 + (t < 0.5) - 0.25*t**2 + 0.05*np.random.randn(n)
3305: 
3306:     Create a lowpass Butterworth filter, and use it to filter `x`.
3307: 
3308:     >>> sos = butter(4, 0.125, output='sos')
3309:     >>> y = sosfiltfilt(sos, x)
3310: 
3311:     For comparison, apply an 8th order filter using `sosfilt`.  The filter
3312:     is initialized using the mean of the first four values of `x`.
3313: 
3314:     >>> from scipy.signal import sosfilt, sosfilt_zi
3315:     >>> sos8 = butter(8, 0.125, output='sos')
3316:     >>> zi = x[:4].mean() * sosfilt_zi(sos8)
3317:     >>> y2, zo = sosfilt(sos8, x, zi=zi)
3318: 
3319:     Plot the results.  Note that the phase of `y` matches the input, while
3320:     `y2` has a significant phase delay.
3321: 
3322:     >>> plt.plot(t, x, alpha=0.5, label='x(t)')
3323:     >>> plt.plot(t, y, label='y(t)')
3324:     >>> plt.plot(t, y2, label='y2(t)')
3325:     >>> plt.legend(framealpha=1, shadow=True)
3326:     >>> plt.grid(alpha=0.25)
3327:     >>> plt.xlabel('t')
3328:     >>> plt.show()
3329: 
3330:     '''
3331:     sos, n_sections = _validate_sos(sos)
3332: 
3333:     # `method` is "pad"...
3334:     ntaps = 2 * n_sections + 1
3335:     ntaps -= min((sos[:, 2] == 0).sum(), (sos[:, 5] == 0).sum())
3336:     edge, ext = _validate_pad(padtype, padlen, x, axis,
3337:                               ntaps=ntaps)
3338: 
3339:     # These steps follow the same form as filtfilt with modifications
3340:     zi = sosfilt_zi(sos)  # shape (n_sections, 2) --> (n_sections, ..., 2, ...)
3341:     zi_shape = [1] * x.ndim
3342:     zi_shape[axis] = 2
3343:     zi.shape = [n_sections] + zi_shape
3344:     x_0 = axis_slice(ext, stop=1, axis=axis)
3345:     (y, zf) = sosfilt(sos, ext, axis=axis, zi=zi * x_0)
3346:     y_0 = axis_slice(y, start=-1, axis=axis)
3347:     (y, zf) = sosfilt(sos, axis_reverse(y, axis=axis), axis=axis, zi=zi * y_0)
3348:     y = axis_reverse(y, axis=axis)
3349:     if edge > 0:
3350:         y = axis_slice(y, start=edge, stop=-edge, axis=axis)
3351:     return y
3352: 
3353: 
3354: def decimate(x, q, n=None, ftype='iir', axis=-1, zero_phase=True):
3355:     '''
3356:     Downsample the signal after applying an anti-aliasing filter.
3357: 
3358:     By default, an order 8 Chebyshev type I filter is used. A 30 point FIR
3359:     filter with Hamming window is used if `ftype` is 'fir'.
3360: 
3361:     Parameters
3362:     ----------
3363:     x : array_like
3364:         The signal to be downsampled, as an N-dimensional array.
3365:     q : int
3366:         The downsampling factor. When using IIR downsampling, it is recommended
3367:         to call `decimate` multiple times for downsampling factors higher than
3368:         13.
3369:     n : int, optional
3370:         The order of the filter (1 less than the length for 'fir'). Defaults to
3371:         8 for 'iir' and 20 times the downsampling factor for 'fir'.
3372:     ftype : str {'iir', 'fir'} or ``dlti`` instance, optional
3373:         If 'iir' or 'fir', specifies the type of lowpass filter. If an instance
3374:         of an `dlti` object, uses that object to filter before downsampling.
3375:     axis : int, optional
3376:         The axis along which to decimate.
3377:     zero_phase : bool, optional
3378:         Prevent phase shift by filtering with `filtfilt` instead of `lfilter`
3379:         when using an IIR filter, and shifting the outputs back by the filter's
3380:         group delay when using an FIR filter. The default value of ``True`` is
3381:         recommended, since a phase shift is generally not desired.
3382: 
3383:         .. versionadded:: 0.18.0
3384: 
3385:     Returns
3386:     -------
3387:     y : ndarray
3388:         The down-sampled signal.
3389: 
3390:     See Also
3391:     --------
3392:     resample : Resample up or down using the FFT method.
3393:     resample_poly : Resample using polyphase filtering and an FIR filter.
3394: 
3395:     Notes
3396:     -----
3397:     The ``zero_phase`` keyword was added in 0.18.0.
3398:     The possibility to use instances of ``dlti`` as ``ftype`` was added in
3399:     0.18.0.
3400:     '''
3401: 
3402:     x = asarray(x)
3403:     q = operator.index(q)
3404: 
3405:     if n is not None:
3406:         n = operator.index(n)
3407: 
3408:     if ftype == 'fir':
3409:         if n is None:
3410:             half_len = 10 * q  # reasonable cutoff for our sinc-like function
3411:             n = 2 * half_len
3412:         b, a = firwin(n+1, 1. / q, window='hamming'), 1.
3413:     elif ftype == 'iir':
3414:         if n is None:
3415:             n = 8
3416:         system = dlti(*cheby1(n, 0.05, 0.8 / q))
3417:         b, a = system.num, system.den
3418:     elif isinstance(ftype, dlti):
3419:         system = ftype._as_tf()  # Avoids copying if already in TF form
3420:         b, a = system.num, system.den
3421:     else:
3422:         raise ValueError('invalid ftype')
3423: 
3424:     sl = [slice(None)] * x.ndim
3425:     a = np.asarray(a)
3426: 
3427:     if a.size == 1:  # FIR case
3428:         b = b / a
3429:         if zero_phase:
3430:             y = resample_poly(x, 1, q, axis=axis, window=b)
3431:         else:
3432:             # upfirdn is generally faster than lfilter by a factor equal to the
3433:             # downsampling factor, since it only calculates the needed outputs
3434:             n_out = x.shape[axis] // q + bool(x.shape[axis] % q)
3435:             y = upfirdn(b, x, up=1, down=q, axis=axis)
3436:             sl[axis] = slice(None, n_out, None)
3437: 
3438:     else:  # IIR case
3439:         if zero_phase:
3440:             y = filtfilt(b, a, x, axis=axis)
3441:         else:
3442:             y = lfilter(b, a, x, axis=axis)
3443:         sl[axis] = slice(None, None, q)
3444: 
3445:     return y[sl]
3446: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'import operator' statement (line 6)
import operator

import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'operator', operator, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import threading' statement (line 7)
import threading

import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'threading', threading, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import sys' statement (line 8)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import timeit' statement (line 9)
import timeit

import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'timeit', timeit, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'from scipy.signal import sigtools, dlti' statement (line 11)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274375 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy.signal')

if (type(import_274375) is not StypyTypeError):

    if (import_274375 != 'pyd_module'):
        __import__(import_274375)
        sys_modules_274376 = sys.modules[import_274375]
        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy.signal', sys_modules_274376.module_type_store, module_type_store, ['sigtools', 'dlti'])
        nest_module(stypy.reporting.localization.Localization(__file__, 11, 0), __file__, sys_modules_274376, sys_modules_274376.module_type_store, module_type_store)
    else:
        from scipy.signal import sigtools, dlti

        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy.signal', None, module_type_store, ['sigtools', 'dlti'], [sigtools, dlti])

else:
    # Assigning a type to the variable 'scipy.signal' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'scipy.signal', import_274375)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'from scipy.signal._upfirdn import upfirdn, _output_len' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274377 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.signal._upfirdn')

if (type(import_274377) is not StypyTypeError):

    if (import_274377 != 'pyd_module'):
        __import__(import_274377)
        sys_modules_274378 = sys.modules[import_274377]
        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.signal._upfirdn', sys_modules_274378.module_type_store, module_type_store, ['upfirdn', '_output_len'])
        nest_module(stypy.reporting.localization.Localization(__file__, 12, 0), __file__, sys_modules_274378, sys_modules_274378.module_type_store, module_type_store)
    else:
        from scipy.signal._upfirdn import upfirdn, _output_len

        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.signal._upfirdn', None, module_type_store, ['upfirdn', '_output_len'], [upfirdn, _output_len])

else:
    # Assigning a type to the variable 'scipy.signal._upfirdn' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'scipy.signal._upfirdn', import_274377)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'from scipy._lib.six import callable' statement (line 13)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274379 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'scipy._lib.six')

if (type(import_274379) is not StypyTypeError):

    if (import_274379 != 'pyd_module'):
        __import__(import_274379)
        sys_modules_274380 = sys.modules[import_274379]
        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'scipy._lib.six', sys_modules_274380.module_type_store, module_type_store, ['callable'])
        nest_module(stypy.reporting.localization.Localization(__file__, 13, 0), __file__, sys_modules_274380, sys_modules_274380.module_type_store, module_type_store)
    else:
        from scipy._lib.six import callable

        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'scipy._lib.six', None, module_type_store, ['callable'], [callable])

else:
    # Assigning a type to the variable 'scipy._lib.six' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'scipy._lib.six', import_274379)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from scipy._lib._version import NumpyVersion' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274381 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy._lib._version')

if (type(import_274381) is not StypyTypeError):

    if (import_274381 != 'pyd_module'):
        __import__(import_274381)
        sys_modules_274382 = sys.modules[import_274381]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy._lib._version', sys_modules_274382.module_type_store, module_type_store, ['NumpyVersion'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_274382, sys_modules_274382.module_type_store, module_type_store)
    else:
        from scipy._lib._version import NumpyVersion

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy._lib._version', None, module_type_store, ['NumpyVersion'], [NumpyVersion])

else:
    # Assigning a type to the variable 'scipy._lib._version' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'scipy._lib._version', import_274381)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from scipy import fftpack, linalg' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274383 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy')

if (type(import_274383) is not StypyTypeError):

    if (import_274383 != 'pyd_module'):
        __import__(import_274383)
        sys_modules_274384 = sys.modules[import_274383]
        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy', sys_modules_274384.module_type_store, module_type_store, ['fftpack', 'linalg'])
        nest_module(stypy.reporting.localization.Localization(__file__, 15, 0), __file__, sys_modules_274384, sys_modules_274384.module_type_store, module_type_store)
    else:
        from scipy import fftpack, linalg

        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy', None, module_type_store, ['fftpack', 'linalg'], [fftpack, linalg])

else:
    # Assigning a type to the variable 'scipy' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'scipy', import_274383)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'from numpy import allclose, angle, arange, argsort, array, asarray, atleast_1d, atleast_2d, cast, dot, exp, expand_dims, iscomplexobj, mean, ndarray, newaxis, ones, pi, poly, polyadd, polyder, polydiv, polymul, polysub, polyval, product, r_, ravel, real_if_close, reshape, roots, sort, take, transpose, unique, where, zeros, zeros_like' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274385 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy')

if (type(import_274385) is not StypyTypeError):

    if (import_274385 != 'pyd_module'):
        __import__(import_274385)
        sys_modules_274386 = sys.modules[import_274385]
        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy', sys_modules_274386.module_type_store, module_type_store, ['allclose', 'angle', 'arange', 'argsort', 'array', 'asarray', 'atleast_1d', 'atleast_2d', 'cast', 'dot', 'exp', 'expand_dims', 'iscomplexobj', 'mean', 'ndarray', 'newaxis', 'ones', 'pi', 'poly', 'polyadd', 'polyder', 'polydiv', 'polymul', 'polysub', 'polyval', 'product', 'r_', 'ravel', 'real_if_close', 'reshape', 'roots', 'sort', 'take', 'transpose', 'unique', 'where', 'zeros', 'zeros_like'])
        nest_module(stypy.reporting.localization.Localization(__file__, 16, 0), __file__, sys_modules_274386, sys_modules_274386.module_type_store, module_type_store)
    else:
        from numpy import allclose, angle, arange, argsort, array, asarray, atleast_1d, atleast_2d, cast, dot, exp, expand_dims, iscomplexobj, mean, ndarray, newaxis, ones, pi, poly, polyadd, polyder, polydiv, polymul, polysub, polyval, product, r_, ravel, real_if_close, reshape, roots, sort, take, transpose, unique, where, zeros, zeros_like

        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy', None, module_type_store, ['allclose', 'angle', 'arange', 'argsort', 'array', 'asarray', 'atleast_1d', 'atleast_2d', 'cast', 'dot', 'exp', 'expand_dims', 'iscomplexobj', 'mean', 'ndarray', 'newaxis', 'ones', 'pi', 'poly', 'polyadd', 'polyder', 'polydiv', 'polymul', 'polysub', 'polyval', 'product', 'r_', 'ravel', 'real_if_close', 'reshape', 'roots', 'sort', 'take', 'transpose', 'unique', 'where', 'zeros', 'zeros_like'], [allclose, angle, arange, argsort, array, asarray, atleast_1d, atleast_2d, cast, dot, exp, expand_dims, iscomplexobj, mean, ndarray, newaxis, ones, pi, poly, polyadd, polyder, polydiv, polymul, polysub, polyval, product, r_, ravel, real_if_close, reshape, roots, sort, take, transpose, unique, where, zeros, zeros_like])

else:
    # Assigning a type to the variable 'numpy' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy', import_274385)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'import numpy' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274387 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'numpy')

if (type(import_274387) is not StypyTypeError):

    if (import_274387 != 'pyd_module'):
        __import__(import_274387)
        sys_modules_274388 = sys.modules[import_274387]
        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'np', sys_modules_274388.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'numpy', import_274387)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'import math' statement (line 24)
import math

import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'math', math, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'from scipy.special import factorial' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274389 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'scipy.special')

if (type(import_274389) is not StypyTypeError):

    if (import_274389 != 'pyd_module'):
        __import__(import_274389)
        sys_modules_274390 = sys.modules[import_274389]
        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'scipy.special', sys_modules_274390.module_type_store, module_type_store, ['factorial'])
        nest_module(stypy.reporting.localization.Localization(__file__, 25, 0), __file__, sys_modules_274390, sys_modules_274390.module_type_store, module_type_store)
    else:
        from scipy.special import factorial

        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'scipy.special', None, module_type_store, ['factorial'], [factorial])

else:
    # Assigning a type to the variable 'scipy.special' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'scipy.special', import_274389)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'from scipy.signal.windows import get_window' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274391 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.signal.windows')

if (type(import_274391) is not StypyTypeError):

    if (import_274391 != 'pyd_module'):
        __import__(import_274391)
        sys_modules_274392 = sys.modules[import_274391]
        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.signal.windows', sys_modules_274392.module_type_store, module_type_store, ['get_window'])
        nest_module(stypy.reporting.localization.Localization(__file__, 26, 0), __file__, sys_modules_274392, sys_modules_274392.module_type_store, module_type_store)
    else:
        from scipy.signal.windows import get_window

        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.signal.windows', None, module_type_store, ['get_window'], [get_window])

else:
    # Assigning a type to the variable 'scipy.signal.windows' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'scipy.signal.windows', import_274391)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'from scipy.signal._arraytools import axis_slice, axis_reverse, odd_ext, even_ext, const_ext' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274393 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'scipy.signal._arraytools')

if (type(import_274393) is not StypyTypeError):

    if (import_274393 != 'pyd_module'):
        __import__(import_274393)
        sys_modules_274394 = sys.modules[import_274393]
        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'scipy.signal._arraytools', sys_modules_274394.module_type_store, module_type_store, ['axis_slice', 'axis_reverse', 'odd_ext', 'even_ext', 'const_ext'])
        nest_module(stypy.reporting.localization.Localization(__file__, 27, 0), __file__, sys_modules_274394, sys_modules_274394.module_type_store, module_type_store)
    else:
        from scipy.signal._arraytools import axis_slice, axis_reverse, odd_ext, even_ext, const_ext

        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'scipy.signal._arraytools', None, module_type_store, ['axis_slice', 'axis_reverse', 'odd_ext', 'even_ext', 'const_ext'], [axis_slice, axis_reverse, odd_ext, even_ext, const_ext])

else:
    # Assigning a type to the variable 'scipy.signal._arraytools' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'scipy.signal._arraytools', import_274393)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'from scipy.signal.filter_design import cheby1, _validate_sos' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274395 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.signal.filter_design')

if (type(import_274395) is not StypyTypeError):

    if (import_274395 != 'pyd_module'):
        __import__(import_274395)
        sys_modules_274396 = sys.modules[import_274395]
        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.signal.filter_design', sys_modules_274396.module_type_store, module_type_store, ['cheby1', '_validate_sos'])
        nest_module(stypy.reporting.localization.Localization(__file__, 28, 0), __file__, sys_modules_274396, sys_modules_274396.module_type_store, module_type_store)
    else:
        from scipy.signal.filter_design import cheby1, _validate_sos

        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.signal.filter_design', None, module_type_store, ['cheby1', '_validate_sos'], [cheby1, _validate_sos])

else:
    # Assigning a type to the variable 'scipy.signal.filter_design' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'scipy.signal.filter_design', import_274395)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from scipy.signal.fir_filter_design import firwin' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/signal/')
import_274397 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.signal.fir_filter_design')

if (type(import_274397) is not StypyTypeError):

    if (import_274397 != 'pyd_module'):
        __import__(import_274397)
        sys_modules_274398 = sys.modules[import_274397]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.signal.fir_filter_design', sys_modules_274398.module_type_store, module_type_store, ['firwin'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_274398, sys_modules_274398.module_type_store, module_type_store)
    else:
        from scipy.signal.fir_filter_design import firwin

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.signal.fir_filter_design', None, module_type_store, ['firwin'], [firwin])

else:
    # Assigning a type to the variable 'scipy.signal.fir_filter_design' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'scipy.signal.fir_filter_design', import_274397)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/signal/')



# Evaluating a boolean operation

# Getting the type of 'sys' (line 31)
sys_274399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 31, 3), 'sys')
# Obtaining the member 'version_info' of a type (line 31)
version_info_274400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 31, 3), sys_274399, 'version_info')
# Obtaining the member 'major' of a type (line 31)
major_274401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 31, 3), version_info_274400, 'major')
int_274402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 29), 'int')
# Applying the binary operator '>=' (line 31)
result_ge_274403 = python_operator(stypy.reporting.localization.Localization(__file__, 31, 3), '>=', major_274401, int_274402)


# Getting the type of 'sys' (line 31)
sys_274404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 31, 35), 'sys')
# Obtaining the member 'version_info' of a type (line 31)
version_info_274405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 31, 35), sys_274404, 'version_info')
# Obtaining the member 'minor' of a type (line 31)
minor_274406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 31, 35), version_info_274405, 'minor')
int_274407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 31, 61), 'int')
# Applying the binary operator '>=' (line 31)
result_ge_274408 = python_operator(stypy.reporting.localization.Localization(__file__, 31, 35), '>=', minor_274406, int_274407)

# Applying the binary operator 'and' (line 31)
result_and_keyword_274409 = python_operator(stypy.reporting.localization.Localization(__file__, 31, 3), 'and', result_ge_274403, result_ge_274408)

# Testing the type of an if condition (line 31)
if_condition_274410 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 31, 0), result_and_keyword_274409)
# Assigning a type to the variable 'if_condition_274410' (line 31)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'if_condition_274410', if_condition_274410)
# SSA begins for if statement (line 31)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 4))

# 'from math import gcd' statement (line 32)
try:
    from math import gcd

except:
    gcd = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 32, 4), 'math', None, module_type_store, ['gcd'], [gcd])

# SSA branch for the else part of an if statement (line 31)
module_type_store.open_ssa_branch('else')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 4))

# 'from fractions import gcd' statement (line 34)
try:
    from fractions import gcd

except:
    gcd = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 34, 4), 'fractions', None, module_type_store, ['gcd'], [gcd])

# SSA join for if statement (line 31)
module_type_store = module_type_store.join_ssa_context()


# Assigning a List to a Name (line 37):

# Assigning a List to a Name (line 37):
__all__ = ['correlate', 'fftconvolve', 'convolve', 'convolve2d', 'correlate2d', 'order_filter', 'medfilt', 'medfilt2d', 'wiener', 'lfilter', 'lfiltic', 'sosfilt', 'deconvolve', 'hilbert', 'hilbert2', 'cmplx_sort', 'unique_roots', 'invres', 'invresz', 'residue', 'residuez', 'resample', 'resample_poly', 'detrend', 'lfilter_zi', 'sosfilt_zi', 'sosfiltfilt', 'choose_conv_method', 'filtfilt', 'decimate', 'vectorstrength']
module_type_store.set_exportable_members(['correlate', 'fftconvolve', 'convolve', 'convolve2d', 'correlate2d', 'order_filter', 'medfilt', 'medfilt2d', 'wiener', 'lfilter', 'lfiltic', 'sosfilt', 'deconvolve', 'hilbert', 'hilbert2', 'cmplx_sort', 'unique_roots', 'invres', 'invresz', 'residue', 'residuez', 'resample', 'resample_poly', 'detrend', 'lfilter_zi', 'sosfilt_zi', 'sosfiltfilt', 'choose_conv_method', 'filtfilt', 'decimate', 'vectorstrength'])

# Obtaining an instance of the builtin type 'list' (line 37)
list_274411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 37)
# Adding element type (line 37)
str_274412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 11), 'str', 'correlate')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274412)
# Adding element type (line 37)
str_274413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 24), 'str', 'fftconvolve')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274413)
# Adding element type (line 37)
str_274414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 39), 'str', 'convolve')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274414)
# Adding element type (line 37)
str_274415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 51), 'str', 'convolve2d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274415)
# Adding element type (line 37)
str_274416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 65), 'str', 'correlate2d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274416)
# Adding element type (line 37)
str_274417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 11), 'str', 'order_filter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274417)
# Adding element type (line 37)
str_274418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 27), 'str', 'medfilt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274418)
# Adding element type (line 37)
str_274419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 38), 'str', 'medfilt2d')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274419)
# Adding element type (line 37)
str_274420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 51), 'str', 'wiener')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274420)
# Adding element type (line 37)
str_274421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 61), 'str', 'lfilter')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274421)
# Adding element type (line 37)
str_274422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 11), 'str', 'lfiltic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274422)
# Adding element type (line 37)
str_274423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 22), 'str', 'sosfilt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274423)
# Adding element type (line 37)
str_274424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 33), 'str', 'deconvolve')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274424)
# Adding element type (line 37)
str_274425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 47), 'str', 'hilbert')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274425)
# Adding element type (line 37)
str_274426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 58), 'str', 'hilbert2')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274426)
# Adding element type (line 37)
str_274427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 11), 'str', 'cmplx_sort')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274427)
# Adding element type (line 37)
str_274428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 25), 'str', 'unique_roots')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274428)
# Adding element type (line 37)
str_274429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 41), 'str', 'invres')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274429)
# Adding element type (line 37)
str_274430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 51), 'str', 'invresz')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274430)
# Adding element type (line 37)
str_274431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 62), 'str', 'residue')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274431)
# Adding element type (line 37)
str_274432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 11), 'str', 'residuez')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274432)
# Adding element type (line 37)
str_274433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 23), 'str', 'resample')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274433)
# Adding element type (line 37)
str_274434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 35), 'str', 'resample_poly')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274434)
# Adding element type (line 37)
str_274435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 52), 'str', 'detrend')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274435)
# Adding element type (line 37)
str_274436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 11), 'str', 'lfilter_zi')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274436)
# Adding element type (line 37)
str_274437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 25), 'str', 'sosfilt_zi')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274437)
# Adding element type (line 37)
str_274438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 39), 'str', 'sosfiltfilt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274438)
# Adding element type (line 37)
str_274439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 54), 'str', 'choose_conv_method')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274439)
# Adding element type (line 37)
str_274440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 11), 'str', 'filtfilt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274440)
# Adding element type (line 37)
str_274441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 23), 'str', 'decimate')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274441)
# Adding element type (line 37)
str_274442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 35), 'str', 'vectorstrength')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_274411, str_274442)

# Assigning a type to the variable '__all__' (line 37)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), '__all__', list_274411)

# Assigning a Dict to a Name (line 46):

# Assigning a Dict to a Name (line 46):

# Obtaining an instance of the builtin type 'dict' (line 46)
dict_274443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 12), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 46)
# Adding element type (key, value) (line 46)
str_274444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 13), 'str', 'valid')
int_274445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 22), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 12), dict_274443, (str_274444, int_274445))
# Adding element type (key, value) (line 46)
str_274446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 25), 'str', 'same')
int_274447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 33), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 12), dict_274443, (str_274446, int_274447))
# Adding element type (key, value) (line 46)
str_274448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 36), 'str', 'full')
int_274449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 44), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 46, 12), dict_274443, (str_274448, int_274449))

# Assigning a type to the variable '_modedict' (line 46)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 0), '_modedict', dict_274443)

# Assigning a Dict to a Name (line 48):

# Assigning a Dict to a Name (line 48):

# Obtaining an instance of the builtin type 'dict' (line 48)
dict_274450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 48)
# Adding element type (key, value) (line 48)
str_274451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 17), 'str', 'fill')
int_274452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 25), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 16), dict_274450, (str_274451, int_274452))
# Adding element type (key, value) (line 48)
str_274453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 28), 'str', 'pad')
int_274454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 35), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 16), dict_274450, (str_274453, int_274454))
# Adding element type (key, value) (line 48)
str_274455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 38), 'str', 'wrap')
int_274456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 46), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 16), dict_274450, (str_274455, int_274456))
# Adding element type (key, value) (line 48)
str_274457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 49), 'str', 'circular')
int_274458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 61), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 16), dict_274450, (str_274457, int_274458))
# Adding element type (key, value) (line 48)
str_274459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 64), 'str', 'symm')
int_274460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 72), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 16), dict_274450, (str_274459, int_274460))
# Adding element type (key, value) (line 48)
str_274461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 17), 'str', 'symmetric')
int_274462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 30), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 16), dict_274450, (str_274461, int_274462))
# Adding element type (key, value) (line 48)
str_274463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 33), 'str', 'reflect')
int_274464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 44), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 48, 16), dict_274450, (str_274463, int_274464))

# Assigning a type to the variable '_boundarydict' (line 48)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 0), '_boundarydict', dict_274450)

# Assigning a Compare to a Name (line 52):

# Assigning a Compare to a Name (line 52):


# Call to NumpyVersion(...): (line 52)
# Processing the call arguments (line 52)
# Getting the type of 'np' (line 52)
np_274466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 30), 'np', False)
# Obtaining the member '__version__' of a type (line 52)
version___274467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 30), np_274466, '__version__')
# Processing the call keyword arguments (line 52)
kwargs_274468 = {}
# Getting the type of 'NumpyVersion' (line 52)
NumpyVersion_274465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 17), 'NumpyVersion', False)
# Calling NumpyVersion(args, kwargs) (line 52)
NumpyVersion_call_result_274469 = invoke(stypy.reporting.localization.Localization(__file__, 52, 17), NumpyVersion_274465, *[version___274467], **kwargs_274468)

str_274470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 49), 'str', '1.9.0.dev-e24486e')
# Applying the binary operator '>=' (line 52)
result_ge_274471 = python_operator(stypy.reporting.localization.Localization(__file__, 52, 17), '>=', NumpyVersion_call_result_274469, str_274470)

# Assigning a type to the variable '_rfft_mt_safe' (line 52)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), '_rfft_mt_safe', result_ge_274471)

# Assigning a Call to a Name (line 54):

# Assigning a Call to a Name (line 54):

# Call to Lock(...): (line 54)
# Processing the call keyword arguments (line 54)
kwargs_274474 = {}
# Getting the type of 'threading' (line 54)
threading_274472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 13), 'threading', False)
# Obtaining the member 'Lock' of a type (line 54)
Lock_274473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 54, 13), threading_274472, 'Lock')
# Calling Lock(args, kwargs) (line 54)
Lock_call_result_274475 = invoke(stypy.reporting.localization.Localization(__file__, 54, 13), Lock_274473, *[], **kwargs_274474)

# Assigning a type to the variable '_rfft_lock' (line 54)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 0), '_rfft_lock', Lock_call_result_274475)

@norecursion
def _valfrommode(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_valfrommode'
    module_type_store = module_type_store.open_function_context('_valfrommode', 57, 0, False)
    
    # Passed parameters checking function
    _valfrommode.stypy_localization = localization
    _valfrommode.stypy_type_of_self = None
    _valfrommode.stypy_type_store = module_type_store
    _valfrommode.stypy_function_name = '_valfrommode'
    _valfrommode.stypy_param_names_list = ['mode']
    _valfrommode.stypy_varargs_param_name = None
    _valfrommode.stypy_kwargs_param_name = None
    _valfrommode.stypy_call_defaults = defaults
    _valfrommode.stypy_call_varargs = varargs
    _valfrommode.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_valfrommode', ['mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_valfrommode', localization, ['mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_valfrommode(...)' code ##################

    
    
    # SSA begins for try-except statement (line 58)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Name (line 59):
    
    # Assigning a Subscript to a Name (line 59):
    
    # Obtaining the type of the subscript
    # Getting the type of 'mode' (line 59)
    mode_274476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 24), 'mode')
    # Getting the type of '_modedict' (line 59)
    _modedict_274477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 14), '_modedict')
    # Obtaining the member '__getitem__' of a type (line 59)
    getitem___274478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 59, 14), _modedict_274477, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 59)
    subscript_call_result_274479 = invoke(stypy.reporting.localization.Localization(__file__, 59, 14), getitem___274478, mode_274476)
    
    # Assigning a type to the variable 'val' (line 59)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 8), 'val', subscript_call_result_274479)
    # SSA branch for the except part of a try statement (line 58)
    # SSA branch for the except 'KeyError' branch of a try statement (line 58)
    module_type_store.open_ssa_branch('except')
    
    
    # Getting the type of 'mode' (line 61)
    mode_274480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 61, 11), 'mode')
    
    # Obtaining an instance of the builtin type 'list' (line 61)
    list_274481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 61)
    # Adding element type (line 61)
    int_274482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 24), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 61, 23), list_274481, int_274482)
    # Adding element type (line 61)
    int_274483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 27), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 61, 23), list_274481, int_274483)
    # Adding element type (line 61)
    int_274484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 30), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 61, 23), list_274481, int_274484)
    
    # Applying the binary operator 'notin' (line 61)
    result_contains_274485 = python_operator(stypy.reporting.localization.Localization(__file__, 61, 11), 'notin', mode_274480, list_274481)
    
    # Testing the type of an if condition (line 61)
    if_condition_274486 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 61, 8), result_contains_274485)
    # Assigning a type to the variable 'if_condition_274486' (line 61)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 61, 8), 'if_condition_274486', if_condition_274486)
    # SSA begins for if statement (line 61)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 62)
    # Processing the call arguments (line 62)
    str_274488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 29), 'str', "Acceptable mode flags are 'valid' (0), 'same' (1), or 'full' (2).")
    # Processing the call keyword arguments (line 62)
    kwargs_274489 = {}
    # Getting the type of 'ValueError' (line 62)
    ValueError_274487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 62)
    ValueError_call_result_274490 = invoke(stypy.reporting.localization.Localization(__file__, 62, 18), ValueError_274487, *[str_274488], **kwargs_274489)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 62, 12), ValueError_call_result_274490, 'raise parameter', BaseException)
    # SSA join for if statement (line 61)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 64):
    
    # Assigning a Name to a Name (line 64):
    # Getting the type of 'mode' (line 64)
    mode_274491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 14), 'mode')
    # Assigning a type to the variable 'val' (line 64)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 64, 8), 'val', mode_274491)
    # SSA join for try-except statement (line 58)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'val' (line 65)
    val_274492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 11), 'val')
    # Assigning a type to the variable 'stypy_return_type' (line 65)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 65, 4), 'stypy_return_type', val_274492)
    
    # ################# End of '_valfrommode(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_valfrommode' in the type store
    # Getting the type of 'stypy_return_type' (line 57)
    stypy_return_type_274493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274493)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_valfrommode'
    return stypy_return_type_274493

# Assigning a type to the variable '_valfrommode' (line 57)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 0), '_valfrommode', _valfrommode)

@norecursion
def _bvalfromboundary(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_bvalfromboundary'
    module_type_store = module_type_store.open_function_context('_bvalfromboundary', 68, 0, False)
    
    # Passed parameters checking function
    _bvalfromboundary.stypy_localization = localization
    _bvalfromboundary.stypy_type_of_self = None
    _bvalfromboundary.stypy_type_store = module_type_store
    _bvalfromboundary.stypy_function_name = '_bvalfromboundary'
    _bvalfromboundary.stypy_param_names_list = ['boundary']
    _bvalfromboundary.stypy_varargs_param_name = None
    _bvalfromboundary.stypy_kwargs_param_name = None
    _bvalfromboundary.stypy_call_defaults = defaults
    _bvalfromboundary.stypy_call_varargs = varargs
    _bvalfromboundary.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_bvalfromboundary', ['boundary'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_bvalfromboundary', localization, ['boundary'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_bvalfromboundary(...)' code ##################

    
    
    # SSA begins for try-except statement (line 69)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a BinOp to a Name (line 70):
    
    # Assigning a BinOp to a Name (line 70):
    
    # Obtaining the type of the subscript
    # Getting the type of 'boundary' (line 70)
    boundary_274494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 28), 'boundary')
    # Getting the type of '_boundarydict' (line 70)
    _boundarydict_274495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 14), '_boundarydict')
    # Obtaining the member '__getitem__' of a type (line 70)
    getitem___274496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 70, 14), _boundarydict_274495, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 70)
    subscript_call_result_274497 = invoke(stypy.reporting.localization.Localization(__file__, 70, 14), getitem___274496, boundary_274494)
    
    int_274498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 70, 41), 'int')
    # Applying the binary operator '<<' (line 70)
    result_lshift_274499 = python_operator(stypy.reporting.localization.Localization(__file__, 70, 14), '<<', subscript_call_result_274497, int_274498)
    
    # Assigning a type to the variable 'val' (line 70)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 8), 'val', result_lshift_274499)
    # SSA branch for the except part of a try statement (line 69)
    # SSA branch for the except 'KeyError' branch of a try statement (line 69)
    module_type_store.open_ssa_branch('except')
    
    
    # Getting the type of 'val' (line 72)
    val_274500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 11), 'val')
    
    # Obtaining an instance of the builtin type 'list' (line 72)
    list_274501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 72)
    # Adding element type (line 72)
    int_274502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 72, 22), list_274501, int_274502)
    # Adding element type (line 72)
    int_274503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 26), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 72, 22), list_274501, int_274503)
    # Adding element type (line 72)
    int_274504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 72, 29), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 72, 22), list_274501, int_274504)
    
    # Applying the binary operator 'notin' (line 72)
    result_contains_274505 = python_operator(stypy.reporting.localization.Localization(__file__, 72, 11), 'notin', val_274500, list_274501)
    
    # Testing the type of an if condition (line 72)
    if_condition_274506 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 72, 8), result_contains_274505)
    # Assigning a type to the variable 'if_condition_274506' (line 72)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 72, 8), 'if_condition_274506', if_condition_274506)
    # SSA begins for if statement (line 72)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 73)
    # Processing the call arguments (line 73)
    str_274508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, 29), 'str', "Acceptable boundary flags are 'fill', 'wrap' (or 'circular'), \n  and 'symm' (or 'symmetric').")
    # Processing the call keyword arguments (line 73)
    kwargs_274509 = {}
    # Getting the type of 'ValueError' (line 73)
    ValueError_274507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 73)
    ValueError_call_result_274510 = invoke(stypy.reporting.localization.Localization(__file__, 73, 18), ValueError_274507, *[str_274508], **kwargs_274509)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 73, 12), ValueError_call_result_274510, 'raise parameter', BaseException)
    # SSA join for if statement (line 72)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 76):
    
    # Assigning a BinOp to a Name (line 76):
    # Getting the type of 'boundary' (line 76)
    boundary_274511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 14), 'boundary')
    int_274512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 26), 'int')
    # Applying the binary operator '<<' (line 76)
    result_lshift_274513 = python_operator(stypy.reporting.localization.Localization(__file__, 76, 14), '<<', boundary_274511, int_274512)
    
    # Assigning a type to the variable 'val' (line 76)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 8), 'val', result_lshift_274513)
    # SSA join for try-except statement (line 69)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'val' (line 77)
    val_274514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 11), 'val')
    # Assigning a type to the variable 'stypy_return_type' (line 77)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 4), 'stypy_return_type', val_274514)
    
    # ################# End of '_bvalfromboundary(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_bvalfromboundary' in the type store
    # Getting the type of 'stypy_return_type' (line 68)
    stypy_return_type_274515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274515)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_bvalfromboundary'
    return stypy_return_type_274515

# Assigning a type to the variable '_bvalfromboundary' (line 68)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 0), '_bvalfromboundary', _bvalfromboundary)

@norecursion
def _inputs_swap_needed(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_inputs_swap_needed'
    module_type_store = module_type_store.open_function_context('_inputs_swap_needed', 80, 0, False)
    
    # Passed parameters checking function
    _inputs_swap_needed.stypy_localization = localization
    _inputs_swap_needed.stypy_type_of_self = None
    _inputs_swap_needed.stypy_type_store = module_type_store
    _inputs_swap_needed.stypy_function_name = '_inputs_swap_needed'
    _inputs_swap_needed.stypy_param_names_list = ['mode', 'shape1', 'shape2']
    _inputs_swap_needed.stypy_varargs_param_name = None
    _inputs_swap_needed.stypy_kwargs_param_name = None
    _inputs_swap_needed.stypy_call_defaults = defaults
    _inputs_swap_needed.stypy_call_varargs = varargs
    _inputs_swap_needed.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_inputs_swap_needed', ['mode', 'shape1', 'shape2'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_inputs_swap_needed', localization, ['mode', 'shape1', 'shape2'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_inputs_swap_needed(...)' code ##################

    str_274516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 92, (-1)), 'str', "\n    If in 'valid' mode, returns whether or not the input arrays need to be\n    swapped depending on whether `shape1` is at least as large as `shape2` in\n    every dimension.\n\n    This is important for some of the correlation and convolution\n    implementations in this module, where the larger array input needs to come\n    before the smaller array input when operating in this mode.\n\n    Note that if the mode provided is not 'valid', False is immediately\n    returned.\n    ")
    
    
    # Getting the type of 'mode' (line 93)
    mode_274517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 7), 'mode')
    str_274518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 15), 'str', 'valid')
    # Applying the binary operator '==' (line 93)
    result_eq_274519 = python_operator(stypy.reporting.localization.Localization(__file__, 93, 7), '==', mode_274517, str_274518)
    
    # Testing the type of an if condition (line 93)
    if_condition_274520 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 93, 4), result_eq_274519)
    # Assigning a type to the variable 'if_condition_274520' (line 93)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'if_condition_274520', if_condition_274520)
    # SSA begins for if statement (line 93)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 94):
    
    # Assigning a Name to a Name (line 94):
    # Getting the type of 'True' (line 94)
    True_274521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 19), 'True')
    # Assigning a type to the variable 'tuple_assignment_274306' (line 94)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'tuple_assignment_274306', True_274521)
    
    # Assigning a Name to a Name (line 94):
    # Getting the type of 'True' (line 94)
    True_274522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 25), 'True')
    # Assigning a type to the variable 'tuple_assignment_274307' (line 94)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'tuple_assignment_274307', True_274522)
    
    # Assigning a Name to a Name (line 94):
    # Getting the type of 'tuple_assignment_274306' (line 94)
    tuple_assignment_274306_274523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'tuple_assignment_274306')
    # Assigning a type to the variable 'ok1' (line 94)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'ok1', tuple_assignment_274306_274523)
    
    # Assigning a Name to a Name (line 94):
    # Getting the type of 'tuple_assignment_274307' (line 94)
    tuple_assignment_274307_274524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'tuple_assignment_274307')
    # Assigning a type to the variable 'ok2' (line 94)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 13), 'ok2', tuple_assignment_274307_274524)
    
    
    # Call to zip(...): (line 96)
    # Processing the call arguments (line 96)
    # Getting the type of 'shape1' (line 96)
    shape1_274526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 26), 'shape1', False)
    # Getting the type of 'shape2' (line 96)
    shape2_274527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 34), 'shape2', False)
    # Processing the call keyword arguments (line 96)
    kwargs_274528 = {}
    # Getting the type of 'zip' (line 96)
    zip_274525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 22), 'zip', False)
    # Calling zip(args, kwargs) (line 96)
    zip_call_result_274529 = invoke(stypy.reporting.localization.Localization(__file__, 96, 22), zip_274525, *[shape1_274526, shape2_274527], **kwargs_274528)
    
    # Testing the type of a for loop iterable (line 96)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 96, 8), zip_call_result_274529)
    # Getting the type of the for loop variable (line 96)
    for_loop_var_274530 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 96, 8), zip_call_result_274529)
    # Assigning a type to the variable 'd1' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'd1', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 96, 8), for_loop_var_274530))
    # Assigning a type to the variable 'd2' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'd2', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 96, 8), for_loop_var_274530))
    # SSA begins for a for statement (line 96)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Getting the type of 'd1' (line 97)
    d1_274531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 19), 'd1')
    # Getting the type of 'd2' (line 97)
    d2_274532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 25), 'd2')
    # Applying the binary operator '>=' (line 97)
    result_ge_274533 = python_operator(stypy.reporting.localization.Localization(__file__, 97, 19), '>=', d1_274531, d2_274532)
    
    # Applying the 'not' unary operator (line 97)
    result_not__274534 = python_operator(stypy.reporting.localization.Localization(__file__, 97, 15), 'not', result_ge_274533)
    
    # Testing the type of an if condition (line 97)
    if_condition_274535 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 97, 12), result_not__274534)
    # Assigning a type to the variable 'if_condition_274535' (line 97)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 12), 'if_condition_274535', if_condition_274535)
    # SSA begins for if statement (line 97)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 98):
    
    # Assigning a Name to a Name (line 98):
    # Getting the type of 'False' (line 98)
    False_274536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 22), 'False')
    # Assigning a type to the variable 'ok1' (line 98)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 16), 'ok1', False_274536)
    # SSA join for if statement (line 97)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Getting the type of 'd2' (line 99)
    d2_274537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 19), 'd2')
    # Getting the type of 'd1' (line 99)
    d1_274538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 25), 'd1')
    # Applying the binary operator '>=' (line 99)
    result_ge_274539 = python_operator(stypy.reporting.localization.Localization(__file__, 99, 19), '>=', d2_274537, d1_274538)
    
    # Applying the 'not' unary operator (line 99)
    result_not__274540 = python_operator(stypy.reporting.localization.Localization(__file__, 99, 15), 'not', result_ge_274539)
    
    # Testing the type of an if condition (line 99)
    if_condition_274541 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 99, 12), result_not__274540)
    # Assigning a type to the variable 'if_condition_274541' (line 99)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 12), 'if_condition_274541', if_condition_274541)
    # SSA begins for if statement (line 99)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 100):
    
    # Assigning a Name to a Name (line 100):
    # Getting the type of 'False' (line 100)
    False_274542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 22), 'False')
    # Assigning a type to the variable 'ok2' (line 100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 100, 16), 'ok2', False_274542)
    # SSA join for if statement (line 99)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Evaluating a boolean operation
    # Getting the type of 'ok1' (line 102)
    ok1_274543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 16), 'ok1')
    # Getting the type of 'ok2' (line 102)
    ok2_274544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 23), 'ok2')
    # Applying the binary operator 'or' (line 102)
    result_or_keyword_274545 = python_operator(stypy.reporting.localization.Localization(__file__, 102, 16), 'or', ok1_274543, ok2_274544)
    
    # Applying the 'not' unary operator (line 102)
    result_not__274546 = python_operator(stypy.reporting.localization.Localization(__file__, 102, 11), 'not', result_or_keyword_274545)
    
    # Testing the type of an if condition (line 102)
    if_condition_274547 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 102, 8), result_not__274546)
    # Assigning a type to the variable 'if_condition_274547' (line 102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 8), 'if_condition_274547', if_condition_274547)
    # SSA begins for if statement (line 102)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 103)
    # Processing the call arguments (line 103)
    str_274549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 29), 'str', "For 'valid' mode, one must be at least as large as the other in every dimension")
    # Processing the call keyword arguments (line 103)
    kwargs_274550 = {}
    # Getting the type of 'ValueError' (line 103)
    ValueError_274548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 103)
    ValueError_call_result_274551 = invoke(stypy.reporting.localization.Localization(__file__, 103, 18), ValueError_274548, *[str_274549], **kwargs_274550)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 103, 12), ValueError_call_result_274551, 'raise parameter', BaseException)
    # SSA join for if statement (line 102)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'ok1' (line 106)
    ok1_274552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 19), 'ok1')
    # Applying the 'not' unary operator (line 106)
    result_not__274553 = python_operator(stypy.reporting.localization.Localization(__file__, 106, 15), 'not', ok1_274552)
    
    # Assigning a type to the variable 'stypy_return_type' (line 106)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 106, 8), 'stypy_return_type', result_not__274553)
    # SSA join for if statement (line 93)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'False' (line 108)
    False_274554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 11), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 4), 'stypy_return_type', False_274554)
    
    # ################# End of '_inputs_swap_needed(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_inputs_swap_needed' in the type store
    # Getting the type of 'stypy_return_type' (line 80)
    stypy_return_type_274555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274555)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_inputs_swap_needed'
    return stypy_return_type_274555

# Assigning a type to the variable '_inputs_swap_needed' (line 80)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 0), '_inputs_swap_needed', _inputs_swap_needed)

@norecursion
def correlate(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_274556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 29), 'str', 'full')
    str_274557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 111, 44), 'str', 'auto')
    defaults = [str_274556, str_274557]
    # Create a new context for function 'correlate'
    module_type_store = module_type_store.open_function_context('correlate', 111, 0, False)
    
    # Passed parameters checking function
    correlate.stypy_localization = localization
    correlate.stypy_type_of_self = None
    correlate.stypy_type_store = module_type_store
    correlate.stypy_function_name = 'correlate'
    correlate.stypy_param_names_list = ['in1', 'in2', 'mode', 'method']
    correlate.stypy_varargs_param_name = None
    correlate.stypy_kwargs_param_name = None
    correlate.stypy_call_defaults = defaults
    correlate.stypy_call_varargs = varargs
    correlate.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'correlate', ['in1', 'in2', 'mode', 'method'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'correlate', localization, ['in1', 'in2', 'mode', 'method'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'correlate(...)' code ##################

    str_274558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, (-1)), 'str', "\n    Cross-correlate two N-dimensional arrays.\n\n    Cross-correlate `in1` and `in2`, with the output size determined by the\n    `mode` argument.\n\n    Parameters\n    ----------\n    in1 : array_like\n        First input.\n    in2 : array_like\n        Second input. Should have the same number of dimensions as `in1`.\n    mode : str {'full', 'valid', 'same'}, optional\n        A string indicating the size of the output:\n\n        ``full``\n           The output is the full discrete linear cross-correlation\n           of the inputs. (Default)\n        ``valid``\n           The output consists only of those elements that do not\n           rely on the zero-padding. In 'valid' mode, either `in1` or `in2`\n           must be at least as large as the other in every dimension.\n        ``same``\n           The output is the same size as `in1`, centered\n           with respect to the 'full' output.\n    method : str {'auto', 'direct', 'fft'}, optional\n        A string indicating which method to use to calculate the correlation.\n\n        ``direct``\n           The correlation is determined directly from sums, the definition of\n           correlation.\n        ``fft``\n           The Fast Fourier Transform is used to perform the correlation more\n           quickly (only available for numerical arrays.)\n        ``auto``\n           Automatically chooses direct or Fourier method based on an estimate\n           of which is faster (default).  See `convolve` Notes for more detail.\n\n           .. versionadded:: 0.19.0\n\n    Returns\n    -------\n    correlate : array\n        An N-dimensional array containing a subset of the discrete linear\n        cross-correlation of `in1` with `in2`.\n\n    See Also\n    --------\n    choose_conv_method : contains more documentation on `method`.\n\n    Notes\n    -----\n    The correlation z of two d-dimensional arrays x and y is defined as::\n\n        z[...,k,...] = sum[..., i_l, ...] x[..., i_l,...] * conj(y[..., i_l - k,...])\n\n    This way, if x and y are 1-D arrays and ``z = correlate(x, y, 'full')`` then\n\n    .. math::\n\n          z[k] = (x * y)(k - N + 1)\n               = \\sum_{l=0}^{||x||-1}x_l y_{l-k+N-1}^{*}\n\n    for :math:`k = 0, 1, ..., ||x|| + ||y|| - 2`\n\n    where :math:`||x||` is the length of ``x``, :math:`N = \\max(||x||,||y||)`,\n    and :math:`y_m` is 0 when m is outside the range of y.\n\n    ``method='fft'`` only works for numerical arrays as it relies on\n    `fftconvolve`. In certain cases (i.e., arrays of objects or when\n    rounding integers can lose precision), ``method='direct'`` is always used.\n\n    Examples\n    --------\n    Implement a matched filter using cross-correlation, to recover a signal\n    that has passed through a noisy channel.\n\n    >>> from scipy import signal\n    >>> sig = np.repeat([0., 1., 1., 0., 1., 0., 0., 1.], 128)\n    >>> sig_noise = sig + np.random.randn(len(sig))\n    >>> corr = signal.correlate(sig_noise, np.ones(128), mode='same') / 128\n\n    >>> import matplotlib.pyplot as plt\n    >>> clock = np.arange(64, len(sig), 128)\n    >>> fig, (ax_orig, ax_noise, ax_corr) = plt.subplots(3, 1, sharex=True)\n    >>> ax_orig.plot(sig)\n    >>> ax_orig.plot(clock, sig[clock], 'ro')\n    >>> ax_orig.set_title('Original signal')\n    >>> ax_noise.plot(sig_noise)\n    >>> ax_noise.set_title('Signal with noise')\n    >>> ax_corr.plot(corr)\n    >>> ax_corr.plot(clock, corr[clock], 'ro')\n    >>> ax_corr.axhline(0.5, ls=':')\n    >>> ax_corr.set_title('Cross-correlated with rectangular pulse')\n    >>> ax_orig.margins(0, 0.1)\n    >>> fig.tight_layout()\n    >>> fig.show()\n\n    ")
    
    # Assigning a Call to a Name (line 211):
    
    # Assigning a Call to a Name (line 211):
    
    # Call to asarray(...): (line 211)
    # Processing the call arguments (line 211)
    # Getting the type of 'in1' (line 211)
    in1_274560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 18), 'in1', False)
    # Processing the call keyword arguments (line 211)
    kwargs_274561 = {}
    # Getting the type of 'asarray' (line 211)
    asarray_274559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 211)
    asarray_call_result_274562 = invoke(stypy.reporting.localization.Localization(__file__, 211, 10), asarray_274559, *[in1_274560], **kwargs_274561)
    
    # Assigning a type to the variable 'in1' (line 211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 4), 'in1', asarray_call_result_274562)
    
    # Assigning a Call to a Name (line 212):
    
    # Assigning a Call to a Name (line 212):
    
    # Call to asarray(...): (line 212)
    # Processing the call arguments (line 212)
    # Getting the type of 'in2' (line 212)
    in2_274564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 18), 'in2', False)
    # Processing the call keyword arguments (line 212)
    kwargs_274565 = {}
    # Getting the type of 'asarray' (line 212)
    asarray_274563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 212)
    asarray_call_result_274566 = invoke(stypy.reporting.localization.Localization(__file__, 212, 10), asarray_274563, *[in2_274564], **kwargs_274565)
    
    # Assigning a type to the variable 'in2' (line 212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 4), 'in2', asarray_call_result_274566)
    
    
    # Getting the type of 'in1' (line 214)
    in1_274567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 7), 'in1')
    # Obtaining the member 'ndim' of a type (line 214)
    ndim_274568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 7), in1_274567, 'ndim')
    # Getting the type of 'in2' (line 214)
    in2_274569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 19), 'in2')
    # Obtaining the member 'ndim' of a type (line 214)
    ndim_274570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 19), in2_274569, 'ndim')
    # Applying the binary operator '==' (line 214)
    result_eq_274571 = python_operator(stypy.reporting.localization.Localization(__file__, 214, 7), '==', ndim_274568, ndim_274570)
    int_274572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 31), 'int')
    # Applying the binary operator '==' (line 214)
    result_eq_274573 = python_operator(stypy.reporting.localization.Localization(__file__, 214, 7), '==', ndim_274570, int_274572)
    # Applying the binary operator '&' (line 214)
    result_and__274574 = python_operator(stypy.reporting.localization.Localization(__file__, 214, 7), '&', result_eq_274571, result_eq_274573)
    
    # Testing the type of an if condition (line 214)
    if_condition_274575 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 214, 4), result_and__274574)
    # Assigning a type to the variable 'if_condition_274575' (line 214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 4), 'if_condition_274575', if_condition_274575)
    # SSA begins for if statement (line 214)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'in1' (line 215)
    in1_274576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 15), 'in1')
    # Getting the type of 'in2' (line 215)
    in2_274577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 21), 'in2')
    # Applying the binary operator '*' (line 215)
    result_mul_274578 = python_operator(stypy.reporting.localization.Localization(__file__, 215, 15), '*', in1_274576, in2_274577)
    
    # Assigning a type to the variable 'stypy_return_type' (line 215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 8), 'stypy_return_type', result_mul_274578)
    # SSA branch for the else part of an if statement (line 214)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'in1' (line 216)
    in1_274579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 9), 'in1')
    # Obtaining the member 'ndim' of a type (line 216)
    ndim_274580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 9), in1_274579, 'ndim')
    # Getting the type of 'in2' (line 216)
    in2_274581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 21), 'in2')
    # Obtaining the member 'ndim' of a type (line 216)
    ndim_274582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 216, 21), in2_274581, 'ndim')
    # Applying the binary operator '!=' (line 216)
    result_ne_274583 = python_operator(stypy.reporting.localization.Localization(__file__, 216, 9), '!=', ndim_274580, ndim_274582)
    
    # Testing the type of an if condition (line 216)
    if_condition_274584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 216, 9), result_ne_274583)
    # Assigning a type to the variable 'if_condition_274584' (line 216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 9), 'if_condition_274584', if_condition_274584)
    # SSA begins for if statement (line 216)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 217)
    # Processing the call arguments (line 217)
    str_274586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 25), 'str', 'in1 and in2 should have the same dimensionality')
    # Processing the call keyword arguments (line 217)
    kwargs_274587 = {}
    # Getting the type of 'ValueError' (line 217)
    ValueError_274585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 217)
    ValueError_call_result_274588 = invoke(stypy.reporting.localization.Localization(__file__, 217, 14), ValueError_274585, *[str_274586], **kwargs_274587)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 217, 8), ValueError_call_result_274588, 'raise parameter', BaseException)
    # SSA join for if statement (line 216)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 214)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 220)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Subscript to a Name (line 221):
    
    # Assigning a Subscript to a Name (line 221):
    
    # Obtaining the type of the subscript
    # Getting the type of 'mode' (line 221)
    mode_274589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 24), 'mode')
    # Getting the type of '_modedict' (line 221)
    _modedict_274590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 14), '_modedict')
    # Obtaining the member '__getitem__' of a type (line 221)
    getitem___274591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 14), _modedict_274590, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 221)
    subscript_call_result_274592 = invoke(stypy.reporting.localization.Localization(__file__, 221, 14), getitem___274591, mode_274589)
    
    # Assigning a type to the variable 'val' (line 221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'val', subscript_call_result_274592)
    # SSA branch for the except part of a try statement (line 220)
    # SSA branch for the except 'KeyError' branch of a try statement (line 220)
    module_type_store.open_ssa_branch('except')
    
    # Call to ValueError(...): (line 223)
    # Processing the call arguments (line 223)
    str_274594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 25), 'str', "Acceptable mode flags are 'valid', 'same', or 'full'.")
    # Processing the call keyword arguments (line 223)
    kwargs_274595 = {}
    # Getting the type of 'ValueError' (line 223)
    ValueError_274593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 223)
    ValueError_call_result_274596 = invoke(stypy.reporting.localization.Localization(__file__, 223, 14), ValueError_274593, *[str_274594], **kwargs_274595)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 223, 8), ValueError_call_result_274596, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 220)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'method' (line 227)
    method_274597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 7), 'method')
    
    # Obtaining an instance of the builtin type 'tuple' (line 227)
    tuple_274598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 227)
    # Adding element type (line 227)
    str_274599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 18), 'str', 'fft')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 18), tuple_274598, str_274599)
    # Adding element type (line 227)
    str_274600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 25), 'str', 'auto')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 18), tuple_274598, str_274600)
    
    # Applying the binary operator 'in' (line 227)
    result_contains_274601 = python_operator(stypy.reporting.localization.Localization(__file__, 227, 7), 'in', method_274597, tuple_274598)
    
    # Testing the type of an if condition (line 227)
    if_condition_274602 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 227, 4), result_contains_274601)
    # Assigning a type to the variable 'if_condition_274602' (line 227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 4), 'if_condition_274602', if_condition_274602)
    # SSA begins for if statement (line 227)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to convolve(...): (line 228)
    # Processing the call arguments (line 228)
    # Getting the type of 'in1' (line 228)
    in1_274604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 24), 'in1', False)
    
    # Call to _reverse_and_conj(...): (line 228)
    # Processing the call arguments (line 228)
    # Getting the type of 'in2' (line 228)
    in2_274606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 47), 'in2', False)
    # Processing the call keyword arguments (line 228)
    kwargs_274607 = {}
    # Getting the type of '_reverse_and_conj' (line 228)
    _reverse_and_conj_274605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 29), '_reverse_and_conj', False)
    # Calling _reverse_and_conj(args, kwargs) (line 228)
    _reverse_and_conj_call_result_274608 = invoke(stypy.reporting.localization.Localization(__file__, 228, 29), _reverse_and_conj_274605, *[in2_274606], **kwargs_274607)
    
    # Getting the type of 'mode' (line 228)
    mode_274609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 53), 'mode', False)
    # Getting the type of 'method' (line 228)
    method_274610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 59), 'method', False)
    # Processing the call keyword arguments (line 228)
    kwargs_274611 = {}
    # Getting the type of 'convolve' (line 228)
    convolve_274603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 15), 'convolve', False)
    # Calling convolve(args, kwargs) (line 228)
    convolve_call_result_274612 = invoke(stypy.reporting.localization.Localization(__file__, 228, 15), convolve_274603, *[in1_274604, _reverse_and_conj_call_result_274608, mode_274609, method_274610], **kwargs_274611)
    
    # Assigning a type to the variable 'stypy_return_type' (line 228)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'stypy_return_type', convolve_call_result_274612)
    # SSA join for if statement (line 227)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to _np_conv_ok(...): (line 231)
    # Processing the call arguments (line 231)
    # Getting the type of 'in1' (line 231)
    in1_274614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 19), 'in1', False)
    # Getting the type of 'in2' (line 231)
    in2_274615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 24), 'in2', False)
    # Getting the type of 'mode' (line 231)
    mode_274616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 29), 'mode', False)
    # Processing the call keyword arguments (line 231)
    kwargs_274617 = {}
    # Getting the type of '_np_conv_ok' (line 231)
    _np_conv_ok_274613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 7), '_np_conv_ok', False)
    # Calling _np_conv_ok(args, kwargs) (line 231)
    _np_conv_ok_call_result_274618 = invoke(stypy.reporting.localization.Localization(__file__, 231, 7), _np_conv_ok_274613, *[in1_274614, in2_274615, mode_274616], **kwargs_274617)
    
    # Testing the type of an if condition (line 231)
    if_condition_274619 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 231, 4), _np_conv_ok_call_result_274618)
    # Assigning a type to the variable 'if_condition_274619' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'if_condition_274619', if_condition_274619)
    # SSA begins for if statement (line 231)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to correlate(...): (line 232)
    # Processing the call arguments (line 232)
    # Getting the type of 'in1' (line 232)
    in1_274622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 28), 'in1', False)
    # Getting the type of 'in2' (line 232)
    in2_274623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 33), 'in2', False)
    # Getting the type of 'mode' (line 232)
    mode_274624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 38), 'mode', False)
    # Processing the call keyword arguments (line 232)
    kwargs_274625 = {}
    # Getting the type of 'np' (line 232)
    np_274620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 15), 'np', False)
    # Obtaining the member 'correlate' of a type (line 232)
    correlate_274621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 15), np_274620, 'correlate')
    # Calling correlate(args, kwargs) (line 232)
    correlate_call_result_274626 = invoke(stypy.reporting.localization.Localization(__file__, 232, 15), correlate_274621, *[in1_274622, in2_274623, mode_274624], **kwargs_274625)
    
    # Assigning a type to the variable 'stypy_return_type' (line 232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 8), 'stypy_return_type', correlate_call_result_274626)
    # SSA join for if statement (line 231)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BoolOp to a Name (line 238):
    
    # Assigning a BoolOp to a Name (line 238):
    
    # Evaluating a boolean operation
    
    # Evaluating a boolean operation
    
    # Getting the type of 'mode' (line 238)
    mode_274627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 23), 'mode')
    str_274628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 31), 'str', 'full')
    # Applying the binary operator '==' (line 238)
    result_eq_274629 = python_operator(stypy.reporting.localization.Localization(__file__, 238, 23), '==', mode_274627, str_274628)
    
    
    # Getting the type of 'in2' (line 238)
    in2_274630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 44), 'in2')
    # Obtaining the member 'size' of a type (line 238)
    size_274631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 44), in2_274630, 'size')
    # Getting the type of 'in1' (line 238)
    in1_274632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 55), 'in1')
    # Obtaining the member 'size' of a type (line 238)
    size_274633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 55), in1_274632, 'size')
    # Applying the binary operator '>' (line 238)
    result_gt_274634 = python_operator(stypy.reporting.localization.Localization(__file__, 238, 44), '>', size_274631, size_274633)
    
    # Applying the binary operator 'and' (line 238)
    result_and_keyword_274635 = python_operator(stypy.reporting.localization.Localization(__file__, 238, 22), 'and', result_eq_274629, result_gt_274634)
    
    
    # Call to _inputs_swap_needed(...): (line 239)
    # Processing the call arguments (line 239)
    # Getting the type of 'mode' (line 239)
    mode_274637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 42), 'mode', False)
    # Getting the type of 'in1' (line 239)
    in1_274638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 48), 'in1', False)
    # Obtaining the member 'shape' of a type (line 239)
    shape_274639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 48), in1_274638, 'shape')
    # Getting the type of 'in2' (line 239)
    in2_274640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 59), 'in2', False)
    # Obtaining the member 'shape' of a type (line 239)
    shape_274641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 59), in2_274640, 'shape')
    # Processing the call keyword arguments (line 239)
    kwargs_274642 = {}
    # Getting the type of '_inputs_swap_needed' (line 239)
    _inputs_swap_needed_274636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 22), '_inputs_swap_needed', False)
    # Calling _inputs_swap_needed(args, kwargs) (line 239)
    _inputs_swap_needed_call_result_274643 = invoke(stypy.reporting.localization.Localization(__file__, 239, 22), _inputs_swap_needed_274636, *[mode_274637, shape_274639, shape_274641], **kwargs_274642)
    
    # Applying the binary operator 'or' (line 238)
    result_or_keyword_274644 = python_operator(stypy.reporting.localization.Localization(__file__, 238, 22), 'or', result_and_keyword_274635, _inputs_swap_needed_call_result_274643)
    
    # Assigning a type to the variable 'swapped_inputs' (line 238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 4), 'swapped_inputs', result_or_keyword_274644)
    
    # Getting the type of 'swapped_inputs' (line 241)
    swapped_inputs_274645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 7), 'swapped_inputs')
    # Testing the type of an if condition (line 241)
    if_condition_274646 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 241, 4), swapped_inputs_274645)
    # Assigning a type to the variable 'if_condition_274646' (line 241)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 4), 'if_condition_274646', if_condition_274646)
    # SSA begins for if statement (line 241)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 242):
    
    # Assigning a Name to a Name (line 242):
    # Getting the type of 'in2' (line 242)
    in2_274647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 19), 'in2')
    # Assigning a type to the variable 'tuple_assignment_274308' (line 242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'tuple_assignment_274308', in2_274647)
    
    # Assigning a Name to a Name (line 242):
    # Getting the type of 'in1' (line 242)
    in1_274648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 24), 'in1')
    # Assigning a type to the variable 'tuple_assignment_274309' (line 242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'tuple_assignment_274309', in1_274648)
    
    # Assigning a Name to a Name (line 242):
    # Getting the type of 'tuple_assignment_274308' (line 242)
    tuple_assignment_274308_274649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'tuple_assignment_274308')
    # Assigning a type to the variable 'in1' (line 242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'in1', tuple_assignment_274308_274649)
    
    # Assigning a Name to a Name (line 242):
    # Getting the type of 'tuple_assignment_274309' (line 242)
    tuple_assignment_274309_274650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'tuple_assignment_274309')
    # Assigning a type to the variable 'in2' (line 242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 13), 'in2', tuple_assignment_274309_274650)
    # SSA join for if statement (line 241)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'mode' (line 244)
    mode_274651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 7), 'mode')
    str_274652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 15), 'str', 'valid')
    # Applying the binary operator '==' (line 244)
    result_eq_274653 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 7), '==', mode_274651, str_274652)
    
    # Testing the type of an if condition (line 244)
    if_condition_274654 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 244, 4), result_eq_274653)
    # Assigning a type to the variable 'if_condition_274654' (line 244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'if_condition_274654', if_condition_274654)
    # SSA begins for if statement (line 244)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 245):
    
    # Assigning a ListComp to a Name (line 245):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 245)
    # Processing the call arguments (line 245)
    # Getting the type of 'in1' (line 245)
    in1_274661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 40), 'in1', False)
    # Obtaining the member 'shape' of a type (line 245)
    shape_274662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 40), in1_274661, 'shape')
    # Getting the type of 'in2' (line 245)
    in2_274663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 51), 'in2', False)
    # Obtaining the member 'shape' of a type (line 245)
    shape_274664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 51), in2_274663, 'shape')
    # Processing the call keyword arguments (line 245)
    kwargs_274665 = {}
    # Getting the type of 'zip' (line 245)
    zip_274660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 36), 'zip', False)
    # Calling zip(args, kwargs) (line 245)
    zip_call_result_274666 = invoke(stypy.reporting.localization.Localization(__file__, 245, 36), zip_274660, *[shape_274662, shape_274664], **kwargs_274665)
    
    comprehension_274667 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 245, 14), zip_call_result_274666)
    # Assigning a type to the variable 'i' (line 245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 14), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 245, 14), comprehension_274667))
    # Assigning a type to the variable 'j' (line 245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 14), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 245, 14), comprehension_274667))
    # Getting the type of 'i' (line 245)
    i_274655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 14), 'i')
    # Getting the type of 'j' (line 245)
    j_274656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 18), 'j')
    # Applying the binary operator '-' (line 245)
    result_sub_274657 = python_operator(stypy.reporting.localization.Localization(__file__, 245, 14), '-', i_274655, j_274656)
    
    int_274658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, 22), 'int')
    # Applying the binary operator '+' (line 245)
    result_add_274659 = python_operator(stypy.reporting.localization.Localization(__file__, 245, 20), '+', result_sub_274657, int_274658)
    
    list_274668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, 14), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 245, 14), list_274668, result_add_274659)
    # Assigning a type to the variable 'ps' (line 245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 8), 'ps', list_274668)
    
    # Assigning a Call to a Name (line 246):
    
    # Assigning a Call to a Name (line 246):
    
    # Call to empty(...): (line 246)
    # Processing the call arguments (line 246)
    # Getting the type of 'ps' (line 246)
    ps_274671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 23), 'ps', False)
    # Getting the type of 'in1' (line 246)
    in1_274672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 27), 'in1', False)
    # Obtaining the member 'dtype' of a type (line 246)
    dtype_274673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 27), in1_274672, 'dtype')
    # Processing the call keyword arguments (line 246)
    kwargs_274674 = {}
    # Getting the type of 'np' (line 246)
    np_274669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 14), 'np', False)
    # Obtaining the member 'empty' of a type (line 246)
    empty_274670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 14), np_274669, 'empty')
    # Calling empty(args, kwargs) (line 246)
    empty_call_result_274675 = invoke(stypy.reporting.localization.Localization(__file__, 246, 14), empty_274670, *[ps_274671, dtype_274673], **kwargs_274674)
    
    # Assigning a type to the variable 'out' (line 246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 246, 8), 'out', empty_call_result_274675)
    
    # Assigning a Call to a Name (line 248):
    
    # Assigning a Call to a Name (line 248):
    
    # Call to _correlateND(...): (line 248)
    # Processing the call arguments (line 248)
    # Getting the type of 'in1' (line 248)
    in1_274678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 34), 'in1', False)
    # Getting the type of 'in2' (line 248)
    in2_274679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 39), 'in2', False)
    # Getting the type of 'out' (line 248)
    out_274680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 44), 'out', False)
    # Getting the type of 'val' (line 248)
    val_274681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 49), 'val', False)
    # Processing the call keyword arguments (line 248)
    kwargs_274682 = {}
    # Getting the type of 'sigtools' (line 248)
    sigtools_274676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 12), 'sigtools', False)
    # Obtaining the member '_correlateND' of a type (line 248)
    _correlateND_274677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 12), sigtools_274676, '_correlateND')
    # Calling _correlateND(args, kwargs) (line 248)
    _correlateND_call_result_274683 = invoke(stypy.reporting.localization.Localization(__file__, 248, 12), _correlateND_274677, *[in1_274678, in2_274679, out_274680, val_274681], **kwargs_274682)
    
    # Assigning a type to the variable 'z' (line 248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 8), 'z', _correlateND_call_result_274683)
    # SSA branch for the else part of an if statement (line 244)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a ListComp to a Name (line 251):
    
    # Assigning a ListComp to a Name (line 251):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 251)
    # Processing the call arguments (line 251)
    # Getting the type of 'in1' (line 251)
    in1_274690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 40), 'in1', False)
    # Obtaining the member 'shape' of a type (line 251)
    shape_274691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 40), in1_274690, 'shape')
    # Getting the type of 'in2' (line 251)
    in2_274692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 51), 'in2', False)
    # Obtaining the member 'shape' of a type (line 251)
    shape_274693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 51), in2_274692, 'shape')
    # Processing the call keyword arguments (line 251)
    kwargs_274694 = {}
    # Getting the type of 'zip' (line 251)
    zip_274689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 36), 'zip', False)
    # Calling zip(args, kwargs) (line 251)
    zip_call_result_274695 = invoke(stypy.reporting.localization.Localization(__file__, 251, 36), zip_274689, *[shape_274691, shape_274693], **kwargs_274694)
    
    comprehension_274696 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 14), zip_call_result_274695)
    # Assigning a type to the variable 'i' (line 251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 14), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 14), comprehension_274696))
    # Assigning a type to the variable 'j' (line 251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 14), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 14), comprehension_274696))
    # Getting the type of 'i' (line 251)
    i_274684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 14), 'i')
    # Getting the type of 'j' (line 251)
    j_274685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 18), 'j')
    # Applying the binary operator '+' (line 251)
    result_add_274686 = python_operator(stypy.reporting.localization.Localization(__file__, 251, 14), '+', i_274684, j_274685)
    
    int_274687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 22), 'int')
    # Applying the binary operator '-' (line 251)
    result_sub_274688 = python_operator(stypy.reporting.localization.Localization(__file__, 251, 20), '-', result_add_274686, int_274687)
    
    list_274697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, 14), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 251, 14), list_274697, result_sub_274688)
    # Assigning a type to the variable 'ps' (line 251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 8), 'ps', list_274697)
    
    # Assigning a Call to a Name (line 254):
    
    # Assigning a Call to a Name (line 254):
    
    # Call to zeros(...): (line 254)
    # Processing the call arguments (line 254)
    # Getting the type of 'ps' (line 254)
    ps_274700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 30), 'ps', False)
    # Getting the type of 'in1' (line 254)
    in1_274701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 34), 'in1', False)
    # Obtaining the member 'dtype' of a type (line 254)
    dtype_274702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 34), in1_274701, 'dtype')
    # Processing the call keyword arguments (line 254)
    kwargs_274703 = {}
    # Getting the type of 'np' (line 254)
    np_274698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 21), 'np', False)
    # Obtaining the member 'zeros' of a type (line 254)
    zeros_274699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 21), np_274698, 'zeros')
    # Calling zeros(args, kwargs) (line 254)
    zeros_call_result_274704 = invoke(stypy.reporting.localization.Localization(__file__, 254, 21), zeros_274699, *[ps_274700, dtype_274702], **kwargs_274703)
    
    # Assigning a type to the variable 'in1zpadded' (line 254)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'in1zpadded', zeros_call_result_274704)
    
    # Assigning a ListComp to a Name (line 255):
    
    # Assigning a ListComp to a Name (line 255):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'in1' (line 255)
    in1_274710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 35), 'in1')
    # Obtaining the member 'shape' of a type (line 255)
    shape_274711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 35), in1_274710, 'shape')
    comprehension_274712 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 14), shape_274711)
    # Assigning a type to the variable 'i' (line 255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 14), 'i', comprehension_274712)
    
    # Call to slice(...): (line 255)
    # Processing the call arguments (line 255)
    int_274706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 20), 'int')
    # Getting the type of 'i' (line 255)
    i_274707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 23), 'i', False)
    # Processing the call keyword arguments (line 255)
    kwargs_274708 = {}
    # Getting the type of 'slice' (line 255)
    slice_274705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 255)
    slice_call_result_274709 = invoke(stypy.reporting.localization.Localization(__file__, 255, 14), slice_274705, *[int_274706, i_274707], **kwargs_274708)
    
    list_274713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 14), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 14), list_274713, slice_call_result_274709)
    # Assigning a type to the variable 'sc' (line 255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 8), 'sc', list_274713)
    
    # Assigning a Call to a Subscript (line 256):
    
    # Assigning a Call to a Subscript (line 256):
    
    # Call to copy(...): (line 256)
    # Processing the call keyword arguments (line 256)
    kwargs_274716 = {}
    # Getting the type of 'in1' (line 256)
    in1_274714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 25), 'in1', False)
    # Obtaining the member 'copy' of a type (line 256)
    copy_274715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 25), in1_274714, 'copy')
    # Calling copy(args, kwargs) (line 256)
    copy_call_result_274717 = invoke(stypy.reporting.localization.Localization(__file__, 256, 25), copy_274715, *[], **kwargs_274716)
    
    # Getting the type of 'in1zpadded' (line 256)
    in1zpadded_274718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 8), 'in1zpadded')
    # Getting the type of 'sc' (line 256)
    sc_274719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 19), 'sc')
    # Storing an element on a container (line 256)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 256, 8), in1zpadded_274718, (sc_274719, copy_call_result_274717))
    
    
    # Getting the type of 'mode' (line 258)
    mode_274720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 11), 'mode')
    str_274721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 19), 'str', 'full')
    # Applying the binary operator '==' (line 258)
    result_eq_274722 = python_operator(stypy.reporting.localization.Localization(__file__, 258, 11), '==', mode_274720, str_274721)
    
    # Testing the type of an if condition (line 258)
    if_condition_274723 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 258, 8), result_eq_274722)
    # Assigning a type to the variable 'if_condition_274723' (line 258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'if_condition_274723', if_condition_274723)
    # SSA begins for if statement (line 258)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 259):
    
    # Assigning a Call to a Name (line 259):
    
    # Call to empty(...): (line 259)
    # Processing the call arguments (line 259)
    # Getting the type of 'ps' (line 259)
    ps_274726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 27), 'ps', False)
    # Getting the type of 'in1' (line 259)
    in1_274727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 31), 'in1', False)
    # Obtaining the member 'dtype' of a type (line 259)
    dtype_274728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 31), in1_274727, 'dtype')
    # Processing the call keyword arguments (line 259)
    kwargs_274729 = {}
    # Getting the type of 'np' (line 259)
    np_274724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 18), 'np', False)
    # Obtaining the member 'empty' of a type (line 259)
    empty_274725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 18), np_274724, 'empty')
    # Calling empty(args, kwargs) (line 259)
    empty_call_result_274730 = invoke(stypy.reporting.localization.Localization(__file__, 259, 18), empty_274725, *[ps_274726, dtype_274728], **kwargs_274729)
    
    # Assigning a type to the variable 'out' (line 259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 12), 'out', empty_call_result_274730)
    # SSA branch for the else part of an if statement (line 258)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 260)
    mode_274731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 13), 'mode')
    str_274732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 21), 'str', 'same')
    # Applying the binary operator '==' (line 260)
    result_eq_274733 = python_operator(stypy.reporting.localization.Localization(__file__, 260, 13), '==', mode_274731, str_274732)
    
    # Testing the type of an if condition (line 260)
    if_condition_274734 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 260, 13), result_eq_274733)
    # Assigning a type to the variable 'if_condition_274734' (line 260)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 13), 'if_condition_274734', if_condition_274734)
    # SSA begins for if statement (line 260)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 261):
    
    # Assigning a Call to a Name (line 261):
    
    # Call to empty(...): (line 261)
    # Processing the call arguments (line 261)
    # Getting the type of 'in1' (line 261)
    in1_274737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 27), 'in1', False)
    # Obtaining the member 'shape' of a type (line 261)
    shape_274738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 27), in1_274737, 'shape')
    # Getting the type of 'in1' (line 261)
    in1_274739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 38), 'in1', False)
    # Obtaining the member 'dtype' of a type (line 261)
    dtype_274740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 38), in1_274739, 'dtype')
    # Processing the call keyword arguments (line 261)
    kwargs_274741 = {}
    # Getting the type of 'np' (line 261)
    np_274735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 18), 'np', False)
    # Obtaining the member 'empty' of a type (line 261)
    empty_274736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 18), np_274735, 'empty')
    # Calling empty(args, kwargs) (line 261)
    empty_call_result_274742 = invoke(stypy.reporting.localization.Localization(__file__, 261, 18), empty_274736, *[shape_274738, dtype_274740], **kwargs_274741)
    
    # Assigning a type to the variable 'out' (line 261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 12), 'out', empty_call_result_274742)
    # SSA join for if statement (line 260)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 258)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 263):
    
    # Assigning a Call to a Name (line 263):
    
    # Call to _correlateND(...): (line 263)
    # Processing the call arguments (line 263)
    # Getting the type of 'in1zpadded' (line 263)
    in1zpadded_274745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 34), 'in1zpadded', False)
    # Getting the type of 'in2' (line 263)
    in2_274746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 46), 'in2', False)
    # Getting the type of 'out' (line 263)
    out_274747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 51), 'out', False)
    # Getting the type of 'val' (line 263)
    val_274748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 56), 'val', False)
    # Processing the call keyword arguments (line 263)
    kwargs_274749 = {}
    # Getting the type of 'sigtools' (line 263)
    sigtools_274743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 12), 'sigtools', False)
    # Obtaining the member '_correlateND' of a type (line 263)
    _correlateND_274744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 12), sigtools_274743, '_correlateND')
    # Calling _correlateND(args, kwargs) (line 263)
    _correlateND_call_result_274750 = invoke(stypy.reporting.localization.Localization(__file__, 263, 12), _correlateND_274744, *[in1zpadded_274745, in2_274746, out_274747, val_274748], **kwargs_274749)
    
    # Assigning a type to the variable 'z' (line 263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 8), 'z', _correlateND_call_result_274750)
    # SSA join for if statement (line 244)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'swapped_inputs' (line 265)
    swapped_inputs_274751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 7), 'swapped_inputs')
    # Testing the type of an if condition (line 265)
    if_condition_274752 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 265, 4), swapped_inputs_274751)
    # Assigning a type to the variable 'if_condition_274752' (line 265)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 4), 'if_condition_274752', if_condition_274752)
    # SSA begins for if statement (line 265)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 267):
    
    # Assigning a Call to a Name (line 267):
    
    # Call to _reverse_and_conj(...): (line 267)
    # Processing the call arguments (line 267)
    # Getting the type of 'z' (line 267)
    z_274754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 30), 'z', False)
    # Processing the call keyword arguments (line 267)
    kwargs_274755 = {}
    # Getting the type of '_reverse_and_conj' (line 267)
    _reverse_and_conj_274753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 12), '_reverse_and_conj', False)
    # Calling _reverse_and_conj(args, kwargs) (line 267)
    _reverse_and_conj_call_result_274756 = invoke(stypy.reporting.localization.Localization(__file__, 267, 12), _reverse_and_conj_274753, *[z_274754], **kwargs_274755)
    
    # Assigning a type to the variable 'z' (line 267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 8), 'z', _reverse_and_conj_call_result_274756)
    # SSA join for if statement (line 265)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'z' (line 269)
    z_274757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 11), 'z')
    # Assigning a type to the variable 'stypy_return_type' (line 269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'stypy_return_type', z_274757)
    
    # ################# End of 'correlate(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'correlate' in the type store
    # Getting the type of 'stypy_return_type' (line 111)
    stypy_return_type_274758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274758)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'correlate'
    return stypy_return_type_274758

# Assigning a type to the variable 'correlate' (line 111)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 0), 'correlate', correlate)

@norecursion
def _centered(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_centered'
    module_type_store = module_type_store.open_function_context('_centered', 272, 0, False)
    
    # Passed parameters checking function
    _centered.stypy_localization = localization
    _centered.stypy_type_of_self = None
    _centered.stypy_type_store = module_type_store
    _centered.stypy_function_name = '_centered'
    _centered.stypy_param_names_list = ['arr', 'newshape']
    _centered.stypy_varargs_param_name = None
    _centered.stypy_kwargs_param_name = None
    _centered.stypy_call_defaults = defaults
    _centered.stypy_call_varargs = varargs
    _centered.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_centered', ['arr', 'newshape'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_centered', localization, ['arr', 'newshape'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_centered(...)' code ##################

    
    # Assigning a Call to a Name (line 274):
    
    # Assigning a Call to a Name (line 274):
    
    # Call to asarray(...): (line 274)
    # Processing the call arguments (line 274)
    # Getting the type of 'newshape' (line 274)
    newshape_274760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 23), 'newshape', False)
    # Processing the call keyword arguments (line 274)
    kwargs_274761 = {}
    # Getting the type of 'asarray' (line 274)
    asarray_274759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 15), 'asarray', False)
    # Calling asarray(args, kwargs) (line 274)
    asarray_call_result_274762 = invoke(stypy.reporting.localization.Localization(__file__, 274, 15), asarray_274759, *[newshape_274760], **kwargs_274761)
    
    # Assigning a type to the variable 'newshape' (line 274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'newshape', asarray_call_result_274762)
    
    # Assigning a Call to a Name (line 275):
    
    # Assigning a Call to a Name (line 275):
    
    # Call to array(...): (line 275)
    # Processing the call arguments (line 275)
    # Getting the type of 'arr' (line 275)
    arr_274764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 22), 'arr', False)
    # Obtaining the member 'shape' of a type (line 275)
    shape_274765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 22), arr_274764, 'shape')
    # Processing the call keyword arguments (line 275)
    kwargs_274766 = {}
    # Getting the type of 'array' (line 275)
    array_274763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 16), 'array', False)
    # Calling array(args, kwargs) (line 275)
    array_call_result_274767 = invoke(stypy.reporting.localization.Localization(__file__, 275, 16), array_274763, *[shape_274765], **kwargs_274766)
    
    # Assigning a type to the variable 'currshape' (line 275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'currshape', array_call_result_274767)
    
    # Assigning a BinOp to a Name (line 276):
    
    # Assigning a BinOp to a Name (line 276):
    # Getting the type of 'currshape' (line 276)
    currshape_274768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 16), 'currshape')
    # Getting the type of 'newshape' (line 276)
    newshape_274769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 28), 'newshape')
    # Applying the binary operator '-' (line 276)
    result_sub_274770 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 16), '-', currshape_274768, newshape_274769)
    
    int_274771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 41), 'int')
    # Applying the binary operator '//' (line 276)
    result_floordiv_274772 = python_operator(stypy.reporting.localization.Localization(__file__, 276, 15), '//', result_sub_274770, int_274771)
    
    # Assigning a type to the variable 'startind' (line 276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 4), 'startind', result_floordiv_274772)
    
    # Assigning a BinOp to a Name (line 277):
    
    # Assigning a BinOp to a Name (line 277):
    # Getting the type of 'startind' (line 277)
    startind_274773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 13), 'startind')
    # Getting the type of 'newshape' (line 277)
    newshape_274774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 24), 'newshape')
    # Applying the binary operator '+' (line 277)
    result_add_274775 = python_operator(stypy.reporting.localization.Localization(__file__, 277, 13), '+', startind_274773, newshape_274774)
    
    # Assigning a type to the variable 'endind' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'endind', result_add_274775)
    
    # Assigning a ListComp to a Name (line 278):
    
    # Assigning a ListComp to a Name (line 278):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 278)
    # Processing the call arguments (line 278)
    
    # Call to len(...): (line 278)
    # Processing the call arguments (line 278)
    # Getting the type of 'endind' (line 278)
    endind_274789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 64), 'endind', False)
    # Processing the call keyword arguments (line 278)
    kwargs_274790 = {}
    # Getting the type of 'len' (line 278)
    len_274788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 60), 'len', False)
    # Calling len(args, kwargs) (line 278)
    len_call_result_274791 = invoke(stypy.reporting.localization.Localization(__file__, 278, 60), len_274788, *[endind_274789], **kwargs_274790)
    
    # Processing the call keyword arguments (line 278)
    kwargs_274792 = {}
    # Getting the type of 'range' (line 278)
    range_274787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 54), 'range', False)
    # Calling range(args, kwargs) (line 278)
    range_call_result_274793 = invoke(stypy.reporting.localization.Localization(__file__, 278, 54), range_274787, *[len_call_result_274791], **kwargs_274792)
    
    comprehension_274794 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 278, 15), range_call_result_274793)
    # Assigning a type to the variable 'k' (line 278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 15), 'k', comprehension_274794)
    
    # Call to slice(...): (line 278)
    # Processing the call arguments (line 278)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 278)
    k_274777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 30), 'k', False)
    # Getting the type of 'startind' (line 278)
    startind_274778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 21), 'startind', False)
    # Obtaining the member '__getitem__' of a type (line 278)
    getitem___274779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 21), startind_274778, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 278)
    subscript_call_result_274780 = invoke(stypy.reporting.localization.Localization(__file__, 278, 21), getitem___274779, k_274777)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 278)
    k_274781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 41), 'k', False)
    # Getting the type of 'endind' (line 278)
    endind_274782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 34), 'endind', False)
    # Obtaining the member '__getitem__' of a type (line 278)
    getitem___274783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 34), endind_274782, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 278)
    subscript_call_result_274784 = invoke(stypy.reporting.localization.Localization(__file__, 278, 34), getitem___274783, k_274781)
    
    # Processing the call keyword arguments (line 278)
    kwargs_274785 = {}
    # Getting the type of 'slice' (line 278)
    slice_274776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 15), 'slice', False)
    # Calling slice(args, kwargs) (line 278)
    slice_call_result_274786 = invoke(stypy.reporting.localization.Localization(__file__, 278, 15), slice_274776, *[subscript_call_result_274780, subscript_call_result_274784], **kwargs_274785)
    
    list_274795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 15), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 278, 15), list_274795, slice_call_result_274786)
    # Assigning a type to the variable 'myslice' (line 278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 4), 'myslice', list_274795)
    
    # Obtaining the type of the subscript
    
    # Call to tuple(...): (line 279)
    # Processing the call arguments (line 279)
    # Getting the type of 'myslice' (line 279)
    myslice_274797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 21), 'myslice', False)
    # Processing the call keyword arguments (line 279)
    kwargs_274798 = {}
    # Getting the type of 'tuple' (line 279)
    tuple_274796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 15), 'tuple', False)
    # Calling tuple(args, kwargs) (line 279)
    tuple_call_result_274799 = invoke(stypy.reporting.localization.Localization(__file__, 279, 15), tuple_274796, *[myslice_274797], **kwargs_274798)
    
    # Getting the type of 'arr' (line 279)
    arr_274800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 11), 'arr')
    # Obtaining the member '__getitem__' of a type (line 279)
    getitem___274801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 11), arr_274800, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 279)
    subscript_call_result_274802 = invoke(stypy.reporting.localization.Localization(__file__, 279, 11), getitem___274801, tuple_call_result_274799)
    
    # Assigning a type to the variable 'stypy_return_type' (line 279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 4), 'stypy_return_type', subscript_call_result_274802)
    
    # ################# End of '_centered(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_centered' in the type store
    # Getting the type of 'stypy_return_type' (line 272)
    stypy_return_type_274803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_274803)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_centered'
    return stypy_return_type_274803

# Assigning a type to the variable '_centered' (line 272)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 0), '_centered', _centered)

@norecursion
def fftconvolve(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_274804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 282, 31), 'str', 'full')
    defaults = [str_274804]
    # Create a new context for function 'fftconvolve'
    module_type_store = module_type_store.open_function_context('fftconvolve', 282, 0, False)
    
    # Passed parameters checking function
    fftconvolve.stypy_localization = localization
    fftconvolve.stypy_type_of_self = None
    fftconvolve.stypy_type_store = module_type_store
    fftconvolve.stypy_function_name = 'fftconvolve'
    fftconvolve.stypy_param_names_list = ['in1', 'in2', 'mode']
    fftconvolve.stypy_varargs_param_name = None
    fftconvolve.stypy_kwargs_param_name = None
    fftconvolve.stypy_call_defaults = defaults
    fftconvolve.stypy_call_varargs = varargs
    fftconvolve.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fftconvolve', ['in1', 'in2', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fftconvolve', localization, ['in1', 'in2', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fftconvolve(...)' code ##################

    str_274805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, (-1)), 'str', "Convolve two N-dimensional arrays using FFT.\n\n    Convolve `in1` and `in2` using the fast Fourier transform method, with\n    the output size determined by the `mode` argument.\n\n    This is generally much faster than `convolve` for large arrays (n > ~500),\n    but can be slower when only a few output values are needed, and can only\n    output float arrays (int or object array inputs will be cast to float).\n\n    As of v0.19, `convolve` automatically chooses this method or the direct\n    method based on an estimation of which is faster.\n\n    Parameters\n    ----------\n    in1 : array_like\n        First input.\n    in2 : array_like\n        Second input. Should have the same number of dimensions as `in1`.\n        If operating in 'valid' mode, either `in1` or `in2` must be\n        at least as large as the other in every dimension.\n    mode : str {'full', 'valid', 'same'}, optional\n        A string indicating the size of the output:\n\n        ``full``\n           The output is the full discrete linear convolution\n           of the inputs. (Default)\n        ``valid``\n           The output consists only of those elements that do not\n           rely on the zero-padding.\n        ``same``\n           The output is the same size as `in1`, centered\n           with respect to the 'full' output.\n\n    Returns\n    -------\n    out : array\n        An N-dimensional array containing a subset of the discrete linear\n        convolution of `in1` with `in2`.\n\n    Examples\n    --------\n    Autocorrelation of white noise is an impulse.\n\n    >>> from scipy import signal\n    >>> sig = np.random.randn(1000)\n    >>> autocorr = signal.fftconvolve(sig, sig[::-1], mode='full')\n\n    >>> import matplotlib.pyplot as plt\n    >>> fig, (ax_orig, ax_mag) = plt.subplots(2, 1)\n    >>> ax_orig.plot(sig)\n    >>> ax_orig.set_title('White noise')\n    >>> ax_mag.plot(np.arange(-len(sig)+1,len(sig)), autocorr)\n    >>> ax_mag.set_title('Autocorrelation')\n    >>> fig.tight_layout()\n    >>> fig.show()\n\n    Gaussian blur implemented using FFT convolution.  Notice the dark borders\n    around the image, due to the zero-padding beyond its boundaries.\n    The `convolve2d` function allows for other types of image boundaries,\n    but is far slower.\n\n    >>> from scipy import misc\n    >>> face = misc.face(gray=True)\n    >>> kernel = np.outer(signal.gaussian(70, 8), signal.gaussian(70, 8))\n    >>> blurred = signal.fftconvolve(face, kernel, mode='same')\n\n    >>> fig, (ax_orig, ax_kernel, ax_blurred) = plt.subplots(3, 1,\n    ...                                                      figsize=(6, 15))\n    >>> ax_orig.imshow(face, cmap='gray')\n    >>> ax_orig.set_title('Original')\n    >>> ax_orig.set_axis_off()\n    >>> ax_kernel.imshow(kernel, cmap='gray')\n    >>> ax_kernel.set_title('Gaussian kernel')\n    >>> ax_kernel.set_axis_off()\n    >>> ax_blurred.imshow(blurred, cmap='gray')\n    >>> ax_blurred.set_title('Blurred')\n    >>> ax_blurred.set_axis_off()\n    >>> fig.show()\n\n    ")
    
    # Assigning a Call to a Name (line 363):
    
    # Assigning a Call to a Name (line 363):
    
    # Call to asarray(...): (line 363)
    # Processing the call arguments (line 363)
    # Getting the type of 'in1' (line 363)
    in1_274807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 18), 'in1', False)
    # Processing the call keyword arguments (line 363)
    kwargs_274808 = {}
    # Getting the type of 'asarray' (line 363)
    asarray_274806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 363)
    asarray_call_result_274809 = invoke(stypy.reporting.localization.Localization(__file__, 363, 10), asarray_274806, *[in1_274807], **kwargs_274808)
    
    # Assigning a type to the variable 'in1' (line 363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 4), 'in1', asarray_call_result_274809)
    
    # Assigning a Call to a Name (line 364):
    
    # Assigning a Call to a Name (line 364):
    
    # Call to asarray(...): (line 364)
    # Processing the call arguments (line 364)
    # Getting the type of 'in2' (line 364)
    in2_274811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 18), 'in2', False)
    # Processing the call keyword arguments (line 364)
    kwargs_274812 = {}
    # Getting the type of 'asarray' (line 364)
    asarray_274810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 364)
    asarray_call_result_274813 = invoke(stypy.reporting.localization.Localization(__file__, 364, 10), asarray_274810, *[in2_274811], **kwargs_274812)
    
    # Assigning a type to the variable 'in2' (line 364)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 4), 'in2', asarray_call_result_274813)
    
    
    # Getting the type of 'in1' (line 366)
    in1_274814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 7), 'in1')
    # Obtaining the member 'ndim' of a type (line 366)
    ndim_274815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 7), in1_274814, 'ndim')
    # Getting the type of 'in2' (line 366)
    in2_274816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 19), 'in2')
    # Obtaining the member 'ndim' of a type (line 366)
    ndim_274817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 19), in2_274816, 'ndim')
    # Applying the binary operator '==' (line 366)
    result_eq_274818 = python_operator(stypy.reporting.localization.Localization(__file__, 366, 7), '==', ndim_274815, ndim_274817)
    int_274819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 366, 31), 'int')
    # Applying the binary operator '==' (line 366)
    result_eq_274820 = python_operator(stypy.reporting.localization.Localization(__file__, 366, 7), '==', ndim_274817, int_274819)
    # Applying the binary operator '&' (line 366)
    result_and__274821 = python_operator(stypy.reporting.localization.Localization(__file__, 366, 7), '&', result_eq_274818, result_eq_274820)
    
    # Testing the type of an if condition (line 366)
    if_condition_274822 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 366, 4), result_and__274821)
    # Assigning a type to the variable 'if_condition_274822' (line 366)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 366, 4), 'if_condition_274822', if_condition_274822)
    # SSA begins for if statement (line 366)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'in1' (line 367)
    in1_274823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 15), 'in1')
    # Getting the type of 'in2' (line 367)
    in2_274824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 21), 'in2')
    # Applying the binary operator '*' (line 367)
    result_mul_274825 = python_operator(stypy.reporting.localization.Localization(__file__, 367, 15), '*', in1_274823, in2_274824)
    
    # Assigning a type to the variable 'stypy_return_type' (line 367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 8), 'stypy_return_type', result_mul_274825)
    # SSA branch for the else part of an if statement (line 366)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Getting the type of 'in1' (line 368)
    in1_274826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 13), 'in1')
    # Obtaining the member 'ndim' of a type (line 368)
    ndim_274827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 13), in1_274826, 'ndim')
    # Getting the type of 'in2' (line 368)
    in2_274828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 25), 'in2')
    # Obtaining the member 'ndim' of a type (line 368)
    ndim_274829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 25), in2_274828, 'ndim')
    # Applying the binary operator '==' (line 368)
    result_eq_274830 = python_operator(stypy.reporting.localization.Localization(__file__, 368, 13), '==', ndim_274827, ndim_274829)
    
    # Applying the 'not' unary operator (line 368)
    result_not__274831 = python_operator(stypy.reporting.localization.Localization(__file__, 368, 9), 'not', result_eq_274830)
    
    # Testing the type of an if condition (line 368)
    if_condition_274832 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 368, 9), result_not__274831)
    # Assigning a type to the variable 'if_condition_274832' (line 368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 9), 'if_condition_274832', if_condition_274832)
    # SSA begins for if statement (line 368)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 369)
    # Processing the call arguments (line 369)
    str_274834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 25), 'str', 'in1 and in2 should have the same dimensionality')
    # Processing the call keyword arguments (line 369)
    kwargs_274835 = {}
    # Getting the type of 'ValueError' (line 369)
    ValueError_274833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 369)
    ValueError_call_result_274836 = invoke(stypy.reporting.localization.Localization(__file__, 369, 14), ValueError_274833, *[str_274834], **kwargs_274835)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 369, 8), ValueError_call_result_274836, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 368)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'in1' (line 370)
    in1_274837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 9), 'in1')
    # Obtaining the member 'size' of a type (line 370)
    size_274838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 9), in1_274837, 'size')
    int_274839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 21), 'int')
    # Applying the binary operator '==' (line 370)
    result_eq_274840 = python_operator(stypy.reporting.localization.Localization(__file__, 370, 9), '==', size_274838, int_274839)
    
    
    # Getting the type of 'in2' (line 370)
    in2_274841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 26), 'in2')
    # Obtaining the member 'size' of a type (line 370)
    size_274842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 26), in2_274841, 'size')
    int_274843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 38), 'int')
    # Applying the binary operator '==' (line 370)
    result_eq_274844 = python_operator(stypy.reporting.localization.Localization(__file__, 370, 26), '==', size_274842, int_274843)
    
    # Applying the binary operator 'or' (line 370)
    result_or_keyword_274845 = python_operator(stypy.reporting.localization.Localization(__file__, 370, 9), 'or', result_eq_274840, result_eq_274844)
    
    # Testing the type of an if condition (line 370)
    if_condition_274846 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 370, 9), result_or_keyword_274845)
    # Assigning a type to the variable 'if_condition_274846' (line 370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 9), 'if_condition_274846', if_condition_274846)
    # SSA begins for if statement (line 370)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 371)
    # Processing the call arguments (line 371)
    
    # Obtaining an instance of the builtin type 'list' (line 371)
    list_274848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 371, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 371)
    
    # Processing the call keyword arguments (line 371)
    kwargs_274849 = {}
    # Getting the type of 'array' (line 371)
    array_274847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 15), 'array', False)
    # Calling array(args, kwargs) (line 371)
    array_call_result_274850 = invoke(stypy.reporting.localization.Localization(__file__, 371, 15), array_274847, *[list_274848], **kwargs_274849)
    
    # Assigning a type to the variable 'stypy_return_type' (line 371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 8), 'stypy_return_type', array_call_result_274850)
    # SSA join for if statement (line 370)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 368)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 366)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 373):
    
    # Assigning a Call to a Name (line 373):
    
    # Call to array(...): (line 373)
    # Processing the call arguments (line 373)
    # Getting the type of 'in1' (line 373)
    in1_274852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 15), 'in1', False)
    # Obtaining the member 'shape' of a type (line 373)
    shape_274853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 15), in1_274852, 'shape')
    # Processing the call keyword arguments (line 373)
    kwargs_274854 = {}
    # Getting the type of 'array' (line 373)
    array_274851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 9), 'array', False)
    # Calling array(args, kwargs) (line 373)
    array_call_result_274855 = invoke(stypy.reporting.localization.Localization(__file__, 373, 9), array_274851, *[shape_274853], **kwargs_274854)
    
    # Assigning a type to the variable 's1' (line 373)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 4), 's1', array_call_result_274855)
    
    # Assigning a Call to a Name (line 374):
    
    # Assigning a Call to a Name (line 374):
    
    # Call to array(...): (line 374)
    # Processing the call arguments (line 374)
    # Getting the type of 'in2' (line 374)
    in2_274857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 15), 'in2', False)
    # Obtaining the member 'shape' of a type (line 374)
    shape_274858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 374, 15), in2_274857, 'shape')
    # Processing the call keyword arguments (line 374)
    kwargs_274859 = {}
    # Getting the type of 'array' (line 374)
    array_274856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 9), 'array', False)
    # Calling array(args, kwargs) (line 374)
    array_call_result_274860 = invoke(stypy.reporting.localization.Localization(__file__, 374, 9), array_274856, *[shape_274858], **kwargs_274859)
    
    # Assigning a type to the variable 's2' (line 374)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 374, 4), 's2', array_call_result_274860)
    
    # Assigning a BoolOp to a Name (line 375):
    
    # Assigning a BoolOp to a Name (line 375):
    
    # Evaluating a boolean operation
    
    # Call to issubdtype(...): (line 375)
    # Processing the call arguments (line 375)
    # Getting the type of 'in1' (line 375)
    in1_274863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 36), 'in1', False)
    # Obtaining the member 'dtype' of a type (line 375)
    dtype_274864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 36), in1_274863, 'dtype')
    # Getting the type of 'np' (line 375)
    np_274865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 47), 'np', False)
    # Obtaining the member 'complexfloating' of a type (line 375)
    complexfloating_274866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 47), np_274865, 'complexfloating')
    # Processing the call keyword arguments (line 375)
    kwargs_274867 = {}
    # Getting the type of 'np' (line 375)
    np_274861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 22), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 375)
    issubdtype_274862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 22), np_274861, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 375)
    issubdtype_call_result_274868 = invoke(stypy.reporting.localization.Localization(__file__, 375, 22), issubdtype_274862, *[dtype_274864, complexfloating_274866], **kwargs_274867)
    
    
    # Call to issubdtype(...): (line 376)
    # Processing the call arguments (line 376)
    # Getting the type of 'in2' (line 376)
    in2_274871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 36), 'in2', False)
    # Obtaining the member 'dtype' of a type (line 376)
    dtype_274872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 36), in2_274871, 'dtype')
    # Getting the type of 'np' (line 376)
    np_274873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 47), 'np', False)
    # Obtaining the member 'complexfloating' of a type (line 376)
    complexfloating_274874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 47), np_274873, 'complexfloating')
    # Processing the call keyword arguments (line 376)
    kwargs_274875 = {}
    # Getting the type of 'np' (line 376)
    np_274869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 22), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 376)
    issubdtype_274870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 22), np_274869, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 376)
    issubdtype_call_result_274876 = invoke(stypy.reporting.localization.Localization(__file__, 376, 22), issubdtype_274870, *[dtype_274872, complexfloating_274874], **kwargs_274875)
    
    # Applying the binary operator 'or' (line 375)
    result_or_keyword_274877 = python_operator(stypy.reporting.localization.Localization(__file__, 375, 22), 'or', issubdtype_call_result_274868, issubdtype_call_result_274876)
    
    # Assigning a type to the variable 'complex_result' (line 375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 4), 'complex_result', result_or_keyword_274877)
    
    # Assigning a BinOp to a Name (line 377):
    
    # Assigning a BinOp to a Name (line 377):
    # Getting the type of 's1' (line 377)
    s1_274878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 12), 's1')
    # Getting the type of 's2' (line 377)
    s2_274879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 377, 17), 's2')
    # Applying the binary operator '+' (line 377)
    result_add_274880 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 12), '+', s1_274878, s2_274879)
    
    int_274881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 377, 22), 'int')
    # Applying the binary operator '-' (line 377)
    result_sub_274882 = python_operator(stypy.reporting.localization.Localization(__file__, 377, 20), '-', result_add_274880, int_274881)
    
    # Assigning a type to the variable 'shape' (line 377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 377, 4), 'shape', result_sub_274882)
    
    
    # Call to _inputs_swap_needed(...): (line 380)
    # Processing the call arguments (line 380)
    # Getting the type of 'mode' (line 380)
    mode_274884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 27), 'mode', False)
    # Getting the type of 's1' (line 380)
    s1_274885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 33), 's1', False)
    # Getting the type of 's2' (line 380)
    s2_274886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 37), 's2', False)
    # Processing the call keyword arguments (line 380)
    kwargs_274887 = {}
    # Getting the type of '_inputs_swap_needed' (line 380)
    _inputs_swap_needed_274883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 7), '_inputs_swap_needed', False)
    # Calling _inputs_swap_needed(args, kwargs) (line 380)
    _inputs_swap_needed_call_result_274888 = invoke(stypy.reporting.localization.Localization(__file__, 380, 7), _inputs_swap_needed_274883, *[mode_274884, s1_274885, s2_274886], **kwargs_274887)
    
    # Testing the type of an if condition (line 380)
    if_condition_274889 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 380, 4), _inputs_swap_needed_call_result_274888)
    # Assigning a type to the variable 'if_condition_274889' (line 380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'if_condition_274889', if_condition_274889)
    # SSA begins for if statement (line 380)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 382):
    
    # Assigning a Name to a Name (line 382):
    # Getting the type of 'in2' (line 382)
    in2_274890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 27), 'in2')
    # Assigning a type to the variable 'tuple_assignment_274310' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'tuple_assignment_274310', in2_274890)
    
    # Assigning a Name to a Name (line 382):
    # Getting the type of 's2' (line 382)
    s2_274891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 32), 's2')
    # Assigning a type to the variable 'tuple_assignment_274311' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'tuple_assignment_274311', s2_274891)
    
    # Assigning a Name to a Name (line 382):
    # Getting the type of 'in1' (line 382)
    in1_274892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 36), 'in1')
    # Assigning a type to the variable 'tuple_assignment_274312' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'tuple_assignment_274312', in1_274892)
    
    # Assigning a Name to a Name (line 382):
    # Getting the type of 's1' (line 382)
    s1_274893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 41), 's1')
    # Assigning a type to the variable 'tuple_assignment_274313' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'tuple_assignment_274313', s1_274893)
    
    # Assigning a Name to a Name (line 382):
    # Getting the type of 'tuple_assignment_274310' (line 382)
    tuple_assignment_274310_274894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'tuple_assignment_274310')
    # Assigning a type to the variable 'in1' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'in1', tuple_assignment_274310_274894)
    
    # Assigning a Name to a Name (line 382):
    # Getting the type of 'tuple_assignment_274311' (line 382)
    tuple_assignment_274311_274895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'tuple_assignment_274311')
    # Assigning a type to the variable 's1' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 13), 's1', tuple_assignment_274311_274895)
    
    # Assigning a Name to a Name (line 382):
    # Getting the type of 'tuple_assignment_274312' (line 382)
    tuple_assignment_274312_274896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'tuple_assignment_274312')
    # Assigning a type to the variable 'in2' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 17), 'in2', tuple_assignment_274312_274896)
    
    # Assigning a Name to a Name (line 382):
    # Getting the type of 'tuple_assignment_274313' (line 382)
    tuple_assignment_274313_274897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'tuple_assignment_274313')
    # Assigning a type to the variable 's2' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 22), 's2', tuple_assignment_274313_274897)
    # SSA join for if statement (line 380)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 385):
    
    # Assigning a ListComp to a Name (line 385):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'shape' (line 385)
    shape_274907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 60), 'shape')
    comprehension_274908 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 385, 14), shape_274907)
    # Assigning a type to the variable 'd' (line 385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 14), 'd', comprehension_274908)
    
    # Call to next_fast_len(...): (line 385)
    # Processing the call arguments (line 385)
    
    # Call to int(...): (line 385)
    # Processing the call arguments (line 385)
    # Getting the type of 'd' (line 385)
    d_274902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 47), 'd', False)
    # Processing the call keyword arguments (line 385)
    kwargs_274903 = {}
    # Getting the type of 'int' (line 385)
    int_274901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 43), 'int', False)
    # Calling int(args, kwargs) (line 385)
    int_call_result_274904 = invoke(stypy.reporting.localization.Localization(__file__, 385, 43), int_274901, *[d_274902], **kwargs_274903)
    
    # Processing the call keyword arguments (line 385)
    kwargs_274905 = {}
    # Getting the type of 'fftpack' (line 385)
    fftpack_274898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 14), 'fftpack', False)
    # Obtaining the member 'helper' of a type (line 385)
    helper_274899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 14), fftpack_274898, 'helper')
    # Obtaining the member 'next_fast_len' of a type (line 385)
    next_fast_len_274900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 14), helper_274899, 'next_fast_len')
    # Calling next_fast_len(args, kwargs) (line 385)
    next_fast_len_call_result_274906 = invoke(stypy.reporting.localization.Localization(__file__, 385, 14), next_fast_len_274900, *[int_call_result_274904], **kwargs_274905)
    
    list_274909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 14), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 385, 14), list_274909, next_fast_len_call_result_274906)
    # Assigning a type to the variable 'fshape' (line 385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 4), 'fshape', list_274909)
    
    # Assigning a Call to a Name (line 386):
    
    # Assigning a Call to a Name (line 386):
    
    # Call to tuple(...): (line 386)
    # Processing the call arguments (line 386)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'shape' (line 386)
    shape_274919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 48), 'shape', False)
    comprehension_274920 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 20), shape_274919)
    # Assigning a type to the variable 'sz' (line 386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 20), 'sz', comprehension_274920)
    
    # Call to slice(...): (line 386)
    # Processing the call arguments (line 386)
    int_274912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 26), 'int')
    
    # Call to int(...): (line 386)
    # Processing the call arguments (line 386)
    # Getting the type of 'sz' (line 386)
    sz_274914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 33), 'sz', False)
    # Processing the call keyword arguments (line 386)
    kwargs_274915 = {}
    # Getting the type of 'int' (line 386)
    int_274913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 29), 'int', False)
    # Calling int(args, kwargs) (line 386)
    int_call_result_274916 = invoke(stypy.reporting.localization.Localization(__file__, 386, 29), int_274913, *[sz_274914], **kwargs_274915)
    
    # Processing the call keyword arguments (line 386)
    kwargs_274917 = {}
    # Getting the type of 'slice' (line 386)
    slice_274911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 20), 'slice', False)
    # Calling slice(args, kwargs) (line 386)
    slice_call_result_274918 = invoke(stypy.reporting.localization.Localization(__file__, 386, 20), slice_274911, *[int_274912, int_call_result_274916], **kwargs_274917)
    
    list_274921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 20), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 386, 20), list_274921, slice_call_result_274918)
    # Processing the call keyword arguments (line 386)
    kwargs_274922 = {}
    # Getting the type of 'tuple' (line 386)
    tuple_274910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 13), 'tuple', False)
    # Calling tuple(args, kwargs) (line 386)
    tuple_call_result_274923 = invoke(stypy.reporting.localization.Localization(__file__, 386, 13), tuple_274910, *[list_274921], **kwargs_274922)
    
    # Assigning a type to the variable 'fslice' (line 386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 4), 'fslice', tuple_call_result_274923)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'complex_result' (line 389)
    complex_result_274924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 11), 'complex_result')
    # Applying the 'not' unary operator (line 389)
    result_not__274925 = python_operator(stypy.reporting.localization.Localization(__file__, 389, 7), 'not', complex_result_274924)
    
    
    # Evaluating a boolean operation
    # Getting the type of '_rfft_mt_safe' (line 389)
    _rfft_mt_safe_274926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 31), '_rfft_mt_safe')
    
    # Call to acquire(...): (line 389)
    # Processing the call arguments (line 389)
    # Getting the type of 'False' (line 389)
    False_274929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 67), 'False', False)
    # Processing the call keyword arguments (line 389)
    kwargs_274930 = {}
    # Getting the type of '_rfft_lock' (line 389)
    _rfft_lock_274927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 48), '_rfft_lock', False)
    # Obtaining the member 'acquire' of a type (line 389)
    acquire_274928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 48), _rfft_lock_274927, 'acquire')
    # Calling acquire(args, kwargs) (line 389)
    acquire_call_result_274931 = invoke(stypy.reporting.localization.Localization(__file__, 389, 48), acquire_274928, *[False_274929], **kwargs_274930)
    
    # Applying the binary operator 'or' (line 389)
    result_or_keyword_274932 = python_operator(stypy.reporting.localization.Localization(__file__, 389, 31), 'or', _rfft_mt_safe_274926, acquire_call_result_274931)
    
    # Applying the binary operator 'and' (line 389)
    result_and_keyword_274933 = python_operator(stypy.reporting.localization.Localization(__file__, 389, 7), 'and', result_not__274925, result_or_keyword_274932)
    
    # Testing the type of an if condition (line 389)
    if_condition_274934 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 389, 4), result_and_keyword_274933)
    # Assigning a type to the variable 'if_condition_274934' (line 389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'if_condition_274934', if_condition_274934)
    # SSA begins for if statement (line 389)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Try-finally block (line 390)
    
    # Assigning a Call to a Name (line 391):
    
    # Assigning a Call to a Name (line 391):
    
    # Call to rfftn(...): (line 391)
    # Processing the call arguments (line 391)
    # Getting the type of 'in1' (line 391)
    in1_274938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 31), 'in1', False)
    # Getting the type of 'fshape' (line 391)
    fshape_274939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 36), 'fshape', False)
    # Processing the call keyword arguments (line 391)
    kwargs_274940 = {}
    # Getting the type of 'np' (line 391)
    np_274935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 18), 'np', False)
    # Obtaining the member 'fft' of a type (line 391)
    fft_274936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 18), np_274935, 'fft')
    # Obtaining the member 'rfftn' of a type (line 391)
    rfftn_274937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 18), fft_274936, 'rfftn')
    # Calling rfftn(args, kwargs) (line 391)
    rfftn_call_result_274941 = invoke(stypy.reporting.localization.Localization(__file__, 391, 18), rfftn_274937, *[in1_274938, fshape_274939], **kwargs_274940)
    
    # Assigning a type to the variable 'sp1' (line 391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 12), 'sp1', rfftn_call_result_274941)
    
    # Assigning a Call to a Name (line 392):
    
    # Assigning a Call to a Name (line 392):
    
    # Call to rfftn(...): (line 392)
    # Processing the call arguments (line 392)
    # Getting the type of 'in2' (line 392)
    in2_274945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 31), 'in2', False)
    # Getting the type of 'fshape' (line 392)
    fshape_274946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 36), 'fshape', False)
    # Processing the call keyword arguments (line 392)
    kwargs_274947 = {}
    # Getting the type of 'np' (line 392)
    np_274942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 18), 'np', False)
    # Obtaining the member 'fft' of a type (line 392)
    fft_274943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 18), np_274942, 'fft')
    # Obtaining the member 'rfftn' of a type (line 392)
    rfftn_274944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 18), fft_274943, 'rfftn')
    # Calling rfftn(args, kwargs) (line 392)
    rfftn_call_result_274948 = invoke(stypy.reporting.localization.Localization(__file__, 392, 18), rfftn_274944, *[in2_274945, fshape_274946], **kwargs_274947)
    
    # Assigning a type to the variable 'sp2' (line 392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 12), 'sp2', rfftn_call_result_274948)
    
    # Assigning a Call to a Name (line 393):
    
    # Assigning a Call to a Name (line 393):
    
    # Call to copy(...): (line 393)
    # Processing the call keyword arguments (line 393)
    kwargs_274962 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'fslice' (line 393)
    fslice_274949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 52), 'fslice', False)
    
    # Call to irfftn(...): (line 393)
    # Processing the call arguments (line 393)
    # Getting the type of 'sp1' (line 393)
    sp1_274953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 33), 'sp1', False)
    # Getting the type of 'sp2' (line 393)
    sp2_274954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 39), 'sp2', False)
    # Applying the binary operator '*' (line 393)
    result_mul_274955 = python_operator(stypy.reporting.localization.Localization(__file__, 393, 33), '*', sp1_274953, sp2_274954)
    
    # Getting the type of 'fshape' (line 393)
    fshape_274956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 44), 'fshape', False)
    # Processing the call keyword arguments (line 393)
    kwargs_274957 = {}
    # Getting the type of 'np' (line 393)
    np_274950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 19), 'np', False)
    # Obtaining the member 'fft' of a type (line 393)
    fft_274951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 19), np_274950, 'fft')
    # Obtaining the member 'irfftn' of a type (line 393)
    irfftn_274952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 19), fft_274951, 'irfftn')
    # Calling irfftn(args, kwargs) (line 393)
    irfftn_call_result_274958 = invoke(stypy.reporting.localization.Localization(__file__, 393, 19), irfftn_274952, *[result_mul_274955, fshape_274956], **kwargs_274957)
    
    # Obtaining the member '__getitem__' of a type (line 393)
    getitem___274959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 19), irfftn_call_result_274958, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 393)
    subscript_call_result_274960 = invoke(stypy.reporting.localization.Localization(__file__, 393, 19), getitem___274959, fslice_274949)
    
    # Obtaining the member 'copy' of a type (line 393)
    copy_274961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 19), subscript_call_result_274960, 'copy')
    # Calling copy(args, kwargs) (line 393)
    copy_call_result_274963 = invoke(stypy.reporting.localization.Localization(__file__, 393, 19), copy_274961, *[], **kwargs_274962)
    
    # Assigning a type to the variable 'ret' (line 393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 12), 'ret', copy_call_result_274963)
    
    # finally branch of the try-finally block (line 390)
    
    
    # Getting the type of '_rfft_mt_safe' (line 395)
    _rfft_mt_safe_274964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 19), '_rfft_mt_safe')
    # Applying the 'not' unary operator (line 395)
    result_not__274965 = python_operator(stypy.reporting.localization.Localization(__file__, 395, 15), 'not', _rfft_mt_safe_274964)
    
    # Testing the type of an if condition (line 395)
    if_condition_274966 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 395, 12), result_not__274965)
    # Assigning a type to the variable 'if_condition_274966' (line 395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 12), 'if_condition_274966', if_condition_274966)
    # SSA begins for if statement (line 395)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to release(...): (line 396)
    # Processing the call keyword arguments (line 396)
    kwargs_274969 = {}
    # Getting the type of '_rfft_lock' (line 396)
    _rfft_lock_274967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 16), '_rfft_lock', False)
    # Obtaining the member 'release' of a type (line 396)
    release_274968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 16), _rfft_lock_274967, 'release')
    # Calling release(args, kwargs) (line 396)
    release_call_result_274970 = invoke(stypy.reporting.localization.Localization(__file__, 396, 16), release_274968, *[], **kwargs_274969)
    
    # SSA join for if statement (line 395)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # SSA branch for the else part of an if statement (line 389)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 402):
    
    # Assigning a Call to a Name (line 402):
    
    # Call to fftn(...): (line 402)
    # Processing the call arguments (line 402)
    # Getting the type of 'in1' (line 402)
    in1_274973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 27), 'in1', False)
    # Getting the type of 'fshape' (line 402)
    fshape_274974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 32), 'fshape', False)
    # Processing the call keyword arguments (line 402)
    kwargs_274975 = {}
    # Getting the type of 'fftpack' (line 402)
    fftpack_274971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 14), 'fftpack', False)
    # Obtaining the member 'fftn' of a type (line 402)
    fftn_274972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 14), fftpack_274971, 'fftn')
    # Calling fftn(args, kwargs) (line 402)
    fftn_call_result_274976 = invoke(stypy.reporting.localization.Localization(__file__, 402, 14), fftn_274972, *[in1_274973, fshape_274974], **kwargs_274975)
    
    # Assigning a type to the variable 'sp1' (line 402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'sp1', fftn_call_result_274976)
    
    # Assigning a Call to a Name (line 403):
    
    # Assigning a Call to a Name (line 403):
    
    # Call to fftn(...): (line 403)
    # Processing the call arguments (line 403)
    # Getting the type of 'in2' (line 403)
    in2_274979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 27), 'in2', False)
    # Getting the type of 'fshape' (line 403)
    fshape_274980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 32), 'fshape', False)
    # Processing the call keyword arguments (line 403)
    kwargs_274981 = {}
    # Getting the type of 'fftpack' (line 403)
    fftpack_274977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 14), 'fftpack', False)
    # Obtaining the member 'fftn' of a type (line 403)
    fftn_274978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 14), fftpack_274977, 'fftn')
    # Calling fftn(args, kwargs) (line 403)
    fftn_call_result_274982 = invoke(stypy.reporting.localization.Localization(__file__, 403, 14), fftn_274978, *[in2_274979, fshape_274980], **kwargs_274981)
    
    # Assigning a type to the variable 'sp2' (line 403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'sp2', fftn_call_result_274982)
    
    # Assigning a Call to a Name (line 404):
    
    # Assigning a Call to a Name (line 404):
    
    # Call to copy(...): (line 404)
    # Processing the call keyword arguments (line 404)
    kwargs_274994 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'fslice' (line 404)
    fslice_274983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 39), 'fslice', False)
    
    # Call to ifftn(...): (line 404)
    # Processing the call arguments (line 404)
    # Getting the type of 'sp1' (line 404)
    sp1_274986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 28), 'sp1', False)
    # Getting the type of 'sp2' (line 404)
    sp2_274987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 34), 'sp2', False)
    # Applying the binary operator '*' (line 404)
    result_mul_274988 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 28), '*', sp1_274986, sp2_274987)
    
    # Processing the call keyword arguments (line 404)
    kwargs_274989 = {}
    # Getting the type of 'fftpack' (line 404)
    fftpack_274984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 14), 'fftpack', False)
    # Obtaining the member 'ifftn' of a type (line 404)
    ifftn_274985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 14), fftpack_274984, 'ifftn')
    # Calling ifftn(args, kwargs) (line 404)
    ifftn_call_result_274990 = invoke(stypy.reporting.localization.Localization(__file__, 404, 14), ifftn_274985, *[result_mul_274988], **kwargs_274989)
    
    # Obtaining the member '__getitem__' of a type (line 404)
    getitem___274991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 14), ifftn_call_result_274990, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 404)
    subscript_call_result_274992 = invoke(stypy.reporting.localization.Localization(__file__, 404, 14), getitem___274991, fslice_274983)
    
    # Obtaining the member 'copy' of a type (line 404)
    copy_274993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 14), subscript_call_result_274992, 'copy')
    # Calling copy(args, kwargs) (line 404)
    copy_call_result_274995 = invoke(stypy.reporting.localization.Localization(__file__, 404, 14), copy_274993, *[], **kwargs_274994)
    
    # Assigning a type to the variable 'ret' (line 404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'ret', copy_call_result_274995)
    
    
    # Getting the type of 'complex_result' (line 405)
    complex_result_274996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 15), 'complex_result')
    # Applying the 'not' unary operator (line 405)
    result_not__274997 = python_operator(stypy.reporting.localization.Localization(__file__, 405, 11), 'not', complex_result_274996)
    
    # Testing the type of an if condition (line 405)
    if_condition_274998 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 405, 8), result_not__274997)
    # Assigning a type to the variable 'if_condition_274998' (line 405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 8), 'if_condition_274998', if_condition_274998)
    # SSA begins for if statement (line 405)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 406):
    
    # Assigning a Attribute to a Name (line 406):
    # Getting the type of 'ret' (line 406)
    ret_274999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 18), 'ret')
    # Obtaining the member 'real' of a type (line 406)
    real_275000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 406, 18), ret_274999, 'real')
    # Assigning a type to the variable 'ret' (line 406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 12), 'ret', real_275000)
    # SSA join for if statement (line 405)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 389)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'mode' (line 408)
    mode_275001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 7), 'mode')
    str_275002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, 15), 'str', 'full')
    # Applying the binary operator '==' (line 408)
    result_eq_275003 = python_operator(stypy.reporting.localization.Localization(__file__, 408, 7), '==', mode_275001, str_275002)
    
    # Testing the type of an if condition (line 408)
    if_condition_275004 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 408, 4), result_eq_275003)
    # Assigning a type to the variable 'if_condition_275004' (line 408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 4), 'if_condition_275004', if_condition_275004)
    # SSA begins for if statement (line 408)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'ret' (line 409)
    ret_275005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 15), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'stypy_return_type', ret_275005)
    # SSA branch for the else part of an if statement (line 408)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 410)
    mode_275006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 9), 'mode')
    str_275007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 17), 'str', 'same')
    # Applying the binary operator '==' (line 410)
    result_eq_275008 = python_operator(stypy.reporting.localization.Localization(__file__, 410, 9), '==', mode_275006, str_275007)
    
    # Testing the type of an if condition (line 410)
    if_condition_275009 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 410, 9), result_eq_275008)
    # Assigning a type to the variable 'if_condition_275009' (line 410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 9), 'if_condition_275009', if_condition_275009)
    # SSA begins for if statement (line 410)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _centered(...): (line 411)
    # Processing the call arguments (line 411)
    # Getting the type of 'ret' (line 411)
    ret_275011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 25), 'ret', False)
    # Getting the type of 's1' (line 411)
    s1_275012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 30), 's1', False)
    # Processing the call keyword arguments (line 411)
    kwargs_275013 = {}
    # Getting the type of '_centered' (line 411)
    _centered_275010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 15), '_centered', False)
    # Calling _centered(args, kwargs) (line 411)
    _centered_call_result_275014 = invoke(stypy.reporting.localization.Localization(__file__, 411, 15), _centered_275010, *[ret_275011, s1_275012], **kwargs_275013)
    
    # Assigning a type to the variable 'stypy_return_type' (line 411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 8), 'stypy_return_type', _centered_call_result_275014)
    # SSA branch for the else part of an if statement (line 410)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 412)
    mode_275015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 9), 'mode')
    str_275016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 17), 'str', 'valid')
    # Applying the binary operator '==' (line 412)
    result_eq_275017 = python_operator(stypy.reporting.localization.Localization(__file__, 412, 9), '==', mode_275015, str_275016)
    
    # Testing the type of an if condition (line 412)
    if_condition_275018 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 412, 9), result_eq_275017)
    # Assigning a type to the variable 'if_condition_275018' (line 412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 9), 'if_condition_275018', if_condition_275018)
    # SSA begins for if statement (line 412)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _centered(...): (line 413)
    # Processing the call arguments (line 413)
    # Getting the type of 'ret' (line 413)
    ret_275020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 25), 'ret', False)
    # Getting the type of 's1' (line 413)
    s1_275021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 30), 's1', False)
    # Getting the type of 's2' (line 413)
    s2_275022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 35), 's2', False)
    # Applying the binary operator '-' (line 413)
    result_sub_275023 = python_operator(stypy.reporting.localization.Localization(__file__, 413, 30), '-', s1_275021, s2_275022)
    
    int_275024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 40), 'int')
    # Applying the binary operator '+' (line 413)
    result_add_275025 = python_operator(stypy.reporting.localization.Localization(__file__, 413, 38), '+', result_sub_275023, int_275024)
    
    # Processing the call keyword arguments (line 413)
    kwargs_275026 = {}
    # Getting the type of '_centered' (line 413)
    _centered_275019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 15), '_centered', False)
    # Calling _centered(args, kwargs) (line 413)
    _centered_call_result_275027 = invoke(stypy.reporting.localization.Localization(__file__, 413, 15), _centered_275019, *[ret_275020, result_add_275025], **kwargs_275026)
    
    # Assigning a type to the variable 'stypy_return_type' (line 413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 8), 'stypy_return_type', _centered_call_result_275027)
    # SSA branch for the else part of an if statement (line 412)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 415)
    # Processing the call arguments (line 415)
    str_275029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 25), 'str', "Acceptable mode flags are 'valid', 'same', or 'full'.")
    # Processing the call keyword arguments (line 415)
    kwargs_275030 = {}
    # Getting the type of 'ValueError' (line 415)
    ValueError_275028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 415)
    ValueError_call_result_275031 = invoke(stypy.reporting.localization.Localization(__file__, 415, 14), ValueError_275028, *[str_275029], **kwargs_275030)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 415, 8), ValueError_call_result_275031, 'raise parameter', BaseException)
    # SSA join for if statement (line 412)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 410)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 408)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'fftconvolve(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fftconvolve' in the type store
    # Getting the type of 'stypy_return_type' (line 282)
    stypy_return_type_275032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275032)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fftconvolve'
    return stypy_return_type_275032

# Assigning a type to the variable 'fftconvolve' (line 282)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 0), 'fftconvolve', fftconvolve)

@norecursion
def _numeric_arrays(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_275033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 34), 'str', 'buifc')
    defaults = [str_275033]
    # Create a new context for function '_numeric_arrays'
    module_type_store = module_type_store.open_function_context('_numeric_arrays', 419, 0, False)
    
    # Passed parameters checking function
    _numeric_arrays.stypy_localization = localization
    _numeric_arrays.stypy_type_of_self = None
    _numeric_arrays.stypy_type_store = module_type_store
    _numeric_arrays.stypy_function_name = '_numeric_arrays'
    _numeric_arrays.stypy_param_names_list = ['arrays', 'kinds']
    _numeric_arrays.stypy_varargs_param_name = None
    _numeric_arrays.stypy_kwargs_param_name = None
    _numeric_arrays.stypy_call_defaults = defaults
    _numeric_arrays.stypy_call_varargs = varargs
    _numeric_arrays.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_numeric_arrays', ['arrays', 'kinds'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_numeric_arrays', localization, ['arrays', 'kinds'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_numeric_arrays(...)' code ##################

    str_275034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, (-1)), 'str', '\n    See if a list of arrays are all numeric.\n\n    Parameters\n    ----------\n    ndarrays : array or list of arrays\n        arrays to check if numeric.\n    numeric_kinds : string-like\n        The dtypes of the arrays to be checked. If the dtype.kind of\n        the ndarrays are not in this string the function returns False and\n        otherwise returns True.\n    ')
    
    
    
    # Call to type(...): (line 432)
    # Processing the call arguments (line 432)
    # Getting the type of 'arrays' (line 432)
    arrays_275036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 12), 'arrays', False)
    # Processing the call keyword arguments (line 432)
    kwargs_275037 = {}
    # Getting the type of 'type' (line 432)
    type_275035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 7), 'type', False)
    # Calling type(args, kwargs) (line 432)
    type_call_result_275038 = invoke(stypy.reporting.localization.Localization(__file__, 432, 7), type_275035, *[arrays_275036], **kwargs_275037)
    
    # Getting the type of 'ndarray' (line 432)
    ndarray_275039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 23), 'ndarray')
    # Applying the binary operator '==' (line 432)
    result_eq_275040 = python_operator(stypy.reporting.localization.Localization(__file__, 432, 7), '==', type_call_result_275038, ndarray_275039)
    
    # Testing the type of an if condition (line 432)
    if_condition_275041 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 432, 4), result_eq_275040)
    # Assigning a type to the variable 'if_condition_275041' (line 432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 4), 'if_condition_275041', if_condition_275041)
    # SSA begins for if statement (line 432)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'arrays' (line 433)
    arrays_275042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 15), 'arrays')
    # Obtaining the member 'dtype' of a type (line 433)
    dtype_275043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 15), arrays_275042, 'dtype')
    # Obtaining the member 'kind' of a type (line 433)
    kind_275044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 15), dtype_275043, 'kind')
    # Getting the type of 'kinds' (line 433)
    kinds_275045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 36), 'kinds')
    # Applying the binary operator 'in' (line 433)
    result_contains_275046 = python_operator(stypy.reporting.localization.Localization(__file__, 433, 15), 'in', kind_275044, kinds_275045)
    
    # Assigning a type to the variable 'stypy_return_type' (line 433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 8), 'stypy_return_type', result_contains_275046)
    # SSA join for if statement (line 432)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'arrays' (line 434)
    arrays_275047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 18), 'arrays')
    # Testing the type of a for loop iterable (line 434)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 434, 4), arrays_275047)
    # Getting the type of the for loop variable (line 434)
    for_loop_var_275048 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 434, 4), arrays_275047)
    # Assigning a type to the variable 'array_' (line 434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 434, 4), 'array_', for_loop_var_275048)
    # SSA begins for a for statement (line 434)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'array_' (line 435)
    array__275049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 11), 'array_')
    # Obtaining the member 'dtype' of a type (line 435)
    dtype_275050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 11), array__275049, 'dtype')
    # Obtaining the member 'kind' of a type (line 435)
    kind_275051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 11), dtype_275050, 'kind')
    # Getting the type of 'kinds' (line 435)
    kinds_275052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 36), 'kinds')
    # Applying the binary operator 'notin' (line 435)
    result_contains_275053 = python_operator(stypy.reporting.localization.Localization(__file__, 435, 11), 'notin', kind_275051, kinds_275052)
    
    # Testing the type of an if condition (line 435)
    if_condition_275054 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 435, 8), result_contains_275053)
    # Assigning a type to the variable 'if_condition_275054' (line 435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'if_condition_275054', if_condition_275054)
    # SSA begins for if statement (line 435)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 436)
    False_275055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 19), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 12), 'stypy_return_type', False_275055)
    # SSA join for if statement (line 435)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'True' (line 437)
    True_275056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 11), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 437, 4), 'stypy_return_type', True_275056)
    
    # ################# End of '_numeric_arrays(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_numeric_arrays' in the type store
    # Getting the type of 'stypy_return_type' (line 419)
    stypy_return_type_275057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275057)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_numeric_arrays'
    return stypy_return_type_275057

# Assigning a type to the variable '_numeric_arrays' (line 419)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 0), '_numeric_arrays', _numeric_arrays)

@norecursion
def _prod(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_prod'
    module_type_store = module_type_store.open_function_context('_prod', 440, 0, False)
    
    # Passed parameters checking function
    _prod.stypy_localization = localization
    _prod.stypy_type_of_self = None
    _prod.stypy_type_store = module_type_store
    _prod.stypy_function_name = '_prod'
    _prod.stypy_param_names_list = ['iterable']
    _prod.stypy_varargs_param_name = None
    _prod.stypy_kwargs_param_name = None
    _prod.stypy_call_defaults = defaults
    _prod.stypy_call_varargs = varargs
    _prod.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_prod', ['iterable'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_prod', localization, ['iterable'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_prod(...)' code ##################

    str_275058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 444, (-1)), 'str', '\n    Product of a list of numbers.\n    Faster than np.prod for short lists like array shapes.\n    ')
    
    # Assigning a Num to a Name (line 445):
    
    # Assigning a Num to a Name (line 445):
    int_275059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 14), 'int')
    # Assigning a type to the variable 'product' (line 445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 4), 'product', int_275059)
    
    # Getting the type of 'iterable' (line 446)
    iterable_275060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 13), 'iterable')
    # Testing the type of a for loop iterable (line 446)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 446, 4), iterable_275060)
    # Getting the type of the for loop variable (line 446)
    for_loop_var_275061 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 446, 4), iterable_275060)
    # Assigning a type to the variable 'x' (line 446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'x', for_loop_var_275061)
    # SSA begins for a for statement (line 446)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'product' (line 447)
    product_275062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'product')
    # Getting the type of 'x' (line 447)
    x_275063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 19), 'x')
    # Applying the binary operator '*=' (line 447)
    result_imul_275064 = python_operator(stypy.reporting.localization.Localization(__file__, 447, 8), '*=', product_275062, x_275063)
    # Assigning a type to the variable 'product' (line 447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'product', result_imul_275064)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'product' (line 448)
    product_275065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 11), 'product')
    # Assigning a type to the variable 'stypy_return_type' (line 448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 4), 'stypy_return_type', product_275065)
    
    # ################# End of '_prod(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_prod' in the type store
    # Getting the type of 'stypy_return_type' (line 440)
    stypy_return_type_275066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275066)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_prod'
    return stypy_return_type_275066

# Assigning a type to the variable '_prod' (line 440)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 0), '_prod', _prod)

@norecursion
def _fftconv_faster(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_fftconv_faster'
    module_type_store = module_type_store.open_function_context('_fftconv_faster', 451, 0, False)
    
    # Passed parameters checking function
    _fftconv_faster.stypy_localization = localization
    _fftconv_faster.stypy_type_of_self = None
    _fftconv_faster.stypy_type_store = module_type_store
    _fftconv_faster.stypy_function_name = '_fftconv_faster'
    _fftconv_faster.stypy_param_names_list = ['x', 'h', 'mode']
    _fftconv_faster.stypy_varargs_param_name = None
    _fftconv_faster.stypy_kwargs_param_name = None
    _fftconv_faster.stypy_call_defaults = defaults
    _fftconv_faster.stypy_call_varargs = varargs
    _fftconv_faster.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_fftconv_faster', ['x', 'h', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_fftconv_faster', localization, ['x', 'h', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_fftconv_faster(...)' code ##################

    str_275067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, (-1)), 'str', "\n    See if using `fftconvolve` or `_correlateND` is faster. The boolean value\n    returned depends on the sizes and shapes of the input values.\n\n    The big O ratios were found to hold across different machines, which makes\n    sense as it's the ratio that matters (the effective speed of the computer\n    is found in both big O constants). Regardless, this had been tuned on an\n    early 2015 MacBook Pro with 8GB RAM and an Intel i5 processor.\n    ")
    
    
    # Getting the type of 'mode' (line 461)
    mode_275068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 7), 'mode')
    str_275069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 15), 'str', 'full')
    # Applying the binary operator '==' (line 461)
    result_eq_275070 = python_operator(stypy.reporting.localization.Localization(__file__, 461, 7), '==', mode_275068, str_275069)
    
    # Testing the type of an if condition (line 461)
    if_condition_275071 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 461, 4), result_eq_275070)
    # Assigning a type to the variable 'if_condition_275071' (line 461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 4), 'if_condition_275071', if_condition_275071)
    # SSA begins for if statement (line 461)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 462):
    
    # Assigning a ListComp to a Name (line 462):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 462)
    # Processing the call arguments (line 462)
    # Getting the type of 'x' (line 462)
    x_275078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 47), 'x', False)
    # Obtaining the member 'shape' of a type (line 462)
    shape_275079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 462, 47), x_275078, 'shape')
    # Getting the type of 'h' (line 462)
    h_275080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 56), 'h', False)
    # Obtaining the member 'shape' of a type (line 462)
    shape_275081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 462, 56), h_275080, 'shape')
    # Processing the call keyword arguments (line 462)
    kwargs_275082 = {}
    # Getting the type of 'zip' (line 462)
    zip_275077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 43), 'zip', False)
    # Calling zip(args, kwargs) (line 462)
    zip_call_result_275083 = invoke(stypy.reporting.localization.Localization(__file__, 462, 43), zip_275077, *[shape_275079, shape_275081], **kwargs_275082)
    
    comprehension_275084 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 462, 21), zip_call_result_275083)
    # Assigning a type to the variable 'n' (line 462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 21), 'n', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 462, 21), comprehension_275084))
    # Assigning a type to the variable 'k' (line 462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 21), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 462, 21), comprehension_275084))
    # Getting the type of 'n' (line 462)
    n_275072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 21), 'n')
    # Getting the type of 'k' (line 462)
    k_275073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 25), 'k')
    # Applying the binary operator '+' (line 462)
    result_add_275074 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 21), '+', n_275072, k_275073)
    
    int_275075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 29), 'int')
    # Applying the binary operator '-' (line 462)
    result_sub_275076 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 27), '-', result_add_275074, int_275075)
    
    list_275085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 462, 21), list_275085, result_sub_275076)
    # Assigning a type to the variable 'out_shape' (line 462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 8), 'out_shape', list_275085)
    
    # Assigning a IfExp to a Name (line 463):
    
    # Assigning a IfExp to a Name (line 463):
    
    
    # Getting the type of 'x' (line 463)
    x_275086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 43), 'x')
    # Obtaining the member 'ndim' of a type (line 463)
    ndim_275087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 43), x_275086, 'ndim')
    int_275088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, 53), 'int')
    # Applying the binary operator '==' (line 463)
    result_eq_275089 = python_operator(stypy.reporting.localization.Localization(__file__, 463, 43), '==', ndim_275087, int_275088)
    
    # Testing the type of an if expression (line 463)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 463, 25), result_eq_275089)
    # SSA begins for if expression (line 463)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    float_275090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, 25), 'float')
    # SSA branch for the else part of an if expression (line 463)
    module_type_store.open_ssa_branch('if expression else')
    float_275091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 463, 60), 'float')
    # SSA join for if expression (line 463)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_275092 = union_type.UnionType.add(float_275090, float_275091)
    
    # Assigning a type to the variable 'big_O_constant' (line 463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 8), 'big_O_constant', if_exp_275092)
    # SSA branch for the else part of an if statement (line 461)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 464)
    mode_275093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 9), 'mode')
    str_275094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 17), 'str', 'same')
    # Applying the binary operator '==' (line 464)
    result_eq_275095 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 9), '==', mode_275093, str_275094)
    
    # Testing the type of an if condition (line 464)
    if_condition_275096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 464, 9), result_eq_275095)
    # Assigning a type to the variable 'if_condition_275096' (line 464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 9), 'if_condition_275096', if_condition_275096)
    # SSA begins for if statement (line 464)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 465):
    
    # Assigning a Attribute to a Name (line 465):
    # Getting the type of 'x' (line 465)
    x_275097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 20), 'x')
    # Obtaining the member 'shape' of a type (line 465)
    shape_275098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 465, 20), x_275097, 'shape')
    # Assigning a type to the variable 'out_shape' (line 465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 8), 'out_shape', shape_275098)
    
    
    # Getting the type of 'x' (line 466)
    x_275099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 11), 'x')
    # Obtaining the member 'ndim' of a type (line 466)
    ndim_275100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 11), x_275099, 'ndim')
    int_275101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 21), 'int')
    # Applying the binary operator '==' (line 466)
    result_eq_275102 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 11), '==', ndim_275100, int_275101)
    
    # Testing the type of an if condition (line 466)
    if_condition_275103 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 466, 8), result_eq_275102)
    # Assigning a type to the variable 'if_condition_275103' (line 466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 8), 'if_condition_275103', if_condition_275103)
    # SSA begins for if statement (line 466)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'h' (line 467)
    h_275104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 15), 'h')
    # Obtaining the member 'size' of a type (line 467)
    size_275105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 15), h_275104, 'size')
    # Getting the type of 'x' (line 467)
    x_275106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 25), 'x')
    # Obtaining the member 'size' of a type (line 467)
    size_275107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 25), x_275106, 'size')
    # Applying the binary operator '<=' (line 467)
    result_le_275108 = python_operator(stypy.reporting.localization.Localization(__file__, 467, 15), '<=', size_275105, size_275107)
    
    # Testing the type of an if condition (line 467)
    if_condition_275109 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 467, 12), result_le_275108)
    # Assigning a type to the variable 'if_condition_275109' (line 467)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 12), 'if_condition_275109', if_condition_275109)
    # SSA begins for if statement (line 467)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 468):
    
    # Assigning a Num to a Name (line 468):
    float_275110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 33), 'float')
    # Assigning a type to the variable 'big_O_constant' (line 468)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 16), 'big_O_constant', float_275110)
    # SSA branch for the else part of an if statement (line 467)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 470):
    
    # Assigning a Num to a Name (line 470):
    float_275111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 33), 'float')
    # Assigning a type to the variable 'big_O_constant' (line 470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 16), 'big_O_constant', float_275111)
    # SSA join for if statement (line 467)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 466)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 472):
    
    # Assigning a Num to a Name (line 472):
    float_275112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, 29), 'float')
    # Assigning a type to the variable 'big_O_constant' (line 472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 472, 12), 'big_O_constant', float_275112)
    # SSA join for if statement (line 466)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 464)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'mode' (line 473)
    mode_275113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 9), 'mode')
    str_275114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 17), 'str', 'valid')
    # Applying the binary operator '==' (line 473)
    result_eq_275115 = python_operator(stypy.reporting.localization.Localization(__file__, 473, 9), '==', mode_275113, str_275114)
    
    # Testing the type of an if condition (line 473)
    if_condition_275116 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 473, 9), result_eq_275115)
    # Assigning a type to the variable 'if_condition_275116' (line 473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 9), 'if_condition_275116', if_condition_275116)
    # SSA begins for if statement (line 473)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 474):
    
    # Assigning a ListComp to a Name (line 474):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 474)
    # Processing the call arguments (line 474)
    # Getting the type of 'x' (line 474)
    x_275123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 47), 'x', False)
    # Obtaining the member 'shape' of a type (line 474)
    shape_275124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 47), x_275123, 'shape')
    # Getting the type of 'h' (line 474)
    h_275125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 56), 'h', False)
    # Obtaining the member 'shape' of a type (line 474)
    shape_275126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 56), h_275125, 'shape')
    # Processing the call keyword arguments (line 474)
    kwargs_275127 = {}
    # Getting the type of 'zip' (line 474)
    zip_275122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 43), 'zip', False)
    # Calling zip(args, kwargs) (line 474)
    zip_call_result_275128 = invoke(stypy.reporting.localization.Localization(__file__, 474, 43), zip_275122, *[shape_275124, shape_275126], **kwargs_275127)
    
    comprehension_275129 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 474, 21), zip_call_result_275128)
    # Assigning a type to the variable 'n' (line 474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 21), 'n', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 474, 21), comprehension_275129))
    # Assigning a type to the variable 'k' (line 474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 21), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 474, 21), comprehension_275129))
    # Getting the type of 'n' (line 474)
    n_275117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 21), 'n')
    # Getting the type of 'k' (line 474)
    k_275118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 25), 'k')
    # Applying the binary operator '-' (line 474)
    result_sub_275119 = python_operator(stypy.reporting.localization.Localization(__file__, 474, 21), '-', n_275117, k_275118)
    
    int_275120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 29), 'int')
    # Applying the binary operator '+' (line 474)
    result_add_275121 = python_operator(stypy.reporting.localization.Localization(__file__, 474, 27), '+', result_sub_275119, int_275120)
    
    list_275130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 474, 21), list_275130, result_add_275121)
    # Assigning a type to the variable 'out_shape' (line 474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'out_shape', list_275130)
    
    # Assigning a IfExp to a Name (line 475):
    
    # Assigning a IfExp to a Name (line 475):
    
    
    # Getting the type of 'x' (line 475)
    x_275131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 43), 'x')
    # Obtaining the member 'ndim' of a type (line 475)
    ndim_275132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 43), x_275131, 'ndim')
    int_275133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 53), 'int')
    # Applying the binary operator '==' (line 475)
    result_eq_275134 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 43), '==', ndim_275132, int_275133)
    
    # Testing the type of an if expression (line 475)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 475, 25), result_eq_275134)
    # SSA begins for if expression (line 475)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    float_275135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 25), 'float')
    # SSA branch for the else part of an if expression (line 475)
    module_type_store.open_ssa_branch('if expression else')
    float_275136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 60), 'float')
    # SSA join for if expression (line 475)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_275137 = union_type.UnionType.add(float_275135, float_275136)
    
    # Assigning a type to the variable 'big_O_constant' (line 475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'big_O_constant', if_exp_275137)
    # SSA branch for the else part of an if statement (line 473)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 477)
    # Processing the call arguments (line 477)
    str_275139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 25), 'str', 'mode is invalid')
    # Processing the call keyword arguments (line 477)
    kwargs_275140 = {}
    # Getting the type of 'ValueError' (line 477)
    ValueError_275138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 477)
    ValueError_call_result_275141 = invoke(stypy.reporting.localization.Localization(__file__, 477, 14), ValueError_275138, *[str_275139], **kwargs_275140)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 477, 8), ValueError_call_result_275141, 'raise parameter', BaseException)
    # SSA join for if statement (line 473)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 464)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 461)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 481):
    
    # Assigning a BinOp to a Name (line 481):
    # Getting the type of 'x' (line 481)
    x_275142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 19), 'x')
    # Obtaining the member 'size' of a type (line 481)
    size_275143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 19), x_275142, 'size')
    # Getting the type of 'h' (line 481)
    h_275144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 28), 'h')
    # Obtaining the member 'size' of a type (line 481)
    size_275145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 28), h_275144, 'size')
    # Applying the binary operator '*' (line 481)
    result_mul_275146 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 19), '*', size_275143, size_275145)
    
    
    # Call to _prod(...): (line 481)
    # Processing the call arguments (line 481)
    # Getting the type of 'out_shape' (line 481)
    out_shape_275148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 43), 'out_shape', False)
    # Processing the call keyword arguments (line 481)
    kwargs_275149 = {}
    # Getting the type of '_prod' (line 481)
    _prod_275147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 37), '_prod', False)
    # Calling _prod(args, kwargs) (line 481)
    _prod_call_result_275150 = invoke(stypy.reporting.localization.Localization(__file__, 481, 37), _prod_275147, *[out_shape_275148], **kwargs_275149)
    
    # Applying the binary operator '*' (line 481)
    result_mul_275151 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 35), '*', result_mul_275146, _prod_call_result_275150)
    
    # Assigning a type to the variable 'direct_time' (line 481)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 4), 'direct_time', result_mul_275151)
    
    # Assigning a Call to a Name (line 482):
    
    # Assigning a Call to a Name (line 482):
    
    # Call to sum(...): (line 482)
    # Processing the call arguments (line 482)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 482, 19, True)
    # Calculating comprehension expression
    # Getting the type of 'x' (line 482)
    x_275160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 45), 'x', False)
    # Obtaining the member 'shape' of a type (line 482)
    shape_275161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 45), x_275160, 'shape')
    # Getting the type of 'h' (line 482)
    h_275162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 55), 'h', False)
    # Obtaining the member 'shape' of a type (line 482)
    shape_275163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 55), h_275162, 'shape')
    # Applying the binary operator '+' (line 482)
    result_add_275164 = python_operator(stypy.reporting.localization.Localization(__file__, 482, 45), '+', shape_275161, shape_275163)
    
    
    # Call to tuple(...): (line 483)
    # Processing the call arguments (line 483)
    # Getting the type of 'out_shape' (line 483)
    out_shape_275166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 51), 'out_shape', False)
    # Processing the call keyword arguments (line 483)
    kwargs_275167 = {}
    # Getting the type of 'tuple' (line 483)
    tuple_275165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 45), 'tuple', False)
    # Calling tuple(args, kwargs) (line 483)
    tuple_call_result_275168 = invoke(stypy.reporting.localization.Localization(__file__, 483, 45), tuple_275165, *[out_shape_275166], **kwargs_275167)
    
    # Applying the binary operator '+' (line 482)
    result_add_275169 = python_operator(stypy.reporting.localization.Localization(__file__, 482, 63), '+', result_add_275164, tuple_call_result_275168)
    
    comprehension_275170 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 482, 19), result_add_275169)
    # Assigning a type to the variable 'n' (line 482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 19), 'n', comprehension_275170)
    # Getting the type of 'n' (line 482)
    n_275153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 19), 'n', False)
    
    # Call to log(...): (line 482)
    # Processing the call arguments (line 482)
    # Getting the type of 'n' (line 482)
    n_275156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 32), 'n', False)
    # Processing the call keyword arguments (line 482)
    kwargs_275157 = {}
    # Getting the type of 'math' (line 482)
    math_275154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 23), 'math', False)
    # Obtaining the member 'log' of a type (line 482)
    log_275155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 23), math_275154, 'log')
    # Calling log(args, kwargs) (line 482)
    log_call_result_275158 = invoke(stypy.reporting.localization.Localization(__file__, 482, 23), log_275155, *[n_275156], **kwargs_275157)
    
    # Applying the binary operator '*' (line 482)
    result_mul_275159 = python_operator(stypy.reporting.localization.Localization(__file__, 482, 19), '*', n_275153, log_call_result_275158)
    
    list_275171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 19), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 482, 19), list_275171, result_mul_275159)
    # Processing the call keyword arguments (line 482)
    kwargs_275172 = {}
    # Getting the type of 'sum' (line 482)
    sum_275152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 15), 'sum', False)
    # Calling sum(args, kwargs) (line 482)
    sum_call_result_275173 = invoke(stypy.reporting.localization.Localization(__file__, 482, 15), sum_275152, *[list_275171], **kwargs_275172)
    
    # Assigning a type to the variable 'fft_time' (line 482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 4), 'fft_time', sum_call_result_275173)
    
    # Getting the type of 'big_O_constant' (line 484)
    big_O_constant_275174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 11), 'big_O_constant')
    # Getting the type of 'fft_time' (line 484)
    fft_time_275175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 28), 'fft_time')
    # Applying the binary operator '*' (line 484)
    result_mul_275176 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 11), '*', big_O_constant_275174, fft_time_275175)
    
    # Getting the type of 'direct_time' (line 484)
    direct_time_275177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 39), 'direct_time')
    # Applying the binary operator '<' (line 484)
    result_lt_275178 = python_operator(stypy.reporting.localization.Localization(__file__, 484, 11), '<', result_mul_275176, direct_time_275177)
    
    # Assigning a type to the variable 'stypy_return_type' (line 484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 4), 'stypy_return_type', result_lt_275178)
    
    # ################# End of '_fftconv_faster(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_fftconv_faster' in the type store
    # Getting the type of 'stypy_return_type' (line 451)
    stypy_return_type_275179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275179)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_fftconv_faster'
    return stypy_return_type_275179

# Assigning a type to the variable '_fftconv_faster' (line 451)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 451, 0), '_fftconv_faster', _fftconv_faster)

@norecursion
def _reverse_and_conj(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_reverse_and_conj'
    module_type_store = module_type_store.open_function_context('_reverse_and_conj', 487, 0, False)
    
    # Passed parameters checking function
    _reverse_and_conj.stypy_localization = localization
    _reverse_and_conj.stypy_type_of_self = None
    _reverse_and_conj.stypy_type_store = module_type_store
    _reverse_and_conj.stypy_function_name = '_reverse_and_conj'
    _reverse_and_conj.stypy_param_names_list = ['x']
    _reverse_and_conj.stypy_varargs_param_name = None
    _reverse_and_conj.stypy_kwargs_param_name = None
    _reverse_and_conj.stypy_call_defaults = defaults
    _reverse_and_conj.stypy_call_varargs = varargs
    _reverse_and_conj.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_reverse_and_conj', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_reverse_and_conj', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_reverse_and_conj(...)' code ##################

    str_275180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, (-1)), 'str', '\n    Reverse array `x` in all dimensions and perform the complex conjugate\n    ')
    
    # Assigning a BinOp to a Name (line 491):
    
    # Assigning a BinOp to a Name (line 491):
    
    # Obtaining an instance of the builtin type 'list' (line 491)
    list_275181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 491)
    # Adding element type (line 491)
    
    # Call to slice(...): (line 491)
    # Processing the call arguments (line 491)
    # Getting the type of 'None' (line 491)
    None_275183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 21), 'None', False)
    # Getting the type of 'None' (line 491)
    None_275184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 27), 'None', False)
    int_275185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 33), 'int')
    # Processing the call keyword arguments (line 491)
    kwargs_275186 = {}
    # Getting the type of 'slice' (line 491)
    slice_275182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 15), 'slice', False)
    # Calling slice(args, kwargs) (line 491)
    slice_call_result_275187 = invoke(stypy.reporting.localization.Localization(__file__, 491, 15), slice_275182, *[None_275183, None_275184, int_275185], **kwargs_275186)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 491, 14), list_275181, slice_call_result_275187)
    
    # Getting the type of 'x' (line 491)
    x_275188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 40), 'x')
    # Obtaining the member 'ndim' of a type (line 491)
    ndim_275189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 40), x_275188, 'ndim')
    # Applying the binary operator '*' (line 491)
    result_mul_275190 = python_operator(stypy.reporting.localization.Localization(__file__, 491, 14), '*', list_275181, ndim_275189)
    
    # Assigning a type to the variable 'reverse' (line 491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 4), 'reverse', result_mul_275190)
    
    # Call to conj(...): (line 492)
    # Processing the call keyword arguments (line 492)
    kwargs_275196 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'reverse' (line 492)
    reverse_275191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 13), 'reverse', False)
    # Getting the type of 'x' (line 492)
    x_275192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 11), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 492)
    getitem___275193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 11), x_275192, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 492)
    subscript_call_result_275194 = invoke(stypy.reporting.localization.Localization(__file__, 492, 11), getitem___275193, reverse_275191)
    
    # Obtaining the member 'conj' of a type (line 492)
    conj_275195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 11), subscript_call_result_275194, 'conj')
    # Calling conj(args, kwargs) (line 492)
    conj_call_result_275197 = invoke(stypy.reporting.localization.Localization(__file__, 492, 11), conj_275195, *[], **kwargs_275196)
    
    # Assigning a type to the variable 'stypy_return_type' (line 492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 4), 'stypy_return_type', conj_call_result_275197)
    
    # ################# End of '_reverse_and_conj(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_reverse_and_conj' in the type store
    # Getting the type of 'stypy_return_type' (line 487)
    stypy_return_type_275198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275198)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_reverse_and_conj'
    return stypy_return_type_275198

# Assigning a type to the variable '_reverse_and_conj' (line 487)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 0), '_reverse_and_conj', _reverse_and_conj)

@norecursion
def _np_conv_ok(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_np_conv_ok'
    module_type_store = module_type_store.open_function_context('_np_conv_ok', 495, 0, False)
    
    # Passed parameters checking function
    _np_conv_ok.stypy_localization = localization
    _np_conv_ok.stypy_type_of_self = None
    _np_conv_ok.stypy_type_store = module_type_store
    _np_conv_ok.stypy_function_name = '_np_conv_ok'
    _np_conv_ok.stypy_param_names_list = ['volume', 'kernel', 'mode']
    _np_conv_ok.stypy_varargs_param_name = None
    _np_conv_ok.stypy_kwargs_param_name = None
    _np_conv_ok.stypy_call_defaults = defaults
    _np_conv_ok.stypy_call_varargs = varargs
    _np_conv_ok.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_np_conv_ok', ['volume', 'kernel', 'mode'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_np_conv_ok', localization, ['volume', 'kernel', 'mode'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_np_conv_ok(...)' code ##################

    str_275199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, (-1)), 'str', "\n    See if numpy supports convolution of `volume` and `kernel` (i.e. both are\n    1D ndarrays and of the appropriate shape).  Numpy's 'same' mode uses the\n    size of the larger input, while Scipy's uses the size of the first input.\n    ")
    
    # Assigning a Compare to a Name (line 501):
    
    # Assigning a Compare to a Name (line 501):
    
    # Getting the type of 'volume' (line 501)
    volume_275200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 17), 'volume')
    # Obtaining the member 'ndim' of a type (line 501)
    ndim_275201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 17), volume_275200, 'ndim')
    # Getting the type of 'kernel' (line 501)
    kernel_275202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 32), 'kernel')
    # Obtaining the member 'ndim' of a type (line 501)
    ndim_275203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 501, 32), kernel_275202, 'ndim')
    # Applying the binary operator '==' (line 501)
    result_eq_275204 = python_operator(stypy.reporting.localization.Localization(__file__, 501, 17), '==', ndim_275201, ndim_275203)
    int_275205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 501, 47), 'int')
    # Applying the binary operator '==' (line 501)
    result_eq_275206 = python_operator(stypy.reporting.localization.Localization(__file__, 501, 17), '==', ndim_275203, int_275205)
    # Applying the binary operator '&' (line 501)
    result_and__275207 = python_operator(stypy.reporting.localization.Localization(__file__, 501, 17), '&', result_eq_275204, result_eq_275206)
    
    # Assigning a type to the variable 'np_conv_ok' (line 501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 4), 'np_conv_ok', result_and__275207)
    
    # Evaluating a boolean operation
    # Getting the type of 'np_conv_ok' (line 502)
    np_conv_ok_275208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 11), 'np_conv_ok')
    
    # Evaluating a boolean operation
    
    # Getting the type of 'volume' (line 502)
    volume_275209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 27), 'volume')
    # Obtaining the member 'size' of a type (line 502)
    size_275210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 27), volume_275209, 'size')
    # Getting the type of 'kernel' (line 502)
    kernel_275211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 42), 'kernel')
    # Obtaining the member 'size' of a type (line 502)
    size_275212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 42), kernel_275211, 'size')
    # Applying the binary operator '>=' (line 502)
    result_ge_275213 = python_operator(stypy.reporting.localization.Localization(__file__, 502, 27), '>=', size_275210, size_275212)
    
    
    # Getting the type of 'mode' (line 502)
    mode_275214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 57), 'mode')
    str_275215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 65), 'str', 'same')
    # Applying the binary operator '!=' (line 502)
    result_ne_275216 = python_operator(stypy.reporting.localization.Localization(__file__, 502, 57), '!=', mode_275214, str_275215)
    
    # Applying the binary operator 'or' (line 502)
    result_or_keyword_275217 = python_operator(stypy.reporting.localization.Localization(__file__, 502, 27), 'or', result_ge_275213, result_ne_275216)
    
    # Applying the binary operator 'and' (line 502)
    result_and_keyword_275218 = python_operator(stypy.reporting.localization.Localization(__file__, 502, 11), 'and', np_conv_ok_275208, result_or_keyword_275217)
    
    # Assigning a type to the variable 'stypy_return_type' (line 502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 4), 'stypy_return_type', result_and_keyword_275218)
    
    # ################# End of '_np_conv_ok(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_np_conv_ok' in the type store
    # Getting the type of 'stypy_return_type' (line 495)
    stypy_return_type_275219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275219)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_np_conv_ok'
    return stypy_return_type_275219

# Assigning a type to the variable '_np_conv_ok' (line 495)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 0), '_np_conv_ok', _np_conv_ok)

@norecursion
def _timeit_fast(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_275220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 22), 'str', 'pass')
    str_275221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 36), 'str', 'pass')
    int_275222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 51), 'int')
    defaults = [str_275220, str_275221, int_275222]
    # Create a new context for function '_timeit_fast'
    module_type_store = module_type_store.open_function_context('_timeit_fast', 505, 0, False)
    
    # Passed parameters checking function
    _timeit_fast.stypy_localization = localization
    _timeit_fast.stypy_type_of_self = None
    _timeit_fast.stypy_type_store = module_type_store
    _timeit_fast.stypy_function_name = '_timeit_fast'
    _timeit_fast.stypy_param_names_list = ['stmt', 'setup', 'repeat']
    _timeit_fast.stypy_varargs_param_name = None
    _timeit_fast.stypy_kwargs_param_name = None
    _timeit_fast.stypy_call_defaults = defaults
    _timeit_fast.stypy_call_varargs = varargs
    _timeit_fast.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_timeit_fast', ['stmt', 'setup', 'repeat'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_timeit_fast', localization, ['stmt', 'setup', 'repeat'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_timeit_fast(...)' code ##################

    str_275223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, (-1)), 'str', "\n    Returns the time the statement/function took, in seconds.\n\n    Faster, less precise version of IPython's timeit. `stmt` can be a statement\n    written as a string or a callable.\n\n    Will do only 1 loop (like IPython's timeit) with no repetitions\n    (unlike IPython) for very slow functions.  For fast functions, only does\n    enough loops to take 5 ms, which seems to produce similar results (on\n    Windows at least), and avoids doing an extraneous cycle that isn't\n    measured.\n\n    ")
    
    # Assigning a Call to a Name (line 519):
    
    # Assigning a Call to a Name (line 519):
    
    # Call to Timer(...): (line 519)
    # Processing the call arguments (line 519)
    # Getting the type of 'stmt' (line 519)
    stmt_275226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 25), 'stmt', False)
    # Getting the type of 'setup' (line 519)
    setup_275227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 31), 'setup', False)
    # Processing the call keyword arguments (line 519)
    kwargs_275228 = {}
    # Getting the type of 'timeit' (line 519)
    timeit_275224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'timeit', False)
    # Obtaining the member 'Timer' of a type (line 519)
    Timer_275225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 12), timeit_275224, 'Timer')
    # Calling Timer(args, kwargs) (line 519)
    Timer_call_result_275229 = invoke(stypy.reporting.localization.Localization(__file__, 519, 12), Timer_275225, *[stmt_275226, setup_275227], **kwargs_275228)
    
    # Assigning a type to the variable 'timer' (line 519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 4), 'timer', Timer_call_result_275229)
    
    # Assigning a Num to a Name (line 522):
    
    # Assigning a Num to a Name (line 522):
    int_275230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 522, 8), 'int')
    # Assigning a type to the variable 'x' (line 522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 4), 'x', int_275230)
    
    
    # Call to range(...): (line 523)
    # Processing the call arguments (line 523)
    int_275232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 19), 'int')
    int_275233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 22), 'int')
    # Processing the call keyword arguments (line 523)
    kwargs_275234 = {}
    # Getting the type of 'range' (line 523)
    range_275231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 13), 'range', False)
    # Calling range(args, kwargs) (line 523)
    range_call_result_275235 = invoke(stypy.reporting.localization.Localization(__file__, 523, 13), range_275231, *[int_275232, int_275233], **kwargs_275234)
    
    # Testing the type of a for loop iterable (line 523)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 523, 4), range_call_result_275235)
    # Getting the type of the for loop variable (line 523)
    for_loop_var_275236 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 523, 4), range_call_result_275235)
    # Assigning a type to the variable 'p' (line 523)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 4), 'p', for_loop_var_275236)
    # SSA begins for a for statement (line 523)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 524):
    
    # Assigning a BinOp to a Name (line 524):
    int_275237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 17), 'int')
    # Getting the type of 'p' (line 524)
    p_275238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 21), 'p')
    # Applying the binary operator '**' (line 524)
    result_pow_275239 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 17), '**', int_275237, p_275238)
    
    # Assigning a type to the variable 'number' (line 524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 8), 'number', result_pow_275239)
    
    # Assigning a Call to a Name (line 525):
    
    # Assigning a Call to a Name (line 525):
    
    # Call to timeit(...): (line 525)
    # Processing the call arguments (line 525)
    # Getting the type of 'number' (line 525)
    number_275242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 25), 'number', False)
    # Processing the call keyword arguments (line 525)
    kwargs_275243 = {}
    # Getting the type of 'timer' (line 525)
    timer_275240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 12), 'timer', False)
    # Obtaining the member 'timeit' of a type (line 525)
    timeit_275241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 12), timer_275240, 'timeit')
    # Calling timeit(args, kwargs) (line 525)
    timeit_call_result_275244 = invoke(stypy.reporting.localization.Localization(__file__, 525, 12), timeit_275241, *[number_275242], **kwargs_275243)
    
    # Assigning a type to the variable 'x' (line 525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 8), 'x', timeit_call_result_275244)
    
    
    # Getting the type of 'x' (line 526)
    x_275245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 11), 'x')
    float_275246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 16), 'float')
    int_275247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 23), 'int')
    # Applying the binary operator 'div' (line 526)
    result_div_275248 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 16), 'div', float_275246, int_275247)
    
    # Applying the binary operator '>=' (line 526)
    result_ge_275249 = python_operator(stypy.reporting.localization.Localization(__file__, 526, 11), '>=', x_275245, result_div_275248)
    
    # Testing the type of an if condition (line 526)
    if_condition_275250 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 526, 8), result_ge_275249)
    # Assigning a type to the variable 'if_condition_275250' (line 526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 8), 'if_condition_275250', if_condition_275250)
    # SSA begins for if statement (line 526)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 526)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'x' (line 528)
    x_275251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 7), 'x')
    int_275252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 11), 'int')
    # Applying the binary operator '>' (line 528)
    result_gt_275253 = python_operator(stypy.reporting.localization.Localization(__file__, 528, 7), '>', x_275251, int_275252)
    
    # Testing the type of an if condition (line 528)
    if_condition_275254 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 528, 4), result_gt_275253)
    # Assigning a type to the variable 'if_condition_275254' (line 528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 4), 'if_condition_275254', if_condition_275254)
    # SSA begins for if statement (line 528)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 530):
    
    # Assigning a Name to a Name (line 530):
    # Getting the type of 'x' (line 530)
    x_275255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 15), 'x')
    # Assigning a type to the variable 'best' (line 530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'best', x_275255)
    # SSA branch for the else part of an if statement (line 528)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'number' (line 532)
    number_275256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 'number')
    int_275257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 18), 'int')
    # Applying the binary operator '*=' (line 532)
    result_imul_275258 = python_operator(stypy.reporting.localization.Localization(__file__, 532, 8), '*=', number_275256, int_275257)
    # Assigning a type to the variable 'number' (line 532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 'number', result_imul_275258)
    
    
    # Assigning a Call to a Name (line 533):
    
    # Assigning a Call to a Name (line 533):
    
    # Call to repeat(...): (line 533)
    # Processing the call arguments (line 533)
    # Getting the type of 'repeat' (line 533)
    repeat_275261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 25), 'repeat', False)
    # Getting the type of 'number' (line 533)
    number_275262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 33), 'number', False)
    # Processing the call keyword arguments (line 533)
    kwargs_275263 = {}
    # Getting the type of 'timer' (line 533)
    timer_275259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 12), 'timer', False)
    # Obtaining the member 'repeat' of a type (line 533)
    repeat_275260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 12), timer_275259, 'repeat')
    # Calling repeat(args, kwargs) (line 533)
    repeat_call_result_275264 = invoke(stypy.reporting.localization.Localization(__file__, 533, 12), repeat_275260, *[repeat_275261, number_275262], **kwargs_275263)
    
    # Assigning a type to the variable 'r' (line 533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 8), 'r', repeat_call_result_275264)
    
    # Assigning a Call to a Name (line 534):
    
    # Assigning a Call to a Name (line 534):
    
    # Call to min(...): (line 534)
    # Processing the call arguments (line 534)
    # Getting the type of 'r' (line 534)
    r_275266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 19), 'r', False)
    # Processing the call keyword arguments (line 534)
    kwargs_275267 = {}
    # Getting the type of 'min' (line 534)
    min_275265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 15), 'min', False)
    # Calling min(args, kwargs) (line 534)
    min_call_result_275268 = invoke(stypy.reporting.localization.Localization(__file__, 534, 15), min_275265, *[r_275266], **kwargs_275267)
    
    # Assigning a type to the variable 'best' (line 534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'best', min_call_result_275268)
    # SSA join for if statement (line 528)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 536):
    
    # Assigning a BinOp to a Name (line 536):
    # Getting the type of 'best' (line 536)
    best_275269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 10), 'best')
    # Getting the type of 'number' (line 536)
    number_275270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 17), 'number')
    # Applying the binary operator 'div' (line 536)
    result_div_275271 = python_operator(stypy.reporting.localization.Localization(__file__, 536, 10), 'div', best_275269, number_275270)
    
    # Assigning a type to the variable 'sec' (line 536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 4), 'sec', result_div_275271)
    # Getting the type of 'sec' (line 537)
    sec_275272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 11), 'sec')
    # Assigning a type to the variable 'stypy_return_type' (line 537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'stypy_return_type', sec_275272)
    
    # ################# End of '_timeit_fast(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_timeit_fast' in the type store
    # Getting the type of 'stypy_return_type' (line 505)
    stypy_return_type_275273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275273)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_timeit_fast'
    return stypy_return_type_275273

# Assigning a type to the variable '_timeit_fast' (line 505)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 0), '_timeit_fast', _timeit_fast)

@norecursion
def choose_conv_method(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_275274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 540, 38), 'str', 'full')
    # Getting the type of 'False' (line 540)
    False_275275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 54), 'False')
    defaults = [str_275274, False_275275]
    # Create a new context for function 'choose_conv_method'
    module_type_store = module_type_store.open_function_context('choose_conv_method', 540, 0, False)
    
    # Passed parameters checking function
    choose_conv_method.stypy_localization = localization
    choose_conv_method.stypy_type_of_self = None
    choose_conv_method.stypy_type_store = module_type_store
    choose_conv_method.stypy_function_name = 'choose_conv_method'
    choose_conv_method.stypy_param_names_list = ['in1', 'in2', 'mode', 'measure']
    choose_conv_method.stypy_varargs_param_name = None
    choose_conv_method.stypy_kwargs_param_name = None
    choose_conv_method.stypy_call_defaults = defaults
    choose_conv_method.stypy_call_varargs = varargs
    choose_conv_method.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'choose_conv_method', ['in1', 'in2', 'mode', 'measure'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'choose_conv_method', localization, ['in1', 'in2', 'mode', 'measure'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'choose_conv_method(...)' code ##################

    str_275276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, (-1)), 'str', "\n    Find the fastest convolution/correlation method.\n\n    This primarily exists to be called during the ``method='auto'`` option in\n    `convolve` and `correlate`, but can also be used when performing many\n    convolutions of the same input shapes and dtypes, determining\n    which method to use for all of them, either to avoid the overhead of the\n    'auto' option or to use accurate real-world measurements.\n\n    Parameters\n    ----------\n    in1 : array_like\n        The first argument passed into the convolution function.\n    in2 : array_like\n        The second argument passed into the convolution function.\n    mode : str {'full', 'valid', 'same'}, optional\n        A string indicating the size of the output:\n\n        ``full``\n           The output is the full discrete linear convolution\n           of the inputs. (Default)\n        ``valid``\n           The output consists only of those elements that do not\n           rely on the zero-padding.\n        ``same``\n           The output is the same size as `in1`, centered\n           with respect to the 'full' output.\n    measure : bool, optional\n        If True, run and time the convolution of `in1` and `in2` with both\n        methods and return the fastest. If False (default), predict the fastest\n        method using precomputed values.\n\n    Returns\n    -------\n    method : str\n        A string indicating which convolution method is fastest, either\n        'direct' or 'fft'\n    times : dict, optional\n        A dictionary containing the times (in seconds) needed for each method.\n        This value is only returned if ``measure=True``.\n\n    See Also\n    --------\n    convolve\n    correlate\n\n    Notes\n    -----\n    For large n, ``measure=False`` is accurate and can quickly determine the\n    fastest method to perform the convolution.  However, this is not as\n    accurate for small n (when any dimension in the input or output is small).\n\n    In practice, we found that this function estimates the faster method up to\n    a multiplicative factor of 5 (i.e., the estimated method is *at most* 5\n    times slower than the fastest method). The estimation values were tuned on\n    an early 2015 MacBook Pro with 8GB RAM but we found that the prediction\n    held *fairly* accurately across different machines.\n\n    If ``measure=True``, time the convolutions. Because this function uses\n    `fftconvolve`, an error will be thrown if it does not support the inputs.\n    There are cases when `fftconvolve` supports the inputs but this function\n    returns `direct` (e.g., to protect against floating point integer\n    precision).\n\n    .. versionadded:: 0.19\n\n    Examples\n    --------\n    Estimate the fastest method for a given input:\n\n    >>> from scipy import signal\n    >>> a = np.random.randn(1000)\n    >>> b = np.random.randn(1000000)\n    >>> method = signal.choose_conv_method(a, b, mode='same')\n    >>> method\n    'fft'\n\n    This can then be applied to other arrays of the same dtype and shape:\n\n    >>> c = np.random.randn(1000)\n    >>> d = np.random.randn(1000000)\n    >>> # `method` works with correlate and convolve\n    >>> corr1 = signal.correlate(a, b, mode='same', method=method)\n    >>> corr2 = signal.correlate(c, d, mode='same', method=method)\n    >>> conv1 = signal.convolve(a, b, mode='same', method=method)\n    >>> conv2 = signal.convolve(c, d, mode='same', method=method)\n\n    ")
    
    # Assigning a Call to a Name (line 629):
    
    # Assigning a Call to a Name (line 629):
    
    # Call to asarray(...): (line 629)
    # Processing the call arguments (line 629)
    # Getting the type of 'in1' (line 629)
    in1_275278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 21), 'in1', False)
    # Processing the call keyword arguments (line 629)
    kwargs_275279 = {}
    # Getting the type of 'asarray' (line 629)
    asarray_275277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 13), 'asarray', False)
    # Calling asarray(args, kwargs) (line 629)
    asarray_call_result_275280 = invoke(stypy.reporting.localization.Localization(__file__, 629, 13), asarray_275277, *[in1_275278], **kwargs_275279)
    
    # Assigning a type to the variable 'volume' (line 629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 4), 'volume', asarray_call_result_275280)
    
    # Assigning a Call to a Name (line 630):
    
    # Assigning a Call to a Name (line 630):
    
    # Call to asarray(...): (line 630)
    # Processing the call arguments (line 630)
    # Getting the type of 'in2' (line 630)
    in2_275282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 21), 'in2', False)
    # Processing the call keyword arguments (line 630)
    kwargs_275283 = {}
    # Getting the type of 'asarray' (line 630)
    asarray_275281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 13), 'asarray', False)
    # Calling asarray(args, kwargs) (line 630)
    asarray_call_result_275284 = invoke(stypy.reporting.localization.Localization(__file__, 630, 13), asarray_275281, *[in2_275282], **kwargs_275283)
    
    # Assigning a type to the variable 'kernel' (line 630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 4), 'kernel', asarray_call_result_275284)
    
    # Getting the type of 'measure' (line 632)
    measure_275285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 7), 'measure')
    # Testing the type of an if condition (line 632)
    if_condition_275286 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 632, 4), measure_275285)
    # Assigning a type to the variable 'if_condition_275286' (line 632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 632, 4), 'if_condition_275286', if_condition_275286)
    # SSA begins for if statement (line 632)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Dict to a Name (line 633):
    
    # Assigning a Dict to a Name (line 633):
    
    # Obtaining an instance of the builtin type 'dict' (line 633)
    dict_275287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 633, 16), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 633)
    
    # Assigning a type to the variable 'times' (line 633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 8), 'times', dict_275287)
    
    
    # Obtaining an instance of the builtin type 'list' (line 634)
    list_275288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 634)
    # Adding element type (line 634)
    str_275289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 23), 'str', 'fft')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 634, 22), list_275288, str_275289)
    # Adding element type (line 634)
    str_275290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 30), 'str', 'direct')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 634, 22), list_275288, str_275290)
    
    # Testing the type of a for loop iterable (line 634)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 634, 8), list_275288)
    # Getting the type of the for loop variable (line 634)
    for_loop_var_275291 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 634, 8), list_275288)
    # Assigning a type to the variable 'method' (line 634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'method', for_loop_var_275291)
    # SSA begins for a for statement (line 634)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 635):
    
    # Assigning a Call to a Subscript (line 635):
    
    # Call to _timeit_fast(...): (line 635)
    # Processing the call arguments (line 635)

    @norecursion
    def _stypy_temp_lambda_170(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_170'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_170', 635, 41, True)
        # Passed parameters checking function
        _stypy_temp_lambda_170.stypy_localization = localization
        _stypy_temp_lambda_170.stypy_type_of_self = None
        _stypy_temp_lambda_170.stypy_type_store = module_type_store
        _stypy_temp_lambda_170.stypy_function_name = '_stypy_temp_lambda_170'
        _stypy_temp_lambda_170.stypy_param_names_list = []
        _stypy_temp_lambda_170.stypy_varargs_param_name = None
        _stypy_temp_lambda_170.stypy_kwargs_param_name = None
        _stypy_temp_lambda_170.stypy_call_defaults = defaults
        _stypy_temp_lambda_170.stypy_call_varargs = varargs
        _stypy_temp_lambda_170.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_170', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_170', [], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to convolve(...): (line 635)
        # Processing the call arguments (line 635)
        # Getting the type of 'volume' (line 635)
        volume_275294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 58), 'volume', False)
        # Getting the type of 'kernel' (line 635)
        kernel_275295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 66), 'kernel', False)
        # Processing the call keyword arguments (line 635)
        # Getting the type of 'mode' (line 636)
        mode_275296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 46), 'mode', False)
        keyword_275297 = mode_275296
        # Getting the type of 'method' (line 636)
        method_275298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 59), 'method', False)
        keyword_275299 = method_275298
        kwargs_275300 = {'mode': keyword_275297, 'method': keyword_275299}
        # Getting the type of 'convolve' (line 635)
        convolve_275293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 49), 'convolve', False)
        # Calling convolve(args, kwargs) (line 635)
        convolve_call_result_275301 = invoke(stypy.reporting.localization.Localization(__file__, 635, 49), convolve_275293, *[volume_275294, kernel_275295], **kwargs_275300)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 41), 'stypy_return_type', convolve_call_result_275301)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_170' in the type store
        # Getting the type of 'stypy_return_type' (line 635)
        stypy_return_type_275302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 41), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_275302)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_170'
        return stypy_return_type_275302

    # Assigning a type to the variable '_stypy_temp_lambda_170' (line 635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 41), '_stypy_temp_lambda_170', _stypy_temp_lambda_170)
    # Getting the type of '_stypy_temp_lambda_170' (line 635)
    _stypy_temp_lambda_170_275303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 41), '_stypy_temp_lambda_170')
    # Processing the call keyword arguments (line 635)
    kwargs_275304 = {}
    # Getting the type of '_timeit_fast' (line 635)
    _timeit_fast_275292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 28), '_timeit_fast', False)
    # Calling _timeit_fast(args, kwargs) (line 635)
    _timeit_fast_call_result_275305 = invoke(stypy.reporting.localization.Localization(__file__, 635, 28), _timeit_fast_275292, *[_stypy_temp_lambda_170_275303], **kwargs_275304)
    
    # Getting the type of 'times' (line 635)
    times_275306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 12), 'times')
    # Getting the type of 'method' (line 635)
    method_275307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 18), 'method')
    # Storing an element on a container (line 635)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 635, 12), times_275306, (method_275307, _timeit_fast_call_result_275305))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 638):
    
    # Assigning a IfExp to a Name (line 638):
    
    
    
    # Obtaining the type of the subscript
    str_275308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 39), 'str', 'fft')
    # Getting the type of 'times' (line 638)
    times_275309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 33), 'times')
    # Obtaining the member '__getitem__' of a type (line 638)
    getitem___275310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 33), times_275309, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 638)
    subscript_call_result_275311 = invoke(stypy.reporting.localization.Localization(__file__, 638, 33), getitem___275310, str_275308)
    
    
    # Obtaining the type of the subscript
    str_275312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 54), 'str', 'direct')
    # Getting the type of 'times' (line 638)
    times_275313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 48), 'times')
    # Obtaining the member '__getitem__' of a type (line 638)
    getitem___275314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 48), times_275313, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 638)
    subscript_call_result_275315 = invoke(stypy.reporting.localization.Localization(__file__, 638, 48), getitem___275314, str_275312)
    
    # Applying the binary operator '<' (line 638)
    result_lt_275316 = python_operator(stypy.reporting.localization.Localization(__file__, 638, 33), '<', subscript_call_result_275311, subscript_call_result_275315)
    
    # Testing the type of an if expression (line 638)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 638, 24), result_lt_275316)
    # SSA begins for if expression (line 638)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_275317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 24), 'str', 'fft')
    # SSA branch for the else part of an if expression (line 638)
    module_type_store.open_ssa_branch('if expression else')
    str_275318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, 69), 'str', 'direct')
    # SSA join for if expression (line 638)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_275319 = union_type.UnionType.add(str_275317, str_275318)
    
    # Assigning a type to the variable 'chosen_method' (line 638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 8), 'chosen_method', if_exp_275319)
    
    # Obtaining an instance of the builtin type 'tuple' (line 639)
    tuple_275320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 639)
    # Adding element type (line 639)
    # Getting the type of 'chosen_method' (line 639)
    chosen_method_275321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 15), 'chosen_method')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 15), tuple_275320, chosen_method_275321)
    # Adding element type (line 639)
    # Getting the type of 'times' (line 639)
    times_275322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 30), 'times')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 15), tuple_275320, times_275322)
    
    # Assigning a type to the variable 'stypy_return_type' (line 639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 8), 'stypy_return_type', tuple_275320)
    # SSA join for if statement (line 632)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 642):
    
    # Assigning a IfExp to a Name (line 642):
    
    
    # Getting the type of 'sys' (line 642)
    sys_275323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 36), 'sys')
    # Obtaining the member 'maxsize' of a type (line 642)
    maxsize_275324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 36), sys_275323, 'maxsize')
    int_275325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 50), 'int')
    int_275326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 53), 'int')
    # Applying the binary operator '**' (line 642)
    result_pow_275327 = python_operator(stypy.reporting.localization.Localization(__file__, 642, 50), '**', int_275325, int_275326)
    
    # Applying the binary operator '>' (line 642)
    result_gt_275328 = python_operator(stypy.reporting.localization.Localization(__file__, 642, 36), '>', maxsize_275324, result_pow_275327)
    
    # Testing the type of an if expression (line 642)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 642, 20), result_gt_275328)
    # SSA begins for if expression (line 642)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_275329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 20), 'str', 'complex256')
    # SSA branch for the else part of an if expression (line 642)
    module_type_store.open_ssa_branch('if expression else')
    str_275330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 61), 'str', 'complex192')
    # SSA join for if expression (line 642)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_275331 = union_type.UnionType.add(str_275329, str_275330)
    
    # Assigning a type to the variable 'fftconv_unsup' (line 642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 4), 'fftconv_unsup', if_exp_275331)
    
    
    # Call to hasattr(...): (line 643)
    # Processing the call arguments (line 643)
    # Getting the type of 'np' (line 643)
    np_275333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 15), 'np', False)
    # Getting the type of 'fftconv_unsup' (line 643)
    fftconv_unsup_275334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 19), 'fftconv_unsup', False)
    # Processing the call keyword arguments (line 643)
    kwargs_275335 = {}
    # Getting the type of 'hasattr' (line 643)
    hasattr_275332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 7), 'hasattr', False)
    # Calling hasattr(args, kwargs) (line 643)
    hasattr_call_result_275336 = invoke(stypy.reporting.localization.Localization(__file__, 643, 7), hasattr_275332, *[np_275333, fftconv_unsup_275334], **kwargs_275335)
    
    # Testing the type of an if condition (line 643)
    if_condition_275337 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 643, 4), hasattr_call_result_275336)
    # Assigning a type to the variable 'if_condition_275337' (line 643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 4), 'if_condition_275337', if_condition_275337)
    # SSA begins for if statement (line 643)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'volume' (line 644)
    volume_275338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 11), 'volume')
    # Obtaining the member 'dtype' of a type (line 644)
    dtype_275339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 11), volume_275338, 'dtype')
    # Getting the type of 'fftconv_unsup' (line 644)
    fftconv_unsup_275340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 27), 'fftconv_unsup')
    # Applying the binary operator '==' (line 644)
    result_eq_275341 = python_operator(stypy.reporting.localization.Localization(__file__, 644, 11), '==', dtype_275339, fftconv_unsup_275340)
    
    
    # Getting the type of 'kernel' (line 644)
    kernel_275342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 44), 'kernel')
    # Obtaining the member 'dtype' of a type (line 644)
    dtype_275343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 44), kernel_275342, 'dtype')
    # Getting the type of 'fftconv_unsup' (line 644)
    fftconv_unsup_275344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 60), 'fftconv_unsup')
    # Applying the binary operator '==' (line 644)
    result_eq_275345 = python_operator(stypy.reporting.localization.Localization(__file__, 644, 44), '==', dtype_275343, fftconv_unsup_275344)
    
    # Applying the binary operator 'or' (line 644)
    result_or_keyword_275346 = python_operator(stypy.reporting.localization.Localization(__file__, 644, 11), 'or', result_eq_275341, result_eq_275345)
    
    # Testing the type of an if condition (line 644)
    if_condition_275347 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 644, 8), result_or_keyword_275346)
    # Assigning a type to the variable 'if_condition_275347' (line 644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 8), 'if_condition_275347', if_condition_275347)
    # SSA begins for if statement (line 644)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    str_275348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 19), 'str', 'direct')
    # Assigning a type to the variable 'stypy_return_type' (line 645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 645, 12), 'stypy_return_type', str_275348)
    # SSA join for if statement (line 644)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 643)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 650)
    # Processing the call arguments (line 650)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Obtaining an instance of the builtin type 'list' (line 650)
    list_275357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 54), 'list')
    # Adding type elements to the builtin type 'list' instance (line 650)
    # Adding element type (line 650)
    # Getting the type of 'volume' (line 650)
    volume_275358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 55), 'volume', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 650, 54), list_275357, volume_275358)
    # Adding element type (line 650)
    # Getting the type of 'kernel' (line 650)
    kernel_275359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 63), 'kernel', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 650, 54), list_275357, kernel_275359)
    
    comprehension_275360 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 650, 12), list_275357)
    # Assigning a type to the variable 'x' (line 650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 12), 'x', comprehension_275360)
    
    # Call to _numeric_arrays(...): (line 650)
    # Processing the call arguments (line 650)
    
    # Obtaining an instance of the builtin type 'list' (line 650)
    list_275351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 650)
    # Adding element type (line 650)
    # Getting the type of 'x' (line 650)
    x_275352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 29), 'x', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 650, 28), list_275351, x_275352)
    
    # Processing the call keyword arguments (line 650)
    str_275353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 39), 'str', 'ui')
    keyword_275354 = str_275353
    kwargs_275355 = {'kinds': keyword_275354}
    # Getting the type of '_numeric_arrays' (line 650)
    _numeric_arrays_275350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 12), '_numeric_arrays', False)
    # Calling _numeric_arrays(args, kwargs) (line 650)
    _numeric_arrays_call_result_275356 = invoke(stypy.reporting.localization.Localization(__file__, 650, 12), _numeric_arrays_275350, *[list_275351], **kwargs_275355)
    
    list_275361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 650, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 650, 12), list_275361, _numeric_arrays_call_result_275356)
    # Processing the call keyword arguments (line 650)
    kwargs_275362 = {}
    # Getting the type of 'any' (line 650)
    any_275349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 7), 'any', False)
    # Calling any(args, kwargs) (line 650)
    any_call_result_275363 = invoke(stypy.reporting.localization.Localization(__file__, 650, 7), any_275349, *[list_275361], **kwargs_275362)
    
    # Testing the type of an if condition (line 650)
    if_condition_275364 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 650, 4), any_call_result_275363)
    # Assigning a type to the variable 'if_condition_275364' (line 650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 4), 'if_condition_275364', if_condition_275364)
    # SSA begins for if statement (line 650)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 651):
    
    # Assigning a BinOp to a Name (line 651):
    
    # Call to int(...): (line 651)
    # Processing the call arguments (line 651)
    
    # Call to max(...): (line 651)
    # Processing the call keyword arguments (line 651)
    kwargs_275372 = {}
    
    # Call to abs(...): (line 651)
    # Processing the call arguments (line 651)
    # Getting the type of 'volume' (line 651)
    volume_275368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 31), 'volume', False)
    # Processing the call keyword arguments (line 651)
    kwargs_275369 = {}
    # Getting the type of 'np' (line 651)
    np_275366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 24), 'np', False)
    # Obtaining the member 'abs' of a type (line 651)
    abs_275367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 24), np_275366, 'abs')
    # Calling abs(args, kwargs) (line 651)
    abs_call_result_275370 = invoke(stypy.reporting.localization.Localization(__file__, 651, 24), abs_275367, *[volume_275368], **kwargs_275369)
    
    # Obtaining the member 'max' of a type (line 651)
    max_275371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 24), abs_call_result_275370, 'max')
    # Calling max(args, kwargs) (line 651)
    max_call_result_275373 = invoke(stypy.reporting.localization.Localization(__file__, 651, 24), max_275371, *[], **kwargs_275372)
    
    # Processing the call keyword arguments (line 651)
    kwargs_275374 = {}
    # Getting the type of 'int' (line 651)
    int_275365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 20), 'int', False)
    # Calling int(args, kwargs) (line 651)
    int_call_result_275375 = invoke(stypy.reporting.localization.Localization(__file__, 651, 20), int_275365, *[max_call_result_275373], **kwargs_275374)
    
    
    # Call to int(...): (line 651)
    # Processing the call arguments (line 651)
    
    # Call to max(...): (line 651)
    # Processing the call keyword arguments (line 651)
    kwargs_275383 = {}
    
    # Call to abs(...): (line 651)
    # Processing the call arguments (line 651)
    # Getting the type of 'kernel' (line 651)
    kernel_275379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 59), 'kernel', False)
    # Processing the call keyword arguments (line 651)
    kwargs_275380 = {}
    # Getting the type of 'np' (line 651)
    np_275377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 52), 'np', False)
    # Obtaining the member 'abs' of a type (line 651)
    abs_275378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 52), np_275377, 'abs')
    # Calling abs(args, kwargs) (line 651)
    abs_call_result_275381 = invoke(stypy.reporting.localization.Localization(__file__, 651, 52), abs_275378, *[kernel_275379], **kwargs_275380)
    
    # Obtaining the member 'max' of a type (line 651)
    max_275382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 52), abs_call_result_275381, 'max')
    # Calling max(args, kwargs) (line 651)
    max_call_result_275384 = invoke(stypy.reporting.localization.Localization(__file__, 651, 52), max_275382, *[], **kwargs_275383)
    
    # Processing the call keyword arguments (line 651)
    kwargs_275385 = {}
    # Getting the type of 'int' (line 651)
    int_275376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 48), 'int', False)
    # Calling int(args, kwargs) (line 651)
    int_call_result_275386 = invoke(stypy.reporting.localization.Localization(__file__, 651, 48), int_275376, *[max_call_result_275384], **kwargs_275385)
    
    # Applying the binary operator '*' (line 651)
    result_mul_275387 = python_operator(stypy.reporting.localization.Localization(__file__, 651, 20), '*', int_call_result_275375, int_call_result_275386)
    
    # Assigning a type to the variable 'max_value' (line 651)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 651, 8), 'max_value', result_mul_275387)
    
    # Getting the type of 'max_value' (line 652)
    max_value_275388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'max_value')
    
    # Call to int(...): (line 652)
    # Processing the call arguments (line 652)
    
    # Call to min(...): (line 652)
    # Processing the call arguments (line 652)
    # Getting the type of 'volume' (line 652)
    volume_275391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 29), 'volume', False)
    # Obtaining the member 'size' of a type (line 652)
    size_275392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 29), volume_275391, 'size')
    # Getting the type of 'kernel' (line 652)
    kernel_275393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 42), 'kernel', False)
    # Obtaining the member 'size' of a type (line 652)
    size_275394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 42), kernel_275393, 'size')
    # Processing the call keyword arguments (line 652)
    kwargs_275395 = {}
    # Getting the type of 'min' (line 652)
    min_275390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 25), 'min', False)
    # Calling min(args, kwargs) (line 652)
    min_call_result_275396 = invoke(stypy.reporting.localization.Localization(__file__, 652, 25), min_275390, *[size_275392, size_275394], **kwargs_275395)
    
    # Processing the call keyword arguments (line 652)
    kwargs_275397 = {}
    # Getting the type of 'int' (line 652)
    int_275389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 21), 'int', False)
    # Calling int(args, kwargs) (line 652)
    int_call_result_275398 = invoke(stypy.reporting.localization.Localization(__file__, 652, 21), int_275389, *[min_call_result_275396], **kwargs_275397)
    
    # Applying the binary operator '*=' (line 652)
    result_imul_275399 = python_operator(stypy.reporting.localization.Localization(__file__, 652, 8), '*=', max_value_275388, int_call_result_275398)
    # Assigning a type to the variable 'max_value' (line 652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'max_value', result_imul_275399)
    
    
    
    # Getting the type of 'max_value' (line 653)
    max_value_275400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 11), 'max_value')
    int_275401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 653, 23), 'int')
    
    # Call to finfo(...): (line 653)
    # Processing the call arguments (line 653)
    str_275404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 653, 35), 'str', 'float')
    # Processing the call keyword arguments (line 653)
    kwargs_275405 = {}
    # Getting the type of 'np' (line 653)
    np_275402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 26), 'np', False)
    # Obtaining the member 'finfo' of a type (line 653)
    finfo_275403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 26), np_275402, 'finfo')
    # Calling finfo(args, kwargs) (line 653)
    finfo_call_result_275406 = invoke(stypy.reporting.localization.Localization(__file__, 653, 26), finfo_275403, *[str_275404], **kwargs_275405)
    
    # Obtaining the member 'nmant' of a type (line 653)
    nmant_275407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 26), finfo_call_result_275406, 'nmant')
    # Applying the binary operator '**' (line 653)
    result_pow_275408 = python_operator(stypy.reporting.localization.Localization(__file__, 653, 23), '**', int_275401, nmant_275407)
    
    int_275409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 653, 52), 'int')
    # Applying the binary operator '-' (line 653)
    result_sub_275410 = python_operator(stypy.reporting.localization.Localization(__file__, 653, 23), '-', result_pow_275408, int_275409)
    
    # Applying the binary operator '>' (line 653)
    result_gt_275411 = python_operator(stypy.reporting.localization.Localization(__file__, 653, 11), '>', max_value_275400, result_sub_275410)
    
    # Testing the type of an if condition (line 653)
    if_condition_275412 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 653, 8), result_gt_275411)
    # Assigning a type to the variable 'if_condition_275412' (line 653)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 653, 8), 'if_condition_275412', if_condition_275412)
    # SSA begins for if statement (line 653)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    str_275413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 19), 'str', 'direct')
    # Assigning a type to the variable 'stypy_return_type' (line 654)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 12), 'stypy_return_type', str_275413)
    # SSA join for if statement (line 653)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 650)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to _numeric_arrays(...): (line 656)
    # Processing the call arguments (line 656)
    
    # Obtaining an instance of the builtin type 'list' (line 656)
    list_275415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 656)
    # Adding element type (line 656)
    # Getting the type of 'volume' (line 656)
    volume_275416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 24), 'volume', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 656, 23), list_275415, volume_275416)
    # Adding element type (line 656)
    # Getting the type of 'kernel' (line 656)
    kernel_275417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 32), 'kernel', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 656, 23), list_275415, kernel_275417)
    
    # Processing the call keyword arguments (line 656)
    str_275418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 656, 47), 'str', 'b')
    keyword_275419 = str_275418
    kwargs_275420 = {'kinds': keyword_275419}
    # Getting the type of '_numeric_arrays' (line 656)
    _numeric_arrays_275414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 7), '_numeric_arrays', False)
    # Calling _numeric_arrays(args, kwargs) (line 656)
    _numeric_arrays_call_result_275421 = invoke(stypy.reporting.localization.Localization(__file__, 656, 7), _numeric_arrays_275414, *[list_275415], **kwargs_275420)
    
    # Testing the type of an if condition (line 656)
    if_condition_275422 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 656, 4), _numeric_arrays_call_result_275421)
    # Assigning a type to the variable 'if_condition_275422' (line 656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 4), 'if_condition_275422', if_condition_275422)
    # SSA begins for if statement (line 656)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    str_275423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 15), 'str', 'direct')
    # Assigning a type to the variable 'stypy_return_type' (line 657)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 8), 'stypy_return_type', str_275423)
    # SSA join for if statement (line 656)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to _numeric_arrays(...): (line 659)
    # Processing the call arguments (line 659)
    
    # Obtaining an instance of the builtin type 'list' (line 659)
    list_275425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 659)
    # Adding element type (line 659)
    # Getting the type of 'volume' (line 659)
    volume_275426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 24), 'volume', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 659, 23), list_275425, volume_275426)
    # Adding element type (line 659)
    # Getting the type of 'kernel' (line 659)
    kernel_275427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 32), 'kernel', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 659, 23), list_275425, kernel_275427)
    
    # Processing the call keyword arguments (line 659)
    kwargs_275428 = {}
    # Getting the type of '_numeric_arrays' (line 659)
    _numeric_arrays_275424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 7), '_numeric_arrays', False)
    # Calling _numeric_arrays(args, kwargs) (line 659)
    _numeric_arrays_call_result_275429 = invoke(stypy.reporting.localization.Localization(__file__, 659, 7), _numeric_arrays_275424, *[list_275425], **kwargs_275428)
    
    # Testing the type of an if condition (line 659)
    if_condition_275430 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 659, 4), _numeric_arrays_call_result_275429)
    # Assigning a type to the variable 'if_condition_275430' (line 659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 4), 'if_condition_275430', if_condition_275430)
    # SSA begins for if statement (line 659)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to _fftconv_faster(...): (line 660)
    # Processing the call arguments (line 660)
    # Getting the type of 'volume' (line 660)
    volume_275432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 27), 'volume', False)
    # Getting the type of 'kernel' (line 660)
    kernel_275433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 35), 'kernel', False)
    # Getting the type of 'mode' (line 660)
    mode_275434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 43), 'mode', False)
    # Processing the call keyword arguments (line 660)
    kwargs_275435 = {}
    # Getting the type of '_fftconv_faster' (line 660)
    _fftconv_faster_275431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 11), '_fftconv_faster', False)
    # Calling _fftconv_faster(args, kwargs) (line 660)
    _fftconv_faster_call_result_275436 = invoke(stypy.reporting.localization.Localization(__file__, 660, 11), _fftconv_faster_275431, *[volume_275432, kernel_275433, mode_275434], **kwargs_275435)
    
    # Testing the type of an if condition (line 660)
    if_condition_275437 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 660, 8), _fftconv_faster_call_result_275436)
    # Assigning a type to the variable 'if_condition_275437' (line 660)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 8), 'if_condition_275437', if_condition_275437)
    # SSA begins for if statement (line 660)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    str_275438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, 19), 'str', 'fft')
    # Assigning a type to the variable 'stypy_return_type' (line 661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 12), 'stypy_return_type', str_275438)
    # SSA join for if statement (line 660)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 659)
    module_type_store = module_type_store.join_ssa_context()
    
    str_275439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 11), 'str', 'direct')
    # Assigning a type to the variable 'stypy_return_type' (line 663)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 4), 'stypy_return_type', str_275439)
    
    # ################# End of 'choose_conv_method(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'choose_conv_method' in the type store
    # Getting the type of 'stypy_return_type' (line 540)
    stypy_return_type_275440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275440)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'choose_conv_method'
    return stypy_return_type_275440

# Assigning a type to the variable 'choose_conv_method' (line 540)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 540, 0), 'choose_conv_method', choose_conv_method)

@norecursion
def convolve(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_275441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 28), 'str', 'full')
    str_275442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 43), 'str', 'auto')
    defaults = [str_275441, str_275442]
    # Create a new context for function 'convolve'
    module_type_store = module_type_store.open_function_context('convolve', 666, 0, False)
    
    # Passed parameters checking function
    convolve.stypy_localization = localization
    convolve.stypy_type_of_self = None
    convolve.stypy_type_store = module_type_store
    convolve.stypy_function_name = 'convolve'
    convolve.stypy_param_names_list = ['in1', 'in2', 'mode', 'method']
    convolve.stypy_varargs_param_name = None
    convolve.stypy_kwargs_param_name = None
    convolve.stypy_call_defaults = defaults
    convolve.stypy_call_varargs = varargs
    convolve.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'convolve', ['in1', 'in2', 'mode', 'method'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'convolve', localization, ['in1', 'in2', 'mode', 'method'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'convolve(...)' code ##################

    str_275443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 752, (-1)), 'str', "\n    Convolve two N-dimensional arrays.\n\n    Convolve `in1` and `in2`, with the output size determined by the\n    `mode` argument.\n\n    Parameters\n    ----------\n    in1 : array_like\n        First input.\n    in2 : array_like\n        Second input. Should have the same number of dimensions as `in1`.\n    mode : str {'full', 'valid', 'same'}, optional\n        A string indicating the size of the output:\n\n        ``full``\n           The output is the full discrete linear convolution\n           of the inputs. (Default)\n        ``valid``\n           The output consists only of those elements that do not\n           rely on the zero-padding. In 'valid' mode, either `in1` or `in2`\n           must be at least as large as the other in every dimension.\n        ``same``\n           The output is the same size as `in1`, centered\n           with respect to the 'full' output.\n    method : str {'auto', 'direct', 'fft'}, optional\n        A string indicating which method to use to calculate the convolution.\n\n        ``direct``\n           The convolution is determined directly from sums, the definition of\n           convolution.\n        ``fft``\n           The Fourier Transform is used to perform the convolution by calling\n           `fftconvolve`.\n        ``auto``\n           Automatically chooses direct or Fourier method based on an estimate\n           of which is faster (default).  See Notes for more detail.\n\n           .. versionadded:: 0.19.0\n\n    Returns\n    -------\n    convolve : array\n        An N-dimensional array containing a subset of the discrete linear\n        convolution of `in1` with `in2`.\n\n    See Also\n    --------\n    numpy.polymul : performs polynomial multiplication (same operation, but\n                    also accepts poly1d objects)\n    choose_conv_method : chooses the fastest appropriate convolution method\n    fftconvolve\n\n    Notes\n    -----\n    By default, `convolve` and `correlate` use ``method='auto'``, which calls\n    `choose_conv_method` to choose the fastest method using pre-computed\n    values (`choose_conv_method` can also measure real-world timing with a\n    keyword argument). Because `fftconvolve` relies on floating point numbers,\n    there are certain constraints that may force `method=direct` (more detail\n    in `choose_conv_method` docstring).\n\n    Examples\n    --------\n    Smooth a square pulse using a Hann window:\n\n    >>> from scipy import signal\n    >>> sig = np.repeat([0., 1., 0.], 100)\n    >>> win = signal.hann(50)\n    >>> filtered = signal.convolve(sig, win, mode='same') / sum(win)\n\n    >>> import matplotlib.pyplot as plt\n    >>> fig, (ax_orig, ax_win, ax_filt) = plt.subplots(3, 1, sharex=True)\n    >>> ax_orig.plot(sig)\n    >>> ax_orig.set_title('Original pulse')\n    >>> ax_orig.margins(0, 0.1)\n    >>> ax_win.plot(win)\n    >>> ax_win.set_title('Filter impulse response')\n    >>> ax_win.margins(0, 0.1)\n    >>> ax_filt.plot(filtered)\n    >>> ax_filt.set_title('Filtered signal')\n    >>> ax_filt.margins(0, 0.1)\n    >>> fig.tight_layout()\n    >>> fig.show()\n\n    ")
    
    # Assigning a Call to a Name (line 753):
    
    # Assigning a Call to a Name (line 753):
    
    # Call to asarray(...): (line 753)
    # Processing the call arguments (line 753)
    # Getting the type of 'in1' (line 753)
    in1_275445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 21), 'in1', False)
    # Processing the call keyword arguments (line 753)
    kwargs_275446 = {}
    # Getting the type of 'asarray' (line 753)
    asarray_275444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 13), 'asarray', False)
    # Calling asarray(args, kwargs) (line 753)
    asarray_call_result_275447 = invoke(stypy.reporting.localization.Localization(__file__, 753, 13), asarray_275444, *[in1_275445], **kwargs_275446)
    
    # Assigning a type to the variable 'volume' (line 753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 753, 4), 'volume', asarray_call_result_275447)
    
    # Assigning a Call to a Name (line 754):
    
    # Assigning a Call to a Name (line 754):
    
    # Call to asarray(...): (line 754)
    # Processing the call arguments (line 754)
    # Getting the type of 'in2' (line 754)
    in2_275449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 21), 'in2', False)
    # Processing the call keyword arguments (line 754)
    kwargs_275450 = {}
    # Getting the type of 'asarray' (line 754)
    asarray_275448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 13), 'asarray', False)
    # Calling asarray(args, kwargs) (line 754)
    asarray_call_result_275451 = invoke(stypy.reporting.localization.Localization(__file__, 754, 13), asarray_275448, *[in2_275449], **kwargs_275450)
    
    # Assigning a type to the variable 'kernel' (line 754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 4), 'kernel', asarray_call_result_275451)
    
    
    # Getting the type of 'volume' (line 756)
    volume_275452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 7), 'volume')
    # Obtaining the member 'ndim' of a type (line 756)
    ndim_275453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 7), volume_275452, 'ndim')
    # Getting the type of 'kernel' (line 756)
    kernel_275454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 22), 'kernel')
    # Obtaining the member 'ndim' of a type (line 756)
    ndim_275455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 22), kernel_275454, 'ndim')
    # Applying the binary operator '==' (line 756)
    result_eq_275456 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 7), '==', ndim_275453, ndim_275455)
    int_275457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 756, 37), 'int')
    # Applying the binary operator '==' (line 756)
    result_eq_275458 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 7), '==', ndim_275455, int_275457)
    # Applying the binary operator '&' (line 756)
    result_and__275459 = python_operator(stypy.reporting.localization.Localization(__file__, 756, 7), '&', result_eq_275456, result_eq_275458)
    
    # Testing the type of an if condition (line 756)
    if_condition_275460 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 756, 4), result_and__275459)
    # Assigning a type to the variable 'if_condition_275460' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'if_condition_275460', if_condition_275460)
    # SSA begins for if statement (line 756)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'volume' (line 757)
    volume_275461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 15), 'volume')
    # Getting the type of 'kernel' (line 757)
    kernel_275462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 24), 'kernel')
    # Applying the binary operator '*' (line 757)
    result_mul_275463 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 15), '*', volume_275461, kernel_275462)
    
    # Assigning a type to the variable 'stypy_return_type' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'stypy_return_type', result_mul_275463)
    # SSA join for if statement (line 756)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to _inputs_swap_needed(...): (line 759)
    # Processing the call arguments (line 759)
    # Getting the type of 'mode' (line 759)
    mode_275465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 27), 'mode', False)
    # Getting the type of 'volume' (line 759)
    volume_275466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 33), 'volume', False)
    # Obtaining the member 'shape' of a type (line 759)
    shape_275467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 33), volume_275466, 'shape')
    # Getting the type of 'kernel' (line 759)
    kernel_275468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 47), 'kernel', False)
    # Obtaining the member 'shape' of a type (line 759)
    shape_275469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 47), kernel_275468, 'shape')
    # Processing the call keyword arguments (line 759)
    kwargs_275470 = {}
    # Getting the type of '_inputs_swap_needed' (line 759)
    _inputs_swap_needed_275464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 7), '_inputs_swap_needed', False)
    # Calling _inputs_swap_needed(args, kwargs) (line 759)
    _inputs_swap_needed_call_result_275471 = invoke(stypy.reporting.localization.Localization(__file__, 759, 7), _inputs_swap_needed_275464, *[mode_275465, shape_275467, shape_275469], **kwargs_275470)
    
    # Testing the type of an if condition (line 759)
    if_condition_275472 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 759, 4), _inputs_swap_needed_call_result_275471)
    # Assigning a type to the variable 'if_condition_275472' (line 759)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 4), 'if_condition_275472', if_condition_275472)
    # SSA begins for if statement (line 759)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 761):
    
    # Assigning a Name to a Name (line 761):
    # Getting the type of 'kernel' (line 761)
    kernel_275473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 25), 'kernel')
    # Assigning a type to the variable 'tuple_assignment_274314' (line 761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_assignment_274314', kernel_275473)
    
    # Assigning a Name to a Name (line 761):
    # Getting the type of 'volume' (line 761)
    volume_275474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 33), 'volume')
    # Assigning a type to the variable 'tuple_assignment_274315' (line 761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_assignment_274315', volume_275474)
    
    # Assigning a Name to a Name (line 761):
    # Getting the type of 'tuple_assignment_274314' (line 761)
    tuple_assignment_274314_275475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_assignment_274314')
    # Assigning a type to the variable 'volume' (line 761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'volume', tuple_assignment_274314_275475)
    
    # Assigning a Name to a Name (line 761):
    # Getting the type of 'tuple_assignment_274315' (line 761)
    tuple_assignment_274315_275476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_assignment_274315')
    # Assigning a type to the variable 'kernel' (line 761)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 16), 'kernel', tuple_assignment_274315_275476)
    # SSA join for if statement (line 759)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'method' (line 763)
    method_275477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 7), 'method')
    str_275478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 17), 'str', 'auto')
    # Applying the binary operator '==' (line 763)
    result_eq_275479 = python_operator(stypy.reporting.localization.Localization(__file__, 763, 7), '==', method_275477, str_275478)
    
    # Testing the type of an if condition (line 763)
    if_condition_275480 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 763, 4), result_eq_275479)
    # Assigning a type to the variable 'if_condition_275480' (line 763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 4), 'if_condition_275480', if_condition_275480)
    # SSA begins for if statement (line 763)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 764):
    
    # Assigning a Call to a Name (line 764):
    
    # Call to choose_conv_method(...): (line 764)
    # Processing the call arguments (line 764)
    # Getting the type of 'volume' (line 764)
    volume_275482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 36), 'volume', False)
    # Getting the type of 'kernel' (line 764)
    kernel_275483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 44), 'kernel', False)
    # Processing the call keyword arguments (line 764)
    # Getting the type of 'mode' (line 764)
    mode_275484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 57), 'mode', False)
    keyword_275485 = mode_275484
    kwargs_275486 = {'mode': keyword_275485}
    # Getting the type of 'choose_conv_method' (line 764)
    choose_conv_method_275481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 17), 'choose_conv_method', False)
    # Calling choose_conv_method(args, kwargs) (line 764)
    choose_conv_method_call_result_275487 = invoke(stypy.reporting.localization.Localization(__file__, 764, 17), choose_conv_method_275481, *[volume_275482, kernel_275483], **kwargs_275486)
    
    # Assigning a type to the variable 'method' (line 764)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 8), 'method', choose_conv_method_call_result_275487)
    # SSA join for if statement (line 763)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'method' (line 766)
    method_275488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 7), 'method')
    str_275489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 17), 'str', 'fft')
    # Applying the binary operator '==' (line 766)
    result_eq_275490 = python_operator(stypy.reporting.localization.Localization(__file__, 766, 7), '==', method_275488, str_275489)
    
    # Testing the type of an if condition (line 766)
    if_condition_275491 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 766, 4), result_eq_275490)
    # Assigning a type to the variable 'if_condition_275491' (line 766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 4), 'if_condition_275491', if_condition_275491)
    # SSA begins for if statement (line 766)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 767):
    
    # Assigning a Call to a Name (line 767):
    
    # Call to fftconvolve(...): (line 767)
    # Processing the call arguments (line 767)
    # Getting the type of 'volume' (line 767)
    volume_275493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 26), 'volume', False)
    # Getting the type of 'kernel' (line 767)
    kernel_275494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 34), 'kernel', False)
    # Processing the call keyword arguments (line 767)
    # Getting the type of 'mode' (line 767)
    mode_275495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 47), 'mode', False)
    keyword_275496 = mode_275495
    kwargs_275497 = {'mode': keyword_275496}
    # Getting the type of 'fftconvolve' (line 767)
    fftconvolve_275492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 14), 'fftconvolve', False)
    # Calling fftconvolve(args, kwargs) (line 767)
    fftconvolve_call_result_275498 = invoke(stypy.reporting.localization.Localization(__file__, 767, 14), fftconvolve_275492, *[volume_275493, kernel_275494], **kwargs_275497)
    
    # Assigning a type to the variable 'out' (line 767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'out', fftconvolve_call_result_275498)
    
    # Assigning a Call to a Name (line 768):
    
    # Assigning a Call to a Name (line 768):
    
    # Call to result_type(...): (line 768)
    # Processing the call arguments (line 768)
    # Getting the type of 'volume' (line 768)
    volume_275501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 37), 'volume', False)
    # Getting the type of 'kernel' (line 768)
    kernel_275502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 45), 'kernel', False)
    # Processing the call keyword arguments (line 768)
    kwargs_275503 = {}
    # Getting the type of 'np' (line 768)
    np_275499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 22), 'np', False)
    # Obtaining the member 'result_type' of a type (line 768)
    result_type_275500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 22), np_275499, 'result_type')
    # Calling result_type(args, kwargs) (line 768)
    result_type_call_result_275504 = invoke(stypy.reporting.localization.Localization(__file__, 768, 22), result_type_275500, *[volume_275501, kernel_275502], **kwargs_275503)
    
    # Assigning a type to the variable 'result_type' (line 768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'result_type', result_type_call_result_275504)
    
    
    # Getting the type of 'result_type' (line 769)
    result_type_275505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 11), 'result_type')
    # Obtaining the member 'kind' of a type (line 769)
    kind_275506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 11), result_type_275505, 'kind')
    
    # Obtaining an instance of the builtin type 'set' (line 769)
    set_275507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 31), 'set')
    # Adding type elements to the builtin type 'set' instance (line 769)
    # Adding element type (line 769)
    str_275508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 32), 'str', 'u')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 769, 31), set_275507, str_275508)
    # Adding element type (line 769)
    str_275509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 37), 'str', 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 769, 31), set_275507, str_275509)
    
    # Applying the binary operator 'in' (line 769)
    result_contains_275510 = python_operator(stypy.reporting.localization.Localization(__file__, 769, 11), 'in', kind_275506, set_275507)
    
    # Testing the type of an if condition (line 769)
    if_condition_275511 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 769, 8), result_contains_275510)
    # Assigning a type to the variable 'if_condition_275511' (line 769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'if_condition_275511', if_condition_275511)
    # SSA begins for if statement (line 769)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 770):
    
    # Assigning a Call to a Name (line 770):
    
    # Call to around(...): (line 770)
    # Processing the call arguments (line 770)
    # Getting the type of 'out' (line 770)
    out_275514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 28), 'out', False)
    # Processing the call keyword arguments (line 770)
    kwargs_275515 = {}
    # Getting the type of 'np' (line 770)
    np_275512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 18), 'np', False)
    # Obtaining the member 'around' of a type (line 770)
    around_275513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 18), np_275512, 'around')
    # Calling around(args, kwargs) (line 770)
    around_call_result_275516 = invoke(stypy.reporting.localization.Localization(__file__, 770, 18), around_275513, *[out_275514], **kwargs_275515)
    
    # Assigning a type to the variable 'out' (line 770)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 12), 'out', around_call_result_275516)
    # SSA join for if statement (line 769)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to astype(...): (line 771)
    # Processing the call arguments (line 771)
    # Getting the type of 'result_type' (line 771)
    result_type_275519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 26), 'result_type', False)
    # Processing the call keyword arguments (line 771)
    kwargs_275520 = {}
    # Getting the type of 'out' (line 771)
    out_275517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 15), 'out', False)
    # Obtaining the member 'astype' of a type (line 771)
    astype_275518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 15), out_275517, 'astype')
    # Calling astype(args, kwargs) (line 771)
    astype_call_result_275521 = invoke(stypy.reporting.localization.Localization(__file__, 771, 15), astype_275518, *[result_type_275519], **kwargs_275520)
    
    # Assigning a type to the variable 'stypy_return_type' (line 771)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 8), 'stypy_return_type', astype_call_result_275521)
    # SSA join for if statement (line 766)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to _np_conv_ok(...): (line 774)
    # Processing the call arguments (line 774)
    # Getting the type of 'volume' (line 774)
    volume_275523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 19), 'volume', False)
    # Getting the type of 'kernel' (line 774)
    kernel_275524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 27), 'kernel', False)
    # Getting the type of 'mode' (line 774)
    mode_275525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 35), 'mode', False)
    # Processing the call keyword arguments (line 774)
    kwargs_275526 = {}
    # Getting the type of '_np_conv_ok' (line 774)
    _np_conv_ok_275522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 7), '_np_conv_ok', False)
    # Calling _np_conv_ok(args, kwargs) (line 774)
    _np_conv_ok_call_result_275527 = invoke(stypy.reporting.localization.Localization(__file__, 774, 7), _np_conv_ok_275522, *[volume_275523, kernel_275524, mode_275525], **kwargs_275526)
    
    # Testing the type of an if condition (line 774)
    if_condition_275528 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 774, 4), _np_conv_ok_call_result_275527)
    # Assigning a type to the variable 'if_condition_275528' (line 774)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 4), 'if_condition_275528', if_condition_275528)
    # SSA begins for if statement (line 774)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to convolve(...): (line 775)
    # Processing the call arguments (line 775)
    # Getting the type of 'volume' (line 775)
    volume_275531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 27), 'volume', False)
    # Getting the type of 'kernel' (line 775)
    kernel_275532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 35), 'kernel', False)
    # Getting the type of 'mode' (line 775)
    mode_275533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 43), 'mode', False)
    # Processing the call keyword arguments (line 775)
    kwargs_275534 = {}
    # Getting the type of 'np' (line 775)
    np_275529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 15), 'np', False)
    # Obtaining the member 'convolve' of a type (line 775)
    convolve_275530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 15), np_275529, 'convolve')
    # Calling convolve(args, kwargs) (line 775)
    convolve_call_result_275535 = invoke(stypy.reporting.localization.Localization(__file__, 775, 15), convolve_275530, *[volume_275531, kernel_275532, mode_275533], **kwargs_275534)
    
    # Assigning a type to the variable 'stypy_return_type' (line 775)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 8), 'stypy_return_type', convolve_call_result_275535)
    # SSA join for if statement (line 774)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to correlate(...): (line 777)
    # Processing the call arguments (line 777)
    # Getting the type of 'volume' (line 777)
    volume_275537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 21), 'volume', False)
    
    # Call to _reverse_and_conj(...): (line 777)
    # Processing the call arguments (line 777)
    # Getting the type of 'kernel' (line 777)
    kernel_275539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 47), 'kernel', False)
    # Processing the call keyword arguments (line 777)
    kwargs_275540 = {}
    # Getting the type of '_reverse_and_conj' (line 777)
    _reverse_and_conj_275538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 29), '_reverse_and_conj', False)
    # Calling _reverse_and_conj(args, kwargs) (line 777)
    _reverse_and_conj_call_result_275541 = invoke(stypy.reporting.localization.Localization(__file__, 777, 29), _reverse_and_conj_275538, *[kernel_275539], **kwargs_275540)
    
    # Getting the type of 'mode' (line 777)
    mode_275542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 56), 'mode', False)
    str_275543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, 62), 'str', 'direct')
    # Processing the call keyword arguments (line 777)
    kwargs_275544 = {}
    # Getting the type of 'correlate' (line 777)
    correlate_275536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 11), 'correlate', False)
    # Calling correlate(args, kwargs) (line 777)
    correlate_call_result_275545 = invoke(stypy.reporting.localization.Localization(__file__, 777, 11), correlate_275536, *[volume_275537, _reverse_and_conj_call_result_275541, mode_275542, str_275543], **kwargs_275544)
    
    # Assigning a type to the variable 'stypy_return_type' (line 777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'stypy_return_type', correlate_call_result_275545)
    
    # ################# End of 'convolve(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'convolve' in the type store
    # Getting the type of 'stypy_return_type' (line 666)
    stypy_return_type_275546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275546)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'convolve'
    return stypy_return_type_275546

# Assigning a type to the variable 'convolve' (line 666)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 0), 'convolve', convolve)

@norecursion
def order_filter(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'order_filter'
    module_type_store = module_type_store.open_function_context('order_filter', 780, 0, False)
    
    # Passed parameters checking function
    order_filter.stypy_localization = localization
    order_filter.stypy_type_of_self = None
    order_filter.stypy_type_store = module_type_store
    order_filter.stypy_function_name = 'order_filter'
    order_filter.stypy_param_names_list = ['a', 'domain', 'rank']
    order_filter.stypy_varargs_param_name = None
    order_filter.stypy_kwargs_param_name = None
    order_filter.stypy_call_defaults = defaults
    order_filter.stypy_call_varargs = varargs
    order_filter.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'order_filter', ['a', 'domain', 'rank'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'order_filter', localization, ['a', 'domain', 'rank'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'order_filter(...)' code ##################

    str_275547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, (-1)), 'str', '\n    Perform an order filter on an N-dimensional array.\n\n    Perform an order filter on the array in.  The domain argument acts as a\n    mask centered over each pixel.  The non-zero elements of domain are\n    used to select elements surrounding each input pixel which are placed\n    in a list.   The list is sorted, and the output for that pixel is the\n    element corresponding to rank in the sorted list.\n\n    Parameters\n    ----------\n    a : ndarray\n        The N-dimensional input array.\n    domain : array_like\n        A mask array with the same number of dimensions as `a`.\n        Each dimension should have an odd number of elements.\n    rank : int\n        A non-negative integer which selects the element from the\n        sorted list (0 corresponds to the smallest element, 1 is the\n        next smallest element, etc.).\n\n    Returns\n    -------\n    out : ndarray\n        The results of the order filter in an array with the same\n        shape as `a`.\n\n    Examples\n    --------\n    >>> from scipy import signal\n    >>> x = np.arange(25).reshape(5, 5)\n    >>> domain = np.identity(3)\n    >>> x\n    array([[ 0,  1,  2,  3,  4],\n           [ 5,  6,  7,  8,  9],\n           [10, 11, 12, 13, 14],\n           [15, 16, 17, 18, 19],\n           [20, 21, 22, 23, 24]])\n    >>> signal.order_filter(x, domain, 0)\n    array([[  0.,   0.,   0.,   0.,   0.],\n           [  0.,   0.,   1.,   2.,   0.],\n           [  0.,   5.,   6.,   7.,   0.],\n           [  0.,  10.,  11.,  12.,   0.],\n           [  0.,   0.,   0.,   0.,   0.]])\n    >>> signal.order_filter(x, domain, 2)\n    array([[  6.,   7.,   8.,   9.,   4.],\n           [ 11.,  12.,  13.,  14.,   9.],\n           [ 16.,  17.,  18.,  19.,  14.],\n           [ 21.,  22.,  23.,  24.,  19.],\n           [ 20.,  21.,  22.,  23.,  24.]])\n\n    ')
    
    # Assigning a Call to a Name (line 833):
    
    # Assigning a Call to a Name (line 833):
    
    # Call to asarray(...): (line 833)
    # Processing the call arguments (line 833)
    # Getting the type of 'domain' (line 833)
    domain_275549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 21), 'domain', False)
    # Processing the call keyword arguments (line 833)
    kwargs_275550 = {}
    # Getting the type of 'asarray' (line 833)
    asarray_275548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 13), 'asarray', False)
    # Calling asarray(args, kwargs) (line 833)
    asarray_call_result_275551 = invoke(stypy.reporting.localization.Localization(__file__, 833, 13), asarray_275548, *[domain_275549], **kwargs_275550)
    
    # Assigning a type to the variable 'domain' (line 833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 4), 'domain', asarray_call_result_275551)
    
    # Assigning a Attribute to a Name (line 834):
    
    # Assigning a Attribute to a Name (line 834):
    # Getting the type of 'domain' (line 834)
    domain_275552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 11), 'domain')
    # Obtaining the member 'shape' of a type (line 834)
    shape_275553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 11), domain_275552, 'shape')
    # Assigning a type to the variable 'size' (line 834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 4), 'size', shape_275553)
    
    
    # Call to range(...): (line 835)
    # Processing the call arguments (line 835)
    
    # Call to len(...): (line 835)
    # Processing the call arguments (line 835)
    # Getting the type of 'size' (line 835)
    size_275556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 23), 'size', False)
    # Processing the call keyword arguments (line 835)
    kwargs_275557 = {}
    # Getting the type of 'len' (line 835)
    len_275555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 19), 'len', False)
    # Calling len(args, kwargs) (line 835)
    len_call_result_275558 = invoke(stypy.reporting.localization.Localization(__file__, 835, 19), len_275555, *[size_275556], **kwargs_275557)
    
    # Processing the call keyword arguments (line 835)
    kwargs_275559 = {}
    # Getting the type of 'range' (line 835)
    range_275554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 13), 'range', False)
    # Calling range(args, kwargs) (line 835)
    range_call_result_275560 = invoke(stypy.reporting.localization.Localization(__file__, 835, 13), range_275554, *[len_call_result_275558], **kwargs_275559)
    
    # Testing the type of a for loop iterable (line 835)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 835, 4), range_call_result_275560)
    # Getting the type of the for loop variable (line 835)
    for_loop_var_275561 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 835, 4), range_call_result_275560)
    # Assigning a type to the variable 'k' (line 835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 4), 'k', for_loop_var_275561)
    # SSA begins for a for statement (line 835)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 836)
    k_275562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 17), 'k')
    # Getting the type of 'size' (line 836)
    size_275563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 12), 'size')
    # Obtaining the member '__getitem__' of a type (line 836)
    getitem___275564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 12), size_275563, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 836)
    subscript_call_result_275565 = invoke(stypy.reporting.localization.Localization(__file__, 836, 12), getitem___275564, k_275562)
    
    int_275566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 22), 'int')
    # Applying the binary operator '%' (line 836)
    result_mod_275567 = python_operator(stypy.reporting.localization.Localization(__file__, 836, 12), '%', subscript_call_result_275565, int_275566)
    
    int_275568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 28), 'int')
    # Applying the binary operator '!=' (line 836)
    result_ne_275569 = python_operator(stypy.reporting.localization.Localization(__file__, 836, 11), '!=', result_mod_275567, int_275568)
    
    # Testing the type of an if condition (line 836)
    if_condition_275570 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 836, 8), result_ne_275569)
    # Assigning a type to the variable 'if_condition_275570' (line 836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 8), 'if_condition_275570', if_condition_275570)
    # SSA begins for if statement (line 836)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 837)
    # Processing the call arguments (line 837)
    str_275572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 29), 'str', 'Each dimension of domain argument  should have an odd number of elements.')
    # Processing the call keyword arguments (line 837)
    kwargs_275573 = {}
    # Getting the type of 'ValueError' (line 837)
    ValueError_275571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 837)
    ValueError_call_result_275574 = invoke(stypy.reporting.localization.Localization(__file__, 837, 18), ValueError_275571, *[str_275572], **kwargs_275573)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 837, 12), ValueError_call_result_275574, 'raise parameter', BaseException)
    # SSA join for if statement (line 836)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _order_filterND(...): (line 839)
    # Processing the call arguments (line 839)
    # Getting the type of 'a' (line 839)
    a_275577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 36), 'a', False)
    # Getting the type of 'domain' (line 839)
    domain_275578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 39), 'domain', False)
    # Getting the type of 'rank' (line 839)
    rank_275579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 47), 'rank', False)
    # Processing the call keyword arguments (line 839)
    kwargs_275580 = {}
    # Getting the type of 'sigtools' (line 839)
    sigtools_275575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 11), 'sigtools', False)
    # Obtaining the member '_order_filterND' of a type (line 839)
    _order_filterND_275576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 839, 11), sigtools_275575, '_order_filterND')
    # Calling _order_filterND(args, kwargs) (line 839)
    _order_filterND_call_result_275581 = invoke(stypy.reporting.localization.Localization(__file__, 839, 11), _order_filterND_275576, *[a_275577, domain_275578, rank_275579], **kwargs_275580)
    
    # Assigning a type to the variable 'stypy_return_type' (line 839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 4), 'stypy_return_type', _order_filterND_call_result_275581)
    
    # ################# End of 'order_filter(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'order_filter' in the type store
    # Getting the type of 'stypy_return_type' (line 780)
    stypy_return_type_275582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275582)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'order_filter'
    return stypy_return_type_275582

# Assigning a type to the variable 'order_filter' (line 780)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 780, 0), 'order_filter', order_filter)

@norecursion
def medfilt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 842)
    None_275583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 32), 'None')
    defaults = [None_275583]
    # Create a new context for function 'medfilt'
    module_type_store = module_type_store.open_function_context('medfilt', 842, 0, False)
    
    # Passed parameters checking function
    medfilt.stypy_localization = localization
    medfilt.stypy_type_of_self = None
    medfilt.stypy_type_store = module_type_store
    medfilt.stypy_function_name = 'medfilt'
    medfilt.stypy_param_names_list = ['volume', 'kernel_size']
    medfilt.stypy_varargs_param_name = None
    medfilt.stypy_kwargs_param_name = None
    medfilt.stypy_call_defaults = defaults
    medfilt.stypy_call_varargs = varargs
    medfilt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'medfilt', ['volume', 'kernel_size'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'medfilt', localization, ['volume', 'kernel_size'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'medfilt(...)' code ##################

    str_275584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 865, (-1)), 'str', '\n    Perform a median filter on an N-dimensional array.\n\n    Apply a median filter to the input array using a local window-size\n    given by `kernel_size`.\n\n    Parameters\n    ----------\n    volume : array_like\n        An N-dimensional input array.\n    kernel_size : array_like, optional\n        A scalar or an N-length list giving the size of the median filter\n        window in each dimension.  Elements of `kernel_size` should be odd.\n        If `kernel_size` is a scalar, then this scalar is used as the size in\n        each dimension. Default size is 3 for each dimension.\n\n    Returns\n    -------\n    out : ndarray\n        An array the same size as input containing the median filtered\n        result.\n\n    ')
    
    # Assigning a Call to a Name (line 866):
    
    # Assigning a Call to a Name (line 866):
    
    # Call to atleast_1d(...): (line 866)
    # Processing the call arguments (line 866)
    # Getting the type of 'volume' (line 866)
    volume_275586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 24), 'volume', False)
    # Processing the call keyword arguments (line 866)
    kwargs_275587 = {}
    # Getting the type of 'atleast_1d' (line 866)
    atleast_1d_275585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 13), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 866)
    atleast_1d_call_result_275588 = invoke(stypy.reporting.localization.Localization(__file__, 866, 13), atleast_1d_275585, *[volume_275586], **kwargs_275587)
    
    # Assigning a type to the variable 'volume' (line 866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 4), 'volume', atleast_1d_call_result_275588)
    
    # Type idiom detected: calculating its left and rigth part (line 867)
    # Getting the type of 'kernel_size' (line 867)
    kernel_size_275589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 7), 'kernel_size')
    # Getting the type of 'None' (line 867)
    None_275590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 22), 'None')
    
    (may_be_275591, more_types_in_union_275592) = may_be_none(kernel_size_275589, None_275590)

    if may_be_275591:

        if more_types_in_union_275592:
            # Runtime conditional SSA (line 867)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 868):
        
        # Assigning a BinOp to a Name (line 868):
        
        # Obtaining an instance of the builtin type 'list' (line 868)
        list_275593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 868)
        # Adding element type (line 868)
        int_275594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 868, 22), list_275593, int_275594)
        
        # Getting the type of 'volume' (line 868)
        volume_275595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 28), 'volume')
        # Obtaining the member 'ndim' of a type (line 868)
        ndim_275596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 28), volume_275595, 'ndim')
        # Applying the binary operator '*' (line 868)
        result_mul_275597 = python_operator(stypy.reporting.localization.Localization(__file__, 868, 22), '*', list_275593, ndim_275596)
        
        # Assigning a type to the variable 'kernel_size' (line 868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'kernel_size', result_mul_275597)

        if more_types_in_union_275592:
            # SSA join for if statement (line 867)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 869):
    
    # Assigning a Call to a Name (line 869):
    
    # Call to asarray(...): (line 869)
    # Processing the call arguments (line 869)
    # Getting the type of 'kernel_size' (line 869)
    kernel_size_275599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 26), 'kernel_size', False)
    # Processing the call keyword arguments (line 869)
    kwargs_275600 = {}
    # Getting the type of 'asarray' (line 869)
    asarray_275598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 18), 'asarray', False)
    # Calling asarray(args, kwargs) (line 869)
    asarray_call_result_275601 = invoke(stypy.reporting.localization.Localization(__file__, 869, 18), asarray_275598, *[kernel_size_275599], **kwargs_275600)
    
    # Assigning a type to the variable 'kernel_size' (line 869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 4), 'kernel_size', asarray_call_result_275601)
    
    
    # Getting the type of 'kernel_size' (line 870)
    kernel_size_275602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 7), 'kernel_size')
    # Obtaining the member 'shape' of a type (line 870)
    shape_275603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 7), kernel_size_275602, 'shape')
    
    # Obtaining an instance of the builtin type 'tuple' (line 870)
    tuple_275604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 870)
    
    # Applying the binary operator '==' (line 870)
    result_eq_275605 = python_operator(stypy.reporting.localization.Localization(__file__, 870, 7), '==', shape_275603, tuple_275604)
    
    # Testing the type of an if condition (line 870)
    if_condition_275606 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 870, 4), result_eq_275605)
    # Assigning a type to the variable 'if_condition_275606' (line 870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'if_condition_275606', if_condition_275606)
    # SSA begins for if statement (line 870)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 871):
    
    # Assigning a Call to a Name (line 871):
    
    # Call to repeat(...): (line 871)
    # Processing the call arguments (line 871)
    
    # Call to item(...): (line 871)
    # Processing the call keyword arguments (line 871)
    kwargs_275611 = {}
    # Getting the type of 'kernel_size' (line 871)
    kernel_size_275609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 32), 'kernel_size', False)
    # Obtaining the member 'item' of a type (line 871)
    item_275610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 32), kernel_size_275609, 'item')
    # Calling item(args, kwargs) (line 871)
    item_call_result_275612 = invoke(stypy.reporting.localization.Localization(__file__, 871, 32), item_275610, *[], **kwargs_275611)
    
    # Getting the type of 'volume' (line 871)
    volume_275613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 52), 'volume', False)
    # Obtaining the member 'ndim' of a type (line 871)
    ndim_275614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 52), volume_275613, 'ndim')
    # Processing the call keyword arguments (line 871)
    kwargs_275615 = {}
    # Getting the type of 'np' (line 871)
    np_275607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 22), 'np', False)
    # Obtaining the member 'repeat' of a type (line 871)
    repeat_275608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 871, 22), np_275607, 'repeat')
    # Calling repeat(args, kwargs) (line 871)
    repeat_call_result_275616 = invoke(stypy.reporting.localization.Localization(__file__, 871, 22), repeat_275608, *[item_call_result_275612, ndim_275614], **kwargs_275615)
    
    # Assigning a type to the variable 'kernel_size' (line 871)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 8), 'kernel_size', repeat_call_result_275616)
    # SSA join for if statement (line 870)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 873)
    # Processing the call arguments (line 873)
    # Getting the type of 'volume' (line 873)
    volume_275618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 19), 'volume', False)
    # Obtaining the member 'ndim' of a type (line 873)
    ndim_275619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 19), volume_275618, 'ndim')
    # Processing the call keyword arguments (line 873)
    kwargs_275620 = {}
    # Getting the type of 'range' (line 873)
    range_275617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 13), 'range', False)
    # Calling range(args, kwargs) (line 873)
    range_call_result_275621 = invoke(stypy.reporting.localization.Localization(__file__, 873, 13), range_275617, *[ndim_275619], **kwargs_275620)
    
    # Testing the type of a for loop iterable (line 873)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 873, 4), range_call_result_275621)
    # Getting the type of the for loop variable (line 873)
    for_loop_var_275622 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 873, 4), range_call_result_275621)
    # Assigning a type to the variable 'k' (line 873)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 4), 'k', for_loop_var_275622)
    # SSA begins for a for statement (line 873)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 874)
    k_275623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 24), 'k')
    # Getting the type of 'kernel_size' (line 874)
    kernel_size_275624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 12), 'kernel_size')
    # Obtaining the member '__getitem__' of a type (line 874)
    getitem___275625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 874, 12), kernel_size_275624, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 874)
    subscript_call_result_275626 = invoke(stypy.reporting.localization.Localization(__file__, 874, 12), getitem___275625, k_275623)
    
    int_275627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 874, 29), 'int')
    # Applying the binary operator '%' (line 874)
    result_mod_275628 = python_operator(stypy.reporting.localization.Localization(__file__, 874, 12), '%', subscript_call_result_275626, int_275627)
    
    int_275629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 874, 35), 'int')
    # Applying the binary operator '!=' (line 874)
    result_ne_275630 = python_operator(stypy.reporting.localization.Localization(__file__, 874, 11), '!=', result_mod_275628, int_275629)
    
    # Testing the type of an if condition (line 874)
    if_condition_275631 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 874, 8), result_ne_275630)
    # Assigning a type to the variable 'if_condition_275631' (line 874)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'if_condition_275631', if_condition_275631)
    # SSA begins for if statement (line 874)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 875)
    # Processing the call arguments (line 875)
    str_275633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 875, 29), 'str', 'Each element of kernel_size should be odd.')
    # Processing the call keyword arguments (line 875)
    kwargs_275634 = {}
    # Getting the type of 'ValueError' (line 875)
    ValueError_275632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 875)
    ValueError_call_result_275635 = invoke(stypy.reporting.localization.Localization(__file__, 875, 18), ValueError_275632, *[str_275633], **kwargs_275634)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 875, 12), ValueError_call_result_275635, 'raise parameter', BaseException)
    # SSA join for if statement (line 874)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 877):
    
    # Assigning a Call to a Name (line 877):
    
    # Call to ones(...): (line 877)
    # Processing the call arguments (line 877)
    # Getting the type of 'kernel_size' (line 877)
    kernel_size_275637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 18), 'kernel_size', False)
    # Processing the call keyword arguments (line 877)
    kwargs_275638 = {}
    # Getting the type of 'ones' (line 877)
    ones_275636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 13), 'ones', False)
    # Calling ones(args, kwargs) (line 877)
    ones_call_result_275639 = invoke(stypy.reporting.localization.Localization(__file__, 877, 13), ones_275636, *[kernel_size_275637], **kwargs_275638)
    
    # Assigning a type to the variable 'domain' (line 877)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 4), 'domain', ones_call_result_275639)
    
    # Assigning a Call to a Name (line 879):
    
    # Assigning a Call to a Name (line 879):
    
    # Call to product(...): (line 879)
    # Processing the call arguments (line 879)
    # Getting the type of 'kernel_size' (line 879)
    kernel_size_275641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 21), 'kernel_size', False)
    # Processing the call keyword arguments (line 879)
    int_275642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 39), 'int')
    keyword_275643 = int_275642
    kwargs_275644 = {'axis': keyword_275643}
    # Getting the type of 'product' (line 879)
    product_275640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 13), 'product', False)
    # Calling product(args, kwargs) (line 879)
    product_call_result_275645 = invoke(stypy.reporting.localization.Localization(__file__, 879, 13), product_275640, *[kernel_size_275641], **kwargs_275644)
    
    # Assigning a type to the variable 'numels' (line 879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 4), 'numels', product_call_result_275645)
    
    # Assigning a BinOp to a Name (line 880):
    
    # Assigning a BinOp to a Name (line 880):
    # Getting the type of 'numels' (line 880)
    numels_275646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 12), 'numels')
    int_275647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 22), 'int')
    # Applying the binary operator '//' (line 880)
    result_floordiv_275648 = python_operator(stypy.reporting.localization.Localization(__file__, 880, 12), '//', numels_275646, int_275647)
    
    # Assigning a type to the variable 'order' (line 880)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 4), 'order', result_floordiv_275648)
    
    # Call to _order_filterND(...): (line 881)
    # Processing the call arguments (line 881)
    # Getting the type of 'volume' (line 881)
    volume_275651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 36), 'volume', False)
    # Getting the type of 'domain' (line 881)
    domain_275652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 44), 'domain', False)
    # Getting the type of 'order' (line 881)
    order_275653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 52), 'order', False)
    # Processing the call keyword arguments (line 881)
    kwargs_275654 = {}
    # Getting the type of 'sigtools' (line 881)
    sigtools_275649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 11), 'sigtools', False)
    # Obtaining the member '_order_filterND' of a type (line 881)
    _order_filterND_275650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 881, 11), sigtools_275649, '_order_filterND')
    # Calling _order_filterND(args, kwargs) (line 881)
    _order_filterND_call_result_275655 = invoke(stypy.reporting.localization.Localization(__file__, 881, 11), _order_filterND_275650, *[volume_275651, domain_275652, order_275653], **kwargs_275654)
    
    # Assigning a type to the variable 'stypy_return_type' (line 881)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 4), 'stypy_return_type', _order_filterND_call_result_275655)
    
    # ################# End of 'medfilt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'medfilt' in the type store
    # Getting the type of 'stypy_return_type' (line 842)
    stypy_return_type_275656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275656)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'medfilt'
    return stypy_return_type_275656

# Assigning a type to the variable 'medfilt' (line 842)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 0), 'medfilt', medfilt)

@norecursion
def wiener(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 884)
    None_275657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 22), 'None')
    # Getting the type of 'None' (line 884)
    None_275658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 34), 'None')
    defaults = [None_275657, None_275658]
    # Create a new context for function 'wiener'
    module_type_store = module_type_store.open_function_context('wiener', 884, 0, False)
    
    # Passed parameters checking function
    wiener.stypy_localization = localization
    wiener.stypy_type_of_self = None
    wiener.stypy_type_store = module_type_store
    wiener.stypy_function_name = 'wiener'
    wiener.stypy_param_names_list = ['im', 'mysize', 'noise']
    wiener.stypy_varargs_param_name = None
    wiener.stypy_kwargs_param_name = None
    wiener.stypy_call_defaults = defaults
    wiener.stypy_call_varargs = varargs
    wiener.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'wiener', ['im', 'mysize', 'noise'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'wiener', localization, ['im', 'mysize', 'noise'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'wiener(...)' code ##################

    str_275659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, (-1)), 'str', '\n    Perform a Wiener filter on an N-dimensional array.\n\n    Apply a Wiener filter to the N-dimensional array `im`.\n\n    Parameters\n    ----------\n    im : ndarray\n        An N-dimensional array.\n    mysize : int or array_like, optional\n        A scalar or an N-length list giving the size of the Wiener filter\n        window in each dimension.  Elements of mysize should be odd.\n        If mysize is a scalar, then this scalar is used as the size\n        in each dimension.\n    noise : float, optional\n        The noise-power to use. If None, then noise is estimated as the\n        average of the local variance of the input.\n\n    Returns\n    -------\n    out : ndarray\n        Wiener filtered result with the same shape as `im`.\n\n    ')
    
    # Assigning a Call to a Name (line 909):
    
    # Assigning a Call to a Name (line 909):
    
    # Call to asarray(...): (line 909)
    # Processing the call arguments (line 909)
    # Getting the type of 'im' (line 909)
    im_275661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 17), 'im', False)
    # Processing the call keyword arguments (line 909)
    kwargs_275662 = {}
    # Getting the type of 'asarray' (line 909)
    asarray_275660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 9), 'asarray', False)
    # Calling asarray(args, kwargs) (line 909)
    asarray_call_result_275663 = invoke(stypy.reporting.localization.Localization(__file__, 909, 9), asarray_275660, *[im_275661], **kwargs_275662)
    
    # Assigning a type to the variable 'im' (line 909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 4), 'im', asarray_call_result_275663)
    
    # Type idiom detected: calculating its left and rigth part (line 910)
    # Getting the type of 'mysize' (line 910)
    mysize_275664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 7), 'mysize')
    # Getting the type of 'None' (line 910)
    None_275665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 17), 'None')
    
    (may_be_275666, more_types_in_union_275667) = may_be_none(mysize_275664, None_275665)

    if may_be_275666:

        if more_types_in_union_275667:
            # Runtime conditional SSA (line 910)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 911):
        
        # Assigning a BinOp to a Name (line 911):
        
        # Obtaining an instance of the builtin type 'list' (line 911)
        list_275668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 911)
        # Adding element type (line 911)
        int_275669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 18), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 911, 17), list_275668, int_275669)
        
        # Getting the type of 'im' (line 911)
        im_275670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 23), 'im')
        # Obtaining the member 'ndim' of a type (line 911)
        ndim_275671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 23), im_275670, 'ndim')
        # Applying the binary operator '*' (line 911)
        result_mul_275672 = python_operator(stypy.reporting.localization.Localization(__file__, 911, 17), '*', list_275668, ndim_275671)
        
        # Assigning a type to the variable 'mysize' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 8), 'mysize', result_mul_275672)

        if more_types_in_union_275667:
            # SSA join for if statement (line 910)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 912):
    
    # Assigning a Call to a Name (line 912):
    
    # Call to asarray(...): (line 912)
    # Processing the call arguments (line 912)
    # Getting the type of 'mysize' (line 912)
    mysize_275674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 21), 'mysize', False)
    # Processing the call keyword arguments (line 912)
    kwargs_275675 = {}
    # Getting the type of 'asarray' (line 912)
    asarray_275673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 13), 'asarray', False)
    # Calling asarray(args, kwargs) (line 912)
    asarray_call_result_275676 = invoke(stypy.reporting.localization.Localization(__file__, 912, 13), asarray_275673, *[mysize_275674], **kwargs_275675)
    
    # Assigning a type to the variable 'mysize' (line 912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 4), 'mysize', asarray_call_result_275676)
    
    
    # Getting the type of 'mysize' (line 913)
    mysize_275677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 7), 'mysize')
    # Obtaining the member 'shape' of a type (line 913)
    shape_275678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 7), mysize_275677, 'shape')
    
    # Obtaining an instance of the builtin type 'tuple' (line 913)
    tuple_275679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 913)
    
    # Applying the binary operator '==' (line 913)
    result_eq_275680 = python_operator(stypy.reporting.localization.Localization(__file__, 913, 7), '==', shape_275678, tuple_275679)
    
    # Testing the type of an if condition (line 913)
    if_condition_275681 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 913, 4), result_eq_275680)
    # Assigning a type to the variable 'if_condition_275681' (line 913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 4), 'if_condition_275681', if_condition_275681)
    # SSA begins for if statement (line 913)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 914):
    
    # Assigning a Call to a Name (line 914):
    
    # Call to repeat(...): (line 914)
    # Processing the call arguments (line 914)
    
    # Call to item(...): (line 914)
    # Processing the call keyword arguments (line 914)
    kwargs_275686 = {}
    # Getting the type of 'mysize' (line 914)
    mysize_275684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 27), 'mysize', False)
    # Obtaining the member 'item' of a type (line 914)
    item_275685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 27), mysize_275684, 'item')
    # Calling item(args, kwargs) (line 914)
    item_call_result_275687 = invoke(stypy.reporting.localization.Localization(__file__, 914, 27), item_275685, *[], **kwargs_275686)
    
    # Getting the type of 'im' (line 914)
    im_275688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 42), 'im', False)
    # Obtaining the member 'ndim' of a type (line 914)
    ndim_275689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 42), im_275688, 'ndim')
    # Processing the call keyword arguments (line 914)
    kwargs_275690 = {}
    # Getting the type of 'np' (line 914)
    np_275682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 17), 'np', False)
    # Obtaining the member 'repeat' of a type (line 914)
    repeat_275683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 17), np_275682, 'repeat')
    # Calling repeat(args, kwargs) (line 914)
    repeat_call_result_275691 = invoke(stypy.reporting.localization.Localization(__file__, 914, 17), repeat_275683, *[item_call_result_275687, ndim_275689], **kwargs_275690)
    
    # Assigning a type to the variable 'mysize' (line 914)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 8), 'mysize', repeat_call_result_275691)
    # SSA join for if statement (line 913)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 917):
    
    # Assigning a BinOp to a Name (line 917):
    
    # Call to correlate(...): (line 917)
    # Processing the call arguments (line 917)
    # Getting the type of 'im' (line 917)
    im_275693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 22), 'im', False)
    
    # Call to ones(...): (line 917)
    # Processing the call arguments (line 917)
    # Getting the type of 'mysize' (line 917)
    mysize_275695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 31), 'mysize', False)
    # Processing the call keyword arguments (line 917)
    kwargs_275696 = {}
    # Getting the type of 'ones' (line 917)
    ones_275694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 26), 'ones', False)
    # Calling ones(args, kwargs) (line 917)
    ones_call_result_275697 = invoke(stypy.reporting.localization.Localization(__file__, 917, 26), ones_275694, *[mysize_275695], **kwargs_275696)
    
    str_275698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 917, 40), 'str', 'same')
    # Processing the call keyword arguments (line 917)
    kwargs_275699 = {}
    # Getting the type of 'correlate' (line 917)
    correlate_275692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 12), 'correlate', False)
    # Calling correlate(args, kwargs) (line 917)
    correlate_call_result_275700 = invoke(stypy.reporting.localization.Localization(__file__, 917, 12), correlate_275692, *[im_275693, ones_call_result_275697, str_275698], **kwargs_275699)
    
    
    # Call to product(...): (line 917)
    # Processing the call arguments (line 917)
    # Getting the type of 'mysize' (line 917)
    mysize_275702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 58), 'mysize', False)
    # Processing the call keyword arguments (line 917)
    int_275703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 917, 71), 'int')
    keyword_275704 = int_275703
    kwargs_275705 = {'axis': keyword_275704}
    # Getting the type of 'product' (line 917)
    product_275701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 50), 'product', False)
    # Calling product(args, kwargs) (line 917)
    product_call_result_275706 = invoke(stypy.reporting.localization.Localization(__file__, 917, 50), product_275701, *[mysize_275702], **kwargs_275705)
    
    # Applying the binary operator 'div' (line 917)
    result_div_275707 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 12), 'div', correlate_call_result_275700, product_call_result_275706)
    
    # Assigning a type to the variable 'lMean' (line 917)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 4), 'lMean', result_div_275707)
    
    # Assigning a BinOp to a Name (line 920):
    
    # Assigning a BinOp to a Name (line 920):
    
    # Call to correlate(...): (line 920)
    # Processing the call arguments (line 920)
    # Getting the type of 'im' (line 920)
    im_275709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 22), 'im', False)
    int_275710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 28), 'int')
    # Applying the binary operator '**' (line 920)
    result_pow_275711 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 22), '**', im_275709, int_275710)
    
    
    # Call to ones(...): (line 920)
    # Processing the call arguments (line 920)
    # Getting the type of 'mysize' (line 920)
    mysize_275713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 36), 'mysize', False)
    # Processing the call keyword arguments (line 920)
    kwargs_275714 = {}
    # Getting the type of 'ones' (line 920)
    ones_275712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 31), 'ones', False)
    # Calling ones(args, kwargs) (line 920)
    ones_call_result_275715 = invoke(stypy.reporting.localization.Localization(__file__, 920, 31), ones_275712, *[mysize_275713], **kwargs_275714)
    
    str_275716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 45), 'str', 'same')
    # Processing the call keyword arguments (line 920)
    kwargs_275717 = {}
    # Getting the type of 'correlate' (line 920)
    correlate_275708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 12), 'correlate', False)
    # Calling correlate(args, kwargs) (line 920)
    correlate_call_result_275718 = invoke(stypy.reporting.localization.Localization(__file__, 920, 12), correlate_275708, *[result_pow_275711, ones_call_result_275715, str_275716], **kwargs_275717)
    
    
    # Call to product(...): (line 921)
    # Processing the call arguments (line 921)
    # Getting the type of 'mysize' (line 921)
    mysize_275720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 20), 'mysize', False)
    # Processing the call keyword arguments (line 921)
    int_275721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 33), 'int')
    keyword_275722 = int_275721
    kwargs_275723 = {'axis': keyword_275722}
    # Getting the type of 'product' (line 921)
    product_275719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 12), 'product', False)
    # Calling product(args, kwargs) (line 921)
    product_call_result_275724 = invoke(stypy.reporting.localization.Localization(__file__, 921, 12), product_275719, *[mysize_275720], **kwargs_275723)
    
    # Applying the binary operator 'div' (line 920)
    result_div_275725 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 12), 'div', correlate_call_result_275718, product_call_result_275724)
    
    # Getting the type of 'lMean' (line 921)
    lMean_275726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 38), 'lMean')
    int_275727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 47), 'int')
    # Applying the binary operator '**' (line 921)
    result_pow_275728 = python_operator(stypy.reporting.localization.Localization(__file__, 921, 38), '**', lMean_275726, int_275727)
    
    # Applying the binary operator '-' (line 920)
    result_sub_275729 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 12), '-', result_div_275725, result_pow_275728)
    
    # Assigning a type to the variable 'lVar' (line 920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 4), 'lVar', result_sub_275729)
    
    # Type idiom detected: calculating its left and rigth part (line 924)
    # Getting the type of 'noise' (line 924)
    noise_275730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 7), 'noise')
    # Getting the type of 'None' (line 924)
    None_275731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 16), 'None')
    
    (may_be_275732, more_types_in_union_275733) = may_be_none(noise_275730, None_275731)

    if may_be_275732:

        if more_types_in_union_275733:
            # Runtime conditional SSA (line 924)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 925):
        
        # Assigning a Call to a Name (line 925):
        
        # Call to mean(...): (line 925)
        # Processing the call arguments (line 925)
        
        # Call to ravel(...): (line 925)
        # Processing the call arguments (line 925)
        # Getting the type of 'lVar' (line 925)
        lVar_275736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 27), 'lVar', False)
        # Processing the call keyword arguments (line 925)
        kwargs_275737 = {}
        # Getting the type of 'ravel' (line 925)
        ravel_275735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 21), 'ravel', False)
        # Calling ravel(args, kwargs) (line 925)
        ravel_call_result_275738 = invoke(stypy.reporting.localization.Localization(__file__, 925, 21), ravel_275735, *[lVar_275736], **kwargs_275737)
        
        # Processing the call keyword arguments (line 925)
        int_275739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, 39), 'int')
        keyword_275740 = int_275739
        kwargs_275741 = {'axis': keyword_275740}
        # Getting the type of 'mean' (line 925)
        mean_275734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 16), 'mean', False)
        # Calling mean(args, kwargs) (line 925)
        mean_call_result_275742 = invoke(stypy.reporting.localization.Localization(__file__, 925, 16), mean_275734, *[ravel_call_result_275738], **kwargs_275741)
        
        # Assigning a type to the variable 'noise' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 8), 'noise', mean_call_result_275742)

        if more_types_in_union_275733:
            # SSA join for if statement (line 924)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 927):
    
    # Assigning a BinOp to a Name (line 927):
    # Getting the type of 'im' (line 927)
    im_275743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 11), 'im')
    # Getting the type of 'lMean' (line 927)
    lMean_275744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 16), 'lMean')
    # Applying the binary operator '-' (line 927)
    result_sub_275745 = python_operator(stypy.reporting.localization.Localization(__file__, 927, 11), '-', im_275743, lMean_275744)
    
    # Assigning a type to the variable 'res' (line 927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 4), 'res', result_sub_275745)
    
    # Getting the type of 'res' (line 928)
    res_275746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'res')
    int_275747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 12), 'int')
    # Getting the type of 'noise' (line 928)
    noise_275748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 16), 'noise')
    # Getting the type of 'lVar' (line 928)
    lVar_275749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 24), 'lVar')
    # Applying the binary operator 'div' (line 928)
    result_div_275750 = python_operator(stypy.reporting.localization.Localization(__file__, 928, 16), 'div', noise_275748, lVar_275749)
    
    # Applying the binary operator '-' (line 928)
    result_sub_275751 = python_operator(stypy.reporting.localization.Localization(__file__, 928, 12), '-', int_275747, result_div_275750)
    
    # Applying the binary operator '*=' (line 928)
    result_imul_275752 = python_operator(stypy.reporting.localization.Localization(__file__, 928, 4), '*=', res_275746, result_sub_275751)
    # Assigning a type to the variable 'res' (line 928)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'res', result_imul_275752)
    
    
    # Getting the type of 'res' (line 929)
    res_275753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 4), 'res')
    # Getting the type of 'lMean' (line 929)
    lMean_275754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 11), 'lMean')
    # Applying the binary operator '+=' (line 929)
    result_iadd_275755 = python_operator(stypy.reporting.localization.Localization(__file__, 929, 4), '+=', res_275753, lMean_275754)
    # Assigning a type to the variable 'res' (line 929)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 4), 'res', result_iadd_275755)
    
    
    # Assigning a Call to a Name (line 930):
    
    # Assigning a Call to a Name (line 930):
    
    # Call to where(...): (line 930)
    # Processing the call arguments (line 930)
    
    # Getting the type of 'lVar' (line 930)
    lVar_275757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 16), 'lVar', False)
    # Getting the type of 'noise' (line 930)
    noise_275758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 23), 'noise', False)
    # Applying the binary operator '<' (line 930)
    result_lt_275759 = python_operator(stypy.reporting.localization.Localization(__file__, 930, 16), '<', lVar_275757, noise_275758)
    
    # Getting the type of 'lMean' (line 930)
    lMean_275760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 30), 'lMean', False)
    # Getting the type of 'res' (line 930)
    res_275761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 37), 'res', False)
    # Processing the call keyword arguments (line 930)
    kwargs_275762 = {}
    # Getting the type of 'where' (line 930)
    where_275756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 10), 'where', False)
    # Calling where(args, kwargs) (line 930)
    where_call_result_275763 = invoke(stypy.reporting.localization.Localization(__file__, 930, 10), where_275756, *[result_lt_275759, lMean_275760, res_275761], **kwargs_275762)
    
    # Assigning a type to the variable 'out' (line 930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 4), 'out', where_call_result_275763)
    # Getting the type of 'out' (line 932)
    out_275764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 11), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 932)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 4), 'stypy_return_type', out_275764)
    
    # ################# End of 'wiener(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'wiener' in the type store
    # Getting the type of 'stypy_return_type' (line 884)
    stypy_return_type_275765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275765)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'wiener'
    return stypy_return_type_275765

# Assigning a type to the variable 'wiener' (line 884)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 0), 'wiener', wiener)

@norecursion
def convolve2d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_275766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 935, 30), 'str', 'full')
    str_275767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 935, 47), 'str', 'fill')
    int_275768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 935, 65), 'int')
    defaults = [str_275766, str_275767, int_275768]
    # Create a new context for function 'convolve2d'
    module_type_store = module_type_store.open_function_context('convolve2d', 935, 0, False)
    
    # Passed parameters checking function
    convolve2d.stypy_localization = localization
    convolve2d.stypy_type_of_self = None
    convolve2d.stypy_type_store = module_type_store
    convolve2d.stypy_function_name = 'convolve2d'
    convolve2d.stypy_param_names_list = ['in1', 'in2', 'mode', 'boundary', 'fillvalue']
    convolve2d.stypy_varargs_param_name = None
    convolve2d.stypy_kwargs_param_name = None
    convolve2d.stypy_call_defaults = defaults
    convolve2d.stypy_call_varargs = varargs
    convolve2d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'convolve2d', ['in1', 'in2', 'mode', 'boundary', 'fillvalue'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'convolve2d', localization, ['in1', 'in2', 'mode', 'boundary', 'fillvalue'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'convolve2d(...)' code ##################

    str_275769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, (-1)), 'str', "\n    Convolve two 2-dimensional arrays.\n\n    Convolve `in1` and `in2` with output size determined by `mode`, and\n    boundary conditions determined by `boundary` and `fillvalue`.\n\n    Parameters\n    ----------\n    in1 : array_like\n        First input.\n    in2 : array_like\n        Second input. Should have the same number of dimensions as `in1`.\n        If operating in 'valid' mode, either `in1` or `in2` must be\n        at least as large as the other in every dimension.\n    mode : str {'full', 'valid', 'same'}, optional\n        A string indicating the size of the output:\n\n        ``full``\n           The output is the full discrete linear convolution\n           of the inputs. (Default)\n        ``valid``\n           The output consists only of those elements that do not\n           rely on the zero-padding.\n        ``same``\n           The output is the same size as `in1`, centered\n           with respect to the 'full' output.\n\n    boundary : str {'fill', 'wrap', 'symm'}, optional\n        A flag indicating how to handle boundaries:\n\n        ``fill``\n           pad input arrays with fillvalue. (default)\n        ``wrap``\n           circular boundary conditions.\n        ``symm``\n           symmetrical boundary conditions.\n\n    fillvalue : scalar, optional\n        Value to fill pad input arrays with. Default is 0.\n\n    Returns\n    -------\n    out : ndarray\n        A 2-dimensional array containing a subset of the discrete linear\n        convolution of `in1` with `in2`.\n\n    Examples\n    --------\n    Compute the gradient of an image by 2D convolution with a complex Scharr\n    operator.  (Horizontal operator is real, vertical is imaginary.)  Use\n    symmetric boundary condition to avoid creating edges at the image\n    boundaries.\n\n    >>> from scipy import signal\n    >>> from scipy import misc\n    >>> ascent = misc.ascent()\n    >>> scharr = np.array([[ -3-3j, 0-10j,  +3 -3j],\n    ...                    [-10+0j, 0+ 0j, +10 +0j],\n    ...                    [ -3+3j, 0+10j,  +3 +3j]]) # Gx + j*Gy\n    >>> grad = signal.convolve2d(ascent, scharr, boundary='symm', mode='same')\n\n    >>> import matplotlib.pyplot as plt\n    >>> fig, (ax_orig, ax_mag, ax_ang) = plt.subplots(3, 1, figsize=(6, 15))\n    >>> ax_orig.imshow(ascent, cmap='gray')\n    >>> ax_orig.set_title('Original')\n    >>> ax_orig.set_axis_off()\n    >>> ax_mag.imshow(np.absolute(grad), cmap='gray')\n    >>> ax_mag.set_title('Gradient magnitude')\n    >>> ax_mag.set_axis_off()\n    >>> ax_ang.imshow(np.angle(grad), cmap='hsv') # hsv is cyclic, like angles\n    >>> ax_ang.set_title('Gradient orientation')\n    >>> ax_ang.set_axis_off()\n    >>> fig.show()\n\n    ")
    
    # Assigning a Call to a Name (line 1011):
    
    # Assigning a Call to a Name (line 1011):
    
    # Call to asarray(...): (line 1011)
    # Processing the call arguments (line 1011)
    # Getting the type of 'in1' (line 1011)
    in1_275771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 18), 'in1', False)
    # Processing the call keyword arguments (line 1011)
    kwargs_275772 = {}
    # Getting the type of 'asarray' (line 1011)
    asarray_275770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1011)
    asarray_call_result_275773 = invoke(stypy.reporting.localization.Localization(__file__, 1011, 10), asarray_275770, *[in1_275771], **kwargs_275772)
    
    # Assigning a type to the variable 'in1' (line 1011)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1011, 4), 'in1', asarray_call_result_275773)
    
    # Assigning a Call to a Name (line 1012):
    
    # Assigning a Call to a Name (line 1012):
    
    # Call to asarray(...): (line 1012)
    # Processing the call arguments (line 1012)
    # Getting the type of 'in2' (line 1012)
    in2_275775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 18), 'in2', False)
    # Processing the call keyword arguments (line 1012)
    kwargs_275776 = {}
    # Getting the type of 'asarray' (line 1012)
    asarray_275774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1012)
    asarray_call_result_275777 = invoke(stypy.reporting.localization.Localization(__file__, 1012, 10), asarray_275774, *[in2_275775], **kwargs_275776)
    
    # Assigning a type to the variable 'in2' (line 1012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 4), 'in2', asarray_call_result_275777)
    
    
    
    # Getting the type of 'in1' (line 1014)
    in1_275778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 11), 'in1')
    # Obtaining the member 'ndim' of a type (line 1014)
    ndim_275779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 11), in1_275778, 'ndim')
    # Getting the type of 'in2' (line 1014)
    in2_275780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 23), 'in2')
    # Obtaining the member 'ndim' of a type (line 1014)
    ndim_275781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 23), in2_275780, 'ndim')
    # Applying the binary operator '==' (line 1014)
    result_eq_275782 = python_operator(stypy.reporting.localization.Localization(__file__, 1014, 11), '==', ndim_275779, ndim_275781)
    int_275783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1014, 35), 'int')
    # Applying the binary operator '==' (line 1014)
    result_eq_275784 = python_operator(stypy.reporting.localization.Localization(__file__, 1014, 11), '==', ndim_275781, int_275783)
    # Applying the binary operator '&' (line 1014)
    result_and__275785 = python_operator(stypy.reporting.localization.Localization(__file__, 1014, 11), '&', result_eq_275782, result_eq_275784)
    
    # Applying the 'not' unary operator (line 1014)
    result_not__275786 = python_operator(stypy.reporting.localization.Localization(__file__, 1014, 7), 'not', result_and__275785)
    
    # Testing the type of an if condition (line 1014)
    if_condition_275787 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1014, 4), result_not__275786)
    # Assigning a type to the variable 'if_condition_275787' (line 1014)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1014, 4), 'if_condition_275787', if_condition_275787)
    # SSA begins for if statement (line 1014)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1015)
    # Processing the call arguments (line 1015)
    str_275789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1015, 25), 'str', 'convolve2d inputs must both be 2D arrays')
    # Processing the call keyword arguments (line 1015)
    kwargs_275790 = {}
    # Getting the type of 'ValueError' (line 1015)
    ValueError_275788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1015)
    ValueError_call_result_275791 = invoke(stypy.reporting.localization.Localization(__file__, 1015, 14), ValueError_275788, *[str_275789], **kwargs_275790)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1015, 8), ValueError_call_result_275791, 'raise parameter', BaseException)
    # SSA join for if statement (line 1014)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to _inputs_swap_needed(...): (line 1017)
    # Processing the call arguments (line 1017)
    # Getting the type of 'mode' (line 1017)
    mode_275793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 27), 'mode', False)
    # Getting the type of 'in1' (line 1017)
    in1_275794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 33), 'in1', False)
    # Obtaining the member 'shape' of a type (line 1017)
    shape_275795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 33), in1_275794, 'shape')
    # Getting the type of 'in2' (line 1017)
    in2_275796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 44), 'in2', False)
    # Obtaining the member 'shape' of a type (line 1017)
    shape_275797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1017, 44), in2_275796, 'shape')
    # Processing the call keyword arguments (line 1017)
    kwargs_275798 = {}
    # Getting the type of '_inputs_swap_needed' (line 1017)
    _inputs_swap_needed_275792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 7), '_inputs_swap_needed', False)
    # Calling _inputs_swap_needed(args, kwargs) (line 1017)
    _inputs_swap_needed_call_result_275799 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 7), _inputs_swap_needed_275792, *[mode_275793, shape_275795, shape_275797], **kwargs_275798)
    
    # Testing the type of an if condition (line 1017)
    if_condition_275800 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1017, 4), _inputs_swap_needed_call_result_275799)
    # Assigning a type to the variable 'if_condition_275800' (line 1017)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 4), 'if_condition_275800', if_condition_275800)
    # SSA begins for if statement (line 1017)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 1018):
    
    # Assigning a Name to a Name (line 1018):
    # Getting the type of 'in2' (line 1018)
    in2_275801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 19), 'in2')
    # Assigning a type to the variable 'tuple_assignment_274316' (line 1018)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'tuple_assignment_274316', in2_275801)
    
    # Assigning a Name to a Name (line 1018):
    # Getting the type of 'in1' (line 1018)
    in1_275802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 24), 'in1')
    # Assigning a type to the variable 'tuple_assignment_274317' (line 1018)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'tuple_assignment_274317', in1_275802)
    
    # Assigning a Name to a Name (line 1018):
    # Getting the type of 'tuple_assignment_274316' (line 1018)
    tuple_assignment_274316_275803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'tuple_assignment_274316')
    # Assigning a type to the variable 'in1' (line 1018)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'in1', tuple_assignment_274316_275803)
    
    # Assigning a Name to a Name (line 1018):
    # Getting the type of 'tuple_assignment_274317' (line 1018)
    tuple_assignment_274317_275804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'tuple_assignment_274317')
    # Assigning a type to the variable 'in2' (line 1018)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 13), 'in2', tuple_assignment_274317_275804)
    # SSA join for if statement (line 1017)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1020):
    
    # Assigning a Call to a Name (line 1020):
    
    # Call to _valfrommode(...): (line 1020)
    # Processing the call arguments (line 1020)
    # Getting the type of 'mode' (line 1020)
    mode_275806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 23), 'mode', False)
    # Processing the call keyword arguments (line 1020)
    kwargs_275807 = {}
    # Getting the type of '_valfrommode' (line 1020)
    _valfrommode_275805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 10), '_valfrommode', False)
    # Calling _valfrommode(args, kwargs) (line 1020)
    _valfrommode_call_result_275808 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 10), _valfrommode_275805, *[mode_275806], **kwargs_275807)
    
    # Assigning a type to the variable 'val' (line 1020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1020, 4), 'val', _valfrommode_call_result_275808)
    
    # Assigning a Call to a Name (line 1021):
    
    # Assigning a Call to a Name (line 1021):
    
    # Call to _bvalfromboundary(...): (line 1021)
    # Processing the call arguments (line 1021)
    # Getting the type of 'boundary' (line 1021)
    boundary_275810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 29), 'boundary', False)
    # Processing the call keyword arguments (line 1021)
    kwargs_275811 = {}
    # Getting the type of '_bvalfromboundary' (line 1021)
    _bvalfromboundary_275809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 11), '_bvalfromboundary', False)
    # Calling _bvalfromboundary(args, kwargs) (line 1021)
    _bvalfromboundary_call_result_275812 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 11), _bvalfromboundary_275809, *[boundary_275810], **kwargs_275811)
    
    # Assigning a type to the variable 'bval' (line 1021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1021, 4), 'bval', _bvalfromboundary_call_result_275812)
    
    # Assigning a Call to a Name (line 1022):
    
    # Assigning a Call to a Name (line 1022):
    
    # Call to _convolve2d(...): (line 1022)
    # Processing the call arguments (line 1022)
    # Getting the type of 'in1' (line 1022)
    in1_275815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 31), 'in1', False)
    # Getting the type of 'in2' (line 1022)
    in2_275816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 36), 'in2', False)
    int_275817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1022, 41), 'int')
    # Getting the type of 'val' (line 1022)
    val_275818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 44), 'val', False)
    # Getting the type of 'bval' (line 1022)
    bval_275819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 49), 'bval', False)
    # Getting the type of 'fillvalue' (line 1022)
    fillvalue_275820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 55), 'fillvalue', False)
    # Processing the call keyword arguments (line 1022)
    kwargs_275821 = {}
    # Getting the type of 'sigtools' (line 1022)
    sigtools_275813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 10), 'sigtools', False)
    # Obtaining the member '_convolve2d' of a type (line 1022)
    _convolve2d_275814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1022, 10), sigtools_275813, '_convolve2d')
    # Calling _convolve2d(args, kwargs) (line 1022)
    _convolve2d_call_result_275822 = invoke(stypy.reporting.localization.Localization(__file__, 1022, 10), _convolve2d_275814, *[in1_275815, in2_275816, int_275817, val_275818, bval_275819, fillvalue_275820], **kwargs_275821)
    
    # Assigning a type to the variable 'out' (line 1022)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1022, 4), 'out', _convolve2d_call_result_275822)
    # Getting the type of 'out' (line 1023)
    out_275823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 11), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 1023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 4), 'stypy_return_type', out_275823)
    
    # ################# End of 'convolve2d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'convolve2d' in the type store
    # Getting the type of 'stypy_return_type' (line 935)
    stypy_return_type_275824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275824)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'convolve2d'
    return stypy_return_type_275824

# Assigning a type to the variable 'convolve2d' (line 935)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 0), 'convolve2d', convolve2d)

@norecursion
def correlate2d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_275825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 31), 'str', 'full')
    str_275826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 48), 'str', 'fill')
    int_275827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 66), 'int')
    defaults = [str_275825, str_275826, int_275827]
    # Create a new context for function 'correlate2d'
    module_type_store = module_type_store.open_function_context('correlate2d', 1026, 0, False)
    
    # Passed parameters checking function
    correlate2d.stypy_localization = localization
    correlate2d.stypy_type_of_self = None
    correlate2d.stypy_type_store = module_type_store
    correlate2d.stypy_function_name = 'correlate2d'
    correlate2d.stypy_param_names_list = ['in1', 'in2', 'mode', 'boundary', 'fillvalue']
    correlate2d.stypy_varargs_param_name = None
    correlate2d.stypy_kwargs_param_name = None
    correlate2d.stypy_call_defaults = defaults
    correlate2d.stypy_call_varargs = varargs
    correlate2d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'correlate2d', ['in1', 'in2', 'mode', 'boundary', 'fillvalue'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'correlate2d', localization, ['in1', 'in2', 'mode', 'boundary', 'fillvalue'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'correlate2d(...)' code ##################

    str_275828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, (-1)), 'str', "\n    Cross-correlate two 2-dimensional arrays.\n\n    Cross correlate `in1` and `in2` with output size determined by `mode`, and\n    boundary conditions determined by `boundary` and `fillvalue`.\n\n    Parameters\n    ----------\n    in1 : array_like\n        First input.\n    in2 : array_like\n        Second input. Should have the same number of dimensions as `in1`.\n        If operating in 'valid' mode, either `in1` or `in2` must be\n        at least as large as the other in every dimension.\n    mode : str {'full', 'valid', 'same'}, optional\n        A string indicating the size of the output:\n\n        ``full``\n           The output is the full discrete linear cross-correlation\n           of the inputs. (Default)\n        ``valid``\n           The output consists only of those elements that do not\n           rely on the zero-padding.\n        ``same``\n           The output is the same size as `in1`, centered\n           with respect to the 'full' output.\n\n    boundary : str {'fill', 'wrap', 'symm'}, optional\n        A flag indicating how to handle boundaries:\n\n        ``fill``\n           pad input arrays with fillvalue. (default)\n        ``wrap``\n           circular boundary conditions.\n        ``symm``\n           symmetrical boundary conditions.\n\n    fillvalue : scalar, optional\n        Value to fill pad input arrays with. Default is 0.\n\n    Returns\n    -------\n    correlate2d : ndarray\n        A 2-dimensional array containing a subset of the discrete linear\n        cross-correlation of `in1` with `in2`.\n\n    Examples\n    --------\n    Use 2D cross-correlation to find the location of a template in a noisy\n    image:\n\n    >>> from scipy import signal\n    >>> from scipy import misc\n    >>> face = misc.face(gray=True) - misc.face(gray=True).mean()\n    >>> template = np.copy(face[300:365, 670:750])  # right eye\n    >>> template -= template.mean()\n    >>> face = face + np.random.randn(*face.shape) * 50  # add noise\n    >>> corr = signal.correlate2d(face, template, boundary='symm', mode='same')\n    >>> y, x = np.unravel_index(np.argmax(corr), corr.shape)  # find the match\n\n    >>> import matplotlib.pyplot as plt\n    >>> fig, (ax_orig, ax_template, ax_corr) = plt.subplots(3, 1,\n    ...                                                     figsize=(6, 15))\n    >>> ax_orig.imshow(face, cmap='gray')\n    >>> ax_orig.set_title('Original')\n    >>> ax_orig.set_axis_off()\n    >>> ax_template.imshow(template, cmap='gray')\n    >>> ax_template.set_title('Template')\n    >>> ax_template.set_axis_off()\n    >>> ax_corr.imshow(corr, cmap='gray')\n    >>> ax_corr.set_title('Cross-correlation')\n    >>> ax_corr.set_axis_off()\n    >>> ax_orig.plot(x, y, 'ro')\n    >>> fig.show()\n\n    ")
    
    # Assigning a Call to a Name (line 1103):
    
    # Assigning a Call to a Name (line 1103):
    
    # Call to asarray(...): (line 1103)
    # Processing the call arguments (line 1103)
    # Getting the type of 'in1' (line 1103)
    in1_275830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 18), 'in1', False)
    # Processing the call keyword arguments (line 1103)
    kwargs_275831 = {}
    # Getting the type of 'asarray' (line 1103)
    asarray_275829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1103)
    asarray_call_result_275832 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 10), asarray_275829, *[in1_275830], **kwargs_275831)
    
    # Assigning a type to the variable 'in1' (line 1103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 4), 'in1', asarray_call_result_275832)
    
    # Assigning a Call to a Name (line 1104):
    
    # Assigning a Call to a Name (line 1104):
    
    # Call to asarray(...): (line 1104)
    # Processing the call arguments (line 1104)
    # Getting the type of 'in2' (line 1104)
    in2_275834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 18), 'in2', False)
    # Processing the call keyword arguments (line 1104)
    kwargs_275835 = {}
    # Getting the type of 'asarray' (line 1104)
    asarray_275833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1104)
    asarray_call_result_275836 = invoke(stypy.reporting.localization.Localization(__file__, 1104, 10), asarray_275833, *[in2_275834], **kwargs_275835)
    
    # Assigning a type to the variable 'in2' (line 1104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1104, 4), 'in2', asarray_call_result_275836)
    
    
    
    # Getting the type of 'in1' (line 1106)
    in1_275837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 11), 'in1')
    # Obtaining the member 'ndim' of a type (line 1106)
    ndim_275838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1106, 11), in1_275837, 'ndim')
    # Getting the type of 'in2' (line 1106)
    in2_275839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 23), 'in2')
    # Obtaining the member 'ndim' of a type (line 1106)
    ndim_275840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1106, 23), in2_275839, 'ndim')
    # Applying the binary operator '==' (line 1106)
    result_eq_275841 = python_operator(stypy.reporting.localization.Localization(__file__, 1106, 11), '==', ndim_275838, ndim_275840)
    int_275842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, 35), 'int')
    # Applying the binary operator '==' (line 1106)
    result_eq_275843 = python_operator(stypy.reporting.localization.Localization(__file__, 1106, 11), '==', ndim_275840, int_275842)
    # Applying the binary operator '&' (line 1106)
    result_and__275844 = python_operator(stypy.reporting.localization.Localization(__file__, 1106, 11), '&', result_eq_275841, result_eq_275843)
    
    # Applying the 'not' unary operator (line 1106)
    result_not__275845 = python_operator(stypy.reporting.localization.Localization(__file__, 1106, 7), 'not', result_and__275844)
    
    # Testing the type of an if condition (line 1106)
    if_condition_275846 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1106, 4), result_not__275845)
    # Assigning a type to the variable 'if_condition_275846' (line 1106)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 4), 'if_condition_275846', if_condition_275846)
    # SSA begins for if statement (line 1106)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1107)
    # Processing the call arguments (line 1107)
    str_275848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1107, 25), 'str', 'correlate2d inputs must both be 2D arrays')
    # Processing the call keyword arguments (line 1107)
    kwargs_275849 = {}
    # Getting the type of 'ValueError' (line 1107)
    ValueError_275847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1107)
    ValueError_call_result_275850 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 14), ValueError_275847, *[str_275848], **kwargs_275849)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1107, 8), ValueError_call_result_275850, 'raise parameter', BaseException)
    # SSA join for if statement (line 1106)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1109):
    
    # Assigning a Call to a Name (line 1109):
    
    # Call to _inputs_swap_needed(...): (line 1109)
    # Processing the call arguments (line 1109)
    # Getting the type of 'mode' (line 1109)
    mode_275852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 41), 'mode', False)
    # Getting the type of 'in1' (line 1109)
    in1_275853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 47), 'in1', False)
    # Obtaining the member 'shape' of a type (line 1109)
    shape_275854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 47), in1_275853, 'shape')
    # Getting the type of 'in2' (line 1109)
    in2_275855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 58), 'in2', False)
    # Obtaining the member 'shape' of a type (line 1109)
    shape_275856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 58), in2_275855, 'shape')
    # Processing the call keyword arguments (line 1109)
    kwargs_275857 = {}
    # Getting the type of '_inputs_swap_needed' (line 1109)
    _inputs_swap_needed_275851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 21), '_inputs_swap_needed', False)
    # Calling _inputs_swap_needed(args, kwargs) (line 1109)
    _inputs_swap_needed_call_result_275858 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 21), _inputs_swap_needed_275851, *[mode_275852, shape_275854, shape_275856], **kwargs_275857)
    
    # Assigning a type to the variable 'swapped_inputs' (line 1109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 4), 'swapped_inputs', _inputs_swap_needed_call_result_275858)
    
    # Getting the type of 'swapped_inputs' (line 1110)
    swapped_inputs_275859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 7), 'swapped_inputs')
    # Testing the type of an if condition (line 1110)
    if_condition_275860 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1110, 4), swapped_inputs_275859)
    # Assigning a type to the variable 'if_condition_275860' (line 1110)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 4), 'if_condition_275860', if_condition_275860)
    # SSA begins for if statement (line 1110)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Tuple (line 1111):
    
    # Assigning a Name to a Name (line 1111):
    # Getting the type of 'in2' (line 1111)
    in2_275861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 19), 'in2')
    # Assigning a type to the variable 'tuple_assignment_274318' (line 1111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 8), 'tuple_assignment_274318', in2_275861)
    
    # Assigning a Name to a Name (line 1111):
    # Getting the type of 'in1' (line 1111)
    in1_275862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 24), 'in1')
    # Assigning a type to the variable 'tuple_assignment_274319' (line 1111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 8), 'tuple_assignment_274319', in1_275862)
    
    # Assigning a Name to a Name (line 1111):
    # Getting the type of 'tuple_assignment_274318' (line 1111)
    tuple_assignment_274318_275863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 8), 'tuple_assignment_274318')
    # Assigning a type to the variable 'in1' (line 1111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 8), 'in1', tuple_assignment_274318_275863)
    
    # Assigning a Name to a Name (line 1111):
    # Getting the type of 'tuple_assignment_274319' (line 1111)
    tuple_assignment_274319_275864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 8), 'tuple_assignment_274319')
    # Assigning a type to the variable 'in2' (line 1111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 13), 'in2', tuple_assignment_274319_275864)
    # SSA join for if statement (line 1110)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1113):
    
    # Assigning a Call to a Name (line 1113):
    
    # Call to _valfrommode(...): (line 1113)
    # Processing the call arguments (line 1113)
    # Getting the type of 'mode' (line 1113)
    mode_275866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 23), 'mode', False)
    # Processing the call keyword arguments (line 1113)
    kwargs_275867 = {}
    # Getting the type of '_valfrommode' (line 1113)
    _valfrommode_275865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 10), '_valfrommode', False)
    # Calling _valfrommode(args, kwargs) (line 1113)
    _valfrommode_call_result_275868 = invoke(stypy.reporting.localization.Localization(__file__, 1113, 10), _valfrommode_275865, *[mode_275866], **kwargs_275867)
    
    # Assigning a type to the variable 'val' (line 1113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 4), 'val', _valfrommode_call_result_275868)
    
    # Assigning a Call to a Name (line 1114):
    
    # Assigning a Call to a Name (line 1114):
    
    # Call to _bvalfromboundary(...): (line 1114)
    # Processing the call arguments (line 1114)
    # Getting the type of 'boundary' (line 1114)
    boundary_275870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 29), 'boundary', False)
    # Processing the call keyword arguments (line 1114)
    kwargs_275871 = {}
    # Getting the type of '_bvalfromboundary' (line 1114)
    _bvalfromboundary_275869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 11), '_bvalfromboundary', False)
    # Calling _bvalfromboundary(args, kwargs) (line 1114)
    _bvalfromboundary_call_result_275872 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 11), _bvalfromboundary_275869, *[boundary_275870], **kwargs_275871)
    
    # Assigning a type to the variable 'bval' (line 1114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 4), 'bval', _bvalfromboundary_call_result_275872)
    
    # Assigning a Call to a Name (line 1115):
    
    # Assigning a Call to a Name (line 1115):
    
    # Call to _convolve2d(...): (line 1115)
    # Processing the call arguments (line 1115)
    # Getting the type of 'in1' (line 1115)
    in1_275875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 31), 'in1', False)
    # Getting the type of 'in2' (line 1115)
    in2_275876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 36), 'in2', False)
    int_275877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1115, 41), 'int')
    # Getting the type of 'val' (line 1115)
    val_275878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 44), 'val', False)
    # Getting the type of 'bval' (line 1115)
    bval_275879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 49), 'bval', False)
    # Getting the type of 'fillvalue' (line 1115)
    fillvalue_275880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 55), 'fillvalue', False)
    # Processing the call keyword arguments (line 1115)
    kwargs_275881 = {}
    # Getting the type of 'sigtools' (line 1115)
    sigtools_275873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 10), 'sigtools', False)
    # Obtaining the member '_convolve2d' of a type (line 1115)
    _convolve2d_275874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 10), sigtools_275873, '_convolve2d')
    # Calling _convolve2d(args, kwargs) (line 1115)
    _convolve2d_call_result_275882 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 10), _convolve2d_275874, *[in1_275875, in2_275876, int_275877, val_275878, bval_275879, fillvalue_275880], **kwargs_275881)
    
    # Assigning a type to the variable 'out' (line 1115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 4), 'out', _convolve2d_call_result_275882)
    
    # Getting the type of 'swapped_inputs' (line 1117)
    swapped_inputs_275883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 7), 'swapped_inputs')
    # Testing the type of an if condition (line 1117)
    if_condition_275884 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1117, 4), swapped_inputs_275883)
    # Assigning a type to the variable 'if_condition_275884' (line 1117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1117, 4), 'if_condition_275884', if_condition_275884)
    # SSA begins for if statement (line 1117)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1118):
    
    # Assigning a Subscript to a Name (line 1118):
    
    # Obtaining the type of the subscript
    int_275885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, 20), 'int')
    slice_275886 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1118, 14), None, None, int_275885)
    int_275887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, 26), 'int')
    slice_275888 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1118, 14), None, None, int_275887)
    # Getting the type of 'out' (line 1118)
    out_275889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 14), 'out')
    # Obtaining the member '__getitem__' of a type (line 1118)
    getitem___275890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 14), out_275889, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1118)
    subscript_call_result_275891 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 14), getitem___275890, (slice_275886, slice_275888))
    
    # Assigning a type to the variable 'out' (line 1118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 8), 'out', subscript_call_result_275891)
    # SSA join for if statement (line 1117)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'out' (line 1120)
    out_275892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 11), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 1120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 4), 'stypy_return_type', out_275892)
    
    # ################# End of 'correlate2d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'correlate2d' in the type store
    # Getting the type of 'stypy_return_type' (line 1026)
    stypy_return_type_275893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275893)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'correlate2d'
    return stypy_return_type_275893

# Assigning a type to the variable 'correlate2d' (line 1026)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 0), 'correlate2d', correlate2d)

@norecursion
def medfilt2d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_275894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 33), 'int')
    defaults = [int_275894]
    # Create a new context for function 'medfilt2d'
    module_type_store = module_type_store.open_function_context('medfilt2d', 1123, 0, False)
    
    # Passed parameters checking function
    medfilt2d.stypy_localization = localization
    medfilt2d.stypy_type_of_self = None
    medfilt2d.stypy_type_store = module_type_store
    medfilt2d.stypy_function_name = 'medfilt2d'
    medfilt2d.stypy_param_names_list = ['input', 'kernel_size']
    medfilt2d.stypy_varargs_param_name = None
    medfilt2d.stypy_kwargs_param_name = None
    medfilt2d.stypy_call_defaults = defaults
    medfilt2d.stypy_call_varargs = varargs
    medfilt2d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'medfilt2d', ['input', 'kernel_size'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'medfilt2d', localization, ['input', 'kernel_size'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'medfilt2d(...)' code ##################

    str_275895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, (-1)), 'str', '\n    Median filter a 2-dimensional array.\n\n    Apply a median filter to the `input` array using a local window-size\n    given by `kernel_size` (must be odd).\n\n    Parameters\n    ----------\n    input : array_like\n        A 2-dimensional input array.\n    kernel_size : array_like, optional\n        A scalar or a list of length 2, giving the size of the\n        median filter window in each dimension.  Elements of\n        `kernel_size` should be odd.  If `kernel_size` is a scalar,\n        then this scalar is used as the size in each dimension.\n        Default is a kernel of size (3, 3).\n\n    Returns\n    -------\n    out : ndarray\n        An array the same size as input containing the median filtered\n        result.\n\n    ')
    
    # Assigning a Call to a Name (line 1148):
    
    # Assigning a Call to a Name (line 1148):
    
    # Call to asarray(...): (line 1148)
    # Processing the call arguments (line 1148)
    # Getting the type of 'input' (line 1148)
    input_275897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 20), 'input', False)
    # Processing the call keyword arguments (line 1148)
    kwargs_275898 = {}
    # Getting the type of 'asarray' (line 1148)
    asarray_275896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 12), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1148)
    asarray_call_result_275899 = invoke(stypy.reporting.localization.Localization(__file__, 1148, 12), asarray_275896, *[input_275897], **kwargs_275898)
    
    # Assigning a type to the variable 'image' (line 1148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 4), 'image', asarray_call_result_275899)
    
    # Type idiom detected: calculating its left and rigth part (line 1149)
    # Getting the type of 'kernel_size' (line 1149)
    kernel_size_275900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 7), 'kernel_size')
    # Getting the type of 'None' (line 1149)
    None_275901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 22), 'None')
    
    (may_be_275902, more_types_in_union_275903) = may_be_none(kernel_size_275900, None_275901)

    if may_be_275902:

        if more_types_in_union_275903:
            # Runtime conditional SSA (line 1149)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 1150):
        
        # Assigning a BinOp to a Name (line 1150):
        
        # Obtaining an instance of the builtin type 'list' (line 1150)
        list_275904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1150)
        # Adding element type (line 1150)
        int_275905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 23), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1150, 22), list_275904, int_275905)
        
        int_275906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 28), 'int')
        # Applying the binary operator '*' (line 1150)
        result_mul_275907 = python_operator(stypy.reporting.localization.Localization(__file__, 1150, 22), '*', list_275904, int_275906)
        
        # Assigning a type to the variable 'kernel_size' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'kernel_size', result_mul_275907)

        if more_types_in_union_275903:
            # SSA join for if statement (line 1149)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1151):
    
    # Assigning a Call to a Name (line 1151):
    
    # Call to asarray(...): (line 1151)
    # Processing the call arguments (line 1151)
    # Getting the type of 'kernel_size' (line 1151)
    kernel_size_275909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 26), 'kernel_size', False)
    # Processing the call keyword arguments (line 1151)
    kwargs_275910 = {}
    # Getting the type of 'asarray' (line 1151)
    asarray_275908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 18), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1151)
    asarray_call_result_275911 = invoke(stypy.reporting.localization.Localization(__file__, 1151, 18), asarray_275908, *[kernel_size_275909], **kwargs_275910)
    
    # Assigning a type to the variable 'kernel_size' (line 1151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1151, 4), 'kernel_size', asarray_call_result_275911)
    
    
    # Getting the type of 'kernel_size' (line 1152)
    kernel_size_275912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 7), 'kernel_size')
    # Obtaining the member 'shape' of a type (line 1152)
    shape_275913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 7), kernel_size_275912, 'shape')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1152)
    tuple_275914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1152, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1152)
    
    # Applying the binary operator '==' (line 1152)
    result_eq_275915 = python_operator(stypy.reporting.localization.Localization(__file__, 1152, 7), '==', shape_275913, tuple_275914)
    
    # Testing the type of an if condition (line 1152)
    if_condition_275916 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1152, 4), result_eq_275915)
    # Assigning a type to the variable 'if_condition_275916' (line 1152)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1152, 4), 'if_condition_275916', if_condition_275916)
    # SSA begins for if statement (line 1152)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1153):
    
    # Assigning a Call to a Name (line 1153):
    
    # Call to repeat(...): (line 1153)
    # Processing the call arguments (line 1153)
    
    # Call to item(...): (line 1153)
    # Processing the call keyword arguments (line 1153)
    kwargs_275921 = {}
    # Getting the type of 'kernel_size' (line 1153)
    kernel_size_275919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 32), 'kernel_size', False)
    # Obtaining the member 'item' of a type (line 1153)
    item_275920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 32), kernel_size_275919, 'item')
    # Calling item(args, kwargs) (line 1153)
    item_call_result_275922 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 32), item_275920, *[], **kwargs_275921)
    
    int_275923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 52), 'int')
    # Processing the call keyword arguments (line 1153)
    kwargs_275924 = {}
    # Getting the type of 'np' (line 1153)
    np_275917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 22), 'np', False)
    # Obtaining the member 'repeat' of a type (line 1153)
    repeat_275918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 22), np_275917, 'repeat')
    # Calling repeat(args, kwargs) (line 1153)
    repeat_call_result_275925 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 22), repeat_275918, *[item_call_result_275922, int_275923], **kwargs_275924)
    
    # Assigning a type to the variable 'kernel_size' (line 1153)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 8), 'kernel_size', repeat_call_result_275925)
    # SSA join for if statement (line 1152)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'kernel_size' (line 1155)
    kernel_size_275926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 16), 'kernel_size')
    # Testing the type of a for loop iterable (line 1155)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1155, 4), kernel_size_275926)
    # Getting the type of the for loop variable (line 1155)
    for_loop_var_275927 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1155, 4), kernel_size_275926)
    # Assigning a type to the variable 'size' (line 1155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 4), 'size', for_loop_var_275927)
    # SSA begins for a for statement (line 1155)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'size' (line 1156)
    size_275928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 12), 'size')
    int_275929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1156, 19), 'int')
    # Applying the binary operator '%' (line 1156)
    result_mod_275930 = python_operator(stypy.reporting.localization.Localization(__file__, 1156, 12), '%', size_275928, int_275929)
    
    int_275931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1156, 25), 'int')
    # Applying the binary operator '!=' (line 1156)
    result_ne_275932 = python_operator(stypy.reporting.localization.Localization(__file__, 1156, 11), '!=', result_mod_275930, int_275931)
    
    # Testing the type of an if condition (line 1156)
    if_condition_275933 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1156, 8), result_ne_275932)
    # Assigning a type to the variable 'if_condition_275933' (line 1156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1156, 8), 'if_condition_275933', if_condition_275933)
    # SSA begins for if statement (line 1156)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1157)
    # Processing the call arguments (line 1157)
    str_275935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1157, 29), 'str', 'Each element of kernel_size should be odd.')
    # Processing the call keyword arguments (line 1157)
    kwargs_275936 = {}
    # Getting the type of 'ValueError' (line 1157)
    ValueError_275934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1157)
    ValueError_call_result_275937 = invoke(stypy.reporting.localization.Localization(__file__, 1157, 18), ValueError_275934, *[str_275935], **kwargs_275936)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1157, 12), ValueError_call_result_275937, 'raise parameter', BaseException)
    # SSA join for if statement (line 1156)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _medfilt2d(...): (line 1159)
    # Processing the call arguments (line 1159)
    # Getting the type of 'image' (line 1159)
    image_275940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 31), 'image', False)
    # Getting the type of 'kernel_size' (line 1159)
    kernel_size_275941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 38), 'kernel_size', False)
    # Processing the call keyword arguments (line 1159)
    kwargs_275942 = {}
    # Getting the type of 'sigtools' (line 1159)
    sigtools_275938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 11), 'sigtools', False)
    # Obtaining the member '_medfilt2d' of a type (line 1159)
    _medfilt2d_275939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 11), sigtools_275938, '_medfilt2d')
    # Calling _medfilt2d(args, kwargs) (line 1159)
    _medfilt2d_call_result_275943 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 11), _medfilt2d_275939, *[image_275940, kernel_size_275941], **kwargs_275942)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 4), 'stypy_return_type', _medfilt2d_call_result_275943)
    
    # ################# End of 'medfilt2d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'medfilt2d' in the type store
    # Getting the type of 'stypy_return_type' (line 1123)
    stypy_return_type_275944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_275944)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'medfilt2d'
    return stypy_return_type_275944

# Assigning a type to the variable 'medfilt2d' (line 1123)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 0), 'medfilt2d', medfilt2d)

@norecursion
def lfilter(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_275945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1162, 26), 'int')
    # Getting the type of 'None' (line 1162)
    None_275946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 33), 'None')
    defaults = [int_275945, None_275946]
    # Create a new context for function 'lfilter'
    module_type_store = module_type_store.open_function_context('lfilter', 1162, 0, False)
    
    # Passed parameters checking function
    lfilter.stypy_localization = localization
    lfilter.stypy_type_of_self = None
    lfilter.stypy_type_store = module_type_store
    lfilter.stypy_function_name = 'lfilter'
    lfilter.stypy_param_names_list = ['b', 'a', 'x', 'axis', 'zi']
    lfilter.stypy_varargs_param_name = None
    lfilter.stypy_kwargs_param_name = None
    lfilter.stypy_call_defaults = defaults
    lfilter.stypy_call_varargs = varargs
    lfilter.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lfilter', ['b', 'a', 'x', 'axis', 'zi'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lfilter', localization, ['b', 'a', 'x', 'axis', 'zi'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lfilter(...)' code ##################

    str_275947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1279, (-1)), 'str', "\n    Filter data along one-dimension with an IIR or FIR filter.\n\n    Filter a data sequence, `x`, using a digital filter.  This works for many\n    fundamental data types (including Object type).  The filter is a direct\n    form II transposed implementation of the standard difference equation\n    (see Notes).\n\n    Parameters\n    ----------\n    b : array_like\n        The numerator coefficient vector in a 1-D sequence.\n    a : array_like\n        The denominator coefficient vector in a 1-D sequence.  If ``a[0]``\n        is not 1, then both `a` and `b` are normalized by ``a[0]``.\n    x : array_like\n        An N-dimensional input array.\n    axis : int, optional\n        The axis of the input data array along which to apply the\n        linear filter. The filter is applied to each subarray along\n        this axis.  Default is -1.\n    zi : array_like, optional\n        Initial conditions for the filter delays.  It is a vector\n        (or array of vectors for an N-dimensional input) of length\n        ``max(len(a), len(b)) - 1``.  If `zi` is None or is not given then\n        initial rest is assumed.  See `lfiltic` for more information.\n\n    Returns\n    -------\n    y : array\n        The output of the digital filter.\n    zf : array, optional\n        If `zi` is None, this is not returned, otherwise, `zf` holds the\n        final filter delay values.\n\n    See Also\n    --------\n    lfiltic : Construct initial conditions for `lfilter`.\n    lfilter_zi : Compute initial state (steady state of step response) for\n                 `lfilter`.\n    filtfilt : A forward-backward filter, to obtain a filter with linear phase.\n    savgol_filter : A Savitzky-Golay filter.\n    sosfilt: Filter data using cascaded second-order sections.\n    sosfiltfilt: A forward-backward filter using second-order sections.\n\n    Notes\n    -----\n    The filter function is implemented as a direct II transposed structure.\n    This means that the filter implements::\n\n       a[0]*y[n] = b[0]*x[n] + b[1]*x[n-1] + ... + b[M]*x[n-M]\n                             - a[1]*y[n-1] - ... - a[N]*y[n-N]\n\n    where `M` is the degree of the numerator, `N` is the degree of the\n    denominator, and `n` is the sample number.  It is implemented using\n    the following difference equations (assuming M = N)::\n\n         a[0]*y[n] = b[0] * x[n]               + d[0][n-1]\n           d[0][n] = b[1] * x[n] - a[1] * y[n] + d[1][n-1]\n           d[1][n] = b[2] * x[n] - a[2] * y[n] + d[2][n-1]\n         ...\n         d[N-2][n] = b[N-1]*x[n] - a[N-1]*y[n] + d[N-1][n-1]\n         d[N-1][n] = b[N] * x[n] - a[N] * y[n]\n\n    where `d` are the state variables.\n\n    The rational transfer function describing this filter in the\n    z-transform domain is::\n\n                             -1              -M\n                 b[0] + b[1]z  + ... + b[M] z\n         Y(z) = -------------------------------- X(z)\n                             -1              -N\n                 a[0] + a[1]z  + ... + a[N] z\n\n    Examples\n    --------\n    Generate a noisy signal to be filtered:\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n    >>> t = np.linspace(-1, 1, 201)\n    >>> x = (np.sin(2*np.pi*0.75*t*(1-t) + 2.1) +\n    ...      0.1*np.sin(2*np.pi*1.25*t + 1) +\n    ...      0.18*np.cos(2*np.pi*3.85*t))\n    >>> xn = x + np.random.randn(len(t)) * 0.08\n\n    Create an order 3 lowpass butterworth filter:\n\n    >>> b, a = signal.butter(3, 0.05)\n\n    Apply the filter to xn.  Use lfilter_zi to choose the initial condition of\n    the filter:\n\n    >>> zi = signal.lfilter_zi(b, a)\n    >>> z, _ = signal.lfilter(b, a, xn, zi=zi*xn[0])\n\n    Apply the filter again, to have a result filtered at an order the same as\n    filtfilt:\n\n    >>> z2, _ = signal.lfilter(b, a, z, zi=zi*z[0])\n\n    Use filtfilt to apply the filter:\n\n    >>> y = signal.filtfilt(b, a, xn)\n\n    Plot the original signal and the various filtered versions:\n\n    >>> plt.figure\n    >>> plt.plot(t, xn, 'b', alpha=0.75)\n    >>> plt.plot(t, z, 'r--', t, z2, 'r', t, y, 'k')\n    >>> plt.legend(('noisy signal', 'lfilter, once', 'lfilter, twice',\n    ...             'filtfilt'), loc='best')\n    >>> plt.grid(True)\n    >>> plt.show()\n\n    ")
    
    # Assigning a Call to a Name (line 1280):
    
    # Assigning a Call to a Name (line 1280):
    
    # Call to atleast_1d(...): (line 1280)
    # Processing the call arguments (line 1280)
    # Getting the type of 'a' (line 1280)
    a_275950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 22), 'a', False)
    # Processing the call keyword arguments (line 1280)
    kwargs_275951 = {}
    # Getting the type of 'np' (line 1280)
    np_275948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 8), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 1280)
    atleast_1d_275949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 8), np_275948, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 1280)
    atleast_1d_call_result_275952 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 8), atleast_1d_275949, *[a_275950], **kwargs_275951)
    
    # Assigning a type to the variable 'a' (line 1280)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 4), 'a', atleast_1d_call_result_275952)
    
    
    
    # Call to len(...): (line 1281)
    # Processing the call arguments (line 1281)
    # Getting the type of 'a' (line 1281)
    a_275954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 11), 'a', False)
    # Processing the call keyword arguments (line 1281)
    kwargs_275955 = {}
    # Getting the type of 'len' (line 1281)
    len_275953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 7), 'len', False)
    # Calling len(args, kwargs) (line 1281)
    len_call_result_275956 = invoke(stypy.reporting.localization.Localization(__file__, 1281, 7), len_275953, *[a_275954], **kwargs_275955)
    
    int_275957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1281, 17), 'int')
    # Applying the binary operator '==' (line 1281)
    result_eq_275958 = python_operator(stypy.reporting.localization.Localization(__file__, 1281, 7), '==', len_call_result_275956, int_275957)
    
    # Testing the type of an if condition (line 1281)
    if_condition_275959 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1281, 4), result_eq_275958)
    # Assigning a type to the variable 'if_condition_275959' (line 1281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 4), 'if_condition_275959', if_condition_275959)
    # SSA begins for if statement (line 1281)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1285):
    
    # Assigning a Call to a Name (line 1285):
    
    # Call to asarray(...): (line 1285)
    # Processing the call arguments (line 1285)
    # Getting the type of 'b' (line 1285)
    b_275962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 23), 'b', False)
    # Processing the call keyword arguments (line 1285)
    kwargs_275963 = {}
    # Getting the type of 'np' (line 1285)
    np_275960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1285)
    asarray_275961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 12), np_275960, 'asarray')
    # Calling asarray(args, kwargs) (line 1285)
    asarray_call_result_275964 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 12), asarray_275961, *[b_275962], **kwargs_275963)
    
    # Assigning a type to the variable 'b' (line 1285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 8), 'b', asarray_call_result_275964)
    
    # Assigning a Call to a Name (line 1286):
    
    # Assigning a Call to a Name (line 1286):
    
    # Call to asarray(...): (line 1286)
    # Processing the call arguments (line 1286)
    # Getting the type of 'a' (line 1286)
    a_275967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 23), 'a', False)
    # Processing the call keyword arguments (line 1286)
    kwargs_275968 = {}
    # Getting the type of 'np' (line 1286)
    np_275965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1286)
    asarray_275966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 12), np_275965, 'asarray')
    # Calling asarray(args, kwargs) (line 1286)
    asarray_call_result_275969 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 12), asarray_275966, *[a_275967], **kwargs_275968)
    
    # Assigning a type to the variable 'a' (line 1286)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 8), 'a', asarray_call_result_275969)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'b' (line 1287)
    b_275970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 11), 'b')
    # Obtaining the member 'ndim' of a type (line 1287)
    ndim_275971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 11), b_275970, 'ndim')
    int_275972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 21), 'int')
    # Applying the binary operator '!=' (line 1287)
    result_ne_275973 = python_operator(stypy.reporting.localization.Localization(__file__, 1287, 11), '!=', ndim_275971, int_275972)
    
    
    # Getting the type of 'a' (line 1287)
    a_275974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 27), 'a')
    # Obtaining the member 'ndim' of a type (line 1287)
    ndim_275975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 27), a_275974, 'ndim')
    int_275976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 37), 'int')
    # Applying the binary operator '!=' (line 1287)
    result_ne_275977 = python_operator(stypy.reporting.localization.Localization(__file__, 1287, 27), '!=', ndim_275975, int_275976)
    
    # Applying the binary operator 'and' (line 1287)
    result_and_keyword_275978 = python_operator(stypy.reporting.localization.Localization(__file__, 1287, 11), 'and', result_ne_275973, result_ne_275977)
    
    # Testing the type of an if condition (line 1287)
    if_condition_275979 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1287, 8), result_and_keyword_275978)
    # Assigning a type to the variable 'if_condition_275979' (line 1287)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 8), 'if_condition_275979', if_condition_275979)
    # SSA begins for if statement (line 1287)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1288)
    # Processing the call arguments (line 1288)
    str_275981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, 29), 'str', 'object of too small depth for desired array')
    # Processing the call keyword arguments (line 1288)
    kwargs_275982 = {}
    # Getting the type of 'ValueError' (line 1288)
    ValueError_275980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1288)
    ValueError_call_result_275983 = invoke(stypy.reporting.localization.Localization(__file__, 1288, 18), ValueError_275980, *[str_275981], **kwargs_275982)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1288, 12), ValueError_call_result_275983, 'raise parameter', BaseException)
    # SSA join for if statement (line 1287)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1289):
    
    # Assigning a Call to a Name (line 1289):
    
    # Call to asarray(...): (line 1289)
    # Processing the call arguments (line 1289)
    # Getting the type of 'x' (line 1289)
    x_275986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 23), 'x', False)
    # Processing the call keyword arguments (line 1289)
    kwargs_275987 = {}
    # Getting the type of 'np' (line 1289)
    np_275984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1289)
    asarray_275985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 12), np_275984, 'asarray')
    # Calling asarray(args, kwargs) (line 1289)
    asarray_call_result_275988 = invoke(stypy.reporting.localization.Localization(__file__, 1289, 12), asarray_275985, *[x_275986], **kwargs_275987)
    
    # Assigning a type to the variable 'x' (line 1289)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'x', asarray_call_result_275988)
    
    # Assigning a List to a Name (line 1290):
    
    # Assigning a List to a Name (line 1290):
    
    # Obtaining an instance of the builtin type 'list' (line 1290)
    list_275989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1290, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1290)
    # Adding element type (line 1290)
    # Getting the type of 'b' (line 1290)
    b_275990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 18), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1290, 17), list_275989, b_275990)
    # Adding element type (line 1290)
    # Getting the type of 'a' (line 1290)
    a_275991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 21), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1290, 17), list_275989, a_275991)
    # Adding element type (line 1290)
    # Getting the type of 'x' (line 1290)
    x_275992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 24), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1290, 17), list_275989, x_275992)
    
    # Assigning a type to the variable 'inputs' (line 1290)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'inputs', list_275989)
    
    # Type idiom detected: calculating its left and rigth part (line 1291)
    # Getting the type of 'zi' (line 1291)
    zi_275993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 8), 'zi')
    # Getting the type of 'None' (line 1291)
    None_275994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 21), 'None')
    
    (may_be_275995, more_types_in_union_275996) = may_not_be_none(zi_275993, None_275994)

    if may_be_275995:

        if more_types_in_union_275996:
            # Runtime conditional SSA (line 1291)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1294):
        
        # Assigning a Call to a Name (line 1294):
        
        # Call to asarray(...): (line 1294)
        # Processing the call arguments (line 1294)
        # Getting the type of 'zi' (line 1294)
        zi_275999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 28), 'zi', False)
        # Processing the call keyword arguments (line 1294)
        kwargs_276000 = {}
        # Getting the type of 'np' (line 1294)
        np_275997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 17), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1294)
        asarray_275998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 17), np_275997, 'asarray')
        # Calling asarray(args, kwargs) (line 1294)
        asarray_call_result_276001 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 17), asarray_275998, *[zi_275999], **kwargs_276000)
        
        # Assigning a type to the variable 'zi' (line 1294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 12), 'zi', asarray_call_result_276001)
        
        
        # Getting the type of 'zi' (line 1295)
        zi_276002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 15), 'zi')
        # Obtaining the member 'ndim' of a type (line 1295)
        ndim_276003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 15), zi_276002, 'ndim')
        # Getting the type of 'x' (line 1295)
        x_276004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 26), 'x')
        # Obtaining the member 'ndim' of a type (line 1295)
        ndim_276005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 26), x_276004, 'ndim')
        # Applying the binary operator '!=' (line 1295)
        result_ne_276006 = python_operator(stypy.reporting.localization.Localization(__file__, 1295, 15), '!=', ndim_276003, ndim_276005)
        
        # Testing the type of an if condition (line 1295)
        if_condition_276007 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1295, 12), result_ne_276006)
        # Assigning a type to the variable 'if_condition_276007' (line 1295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 12), 'if_condition_276007', if_condition_276007)
        # SSA begins for if statement (line 1295)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1296)
        # Processing the call arguments (line 1296)
        str_276009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1296, 33), 'str', 'object of too small depth for desired array')
        # Processing the call keyword arguments (line 1296)
        kwargs_276010 = {}
        # Getting the type of 'ValueError' (line 1296)
        ValueError_276008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1296)
        ValueError_call_result_276011 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 22), ValueError_276008, *[str_276009], **kwargs_276010)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1296, 16), ValueError_call_result_276011, 'raise parameter', BaseException)
        # SSA join for if statement (line 1295)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1297):
        
        # Assigning a Call to a Name (line 1297):
        
        # Call to list(...): (line 1297)
        # Processing the call arguments (line 1297)
        # Getting the type of 'x' (line 1297)
        x_276013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 34), 'x', False)
        # Obtaining the member 'shape' of a type (line 1297)
        shape_276014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 34), x_276013, 'shape')
        # Processing the call keyword arguments (line 1297)
        kwargs_276015 = {}
        # Getting the type of 'list' (line 1297)
        list_276012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 29), 'list', False)
        # Calling list(args, kwargs) (line 1297)
        list_call_result_276016 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 29), list_276012, *[shape_276014], **kwargs_276015)
        
        # Assigning a type to the variable 'expected_shape' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'expected_shape', list_call_result_276016)
        
        # Assigning a BinOp to a Subscript (line 1298):
        
        # Assigning a BinOp to a Subscript (line 1298):
        
        # Obtaining the type of the subscript
        int_276017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 43), 'int')
        # Getting the type of 'b' (line 1298)
        b_276018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 35), 'b')
        # Obtaining the member 'shape' of a type (line 1298)
        shape_276019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 35), b_276018, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1298)
        getitem___276020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 35), shape_276019, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1298)
        subscript_call_result_276021 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 35), getitem___276020, int_276017)
        
        int_276022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 48), 'int')
        # Applying the binary operator '-' (line 1298)
        result_sub_276023 = python_operator(stypy.reporting.localization.Localization(__file__, 1298, 35), '-', subscript_call_result_276021, int_276022)
        
        # Getting the type of 'expected_shape' (line 1298)
        expected_shape_276024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 12), 'expected_shape')
        # Getting the type of 'axis' (line 1298)
        axis_276025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 27), 'axis')
        # Storing an element on a container (line 1298)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1298, 12), expected_shape_276024, (axis_276025, result_sub_276023))
        
        # Assigning a Call to a Name (line 1299):
        
        # Assigning a Call to a Name (line 1299):
        
        # Call to tuple(...): (line 1299)
        # Processing the call arguments (line 1299)
        # Getting the type of 'expected_shape' (line 1299)
        expected_shape_276027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 35), 'expected_shape', False)
        # Processing the call keyword arguments (line 1299)
        kwargs_276028 = {}
        # Getting the type of 'tuple' (line 1299)
        tuple_276026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 29), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1299)
        tuple_call_result_276029 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 29), tuple_276026, *[expected_shape_276027], **kwargs_276028)
        
        # Assigning a type to the variable 'expected_shape' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 12), 'expected_shape', tuple_call_result_276029)
        
        
        # Getting the type of 'zi' (line 1301)
        zi_276030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 15), 'zi')
        # Obtaining the member 'shape' of a type (line 1301)
        shape_276031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 15), zi_276030, 'shape')
        # Getting the type of 'expected_shape' (line 1301)
        expected_shape_276032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 27), 'expected_shape')
        # Applying the binary operator '!=' (line 1301)
        result_ne_276033 = python_operator(stypy.reporting.localization.Localization(__file__, 1301, 15), '!=', shape_276031, expected_shape_276032)
        
        # Testing the type of an if condition (line 1301)
        if_condition_276034 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1301, 12), result_ne_276033)
        # Assigning a type to the variable 'if_condition_276034' (line 1301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 12), 'if_condition_276034', if_condition_276034)
        # SSA begins for if statement (line 1301)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1302):
        
        # Assigning a BinOp to a Name (line 1302):
        # Getting the type of 'zi' (line 1302)
        zi_276035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 26), 'zi')
        # Obtaining the member 'ndim' of a type (line 1302)
        ndim_276036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 26), zi_276035, 'ndim')
        
        # Obtaining an instance of the builtin type 'list' (line 1302)
        list_276037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1302, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1302)
        # Adding element type (line 1302)
        # Getting the type of 'None' (line 1302)
        None_276038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 37), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1302, 36), list_276037, None_276038)
        
        # Applying the binary operator '*' (line 1302)
        result_mul_276039 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 26), '*', ndim_276036, list_276037)
        
        # Assigning a type to the variable 'strides' (line 1302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 16), 'strides', result_mul_276039)
        
        
        # Getting the type of 'axis' (line 1303)
        axis_276040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 19), 'axis')
        int_276041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 26), 'int')
        # Applying the binary operator '<' (line 1303)
        result_lt_276042 = python_operator(stypy.reporting.localization.Localization(__file__, 1303, 19), '<', axis_276040, int_276041)
        
        # Testing the type of an if condition (line 1303)
        if_condition_276043 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1303, 16), result_lt_276042)
        # Assigning a type to the variable 'if_condition_276043' (line 1303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 16), 'if_condition_276043', if_condition_276043)
        # SSA begins for if statement (line 1303)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'axis' (line 1304)
        axis_276044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 20), 'axis')
        # Getting the type of 'zi' (line 1304)
        zi_276045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 28), 'zi')
        # Obtaining the member 'ndim' of a type (line 1304)
        ndim_276046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 28), zi_276045, 'ndim')
        # Applying the binary operator '+=' (line 1304)
        result_iadd_276047 = python_operator(stypy.reporting.localization.Localization(__file__, 1304, 20), '+=', axis_276044, ndim_276046)
        # Assigning a type to the variable 'axis' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 20), 'axis', result_iadd_276047)
        
        # SSA join for if statement (line 1303)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to range(...): (line 1305)
        # Processing the call arguments (line 1305)
        # Getting the type of 'zi' (line 1305)
        zi_276049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 31), 'zi', False)
        # Obtaining the member 'ndim' of a type (line 1305)
        ndim_276050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 31), zi_276049, 'ndim')
        # Processing the call keyword arguments (line 1305)
        kwargs_276051 = {}
        # Getting the type of 'range' (line 1305)
        range_276048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 25), 'range', False)
        # Calling range(args, kwargs) (line 1305)
        range_call_result_276052 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 25), range_276048, *[ndim_276050], **kwargs_276051)
        
        # Testing the type of a for loop iterable (line 1305)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1305, 16), range_call_result_276052)
        # Getting the type of the for loop variable (line 1305)
        for_loop_var_276053 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1305, 16), range_call_result_276052)
        # Assigning a type to the variable 'k' (line 1305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 16), 'k', for_loop_var_276053)
        # SSA begins for a for statement (line 1305)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'k' (line 1306)
        k_276054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 23), 'k')
        # Getting the type of 'axis' (line 1306)
        axis_276055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 28), 'axis')
        # Applying the binary operator '==' (line 1306)
        result_eq_276056 = python_operator(stypy.reporting.localization.Localization(__file__, 1306, 23), '==', k_276054, axis_276055)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1306)
        k_276057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 46), 'k')
        # Getting the type of 'zi' (line 1306)
        zi_276058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 37), 'zi')
        # Obtaining the member 'shape' of a type (line 1306)
        shape_276059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 37), zi_276058, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1306)
        getitem___276060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 37), shape_276059, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1306)
        subscript_call_result_276061 = invoke(stypy.reporting.localization.Localization(__file__, 1306, 37), getitem___276060, k_276057)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1306)
        k_276062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 67), 'k')
        # Getting the type of 'expected_shape' (line 1306)
        expected_shape_276063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 52), 'expected_shape')
        # Obtaining the member '__getitem__' of a type (line 1306)
        getitem___276064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1306, 52), expected_shape_276063, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1306)
        subscript_call_result_276065 = invoke(stypy.reporting.localization.Localization(__file__, 1306, 52), getitem___276064, k_276062)
        
        # Applying the binary operator '==' (line 1306)
        result_eq_276066 = python_operator(stypy.reporting.localization.Localization(__file__, 1306, 37), '==', subscript_call_result_276061, subscript_call_result_276065)
        
        # Applying the binary operator 'and' (line 1306)
        result_and_keyword_276067 = python_operator(stypy.reporting.localization.Localization(__file__, 1306, 23), 'and', result_eq_276056, result_eq_276066)
        
        # Testing the type of an if condition (line 1306)
        if_condition_276068 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1306, 20), result_and_keyword_276067)
        # Assigning a type to the variable 'if_condition_276068' (line 1306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1306, 20), 'if_condition_276068', if_condition_276068)
        # SSA begins for if statement (line 1306)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 1307):
        
        # Assigning a Subscript to a Subscript (line 1307):
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1307)
        k_276069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 48), 'k')
        # Getting the type of 'zi' (line 1307)
        zi_276070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 37), 'zi')
        # Obtaining the member 'strides' of a type (line 1307)
        strides_276071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 37), zi_276070, 'strides')
        # Obtaining the member '__getitem__' of a type (line 1307)
        getitem___276072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 37), strides_276071, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1307)
        subscript_call_result_276073 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 37), getitem___276072, k_276069)
        
        # Getting the type of 'strides' (line 1307)
        strides_276074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 24), 'strides')
        # Getting the type of 'k' (line 1307)
        k_276075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 32), 'k')
        # Storing an element on a container (line 1307)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1307, 24), strides_276074, (k_276075, subscript_call_result_276073))
        # SSA branch for the else part of an if statement (line 1306)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'k' (line 1308)
        k_276076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 25), 'k')
        # Getting the type of 'axis' (line 1308)
        axis_276077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 30), 'axis')
        # Applying the binary operator '!=' (line 1308)
        result_ne_276078 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 25), '!=', k_276076, axis_276077)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1308)
        k_276079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 48), 'k')
        # Getting the type of 'zi' (line 1308)
        zi_276080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 39), 'zi')
        # Obtaining the member 'shape' of a type (line 1308)
        shape_276081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 39), zi_276080, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1308)
        getitem___276082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 39), shape_276081, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1308)
        subscript_call_result_276083 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 39), getitem___276082, k_276079)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1308)
        k_276084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 69), 'k')
        # Getting the type of 'expected_shape' (line 1308)
        expected_shape_276085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 54), 'expected_shape')
        # Obtaining the member '__getitem__' of a type (line 1308)
        getitem___276086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 54), expected_shape_276085, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1308)
        subscript_call_result_276087 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 54), getitem___276086, k_276084)
        
        # Applying the binary operator '==' (line 1308)
        result_eq_276088 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 39), '==', subscript_call_result_276083, subscript_call_result_276087)
        
        # Applying the binary operator 'and' (line 1308)
        result_and_keyword_276089 = python_operator(stypy.reporting.localization.Localization(__file__, 1308, 25), 'and', result_ne_276078, result_eq_276088)
        
        # Testing the type of an if condition (line 1308)
        if_condition_276090 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1308, 25), result_and_keyword_276089)
        # Assigning a type to the variable 'if_condition_276090' (line 1308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1308, 25), 'if_condition_276090', if_condition_276090)
        # SSA begins for if statement (line 1308)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 1309):
        
        # Assigning a Subscript to a Subscript (line 1309):
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1309)
        k_276091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 48), 'k')
        # Getting the type of 'zi' (line 1309)
        zi_276092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 37), 'zi')
        # Obtaining the member 'strides' of a type (line 1309)
        strides_276093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 37), zi_276092, 'strides')
        # Obtaining the member '__getitem__' of a type (line 1309)
        getitem___276094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 37), strides_276093, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1309)
        subscript_call_result_276095 = invoke(stypy.reporting.localization.Localization(__file__, 1309, 37), getitem___276094, k_276091)
        
        # Getting the type of 'strides' (line 1309)
        strides_276096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 24), 'strides')
        # Getting the type of 'k' (line 1309)
        k_276097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 32), 'k')
        # Storing an element on a container (line 1309)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1309, 24), strides_276096, (k_276097, subscript_call_result_276095))
        # SSA branch for the else part of an if statement (line 1308)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'k' (line 1310)
        k_276098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 25), 'k')
        # Getting the type of 'axis' (line 1310)
        axis_276099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 30), 'axis')
        # Applying the binary operator '!=' (line 1310)
        result_ne_276100 = python_operator(stypy.reporting.localization.Localization(__file__, 1310, 25), '!=', k_276098, axis_276099)
        
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 1310)
        k_276101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 48), 'k')
        # Getting the type of 'zi' (line 1310)
        zi_276102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 39), 'zi')
        # Obtaining the member 'shape' of a type (line 1310)
        shape_276103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1310, 39), zi_276102, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1310)
        getitem___276104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1310, 39), shape_276103, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1310)
        subscript_call_result_276105 = invoke(stypy.reporting.localization.Localization(__file__, 1310, 39), getitem___276104, k_276101)
        
        int_276106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1310, 54), 'int')
        # Applying the binary operator '==' (line 1310)
        result_eq_276107 = python_operator(stypy.reporting.localization.Localization(__file__, 1310, 39), '==', subscript_call_result_276105, int_276106)
        
        # Applying the binary operator 'and' (line 1310)
        result_and_keyword_276108 = python_operator(stypy.reporting.localization.Localization(__file__, 1310, 25), 'and', result_ne_276100, result_eq_276107)
        
        # Testing the type of an if condition (line 1310)
        if_condition_276109 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1310, 25), result_and_keyword_276108)
        # Assigning a type to the variable 'if_condition_276109' (line 1310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1310, 25), 'if_condition_276109', if_condition_276109)
        # SSA begins for if statement (line 1310)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Subscript (line 1311):
        
        # Assigning a Num to a Subscript (line 1311):
        int_276110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1311, 37), 'int')
        # Getting the type of 'strides' (line 1311)
        strides_276111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 24), 'strides')
        # Getting the type of 'k' (line 1311)
        k_276112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 32), 'k')
        # Storing an element on a container (line 1311)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1311, 24), strides_276111, (k_276112, int_276110))
        # SSA branch for the else part of an if statement (line 1310)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1313)
        # Processing the call arguments (line 1313)
        str_276114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 41), 'str', 'Unexpected shape for zi: expected %s, found %s.')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1315)
        tuple_276115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1315)
        # Adding element type (line 1315)
        # Getting the type of 'expected_shape' (line 1315)
        expected_shape_276116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 42), 'expected_shape', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1315, 42), tuple_276115, expected_shape_276116)
        # Adding element type (line 1315)
        # Getting the type of 'zi' (line 1315)
        zi_276117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 58), 'zi', False)
        # Obtaining the member 'shape' of a type (line 1315)
        shape_276118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1315, 58), zi_276117, 'shape')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1315, 42), tuple_276115, shape_276118)
        
        # Applying the binary operator '%' (line 1313)
        result_mod_276119 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 41), '%', str_276114, tuple_276115)
        
        # Processing the call keyword arguments (line 1313)
        kwargs_276120 = {}
        # Getting the type of 'ValueError' (line 1313)
        ValueError_276113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 30), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1313)
        ValueError_call_result_276121 = invoke(stypy.reporting.localization.Localization(__file__, 1313, 30), ValueError_276113, *[result_mod_276119], **kwargs_276120)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1313, 24), ValueError_call_result_276121, 'raise parameter', BaseException)
        # SSA join for if statement (line 1310)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1308)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1306)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1316):
        
        # Assigning a Call to a Name (line 1316):
        
        # Call to as_strided(...): (line 1316)
        # Processing the call arguments (line 1316)
        # Getting the type of 'zi' (line 1316)
        zi_276126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 53), 'zi', False)
        # Getting the type of 'expected_shape' (line 1316)
        expected_shape_276127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 57), 'expected_shape', False)
        # Getting the type of 'strides' (line 1317)
        strides_276128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1317, 53), 'strides', False)
        # Processing the call keyword arguments (line 1316)
        kwargs_276129 = {}
        # Getting the type of 'np' (line 1316)
        np_276122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 21), 'np', False)
        # Obtaining the member 'lib' of a type (line 1316)
        lib_276123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 21), np_276122, 'lib')
        # Obtaining the member 'stride_tricks' of a type (line 1316)
        stride_tricks_276124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 21), lib_276123, 'stride_tricks')
        # Obtaining the member 'as_strided' of a type (line 1316)
        as_strided_276125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 21), stride_tricks_276124, 'as_strided')
        # Calling as_strided(args, kwargs) (line 1316)
        as_strided_call_result_276130 = invoke(stypy.reporting.localization.Localization(__file__, 1316, 21), as_strided_276125, *[zi_276126, expected_shape_276127, strides_276128], **kwargs_276129)
        
        # Assigning a type to the variable 'zi' (line 1316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 16), 'zi', as_strided_call_result_276130)
        # SSA join for if statement (line 1301)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1318)
        # Processing the call arguments (line 1318)
        # Getting the type of 'zi' (line 1318)
        zi_276133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 26), 'zi', False)
        # Processing the call keyword arguments (line 1318)
        kwargs_276134 = {}
        # Getting the type of 'inputs' (line 1318)
        inputs_276131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'inputs', False)
        # Obtaining the member 'append' of a type (line 1318)
        append_276132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 12), inputs_276131, 'append')
        # Calling append(args, kwargs) (line 1318)
        append_call_result_276135 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 12), append_276132, *[zi_276133], **kwargs_276134)
        

        if more_types_in_union_275996:
            # SSA join for if statement (line 1291)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1319):
    
    # Assigning a Call to a Name (line 1319):
    
    # Call to result_type(...): (line 1319)
    # Getting the type of 'inputs' (line 1319)
    inputs_276138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 32), 'inputs', False)
    # Processing the call keyword arguments (line 1319)
    kwargs_276139 = {}
    # Getting the type of 'np' (line 1319)
    np_276136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 16), 'np', False)
    # Obtaining the member 'result_type' of a type (line 1319)
    result_type_276137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1319, 16), np_276136, 'result_type')
    # Calling result_type(args, kwargs) (line 1319)
    result_type_call_result_276140 = invoke(stypy.reporting.localization.Localization(__file__, 1319, 16), result_type_276137, *[inputs_276138], **kwargs_276139)
    
    # Assigning a type to the variable 'dtype' (line 1319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 8), 'dtype', result_type_call_result_276140)
    
    
    # Getting the type of 'dtype' (line 1321)
    dtype_276141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 11), 'dtype')
    # Obtaining the member 'char' of a type (line 1321)
    char_276142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1321, 11), dtype_276141, 'char')
    str_276143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 29), 'str', 'fdgFDGO')
    # Applying the binary operator 'notin' (line 1321)
    result_contains_276144 = python_operator(stypy.reporting.localization.Localization(__file__, 1321, 11), 'notin', char_276142, str_276143)
    
    # Testing the type of an if condition (line 1321)
    if_condition_276145 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1321, 8), result_contains_276144)
    # Assigning a type to the variable 'if_condition_276145' (line 1321)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 8), 'if_condition_276145', if_condition_276145)
    # SSA begins for if statement (line 1321)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to NotImplementedError(...): (line 1322)
    # Processing the call arguments (line 1322)
    str_276147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1322, 38), 'str', "input type '%s' not supported")
    # Getting the type of 'dtype' (line 1322)
    dtype_276148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 72), 'dtype', False)
    # Applying the binary operator '%' (line 1322)
    result_mod_276149 = python_operator(stypy.reporting.localization.Localization(__file__, 1322, 38), '%', str_276147, dtype_276148)
    
    # Processing the call keyword arguments (line 1322)
    kwargs_276150 = {}
    # Getting the type of 'NotImplementedError' (line 1322)
    NotImplementedError_276146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 18), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 1322)
    NotImplementedError_call_result_276151 = invoke(stypy.reporting.localization.Localization(__file__, 1322, 18), NotImplementedError_276146, *[result_mod_276149], **kwargs_276150)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1322, 12), NotImplementedError_call_result_276151, 'raise parameter', BaseException)
    # SSA join for if statement (line 1321)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1324):
    
    # Assigning a Call to a Name (line 1324):
    
    # Call to array(...): (line 1324)
    # Processing the call arguments (line 1324)
    # Getting the type of 'b' (line 1324)
    b_276154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 21), 'b', False)
    # Processing the call keyword arguments (line 1324)
    # Getting the type of 'dtype' (line 1324)
    dtype_276155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 30), 'dtype', False)
    keyword_276156 = dtype_276155
    kwargs_276157 = {'dtype': keyword_276156}
    # Getting the type of 'np' (line 1324)
    np_276152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 1324)
    array_276153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1324, 12), np_276152, 'array')
    # Calling array(args, kwargs) (line 1324)
    array_call_result_276158 = invoke(stypy.reporting.localization.Localization(__file__, 1324, 12), array_276153, *[b_276154], **kwargs_276157)
    
    # Assigning a type to the variable 'b' (line 1324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1324, 8), 'b', array_call_result_276158)
    
    # Assigning a Call to a Name (line 1325):
    
    # Assigning a Call to a Name (line 1325):
    
    # Call to array(...): (line 1325)
    # Processing the call arguments (line 1325)
    # Getting the type of 'a' (line 1325)
    a_276161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 21), 'a', False)
    # Processing the call keyword arguments (line 1325)
    # Getting the type of 'dtype' (line 1325)
    dtype_276162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 30), 'dtype', False)
    keyword_276163 = dtype_276162
    # Getting the type of 'False' (line 1325)
    False_276164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 42), 'False', False)
    keyword_276165 = False_276164
    kwargs_276166 = {'dtype': keyword_276163, 'copy': keyword_276165}
    # Getting the type of 'np' (line 1325)
    np_276159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 1325)
    array_276160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1325, 12), np_276159, 'array')
    # Calling array(args, kwargs) (line 1325)
    array_call_result_276167 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 12), array_276160, *[a_276161], **kwargs_276166)
    
    # Assigning a type to the variable 'a' (line 1325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1325, 8), 'a', array_call_result_276167)
    
    # Getting the type of 'b' (line 1326)
    b_276168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 8), 'b')
    
    # Obtaining the type of the subscript
    int_276169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1326, 15), 'int')
    # Getting the type of 'a' (line 1326)
    a_276170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 13), 'a')
    # Obtaining the member '__getitem__' of a type (line 1326)
    getitem___276171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 13), a_276170, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1326)
    subscript_call_result_276172 = invoke(stypy.reporting.localization.Localization(__file__, 1326, 13), getitem___276171, int_276169)
    
    # Applying the binary operator 'div=' (line 1326)
    result_div_276173 = python_operator(stypy.reporting.localization.Localization(__file__, 1326, 8), 'div=', b_276168, subscript_call_result_276172)
    # Assigning a type to the variable 'b' (line 1326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 8), 'b', result_div_276173)
    
    
    # Assigning a Call to a Name (line 1327):
    
    # Assigning a Call to a Name (line 1327):
    
    # Call to array(...): (line 1327)
    # Processing the call arguments (line 1327)
    # Getting the type of 'x' (line 1327)
    x_276176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 21), 'x', False)
    # Processing the call keyword arguments (line 1327)
    # Getting the type of 'dtype' (line 1327)
    dtype_276177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 30), 'dtype', False)
    keyword_276178 = dtype_276177
    # Getting the type of 'False' (line 1327)
    False_276179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 42), 'False', False)
    keyword_276180 = False_276179
    kwargs_276181 = {'dtype': keyword_276178, 'copy': keyword_276180}
    # Getting the type of 'np' (line 1327)
    np_276174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1327, 12), 'np', False)
    # Obtaining the member 'array' of a type (line 1327)
    array_276175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1327, 12), np_276174, 'array')
    # Calling array(args, kwargs) (line 1327)
    array_call_result_276182 = invoke(stypy.reporting.localization.Localization(__file__, 1327, 12), array_276175, *[x_276176], **kwargs_276181)
    
    # Assigning a type to the variable 'x' (line 1327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1327, 8), 'x', array_call_result_276182)
    
    # Assigning a Call to a Name (line 1329):
    
    # Assigning a Call to a Name (line 1329):
    
    # Call to apply_along_axis(...): (line 1329)
    # Processing the call arguments (line 1329)

    @norecursion
    def _stypy_temp_lambda_171(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_171'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_171', 1329, 39, True)
        # Passed parameters checking function
        _stypy_temp_lambda_171.stypy_localization = localization
        _stypy_temp_lambda_171.stypy_type_of_self = None
        _stypy_temp_lambda_171.stypy_type_store = module_type_store
        _stypy_temp_lambda_171.stypy_function_name = '_stypy_temp_lambda_171'
        _stypy_temp_lambda_171.stypy_param_names_list = ['y']
        _stypy_temp_lambda_171.stypy_varargs_param_name = None
        _stypy_temp_lambda_171.stypy_kwargs_param_name = None
        _stypy_temp_lambda_171.stypy_call_defaults = defaults
        _stypy_temp_lambda_171.stypy_call_varargs = varargs
        _stypy_temp_lambda_171.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_171', ['y'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_171', ['y'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to convolve(...): (line 1329)
        # Processing the call arguments (line 1329)
        # Getting the type of 'b' (line 1329)
        b_276187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 61), 'b', False)
        # Getting the type of 'y' (line 1329)
        y_276188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 64), 'y', False)
        # Processing the call keyword arguments (line 1329)
        kwargs_276189 = {}
        # Getting the type of 'np' (line 1329)
        np_276185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 49), 'np', False)
        # Obtaining the member 'convolve' of a type (line 1329)
        convolve_276186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1329, 49), np_276185, 'convolve')
        # Calling convolve(args, kwargs) (line 1329)
        convolve_call_result_276190 = invoke(stypy.reporting.localization.Localization(__file__, 1329, 49), convolve_276186, *[b_276187, y_276188], **kwargs_276189)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 1329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 39), 'stypy_return_type', convolve_call_result_276190)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_171' in the type store
        # Getting the type of 'stypy_return_type' (line 1329)
        stypy_return_type_276191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 39), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_276191)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_171'
        return stypy_return_type_276191

    # Assigning a type to the variable '_stypy_temp_lambda_171' (line 1329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 39), '_stypy_temp_lambda_171', _stypy_temp_lambda_171)
    # Getting the type of '_stypy_temp_lambda_171' (line 1329)
    _stypy_temp_lambda_171_276192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 39), '_stypy_temp_lambda_171')
    # Getting the type of 'axis' (line 1329)
    axis_276193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 68), 'axis', False)
    # Getting the type of 'x' (line 1329)
    x_276194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 74), 'x', False)
    # Processing the call keyword arguments (line 1329)
    kwargs_276195 = {}
    # Getting the type of 'np' (line 1329)
    np_276183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 19), 'np', False)
    # Obtaining the member 'apply_along_axis' of a type (line 1329)
    apply_along_axis_276184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1329, 19), np_276183, 'apply_along_axis')
    # Calling apply_along_axis(args, kwargs) (line 1329)
    apply_along_axis_call_result_276196 = invoke(stypy.reporting.localization.Localization(__file__, 1329, 19), apply_along_axis_276184, *[_stypy_temp_lambda_171_276192, axis_276193, x_276194], **kwargs_276195)
    
    # Assigning a type to the variable 'out_full' (line 1329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 8), 'out_full', apply_along_axis_call_result_276196)
    
    # Assigning a BinOp to a Name (line 1330):
    
    # Assigning a BinOp to a Name (line 1330):
    # Getting the type of 'out_full' (line 1330)
    out_full_276197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 14), 'out_full')
    # Obtaining the member 'ndim' of a type (line 1330)
    ndim_276198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 14), out_full_276197, 'ndim')
    
    # Obtaining an instance of the builtin type 'list' (line 1330)
    list_276199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1330, 30), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1330)
    # Adding element type (line 1330)
    
    # Call to slice(...): (line 1330)
    # Processing the call arguments (line 1330)
    # Getting the type of 'None' (line 1330)
    None_276201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 37), 'None', False)
    # Processing the call keyword arguments (line 1330)
    kwargs_276202 = {}
    # Getting the type of 'slice' (line 1330)
    slice_276200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 31), 'slice', False)
    # Calling slice(args, kwargs) (line 1330)
    slice_call_result_276203 = invoke(stypy.reporting.localization.Localization(__file__, 1330, 31), slice_276200, *[None_276201], **kwargs_276202)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1330, 30), list_276199, slice_call_result_276203)
    
    # Applying the binary operator '*' (line 1330)
    result_mul_276204 = python_operator(stypy.reporting.localization.Localization(__file__, 1330, 14), '*', ndim_276198, list_276199)
    
    # Assigning a type to the variable 'ind' (line 1330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1330, 8), 'ind', result_mul_276204)
    
    # Type idiom detected: calculating its left and rigth part (line 1331)
    # Getting the type of 'zi' (line 1331)
    zi_276205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 8), 'zi')
    # Getting the type of 'None' (line 1331)
    None_276206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 21), 'None')
    
    (may_be_276207, more_types_in_union_276208) = may_not_be_none(zi_276205, None_276206)

    if may_be_276207:

        if more_types_in_union_276208:
            # Runtime conditional SSA (line 1331)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Subscript (line 1332):
        
        # Assigning a Call to a Subscript (line 1332):
        
        # Call to slice(...): (line 1332)
        # Processing the call arguments (line 1332)
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 1332)
        axis_276210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 39), 'axis', False)
        # Getting the type of 'zi' (line 1332)
        zi_276211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 30), 'zi', False)
        # Obtaining the member 'shape' of a type (line 1332)
        shape_276212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 30), zi_276211, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1332)
        getitem___276213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1332, 30), shape_276212, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1332)
        subscript_call_result_276214 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 30), getitem___276213, axis_276210)
        
        # Processing the call keyword arguments (line 1332)
        kwargs_276215 = {}
        # Getting the type of 'slice' (line 1332)
        slice_276209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 24), 'slice', False)
        # Calling slice(args, kwargs) (line 1332)
        slice_call_result_276216 = invoke(stypy.reporting.localization.Localization(__file__, 1332, 24), slice_276209, *[subscript_call_result_276214], **kwargs_276215)
        
        # Getting the type of 'ind' (line 1332)
        ind_276217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 12), 'ind')
        # Getting the type of 'axis' (line 1332)
        axis_276218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 16), 'axis')
        # Storing an element on a container (line 1332)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1332, 12), ind_276217, (axis_276218, slice_call_result_276216))
        
        # Getting the type of 'out_full' (line 1333)
        out_full_276219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 12), 'out_full')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 1333)
        ind_276220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 21), 'ind')
        # Getting the type of 'out_full' (line 1333)
        out_full_276221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 12), 'out_full')
        # Obtaining the member '__getitem__' of a type (line 1333)
        getitem___276222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1333, 12), out_full_276221, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1333)
        subscript_call_result_276223 = invoke(stypy.reporting.localization.Localization(__file__, 1333, 12), getitem___276222, ind_276220)
        
        # Getting the type of 'zi' (line 1333)
        zi_276224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 29), 'zi')
        # Applying the binary operator '+=' (line 1333)
        result_iadd_276225 = python_operator(stypy.reporting.localization.Localization(__file__, 1333, 12), '+=', subscript_call_result_276223, zi_276224)
        # Getting the type of 'out_full' (line 1333)
        out_full_276226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 12), 'out_full')
        # Getting the type of 'ind' (line 1333)
        ind_276227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 21), 'ind')
        # Storing an element on a container (line 1333)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1333, 12), out_full_276226, (ind_276227, result_iadd_276225))
        

        if more_types_in_union_276208:
            # SSA join for if statement (line 1331)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Subscript (line 1335):
    
    # Assigning a Call to a Subscript (line 1335):
    
    # Call to slice(...): (line 1335)
    # Processing the call arguments (line 1335)
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1335)
    axis_276229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 41), 'axis', False)
    # Getting the type of 'out_full' (line 1335)
    out_full_276230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 26), 'out_full', False)
    # Obtaining the member 'shape' of a type (line 1335)
    shape_276231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 26), out_full_276230, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1335)
    getitem___276232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1335, 26), shape_276231, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1335)
    subscript_call_result_276233 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 26), getitem___276232, axis_276229)
    
    
    # Call to len(...): (line 1335)
    # Processing the call arguments (line 1335)
    # Getting the type of 'b' (line 1335)
    b_276235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 53), 'b', False)
    # Processing the call keyword arguments (line 1335)
    kwargs_276236 = {}
    # Getting the type of 'len' (line 1335)
    len_276234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 49), 'len', False)
    # Calling len(args, kwargs) (line 1335)
    len_call_result_276237 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 49), len_276234, *[b_276235], **kwargs_276236)
    
    # Applying the binary operator '-' (line 1335)
    result_sub_276238 = python_operator(stypy.reporting.localization.Localization(__file__, 1335, 26), '-', subscript_call_result_276233, len_call_result_276237)
    
    int_276239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1335, 58), 'int')
    # Applying the binary operator '+' (line 1335)
    result_add_276240 = python_operator(stypy.reporting.localization.Localization(__file__, 1335, 56), '+', result_sub_276238, int_276239)
    
    # Processing the call keyword arguments (line 1335)
    kwargs_276241 = {}
    # Getting the type of 'slice' (line 1335)
    slice_276228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 20), 'slice', False)
    # Calling slice(args, kwargs) (line 1335)
    slice_call_result_276242 = invoke(stypy.reporting.localization.Localization(__file__, 1335, 20), slice_276228, *[result_add_276240], **kwargs_276241)
    
    # Getting the type of 'ind' (line 1335)
    ind_276243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 8), 'ind')
    # Getting the type of 'axis' (line 1335)
    axis_276244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 12), 'axis')
    # Storing an element on a container (line 1335)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1335, 8), ind_276243, (axis_276244, slice_call_result_276242))
    
    # Assigning a Subscript to a Name (line 1336):
    
    # Assigning a Subscript to a Name (line 1336):
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 1336)
    ind_276245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 23), 'ind')
    # Getting the type of 'out_full' (line 1336)
    out_full_276246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 14), 'out_full')
    # Obtaining the member '__getitem__' of a type (line 1336)
    getitem___276247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 14), out_full_276246, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1336)
    subscript_call_result_276248 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 14), getitem___276247, ind_276245)
    
    # Assigning a type to the variable 'out' (line 1336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1336, 8), 'out', subscript_call_result_276248)
    
    # Type idiom detected: calculating its left and rigth part (line 1338)
    # Getting the type of 'zi' (line 1338)
    zi_276249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 11), 'zi')
    # Getting the type of 'None' (line 1338)
    None_276250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 17), 'None')
    
    (may_be_276251, more_types_in_union_276252) = may_be_none(zi_276249, None_276250)

    if may_be_276251:

        if more_types_in_union_276252:
            # Runtime conditional SSA (line 1338)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 'out' (line 1339)
        out_276253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 19), 'out')
        # Assigning a type to the variable 'stypy_return_type' (line 1339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 12), 'stypy_return_type', out_276253)

        if more_types_in_union_276252:
            # Runtime conditional SSA for else branch (line 1338)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_276251) or more_types_in_union_276252):
        
        # Assigning a Call to a Subscript (line 1341):
        
        # Assigning a Call to a Subscript (line 1341):
        
        # Call to slice(...): (line 1341)
        # Processing the call arguments (line 1341)
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 1341)
        axis_276255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 45), 'axis', False)
        # Getting the type of 'out_full' (line 1341)
        out_full_276256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 30), 'out_full', False)
        # Obtaining the member 'shape' of a type (line 1341)
        shape_276257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 30), out_full_276256, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1341)
        getitem___276258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 30), shape_276257, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1341)
        subscript_call_result_276259 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 30), getitem___276258, axis_276255)
        
        
        # Call to len(...): (line 1341)
        # Processing the call arguments (line 1341)
        # Getting the type of 'b' (line 1341)
        b_276261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 57), 'b', False)
        # Processing the call keyword arguments (line 1341)
        kwargs_276262 = {}
        # Getting the type of 'len' (line 1341)
        len_276260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 53), 'len', False)
        # Calling len(args, kwargs) (line 1341)
        len_call_result_276263 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 53), len_276260, *[b_276261], **kwargs_276262)
        
        # Applying the binary operator '-' (line 1341)
        result_sub_276264 = python_operator(stypy.reporting.localization.Localization(__file__, 1341, 30), '-', subscript_call_result_276259, len_call_result_276263)
        
        int_276265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1341, 62), 'int')
        # Applying the binary operator '+' (line 1341)
        result_add_276266 = python_operator(stypy.reporting.localization.Localization(__file__, 1341, 60), '+', result_sub_276264, int_276265)
        
        # Getting the type of 'None' (line 1341)
        None_276267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 65), 'None', False)
        # Processing the call keyword arguments (line 1341)
        kwargs_276268 = {}
        # Getting the type of 'slice' (line 1341)
        slice_276254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 24), 'slice', False)
        # Calling slice(args, kwargs) (line 1341)
        slice_call_result_276269 = invoke(stypy.reporting.localization.Localization(__file__, 1341, 24), slice_276254, *[result_add_276266, None_276267], **kwargs_276268)
        
        # Getting the type of 'ind' (line 1341)
        ind_276270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 12), 'ind')
        # Getting the type of 'axis' (line 1341)
        axis_276271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 16), 'axis')
        # Storing an element on a container (line 1341)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1341, 12), ind_276270, (axis_276271, slice_call_result_276269))
        
        # Assigning a Subscript to a Name (line 1342):
        
        # Assigning a Subscript to a Name (line 1342):
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 1342)
        ind_276272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 26), 'ind')
        # Getting the type of 'out_full' (line 1342)
        out_full_276273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 17), 'out_full')
        # Obtaining the member '__getitem__' of a type (line 1342)
        getitem___276274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1342, 17), out_full_276273, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1342)
        subscript_call_result_276275 = invoke(stypy.reporting.localization.Localization(__file__, 1342, 17), getitem___276274, ind_276272)
        
        # Assigning a type to the variable 'zf' (line 1342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1342, 12), 'zf', subscript_call_result_276275)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1343)
        tuple_276276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1343)
        # Adding element type (line 1343)
        # Getting the type of 'out' (line 1343)
        out_276277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 19), 'out')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1343, 19), tuple_276276, out_276277)
        # Adding element type (line 1343)
        # Getting the type of 'zf' (line 1343)
        zf_276278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 24), 'zf')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1343, 19), tuple_276276, zf_276278)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 12), 'stypy_return_type', tuple_276276)

        if (may_be_276251 and more_types_in_union_276252):
            # SSA join for if statement (line 1338)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the else part of an if statement (line 1281)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 1345)
    # Getting the type of 'zi' (line 1345)
    zi_276279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 11), 'zi')
    # Getting the type of 'None' (line 1345)
    None_276280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 17), 'None')
    
    (may_be_276281, more_types_in_union_276282) = may_be_none(zi_276279, None_276280)

    if may_be_276281:

        if more_types_in_union_276282:
            # Runtime conditional SSA (line 1345)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to _linear_filter(...): (line 1346)
        # Processing the call arguments (line 1346)
        # Getting the type of 'b' (line 1346)
        b_276285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 43), 'b', False)
        # Getting the type of 'a' (line 1346)
        a_276286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 46), 'a', False)
        # Getting the type of 'x' (line 1346)
        x_276287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 49), 'x', False)
        # Getting the type of 'axis' (line 1346)
        axis_276288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 52), 'axis', False)
        # Processing the call keyword arguments (line 1346)
        kwargs_276289 = {}
        # Getting the type of 'sigtools' (line 1346)
        sigtools_276283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 19), 'sigtools', False)
        # Obtaining the member '_linear_filter' of a type (line 1346)
        _linear_filter_276284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 19), sigtools_276283, '_linear_filter')
        # Calling _linear_filter(args, kwargs) (line 1346)
        _linear_filter_call_result_276290 = invoke(stypy.reporting.localization.Localization(__file__, 1346, 19), _linear_filter_276284, *[b_276285, a_276286, x_276287, axis_276288], **kwargs_276289)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 12), 'stypy_return_type', _linear_filter_call_result_276290)

        if more_types_in_union_276282:
            # Runtime conditional SSA for else branch (line 1345)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_276281) or more_types_in_union_276282):
        
        # Call to _linear_filter(...): (line 1348)
        # Processing the call arguments (line 1348)
        # Getting the type of 'b' (line 1348)
        b_276293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 43), 'b', False)
        # Getting the type of 'a' (line 1348)
        a_276294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 46), 'a', False)
        # Getting the type of 'x' (line 1348)
        x_276295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 49), 'x', False)
        # Getting the type of 'axis' (line 1348)
        axis_276296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 52), 'axis', False)
        # Getting the type of 'zi' (line 1348)
        zi_276297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 58), 'zi', False)
        # Processing the call keyword arguments (line 1348)
        kwargs_276298 = {}
        # Getting the type of 'sigtools' (line 1348)
        sigtools_276291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 19), 'sigtools', False)
        # Obtaining the member '_linear_filter' of a type (line 1348)
        _linear_filter_276292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 19), sigtools_276291, '_linear_filter')
        # Calling _linear_filter(args, kwargs) (line 1348)
        _linear_filter_call_result_276299 = invoke(stypy.reporting.localization.Localization(__file__, 1348, 19), _linear_filter_276292, *[b_276293, a_276294, x_276295, axis_276296, zi_276297], **kwargs_276298)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 12), 'stypy_return_type', _linear_filter_call_result_276299)

        if (may_be_276281 and more_types_in_union_276282):
            # SSA join for if statement (line 1345)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 1281)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'lfilter(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lfilter' in the type store
    # Getting the type of 'stypy_return_type' (line 1162)
    stypy_return_type_276300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276300)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lfilter'
    return stypy_return_type_276300

# Assigning a type to the variable 'lfilter' (line 1162)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1162, 0), 'lfilter', lfilter)

@norecursion
def lfiltic(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1351)
    None_276301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 23), 'None')
    defaults = [None_276301]
    # Create a new context for function 'lfiltic'
    module_type_store = module_type_store.open_function_context('lfiltic', 1351, 0, False)
    
    # Passed parameters checking function
    lfiltic.stypy_localization = localization
    lfiltic.stypy_type_of_self = None
    lfiltic.stypy_type_store = module_type_store
    lfiltic.stypy_function_name = 'lfiltic'
    lfiltic.stypy_param_names_list = ['b', 'a', 'y', 'x']
    lfiltic.stypy_varargs_param_name = None
    lfiltic.stypy_kwargs_param_name = None
    lfiltic.stypy_call_defaults = defaults
    lfiltic.stypy_call_varargs = varargs
    lfiltic.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lfiltic', ['b', 'a', 'y', 'x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lfiltic', localization, ['b', 'a', 'y', 'x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lfiltic(...)' code ##################

    str_276302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, (-1)), 'str', '\n    Construct initial conditions for lfilter given input and output vectors.\n\n    Given a linear filter (b, a) and initial conditions on the output `y`\n    and the input `x`, return the initial conditions on the state vector zi\n    which is used by `lfilter` to generate the output given the input.\n\n    Parameters\n    ----------\n    b : array_like\n        Linear filter term.\n    a : array_like\n        Linear filter term.\n    y : array_like\n        Initial conditions.\n\n        If ``N = len(a) - 1``, then ``y = {y[-1], y[-2], ..., y[-N]}``.\n\n        If `y` is too short, it is padded with zeros.\n    x : array_like, optional\n        Initial conditions.\n\n        If ``M = len(b) - 1``, then ``x = {x[-1], x[-2], ..., x[-M]}``.\n\n        If `x` is not given, its initial conditions are assumed zero.\n\n        If `x` is too short, it is padded with zeros.\n\n    Returns\n    -------\n    zi : ndarray\n        The state vector ``zi = {z_0[-1], z_1[-1], ..., z_K-1[-1]}``,\n        where ``K = max(M, N)``.\n\n    See Also\n    --------\n    lfilter, lfilter_zi\n\n    ')
    
    # Assigning a BinOp to a Name (line 1391):
    
    # Assigning a BinOp to a Name (line 1391):
    
    # Call to size(...): (line 1391)
    # Processing the call arguments (line 1391)
    # Getting the type of 'a' (line 1391)
    a_276305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 16), 'a', False)
    # Processing the call keyword arguments (line 1391)
    kwargs_276306 = {}
    # Getting the type of 'np' (line 1391)
    np_276303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 8), 'np', False)
    # Obtaining the member 'size' of a type (line 1391)
    size_276304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1391, 8), np_276303, 'size')
    # Calling size(args, kwargs) (line 1391)
    size_call_result_276307 = invoke(stypy.reporting.localization.Localization(__file__, 1391, 8), size_276304, *[a_276305], **kwargs_276306)
    
    int_276308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1391, 21), 'int')
    # Applying the binary operator '-' (line 1391)
    result_sub_276309 = python_operator(stypy.reporting.localization.Localization(__file__, 1391, 8), '-', size_call_result_276307, int_276308)
    
    # Assigning a type to the variable 'N' (line 1391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1391, 4), 'N', result_sub_276309)
    
    # Assigning a BinOp to a Name (line 1392):
    
    # Assigning a BinOp to a Name (line 1392):
    
    # Call to size(...): (line 1392)
    # Processing the call arguments (line 1392)
    # Getting the type of 'b' (line 1392)
    b_276312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'b', False)
    # Processing the call keyword arguments (line 1392)
    kwargs_276313 = {}
    # Getting the type of 'np' (line 1392)
    np_276310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 8), 'np', False)
    # Obtaining the member 'size' of a type (line 1392)
    size_276311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 8), np_276310, 'size')
    # Calling size(args, kwargs) (line 1392)
    size_call_result_276314 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 8), size_276311, *[b_276312], **kwargs_276313)
    
    int_276315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 21), 'int')
    # Applying the binary operator '-' (line 1392)
    result_sub_276316 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 8), '-', size_call_result_276314, int_276315)
    
    # Assigning a type to the variable 'M' (line 1392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 4), 'M', result_sub_276316)
    
    # Assigning a Call to a Name (line 1393):
    
    # Assigning a Call to a Name (line 1393):
    
    # Call to max(...): (line 1393)
    # Processing the call arguments (line 1393)
    # Getting the type of 'M' (line 1393)
    M_276318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 12), 'M', False)
    # Getting the type of 'N' (line 1393)
    N_276319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 15), 'N', False)
    # Processing the call keyword arguments (line 1393)
    kwargs_276320 = {}
    # Getting the type of 'max' (line 1393)
    max_276317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 8), 'max', False)
    # Calling max(args, kwargs) (line 1393)
    max_call_result_276321 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 8), max_276317, *[M_276318, N_276319], **kwargs_276320)
    
    # Assigning a type to the variable 'K' (line 1393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 4), 'K', max_call_result_276321)
    
    # Assigning a Call to a Name (line 1394):
    
    # Assigning a Call to a Name (line 1394):
    
    # Call to asarray(...): (line 1394)
    # Processing the call arguments (line 1394)
    # Getting the type of 'y' (line 1394)
    y_276323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 16), 'y', False)
    # Processing the call keyword arguments (line 1394)
    kwargs_276324 = {}
    # Getting the type of 'asarray' (line 1394)
    asarray_276322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1394)
    asarray_call_result_276325 = invoke(stypy.reporting.localization.Localization(__file__, 1394, 8), asarray_276322, *[y_276323], **kwargs_276324)
    
    # Assigning a type to the variable 'y' (line 1394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 4), 'y', asarray_call_result_276325)
    
    
    # Getting the type of 'y' (line 1395)
    y_276326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 7), 'y')
    # Obtaining the member 'dtype' of a type (line 1395)
    dtype_276327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 7), y_276326, 'dtype')
    # Obtaining the member 'kind' of a type (line 1395)
    kind_276328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1395, 7), dtype_276327, 'kind')
    str_276329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, 23), 'str', 'bui')
    # Applying the binary operator 'in' (line 1395)
    result_contains_276330 = python_operator(stypy.reporting.localization.Localization(__file__, 1395, 7), 'in', kind_276328, str_276329)
    
    # Testing the type of an if condition (line 1395)
    if_condition_276331 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1395, 4), result_contains_276330)
    # Assigning a type to the variable 'if_condition_276331' (line 1395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 4), 'if_condition_276331', if_condition_276331)
    # SSA begins for if statement (line 1395)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1397):
    
    # Assigning a Call to a Name (line 1397):
    
    # Call to astype(...): (line 1397)
    # Processing the call arguments (line 1397)
    # Getting the type of 'np' (line 1397)
    np_276334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 21), 'np', False)
    # Obtaining the member 'float64' of a type (line 1397)
    float64_276335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 21), np_276334, 'float64')
    # Processing the call keyword arguments (line 1397)
    kwargs_276336 = {}
    # Getting the type of 'y' (line 1397)
    y_276332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'y', False)
    # Obtaining the member 'astype' of a type (line 1397)
    astype_276333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 12), y_276332, 'astype')
    # Calling astype(args, kwargs) (line 1397)
    astype_call_result_276337 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 12), astype_276333, *[float64_276335], **kwargs_276336)
    
    # Assigning a type to the variable 'y' (line 1397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 8), 'y', astype_call_result_276337)
    # SSA join for if statement (line 1395)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1398):
    
    # Assigning a Call to a Name (line 1398):
    
    # Call to zeros(...): (line 1398)
    # Processing the call arguments (line 1398)
    # Getting the type of 'K' (line 1398)
    K_276339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 15), 'K', False)
    # Getting the type of 'y' (line 1398)
    y_276340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 18), 'y', False)
    # Obtaining the member 'dtype' of a type (line 1398)
    dtype_276341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 18), y_276340, 'dtype')
    # Processing the call keyword arguments (line 1398)
    kwargs_276342 = {}
    # Getting the type of 'zeros' (line 1398)
    zeros_276338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 9), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1398)
    zeros_call_result_276343 = invoke(stypy.reporting.localization.Localization(__file__, 1398, 9), zeros_276338, *[K_276339, dtype_276341], **kwargs_276342)
    
    # Assigning a type to the variable 'zi' (line 1398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 4), 'zi', zeros_call_result_276343)
    
    # Type idiom detected: calculating its left and rigth part (line 1399)
    # Getting the type of 'x' (line 1399)
    x_276344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 7), 'x')
    # Getting the type of 'None' (line 1399)
    None_276345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 12), 'None')
    
    (may_be_276346, more_types_in_union_276347) = may_be_none(x_276344, None_276345)

    if may_be_276346:

        if more_types_in_union_276347:
            # Runtime conditional SSA (line 1399)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1400):
        
        # Assigning a Call to a Name (line 1400):
        
        # Call to zeros(...): (line 1400)
        # Processing the call arguments (line 1400)
        # Getting the type of 'M' (line 1400)
        M_276349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 18), 'M', False)
        # Getting the type of 'y' (line 1400)
        y_276350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 21), 'y', False)
        # Obtaining the member 'dtype' of a type (line 1400)
        dtype_276351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 21), y_276350, 'dtype')
        # Processing the call keyword arguments (line 1400)
        kwargs_276352 = {}
        # Getting the type of 'zeros' (line 1400)
        zeros_276348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 12), 'zeros', False)
        # Calling zeros(args, kwargs) (line 1400)
        zeros_call_result_276353 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 12), zeros_276348, *[M_276349, dtype_276351], **kwargs_276352)
        
        # Assigning a type to the variable 'x' (line 1400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 8), 'x', zeros_call_result_276353)

        if more_types_in_union_276347:
            # Runtime conditional SSA for else branch (line 1399)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_276346) or more_types_in_union_276347):
        
        # Assigning a Call to a Name (line 1402):
        
        # Assigning a Call to a Name (line 1402):
        
        # Call to asarray(...): (line 1402)
        # Processing the call arguments (line 1402)
        # Getting the type of 'x' (line 1402)
        x_276355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 20), 'x', False)
        # Processing the call keyword arguments (line 1402)
        kwargs_276356 = {}
        # Getting the type of 'asarray' (line 1402)
        asarray_276354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 12), 'asarray', False)
        # Calling asarray(args, kwargs) (line 1402)
        asarray_call_result_276357 = invoke(stypy.reporting.localization.Localization(__file__, 1402, 12), asarray_276354, *[x_276355], **kwargs_276356)
        
        # Assigning a type to the variable 'x' (line 1402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1402, 8), 'x', asarray_call_result_276357)
        
        # Assigning a Call to a Name (line 1403):
        
        # Assigning a Call to a Name (line 1403):
        
        # Call to size(...): (line 1403)
        # Processing the call arguments (line 1403)
        # Getting the type of 'x' (line 1403)
        x_276360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 20), 'x', False)
        # Processing the call keyword arguments (line 1403)
        kwargs_276361 = {}
        # Getting the type of 'np' (line 1403)
        np_276358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 12), 'np', False)
        # Obtaining the member 'size' of a type (line 1403)
        size_276359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1403, 12), np_276358, 'size')
        # Calling size(args, kwargs) (line 1403)
        size_call_result_276362 = invoke(stypy.reporting.localization.Localization(__file__, 1403, 12), size_276359, *[x_276360], **kwargs_276361)
        
        # Assigning a type to the variable 'L' (line 1403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 8), 'L', size_call_result_276362)
        
        
        # Getting the type of 'L' (line 1404)
        L_276363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 11), 'L')
        # Getting the type of 'M' (line 1404)
        M_276364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 15), 'M')
        # Applying the binary operator '<' (line 1404)
        result_lt_276365 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 11), '<', L_276363, M_276364)
        
        # Testing the type of an if condition (line 1404)
        if_condition_276366 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1404, 8), result_lt_276365)
        # Assigning a type to the variable 'if_condition_276366' (line 1404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 8), 'if_condition_276366', if_condition_276366)
        # SSA begins for if statement (line 1404)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1405):
        
        # Assigning a Subscript to a Name (line 1405):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1405)
        tuple_276367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1405)
        # Adding element type (line 1405)
        # Getting the type of 'x' (line 1405)
        x_276368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 19), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1405, 19), tuple_276367, x_276368)
        # Adding element type (line 1405)
        
        # Call to zeros(...): (line 1405)
        # Processing the call arguments (line 1405)
        # Getting the type of 'M' (line 1405)
        M_276370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 28), 'M', False)
        # Getting the type of 'L' (line 1405)
        L_276371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 32), 'L', False)
        # Applying the binary operator '-' (line 1405)
        result_sub_276372 = python_operator(stypy.reporting.localization.Localization(__file__, 1405, 28), '-', M_276370, L_276371)
        
        # Processing the call keyword arguments (line 1405)
        kwargs_276373 = {}
        # Getting the type of 'zeros' (line 1405)
        zeros_276369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 22), 'zeros', False)
        # Calling zeros(args, kwargs) (line 1405)
        zeros_call_result_276374 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 22), zeros_276369, *[result_sub_276372], **kwargs_276373)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1405, 19), tuple_276367, zeros_call_result_276374)
        
        # Getting the type of 'r_' (line 1405)
        r__276375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 16), 'r_')
        # Obtaining the member '__getitem__' of a type (line 1405)
        getitem___276376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 16), r__276375, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1405)
        subscript_call_result_276377 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 16), getitem___276376, tuple_276367)
        
        # Assigning a type to the variable 'x' (line 1405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 12), 'x', subscript_call_result_276377)
        # SSA join for if statement (line 1404)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_276346 and more_types_in_union_276347):
            # SSA join for if statement (line 1399)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1406):
    
    # Assigning a Call to a Name (line 1406):
    
    # Call to size(...): (line 1406)
    # Processing the call arguments (line 1406)
    # Getting the type of 'y' (line 1406)
    y_276380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 16), 'y', False)
    # Processing the call keyword arguments (line 1406)
    kwargs_276381 = {}
    # Getting the type of 'np' (line 1406)
    np_276378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 8), 'np', False)
    # Obtaining the member 'size' of a type (line 1406)
    size_276379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1406, 8), np_276378, 'size')
    # Calling size(args, kwargs) (line 1406)
    size_call_result_276382 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 8), size_276379, *[y_276380], **kwargs_276381)
    
    # Assigning a type to the variable 'L' (line 1406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 4), 'L', size_call_result_276382)
    
    
    # Getting the type of 'L' (line 1407)
    L_276383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 7), 'L')
    # Getting the type of 'N' (line 1407)
    N_276384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 11), 'N')
    # Applying the binary operator '<' (line 1407)
    result_lt_276385 = python_operator(stypy.reporting.localization.Localization(__file__, 1407, 7), '<', L_276383, N_276384)
    
    # Testing the type of an if condition (line 1407)
    if_condition_276386 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1407, 4), result_lt_276385)
    # Assigning a type to the variable 'if_condition_276386' (line 1407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 4), 'if_condition_276386', if_condition_276386)
    # SSA begins for if statement (line 1407)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1408):
    
    # Assigning a Subscript to a Name (line 1408):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1408)
    tuple_276387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1408, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1408)
    # Adding element type (line 1408)
    # Getting the type of 'y' (line 1408)
    y_276388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 15), 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1408, 15), tuple_276387, y_276388)
    # Adding element type (line 1408)
    
    # Call to zeros(...): (line 1408)
    # Processing the call arguments (line 1408)
    # Getting the type of 'N' (line 1408)
    N_276390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 24), 'N', False)
    # Getting the type of 'L' (line 1408)
    L_276391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 28), 'L', False)
    # Applying the binary operator '-' (line 1408)
    result_sub_276392 = python_operator(stypy.reporting.localization.Localization(__file__, 1408, 24), '-', N_276390, L_276391)
    
    # Processing the call keyword arguments (line 1408)
    kwargs_276393 = {}
    # Getting the type of 'zeros' (line 1408)
    zeros_276389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 18), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1408)
    zeros_call_result_276394 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 18), zeros_276389, *[result_sub_276392], **kwargs_276393)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1408, 15), tuple_276387, zeros_call_result_276394)
    
    # Getting the type of 'r_' (line 1408)
    r__276395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 12), 'r_')
    # Obtaining the member '__getitem__' of a type (line 1408)
    getitem___276396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 12), r__276395, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1408)
    subscript_call_result_276397 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 12), getitem___276396, tuple_276387)
    
    # Assigning a type to the variable 'y' (line 1408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 8), 'y', subscript_call_result_276397)
    # SSA join for if statement (line 1407)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 1410)
    # Processing the call arguments (line 1410)
    # Getting the type of 'M' (line 1410)
    M_276399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 19), 'M', False)
    # Processing the call keyword arguments (line 1410)
    kwargs_276400 = {}
    # Getting the type of 'range' (line 1410)
    range_276398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 13), 'range', False)
    # Calling range(args, kwargs) (line 1410)
    range_call_result_276401 = invoke(stypy.reporting.localization.Localization(__file__, 1410, 13), range_276398, *[M_276399], **kwargs_276400)
    
    # Testing the type of a for loop iterable (line 1410)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1410, 4), range_call_result_276401)
    # Getting the type of the for loop variable (line 1410)
    for_loop_var_276402 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1410, 4), range_call_result_276401)
    # Assigning a type to the variable 'm' (line 1410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 4), 'm', for_loop_var_276402)
    # SSA begins for a for statement (line 1410)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 1411):
    
    # Assigning a Call to a Subscript (line 1411):
    
    # Call to sum(...): (line 1411)
    # Processing the call arguments (line 1411)
    
    # Obtaining the type of the subscript
    # Getting the type of 'm' (line 1411)
    m_276405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 25), 'm', False)
    int_276406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 29), 'int')
    # Applying the binary operator '+' (line 1411)
    result_add_276407 = python_operator(stypy.reporting.localization.Localization(__file__, 1411, 25), '+', m_276405, int_276406)
    
    slice_276408 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1411, 23), result_add_276407, None, None)
    # Getting the type of 'b' (line 1411)
    b_276409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 23), 'b', False)
    # Obtaining the member '__getitem__' of a type (line 1411)
    getitem___276410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 23), b_276409, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1411)
    subscript_call_result_276411 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 23), getitem___276410, slice_276408)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'M' (line 1411)
    M_276412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 38), 'M', False)
    # Getting the type of 'm' (line 1411)
    m_276413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 42), 'm', False)
    # Applying the binary operator '-' (line 1411)
    result_sub_276414 = python_operator(stypy.reporting.localization.Localization(__file__, 1411, 38), '-', M_276412, m_276413)
    
    slice_276415 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1411, 35), None, result_sub_276414, None)
    # Getting the type of 'x' (line 1411)
    x_276416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 35), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 1411)
    getitem___276417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 35), x_276416, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1411)
    subscript_call_result_276418 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 35), getitem___276417, slice_276415)
    
    # Applying the binary operator '*' (line 1411)
    result_mul_276419 = python_operator(stypy.reporting.localization.Localization(__file__, 1411, 23), '*', subscript_call_result_276411, subscript_call_result_276418)
    
    # Processing the call keyword arguments (line 1411)
    int_276420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 51), 'int')
    keyword_276421 = int_276420
    kwargs_276422 = {'axis': keyword_276421}
    # Getting the type of 'np' (line 1411)
    np_276403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 16), 'np', False)
    # Obtaining the member 'sum' of a type (line 1411)
    sum_276404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1411, 16), np_276403, 'sum')
    # Calling sum(args, kwargs) (line 1411)
    sum_call_result_276423 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 16), sum_276404, *[result_mul_276419], **kwargs_276422)
    
    # Getting the type of 'zi' (line 1411)
    zi_276424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 8), 'zi')
    # Getting the type of 'm' (line 1411)
    m_276425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 11), 'm')
    # Storing an element on a container (line 1411)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 8), zi_276424, (m_276425, sum_call_result_276423))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 1413)
    # Processing the call arguments (line 1413)
    # Getting the type of 'N' (line 1413)
    N_276427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 19), 'N', False)
    # Processing the call keyword arguments (line 1413)
    kwargs_276428 = {}
    # Getting the type of 'range' (line 1413)
    range_276426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 13), 'range', False)
    # Calling range(args, kwargs) (line 1413)
    range_call_result_276429 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 13), range_276426, *[N_276427], **kwargs_276428)
    
    # Testing the type of a for loop iterable (line 1413)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1413, 4), range_call_result_276429)
    # Getting the type of the for loop variable (line 1413)
    for_loop_var_276430 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1413, 4), range_call_result_276429)
    # Assigning a type to the variable 'm' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 4), 'm', for_loop_var_276430)
    # SSA begins for a for statement (line 1413)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'zi' (line 1414)
    zi_276431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 8), 'zi')
    
    # Obtaining the type of the subscript
    # Getting the type of 'm' (line 1414)
    m_276432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 11), 'm')
    # Getting the type of 'zi' (line 1414)
    zi_276433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 8), 'zi')
    # Obtaining the member '__getitem__' of a type (line 1414)
    getitem___276434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 8), zi_276433, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1414)
    subscript_call_result_276435 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 8), getitem___276434, m_276432)
    
    
    # Call to sum(...): (line 1414)
    # Processing the call arguments (line 1414)
    
    # Obtaining the type of the subscript
    # Getting the type of 'm' (line 1414)
    m_276438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 26), 'm', False)
    int_276439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1414, 30), 'int')
    # Applying the binary operator '+' (line 1414)
    result_add_276440 = python_operator(stypy.reporting.localization.Localization(__file__, 1414, 26), '+', m_276438, int_276439)
    
    slice_276441 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1414, 24), result_add_276440, None, None)
    # Getting the type of 'a' (line 1414)
    a_276442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 24), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 1414)
    getitem___276443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 24), a_276442, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1414)
    subscript_call_result_276444 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 24), getitem___276443, slice_276441)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'N' (line 1414)
    N_276445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 39), 'N', False)
    # Getting the type of 'm' (line 1414)
    m_276446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 43), 'm', False)
    # Applying the binary operator '-' (line 1414)
    result_sub_276447 = python_operator(stypy.reporting.localization.Localization(__file__, 1414, 39), '-', N_276445, m_276446)
    
    slice_276448 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1414, 36), None, result_sub_276447, None)
    # Getting the type of 'y' (line 1414)
    y_276449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 36), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 1414)
    getitem___276450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 36), y_276449, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1414)
    subscript_call_result_276451 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 36), getitem___276450, slice_276448)
    
    # Applying the binary operator '*' (line 1414)
    result_mul_276452 = python_operator(stypy.reporting.localization.Localization(__file__, 1414, 24), '*', subscript_call_result_276444, subscript_call_result_276451)
    
    # Processing the call keyword arguments (line 1414)
    int_276453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1414, 52), 'int')
    keyword_276454 = int_276453
    kwargs_276455 = {'axis': keyword_276454}
    # Getting the type of 'np' (line 1414)
    np_276436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 17), 'np', False)
    # Obtaining the member 'sum' of a type (line 1414)
    sum_276437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1414, 17), np_276436, 'sum')
    # Calling sum(args, kwargs) (line 1414)
    sum_call_result_276456 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 17), sum_276437, *[result_mul_276452], **kwargs_276455)
    
    # Applying the binary operator '-=' (line 1414)
    result_isub_276457 = python_operator(stypy.reporting.localization.Localization(__file__, 1414, 8), '-=', subscript_call_result_276435, sum_call_result_276456)
    # Getting the type of 'zi' (line 1414)
    zi_276458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 8), 'zi')
    # Getting the type of 'm' (line 1414)
    m_276459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 11), 'm')
    # Storing an element on a container (line 1414)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1414, 8), zi_276458, (m_276459, result_isub_276457))
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'zi' (line 1416)
    zi_276460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 11), 'zi')
    # Assigning a type to the variable 'stypy_return_type' (line 1416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 4), 'stypy_return_type', zi_276460)
    
    # ################# End of 'lfiltic(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lfiltic' in the type store
    # Getting the type of 'stypy_return_type' (line 1351)
    stypy_return_type_276461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276461)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lfiltic'
    return stypy_return_type_276461

# Assigning a type to the variable 'lfiltic' (line 1351)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 0), 'lfiltic', lfiltic)

@norecursion
def deconvolve(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'deconvolve'
    module_type_store = module_type_store.open_function_context('deconvolve', 1419, 0, False)
    
    # Passed parameters checking function
    deconvolve.stypy_localization = localization
    deconvolve.stypy_type_of_self = None
    deconvolve.stypy_type_store = module_type_store
    deconvolve.stypy_function_name = 'deconvolve'
    deconvolve.stypy_param_names_list = ['signal', 'divisor']
    deconvolve.stypy_varargs_param_name = None
    deconvolve.stypy_kwargs_param_name = None
    deconvolve.stypy_call_defaults = defaults
    deconvolve.stypy_call_varargs = varargs
    deconvolve.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'deconvolve', ['signal', 'divisor'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'deconvolve', localization, ['signal', 'divisor'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'deconvolve(...)' code ##################

    str_276462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, (-1)), 'str', "Deconvolves ``divisor`` out of ``signal`` using inverse filtering.\n\n    Returns the quotient and remainder such that\n    ``signal = convolve(divisor, quotient) + remainder``\n\n    Parameters\n    ----------\n    signal : array_like\n        Signal data, typically a recorded signal\n    divisor : array_like\n        Divisor data, typically an impulse response or filter that was\n        applied to the original signal\n\n    Returns\n    -------\n    quotient : ndarray\n        Quotient, typically the recovered original signal\n    remainder : ndarray\n        Remainder\n\n    Examples\n    --------\n    Deconvolve a signal that's been filtered:\n\n    >>> from scipy import signal\n    >>> original = [0, 1, 0, 0, 1, 1, 0, 0]\n    >>> impulse_response = [2, 1]\n    >>> recorded = signal.convolve(impulse_response, original)\n    >>> recorded\n    array([0, 2, 1, 0, 2, 3, 1, 0, 0])\n    >>> recovered, remainder = signal.deconvolve(recorded, impulse_response)\n    >>> recovered\n    array([ 0.,  1.,  0.,  0.,  1.,  1.,  0.,  0.])\n\n    See Also\n    --------\n    numpy.polydiv : performs polynomial division (same operation, but\n                    also accepts poly1d objects)\n\n    ")
    
    # Assigning a Call to a Name (line 1460):
    
    # Assigning a Call to a Name (line 1460):
    
    # Call to atleast_1d(...): (line 1460)
    # Processing the call arguments (line 1460)
    # Getting the type of 'signal' (line 1460)
    signal_276464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 21), 'signal', False)
    # Processing the call keyword arguments (line 1460)
    kwargs_276465 = {}
    # Getting the type of 'atleast_1d' (line 1460)
    atleast_1d_276463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 10), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1460)
    atleast_1d_call_result_276466 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 10), atleast_1d_276463, *[signal_276464], **kwargs_276465)
    
    # Assigning a type to the variable 'num' (line 1460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 4), 'num', atleast_1d_call_result_276466)
    
    # Assigning a Call to a Name (line 1461):
    
    # Assigning a Call to a Name (line 1461):
    
    # Call to atleast_1d(...): (line 1461)
    # Processing the call arguments (line 1461)
    # Getting the type of 'divisor' (line 1461)
    divisor_276468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 21), 'divisor', False)
    # Processing the call keyword arguments (line 1461)
    kwargs_276469 = {}
    # Getting the type of 'atleast_1d' (line 1461)
    atleast_1d_276467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 10), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1461)
    atleast_1d_call_result_276470 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 10), atleast_1d_276467, *[divisor_276468], **kwargs_276469)
    
    # Assigning a type to the variable 'den' (line 1461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'den', atleast_1d_call_result_276470)
    
    # Assigning a Call to a Name (line 1462):
    
    # Assigning a Call to a Name (line 1462):
    
    # Call to len(...): (line 1462)
    # Processing the call arguments (line 1462)
    # Getting the type of 'num' (line 1462)
    num_276472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 12), 'num', False)
    # Processing the call keyword arguments (line 1462)
    kwargs_276473 = {}
    # Getting the type of 'len' (line 1462)
    len_276471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 8), 'len', False)
    # Calling len(args, kwargs) (line 1462)
    len_call_result_276474 = invoke(stypy.reporting.localization.Localization(__file__, 1462, 8), len_276471, *[num_276472], **kwargs_276473)
    
    # Assigning a type to the variable 'N' (line 1462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1462, 4), 'N', len_call_result_276474)
    
    # Assigning a Call to a Name (line 1463):
    
    # Assigning a Call to a Name (line 1463):
    
    # Call to len(...): (line 1463)
    # Processing the call arguments (line 1463)
    # Getting the type of 'den' (line 1463)
    den_276476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 12), 'den', False)
    # Processing the call keyword arguments (line 1463)
    kwargs_276477 = {}
    # Getting the type of 'len' (line 1463)
    len_276475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 8), 'len', False)
    # Calling len(args, kwargs) (line 1463)
    len_call_result_276478 = invoke(stypy.reporting.localization.Localization(__file__, 1463, 8), len_276475, *[den_276476], **kwargs_276477)
    
    # Assigning a type to the variable 'D' (line 1463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1463, 4), 'D', len_call_result_276478)
    
    
    # Getting the type of 'D' (line 1464)
    D_276479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 7), 'D')
    # Getting the type of 'N' (line 1464)
    N_276480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 11), 'N')
    # Applying the binary operator '>' (line 1464)
    result_gt_276481 = python_operator(stypy.reporting.localization.Localization(__file__, 1464, 7), '>', D_276479, N_276480)
    
    # Testing the type of an if condition (line 1464)
    if_condition_276482 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1464, 4), result_gt_276481)
    # Assigning a type to the variable 'if_condition_276482' (line 1464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 4), 'if_condition_276482', if_condition_276482)
    # SSA begins for if statement (line 1464)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 1465):
    
    # Assigning a List to a Name (line 1465):
    
    # Obtaining an instance of the builtin type 'list' (line 1465)
    list_276483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1465)
    
    # Assigning a type to the variable 'quot' (line 1465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 8), 'quot', list_276483)
    
    # Assigning a Name to a Name (line 1466):
    
    # Assigning a Name to a Name (line 1466):
    # Getting the type of 'num' (line 1466)
    num_276484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 14), 'num')
    # Assigning a type to the variable 'rem' (line 1466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 8), 'rem', num_276484)
    # SSA branch for the else part of an if statement (line 1464)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1468):
    
    # Assigning a Call to a Name (line 1468):
    
    # Call to zeros(...): (line 1468)
    # Processing the call arguments (line 1468)
    # Getting the type of 'N' (line 1468)
    N_276486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 22), 'N', False)
    # Getting the type of 'D' (line 1468)
    D_276487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 26), 'D', False)
    # Applying the binary operator '-' (line 1468)
    result_sub_276488 = python_operator(stypy.reporting.localization.Localization(__file__, 1468, 22), '-', N_276486, D_276487)
    
    int_276489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, 30), 'int')
    # Applying the binary operator '+' (line 1468)
    result_add_276490 = python_operator(stypy.reporting.localization.Localization(__file__, 1468, 28), '+', result_sub_276488, int_276489)
    
    # Getting the type of 'float' (line 1468)
    float_276491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 33), 'float', False)
    # Processing the call keyword arguments (line 1468)
    kwargs_276492 = {}
    # Getting the type of 'zeros' (line 1468)
    zeros_276485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 16), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1468)
    zeros_call_result_276493 = invoke(stypy.reporting.localization.Localization(__file__, 1468, 16), zeros_276485, *[result_add_276490, float_276491], **kwargs_276492)
    
    # Assigning a type to the variable 'input' (line 1468)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1468, 8), 'input', zeros_call_result_276493)
    
    # Assigning a Num to a Subscript (line 1469):
    
    # Assigning a Num to a Subscript (line 1469):
    int_276494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 19), 'int')
    # Getting the type of 'input' (line 1469)
    input_276495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 8), 'input')
    int_276496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 14), 'int')
    # Storing an element on a container (line 1469)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1469, 8), input_276495, (int_276496, int_276494))
    
    # Assigning a Call to a Name (line 1470):
    
    # Assigning a Call to a Name (line 1470):
    
    # Call to lfilter(...): (line 1470)
    # Processing the call arguments (line 1470)
    # Getting the type of 'num' (line 1470)
    num_276498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 23), 'num', False)
    # Getting the type of 'den' (line 1470)
    den_276499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 28), 'den', False)
    # Getting the type of 'input' (line 1470)
    input_276500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 33), 'input', False)
    # Processing the call keyword arguments (line 1470)
    kwargs_276501 = {}
    # Getting the type of 'lfilter' (line 1470)
    lfilter_276497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 15), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 1470)
    lfilter_call_result_276502 = invoke(stypy.reporting.localization.Localization(__file__, 1470, 15), lfilter_276497, *[num_276498, den_276499, input_276500], **kwargs_276501)
    
    # Assigning a type to the variable 'quot' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 8), 'quot', lfilter_call_result_276502)
    
    # Assigning a BinOp to a Name (line 1471):
    
    # Assigning a BinOp to a Name (line 1471):
    # Getting the type of 'num' (line 1471)
    num_276503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 14), 'num')
    
    # Call to convolve(...): (line 1471)
    # Processing the call arguments (line 1471)
    # Getting the type of 'den' (line 1471)
    den_276505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 29), 'den', False)
    # Getting the type of 'quot' (line 1471)
    quot_276506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 34), 'quot', False)
    # Processing the call keyword arguments (line 1471)
    str_276507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 45), 'str', 'full')
    keyword_276508 = str_276507
    kwargs_276509 = {'mode': keyword_276508}
    # Getting the type of 'convolve' (line 1471)
    convolve_276504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 20), 'convolve', False)
    # Calling convolve(args, kwargs) (line 1471)
    convolve_call_result_276510 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 20), convolve_276504, *[den_276505, quot_276506], **kwargs_276509)
    
    # Applying the binary operator '-' (line 1471)
    result_sub_276511 = python_operator(stypy.reporting.localization.Localization(__file__, 1471, 14), '-', num_276503, convolve_call_result_276510)
    
    # Assigning a type to the variable 'rem' (line 1471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'rem', result_sub_276511)
    # SSA join for if statement (line 1464)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1472)
    tuple_276512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1472)
    # Adding element type (line 1472)
    # Getting the type of 'quot' (line 1472)
    quot_276513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 11), 'quot')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 11), tuple_276512, quot_276513)
    # Adding element type (line 1472)
    # Getting the type of 'rem' (line 1472)
    rem_276514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 17), 'rem')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 11), tuple_276512, rem_276514)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 4), 'stypy_return_type', tuple_276512)
    
    # ################# End of 'deconvolve(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'deconvolve' in the type store
    # Getting the type of 'stypy_return_type' (line 1419)
    stypy_return_type_276515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276515)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'deconvolve'
    return stypy_return_type_276515

# Assigning a type to the variable 'deconvolve' (line 1419)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1419, 0), 'deconvolve', deconvolve)

@norecursion
def hilbert(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1475)
    None_276516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 17), 'None')
    int_276517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1475, 28), 'int')
    defaults = [None_276516, int_276517]
    # Create a new context for function 'hilbert'
    module_type_store = module_type_store.open_function_context('hilbert', 1475, 0, False)
    
    # Passed parameters checking function
    hilbert.stypy_localization = localization
    hilbert.stypy_type_of_self = None
    hilbert.stypy_type_store = module_type_store
    hilbert.stypy_function_name = 'hilbert'
    hilbert.stypy_param_names_list = ['x', 'N', 'axis']
    hilbert.stypy_varargs_param_name = None
    hilbert.stypy_kwargs_param_name = None
    hilbert.stypy_call_defaults = defaults
    hilbert.stypy_call_varargs = varargs
    hilbert.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hilbert', ['x', 'N', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hilbert', localization, ['x', 'N', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hilbert(...)' code ##################

    str_276518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1564, (-1)), 'str', '\n    Compute the analytic signal, using the Hilbert transform.\n\n    The transformation is done along the last axis by default.\n\n    Parameters\n    ----------\n    x : array_like\n        Signal data.  Must be real.\n    N : int, optional\n        Number of Fourier components.  Default: ``x.shape[axis]``\n    axis : int, optional\n        Axis along which to do the transformation.  Default: -1.\n\n    Returns\n    -------\n    xa : ndarray\n        Analytic signal of `x`, of each 1-D array along `axis`\n\n    See Also\n    --------\n    scipy.fftpack.hilbert : Return Hilbert transform of a periodic sequence x.\n\n    Notes\n    -----\n    The analytic signal ``x_a(t)`` of signal ``x(t)`` is:\n\n    .. math:: x_a = F^{-1}(F(x) 2U) = x + i y\n\n    where `F` is the Fourier transform, `U` the unit step function,\n    and `y` the Hilbert transform of `x`. [1]_\n\n    In other words, the negative half of the frequency spectrum is zeroed\n    out, turning the real-valued signal into a complex signal.  The Hilbert\n    transformed signal can be obtained from ``np.imag(hilbert(x))``, and the\n    original signal from ``np.real(hilbert(x))``.\n\n    Examples\n    ---------\n    In this example we use the Hilbert transform to determine the amplitude\n    envelope and instantaneous frequency of an amplitude-modulated signal.\n\n    >>> import numpy as np\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy.signal import hilbert, chirp\n\n    >>> duration = 1.0\n    >>> fs = 400.0\n    >>> samples = int(fs*duration)\n    >>> t = np.arange(samples) / fs\n\n    We create a chirp of which the frequency increases from 20 Hz to 100 Hz and\n    apply an amplitude modulation.\n\n    >>> signal = chirp(t, 20.0, t[-1], 100.0)\n    >>> signal *= (1.0 + 0.5 * np.sin(2.0*np.pi*3.0*t) )\n\n    The amplitude envelope is given by magnitude of the analytic signal. The\n    instantaneous frequency can be obtained by differentiating the\n    instantaneous phase in respect to time. The instantaneous phase corresponds\n    to the phase angle of the analytic signal.\n\n    >>> analytic_signal = hilbert(signal)\n    >>> amplitude_envelope = np.abs(analytic_signal)\n    >>> instantaneous_phase = np.unwrap(np.angle(analytic_signal))\n    >>> instantaneous_frequency = (np.diff(instantaneous_phase) /\n    ...                            (2.0*np.pi) * fs)\n\n    >>> fig = plt.figure()\n    >>> ax0 = fig.add_subplot(211)\n    >>> ax0.plot(t, signal, label=\'signal\')\n    >>> ax0.plot(t, amplitude_envelope, label=\'envelope\')\n    >>> ax0.set_xlabel("time in seconds")\n    >>> ax0.legend()\n    >>> ax1 = fig.add_subplot(212)\n    >>> ax1.plot(t[1:], instantaneous_frequency)\n    >>> ax1.set_xlabel("time in seconds")\n    >>> ax1.set_ylim(0.0, 120.0)\n\n    References\n    ----------\n    .. [1] Wikipedia, "Analytic signal".\n           http://en.wikipedia.org/wiki/Analytic_signal\n    .. [2] Leon Cohen, "Time-Frequency Analysis", 1995. Chapter 2.\n    .. [3] Alan V. Oppenheim, Ronald W. Schafer. Discrete-Time Signal\n           Processing, Third Edition, 2009. Chapter 12.\n           ISBN 13: 978-1292-02572-8\n\n    ')
    
    # Assigning a Call to a Name (line 1565):
    
    # Assigning a Call to a Name (line 1565):
    
    # Call to asarray(...): (line 1565)
    # Processing the call arguments (line 1565)
    # Getting the type of 'x' (line 1565)
    x_276520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 16), 'x', False)
    # Processing the call keyword arguments (line 1565)
    kwargs_276521 = {}
    # Getting the type of 'asarray' (line 1565)
    asarray_276519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1565)
    asarray_call_result_276522 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 8), asarray_276519, *[x_276520], **kwargs_276521)
    
    # Assigning a type to the variable 'x' (line 1565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 4), 'x', asarray_call_result_276522)
    
    
    # Call to iscomplexobj(...): (line 1566)
    # Processing the call arguments (line 1566)
    # Getting the type of 'x' (line 1566)
    x_276524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 20), 'x', False)
    # Processing the call keyword arguments (line 1566)
    kwargs_276525 = {}
    # Getting the type of 'iscomplexobj' (line 1566)
    iscomplexobj_276523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 7), 'iscomplexobj', False)
    # Calling iscomplexobj(args, kwargs) (line 1566)
    iscomplexobj_call_result_276526 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 7), iscomplexobj_276523, *[x_276524], **kwargs_276525)
    
    # Testing the type of an if condition (line 1566)
    if_condition_276527 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1566, 4), iscomplexobj_call_result_276526)
    # Assigning a type to the variable 'if_condition_276527' (line 1566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 4), 'if_condition_276527', if_condition_276527)
    # SSA begins for if statement (line 1566)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1567)
    # Processing the call arguments (line 1567)
    str_276529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1567, 25), 'str', 'x must be real.')
    # Processing the call keyword arguments (line 1567)
    kwargs_276530 = {}
    # Getting the type of 'ValueError' (line 1567)
    ValueError_276528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1567)
    ValueError_call_result_276531 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 14), ValueError_276528, *[str_276529], **kwargs_276530)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1567, 8), ValueError_call_result_276531, 'raise parameter', BaseException)
    # SSA join for if statement (line 1566)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1568)
    # Getting the type of 'N' (line 1568)
    N_276532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 7), 'N')
    # Getting the type of 'None' (line 1568)
    None_276533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 12), 'None')
    
    (may_be_276534, more_types_in_union_276535) = may_be_none(N_276532, None_276533)

    if may_be_276534:

        if more_types_in_union_276535:
            # Runtime conditional SSA (line 1568)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Subscript to a Name (line 1569):
        
        # Assigning a Subscript to a Name (line 1569):
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 1569)
        axis_276536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 20), 'axis')
        # Getting the type of 'x' (line 1569)
        x_276537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1569, 12), 'x')
        # Obtaining the member 'shape' of a type (line 1569)
        shape_276538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 12), x_276537, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1569)
        getitem___276539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1569, 12), shape_276538, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1569)
        subscript_call_result_276540 = invoke(stypy.reporting.localization.Localization(__file__, 1569, 12), getitem___276539, axis_276536)
        
        # Assigning a type to the variable 'N' (line 1569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 8), 'N', subscript_call_result_276540)

        if more_types_in_union_276535:
            # SSA join for if statement (line 1568)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'N' (line 1570)
    N_276541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 7), 'N')
    int_276542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 12), 'int')
    # Applying the binary operator '<=' (line 1570)
    result_le_276543 = python_operator(stypy.reporting.localization.Localization(__file__, 1570, 7), '<=', N_276541, int_276542)
    
    # Testing the type of an if condition (line 1570)
    if_condition_276544 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1570, 4), result_le_276543)
    # Assigning a type to the variable 'if_condition_276544' (line 1570)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1570, 4), 'if_condition_276544', if_condition_276544)
    # SSA begins for if statement (line 1570)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1571)
    # Processing the call arguments (line 1571)
    str_276546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 25), 'str', 'N must be positive.')
    # Processing the call keyword arguments (line 1571)
    kwargs_276547 = {}
    # Getting the type of 'ValueError' (line 1571)
    ValueError_276545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1571)
    ValueError_call_result_276548 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 14), ValueError_276545, *[str_276546], **kwargs_276547)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1571, 8), ValueError_call_result_276548, 'raise parameter', BaseException)
    # SSA join for if statement (line 1570)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1573):
    
    # Assigning a Call to a Name (line 1573):
    
    # Call to fft(...): (line 1573)
    # Processing the call arguments (line 1573)
    # Getting the type of 'x' (line 1573)
    x_276551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 21), 'x', False)
    # Getting the type of 'N' (line 1573)
    N_276552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 24), 'N', False)
    # Processing the call keyword arguments (line 1573)
    # Getting the type of 'axis' (line 1573)
    axis_276553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 32), 'axis', False)
    keyword_276554 = axis_276553
    kwargs_276555 = {'axis': keyword_276554}
    # Getting the type of 'fftpack' (line 1573)
    fftpack_276549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 9), 'fftpack', False)
    # Obtaining the member 'fft' of a type (line 1573)
    fft_276550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 9), fftpack_276549, 'fft')
    # Calling fft(args, kwargs) (line 1573)
    fft_call_result_276556 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 9), fft_276550, *[x_276551, N_276552], **kwargs_276555)
    
    # Assigning a type to the variable 'Xf' (line 1573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 4), 'Xf', fft_call_result_276556)
    
    # Assigning a Call to a Name (line 1574):
    
    # Assigning a Call to a Name (line 1574):
    
    # Call to zeros(...): (line 1574)
    # Processing the call arguments (line 1574)
    # Getting the type of 'N' (line 1574)
    N_276558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 14), 'N', False)
    # Processing the call keyword arguments (line 1574)
    kwargs_276559 = {}
    # Getting the type of 'zeros' (line 1574)
    zeros_276557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 8), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1574)
    zeros_call_result_276560 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 8), zeros_276557, *[N_276558], **kwargs_276559)
    
    # Assigning a type to the variable 'h' (line 1574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1574, 4), 'h', zeros_call_result_276560)
    
    
    # Getting the type of 'N' (line 1575)
    N_276561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 7), 'N')
    int_276562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, 11), 'int')
    # Applying the binary operator '%' (line 1575)
    result_mod_276563 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 7), '%', N_276561, int_276562)
    
    int_276564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1575, 16), 'int')
    # Applying the binary operator '==' (line 1575)
    result_eq_276565 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 7), '==', result_mod_276563, int_276564)
    
    # Testing the type of an if condition (line 1575)
    if_condition_276566 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1575, 4), result_eq_276565)
    # Assigning a type to the variable 'if_condition_276566' (line 1575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 4), 'if_condition_276566', if_condition_276566)
    # SSA begins for if statement (line 1575)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Num to a Subscript (line 1576):
    int_276567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 27), 'int')
    # Getting the type of 'h' (line 1576)
    h_276568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 15), 'h')
    # Getting the type of 'N' (line 1576)
    N_276569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 17), 'N')
    int_276570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 22), 'int')
    # Applying the binary operator '//' (line 1576)
    result_floordiv_276571 = python_operator(stypy.reporting.localization.Localization(__file__, 1576, 17), '//', N_276569, int_276570)
    
    # Storing an element on a container (line 1576)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1576, 15), h_276568, (result_floordiv_276571, int_276567))
    
    # Assigning a Subscript to a Subscript (line 1576):
    
    # Obtaining the type of the subscript
    # Getting the type of 'N' (line 1576)
    N_276572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 17), 'N')
    int_276573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 22), 'int')
    # Applying the binary operator '//' (line 1576)
    result_floordiv_276574 = python_operator(stypy.reporting.localization.Localization(__file__, 1576, 17), '//', N_276572, int_276573)
    
    # Getting the type of 'h' (line 1576)
    h_276575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 15), 'h')
    # Obtaining the member '__getitem__' of a type (line 1576)
    getitem___276576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1576, 15), h_276575, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1576)
    subscript_call_result_276577 = invoke(stypy.reporting.localization.Localization(__file__, 1576, 15), getitem___276576, result_floordiv_276574)
    
    # Getting the type of 'h' (line 1576)
    h_276578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 8), 'h')
    int_276579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 10), 'int')
    # Storing an element on a container (line 1576)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1576, 8), h_276578, (int_276579, subscript_call_result_276577))
    
    # Assigning a Num to a Subscript (line 1577):
    
    # Assigning a Num to a Subscript (line 1577):
    int_276580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1577, 22), 'int')
    # Getting the type of 'h' (line 1577)
    h_276581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'h')
    int_276582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1577, 10), 'int')
    # Getting the type of 'N' (line 1577)
    N_276583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 12), 'N')
    int_276584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1577, 17), 'int')
    # Applying the binary operator '//' (line 1577)
    result_floordiv_276585 = python_operator(stypy.reporting.localization.Localization(__file__, 1577, 12), '//', N_276583, int_276584)
    
    slice_276586 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1577, 8), int_276582, result_floordiv_276585, None)
    # Storing an element on a container (line 1577)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1577, 8), h_276581, (slice_276586, int_276580))
    # SSA branch for the else part of an if statement (line 1575)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Subscript (line 1579):
    
    # Assigning a Num to a Subscript (line 1579):
    int_276587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1579, 15), 'int')
    # Getting the type of 'h' (line 1579)
    h_276588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 8), 'h')
    int_276589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1579, 10), 'int')
    # Storing an element on a container (line 1579)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1579, 8), h_276588, (int_276589, int_276587))
    
    # Assigning a Num to a Subscript (line 1580):
    
    # Assigning a Num to a Subscript (line 1580):
    int_276590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 28), 'int')
    # Getting the type of 'h' (line 1580)
    h_276591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 8), 'h')
    int_276592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 10), 'int')
    # Getting the type of 'N' (line 1580)
    N_276593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 13), 'N')
    int_276594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 17), 'int')
    # Applying the binary operator '+' (line 1580)
    result_add_276595 = python_operator(stypy.reporting.localization.Localization(__file__, 1580, 13), '+', N_276593, int_276594)
    
    int_276596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, 23), 'int')
    # Applying the binary operator '//' (line 1580)
    result_floordiv_276597 = python_operator(stypy.reporting.localization.Localization(__file__, 1580, 12), '//', result_add_276595, int_276596)
    
    slice_276598 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1580, 8), int_276592, result_floordiv_276597, None)
    # Storing an element on a container (line 1580)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1580, 8), h_276591, (slice_276598, int_276590))
    # SSA join for if statement (line 1575)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'x' (line 1582)
    x_276599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 7), 'x')
    # Obtaining the member 'ndim' of a type (line 1582)
    ndim_276600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1582, 7), x_276599, 'ndim')
    int_276601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1582, 16), 'int')
    # Applying the binary operator '>' (line 1582)
    result_gt_276602 = python_operator(stypy.reporting.localization.Localization(__file__, 1582, 7), '>', ndim_276600, int_276601)
    
    # Testing the type of an if condition (line 1582)
    if_condition_276603 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1582, 4), result_gt_276602)
    # Assigning a type to the variable 'if_condition_276603' (line 1582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 4), 'if_condition_276603', if_condition_276603)
    # SSA begins for if statement (line 1582)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1583):
    
    # Assigning a BinOp to a Name (line 1583):
    
    # Obtaining an instance of the builtin type 'list' (line 1583)
    list_276604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1583)
    # Adding element type (line 1583)
    # Getting the type of 'newaxis' (line 1583)
    newaxis_276605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 15), 'newaxis')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1583, 14), list_276604, newaxis_276605)
    
    # Getting the type of 'x' (line 1583)
    x_276606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 26), 'x')
    # Obtaining the member 'ndim' of a type (line 1583)
    ndim_276607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 26), x_276606, 'ndim')
    # Applying the binary operator '*' (line 1583)
    result_mul_276608 = python_operator(stypy.reporting.localization.Localization(__file__, 1583, 14), '*', list_276604, ndim_276607)
    
    # Assigning a type to the variable 'ind' (line 1583)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 8), 'ind', result_mul_276608)
    
    # Assigning a Call to a Subscript (line 1584):
    
    # Assigning a Call to a Subscript (line 1584):
    
    # Call to slice(...): (line 1584)
    # Processing the call arguments (line 1584)
    # Getting the type of 'None' (line 1584)
    None_276610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 26), 'None', False)
    # Processing the call keyword arguments (line 1584)
    kwargs_276611 = {}
    # Getting the type of 'slice' (line 1584)
    slice_276609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 20), 'slice', False)
    # Calling slice(args, kwargs) (line 1584)
    slice_call_result_276612 = invoke(stypy.reporting.localization.Localization(__file__, 1584, 20), slice_276609, *[None_276610], **kwargs_276611)
    
    # Getting the type of 'ind' (line 1584)
    ind_276613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 8), 'ind')
    # Getting the type of 'axis' (line 1584)
    axis_276614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 12), 'axis')
    # Storing an element on a container (line 1584)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1584, 8), ind_276613, (axis_276614, slice_call_result_276612))
    
    # Assigning a Subscript to a Name (line 1585):
    
    # Assigning a Subscript to a Name (line 1585):
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 1585)
    ind_276615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 14), 'ind')
    # Getting the type of 'h' (line 1585)
    h_276616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 12), 'h')
    # Obtaining the member '__getitem__' of a type (line 1585)
    getitem___276617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1585, 12), h_276616, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1585)
    subscript_call_result_276618 = invoke(stypy.reporting.localization.Localization(__file__, 1585, 12), getitem___276617, ind_276615)
    
    # Assigning a type to the variable 'h' (line 1585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 8), 'h', subscript_call_result_276618)
    # SSA join for if statement (line 1582)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1586):
    
    # Assigning a Call to a Name (line 1586):
    
    # Call to ifft(...): (line 1586)
    # Processing the call arguments (line 1586)
    # Getting the type of 'Xf' (line 1586)
    Xf_276621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 21), 'Xf', False)
    # Getting the type of 'h' (line 1586)
    h_276622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 26), 'h', False)
    # Applying the binary operator '*' (line 1586)
    result_mul_276623 = python_operator(stypy.reporting.localization.Localization(__file__, 1586, 21), '*', Xf_276621, h_276622)
    
    # Processing the call keyword arguments (line 1586)
    # Getting the type of 'axis' (line 1586)
    axis_276624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 34), 'axis', False)
    keyword_276625 = axis_276624
    kwargs_276626 = {'axis': keyword_276625}
    # Getting the type of 'fftpack' (line 1586)
    fftpack_276619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 8), 'fftpack', False)
    # Obtaining the member 'ifft' of a type (line 1586)
    ifft_276620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 8), fftpack_276619, 'ifft')
    # Calling ifft(args, kwargs) (line 1586)
    ifft_call_result_276627 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 8), ifft_276620, *[result_mul_276623], **kwargs_276626)
    
    # Assigning a type to the variable 'x' (line 1586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1586, 4), 'x', ifft_call_result_276627)
    # Getting the type of 'x' (line 1587)
    x_276628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 11), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 1587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 4), 'stypy_return_type', x_276628)
    
    # ################# End of 'hilbert(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hilbert' in the type store
    # Getting the type of 'stypy_return_type' (line 1475)
    stypy_return_type_276629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276629)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hilbert'
    return stypy_return_type_276629

# Assigning a type to the variable 'hilbert' (line 1475)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1475, 0), 'hilbert', hilbert)

@norecursion
def hilbert2(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1590)
    None_276630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 18), 'None')
    defaults = [None_276630]
    # Create a new context for function 'hilbert2'
    module_type_store = module_type_store.open_function_context('hilbert2', 1590, 0, False)
    
    # Passed parameters checking function
    hilbert2.stypy_localization = localization
    hilbert2.stypy_type_of_self = None
    hilbert2.stypy_type_store = module_type_store
    hilbert2.stypy_function_name = 'hilbert2'
    hilbert2.stypy_param_names_list = ['x', 'N']
    hilbert2.stypy_varargs_param_name = None
    hilbert2.stypy_kwargs_param_name = None
    hilbert2.stypy_call_defaults = defaults
    hilbert2.stypy_call_varargs = varargs
    hilbert2.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hilbert2', ['x', 'N'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hilbert2', localization, ['x', 'N'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hilbert2(...)' code ##################

    str_276631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1611, (-1)), 'str', '\n    Compute the \'2-D\' analytic signal of `x`\n\n    Parameters\n    ----------\n    x : array_like\n        2-D signal data.\n    N : int or tuple of two ints, optional\n        Number of Fourier components. Default is ``x.shape``\n\n    Returns\n    -------\n    xa : ndarray\n        Analytic signal of `x` taken along axes (0,1).\n\n    References\n    ----------\n    .. [1] Wikipedia, "Analytic signal",\n        http://en.wikipedia.org/wiki/Analytic_signal\n\n    ')
    
    # Assigning a Call to a Name (line 1612):
    
    # Assigning a Call to a Name (line 1612):
    
    # Call to atleast_2d(...): (line 1612)
    # Processing the call arguments (line 1612)
    # Getting the type of 'x' (line 1612)
    x_276633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 19), 'x', False)
    # Processing the call keyword arguments (line 1612)
    kwargs_276634 = {}
    # Getting the type of 'atleast_2d' (line 1612)
    atleast_2d_276632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 8), 'atleast_2d', False)
    # Calling atleast_2d(args, kwargs) (line 1612)
    atleast_2d_call_result_276635 = invoke(stypy.reporting.localization.Localization(__file__, 1612, 8), atleast_2d_276632, *[x_276633], **kwargs_276634)
    
    # Assigning a type to the variable 'x' (line 1612)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1612, 4), 'x', atleast_2d_call_result_276635)
    
    
    # Getting the type of 'x' (line 1613)
    x_276636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 7), 'x')
    # Obtaining the member 'ndim' of a type (line 1613)
    ndim_276637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1613, 7), x_276636, 'ndim')
    int_276638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1613, 16), 'int')
    # Applying the binary operator '>' (line 1613)
    result_gt_276639 = python_operator(stypy.reporting.localization.Localization(__file__, 1613, 7), '>', ndim_276637, int_276638)
    
    # Testing the type of an if condition (line 1613)
    if_condition_276640 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1613, 4), result_gt_276639)
    # Assigning a type to the variable 'if_condition_276640' (line 1613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 4), 'if_condition_276640', if_condition_276640)
    # SSA begins for if statement (line 1613)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1614)
    # Processing the call arguments (line 1614)
    str_276642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1614, 25), 'str', 'x must be 2-D.')
    # Processing the call keyword arguments (line 1614)
    kwargs_276643 = {}
    # Getting the type of 'ValueError' (line 1614)
    ValueError_276641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1614)
    ValueError_call_result_276644 = invoke(stypy.reporting.localization.Localization(__file__, 1614, 14), ValueError_276641, *[str_276642], **kwargs_276643)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1614, 8), ValueError_call_result_276644, 'raise parameter', BaseException)
    # SSA join for if statement (line 1613)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to iscomplexobj(...): (line 1615)
    # Processing the call arguments (line 1615)
    # Getting the type of 'x' (line 1615)
    x_276646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 20), 'x', False)
    # Processing the call keyword arguments (line 1615)
    kwargs_276647 = {}
    # Getting the type of 'iscomplexobj' (line 1615)
    iscomplexobj_276645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 7), 'iscomplexobj', False)
    # Calling iscomplexobj(args, kwargs) (line 1615)
    iscomplexobj_call_result_276648 = invoke(stypy.reporting.localization.Localization(__file__, 1615, 7), iscomplexobj_276645, *[x_276646], **kwargs_276647)
    
    # Testing the type of an if condition (line 1615)
    if_condition_276649 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1615, 4), iscomplexobj_call_result_276648)
    # Assigning a type to the variable 'if_condition_276649' (line 1615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 4), 'if_condition_276649', if_condition_276649)
    # SSA begins for if statement (line 1615)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1616)
    # Processing the call arguments (line 1616)
    str_276651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1616, 25), 'str', 'x must be real.')
    # Processing the call keyword arguments (line 1616)
    kwargs_276652 = {}
    # Getting the type of 'ValueError' (line 1616)
    ValueError_276650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1616)
    ValueError_call_result_276653 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 14), ValueError_276650, *[str_276651], **kwargs_276652)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1616, 8), ValueError_call_result_276653, 'raise parameter', BaseException)
    # SSA join for if statement (line 1615)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1617)
    # Getting the type of 'N' (line 1617)
    N_276654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 7), 'N')
    # Getting the type of 'None' (line 1617)
    None_276655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 12), 'None')
    
    (may_be_276656, more_types_in_union_276657) = may_be_none(N_276654, None_276655)

    if may_be_276656:

        if more_types_in_union_276657:
            # Runtime conditional SSA (line 1617)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 1618):
        
        # Assigning a Attribute to a Name (line 1618):
        # Getting the type of 'x' (line 1618)
        x_276658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 12), 'x')
        # Obtaining the member 'shape' of a type (line 1618)
        shape_276659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 12), x_276658, 'shape')
        # Assigning a type to the variable 'N' (line 1618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1618, 8), 'N', shape_276659)

        if more_types_in_union_276657:
            # Runtime conditional SSA for else branch (line 1617)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_276656) or more_types_in_union_276657):
        
        # Type idiom detected: calculating its left and rigth part (line 1619)
        # Getting the type of 'int' (line 1619)
        int_276660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 23), 'int')
        # Getting the type of 'N' (line 1619)
        N_276661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 20), 'N')
        
        (may_be_276662, more_types_in_union_276663) = may_be_subtype(int_276660, N_276661)

        if may_be_276662:

            if more_types_in_union_276663:
                # Runtime conditional SSA (line 1619)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'N' (line 1619)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 9), 'N', remove_not_subtype_from_union(N_276661, int))
            
            
            # Getting the type of 'N' (line 1620)
            N_276664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 11), 'N')
            int_276665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1620, 16), 'int')
            # Applying the binary operator '<=' (line 1620)
            result_le_276666 = python_operator(stypy.reporting.localization.Localization(__file__, 1620, 11), '<=', N_276664, int_276665)
            
            # Testing the type of an if condition (line 1620)
            if_condition_276667 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1620, 8), result_le_276666)
            # Assigning a type to the variable 'if_condition_276667' (line 1620)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 8), 'if_condition_276667', if_condition_276667)
            # SSA begins for if statement (line 1620)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1621)
            # Processing the call arguments (line 1621)
            str_276669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 29), 'str', 'N must be positive.')
            # Processing the call keyword arguments (line 1621)
            kwargs_276670 = {}
            # Getting the type of 'ValueError' (line 1621)
            ValueError_276668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1621)
            ValueError_call_result_276671 = invoke(stypy.reporting.localization.Localization(__file__, 1621, 18), ValueError_276668, *[str_276669], **kwargs_276670)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1621, 12), ValueError_call_result_276671, 'raise parameter', BaseException)
            # SSA join for if statement (line 1620)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Tuple to a Name (line 1622):
            
            # Assigning a Tuple to a Name (line 1622):
            
            # Obtaining an instance of the builtin type 'tuple' (line 1622)
            tuple_276672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1622, 13), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1622)
            # Adding element type (line 1622)
            # Getting the type of 'N' (line 1622)
            N_276673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 13), 'N')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1622, 13), tuple_276672, N_276673)
            # Adding element type (line 1622)
            # Getting the type of 'N' (line 1622)
            N_276674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 16), 'N')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1622, 13), tuple_276672, N_276674)
            
            # Assigning a type to the variable 'N' (line 1622)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 8), 'N', tuple_276672)

            if more_types_in_union_276663:
                # Runtime conditional SSA for else branch (line 1619)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_276662) or more_types_in_union_276663):
            # Assigning a type to the variable 'N' (line 1619)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 9), 'N', remove_subtype_from_union(N_276661, int))
            
            
            # Evaluating a boolean operation
            
            
            # Call to len(...): (line 1623)
            # Processing the call arguments (line 1623)
            # Getting the type of 'N' (line 1623)
            N_276676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 13), 'N', False)
            # Processing the call keyword arguments (line 1623)
            kwargs_276677 = {}
            # Getting the type of 'len' (line 1623)
            len_276675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 9), 'len', False)
            # Calling len(args, kwargs) (line 1623)
            len_call_result_276678 = invoke(stypy.reporting.localization.Localization(__file__, 1623, 9), len_276675, *[N_276676], **kwargs_276677)
            
            int_276679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1623, 19), 'int')
            # Applying the binary operator '!=' (line 1623)
            result_ne_276680 = python_operator(stypy.reporting.localization.Localization(__file__, 1623, 9), '!=', len_call_result_276678, int_276679)
            
            
            # Call to any(...): (line 1623)
            # Processing the call arguments (line 1623)
            
            
            # Call to asarray(...): (line 1623)
            # Processing the call arguments (line 1623)
            # Getting the type of 'N' (line 1623)
            N_276685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 42), 'N', False)
            # Processing the call keyword arguments (line 1623)
            kwargs_276686 = {}
            # Getting the type of 'np' (line 1623)
            np_276683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 31), 'np', False)
            # Obtaining the member 'asarray' of a type (line 1623)
            asarray_276684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1623, 31), np_276683, 'asarray')
            # Calling asarray(args, kwargs) (line 1623)
            asarray_call_result_276687 = invoke(stypy.reporting.localization.Localization(__file__, 1623, 31), asarray_276684, *[N_276685], **kwargs_276686)
            
            int_276688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1623, 48), 'int')
            # Applying the binary operator '<=' (line 1623)
            result_le_276689 = python_operator(stypy.reporting.localization.Localization(__file__, 1623, 31), '<=', asarray_call_result_276687, int_276688)
            
            # Processing the call keyword arguments (line 1623)
            kwargs_276690 = {}
            # Getting the type of 'np' (line 1623)
            np_276681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 24), 'np', False)
            # Obtaining the member 'any' of a type (line 1623)
            any_276682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1623, 24), np_276681, 'any')
            # Calling any(args, kwargs) (line 1623)
            any_call_result_276691 = invoke(stypy.reporting.localization.Localization(__file__, 1623, 24), any_276682, *[result_le_276689], **kwargs_276690)
            
            # Applying the binary operator 'or' (line 1623)
            result_or_keyword_276692 = python_operator(stypy.reporting.localization.Localization(__file__, 1623, 9), 'or', result_ne_276680, any_call_result_276691)
            
            # Testing the type of an if condition (line 1623)
            if_condition_276693 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1623, 9), result_or_keyword_276692)
            # Assigning a type to the variable 'if_condition_276693' (line 1623)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1623, 9), 'if_condition_276693', if_condition_276693)
            # SSA begins for if statement (line 1623)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 1624)
            # Processing the call arguments (line 1624)
            str_276695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1624, 25), 'str', 'When given as a tuple, N must hold exactly two positive integers')
            # Processing the call keyword arguments (line 1624)
            kwargs_276696 = {}
            # Getting the type of 'ValueError' (line 1624)
            ValueError_276694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 14), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1624)
            ValueError_call_result_276697 = invoke(stypy.reporting.localization.Localization(__file__, 1624, 14), ValueError_276694, *[str_276695], **kwargs_276696)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1624, 8), ValueError_call_result_276697, 'raise parameter', BaseException)
            # SSA join for if statement (line 1623)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_276662 and more_types_in_union_276663):
                # SSA join for if statement (line 1619)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_276656 and more_types_in_union_276657):
            # SSA join for if statement (line 1617)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1627):
    
    # Assigning a Call to a Name (line 1627):
    
    # Call to fft2(...): (line 1627)
    # Processing the call arguments (line 1627)
    # Getting the type of 'x' (line 1627)
    x_276700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 22), 'x', False)
    # Getting the type of 'N' (line 1627)
    N_276701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 25), 'N', False)
    # Processing the call keyword arguments (line 1627)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1627)
    tuple_276702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1627, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1627)
    # Adding element type (line 1627)
    int_276703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1627, 34), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1627, 34), tuple_276702, int_276703)
    # Adding element type (line 1627)
    int_276704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1627, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1627, 34), tuple_276702, int_276704)
    
    keyword_276705 = tuple_276702
    kwargs_276706 = {'axes': keyword_276705}
    # Getting the type of 'fftpack' (line 1627)
    fftpack_276698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 9), 'fftpack', False)
    # Obtaining the member 'fft2' of a type (line 1627)
    fft2_276699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1627, 9), fftpack_276698, 'fft2')
    # Calling fft2(args, kwargs) (line 1627)
    fft2_call_result_276707 = invoke(stypy.reporting.localization.Localization(__file__, 1627, 9), fft2_276699, *[x_276700, N_276701], **kwargs_276706)
    
    # Assigning a type to the variable 'Xf' (line 1627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1627, 4), 'Xf', fft2_call_result_276707)
    
    # Assigning a Call to a Name (line 1628):
    
    # Assigning a Call to a Name (line 1628):
    
    # Call to zeros(...): (line 1628)
    # Processing the call arguments (line 1628)
    
    # Obtaining the type of the subscript
    int_276709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 17), 'int')
    # Getting the type of 'N' (line 1628)
    N_276710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 15), 'N', False)
    # Obtaining the member '__getitem__' of a type (line 1628)
    getitem___276711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 15), N_276710, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1628)
    subscript_call_result_276712 = invoke(stypy.reporting.localization.Localization(__file__, 1628, 15), getitem___276711, int_276709)
    
    str_276713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 21), 'str', 'd')
    # Processing the call keyword arguments (line 1628)
    kwargs_276714 = {}
    # Getting the type of 'zeros' (line 1628)
    zeros_276708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 9), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1628)
    zeros_call_result_276715 = invoke(stypy.reporting.localization.Localization(__file__, 1628, 9), zeros_276708, *[subscript_call_result_276712, str_276713], **kwargs_276714)
    
    # Assigning a type to the variable 'h1' (line 1628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 4), 'h1', zeros_call_result_276715)
    
    # Assigning a Call to a Name (line 1629):
    
    # Assigning a Call to a Name (line 1629):
    
    # Call to zeros(...): (line 1629)
    # Processing the call arguments (line 1629)
    
    # Obtaining the type of the subscript
    int_276717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1629, 17), 'int')
    # Getting the type of 'N' (line 1629)
    N_276718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 15), 'N', False)
    # Obtaining the member '__getitem__' of a type (line 1629)
    getitem___276719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1629, 15), N_276718, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1629)
    subscript_call_result_276720 = invoke(stypy.reporting.localization.Localization(__file__, 1629, 15), getitem___276719, int_276717)
    
    str_276721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1629, 21), 'str', 'd')
    # Processing the call keyword arguments (line 1629)
    kwargs_276722 = {}
    # Getting the type of 'zeros' (line 1629)
    zeros_276716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 9), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1629)
    zeros_call_result_276723 = invoke(stypy.reporting.localization.Localization(__file__, 1629, 9), zeros_276716, *[subscript_call_result_276720, str_276721], **kwargs_276722)
    
    # Assigning a type to the variable 'h2' (line 1629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1629, 4), 'h2', zeros_call_result_276723)
    
    
    # Call to range(...): (line 1630)
    # Processing the call arguments (line 1630)
    int_276725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 19), 'int')
    # Processing the call keyword arguments (line 1630)
    kwargs_276726 = {}
    # Getting the type of 'range' (line 1630)
    range_276724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 13), 'range', False)
    # Calling range(args, kwargs) (line 1630)
    range_call_result_276727 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 13), range_276724, *[int_276725], **kwargs_276726)
    
    # Testing the type of a for loop iterable (line 1630)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1630, 4), range_call_result_276727)
    # Getting the type of the for loop variable (line 1630)
    for_loop_var_276728 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1630, 4), range_call_result_276727)
    # Assigning a type to the variable 'p' (line 1630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 4), 'p', for_loop_var_276728)
    # SSA begins for a for statement (line 1630)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1631):
    
    # Assigning a Call to a Name (line 1631):
    
    # Call to eval(...): (line 1631)
    # Processing the call arguments (line 1631)
    str_276730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 17), 'str', 'h%d')
    # Getting the type of 'p' (line 1631)
    p_276731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 26), 'p', False)
    int_276732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 30), 'int')
    # Applying the binary operator '+' (line 1631)
    result_add_276733 = python_operator(stypy.reporting.localization.Localization(__file__, 1631, 26), '+', p_276731, int_276732)
    
    # Applying the binary operator '%' (line 1631)
    result_mod_276734 = python_operator(stypy.reporting.localization.Localization(__file__, 1631, 17), '%', str_276730, result_add_276733)
    
    # Processing the call keyword arguments (line 1631)
    kwargs_276735 = {}
    # Getting the type of 'eval' (line 1631)
    eval_276729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 12), 'eval', False)
    # Calling eval(args, kwargs) (line 1631)
    eval_call_result_276736 = invoke(stypy.reporting.localization.Localization(__file__, 1631, 12), eval_276729, *[result_mod_276734], **kwargs_276735)
    
    # Assigning a type to the variable 'h' (line 1631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1631, 8), 'h', eval_call_result_276736)
    
    # Assigning a Subscript to a Name (line 1632):
    
    # Assigning a Subscript to a Name (line 1632):
    
    # Obtaining the type of the subscript
    # Getting the type of 'p' (line 1632)
    p_276737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 15), 'p')
    # Getting the type of 'N' (line 1632)
    N_276738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 13), 'N')
    # Obtaining the member '__getitem__' of a type (line 1632)
    getitem___276739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1632, 13), N_276738, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1632)
    subscript_call_result_276740 = invoke(stypy.reporting.localization.Localization(__file__, 1632, 13), getitem___276739, p_276737)
    
    # Assigning a type to the variable 'N1' (line 1632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1632, 8), 'N1', subscript_call_result_276740)
    
    
    # Getting the type of 'N1' (line 1633)
    N1_276741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 11), 'N1')
    int_276742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 16), 'int')
    # Applying the binary operator '%' (line 1633)
    result_mod_276743 = python_operator(stypy.reporting.localization.Localization(__file__, 1633, 11), '%', N1_276741, int_276742)
    
    int_276744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 21), 'int')
    # Applying the binary operator '==' (line 1633)
    result_eq_276745 = python_operator(stypy.reporting.localization.Localization(__file__, 1633, 11), '==', result_mod_276743, int_276744)
    
    # Testing the type of an if condition (line 1633)
    if_condition_276746 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1633, 8), result_eq_276745)
    # Assigning a type to the variable 'if_condition_276746' (line 1633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 8), 'if_condition_276746', if_condition_276746)
    # SSA begins for if statement (line 1633)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Num to a Subscript (line 1634):
    int_276747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 32), 'int')
    # Getting the type of 'h' (line 1634)
    h_276748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 19), 'h')
    # Getting the type of 'N1' (line 1634)
    N1_276749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 21), 'N1')
    int_276750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 27), 'int')
    # Applying the binary operator '//' (line 1634)
    result_floordiv_276751 = python_operator(stypy.reporting.localization.Localization(__file__, 1634, 21), '//', N1_276749, int_276750)
    
    # Storing an element on a container (line 1634)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 19), h_276748, (result_floordiv_276751, int_276747))
    
    # Assigning a Subscript to a Subscript (line 1634):
    
    # Obtaining the type of the subscript
    # Getting the type of 'N1' (line 1634)
    N1_276752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 21), 'N1')
    int_276753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 27), 'int')
    # Applying the binary operator '//' (line 1634)
    result_floordiv_276754 = python_operator(stypy.reporting.localization.Localization(__file__, 1634, 21), '//', N1_276752, int_276753)
    
    # Getting the type of 'h' (line 1634)
    h_276755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 19), 'h')
    # Obtaining the member '__getitem__' of a type (line 1634)
    getitem___276756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 19), h_276755, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1634)
    subscript_call_result_276757 = invoke(stypy.reporting.localization.Localization(__file__, 1634, 19), getitem___276756, result_floordiv_276754)
    
    # Getting the type of 'h' (line 1634)
    h_276758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 12), 'h')
    int_276759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 14), 'int')
    # Storing an element on a container (line 1634)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1634, 12), h_276758, (int_276759, subscript_call_result_276757))
    
    # Assigning a Num to a Subscript (line 1635):
    
    # Assigning a Num to a Subscript (line 1635):
    int_276760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1635, 27), 'int')
    # Getting the type of 'h' (line 1635)
    h_276761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 12), 'h')
    int_276762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1635, 14), 'int')
    # Getting the type of 'N1' (line 1635)
    N1_276763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 16), 'N1')
    int_276764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1635, 22), 'int')
    # Applying the binary operator '//' (line 1635)
    result_floordiv_276765 = python_operator(stypy.reporting.localization.Localization(__file__, 1635, 16), '//', N1_276763, int_276764)
    
    slice_276766 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1635, 12), int_276762, result_floordiv_276765, None)
    # Storing an element on a container (line 1635)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1635, 12), h_276761, (slice_276766, int_276760))
    # SSA branch for the else part of an if statement (line 1633)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Subscript (line 1637):
    
    # Assigning a Num to a Subscript (line 1637):
    int_276767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1637, 19), 'int')
    # Getting the type of 'h' (line 1637)
    h_276768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'h')
    int_276769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1637, 14), 'int')
    # Storing an element on a container (line 1637)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1637, 12), h_276768, (int_276769, int_276767))
    
    # Assigning a Num to a Subscript (line 1638):
    
    # Assigning a Num to a Subscript (line 1638):
    int_276770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1638, 33), 'int')
    # Getting the type of 'h' (line 1638)
    h_276771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 12), 'h')
    int_276772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1638, 14), 'int')
    # Getting the type of 'N1' (line 1638)
    N1_276773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 17), 'N1')
    int_276774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1638, 22), 'int')
    # Applying the binary operator '+' (line 1638)
    result_add_276775 = python_operator(stypy.reporting.localization.Localization(__file__, 1638, 17), '+', N1_276773, int_276774)
    
    int_276776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1638, 28), 'int')
    # Applying the binary operator '//' (line 1638)
    result_floordiv_276777 = python_operator(stypy.reporting.localization.Localization(__file__, 1638, 16), '//', result_add_276775, int_276776)
    
    slice_276778 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1638, 12), int_276772, result_floordiv_276777, None)
    # Storing an element on a container (line 1638)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1638, 12), h_276771, (slice_276778, int_276770))
    # SSA join for if statement (line 1633)
    module_type_store = module_type_store.join_ssa_context()
    
    # Dynamic code evaluation using an exec statement
    str_276779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1639, 13), 'str', 'h%d = h')
    # Getting the type of 'p' (line 1639)
    p_276780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 26), 'p')
    int_276781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1639, 30), 'int')
    # Applying the binary operator '+' (line 1639)
    result_add_276782 = python_operator(stypy.reporting.localization.Localization(__file__, 1639, 26), '+', p_276780, int_276781)
    
    # Applying the binary operator '%' (line 1639)
    result_mod_276783 = python_operator(stypy.reporting.localization.Localization(__file__, 1639, 13), '%', str_276779, result_add_276782)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1639, 8), result_mod_276783, 'exec parameter', 'StringType', 'FileType', 'CodeType')
    enable_usage_of_dynamic_types_warning(stypy.reporting.localization.Localization(__file__, 1639, 8))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1641):
    
    # Assigning a BinOp to a Name (line 1641):
    
    # Obtaining the type of the subscript
    slice_276784 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1641, 8), None, None, None)
    # Getting the type of 'newaxis' (line 1641)
    newaxis_276785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 14), 'newaxis')
    # Getting the type of 'h1' (line 1641)
    h1_276786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'h1')
    # Obtaining the member '__getitem__' of a type (line 1641)
    getitem___276787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 8), h1_276786, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1641)
    subscript_call_result_276788 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 8), getitem___276787, (slice_276784, newaxis_276785))
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'newaxis' (line 1641)
    newaxis_276789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 28), 'newaxis')
    slice_276790 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1641, 25), None, None, None)
    # Getting the type of 'h2' (line 1641)
    h2_276791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 25), 'h2')
    # Obtaining the member '__getitem__' of a type (line 1641)
    getitem___276792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 25), h2_276791, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1641)
    subscript_call_result_276793 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 25), getitem___276792, (newaxis_276789, slice_276790))
    
    # Applying the binary operator '*' (line 1641)
    result_mul_276794 = python_operator(stypy.reporting.localization.Localization(__file__, 1641, 8), '*', subscript_call_result_276788, subscript_call_result_276793)
    
    # Assigning a type to the variable 'h' (line 1641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 4), 'h', result_mul_276794)
    
    # Assigning a Attribute to a Name (line 1642):
    
    # Assigning a Attribute to a Name (line 1642):
    # Getting the type of 'x' (line 1642)
    x_276795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 8), 'x')
    # Obtaining the member 'ndim' of a type (line 1642)
    ndim_276796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1642, 8), x_276795, 'ndim')
    # Assigning a type to the variable 'k' (line 1642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1642, 4), 'k', ndim_276796)
    
    
    # Getting the type of 'k' (line 1643)
    k_276797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 10), 'k')
    int_276798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 14), 'int')
    # Applying the binary operator '>' (line 1643)
    result_gt_276799 = python_operator(stypy.reporting.localization.Localization(__file__, 1643, 10), '>', k_276797, int_276798)
    
    # Testing the type of an if condition (line 1643)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1643, 4), result_gt_276799)
    # SSA begins for while statement (line 1643)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Subscript to a Name (line 1644):
    
    # Assigning a Subscript to a Name (line 1644):
    
    # Obtaining the type of the subscript
    slice_276800 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1644, 12), None, None, None)
    # Getting the type of 'newaxis' (line 1644)
    newaxis_276801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 17), 'newaxis')
    # Getting the type of 'h' (line 1644)
    h_276802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 12), 'h')
    # Obtaining the member '__getitem__' of a type (line 1644)
    getitem___276803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1644, 12), h_276802, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1644)
    subscript_call_result_276804 = invoke(stypy.reporting.localization.Localization(__file__, 1644, 12), getitem___276803, (slice_276800, newaxis_276801))
    
    # Assigning a type to the variable 'h' (line 1644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1644, 8), 'h', subscript_call_result_276804)
    
    # Getting the type of 'k' (line 1645)
    k_276805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'k')
    int_276806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 13), 'int')
    # Applying the binary operator '-=' (line 1645)
    result_isub_276807 = python_operator(stypy.reporting.localization.Localization(__file__, 1645, 8), '-=', k_276805, int_276806)
    # Assigning a type to the variable 'k' (line 1645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 8), 'k', result_isub_276807)
    
    # SSA join for while statement (line 1643)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1646):
    
    # Assigning a Call to a Name (line 1646):
    
    # Call to ifft2(...): (line 1646)
    # Processing the call arguments (line 1646)
    # Getting the type of 'Xf' (line 1646)
    Xf_276810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 22), 'Xf', False)
    # Getting the type of 'h' (line 1646)
    h_276811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 27), 'h', False)
    # Applying the binary operator '*' (line 1646)
    result_mul_276812 = python_operator(stypy.reporting.localization.Localization(__file__, 1646, 22), '*', Xf_276810, h_276811)
    
    # Processing the call keyword arguments (line 1646)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1646)
    tuple_276813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1646)
    # Adding element type (line 1646)
    int_276814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 36), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1646, 36), tuple_276813, int_276814)
    # Adding element type (line 1646)
    int_276815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1646, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1646, 36), tuple_276813, int_276815)
    
    keyword_276816 = tuple_276813
    kwargs_276817 = {'axes': keyword_276816}
    # Getting the type of 'fftpack' (line 1646)
    fftpack_276808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 8), 'fftpack', False)
    # Obtaining the member 'ifft2' of a type (line 1646)
    ifft2_276809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1646, 8), fftpack_276808, 'ifft2')
    # Calling ifft2(args, kwargs) (line 1646)
    ifft2_call_result_276818 = invoke(stypy.reporting.localization.Localization(__file__, 1646, 8), ifft2_276809, *[result_mul_276812], **kwargs_276817)
    
    # Assigning a type to the variable 'x' (line 1646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 4), 'x', ifft2_call_result_276818)
    # Getting the type of 'x' (line 1647)
    x_276819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 11), 'x')
    # Assigning a type to the variable 'stypy_return_type' (line 1647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 4), 'stypy_return_type', x_276819)
    
    # ################# End of 'hilbert2(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hilbert2' in the type store
    # Getting the type of 'stypy_return_type' (line 1590)
    stypy_return_type_276820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276820)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hilbert2'
    return stypy_return_type_276820

# Assigning a type to the variable 'hilbert2' (line 1590)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 0), 'hilbert2', hilbert2)

@norecursion
def cmplx_sort(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'cmplx_sort'
    module_type_store = module_type_store.open_function_context('cmplx_sort', 1650, 0, False)
    
    # Passed parameters checking function
    cmplx_sort.stypy_localization = localization
    cmplx_sort.stypy_type_of_self = None
    cmplx_sort.stypy_type_store = module_type_store
    cmplx_sort.stypy_function_name = 'cmplx_sort'
    cmplx_sort.stypy_param_names_list = ['p']
    cmplx_sort.stypy_varargs_param_name = None
    cmplx_sort.stypy_kwargs_param_name = None
    cmplx_sort.stypy_call_defaults = defaults
    cmplx_sort.stypy_call_varargs = varargs
    cmplx_sort.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cmplx_sort', ['p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cmplx_sort', localization, ['p'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cmplx_sort(...)' code ##################

    str_276821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, (-1)), 'str', 'Sort roots based on magnitude.\n\n    Parameters\n    ----------\n    p : array_like\n        The roots to sort, as a 1-D array.\n\n    Returns\n    -------\n    p_sorted : ndarray\n        Sorted roots.\n    indx : ndarray\n        Array of indices needed to sort the input `p`.\n\n    ')
    
    # Assigning a Call to a Name (line 1666):
    
    # Assigning a Call to a Name (line 1666):
    
    # Call to asarray(...): (line 1666)
    # Processing the call arguments (line 1666)
    # Getting the type of 'p' (line 1666)
    p_276823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 16), 'p', False)
    # Processing the call keyword arguments (line 1666)
    kwargs_276824 = {}
    # Getting the type of 'asarray' (line 1666)
    asarray_276822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1666)
    asarray_call_result_276825 = invoke(stypy.reporting.localization.Localization(__file__, 1666, 8), asarray_276822, *[p_276823], **kwargs_276824)
    
    # Assigning a type to the variable 'p' (line 1666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 4), 'p', asarray_call_result_276825)
    
    
    # Call to iscomplexobj(...): (line 1667)
    # Processing the call arguments (line 1667)
    # Getting the type of 'p' (line 1667)
    p_276827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 20), 'p', False)
    # Processing the call keyword arguments (line 1667)
    kwargs_276828 = {}
    # Getting the type of 'iscomplexobj' (line 1667)
    iscomplexobj_276826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 7), 'iscomplexobj', False)
    # Calling iscomplexobj(args, kwargs) (line 1667)
    iscomplexobj_call_result_276829 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 7), iscomplexobj_276826, *[p_276827], **kwargs_276828)
    
    # Testing the type of an if condition (line 1667)
    if_condition_276830 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1667, 4), iscomplexobj_call_result_276829)
    # Assigning a type to the variable 'if_condition_276830' (line 1667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 4), 'if_condition_276830', if_condition_276830)
    # SSA begins for if statement (line 1667)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1668):
    
    # Assigning a Call to a Name (line 1668):
    
    # Call to argsort(...): (line 1668)
    # Processing the call arguments (line 1668)
    
    # Call to abs(...): (line 1668)
    # Processing the call arguments (line 1668)
    # Getting the type of 'p' (line 1668)
    p_276833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 27), 'p', False)
    # Processing the call keyword arguments (line 1668)
    kwargs_276834 = {}
    # Getting the type of 'abs' (line 1668)
    abs_276832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 23), 'abs', False)
    # Calling abs(args, kwargs) (line 1668)
    abs_call_result_276835 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 23), abs_276832, *[p_276833], **kwargs_276834)
    
    # Processing the call keyword arguments (line 1668)
    kwargs_276836 = {}
    # Getting the type of 'argsort' (line 1668)
    argsort_276831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 15), 'argsort', False)
    # Calling argsort(args, kwargs) (line 1668)
    argsort_call_result_276837 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 15), argsort_276831, *[abs_call_result_276835], **kwargs_276836)
    
    # Assigning a type to the variable 'indx' (line 1668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 8), 'indx', argsort_call_result_276837)
    # SSA branch for the else part of an if statement (line 1667)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1670):
    
    # Assigning a Call to a Name (line 1670):
    
    # Call to argsort(...): (line 1670)
    # Processing the call arguments (line 1670)
    # Getting the type of 'p' (line 1670)
    p_276839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 23), 'p', False)
    # Processing the call keyword arguments (line 1670)
    kwargs_276840 = {}
    # Getting the type of 'argsort' (line 1670)
    argsort_276838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 15), 'argsort', False)
    # Calling argsort(args, kwargs) (line 1670)
    argsort_call_result_276841 = invoke(stypy.reporting.localization.Localization(__file__, 1670, 15), argsort_276838, *[p_276839], **kwargs_276840)
    
    # Assigning a type to the variable 'indx' (line 1670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'indx', argsort_call_result_276841)
    # SSA join for if statement (line 1667)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1671)
    tuple_276842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1671)
    # Adding element type (line 1671)
    
    # Call to take(...): (line 1671)
    # Processing the call arguments (line 1671)
    # Getting the type of 'p' (line 1671)
    p_276844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 16), 'p', False)
    # Getting the type of 'indx' (line 1671)
    indx_276845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 19), 'indx', False)
    int_276846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 25), 'int')
    # Processing the call keyword arguments (line 1671)
    kwargs_276847 = {}
    # Getting the type of 'take' (line 1671)
    take_276843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 11), 'take', False)
    # Calling take(args, kwargs) (line 1671)
    take_call_result_276848 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 11), take_276843, *[p_276844, indx_276845, int_276846], **kwargs_276847)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 11), tuple_276842, take_call_result_276848)
    # Adding element type (line 1671)
    # Getting the type of 'indx' (line 1671)
    indx_276849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 29), 'indx')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 11), tuple_276842, indx_276849)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 4), 'stypy_return_type', tuple_276842)
    
    # ################# End of 'cmplx_sort(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cmplx_sort' in the type store
    # Getting the type of 'stypy_return_type' (line 1650)
    stypy_return_type_276850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276850)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cmplx_sort'
    return stypy_return_type_276850

# Assigning a type to the variable 'cmplx_sort' (line 1650)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 0), 'cmplx_sort', cmplx_sort)

@norecursion
def unique_roots(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_276851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 24), 'float')
    str_276852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 36), 'str', 'min')
    defaults = [float_276851, str_276852]
    # Create a new context for function 'unique_roots'
    module_type_store = module_type_store.open_function_context('unique_roots', 1674, 0, False)
    
    # Passed parameters checking function
    unique_roots.stypy_localization = localization
    unique_roots.stypy_type_of_self = None
    unique_roots.stypy_type_store = module_type_store
    unique_roots.stypy_function_name = 'unique_roots'
    unique_roots.stypy_param_names_list = ['p', 'tol', 'rtype']
    unique_roots.stypy_varargs_param_name = None
    unique_roots.stypy_kwargs_param_name = None
    unique_roots.stypy_call_defaults = defaults
    unique_roots.stypy_call_varargs = varargs
    unique_roots.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'unique_roots', ['p', 'tol', 'rtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'unique_roots', localization, ['p', 'tol', 'rtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'unique_roots(...)' code ##################

    str_276853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, (-1)), 'str', "\n    Determine unique roots and their multiplicities from a list of roots.\n\n    Parameters\n    ----------\n    p : array_like\n        The list of roots.\n    tol : float, optional\n        The tolerance for two roots to be considered equal. Default is 1e-3.\n    rtype : {'max', 'min, 'avg'}, optional\n        How to determine the returned root if multiple roots are within\n        `tol` of each other.\n\n          - 'max': pick the maximum of those roots.\n          - 'min': pick the minimum of those roots.\n          - 'avg': take the average of those roots.\n\n    Returns\n    -------\n    pout : ndarray\n        The list of unique roots, sorted from low to high.\n    mult : ndarray\n        The multiplicity of each root.\n\n    Notes\n    -----\n    This utility function is not specific to roots but can be used for any\n    sequence of values for which uniqueness and multiplicity has to be\n    determined. For a more general routine, see `numpy.unique`.\n\n    Examples\n    --------\n    >>> from scipy import signal\n    >>> vals = [0, 1.3, 1.31, 2.8, 1.25, 2.2, 10.3]\n    >>> uniq, mult = signal.unique_roots(vals, tol=2e-2, rtype='avg')\n\n    Check which roots have multiplicity larger than 1:\n\n    >>> uniq[mult > 1]\n    array([ 1.305])\n\n    ")
    
    
    # Getting the type of 'rtype' (line 1717)
    rtype_276854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 7), 'rtype')
    
    # Obtaining an instance of the builtin type 'list' (line 1717)
    list_276855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1717)
    # Adding element type (line 1717)
    str_276856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, 17), 'str', 'max')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1717, 16), list_276855, str_276856)
    # Adding element type (line 1717)
    str_276857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, 24), 'str', 'maximum')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1717, 16), list_276855, str_276857)
    
    # Applying the binary operator 'in' (line 1717)
    result_contains_276858 = python_operator(stypy.reporting.localization.Localization(__file__, 1717, 7), 'in', rtype_276854, list_276855)
    
    # Testing the type of an if condition (line 1717)
    if_condition_276859 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1717, 4), result_contains_276858)
    # Assigning a type to the variable 'if_condition_276859' (line 1717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 4), 'if_condition_276859', if_condition_276859)
    # SSA begins for if statement (line 1717)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1718):
    
    # Assigning a Attribute to a Name (line 1718):
    # Getting the type of 'np' (line 1718)
    np_276860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 19), 'np')
    # Obtaining the member 'max' of a type (line 1718)
    max_276861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1718, 19), np_276860, 'max')
    # Assigning a type to the variable 'comproot' (line 1718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1718, 8), 'comproot', max_276861)
    # SSA branch for the else part of an if statement (line 1717)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'rtype' (line 1719)
    rtype_276862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 9), 'rtype')
    
    # Obtaining an instance of the builtin type 'list' (line 1719)
    list_276863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1719)
    # Adding element type (line 1719)
    str_276864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 19), 'str', 'min')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1719, 18), list_276863, str_276864)
    # Adding element type (line 1719)
    str_276865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 26), 'str', 'minimum')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1719, 18), list_276863, str_276865)
    
    # Applying the binary operator 'in' (line 1719)
    result_contains_276866 = python_operator(stypy.reporting.localization.Localization(__file__, 1719, 9), 'in', rtype_276862, list_276863)
    
    # Testing the type of an if condition (line 1719)
    if_condition_276867 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1719, 9), result_contains_276866)
    # Assigning a type to the variable 'if_condition_276867' (line 1719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 9), 'if_condition_276867', if_condition_276867)
    # SSA begins for if statement (line 1719)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1720):
    
    # Assigning a Attribute to a Name (line 1720):
    # Getting the type of 'np' (line 1720)
    np_276868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 19), 'np')
    # Obtaining the member 'min' of a type (line 1720)
    min_276869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 19), np_276868, 'min')
    # Assigning a type to the variable 'comproot' (line 1720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 8), 'comproot', min_276869)
    # SSA branch for the else part of an if statement (line 1719)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'rtype' (line 1721)
    rtype_276870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 9), 'rtype')
    
    # Obtaining an instance of the builtin type 'list' (line 1721)
    list_276871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1721)
    # Adding element type (line 1721)
    str_276872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 19), 'str', 'avg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1721, 18), list_276871, str_276872)
    # Adding element type (line 1721)
    str_276873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 26), 'str', 'mean')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1721, 18), list_276871, str_276873)
    
    # Applying the binary operator 'in' (line 1721)
    result_contains_276874 = python_operator(stypy.reporting.localization.Localization(__file__, 1721, 9), 'in', rtype_276870, list_276871)
    
    # Testing the type of an if condition (line 1721)
    if_condition_276875 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1721, 9), result_contains_276874)
    # Assigning a type to the variable 'if_condition_276875' (line 1721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 9), 'if_condition_276875', if_condition_276875)
    # SSA begins for if statement (line 1721)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1722):
    
    # Assigning a Attribute to a Name (line 1722):
    # Getting the type of 'np' (line 1722)
    np_276876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 19), 'np')
    # Obtaining the member 'mean' of a type (line 1722)
    mean_276877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1722, 19), np_276876, 'mean')
    # Assigning a type to the variable 'comproot' (line 1722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 8), 'comproot', mean_276877)
    # SSA branch for the else part of an if statement (line 1721)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1724)
    # Processing the call arguments (line 1724)
    str_276879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1724, 25), 'str', "`rtype` must be one of {'max', 'maximum', 'min', 'minimum', 'avg', 'mean'}")
    # Processing the call keyword arguments (line 1724)
    kwargs_276880 = {}
    # Getting the type of 'ValueError' (line 1724)
    ValueError_276878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1724)
    ValueError_call_result_276881 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 14), ValueError_276878, *[str_276879], **kwargs_276880)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1724, 8), ValueError_call_result_276881, 'raise parameter', BaseException)
    # SSA join for if statement (line 1721)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1719)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1717)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 1726):
    
    # Assigning a BinOp to a Name (line 1726):
    
    # Call to asarray(...): (line 1726)
    # Processing the call arguments (line 1726)
    # Getting the type of 'p' (line 1726)
    p_276883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 16), 'p', False)
    # Processing the call keyword arguments (line 1726)
    kwargs_276884 = {}
    # Getting the type of 'asarray' (line 1726)
    asarray_276882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1726)
    asarray_call_result_276885 = invoke(stypy.reporting.localization.Localization(__file__, 1726, 8), asarray_276882, *[p_276883], **kwargs_276884)
    
    float_276886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, 21), 'float')
    # Applying the binary operator '*' (line 1726)
    result_mul_276887 = python_operator(stypy.reporting.localization.Localization(__file__, 1726, 8), '*', asarray_call_result_276885, float_276886)
    
    # Assigning a type to the variable 'p' (line 1726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 4), 'p', result_mul_276887)
    
    # Assigning a Call to a Name (line 1727):
    
    # Assigning a Call to a Name (line 1727):
    
    # Call to abs(...): (line 1727)
    # Processing the call arguments (line 1727)
    # Getting the type of 'tol' (line 1727)
    tol_276889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 14), 'tol', False)
    # Processing the call keyword arguments (line 1727)
    kwargs_276890 = {}
    # Getting the type of 'abs' (line 1727)
    abs_276888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 10), 'abs', False)
    # Calling abs(args, kwargs) (line 1727)
    abs_call_result_276891 = invoke(stypy.reporting.localization.Localization(__file__, 1727, 10), abs_276888, *[tol_276889], **kwargs_276890)
    
    # Assigning a type to the variable 'tol' (line 1727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 4), 'tol', abs_call_result_276891)
    
    # Assigning a Call to a Tuple (line 1728):
    
    # Assigning a Subscript to a Name (line 1728):
    
    # Obtaining the type of the subscript
    int_276892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 4), 'int')
    
    # Call to cmplx_sort(...): (line 1728)
    # Processing the call arguments (line 1728)
    # Getting the type of 'p' (line 1728)
    p_276894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 25), 'p', False)
    # Processing the call keyword arguments (line 1728)
    kwargs_276895 = {}
    # Getting the type of 'cmplx_sort' (line 1728)
    cmplx_sort_276893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 14), 'cmplx_sort', False)
    # Calling cmplx_sort(args, kwargs) (line 1728)
    cmplx_sort_call_result_276896 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 14), cmplx_sort_276893, *[p_276894], **kwargs_276895)
    
    # Obtaining the member '__getitem__' of a type (line 1728)
    getitem___276897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 4), cmplx_sort_call_result_276896, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1728)
    subscript_call_result_276898 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 4), getitem___276897, int_276892)
    
    # Assigning a type to the variable 'tuple_var_assignment_274320' (line 1728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 4), 'tuple_var_assignment_274320', subscript_call_result_276898)
    
    # Assigning a Subscript to a Name (line 1728):
    
    # Obtaining the type of the subscript
    int_276899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 4), 'int')
    
    # Call to cmplx_sort(...): (line 1728)
    # Processing the call arguments (line 1728)
    # Getting the type of 'p' (line 1728)
    p_276901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 25), 'p', False)
    # Processing the call keyword arguments (line 1728)
    kwargs_276902 = {}
    # Getting the type of 'cmplx_sort' (line 1728)
    cmplx_sort_276900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 14), 'cmplx_sort', False)
    # Calling cmplx_sort(args, kwargs) (line 1728)
    cmplx_sort_call_result_276903 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 14), cmplx_sort_276900, *[p_276901], **kwargs_276902)
    
    # Obtaining the member '__getitem__' of a type (line 1728)
    getitem___276904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 4), cmplx_sort_call_result_276903, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1728)
    subscript_call_result_276905 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 4), getitem___276904, int_276899)
    
    # Assigning a type to the variable 'tuple_var_assignment_274321' (line 1728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 4), 'tuple_var_assignment_274321', subscript_call_result_276905)
    
    # Assigning a Name to a Name (line 1728):
    # Getting the type of 'tuple_var_assignment_274320' (line 1728)
    tuple_var_assignment_274320_276906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 4), 'tuple_var_assignment_274320')
    # Assigning a type to the variable 'p' (line 1728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 4), 'p', tuple_var_assignment_274320_276906)
    
    # Assigning a Name to a Name (line 1728):
    # Getting the type of 'tuple_var_assignment_274321' (line 1728)
    tuple_var_assignment_274321_276907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 4), 'tuple_var_assignment_274321')
    # Assigning a type to the variable 'indx' (line 1728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 7), 'indx', tuple_var_assignment_274321_276907)
    
    # Assigning a List to a Name (line 1729):
    
    # Assigning a List to a Name (line 1729):
    
    # Obtaining an instance of the builtin type 'list' (line 1729)
    list_276908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1729, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1729)
    
    # Assigning a type to the variable 'pout' (line 1729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1729, 4), 'pout', list_276908)
    
    # Assigning a List to a Name (line 1730):
    
    # Assigning a List to a Name (line 1730):
    
    # Obtaining an instance of the builtin type 'list' (line 1730)
    list_276909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1730, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1730)
    
    # Assigning a type to the variable 'mult' (line 1730)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 4), 'mult', list_276909)
    
    # Assigning a Num to a Name (line 1731):
    
    # Assigning a Num to a Name (line 1731):
    int_276910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1731, 11), 'int')
    # Assigning a type to the variable 'indx' (line 1731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 4), 'indx', int_276910)
    
    # Assigning a BinOp to a Name (line 1732):
    
    # Assigning a BinOp to a Name (line 1732):
    
    # Obtaining the type of the subscript
    int_276911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1732, 13), 'int')
    # Getting the type of 'p' (line 1732)
    p_276912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 11), 'p')
    # Obtaining the member '__getitem__' of a type (line 1732)
    getitem___276913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 11), p_276912, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1732)
    subscript_call_result_276914 = invoke(stypy.reporting.localization.Localization(__file__, 1732, 11), getitem___276913, int_276911)
    
    int_276915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1732, 18), 'int')
    # Getting the type of 'tol' (line 1732)
    tol_276916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 22), 'tol')
    # Applying the binary operator '*' (line 1732)
    result_mul_276917 = python_operator(stypy.reporting.localization.Localization(__file__, 1732, 18), '*', int_276915, tol_276916)
    
    # Applying the binary operator '+' (line 1732)
    result_add_276918 = python_operator(stypy.reporting.localization.Localization(__file__, 1732, 11), '+', subscript_call_result_276914, result_mul_276917)
    
    # Assigning a type to the variable 'curp' (line 1732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 4), 'curp', result_add_276918)
    
    # Assigning a List to a Name (line 1733):
    
    # Assigning a List to a Name (line 1733):
    
    # Obtaining an instance of the builtin type 'list' (line 1733)
    list_276919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1733, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1733)
    
    # Assigning a type to the variable 'sameroots' (line 1733)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 4), 'sameroots', list_276919)
    
    
    # Call to range(...): (line 1734)
    # Processing the call arguments (line 1734)
    
    # Call to len(...): (line 1734)
    # Processing the call arguments (line 1734)
    # Getting the type of 'p' (line 1734)
    p_276922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 23), 'p', False)
    # Processing the call keyword arguments (line 1734)
    kwargs_276923 = {}
    # Getting the type of 'len' (line 1734)
    len_276921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 19), 'len', False)
    # Calling len(args, kwargs) (line 1734)
    len_call_result_276924 = invoke(stypy.reporting.localization.Localization(__file__, 1734, 19), len_276921, *[p_276922], **kwargs_276923)
    
    # Processing the call keyword arguments (line 1734)
    kwargs_276925 = {}
    # Getting the type of 'range' (line 1734)
    range_276920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 13), 'range', False)
    # Calling range(args, kwargs) (line 1734)
    range_call_result_276926 = invoke(stypy.reporting.localization.Localization(__file__, 1734, 13), range_276920, *[len_call_result_276924], **kwargs_276925)
    
    # Testing the type of a for loop iterable (line 1734)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1734, 4), range_call_result_276926)
    # Getting the type of the for loop variable (line 1734)
    for_loop_var_276927 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1734, 4), range_call_result_276926)
    # Assigning a type to the variable 'k' (line 1734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 4), 'k', for_loop_var_276927)
    # SSA begins for a for statement (line 1734)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 1735):
    
    # Assigning a Subscript to a Name (line 1735):
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1735)
    k_276928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 15), 'k')
    # Getting the type of 'p' (line 1735)
    p_276929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 13), 'p')
    # Obtaining the member '__getitem__' of a type (line 1735)
    getitem___276930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1735, 13), p_276929, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1735)
    subscript_call_result_276931 = invoke(stypy.reporting.localization.Localization(__file__, 1735, 13), getitem___276930, k_276928)
    
    # Assigning a type to the variable 'tr' (line 1735)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 8), 'tr', subscript_call_result_276931)
    
    
    
    # Call to abs(...): (line 1736)
    # Processing the call arguments (line 1736)
    # Getting the type of 'tr' (line 1736)
    tr_276933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 15), 'tr', False)
    # Getting the type of 'curp' (line 1736)
    curp_276934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 20), 'curp', False)
    # Applying the binary operator '-' (line 1736)
    result_sub_276935 = python_operator(stypy.reporting.localization.Localization(__file__, 1736, 15), '-', tr_276933, curp_276934)
    
    # Processing the call keyword arguments (line 1736)
    kwargs_276936 = {}
    # Getting the type of 'abs' (line 1736)
    abs_276932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 11), 'abs', False)
    # Calling abs(args, kwargs) (line 1736)
    abs_call_result_276937 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 11), abs_276932, *[result_sub_276935], **kwargs_276936)
    
    # Getting the type of 'tol' (line 1736)
    tol_276938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 28), 'tol')
    # Applying the binary operator '<' (line 1736)
    result_lt_276939 = python_operator(stypy.reporting.localization.Localization(__file__, 1736, 11), '<', abs_call_result_276937, tol_276938)
    
    # Testing the type of an if condition (line 1736)
    if_condition_276940 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1736, 8), result_lt_276939)
    # Assigning a type to the variable 'if_condition_276940' (line 1736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 8), 'if_condition_276940', if_condition_276940)
    # SSA begins for if statement (line 1736)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1737)
    # Processing the call arguments (line 1737)
    # Getting the type of 'tr' (line 1737)
    tr_276943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 29), 'tr', False)
    # Processing the call keyword arguments (line 1737)
    kwargs_276944 = {}
    # Getting the type of 'sameroots' (line 1737)
    sameroots_276941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 12), 'sameroots', False)
    # Obtaining the member 'append' of a type (line 1737)
    append_276942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 12), sameroots_276941, 'append')
    # Calling append(args, kwargs) (line 1737)
    append_call_result_276945 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 12), append_276942, *[tr_276943], **kwargs_276944)
    
    
    # Assigning a Call to a Name (line 1738):
    
    # Assigning a Call to a Name (line 1738):
    
    # Call to comproot(...): (line 1738)
    # Processing the call arguments (line 1738)
    # Getting the type of 'sameroots' (line 1738)
    sameroots_276947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 28), 'sameroots', False)
    # Processing the call keyword arguments (line 1738)
    kwargs_276948 = {}
    # Getting the type of 'comproot' (line 1738)
    comproot_276946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 19), 'comproot', False)
    # Calling comproot(args, kwargs) (line 1738)
    comproot_call_result_276949 = invoke(stypy.reporting.localization.Localization(__file__, 1738, 19), comproot_276946, *[sameroots_276947], **kwargs_276948)
    
    # Assigning a type to the variable 'curp' (line 1738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 12), 'curp', comproot_call_result_276949)
    
    # Assigning a Name to a Subscript (line 1739):
    
    # Assigning a Name to a Subscript (line 1739):
    # Getting the type of 'curp' (line 1739)
    curp_276950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 25), 'curp')
    # Getting the type of 'pout' (line 1739)
    pout_276951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 12), 'pout')
    # Getting the type of 'indx' (line 1739)
    indx_276952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 17), 'indx')
    # Storing an element on a container (line 1739)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1739, 12), pout_276951, (indx_276952, curp_276950))
    
    # Getting the type of 'mult' (line 1740)
    mult_276953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'mult')
    
    # Obtaining the type of the subscript
    # Getting the type of 'indx' (line 1740)
    indx_276954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 17), 'indx')
    # Getting the type of 'mult' (line 1740)
    mult_276955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'mult')
    # Obtaining the member '__getitem__' of a type (line 1740)
    getitem___276956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 12), mult_276955, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1740)
    subscript_call_result_276957 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 12), getitem___276956, indx_276954)
    
    int_276958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1740, 26), 'int')
    # Applying the binary operator '+=' (line 1740)
    result_iadd_276959 = python_operator(stypy.reporting.localization.Localization(__file__, 1740, 12), '+=', subscript_call_result_276957, int_276958)
    # Getting the type of 'mult' (line 1740)
    mult_276960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 12), 'mult')
    # Getting the type of 'indx' (line 1740)
    indx_276961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 17), 'indx')
    # Storing an element on a container (line 1740)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1740, 12), mult_276960, (indx_276961, result_iadd_276959))
    
    # SSA branch for the else part of an if statement (line 1736)
    module_type_store.open_ssa_branch('else')
    
    # Call to append(...): (line 1742)
    # Processing the call arguments (line 1742)
    # Getting the type of 'tr' (line 1742)
    tr_276964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 24), 'tr', False)
    # Processing the call keyword arguments (line 1742)
    kwargs_276965 = {}
    # Getting the type of 'pout' (line 1742)
    pout_276962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 12), 'pout', False)
    # Obtaining the member 'append' of a type (line 1742)
    append_276963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1742, 12), pout_276962, 'append')
    # Calling append(args, kwargs) (line 1742)
    append_call_result_276966 = invoke(stypy.reporting.localization.Localization(__file__, 1742, 12), append_276963, *[tr_276964], **kwargs_276965)
    
    
    # Assigning a Name to a Name (line 1743):
    
    # Assigning a Name to a Name (line 1743):
    # Getting the type of 'tr' (line 1743)
    tr_276967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 19), 'tr')
    # Assigning a type to the variable 'curp' (line 1743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 12), 'curp', tr_276967)
    
    # Assigning a List to a Name (line 1744):
    
    # Assigning a List to a Name (line 1744):
    
    # Obtaining an instance of the builtin type 'list' (line 1744)
    list_276968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1744, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1744)
    # Adding element type (line 1744)
    # Getting the type of 'tr' (line 1744)
    tr_276969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 25), 'tr')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1744, 24), list_276968, tr_276969)
    
    # Assigning a type to the variable 'sameroots' (line 1744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 12), 'sameroots', list_276968)
    
    # Getting the type of 'indx' (line 1745)
    indx_276970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 12), 'indx')
    int_276971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1745, 20), 'int')
    # Applying the binary operator '+=' (line 1745)
    result_iadd_276972 = python_operator(stypy.reporting.localization.Localization(__file__, 1745, 12), '+=', indx_276970, int_276971)
    # Assigning a type to the variable 'indx' (line 1745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1745, 12), 'indx', result_iadd_276972)
    
    
    # Call to append(...): (line 1746)
    # Processing the call arguments (line 1746)
    int_276975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1746, 24), 'int')
    # Processing the call keyword arguments (line 1746)
    kwargs_276976 = {}
    # Getting the type of 'mult' (line 1746)
    mult_276973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 12), 'mult', False)
    # Obtaining the member 'append' of a type (line 1746)
    append_276974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1746, 12), mult_276973, 'append')
    # Calling append(args, kwargs) (line 1746)
    append_call_result_276977 = invoke(stypy.reporting.localization.Localization(__file__, 1746, 12), append_276974, *[int_276975], **kwargs_276976)
    
    # SSA join for if statement (line 1736)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1747)
    tuple_276978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1747, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1747)
    # Adding element type (line 1747)
    
    # Call to array(...): (line 1747)
    # Processing the call arguments (line 1747)
    # Getting the type of 'pout' (line 1747)
    pout_276980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 17), 'pout', False)
    # Processing the call keyword arguments (line 1747)
    kwargs_276981 = {}
    # Getting the type of 'array' (line 1747)
    array_276979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 11), 'array', False)
    # Calling array(args, kwargs) (line 1747)
    array_call_result_276982 = invoke(stypy.reporting.localization.Localization(__file__, 1747, 11), array_276979, *[pout_276980], **kwargs_276981)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1747, 11), tuple_276978, array_call_result_276982)
    # Adding element type (line 1747)
    
    # Call to array(...): (line 1747)
    # Processing the call arguments (line 1747)
    # Getting the type of 'mult' (line 1747)
    mult_276984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 30), 'mult', False)
    # Processing the call keyword arguments (line 1747)
    kwargs_276985 = {}
    # Getting the type of 'array' (line 1747)
    array_276983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 24), 'array', False)
    # Calling array(args, kwargs) (line 1747)
    array_call_result_276986 = invoke(stypy.reporting.localization.Localization(__file__, 1747, 24), array_276983, *[mult_276984], **kwargs_276985)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1747, 11), tuple_276978, array_call_result_276986)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1747)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1747, 4), 'stypy_return_type', tuple_276978)
    
    # ################# End of 'unique_roots(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'unique_roots' in the type store
    # Getting the type of 'stypy_return_type' (line 1674)
    stypy_return_type_276987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_276987)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'unique_roots'
    return stypy_return_type_276987

# Assigning a type to the variable 'unique_roots' (line 1674)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 0), 'unique_roots', unique_roots)

@norecursion
def invres(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_276988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1750, 24), 'float')
    str_276989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1750, 36), 'str', 'avg')
    defaults = [float_276988, str_276989]
    # Create a new context for function 'invres'
    module_type_store = module_type_store.open_function_context('invres', 1750, 0, False)
    
    # Passed parameters checking function
    invres.stypy_localization = localization
    invres.stypy_type_of_self = None
    invres.stypy_type_store = module_type_store
    invres.stypy_function_name = 'invres'
    invres.stypy_param_names_list = ['r', 'p', 'k', 'tol', 'rtype']
    invres.stypy_varargs_param_name = None
    invres.stypy_kwargs_param_name = None
    invres.stypy_call_defaults = defaults
    invres.stypy_call_varargs = varargs
    invres.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'invres', ['r', 'p', 'k', 'tol', 'rtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'invres', localization, ['r', 'p', 'k', 'tol', 'rtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'invres(...)' code ##################

    str_276990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, (-1)), 'str', "\n    Compute b(s) and a(s) from partial fraction expansion.\n\n    If `M` is the degree of numerator `b` and `N` the degree of denominator\n    `a`::\n\n              b(s)     b[0] s**(M) + b[1] s**(M-1) + ... + b[M]\n      H(s) = ------ = ------------------------------------------\n              a(s)     a[0] s**(N) + a[1] s**(N-1) + ... + a[N]\n\n    then the partial-fraction expansion H(s) is defined as::\n\n               r[0]       r[1]             r[-1]\n           = -------- + -------- + ... + --------- + k(s)\n             (s-p[0])   (s-p[1])         (s-p[-1])\n\n    If there are any repeated roots (closer together than `tol`), then H(s)\n    has terms like::\n\n          r[i]      r[i+1]              r[i+n-1]\n        -------- + ----------- + ... + -----------\n        (s-p[i])  (s-p[i])**2          (s-p[i])**n\n\n    This function is used for polynomials in positive powers of s or z,\n    such as analog filters or digital filters in controls engineering.  For\n    negative powers of z (typical for digital filters in DSP), use `invresz`.\n\n    Parameters\n    ----------\n    r : array_like\n        Residues.\n    p : array_like\n        Poles.\n    k : array_like\n        Coefficients of the direct polynomial term.\n    tol : float, optional\n        The tolerance for two roots to be considered equal. Default is 1e-3.\n    rtype : {'max', 'min, 'avg'}, optional\n        How to determine the returned root if multiple roots are within\n        `tol` of each other.\n\n          - 'max': pick the maximum of those roots.\n          - 'min': pick the minimum of those roots.\n          - 'avg': take the average of those roots.\n\n    Returns\n    -------\n    b : ndarray\n        Numerator polynomial coefficients.\n    a : ndarray\n        Denominator polynomial coefficients.\n\n    See Also\n    --------\n    residue, invresz, unique_roots\n\n    ")
    
    # Assigning a Name to a Name (line 1808):
    
    # Assigning a Name to a Name (line 1808):
    # Getting the type of 'k' (line 1808)
    k_276991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 12), 'k')
    # Assigning a type to the variable 'extra' (line 1808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 4), 'extra', k_276991)
    
    # Assigning a Call to a Tuple (line 1809):
    
    # Assigning a Subscript to a Name (line 1809):
    
    # Obtaining the type of the subscript
    int_276992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 4), 'int')
    
    # Call to cmplx_sort(...): (line 1809)
    # Processing the call arguments (line 1809)
    # Getting the type of 'p' (line 1809)
    p_276994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 25), 'p', False)
    # Processing the call keyword arguments (line 1809)
    kwargs_276995 = {}
    # Getting the type of 'cmplx_sort' (line 1809)
    cmplx_sort_276993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 14), 'cmplx_sort', False)
    # Calling cmplx_sort(args, kwargs) (line 1809)
    cmplx_sort_call_result_276996 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 14), cmplx_sort_276993, *[p_276994], **kwargs_276995)
    
    # Obtaining the member '__getitem__' of a type (line 1809)
    getitem___276997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 4), cmplx_sort_call_result_276996, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1809)
    subscript_call_result_276998 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 4), getitem___276997, int_276992)
    
    # Assigning a type to the variable 'tuple_var_assignment_274322' (line 1809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 4), 'tuple_var_assignment_274322', subscript_call_result_276998)
    
    # Assigning a Subscript to a Name (line 1809):
    
    # Obtaining the type of the subscript
    int_276999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 4), 'int')
    
    # Call to cmplx_sort(...): (line 1809)
    # Processing the call arguments (line 1809)
    # Getting the type of 'p' (line 1809)
    p_277001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 25), 'p', False)
    # Processing the call keyword arguments (line 1809)
    kwargs_277002 = {}
    # Getting the type of 'cmplx_sort' (line 1809)
    cmplx_sort_277000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 14), 'cmplx_sort', False)
    # Calling cmplx_sort(args, kwargs) (line 1809)
    cmplx_sort_call_result_277003 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 14), cmplx_sort_277000, *[p_277001], **kwargs_277002)
    
    # Obtaining the member '__getitem__' of a type (line 1809)
    getitem___277004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1809, 4), cmplx_sort_call_result_277003, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1809)
    subscript_call_result_277005 = invoke(stypy.reporting.localization.Localization(__file__, 1809, 4), getitem___277004, int_276999)
    
    # Assigning a type to the variable 'tuple_var_assignment_274323' (line 1809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 4), 'tuple_var_assignment_274323', subscript_call_result_277005)
    
    # Assigning a Name to a Name (line 1809):
    # Getting the type of 'tuple_var_assignment_274322' (line 1809)
    tuple_var_assignment_274322_277006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 4), 'tuple_var_assignment_274322')
    # Assigning a type to the variable 'p' (line 1809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 4), 'p', tuple_var_assignment_274322_277006)
    
    # Assigning a Name to a Name (line 1809):
    # Getting the type of 'tuple_var_assignment_274323' (line 1809)
    tuple_var_assignment_274323_277007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 4), 'tuple_var_assignment_274323')
    # Assigning a type to the variable 'indx' (line 1809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 7), 'indx', tuple_var_assignment_274323_277007)
    
    # Assigning a Call to a Name (line 1810):
    
    # Assigning a Call to a Name (line 1810):
    
    # Call to take(...): (line 1810)
    # Processing the call arguments (line 1810)
    # Getting the type of 'r' (line 1810)
    r_277009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 13), 'r', False)
    # Getting the type of 'indx' (line 1810)
    indx_277010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 16), 'indx', False)
    int_277011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 22), 'int')
    # Processing the call keyword arguments (line 1810)
    kwargs_277012 = {}
    # Getting the type of 'take' (line 1810)
    take_277008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 8), 'take', False)
    # Calling take(args, kwargs) (line 1810)
    take_call_result_277013 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 8), take_277008, *[r_277009, indx_277010, int_277011], **kwargs_277012)
    
    # Assigning a type to the variable 'r' (line 1810)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 4), 'r', take_call_result_277013)
    
    # Assigning a Call to a Tuple (line 1811):
    
    # Assigning a Subscript to a Name (line 1811):
    
    # Obtaining the type of the subscript
    int_277014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 4), 'int')
    
    # Call to unique_roots(...): (line 1811)
    # Processing the call arguments (line 1811)
    # Getting the type of 'p' (line 1811)
    p_277016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 30), 'p', False)
    # Processing the call keyword arguments (line 1811)
    # Getting the type of 'tol' (line 1811)
    tol_277017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 37), 'tol', False)
    keyword_277018 = tol_277017
    # Getting the type of 'rtype' (line 1811)
    rtype_277019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 48), 'rtype', False)
    keyword_277020 = rtype_277019
    kwargs_277021 = {'tol': keyword_277018, 'rtype': keyword_277020}
    # Getting the type of 'unique_roots' (line 1811)
    unique_roots_277015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 17), 'unique_roots', False)
    # Calling unique_roots(args, kwargs) (line 1811)
    unique_roots_call_result_277022 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 17), unique_roots_277015, *[p_277016], **kwargs_277021)
    
    # Obtaining the member '__getitem__' of a type (line 1811)
    getitem___277023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 4), unique_roots_call_result_277022, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1811)
    subscript_call_result_277024 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 4), getitem___277023, int_277014)
    
    # Assigning a type to the variable 'tuple_var_assignment_274324' (line 1811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 4), 'tuple_var_assignment_274324', subscript_call_result_277024)
    
    # Assigning a Subscript to a Name (line 1811):
    
    # Obtaining the type of the subscript
    int_277025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 4), 'int')
    
    # Call to unique_roots(...): (line 1811)
    # Processing the call arguments (line 1811)
    # Getting the type of 'p' (line 1811)
    p_277027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 30), 'p', False)
    # Processing the call keyword arguments (line 1811)
    # Getting the type of 'tol' (line 1811)
    tol_277028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 37), 'tol', False)
    keyword_277029 = tol_277028
    # Getting the type of 'rtype' (line 1811)
    rtype_277030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 48), 'rtype', False)
    keyword_277031 = rtype_277030
    kwargs_277032 = {'tol': keyword_277029, 'rtype': keyword_277031}
    # Getting the type of 'unique_roots' (line 1811)
    unique_roots_277026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 17), 'unique_roots', False)
    # Calling unique_roots(args, kwargs) (line 1811)
    unique_roots_call_result_277033 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 17), unique_roots_277026, *[p_277027], **kwargs_277032)
    
    # Obtaining the member '__getitem__' of a type (line 1811)
    getitem___277034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 4), unique_roots_call_result_277033, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1811)
    subscript_call_result_277035 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 4), getitem___277034, int_277025)
    
    # Assigning a type to the variable 'tuple_var_assignment_274325' (line 1811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 4), 'tuple_var_assignment_274325', subscript_call_result_277035)
    
    # Assigning a Name to a Name (line 1811):
    # Getting the type of 'tuple_var_assignment_274324' (line 1811)
    tuple_var_assignment_274324_277036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 4), 'tuple_var_assignment_274324')
    # Assigning a type to the variable 'pout' (line 1811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 4), 'pout', tuple_var_assignment_274324_277036)
    
    # Assigning a Name to a Name (line 1811):
    # Getting the type of 'tuple_var_assignment_274325' (line 1811)
    tuple_var_assignment_274325_277037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 4), 'tuple_var_assignment_274325')
    # Assigning a type to the variable 'mult' (line 1811)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 10), 'mult', tuple_var_assignment_274325_277037)
    
    # Assigning a List to a Name (line 1812):
    
    # Assigning a List to a Name (line 1812):
    
    # Obtaining an instance of the builtin type 'list' (line 1812)
    list_277038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1812)
    
    # Assigning a type to the variable 'p' (line 1812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 4), 'p', list_277038)
    
    
    # Call to range(...): (line 1813)
    # Processing the call arguments (line 1813)
    
    # Call to len(...): (line 1813)
    # Processing the call arguments (line 1813)
    # Getting the type of 'pout' (line 1813)
    pout_277041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 23), 'pout', False)
    # Processing the call keyword arguments (line 1813)
    kwargs_277042 = {}
    # Getting the type of 'len' (line 1813)
    len_277040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 19), 'len', False)
    # Calling len(args, kwargs) (line 1813)
    len_call_result_277043 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 19), len_277040, *[pout_277041], **kwargs_277042)
    
    # Processing the call keyword arguments (line 1813)
    kwargs_277044 = {}
    # Getting the type of 'range' (line 1813)
    range_277039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 13), 'range', False)
    # Calling range(args, kwargs) (line 1813)
    range_call_result_277045 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 13), range_277039, *[len_call_result_277043], **kwargs_277044)
    
    # Testing the type of a for loop iterable (line 1813)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1813, 4), range_call_result_277045)
    # Getting the type of the for loop variable (line 1813)
    for_loop_var_277046 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1813, 4), range_call_result_277045)
    # Assigning a type to the variable 'k' (line 1813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 4), 'k', for_loop_var_277046)
    # SSA begins for a for statement (line 1813)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to extend(...): (line 1814)
    # Processing the call arguments (line 1814)
    
    # Obtaining an instance of the builtin type 'list' (line 1814)
    list_277049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1814)
    # Adding element type (line 1814)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1814)
    k_277050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 23), 'k', False)
    # Getting the type of 'pout' (line 1814)
    pout_277051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 18), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 1814)
    getitem___277052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 18), pout_277051, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1814)
    subscript_call_result_277053 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 18), getitem___277052, k_277050)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1814, 17), list_277049, subscript_call_result_277053)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1814)
    k_277054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 34), 'k', False)
    # Getting the type of 'mult' (line 1814)
    mult_277055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 29), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 1814)
    getitem___277056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 29), mult_277055, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1814)
    subscript_call_result_277057 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 29), getitem___277056, k_277054)
    
    # Applying the binary operator '*' (line 1814)
    result_mul_277058 = python_operator(stypy.reporting.localization.Localization(__file__, 1814, 17), '*', list_277049, subscript_call_result_277057)
    
    # Processing the call keyword arguments (line 1814)
    kwargs_277059 = {}
    # Getting the type of 'p' (line 1814)
    p_277047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'p', False)
    # Obtaining the member 'extend' of a type (line 1814)
    extend_277048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 8), p_277047, 'extend')
    # Calling extend(args, kwargs) (line 1814)
    extend_call_result_277060 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 8), extend_277048, *[result_mul_277058], **kwargs_277059)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1815):
    
    # Assigning a Call to a Name (line 1815):
    
    # Call to atleast_1d(...): (line 1815)
    # Processing the call arguments (line 1815)
    
    # Call to poly(...): (line 1815)
    # Processing the call arguments (line 1815)
    # Getting the type of 'p' (line 1815)
    p_277063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 24), 'p', False)
    # Processing the call keyword arguments (line 1815)
    kwargs_277064 = {}
    # Getting the type of 'poly' (line 1815)
    poly_277062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 19), 'poly', False)
    # Calling poly(args, kwargs) (line 1815)
    poly_call_result_277065 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 19), poly_277062, *[p_277063], **kwargs_277064)
    
    # Processing the call keyword arguments (line 1815)
    kwargs_277066 = {}
    # Getting the type of 'atleast_1d' (line 1815)
    atleast_1d_277061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1815)
    atleast_1d_call_result_277067 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 8), atleast_1d_277061, *[poly_call_result_277065], **kwargs_277066)
    
    # Assigning a type to the variable 'a' (line 1815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 4), 'a', atleast_1d_call_result_277067)
    
    
    
    # Call to len(...): (line 1816)
    # Processing the call arguments (line 1816)
    # Getting the type of 'extra' (line 1816)
    extra_277069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 11), 'extra', False)
    # Processing the call keyword arguments (line 1816)
    kwargs_277070 = {}
    # Getting the type of 'len' (line 1816)
    len_277068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 7), 'len', False)
    # Calling len(args, kwargs) (line 1816)
    len_call_result_277071 = invoke(stypy.reporting.localization.Localization(__file__, 1816, 7), len_277068, *[extra_277069], **kwargs_277070)
    
    int_277072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1816, 20), 'int')
    # Applying the binary operator '>' (line 1816)
    result_gt_277073 = python_operator(stypy.reporting.localization.Localization(__file__, 1816, 7), '>', len_call_result_277071, int_277072)
    
    # Testing the type of an if condition (line 1816)
    if_condition_277074 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1816, 4), result_gt_277073)
    # Assigning a type to the variable 'if_condition_277074' (line 1816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 4), 'if_condition_277074', if_condition_277074)
    # SSA begins for if statement (line 1816)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1817):
    
    # Assigning a Call to a Name (line 1817):
    
    # Call to polymul(...): (line 1817)
    # Processing the call arguments (line 1817)
    # Getting the type of 'extra' (line 1817)
    extra_277076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 20), 'extra', False)
    # Getting the type of 'a' (line 1817)
    a_277077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 27), 'a', False)
    # Processing the call keyword arguments (line 1817)
    kwargs_277078 = {}
    # Getting the type of 'polymul' (line 1817)
    polymul_277075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 12), 'polymul', False)
    # Calling polymul(args, kwargs) (line 1817)
    polymul_call_result_277079 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 12), polymul_277075, *[extra_277076, a_277077], **kwargs_277078)
    
    # Assigning a type to the variable 'b' (line 1817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 8), 'b', polymul_call_result_277079)
    # SSA branch for the else part of an if statement (line 1816)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a List to a Name (line 1819):
    
    # Assigning a List to a Name (line 1819):
    
    # Obtaining an instance of the builtin type 'list' (line 1819)
    list_277080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1819, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1819)
    # Adding element type (line 1819)
    int_277081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1819, 13), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1819, 12), list_277080, int_277081)
    
    # Assigning a type to the variable 'b' (line 1819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 8), 'b', list_277080)
    # SSA join for if statement (line 1816)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 1820):
    
    # Assigning a Num to a Name (line 1820):
    int_277082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1820, 11), 'int')
    # Assigning a type to the variable 'indx' (line 1820)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 4), 'indx', int_277082)
    
    
    # Call to range(...): (line 1821)
    # Processing the call arguments (line 1821)
    
    # Call to len(...): (line 1821)
    # Processing the call arguments (line 1821)
    # Getting the type of 'pout' (line 1821)
    pout_277085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 23), 'pout', False)
    # Processing the call keyword arguments (line 1821)
    kwargs_277086 = {}
    # Getting the type of 'len' (line 1821)
    len_277084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 19), 'len', False)
    # Calling len(args, kwargs) (line 1821)
    len_call_result_277087 = invoke(stypy.reporting.localization.Localization(__file__, 1821, 19), len_277084, *[pout_277085], **kwargs_277086)
    
    # Processing the call keyword arguments (line 1821)
    kwargs_277088 = {}
    # Getting the type of 'range' (line 1821)
    range_277083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 13), 'range', False)
    # Calling range(args, kwargs) (line 1821)
    range_call_result_277089 = invoke(stypy.reporting.localization.Localization(__file__, 1821, 13), range_277083, *[len_call_result_277087], **kwargs_277088)
    
    # Testing the type of a for loop iterable (line 1821)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1821, 4), range_call_result_277089)
    # Getting the type of the for loop variable (line 1821)
    for_loop_var_277090 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1821, 4), range_call_result_277089)
    # Assigning a type to the variable 'k' (line 1821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1821, 4), 'k', for_loop_var_277090)
    # SSA begins for a for statement (line 1821)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a List to a Name (line 1822):
    
    # Assigning a List to a Name (line 1822):
    
    # Obtaining an instance of the builtin type 'list' (line 1822)
    list_277091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1822, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1822)
    
    # Assigning a type to the variable 'temp' (line 1822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'temp', list_277091)
    
    
    # Call to range(...): (line 1823)
    # Processing the call arguments (line 1823)
    
    # Call to len(...): (line 1823)
    # Processing the call arguments (line 1823)
    # Getting the type of 'pout' (line 1823)
    pout_277094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 27), 'pout', False)
    # Processing the call keyword arguments (line 1823)
    kwargs_277095 = {}
    # Getting the type of 'len' (line 1823)
    len_277093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 23), 'len', False)
    # Calling len(args, kwargs) (line 1823)
    len_call_result_277096 = invoke(stypy.reporting.localization.Localization(__file__, 1823, 23), len_277093, *[pout_277094], **kwargs_277095)
    
    # Processing the call keyword arguments (line 1823)
    kwargs_277097 = {}
    # Getting the type of 'range' (line 1823)
    range_277092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 17), 'range', False)
    # Calling range(args, kwargs) (line 1823)
    range_call_result_277098 = invoke(stypy.reporting.localization.Localization(__file__, 1823, 17), range_277092, *[len_call_result_277096], **kwargs_277097)
    
    # Testing the type of a for loop iterable (line 1823)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1823, 8), range_call_result_277098)
    # Getting the type of the for loop variable (line 1823)
    for_loop_var_277099 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1823, 8), range_call_result_277098)
    # Assigning a type to the variable 'l' (line 1823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1823, 8), 'l', for_loop_var_277099)
    # SSA begins for a for statement (line 1823)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'l' (line 1824)
    l_277100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 15), 'l')
    # Getting the type of 'k' (line 1824)
    k_277101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 20), 'k')
    # Applying the binary operator '!=' (line 1824)
    result_ne_277102 = python_operator(stypy.reporting.localization.Localization(__file__, 1824, 15), '!=', l_277100, k_277101)
    
    # Testing the type of an if condition (line 1824)
    if_condition_277103 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1824, 12), result_ne_277102)
    # Assigning a type to the variable 'if_condition_277103' (line 1824)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1824, 12), 'if_condition_277103', if_condition_277103)
    # SSA begins for if statement (line 1824)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 1825)
    # Processing the call arguments (line 1825)
    
    # Obtaining an instance of the builtin type 'list' (line 1825)
    list_277106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1825)
    # Adding element type (line 1825)
    
    # Obtaining the type of the subscript
    # Getting the type of 'l' (line 1825)
    l_277107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 34), 'l', False)
    # Getting the type of 'pout' (line 1825)
    pout_277108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 29), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 1825)
    getitem___277109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 29), pout_277108, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1825)
    subscript_call_result_277110 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 29), getitem___277109, l_277107)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1825, 28), list_277106, subscript_call_result_277110)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'l' (line 1825)
    l_277111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 45), 'l', False)
    # Getting the type of 'mult' (line 1825)
    mult_277112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 40), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 1825)
    getitem___277113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 40), mult_277112, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1825)
    subscript_call_result_277114 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 40), getitem___277113, l_277111)
    
    # Applying the binary operator '*' (line 1825)
    result_mul_277115 = python_operator(stypy.reporting.localization.Localization(__file__, 1825, 28), '*', list_277106, subscript_call_result_277114)
    
    # Processing the call keyword arguments (line 1825)
    kwargs_277116 = {}
    # Getting the type of 'temp' (line 1825)
    temp_277104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 16), 'temp', False)
    # Obtaining the member 'extend' of a type (line 1825)
    extend_277105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 16), temp_277104, 'extend')
    # Calling extend(args, kwargs) (line 1825)
    extend_call_result_277117 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 16), extend_277105, *[result_mul_277115], **kwargs_277116)
    
    # SSA join for if statement (line 1824)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 1826)
    # Processing the call arguments (line 1826)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1826)
    k_277119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 28), 'k', False)
    # Getting the type of 'mult' (line 1826)
    mult_277120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 23), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 1826)
    getitem___277121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1826, 23), mult_277120, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1826)
    subscript_call_result_277122 = invoke(stypy.reporting.localization.Localization(__file__, 1826, 23), getitem___277121, k_277119)
    
    # Processing the call keyword arguments (line 1826)
    kwargs_277123 = {}
    # Getting the type of 'range' (line 1826)
    range_277118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 17), 'range', False)
    # Calling range(args, kwargs) (line 1826)
    range_call_result_277124 = invoke(stypy.reporting.localization.Localization(__file__, 1826, 17), range_277118, *[subscript_call_result_277122], **kwargs_277123)
    
    # Testing the type of a for loop iterable (line 1826)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1826, 8), range_call_result_277124)
    # Getting the type of the for loop variable (line 1826)
    for_loop_var_277125 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1826, 8), range_call_result_277124)
    # Assigning a type to the variable 'm' (line 1826)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1826, 8), 'm', for_loop_var_277125)
    # SSA begins for a for statement (line 1826)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 1827):
    
    # Assigning a Subscript to a Name (line 1827):
    
    # Obtaining the type of the subscript
    slice_277126 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1827, 17), None, None, None)
    # Getting the type of 'temp' (line 1827)
    temp_277127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 17), 'temp')
    # Obtaining the member '__getitem__' of a type (line 1827)
    getitem___277128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 17), temp_277127, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1827)
    subscript_call_result_277129 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 17), getitem___277128, slice_277126)
    
    # Assigning a type to the variable 't2' (line 1827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 12), 't2', subscript_call_result_277129)
    
    # Call to extend(...): (line 1828)
    # Processing the call arguments (line 1828)
    
    # Obtaining an instance of the builtin type 'list' (line 1828)
    list_277132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1828)
    # Adding element type (line 1828)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1828)
    k_277133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 28), 'k', False)
    # Getting the type of 'pout' (line 1828)
    pout_277134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 23), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 1828)
    getitem___277135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 23), pout_277134, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1828)
    subscript_call_result_277136 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 23), getitem___277135, k_277133)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1828, 22), list_277132, subscript_call_result_277136)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1828)
    k_277137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 40), 'k', False)
    # Getting the type of 'mult' (line 1828)
    mult_277138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 35), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 1828)
    getitem___277139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 35), mult_277138, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1828)
    subscript_call_result_277140 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 35), getitem___277139, k_277137)
    
    # Getting the type of 'm' (line 1828)
    m_277141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 45), 'm', False)
    # Applying the binary operator '-' (line 1828)
    result_sub_277142 = python_operator(stypy.reporting.localization.Localization(__file__, 1828, 35), '-', subscript_call_result_277140, m_277141)
    
    int_277143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1828, 49), 'int')
    # Applying the binary operator '-' (line 1828)
    result_sub_277144 = python_operator(stypy.reporting.localization.Localization(__file__, 1828, 47), '-', result_sub_277142, int_277143)
    
    # Applying the binary operator '*' (line 1828)
    result_mul_277145 = python_operator(stypy.reporting.localization.Localization(__file__, 1828, 22), '*', list_277132, result_sub_277144)
    
    # Processing the call keyword arguments (line 1828)
    kwargs_277146 = {}
    # Getting the type of 't2' (line 1828)
    t2_277130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1828, 12), 't2', False)
    # Obtaining the member 'extend' of a type (line 1828)
    extend_277131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1828, 12), t2_277130, 'extend')
    # Calling extend(args, kwargs) (line 1828)
    extend_call_result_277147 = invoke(stypy.reporting.localization.Localization(__file__, 1828, 12), extend_277131, *[result_mul_277145], **kwargs_277146)
    
    
    # Assigning a Call to a Name (line 1829):
    
    # Assigning a Call to a Name (line 1829):
    
    # Call to polyadd(...): (line 1829)
    # Processing the call arguments (line 1829)
    # Getting the type of 'b' (line 1829)
    b_277149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 24), 'b', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'indx' (line 1829)
    indx_277150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 29), 'indx', False)
    # Getting the type of 'r' (line 1829)
    r_277151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 27), 'r', False)
    # Obtaining the member '__getitem__' of a type (line 1829)
    getitem___277152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1829, 27), r_277151, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1829)
    subscript_call_result_277153 = invoke(stypy.reporting.localization.Localization(__file__, 1829, 27), getitem___277152, indx_277150)
    
    
    # Call to atleast_1d(...): (line 1829)
    # Processing the call arguments (line 1829)
    
    # Call to poly(...): (line 1829)
    # Processing the call arguments (line 1829)
    # Getting the type of 't2' (line 1829)
    t2_277156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 53), 't2', False)
    # Processing the call keyword arguments (line 1829)
    kwargs_277157 = {}
    # Getting the type of 'poly' (line 1829)
    poly_277155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 48), 'poly', False)
    # Calling poly(args, kwargs) (line 1829)
    poly_call_result_277158 = invoke(stypy.reporting.localization.Localization(__file__, 1829, 48), poly_277155, *[t2_277156], **kwargs_277157)
    
    # Processing the call keyword arguments (line 1829)
    kwargs_277159 = {}
    # Getting the type of 'atleast_1d' (line 1829)
    atleast_1d_277154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 37), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1829)
    atleast_1d_call_result_277160 = invoke(stypy.reporting.localization.Localization(__file__, 1829, 37), atleast_1d_277154, *[poly_call_result_277158], **kwargs_277159)
    
    # Applying the binary operator '*' (line 1829)
    result_mul_277161 = python_operator(stypy.reporting.localization.Localization(__file__, 1829, 27), '*', subscript_call_result_277153, atleast_1d_call_result_277160)
    
    # Processing the call keyword arguments (line 1829)
    kwargs_277162 = {}
    # Getting the type of 'polyadd' (line 1829)
    polyadd_277148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 16), 'polyadd', False)
    # Calling polyadd(args, kwargs) (line 1829)
    polyadd_call_result_277163 = invoke(stypy.reporting.localization.Localization(__file__, 1829, 16), polyadd_277148, *[b_277149, result_mul_277161], **kwargs_277162)
    
    # Assigning a type to the variable 'b' (line 1829)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1829, 12), 'b', polyadd_call_result_277163)
    
    # Getting the type of 'indx' (line 1830)
    indx_277164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 12), 'indx')
    int_277165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 20), 'int')
    # Applying the binary operator '+=' (line 1830)
    result_iadd_277166 = python_operator(stypy.reporting.localization.Localization(__file__, 1830, 12), '+=', indx_277164, int_277165)
    # Assigning a type to the variable 'indx' (line 1830)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1830, 12), 'indx', result_iadd_277166)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1831):
    
    # Assigning a Call to a Name (line 1831):
    
    # Call to real_if_close(...): (line 1831)
    # Processing the call arguments (line 1831)
    # Getting the type of 'b' (line 1831)
    b_277168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 22), 'b', False)
    # Processing the call keyword arguments (line 1831)
    kwargs_277169 = {}
    # Getting the type of 'real_if_close' (line 1831)
    real_if_close_277167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 8), 'real_if_close', False)
    # Calling real_if_close(args, kwargs) (line 1831)
    real_if_close_call_result_277170 = invoke(stypy.reporting.localization.Localization(__file__, 1831, 8), real_if_close_277167, *[b_277168], **kwargs_277169)
    
    # Assigning a type to the variable 'b' (line 1831)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1831, 4), 'b', real_if_close_call_result_277170)
    
    
    # Evaluating a boolean operation
    
    # Call to allclose(...): (line 1832)
    # Processing the call arguments (line 1832)
    
    # Obtaining the type of the subscript
    int_277172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 21), 'int')
    # Getting the type of 'b' (line 1832)
    b_277173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 19), 'b', False)
    # Obtaining the member '__getitem__' of a type (line 1832)
    getitem___277174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 19), b_277173, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1832)
    subscript_call_result_277175 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 19), getitem___277174, int_277172)
    
    int_277176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 25), 'int')
    # Processing the call keyword arguments (line 1832)
    float_277177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 33), 'float')
    keyword_277178 = float_277177
    kwargs_277179 = {'rtol': keyword_277178}
    # Getting the type of 'allclose' (line 1832)
    allclose_277171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 10), 'allclose', False)
    # Calling allclose(args, kwargs) (line 1832)
    allclose_call_result_277180 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 10), allclose_277171, *[subscript_call_result_277175, int_277176], **kwargs_277179)
    
    
    
    # Obtaining the type of the subscript
    int_277181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 53), 'int')
    # Getting the type of 'b' (line 1832)
    b_277182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 45), 'b')
    # Obtaining the member 'shape' of a type (line 1832)
    shape_277183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 45), b_277182, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1832)
    getitem___277184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 45), shape_277183, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1832)
    subscript_call_result_277185 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 45), getitem___277184, int_277181)
    
    int_277186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 59), 'int')
    # Applying the binary operator '>' (line 1832)
    result_gt_277187 = python_operator(stypy.reporting.localization.Localization(__file__, 1832, 45), '>', subscript_call_result_277185, int_277186)
    
    # Applying the binary operator 'and' (line 1832)
    result_and_keyword_277188 = python_operator(stypy.reporting.localization.Localization(__file__, 1832, 10), 'and', allclose_call_result_277180, result_gt_277187)
    
    # Testing the type of an if condition (line 1832)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1832, 4), result_and_keyword_277188)
    # SSA begins for while statement (line 1832)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Subscript to a Name (line 1833):
    
    # Assigning a Subscript to a Name (line 1833):
    
    # Obtaining the type of the subscript
    int_277189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, 14), 'int')
    slice_277190 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1833, 12), int_277189, None, None)
    # Getting the type of 'b' (line 1833)
    b_277191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 12), 'b')
    # Obtaining the member '__getitem__' of a type (line 1833)
    getitem___277192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1833, 12), b_277191, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1833)
    subscript_call_result_277193 = invoke(stypy.reporting.localization.Localization(__file__, 1833, 12), getitem___277192, slice_277190)
    
    # Assigning a type to the variable 'b' (line 1833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1833, 8), 'b', subscript_call_result_277193)
    # SSA join for while statement (line 1832)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1834)
    tuple_277194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1834, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1834)
    # Adding element type (line 1834)
    # Getting the type of 'b' (line 1834)
    b_277195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 11), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 11), tuple_277194, b_277195)
    # Adding element type (line 1834)
    # Getting the type of 'a' (line 1834)
    a_277196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 14), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1834, 11), tuple_277194, a_277196)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1834, 4), 'stypy_return_type', tuple_277194)
    
    # ################# End of 'invres(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'invres' in the type store
    # Getting the type of 'stypy_return_type' (line 1750)
    stypy_return_type_277197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277197)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'invres'
    return stypy_return_type_277197

# Assigning a type to the variable 'invres' (line 1750)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1750, 0), 'invres', invres)

@norecursion
def residue(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_277198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 22), 'float')
    str_277199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 34), 'str', 'avg')
    defaults = [float_277198, str_277199]
    # Create a new context for function 'residue'
    module_type_store = module_type_store.open_function_context('residue', 1837, 0, False)
    
    # Passed parameters checking function
    residue.stypy_localization = localization
    residue.stypy_type_of_self = None
    residue.stypy_type_store = module_type_store
    residue.stypy_function_name = 'residue'
    residue.stypy_param_names_list = ['b', 'a', 'tol', 'rtype']
    residue.stypy_varargs_param_name = None
    residue.stypy_kwargs_param_name = None
    residue.stypy_call_defaults = defaults
    residue.stypy_call_varargs = varargs
    residue.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'residue', ['b', 'a', 'tol', 'rtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'residue', localization, ['b', 'a', 'tol', 'rtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'residue(...)' code ##################

    str_277200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1885, (-1)), 'str', '\n    Compute partial-fraction expansion of b(s) / a(s).\n\n    If `M` is the degree of numerator `b` and `N` the degree of denominator\n    `a`::\n\n              b(s)     b[0] s**(M) + b[1] s**(M-1) + ... + b[M]\n      H(s) = ------ = ------------------------------------------\n              a(s)     a[0] s**(N) + a[1] s**(N-1) + ... + a[N]\n\n    then the partial-fraction expansion H(s) is defined as::\n\n               r[0]       r[1]             r[-1]\n           = -------- + -------- + ... + --------- + k(s)\n             (s-p[0])   (s-p[1])         (s-p[-1])\n\n    If there are any repeated roots (closer together than `tol`), then H(s)\n    has terms like::\n\n          r[i]      r[i+1]              r[i+n-1]\n        -------- + ----------- + ... + -----------\n        (s-p[i])  (s-p[i])**2          (s-p[i])**n\n\n    This function is used for polynomials in positive powers of s or z,\n    such as analog filters or digital filters in controls engineering.  For\n    negative powers of z (typical for digital filters in DSP), use `residuez`.\n\n    Parameters\n    ----------\n    b : array_like\n        Numerator polynomial coefficients.\n    a : array_like\n        Denominator polynomial coefficients.\n\n    Returns\n    -------\n    r : ndarray\n        Residues.\n    p : ndarray\n        Poles.\n    k : ndarray\n        Coefficients of the direct polynomial term.\n\n    See Also\n    --------\n    invres, residuez, numpy.poly, unique_roots\n\n    ')
    
    # Assigning a Call to a Tuple (line 1887):
    
    # Assigning a Subscript to a Name (line 1887):
    
    # Obtaining the type of the subscript
    int_277201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 4), 'int')
    
    # Call to map(...): (line 1887)
    # Processing the call arguments (line 1887)
    # Getting the type of 'asarray' (line 1887)
    asarray_277203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 15), 'asarray', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1887)
    tuple_277204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1887)
    # Adding element type (line 1887)
    # Getting the type of 'b' (line 1887)
    b_277205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 25), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1887, 25), tuple_277204, b_277205)
    # Adding element type (line 1887)
    # Getting the type of 'a' (line 1887)
    a_277206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1887, 25), tuple_277204, a_277206)
    
    # Processing the call keyword arguments (line 1887)
    kwargs_277207 = {}
    # Getting the type of 'map' (line 1887)
    map_277202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 11), 'map', False)
    # Calling map(args, kwargs) (line 1887)
    map_call_result_277208 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 11), map_277202, *[asarray_277203, tuple_277204], **kwargs_277207)
    
    # Obtaining the member '__getitem__' of a type (line 1887)
    getitem___277209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 4), map_call_result_277208, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1887)
    subscript_call_result_277210 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 4), getitem___277209, int_277201)
    
    # Assigning a type to the variable 'tuple_var_assignment_274326' (line 1887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'tuple_var_assignment_274326', subscript_call_result_277210)
    
    # Assigning a Subscript to a Name (line 1887):
    
    # Obtaining the type of the subscript
    int_277211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 4), 'int')
    
    # Call to map(...): (line 1887)
    # Processing the call arguments (line 1887)
    # Getting the type of 'asarray' (line 1887)
    asarray_277213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 15), 'asarray', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1887)
    tuple_277214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1887)
    # Adding element type (line 1887)
    # Getting the type of 'b' (line 1887)
    b_277215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 25), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1887, 25), tuple_277214, b_277215)
    # Adding element type (line 1887)
    # Getting the type of 'a' (line 1887)
    a_277216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1887, 25), tuple_277214, a_277216)
    
    # Processing the call keyword arguments (line 1887)
    kwargs_277217 = {}
    # Getting the type of 'map' (line 1887)
    map_277212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 11), 'map', False)
    # Calling map(args, kwargs) (line 1887)
    map_call_result_277218 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 11), map_277212, *[asarray_277213, tuple_277214], **kwargs_277217)
    
    # Obtaining the member '__getitem__' of a type (line 1887)
    getitem___277219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 4), map_call_result_277218, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1887)
    subscript_call_result_277220 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 4), getitem___277219, int_277211)
    
    # Assigning a type to the variable 'tuple_var_assignment_274327' (line 1887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'tuple_var_assignment_274327', subscript_call_result_277220)
    
    # Assigning a Name to a Name (line 1887):
    # Getting the type of 'tuple_var_assignment_274326' (line 1887)
    tuple_var_assignment_274326_277221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'tuple_var_assignment_274326')
    # Assigning a type to the variable 'b' (line 1887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'b', tuple_var_assignment_274326_277221)
    
    # Assigning a Name to a Name (line 1887):
    # Getting the type of 'tuple_var_assignment_274327' (line 1887)
    tuple_var_assignment_274327_277222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'tuple_var_assignment_274327')
    # Assigning a type to the variable 'a' (line 1887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 7), 'a', tuple_var_assignment_274327_277222)
    
    # Assigning a Subscript to a Name (line 1888):
    
    # Assigning a Subscript to a Name (line 1888):
    
    # Obtaining the type of the subscript
    int_277223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1888, 15), 'int')
    # Getting the type of 'a' (line 1888)
    a_277224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 13), 'a')
    # Obtaining the member '__getitem__' of a type (line 1888)
    getitem___277225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1888, 13), a_277224, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1888)
    subscript_call_result_277226 = invoke(stypy.reporting.localization.Localization(__file__, 1888, 13), getitem___277225, int_277223)
    
    # Assigning a type to the variable 'rscale' (line 1888)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1888, 4), 'rscale', subscript_call_result_277226)
    
    # Assigning a Call to a Tuple (line 1889):
    
    # Assigning a Subscript to a Name (line 1889):
    
    # Obtaining the type of the subscript
    int_277227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1889, 4), 'int')
    
    # Call to polydiv(...): (line 1889)
    # Processing the call arguments (line 1889)
    # Getting the type of 'b' (line 1889)
    b_277229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 19), 'b', False)
    # Getting the type of 'a' (line 1889)
    a_277230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 22), 'a', False)
    # Processing the call keyword arguments (line 1889)
    kwargs_277231 = {}
    # Getting the type of 'polydiv' (line 1889)
    polydiv_277228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 11), 'polydiv', False)
    # Calling polydiv(args, kwargs) (line 1889)
    polydiv_call_result_277232 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 11), polydiv_277228, *[b_277229, a_277230], **kwargs_277231)
    
    # Obtaining the member '__getitem__' of a type (line 1889)
    getitem___277233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 4), polydiv_call_result_277232, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1889)
    subscript_call_result_277234 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 4), getitem___277233, int_277227)
    
    # Assigning a type to the variable 'tuple_var_assignment_274328' (line 1889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 4), 'tuple_var_assignment_274328', subscript_call_result_277234)
    
    # Assigning a Subscript to a Name (line 1889):
    
    # Obtaining the type of the subscript
    int_277235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1889, 4), 'int')
    
    # Call to polydiv(...): (line 1889)
    # Processing the call arguments (line 1889)
    # Getting the type of 'b' (line 1889)
    b_277237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 19), 'b', False)
    # Getting the type of 'a' (line 1889)
    a_277238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 22), 'a', False)
    # Processing the call keyword arguments (line 1889)
    kwargs_277239 = {}
    # Getting the type of 'polydiv' (line 1889)
    polydiv_277236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 11), 'polydiv', False)
    # Calling polydiv(args, kwargs) (line 1889)
    polydiv_call_result_277240 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 11), polydiv_277236, *[b_277237, a_277238], **kwargs_277239)
    
    # Obtaining the member '__getitem__' of a type (line 1889)
    getitem___277241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 4), polydiv_call_result_277240, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1889)
    subscript_call_result_277242 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 4), getitem___277241, int_277235)
    
    # Assigning a type to the variable 'tuple_var_assignment_274329' (line 1889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 4), 'tuple_var_assignment_274329', subscript_call_result_277242)
    
    # Assigning a Name to a Name (line 1889):
    # Getting the type of 'tuple_var_assignment_274328' (line 1889)
    tuple_var_assignment_274328_277243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 4), 'tuple_var_assignment_274328')
    # Assigning a type to the variable 'k' (line 1889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 4), 'k', tuple_var_assignment_274328_277243)
    
    # Assigning a Name to a Name (line 1889):
    # Getting the type of 'tuple_var_assignment_274329' (line 1889)
    tuple_var_assignment_274329_277244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 4), 'tuple_var_assignment_274329')
    # Assigning a type to the variable 'b' (line 1889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 7), 'b', tuple_var_assignment_274329_277244)
    
    # Assigning a Call to a Name (line 1890):
    
    # Assigning a Call to a Name (line 1890):
    
    # Call to roots(...): (line 1890)
    # Processing the call arguments (line 1890)
    # Getting the type of 'a' (line 1890)
    a_277246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 14), 'a', False)
    # Processing the call keyword arguments (line 1890)
    kwargs_277247 = {}
    # Getting the type of 'roots' (line 1890)
    roots_277245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 8), 'roots', False)
    # Calling roots(args, kwargs) (line 1890)
    roots_call_result_277248 = invoke(stypy.reporting.localization.Localization(__file__, 1890, 8), roots_277245, *[a_277246], **kwargs_277247)
    
    # Assigning a type to the variable 'p' (line 1890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1890, 4), 'p', roots_call_result_277248)
    
    # Assigning a BinOp to a Name (line 1891):
    
    # Assigning a BinOp to a Name (line 1891):
    # Getting the type of 'p' (line 1891)
    p_277249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 8), 'p')
    float_277250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1891, 12), 'float')
    # Applying the binary operator '*' (line 1891)
    result_mul_277251 = python_operator(stypy.reporting.localization.Localization(__file__, 1891, 8), '*', p_277249, float_277250)
    
    # Assigning a type to the variable 'r' (line 1891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1891, 4), 'r', result_mul_277251)
    
    # Assigning a Call to a Tuple (line 1892):
    
    # Assigning a Subscript to a Name (line 1892):
    
    # Obtaining the type of the subscript
    int_277252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 4), 'int')
    
    # Call to unique_roots(...): (line 1892)
    # Processing the call arguments (line 1892)
    # Getting the type of 'p' (line 1892)
    p_277254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 30), 'p', False)
    # Processing the call keyword arguments (line 1892)
    # Getting the type of 'tol' (line 1892)
    tol_277255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 37), 'tol', False)
    keyword_277256 = tol_277255
    # Getting the type of 'rtype' (line 1892)
    rtype_277257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 48), 'rtype', False)
    keyword_277258 = rtype_277257
    kwargs_277259 = {'tol': keyword_277256, 'rtype': keyword_277258}
    # Getting the type of 'unique_roots' (line 1892)
    unique_roots_277253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 17), 'unique_roots', False)
    # Calling unique_roots(args, kwargs) (line 1892)
    unique_roots_call_result_277260 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 17), unique_roots_277253, *[p_277254], **kwargs_277259)
    
    # Obtaining the member '__getitem__' of a type (line 1892)
    getitem___277261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 4), unique_roots_call_result_277260, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1892)
    subscript_call_result_277262 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 4), getitem___277261, int_277252)
    
    # Assigning a type to the variable 'tuple_var_assignment_274330' (line 1892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 4), 'tuple_var_assignment_274330', subscript_call_result_277262)
    
    # Assigning a Subscript to a Name (line 1892):
    
    # Obtaining the type of the subscript
    int_277263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 4), 'int')
    
    # Call to unique_roots(...): (line 1892)
    # Processing the call arguments (line 1892)
    # Getting the type of 'p' (line 1892)
    p_277265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 30), 'p', False)
    # Processing the call keyword arguments (line 1892)
    # Getting the type of 'tol' (line 1892)
    tol_277266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 37), 'tol', False)
    keyword_277267 = tol_277266
    # Getting the type of 'rtype' (line 1892)
    rtype_277268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 48), 'rtype', False)
    keyword_277269 = rtype_277268
    kwargs_277270 = {'tol': keyword_277267, 'rtype': keyword_277269}
    # Getting the type of 'unique_roots' (line 1892)
    unique_roots_277264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 17), 'unique_roots', False)
    # Calling unique_roots(args, kwargs) (line 1892)
    unique_roots_call_result_277271 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 17), unique_roots_277264, *[p_277265], **kwargs_277270)
    
    # Obtaining the member '__getitem__' of a type (line 1892)
    getitem___277272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 4), unique_roots_call_result_277271, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1892)
    subscript_call_result_277273 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 4), getitem___277272, int_277263)
    
    # Assigning a type to the variable 'tuple_var_assignment_274331' (line 1892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 4), 'tuple_var_assignment_274331', subscript_call_result_277273)
    
    # Assigning a Name to a Name (line 1892):
    # Getting the type of 'tuple_var_assignment_274330' (line 1892)
    tuple_var_assignment_274330_277274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 4), 'tuple_var_assignment_274330')
    # Assigning a type to the variable 'pout' (line 1892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 4), 'pout', tuple_var_assignment_274330_277274)
    
    # Assigning a Name to a Name (line 1892):
    # Getting the type of 'tuple_var_assignment_274331' (line 1892)
    tuple_var_assignment_274331_277275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 4), 'tuple_var_assignment_274331')
    # Assigning a type to the variable 'mult' (line 1892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 10), 'mult', tuple_var_assignment_274331_277275)
    
    # Assigning a List to a Name (line 1893):
    
    # Assigning a List to a Name (line 1893):
    
    # Obtaining an instance of the builtin type 'list' (line 1893)
    list_277276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1893, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1893)
    
    # Assigning a type to the variable 'p' (line 1893)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1893, 4), 'p', list_277276)
    
    
    # Call to range(...): (line 1894)
    # Processing the call arguments (line 1894)
    
    # Call to len(...): (line 1894)
    # Processing the call arguments (line 1894)
    # Getting the type of 'pout' (line 1894)
    pout_277279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 23), 'pout', False)
    # Processing the call keyword arguments (line 1894)
    kwargs_277280 = {}
    # Getting the type of 'len' (line 1894)
    len_277278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 19), 'len', False)
    # Calling len(args, kwargs) (line 1894)
    len_call_result_277281 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 19), len_277278, *[pout_277279], **kwargs_277280)
    
    # Processing the call keyword arguments (line 1894)
    kwargs_277282 = {}
    # Getting the type of 'range' (line 1894)
    range_277277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 13), 'range', False)
    # Calling range(args, kwargs) (line 1894)
    range_call_result_277283 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 13), range_277277, *[len_call_result_277281], **kwargs_277282)
    
    # Testing the type of a for loop iterable (line 1894)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1894, 4), range_call_result_277283)
    # Getting the type of the for loop variable (line 1894)
    for_loop_var_277284 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1894, 4), range_call_result_277283)
    # Assigning a type to the variable 'n' (line 1894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 4), 'n', for_loop_var_277284)
    # SSA begins for a for statement (line 1894)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to extend(...): (line 1895)
    # Processing the call arguments (line 1895)
    
    # Obtaining an instance of the builtin type 'list' (line 1895)
    list_277287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1895, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1895)
    # Adding element type (line 1895)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1895)
    n_277288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 23), 'n', False)
    # Getting the type of 'pout' (line 1895)
    pout_277289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 18), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 1895)
    getitem___277290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 18), pout_277289, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1895)
    subscript_call_result_277291 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 18), getitem___277290, n_277288)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1895, 17), list_277287, subscript_call_result_277291)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1895)
    n_277292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 34), 'n', False)
    # Getting the type of 'mult' (line 1895)
    mult_277293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 29), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 1895)
    getitem___277294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 29), mult_277293, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1895)
    subscript_call_result_277295 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 29), getitem___277294, n_277292)
    
    # Applying the binary operator '*' (line 1895)
    result_mul_277296 = python_operator(stypy.reporting.localization.Localization(__file__, 1895, 17), '*', list_277287, subscript_call_result_277295)
    
    # Processing the call keyword arguments (line 1895)
    kwargs_277297 = {}
    # Getting the type of 'p' (line 1895)
    p_277285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 8), 'p', False)
    # Obtaining the member 'extend' of a type (line 1895)
    extend_277286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 8), p_277285, 'extend')
    # Calling extend(args, kwargs) (line 1895)
    extend_call_result_277298 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 8), extend_277286, *[result_mul_277296], **kwargs_277297)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1896):
    
    # Assigning a Call to a Name (line 1896):
    
    # Call to asarray(...): (line 1896)
    # Processing the call arguments (line 1896)
    # Getting the type of 'p' (line 1896)
    p_277300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 16), 'p', False)
    # Processing the call keyword arguments (line 1896)
    kwargs_277301 = {}
    # Getting the type of 'asarray' (line 1896)
    asarray_277299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1896, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1896)
    asarray_call_result_277302 = invoke(stypy.reporting.localization.Localization(__file__, 1896, 8), asarray_277299, *[p_277300], **kwargs_277301)
    
    # Assigning a type to the variable 'p' (line 1896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1896, 4), 'p', asarray_call_result_277302)
    
    # Assigning a Num to a Name (line 1898):
    
    # Assigning a Num to a Name (line 1898):
    int_277303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1898, 11), 'int')
    # Assigning a type to the variable 'indx' (line 1898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 4), 'indx', int_277303)
    
    
    # Call to range(...): (line 1899)
    # Processing the call arguments (line 1899)
    
    # Call to len(...): (line 1899)
    # Processing the call arguments (line 1899)
    # Getting the type of 'pout' (line 1899)
    pout_277306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 23), 'pout', False)
    # Processing the call keyword arguments (line 1899)
    kwargs_277307 = {}
    # Getting the type of 'len' (line 1899)
    len_277305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 19), 'len', False)
    # Calling len(args, kwargs) (line 1899)
    len_call_result_277308 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 19), len_277305, *[pout_277306], **kwargs_277307)
    
    # Processing the call keyword arguments (line 1899)
    kwargs_277309 = {}
    # Getting the type of 'range' (line 1899)
    range_277304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 13), 'range', False)
    # Calling range(args, kwargs) (line 1899)
    range_call_result_277310 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 13), range_277304, *[len_call_result_277308], **kwargs_277309)
    
    # Testing the type of a for loop iterable (line 1899)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1899, 4), range_call_result_277310)
    # Getting the type of the for loop variable (line 1899)
    for_loop_var_277311 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1899, 4), range_call_result_277310)
    # Assigning a type to the variable 'n' (line 1899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1899, 4), 'n', for_loop_var_277311)
    # SSA begins for a for statement (line 1899)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1900):
    
    # Assigning a Call to a Name (line 1900):
    
    # Call to copy(...): (line 1900)
    # Processing the call keyword arguments (line 1900)
    kwargs_277314 = {}
    # Getting the type of 'b' (line 1900)
    b_277312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 13), 'b', False)
    # Obtaining the member 'copy' of a type (line 1900)
    copy_277313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1900, 13), b_277312, 'copy')
    # Calling copy(args, kwargs) (line 1900)
    copy_call_result_277315 = invoke(stypy.reporting.localization.Localization(__file__, 1900, 13), copy_277313, *[], **kwargs_277314)
    
    # Assigning a type to the variable 'bn' (line 1900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1900, 8), 'bn', copy_call_result_277315)
    
    # Assigning a List to a Name (line 1901):
    
    # Assigning a List to a Name (line 1901):
    
    # Obtaining an instance of the builtin type 'list' (line 1901)
    list_277316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1901, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1901)
    
    # Assigning a type to the variable 'pn' (line 1901)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1901, 8), 'pn', list_277316)
    
    
    # Call to range(...): (line 1902)
    # Processing the call arguments (line 1902)
    
    # Call to len(...): (line 1902)
    # Processing the call arguments (line 1902)
    # Getting the type of 'pout' (line 1902)
    pout_277319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 27), 'pout', False)
    # Processing the call keyword arguments (line 1902)
    kwargs_277320 = {}
    # Getting the type of 'len' (line 1902)
    len_277318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 23), 'len', False)
    # Calling len(args, kwargs) (line 1902)
    len_call_result_277321 = invoke(stypy.reporting.localization.Localization(__file__, 1902, 23), len_277318, *[pout_277319], **kwargs_277320)
    
    # Processing the call keyword arguments (line 1902)
    kwargs_277322 = {}
    # Getting the type of 'range' (line 1902)
    range_277317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 17), 'range', False)
    # Calling range(args, kwargs) (line 1902)
    range_call_result_277323 = invoke(stypy.reporting.localization.Localization(__file__, 1902, 17), range_277317, *[len_call_result_277321], **kwargs_277322)
    
    # Testing the type of a for loop iterable (line 1902)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1902, 8), range_call_result_277323)
    # Getting the type of the for loop variable (line 1902)
    for_loop_var_277324 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1902, 8), range_call_result_277323)
    # Assigning a type to the variable 'l' (line 1902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1902, 8), 'l', for_loop_var_277324)
    # SSA begins for a for statement (line 1902)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'l' (line 1903)
    l_277325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 15), 'l')
    # Getting the type of 'n' (line 1903)
    n_277326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 20), 'n')
    # Applying the binary operator '!=' (line 1903)
    result_ne_277327 = python_operator(stypy.reporting.localization.Localization(__file__, 1903, 15), '!=', l_277325, n_277326)
    
    # Testing the type of an if condition (line 1903)
    if_condition_277328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1903, 12), result_ne_277327)
    # Assigning a type to the variable 'if_condition_277328' (line 1903)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1903, 12), 'if_condition_277328', if_condition_277328)
    # SSA begins for if statement (line 1903)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 1904)
    # Processing the call arguments (line 1904)
    
    # Obtaining an instance of the builtin type 'list' (line 1904)
    list_277331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1904, 26), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1904)
    # Adding element type (line 1904)
    
    # Obtaining the type of the subscript
    # Getting the type of 'l' (line 1904)
    l_277332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 32), 'l', False)
    # Getting the type of 'pout' (line 1904)
    pout_277333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 27), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 1904)
    getitem___277334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1904, 27), pout_277333, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1904)
    subscript_call_result_277335 = invoke(stypy.reporting.localization.Localization(__file__, 1904, 27), getitem___277334, l_277332)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1904, 26), list_277331, subscript_call_result_277335)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'l' (line 1904)
    l_277336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 43), 'l', False)
    # Getting the type of 'mult' (line 1904)
    mult_277337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 38), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 1904)
    getitem___277338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1904, 38), mult_277337, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1904)
    subscript_call_result_277339 = invoke(stypy.reporting.localization.Localization(__file__, 1904, 38), getitem___277338, l_277336)
    
    # Applying the binary operator '*' (line 1904)
    result_mul_277340 = python_operator(stypy.reporting.localization.Localization(__file__, 1904, 26), '*', list_277331, subscript_call_result_277339)
    
    # Processing the call keyword arguments (line 1904)
    kwargs_277341 = {}
    # Getting the type of 'pn' (line 1904)
    pn_277329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 16), 'pn', False)
    # Obtaining the member 'extend' of a type (line 1904)
    extend_277330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1904, 16), pn_277329, 'extend')
    # Calling extend(args, kwargs) (line 1904)
    extend_call_result_277342 = invoke(stypy.reporting.localization.Localization(__file__, 1904, 16), extend_277330, *[result_mul_277340], **kwargs_277341)
    
    # SSA join for if statement (line 1903)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1905):
    
    # Assigning a Call to a Name (line 1905):
    
    # Call to atleast_1d(...): (line 1905)
    # Processing the call arguments (line 1905)
    
    # Call to poly(...): (line 1905)
    # Processing the call arguments (line 1905)
    # Getting the type of 'pn' (line 1905)
    pn_277345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 29), 'pn', False)
    # Processing the call keyword arguments (line 1905)
    kwargs_277346 = {}
    # Getting the type of 'poly' (line 1905)
    poly_277344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 24), 'poly', False)
    # Calling poly(args, kwargs) (line 1905)
    poly_call_result_277347 = invoke(stypy.reporting.localization.Localization(__file__, 1905, 24), poly_277344, *[pn_277345], **kwargs_277346)
    
    # Processing the call keyword arguments (line 1905)
    kwargs_277348 = {}
    # Getting the type of 'atleast_1d' (line 1905)
    atleast_1d_277343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 13), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1905)
    atleast_1d_call_result_277349 = invoke(stypy.reporting.localization.Localization(__file__, 1905, 13), atleast_1d_277343, *[poly_call_result_277347], **kwargs_277348)
    
    # Assigning a type to the variable 'an' (line 1905)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1905, 8), 'an', atleast_1d_call_result_277349)
    
    # Assigning a Subscript to a Name (line 1908):
    
    # Assigning a Subscript to a Name (line 1908):
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1908)
    n_277350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 19), 'n')
    # Getting the type of 'mult' (line 1908)
    mult_277351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 14), 'mult')
    # Obtaining the member '__getitem__' of a type (line 1908)
    getitem___277352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1908, 14), mult_277351, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1908)
    subscript_call_result_277353 = invoke(stypy.reporting.localization.Localization(__file__, 1908, 14), getitem___277352, n_277350)
    
    # Assigning a type to the variable 'sig' (line 1908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1908, 8), 'sig', subscript_call_result_277353)
    
    
    # Call to range(...): (line 1909)
    # Processing the call arguments (line 1909)
    # Getting the type of 'sig' (line 1909)
    sig_277355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 23), 'sig', False)
    int_277356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 28), 'int')
    int_277357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1909, 31), 'int')
    # Processing the call keyword arguments (line 1909)
    kwargs_277358 = {}
    # Getting the type of 'range' (line 1909)
    range_277354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 17), 'range', False)
    # Calling range(args, kwargs) (line 1909)
    range_call_result_277359 = invoke(stypy.reporting.localization.Localization(__file__, 1909, 17), range_277354, *[sig_277355, int_277356, int_277357], **kwargs_277358)
    
    # Testing the type of a for loop iterable (line 1909)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1909, 8), range_call_result_277359)
    # Getting the type of the for loop variable (line 1909)
    for_loop_var_277360 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1909, 8), range_call_result_277359)
    # Assigning a type to the variable 'm' (line 1909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1909, 8), 'm', for_loop_var_277360)
    # SSA begins for a for statement (line 1909)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'sig' (line 1910)
    sig_277361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 15), 'sig')
    # Getting the type of 'm' (line 1910)
    m_277362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 21), 'm')
    # Applying the binary operator '>' (line 1910)
    result_gt_277363 = python_operator(stypy.reporting.localization.Localization(__file__, 1910, 15), '>', sig_277361, m_277362)
    
    # Testing the type of an if condition (line 1910)
    if_condition_277364 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1910, 12), result_gt_277363)
    # Assigning a type to the variable 'if_condition_277364' (line 1910)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1910, 12), 'if_condition_277364', if_condition_277364)
    # SSA begins for if statement (line 1910)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1912):
    
    # Assigning a Call to a Name (line 1912):
    
    # Call to polymul(...): (line 1912)
    # Processing the call arguments (line 1912)
    
    # Call to polyder(...): (line 1912)
    # Processing the call arguments (line 1912)
    # Getting the type of 'bn' (line 1912)
    bn_277367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 40), 'bn', False)
    int_277368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1912, 44), 'int')
    # Processing the call keyword arguments (line 1912)
    kwargs_277369 = {}
    # Getting the type of 'polyder' (line 1912)
    polyder_277366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 32), 'polyder', False)
    # Calling polyder(args, kwargs) (line 1912)
    polyder_call_result_277370 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 32), polyder_277366, *[bn_277367, int_277368], **kwargs_277369)
    
    # Getting the type of 'an' (line 1912)
    an_277371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 48), 'an', False)
    # Processing the call keyword arguments (line 1912)
    kwargs_277372 = {}
    # Getting the type of 'polymul' (line 1912)
    polymul_277365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 24), 'polymul', False)
    # Calling polymul(args, kwargs) (line 1912)
    polymul_call_result_277373 = invoke(stypy.reporting.localization.Localization(__file__, 1912, 24), polymul_277365, *[polyder_call_result_277370, an_277371], **kwargs_277372)
    
    # Assigning a type to the variable 'term1' (line 1912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 16), 'term1', polymul_call_result_277373)
    
    # Assigning a Call to a Name (line 1913):
    
    # Assigning a Call to a Name (line 1913):
    
    # Call to polymul(...): (line 1913)
    # Processing the call arguments (line 1913)
    # Getting the type of 'bn' (line 1913)
    bn_277375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 32), 'bn', False)
    
    # Call to polyder(...): (line 1913)
    # Processing the call arguments (line 1913)
    # Getting the type of 'an' (line 1913)
    an_277377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 44), 'an', False)
    int_277378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1913, 48), 'int')
    # Processing the call keyword arguments (line 1913)
    kwargs_277379 = {}
    # Getting the type of 'polyder' (line 1913)
    polyder_277376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 36), 'polyder', False)
    # Calling polyder(args, kwargs) (line 1913)
    polyder_call_result_277380 = invoke(stypy.reporting.localization.Localization(__file__, 1913, 36), polyder_277376, *[an_277377, int_277378], **kwargs_277379)
    
    # Processing the call keyword arguments (line 1913)
    kwargs_277381 = {}
    # Getting the type of 'polymul' (line 1913)
    polymul_277374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 24), 'polymul', False)
    # Calling polymul(args, kwargs) (line 1913)
    polymul_call_result_277382 = invoke(stypy.reporting.localization.Localization(__file__, 1913, 24), polymul_277374, *[bn_277375, polyder_call_result_277380], **kwargs_277381)
    
    # Assigning a type to the variable 'term2' (line 1913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1913, 16), 'term2', polymul_call_result_277382)
    
    # Assigning a Call to a Name (line 1914):
    
    # Assigning a Call to a Name (line 1914):
    
    # Call to polysub(...): (line 1914)
    # Processing the call arguments (line 1914)
    # Getting the type of 'term1' (line 1914)
    term1_277384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 29), 'term1', False)
    # Getting the type of 'term2' (line 1914)
    term2_277385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 36), 'term2', False)
    # Processing the call keyword arguments (line 1914)
    kwargs_277386 = {}
    # Getting the type of 'polysub' (line 1914)
    polysub_277383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 21), 'polysub', False)
    # Calling polysub(args, kwargs) (line 1914)
    polysub_call_result_277387 = invoke(stypy.reporting.localization.Localization(__file__, 1914, 21), polysub_277383, *[term1_277384, term2_277385], **kwargs_277386)
    
    # Assigning a type to the variable 'bn' (line 1914)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 16), 'bn', polysub_call_result_277387)
    
    # Assigning a Call to a Name (line 1915):
    
    # Assigning a Call to a Name (line 1915):
    
    # Call to polymul(...): (line 1915)
    # Processing the call arguments (line 1915)
    # Getting the type of 'an' (line 1915)
    an_277389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 29), 'an', False)
    # Getting the type of 'an' (line 1915)
    an_277390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 33), 'an', False)
    # Processing the call keyword arguments (line 1915)
    kwargs_277391 = {}
    # Getting the type of 'polymul' (line 1915)
    polymul_277388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 21), 'polymul', False)
    # Calling polymul(args, kwargs) (line 1915)
    polymul_call_result_277392 = invoke(stypy.reporting.localization.Localization(__file__, 1915, 21), polymul_277388, *[an_277389, an_277390], **kwargs_277391)
    
    # Assigning a type to the variable 'an' (line 1915)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1915, 16), 'an', polymul_call_result_277392)
    # SSA join for if statement (line 1910)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Subscript (line 1916):
    
    # Assigning a BinOp to a Subscript (line 1916):
    
    # Call to polyval(...): (line 1916)
    # Processing the call arguments (line 1916)
    # Getting the type of 'bn' (line 1916)
    bn_277394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 39), 'bn', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1916)
    n_277395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 48), 'n', False)
    # Getting the type of 'pout' (line 1916)
    pout_277396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 43), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 1916)
    getitem___277397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 43), pout_277396, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1916)
    subscript_call_result_277398 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 43), getitem___277397, n_277395)
    
    # Processing the call keyword arguments (line 1916)
    kwargs_277399 = {}
    # Getting the type of 'polyval' (line 1916)
    polyval_277393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 31), 'polyval', False)
    # Calling polyval(args, kwargs) (line 1916)
    polyval_call_result_277400 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 31), polyval_277393, *[bn_277394, subscript_call_result_277398], **kwargs_277399)
    
    
    # Call to polyval(...): (line 1916)
    # Processing the call arguments (line 1916)
    # Getting the type of 'an' (line 1916)
    an_277402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 62), 'an', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1916)
    n_277403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 71), 'n', False)
    # Getting the type of 'pout' (line 1916)
    pout_277404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 66), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 1916)
    getitem___277405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 66), pout_277404, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1916)
    subscript_call_result_277406 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 66), getitem___277405, n_277403)
    
    # Processing the call keyword arguments (line 1916)
    kwargs_277407 = {}
    # Getting the type of 'polyval' (line 1916)
    polyval_277401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 54), 'polyval', False)
    # Calling polyval(args, kwargs) (line 1916)
    polyval_call_result_277408 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 54), polyval_277401, *[an_277402, subscript_call_result_277406], **kwargs_277407)
    
    # Applying the binary operator 'div' (line 1916)
    result_div_277409 = python_operator(stypy.reporting.localization.Localization(__file__, 1916, 31), 'div', polyval_call_result_277400, polyval_call_result_277408)
    
    
    # Call to factorial(...): (line 1917)
    # Processing the call arguments (line 1917)
    # Getting the type of 'sig' (line 1917)
    sig_277411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 41), 'sig', False)
    # Getting the type of 'm' (line 1917)
    m_277412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 47), 'm', False)
    # Applying the binary operator '-' (line 1917)
    result_sub_277413 = python_operator(stypy.reporting.localization.Localization(__file__, 1917, 41), '-', sig_277411, m_277412)
    
    # Processing the call keyword arguments (line 1917)
    kwargs_277414 = {}
    # Getting the type of 'factorial' (line 1917)
    factorial_277410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 31), 'factorial', False)
    # Calling factorial(args, kwargs) (line 1917)
    factorial_call_result_277415 = invoke(stypy.reporting.localization.Localization(__file__, 1917, 31), factorial_277410, *[result_sub_277413], **kwargs_277414)
    
    # Applying the binary operator 'div' (line 1916)
    result_div_277416 = python_operator(stypy.reporting.localization.Localization(__file__, 1916, 75), 'div', result_div_277409, factorial_call_result_277415)
    
    # Getting the type of 'r' (line 1916)
    r_277417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 12), 'r')
    # Getting the type of 'indx' (line 1916)
    indx_277418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 14), 'indx')
    # Getting the type of 'm' (line 1916)
    m_277419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 21), 'm')
    # Applying the binary operator '+' (line 1916)
    result_add_277420 = python_operator(stypy.reporting.localization.Localization(__file__, 1916, 14), '+', indx_277418, m_277419)
    
    int_277421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 25), 'int')
    # Applying the binary operator '-' (line 1916)
    result_sub_277422 = python_operator(stypy.reporting.localization.Localization(__file__, 1916, 23), '-', result_add_277420, int_277421)
    
    # Storing an element on a container (line 1916)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1916, 12), r_277417, (result_sub_277422, result_div_277416))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'indx' (line 1918)
    indx_277423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 8), 'indx')
    # Getting the type of 'sig' (line 1918)
    sig_277424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 16), 'sig')
    # Applying the binary operator '+=' (line 1918)
    result_iadd_277425 = python_operator(stypy.reporting.localization.Localization(__file__, 1918, 8), '+=', indx_277423, sig_277424)
    # Assigning a type to the variable 'indx' (line 1918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1918, 8), 'indx', result_iadd_277425)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1919)
    tuple_277426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1919)
    # Adding element type (line 1919)
    # Getting the type of 'r' (line 1919)
    r_277427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 11), 'r')
    # Getting the type of 'rscale' (line 1919)
    rscale_277428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 15), 'rscale')
    # Applying the binary operator 'div' (line 1919)
    result_div_277429 = python_operator(stypy.reporting.localization.Localization(__file__, 1919, 11), 'div', r_277427, rscale_277428)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1919, 11), tuple_277426, result_div_277429)
    # Adding element type (line 1919)
    # Getting the type of 'p' (line 1919)
    p_277430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 23), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1919, 11), tuple_277426, p_277430)
    # Adding element type (line 1919)
    # Getting the type of 'k' (line 1919)
    k_277431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 26), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1919, 11), tuple_277426, k_277431)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1919, 4), 'stypy_return_type', tuple_277426)
    
    # ################# End of 'residue(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'residue' in the type store
    # Getting the type of 'stypy_return_type' (line 1837)
    stypy_return_type_277432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277432)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'residue'
    return stypy_return_type_277432

# Assigning a type to the variable 'residue' (line 1837)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1837, 0), 'residue', residue)

@norecursion
def residuez(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_277433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1922, 23), 'float')
    str_277434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1922, 35), 'str', 'avg')
    defaults = [float_277433, str_277434]
    # Create a new context for function 'residuez'
    module_type_store = module_type_store.open_function_context('residuez', 1922, 0, False)
    
    # Passed parameters checking function
    residuez.stypy_localization = localization
    residuez.stypy_type_of_self = None
    residuez.stypy_type_store = module_type_store
    residuez.stypy_function_name = 'residuez'
    residuez.stypy_param_names_list = ['b', 'a', 'tol', 'rtype']
    residuez.stypy_varargs_param_name = None
    residuez.stypy_kwargs_param_name = None
    residuez.stypy_call_defaults = defaults
    residuez.stypy_call_varargs = varargs
    residuez.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'residuez', ['b', 'a', 'tol', 'rtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'residuez', localization, ['b', 'a', 'tol', 'rtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'residuez(...)' code ##################

    str_277435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1969, (-1)), 'str', '\n    Compute partial-fraction expansion of b(z) / a(z).\n\n    If `M` is the degree of numerator `b` and `N` the degree of denominator\n    `a`::\n\n                b(z)     b[0] + b[1] z**(-1) + ... + b[M] z**(-M)\n        H(z) = ------ = ------------------------------------------\n                a(z)     a[0] + a[1] z**(-1) + ... + a[N] z**(-N)\n\n    then the partial-fraction expansion H(z) is defined as::\n\n                 r[0]                   r[-1]\n         = --------------- + ... + ---------------- + k[0] + k[1]z**(-1) ...\n           (1-p[0]z**(-1))         (1-p[-1]z**(-1))\n\n    If there are any repeated roots (closer than `tol`), then the partial\n    fraction expansion has terms like::\n\n             r[i]              r[i+1]                    r[i+n-1]\n        -------------- + ------------------ + ... + ------------------\n        (1-p[i]z**(-1))  (1-p[i]z**(-1))**2         (1-p[i]z**(-1))**n\n\n    This function is used for polynomials in negative powers of z,\n    such as digital filters in DSP.  For positive powers, use `residue`.\n\n    Parameters\n    ----------\n    b : array_like\n        Numerator polynomial coefficients.\n    a : array_like\n        Denominator polynomial coefficients.\n\n    Returns\n    -------\n    r : ndarray\n        Residues.\n    p : ndarray\n        Poles.\n    k : ndarray\n        Coefficients of the direct polynomial term.\n\n    See Also\n    --------\n    invresz, residue, unique_roots\n\n    ')
    
    # Assigning a Call to a Tuple (line 1970):
    
    # Assigning a Subscript to a Name (line 1970):
    
    # Obtaining the type of the subscript
    int_277436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1970, 4), 'int')
    
    # Call to map(...): (line 1970)
    # Processing the call arguments (line 1970)
    # Getting the type of 'asarray' (line 1970)
    asarray_277438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 15), 'asarray', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1970)
    tuple_277439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1970, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1970)
    # Adding element type (line 1970)
    # Getting the type of 'b' (line 1970)
    b_277440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 25), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1970, 25), tuple_277439, b_277440)
    # Adding element type (line 1970)
    # Getting the type of 'a' (line 1970)
    a_277441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1970, 25), tuple_277439, a_277441)
    
    # Processing the call keyword arguments (line 1970)
    kwargs_277442 = {}
    # Getting the type of 'map' (line 1970)
    map_277437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 11), 'map', False)
    # Calling map(args, kwargs) (line 1970)
    map_call_result_277443 = invoke(stypy.reporting.localization.Localization(__file__, 1970, 11), map_277437, *[asarray_277438, tuple_277439], **kwargs_277442)
    
    # Obtaining the member '__getitem__' of a type (line 1970)
    getitem___277444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1970, 4), map_call_result_277443, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1970)
    subscript_call_result_277445 = invoke(stypy.reporting.localization.Localization(__file__, 1970, 4), getitem___277444, int_277436)
    
    # Assigning a type to the variable 'tuple_var_assignment_274332' (line 1970)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 4), 'tuple_var_assignment_274332', subscript_call_result_277445)
    
    # Assigning a Subscript to a Name (line 1970):
    
    # Obtaining the type of the subscript
    int_277446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1970, 4), 'int')
    
    # Call to map(...): (line 1970)
    # Processing the call arguments (line 1970)
    # Getting the type of 'asarray' (line 1970)
    asarray_277448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 15), 'asarray', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1970)
    tuple_277449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1970, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1970)
    # Adding element type (line 1970)
    # Getting the type of 'b' (line 1970)
    b_277450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 25), 'b', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1970, 25), tuple_277449, b_277450)
    # Adding element type (line 1970)
    # Getting the type of 'a' (line 1970)
    a_277451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 28), 'a', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1970, 25), tuple_277449, a_277451)
    
    # Processing the call keyword arguments (line 1970)
    kwargs_277452 = {}
    # Getting the type of 'map' (line 1970)
    map_277447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 11), 'map', False)
    # Calling map(args, kwargs) (line 1970)
    map_call_result_277453 = invoke(stypy.reporting.localization.Localization(__file__, 1970, 11), map_277447, *[asarray_277448, tuple_277449], **kwargs_277452)
    
    # Obtaining the member '__getitem__' of a type (line 1970)
    getitem___277454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1970, 4), map_call_result_277453, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1970)
    subscript_call_result_277455 = invoke(stypy.reporting.localization.Localization(__file__, 1970, 4), getitem___277454, int_277446)
    
    # Assigning a type to the variable 'tuple_var_assignment_274333' (line 1970)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 4), 'tuple_var_assignment_274333', subscript_call_result_277455)
    
    # Assigning a Name to a Name (line 1970):
    # Getting the type of 'tuple_var_assignment_274332' (line 1970)
    tuple_var_assignment_274332_277456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 4), 'tuple_var_assignment_274332')
    # Assigning a type to the variable 'b' (line 1970)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 4), 'b', tuple_var_assignment_274332_277456)
    
    # Assigning a Name to a Name (line 1970):
    # Getting the type of 'tuple_var_assignment_274333' (line 1970)
    tuple_var_assignment_274333_277457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 4), 'tuple_var_assignment_274333')
    # Assigning a type to the variable 'a' (line 1970)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 7), 'a', tuple_var_assignment_274333_277457)
    
    # Assigning a Subscript to a Name (line 1971):
    
    # Assigning a Subscript to a Name (line 1971):
    
    # Obtaining the type of the subscript
    int_277458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1971, 13), 'int')
    # Getting the type of 'a' (line 1971)
    a_277459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 11), 'a')
    # Obtaining the member '__getitem__' of a type (line 1971)
    getitem___277460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1971, 11), a_277459, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1971)
    subscript_call_result_277461 = invoke(stypy.reporting.localization.Localization(__file__, 1971, 11), getitem___277460, int_277458)
    
    # Assigning a type to the variable 'gain' (line 1971)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1971, 4), 'gain', subscript_call_result_277461)
    
    # Assigning a Tuple to a Tuple (line 1972):
    
    # Assigning a Subscript to a Name (line 1972):
    
    # Obtaining the type of the subscript
    int_277462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 21), 'int')
    slice_277463 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1972, 17), None, None, int_277462)
    # Getting the type of 'b' (line 1972)
    b_277464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 17), 'b')
    # Obtaining the member '__getitem__' of a type (line 1972)
    getitem___277465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1972, 17), b_277464, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1972)
    subscript_call_result_277466 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 17), getitem___277465, slice_277463)
    
    # Assigning a type to the variable 'tuple_assignment_274334' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 4), 'tuple_assignment_274334', subscript_call_result_277466)
    
    # Assigning a Subscript to a Name (line 1972):
    
    # Obtaining the type of the subscript
    int_277467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 30), 'int')
    slice_277468 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1972, 26), None, None, int_277467)
    # Getting the type of 'a' (line 1972)
    a_277469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 26), 'a')
    # Obtaining the member '__getitem__' of a type (line 1972)
    getitem___277470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1972, 26), a_277469, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1972)
    subscript_call_result_277471 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 26), getitem___277470, slice_277468)
    
    # Assigning a type to the variable 'tuple_assignment_274335' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 4), 'tuple_assignment_274335', subscript_call_result_277471)
    
    # Assigning a Name to a Name (line 1972):
    # Getting the type of 'tuple_assignment_274334' (line 1972)
    tuple_assignment_274334_277472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 4), 'tuple_assignment_274334')
    # Assigning a type to the variable 'brev' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 4), 'brev', tuple_assignment_274334_277472)
    
    # Assigning a Name to a Name (line 1972):
    # Getting the type of 'tuple_assignment_274335' (line 1972)
    tuple_assignment_274335_277473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 4), 'tuple_assignment_274335')
    # Assigning a type to the variable 'arev' (line 1972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 10), 'arev', tuple_assignment_274335_277473)
    
    # Assigning a Call to a Tuple (line 1973):
    
    # Assigning a Subscript to a Name (line 1973):
    
    # Obtaining the type of the subscript
    int_277474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 4), 'int')
    
    # Call to polydiv(...): (line 1973)
    # Processing the call arguments (line 1973)
    # Getting the type of 'brev' (line 1973)
    brev_277476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 25), 'brev', False)
    # Getting the type of 'arev' (line 1973)
    arev_277477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 31), 'arev', False)
    # Processing the call keyword arguments (line 1973)
    kwargs_277478 = {}
    # Getting the type of 'polydiv' (line 1973)
    polydiv_277475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 17), 'polydiv', False)
    # Calling polydiv(args, kwargs) (line 1973)
    polydiv_call_result_277479 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 17), polydiv_277475, *[brev_277476, arev_277477], **kwargs_277478)
    
    # Obtaining the member '__getitem__' of a type (line 1973)
    getitem___277480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 4), polydiv_call_result_277479, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1973)
    subscript_call_result_277481 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 4), getitem___277480, int_277474)
    
    # Assigning a type to the variable 'tuple_var_assignment_274336' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'tuple_var_assignment_274336', subscript_call_result_277481)
    
    # Assigning a Subscript to a Name (line 1973):
    
    # Obtaining the type of the subscript
    int_277482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 4), 'int')
    
    # Call to polydiv(...): (line 1973)
    # Processing the call arguments (line 1973)
    # Getting the type of 'brev' (line 1973)
    brev_277484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 25), 'brev', False)
    # Getting the type of 'arev' (line 1973)
    arev_277485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 31), 'arev', False)
    # Processing the call keyword arguments (line 1973)
    kwargs_277486 = {}
    # Getting the type of 'polydiv' (line 1973)
    polydiv_277483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 17), 'polydiv', False)
    # Calling polydiv(args, kwargs) (line 1973)
    polydiv_call_result_277487 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 17), polydiv_277483, *[brev_277484, arev_277485], **kwargs_277486)
    
    # Obtaining the member '__getitem__' of a type (line 1973)
    getitem___277488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1973, 4), polydiv_call_result_277487, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1973)
    subscript_call_result_277489 = invoke(stypy.reporting.localization.Localization(__file__, 1973, 4), getitem___277488, int_277482)
    
    # Assigning a type to the variable 'tuple_var_assignment_274337' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'tuple_var_assignment_274337', subscript_call_result_277489)
    
    # Assigning a Name to a Name (line 1973):
    # Getting the type of 'tuple_var_assignment_274336' (line 1973)
    tuple_var_assignment_274336_277490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'tuple_var_assignment_274336')
    # Assigning a type to the variable 'krev' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'krev', tuple_var_assignment_274336_277490)
    
    # Assigning a Name to a Name (line 1973):
    # Getting the type of 'tuple_var_assignment_274337' (line 1973)
    tuple_var_assignment_274337_277491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 4), 'tuple_var_assignment_274337')
    # Assigning a type to the variable 'brev' (line 1973)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 10), 'brev', tuple_var_assignment_274337_277491)
    
    
    # Getting the type of 'krev' (line 1974)
    krev_277492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 7), 'krev')
    
    # Obtaining an instance of the builtin type 'list' (line 1974)
    list_277493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1974, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1974)
    
    # Applying the binary operator '==' (line 1974)
    result_eq_277494 = python_operator(stypy.reporting.localization.Localization(__file__, 1974, 7), '==', krev_277492, list_277493)
    
    # Testing the type of an if condition (line 1974)
    if_condition_277495 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1974, 4), result_eq_277494)
    # Assigning a type to the variable 'if_condition_277495' (line 1974)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1974, 4), 'if_condition_277495', if_condition_277495)
    # SSA begins for if statement (line 1974)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 1975):
    
    # Assigning a List to a Name (line 1975):
    
    # Obtaining an instance of the builtin type 'list' (line 1975)
    list_277496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1975)
    
    # Assigning a type to the variable 'k' (line 1975)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1975, 8), 'k', list_277496)
    # SSA branch for the else part of an if statement (line 1974)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 1977):
    
    # Assigning a Subscript to a Name (line 1977):
    
    # Obtaining the type of the subscript
    int_277497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1977, 19), 'int')
    slice_277498 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1977, 12), None, None, int_277497)
    # Getting the type of 'krev' (line 1977)
    krev_277499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 12), 'krev')
    # Obtaining the member '__getitem__' of a type (line 1977)
    getitem___277500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1977, 12), krev_277499, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1977)
    subscript_call_result_277501 = invoke(stypy.reporting.localization.Localization(__file__, 1977, 12), getitem___277500, slice_277498)
    
    # Assigning a type to the variable 'k' (line 1977)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1977, 8), 'k', subscript_call_result_277501)
    # SSA join for if statement (line 1974)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1978):
    
    # Assigning a Subscript to a Name (line 1978):
    
    # Obtaining the type of the subscript
    int_277502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 15), 'int')
    slice_277503 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1978, 8), None, None, int_277502)
    # Getting the type of 'brev' (line 1978)
    brev_277504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 8), 'brev')
    # Obtaining the member '__getitem__' of a type (line 1978)
    getitem___277505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1978, 8), brev_277504, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1978)
    subscript_call_result_277506 = invoke(stypy.reporting.localization.Localization(__file__, 1978, 8), getitem___277505, slice_277503)
    
    # Assigning a type to the variable 'b' (line 1978)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 4), 'b', subscript_call_result_277506)
    
    # Assigning a Call to a Name (line 1979):
    
    # Assigning a Call to a Name (line 1979):
    
    # Call to roots(...): (line 1979)
    # Processing the call arguments (line 1979)
    # Getting the type of 'a' (line 1979)
    a_277508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 14), 'a', False)
    # Processing the call keyword arguments (line 1979)
    kwargs_277509 = {}
    # Getting the type of 'roots' (line 1979)
    roots_277507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 8), 'roots', False)
    # Calling roots(args, kwargs) (line 1979)
    roots_call_result_277510 = invoke(stypy.reporting.localization.Localization(__file__, 1979, 8), roots_277507, *[a_277508], **kwargs_277509)
    
    # Assigning a type to the variable 'p' (line 1979)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 4), 'p', roots_call_result_277510)
    
    # Assigning a BinOp to a Name (line 1980):
    
    # Assigning a BinOp to a Name (line 1980):
    # Getting the type of 'p' (line 1980)
    p_277511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 8), 'p')
    float_277512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 12), 'float')
    # Applying the binary operator '*' (line 1980)
    result_mul_277513 = python_operator(stypy.reporting.localization.Localization(__file__, 1980, 8), '*', p_277511, float_277512)
    
    # Assigning a type to the variable 'r' (line 1980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 4), 'r', result_mul_277513)
    
    # Assigning a Call to a Tuple (line 1981):
    
    # Assigning a Subscript to a Name (line 1981):
    
    # Obtaining the type of the subscript
    int_277514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, 4), 'int')
    
    # Call to unique_roots(...): (line 1981)
    # Processing the call arguments (line 1981)
    # Getting the type of 'p' (line 1981)
    p_277516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 30), 'p', False)
    # Processing the call keyword arguments (line 1981)
    # Getting the type of 'tol' (line 1981)
    tol_277517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 37), 'tol', False)
    keyword_277518 = tol_277517
    # Getting the type of 'rtype' (line 1981)
    rtype_277519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 48), 'rtype', False)
    keyword_277520 = rtype_277519
    kwargs_277521 = {'tol': keyword_277518, 'rtype': keyword_277520}
    # Getting the type of 'unique_roots' (line 1981)
    unique_roots_277515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 17), 'unique_roots', False)
    # Calling unique_roots(args, kwargs) (line 1981)
    unique_roots_call_result_277522 = invoke(stypy.reporting.localization.Localization(__file__, 1981, 17), unique_roots_277515, *[p_277516], **kwargs_277521)
    
    # Obtaining the member '__getitem__' of a type (line 1981)
    getitem___277523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1981, 4), unique_roots_call_result_277522, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1981)
    subscript_call_result_277524 = invoke(stypy.reporting.localization.Localization(__file__, 1981, 4), getitem___277523, int_277514)
    
    # Assigning a type to the variable 'tuple_var_assignment_274338' (line 1981)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 4), 'tuple_var_assignment_274338', subscript_call_result_277524)
    
    # Assigning a Subscript to a Name (line 1981):
    
    # Obtaining the type of the subscript
    int_277525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, 4), 'int')
    
    # Call to unique_roots(...): (line 1981)
    # Processing the call arguments (line 1981)
    # Getting the type of 'p' (line 1981)
    p_277527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 30), 'p', False)
    # Processing the call keyword arguments (line 1981)
    # Getting the type of 'tol' (line 1981)
    tol_277528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 37), 'tol', False)
    keyword_277529 = tol_277528
    # Getting the type of 'rtype' (line 1981)
    rtype_277530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 48), 'rtype', False)
    keyword_277531 = rtype_277530
    kwargs_277532 = {'tol': keyword_277529, 'rtype': keyword_277531}
    # Getting the type of 'unique_roots' (line 1981)
    unique_roots_277526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 17), 'unique_roots', False)
    # Calling unique_roots(args, kwargs) (line 1981)
    unique_roots_call_result_277533 = invoke(stypy.reporting.localization.Localization(__file__, 1981, 17), unique_roots_277526, *[p_277527], **kwargs_277532)
    
    # Obtaining the member '__getitem__' of a type (line 1981)
    getitem___277534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1981, 4), unique_roots_call_result_277533, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1981)
    subscript_call_result_277535 = invoke(stypy.reporting.localization.Localization(__file__, 1981, 4), getitem___277534, int_277525)
    
    # Assigning a type to the variable 'tuple_var_assignment_274339' (line 1981)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 4), 'tuple_var_assignment_274339', subscript_call_result_277535)
    
    # Assigning a Name to a Name (line 1981):
    # Getting the type of 'tuple_var_assignment_274338' (line 1981)
    tuple_var_assignment_274338_277536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 4), 'tuple_var_assignment_274338')
    # Assigning a type to the variable 'pout' (line 1981)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 4), 'pout', tuple_var_assignment_274338_277536)
    
    # Assigning a Name to a Name (line 1981):
    # Getting the type of 'tuple_var_assignment_274339' (line 1981)
    tuple_var_assignment_274339_277537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 4), 'tuple_var_assignment_274339')
    # Assigning a type to the variable 'mult' (line 1981)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 10), 'mult', tuple_var_assignment_274339_277537)
    
    # Assigning a List to a Name (line 1982):
    
    # Assigning a List to a Name (line 1982):
    
    # Obtaining an instance of the builtin type 'list' (line 1982)
    list_277538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1982, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1982)
    
    # Assigning a type to the variable 'p' (line 1982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1982, 4), 'p', list_277538)
    
    
    # Call to range(...): (line 1983)
    # Processing the call arguments (line 1983)
    
    # Call to len(...): (line 1983)
    # Processing the call arguments (line 1983)
    # Getting the type of 'pout' (line 1983)
    pout_277541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 23), 'pout', False)
    # Processing the call keyword arguments (line 1983)
    kwargs_277542 = {}
    # Getting the type of 'len' (line 1983)
    len_277540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 19), 'len', False)
    # Calling len(args, kwargs) (line 1983)
    len_call_result_277543 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 19), len_277540, *[pout_277541], **kwargs_277542)
    
    # Processing the call keyword arguments (line 1983)
    kwargs_277544 = {}
    # Getting the type of 'range' (line 1983)
    range_277539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 13), 'range', False)
    # Calling range(args, kwargs) (line 1983)
    range_call_result_277545 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 13), range_277539, *[len_call_result_277543], **kwargs_277544)
    
    # Testing the type of a for loop iterable (line 1983)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1983, 4), range_call_result_277545)
    # Getting the type of the for loop variable (line 1983)
    for_loop_var_277546 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1983, 4), range_call_result_277545)
    # Assigning a type to the variable 'n' (line 1983)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 4), 'n', for_loop_var_277546)
    # SSA begins for a for statement (line 1983)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to extend(...): (line 1984)
    # Processing the call arguments (line 1984)
    
    # Obtaining an instance of the builtin type 'list' (line 1984)
    list_277549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1984, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1984)
    # Adding element type (line 1984)
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1984)
    n_277550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 23), 'n', False)
    # Getting the type of 'pout' (line 1984)
    pout_277551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 18), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 1984)
    getitem___277552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1984, 18), pout_277551, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1984)
    subscript_call_result_277553 = invoke(stypy.reporting.localization.Localization(__file__, 1984, 18), getitem___277552, n_277550)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1984, 17), list_277549, subscript_call_result_277553)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 1984)
    n_277554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 34), 'n', False)
    # Getting the type of 'mult' (line 1984)
    mult_277555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 29), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 1984)
    getitem___277556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1984, 29), mult_277555, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1984)
    subscript_call_result_277557 = invoke(stypy.reporting.localization.Localization(__file__, 1984, 29), getitem___277556, n_277554)
    
    # Applying the binary operator '*' (line 1984)
    result_mul_277558 = python_operator(stypy.reporting.localization.Localization(__file__, 1984, 17), '*', list_277549, subscript_call_result_277557)
    
    # Processing the call keyword arguments (line 1984)
    kwargs_277559 = {}
    # Getting the type of 'p' (line 1984)
    p_277547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 8), 'p', False)
    # Obtaining the member 'extend' of a type (line 1984)
    extend_277548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1984, 8), p_277547, 'extend')
    # Calling extend(args, kwargs) (line 1984)
    extend_call_result_277560 = invoke(stypy.reporting.localization.Localization(__file__, 1984, 8), extend_277548, *[result_mul_277558], **kwargs_277559)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1985):
    
    # Assigning a Call to a Name (line 1985):
    
    # Call to asarray(...): (line 1985)
    # Processing the call arguments (line 1985)
    # Getting the type of 'p' (line 1985)
    p_277562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 16), 'p', False)
    # Processing the call keyword arguments (line 1985)
    kwargs_277563 = {}
    # Getting the type of 'asarray' (line 1985)
    asarray_277561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1985)
    asarray_call_result_277564 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 8), asarray_277561, *[p_277562], **kwargs_277563)
    
    # Assigning a type to the variable 'p' (line 1985)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 4), 'p', asarray_call_result_277564)
    
    # Assigning a Num to a Name (line 1990):
    
    # Assigning a Num to a Name (line 1990):
    int_277565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1990, 11), 'int')
    # Assigning a type to the variable 'indx' (line 1990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1990, 4), 'indx', int_277565)
    
    
    # Call to range(...): (line 1991)
    # Processing the call arguments (line 1991)
    
    # Call to len(...): (line 1991)
    # Processing the call arguments (line 1991)
    # Getting the type of 'pout' (line 1991)
    pout_277568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 23), 'pout', False)
    # Processing the call keyword arguments (line 1991)
    kwargs_277569 = {}
    # Getting the type of 'len' (line 1991)
    len_277567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 19), 'len', False)
    # Calling len(args, kwargs) (line 1991)
    len_call_result_277570 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 19), len_277567, *[pout_277568], **kwargs_277569)
    
    # Processing the call keyword arguments (line 1991)
    kwargs_277571 = {}
    # Getting the type of 'range' (line 1991)
    range_277566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 13), 'range', False)
    # Calling range(args, kwargs) (line 1991)
    range_call_result_277572 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 13), range_277566, *[len_call_result_277570], **kwargs_277571)
    
    # Testing the type of a for loop iterable (line 1991)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1991, 4), range_call_result_277572)
    # Getting the type of the for loop variable (line 1991)
    for_loop_var_277573 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1991, 4), range_call_result_277572)
    # Assigning a type to the variable 'n' (line 1991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 4), 'n', for_loop_var_277573)
    # SSA begins for a for statement (line 1991)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1992):
    
    # Assigning a Call to a Name (line 1992):
    
    # Call to copy(...): (line 1992)
    # Processing the call keyword arguments (line 1992)
    kwargs_277576 = {}
    # Getting the type of 'brev' (line 1992)
    brev_277574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 13), 'brev', False)
    # Obtaining the member 'copy' of a type (line 1992)
    copy_277575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 13), brev_277574, 'copy')
    # Calling copy(args, kwargs) (line 1992)
    copy_call_result_277577 = invoke(stypy.reporting.localization.Localization(__file__, 1992, 13), copy_277575, *[], **kwargs_277576)
    
    # Assigning a type to the variable 'bn' (line 1992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1992, 8), 'bn', copy_call_result_277577)
    
    # Assigning a List to a Name (line 1993):
    
    # Assigning a List to a Name (line 1993):
    
    # Obtaining an instance of the builtin type 'list' (line 1993)
    list_277578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1993, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1993)
    
    # Assigning a type to the variable 'pn' (line 1993)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1993, 8), 'pn', list_277578)
    
    
    # Call to range(...): (line 1994)
    # Processing the call arguments (line 1994)
    
    # Call to len(...): (line 1994)
    # Processing the call arguments (line 1994)
    # Getting the type of 'pout' (line 1994)
    pout_277581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 27), 'pout', False)
    # Processing the call keyword arguments (line 1994)
    kwargs_277582 = {}
    # Getting the type of 'len' (line 1994)
    len_277580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 23), 'len', False)
    # Calling len(args, kwargs) (line 1994)
    len_call_result_277583 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 23), len_277580, *[pout_277581], **kwargs_277582)
    
    # Processing the call keyword arguments (line 1994)
    kwargs_277584 = {}
    # Getting the type of 'range' (line 1994)
    range_277579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 17), 'range', False)
    # Calling range(args, kwargs) (line 1994)
    range_call_result_277585 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 17), range_277579, *[len_call_result_277583], **kwargs_277584)
    
    # Testing the type of a for loop iterable (line 1994)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1994, 8), range_call_result_277585)
    # Getting the type of the for loop variable (line 1994)
    for_loop_var_277586 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1994, 8), range_call_result_277585)
    # Assigning a type to the variable 'l' (line 1994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 8), 'l', for_loop_var_277586)
    # SSA begins for a for statement (line 1994)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'l' (line 1995)
    l_277587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 15), 'l')
    # Getting the type of 'n' (line 1995)
    n_277588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 20), 'n')
    # Applying the binary operator '!=' (line 1995)
    result_ne_277589 = python_operator(stypy.reporting.localization.Localization(__file__, 1995, 15), '!=', l_277587, n_277588)
    
    # Testing the type of an if condition (line 1995)
    if_condition_277590 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1995, 12), result_ne_277589)
    # Assigning a type to the variable 'if_condition_277590' (line 1995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1995, 12), 'if_condition_277590', if_condition_277590)
    # SSA begins for if statement (line 1995)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 1996)
    # Processing the call arguments (line 1996)
    
    # Obtaining an instance of the builtin type 'list' (line 1996)
    list_277593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 26), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1996)
    # Adding element type (line 1996)
    
    # Obtaining the type of the subscript
    # Getting the type of 'l' (line 1996)
    l_277594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 32), 'l', False)
    # Getting the type of 'pout' (line 1996)
    pout_277595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 27), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 1996)
    getitem___277596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1996, 27), pout_277595, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1996)
    subscript_call_result_277597 = invoke(stypy.reporting.localization.Localization(__file__, 1996, 27), getitem___277596, l_277594)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1996, 26), list_277593, subscript_call_result_277597)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'l' (line 1996)
    l_277598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 43), 'l', False)
    # Getting the type of 'mult' (line 1996)
    mult_277599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 38), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 1996)
    getitem___277600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1996, 38), mult_277599, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1996)
    subscript_call_result_277601 = invoke(stypy.reporting.localization.Localization(__file__, 1996, 38), getitem___277600, l_277598)
    
    # Applying the binary operator '*' (line 1996)
    result_mul_277602 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 26), '*', list_277593, subscript_call_result_277601)
    
    # Processing the call keyword arguments (line 1996)
    kwargs_277603 = {}
    # Getting the type of 'pn' (line 1996)
    pn_277591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 16), 'pn', False)
    # Obtaining the member 'extend' of a type (line 1996)
    extend_277592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1996, 16), pn_277591, 'extend')
    # Calling extend(args, kwargs) (line 1996)
    extend_call_result_277604 = invoke(stypy.reporting.localization.Localization(__file__, 1996, 16), extend_277592, *[result_mul_277602], **kwargs_277603)
    
    # SSA join for if statement (line 1995)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1997):
    
    # Assigning a Subscript to a Name (line 1997):
    
    # Obtaining the type of the subscript
    int_277605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1997, 36), 'int')
    slice_277606 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1997, 13), None, None, int_277605)
    
    # Call to atleast_1d(...): (line 1997)
    # Processing the call arguments (line 1997)
    
    # Call to poly(...): (line 1997)
    # Processing the call arguments (line 1997)
    # Getting the type of 'pn' (line 1997)
    pn_277609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 29), 'pn', False)
    # Processing the call keyword arguments (line 1997)
    kwargs_277610 = {}
    # Getting the type of 'poly' (line 1997)
    poly_277608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 24), 'poly', False)
    # Calling poly(args, kwargs) (line 1997)
    poly_call_result_277611 = invoke(stypy.reporting.localization.Localization(__file__, 1997, 24), poly_277608, *[pn_277609], **kwargs_277610)
    
    # Processing the call keyword arguments (line 1997)
    kwargs_277612 = {}
    # Getting the type of 'atleast_1d' (line 1997)
    atleast_1d_277607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 13), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 1997)
    atleast_1d_call_result_277613 = invoke(stypy.reporting.localization.Localization(__file__, 1997, 13), atleast_1d_277607, *[poly_call_result_277611], **kwargs_277612)
    
    # Obtaining the member '__getitem__' of a type (line 1997)
    getitem___277614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1997, 13), atleast_1d_call_result_277613, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1997)
    subscript_call_result_277615 = invoke(stypy.reporting.localization.Localization(__file__, 1997, 13), getitem___277614, slice_277606)
    
    # Assigning a type to the variable 'an' (line 1997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1997, 8), 'an', subscript_call_result_277615)
    
    # Assigning a Subscript to a Name (line 2000):
    
    # Assigning a Subscript to a Name (line 2000):
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 2000)
    n_277616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 19), 'n')
    # Getting the type of 'mult' (line 2000)
    mult_277617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 14), 'mult')
    # Obtaining the member '__getitem__' of a type (line 2000)
    getitem___277618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2000, 14), mult_277617, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2000)
    subscript_call_result_277619 = invoke(stypy.reporting.localization.Localization(__file__, 2000, 14), getitem___277618, n_277616)
    
    # Assigning a type to the variable 'sig' (line 2000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2000, 8), 'sig', subscript_call_result_277619)
    
    
    # Call to range(...): (line 2001)
    # Processing the call arguments (line 2001)
    # Getting the type of 'sig' (line 2001)
    sig_277621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 23), 'sig', False)
    int_277622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2001, 28), 'int')
    int_277623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2001, 31), 'int')
    # Processing the call keyword arguments (line 2001)
    kwargs_277624 = {}
    # Getting the type of 'range' (line 2001)
    range_277620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2001, 17), 'range', False)
    # Calling range(args, kwargs) (line 2001)
    range_call_result_277625 = invoke(stypy.reporting.localization.Localization(__file__, 2001, 17), range_277620, *[sig_277621, int_277622, int_277623], **kwargs_277624)
    
    # Testing the type of a for loop iterable (line 2001)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2001, 8), range_call_result_277625)
    # Getting the type of the for loop variable (line 2001)
    for_loop_var_277626 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2001, 8), range_call_result_277625)
    # Assigning a type to the variable 'm' (line 2001)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2001, 8), 'm', for_loop_var_277626)
    # SSA begins for a for statement (line 2001)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'sig' (line 2002)
    sig_277627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 15), 'sig')
    # Getting the type of 'm' (line 2002)
    m_277628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 21), 'm')
    # Applying the binary operator '>' (line 2002)
    result_gt_277629 = python_operator(stypy.reporting.localization.Localization(__file__, 2002, 15), '>', sig_277627, m_277628)
    
    # Testing the type of an if condition (line 2002)
    if_condition_277630 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2002, 12), result_gt_277629)
    # Assigning a type to the variable 'if_condition_277630' (line 2002)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2002, 12), 'if_condition_277630', if_condition_277630)
    # SSA begins for if statement (line 2002)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2004):
    
    # Assigning a Call to a Name (line 2004):
    
    # Call to polymul(...): (line 2004)
    # Processing the call arguments (line 2004)
    
    # Call to polyder(...): (line 2004)
    # Processing the call arguments (line 2004)
    # Getting the type of 'bn' (line 2004)
    bn_277633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 40), 'bn', False)
    int_277634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2004, 44), 'int')
    # Processing the call keyword arguments (line 2004)
    kwargs_277635 = {}
    # Getting the type of 'polyder' (line 2004)
    polyder_277632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 32), 'polyder', False)
    # Calling polyder(args, kwargs) (line 2004)
    polyder_call_result_277636 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 32), polyder_277632, *[bn_277633, int_277634], **kwargs_277635)
    
    # Getting the type of 'an' (line 2004)
    an_277637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 48), 'an', False)
    # Processing the call keyword arguments (line 2004)
    kwargs_277638 = {}
    # Getting the type of 'polymul' (line 2004)
    polymul_277631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 24), 'polymul', False)
    # Calling polymul(args, kwargs) (line 2004)
    polymul_call_result_277639 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 24), polymul_277631, *[polyder_call_result_277636, an_277637], **kwargs_277638)
    
    # Assigning a type to the variable 'term1' (line 2004)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2004, 16), 'term1', polymul_call_result_277639)
    
    # Assigning a Call to a Name (line 2005):
    
    # Assigning a Call to a Name (line 2005):
    
    # Call to polymul(...): (line 2005)
    # Processing the call arguments (line 2005)
    # Getting the type of 'bn' (line 2005)
    bn_277641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 32), 'bn', False)
    
    # Call to polyder(...): (line 2005)
    # Processing the call arguments (line 2005)
    # Getting the type of 'an' (line 2005)
    an_277643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 44), 'an', False)
    int_277644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2005, 48), 'int')
    # Processing the call keyword arguments (line 2005)
    kwargs_277645 = {}
    # Getting the type of 'polyder' (line 2005)
    polyder_277642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 36), 'polyder', False)
    # Calling polyder(args, kwargs) (line 2005)
    polyder_call_result_277646 = invoke(stypy.reporting.localization.Localization(__file__, 2005, 36), polyder_277642, *[an_277643, int_277644], **kwargs_277645)
    
    # Processing the call keyword arguments (line 2005)
    kwargs_277647 = {}
    # Getting the type of 'polymul' (line 2005)
    polymul_277640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 24), 'polymul', False)
    # Calling polymul(args, kwargs) (line 2005)
    polymul_call_result_277648 = invoke(stypy.reporting.localization.Localization(__file__, 2005, 24), polymul_277640, *[bn_277641, polyder_call_result_277646], **kwargs_277647)
    
    # Assigning a type to the variable 'term2' (line 2005)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2005, 16), 'term2', polymul_call_result_277648)
    
    # Assigning a Call to a Name (line 2006):
    
    # Assigning a Call to a Name (line 2006):
    
    # Call to polysub(...): (line 2006)
    # Processing the call arguments (line 2006)
    # Getting the type of 'term1' (line 2006)
    term1_277650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 29), 'term1', False)
    # Getting the type of 'term2' (line 2006)
    term2_277651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 36), 'term2', False)
    # Processing the call keyword arguments (line 2006)
    kwargs_277652 = {}
    # Getting the type of 'polysub' (line 2006)
    polysub_277649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 21), 'polysub', False)
    # Calling polysub(args, kwargs) (line 2006)
    polysub_call_result_277653 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 21), polysub_277649, *[term1_277650, term2_277651], **kwargs_277652)
    
    # Assigning a type to the variable 'bn' (line 2006)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2006, 16), 'bn', polysub_call_result_277653)
    
    # Assigning a Call to a Name (line 2007):
    
    # Assigning a Call to a Name (line 2007):
    
    # Call to polymul(...): (line 2007)
    # Processing the call arguments (line 2007)
    # Getting the type of 'an' (line 2007)
    an_277655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 29), 'an', False)
    # Getting the type of 'an' (line 2007)
    an_277656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 33), 'an', False)
    # Processing the call keyword arguments (line 2007)
    kwargs_277657 = {}
    # Getting the type of 'polymul' (line 2007)
    polymul_277654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 21), 'polymul', False)
    # Calling polymul(args, kwargs) (line 2007)
    polymul_call_result_277658 = invoke(stypy.reporting.localization.Localization(__file__, 2007, 21), polymul_277654, *[an_277655, an_277656], **kwargs_277657)
    
    # Assigning a type to the variable 'an' (line 2007)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2007, 16), 'an', polymul_call_result_277658)
    # SSA join for if statement (line 2002)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Subscript (line 2008):
    
    # Assigning a BinOp to a Subscript (line 2008):
    
    # Call to polyval(...): (line 2008)
    # Processing the call arguments (line 2008)
    # Getting the type of 'bn' (line 2008)
    bn_277660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 39), 'bn', False)
    float_277661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2008, 43), 'float')
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 2008)
    n_277662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 54), 'n', False)
    # Getting the type of 'pout' (line 2008)
    pout_277663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 49), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 2008)
    getitem___277664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2008, 49), pout_277663, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2008)
    subscript_call_result_277665 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 49), getitem___277664, n_277662)
    
    # Applying the binary operator 'div' (line 2008)
    result_div_277666 = python_operator(stypy.reporting.localization.Localization(__file__, 2008, 43), 'div', float_277661, subscript_call_result_277665)
    
    # Processing the call keyword arguments (line 2008)
    kwargs_277667 = {}
    # Getting the type of 'polyval' (line 2008)
    polyval_277659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 31), 'polyval', False)
    # Calling polyval(args, kwargs) (line 2008)
    polyval_call_result_277668 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 31), polyval_277659, *[bn_277660, result_div_277666], **kwargs_277667)
    
    
    # Call to polyval(...): (line 2009)
    # Processing the call arguments (line 2009)
    # Getting the type of 'an' (line 2009)
    an_277670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 39), 'an', False)
    float_277671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2009, 43), 'float')
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 2009)
    n_277672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 54), 'n', False)
    # Getting the type of 'pout' (line 2009)
    pout_277673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 49), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 2009)
    getitem___277674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 49), pout_277673, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2009)
    subscript_call_result_277675 = invoke(stypy.reporting.localization.Localization(__file__, 2009, 49), getitem___277674, n_277672)
    
    # Applying the binary operator 'div' (line 2009)
    result_div_277676 = python_operator(stypy.reporting.localization.Localization(__file__, 2009, 43), 'div', float_277671, subscript_call_result_277675)
    
    # Processing the call keyword arguments (line 2009)
    kwargs_277677 = {}
    # Getting the type of 'polyval' (line 2009)
    polyval_277669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 31), 'polyval', False)
    # Calling polyval(args, kwargs) (line 2009)
    polyval_call_result_277678 = invoke(stypy.reporting.localization.Localization(__file__, 2009, 31), polyval_277669, *[an_277670, result_div_277676], **kwargs_277677)
    
    # Applying the binary operator 'div' (line 2008)
    result_div_277679 = python_operator(stypy.reporting.localization.Localization(__file__, 2008, 31), 'div', polyval_call_result_277668, polyval_call_result_277678)
    
    
    # Call to factorial(...): (line 2010)
    # Processing the call arguments (line 2010)
    # Getting the type of 'sig' (line 2010)
    sig_277681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 41), 'sig', False)
    # Getting the type of 'm' (line 2010)
    m_277682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 47), 'm', False)
    # Applying the binary operator '-' (line 2010)
    result_sub_277683 = python_operator(stypy.reporting.localization.Localization(__file__, 2010, 41), '-', sig_277681, m_277682)
    
    # Processing the call keyword arguments (line 2010)
    kwargs_277684 = {}
    # Getting the type of 'factorial' (line 2010)
    factorial_277680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 31), 'factorial', False)
    # Calling factorial(args, kwargs) (line 2010)
    factorial_call_result_277685 = invoke(stypy.reporting.localization.Localization(__file__, 2010, 31), factorial_277680, *[result_sub_277683], **kwargs_277684)
    
    # Applying the binary operator 'div' (line 2009)
    result_div_277686 = python_operator(stypy.reporting.localization.Localization(__file__, 2009, 58), 'div', result_div_277679, factorial_call_result_277685)
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'n' (line 2010)
    n_277687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 59), 'n')
    # Getting the type of 'pout' (line 2010)
    pout_277688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 54), 'pout')
    # Obtaining the member '__getitem__' of a type (line 2010)
    getitem___277689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 54), pout_277688, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2010)
    subscript_call_result_277690 = invoke(stypy.reporting.localization.Localization(__file__, 2010, 54), getitem___277689, n_277687)
    
    # Applying the 'usub' unary operator (line 2010)
    result___neg___277691 = python_operator(stypy.reporting.localization.Localization(__file__, 2010, 53), 'usub', subscript_call_result_277690)
    
    # Getting the type of 'sig' (line 2010)
    sig_277692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 67), 'sig')
    # Getting the type of 'm' (line 2010)
    m_277693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 73), 'm')
    # Applying the binary operator '-' (line 2010)
    result_sub_277694 = python_operator(stypy.reporting.localization.Localization(__file__, 2010, 67), '-', sig_277692, m_277693)
    
    # Applying the binary operator '**' (line 2010)
    result_pow_277695 = python_operator(stypy.reporting.localization.Localization(__file__, 2010, 52), '**', result___neg___277691, result_sub_277694)
    
    # Applying the binary operator 'div' (line 2010)
    result_div_277696 = python_operator(stypy.reporting.localization.Localization(__file__, 2010, 50), 'div', result_div_277686, result_pow_277695)
    
    # Getting the type of 'r' (line 2008)
    r_277697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 12), 'r')
    # Getting the type of 'indx' (line 2008)
    indx_277698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 14), 'indx')
    # Getting the type of 'm' (line 2008)
    m_277699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 21), 'm')
    # Applying the binary operator '+' (line 2008)
    result_add_277700 = python_operator(stypy.reporting.localization.Localization(__file__, 2008, 14), '+', indx_277698, m_277699)
    
    int_277701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2008, 25), 'int')
    # Applying the binary operator '-' (line 2008)
    result_sub_277702 = python_operator(stypy.reporting.localization.Localization(__file__, 2008, 23), '-', result_add_277700, int_277701)
    
    # Storing an element on a container (line 2008)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2008, 12), r_277697, (result_sub_277702, result_div_277696))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'indx' (line 2011)
    indx_277703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 8), 'indx')
    # Getting the type of 'sig' (line 2011)
    sig_277704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 16), 'sig')
    # Applying the binary operator '+=' (line 2011)
    result_iadd_277705 = python_operator(stypy.reporting.localization.Localization(__file__, 2011, 8), '+=', indx_277703, sig_277704)
    # Assigning a type to the variable 'indx' (line 2011)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2011, 8), 'indx', result_iadd_277705)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2012)
    tuple_277706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2012, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2012)
    # Adding element type (line 2012)
    # Getting the type of 'r' (line 2012)
    r_277707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 11), 'r')
    # Getting the type of 'gain' (line 2012)
    gain_277708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 15), 'gain')
    # Applying the binary operator 'div' (line 2012)
    result_div_277709 = python_operator(stypy.reporting.localization.Localization(__file__, 2012, 11), 'div', r_277707, gain_277708)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2012, 11), tuple_277706, result_div_277709)
    # Adding element type (line 2012)
    # Getting the type of 'p' (line 2012)
    p_277710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 21), 'p')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2012, 11), tuple_277706, p_277710)
    # Adding element type (line 2012)
    # Getting the type of 'k' (line 2012)
    k_277711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 24), 'k')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2012, 11), tuple_277706, k_277711)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2012, 4), 'stypy_return_type', tuple_277706)
    
    # ################# End of 'residuez(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'residuez' in the type store
    # Getting the type of 'stypy_return_type' (line 1922)
    stypy_return_type_277712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277712)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'residuez'
    return stypy_return_type_277712

# Assigning a type to the variable 'residuez' (line 1922)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1922, 0), 'residuez', residuez)

@norecursion
def invresz(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_277713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, 25), 'float')
    str_277714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, 37), 'str', 'avg')
    defaults = [float_277713, str_277714]
    # Create a new context for function 'invresz'
    module_type_store = module_type_store.open_function_context('invresz', 2015, 0, False)
    
    # Passed parameters checking function
    invresz.stypy_localization = localization
    invresz.stypy_type_of_self = None
    invresz.stypy_type_store = module_type_store
    invresz.stypy_function_name = 'invresz'
    invresz.stypy_param_names_list = ['r', 'p', 'k', 'tol', 'rtype']
    invresz.stypy_varargs_param_name = None
    invresz.stypy_kwargs_param_name = None
    invresz.stypy_call_defaults = defaults
    invresz.stypy_call_varargs = varargs
    invresz.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'invresz', ['r', 'p', 'k', 'tol', 'rtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'invresz', localization, ['r', 'p', 'k', 'tol', 'rtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'invresz(...)' code ##################

    str_277715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2071, (-1)), 'str', "\n    Compute b(z) and a(z) from partial fraction expansion.\n\n    If `M` is the degree of numerator `b` and `N` the degree of denominator\n    `a`::\n\n                b(z)     b[0] + b[1] z**(-1) + ... + b[M] z**(-M)\n        H(z) = ------ = ------------------------------------------\n                a(z)     a[0] + a[1] z**(-1) + ... + a[N] z**(-N)\n\n    then the partial-fraction expansion H(z) is defined as::\n\n                 r[0]                   r[-1]\n         = --------------- + ... + ---------------- + k[0] + k[1]z**(-1) ...\n           (1-p[0]z**(-1))         (1-p[-1]z**(-1))\n\n    If there are any repeated roots (closer than `tol`), then the partial\n    fraction expansion has terms like::\n\n             r[i]              r[i+1]                    r[i+n-1]\n        -------------- + ------------------ + ... + ------------------\n        (1-p[i]z**(-1))  (1-p[i]z**(-1))**2         (1-p[i]z**(-1))**n\n\n    This function is used for polynomials in negative powers of z,\n    such as digital filters in DSP.  For positive powers, use `invres`.\n\n    Parameters\n    ----------\n    r : array_like\n        Residues.\n    p : array_like\n        Poles.\n    k : array_like\n        Coefficients of the direct polynomial term.\n    tol : float, optional\n        The tolerance for two roots to be considered equal. Default is 1e-3.\n    rtype : {'max', 'min, 'avg'}, optional\n        How to determine the returned root if multiple roots are within\n        `tol` of each other.\n\n          - 'max': pick the maximum of those roots.\n          - 'min': pick the minimum of those roots.\n          - 'avg': take the average of those roots.\n\n    Returns\n    -------\n    b : ndarray\n        Numerator polynomial coefficients.\n    a : ndarray\n        Denominator polynomial coefficients.\n\n    See Also\n    --------\n    residuez, unique_roots, invres\n\n    ")
    
    # Assigning a Call to a Name (line 2072):
    
    # Assigning a Call to a Name (line 2072):
    
    # Call to asarray(...): (line 2072)
    # Processing the call arguments (line 2072)
    # Getting the type of 'k' (line 2072)
    k_277717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 20), 'k', False)
    # Processing the call keyword arguments (line 2072)
    kwargs_277718 = {}
    # Getting the type of 'asarray' (line 2072)
    asarray_277716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 12), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2072)
    asarray_call_result_277719 = invoke(stypy.reporting.localization.Localization(__file__, 2072, 12), asarray_277716, *[k_277717], **kwargs_277718)
    
    # Assigning a type to the variable 'extra' (line 2072)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2072, 4), 'extra', asarray_call_result_277719)
    
    # Assigning a Call to a Tuple (line 2073):
    
    # Assigning a Subscript to a Name (line 2073):
    
    # Obtaining the type of the subscript
    int_277720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2073, 4), 'int')
    
    # Call to cmplx_sort(...): (line 2073)
    # Processing the call arguments (line 2073)
    # Getting the type of 'p' (line 2073)
    p_277722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 25), 'p', False)
    # Processing the call keyword arguments (line 2073)
    kwargs_277723 = {}
    # Getting the type of 'cmplx_sort' (line 2073)
    cmplx_sort_277721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 14), 'cmplx_sort', False)
    # Calling cmplx_sort(args, kwargs) (line 2073)
    cmplx_sort_call_result_277724 = invoke(stypy.reporting.localization.Localization(__file__, 2073, 14), cmplx_sort_277721, *[p_277722], **kwargs_277723)
    
    # Obtaining the member '__getitem__' of a type (line 2073)
    getitem___277725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2073, 4), cmplx_sort_call_result_277724, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2073)
    subscript_call_result_277726 = invoke(stypy.reporting.localization.Localization(__file__, 2073, 4), getitem___277725, int_277720)
    
    # Assigning a type to the variable 'tuple_var_assignment_274340' (line 2073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2073, 4), 'tuple_var_assignment_274340', subscript_call_result_277726)
    
    # Assigning a Subscript to a Name (line 2073):
    
    # Obtaining the type of the subscript
    int_277727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2073, 4), 'int')
    
    # Call to cmplx_sort(...): (line 2073)
    # Processing the call arguments (line 2073)
    # Getting the type of 'p' (line 2073)
    p_277729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 25), 'p', False)
    # Processing the call keyword arguments (line 2073)
    kwargs_277730 = {}
    # Getting the type of 'cmplx_sort' (line 2073)
    cmplx_sort_277728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 14), 'cmplx_sort', False)
    # Calling cmplx_sort(args, kwargs) (line 2073)
    cmplx_sort_call_result_277731 = invoke(stypy.reporting.localization.Localization(__file__, 2073, 14), cmplx_sort_277728, *[p_277729], **kwargs_277730)
    
    # Obtaining the member '__getitem__' of a type (line 2073)
    getitem___277732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2073, 4), cmplx_sort_call_result_277731, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2073)
    subscript_call_result_277733 = invoke(stypy.reporting.localization.Localization(__file__, 2073, 4), getitem___277732, int_277727)
    
    # Assigning a type to the variable 'tuple_var_assignment_274341' (line 2073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2073, 4), 'tuple_var_assignment_274341', subscript_call_result_277733)
    
    # Assigning a Name to a Name (line 2073):
    # Getting the type of 'tuple_var_assignment_274340' (line 2073)
    tuple_var_assignment_274340_277734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 4), 'tuple_var_assignment_274340')
    # Assigning a type to the variable 'p' (line 2073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2073, 4), 'p', tuple_var_assignment_274340_277734)
    
    # Assigning a Name to a Name (line 2073):
    # Getting the type of 'tuple_var_assignment_274341' (line 2073)
    tuple_var_assignment_274341_277735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 4), 'tuple_var_assignment_274341')
    # Assigning a type to the variable 'indx' (line 2073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2073, 7), 'indx', tuple_var_assignment_274341_277735)
    
    # Assigning a Call to a Name (line 2074):
    
    # Assigning a Call to a Name (line 2074):
    
    # Call to take(...): (line 2074)
    # Processing the call arguments (line 2074)
    # Getting the type of 'r' (line 2074)
    r_277737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2074, 13), 'r', False)
    # Getting the type of 'indx' (line 2074)
    indx_277738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2074, 16), 'indx', False)
    int_277739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2074, 22), 'int')
    # Processing the call keyword arguments (line 2074)
    kwargs_277740 = {}
    # Getting the type of 'take' (line 2074)
    take_277736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2074, 8), 'take', False)
    # Calling take(args, kwargs) (line 2074)
    take_call_result_277741 = invoke(stypy.reporting.localization.Localization(__file__, 2074, 8), take_277736, *[r_277737, indx_277738, int_277739], **kwargs_277740)
    
    # Assigning a type to the variable 'r' (line 2074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2074, 4), 'r', take_call_result_277741)
    
    # Assigning a Call to a Tuple (line 2075):
    
    # Assigning a Subscript to a Name (line 2075):
    
    # Obtaining the type of the subscript
    int_277742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2075, 4), 'int')
    
    # Call to unique_roots(...): (line 2075)
    # Processing the call arguments (line 2075)
    # Getting the type of 'p' (line 2075)
    p_277744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 30), 'p', False)
    # Processing the call keyword arguments (line 2075)
    # Getting the type of 'tol' (line 2075)
    tol_277745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 37), 'tol', False)
    keyword_277746 = tol_277745
    # Getting the type of 'rtype' (line 2075)
    rtype_277747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 48), 'rtype', False)
    keyword_277748 = rtype_277747
    kwargs_277749 = {'tol': keyword_277746, 'rtype': keyword_277748}
    # Getting the type of 'unique_roots' (line 2075)
    unique_roots_277743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 17), 'unique_roots', False)
    # Calling unique_roots(args, kwargs) (line 2075)
    unique_roots_call_result_277750 = invoke(stypy.reporting.localization.Localization(__file__, 2075, 17), unique_roots_277743, *[p_277744], **kwargs_277749)
    
    # Obtaining the member '__getitem__' of a type (line 2075)
    getitem___277751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2075, 4), unique_roots_call_result_277750, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2075)
    subscript_call_result_277752 = invoke(stypy.reporting.localization.Localization(__file__, 2075, 4), getitem___277751, int_277742)
    
    # Assigning a type to the variable 'tuple_var_assignment_274342' (line 2075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 4), 'tuple_var_assignment_274342', subscript_call_result_277752)
    
    # Assigning a Subscript to a Name (line 2075):
    
    # Obtaining the type of the subscript
    int_277753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2075, 4), 'int')
    
    # Call to unique_roots(...): (line 2075)
    # Processing the call arguments (line 2075)
    # Getting the type of 'p' (line 2075)
    p_277755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 30), 'p', False)
    # Processing the call keyword arguments (line 2075)
    # Getting the type of 'tol' (line 2075)
    tol_277756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 37), 'tol', False)
    keyword_277757 = tol_277756
    # Getting the type of 'rtype' (line 2075)
    rtype_277758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 48), 'rtype', False)
    keyword_277759 = rtype_277758
    kwargs_277760 = {'tol': keyword_277757, 'rtype': keyword_277759}
    # Getting the type of 'unique_roots' (line 2075)
    unique_roots_277754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 17), 'unique_roots', False)
    # Calling unique_roots(args, kwargs) (line 2075)
    unique_roots_call_result_277761 = invoke(stypy.reporting.localization.Localization(__file__, 2075, 17), unique_roots_277754, *[p_277755], **kwargs_277760)
    
    # Obtaining the member '__getitem__' of a type (line 2075)
    getitem___277762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2075, 4), unique_roots_call_result_277761, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2075)
    subscript_call_result_277763 = invoke(stypy.reporting.localization.Localization(__file__, 2075, 4), getitem___277762, int_277753)
    
    # Assigning a type to the variable 'tuple_var_assignment_274343' (line 2075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 4), 'tuple_var_assignment_274343', subscript_call_result_277763)
    
    # Assigning a Name to a Name (line 2075):
    # Getting the type of 'tuple_var_assignment_274342' (line 2075)
    tuple_var_assignment_274342_277764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 4), 'tuple_var_assignment_274342')
    # Assigning a type to the variable 'pout' (line 2075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 4), 'pout', tuple_var_assignment_274342_277764)
    
    # Assigning a Name to a Name (line 2075):
    # Getting the type of 'tuple_var_assignment_274343' (line 2075)
    tuple_var_assignment_274343_277765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 4), 'tuple_var_assignment_274343')
    # Assigning a type to the variable 'mult' (line 2075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 10), 'mult', tuple_var_assignment_274343_277765)
    
    # Assigning a List to a Name (line 2076):
    
    # Assigning a List to a Name (line 2076):
    
    # Obtaining an instance of the builtin type 'list' (line 2076)
    list_277766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2076, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2076)
    
    # Assigning a type to the variable 'p' (line 2076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2076, 4), 'p', list_277766)
    
    
    # Call to range(...): (line 2077)
    # Processing the call arguments (line 2077)
    
    # Call to len(...): (line 2077)
    # Processing the call arguments (line 2077)
    # Getting the type of 'pout' (line 2077)
    pout_277769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 23), 'pout', False)
    # Processing the call keyword arguments (line 2077)
    kwargs_277770 = {}
    # Getting the type of 'len' (line 2077)
    len_277768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 19), 'len', False)
    # Calling len(args, kwargs) (line 2077)
    len_call_result_277771 = invoke(stypy.reporting.localization.Localization(__file__, 2077, 19), len_277768, *[pout_277769], **kwargs_277770)
    
    # Processing the call keyword arguments (line 2077)
    kwargs_277772 = {}
    # Getting the type of 'range' (line 2077)
    range_277767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 13), 'range', False)
    # Calling range(args, kwargs) (line 2077)
    range_call_result_277773 = invoke(stypy.reporting.localization.Localization(__file__, 2077, 13), range_277767, *[len_call_result_277771], **kwargs_277772)
    
    # Testing the type of a for loop iterable (line 2077)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2077, 4), range_call_result_277773)
    # Getting the type of the for loop variable (line 2077)
    for_loop_var_277774 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2077, 4), range_call_result_277773)
    # Assigning a type to the variable 'k' (line 2077)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2077, 4), 'k', for_loop_var_277774)
    # SSA begins for a for statement (line 2077)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to extend(...): (line 2078)
    # Processing the call arguments (line 2078)
    
    # Obtaining an instance of the builtin type 'list' (line 2078)
    list_277777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2078)
    # Adding element type (line 2078)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2078)
    k_277778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 23), 'k', False)
    # Getting the type of 'pout' (line 2078)
    pout_277779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 18), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 2078)
    getitem___277780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 18), pout_277779, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2078)
    subscript_call_result_277781 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 18), getitem___277780, k_277778)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2078, 17), list_277777, subscript_call_result_277781)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2078)
    k_277782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 34), 'k', False)
    # Getting the type of 'mult' (line 2078)
    mult_277783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 29), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 2078)
    getitem___277784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 29), mult_277783, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2078)
    subscript_call_result_277785 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 29), getitem___277784, k_277782)
    
    # Applying the binary operator '*' (line 2078)
    result_mul_277786 = python_operator(stypy.reporting.localization.Localization(__file__, 2078, 17), '*', list_277777, subscript_call_result_277785)
    
    # Processing the call keyword arguments (line 2078)
    kwargs_277787 = {}
    # Getting the type of 'p' (line 2078)
    p_277775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 8), 'p', False)
    # Obtaining the member 'extend' of a type (line 2078)
    extend_277776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 8), p_277775, 'extend')
    # Calling extend(args, kwargs) (line 2078)
    extend_call_result_277788 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 8), extend_277776, *[result_mul_277786], **kwargs_277787)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2079):
    
    # Assigning a Call to a Name (line 2079):
    
    # Call to atleast_1d(...): (line 2079)
    # Processing the call arguments (line 2079)
    
    # Call to poly(...): (line 2079)
    # Processing the call arguments (line 2079)
    # Getting the type of 'p' (line 2079)
    p_277791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 24), 'p', False)
    # Processing the call keyword arguments (line 2079)
    kwargs_277792 = {}
    # Getting the type of 'poly' (line 2079)
    poly_277790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 19), 'poly', False)
    # Calling poly(args, kwargs) (line 2079)
    poly_call_result_277793 = invoke(stypy.reporting.localization.Localization(__file__, 2079, 19), poly_277790, *[p_277791], **kwargs_277792)
    
    # Processing the call keyword arguments (line 2079)
    kwargs_277794 = {}
    # Getting the type of 'atleast_1d' (line 2079)
    atleast_1d_277789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2079)
    atleast_1d_call_result_277795 = invoke(stypy.reporting.localization.Localization(__file__, 2079, 8), atleast_1d_277789, *[poly_call_result_277793], **kwargs_277794)
    
    # Assigning a type to the variable 'a' (line 2079)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 4), 'a', atleast_1d_call_result_277795)
    
    
    
    # Call to len(...): (line 2080)
    # Processing the call arguments (line 2080)
    # Getting the type of 'extra' (line 2080)
    extra_277797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 11), 'extra', False)
    # Processing the call keyword arguments (line 2080)
    kwargs_277798 = {}
    # Getting the type of 'len' (line 2080)
    len_277796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2080, 7), 'len', False)
    # Calling len(args, kwargs) (line 2080)
    len_call_result_277799 = invoke(stypy.reporting.localization.Localization(__file__, 2080, 7), len_277796, *[extra_277797], **kwargs_277798)
    
    int_277800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2080, 20), 'int')
    # Applying the binary operator '>' (line 2080)
    result_gt_277801 = python_operator(stypy.reporting.localization.Localization(__file__, 2080, 7), '>', len_call_result_277799, int_277800)
    
    # Testing the type of an if condition (line 2080)
    if_condition_277802 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2080, 4), result_gt_277801)
    # Assigning a type to the variable 'if_condition_277802' (line 2080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2080, 4), 'if_condition_277802', if_condition_277802)
    # SSA begins for if statement (line 2080)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2081):
    
    # Assigning a Call to a Name (line 2081):
    
    # Call to polymul(...): (line 2081)
    # Processing the call arguments (line 2081)
    # Getting the type of 'extra' (line 2081)
    extra_277804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 20), 'extra', False)
    # Getting the type of 'a' (line 2081)
    a_277805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 27), 'a', False)
    # Processing the call keyword arguments (line 2081)
    kwargs_277806 = {}
    # Getting the type of 'polymul' (line 2081)
    polymul_277803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 12), 'polymul', False)
    # Calling polymul(args, kwargs) (line 2081)
    polymul_call_result_277807 = invoke(stypy.reporting.localization.Localization(__file__, 2081, 12), polymul_277803, *[extra_277804, a_277805], **kwargs_277806)
    
    # Assigning a type to the variable 'b' (line 2081)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2081, 8), 'b', polymul_call_result_277807)
    # SSA branch for the else part of an if statement (line 2080)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a List to a Name (line 2083):
    
    # Assigning a List to a Name (line 2083):
    
    # Obtaining an instance of the builtin type 'list' (line 2083)
    list_277808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2083)
    # Adding element type (line 2083)
    int_277809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 13), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2083, 12), list_277808, int_277809)
    
    # Assigning a type to the variable 'b' (line 2083)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'b', list_277808)
    # SSA join for if statement (line 2080)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Num to a Name (line 2084):
    
    # Assigning a Num to a Name (line 2084):
    int_277810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 11), 'int')
    # Assigning a type to the variable 'indx' (line 2084)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2084, 4), 'indx', int_277810)
    
    # Assigning a Subscript to a Name (line 2085):
    
    # Assigning a Subscript to a Name (line 2085):
    
    # Obtaining the type of the subscript
    int_277811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 24), 'int')
    slice_277812 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2085, 11), None, None, int_277811)
    
    # Call to asarray(...): (line 2085)
    # Processing the call arguments (line 2085)
    # Getting the type of 'b' (line 2085)
    b_277814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 19), 'b', False)
    # Processing the call keyword arguments (line 2085)
    kwargs_277815 = {}
    # Getting the type of 'asarray' (line 2085)
    asarray_277813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 11), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2085)
    asarray_call_result_277816 = invoke(stypy.reporting.localization.Localization(__file__, 2085, 11), asarray_277813, *[b_277814], **kwargs_277815)
    
    # Obtaining the member '__getitem__' of a type (line 2085)
    getitem___277817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2085, 11), asarray_call_result_277816, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2085)
    subscript_call_result_277818 = invoke(stypy.reporting.localization.Localization(__file__, 2085, 11), getitem___277817, slice_277812)
    
    # Assigning a type to the variable 'brev' (line 2085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2085, 4), 'brev', subscript_call_result_277818)
    
    
    # Call to range(...): (line 2086)
    # Processing the call arguments (line 2086)
    
    # Call to len(...): (line 2086)
    # Processing the call arguments (line 2086)
    # Getting the type of 'pout' (line 2086)
    pout_277821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 23), 'pout', False)
    # Processing the call keyword arguments (line 2086)
    kwargs_277822 = {}
    # Getting the type of 'len' (line 2086)
    len_277820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 19), 'len', False)
    # Calling len(args, kwargs) (line 2086)
    len_call_result_277823 = invoke(stypy.reporting.localization.Localization(__file__, 2086, 19), len_277820, *[pout_277821], **kwargs_277822)
    
    # Processing the call keyword arguments (line 2086)
    kwargs_277824 = {}
    # Getting the type of 'range' (line 2086)
    range_277819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 13), 'range', False)
    # Calling range(args, kwargs) (line 2086)
    range_call_result_277825 = invoke(stypy.reporting.localization.Localization(__file__, 2086, 13), range_277819, *[len_call_result_277823], **kwargs_277824)
    
    # Testing the type of a for loop iterable (line 2086)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2086, 4), range_call_result_277825)
    # Getting the type of the for loop variable (line 2086)
    for_loop_var_277826 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2086, 4), range_call_result_277825)
    # Assigning a type to the variable 'k' (line 2086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2086, 4), 'k', for_loop_var_277826)
    # SSA begins for a for statement (line 2086)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a List to a Name (line 2087):
    
    # Assigning a List to a Name (line 2087):
    
    # Obtaining an instance of the builtin type 'list' (line 2087)
    list_277827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2087)
    
    # Assigning a type to the variable 'temp' (line 2087)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2087, 8), 'temp', list_277827)
    
    
    # Call to range(...): (line 2089)
    # Processing the call arguments (line 2089)
    
    # Call to len(...): (line 2089)
    # Processing the call arguments (line 2089)
    # Getting the type of 'pout' (line 2089)
    pout_277830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 27), 'pout', False)
    # Processing the call keyword arguments (line 2089)
    kwargs_277831 = {}
    # Getting the type of 'len' (line 2089)
    len_277829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 23), 'len', False)
    # Calling len(args, kwargs) (line 2089)
    len_call_result_277832 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 23), len_277829, *[pout_277830], **kwargs_277831)
    
    # Processing the call keyword arguments (line 2089)
    kwargs_277833 = {}
    # Getting the type of 'range' (line 2089)
    range_277828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 17), 'range', False)
    # Calling range(args, kwargs) (line 2089)
    range_call_result_277834 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 17), range_277828, *[len_call_result_277832], **kwargs_277833)
    
    # Testing the type of a for loop iterable (line 2089)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2089, 8), range_call_result_277834)
    # Getting the type of the for loop variable (line 2089)
    for_loop_var_277835 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2089, 8), range_call_result_277834)
    # Assigning a type to the variable 'l' (line 2089)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2089, 8), 'l', for_loop_var_277835)
    # SSA begins for a for statement (line 2089)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'l' (line 2090)
    l_277836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 15), 'l')
    # Getting the type of 'k' (line 2090)
    k_277837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2090, 20), 'k')
    # Applying the binary operator '!=' (line 2090)
    result_ne_277838 = python_operator(stypy.reporting.localization.Localization(__file__, 2090, 15), '!=', l_277836, k_277837)
    
    # Testing the type of an if condition (line 2090)
    if_condition_277839 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2090, 12), result_ne_277838)
    # Assigning a type to the variable 'if_condition_277839' (line 2090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2090, 12), 'if_condition_277839', if_condition_277839)
    # SSA begins for if statement (line 2090)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to extend(...): (line 2091)
    # Processing the call arguments (line 2091)
    
    # Obtaining an instance of the builtin type 'list' (line 2091)
    list_277842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2091, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2091)
    # Adding element type (line 2091)
    
    # Obtaining the type of the subscript
    # Getting the type of 'l' (line 2091)
    l_277843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 34), 'l', False)
    # Getting the type of 'pout' (line 2091)
    pout_277844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 29), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 2091)
    getitem___277845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2091, 29), pout_277844, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2091)
    subscript_call_result_277846 = invoke(stypy.reporting.localization.Localization(__file__, 2091, 29), getitem___277845, l_277843)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2091, 28), list_277842, subscript_call_result_277846)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'l' (line 2091)
    l_277847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 45), 'l', False)
    # Getting the type of 'mult' (line 2091)
    mult_277848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 40), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 2091)
    getitem___277849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2091, 40), mult_277848, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2091)
    subscript_call_result_277850 = invoke(stypy.reporting.localization.Localization(__file__, 2091, 40), getitem___277849, l_277847)
    
    # Applying the binary operator '*' (line 2091)
    result_mul_277851 = python_operator(stypy.reporting.localization.Localization(__file__, 2091, 28), '*', list_277842, subscript_call_result_277850)
    
    # Processing the call keyword arguments (line 2091)
    kwargs_277852 = {}
    # Getting the type of 'temp' (line 2091)
    temp_277840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 16), 'temp', False)
    # Obtaining the member 'extend' of a type (line 2091)
    extend_277841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2091, 16), temp_277840, 'extend')
    # Calling extend(args, kwargs) (line 2091)
    extend_call_result_277853 = invoke(stypy.reporting.localization.Localization(__file__, 2091, 16), extend_277841, *[result_mul_277851], **kwargs_277852)
    
    # SSA join for if statement (line 2090)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 2092)
    # Processing the call arguments (line 2092)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2092)
    k_277855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 28), 'k', False)
    # Getting the type of 'mult' (line 2092)
    mult_277856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 23), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 2092)
    getitem___277857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2092, 23), mult_277856, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2092)
    subscript_call_result_277858 = invoke(stypy.reporting.localization.Localization(__file__, 2092, 23), getitem___277857, k_277855)
    
    # Processing the call keyword arguments (line 2092)
    kwargs_277859 = {}
    # Getting the type of 'range' (line 2092)
    range_277854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 17), 'range', False)
    # Calling range(args, kwargs) (line 2092)
    range_call_result_277860 = invoke(stypy.reporting.localization.Localization(__file__, 2092, 17), range_277854, *[subscript_call_result_277858], **kwargs_277859)
    
    # Testing the type of a for loop iterable (line 2092)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2092, 8), range_call_result_277860)
    # Getting the type of the for loop variable (line 2092)
    for_loop_var_277861 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2092, 8), range_call_result_277860)
    # Assigning a type to the variable 'm' (line 2092)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2092, 8), 'm', for_loop_var_277861)
    # SSA begins for a for statement (line 2092)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 2093):
    
    # Assigning a Subscript to a Name (line 2093):
    
    # Obtaining the type of the subscript
    slice_277862 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2093, 17), None, None, None)
    # Getting the type of 'temp' (line 2093)
    temp_277863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2093, 17), 'temp')
    # Obtaining the member '__getitem__' of a type (line 2093)
    getitem___277864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2093, 17), temp_277863, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2093)
    subscript_call_result_277865 = invoke(stypy.reporting.localization.Localization(__file__, 2093, 17), getitem___277864, slice_277862)
    
    # Assigning a type to the variable 't2' (line 2093)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2093, 12), 't2', subscript_call_result_277865)
    
    # Call to extend(...): (line 2094)
    # Processing the call arguments (line 2094)
    
    # Obtaining an instance of the builtin type 'list' (line 2094)
    list_277868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2094)
    # Adding element type (line 2094)
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2094)
    k_277869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 28), 'k', False)
    # Getting the type of 'pout' (line 2094)
    pout_277870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 23), 'pout', False)
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___277871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 23), pout_277870, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_277872 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 23), getitem___277871, k_277869)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2094, 22), list_277868, subscript_call_result_277872)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2094)
    k_277873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 40), 'k', False)
    # Getting the type of 'mult' (line 2094)
    mult_277874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 35), 'mult', False)
    # Obtaining the member '__getitem__' of a type (line 2094)
    getitem___277875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 35), mult_277874, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2094)
    subscript_call_result_277876 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 35), getitem___277875, k_277873)
    
    # Getting the type of 'm' (line 2094)
    m_277877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 45), 'm', False)
    # Applying the binary operator '-' (line 2094)
    result_sub_277878 = python_operator(stypy.reporting.localization.Localization(__file__, 2094, 35), '-', subscript_call_result_277876, m_277877)
    
    int_277879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2094, 49), 'int')
    # Applying the binary operator '-' (line 2094)
    result_sub_277880 = python_operator(stypy.reporting.localization.Localization(__file__, 2094, 47), '-', result_sub_277878, int_277879)
    
    # Applying the binary operator '*' (line 2094)
    result_mul_277881 = python_operator(stypy.reporting.localization.Localization(__file__, 2094, 22), '*', list_277868, result_sub_277880)
    
    # Processing the call keyword arguments (line 2094)
    kwargs_277882 = {}
    # Getting the type of 't2' (line 2094)
    t2_277866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 12), 't2', False)
    # Obtaining the member 'extend' of a type (line 2094)
    extend_277867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 12), t2_277866, 'extend')
    # Calling extend(args, kwargs) (line 2094)
    extend_call_result_277883 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 12), extend_277867, *[result_mul_277881], **kwargs_277882)
    
    
    # Assigning a Call to a Name (line 2095):
    
    # Assigning a Call to a Name (line 2095):
    
    # Call to polyadd(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 'brev' (line 2095)
    brev_277885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 27), 'brev', False)
    
    # Obtaining the type of the subscript
    int_277886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2095, 68), 'int')
    slice_277887 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2095, 34), None, None, int_277886)
    
    # Obtaining the type of the subscript
    # Getting the type of 'indx' (line 2095)
    indx_277888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 36), 'indx', False)
    # Getting the type of 'r' (line 2095)
    r_277889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 34), 'r', False)
    # Obtaining the member '__getitem__' of a type (line 2095)
    getitem___277890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 34), r_277889, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2095)
    subscript_call_result_277891 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 34), getitem___277890, indx_277888)
    
    
    # Call to atleast_1d(...): (line 2095)
    # Processing the call arguments (line 2095)
    
    # Call to poly(...): (line 2095)
    # Processing the call arguments (line 2095)
    # Getting the type of 't2' (line 2095)
    t2_277894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 60), 't2', False)
    # Processing the call keyword arguments (line 2095)
    kwargs_277895 = {}
    # Getting the type of 'poly' (line 2095)
    poly_277893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 55), 'poly', False)
    # Calling poly(args, kwargs) (line 2095)
    poly_call_result_277896 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 55), poly_277893, *[t2_277894], **kwargs_277895)
    
    # Processing the call keyword arguments (line 2095)
    kwargs_277897 = {}
    # Getting the type of 'atleast_1d' (line 2095)
    atleast_1d_277892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 44), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 2095)
    atleast_1d_call_result_277898 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 44), atleast_1d_277892, *[poly_call_result_277896], **kwargs_277897)
    
    # Applying the binary operator '*' (line 2095)
    result_mul_277899 = python_operator(stypy.reporting.localization.Localization(__file__, 2095, 34), '*', subscript_call_result_277891, atleast_1d_call_result_277898)
    
    # Obtaining the member '__getitem__' of a type (line 2095)
    getitem___277900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 34), result_mul_277899, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2095)
    subscript_call_result_277901 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 34), getitem___277900, slice_277887)
    
    # Processing the call keyword arguments (line 2095)
    kwargs_277902 = {}
    # Getting the type of 'polyadd' (line 2095)
    polyadd_277884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 19), 'polyadd', False)
    # Calling polyadd(args, kwargs) (line 2095)
    polyadd_call_result_277903 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 19), polyadd_277884, *[brev_277885, subscript_call_result_277901], **kwargs_277902)
    
    # Assigning a type to the variable 'brev' (line 2095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2095, 12), 'brev', polyadd_call_result_277903)
    
    # Getting the type of 'indx' (line 2096)
    indx_277904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 12), 'indx')
    int_277905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2096, 20), 'int')
    # Applying the binary operator '+=' (line 2096)
    result_iadd_277906 = python_operator(stypy.reporting.localization.Localization(__file__, 2096, 12), '+=', indx_277904, int_277905)
    # Assigning a type to the variable 'indx' (line 2096)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2096, 12), 'indx', result_iadd_277906)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2097):
    
    # Assigning a Call to a Name (line 2097):
    
    # Call to real_if_close(...): (line 2097)
    # Processing the call arguments (line 2097)
    
    # Obtaining the type of the subscript
    int_277908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2097, 29), 'int')
    slice_277909 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2097, 22), None, None, int_277908)
    # Getting the type of 'brev' (line 2097)
    brev_277910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 22), 'brev', False)
    # Obtaining the member '__getitem__' of a type (line 2097)
    getitem___277911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2097, 22), brev_277910, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2097)
    subscript_call_result_277912 = invoke(stypy.reporting.localization.Localization(__file__, 2097, 22), getitem___277911, slice_277909)
    
    # Processing the call keyword arguments (line 2097)
    kwargs_277913 = {}
    # Getting the type of 'real_if_close' (line 2097)
    real_if_close_277907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 8), 'real_if_close', False)
    # Calling real_if_close(args, kwargs) (line 2097)
    real_if_close_call_result_277914 = invoke(stypy.reporting.localization.Localization(__file__, 2097, 8), real_if_close_277907, *[subscript_call_result_277912], **kwargs_277913)
    
    # Assigning a type to the variable 'b' (line 2097)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2097, 4), 'b', real_if_close_call_result_277914)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2098)
    tuple_277915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2098, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2098)
    # Adding element type (line 2098)
    # Getting the type of 'b' (line 2098)
    b_277916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 11), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2098, 11), tuple_277915, b_277916)
    # Adding element type (line 2098)
    # Getting the type of 'a' (line 2098)
    a_277917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 14), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2098, 11), tuple_277915, a_277917)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2098)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2098, 4), 'stypy_return_type', tuple_277915)
    
    # ################# End of 'invresz(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'invresz' in the type store
    # Getting the type of 'stypy_return_type' (line 2015)
    stypy_return_type_277918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_277918)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'invresz'
    return stypy_return_type_277918

# Assigning a type to the variable 'invresz' (line 2015)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2015, 0), 'invresz', invresz)

@norecursion
def resample(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2101)
    None_277919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 23), 'None')
    int_277920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2101, 34), 'int')
    # Getting the type of 'None' (line 2101)
    None_277921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 44), 'None')
    defaults = [None_277919, int_277920, None_277921]
    # Create a new context for function 'resample'
    module_type_store = module_type_store.open_function_context('resample', 2101, 0, False)
    
    # Passed parameters checking function
    resample.stypy_localization = localization
    resample.stypy_type_of_self = None
    resample.stypy_type_store = module_type_store
    resample.stypy_function_name = 'resample'
    resample.stypy_param_names_list = ['x', 'num', 't', 'axis', 'window']
    resample.stypy_varargs_param_name = None
    resample.stypy_kwargs_param_name = None
    resample.stypy_call_defaults = defaults
    resample.stypy_call_varargs = varargs
    resample.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'resample', ['x', 'num', 't', 'axis', 'window'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'resample', localization, ['x', 'num', 't', 'axis', 'window'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'resample(...)' code ##################

    str_277922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2181, (-1)), 'str', "\n    Resample `x` to `num` samples using Fourier method along the given axis.\n\n    The resampled signal starts at the same value as `x` but is sampled\n    with a spacing of ``len(x) / num * (spacing of x)``.  Because a\n    Fourier method is used, the signal is assumed to be periodic.\n\n    Parameters\n    ----------\n    x : array_like\n        The data to be resampled.\n    num : int\n        The number of samples in the resampled signal.\n    t : array_like, optional\n        If `t` is given, it is assumed to be the sample positions\n        associated with the signal data in `x`.\n    axis : int, optional\n        The axis of `x` that is resampled.  Default is 0.\n    window : array_like, callable, string, float, or tuple, optional\n        Specifies the window applied to the signal in the Fourier\n        domain.  See below for details.\n\n    Returns\n    -------\n    resampled_x or (resampled_x, resampled_t)\n        Either the resampled array, or, if `t` was given, a tuple\n        containing the resampled array and the corresponding resampled\n        positions.\n\n    See Also\n    --------\n    decimate : Downsample the signal after applying an FIR or IIR filter.\n    resample_poly : Resample using polyphase filtering and an FIR filter.\n\n    Notes\n    -----\n    The argument `window` controls a Fourier-domain window that tapers\n    the Fourier spectrum before zero-padding to alleviate ringing in\n    the resampled values for sampled signals you didn't intend to be\n    interpreted as band-limited.\n\n    If `window` is a function, then it is called with a vector of inputs\n    indicating the frequency bins (i.e. fftfreq(x.shape[axis]) ).\n\n    If `window` is an array of the same length as `x.shape[axis]` it is\n    assumed to be the window to be applied directly in the Fourier\n    domain (with dc and low-frequency first).\n\n    For any other type of `window`, the function `scipy.signal.get_window`\n    is called to generate the window.\n\n    The first sample of the returned vector is the same as the first\n    sample of the input vector.  The spacing between samples is changed\n    from ``dx`` to ``dx * len(x) / num``.\n\n    If `t` is not None, then it represents the old sample positions,\n    and the new sample positions will be returned as well as the new\n    samples.\n\n    As noted, `resample` uses FFT transformations, which can be very\n    slow if the number of input or output samples is large and prime;\n    see `scipy.fftpack.fft`.\n\n    Examples\n    --------\n    Note that the end of the resampled data rises to meet the first\n    sample of the next cycle:\n\n    >>> from scipy import signal\n\n    >>> x = np.linspace(0, 10, 20, endpoint=False)\n    >>> y = np.cos(-x**2/6.0)\n    >>> f = signal.resample(y, 100)\n    >>> xnew = np.linspace(0, 10, 100, endpoint=False)\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(x, y, 'go-', xnew, f, '.-', 10, y[0], 'ro')\n    >>> plt.legend(['data', 'resampled'], loc='best')\n    >>> plt.show()\n    ")
    
    # Assigning a Call to a Name (line 2182):
    
    # Assigning a Call to a Name (line 2182):
    
    # Call to asarray(...): (line 2182)
    # Processing the call arguments (line 2182)
    # Getting the type of 'x' (line 2182)
    x_277924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 16), 'x', False)
    # Processing the call keyword arguments (line 2182)
    kwargs_277925 = {}
    # Getting the type of 'asarray' (line 2182)
    asarray_277923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2182)
    asarray_call_result_277926 = invoke(stypy.reporting.localization.Localization(__file__, 2182, 8), asarray_277923, *[x_277924], **kwargs_277925)
    
    # Assigning a type to the variable 'x' (line 2182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 4), 'x', asarray_call_result_277926)
    
    # Assigning a Call to a Name (line 2183):
    
    # Assigning a Call to a Name (line 2183):
    
    # Call to fft(...): (line 2183)
    # Processing the call arguments (line 2183)
    # Getting the type of 'x' (line 2183)
    x_277929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 20), 'x', False)
    # Processing the call keyword arguments (line 2183)
    # Getting the type of 'axis' (line 2183)
    axis_277930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 28), 'axis', False)
    keyword_277931 = axis_277930
    kwargs_277932 = {'axis': keyword_277931}
    # Getting the type of 'fftpack' (line 2183)
    fftpack_277927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2183, 8), 'fftpack', False)
    # Obtaining the member 'fft' of a type (line 2183)
    fft_277928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2183, 8), fftpack_277927, 'fft')
    # Calling fft(args, kwargs) (line 2183)
    fft_call_result_277933 = invoke(stypy.reporting.localization.Localization(__file__, 2183, 8), fft_277928, *[x_277929], **kwargs_277932)
    
    # Assigning a type to the variable 'X' (line 2183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2183, 4), 'X', fft_call_result_277933)
    
    # Assigning a Subscript to a Name (line 2184):
    
    # Assigning a Subscript to a Name (line 2184):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2184)
    axis_277934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 17), 'axis')
    # Getting the type of 'x' (line 2184)
    x_277935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 9), 'x')
    # Obtaining the member 'shape' of a type (line 2184)
    shape_277936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 9), x_277935, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2184)
    getitem___277937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 9), shape_277936, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2184)
    subscript_call_result_277938 = invoke(stypy.reporting.localization.Localization(__file__, 2184, 9), getitem___277937, axis_277934)
    
    # Assigning a type to the variable 'Nx' (line 2184)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 4), 'Nx', subscript_call_result_277938)
    
    # Type idiom detected: calculating its left and rigth part (line 2185)
    # Getting the type of 'window' (line 2185)
    window_277939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 4), 'window')
    # Getting the type of 'None' (line 2185)
    None_277940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 21), 'None')
    
    (may_be_277941, more_types_in_union_277942) = may_not_be_none(window_277939, None_277940)

    if may_be_277941:

        if more_types_in_union_277942:
            # Runtime conditional SSA (line 2185)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Call to callable(...): (line 2186)
        # Processing the call arguments (line 2186)
        # Getting the type of 'window' (line 2186)
        window_277944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 20), 'window', False)
        # Processing the call keyword arguments (line 2186)
        kwargs_277945 = {}
        # Getting the type of 'callable' (line 2186)
        callable_277943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 2186)
        callable_call_result_277946 = invoke(stypy.reporting.localization.Localization(__file__, 2186, 11), callable_277943, *[window_277944], **kwargs_277945)
        
        # Testing the type of an if condition (line 2186)
        if_condition_277947 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2186, 8), callable_call_result_277946)
        # Assigning a type to the variable 'if_condition_277947' (line 2186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 8), 'if_condition_277947', if_condition_277947)
        # SSA begins for if statement (line 2186)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2187):
        
        # Assigning a Call to a Name (line 2187):
        
        # Call to window(...): (line 2187)
        # Processing the call arguments (line 2187)
        
        # Call to fftfreq(...): (line 2187)
        # Processing the call arguments (line 2187)
        # Getting the type of 'Nx' (line 2187)
        Nx_277951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 39), 'Nx', False)
        # Processing the call keyword arguments (line 2187)
        kwargs_277952 = {}
        # Getting the type of 'fftpack' (line 2187)
        fftpack_277949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 23), 'fftpack', False)
        # Obtaining the member 'fftfreq' of a type (line 2187)
        fftfreq_277950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2187, 23), fftpack_277949, 'fftfreq')
        # Calling fftfreq(args, kwargs) (line 2187)
        fftfreq_call_result_277953 = invoke(stypy.reporting.localization.Localization(__file__, 2187, 23), fftfreq_277950, *[Nx_277951], **kwargs_277952)
        
        # Processing the call keyword arguments (line 2187)
        kwargs_277954 = {}
        # Getting the type of 'window' (line 2187)
        window_277948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 16), 'window', False)
        # Calling window(args, kwargs) (line 2187)
        window_call_result_277955 = invoke(stypy.reporting.localization.Localization(__file__, 2187, 16), window_277948, *[fftfreq_call_result_277953], **kwargs_277954)
        
        # Assigning a type to the variable 'W' (line 2187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2187, 12), 'W', window_call_result_277955)
        # SSA branch for the else part of an if statement (line 2186)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 2188)
        # Processing the call arguments (line 2188)
        # Getting the type of 'window' (line 2188)
        window_277957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 24), 'window', False)
        # Getting the type of 'ndarray' (line 2188)
        ndarray_277958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 32), 'ndarray', False)
        # Processing the call keyword arguments (line 2188)
        kwargs_277959 = {}
        # Getting the type of 'isinstance' (line 2188)
        isinstance_277956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 13), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2188)
        isinstance_call_result_277960 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 13), isinstance_277956, *[window_277957, ndarray_277958], **kwargs_277959)
        
        # Testing the type of an if condition (line 2188)
        if_condition_277961 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2188, 13), isinstance_call_result_277960)
        # Assigning a type to the variable 'if_condition_277961' (line 2188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 13), 'if_condition_277961', if_condition_277961)
        # SSA begins for if statement (line 2188)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'window' (line 2189)
        window_277962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 15), 'window')
        # Obtaining the member 'shape' of a type (line 2189)
        shape_277963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2189, 15), window_277962, 'shape')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2189)
        tuple_277964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2189)
        # Adding element type (line 2189)
        # Getting the type of 'Nx' (line 2189)
        Nx_277965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 32), 'Nx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2189, 32), tuple_277964, Nx_277965)
        
        # Applying the binary operator '!=' (line 2189)
        result_ne_277966 = python_operator(stypy.reporting.localization.Localization(__file__, 2189, 15), '!=', shape_277963, tuple_277964)
        
        # Testing the type of an if condition (line 2189)
        if_condition_277967 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2189, 12), result_ne_277966)
        # Assigning a type to the variable 'if_condition_277967' (line 2189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2189, 12), 'if_condition_277967', if_condition_277967)
        # SSA begins for if statement (line 2189)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2190)
        # Processing the call arguments (line 2190)
        str_277969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2190, 33), 'str', 'window must have the same length as data')
        # Processing the call keyword arguments (line 2190)
        kwargs_277970 = {}
        # Getting the type of 'ValueError' (line 2190)
        ValueError_277968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2190, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2190)
        ValueError_call_result_277971 = invoke(stypy.reporting.localization.Localization(__file__, 2190, 22), ValueError_277968, *[str_277969], **kwargs_277970)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2190, 16), ValueError_call_result_277971, 'raise parameter', BaseException)
        # SSA join for if statement (line 2189)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 2191):
        
        # Assigning a Name to a Name (line 2191):
        # Getting the type of 'window' (line 2191)
        window_277972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2191, 16), 'window')
        # Assigning a type to the variable 'W' (line 2191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2191, 12), 'W', window_277972)
        # SSA branch for the else part of an if statement (line 2188)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2193):
        
        # Assigning a Call to a Name (line 2193):
        
        # Call to ifftshift(...): (line 2193)
        # Processing the call arguments (line 2193)
        
        # Call to get_window(...): (line 2193)
        # Processing the call arguments (line 2193)
        # Getting the type of 'window' (line 2193)
        window_277976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 45), 'window', False)
        # Getting the type of 'Nx' (line 2193)
        Nx_277977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 53), 'Nx', False)
        # Processing the call keyword arguments (line 2193)
        kwargs_277978 = {}
        # Getting the type of 'get_window' (line 2193)
        get_window_277975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 34), 'get_window', False)
        # Calling get_window(args, kwargs) (line 2193)
        get_window_call_result_277979 = invoke(stypy.reporting.localization.Localization(__file__, 2193, 34), get_window_277975, *[window_277976, Nx_277977], **kwargs_277978)
        
        # Processing the call keyword arguments (line 2193)
        kwargs_277980 = {}
        # Getting the type of 'fftpack' (line 2193)
        fftpack_277973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 16), 'fftpack', False)
        # Obtaining the member 'ifftshift' of a type (line 2193)
        ifftshift_277974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2193, 16), fftpack_277973, 'ifftshift')
        # Calling ifftshift(args, kwargs) (line 2193)
        ifftshift_call_result_277981 = invoke(stypy.reporting.localization.Localization(__file__, 2193, 16), ifftshift_277974, *[get_window_call_result_277979], **kwargs_277980)
        
        # Assigning a type to the variable 'W' (line 2193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2193, 12), 'W', ifftshift_call_result_277981)
        # SSA join for if statement (line 2188)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2186)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 2194):
        
        # Assigning a BinOp to a Name (line 2194):
        
        # Obtaining an instance of the builtin type 'list' (line 2194)
        list_277982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2194)
        # Adding element type (line 2194)
        int_277983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 20), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2194, 19), list_277982, int_277983)
        
        # Getting the type of 'x' (line 2194)
        x_277984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 25), 'x')
        # Obtaining the member 'ndim' of a type (line 2194)
        ndim_277985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2194, 25), x_277984, 'ndim')
        # Applying the binary operator '*' (line 2194)
        result_mul_277986 = python_operator(stypy.reporting.localization.Localization(__file__, 2194, 19), '*', list_277982, ndim_277985)
        
        # Assigning a type to the variable 'newshape' (line 2194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 8), 'newshape', result_mul_277986)
        
        # Assigning a Call to a Subscript (line 2195):
        
        # Assigning a Call to a Subscript (line 2195):
        
        # Call to len(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'W' (line 2195)
        W_277988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 29), 'W', False)
        # Processing the call keyword arguments (line 2195)
        kwargs_277989 = {}
        # Getting the type of 'len' (line 2195)
        len_277987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 25), 'len', False)
        # Calling len(args, kwargs) (line 2195)
        len_call_result_277990 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 25), len_277987, *[W_277988], **kwargs_277989)
        
        # Getting the type of 'newshape' (line 2195)
        newshape_277991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 8), 'newshape')
        # Getting the type of 'axis' (line 2195)
        axis_277992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 17), 'axis')
        # Storing an element on a container (line 2195)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2195, 8), newshape_277991, (axis_277992, len_call_result_277990))
        
        # Assigning a Name to a Attribute (line 2196):
        
        # Assigning a Name to a Attribute (line 2196):
        # Getting the type of 'newshape' (line 2196)
        newshape_277993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 18), 'newshape')
        # Getting the type of 'W' (line 2196)
        W_277994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 8), 'W')
        # Setting the type of the member 'shape' of a type (line 2196)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2196, 8), W_277994, 'shape', newshape_277993)
        
        # Assigning a BinOp to a Name (line 2197):
        
        # Assigning a BinOp to a Name (line 2197):
        # Getting the type of 'X' (line 2197)
        X_277995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 12), 'X')
        # Getting the type of 'W' (line 2197)
        W_277996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 16), 'W')
        # Applying the binary operator '*' (line 2197)
        result_mul_277997 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 12), '*', X_277995, W_277996)
        
        # Assigning a type to the variable 'X' (line 2197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2197, 8), 'X', result_mul_277997)
        
        # Assigning a Tuple to a Attribute (line 2198):
        
        # Assigning a Tuple to a Attribute (line 2198):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2198)
        tuple_277998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2198, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2198)
        # Adding element type (line 2198)
        # Getting the type of 'Nx' (line 2198)
        Nx_277999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 19), 'Nx')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2198, 19), tuple_277998, Nx_277999)
        
        # Getting the type of 'W' (line 2198)
        W_278000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 8), 'W')
        # Setting the type of the member 'shape' of a type (line 2198)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2198, 8), W_278000, 'shape', tuple_277998)

        if more_types_in_union_277942:
            # SSA join for if statement (line 2185)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 2199):
    
    # Assigning a BinOp to a Name (line 2199):
    
    # Obtaining an instance of the builtin type 'list' (line 2199)
    list_278001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2199, 9), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2199)
    # Adding element type (line 2199)
    
    # Call to slice(...): (line 2199)
    # Processing the call arguments (line 2199)
    # Getting the type of 'None' (line 2199)
    None_278003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 16), 'None', False)
    # Processing the call keyword arguments (line 2199)
    kwargs_278004 = {}
    # Getting the type of 'slice' (line 2199)
    slice_278002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 10), 'slice', False)
    # Calling slice(args, kwargs) (line 2199)
    slice_call_result_278005 = invoke(stypy.reporting.localization.Localization(__file__, 2199, 10), slice_278002, *[None_278003], **kwargs_278004)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2199, 9), list_278001, slice_call_result_278005)
    
    # Getting the type of 'x' (line 2199)
    x_278006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 25), 'x')
    # Obtaining the member 'ndim' of a type (line 2199)
    ndim_278007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2199, 25), x_278006, 'ndim')
    # Applying the binary operator '*' (line 2199)
    result_mul_278008 = python_operator(stypy.reporting.localization.Localization(__file__, 2199, 9), '*', list_278001, ndim_278007)
    
    # Assigning a type to the variable 'sl' (line 2199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2199, 4), 'sl', result_mul_278008)
    
    # Assigning a Call to a Name (line 2200):
    
    # Assigning a Call to a Name (line 2200):
    
    # Call to list(...): (line 2200)
    # Processing the call arguments (line 2200)
    # Getting the type of 'x' (line 2200)
    x_278010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 20), 'x', False)
    # Obtaining the member 'shape' of a type (line 2200)
    shape_278011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2200, 20), x_278010, 'shape')
    # Processing the call keyword arguments (line 2200)
    kwargs_278012 = {}
    # Getting the type of 'list' (line 2200)
    list_278009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 15), 'list', False)
    # Calling list(args, kwargs) (line 2200)
    list_call_result_278013 = invoke(stypy.reporting.localization.Localization(__file__, 2200, 15), list_278009, *[shape_278011], **kwargs_278012)
    
    # Assigning a type to the variable 'newshape' (line 2200)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2200, 4), 'newshape', list_call_result_278013)
    
    # Assigning a Name to a Subscript (line 2201):
    
    # Assigning a Name to a Subscript (line 2201):
    # Getting the type of 'num' (line 2201)
    num_278014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 21), 'num')
    # Getting the type of 'newshape' (line 2201)
    newshape_278015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 4), 'newshape')
    # Getting the type of 'axis' (line 2201)
    axis_278016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 13), 'axis')
    # Storing an element on a container (line 2201)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2201, 4), newshape_278015, (axis_278016, num_278014))
    
    # Assigning a Call to a Name (line 2202):
    
    # Assigning a Call to a Name (line 2202):
    
    # Call to int(...): (line 2202)
    # Processing the call arguments (line 2202)
    
    # Call to minimum(...): (line 2202)
    # Processing the call arguments (line 2202)
    # Getting the type of 'num' (line 2202)
    num_278020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 23), 'num', False)
    # Getting the type of 'Nx' (line 2202)
    Nx_278021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 28), 'Nx', False)
    # Processing the call keyword arguments (line 2202)
    kwargs_278022 = {}
    # Getting the type of 'np' (line 2202)
    np_278018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 12), 'np', False)
    # Obtaining the member 'minimum' of a type (line 2202)
    minimum_278019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2202, 12), np_278018, 'minimum')
    # Calling minimum(args, kwargs) (line 2202)
    minimum_call_result_278023 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 12), minimum_278019, *[num_278020, Nx_278021], **kwargs_278022)
    
    # Processing the call keyword arguments (line 2202)
    kwargs_278024 = {}
    # Getting the type of 'int' (line 2202)
    int_278017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 8), 'int', False)
    # Calling int(args, kwargs) (line 2202)
    int_call_result_278025 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 8), int_278017, *[minimum_call_result_278023], **kwargs_278024)
    
    # Assigning a type to the variable 'N' (line 2202)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 4), 'N', int_call_result_278025)
    
    # Assigning a Call to a Name (line 2203):
    
    # Assigning a Call to a Name (line 2203):
    
    # Call to zeros(...): (line 2203)
    # Processing the call arguments (line 2203)
    # Getting the type of 'newshape' (line 2203)
    newshape_278027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 14), 'newshape', False)
    str_278028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2203, 24), 'str', 'D')
    # Processing the call keyword arguments (line 2203)
    kwargs_278029 = {}
    # Getting the type of 'zeros' (line 2203)
    zeros_278026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 8), 'zeros', False)
    # Calling zeros(args, kwargs) (line 2203)
    zeros_call_result_278030 = invoke(stypy.reporting.localization.Localization(__file__, 2203, 8), zeros_278026, *[newshape_278027, str_278028], **kwargs_278029)
    
    # Assigning a type to the variable 'Y' (line 2203)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2203, 4), 'Y', zeros_call_result_278030)
    
    # Assigning a Call to a Subscript (line 2204):
    
    # Assigning a Call to a Subscript (line 2204):
    
    # Call to slice(...): (line 2204)
    # Processing the call arguments (line 2204)
    int_278032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 21), 'int')
    # Getting the type of 'N' (line 2204)
    N_278033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 25), 'N', False)
    int_278034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 29), 'int')
    # Applying the binary operator '+' (line 2204)
    result_add_278035 = python_operator(stypy.reporting.localization.Localization(__file__, 2204, 25), '+', N_278033, int_278034)
    
    int_278036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 35), 'int')
    # Applying the binary operator '//' (line 2204)
    result_floordiv_278037 = python_operator(stypy.reporting.localization.Localization(__file__, 2204, 24), '//', result_add_278035, int_278036)
    
    # Processing the call keyword arguments (line 2204)
    kwargs_278038 = {}
    # Getting the type of 'slice' (line 2204)
    slice_278031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 15), 'slice', False)
    # Calling slice(args, kwargs) (line 2204)
    slice_call_result_278039 = invoke(stypy.reporting.localization.Localization(__file__, 2204, 15), slice_278031, *[int_278032, result_floordiv_278037], **kwargs_278038)
    
    # Getting the type of 'sl' (line 2204)
    sl_278040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 4), 'sl')
    # Getting the type of 'axis' (line 2204)
    axis_278041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 7), 'axis')
    # Storing an element on a container (line 2204)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2204, 4), sl_278040, (axis_278041, slice_call_result_278039))
    
    # Assigning a Subscript to a Subscript (line 2205):
    
    # Assigning a Subscript to a Subscript (line 2205):
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2205)
    sl_278042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 14), 'sl')
    # Getting the type of 'X' (line 2205)
    X_278043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 12), 'X')
    # Obtaining the member '__getitem__' of a type (line 2205)
    getitem___278044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 12), X_278043, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2205)
    subscript_call_result_278045 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 12), getitem___278044, sl_278042)
    
    # Getting the type of 'Y' (line 2205)
    Y_278046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 4), 'Y')
    # Getting the type of 'sl' (line 2205)
    sl_278047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 6), 'sl')
    # Storing an element on a container (line 2205)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2205, 4), Y_278046, (sl_278047, subscript_call_result_278045))
    
    # Assigning a Call to a Subscript (line 2206):
    
    # Assigning a Call to a Subscript (line 2206):
    
    # Call to slice(...): (line 2206)
    # Processing the call arguments (line 2206)
    
    # Getting the type of 'N' (line 2206)
    N_278049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 23), 'N', False)
    int_278050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2206, 27), 'int')
    # Applying the binary operator '-' (line 2206)
    result_sub_278051 = python_operator(stypy.reporting.localization.Localization(__file__, 2206, 23), '-', N_278049, int_278050)
    
    # Applying the 'usub' unary operator (line 2206)
    result___neg___278052 = python_operator(stypy.reporting.localization.Localization(__file__, 2206, 21), 'usub', result_sub_278051)
    
    int_278053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2206, 33), 'int')
    # Applying the binary operator '//' (line 2206)
    result_floordiv_278054 = python_operator(stypy.reporting.localization.Localization(__file__, 2206, 21), '//', result___neg___278052, int_278053)
    
    # Getting the type of 'None' (line 2206)
    None_278055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 36), 'None', False)
    # Processing the call keyword arguments (line 2206)
    kwargs_278056 = {}
    # Getting the type of 'slice' (line 2206)
    slice_278048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 15), 'slice', False)
    # Calling slice(args, kwargs) (line 2206)
    slice_call_result_278057 = invoke(stypy.reporting.localization.Localization(__file__, 2206, 15), slice_278048, *[result_floordiv_278054, None_278055], **kwargs_278056)
    
    # Getting the type of 'sl' (line 2206)
    sl_278058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 4), 'sl')
    # Getting the type of 'axis' (line 2206)
    axis_278059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 7), 'axis')
    # Storing an element on a container (line 2206)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2206, 4), sl_278058, (axis_278059, slice_call_result_278057))
    
    # Assigning a Subscript to a Subscript (line 2207):
    
    # Assigning a Subscript to a Subscript (line 2207):
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2207)
    sl_278060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 14), 'sl')
    # Getting the type of 'X' (line 2207)
    X_278061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 12), 'X')
    # Obtaining the member '__getitem__' of a type (line 2207)
    getitem___278062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2207, 12), X_278061, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2207)
    subscript_call_result_278063 = invoke(stypy.reporting.localization.Localization(__file__, 2207, 12), getitem___278062, sl_278060)
    
    # Getting the type of 'Y' (line 2207)
    Y_278064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 4), 'Y')
    # Getting the type of 'sl' (line 2207)
    sl_278065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 6), 'sl')
    # Storing an element on a container (line 2207)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2207, 4), Y_278064, (sl_278065, subscript_call_result_278063))
    
    
    # Getting the type of 'N' (line 2209)
    N_278066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 7), 'N')
    int_278067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2209, 11), 'int')
    # Applying the binary operator '%' (line 2209)
    result_mod_278068 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 7), '%', N_278066, int_278067)
    
    int_278069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2209, 16), 'int')
    # Applying the binary operator '==' (line 2209)
    result_eq_278070 = python_operator(stypy.reporting.localization.Localization(__file__, 2209, 7), '==', result_mod_278068, int_278069)
    
    # Testing the type of an if condition (line 2209)
    if_condition_278071 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2209, 4), result_eq_278070)
    # Assigning a type to the variable 'if_condition_278071' (line 2209)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2209, 4), 'if_condition_278071', if_condition_278071)
    # SSA begins for if statement (line 2209)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'N' (line 2210)
    N_278072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 11), 'N')
    # Getting the type of 'Nx' (line 2210)
    Nx_278073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 15), 'Nx')
    # Applying the binary operator '<' (line 2210)
    result_lt_278074 = python_operator(stypy.reporting.localization.Localization(__file__, 2210, 11), '<', N_278072, Nx_278073)
    
    # Testing the type of an if condition (line 2210)
    if_condition_278075 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2210, 8), result_lt_278074)
    # Assigning a type to the variable 'if_condition_278075' (line 2210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2210, 8), 'if_condition_278075', if_condition_278075)
    # SSA begins for if statement (line 2210)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 2211):
    
    # Assigning a Call to a Subscript (line 2211):
    
    # Call to slice(...): (line 2211)
    # Processing the call arguments (line 2211)
    # Getting the type of 'N' (line 2211)
    N_278077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 29), 'N', False)
    int_278078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 32), 'int')
    # Applying the binary operator '//' (line 2211)
    result_floordiv_278079 = python_operator(stypy.reporting.localization.Localization(__file__, 2211, 29), '//', N_278077, int_278078)
    
    # Getting the type of 'N' (line 2211)
    N_278080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 34), 'N', False)
    int_278081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 37), 'int')
    # Applying the binary operator '//' (line 2211)
    result_floordiv_278082 = python_operator(stypy.reporting.localization.Localization(__file__, 2211, 34), '//', N_278080, int_278081)
    
    int_278083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 39), 'int')
    # Applying the binary operator '+' (line 2211)
    result_add_278084 = python_operator(stypy.reporting.localization.Localization(__file__, 2211, 34), '+', result_floordiv_278082, int_278083)
    
    # Getting the type of 'None' (line 2211)
    None_278085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 41), 'None', False)
    # Processing the call keyword arguments (line 2211)
    kwargs_278086 = {}
    # Getting the type of 'slice' (line 2211)
    slice_278076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 23), 'slice', False)
    # Calling slice(args, kwargs) (line 2211)
    slice_call_result_278087 = invoke(stypy.reporting.localization.Localization(__file__, 2211, 23), slice_278076, *[result_floordiv_278079, result_add_278084, None_278085], **kwargs_278086)
    
    # Getting the type of 'sl' (line 2211)
    sl_278088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 12), 'sl')
    # Getting the type of 'axis' (line 2211)
    axis_278089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 15), 'axis')
    # Storing an element on a container (line 2211)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2211, 12), sl_278088, (axis_278089, slice_call_result_278087))
    
    # Getting the type of 'Y' (line 2212)
    Y_278090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 12), 'Y')
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2212)
    sl_278091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 14), 'sl')
    # Getting the type of 'Y' (line 2212)
    Y_278092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 12), 'Y')
    # Obtaining the member '__getitem__' of a type (line 2212)
    getitem___278093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 12), Y_278092, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2212)
    subscript_call_result_278094 = invoke(stypy.reporting.localization.Localization(__file__, 2212, 12), getitem___278093, sl_278091)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2212)
    sl_278095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 23), 'sl')
    # Getting the type of 'X' (line 2212)
    X_278096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 21), 'X')
    # Obtaining the member '__getitem__' of a type (line 2212)
    getitem___278097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 21), X_278096, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2212)
    subscript_call_result_278098 = invoke(stypy.reporting.localization.Localization(__file__, 2212, 21), getitem___278097, sl_278095)
    
    # Applying the binary operator '+=' (line 2212)
    result_iadd_278099 = python_operator(stypy.reporting.localization.Localization(__file__, 2212, 12), '+=', subscript_call_result_278094, subscript_call_result_278098)
    # Getting the type of 'Y' (line 2212)
    Y_278100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 12), 'Y')
    # Getting the type of 'sl' (line 2212)
    sl_278101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 14), 'sl')
    # Storing an element on a container (line 2212)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2212, 12), Y_278100, (sl_278101, result_iadd_278099))
    
    # SSA branch for the else part of an if statement (line 2210)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'N' (line 2213)
    N_278102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 13), 'N')
    # Getting the type of 'num' (line 2213)
    num_278103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 17), 'num')
    # Applying the binary operator '<' (line 2213)
    result_lt_278104 = python_operator(stypy.reporting.localization.Localization(__file__, 2213, 13), '<', N_278102, num_278103)
    
    # Testing the type of an if condition (line 2213)
    if_condition_278105 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2213, 13), result_lt_278104)
    # Assigning a type to the variable 'if_condition_278105' (line 2213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2213, 13), 'if_condition_278105', if_condition_278105)
    # SSA begins for if statement (line 2213)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 2214):
    
    # Assigning a Call to a Subscript (line 2214):
    
    # Call to slice(...): (line 2214)
    # Processing the call arguments (line 2214)
    # Getting the type of 'num' (line 2214)
    num_278107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 29), 'num', False)
    # Getting the type of 'N' (line 2214)
    N_278108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 33), 'N', False)
    int_278109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 36), 'int')
    # Applying the binary operator '//' (line 2214)
    result_floordiv_278110 = python_operator(stypy.reporting.localization.Localization(__file__, 2214, 33), '//', N_278108, int_278109)
    
    # Applying the binary operator '-' (line 2214)
    result_sub_278111 = python_operator(stypy.reporting.localization.Localization(__file__, 2214, 29), '-', num_278107, result_floordiv_278110)
    
    # Getting the type of 'num' (line 2214)
    num_278112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 38), 'num', False)
    # Getting the type of 'N' (line 2214)
    N_278113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 42), 'N', False)
    int_278114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 45), 'int')
    # Applying the binary operator '//' (line 2214)
    result_floordiv_278115 = python_operator(stypy.reporting.localization.Localization(__file__, 2214, 42), '//', N_278113, int_278114)
    
    # Applying the binary operator '-' (line 2214)
    result_sub_278116 = python_operator(stypy.reporting.localization.Localization(__file__, 2214, 38), '-', num_278112, result_floordiv_278115)
    
    int_278117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 47), 'int')
    # Applying the binary operator '+' (line 2214)
    result_add_278118 = python_operator(stypy.reporting.localization.Localization(__file__, 2214, 46), '+', result_sub_278116, int_278117)
    
    # Getting the type of 'None' (line 2214)
    None_278119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 49), 'None', False)
    # Processing the call keyword arguments (line 2214)
    kwargs_278120 = {}
    # Getting the type of 'slice' (line 2214)
    slice_278106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 23), 'slice', False)
    # Calling slice(args, kwargs) (line 2214)
    slice_call_result_278121 = invoke(stypy.reporting.localization.Localization(__file__, 2214, 23), slice_278106, *[result_sub_278111, result_add_278118, None_278119], **kwargs_278120)
    
    # Getting the type of 'sl' (line 2214)
    sl_278122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 12), 'sl')
    # Getting the type of 'axis' (line 2214)
    axis_278123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2214, 15), 'axis')
    # Storing an element on a container (line 2214)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2214, 12), sl_278122, (axis_278123, slice_call_result_278121))
    
    # Getting the type of 'Y' (line 2215)
    Y_278124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 12), 'Y')
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2215)
    sl_278125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 14), 'sl')
    # Getting the type of 'Y' (line 2215)
    Y_278126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 12), 'Y')
    # Obtaining the member '__getitem__' of a type (line 2215)
    getitem___278127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2215, 12), Y_278126, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2215)
    subscript_call_result_278128 = invoke(stypy.reporting.localization.Localization(__file__, 2215, 12), getitem___278127, sl_278125)
    
    int_278129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2215, 21), 'int')
    # Applying the binary operator 'div=' (line 2215)
    result_div_278130 = python_operator(stypy.reporting.localization.Localization(__file__, 2215, 12), 'div=', subscript_call_result_278128, int_278129)
    # Getting the type of 'Y' (line 2215)
    Y_278131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 12), 'Y')
    # Getting the type of 'sl' (line 2215)
    sl_278132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 14), 'sl')
    # Storing an element on a container (line 2215)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2215, 12), Y_278131, (sl_278132, result_div_278130))
    
    
    # Assigning a Subscript to a Name (line 2216):
    
    # Assigning a Subscript to a Name (line 2216):
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2216)
    sl_278133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 21), 'sl')
    # Getting the type of 'Y' (line 2216)
    Y_278134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 19), 'Y')
    # Obtaining the member '__getitem__' of a type (line 2216)
    getitem___278135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2216, 19), Y_278134, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2216)
    subscript_call_result_278136 = invoke(stypy.reporting.localization.Localization(__file__, 2216, 19), getitem___278135, sl_278133)
    
    # Assigning a type to the variable 'temp' (line 2216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 12), 'temp', subscript_call_result_278136)
    
    # Assigning a Call to a Subscript (line 2217):
    
    # Assigning a Call to a Subscript (line 2217):
    
    # Call to slice(...): (line 2217)
    # Processing the call arguments (line 2217)
    # Getting the type of 'N' (line 2217)
    N_278138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 29), 'N', False)
    int_278139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2217, 32), 'int')
    # Applying the binary operator '//' (line 2217)
    result_floordiv_278140 = python_operator(stypy.reporting.localization.Localization(__file__, 2217, 29), '//', N_278138, int_278139)
    
    # Getting the type of 'N' (line 2217)
    N_278141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 34), 'N', False)
    int_278142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2217, 37), 'int')
    # Applying the binary operator '//' (line 2217)
    result_floordiv_278143 = python_operator(stypy.reporting.localization.Localization(__file__, 2217, 34), '//', N_278141, int_278142)
    
    int_278144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2217, 39), 'int')
    # Applying the binary operator '+' (line 2217)
    result_add_278145 = python_operator(stypy.reporting.localization.Localization(__file__, 2217, 34), '+', result_floordiv_278143, int_278144)
    
    # Getting the type of 'None' (line 2217)
    None_278146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 41), 'None', False)
    # Processing the call keyword arguments (line 2217)
    kwargs_278147 = {}
    # Getting the type of 'slice' (line 2217)
    slice_278137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 23), 'slice', False)
    # Calling slice(args, kwargs) (line 2217)
    slice_call_result_278148 = invoke(stypy.reporting.localization.Localization(__file__, 2217, 23), slice_278137, *[result_floordiv_278140, result_add_278145, None_278146], **kwargs_278147)
    
    # Getting the type of 'sl' (line 2217)
    sl_278149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 12), 'sl')
    # Getting the type of 'axis' (line 2217)
    axis_278150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 15), 'axis')
    # Storing an element on a container (line 2217)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2217, 12), sl_278149, (axis_278150, slice_call_result_278148))
    
    # Assigning a Name to a Subscript (line 2218):
    
    # Assigning a Name to a Subscript (line 2218):
    # Getting the type of 'temp' (line 2218)
    temp_278151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 20), 'temp')
    # Getting the type of 'Y' (line 2218)
    Y_278152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 12), 'Y')
    # Getting the type of 'sl' (line 2218)
    sl_278153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2218, 14), 'sl')
    # Storing an element on a container (line 2218)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2218, 12), Y_278152, (sl_278153, temp_278151))
    # SSA join for if statement (line 2213)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2210)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2209)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2220):
    
    # Assigning a BinOp to a Name (line 2220):
    
    # Call to ifft(...): (line 2220)
    # Processing the call arguments (line 2220)
    # Getting the type of 'Y' (line 2220)
    Y_278156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 21), 'Y', False)
    # Processing the call keyword arguments (line 2220)
    # Getting the type of 'axis' (line 2220)
    axis_278157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 29), 'axis', False)
    keyword_278158 = axis_278157
    kwargs_278159 = {'axis': keyword_278158}
    # Getting the type of 'fftpack' (line 2220)
    fftpack_278154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 8), 'fftpack', False)
    # Obtaining the member 'ifft' of a type (line 2220)
    ifft_278155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2220, 8), fftpack_278154, 'ifft')
    # Calling ifft(args, kwargs) (line 2220)
    ifft_call_result_278160 = invoke(stypy.reporting.localization.Localization(__file__, 2220, 8), ifft_278155, *[Y_278156], **kwargs_278159)
    
    
    # Call to float(...): (line 2220)
    # Processing the call arguments (line 2220)
    # Getting the type of 'num' (line 2220)
    num_278162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 44), 'num', False)
    # Processing the call keyword arguments (line 2220)
    kwargs_278163 = {}
    # Getting the type of 'float' (line 2220)
    float_278161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 38), 'float', False)
    # Calling float(args, kwargs) (line 2220)
    float_call_result_278164 = invoke(stypy.reporting.localization.Localization(__file__, 2220, 38), float_278161, *[num_278162], **kwargs_278163)
    
    
    # Call to float(...): (line 2220)
    # Processing the call arguments (line 2220)
    # Getting the type of 'Nx' (line 2220)
    Nx_278166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 57), 'Nx', False)
    # Processing the call keyword arguments (line 2220)
    kwargs_278167 = {}
    # Getting the type of 'float' (line 2220)
    float_278165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2220, 51), 'float', False)
    # Calling float(args, kwargs) (line 2220)
    float_call_result_278168 = invoke(stypy.reporting.localization.Localization(__file__, 2220, 51), float_278165, *[Nx_278166], **kwargs_278167)
    
    # Applying the binary operator 'div' (line 2220)
    result_div_278169 = python_operator(stypy.reporting.localization.Localization(__file__, 2220, 38), 'div', float_call_result_278164, float_call_result_278168)
    
    # Applying the binary operator '*' (line 2220)
    result_mul_278170 = python_operator(stypy.reporting.localization.Localization(__file__, 2220, 8), '*', ifft_call_result_278160, result_div_278169)
    
    # Assigning a type to the variable 'y' (line 2220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2220, 4), 'y', result_mul_278170)
    
    
    # Getting the type of 'x' (line 2222)
    x_278171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 7), 'x')
    # Obtaining the member 'dtype' of a type (line 2222)
    dtype_278172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 7), x_278171, 'dtype')
    # Obtaining the member 'char' of a type (line 2222)
    char_278173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 7), dtype_278172, 'char')
    
    # Obtaining an instance of the builtin type 'list' (line 2222)
    list_278174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2222, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2222)
    # Adding element type (line 2222)
    str_278175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2222, 28), 'str', 'F')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2222, 27), list_278174, str_278175)
    # Adding element type (line 2222)
    str_278176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2222, 33), 'str', 'D')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2222, 27), list_278174, str_278176)
    
    # Applying the binary operator 'notin' (line 2222)
    result_contains_278177 = python_operator(stypy.reporting.localization.Localization(__file__, 2222, 7), 'notin', char_278173, list_278174)
    
    # Testing the type of an if condition (line 2222)
    if_condition_278178 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2222, 4), result_contains_278177)
    # Assigning a type to the variable 'if_condition_278178' (line 2222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2222, 4), 'if_condition_278178', if_condition_278178)
    # SSA begins for if statement (line 2222)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 2223):
    
    # Assigning a Attribute to a Name (line 2223):
    # Getting the type of 'y' (line 2223)
    y_278179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 12), 'y')
    # Obtaining the member 'real' of a type (line 2223)
    real_278180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2223, 12), y_278179, 'real')
    # Assigning a type to the variable 'y' (line 2223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2223, 8), 'y', real_278180)
    # SSA join for if statement (line 2222)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2225)
    # Getting the type of 't' (line 2225)
    t_278181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 7), 't')
    # Getting the type of 'None' (line 2225)
    None_278182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 12), 'None')
    
    (may_be_278183, more_types_in_union_278184) = may_be_none(t_278181, None_278182)

    if may_be_278183:

        if more_types_in_union_278184:
            # Runtime conditional SSA (line 2225)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 'y' (line 2226)
        y_278185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 15), 'y')
        # Assigning a type to the variable 'stypy_return_type' (line 2226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 8), 'stypy_return_type', y_278185)

        if more_types_in_union_278184:
            # Runtime conditional SSA for else branch (line 2225)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_278183) or more_types_in_union_278184):
        
        # Assigning a BinOp to a Name (line 2228):
        
        # Assigning a BinOp to a Name (line 2228):
        
        # Call to arange(...): (line 2228)
        # Processing the call arguments (line 2228)
        int_278187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, 23), 'int')
        # Getting the type of 'num' (line 2228)
        num_278188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 26), 'num', False)
        # Processing the call keyword arguments (line 2228)
        kwargs_278189 = {}
        # Getting the type of 'arange' (line 2228)
        arange_278186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 16), 'arange', False)
        # Calling arange(args, kwargs) (line 2228)
        arange_call_result_278190 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 16), arange_278186, *[int_278187, num_278188], **kwargs_278189)
        
        
        # Obtaining the type of the subscript
        int_278191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, 36), 'int')
        # Getting the type of 't' (line 2228)
        t_278192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 34), 't')
        # Obtaining the member '__getitem__' of a type (line 2228)
        getitem___278193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 34), t_278192, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2228)
        subscript_call_result_278194 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 34), getitem___278193, int_278191)
        
        
        # Obtaining the type of the subscript
        int_278195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, 43), 'int')
        # Getting the type of 't' (line 2228)
        t_278196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 41), 't')
        # Obtaining the member '__getitem__' of a type (line 2228)
        getitem___278197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 41), t_278196, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2228)
        subscript_call_result_278198 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 41), getitem___278197, int_278195)
        
        # Applying the binary operator '-' (line 2228)
        result_sub_278199 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 34), '-', subscript_call_result_278194, subscript_call_result_278198)
        
        # Applying the binary operator '*' (line 2228)
        result_mul_278200 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 16), '*', arange_call_result_278190, result_sub_278199)
        
        # Getting the type of 'Nx' (line 2228)
        Nx_278201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 49), 'Nx')
        # Applying the binary operator '*' (line 2228)
        result_mul_278202 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 47), '*', result_mul_278200, Nx_278201)
        
        
        # Call to float(...): (line 2228)
        # Processing the call arguments (line 2228)
        # Getting the type of 'num' (line 2228)
        num_278204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 60), 'num', False)
        # Processing the call keyword arguments (line 2228)
        kwargs_278205 = {}
        # Getting the type of 'float' (line 2228)
        float_278203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 54), 'float', False)
        # Calling float(args, kwargs) (line 2228)
        float_call_result_278206 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 54), float_278203, *[num_278204], **kwargs_278205)
        
        # Applying the binary operator 'div' (line 2228)
        result_div_278207 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 52), 'div', result_mul_278202, float_call_result_278206)
        
        
        # Obtaining the type of the subscript
        int_278208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, 69), 'int')
        # Getting the type of 't' (line 2228)
        t_278209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 67), 't')
        # Obtaining the member '__getitem__' of a type (line 2228)
        getitem___278210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 67), t_278209, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2228)
        subscript_call_result_278211 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 67), getitem___278210, int_278208)
        
        # Applying the binary operator '+' (line 2228)
        result_add_278212 = python_operator(stypy.reporting.localization.Localization(__file__, 2228, 16), '+', result_div_278207, subscript_call_result_278211)
        
        # Assigning a type to the variable 'new_t' (line 2228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 8), 'new_t', result_add_278212)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2229)
        tuple_278213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2229, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2229)
        # Adding element type (line 2229)
        # Getting the type of 'y' (line 2229)
        y_278214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 15), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2229, 15), tuple_278213, y_278214)
        # Adding element type (line 2229)
        # Getting the type of 'new_t' (line 2229)
        new_t_278215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2229, 18), 'new_t')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2229, 15), tuple_278213, new_t_278215)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 8), 'stypy_return_type', tuple_278213)

        if (may_be_278183 and more_types_in_union_278184):
            # SSA join for if statement (line 2225)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'resample(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'resample' in the type store
    # Getting the type of 'stypy_return_type' (line 2101)
    stypy_return_type_278216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278216)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'resample'
    return stypy_return_type_278216

# Assigning a type to the variable 'resample' (line 2101)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2101, 0), 'resample', resample)

@norecursion
def resample_poly(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_278217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2232, 36), 'int')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2232)
    tuple_278218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2232, 47), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2232)
    # Adding element type (line 2232)
    str_278219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2232, 47), 'str', 'kaiser')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2232, 47), tuple_278218, str_278219)
    # Adding element type (line 2232)
    float_278220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2232, 57), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2232, 47), tuple_278218, float_278220)
    
    defaults = [int_278217, tuple_278218]
    # Create a new context for function 'resample_poly'
    module_type_store = module_type_store.open_function_context('resample_poly', 2232, 0, False)
    
    # Passed parameters checking function
    resample_poly.stypy_localization = localization
    resample_poly.stypy_type_of_self = None
    resample_poly.stypy_type_store = module_type_store
    resample_poly.stypy_function_name = 'resample_poly'
    resample_poly.stypy_param_names_list = ['x', 'up', 'down', 'axis', 'window']
    resample_poly.stypy_varargs_param_name = None
    resample_poly.stypy_kwargs_param_name = None
    resample_poly.stypy_call_defaults = defaults
    resample_poly.stypy_call_varargs = varargs
    resample_poly.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'resample_poly', ['x', 'up', 'down', 'axis', 'window'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'resample_poly', localization, ['x', 'up', 'down', 'axis', 'window'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'resample_poly(...)' code ##################

    str_278221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2314, (-1)), 'str', "\n    Resample `x` along the given axis using polyphase filtering.\n\n    The signal `x` is upsampled by the factor `up`, a zero-phase low-pass\n    FIR filter is applied, and then it is downsampled by the factor `down`.\n    The resulting sample rate is ``up / down`` times the original sample\n    rate. Values beyond the boundary of the signal are assumed to be zero\n    during the filtering step.\n\n    Parameters\n    ----------\n    x : array_like\n        The data to be resampled.\n    up : int\n        The upsampling factor.\n    down : int\n        The downsampling factor.\n    axis : int, optional\n        The axis of `x` that is resampled. Default is 0.\n    window : string, tuple, or array_like, optional\n        Desired window to use to design the low-pass filter, or the FIR filter\n        coefficients to employ. See below for details.\n\n    Returns\n    -------\n    resampled_x : array\n        The resampled array.\n\n    See Also\n    --------\n    decimate : Downsample the signal after applying an FIR or IIR filter.\n    resample : Resample up or down using the FFT method.\n\n    Notes\n    -----\n    This polyphase method will likely be faster than the Fourier method\n    in `scipy.signal.resample` when the number of samples is large and\n    prime, or when the number of samples is large and `up` and `down`\n    share a large greatest common denominator. The length of the FIR\n    filter used will depend on ``max(up, down) // gcd(up, down)``, and\n    the number of operations during polyphase filtering will depend on\n    the filter length and `down` (see `scipy.signal.upfirdn` for details).\n\n    The argument `window` specifies the FIR low-pass filter design.\n\n    If `window` is an array_like it is assumed to be the FIR filter\n    coefficients. Note that the FIR filter is applied after the upsampling\n    step, so it should be designed to operate on a signal at a sampling\n    frequency higher than the original by a factor of `up//gcd(up, down)`.\n    This function's output will be centered with respect to this array, so it\n    is best to pass a symmetric filter with an odd number of samples if, as\n    is usually the case, a zero-phase filter is desired.\n\n    For any other type of `window`, the functions `scipy.signal.get_window`\n    and `scipy.signal.firwin` are called to generate the appropriate filter\n    coefficients.\n\n    The first sample of the returned vector is the same as the first\n    sample of the input vector. The spacing between samples is changed\n    from ``dx`` to ``dx * down / float(up)``.\n\n    Examples\n    --------\n    Note that the end of the resampled data rises to meet the first\n    sample of the next cycle for the FFT method, and gets closer to zero\n    for the polyphase method:\n\n    >>> from scipy import signal\n\n    >>> x = np.linspace(0, 10, 20, endpoint=False)\n    >>> y = np.cos(-x**2/6.0)\n    >>> f_fft = signal.resample(y, 100)\n    >>> f_poly = signal.resample_poly(y, 100, 20)\n    >>> xnew = np.linspace(0, 10, 100, endpoint=False)\n\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(xnew, f_fft, 'b.-', xnew, f_poly, 'r.-')\n    >>> plt.plot(x, y, 'ko-')\n    >>> plt.plot(10, y[0], 'bo', 10, 0., 'ro')  # boundaries\n    >>> plt.legend(['resample', 'resamp_poly', 'data'], loc='best')\n    >>> plt.show()\n    ")
    
    # Assigning a Call to a Name (line 2315):
    
    # Assigning a Call to a Name (line 2315):
    
    # Call to asarray(...): (line 2315)
    # Processing the call arguments (line 2315)
    # Getting the type of 'x' (line 2315)
    x_278223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 16), 'x', False)
    # Processing the call keyword arguments (line 2315)
    kwargs_278224 = {}
    # Getting the type of 'asarray' (line 2315)
    asarray_278222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2315)
    asarray_call_result_278225 = invoke(stypy.reporting.localization.Localization(__file__, 2315, 8), asarray_278222, *[x_278223], **kwargs_278224)
    
    # Assigning a type to the variable 'x' (line 2315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2315, 4), 'x', asarray_call_result_278225)
    
    
    # Getting the type of 'up' (line 2316)
    up_278226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 7), 'up')
    
    # Call to int(...): (line 2316)
    # Processing the call arguments (line 2316)
    # Getting the type of 'up' (line 2316)
    up_278228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 17), 'up', False)
    # Processing the call keyword arguments (line 2316)
    kwargs_278229 = {}
    # Getting the type of 'int' (line 2316)
    int_278227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 13), 'int', False)
    # Calling int(args, kwargs) (line 2316)
    int_call_result_278230 = invoke(stypy.reporting.localization.Localization(__file__, 2316, 13), int_278227, *[up_278228], **kwargs_278229)
    
    # Applying the binary operator '!=' (line 2316)
    result_ne_278231 = python_operator(stypy.reporting.localization.Localization(__file__, 2316, 7), '!=', up_278226, int_call_result_278230)
    
    # Testing the type of an if condition (line 2316)
    if_condition_278232 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2316, 4), result_ne_278231)
    # Assigning a type to the variable 'if_condition_278232' (line 2316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 4), 'if_condition_278232', if_condition_278232)
    # SSA begins for if statement (line 2316)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2317)
    # Processing the call arguments (line 2317)
    str_278234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2317, 25), 'str', 'up must be an integer')
    # Processing the call keyword arguments (line 2317)
    kwargs_278235 = {}
    # Getting the type of 'ValueError' (line 2317)
    ValueError_278233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2317)
    ValueError_call_result_278236 = invoke(stypy.reporting.localization.Localization(__file__, 2317, 14), ValueError_278233, *[str_278234], **kwargs_278235)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2317, 8), ValueError_call_result_278236, 'raise parameter', BaseException)
    # SSA join for if statement (line 2316)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'down' (line 2318)
    down_278237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 7), 'down')
    
    # Call to int(...): (line 2318)
    # Processing the call arguments (line 2318)
    # Getting the type of 'down' (line 2318)
    down_278239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 19), 'down', False)
    # Processing the call keyword arguments (line 2318)
    kwargs_278240 = {}
    # Getting the type of 'int' (line 2318)
    int_278238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 15), 'int', False)
    # Calling int(args, kwargs) (line 2318)
    int_call_result_278241 = invoke(stypy.reporting.localization.Localization(__file__, 2318, 15), int_278238, *[down_278239], **kwargs_278240)
    
    # Applying the binary operator '!=' (line 2318)
    result_ne_278242 = python_operator(stypy.reporting.localization.Localization(__file__, 2318, 7), '!=', down_278237, int_call_result_278241)
    
    # Testing the type of an if condition (line 2318)
    if_condition_278243 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2318, 4), result_ne_278242)
    # Assigning a type to the variable 'if_condition_278243' (line 2318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2318, 4), 'if_condition_278243', if_condition_278243)
    # SSA begins for if statement (line 2318)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2319)
    # Processing the call arguments (line 2319)
    str_278245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2319, 25), 'str', 'down must be an integer')
    # Processing the call keyword arguments (line 2319)
    kwargs_278246 = {}
    # Getting the type of 'ValueError' (line 2319)
    ValueError_278244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2319)
    ValueError_call_result_278247 = invoke(stypy.reporting.localization.Localization(__file__, 2319, 14), ValueError_278244, *[str_278245], **kwargs_278246)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2319, 8), ValueError_call_result_278247, 'raise parameter', BaseException)
    # SSA join for if statement (line 2318)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2320):
    
    # Assigning a Call to a Name (line 2320):
    
    # Call to int(...): (line 2320)
    # Processing the call arguments (line 2320)
    # Getting the type of 'up' (line 2320)
    up_278249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 13), 'up', False)
    # Processing the call keyword arguments (line 2320)
    kwargs_278250 = {}
    # Getting the type of 'int' (line 2320)
    int_278248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 9), 'int', False)
    # Calling int(args, kwargs) (line 2320)
    int_call_result_278251 = invoke(stypy.reporting.localization.Localization(__file__, 2320, 9), int_278248, *[up_278249], **kwargs_278250)
    
    # Assigning a type to the variable 'up' (line 2320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2320, 4), 'up', int_call_result_278251)
    
    # Assigning a Call to a Name (line 2321):
    
    # Assigning a Call to a Name (line 2321):
    
    # Call to int(...): (line 2321)
    # Processing the call arguments (line 2321)
    # Getting the type of 'down' (line 2321)
    down_278253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 15), 'down', False)
    # Processing the call keyword arguments (line 2321)
    kwargs_278254 = {}
    # Getting the type of 'int' (line 2321)
    int_278252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 11), 'int', False)
    # Calling int(args, kwargs) (line 2321)
    int_call_result_278255 = invoke(stypy.reporting.localization.Localization(__file__, 2321, 11), int_278252, *[down_278253], **kwargs_278254)
    
    # Assigning a type to the variable 'down' (line 2321)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2321, 4), 'down', int_call_result_278255)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'up' (line 2322)
    up_278256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 7), 'up')
    int_278257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2322, 12), 'int')
    # Applying the binary operator '<' (line 2322)
    result_lt_278258 = python_operator(stypy.reporting.localization.Localization(__file__, 2322, 7), '<', up_278256, int_278257)
    
    
    # Getting the type of 'down' (line 2322)
    down_278259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 17), 'down')
    int_278260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2322, 24), 'int')
    # Applying the binary operator '<' (line 2322)
    result_lt_278261 = python_operator(stypy.reporting.localization.Localization(__file__, 2322, 17), '<', down_278259, int_278260)
    
    # Applying the binary operator 'or' (line 2322)
    result_or_keyword_278262 = python_operator(stypy.reporting.localization.Localization(__file__, 2322, 7), 'or', result_lt_278258, result_lt_278261)
    
    # Testing the type of an if condition (line 2322)
    if_condition_278263 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2322, 4), result_or_keyword_278262)
    # Assigning a type to the variable 'if_condition_278263' (line 2322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2322, 4), 'if_condition_278263', if_condition_278263)
    # SSA begins for if statement (line 2322)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2323)
    # Processing the call arguments (line 2323)
    str_278265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2323, 25), 'str', 'up and down must be >= 1')
    # Processing the call keyword arguments (line 2323)
    kwargs_278266 = {}
    # Getting the type of 'ValueError' (line 2323)
    ValueError_278264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2323, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2323)
    ValueError_call_result_278267 = invoke(stypy.reporting.localization.Localization(__file__, 2323, 14), ValueError_278264, *[str_278265], **kwargs_278266)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2323, 8), ValueError_call_result_278267, 'raise parameter', BaseException)
    # SSA join for if statement (line 2322)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2328):
    
    # Assigning a Call to a Name (line 2328):
    
    # Call to gcd(...): (line 2328)
    # Processing the call arguments (line 2328)
    # Getting the type of 'up' (line 2328)
    up_278269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 13), 'up', False)
    # Getting the type of 'down' (line 2328)
    down_278270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 17), 'down', False)
    # Processing the call keyword arguments (line 2328)
    kwargs_278271 = {}
    # Getting the type of 'gcd' (line 2328)
    gcd_278268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 9), 'gcd', False)
    # Calling gcd(args, kwargs) (line 2328)
    gcd_call_result_278272 = invoke(stypy.reporting.localization.Localization(__file__, 2328, 9), gcd_278268, *[up_278269, down_278270], **kwargs_278271)
    
    # Assigning a type to the variable 'g_' (line 2328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2328, 4), 'g_', gcd_call_result_278272)
    
    # Getting the type of 'up' (line 2329)
    up_278273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 4), 'up')
    # Getting the type of 'g_' (line 2329)
    g__278274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 11), 'g_')
    # Applying the binary operator '//=' (line 2329)
    result_ifloordiv_278275 = python_operator(stypy.reporting.localization.Localization(__file__, 2329, 4), '//=', up_278273, g__278274)
    # Assigning a type to the variable 'up' (line 2329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2329, 4), 'up', result_ifloordiv_278275)
    
    
    # Getting the type of 'down' (line 2330)
    down_278276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 4), 'down')
    # Getting the type of 'g_' (line 2330)
    g__278277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 13), 'g_')
    # Applying the binary operator '//=' (line 2330)
    result_ifloordiv_278278 = python_operator(stypy.reporting.localization.Localization(__file__, 2330, 4), '//=', down_278276, g__278277)
    # Assigning a type to the variable 'down' (line 2330)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 4), 'down', result_ifloordiv_278278)
    
    
    
    # Getting the type of 'up' (line 2331)
    up_278279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 7), 'up')
    # Getting the type of 'down' (line 2331)
    down_278280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 13), 'down')
    # Applying the binary operator '==' (line 2331)
    result_eq_278281 = python_operator(stypy.reporting.localization.Localization(__file__, 2331, 7), '==', up_278279, down_278280)
    int_278282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2331, 21), 'int')
    # Applying the binary operator '==' (line 2331)
    result_eq_278283 = python_operator(stypy.reporting.localization.Localization(__file__, 2331, 7), '==', down_278280, int_278282)
    # Applying the binary operator '&' (line 2331)
    result_and__278284 = python_operator(stypy.reporting.localization.Localization(__file__, 2331, 7), '&', result_eq_278281, result_eq_278283)
    
    # Testing the type of an if condition (line 2331)
    if_condition_278285 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2331, 4), result_and__278284)
    # Assigning a type to the variable 'if_condition_278285' (line 2331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2331, 4), 'if_condition_278285', if_condition_278285)
    # SSA begins for if statement (line 2331)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to copy(...): (line 2332)
    # Processing the call keyword arguments (line 2332)
    kwargs_278288 = {}
    # Getting the type of 'x' (line 2332)
    x_278286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 15), 'x', False)
    # Obtaining the member 'copy' of a type (line 2332)
    copy_278287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 15), x_278286, 'copy')
    # Calling copy(args, kwargs) (line 2332)
    copy_call_result_278289 = invoke(stypy.reporting.localization.Localization(__file__, 2332, 15), copy_278287, *[], **kwargs_278288)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 8), 'stypy_return_type', copy_call_result_278289)
    # SSA join for if statement (line 2331)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2333):
    
    # Assigning a BinOp to a Name (line 2333):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2333)
    axis_278290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 20), 'axis')
    # Getting the type of 'x' (line 2333)
    x_278291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 12), 'x')
    # Obtaining the member 'shape' of a type (line 2333)
    shape_278292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2333, 12), x_278291, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2333)
    getitem___278293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2333, 12), shape_278292, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2333)
    subscript_call_result_278294 = invoke(stypy.reporting.localization.Localization(__file__, 2333, 12), getitem___278293, axis_278290)
    
    # Getting the type of 'up' (line 2333)
    up_278295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 28), 'up')
    # Applying the binary operator '*' (line 2333)
    result_mul_278296 = python_operator(stypy.reporting.localization.Localization(__file__, 2333, 12), '*', subscript_call_result_278294, up_278295)
    
    # Assigning a type to the variable 'n_out' (line 2333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2333, 4), 'n_out', result_mul_278296)
    
    # Assigning a BinOp to a Name (line 2334):
    
    # Assigning a BinOp to a Name (line 2334):
    # Getting the type of 'n_out' (line 2334)
    n_out_278297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 12), 'n_out')
    # Getting the type of 'down' (line 2334)
    down_278298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 21), 'down')
    # Applying the binary operator '//' (line 2334)
    result_floordiv_278299 = python_operator(stypy.reporting.localization.Localization(__file__, 2334, 12), '//', n_out_278297, down_278298)
    
    
    # Call to bool(...): (line 2334)
    # Processing the call arguments (line 2334)
    # Getting the type of 'n_out' (line 2334)
    n_out_278301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 33), 'n_out', False)
    # Getting the type of 'down' (line 2334)
    down_278302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 41), 'down', False)
    # Applying the binary operator '%' (line 2334)
    result_mod_278303 = python_operator(stypy.reporting.localization.Localization(__file__, 2334, 33), '%', n_out_278301, down_278302)
    
    # Processing the call keyword arguments (line 2334)
    kwargs_278304 = {}
    # Getting the type of 'bool' (line 2334)
    bool_278300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 28), 'bool', False)
    # Calling bool(args, kwargs) (line 2334)
    bool_call_result_278305 = invoke(stypy.reporting.localization.Localization(__file__, 2334, 28), bool_278300, *[result_mod_278303], **kwargs_278304)
    
    # Applying the binary operator '+' (line 2334)
    result_add_278306 = python_operator(stypy.reporting.localization.Localization(__file__, 2334, 12), '+', result_floordiv_278299, bool_call_result_278305)
    
    # Assigning a type to the variable 'n_out' (line 2334)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2334, 4), 'n_out', result_add_278306)
    
    
    # Call to isinstance(...): (line 2336)
    # Processing the call arguments (line 2336)
    # Getting the type of 'window' (line 2336)
    window_278308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 18), 'window', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2336)
    tuple_278309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2336, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2336)
    # Adding element type (line 2336)
    # Getting the type of 'list' (line 2336)
    list_278310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 27), 'list', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2336, 27), tuple_278309, list_278310)
    # Adding element type (line 2336)
    # Getting the type of 'np' (line 2336)
    np_278311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 33), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 2336)
    ndarray_278312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2336, 33), np_278311, 'ndarray')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2336, 27), tuple_278309, ndarray_278312)
    
    # Processing the call keyword arguments (line 2336)
    kwargs_278313 = {}
    # Getting the type of 'isinstance' (line 2336)
    isinstance_278307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2336)
    isinstance_call_result_278314 = invoke(stypy.reporting.localization.Localization(__file__, 2336, 7), isinstance_278307, *[window_278308, tuple_278309], **kwargs_278313)
    
    # Testing the type of an if condition (line 2336)
    if_condition_278315 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2336, 4), isinstance_call_result_278314)
    # Assigning a type to the variable 'if_condition_278315' (line 2336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2336, 4), 'if_condition_278315', if_condition_278315)
    # SSA begins for if statement (line 2336)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2337):
    
    # Assigning a Call to a Name (line 2337):
    
    # Call to array(...): (line 2337)
    # Processing the call arguments (line 2337)
    # Getting the type of 'window' (line 2337)
    window_278317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 23), 'window', False)
    # Processing the call keyword arguments (line 2337)
    kwargs_278318 = {}
    # Getting the type of 'array' (line 2337)
    array_278316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 17), 'array', False)
    # Calling array(args, kwargs) (line 2337)
    array_call_result_278319 = invoke(stypy.reporting.localization.Localization(__file__, 2337, 17), array_278316, *[window_278317], **kwargs_278318)
    
    # Assigning a type to the variable 'window' (line 2337)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2337, 8), 'window', array_call_result_278319)
    
    
    # Getting the type of 'window' (line 2338)
    window_278320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2338, 11), 'window')
    # Obtaining the member 'ndim' of a type (line 2338)
    ndim_278321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2338, 11), window_278320, 'ndim')
    int_278322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2338, 25), 'int')
    # Applying the binary operator '>' (line 2338)
    result_gt_278323 = python_operator(stypy.reporting.localization.Localization(__file__, 2338, 11), '>', ndim_278321, int_278322)
    
    # Testing the type of an if condition (line 2338)
    if_condition_278324 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2338, 8), result_gt_278323)
    # Assigning a type to the variable 'if_condition_278324' (line 2338)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2338, 8), 'if_condition_278324', if_condition_278324)
    # SSA begins for if statement (line 2338)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2339)
    # Processing the call arguments (line 2339)
    str_278326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2339, 29), 'str', 'window must be 1-D')
    # Processing the call keyword arguments (line 2339)
    kwargs_278327 = {}
    # Getting the type of 'ValueError' (line 2339)
    ValueError_278325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2339)
    ValueError_call_result_278328 = invoke(stypy.reporting.localization.Localization(__file__, 2339, 18), ValueError_278325, *[str_278326], **kwargs_278327)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2339, 12), ValueError_call_result_278328, 'raise parameter', BaseException)
    # SSA join for if statement (line 2338)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2340):
    
    # Assigning a BinOp to a Name (line 2340):
    # Getting the type of 'window' (line 2340)
    window_278329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 20), 'window')
    # Obtaining the member 'size' of a type (line 2340)
    size_278330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 20), window_278329, 'size')
    int_278331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2340, 34), 'int')
    # Applying the binary operator '-' (line 2340)
    result_sub_278332 = python_operator(stypy.reporting.localization.Localization(__file__, 2340, 20), '-', size_278330, int_278331)
    
    int_278333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2340, 40), 'int')
    # Applying the binary operator '//' (line 2340)
    result_floordiv_278334 = python_operator(stypy.reporting.localization.Localization(__file__, 2340, 19), '//', result_sub_278332, int_278333)
    
    # Assigning a type to the variable 'half_len' (line 2340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2340, 8), 'half_len', result_floordiv_278334)
    
    # Assigning a Name to a Name (line 2341):
    
    # Assigning a Name to a Name (line 2341):
    # Getting the type of 'window' (line 2341)
    window_278335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 12), 'window')
    # Assigning a type to the variable 'h' (line 2341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2341, 8), 'h', window_278335)
    # SSA branch for the else part of an if statement (line 2336)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2344):
    
    # Assigning a Call to a Name (line 2344):
    
    # Call to max(...): (line 2344)
    # Processing the call arguments (line 2344)
    # Getting the type of 'up' (line 2344)
    up_278337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 23), 'up', False)
    # Getting the type of 'down' (line 2344)
    down_278338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 27), 'down', False)
    # Processing the call keyword arguments (line 2344)
    kwargs_278339 = {}
    # Getting the type of 'max' (line 2344)
    max_278336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 19), 'max', False)
    # Calling max(args, kwargs) (line 2344)
    max_call_result_278340 = invoke(stypy.reporting.localization.Localization(__file__, 2344, 19), max_278336, *[up_278337, down_278338], **kwargs_278339)
    
    # Assigning a type to the variable 'max_rate' (line 2344)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2344, 8), 'max_rate', max_call_result_278340)
    
    # Assigning a BinOp to a Name (line 2345):
    
    # Assigning a BinOp to a Name (line 2345):
    float_278341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2345, 14), 'float')
    # Getting the type of 'max_rate' (line 2345)
    max_rate_278342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 19), 'max_rate')
    # Applying the binary operator 'div' (line 2345)
    result_div_278343 = python_operator(stypy.reporting.localization.Localization(__file__, 2345, 14), 'div', float_278341, max_rate_278342)
    
    # Assigning a type to the variable 'f_c' (line 2345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2345, 8), 'f_c', result_div_278343)
    
    # Assigning a BinOp to a Name (line 2346):
    
    # Assigning a BinOp to a Name (line 2346):
    int_278344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2346, 19), 'int')
    # Getting the type of 'max_rate' (line 2346)
    max_rate_278345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 24), 'max_rate')
    # Applying the binary operator '*' (line 2346)
    result_mul_278346 = python_operator(stypy.reporting.localization.Localization(__file__, 2346, 19), '*', int_278344, max_rate_278345)
    
    # Assigning a type to the variable 'half_len' (line 2346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2346, 8), 'half_len', result_mul_278346)
    
    # Assigning a Call to a Name (line 2347):
    
    # Assigning a Call to a Name (line 2347):
    
    # Call to firwin(...): (line 2347)
    # Processing the call arguments (line 2347)
    int_278348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2347, 19), 'int')
    # Getting the type of 'half_len' (line 2347)
    half_len_278349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 23), 'half_len', False)
    # Applying the binary operator '*' (line 2347)
    result_mul_278350 = python_operator(stypy.reporting.localization.Localization(__file__, 2347, 19), '*', int_278348, half_len_278349)
    
    int_278351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2347, 34), 'int')
    # Applying the binary operator '+' (line 2347)
    result_add_278352 = python_operator(stypy.reporting.localization.Localization(__file__, 2347, 19), '+', result_mul_278350, int_278351)
    
    # Getting the type of 'f_c' (line 2347)
    f_c_278353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 37), 'f_c', False)
    # Processing the call keyword arguments (line 2347)
    # Getting the type of 'window' (line 2347)
    window_278354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 49), 'window', False)
    keyword_278355 = window_278354
    kwargs_278356 = {'window': keyword_278355}
    # Getting the type of 'firwin' (line 2347)
    firwin_278347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 12), 'firwin', False)
    # Calling firwin(args, kwargs) (line 2347)
    firwin_call_result_278357 = invoke(stypy.reporting.localization.Localization(__file__, 2347, 12), firwin_278347, *[result_add_278352, f_c_278353], **kwargs_278356)
    
    # Assigning a type to the variable 'h' (line 2347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2347, 8), 'h', firwin_call_result_278357)
    # SSA join for if statement (line 2336)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'h' (line 2348)
    h_278358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 4), 'h')
    # Getting the type of 'up' (line 2348)
    up_278359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 9), 'up')
    # Applying the binary operator '*=' (line 2348)
    result_imul_278360 = python_operator(stypy.reporting.localization.Localization(__file__, 2348, 4), '*=', h_278358, up_278359)
    # Assigning a type to the variable 'h' (line 2348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2348, 4), 'h', result_imul_278360)
    
    
    # Assigning a BinOp to a Name (line 2351):
    
    # Assigning a BinOp to a Name (line 2351):
    # Getting the type of 'down' (line 2351)
    down_278361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 17), 'down')
    # Getting the type of 'half_len' (line 2351)
    half_len_278362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 24), 'half_len')
    # Getting the type of 'down' (line 2351)
    down_278363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 35), 'down')
    # Applying the binary operator '%' (line 2351)
    result_mod_278364 = python_operator(stypy.reporting.localization.Localization(__file__, 2351, 24), '%', half_len_278362, down_278363)
    
    # Applying the binary operator '-' (line 2351)
    result_sub_278365 = python_operator(stypy.reporting.localization.Localization(__file__, 2351, 17), '-', down_278361, result_mod_278364)
    
    # Assigning a type to the variable 'n_pre_pad' (line 2351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 4), 'n_pre_pad', result_sub_278365)
    
    # Assigning a Num to a Name (line 2352):
    
    # Assigning a Num to a Name (line 2352):
    int_278366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2352, 17), 'int')
    # Assigning a type to the variable 'n_post_pad' (line 2352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2352, 4), 'n_post_pad', int_278366)
    
    # Assigning a BinOp to a Name (line 2353):
    
    # Assigning a BinOp to a Name (line 2353):
    # Getting the type of 'half_len' (line 2353)
    half_len_278367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 20), 'half_len')
    # Getting the type of 'n_pre_pad' (line 2353)
    n_pre_pad_278368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 31), 'n_pre_pad')
    # Applying the binary operator '+' (line 2353)
    result_add_278369 = python_operator(stypy.reporting.localization.Localization(__file__, 2353, 20), '+', half_len_278367, n_pre_pad_278368)
    
    # Getting the type of 'down' (line 2353)
    down_278370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 45), 'down')
    # Applying the binary operator '//' (line 2353)
    result_floordiv_278371 = python_operator(stypy.reporting.localization.Localization(__file__, 2353, 19), '//', result_add_278369, down_278370)
    
    # Assigning a type to the variable 'n_pre_remove' (line 2353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2353, 4), 'n_pre_remove', result_floordiv_278371)
    
    
    
    # Call to _output_len(...): (line 2355)
    # Processing the call arguments (line 2355)
    
    # Call to len(...): (line 2355)
    # Processing the call arguments (line 2355)
    # Getting the type of 'h' (line 2355)
    h_278374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 26), 'h', False)
    # Processing the call keyword arguments (line 2355)
    kwargs_278375 = {}
    # Getting the type of 'len' (line 2355)
    len_278373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 22), 'len', False)
    # Calling len(args, kwargs) (line 2355)
    len_call_result_278376 = invoke(stypy.reporting.localization.Localization(__file__, 2355, 22), len_278373, *[h_278374], **kwargs_278375)
    
    # Getting the type of 'n_pre_pad' (line 2355)
    n_pre_pad_278377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 31), 'n_pre_pad', False)
    # Applying the binary operator '+' (line 2355)
    result_add_278378 = python_operator(stypy.reporting.localization.Localization(__file__, 2355, 22), '+', len_call_result_278376, n_pre_pad_278377)
    
    # Getting the type of 'n_post_pad' (line 2355)
    n_post_pad_278379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 43), 'n_post_pad', False)
    # Applying the binary operator '+' (line 2355)
    result_add_278380 = python_operator(stypy.reporting.localization.Localization(__file__, 2355, 41), '+', result_add_278378, n_post_pad_278379)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2355)
    axis_278381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 63), 'axis', False)
    # Getting the type of 'x' (line 2355)
    x_278382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 55), 'x', False)
    # Obtaining the member 'shape' of a type (line 2355)
    shape_278383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2355, 55), x_278382, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2355)
    getitem___278384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2355, 55), shape_278383, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2355)
    subscript_call_result_278385 = invoke(stypy.reporting.localization.Localization(__file__, 2355, 55), getitem___278384, axis_278381)
    
    # Getting the type of 'up' (line 2356)
    up_278386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 22), 'up', False)
    # Getting the type of 'down' (line 2356)
    down_278387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 26), 'down', False)
    # Processing the call keyword arguments (line 2355)
    kwargs_278388 = {}
    # Getting the type of '_output_len' (line 2355)
    _output_len_278372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 10), '_output_len', False)
    # Calling _output_len(args, kwargs) (line 2355)
    _output_len_call_result_278389 = invoke(stypy.reporting.localization.Localization(__file__, 2355, 10), _output_len_278372, *[result_add_278380, subscript_call_result_278385, up_278386, down_278387], **kwargs_278388)
    
    # Getting the type of 'n_out' (line 2356)
    n_out_278390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 34), 'n_out')
    # Getting the type of 'n_pre_remove' (line 2356)
    n_pre_remove_278391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 42), 'n_pre_remove')
    # Applying the binary operator '+' (line 2356)
    result_add_278392 = python_operator(stypy.reporting.localization.Localization(__file__, 2356, 34), '+', n_out_278390, n_pre_remove_278391)
    
    # Applying the binary operator '<' (line 2355)
    result_lt_278393 = python_operator(stypy.reporting.localization.Localization(__file__, 2355, 10), '<', _output_len_call_result_278389, result_add_278392)
    
    # Testing the type of an if condition (line 2355)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2355, 4), result_lt_278393)
    # SSA begins for while statement (line 2355)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Getting the type of 'n_post_pad' (line 2357)
    n_post_pad_278394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'n_post_pad')
    int_278395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2357, 22), 'int')
    # Applying the binary operator '+=' (line 2357)
    result_iadd_278396 = python_operator(stypy.reporting.localization.Localization(__file__, 2357, 8), '+=', n_post_pad_278394, int_278395)
    # Assigning a type to the variable 'n_post_pad' (line 2357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'n_post_pad', result_iadd_278396)
    
    # SSA join for while statement (line 2355)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2358):
    
    # Assigning a Call to a Name (line 2358):
    
    # Call to concatenate(...): (line 2358)
    # Processing the call arguments (line 2358)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2358)
    tuple_278399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2358, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2358)
    # Adding element type (line 2358)
    
    # Call to zeros(...): (line 2358)
    # Processing the call arguments (line 2358)
    # Getting the type of 'n_pre_pad' (line 2358)
    n_pre_pad_278402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 33), 'n_pre_pad', False)
    # Processing the call keyword arguments (line 2358)
    kwargs_278403 = {}
    # Getting the type of 'np' (line 2358)
    np_278400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 24), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2358)
    zeros_278401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2358, 24), np_278400, 'zeros')
    # Calling zeros(args, kwargs) (line 2358)
    zeros_call_result_278404 = invoke(stypy.reporting.localization.Localization(__file__, 2358, 24), zeros_278401, *[n_pre_pad_278402], **kwargs_278403)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2358, 24), tuple_278399, zeros_call_result_278404)
    # Adding element type (line 2358)
    # Getting the type of 'h' (line 2358)
    h_278405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 45), 'h', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2358, 24), tuple_278399, h_278405)
    # Adding element type (line 2358)
    
    # Call to zeros(...): (line 2358)
    # Processing the call arguments (line 2358)
    # Getting the type of 'n_post_pad' (line 2358)
    n_post_pad_278408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 57), 'n_post_pad', False)
    # Processing the call keyword arguments (line 2358)
    kwargs_278409 = {}
    # Getting the type of 'np' (line 2358)
    np_278406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 48), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2358)
    zeros_278407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2358, 48), np_278406, 'zeros')
    # Calling zeros(args, kwargs) (line 2358)
    zeros_call_result_278410 = invoke(stypy.reporting.localization.Localization(__file__, 2358, 48), zeros_278407, *[n_post_pad_278408], **kwargs_278409)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2358, 24), tuple_278399, zeros_call_result_278410)
    
    # Processing the call keyword arguments (line 2358)
    kwargs_278411 = {}
    # Getting the type of 'np' (line 2358)
    np_278397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 8), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 2358)
    concatenate_278398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2358, 8), np_278397, 'concatenate')
    # Calling concatenate(args, kwargs) (line 2358)
    concatenate_call_result_278412 = invoke(stypy.reporting.localization.Localization(__file__, 2358, 8), concatenate_278398, *[tuple_278399], **kwargs_278411)
    
    # Assigning a type to the variable 'h' (line 2358)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2358, 4), 'h', concatenate_call_result_278412)
    
    # Assigning a BinOp to a Name (line 2359):
    
    # Assigning a BinOp to a Name (line 2359):
    # Getting the type of 'n_pre_remove' (line 2359)
    n_pre_remove_278413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 23), 'n_pre_remove')
    # Getting the type of 'n_out' (line 2359)
    n_out_278414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 38), 'n_out')
    # Applying the binary operator '+' (line 2359)
    result_add_278415 = python_operator(stypy.reporting.localization.Localization(__file__, 2359, 23), '+', n_pre_remove_278413, n_out_278414)
    
    # Assigning a type to the variable 'n_pre_remove_end' (line 2359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2359, 4), 'n_pre_remove_end', result_add_278415)
    
    # Assigning a Call to a Name (line 2362):
    
    # Assigning a Call to a Name (line 2362):
    
    # Call to upfirdn(...): (line 2362)
    # Processing the call arguments (line 2362)
    # Getting the type of 'h' (line 2362)
    h_278417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 16), 'h', False)
    # Getting the type of 'x' (line 2362)
    x_278418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 19), 'x', False)
    # Getting the type of 'up' (line 2362)
    up_278419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 22), 'up', False)
    # Getting the type of 'down' (line 2362)
    down_278420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 26), 'down', False)
    # Processing the call keyword arguments (line 2362)
    # Getting the type of 'axis' (line 2362)
    axis_278421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 37), 'axis', False)
    keyword_278422 = axis_278421
    kwargs_278423 = {'axis': keyword_278422}
    # Getting the type of 'upfirdn' (line 2362)
    upfirdn_278416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 8), 'upfirdn', False)
    # Calling upfirdn(args, kwargs) (line 2362)
    upfirdn_call_result_278424 = invoke(stypy.reporting.localization.Localization(__file__, 2362, 8), upfirdn_278416, *[h_278417, x_278418, up_278419, down_278420], **kwargs_278423)
    
    # Assigning a type to the variable 'y' (line 2362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2362, 4), 'y', upfirdn_call_result_278424)
    
    # Assigning a BinOp to a Name (line 2363):
    
    # Assigning a BinOp to a Name (line 2363):
    
    # Obtaining an instance of the builtin type 'list' (line 2363)
    list_278425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2363, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2363)
    # Adding element type (line 2363)
    
    # Call to slice(...): (line 2363)
    # Processing the call arguments (line 2363)
    # Getting the type of 'None' (line 2363)
    None_278427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 18), 'None', False)
    # Processing the call keyword arguments (line 2363)
    kwargs_278428 = {}
    # Getting the type of 'slice' (line 2363)
    slice_278426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 12), 'slice', False)
    # Calling slice(args, kwargs) (line 2363)
    slice_call_result_278429 = invoke(stypy.reporting.localization.Localization(__file__, 2363, 12), slice_278426, *[None_278427], **kwargs_278428)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2363, 11), list_278425, slice_call_result_278429)
    
    # Getting the type of 'x' (line 2363)
    x_278430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 27), 'x')
    # Obtaining the member 'ndim' of a type (line 2363)
    ndim_278431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2363, 27), x_278430, 'ndim')
    # Applying the binary operator '*' (line 2363)
    result_mul_278432 = python_operator(stypy.reporting.localization.Localization(__file__, 2363, 11), '*', list_278425, ndim_278431)
    
    # Assigning a type to the variable 'keep' (line 2363)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2363, 4), 'keep', result_mul_278432)
    
    # Assigning a Call to a Subscript (line 2364):
    
    # Assigning a Call to a Subscript (line 2364):
    
    # Call to slice(...): (line 2364)
    # Processing the call arguments (line 2364)
    # Getting the type of 'n_pre_remove' (line 2364)
    n_pre_remove_278434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 23), 'n_pre_remove', False)
    # Getting the type of 'n_pre_remove_end' (line 2364)
    n_pre_remove_end_278435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 37), 'n_pre_remove_end', False)
    # Processing the call keyword arguments (line 2364)
    kwargs_278436 = {}
    # Getting the type of 'slice' (line 2364)
    slice_278433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 17), 'slice', False)
    # Calling slice(args, kwargs) (line 2364)
    slice_call_result_278437 = invoke(stypy.reporting.localization.Localization(__file__, 2364, 17), slice_278433, *[n_pre_remove_278434, n_pre_remove_end_278435], **kwargs_278436)
    
    # Getting the type of 'keep' (line 2364)
    keep_278438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 4), 'keep')
    # Getting the type of 'axis' (line 2364)
    axis_278439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 9), 'axis')
    # Storing an element on a container (line 2364)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2364, 4), keep_278438, (axis_278439, slice_call_result_278437))
    
    # Obtaining the type of the subscript
    # Getting the type of 'keep' (line 2365)
    keep_278440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 13), 'keep')
    # Getting the type of 'y' (line 2365)
    y_278441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 11), 'y')
    # Obtaining the member '__getitem__' of a type (line 2365)
    getitem___278442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2365, 11), y_278441, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2365)
    subscript_call_result_278443 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 11), getitem___278442, keep_278440)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'stypy_return_type', subscript_call_result_278443)
    
    # ################# End of 'resample_poly(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'resample_poly' in the type store
    # Getting the type of 'stypy_return_type' (line 2232)
    stypy_return_type_278444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278444)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'resample_poly'
    return stypy_return_type_278444

# Assigning a type to the variable 'resample_poly' (line 2232)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 0), 'resample_poly', resample_poly)

@norecursion
def vectorstrength(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'vectorstrength'
    module_type_store = module_type_store.open_function_context('vectorstrength', 2368, 0, False)
    
    # Passed parameters checking function
    vectorstrength.stypy_localization = localization
    vectorstrength.stypy_type_of_self = None
    vectorstrength.stypy_type_store = module_type_store
    vectorstrength.stypy_function_name = 'vectorstrength'
    vectorstrength.stypy_param_names_list = ['events', 'period']
    vectorstrength.stypy_varargs_param_name = None
    vectorstrength.stypy_kwargs_param_name = None
    vectorstrength.stypy_call_defaults = defaults
    vectorstrength.stypy_call_varargs = varargs
    vectorstrength.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'vectorstrength', ['events', 'period'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'vectorstrength', localization, ['events', 'period'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'vectorstrength(...)' code ##################

    str_278445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2414, (-1)), 'str', '\n    Determine the vector strength of the events corresponding to the given\n    period.\n\n    The vector strength is a measure of phase synchrony, how well the\n    timing of the events is synchronized to a single period of a periodic\n    signal.\n\n    If multiple periods are used, calculate the vector strength of each.\n    This is called the "resonating vector strength".\n\n    Parameters\n    ----------\n    events : 1D array_like\n        An array of time points containing the timing of the events.\n    period : float or array_like\n        The period of the signal that the events should synchronize to.\n        The period is in the same units as `events`.  It can also be an array\n        of periods, in which case the outputs are arrays of the same length.\n\n    Returns\n    -------\n    strength : float or 1D array\n        The strength of the synchronization.  1.0 is perfect synchronization\n        and 0.0 is no synchronization.  If `period` is an array, this is also\n        an array with each element containing the vector strength at the\n        corresponding period.\n    phase : float or array\n        The phase that the events are most strongly synchronized to in radians.\n        If `period` is an array, this is also an array with each element\n        containing the phase for the corresponding period.\n\n    References\n    ----------\n    van Hemmen, JL, Longtin, A, and Vollmayr, AN. Testing resonating vector\n        strength: Auditory system, electric fish, and noise.\n        Chaos 21, 047508 (2011);\n        :doi:`10.1063/1.3670512`.\n    van Hemmen, JL.  Vector strength after Goldberg, Brown, and von Mises:\n        biological and mathematical perspectives.  Biol Cybern.\n        2013 Aug;107(4):385-96. :doi:`10.1007/s00422-013-0561-7`.\n    van Hemmen, JL and Vollmayr, AN.  Resonating vector strength: what happens\n        when we vary the "probing" frequency while keeping the spike times\n        fixed.  Biol Cybern. 2013 Aug;107(4):491-94.\n        :doi:`10.1007/s00422-013-0560-8`.\n    ')
    
    # Assigning a Call to a Name (line 2415):
    
    # Assigning a Call to a Name (line 2415):
    
    # Call to asarray(...): (line 2415)
    # Processing the call arguments (line 2415)
    # Getting the type of 'events' (line 2415)
    events_278447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 21), 'events', False)
    # Processing the call keyword arguments (line 2415)
    kwargs_278448 = {}
    # Getting the type of 'asarray' (line 2415)
    asarray_278446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 13), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2415)
    asarray_call_result_278449 = invoke(stypy.reporting.localization.Localization(__file__, 2415, 13), asarray_278446, *[events_278447], **kwargs_278448)
    
    # Assigning a type to the variable 'events' (line 2415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2415, 4), 'events', asarray_call_result_278449)
    
    # Assigning a Call to a Name (line 2416):
    
    # Assigning a Call to a Name (line 2416):
    
    # Call to asarray(...): (line 2416)
    # Processing the call arguments (line 2416)
    # Getting the type of 'period' (line 2416)
    period_278451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 21), 'period', False)
    # Processing the call keyword arguments (line 2416)
    kwargs_278452 = {}
    # Getting the type of 'asarray' (line 2416)
    asarray_278450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 13), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2416)
    asarray_call_result_278453 = invoke(stypy.reporting.localization.Localization(__file__, 2416, 13), asarray_278450, *[period_278451], **kwargs_278452)
    
    # Assigning a type to the variable 'period' (line 2416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2416, 4), 'period', asarray_call_result_278453)
    
    
    # Getting the type of 'events' (line 2417)
    events_278454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 7), 'events')
    # Obtaining the member 'ndim' of a type (line 2417)
    ndim_278455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2417, 7), events_278454, 'ndim')
    int_278456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2417, 21), 'int')
    # Applying the binary operator '>' (line 2417)
    result_gt_278457 = python_operator(stypy.reporting.localization.Localization(__file__, 2417, 7), '>', ndim_278455, int_278456)
    
    # Testing the type of an if condition (line 2417)
    if_condition_278458 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2417, 4), result_gt_278457)
    # Assigning a type to the variable 'if_condition_278458' (line 2417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2417, 4), 'if_condition_278458', if_condition_278458)
    # SSA begins for if statement (line 2417)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2418)
    # Processing the call arguments (line 2418)
    str_278460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2418, 25), 'str', 'events cannot have dimensions more than 1')
    # Processing the call keyword arguments (line 2418)
    kwargs_278461 = {}
    # Getting the type of 'ValueError' (line 2418)
    ValueError_278459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2418)
    ValueError_call_result_278462 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 14), ValueError_278459, *[str_278460], **kwargs_278461)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2418, 8), ValueError_call_result_278462, 'raise parameter', BaseException)
    # SSA join for if statement (line 2417)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'period' (line 2419)
    period_278463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 7), 'period')
    # Obtaining the member 'ndim' of a type (line 2419)
    ndim_278464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2419, 7), period_278463, 'ndim')
    int_278465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2419, 21), 'int')
    # Applying the binary operator '>' (line 2419)
    result_gt_278466 = python_operator(stypy.reporting.localization.Localization(__file__, 2419, 7), '>', ndim_278464, int_278465)
    
    # Testing the type of an if condition (line 2419)
    if_condition_278467 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2419, 4), result_gt_278466)
    # Assigning a type to the variable 'if_condition_278467' (line 2419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2419, 4), 'if_condition_278467', if_condition_278467)
    # SSA begins for if statement (line 2419)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2420)
    # Processing the call arguments (line 2420)
    str_278469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2420, 25), 'str', 'period cannot have dimensions more than 1')
    # Processing the call keyword arguments (line 2420)
    kwargs_278470 = {}
    # Getting the type of 'ValueError' (line 2420)
    ValueError_278468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2420)
    ValueError_call_result_278471 = invoke(stypy.reporting.localization.Localization(__file__, 2420, 14), ValueError_278468, *[str_278469], **kwargs_278470)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2420, 8), ValueError_call_result_278471, 'raise parameter', BaseException)
    # SSA join for if statement (line 2419)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a UnaryOp to a Name (line 2423):
    
    # Assigning a UnaryOp to a Name (line 2423):
    
    # Getting the type of 'period' (line 2423)
    period_278472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 23), 'period')
    # Obtaining the member 'ndim' of a type (line 2423)
    ndim_278473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2423, 23), period_278472, 'ndim')
    # Applying the 'not' unary operator (line 2423)
    result_not__278474 = python_operator(stypy.reporting.localization.Localization(__file__, 2423, 19), 'not', ndim_278473)
    
    # Assigning a type to the variable 'scalarperiod' (line 2423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2423, 4), 'scalarperiod', result_not__278474)
    
    # Assigning a Call to a Name (line 2425):
    
    # Assigning a Call to a Name (line 2425):
    
    # Call to atleast_2d(...): (line 2425)
    # Processing the call arguments (line 2425)
    # Getting the type of 'events' (line 2425)
    events_278476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2425, 24), 'events', False)
    # Processing the call keyword arguments (line 2425)
    kwargs_278477 = {}
    # Getting the type of 'atleast_2d' (line 2425)
    atleast_2d_278475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2425, 13), 'atleast_2d', False)
    # Calling atleast_2d(args, kwargs) (line 2425)
    atleast_2d_call_result_278478 = invoke(stypy.reporting.localization.Localization(__file__, 2425, 13), atleast_2d_278475, *[events_278476], **kwargs_278477)
    
    # Assigning a type to the variable 'events' (line 2425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2425, 4), 'events', atleast_2d_call_result_278478)
    
    # Assigning a Call to a Name (line 2426):
    
    # Assigning a Call to a Name (line 2426):
    
    # Call to atleast_2d(...): (line 2426)
    # Processing the call arguments (line 2426)
    # Getting the type of 'period' (line 2426)
    period_278480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 24), 'period', False)
    # Processing the call keyword arguments (line 2426)
    kwargs_278481 = {}
    # Getting the type of 'atleast_2d' (line 2426)
    atleast_2d_278479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2426, 13), 'atleast_2d', False)
    # Calling atleast_2d(args, kwargs) (line 2426)
    atleast_2d_call_result_278482 = invoke(stypy.reporting.localization.Localization(__file__, 2426, 13), atleast_2d_278479, *[period_278480], **kwargs_278481)
    
    # Assigning a type to the variable 'period' (line 2426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2426, 4), 'period', atleast_2d_call_result_278482)
    
    
    # Call to any(...): (line 2427)
    # Processing the call keyword arguments (line 2427)
    kwargs_278487 = {}
    
    # Getting the type of 'period' (line 2427)
    period_278483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 8), 'period', False)
    int_278484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2427, 18), 'int')
    # Applying the binary operator '<=' (line 2427)
    result_le_278485 = python_operator(stypy.reporting.localization.Localization(__file__, 2427, 8), '<=', period_278483, int_278484)
    
    # Obtaining the member 'any' of a type (line 2427)
    any_278486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2427, 8), result_le_278485, 'any')
    # Calling any(args, kwargs) (line 2427)
    any_call_result_278488 = invoke(stypy.reporting.localization.Localization(__file__, 2427, 8), any_278486, *[], **kwargs_278487)
    
    # Testing the type of an if condition (line 2427)
    if_condition_278489 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2427, 4), any_call_result_278488)
    # Assigning a type to the variable 'if_condition_278489' (line 2427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2427, 4), 'if_condition_278489', if_condition_278489)
    # SSA begins for if statement (line 2427)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2428)
    # Processing the call arguments (line 2428)
    str_278491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2428, 25), 'str', 'periods must be positive')
    # Processing the call keyword arguments (line 2428)
    kwargs_278492 = {}
    # Getting the type of 'ValueError' (line 2428)
    ValueError_278490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2428, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2428)
    ValueError_call_result_278493 = invoke(stypy.reporting.localization.Localization(__file__, 2428, 14), ValueError_278490, *[str_278491], **kwargs_278492)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2428, 8), ValueError_call_result_278493, 'raise parameter', BaseException)
    # SSA join for if statement (line 2427)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2431):
    
    # Assigning a Call to a Name (line 2431):
    
    # Call to exp(...): (line 2431)
    # Processing the call arguments (line 2431)
    
    # Call to dot(...): (line 2431)
    # Processing the call arguments (line 2431)
    complex_278496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2431, 22), 'complex')
    # Getting the type of 'pi' (line 2431)
    pi_278497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 25), 'pi', False)
    # Applying the binary operator '*' (line 2431)
    result_mul_278498 = python_operator(stypy.reporting.localization.Localization(__file__, 2431, 22), '*', complex_278496, pi_278497)
    
    # Getting the type of 'period' (line 2431)
    period_278499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 28), 'period', False)
    # Obtaining the member 'T' of a type (line 2431)
    T_278500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2431, 28), period_278499, 'T')
    # Applying the binary operator 'div' (line 2431)
    result_div_278501 = python_operator(stypy.reporting.localization.Localization(__file__, 2431, 27), 'div', result_mul_278498, T_278500)
    
    # Getting the type of 'events' (line 2431)
    events_278502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 38), 'events', False)
    # Processing the call keyword arguments (line 2431)
    kwargs_278503 = {}
    # Getting the type of 'dot' (line 2431)
    dot_278495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 18), 'dot', False)
    # Calling dot(args, kwargs) (line 2431)
    dot_call_result_278504 = invoke(stypy.reporting.localization.Localization(__file__, 2431, 18), dot_278495, *[result_div_278501, events_278502], **kwargs_278503)
    
    # Processing the call keyword arguments (line 2431)
    kwargs_278505 = {}
    # Getting the type of 'exp' (line 2431)
    exp_278494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 14), 'exp', False)
    # Calling exp(args, kwargs) (line 2431)
    exp_call_result_278506 = invoke(stypy.reporting.localization.Localization(__file__, 2431, 14), exp_278494, *[dot_call_result_278504], **kwargs_278505)
    
    # Assigning a type to the variable 'vectors' (line 2431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2431, 4), 'vectors', exp_call_result_278506)
    
    # Assigning a Call to a Name (line 2435):
    
    # Assigning a Call to a Name (line 2435):
    
    # Call to mean(...): (line 2435)
    # Processing the call arguments (line 2435)
    # Getting the type of 'vectors' (line 2435)
    vectors_278508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 22), 'vectors', False)
    # Processing the call keyword arguments (line 2435)
    int_278509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 36), 'int')
    keyword_278510 = int_278509
    kwargs_278511 = {'axis': keyword_278510}
    # Getting the type of 'mean' (line 2435)
    mean_278507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 17), 'mean', False)
    # Calling mean(args, kwargs) (line 2435)
    mean_call_result_278512 = invoke(stypy.reporting.localization.Localization(__file__, 2435, 17), mean_278507, *[vectors_278508], **kwargs_278511)
    
    # Assigning a type to the variable 'vectormean' (line 2435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2435, 4), 'vectormean', mean_call_result_278512)
    
    # Assigning a Call to a Name (line 2436):
    
    # Assigning a Call to a Name (line 2436):
    
    # Call to abs(...): (line 2436)
    # Processing the call arguments (line 2436)
    # Getting the type of 'vectormean' (line 2436)
    vectormean_278514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 19), 'vectormean', False)
    # Processing the call keyword arguments (line 2436)
    kwargs_278515 = {}
    # Getting the type of 'abs' (line 2436)
    abs_278513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 15), 'abs', False)
    # Calling abs(args, kwargs) (line 2436)
    abs_call_result_278516 = invoke(stypy.reporting.localization.Localization(__file__, 2436, 15), abs_278513, *[vectormean_278514], **kwargs_278515)
    
    # Assigning a type to the variable 'strength' (line 2436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2436, 4), 'strength', abs_call_result_278516)
    
    # Assigning a Call to a Name (line 2437):
    
    # Assigning a Call to a Name (line 2437):
    
    # Call to angle(...): (line 2437)
    # Processing the call arguments (line 2437)
    # Getting the type of 'vectormean' (line 2437)
    vectormean_278518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 18), 'vectormean', False)
    # Processing the call keyword arguments (line 2437)
    kwargs_278519 = {}
    # Getting the type of 'angle' (line 2437)
    angle_278517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 12), 'angle', False)
    # Calling angle(args, kwargs) (line 2437)
    angle_call_result_278520 = invoke(stypy.reporting.localization.Localization(__file__, 2437, 12), angle_278517, *[vectormean_278518], **kwargs_278519)
    
    # Assigning a type to the variable 'phase' (line 2437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2437, 4), 'phase', angle_call_result_278520)
    
    # Getting the type of 'scalarperiod' (line 2440)
    scalarperiod_278521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 7), 'scalarperiod')
    # Testing the type of an if condition (line 2440)
    if_condition_278522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2440, 4), scalarperiod_278521)
    # Assigning a type to the variable 'if_condition_278522' (line 2440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2440, 4), 'if_condition_278522', if_condition_278522)
    # SSA begins for if statement (line 2440)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2441):
    
    # Assigning a Subscript to a Name (line 2441):
    
    # Obtaining the type of the subscript
    int_278523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2441, 28), 'int')
    # Getting the type of 'strength' (line 2441)
    strength_278524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 19), 'strength')
    # Obtaining the member '__getitem__' of a type (line 2441)
    getitem___278525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2441, 19), strength_278524, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2441)
    subscript_call_result_278526 = invoke(stypy.reporting.localization.Localization(__file__, 2441, 19), getitem___278525, int_278523)
    
    # Assigning a type to the variable 'strength' (line 2441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2441, 8), 'strength', subscript_call_result_278526)
    
    # Assigning a Subscript to a Name (line 2442):
    
    # Assigning a Subscript to a Name (line 2442):
    
    # Obtaining the type of the subscript
    int_278527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2442, 22), 'int')
    # Getting the type of 'phase' (line 2442)
    phase_278528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 16), 'phase')
    # Obtaining the member '__getitem__' of a type (line 2442)
    getitem___278529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2442, 16), phase_278528, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2442)
    subscript_call_result_278530 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 16), getitem___278529, int_278527)
    
    # Assigning a type to the variable 'phase' (line 2442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 8), 'phase', subscript_call_result_278530)
    # SSA join for if statement (line 2440)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2443)
    tuple_278531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2443, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2443)
    # Adding element type (line 2443)
    # Getting the type of 'strength' (line 2443)
    strength_278532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 11), 'strength')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2443, 11), tuple_278531, strength_278532)
    # Adding element type (line 2443)
    # Getting the type of 'phase' (line 2443)
    phase_278533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 21), 'phase')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2443, 11), tuple_278531, phase_278533)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2443, 4), 'stypy_return_type', tuple_278531)
    
    # ################# End of 'vectorstrength(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'vectorstrength' in the type store
    # Getting the type of 'stypy_return_type' (line 2368)
    stypy_return_type_278534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278534)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'vectorstrength'
    return stypy_return_type_278534

# Assigning a type to the variable 'vectorstrength' (line 2368)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2368, 0), 'vectorstrength', vectorstrength)

@norecursion
def detrend(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_278535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2446, 23), 'int')
    str_278536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2446, 32), 'str', 'linear')
    int_278537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2446, 45), 'int')
    defaults = [int_278535, str_278536, int_278537]
    # Create a new context for function 'detrend'
    module_type_store = module_type_store.open_function_context('detrend', 2446, 0, False)
    
    # Passed parameters checking function
    detrend.stypy_localization = localization
    detrend.stypy_type_of_self = None
    detrend.stypy_type_store = module_type_store
    detrend.stypy_function_name = 'detrend'
    detrend.stypy_param_names_list = ['data', 'axis', 'type', 'bp']
    detrend.stypy_varargs_param_name = None
    detrend.stypy_kwargs_param_name = None
    detrend.stypy_call_defaults = defaults
    detrend.stypy_call_varargs = varargs
    detrend.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'detrend', ['data', 'axis', 'type', 'bp'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'detrend', localization, ['data', 'axis', 'type', 'bp'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'detrend(...)' code ##################

    str_278538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2482, (-1)), 'str', "\n    Remove linear trend along axis from data.\n\n    Parameters\n    ----------\n    data : array_like\n        The input data.\n    axis : int, optional\n        The axis along which to detrend the data. By default this is the\n        last axis (-1).\n    type : {'linear', 'constant'}, optional\n        The type of detrending. If ``type == 'linear'`` (default),\n        the result of a linear least-squares fit to `data` is subtracted\n        from `data`.\n        If ``type == 'constant'``, only the mean of `data` is subtracted.\n    bp : array_like of ints, optional\n        A sequence of break points. If given, an individual linear fit is\n        performed for each part of `data` between two break points.\n        Break points are specified as indices into `data`.\n\n    Returns\n    -------\n    ret : ndarray\n        The detrended input data.\n\n    Examples\n    --------\n    >>> from scipy import signal\n    >>> randgen = np.random.RandomState(9)\n    >>> npoints = 1000\n    >>> noise = randgen.randn(npoints)\n    >>> x = 3 + 2*np.linspace(0, 1, npoints) + noise\n    >>> (signal.detrend(x) - noise).max() < 0.01\n    True\n\n    ")
    
    
    # Getting the type of 'type' (line 2483)
    type_278539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 7), 'type')
    
    # Obtaining an instance of the builtin type 'list' (line 2483)
    list_278540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2483)
    # Adding element type (line 2483)
    str_278541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 20), 'str', 'linear')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2483, 19), list_278540, str_278541)
    # Adding element type (line 2483)
    str_278542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 30), 'str', 'l')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2483, 19), list_278540, str_278542)
    # Adding element type (line 2483)
    str_278543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 35), 'str', 'constant')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2483, 19), list_278540, str_278543)
    # Adding element type (line 2483)
    str_278544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 47), 'str', 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2483, 19), list_278540, str_278544)
    
    # Applying the binary operator 'notin' (line 2483)
    result_contains_278545 = python_operator(stypy.reporting.localization.Localization(__file__, 2483, 7), 'notin', type_278539, list_278540)
    
    # Testing the type of an if condition (line 2483)
    if_condition_278546 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2483, 4), result_contains_278545)
    # Assigning a type to the variable 'if_condition_278546' (line 2483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2483, 4), 'if_condition_278546', if_condition_278546)
    # SSA begins for if statement (line 2483)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2484)
    # Processing the call arguments (line 2484)
    str_278548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2484, 25), 'str', "Trend type must be 'linear' or 'constant'.")
    # Processing the call keyword arguments (line 2484)
    kwargs_278549 = {}
    # Getting the type of 'ValueError' (line 2484)
    ValueError_278547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2484)
    ValueError_call_result_278550 = invoke(stypy.reporting.localization.Localization(__file__, 2484, 14), ValueError_278547, *[str_278548], **kwargs_278549)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2484, 8), ValueError_call_result_278550, 'raise parameter', BaseException)
    # SSA join for if statement (line 2483)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2485):
    
    # Assigning a Call to a Name (line 2485):
    
    # Call to asarray(...): (line 2485)
    # Processing the call arguments (line 2485)
    # Getting the type of 'data' (line 2485)
    data_278552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 19), 'data', False)
    # Processing the call keyword arguments (line 2485)
    kwargs_278553 = {}
    # Getting the type of 'asarray' (line 2485)
    asarray_278551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 11), 'asarray', False)
    # Calling asarray(args, kwargs) (line 2485)
    asarray_call_result_278554 = invoke(stypy.reporting.localization.Localization(__file__, 2485, 11), asarray_278551, *[data_278552], **kwargs_278553)
    
    # Assigning a type to the variable 'data' (line 2485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2485, 4), 'data', asarray_call_result_278554)
    
    # Assigning a Attribute to a Name (line 2486):
    
    # Assigning a Attribute to a Name (line 2486):
    # Getting the type of 'data' (line 2486)
    data_278555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 12), 'data')
    # Obtaining the member 'dtype' of a type (line 2486)
    dtype_278556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 12), data_278555, 'dtype')
    # Obtaining the member 'char' of a type (line 2486)
    char_278557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 12), dtype_278556, 'char')
    # Assigning a type to the variable 'dtype' (line 2486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2486, 4), 'dtype', char_278557)
    
    
    # Getting the type of 'dtype' (line 2487)
    dtype_278558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 7), 'dtype')
    str_278559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2487, 20), 'str', 'dfDF')
    # Applying the binary operator 'notin' (line 2487)
    result_contains_278560 = python_operator(stypy.reporting.localization.Localization(__file__, 2487, 7), 'notin', dtype_278558, str_278559)
    
    # Testing the type of an if condition (line 2487)
    if_condition_278561 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2487, 4), result_contains_278560)
    # Assigning a type to the variable 'if_condition_278561' (line 2487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2487, 4), 'if_condition_278561', if_condition_278561)
    # SSA begins for if statement (line 2487)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 2488):
    
    # Assigning a Str to a Name (line 2488):
    str_278562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2488, 16), 'str', 'd')
    # Assigning a type to the variable 'dtype' (line 2488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2488, 8), 'dtype', str_278562)
    # SSA join for if statement (line 2487)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'type' (line 2489)
    type_278563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 7), 'type')
    
    # Obtaining an instance of the builtin type 'list' (line 2489)
    list_278564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2489, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2489)
    # Adding element type (line 2489)
    str_278565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2489, 16), 'str', 'constant')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2489, 15), list_278564, str_278565)
    # Adding element type (line 2489)
    str_278566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2489, 28), 'str', 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2489, 15), list_278564, str_278566)
    
    # Applying the binary operator 'in' (line 2489)
    result_contains_278567 = python_operator(stypy.reporting.localization.Localization(__file__, 2489, 7), 'in', type_278563, list_278564)
    
    # Testing the type of an if condition (line 2489)
    if_condition_278568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2489, 4), result_contains_278567)
    # Assigning a type to the variable 'if_condition_278568' (line 2489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2489, 4), 'if_condition_278568', if_condition_278568)
    # SSA begins for if statement (line 2489)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2490):
    
    # Assigning a BinOp to a Name (line 2490):
    # Getting the type of 'data' (line 2490)
    data_278569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 14), 'data')
    
    # Call to expand_dims(...): (line 2490)
    # Processing the call arguments (line 2490)
    
    # Call to mean(...): (line 2490)
    # Processing the call arguments (line 2490)
    # Getting the type of 'data' (line 2490)
    data_278572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 38), 'data', False)
    # Getting the type of 'axis' (line 2490)
    axis_278573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 44), 'axis', False)
    # Processing the call keyword arguments (line 2490)
    kwargs_278574 = {}
    # Getting the type of 'mean' (line 2490)
    mean_278571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 33), 'mean', False)
    # Calling mean(args, kwargs) (line 2490)
    mean_call_result_278575 = invoke(stypy.reporting.localization.Localization(__file__, 2490, 33), mean_278571, *[data_278572, axis_278573], **kwargs_278574)
    
    # Getting the type of 'axis' (line 2490)
    axis_278576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 51), 'axis', False)
    # Processing the call keyword arguments (line 2490)
    kwargs_278577 = {}
    # Getting the type of 'expand_dims' (line 2490)
    expand_dims_278570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 21), 'expand_dims', False)
    # Calling expand_dims(args, kwargs) (line 2490)
    expand_dims_call_result_278578 = invoke(stypy.reporting.localization.Localization(__file__, 2490, 21), expand_dims_278570, *[mean_call_result_278575, axis_278576], **kwargs_278577)
    
    # Applying the binary operator '-' (line 2490)
    result_sub_278579 = python_operator(stypy.reporting.localization.Localization(__file__, 2490, 14), '-', data_278569, expand_dims_call_result_278578)
    
    # Assigning a type to the variable 'ret' (line 2490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2490, 8), 'ret', result_sub_278579)
    # Getting the type of 'ret' (line 2491)
    ret_278580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2491, 15), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2491, 8), 'stypy_return_type', ret_278580)
    # SSA branch for the else part of an if statement (line 2489)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 2493):
    
    # Assigning a Attribute to a Name (line 2493):
    # Getting the type of 'data' (line 2493)
    data_278581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 17), 'data')
    # Obtaining the member 'shape' of a type (line 2493)
    shape_278582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2493, 17), data_278581, 'shape')
    # Assigning a type to the variable 'dshape' (line 2493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2493, 8), 'dshape', shape_278582)
    
    # Assigning a Subscript to a Name (line 2494):
    
    # Assigning a Subscript to a Name (line 2494):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2494)
    axis_278583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 19), 'axis')
    # Getting the type of 'dshape' (line 2494)
    dshape_278584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 12), 'dshape')
    # Obtaining the member '__getitem__' of a type (line 2494)
    getitem___278585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2494, 12), dshape_278584, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2494)
    subscript_call_result_278586 = invoke(stypy.reporting.localization.Localization(__file__, 2494, 12), getitem___278585, axis_278583)
    
    # Assigning a type to the variable 'N' (line 2494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2494, 8), 'N', subscript_call_result_278586)
    
    # Assigning a Call to a Name (line 2495):
    
    # Assigning a Call to a Name (line 2495):
    
    # Call to sort(...): (line 2495)
    # Processing the call arguments (line 2495)
    
    # Call to unique(...): (line 2495)
    # Processing the call arguments (line 2495)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2495)
    tuple_278589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2495, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2495)
    # Adding element type (line 2495)
    int_278590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2495, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2495, 28), tuple_278589, int_278590)
    # Adding element type (line 2495)
    # Getting the type of 'bp' (line 2495)
    bp_278591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 31), 'bp', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2495, 28), tuple_278589, bp_278591)
    # Adding element type (line 2495)
    # Getting the type of 'N' (line 2495)
    N_278592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 35), 'N', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2495, 28), tuple_278589, N_278592)
    
    # Getting the type of 'r_' (line 2495)
    r__278593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 25), 'r_', False)
    # Obtaining the member '__getitem__' of a type (line 2495)
    getitem___278594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2495, 25), r__278593, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2495)
    subscript_call_result_278595 = invoke(stypy.reporting.localization.Localization(__file__, 2495, 25), getitem___278594, tuple_278589)
    
    # Processing the call keyword arguments (line 2495)
    kwargs_278596 = {}
    # Getting the type of 'unique' (line 2495)
    unique_278588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 18), 'unique', False)
    # Calling unique(args, kwargs) (line 2495)
    unique_call_result_278597 = invoke(stypy.reporting.localization.Localization(__file__, 2495, 18), unique_278588, *[subscript_call_result_278595], **kwargs_278596)
    
    # Processing the call keyword arguments (line 2495)
    kwargs_278598 = {}
    # Getting the type of 'sort' (line 2495)
    sort_278587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 13), 'sort', False)
    # Calling sort(args, kwargs) (line 2495)
    sort_call_result_278599 = invoke(stypy.reporting.localization.Localization(__file__, 2495, 13), sort_278587, *[unique_call_result_278597], **kwargs_278598)
    
    # Assigning a type to the variable 'bp' (line 2495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2495, 8), 'bp', sort_call_result_278599)
    
    
    # Call to any(...): (line 2496)
    # Processing the call arguments (line 2496)
    
    # Getting the type of 'bp' (line 2496)
    bp_278602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 18), 'bp', False)
    # Getting the type of 'N' (line 2496)
    N_278603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 23), 'N', False)
    # Applying the binary operator '>' (line 2496)
    result_gt_278604 = python_operator(stypy.reporting.localization.Localization(__file__, 2496, 18), '>', bp_278602, N_278603)
    
    # Processing the call keyword arguments (line 2496)
    kwargs_278605 = {}
    # Getting the type of 'np' (line 2496)
    np_278600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 11), 'np', False)
    # Obtaining the member 'any' of a type (line 2496)
    any_278601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2496, 11), np_278600, 'any')
    # Calling any(args, kwargs) (line 2496)
    any_call_result_278606 = invoke(stypy.reporting.localization.Localization(__file__, 2496, 11), any_278601, *[result_gt_278604], **kwargs_278605)
    
    # Testing the type of an if condition (line 2496)
    if_condition_278607 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2496, 8), any_call_result_278606)
    # Assigning a type to the variable 'if_condition_278607' (line 2496)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2496, 8), 'if_condition_278607', if_condition_278607)
    # SSA begins for if statement (line 2496)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2497)
    # Processing the call arguments (line 2497)
    str_278609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2497, 29), 'str', 'Breakpoints must be less than length of data along given axis.')
    # Processing the call keyword arguments (line 2497)
    kwargs_278610 = {}
    # Getting the type of 'ValueError' (line 2497)
    ValueError_278608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2497)
    ValueError_call_result_278611 = invoke(stypy.reporting.localization.Localization(__file__, 2497, 18), ValueError_278608, *[str_278609], **kwargs_278610)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2497, 12), ValueError_call_result_278611, 'raise parameter', BaseException)
    # SSA join for if statement (line 2496)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2499):
    
    # Assigning a BinOp to a Name (line 2499):
    
    # Call to len(...): (line 2499)
    # Processing the call arguments (line 2499)
    # Getting the type of 'bp' (line 2499)
    bp_278613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 19), 'bp', False)
    # Processing the call keyword arguments (line 2499)
    kwargs_278614 = {}
    # Getting the type of 'len' (line 2499)
    len_278612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 15), 'len', False)
    # Calling len(args, kwargs) (line 2499)
    len_call_result_278615 = invoke(stypy.reporting.localization.Localization(__file__, 2499, 15), len_278612, *[bp_278613], **kwargs_278614)
    
    int_278616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2499, 25), 'int')
    # Applying the binary operator '-' (line 2499)
    result_sub_278617 = python_operator(stypy.reporting.localization.Localization(__file__, 2499, 15), '-', len_call_result_278615, int_278616)
    
    # Assigning a type to the variable 'Nreg' (line 2499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2499, 8), 'Nreg', result_sub_278617)
    
    # Assigning a Call to a Name (line 2502):
    
    # Assigning a Call to a Name (line 2502):
    
    # Call to len(...): (line 2502)
    # Processing the call arguments (line 2502)
    # Getting the type of 'dshape' (line 2502)
    dshape_278619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 18), 'dshape', False)
    # Processing the call keyword arguments (line 2502)
    kwargs_278620 = {}
    # Getting the type of 'len' (line 2502)
    len_278618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 14), 'len', False)
    # Calling len(args, kwargs) (line 2502)
    len_call_result_278621 = invoke(stypy.reporting.localization.Localization(__file__, 2502, 14), len_278618, *[dshape_278619], **kwargs_278620)
    
    # Assigning a type to the variable 'rnk' (line 2502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2502, 8), 'rnk', len_call_result_278621)
    
    
    # Getting the type of 'axis' (line 2503)
    axis_278622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 11), 'axis')
    int_278623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2503, 18), 'int')
    # Applying the binary operator '<' (line 2503)
    result_lt_278624 = python_operator(stypy.reporting.localization.Localization(__file__, 2503, 11), '<', axis_278622, int_278623)
    
    # Testing the type of an if condition (line 2503)
    if_condition_278625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2503, 8), result_lt_278624)
    # Assigning a type to the variable 'if_condition_278625' (line 2503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2503, 8), 'if_condition_278625', if_condition_278625)
    # SSA begins for if statement (line 2503)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2504):
    
    # Assigning a BinOp to a Name (line 2504):
    # Getting the type of 'axis' (line 2504)
    axis_278626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2504, 19), 'axis')
    # Getting the type of 'rnk' (line 2504)
    rnk_278627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2504, 26), 'rnk')
    # Applying the binary operator '+' (line 2504)
    result_add_278628 = python_operator(stypy.reporting.localization.Localization(__file__, 2504, 19), '+', axis_278626, rnk_278627)
    
    # Assigning a type to the variable 'axis' (line 2504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2504, 12), 'axis', result_add_278628)
    # SSA join for if statement (line 2503)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2505):
    
    # Assigning a Subscript to a Name (line 2505):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2505)
    axis_278629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 21), 'axis')
    int_278630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2505, 27), 'int')
    # Getting the type of 'axis' (line 2505)
    axis_278631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 29), 'axis')
    slice_278632 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2505, 18), int_278630, axis_278631, None)
    # Getting the type of 'axis' (line 2505)
    axis_278633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 35), 'axis')
    int_278634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2505, 42), 'int')
    # Applying the binary operator '+' (line 2505)
    result_add_278635 = python_operator(stypy.reporting.localization.Localization(__file__, 2505, 35), '+', axis_278633, int_278634)
    
    # Getting the type of 'rnk' (line 2505)
    rnk_278636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 44), 'rnk')
    slice_278637 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2505, 18), result_add_278635, rnk_278636, None)
    # Getting the type of 'r_' (line 2505)
    r__278638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 18), 'r_')
    # Obtaining the member '__getitem__' of a type (line 2505)
    getitem___278639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2505, 18), r__278638, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2505)
    subscript_call_result_278640 = invoke(stypy.reporting.localization.Localization(__file__, 2505, 18), getitem___278639, (axis_278629, slice_278632, slice_278637))
    
    # Assigning a type to the variable 'newdims' (line 2505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2505, 8), 'newdims', subscript_call_result_278640)
    
    # Assigning a Call to a Name (line 2506):
    
    # Assigning a Call to a Name (line 2506):
    
    # Call to reshape(...): (line 2506)
    # Processing the call arguments (line 2506)
    
    # Call to transpose(...): (line 2506)
    # Processing the call arguments (line 2506)
    # Getting the type of 'data' (line 2506)
    data_278643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 36), 'data', False)
    
    # Call to tuple(...): (line 2506)
    # Processing the call arguments (line 2506)
    # Getting the type of 'newdims' (line 2506)
    newdims_278645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 48), 'newdims', False)
    # Processing the call keyword arguments (line 2506)
    kwargs_278646 = {}
    # Getting the type of 'tuple' (line 2506)
    tuple_278644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 42), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2506)
    tuple_call_result_278647 = invoke(stypy.reporting.localization.Localization(__file__, 2506, 42), tuple_278644, *[newdims_278645], **kwargs_278646)
    
    # Processing the call keyword arguments (line 2506)
    kwargs_278648 = {}
    # Getting the type of 'transpose' (line 2506)
    transpose_278642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 26), 'transpose', False)
    # Calling transpose(args, kwargs) (line 2506)
    transpose_call_result_278649 = invoke(stypy.reporting.localization.Localization(__file__, 2506, 26), transpose_278642, *[data_278643, tuple_call_result_278647], **kwargs_278648)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2507)
    tuple_278650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2507, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2507)
    # Adding element type (line 2507)
    # Getting the type of 'N' (line 2507)
    N_278651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 27), 'N', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2507, 27), tuple_278650, N_278651)
    # Adding element type (line 2507)
    
    # Call to _prod(...): (line 2507)
    # Processing the call arguments (line 2507)
    # Getting the type of 'dshape' (line 2507)
    dshape_278653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 36), 'dshape', False)
    # Processing the call keyword arguments (line 2507)
    kwargs_278654 = {}
    # Getting the type of '_prod' (line 2507)
    _prod_278652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 30), '_prod', False)
    # Calling _prod(args, kwargs) (line 2507)
    _prod_call_result_278655 = invoke(stypy.reporting.localization.Localization(__file__, 2507, 30), _prod_278652, *[dshape_278653], **kwargs_278654)
    
    # Getting the type of 'N' (line 2507)
    N_278656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2507, 47), 'N', False)
    # Applying the binary operator '//' (line 2507)
    result_floordiv_278657 = python_operator(stypy.reporting.localization.Localization(__file__, 2507, 30), '//', _prod_call_result_278655, N_278656)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2507, 27), tuple_278650, result_floordiv_278657)
    
    # Processing the call keyword arguments (line 2506)
    kwargs_278658 = {}
    # Getting the type of 'reshape' (line 2506)
    reshape_278641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 18), 'reshape', False)
    # Calling reshape(args, kwargs) (line 2506)
    reshape_call_result_278659 = invoke(stypy.reporting.localization.Localization(__file__, 2506, 18), reshape_278641, *[transpose_call_result_278649, tuple_278650], **kwargs_278658)
    
    # Assigning a type to the variable 'newdata' (line 2506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2506, 8), 'newdata', reshape_call_result_278659)
    
    # Assigning a Call to a Name (line 2508):
    
    # Assigning a Call to a Name (line 2508):
    
    # Call to copy(...): (line 2508)
    # Processing the call keyword arguments (line 2508)
    kwargs_278662 = {}
    # Getting the type of 'newdata' (line 2508)
    newdata_278660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2508, 18), 'newdata', False)
    # Obtaining the member 'copy' of a type (line 2508)
    copy_278661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2508, 18), newdata_278660, 'copy')
    # Calling copy(args, kwargs) (line 2508)
    copy_call_result_278663 = invoke(stypy.reporting.localization.Localization(__file__, 2508, 18), copy_278661, *[], **kwargs_278662)
    
    # Assigning a type to the variable 'newdata' (line 2508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2508, 8), 'newdata', copy_call_result_278663)
    
    
    # Getting the type of 'newdata' (line 2509)
    newdata_278664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 11), 'newdata')
    # Obtaining the member 'dtype' of a type (line 2509)
    dtype_278665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2509, 11), newdata_278664, 'dtype')
    # Obtaining the member 'char' of a type (line 2509)
    char_278666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2509, 11), dtype_278665, 'char')
    str_278667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2509, 37), 'str', 'dfDF')
    # Applying the binary operator 'notin' (line 2509)
    result_contains_278668 = python_operator(stypy.reporting.localization.Localization(__file__, 2509, 11), 'notin', char_278666, str_278667)
    
    # Testing the type of an if condition (line 2509)
    if_condition_278669 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2509, 8), result_contains_278668)
    # Assigning a type to the variable 'if_condition_278669' (line 2509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2509, 8), 'if_condition_278669', if_condition_278669)
    # SSA begins for if statement (line 2509)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2510):
    
    # Assigning a Call to a Name (line 2510):
    
    # Call to astype(...): (line 2510)
    # Processing the call arguments (line 2510)
    # Getting the type of 'dtype' (line 2510)
    dtype_278672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 37), 'dtype', False)
    # Processing the call keyword arguments (line 2510)
    kwargs_278673 = {}
    # Getting the type of 'newdata' (line 2510)
    newdata_278670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 22), 'newdata', False)
    # Obtaining the member 'astype' of a type (line 2510)
    astype_278671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2510, 22), newdata_278670, 'astype')
    # Calling astype(args, kwargs) (line 2510)
    astype_call_result_278674 = invoke(stypy.reporting.localization.Localization(__file__, 2510, 22), astype_278671, *[dtype_278672], **kwargs_278673)
    
    # Assigning a type to the variable 'newdata' (line 2510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2510, 12), 'newdata', astype_call_result_278674)
    # SSA join for if statement (line 2509)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 2512)
    # Processing the call arguments (line 2512)
    # Getting the type of 'Nreg' (line 2512)
    Nreg_278676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2512, 23), 'Nreg', False)
    # Processing the call keyword arguments (line 2512)
    kwargs_278677 = {}
    # Getting the type of 'range' (line 2512)
    range_278675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2512, 17), 'range', False)
    # Calling range(args, kwargs) (line 2512)
    range_call_result_278678 = invoke(stypy.reporting.localization.Localization(__file__, 2512, 17), range_278675, *[Nreg_278676], **kwargs_278677)
    
    # Testing the type of a for loop iterable (line 2512)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2512, 8), range_call_result_278678)
    # Getting the type of the for loop variable (line 2512)
    for_loop_var_278679 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2512, 8), range_call_result_278678)
    # Assigning a type to the variable 'm' (line 2512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2512, 8), 'm', for_loop_var_278679)
    # SSA begins for a for statement (line 2512)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 2513):
    
    # Assigning a BinOp to a Name (line 2513):
    
    # Obtaining the type of the subscript
    # Getting the type of 'm' (line 2513)
    m_278680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2513, 22), 'm')
    int_278681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2513, 26), 'int')
    # Applying the binary operator '+' (line 2513)
    result_add_278682 = python_operator(stypy.reporting.localization.Localization(__file__, 2513, 22), '+', m_278680, int_278681)
    
    # Getting the type of 'bp' (line 2513)
    bp_278683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2513, 19), 'bp')
    # Obtaining the member '__getitem__' of a type (line 2513)
    getitem___278684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2513, 19), bp_278683, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2513)
    subscript_call_result_278685 = invoke(stypy.reporting.localization.Localization(__file__, 2513, 19), getitem___278684, result_add_278682)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'm' (line 2513)
    m_278686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2513, 34), 'm')
    # Getting the type of 'bp' (line 2513)
    bp_278687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2513, 31), 'bp')
    # Obtaining the member '__getitem__' of a type (line 2513)
    getitem___278688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2513, 31), bp_278687, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2513)
    subscript_call_result_278689 = invoke(stypy.reporting.localization.Localization(__file__, 2513, 31), getitem___278688, m_278686)
    
    # Applying the binary operator '-' (line 2513)
    result_sub_278690 = python_operator(stypy.reporting.localization.Localization(__file__, 2513, 19), '-', subscript_call_result_278685, subscript_call_result_278689)
    
    # Assigning a type to the variable 'Npts' (line 2513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2513, 12), 'Npts', result_sub_278690)
    
    # Assigning a Call to a Name (line 2514):
    
    # Assigning a Call to a Name (line 2514):
    
    # Call to ones(...): (line 2514)
    # Processing the call arguments (line 2514)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2514)
    tuple_278692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2514, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2514)
    # Adding element type (line 2514)
    # Getting the type of 'Npts' (line 2514)
    Npts_278693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 22), 'Npts', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2514, 22), tuple_278692, Npts_278693)
    # Adding element type (line 2514)
    int_278694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2514, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2514, 22), tuple_278692, int_278694)
    
    # Getting the type of 'dtype' (line 2514)
    dtype_278695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 32), 'dtype', False)
    # Processing the call keyword arguments (line 2514)
    kwargs_278696 = {}
    # Getting the type of 'ones' (line 2514)
    ones_278691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 16), 'ones', False)
    # Calling ones(args, kwargs) (line 2514)
    ones_call_result_278697 = invoke(stypy.reporting.localization.Localization(__file__, 2514, 16), ones_278691, *[tuple_278692, dtype_278695], **kwargs_278696)
    
    # Assigning a type to the variable 'A' (line 2514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2514, 12), 'A', ones_call_result_278697)
    
    # Assigning a Call to a Subscript (line 2515):
    
    # Assigning a Call to a Subscript (line 2515):
    
    # Call to (...): (line 2515)
    # Processing the call arguments (line 2515)
    
    # Call to arange(...): (line 2515)
    # Processing the call arguments (line 2515)
    int_278703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2515, 41), 'int')
    # Getting the type of 'Npts' (line 2515)
    Npts_278704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 44), 'Npts', False)
    int_278705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2515, 51), 'int')
    # Applying the binary operator '+' (line 2515)
    result_add_278706 = python_operator(stypy.reporting.localization.Localization(__file__, 2515, 44), '+', Npts_278704, int_278705)
    
    # Processing the call keyword arguments (line 2515)
    kwargs_278707 = {}
    # Getting the type of 'arange' (line 2515)
    arange_278702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 34), 'arange', False)
    # Calling arange(args, kwargs) (line 2515)
    arange_call_result_278708 = invoke(stypy.reporting.localization.Localization(__file__, 2515, 34), arange_278702, *[int_278703, result_add_278706], **kwargs_278707)
    
    float_278709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2515, 56), 'float')
    # Applying the binary operator '*' (line 2515)
    result_mul_278710 = python_operator(stypy.reporting.localization.Localization(__file__, 2515, 34), '*', arange_call_result_278708, float_278709)
    
    # Getting the type of 'Npts' (line 2515)
    Npts_278711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 62), 'Npts', False)
    # Applying the binary operator 'div' (line 2515)
    result_div_278712 = python_operator(stypy.reporting.localization.Localization(__file__, 2515, 60), 'div', result_mul_278710, Npts_278711)
    
    # Processing the call keyword arguments (line 2515)
    kwargs_278713 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'dtype' (line 2515)
    dtype_278698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 27), 'dtype', False)
    # Getting the type of 'cast' (line 2515)
    cast_278699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 22), 'cast', False)
    # Obtaining the member '__getitem__' of a type (line 2515)
    getitem___278700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2515, 22), cast_278699, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2515)
    subscript_call_result_278701 = invoke(stypy.reporting.localization.Localization(__file__, 2515, 22), getitem___278700, dtype_278698)
    
    # Calling (args, kwargs) (line 2515)
    _call_result_278714 = invoke(stypy.reporting.localization.Localization(__file__, 2515, 22), subscript_call_result_278701, *[result_div_278712], **kwargs_278713)
    
    # Getting the type of 'A' (line 2515)
    A_278715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2515, 12), 'A')
    slice_278716 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2515, 12), None, None, None)
    int_278717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2515, 17), 'int')
    # Storing an element on a container (line 2515)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2515, 12), A_278715, ((slice_278716, int_278717), _call_result_278714))
    
    # Assigning a Call to a Name (line 2516):
    
    # Assigning a Call to a Name (line 2516):
    
    # Call to slice(...): (line 2516)
    # Processing the call arguments (line 2516)
    
    # Obtaining the type of the subscript
    # Getting the type of 'm' (line 2516)
    m_278719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 26), 'm', False)
    # Getting the type of 'bp' (line 2516)
    bp_278720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 23), 'bp', False)
    # Obtaining the member '__getitem__' of a type (line 2516)
    getitem___278721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 23), bp_278720, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2516)
    subscript_call_result_278722 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 23), getitem___278721, m_278719)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'm' (line 2516)
    m_278723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 33), 'm', False)
    int_278724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2516, 37), 'int')
    # Applying the binary operator '+' (line 2516)
    result_add_278725 = python_operator(stypy.reporting.localization.Localization(__file__, 2516, 33), '+', m_278723, int_278724)
    
    # Getting the type of 'bp' (line 2516)
    bp_278726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 30), 'bp', False)
    # Obtaining the member '__getitem__' of a type (line 2516)
    getitem___278727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2516, 30), bp_278726, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2516)
    subscript_call_result_278728 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 30), getitem___278727, result_add_278725)
    
    # Processing the call keyword arguments (line 2516)
    kwargs_278729 = {}
    # Getting the type of 'slice' (line 2516)
    slice_278718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 17), 'slice', False)
    # Calling slice(args, kwargs) (line 2516)
    slice_call_result_278730 = invoke(stypy.reporting.localization.Localization(__file__, 2516, 17), slice_278718, *[subscript_call_result_278722, subscript_call_result_278728], **kwargs_278729)
    
    # Assigning a type to the variable 'sl' (line 2516)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2516, 12), 'sl', slice_call_result_278730)
    
    # Assigning a Call to a Tuple (line 2517):
    
    # Assigning a Subscript to a Name (line 2517):
    
    # Obtaining the type of the subscript
    int_278731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2517, 12), 'int')
    
    # Call to lstsq(...): (line 2517)
    # Processing the call arguments (line 2517)
    # Getting the type of 'A' (line 2517)
    A_278734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 49), 'A', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2517)
    sl_278735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 60), 'sl', False)
    # Getting the type of 'newdata' (line 2517)
    newdata_278736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 52), 'newdata', False)
    # Obtaining the member '__getitem__' of a type (line 2517)
    getitem___278737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 52), newdata_278736, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2517)
    subscript_call_result_278738 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 52), getitem___278737, sl_278735)
    
    # Processing the call keyword arguments (line 2517)
    kwargs_278739 = {}
    # Getting the type of 'linalg' (line 2517)
    linalg_278732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 36), 'linalg', False)
    # Obtaining the member 'lstsq' of a type (line 2517)
    lstsq_278733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 36), linalg_278732, 'lstsq')
    # Calling lstsq(args, kwargs) (line 2517)
    lstsq_call_result_278740 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 36), lstsq_278733, *[A_278734, subscript_call_result_278738], **kwargs_278739)
    
    # Obtaining the member '__getitem__' of a type (line 2517)
    getitem___278741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 12), lstsq_call_result_278740, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2517)
    subscript_call_result_278742 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 12), getitem___278741, int_278731)
    
    # Assigning a type to the variable 'tuple_var_assignment_274344' (line 2517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2517, 12), 'tuple_var_assignment_274344', subscript_call_result_278742)
    
    # Assigning a Subscript to a Name (line 2517):
    
    # Obtaining the type of the subscript
    int_278743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2517, 12), 'int')
    
    # Call to lstsq(...): (line 2517)
    # Processing the call arguments (line 2517)
    # Getting the type of 'A' (line 2517)
    A_278746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 49), 'A', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2517)
    sl_278747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 60), 'sl', False)
    # Getting the type of 'newdata' (line 2517)
    newdata_278748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 52), 'newdata', False)
    # Obtaining the member '__getitem__' of a type (line 2517)
    getitem___278749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 52), newdata_278748, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2517)
    subscript_call_result_278750 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 52), getitem___278749, sl_278747)
    
    # Processing the call keyword arguments (line 2517)
    kwargs_278751 = {}
    # Getting the type of 'linalg' (line 2517)
    linalg_278744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 36), 'linalg', False)
    # Obtaining the member 'lstsq' of a type (line 2517)
    lstsq_278745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 36), linalg_278744, 'lstsq')
    # Calling lstsq(args, kwargs) (line 2517)
    lstsq_call_result_278752 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 36), lstsq_278745, *[A_278746, subscript_call_result_278750], **kwargs_278751)
    
    # Obtaining the member '__getitem__' of a type (line 2517)
    getitem___278753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 12), lstsq_call_result_278752, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2517)
    subscript_call_result_278754 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 12), getitem___278753, int_278743)
    
    # Assigning a type to the variable 'tuple_var_assignment_274345' (line 2517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2517, 12), 'tuple_var_assignment_274345', subscript_call_result_278754)
    
    # Assigning a Subscript to a Name (line 2517):
    
    # Obtaining the type of the subscript
    int_278755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2517, 12), 'int')
    
    # Call to lstsq(...): (line 2517)
    # Processing the call arguments (line 2517)
    # Getting the type of 'A' (line 2517)
    A_278758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 49), 'A', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2517)
    sl_278759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 60), 'sl', False)
    # Getting the type of 'newdata' (line 2517)
    newdata_278760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 52), 'newdata', False)
    # Obtaining the member '__getitem__' of a type (line 2517)
    getitem___278761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 52), newdata_278760, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2517)
    subscript_call_result_278762 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 52), getitem___278761, sl_278759)
    
    # Processing the call keyword arguments (line 2517)
    kwargs_278763 = {}
    # Getting the type of 'linalg' (line 2517)
    linalg_278756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 36), 'linalg', False)
    # Obtaining the member 'lstsq' of a type (line 2517)
    lstsq_278757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 36), linalg_278756, 'lstsq')
    # Calling lstsq(args, kwargs) (line 2517)
    lstsq_call_result_278764 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 36), lstsq_278757, *[A_278758, subscript_call_result_278762], **kwargs_278763)
    
    # Obtaining the member '__getitem__' of a type (line 2517)
    getitem___278765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 12), lstsq_call_result_278764, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2517)
    subscript_call_result_278766 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 12), getitem___278765, int_278755)
    
    # Assigning a type to the variable 'tuple_var_assignment_274346' (line 2517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2517, 12), 'tuple_var_assignment_274346', subscript_call_result_278766)
    
    # Assigning a Subscript to a Name (line 2517):
    
    # Obtaining the type of the subscript
    int_278767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2517, 12), 'int')
    
    # Call to lstsq(...): (line 2517)
    # Processing the call arguments (line 2517)
    # Getting the type of 'A' (line 2517)
    A_278770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 49), 'A', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2517)
    sl_278771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 60), 'sl', False)
    # Getting the type of 'newdata' (line 2517)
    newdata_278772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 52), 'newdata', False)
    # Obtaining the member '__getitem__' of a type (line 2517)
    getitem___278773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 52), newdata_278772, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2517)
    subscript_call_result_278774 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 52), getitem___278773, sl_278771)
    
    # Processing the call keyword arguments (line 2517)
    kwargs_278775 = {}
    # Getting the type of 'linalg' (line 2517)
    linalg_278768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 36), 'linalg', False)
    # Obtaining the member 'lstsq' of a type (line 2517)
    lstsq_278769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 36), linalg_278768, 'lstsq')
    # Calling lstsq(args, kwargs) (line 2517)
    lstsq_call_result_278776 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 36), lstsq_278769, *[A_278770, subscript_call_result_278774], **kwargs_278775)
    
    # Obtaining the member '__getitem__' of a type (line 2517)
    getitem___278777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 12), lstsq_call_result_278776, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2517)
    subscript_call_result_278778 = invoke(stypy.reporting.localization.Localization(__file__, 2517, 12), getitem___278777, int_278767)
    
    # Assigning a type to the variable 'tuple_var_assignment_274347' (line 2517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2517, 12), 'tuple_var_assignment_274347', subscript_call_result_278778)
    
    # Assigning a Name to a Name (line 2517):
    # Getting the type of 'tuple_var_assignment_274344' (line 2517)
    tuple_var_assignment_274344_278779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 12), 'tuple_var_assignment_274344')
    # Assigning a type to the variable 'coef' (line 2517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2517, 12), 'coef', tuple_var_assignment_274344_278779)
    
    # Assigning a Name to a Name (line 2517):
    # Getting the type of 'tuple_var_assignment_274345' (line 2517)
    tuple_var_assignment_274345_278780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 12), 'tuple_var_assignment_274345')
    # Assigning a type to the variable 'resids' (line 2517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2517, 18), 'resids', tuple_var_assignment_274345_278780)
    
    # Assigning a Name to a Name (line 2517):
    # Getting the type of 'tuple_var_assignment_274346' (line 2517)
    tuple_var_assignment_274346_278781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 12), 'tuple_var_assignment_274346')
    # Assigning a type to the variable 'rank' (line 2517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2517, 26), 'rank', tuple_var_assignment_274346_278781)
    
    # Assigning a Name to a Name (line 2517):
    # Getting the type of 'tuple_var_assignment_274347' (line 2517)
    tuple_var_assignment_274347_278782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 12), 'tuple_var_assignment_274347')
    # Assigning a type to the variable 's' (line 2517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2517, 32), 's', tuple_var_assignment_274347_278782)
    
    # Assigning a BinOp to a Subscript (line 2518):
    
    # Assigning a BinOp to a Subscript (line 2518):
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 2518)
    sl_278783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 34), 'sl')
    # Getting the type of 'newdata' (line 2518)
    newdata_278784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 26), 'newdata')
    # Obtaining the member '__getitem__' of a type (line 2518)
    getitem___278785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2518, 26), newdata_278784, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2518)
    subscript_call_result_278786 = invoke(stypy.reporting.localization.Localization(__file__, 2518, 26), getitem___278785, sl_278783)
    
    
    # Call to dot(...): (line 2518)
    # Processing the call arguments (line 2518)
    # Getting the type of 'A' (line 2518)
    A_278788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 44), 'A', False)
    # Getting the type of 'coef' (line 2518)
    coef_278789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 47), 'coef', False)
    # Processing the call keyword arguments (line 2518)
    kwargs_278790 = {}
    # Getting the type of 'dot' (line 2518)
    dot_278787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 40), 'dot', False)
    # Calling dot(args, kwargs) (line 2518)
    dot_call_result_278791 = invoke(stypy.reporting.localization.Localization(__file__, 2518, 40), dot_278787, *[A_278788, coef_278789], **kwargs_278790)
    
    # Applying the binary operator '-' (line 2518)
    result_sub_278792 = python_operator(stypy.reporting.localization.Localization(__file__, 2518, 26), '-', subscript_call_result_278786, dot_call_result_278791)
    
    # Getting the type of 'newdata' (line 2518)
    newdata_278793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 12), 'newdata')
    # Getting the type of 'sl' (line 2518)
    sl_278794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 20), 'sl')
    # Storing an element on a container (line 2518)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2518, 12), newdata_278793, (sl_278794, result_sub_278792))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2520):
    
    # Assigning a Call to a Name (line 2520):
    
    # Call to take(...): (line 2520)
    # Processing the call arguments (line 2520)
    # Getting the type of 'dshape' (line 2520)
    dshape_278796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 23), 'dshape', False)
    # Getting the type of 'newdims' (line 2520)
    newdims_278797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 31), 'newdims', False)
    int_278798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2520, 40), 'int')
    # Processing the call keyword arguments (line 2520)
    kwargs_278799 = {}
    # Getting the type of 'take' (line 2520)
    take_278795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 18), 'take', False)
    # Calling take(args, kwargs) (line 2520)
    take_call_result_278800 = invoke(stypy.reporting.localization.Localization(__file__, 2520, 18), take_278795, *[dshape_278796, newdims_278797, int_278798], **kwargs_278799)
    
    # Assigning a type to the variable 'tdshape' (line 2520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2520, 8), 'tdshape', take_call_result_278800)
    
    # Assigning a Call to a Name (line 2521):
    
    # Assigning a Call to a Name (line 2521):
    
    # Call to reshape(...): (line 2521)
    # Processing the call arguments (line 2521)
    # Getting the type of 'newdata' (line 2521)
    newdata_278802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 22), 'newdata', False)
    
    # Call to tuple(...): (line 2521)
    # Processing the call arguments (line 2521)
    # Getting the type of 'tdshape' (line 2521)
    tdshape_278804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 37), 'tdshape', False)
    # Processing the call keyword arguments (line 2521)
    kwargs_278805 = {}
    # Getting the type of 'tuple' (line 2521)
    tuple_278803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 31), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2521)
    tuple_call_result_278806 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 31), tuple_278803, *[tdshape_278804], **kwargs_278805)
    
    # Processing the call keyword arguments (line 2521)
    kwargs_278807 = {}
    # Getting the type of 'reshape' (line 2521)
    reshape_278801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 14), 'reshape', False)
    # Calling reshape(args, kwargs) (line 2521)
    reshape_call_result_278808 = invoke(stypy.reporting.localization.Localization(__file__, 2521, 14), reshape_278801, *[newdata_278802, tuple_call_result_278806], **kwargs_278807)
    
    # Assigning a type to the variable 'ret' (line 2521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2521, 8), 'ret', reshape_call_result_278808)
    
    # Assigning a Call to a Name (line 2522):
    
    # Assigning a Call to a Name (line 2522):
    
    # Call to list(...): (line 2522)
    # Processing the call arguments (line 2522)
    
    # Call to range(...): (line 2522)
    # Processing the call arguments (line 2522)
    int_278811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2522, 26), 'int')
    # Getting the type of 'rnk' (line 2522)
    rnk_278812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 29), 'rnk', False)
    # Processing the call keyword arguments (line 2522)
    kwargs_278813 = {}
    # Getting the type of 'range' (line 2522)
    range_278810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 20), 'range', False)
    # Calling range(args, kwargs) (line 2522)
    range_call_result_278814 = invoke(stypy.reporting.localization.Localization(__file__, 2522, 20), range_278810, *[int_278811, rnk_278812], **kwargs_278813)
    
    # Processing the call keyword arguments (line 2522)
    kwargs_278815 = {}
    # Getting the type of 'list' (line 2522)
    list_278809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 15), 'list', False)
    # Calling list(args, kwargs) (line 2522)
    list_call_result_278816 = invoke(stypy.reporting.localization.Localization(__file__, 2522, 15), list_278809, *[range_call_result_278814], **kwargs_278815)
    
    # Assigning a type to the variable 'vals' (line 2522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2522, 8), 'vals', list_call_result_278816)
    
    # Assigning a BinOp to a Name (line 2523):
    
    # Assigning a BinOp to a Name (line 2523):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2523)
    axis_278817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2523, 24), 'axis')
    slice_278818 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2523, 18), None, axis_278817, None)
    # Getting the type of 'vals' (line 2523)
    vals_278819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2523, 18), 'vals')
    # Obtaining the member '__getitem__' of a type (line 2523)
    getitem___278820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2523, 18), vals_278819, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2523)
    subscript_call_result_278821 = invoke(stypy.reporting.localization.Localization(__file__, 2523, 18), getitem___278820, slice_278818)
    
    
    # Obtaining an instance of the builtin type 'list' (line 2523)
    list_278822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2523, 32), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2523)
    # Adding element type (line 2523)
    int_278823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2523, 33), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2523, 32), list_278822, int_278823)
    
    # Applying the binary operator '+' (line 2523)
    result_add_278824 = python_operator(stypy.reporting.localization.Localization(__file__, 2523, 18), '+', subscript_call_result_278821, list_278822)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 2523)
    axis_278825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2523, 43), 'axis')
    slice_278826 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2523, 38), axis_278825, None, None)
    # Getting the type of 'vals' (line 2523)
    vals_278827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2523, 38), 'vals')
    # Obtaining the member '__getitem__' of a type (line 2523)
    getitem___278828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2523, 38), vals_278827, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2523)
    subscript_call_result_278829 = invoke(stypy.reporting.localization.Localization(__file__, 2523, 38), getitem___278828, slice_278826)
    
    # Applying the binary operator '+' (line 2523)
    result_add_278830 = python_operator(stypy.reporting.localization.Localization(__file__, 2523, 36), '+', result_add_278824, subscript_call_result_278829)
    
    # Assigning a type to the variable 'olddims' (line 2523)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2523, 8), 'olddims', result_add_278830)
    
    # Assigning a Call to a Name (line 2524):
    
    # Assigning a Call to a Name (line 2524):
    
    # Call to transpose(...): (line 2524)
    # Processing the call arguments (line 2524)
    # Getting the type of 'ret' (line 2524)
    ret_278832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 24), 'ret', False)
    
    # Call to tuple(...): (line 2524)
    # Processing the call arguments (line 2524)
    # Getting the type of 'olddims' (line 2524)
    olddims_278834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 35), 'olddims', False)
    # Processing the call keyword arguments (line 2524)
    kwargs_278835 = {}
    # Getting the type of 'tuple' (line 2524)
    tuple_278833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 29), 'tuple', False)
    # Calling tuple(args, kwargs) (line 2524)
    tuple_call_result_278836 = invoke(stypy.reporting.localization.Localization(__file__, 2524, 29), tuple_278833, *[olddims_278834], **kwargs_278835)
    
    # Processing the call keyword arguments (line 2524)
    kwargs_278837 = {}
    # Getting the type of 'transpose' (line 2524)
    transpose_278831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 14), 'transpose', False)
    # Calling transpose(args, kwargs) (line 2524)
    transpose_call_result_278838 = invoke(stypy.reporting.localization.Localization(__file__, 2524, 14), transpose_278831, *[ret_278832, tuple_call_result_278836], **kwargs_278837)
    
    # Assigning a type to the variable 'ret' (line 2524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2524, 8), 'ret', transpose_call_result_278838)
    # Getting the type of 'ret' (line 2525)
    ret_278839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 15), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2525, 8), 'stypy_return_type', ret_278839)
    # SSA join for if statement (line 2489)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'detrend(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'detrend' in the type store
    # Getting the type of 'stypy_return_type' (line 2446)
    stypy_return_type_278840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_278840)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'detrend'
    return stypy_return_type_278840

# Assigning a type to the variable 'detrend' (line 2446)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2446, 0), 'detrend', detrend)

@norecursion
def lfilter_zi(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'lfilter_zi'
    module_type_store = module_type_store.open_function_context('lfilter_zi', 2528, 0, False)
    
    # Passed parameters checking function
    lfilter_zi.stypy_localization = localization
    lfilter_zi.stypy_type_of_self = None
    lfilter_zi.stypy_type_store = module_type_store
    lfilter_zi.stypy_function_name = 'lfilter_zi'
    lfilter_zi.stypy_param_names_list = ['b', 'a']
    lfilter_zi.stypy_varargs_param_name = None
    lfilter_zi.stypy_kwargs_param_name = None
    lfilter_zi.stypy_call_defaults = defaults
    lfilter_zi.stypy_call_varargs = varargs
    lfilter_zi.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'lfilter_zi', ['b', 'a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'lfilter_zi', localization, ['b', 'a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'lfilter_zi(...)' code ##################

    str_278841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2609, (-1)), 'str', '\n    Construct initial conditions for lfilter for step response steady-state.\n\n    Compute an initial state `zi` for the `lfilter` function that corresponds\n    to the steady state of the step response.\n\n    A typical use of this function is to set the initial state so that the\n    output of the filter starts at the same value as the first element of\n    the signal to be filtered.\n\n    Parameters\n    ----------\n    b, a : array_like (1-D)\n        The IIR filter coefficients. See `lfilter` for more\n        information.\n\n    Returns\n    -------\n    zi : 1-D ndarray\n        The initial state for the filter.\n\n    See Also\n    --------\n    lfilter, lfiltic, filtfilt\n\n    Notes\n    -----\n    A linear filter with order m has a state space representation (A, B, C, D),\n    for which the output y of the filter can be expressed as::\n\n        z(n+1) = A*z(n) + B*x(n)\n        y(n)   = C*z(n) + D*x(n)\n\n    where z(n) is a vector of length m, A has shape (m, m), B has shape\n    (m, 1), C has shape (1, m) and D has shape (1, 1) (assuming x(n) is\n    a scalar).  lfilter_zi solves::\n\n        zi = A*zi + B\n\n    In other words, it finds the initial condition for which the response\n    to an input of all ones is a constant.\n\n    Given the filter coefficients `a` and `b`, the state space matrices\n    for the transposed direct form II implementation of the linear filter,\n    which is the implementation used by scipy.signal.lfilter, are::\n\n        A = scipy.linalg.companion(a).T\n        B = b[1:] - a[1:]*b[0]\n\n    assuming `a[0]` is 1.0; if `a[0]` is not 1, `a` and `b` are first\n    divided by a[0].\n\n    Examples\n    --------\n    The following code creates a lowpass Butterworth filter. Then it\n    applies that filter to an array whose values are all 1.0; the\n    output is also all 1.0, as expected for a lowpass filter.  If the\n    `zi` argument of `lfilter` had not been given, the output would have\n    shown the transient signal.\n\n    >>> from numpy import array, ones\n    >>> from scipy.signal import lfilter, lfilter_zi, butter\n    >>> b, a = butter(5, 0.25)\n    >>> zi = lfilter_zi(b, a)\n    >>> y, zo = lfilter(b, a, ones(10), zi=zi)\n    >>> y\n    array([1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.,  1.])\n\n    Another example:\n\n    >>> x = array([0.5, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0])\n    >>> y, zf = lfilter(b, a, x, zi=zi*x[0])\n    >>> y\n    array([ 0.5       ,  0.5       ,  0.5       ,  0.49836039,  0.48610528,\n        0.44399389,  0.35505241])\n\n    Note that the `zi` argument to `lfilter` was computed using\n    `lfilter_zi` and scaled by `x[0]`.  Then the output `y` has no\n    transient until the input drops from 0.5 to 0.0.\n\n    ')
    
    # Assigning a Call to a Name (line 2619):
    
    # Assigning a Call to a Name (line 2619):
    
    # Call to atleast_1d(...): (line 2619)
    # Processing the call arguments (line 2619)
    # Getting the type of 'b' (line 2619)
    b_278844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 22), 'b', False)
    # Processing the call keyword arguments (line 2619)
    kwargs_278845 = {}
    # Getting the type of 'np' (line 2619)
    np_278842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 8), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 2619)
    atleast_1d_278843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2619, 8), np_278842, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 2619)
    atleast_1d_call_result_278846 = invoke(stypy.reporting.localization.Localization(__file__, 2619, 8), atleast_1d_278843, *[b_278844], **kwargs_278845)
    
    # Assigning a type to the variable 'b' (line 2619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2619, 4), 'b', atleast_1d_call_result_278846)
    
    
    # Getting the type of 'b' (line 2620)
    b_278847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 7), 'b')
    # Obtaining the member 'ndim' of a type (line 2620)
    ndim_278848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2620, 7), b_278847, 'ndim')
    int_278849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2620, 17), 'int')
    # Applying the binary operator '!=' (line 2620)
    result_ne_278850 = python_operator(stypy.reporting.localization.Localization(__file__, 2620, 7), '!=', ndim_278848, int_278849)
    
    # Testing the type of an if condition (line 2620)
    if_condition_278851 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2620, 4), result_ne_278850)
    # Assigning a type to the variable 'if_condition_278851' (line 2620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2620, 4), 'if_condition_278851', if_condition_278851)
    # SSA begins for if statement (line 2620)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2621)
    # Processing the call arguments (line 2621)
    str_278853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2621, 25), 'str', 'Numerator b must be 1-D.')
    # Processing the call keyword arguments (line 2621)
    kwargs_278854 = {}
    # Getting the type of 'ValueError' (line 2621)
    ValueError_278852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2621)
    ValueError_call_result_278855 = invoke(stypy.reporting.localization.Localization(__file__, 2621, 14), ValueError_278852, *[str_278853], **kwargs_278854)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2621, 8), ValueError_call_result_278855, 'raise parameter', BaseException)
    # SSA join for if statement (line 2620)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2622):
    
    # Assigning a Call to a Name (line 2622):
    
    # Call to atleast_1d(...): (line 2622)
    # Processing the call arguments (line 2622)
    # Getting the type of 'a' (line 2622)
    a_278858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 22), 'a', False)
    # Processing the call keyword arguments (line 2622)
    kwargs_278859 = {}
    # Getting the type of 'np' (line 2622)
    np_278856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 8), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 2622)
    atleast_1d_278857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2622, 8), np_278856, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 2622)
    atleast_1d_call_result_278860 = invoke(stypy.reporting.localization.Localization(__file__, 2622, 8), atleast_1d_278857, *[a_278858], **kwargs_278859)
    
    # Assigning a type to the variable 'a' (line 2622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2622, 4), 'a', atleast_1d_call_result_278860)
    
    
    # Getting the type of 'a' (line 2623)
    a_278861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 7), 'a')
    # Obtaining the member 'ndim' of a type (line 2623)
    ndim_278862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2623, 7), a_278861, 'ndim')
    int_278863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2623, 17), 'int')
    # Applying the binary operator '!=' (line 2623)
    result_ne_278864 = python_operator(stypy.reporting.localization.Localization(__file__, 2623, 7), '!=', ndim_278862, int_278863)
    
    # Testing the type of an if condition (line 2623)
    if_condition_278865 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2623, 4), result_ne_278864)
    # Assigning a type to the variable 'if_condition_278865' (line 2623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2623, 4), 'if_condition_278865', if_condition_278865)
    # SSA begins for if statement (line 2623)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2624)
    # Processing the call arguments (line 2624)
    str_278867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2624, 25), 'str', 'Denominator a must be 1-D.')
    # Processing the call keyword arguments (line 2624)
    kwargs_278868 = {}
    # Getting the type of 'ValueError' (line 2624)
    ValueError_278866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2624)
    ValueError_call_result_278869 = invoke(stypy.reporting.localization.Localization(__file__, 2624, 14), ValueError_278866, *[str_278867], **kwargs_278868)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2624, 8), ValueError_call_result_278869, 'raise parameter', BaseException)
    # SSA join for if statement (line 2623)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 2626)
    # Processing the call arguments (line 2626)
    # Getting the type of 'a' (line 2626)
    a_278871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 14), 'a', False)
    # Processing the call keyword arguments (line 2626)
    kwargs_278872 = {}
    # Getting the type of 'len' (line 2626)
    len_278870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 10), 'len', False)
    # Calling len(args, kwargs) (line 2626)
    len_call_result_278873 = invoke(stypy.reporting.localization.Localization(__file__, 2626, 10), len_278870, *[a_278871], **kwargs_278872)
    
    int_278874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2626, 19), 'int')
    # Applying the binary operator '>' (line 2626)
    result_gt_278875 = python_operator(stypy.reporting.localization.Localization(__file__, 2626, 10), '>', len_call_result_278873, int_278874)
    
    
    
    # Obtaining the type of the subscript
    int_278876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2626, 27), 'int')
    # Getting the type of 'a' (line 2626)
    a_278877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2626, 25), 'a')
    # Obtaining the member '__getitem__' of a type (line 2626)
    getitem___278878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2626, 25), a_278877, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2626)
    subscript_call_result_278879 = invoke(stypy.reporting.localization.Localization(__file__, 2626, 25), getitem___278878, int_278876)
    
    float_278880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2626, 33), 'float')
    # Applying the binary operator '==' (line 2626)
    result_eq_278881 = python_operator(stypy.reporting.localization.Localization(__file__, 2626, 25), '==', subscript_call_result_278879, float_278880)
    
    # Applying the binary operator 'and' (line 2626)
    result_and_keyword_278882 = python_operator(stypy.reporting.localization.Localization(__file__, 2626, 10), 'and', result_gt_278875, result_eq_278881)
    
    # Testing the type of an if condition (line 2626)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2626, 4), result_and_keyword_278882)
    # SSA begins for while statement (line 2626)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Subscript to a Name (line 2627):
    
    # Assigning a Subscript to a Name (line 2627):
    
    # Obtaining the type of the subscript
    int_278883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2627, 14), 'int')
    slice_278884 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2627, 12), int_278883, None, None)
    # Getting the type of 'a' (line 2627)
    a_278885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 12), 'a')
    # Obtaining the member '__getitem__' of a type (line 2627)
    getitem___278886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2627, 12), a_278885, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2627)
    subscript_call_result_278887 = invoke(stypy.reporting.localization.Localization(__file__, 2627, 12), getitem___278886, slice_278884)
    
    # Assigning a type to the variable 'a' (line 2627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2627, 8), 'a', subscript_call_result_278887)
    # SSA join for while statement (line 2626)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'a' (line 2628)
    a_278888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 7), 'a')
    # Obtaining the member 'size' of a type (line 2628)
    size_278889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2628, 7), a_278888, 'size')
    int_278890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2628, 16), 'int')
    # Applying the binary operator '<' (line 2628)
    result_lt_278891 = python_operator(stypy.reporting.localization.Localization(__file__, 2628, 7), '<', size_278889, int_278890)
    
    # Testing the type of an if condition (line 2628)
    if_condition_278892 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2628, 4), result_lt_278891)
    # Assigning a type to the variable 'if_condition_278892' (line 2628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2628, 4), 'if_condition_278892', if_condition_278892)
    # SSA begins for if statement (line 2628)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2629)
    # Processing the call arguments (line 2629)
    str_278894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2629, 25), 'str', 'There must be at least one nonzero `a` coefficient.')
    # Processing the call keyword arguments (line 2629)
    kwargs_278895 = {}
    # Getting the type of 'ValueError' (line 2629)
    ValueError_278893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2629)
    ValueError_call_result_278896 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 14), ValueError_278893, *[str_278894], **kwargs_278895)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2629, 8), ValueError_call_result_278896, 'raise parameter', BaseException)
    # SSA join for if statement (line 2628)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_278897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2631, 9), 'int')
    # Getting the type of 'a' (line 2631)
    a_278898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 7), 'a')
    # Obtaining the member '__getitem__' of a type (line 2631)
    getitem___278899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2631, 7), a_278898, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2631)
    subscript_call_result_278900 = invoke(stypy.reporting.localization.Localization(__file__, 2631, 7), getitem___278899, int_278897)
    
    float_278901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2631, 15), 'float')
    # Applying the binary operator '!=' (line 2631)
    result_ne_278902 = python_operator(stypy.reporting.localization.Localization(__file__, 2631, 7), '!=', subscript_call_result_278900, float_278901)
    
    # Testing the type of an if condition (line 2631)
    if_condition_278903 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2631, 4), result_ne_278902)
    # Assigning a type to the variable 'if_condition_278903' (line 2631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2631, 4), 'if_condition_278903', if_condition_278903)
    # SSA begins for if statement (line 2631)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2633):
    
    # Assigning a BinOp to a Name (line 2633):
    # Getting the type of 'b' (line 2633)
    b_278904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 12), 'b')
    
    # Obtaining the type of the subscript
    int_278905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2633, 18), 'int')
    # Getting the type of 'a' (line 2633)
    a_278906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 16), 'a')
    # Obtaining the member '__getitem__' of a type (line 2633)
    getitem___278907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2633, 16), a_278906, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2633)
    subscript_call_result_278908 = invoke(stypy.reporting.localization.Localization(__file__, 2633, 16), getitem___278907, int_278905)
    
    # Applying the binary operator 'div' (line 2633)
    result_div_278909 = python_operator(stypy.reporting.localization.Localization(__file__, 2633, 12), 'div', b_278904, subscript_call_result_278908)
    
    # Assigning a type to the variable 'b' (line 2633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2633, 8), 'b', result_div_278909)
    
    # Assigning a BinOp to a Name (line 2634):
    
    # Assigning a BinOp to a Name (line 2634):
    # Getting the type of 'a' (line 2634)
    a_278910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 12), 'a')
    
    # Obtaining the type of the subscript
    int_278911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2634, 18), 'int')
    # Getting the type of 'a' (line 2634)
    a_278912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 16), 'a')
    # Obtaining the member '__getitem__' of a type (line 2634)
    getitem___278913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2634, 16), a_278912, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2634)
    subscript_call_result_278914 = invoke(stypy.reporting.localization.Localization(__file__, 2634, 16), getitem___278913, int_278911)
    
    # Applying the binary operator 'div' (line 2634)
    result_div_278915 = python_operator(stypy.reporting.localization.Localization(__file__, 2634, 12), 'div', a_278910, subscript_call_result_278914)
    
    # Assigning a type to the variable 'a' (line 2634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2634, 8), 'a', result_div_278915)
    # SSA join for if statement (line 2631)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2636):
    
    # Assigning a Call to a Name (line 2636):
    
    # Call to max(...): (line 2636)
    # Processing the call arguments (line 2636)
    
    # Call to len(...): (line 2636)
    # Processing the call arguments (line 2636)
    # Getting the type of 'a' (line 2636)
    a_278918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 16), 'a', False)
    # Processing the call keyword arguments (line 2636)
    kwargs_278919 = {}
    # Getting the type of 'len' (line 2636)
    len_278917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 12), 'len', False)
    # Calling len(args, kwargs) (line 2636)
    len_call_result_278920 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 12), len_278917, *[a_278918], **kwargs_278919)
    
    
    # Call to len(...): (line 2636)
    # Processing the call arguments (line 2636)
    # Getting the type of 'b' (line 2636)
    b_278922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 24), 'b', False)
    # Processing the call keyword arguments (line 2636)
    kwargs_278923 = {}
    # Getting the type of 'len' (line 2636)
    len_278921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 20), 'len', False)
    # Calling len(args, kwargs) (line 2636)
    len_call_result_278924 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 20), len_278921, *[b_278922], **kwargs_278923)
    
    # Processing the call keyword arguments (line 2636)
    kwargs_278925 = {}
    # Getting the type of 'max' (line 2636)
    max_278916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 8), 'max', False)
    # Calling max(args, kwargs) (line 2636)
    max_call_result_278926 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 8), max_278916, *[len_call_result_278920, len_call_result_278924], **kwargs_278925)
    
    # Assigning a type to the variable 'n' (line 2636)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2636, 4), 'n', max_call_result_278926)
    
    
    
    # Call to len(...): (line 2639)
    # Processing the call arguments (line 2639)
    # Getting the type of 'a' (line 2639)
    a_278928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 11), 'a', False)
    # Processing the call keyword arguments (line 2639)
    kwargs_278929 = {}
    # Getting the type of 'len' (line 2639)
    len_278927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 7), 'len', False)
    # Calling len(args, kwargs) (line 2639)
    len_call_result_278930 = invoke(stypy.reporting.localization.Localization(__file__, 2639, 7), len_278927, *[a_278928], **kwargs_278929)
    
    # Getting the type of 'n' (line 2639)
    n_278931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 16), 'n')
    # Applying the binary operator '<' (line 2639)
    result_lt_278932 = python_operator(stypy.reporting.localization.Localization(__file__, 2639, 7), '<', len_call_result_278930, n_278931)
    
    # Testing the type of an if condition (line 2639)
    if_condition_278933 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2639, 4), result_lt_278932)
    # Assigning a type to the variable 'if_condition_278933' (line 2639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2639, 4), 'if_condition_278933', if_condition_278933)
    # SSA begins for if statement (line 2639)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2640):
    
    # Assigning a Subscript to a Name (line 2640):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2640)
    tuple_278934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2640, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2640)
    # Adding element type (line 2640)
    # Getting the type of 'a' (line 2640)
    a_278935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 18), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2640, 18), tuple_278934, a_278935)
    # Adding element type (line 2640)
    
    # Call to zeros(...): (line 2640)
    # Processing the call arguments (line 2640)
    # Getting the type of 'n' (line 2640)
    n_278938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 30), 'n', False)
    
    # Call to len(...): (line 2640)
    # Processing the call arguments (line 2640)
    # Getting the type of 'a' (line 2640)
    a_278940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 38), 'a', False)
    # Processing the call keyword arguments (line 2640)
    kwargs_278941 = {}
    # Getting the type of 'len' (line 2640)
    len_278939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 34), 'len', False)
    # Calling len(args, kwargs) (line 2640)
    len_call_result_278942 = invoke(stypy.reporting.localization.Localization(__file__, 2640, 34), len_278939, *[a_278940], **kwargs_278941)
    
    # Applying the binary operator '-' (line 2640)
    result_sub_278943 = python_operator(stypy.reporting.localization.Localization(__file__, 2640, 30), '-', n_278938, len_call_result_278942)
    
    # Processing the call keyword arguments (line 2640)
    kwargs_278944 = {}
    # Getting the type of 'np' (line 2640)
    np_278936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 21), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2640)
    zeros_278937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 21), np_278936, 'zeros')
    # Calling zeros(args, kwargs) (line 2640)
    zeros_call_result_278945 = invoke(stypy.reporting.localization.Localization(__file__, 2640, 21), zeros_278937, *[result_sub_278943], **kwargs_278944)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2640, 18), tuple_278934, zeros_call_result_278945)
    
    # Getting the type of 'np' (line 2640)
    np_278946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 12), 'np')
    # Obtaining the member 'r_' of a type (line 2640)
    r__278947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 12), np_278946, 'r_')
    # Obtaining the member '__getitem__' of a type (line 2640)
    getitem___278948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 12), r__278947, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2640)
    subscript_call_result_278949 = invoke(stypy.reporting.localization.Localization(__file__, 2640, 12), getitem___278948, tuple_278934)
    
    # Assigning a type to the variable 'a' (line 2640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2640, 8), 'a', subscript_call_result_278949)
    # SSA branch for the else part of an if statement (line 2639)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 2641)
    # Processing the call arguments (line 2641)
    # Getting the type of 'b' (line 2641)
    b_278951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 13), 'b', False)
    # Processing the call keyword arguments (line 2641)
    kwargs_278952 = {}
    # Getting the type of 'len' (line 2641)
    len_278950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 9), 'len', False)
    # Calling len(args, kwargs) (line 2641)
    len_call_result_278953 = invoke(stypy.reporting.localization.Localization(__file__, 2641, 9), len_278950, *[b_278951], **kwargs_278952)
    
    # Getting the type of 'n' (line 2641)
    n_278954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 18), 'n')
    # Applying the binary operator '<' (line 2641)
    result_lt_278955 = python_operator(stypy.reporting.localization.Localization(__file__, 2641, 9), '<', len_call_result_278953, n_278954)
    
    # Testing the type of an if condition (line 2641)
    if_condition_278956 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2641, 9), result_lt_278955)
    # Assigning a type to the variable 'if_condition_278956' (line 2641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2641, 9), 'if_condition_278956', if_condition_278956)
    # SSA begins for if statement (line 2641)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2642):
    
    # Assigning a Subscript to a Name (line 2642):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2642)
    tuple_278957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2642, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2642)
    # Adding element type (line 2642)
    # Getting the type of 'b' (line 2642)
    b_278958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 18), 'b')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2642, 18), tuple_278957, b_278958)
    # Adding element type (line 2642)
    
    # Call to zeros(...): (line 2642)
    # Processing the call arguments (line 2642)
    # Getting the type of 'n' (line 2642)
    n_278961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 30), 'n', False)
    
    # Call to len(...): (line 2642)
    # Processing the call arguments (line 2642)
    # Getting the type of 'b' (line 2642)
    b_278963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 38), 'b', False)
    # Processing the call keyword arguments (line 2642)
    kwargs_278964 = {}
    # Getting the type of 'len' (line 2642)
    len_278962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 34), 'len', False)
    # Calling len(args, kwargs) (line 2642)
    len_call_result_278965 = invoke(stypy.reporting.localization.Localization(__file__, 2642, 34), len_278962, *[b_278963], **kwargs_278964)
    
    # Applying the binary operator '-' (line 2642)
    result_sub_278966 = python_operator(stypy.reporting.localization.Localization(__file__, 2642, 30), '-', n_278961, len_call_result_278965)
    
    # Processing the call keyword arguments (line 2642)
    kwargs_278967 = {}
    # Getting the type of 'np' (line 2642)
    np_278959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 21), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2642)
    zeros_278960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2642, 21), np_278959, 'zeros')
    # Calling zeros(args, kwargs) (line 2642)
    zeros_call_result_278968 = invoke(stypy.reporting.localization.Localization(__file__, 2642, 21), zeros_278960, *[result_sub_278966], **kwargs_278967)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2642, 18), tuple_278957, zeros_call_result_278968)
    
    # Getting the type of 'np' (line 2642)
    np_278969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 12), 'np')
    # Obtaining the member 'r_' of a type (line 2642)
    r__278970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2642, 12), np_278969, 'r_')
    # Obtaining the member '__getitem__' of a type (line 2642)
    getitem___278971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2642, 12), r__278970, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2642)
    subscript_call_result_278972 = invoke(stypy.reporting.localization.Localization(__file__, 2642, 12), getitem___278971, tuple_278957)
    
    # Assigning a type to the variable 'b' (line 2642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2642, 8), 'b', subscript_call_result_278972)
    # SSA join for if statement (line 2641)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2639)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2644):
    
    # Assigning a BinOp to a Name (line 2644):
    
    # Call to eye(...): (line 2644)
    # Processing the call arguments (line 2644)
    # Getting the type of 'n' (line 2644)
    n_278975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 21), 'n', False)
    int_278976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2644, 25), 'int')
    # Applying the binary operator '-' (line 2644)
    result_sub_278977 = python_operator(stypy.reporting.localization.Localization(__file__, 2644, 21), '-', n_278975, int_278976)
    
    # Processing the call keyword arguments (line 2644)
    kwargs_278978 = {}
    # Getting the type of 'np' (line 2644)
    np_278973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 14), 'np', False)
    # Obtaining the member 'eye' of a type (line 2644)
    eye_278974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2644, 14), np_278973, 'eye')
    # Calling eye(args, kwargs) (line 2644)
    eye_call_result_278979 = invoke(stypy.reporting.localization.Localization(__file__, 2644, 14), eye_278974, *[result_sub_278977], **kwargs_278978)
    
    
    # Call to companion(...): (line 2644)
    # Processing the call arguments (line 2644)
    # Getting the type of 'a' (line 2644)
    a_278982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 47), 'a', False)
    # Processing the call keyword arguments (line 2644)
    kwargs_278983 = {}
    # Getting the type of 'linalg' (line 2644)
    linalg_278980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 30), 'linalg', False)
    # Obtaining the member 'companion' of a type (line 2644)
    companion_278981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2644, 30), linalg_278980, 'companion')
    # Calling companion(args, kwargs) (line 2644)
    companion_call_result_278984 = invoke(stypy.reporting.localization.Localization(__file__, 2644, 30), companion_278981, *[a_278982], **kwargs_278983)
    
    # Obtaining the member 'T' of a type (line 2644)
    T_278985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2644, 30), companion_call_result_278984, 'T')
    # Applying the binary operator '-' (line 2644)
    result_sub_278986 = python_operator(stypy.reporting.localization.Localization(__file__, 2644, 14), '-', eye_call_result_278979, T_278985)
    
    # Assigning a type to the variable 'IminusA' (line 2644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2644, 4), 'IminusA', result_sub_278986)
    
    # Assigning a BinOp to a Name (line 2645):
    
    # Assigning a BinOp to a Name (line 2645):
    
    # Obtaining the type of the subscript
    int_278987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2645, 10), 'int')
    slice_278988 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2645, 8), int_278987, None, None)
    # Getting the type of 'b' (line 2645)
    b_278989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 8), 'b')
    # Obtaining the member '__getitem__' of a type (line 2645)
    getitem___278990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2645, 8), b_278989, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2645)
    subscript_call_result_278991 = invoke(stypy.reporting.localization.Localization(__file__, 2645, 8), getitem___278990, slice_278988)
    
    
    # Obtaining the type of the subscript
    int_278992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2645, 18), 'int')
    slice_278993 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2645, 16), int_278992, None, None)
    # Getting the type of 'a' (line 2645)
    a_278994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 16), 'a')
    # Obtaining the member '__getitem__' of a type (line 2645)
    getitem___278995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2645, 16), a_278994, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2645)
    subscript_call_result_278996 = invoke(stypy.reporting.localization.Localization(__file__, 2645, 16), getitem___278995, slice_278993)
    
    
    # Obtaining the type of the subscript
    int_278997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2645, 26), 'int')
    # Getting the type of 'b' (line 2645)
    b_278998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 24), 'b')
    # Obtaining the member '__getitem__' of a type (line 2645)
    getitem___278999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2645, 24), b_278998, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2645)
    subscript_call_result_279000 = invoke(stypy.reporting.localization.Localization(__file__, 2645, 24), getitem___278999, int_278997)
    
    # Applying the binary operator '*' (line 2645)
    result_mul_279001 = python_operator(stypy.reporting.localization.Localization(__file__, 2645, 16), '*', subscript_call_result_278996, subscript_call_result_279000)
    
    # Applying the binary operator '-' (line 2645)
    result_sub_279002 = python_operator(stypy.reporting.localization.Localization(__file__, 2645, 8), '-', subscript_call_result_278991, result_mul_279001)
    
    # Assigning a type to the variable 'B' (line 2645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2645, 4), 'B', result_sub_279002)
    
    # Assigning a Call to a Name (line 2647):
    
    # Assigning a Call to a Name (line 2647):
    
    # Call to solve(...): (line 2647)
    # Processing the call arguments (line 2647)
    # Getting the type of 'IminusA' (line 2647)
    IminusA_279006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 25), 'IminusA', False)
    # Getting the type of 'B' (line 2647)
    B_279007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 34), 'B', False)
    # Processing the call keyword arguments (line 2647)
    kwargs_279008 = {}
    # Getting the type of 'np' (line 2647)
    np_279003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 9), 'np', False)
    # Obtaining the member 'linalg' of a type (line 2647)
    linalg_279004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2647, 9), np_279003, 'linalg')
    # Obtaining the member 'solve' of a type (line 2647)
    solve_279005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2647, 9), linalg_279004, 'solve')
    # Calling solve(args, kwargs) (line 2647)
    solve_call_result_279009 = invoke(stypy.reporting.localization.Localization(__file__, 2647, 9), solve_279005, *[IminusA_279006, B_279007], **kwargs_279008)
    
    # Assigning a type to the variable 'zi' (line 2647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2647, 4), 'zi', solve_call_result_279009)
    # Getting the type of 'zi' (line 2661)
    zi_279010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 11), 'zi')
    # Assigning a type to the variable 'stypy_return_type' (line 2661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2661, 4), 'stypy_return_type', zi_279010)
    
    # ################# End of 'lfilter_zi(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'lfilter_zi' in the type store
    # Getting the type of 'stypy_return_type' (line 2528)
    stypy_return_type_279011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2528, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279011)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'lfilter_zi'
    return stypy_return_type_279011

# Assigning a type to the variable 'lfilter_zi' (line 2528)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2528, 0), 'lfilter_zi', lfilter_zi)

@norecursion
def sosfilt_zi(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'sosfilt_zi'
    module_type_store = module_type_store.open_function_context('sosfilt_zi', 2664, 0, False)
    
    # Passed parameters checking function
    sosfilt_zi.stypy_localization = localization
    sosfilt_zi.stypy_type_of_self = None
    sosfilt_zi.stypy_type_store = module_type_store
    sosfilt_zi.stypy_function_name = 'sosfilt_zi'
    sosfilt_zi.stypy_param_names_list = ['sos']
    sosfilt_zi.stypy_varargs_param_name = None
    sosfilt_zi.stypy_kwargs_param_name = None
    sosfilt_zi.stypy_call_defaults = defaults
    sosfilt_zi.stypy_call_varargs = varargs
    sosfilt_zi.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sosfilt_zi', ['sos'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sosfilt_zi', localization, ['sos'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sosfilt_zi(...)' code ##################

    str_279012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2716, (-1)), 'str', "\n    Construct initial conditions for sosfilt for step response steady-state.\n\n    Compute an initial state `zi` for the `sosfilt` function that corresponds\n    to the steady state of the step response.\n\n    A typical use of this function is to set the initial state so that the\n    output of the filter starts at the same value as the first element of\n    the signal to be filtered.\n\n    Parameters\n    ----------\n    sos : array_like\n        Array of second-order filter coefficients, must have shape\n        ``(n_sections, 6)``. See `sosfilt` for the SOS filter format\n        specification.\n\n    Returns\n    -------\n    zi : ndarray\n        Initial conditions suitable for use with ``sosfilt``, shape\n        ``(n_sections, 2)``.\n\n    See Also\n    --------\n    sosfilt, zpk2sos\n\n    Notes\n    -----\n    .. versionadded:: 0.16.0\n\n    Examples\n    --------\n    Filter a rectangular pulse that begins at time 0, with and without\n    the use of the `zi` argument of `scipy.signal.sosfilt`.\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    >>> sos = signal.butter(9, 0.125, output='sos')\n    >>> zi = signal.sosfilt_zi(sos)\n    >>> x = (np.arange(250) < 100).astype(int)\n    >>> f1 = signal.sosfilt(sos, x)\n    >>> f2, zo = signal.sosfilt(sos, x, zi=zi)\n\n    >>> plt.plot(x, 'k--', label='x')\n    >>> plt.plot(f1, 'b', alpha=0.5, linewidth=2, label='filtered')\n    >>> plt.plot(f2, 'g', alpha=0.25, linewidth=4, label='filtered with zi')\n    >>> plt.legend(loc='best')\n    >>> plt.show()\n\n    ")
    
    # Assigning a Call to a Name (line 2717):
    
    # Assigning a Call to a Name (line 2717):
    
    # Call to asarray(...): (line 2717)
    # Processing the call arguments (line 2717)
    # Getting the type of 'sos' (line 2717)
    sos_279015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 21), 'sos', False)
    # Processing the call keyword arguments (line 2717)
    kwargs_279016 = {}
    # Getting the type of 'np' (line 2717)
    np_279013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 10), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2717)
    asarray_279014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2717, 10), np_279013, 'asarray')
    # Calling asarray(args, kwargs) (line 2717)
    asarray_call_result_279017 = invoke(stypy.reporting.localization.Localization(__file__, 2717, 10), asarray_279014, *[sos_279015], **kwargs_279016)
    
    # Assigning a type to the variable 'sos' (line 2717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2717, 4), 'sos', asarray_call_result_279017)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'sos' (line 2718)
    sos_279018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 7), 'sos')
    # Obtaining the member 'ndim' of a type (line 2718)
    ndim_279019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2718, 7), sos_279018, 'ndim')
    int_279020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2718, 19), 'int')
    # Applying the binary operator '!=' (line 2718)
    result_ne_279021 = python_operator(stypy.reporting.localization.Localization(__file__, 2718, 7), '!=', ndim_279019, int_279020)
    
    
    
    # Obtaining the type of the subscript
    int_279022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2718, 34), 'int')
    # Getting the type of 'sos' (line 2718)
    sos_279023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 24), 'sos')
    # Obtaining the member 'shape' of a type (line 2718)
    shape_279024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2718, 24), sos_279023, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2718)
    getitem___279025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2718, 24), shape_279024, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2718)
    subscript_call_result_279026 = invoke(stypy.reporting.localization.Localization(__file__, 2718, 24), getitem___279025, int_279022)
    
    int_279027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2718, 40), 'int')
    # Applying the binary operator '!=' (line 2718)
    result_ne_279028 = python_operator(stypy.reporting.localization.Localization(__file__, 2718, 24), '!=', subscript_call_result_279026, int_279027)
    
    # Applying the binary operator 'or' (line 2718)
    result_or_keyword_279029 = python_operator(stypy.reporting.localization.Localization(__file__, 2718, 7), 'or', result_ne_279021, result_ne_279028)
    
    # Testing the type of an if condition (line 2718)
    if_condition_279030 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2718, 4), result_or_keyword_279029)
    # Assigning a type to the variable 'if_condition_279030' (line 2718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2718, 4), 'if_condition_279030', if_condition_279030)
    # SSA begins for if statement (line 2718)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2719)
    # Processing the call arguments (line 2719)
    str_279032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2719, 25), 'str', 'sos must be shape (n_sections, 6)')
    # Processing the call keyword arguments (line 2719)
    kwargs_279033 = {}
    # Getting the type of 'ValueError' (line 2719)
    ValueError_279031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2719)
    ValueError_call_result_279034 = invoke(stypy.reporting.localization.Localization(__file__, 2719, 14), ValueError_279031, *[str_279032], **kwargs_279033)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2719, 8), ValueError_call_result_279034, 'raise parameter', BaseException)
    # SSA join for if statement (line 2718)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2721):
    
    # Assigning a Subscript to a Name (line 2721):
    
    # Obtaining the type of the subscript
    int_279035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2721, 27), 'int')
    # Getting the type of 'sos' (line 2721)
    sos_279036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2721, 17), 'sos')
    # Obtaining the member 'shape' of a type (line 2721)
    shape_279037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2721, 17), sos_279036, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2721)
    getitem___279038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2721, 17), shape_279037, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2721)
    subscript_call_result_279039 = invoke(stypy.reporting.localization.Localization(__file__, 2721, 17), getitem___279038, int_279035)
    
    # Assigning a type to the variable 'n_sections' (line 2721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2721, 4), 'n_sections', subscript_call_result_279039)
    
    # Assigning a Call to a Name (line 2722):
    
    # Assigning a Call to a Name (line 2722):
    
    # Call to empty(...): (line 2722)
    # Processing the call arguments (line 2722)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2722)
    tuple_279042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2722, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2722)
    # Adding element type (line 2722)
    # Getting the type of 'n_sections' (line 2722)
    n_sections_279043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2722, 19), 'n_sections', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2722, 19), tuple_279042, n_sections_279043)
    # Adding element type (line 2722)
    int_279044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2722, 31), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2722, 19), tuple_279042, int_279044)
    
    # Processing the call keyword arguments (line 2722)
    kwargs_279045 = {}
    # Getting the type of 'np' (line 2722)
    np_279040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2722, 9), 'np', False)
    # Obtaining the member 'empty' of a type (line 2722)
    empty_279041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2722, 9), np_279040, 'empty')
    # Calling empty(args, kwargs) (line 2722)
    empty_call_result_279046 = invoke(stypy.reporting.localization.Localization(__file__, 2722, 9), empty_279041, *[tuple_279042], **kwargs_279045)
    
    # Assigning a type to the variable 'zi' (line 2722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2722, 4), 'zi', empty_call_result_279046)
    
    # Assigning a Num to a Name (line 2723):
    
    # Assigning a Num to a Name (line 2723):
    float_279047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2723, 12), 'float')
    # Assigning a type to the variable 'scale' (line 2723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2723, 4), 'scale', float_279047)
    
    
    # Call to range(...): (line 2724)
    # Processing the call arguments (line 2724)
    # Getting the type of 'n_sections' (line 2724)
    n_sections_279049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 25), 'n_sections', False)
    # Processing the call keyword arguments (line 2724)
    kwargs_279050 = {}
    # Getting the type of 'range' (line 2724)
    range_279048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2724, 19), 'range', False)
    # Calling range(args, kwargs) (line 2724)
    range_call_result_279051 = invoke(stypy.reporting.localization.Localization(__file__, 2724, 19), range_279048, *[n_sections_279049], **kwargs_279050)
    
    # Testing the type of a for loop iterable (line 2724)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2724, 4), range_call_result_279051)
    # Getting the type of the for loop variable (line 2724)
    for_loop_var_279052 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2724, 4), range_call_result_279051)
    # Assigning a type to the variable 'section' (line 2724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2724, 4), 'section', for_loop_var_279052)
    # SSA begins for a for statement (line 2724)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 2725):
    
    # Assigning a Subscript to a Name (line 2725):
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 2725)
    section_279053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2725, 16), 'section')
    int_279054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2725, 26), 'int')
    slice_279055 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2725, 12), None, int_279054, None)
    # Getting the type of 'sos' (line 2725)
    sos_279056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2725, 12), 'sos')
    # Obtaining the member '__getitem__' of a type (line 2725)
    getitem___279057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2725, 12), sos_279056, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2725)
    subscript_call_result_279058 = invoke(stypy.reporting.localization.Localization(__file__, 2725, 12), getitem___279057, (section_279053, slice_279055))
    
    # Assigning a type to the variable 'b' (line 2725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2725, 8), 'b', subscript_call_result_279058)
    
    # Assigning a Subscript to a Name (line 2726):
    
    # Assigning a Subscript to a Name (line 2726):
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 2726)
    section_279059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 16), 'section')
    int_279060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2726, 25), 'int')
    slice_279061 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2726, 12), int_279060, None, None)
    # Getting the type of 'sos' (line 2726)
    sos_279062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 12), 'sos')
    # Obtaining the member '__getitem__' of a type (line 2726)
    getitem___279063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2726, 12), sos_279062, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2726)
    subscript_call_result_279064 = invoke(stypy.reporting.localization.Localization(__file__, 2726, 12), getitem___279063, (section_279059, slice_279061))
    
    # Assigning a type to the variable 'a' (line 2726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2726, 8), 'a', subscript_call_result_279064)
    
    # Assigning a BinOp to a Subscript (line 2727):
    
    # Assigning a BinOp to a Subscript (line 2727):
    # Getting the type of 'scale' (line 2727)
    scale_279065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 22), 'scale')
    
    # Call to lfilter_zi(...): (line 2727)
    # Processing the call arguments (line 2727)
    # Getting the type of 'b' (line 2727)
    b_279067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 41), 'b', False)
    # Getting the type of 'a' (line 2727)
    a_279068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 44), 'a', False)
    # Processing the call keyword arguments (line 2727)
    kwargs_279069 = {}
    # Getting the type of 'lfilter_zi' (line 2727)
    lfilter_zi_279066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 30), 'lfilter_zi', False)
    # Calling lfilter_zi(args, kwargs) (line 2727)
    lfilter_zi_call_result_279070 = invoke(stypy.reporting.localization.Localization(__file__, 2727, 30), lfilter_zi_279066, *[b_279067, a_279068], **kwargs_279069)
    
    # Applying the binary operator '*' (line 2727)
    result_mul_279071 = python_operator(stypy.reporting.localization.Localization(__file__, 2727, 22), '*', scale_279065, lfilter_zi_call_result_279070)
    
    # Getting the type of 'zi' (line 2727)
    zi_279072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 8), 'zi')
    # Getting the type of 'section' (line 2727)
    section_279073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2727, 11), 'section')
    # Storing an element on a container (line 2727)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2727, 8), zi_279072, (section_279073, result_mul_279071))
    
    # Getting the type of 'scale' (line 2731)
    scale_279074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 8), 'scale')
    
    # Call to sum(...): (line 2731)
    # Processing the call keyword arguments (line 2731)
    kwargs_279077 = {}
    # Getting the type of 'b' (line 2731)
    b_279075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 17), 'b', False)
    # Obtaining the member 'sum' of a type (line 2731)
    sum_279076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2731, 17), b_279075, 'sum')
    # Calling sum(args, kwargs) (line 2731)
    sum_call_result_279078 = invoke(stypy.reporting.localization.Localization(__file__, 2731, 17), sum_279076, *[], **kwargs_279077)
    
    
    # Call to sum(...): (line 2731)
    # Processing the call keyword arguments (line 2731)
    kwargs_279081 = {}
    # Getting the type of 'a' (line 2731)
    a_279079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 27), 'a', False)
    # Obtaining the member 'sum' of a type (line 2731)
    sum_279080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2731, 27), a_279079, 'sum')
    # Calling sum(args, kwargs) (line 2731)
    sum_call_result_279082 = invoke(stypy.reporting.localization.Localization(__file__, 2731, 27), sum_279080, *[], **kwargs_279081)
    
    # Applying the binary operator 'div' (line 2731)
    result_div_279083 = python_operator(stypy.reporting.localization.Localization(__file__, 2731, 17), 'div', sum_call_result_279078, sum_call_result_279082)
    
    # Applying the binary operator '*=' (line 2731)
    result_imul_279084 = python_operator(stypy.reporting.localization.Localization(__file__, 2731, 8), '*=', scale_279074, result_div_279083)
    # Assigning a type to the variable 'scale' (line 2731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2731, 8), 'scale', result_imul_279084)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'zi' (line 2733)
    zi_279085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 11), 'zi')
    # Assigning a type to the variable 'stypy_return_type' (line 2733)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2733, 4), 'stypy_return_type', zi_279085)
    
    # ################# End of 'sosfilt_zi(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sosfilt_zi' in the type store
    # Getting the type of 'stypy_return_type' (line 2664)
    stypy_return_type_279086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279086)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sosfilt_zi'
    return stypy_return_type_279086

# Assigning a type to the variable 'sosfilt_zi' (line 2664)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2664, 0), 'sosfilt_zi', sosfilt_zi)

@norecursion
def _filtfilt_gust(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_279087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2736, 33), 'int')
    # Getting the type of 'None' (line 2736)
    None_279088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 43), 'None')
    defaults = [int_279087, None_279088]
    # Create a new context for function '_filtfilt_gust'
    module_type_store = module_type_store.open_function_context('_filtfilt_gust', 2736, 0, False)
    
    # Passed parameters checking function
    _filtfilt_gust.stypy_localization = localization
    _filtfilt_gust.stypy_type_of_self = None
    _filtfilt_gust.stypy_type_store = module_type_store
    _filtfilt_gust.stypy_function_name = '_filtfilt_gust'
    _filtfilt_gust.stypy_param_names_list = ['b', 'a', 'x', 'axis', 'irlen']
    _filtfilt_gust.stypy_varargs_param_name = None
    _filtfilt_gust.stypy_kwargs_param_name = None
    _filtfilt_gust.stypy_call_defaults = defaults
    _filtfilt_gust.stypy_call_varargs = varargs
    _filtfilt_gust.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_filtfilt_gust', ['b', 'a', 'x', 'axis', 'irlen'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_filtfilt_gust', localization, ['b', 'a', 'x', 'axis', 'irlen'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_filtfilt_gust(...)' code ##################

    str_279089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2781, (-1)), 'str', "Forward-backward IIR filter that uses Gustafsson's method.\n\n    Apply the IIR filter defined by `(b,a)` to `x` twice, first forward\n    then backward, using Gustafsson's initial conditions [1]_.\n\n    Let ``y_fb`` be the result of filtering first forward and then backward,\n    and let ``y_bf`` be the result of filtering first backward then forward.\n    Gustafsson's method is to compute initial conditions for the forward\n    pass and the backward pass such that ``y_fb == y_bf``.\n\n    Parameters\n    ----------\n    b : scalar or 1-D ndarray\n        Numerator coefficients of the filter.\n    a : scalar or 1-D ndarray\n        Denominator coefficients of the filter.\n    x : ndarray\n        Data to be filtered.\n    axis : int, optional\n        Axis of `x` to be filtered.  Default is -1.\n    irlen : int or None, optional\n        The length of the nonnegligible part of the impulse response.\n        If `irlen` is None, or if the length of the signal is less than\n        ``2 * irlen``, then no part of the impulse response is ignored.\n\n    Returns\n    -------\n    y : ndarray\n        The filtered data.\n    x0 : ndarray\n        Initial condition for the forward filter.\n    x1 : ndarray\n        Initial condition for the backward filter.\n\n    Notes\n    -----\n    Typically the return values `x0` and `x1` are not needed by the\n    caller.  The intended use of these return values is in unit tests.\n\n    References\n    ----------\n    .. [1] F. Gustaffson. Determining the initial states in forward-backward\n           filtering. Transactions on Signal Processing, 46(4):988-992, 1996.\n\n    ")
    
    # Assigning a Call to a Name (line 2785):
    
    # Assigning a Call to a Name (line 2785):
    
    # Call to atleast_1d(...): (line 2785)
    # Processing the call arguments (line 2785)
    # Getting the type of 'b' (line 2785)
    b_279092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 22), 'b', False)
    # Processing the call keyword arguments (line 2785)
    kwargs_279093 = {}
    # Getting the type of 'np' (line 2785)
    np_279090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2785, 8), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 2785)
    atleast_1d_279091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2785, 8), np_279090, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 2785)
    atleast_1d_call_result_279094 = invoke(stypy.reporting.localization.Localization(__file__, 2785, 8), atleast_1d_279091, *[b_279092], **kwargs_279093)
    
    # Assigning a type to the variable 'b' (line 2785)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2785, 4), 'b', atleast_1d_call_result_279094)
    
    # Assigning a Call to a Name (line 2786):
    
    # Assigning a Call to a Name (line 2786):
    
    # Call to atleast_1d(...): (line 2786)
    # Processing the call arguments (line 2786)
    # Getting the type of 'a' (line 2786)
    a_279097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 22), 'a', False)
    # Processing the call keyword arguments (line 2786)
    kwargs_279098 = {}
    # Getting the type of 'np' (line 2786)
    np_279095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 8), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 2786)
    atleast_1d_279096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2786, 8), np_279095, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 2786)
    atleast_1d_call_result_279099 = invoke(stypy.reporting.localization.Localization(__file__, 2786, 8), atleast_1d_279096, *[a_279097], **kwargs_279098)
    
    # Assigning a type to the variable 'a' (line 2786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2786, 4), 'a', atleast_1d_call_result_279099)
    
    # Assigning a BinOp to a Name (line 2788):
    
    # Assigning a BinOp to a Name (line 2788):
    
    # Call to max(...): (line 2788)
    # Processing the call arguments (line 2788)
    
    # Call to len(...): (line 2788)
    # Processing the call arguments (line 2788)
    # Getting the type of 'b' (line 2788)
    b_279102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 20), 'b', False)
    # Processing the call keyword arguments (line 2788)
    kwargs_279103 = {}
    # Getting the type of 'len' (line 2788)
    len_279101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 16), 'len', False)
    # Calling len(args, kwargs) (line 2788)
    len_call_result_279104 = invoke(stypy.reporting.localization.Localization(__file__, 2788, 16), len_279101, *[b_279102], **kwargs_279103)
    
    
    # Call to len(...): (line 2788)
    # Processing the call arguments (line 2788)
    # Getting the type of 'a' (line 2788)
    a_279106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 28), 'a', False)
    # Processing the call keyword arguments (line 2788)
    kwargs_279107 = {}
    # Getting the type of 'len' (line 2788)
    len_279105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 24), 'len', False)
    # Calling len(args, kwargs) (line 2788)
    len_call_result_279108 = invoke(stypy.reporting.localization.Localization(__file__, 2788, 24), len_279105, *[a_279106], **kwargs_279107)
    
    # Processing the call keyword arguments (line 2788)
    kwargs_279109 = {}
    # Getting the type of 'max' (line 2788)
    max_279100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 12), 'max', False)
    # Calling max(args, kwargs) (line 2788)
    max_call_result_279110 = invoke(stypy.reporting.localization.Localization(__file__, 2788, 12), max_279100, *[len_call_result_279104, len_call_result_279108], **kwargs_279109)
    
    int_279111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2788, 34), 'int')
    # Applying the binary operator '-' (line 2788)
    result_sub_279112 = python_operator(stypy.reporting.localization.Localization(__file__, 2788, 12), '-', max_call_result_279110, int_279111)
    
    # Assigning a type to the variable 'order' (line 2788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2788, 4), 'order', result_sub_279112)
    
    
    # Getting the type of 'order' (line 2789)
    order_279113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 7), 'order')
    int_279114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2789, 16), 'int')
    # Applying the binary operator '==' (line 2789)
    result_eq_279115 = python_operator(stypy.reporting.localization.Localization(__file__, 2789, 7), '==', order_279113, int_279114)
    
    # Testing the type of an if condition (line 2789)
    if_condition_279116 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2789, 4), result_eq_279115)
    # Assigning a type to the variable 'if_condition_279116' (line 2789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2789, 4), 'if_condition_279116', if_condition_279116)
    # SSA begins for if statement (line 2789)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2791):
    
    # Assigning a BinOp to a Name (line 2791):
    
    # Obtaining the type of the subscript
    int_279117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2791, 19), 'int')
    # Getting the type of 'b' (line 2791)
    b_279118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 17), 'b')
    # Obtaining the member '__getitem__' of a type (line 2791)
    getitem___279119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2791, 17), b_279118, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2791)
    subscript_call_result_279120 = invoke(stypy.reporting.localization.Localization(__file__, 2791, 17), getitem___279119, int_279117)
    
    
    # Obtaining the type of the subscript
    int_279121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2791, 26), 'int')
    # Getting the type of 'a' (line 2791)
    a_279122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 24), 'a')
    # Obtaining the member '__getitem__' of a type (line 2791)
    getitem___279123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2791, 24), a_279122, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2791)
    subscript_call_result_279124 = invoke(stypy.reporting.localization.Localization(__file__, 2791, 24), getitem___279123, int_279121)
    
    # Applying the binary operator 'div' (line 2791)
    result_div_279125 = python_operator(stypy.reporting.localization.Localization(__file__, 2791, 17), 'div', subscript_call_result_279120, subscript_call_result_279124)
    
    int_279126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2791, 31), 'int')
    # Applying the binary operator '**' (line 2791)
    result_pow_279127 = python_operator(stypy.reporting.localization.Localization(__file__, 2791, 16), '**', result_div_279125, int_279126)
    
    # Assigning a type to the variable 'scale' (line 2791)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2791, 8), 'scale', result_pow_279127)
    
    # Assigning a BinOp to a Name (line 2792):
    
    # Assigning a BinOp to a Name (line 2792):
    # Getting the type of 'scale' (line 2792)
    scale_279128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 12), 'scale')
    # Getting the type of 'x' (line 2792)
    x_279129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 20), 'x')
    # Applying the binary operator '*' (line 2792)
    result_mul_279130 = python_operator(stypy.reporting.localization.Localization(__file__, 2792, 12), '*', scale_279128, x_279129)
    
    # Assigning a type to the variable 'y' (line 2792)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2792, 8), 'y', result_mul_279130)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2793)
    tuple_279131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2793, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2793)
    # Adding element type (line 2793)
    # Getting the type of 'y' (line 2793)
    y_279132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 15), 'y')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2793, 15), tuple_279131, y_279132)
    # Adding element type (line 2793)
    
    # Call to array(...): (line 2793)
    # Processing the call arguments (line 2793)
    
    # Obtaining an instance of the builtin type 'list' (line 2793)
    list_279135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2793, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2793)
    
    # Processing the call keyword arguments (line 2793)
    kwargs_279136 = {}
    # Getting the type of 'np' (line 2793)
    np_279133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 18), 'np', False)
    # Obtaining the member 'array' of a type (line 2793)
    array_279134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2793, 18), np_279133, 'array')
    # Calling array(args, kwargs) (line 2793)
    array_call_result_279137 = invoke(stypy.reporting.localization.Localization(__file__, 2793, 18), array_279134, *[list_279135], **kwargs_279136)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2793, 15), tuple_279131, array_call_result_279137)
    # Adding element type (line 2793)
    
    # Call to array(...): (line 2793)
    # Processing the call arguments (line 2793)
    
    # Obtaining an instance of the builtin type 'list' (line 2793)
    list_279140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2793, 41), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2793)
    
    # Processing the call keyword arguments (line 2793)
    kwargs_279141 = {}
    # Getting the type of 'np' (line 2793)
    np_279138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 32), 'np', False)
    # Obtaining the member 'array' of a type (line 2793)
    array_279139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2793, 32), np_279138, 'array')
    # Calling array(args, kwargs) (line 2793)
    array_call_result_279142 = invoke(stypy.reporting.localization.Localization(__file__, 2793, 32), array_279139, *[list_279140], **kwargs_279141)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2793, 15), tuple_279131, array_call_result_279142)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2793, 8), 'stypy_return_type', tuple_279131)
    # SSA join for if statement (line 2789)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axis' (line 2795)
    axis_279143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 7), 'axis')
    int_279144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2795, 15), 'int')
    # Applying the binary operator '!=' (line 2795)
    result_ne_279145 = python_operator(stypy.reporting.localization.Localization(__file__, 2795, 7), '!=', axis_279143, int_279144)
    
    
    # Getting the type of 'axis' (line 2795)
    axis_279146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 21), 'axis')
    # Getting the type of 'x' (line 2795)
    x_279147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 29), 'x')
    # Obtaining the member 'ndim' of a type (line 2795)
    ndim_279148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2795, 29), x_279147, 'ndim')
    int_279149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2795, 38), 'int')
    # Applying the binary operator '-' (line 2795)
    result_sub_279150 = python_operator(stypy.reporting.localization.Localization(__file__, 2795, 29), '-', ndim_279148, int_279149)
    
    # Applying the binary operator '!=' (line 2795)
    result_ne_279151 = python_operator(stypy.reporting.localization.Localization(__file__, 2795, 21), '!=', axis_279146, result_sub_279150)
    
    # Applying the binary operator 'or' (line 2795)
    result_or_keyword_279152 = python_operator(stypy.reporting.localization.Localization(__file__, 2795, 7), 'or', result_ne_279145, result_ne_279151)
    
    # Testing the type of an if condition (line 2795)
    if_condition_279153 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2795, 4), result_or_keyword_279152)
    # Assigning a type to the variable 'if_condition_279153' (line 2795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2795, 4), 'if_condition_279153', if_condition_279153)
    # SSA begins for if statement (line 2795)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2797):
    
    # Assigning a Call to a Name (line 2797):
    
    # Call to swapaxes(...): (line 2797)
    # Processing the call arguments (line 2797)
    # Getting the type of 'x' (line 2797)
    x_279156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 24), 'x', False)
    # Getting the type of 'axis' (line 2797)
    axis_279157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 27), 'axis', False)
    # Getting the type of 'x' (line 2797)
    x_279158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 33), 'x', False)
    # Obtaining the member 'ndim' of a type (line 2797)
    ndim_279159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2797, 33), x_279158, 'ndim')
    int_279160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2797, 42), 'int')
    # Applying the binary operator '-' (line 2797)
    result_sub_279161 = python_operator(stypy.reporting.localization.Localization(__file__, 2797, 33), '-', ndim_279159, int_279160)
    
    # Processing the call keyword arguments (line 2797)
    kwargs_279162 = {}
    # Getting the type of 'np' (line 2797)
    np_279154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 12), 'np', False)
    # Obtaining the member 'swapaxes' of a type (line 2797)
    swapaxes_279155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2797, 12), np_279154, 'swapaxes')
    # Calling swapaxes(args, kwargs) (line 2797)
    swapaxes_call_result_279163 = invoke(stypy.reporting.localization.Localization(__file__, 2797, 12), swapaxes_279155, *[x_279156, axis_279157, result_sub_279161], **kwargs_279162)
    
    # Assigning a type to the variable 'x' (line 2797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2797, 8), 'x', swapaxes_call_result_279163)
    # SSA join for if statement (line 2795)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2800):
    
    # Assigning a Subscript to a Name (line 2800):
    
    # Obtaining the type of the subscript
    int_279164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2800, 16), 'int')
    # Getting the type of 'x' (line 2800)
    x_279165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 8), 'x')
    # Obtaining the member 'shape' of a type (line 2800)
    shape_279166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2800, 8), x_279165, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2800)
    getitem___279167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2800, 8), shape_279166, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2800)
    subscript_call_result_279168 = invoke(stypy.reporting.localization.Localization(__file__, 2800, 8), getitem___279167, int_279164)
    
    # Assigning a type to the variable 'n' (line 2800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2800, 4), 'n', subscript_call_result_279168)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'irlen' (line 2802)
    irlen_279169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 7), 'irlen')
    # Getting the type of 'None' (line 2802)
    None_279170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 16), 'None')
    # Applying the binary operator 'is' (line 2802)
    result_is__279171 = python_operator(stypy.reporting.localization.Localization(__file__, 2802, 7), 'is', irlen_279169, None_279170)
    
    
    # Getting the type of 'n' (line 2802)
    n_279172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 24), 'n')
    int_279173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2802, 29), 'int')
    # Getting the type of 'irlen' (line 2802)
    irlen_279174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2802, 31), 'irlen')
    # Applying the binary operator '*' (line 2802)
    result_mul_279175 = python_operator(stypy.reporting.localization.Localization(__file__, 2802, 29), '*', int_279173, irlen_279174)
    
    # Applying the binary operator '<=' (line 2802)
    result_le_279176 = python_operator(stypy.reporting.localization.Localization(__file__, 2802, 24), '<=', n_279172, result_mul_279175)
    
    # Applying the binary operator 'or' (line 2802)
    result_or_keyword_279177 = python_operator(stypy.reporting.localization.Localization(__file__, 2802, 7), 'or', result_is__279171, result_le_279176)
    
    # Testing the type of an if condition (line 2802)
    if_condition_279178 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2802, 4), result_or_keyword_279177)
    # Assigning a type to the variable 'if_condition_279178' (line 2802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2802, 4), 'if_condition_279178', if_condition_279178)
    # SSA begins for if statement (line 2802)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2803):
    
    # Assigning a Name to a Name (line 2803):
    # Getting the type of 'n' (line 2803)
    n_279179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2803, 12), 'n')
    # Assigning a type to the variable 'm' (line 2803)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2803, 8), 'm', n_279179)
    # SSA branch for the else part of an if statement (line 2802)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2805):
    
    # Assigning a Name to a Name (line 2805):
    # Getting the type of 'irlen' (line 2805)
    irlen_279180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2805, 12), 'irlen')
    # Assigning a type to the variable 'm' (line 2805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2805, 8), 'm', irlen_279180)
    # SSA join for if statement (line 2802)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2815):
    
    # Assigning a Call to a Name (line 2815):
    
    # Call to zeros(...): (line 2815)
    # Processing the call arguments (line 2815)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2815)
    tuple_279183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2815, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2815)
    # Adding element type (line 2815)
    # Getting the type of 'm' (line 2815)
    m_279184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 20), 'm', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2815, 20), tuple_279183, m_279184)
    # Adding element type (line 2815)
    # Getting the type of 'order' (line 2815)
    order_279185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 23), 'order', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2815, 20), tuple_279183, order_279185)
    
    # Processing the call keyword arguments (line 2815)
    kwargs_279186 = {}
    # Getting the type of 'np' (line 2815)
    np_279181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 10), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2815)
    zeros_279182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2815, 10), np_279181, 'zeros')
    # Calling zeros(args, kwargs) (line 2815)
    zeros_call_result_279187 = invoke(stypy.reporting.localization.Localization(__file__, 2815, 10), zeros_279182, *[tuple_279183], **kwargs_279186)
    
    # Assigning a type to the variable 'Obs' (line 2815)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2815, 4), 'Obs', zeros_call_result_279187)
    
    # Assigning a Call to a Name (line 2816):
    
    # Assigning a Call to a Name (line 2816):
    
    # Call to zeros(...): (line 2816)
    # Processing the call arguments (line 2816)
    # Getting the type of 'order' (line 2816)
    order_279190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2816, 18), 'order', False)
    # Processing the call keyword arguments (line 2816)
    kwargs_279191 = {}
    # Getting the type of 'np' (line 2816)
    np_279188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2816, 9), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2816)
    zeros_279189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2816, 9), np_279188, 'zeros')
    # Calling zeros(args, kwargs) (line 2816)
    zeros_call_result_279192 = invoke(stypy.reporting.localization.Localization(__file__, 2816, 9), zeros_279189, *[order_279190], **kwargs_279191)
    
    # Assigning a type to the variable 'zi' (line 2816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2816, 4), 'zi', zeros_call_result_279192)
    
    # Assigning a Num to a Subscript (line 2817):
    
    # Assigning a Num to a Subscript (line 2817):
    int_279193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2817, 12), 'int')
    # Getting the type of 'zi' (line 2817)
    zi_279194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2817, 4), 'zi')
    int_279195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2817, 7), 'int')
    # Storing an element on a container (line 2817)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2817, 4), zi_279194, (int_279195, int_279193))
    
    # Assigning a Subscript to a Subscript (line 2818):
    
    # Assigning a Subscript to a Subscript (line 2818):
    
    # Obtaining the type of the subscript
    int_279196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2818, 50), 'int')
    
    # Call to lfilter(...): (line 2818)
    # Processing the call arguments (line 2818)
    # Getting the type of 'b' (line 2818)
    b_279198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 24), 'b', False)
    # Getting the type of 'a' (line 2818)
    a_279199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 27), 'a', False)
    
    # Call to zeros(...): (line 2818)
    # Processing the call arguments (line 2818)
    # Getting the type of 'm' (line 2818)
    m_279202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 39), 'm', False)
    # Processing the call keyword arguments (line 2818)
    kwargs_279203 = {}
    # Getting the type of 'np' (line 2818)
    np_279200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 30), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2818)
    zeros_279201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2818, 30), np_279200, 'zeros')
    # Calling zeros(args, kwargs) (line 2818)
    zeros_call_result_279204 = invoke(stypy.reporting.localization.Localization(__file__, 2818, 30), zeros_279201, *[m_279202], **kwargs_279203)
    
    # Processing the call keyword arguments (line 2818)
    # Getting the type of 'zi' (line 2818)
    zi_279205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 46), 'zi', False)
    keyword_279206 = zi_279205
    kwargs_279207 = {'zi': keyword_279206}
    # Getting the type of 'lfilter' (line 2818)
    lfilter_279197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 16), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 2818)
    lfilter_call_result_279208 = invoke(stypy.reporting.localization.Localization(__file__, 2818, 16), lfilter_279197, *[b_279198, a_279199, zeros_call_result_279204], **kwargs_279207)
    
    # Obtaining the member '__getitem__' of a type (line 2818)
    getitem___279209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2818, 16), lfilter_call_result_279208, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2818)
    subscript_call_result_279210 = invoke(stypy.reporting.localization.Localization(__file__, 2818, 16), getitem___279209, int_279196)
    
    # Getting the type of 'Obs' (line 2818)
    Obs_279211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 4), 'Obs')
    slice_279212 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2818, 4), None, None, None)
    int_279213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2818, 11), 'int')
    # Storing an element on a container (line 2818)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2818, 4), Obs_279211, ((slice_279212, int_279213), subscript_call_result_279210))
    
    
    # Call to range(...): (line 2819)
    # Processing the call arguments (line 2819)
    int_279215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2819, 19), 'int')
    # Getting the type of 'order' (line 2819)
    order_279216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 22), 'order', False)
    # Processing the call keyword arguments (line 2819)
    kwargs_279217 = {}
    # Getting the type of 'range' (line 2819)
    range_279214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 13), 'range', False)
    # Calling range(args, kwargs) (line 2819)
    range_call_result_279218 = invoke(stypy.reporting.localization.Localization(__file__, 2819, 13), range_279214, *[int_279215, order_279216], **kwargs_279217)
    
    # Testing the type of a for loop iterable (line 2819)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2819, 4), range_call_result_279218)
    # Getting the type of the for loop variable (line 2819)
    for_loop_var_279219 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2819, 4), range_call_result_279218)
    # Assigning a type to the variable 'k' (line 2819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2819, 4), 'k', for_loop_var_279219)
    # SSA begins for a for statement (line 2819)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Subscript (line 2820):
    
    # Assigning a Subscript to a Subscript (line 2820):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'k' (line 2820)
    k_279220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 27), 'k')
    # Applying the 'usub' unary operator (line 2820)
    result___neg___279221 = python_operator(stypy.reporting.localization.Localization(__file__, 2820, 26), 'usub', k_279220)
    
    slice_279222 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2820, 21), None, result___neg___279221, None)
    int_279223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2820, 30), 'int')
    # Getting the type of 'Obs' (line 2820)
    Obs_279224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 21), 'Obs')
    # Obtaining the member '__getitem__' of a type (line 2820)
    getitem___279225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2820, 21), Obs_279224, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2820)
    subscript_call_result_279226 = invoke(stypy.reporting.localization.Localization(__file__, 2820, 21), getitem___279225, (slice_279222, int_279223))
    
    # Getting the type of 'Obs' (line 2820)
    Obs_279227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 8), 'Obs')
    # Getting the type of 'k' (line 2820)
    k_279228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 12), 'k')
    slice_279229 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2820, 8), k_279228, None, None)
    # Getting the type of 'k' (line 2820)
    k_279230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 16), 'k')
    # Storing an element on a container (line 2820)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2820, 8), Obs_279227, ((slice_279229, k_279230), subscript_call_result_279226))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2823):
    
    # Assigning a Subscript to a Name (line 2823):
    
    # Obtaining the type of the subscript
    int_279231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2823, 17), 'int')
    slice_279232 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2823, 11), None, None, int_279231)
    # Getting the type of 'Obs' (line 2823)
    Obs_279233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2823, 11), 'Obs')
    # Obtaining the member '__getitem__' of a type (line 2823)
    getitem___279234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2823, 11), Obs_279233, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2823)
    subscript_call_result_279235 = invoke(stypy.reporting.localization.Localization(__file__, 2823, 11), getitem___279234, slice_279232)
    
    # Assigning a type to the variable 'Obsr' (line 2823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2823, 4), 'Obsr', subscript_call_result_279235)
    
    # Assigning a Call to a Name (line 2833):
    
    # Assigning a Call to a Name (line 2833):
    
    # Call to lfilter(...): (line 2833)
    # Processing the call arguments (line 2833)
    # Getting the type of 'b' (line 2833)
    b_279237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 16), 'b', False)
    # Getting the type of 'a' (line 2833)
    a_279238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 19), 'a', False)
    
    # Obtaining the type of the subscript
    int_279239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2833, 28), 'int')
    slice_279240 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2833, 22), None, None, int_279239)
    # Getting the type of 'Obs' (line 2833)
    Obs_279241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 22), 'Obs', False)
    # Obtaining the member '__getitem__' of a type (line 2833)
    getitem___279242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2833, 22), Obs_279241, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2833)
    subscript_call_result_279243 = invoke(stypy.reporting.localization.Localization(__file__, 2833, 22), getitem___279242, slice_279240)
    
    # Processing the call keyword arguments (line 2833)
    int_279244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2833, 38), 'int')
    keyword_279245 = int_279244
    kwargs_279246 = {'axis': keyword_279245}
    # Getting the type of 'lfilter' (line 2833)
    lfilter_279236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 8), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 2833)
    lfilter_call_result_279247 = invoke(stypy.reporting.localization.Localization(__file__, 2833, 8), lfilter_279236, *[b_279237, a_279238, subscript_call_result_279243], **kwargs_279246)
    
    # Assigning a type to the variable 'S' (line 2833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2833, 4), 'S', lfilter_call_result_279247)
    
    # Assigning a Subscript to a Name (line 2836):
    
    # Assigning a Subscript to a Name (line 2836):
    
    # Obtaining the type of the subscript
    int_279248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2836, 13), 'int')
    slice_279249 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2836, 9), None, None, int_279248)
    # Getting the type of 'S' (line 2836)
    S_279250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2836, 9), 'S')
    # Obtaining the member '__getitem__' of a type (line 2836)
    getitem___279251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2836, 9), S_279250, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2836)
    subscript_call_result_279252 = invoke(stypy.reporting.localization.Localization(__file__, 2836, 9), getitem___279251, slice_279249)
    
    # Assigning a type to the variable 'Sr' (line 2836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2836, 4), 'Sr', subscript_call_result_279252)
    
    
    # Getting the type of 'm' (line 2839)
    m_279253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 7), 'm')
    # Getting the type of 'n' (line 2839)
    n_279254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 12), 'n')
    # Applying the binary operator '==' (line 2839)
    result_eq_279255 = python_operator(stypy.reporting.localization.Localization(__file__, 2839, 7), '==', m_279253, n_279254)
    
    # Testing the type of an if condition (line 2839)
    if_condition_279256 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2839, 4), result_eq_279255)
    # Assigning a type to the variable 'if_condition_279256' (line 2839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2839, 4), 'if_condition_279256', if_condition_279256)
    # SSA begins for if statement (line 2839)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2840):
    
    # Assigning a Call to a Name (line 2840):
    
    # Call to hstack(...): (line 2840)
    # Processing the call arguments (line 2840)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2840)
    tuple_279259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2840, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2840)
    # Adding element type (line 2840)
    # Getting the type of 'Sr' (line 2840)
    Sr_279260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 23), 'Sr', False)
    # Getting the type of 'Obs' (line 2840)
    Obs_279261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 28), 'Obs', False)
    # Applying the binary operator '-' (line 2840)
    result_sub_279262 = python_operator(stypy.reporting.localization.Localization(__file__, 2840, 23), '-', Sr_279260, Obs_279261)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2840, 23), tuple_279259, result_sub_279262)
    # Adding element type (line 2840)
    # Getting the type of 'Obsr' (line 2840)
    Obsr_279263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 33), 'Obsr', False)
    # Getting the type of 'S' (line 2840)
    S_279264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 40), 'S', False)
    # Applying the binary operator '-' (line 2840)
    result_sub_279265 = python_operator(stypy.reporting.localization.Localization(__file__, 2840, 33), '-', Obsr_279263, S_279264)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2840, 23), tuple_279259, result_sub_279265)
    
    # Processing the call keyword arguments (line 2840)
    kwargs_279266 = {}
    # Getting the type of 'np' (line 2840)
    np_279257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 12), 'np', False)
    # Obtaining the member 'hstack' of a type (line 2840)
    hstack_279258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2840, 12), np_279257, 'hstack')
    # Calling hstack(args, kwargs) (line 2840)
    hstack_call_result_279267 = invoke(stypy.reporting.localization.Localization(__file__, 2840, 12), hstack_279258, *[tuple_279259], **kwargs_279266)
    
    # Assigning a type to the variable 'M' (line 2840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2840, 8), 'M', hstack_call_result_279267)
    # SSA branch for the else part of an if statement (line 2839)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2843):
    
    # Assigning a Call to a Name (line 2843):
    
    # Call to zeros(...): (line 2843)
    # Processing the call arguments (line 2843)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2843)
    tuple_279270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2843, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2843)
    # Adding element type (line 2843)
    int_279271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2843, 22), 'int')
    # Getting the type of 'm' (line 2843)
    m_279272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 24), 'm', False)
    # Applying the binary operator '*' (line 2843)
    result_mul_279273 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 22), '*', int_279271, m_279272)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2843, 22), tuple_279270, result_mul_279273)
    # Adding element type (line 2843)
    int_279274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2843, 27), 'int')
    # Getting the type of 'order' (line 2843)
    order_279275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 29), 'order', False)
    # Applying the binary operator '*' (line 2843)
    result_mul_279276 = python_operator(stypy.reporting.localization.Localization(__file__, 2843, 27), '*', int_279274, order_279275)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2843, 22), tuple_279270, result_mul_279276)
    
    # Processing the call keyword arguments (line 2843)
    kwargs_279277 = {}
    # Getting the type of 'np' (line 2843)
    np_279268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2843)
    zeros_279269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2843, 12), np_279268, 'zeros')
    # Calling zeros(args, kwargs) (line 2843)
    zeros_call_result_279278 = invoke(stypy.reporting.localization.Localization(__file__, 2843, 12), zeros_279269, *[tuple_279270], **kwargs_279277)
    
    # Assigning a type to the variable 'M' (line 2843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 8), 'M', zeros_call_result_279278)
    
    # Assigning a BinOp to a Subscript (line 2844):
    
    # Assigning a BinOp to a Subscript (line 2844):
    # Getting the type of 'Sr' (line 2844)
    Sr_279279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 24), 'Sr')
    # Getting the type of 'Obs' (line 2844)
    Obs_279280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 29), 'Obs')
    # Applying the binary operator '-' (line 2844)
    result_sub_279281 = python_operator(stypy.reporting.localization.Localization(__file__, 2844, 24), '-', Sr_279279, Obs_279280)
    
    # Getting the type of 'M' (line 2844)
    M_279282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 8), 'M')
    # Getting the type of 'm' (line 2844)
    m_279283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 11), 'm')
    slice_279284 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2844, 8), None, m_279283, None)
    # Getting the type of 'order' (line 2844)
    order_279285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 15), 'order')
    slice_279286 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2844, 8), None, order_279285, None)
    # Storing an element on a container (line 2844)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2844, 8), M_279282, ((slice_279284, slice_279286), result_sub_279281))
    
    # Assigning a BinOp to a Subscript (line 2845):
    
    # Assigning a BinOp to a Subscript (line 2845):
    # Getting the type of 'Obsr' (line 2845)
    Obsr_279287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 24), 'Obsr')
    # Getting the type of 'S' (line 2845)
    S_279288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 31), 'S')
    # Applying the binary operator '-' (line 2845)
    result_sub_279289 = python_operator(stypy.reporting.localization.Localization(__file__, 2845, 24), '-', Obsr_279287, S_279288)
    
    # Getting the type of 'M' (line 2845)
    M_279290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 8), 'M')
    # Getting the type of 'm' (line 2845)
    m_279291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 10), 'm')
    slice_279292 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2845, 8), m_279291, None, None)
    # Getting the type of 'order' (line 2845)
    order_279293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 14), 'order')
    slice_279294 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2845, 8), order_279293, None, None)
    # Storing an element on a container (line 2845)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2845, 8), M_279290, ((slice_279292, slice_279294), result_sub_279289))
    # SSA join for if statement (line 2839)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2850):
    
    # Assigning a Call to a Name (line 2850):
    
    # Call to lfilter(...): (line 2850)
    # Processing the call arguments (line 2850)
    # Getting the type of 'b' (line 2850)
    b_279296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 18), 'b', False)
    # Getting the type of 'a' (line 2850)
    a_279297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 21), 'a', False)
    # Getting the type of 'x' (line 2850)
    x_279298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 24), 'x', False)
    # Processing the call keyword arguments (line 2850)
    kwargs_279299 = {}
    # Getting the type of 'lfilter' (line 2850)
    lfilter_279295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 10), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 2850)
    lfilter_call_result_279300 = invoke(stypy.reporting.localization.Localization(__file__, 2850, 10), lfilter_279295, *[b_279296, a_279297, x_279298], **kwargs_279299)
    
    # Assigning a type to the variable 'y_f' (line 2850)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2850, 4), 'y_f', lfilter_call_result_279300)
    
    # Assigning a Subscript to a Name (line 2851):
    
    # Assigning a Subscript to a Name (line 2851):
    
    # Obtaining the type of the subscript
    Ellipsis_279301 = Ellipsis
    int_279302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2851, 48), 'int')
    slice_279303 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2851, 11), None, None, int_279302)
    
    # Call to lfilter(...): (line 2851)
    # Processing the call arguments (line 2851)
    # Getting the type of 'b' (line 2851)
    b_279305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 19), 'b', False)
    # Getting the type of 'a' (line 2851)
    a_279306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 22), 'a', False)
    
    # Obtaining the type of the subscript
    Ellipsis_279307 = Ellipsis
    int_279308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2851, 36), 'int')
    slice_279309 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2851, 25), None, None, int_279308)
    # Getting the type of 'y_f' (line 2851)
    y_f_279310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 25), 'y_f', False)
    # Obtaining the member '__getitem__' of a type (line 2851)
    getitem___279311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2851, 25), y_f_279310, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2851)
    subscript_call_result_279312 = invoke(stypy.reporting.localization.Localization(__file__, 2851, 25), getitem___279311, (Ellipsis_279307, slice_279309))
    
    # Processing the call keyword arguments (line 2851)
    kwargs_279313 = {}
    # Getting the type of 'lfilter' (line 2851)
    lfilter_279304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 11), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 2851)
    lfilter_call_result_279314 = invoke(stypy.reporting.localization.Localization(__file__, 2851, 11), lfilter_279304, *[b_279305, a_279306, subscript_call_result_279312], **kwargs_279313)
    
    # Obtaining the member '__getitem__' of a type (line 2851)
    getitem___279315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2851, 11), lfilter_call_result_279314, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2851)
    subscript_call_result_279316 = invoke(stypy.reporting.localization.Localization(__file__, 2851, 11), getitem___279315, (Ellipsis_279301, slice_279303))
    
    # Assigning a type to the variable 'y_fb' (line 2851)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2851, 4), 'y_fb', subscript_call_result_279316)
    
    # Assigning a Subscript to a Name (line 2853):
    
    # Assigning a Subscript to a Name (line 2853):
    
    # Obtaining the type of the subscript
    Ellipsis_279317 = Ellipsis
    int_279318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2853, 45), 'int')
    slice_279319 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2853, 10), None, None, int_279318)
    
    # Call to lfilter(...): (line 2853)
    # Processing the call arguments (line 2853)
    # Getting the type of 'b' (line 2853)
    b_279321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 18), 'b', False)
    # Getting the type of 'a' (line 2853)
    a_279322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 21), 'a', False)
    
    # Obtaining the type of the subscript
    Ellipsis_279323 = Ellipsis
    int_279324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2853, 33), 'int')
    slice_279325 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2853, 24), None, None, int_279324)
    # Getting the type of 'x' (line 2853)
    x_279326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 24), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 2853)
    getitem___279327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2853, 24), x_279326, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2853)
    subscript_call_result_279328 = invoke(stypy.reporting.localization.Localization(__file__, 2853, 24), getitem___279327, (Ellipsis_279323, slice_279325))
    
    # Processing the call keyword arguments (line 2853)
    kwargs_279329 = {}
    # Getting the type of 'lfilter' (line 2853)
    lfilter_279320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2853, 10), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 2853)
    lfilter_call_result_279330 = invoke(stypy.reporting.localization.Localization(__file__, 2853, 10), lfilter_279320, *[b_279321, a_279322, subscript_call_result_279328], **kwargs_279329)
    
    # Obtaining the member '__getitem__' of a type (line 2853)
    getitem___279331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2853, 10), lfilter_call_result_279330, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2853)
    subscript_call_result_279332 = invoke(stypy.reporting.localization.Localization(__file__, 2853, 10), getitem___279331, (Ellipsis_279317, slice_279319))
    
    # Assigning a type to the variable 'y_b' (line 2853)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2853, 4), 'y_b', subscript_call_result_279332)
    
    # Assigning a Call to a Name (line 2854):
    
    # Assigning a Call to a Name (line 2854):
    
    # Call to lfilter(...): (line 2854)
    # Processing the call arguments (line 2854)
    # Getting the type of 'b' (line 2854)
    b_279334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 19), 'b', False)
    # Getting the type of 'a' (line 2854)
    a_279335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 22), 'a', False)
    # Getting the type of 'y_b' (line 2854)
    y_b_279336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 25), 'y_b', False)
    # Processing the call keyword arguments (line 2854)
    kwargs_279337 = {}
    # Getting the type of 'lfilter' (line 2854)
    lfilter_279333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 11), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 2854)
    lfilter_call_result_279338 = invoke(stypy.reporting.localization.Localization(__file__, 2854, 11), lfilter_279333, *[b_279334, a_279335, y_b_279336], **kwargs_279337)
    
    # Assigning a type to the variable 'y_bf' (line 2854)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2854, 4), 'y_bf', lfilter_call_result_279338)
    
    # Assigning a BinOp to a Name (line 2856):
    
    # Assigning a BinOp to a Name (line 2856):
    # Getting the type of 'y_bf' (line 2856)
    y_bf_279339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 20), 'y_bf')
    # Getting the type of 'y_fb' (line 2856)
    y_fb_279340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 27), 'y_fb')
    # Applying the binary operator '-' (line 2856)
    result_sub_279341 = python_operator(stypy.reporting.localization.Localization(__file__, 2856, 20), '-', y_bf_279339, y_fb_279340)
    
    # Assigning a type to the variable 'delta_y_bf_fb' (line 2856)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2856, 4), 'delta_y_bf_fb', result_sub_279341)
    
    
    # Getting the type of 'm' (line 2857)
    m_279342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 7), 'm')
    # Getting the type of 'n' (line 2857)
    n_279343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2857, 12), 'n')
    # Applying the binary operator '==' (line 2857)
    result_eq_279344 = python_operator(stypy.reporting.localization.Localization(__file__, 2857, 7), '==', m_279342, n_279343)
    
    # Testing the type of an if condition (line 2857)
    if_condition_279345 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2857, 4), result_eq_279344)
    # Assigning a type to the variable 'if_condition_279345' (line 2857)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2857, 4), 'if_condition_279345', if_condition_279345)
    # SSA begins for if statement (line 2857)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2858):
    
    # Assigning a Name to a Name (line 2858):
    # Getting the type of 'delta_y_bf_fb' (line 2858)
    delta_y_bf_fb_279346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2858, 16), 'delta_y_bf_fb')
    # Assigning a type to the variable 'delta' (line 2858)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2858, 8), 'delta', delta_y_bf_fb_279346)
    # SSA branch for the else part of an if statement (line 2857)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 2860):
    
    # Assigning a Subscript to a Name (line 2860):
    
    # Obtaining the type of the subscript
    Ellipsis_279347 = Ellipsis
    # Getting the type of 'm' (line 2860)
    m_279348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2860, 38), 'm')
    slice_279349 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2860, 18), None, m_279348, None)
    # Getting the type of 'delta_y_bf_fb' (line 2860)
    delta_y_bf_fb_279350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2860, 18), 'delta_y_bf_fb')
    # Obtaining the member '__getitem__' of a type (line 2860)
    getitem___279351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2860, 18), delta_y_bf_fb_279350, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2860)
    subscript_call_result_279352 = invoke(stypy.reporting.localization.Localization(__file__, 2860, 18), getitem___279351, (Ellipsis_279347, slice_279349))
    
    # Assigning a type to the variable 'start_m' (line 2860)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2860, 8), 'start_m', subscript_call_result_279352)
    
    # Assigning a Subscript to a Name (line 2861):
    
    # Assigning a Subscript to a Name (line 2861):
    
    # Obtaining the type of the subscript
    Ellipsis_279353 = Ellipsis
    
    # Getting the type of 'm' (line 2861)
    m_279354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 36), 'm')
    # Applying the 'usub' unary operator (line 2861)
    result___neg___279355 = python_operator(stypy.reporting.localization.Localization(__file__, 2861, 35), 'usub', m_279354)
    
    slice_279356 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2861, 16), result___neg___279355, None, None)
    # Getting the type of 'delta_y_bf_fb' (line 2861)
    delta_y_bf_fb_279357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2861, 16), 'delta_y_bf_fb')
    # Obtaining the member '__getitem__' of a type (line 2861)
    getitem___279358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2861, 16), delta_y_bf_fb_279357, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2861)
    subscript_call_result_279359 = invoke(stypy.reporting.localization.Localization(__file__, 2861, 16), getitem___279358, (Ellipsis_279353, slice_279356))
    
    # Assigning a type to the variable 'end_m' (line 2861)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2861, 8), 'end_m', subscript_call_result_279359)
    
    # Assigning a Call to a Name (line 2862):
    
    # Assigning a Call to a Name (line 2862):
    
    # Call to concatenate(...): (line 2862)
    # Processing the call arguments (line 2862)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2862)
    tuple_279362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2862, 32), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2862)
    # Adding element type (line 2862)
    # Getting the type of 'start_m' (line 2862)
    start_m_279363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 32), 'start_m', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2862, 32), tuple_279362, start_m_279363)
    # Adding element type (line 2862)
    # Getting the type of 'end_m' (line 2862)
    end_m_279364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 41), 'end_m', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2862, 32), tuple_279362, end_m_279364)
    
    # Processing the call keyword arguments (line 2862)
    int_279365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2862, 54), 'int')
    keyword_279366 = int_279365
    kwargs_279367 = {'axis': keyword_279366}
    # Getting the type of 'np' (line 2862)
    np_279360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 16), 'np', False)
    # Obtaining the member 'concatenate' of a type (line 2862)
    concatenate_279361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2862, 16), np_279360, 'concatenate')
    # Calling concatenate(args, kwargs) (line 2862)
    concatenate_call_result_279368 = invoke(stypy.reporting.localization.Localization(__file__, 2862, 16), concatenate_279361, *[tuple_279362], **kwargs_279367)
    
    # Assigning a type to the variable 'delta' (line 2862)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2862, 8), 'delta', concatenate_call_result_279368)
    # SSA join for if statement (line 2857)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'delta' (line 2867)
    delta_279369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2867, 7), 'delta')
    # Obtaining the member 'ndim' of a type (line 2867)
    ndim_279370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2867, 7), delta_279369, 'ndim')
    int_279371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2867, 21), 'int')
    # Applying the binary operator '==' (line 2867)
    result_eq_279372 = python_operator(stypy.reporting.localization.Localization(__file__, 2867, 7), '==', ndim_279370, int_279371)
    
    # Testing the type of an if condition (line 2867)
    if_condition_279373 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2867, 4), result_eq_279372)
    # Assigning a type to the variable 'if_condition_279373' (line 2867)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2867, 4), 'if_condition_279373', if_condition_279373)
    # SSA begins for if statement (line 2867)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2868):
    
    # Assigning a Subscript to a Name (line 2868):
    
    # Obtaining the type of the subscript
    int_279374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2868, 40), 'int')
    
    # Call to lstsq(...): (line 2868)
    # Processing the call arguments (line 2868)
    # Getting the type of 'M' (line 2868)
    M_279377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2868, 30), 'M', False)
    # Getting the type of 'delta' (line 2868)
    delta_279378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2868, 33), 'delta', False)
    # Processing the call keyword arguments (line 2868)
    kwargs_279379 = {}
    # Getting the type of 'linalg' (line 2868)
    linalg_279375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2868, 17), 'linalg', False)
    # Obtaining the member 'lstsq' of a type (line 2868)
    lstsq_279376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2868, 17), linalg_279375, 'lstsq')
    # Calling lstsq(args, kwargs) (line 2868)
    lstsq_call_result_279380 = invoke(stypy.reporting.localization.Localization(__file__, 2868, 17), lstsq_279376, *[M_279377, delta_279378], **kwargs_279379)
    
    # Obtaining the member '__getitem__' of a type (line 2868)
    getitem___279381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2868, 17), lstsq_call_result_279380, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2868)
    subscript_call_result_279382 = invoke(stypy.reporting.localization.Localization(__file__, 2868, 17), getitem___279381, int_279374)
    
    # Assigning a type to the variable 'ic_opt' (line 2868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2868, 8), 'ic_opt', subscript_call_result_279382)
    # SSA branch for the else part of an if statement (line 2867)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 2872):
    
    # Assigning a Attribute to a Name (line 2872):
    
    # Call to reshape(...): (line 2872)
    # Processing the call arguments (line 2872)
    int_279385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2872, 32), 'int')
    
    # Obtaining the type of the subscript
    int_279386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2872, 48), 'int')
    # Getting the type of 'delta' (line 2872)
    delta_279387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 36), 'delta', False)
    # Obtaining the member 'shape' of a type (line 2872)
    shape_279388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2872, 36), delta_279387, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2872)
    getitem___279389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2872, 36), shape_279388, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2872)
    subscript_call_result_279390 = invoke(stypy.reporting.localization.Localization(__file__, 2872, 36), getitem___279389, int_279386)
    
    # Processing the call keyword arguments (line 2872)
    kwargs_279391 = {}
    # Getting the type of 'delta' (line 2872)
    delta_279383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 18), 'delta', False)
    # Obtaining the member 'reshape' of a type (line 2872)
    reshape_279384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2872, 18), delta_279383, 'reshape')
    # Calling reshape(args, kwargs) (line 2872)
    reshape_call_result_279392 = invoke(stypy.reporting.localization.Localization(__file__, 2872, 18), reshape_279384, *[int_279385, subscript_call_result_279390], **kwargs_279391)
    
    # Obtaining the member 'T' of a type (line 2872)
    T_279393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2872, 18), reshape_call_result_279392, 'T')
    # Assigning a type to the variable 'delta2d' (line 2872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2872, 8), 'delta2d', T_279393)
    
    # Assigning a Attribute to a Name (line 2873):
    
    # Assigning a Attribute to a Name (line 2873):
    
    # Obtaining the type of the subscript
    int_279394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2873, 43), 'int')
    
    # Call to lstsq(...): (line 2873)
    # Processing the call arguments (line 2873)
    # Getting the type of 'M' (line 2873)
    M_279397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 31), 'M', False)
    # Getting the type of 'delta2d' (line 2873)
    delta2d_279398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 34), 'delta2d', False)
    # Processing the call keyword arguments (line 2873)
    kwargs_279399 = {}
    # Getting the type of 'linalg' (line 2873)
    linalg_279395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 18), 'linalg', False)
    # Obtaining the member 'lstsq' of a type (line 2873)
    lstsq_279396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2873, 18), linalg_279395, 'lstsq')
    # Calling lstsq(args, kwargs) (line 2873)
    lstsq_call_result_279400 = invoke(stypy.reporting.localization.Localization(__file__, 2873, 18), lstsq_279396, *[M_279397, delta2d_279398], **kwargs_279399)
    
    # Obtaining the member '__getitem__' of a type (line 2873)
    getitem___279401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2873, 18), lstsq_call_result_279400, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2873)
    subscript_call_result_279402 = invoke(stypy.reporting.localization.Localization(__file__, 2873, 18), getitem___279401, int_279394)
    
    # Obtaining the member 'T' of a type (line 2873)
    T_279403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2873, 18), subscript_call_result_279402, 'T')
    # Assigning a type to the variable 'ic_opt0' (line 2873)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2873, 8), 'ic_opt0', T_279403)
    
    # Assigning a Call to a Name (line 2874):
    
    # Assigning a Call to a Name (line 2874):
    
    # Call to reshape(...): (line 2874)
    # Processing the call arguments (line 2874)
    
    # Obtaining the type of the subscript
    int_279406 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2874, 46), 'int')
    slice_279407 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2874, 33), None, int_279406, None)
    # Getting the type of 'delta' (line 2874)
    delta_279408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2874, 33), 'delta', False)
    # Obtaining the member 'shape' of a type (line 2874)
    shape_279409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2874, 33), delta_279408, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2874)
    getitem___279410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2874, 33), shape_279409, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2874)
    subscript_call_result_279411 = invoke(stypy.reporting.localization.Localization(__file__, 2874, 33), getitem___279410, slice_279407)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2874)
    tuple_279412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2874, 53), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2874)
    # Adding element type (line 2874)
    
    # Obtaining the type of the subscript
    int_279413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2874, 61), 'int')
    # Getting the type of 'M' (line 2874)
    M_279414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2874, 53), 'M', False)
    # Obtaining the member 'shape' of a type (line 2874)
    shape_279415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2874, 53), M_279414, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2874)
    getitem___279416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2874, 53), shape_279415, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2874)
    subscript_call_result_279417 = invoke(stypy.reporting.localization.Localization(__file__, 2874, 53), getitem___279416, int_279413)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2874, 53), tuple_279412, subscript_call_result_279417)
    
    # Applying the binary operator '+' (line 2874)
    result_add_279418 = python_operator(stypy.reporting.localization.Localization(__file__, 2874, 33), '+', subscript_call_result_279411, tuple_279412)
    
    # Processing the call keyword arguments (line 2874)
    kwargs_279419 = {}
    # Getting the type of 'ic_opt0' (line 2874)
    ic_opt0_279404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2874, 17), 'ic_opt0', False)
    # Obtaining the member 'reshape' of a type (line 2874)
    reshape_279405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2874, 17), ic_opt0_279404, 'reshape')
    # Calling reshape(args, kwargs) (line 2874)
    reshape_call_result_279420 = invoke(stypy.reporting.localization.Localization(__file__, 2874, 17), reshape_279405, *[result_add_279418], **kwargs_279419)
    
    # Assigning a type to the variable 'ic_opt' (line 2874)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2874, 8), 'ic_opt', reshape_call_result_279420)
    # SSA join for if statement (line 2867)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'm' (line 2878)
    m_279421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 7), 'm')
    # Getting the type of 'n' (line 2878)
    n_279422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 12), 'n')
    # Applying the binary operator '==' (line 2878)
    result_eq_279423 = python_operator(stypy.reporting.localization.Localization(__file__, 2878, 7), '==', m_279421, n_279422)
    
    # Testing the type of an if condition (line 2878)
    if_condition_279424 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2878, 4), result_eq_279423)
    # Assigning a type to the variable 'if_condition_279424' (line 2878)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2878, 4), 'if_condition_279424', if_condition_279424)
    # SSA begins for if statement (line 2878)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2879):
    
    # Assigning a Call to a Name (line 2879):
    
    # Call to hstack(...): (line 2879)
    # Processing the call arguments (line 2879)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2879)
    tuple_279427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2879, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2879)
    # Adding element type (line 2879)
    # Getting the type of 'Sr' (line 2879)
    Sr_279428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2879, 23), 'Sr', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2879, 23), tuple_279427, Sr_279428)
    # Adding element type (line 2879)
    # Getting the type of 'Obsr' (line 2879)
    Obsr_279429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2879, 27), 'Obsr', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2879, 23), tuple_279427, Obsr_279429)
    
    # Processing the call keyword arguments (line 2879)
    kwargs_279430 = {}
    # Getting the type of 'np' (line 2879)
    np_279425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2879, 12), 'np', False)
    # Obtaining the member 'hstack' of a type (line 2879)
    hstack_279426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2879, 12), np_279425, 'hstack')
    # Calling hstack(args, kwargs) (line 2879)
    hstack_call_result_279431 = invoke(stypy.reporting.localization.Localization(__file__, 2879, 12), hstack_279426, *[tuple_279427], **kwargs_279430)
    
    # Assigning a type to the variable 'W' (line 2879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2879, 8), 'W', hstack_call_result_279431)
    # SSA branch for the else part of an if statement (line 2878)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2881):
    
    # Assigning a Call to a Name (line 2881):
    
    # Call to zeros(...): (line 2881)
    # Processing the call arguments (line 2881)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2881)
    tuple_279434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2881, 22), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2881)
    # Adding element type (line 2881)
    int_279435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2881, 22), 'int')
    # Getting the type of 'm' (line 2881)
    m_279436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2881, 24), 'm', False)
    # Applying the binary operator '*' (line 2881)
    result_mul_279437 = python_operator(stypy.reporting.localization.Localization(__file__, 2881, 22), '*', int_279435, m_279436)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2881, 22), tuple_279434, result_mul_279437)
    # Adding element type (line 2881)
    int_279438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2881, 27), 'int')
    # Getting the type of 'order' (line 2881)
    order_279439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2881, 29), 'order', False)
    # Applying the binary operator '*' (line 2881)
    result_mul_279440 = python_operator(stypy.reporting.localization.Localization(__file__, 2881, 27), '*', int_279438, order_279439)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2881, 22), tuple_279434, result_mul_279440)
    
    # Processing the call keyword arguments (line 2881)
    kwargs_279441 = {}
    # Getting the type of 'np' (line 2881)
    np_279432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2881, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2881)
    zeros_279433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2881, 12), np_279432, 'zeros')
    # Calling zeros(args, kwargs) (line 2881)
    zeros_call_result_279442 = invoke(stypy.reporting.localization.Localization(__file__, 2881, 12), zeros_279433, *[tuple_279434], **kwargs_279441)
    
    # Assigning a type to the variable 'W' (line 2881)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2881, 8), 'W', zeros_call_result_279442)
    
    # Assigning a Name to a Subscript (line 2882):
    
    # Assigning a Name to a Subscript (line 2882):
    # Getting the type of 'Sr' (line 2882)
    Sr_279443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 24), 'Sr')
    # Getting the type of 'W' (line 2882)
    W_279444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 8), 'W')
    # Getting the type of 'm' (line 2882)
    m_279445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 11), 'm')
    slice_279446 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2882, 8), None, m_279445, None)
    # Getting the type of 'order' (line 2882)
    order_279447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 15), 'order')
    slice_279448 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2882, 8), None, order_279447, None)
    # Storing an element on a container (line 2882)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2882, 8), W_279444, ((slice_279446, slice_279448), Sr_279443))
    
    # Assigning a Name to a Subscript (line 2883):
    
    # Assigning a Name to a Subscript (line 2883):
    # Getting the type of 'Obsr' (line 2883)
    Obsr_279449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 24), 'Obsr')
    # Getting the type of 'W' (line 2883)
    W_279450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 8), 'W')
    # Getting the type of 'm' (line 2883)
    m_279451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 10), 'm')
    slice_279452 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2883, 8), m_279451, None, None)
    # Getting the type of 'order' (line 2883)
    order_279453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2883, 14), 'order')
    slice_279454 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2883, 8), order_279453, None, None)
    # Storing an element on a container (line 2883)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2883, 8), W_279450, ((slice_279452, slice_279454), Obsr_279449))
    # SSA join for if statement (line 2878)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2891):
    
    # Assigning a Call to a Name (line 2891):
    
    # Call to dot(...): (line 2891)
    # Processing the call arguments (line 2891)
    # Getting the type of 'W' (line 2891)
    W_279457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2891, 21), 'W', False)
    # Obtaining the member 'T' of a type (line 2891)
    T_279458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2891, 21), W_279457, 'T')
    # Processing the call keyword arguments (line 2891)
    kwargs_279459 = {}
    # Getting the type of 'ic_opt' (line 2891)
    ic_opt_279455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2891, 10), 'ic_opt', False)
    # Obtaining the member 'dot' of a type (line 2891)
    dot_279456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2891, 10), ic_opt_279455, 'dot')
    # Calling dot(args, kwargs) (line 2891)
    dot_call_result_279460 = invoke(stypy.reporting.localization.Localization(__file__, 2891, 10), dot_279456, *[T_279458], **kwargs_279459)
    
    # Assigning a type to the variable 'wic' (line 2891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2891, 4), 'wic', dot_call_result_279460)
    
    # Assigning a Name to a Name (line 2897):
    
    # Assigning a Name to a Name (line 2897):
    # Getting the type of 'y_fb' (line 2897)
    y_fb_279461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2897, 12), 'y_fb')
    # Assigning a type to the variable 'y_opt' (line 2897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2897, 4), 'y_opt', y_fb_279461)
    
    
    # Getting the type of 'm' (line 2898)
    m_279462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 7), 'm')
    # Getting the type of 'n' (line 2898)
    n_279463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2898, 12), 'n')
    # Applying the binary operator '==' (line 2898)
    result_eq_279464 = python_operator(stypy.reporting.localization.Localization(__file__, 2898, 7), '==', m_279462, n_279463)
    
    # Testing the type of an if condition (line 2898)
    if_condition_279465 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2898, 4), result_eq_279464)
    # Assigning a type to the variable 'if_condition_279465' (line 2898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2898, 4), 'if_condition_279465', if_condition_279465)
    # SSA begins for if statement (line 2898)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'y_opt' (line 2899)
    y_opt_279466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 8), 'y_opt')
    # Getting the type of 'wic' (line 2899)
    wic_279467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 17), 'wic')
    # Applying the binary operator '+=' (line 2899)
    result_iadd_279468 = python_operator(stypy.reporting.localization.Localization(__file__, 2899, 8), '+=', y_opt_279466, wic_279467)
    # Assigning a type to the variable 'y_opt' (line 2899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2899, 8), 'y_opt', result_iadd_279468)
    
    # SSA branch for the else part of an if statement (line 2898)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'y_opt' (line 2901)
    y_opt_279469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 8), 'y_opt')
    
    # Obtaining the type of the subscript
    Ellipsis_279470 = Ellipsis
    # Getting the type of 'm' (line 2901)
    m_279471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 20), 'm')
    slice_279472 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2901, 8), None, m_279471, None)
    # Getting the type of 'y_opt' (line 2901)
    y_opt_279473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 8), 'y_opt')
    # Obtaining the member '__getitem__' of a type (line 2901)
    getitem___279474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2901, 8), y_opt_279473, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2901)
    subscript_call_result_279475 = invoke(stypy.reporting.localization.Localization(__file__, 2901, 8), getitem___279474, (Ellipsis_279470, slice_279472))
    
    
    # Obtaining the type of the subscript
    Ellipsis_279476 = Ellipsis
    # Getting the type of 'm' (line 2901)
    m_279477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 36), 'm')
    slice_279478 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2901, 26), None, m_279477, None)
    # Getting the type of 'wic' (line 2901)
    wic_279479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 26), 'wic')
    # Obtaining the member '__getitem__' of a type (line 2901)
    getitem___279480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2901, 26), wic_279479, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2901)
    subscript_call_result_279481 = invoke(stypy.reporting.localization.Localization(__file__, 2901, 26), getitem___279480, (Ellipsis_279476, slice_279478))
    
    # Applying the binary operator '+=' (line 2901)
    result_iadd_279482 = python_operator(stypy.reporting.localization.Localization(__file__, 2901, 8), '+=', subscript_call_result_279475, subscript_call_result_279481)
    # Getting the type of 'y_opt' (line 2901)
    y_opt_279483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 8), 'y_opt')
    Ellipsis_279484 = Ellipsis
    # Getting the type of 'm' (line 2901)
    m_279485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 20), 'm')
    slice_279486 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2901, 8), None, m_279485, None)
    # Storing an element on a container (line 2901)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2901, 8), y_opt_279483, ((Ellipsis_279484, slice_279486), result_iadd_279482))
    
    
    # Getting the type of 'y_opt' (line 2902)
    y_opt_279487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 8), 'y_opt')
    
    # Obtaining the type of the subscript
    Ellipsis_279488 = Ellipsis
    
    # Getting the type of 'm' (line 2902)
    m_279489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 20), 'm')
    # Applying the 'usub' unary operator (line 2902)
    result___neg___279490 = python_operator(stypy.reporting.localization.Localization(__file__, 2902, 19), 'usub', m_279489)
    
    slice_279491 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2902, 8), result___neg___279490, None, None)
    # Getting the type of 'y_opt' (line 2902)
    y_opt_279492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 8), 'y_opt')
    # Obtaining the member '__getitem__' of a type (line 2902)
    getitem___279493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2902, 8), y_opt_279492, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2902)
    subscript_call_result_279494 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 8), getitem___279493, (Ellipsis_279488, slice_279491))
    
    
    # Obtaining the type of the subscript
    Ellipsis_279495 = Ellipsis
    
    # Getting the type of 'm' (line 2902)
    m_279496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 37), 'm')
    # Applying the 'usub' unary operator (line 2902)
    result___neg___279497 = python_operator(stypy.reporting.localization.Localization(__file__, 2902, 36), 'usub', m_279496)
    
    slice_279498 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2902, 27), result___neg___279497, None, None)
    # Getting the type of 'wic' (line 2902)
    wic_279499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 27), 'wic')
    # Obtaining the member '__getitem__' of a type (line 2902)
    getitem___279500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2902, 27), wic_279499, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2902)
    subscript_call_result_279501 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 27), getitem___279500, (Ellipsis_279495, slice_279498))
    
    # Applying the binary operator '+=' (line 2902)
    result_iadd_279502 = python_operator(stypy.reporting.localization.Localization(__file__, 2902, 8), '+=', subscript_call_result_279494, subscript_call_result_279501)
    # Getting the type of 'y_opt' (line 2902)
    y_opt_279503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 8), 'y_opt')
    Ellipsis_279504 = Ellipsis
    
    # Getting the type of 'm' (line 2902)
    m_279505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 20), 'm')
    # Applying the 'usub' unary operator (line 2902)
    result___neg___279506 = python_operator(stypy.reporting.localization.Localization(__file__, 2902, 19), 'usub', m_279505)
    
    slice_279507 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2902, 8), result___neg___279506, None, None)
    # Storing an element on a container (line 2902)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2902, 8), y_opt_279503, ((Ellipsis_279504, slice_279507), result_iadd_279502))
    
    # SSA join for if statement (line 2898)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2904):
    
    # Assigning a Subscript to a Name (line 2904):
    
    # Obtaining the type of the subscript
    Ellipsis_279508 = Ellipsis
    # Getting the type of 'order' (line 2904)
    order_279509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 22), 'order')
    slice_279510 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2904, 9), None, order_279509, None)
    # Getting the type of 'ic_opt' (line 2904)
    ic_opt_279511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 9), 'ic_opt')
    # Obtaining the member '__getitem__' of a type (line 2904)
    getitem___279512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2904, 9), ic_opt_279511, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2904)
    subscript_call_result_279513 = invoke(stypy.reporting.localization.Localization(__file__, 2904, 9), getitem___279512, (Ellipsis_279508, slice_279510))
    
    # Assigning a type to the variable 'x0' (line 2904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2904, 4), 'x0', subscript_call_result_279513)
    
    # Assigning a Subscript to a Name (line 2905):
    
    # Assigning a Subscript to a Name (line 2905):
    
    # Obtaining the type of the subscript
    Ellipsis_279514 = Ellipsis
    
    # Getting the type of 'order' (line 2905)
    order_279515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 22), 'order')
    # Applying the 'usub' unary operator (line 2905)
    result___neg___279516 = python_operator(stypy.reporting.localization.Localization(__file__, 2905, 21), 'usub', order_279515)
    
    slice_279517 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2905, 9), result___neg___279516, None, None)
    # Getting the type of 'ic_opt' (line 2905)
    ic_opt_279518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2905, 9), 'ic_opt')
    # Obtaining the member '__getitem__' of a type (line 2905)
    getitem___279519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2905, 9), ic_opt_279518, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2905)
    subscript_call_result_279520 = invoke(stypy.reporting.localization.Localization(__file__, 2905, 9), getitem___279519, (Ellipsis_279514, slice_279517))
    
    # Assigning a type to the variable 'x1' (line 2905)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2905, 4), 'x1', subscript_call_result_279520)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'axis' (line 2906)
    axis_279521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2906, 7), 'axis')
    int_279522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2906, 15), 'int')
    # Applying the binary operator '!=' (line 2906)
    result_ne_279523 = python_operator(stypy.reporting.localization.Localization(__file__, 2906, 7), '!=', axis_279521, int_279522)
    
    
    # Getting the type of 'axis' (line 2906)
    axis_279524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2906, 21), 'axis')
    # Getting the type of 'x' (line 2906)
    x_279525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2906, 29), 'x')
    # Obtaining the member 'ndim' of a type (line 2906)
    ndim_279526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2906, 29), x_279525, 'ndim')
    int_279527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2906, 38), 'int')
    # Applying the binary operator '-' (line 2906)
    result_sub_279528 = python_operator(stypy.reporting.localization.Localization(__file__, 2906, 29), '-', ndim_279526, int_279527)
    
    # Applying the binary operator '!=' (line 2906)
    result_ne_279529 = python_operator(stypy.reporting.localization.Localization(__file__, 2906, 21), '!=', axis_279524, result_sub_279528)
    
    # Applying the binary operator 'or' (line 2906)
    result_or_keyword_279530 = python_operator(stypy.reporting.localization.Localization(__file__, 2906, 7), 'or', result_ne_279523, result_ne_279529)
    
    # Testing the type of an if condition (line 2906)
    if_condition_279531 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2906, 4), result_or_keyword_279530)
    # Assigning a type to the variable 'if_condition_279531' (line 2906)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2906, 4), 'if_condition_279531', if_condition_279531)
    # SSA begins for if statement (line 2906)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2908):
    
    # Assigning a Call to a Name (line 2908):
    
    # Call to swapaxes(...): (line 2908)
    # Processing the call arguments (line 2908)
    # Getting the type of 'x0' (line 2908)
    x0_279534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 25), 'x0', False)
    # Getting the type of 'axis' (line 2908)
    axis_279535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 29), 'axis', False)
    # Getting the type of 'x' (line 2908)
    x_279536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 35), 'x', False)
    # Obtaining the member 'ndim' of a type (line 2908)
    ndim_279537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2908, 35), x_279536, 'ndim')
    int_279538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2908, 44), 'int')
    # Applying the binary operator '-' (line 2908)
    result_sub_279539 = python_operator(stypy.reporting.localization.Localization(__file__, 2908, 35), '-', ndim_279537, int_279538)
    
    # Processing the call keyword arguments (line 2908)
    kwargs_279540 = {}
    # Getting the type of 'np' (line 2908)
    np_279532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 13), 'np', False)
    # Obtaining the member 'swapaxes' of a type (line 2908)
    swapaxes_279533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2908, 13), np_279532, 'swapaxes')
    # Calling swapaxes(args, kwargs) (line 2908)
    swapaxes_call_result_279541 = invoke(stypy.reporting.localization.Localization(__file__, 2908, 13), swapaxes_279533, *[x0_279534, axis_279535, result_sub_279539], **kwargs_279540)
    
    # Assigning a type to the variable 'x0' (line 2908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2908, 8), 'x0', swapaxes_call_result_279541)
    
    # Assigning a Call to a Name (line 2909):
    
    # Assigning a Call to a Name (line 2909):
    
    # Call to swapaxes(...): (line 2909)
    # Processing the call arguments (line 2909)
    # Getting the type of 'x1' (line 2909)
    x1_279544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 25), 'x1', False)
    # Getting the type of 'axis' (line 2909)
    axis_279545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 29), 'axis', False)
    # Getting the type of 'x' (line 2909)
    x_279546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 35), 'x', False)
    # Obtaining the member 'ndim' of a type (line 2909)
    ndim_279547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2909, 35), x_279546, 'ndim')
    int_279548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2909, 44), 'int')
    # Applying the binary operator '-' (line 2909)
    result_sub_279549 = python_operator(stypy.reporting.localization.Localization(__file__, 2909, 35), '-', ndim_279547, int_279548)
    
    # Processing the call keyword arguments (line 2909)
    kwargs_279550 = {}
    # Getting the type of 'np' (line 2909)
    np_279542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 13), 'np', False)
    # Obtaining the member 'swapaxes' of a type (line 2909)
    swapaxes_279543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2909, 13), np_279542, 'swapaxes')
    # Calling swapaxes(args, kwargs) (line 2909)
    swapaxes_call_result_279551 = invoke(stypy.reporting.localization.Localization(__file__, 2909, 13), swapaxes_279543, *[x1_279544, axis_279545, result_sub_279549], **kwargs_279550)
    
    # Assigning a type to the variable 'x1' (line 2909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2909, 8), 'x1', swapaxes_call_result_279551)
    
    # Assigning a Call to a Name (line 2910):
    
    # Assigning a Call to a Name (line 2910):
    
    # Call to swapaxes(...): (line 2910)
    # Processing the call arguments (line 2910)
    # Getting the type of 'y_opt' (line 2910)
    y_opt_279554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2910, 28), 'y_opt', False)
    # Getting the type of 'axis' (line 2910)
    axis_279555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2910, 35), 'axis', False)
    # Getting the type of 'x' (line 2910)
    x_279556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2910, 41), 'x', False)
    # Obtaining the member 'ndim' of a type (line 2910)
    ndim_279557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2910, 41), x_279556, 'ndim')
    int_279558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2910, 50), 'int')
    # Applying the binary operator '-' (line 2910)
    result_sub_279559 = python_operator(stypy.reporting.localization.Localization(__file__, 2910, 41), '-', ndim_279557, int_279558)
    
    # Processing the call keyword arguments (line 2910)
    kwargs_279560 = {}
    # Getting the type of 'np' (line 2910)
    np_279552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2910, 16), 'np', False)
    # Obtaining the member 'swapaxes' of a type (line 2910)
    swapaxes_279553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2910, 16), np_279552, 'swapaxes')
    # Calling swapaxes(args, kwargs) (line 2910)
    swapaxes_call_result_279561 = invoke(stypy.reporting.localization.Localization(__file__, 2910, 16), swapaxes_279553, *[y_opt_279554, axis_279555, result_sub_279559], **kwargs_279560)
    
    # Assigning a type to the variable 'y_opt' (line 2910)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2910, 8), 'y_opt', swapaxes_call_result_279561)
    # SSA join for if statement (line 2906)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2912)
    tuple_279562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2912, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2912)
    # Adding element type (line 2912)
    # Getting the type of 'y_opt' (line 2912)
    y_opt_279563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 11), 'y_opt')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2912, 11), tuple_279562, y_opt_279563)
    # Adding element type (line 2912)
    # Getting the type of 'x0' (line 2912)
    x0_279564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 18), 'x0')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2912, 11), tuple_279562, x0_279564)
    # Adding element type (line 2912)
    # Getting the type of 'x1' (line 2912)
    x1_279565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 22), 'x1')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2912, 11), tuple_279562, x1_279565)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2912)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2912, 4), 'stypy_return_type', tuple_279562)
    
    # ################# End of '_filtfilt_gust(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_filtfilt_gust' in the type store
    # Getting the type of 'stypy_return_type' (line 2736)
    stypy_return_type_279566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279566)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_filtfilt_gust'
    return stypy_return_type_279566

# Assigning a type to the variable '_filtfilt_gust' (line 2736)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2736, 0), '_filtfilt_gust', _filtfilt_gust)

@norecursion
def filtfilt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_279567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2915, 27), 'int')
    str_279568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2915, 39), 'str', 'odd')
    # Getting the type of 'None' (line 2915)
    None_279569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2915, 53), 'None')
    str_279570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2915, 66), 'str', 'pad')
    # Getting the type of 'None' (line 2916)
    None_279571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 19), 'None')
    defaults = [int_279567, str_279568, None_279569, str_279570, None_279571]
    # Create a new context for function 'filtfilt'
    module_type_store = module_type_store.open_function_context('filtfilt', 2915, 0, False)
    
    # Passed parameters checking function
    filtfilt.stypy_localization = localization
    filtfilt.stypy_type_of_self = None
    filtfilt.stypy_type_store = module_type_store
    filtfilt.stypy_function_name = 'filtfilt'
    filtfilt.stypy_param_names_list = ['b', 'a', 'x', 'axis', 'padtype', 'padlen', 'method', 'irlen']
    filtfilt.stypy_varargs_param_name = None
    filtfilt.stypy_kwargs_param_name = None
    filtfilt.stypy_call_defaults = defaults
    filtfilt.stypy_call_varargs = varargs
    filtfilt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'filtfilt', ['b', 'a', 'x', 'axis', 'padtype', 'padlen', 'method', 'irlen'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'filtfilt', localization, ['b', 'a', 'x', 'axis', 'padtype', 'padlen', 'method', 'irlen'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'filtfilt(...)' code ##################

    str_279572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3067, (-1)), 'str', '\n    Apply a digital filter forward and backward to a signal.\n\n    This function applies a linear digital filter twice, once forward and\n    once backwards.  The combined filter has zero phase and a filter order\n    twice that of the original.\n\n    The function provides options for handling the edges of the signal.\n\n    Parameters\n    ----------\n    b : (N,) array_like\n        The numerator coefficient vector of the filter.\n    a : (N,) array_like\n        The denominator coefficient vector of the filter.  If ``a[0]``\n        is not 1, then both `a` and `b` are normalized by ``a[0]``.\n    x : array_like\n        The array of data to be filtered.\n    axis : int, optional\n        The axis of `x` to which the filter is applied.\n        Default is -1.\n    padtype : str or None, optional\n        Must be \'odd\', \'even\', \'constant\', or None.  This determines the\n        type of extension to use for the padded signal to which the filter\n        is applied.  If `padtype` is None, no padding is used.  The default\n        is \'odd\'.\n    padlen : int or None, optional\n        The number of elements by which to extend `x` at both ends of\n        `axis` before applying the filter.  This value must be less than\n        ``x.shape[axis] - 1``.  ``padlen=0`` implies no padding.\n        The default value is ``3 * max(len(a), len(b))``.\n    method : str, optional\n        Determines the method for handling the edges of the signal, either\n        "pad" or "gust".  When `method` is "pad", the signal is padded; the\n        type of padding is determined by `padtype` and `padlen`, and `irlen`\n        is ignored.  When `method` is "gust", Gustafsson\'s method is used,\n        and `padtype` and `padlen` are ignored.\n    irlen : int or None, optional\n        When `method` is "gust", `irlen` specifies the length of the\n        impulse response of the filter.  If `irlen` is None, no part\n        of the impulse response is ignored.  For a long signal, specifying\n        `irlen` can significantly improve the performance of the filter.\n\n    Returns\n    -------\n    y : ndarray\n        The filtered output with the same shape as `x`.\n\n    See Also\n    --------\n    sosfiltfilt, lfilter_zi, lfilter, lfiltic, savgol_filter, sosfilt\n\n    Notes\n    -----\n    When `method` is "pad", the function pads the data along the given axis\n    in one of three ways: odd, even or constant.  The odd and even extensions\n    have the corresponding symmetry about the end point of the data.  The\n    constant extension extends the data with the values at the end points. On\n    both the forward and backward passes, the initial condition of the\n    filter is found by using `lfilter_zi` and scaling it by the end point of\n    the extended data.\n\n    When `method` is "gust", Gustafsson\'s method [1]_ is used.  Initial\n    conditions are chosen for the forward and backward passes so that the\n    forward-backward filter gives the same result as the backward-forward\n    filter.\n\n    The option to use Gustaffson\'s method was added in scipy version 0.16.0.\n\n    References\n    ----------\n    .. [1] F. Gustaffson, "Determining the initial states in forward-backward\n           filtering", Transactions on Signal Processing, Vol. 46, pp. 988-992,\n           1996.\n\n    Examples\n    --------\n    The examples will use several functions from `scipy.signal`.\n\n    >>> from scipy import signal\n    >>> import matplotlib.pyplot as plt\n\n    First we create a one second signal that is the sum of two pure sine\n    waves, with frequencies 5 Hz and 250 Hz, sampled at 2000 Hz.\n\n    >>> t = np.linspace(0, 1.0, 2001)\n    >>> xlow = np.sin(2 * np.pi * 5 * t)\n    >>> xhigh = np.sin(2 * np.pi * 250 * t)\n    >>> x = xlow + xhigh\n\n    Now create a lowpass Butterworth filter with a cutoff of 0.125 times\n    the Nyquist rate, or 125 Hz, and apply it to ``x`` with `filtfilt`.\n    The result should be approximately ``xlow``, with no phase shift.\n\n    >>> b, a = signal.butter(8, 0.125)\n    >>> y = signal.filtfilt(b, a, x, padlen=150)\n    >>> np.abs(y - xlow).max()\n    9.1086182074789912e-06\n\n    We get a fairly clean result for this artificial example because\n    the odd extension is exact, and with the moderately long padding,\n    the filter\'s transients have dissipated by the time the actual data\n    is reached.  In general, transient effects at the edges are\n    unavoidable.\n\n    The following example demonstrates the option ``method="gust"``.\n\n    First, create a filter.\n\n    >>> b, a = signal.ellip(4, 0.01, 120, 0.125)  # Filter to be applied.\n    >>> np.random.seed(123456)\n\n    `sig` is a random input signal to be filtered.\n\n    >>> n = 60\n    >>> sig = np.random.randn(n)**3 + 3*np.random.randn(n).cumsum()\n\n    Apply `filtfilt` to `sig`, once using the Gustafsson method, and\n    once using padding, and plot the results for comparison.\n\n    >>> fgust = signal.filtfilt(b, a, sig, method="gust")\n    >>> fpad = signal.filtfilt(b, a, sig, padlen=50)\n    >>> plt.plot(sig, \'k-\', label=\'input\')\n    >>> plt.plot(fgust, \'b-\', linewidth=4, label=\'gust\')\n    >>> plt.plot(fpad, \'c-\', linewidth=1.5, label=\'pad\')\n    >>> plt.legend(loc=\'best\')\n    >>> plt.show()\n\n    The `irlen` argument can be used to improve the performance\n    of Gustafsson\'s method.\n\n    Estimate the impulse response length of the filter.\n\n    >>> z, p, k = signal.tf2zpk(b, a)\n    >>> eps = 1e-9\n    >>> r = np.max(np.abs(p))\n    >>> approx_impulse_len = int(np.ceil(np.log(eps) / np.log(r)))\n    >>> approx_impulse_len\n    137\n\n    Apply the filter to a longer signal, with and without the `irlen`\n    argument.  The difference between `y1` and `y2` is small.  For long\n    signals, using `irlen` gives a significant performance improvement.\n\n    >>> x = np.random.randn(5000)\n    >>> y1 = signal.filtfilt(b, a, x, method=\'gust\')\n    >>> y2 = signal.filtfilt(b, a, x, method=\'gust\', irlen=approx_impulse_len)\n    >>> print(np.max(np.abs(y1 - y2)))\n    1.80056858312e-10\n\n    ')
    
    # Assigning a Call to a Name (line 3068):
    
    # Assigning a Call to a Name (line 3068):
    
    # Call to atleast_1d(...): (line 3068)
    # Processing the call arguments (line 3068)
    # Getting the type of 'b' (line 3068)
    b_279575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3068, 22), 'b', False)
    # Processing the call keyword arguments (line 3068)
    kwargs_279576 = {}
    # Getting the type of 'np' (line 3068)
    np_279573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3068, 8), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 3068)
    atleast_1d_279574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3068, 8), np_279573, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 3068)
    atleast_1d_call_result_279577 = invoke(stypy.reporting.localization.Localization(__file__, 3068, 8), atleast_1d_279574, *[b_279575], **kwargs_279576)
    
    # Assigning a type to the variable 'b' (line 3068)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3068, 4), 'b', atleast_1d_call_result_279577)
    
    # Assigning a Call to a Name (line 3069):
    
    # Assigning a Call to a Name (line 3069):
    
    # Call to atleast_1d(...): (line 3069)
    # Processing the call arguments (line 3069)
    # Getting the type of 'a' (line 3069)
    a_279580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3069, 22), 'a', False)
    # Processing the call keyword arguments (line 3069)
    kwargs_279581 = {}
    # Getting the type of 'np' (line 3069)
    np_279578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3069, 8), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 3069)
    atleast_1d_279579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3069, 8), np_279578, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 3069)
    atleast_1d_call_result_279582 = invoke(stypy.reporting.localization.Localization(__file__, 3069, 8), atleast_1d_279579, *[a_279580], **kwargs_279581)
    
    # Assigning a type to the variable 'a' (line 3069)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3069, 4), 'a', atleast_1d_call_result_279582)
    
    # Assigning a Call to a Name (line 3070):
    
    # Assigning a Call to a Name (line 3070):
    
    # Call to asarray(...): (line 3070)
    # Processing the call arguments (line 3070)
    # Getting the type of 'x' (line 3070)
    x_279585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 19), 'x', False)
    # Processing the call keyword arguments (line 3070)
    kwargs_279586 = {}
    # Getting the type of 'np' (line 3070)
    np_279583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3070)
    asarray_279584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3070, 8), np_279583, 'asarray')
    # Calling asarray(args, kwargs) (line 3070)
    asarray_call_result_279587 = invoke(stypy.reporting.localization.Localization(__file__, 3070, 8), asarray_279584, *[x_279585], **kwargs_279586)
    
    # Assigning a type to the variable 'x' (line 3070)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3070, 4), 'x', asarray_call_result_279587)
    
    
    # Getting the type of 'method' (line 3072)
    method_279588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3072, 7), 'method')
    
    # Obtaining an instance of the builtin type 'list' (line 3072)
    list_279589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3072, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3072)
    # Adding element type (line 3072)
    str_279590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3072, 22), 'str', 'pad')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3072, 21), list_279589, str_279590)
    # Adding element type (line 3072)
    str_279591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3072, 29), 'str', 'gust')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3072, 21), list_279589, str_279591)
    
    # Applying the binary operator 'notin' (line 3072)
    result_contains_279592 = python_operator(stypy.reporting.localization.Localization(__file__, 3072, 7), 'notin', method_279588, list_279589)
    
    # Testing the type of an if condition (line 3072)
    if_condition_279593 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3072, 4), result_contains_279592)
    # Assigning a type to the variable 'if_condition_279593' (line 3072)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3072, 4), 'if_condition_279593', if_condition_279593)
    # SSA begins for if statement (line 3072)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3073)
    # Processing the call arguments (line 3073)
    str_279595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3073, 25), 'str', "method must be 'pad' or 'gust'.")
    # Processing the call keyword arguments (line 3073)
    kwargs_279596 = {}
    # Getting the type of 'ValueError' (line 3073)
    ValueError_279594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3073, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3073)
    ValueError_call_result_279597 = invoke(stypy.reporting.localization.Localization(__file__, 3073, 14), ValueError_279594, *[str_279595], **kwargs_279596)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3073, 8), ValueError_call_result_279597, 'raise parameter', BaseException)
    # SSA join for if statement (line 3072)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'method' (line 3075)
    method_279598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 7), 'method')
    str_279599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3075, 17), 'str', 'gust')
    # Applying the binary operator '==' (line 3075)
    result_eq_279600 = python_operator(stypy.reporting.localization.Localization(__file__, 3075, 7), '==', method_279598, str_279599)
    
    # Testing the type of an if condition (line 3075)
    if_condition_279601 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3075, 4), result_eq_279600)
    # Assigning a type to the variable 'if_condition_279601' (line 3075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3075, 4), 'if_condition_279601', if_condition_279601)
    # SSA begins for if statement (line 3075)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 3076):
    
    # Assigning a Subscript to a Name (line 3076):
    
    # Obtaining the type of the subscript
    int_279602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3076, 8), 'int')
    
    # Call to _filtfilt_gust(...): (line 3076)
    # Processing the call arguments (line 3076)
    # Getting the type of 'b' (line 3076)
    b_279604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 35), 'b', False)
    # Getting the type of 'a' (line 3076)
    a_279605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 38), 'a', False)
    # Getting the type of 'x' (line 3076)
    x_279606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 41), 'x', False)
    # Processing the call keyword arguments (line 3076)
    # Getting the type of 'axis' (line 3076)
    axis_279607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 49), 'axis', False)
    keyword_279608 = axis_279607
    # Getting the type of 'irlen' (line 3076)
    irlen_279609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 61), 'irlen', False)
    keyword_279610 = irlen_279609
    kwargs_279611 = {'irlen': keyword_279610, 'axis': keyword_279608}
    # Getting the type of '_filtfilt_gust' (line 3076)
    _filtfilt_gust_279603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 20), '_filtfilt_gust', False)
    # Calling _filtfilt_gust(args, kwargs) (line 3076)
    _filtfilt_gust_call_result_279612 = invoke(stypy.reporting.localization.Localization(__file__, 3076, 20), _filtfilt_gust_279603, *[b_279604, a_279605, x_279606], **kwargs_279611)
    
    # Obtaining the member '__getitem__' of a type (line 3076)
    getitem___279613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3076, 8), _filtfilt_gust_call_result_279612, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3076)
    subscript_call_result_279614 = invoke(stypy.reporting.localization.Localization(__file__, 3076, 8), getitem___279613, int_279602)
    
    # Assigning a type to the variable 'tuple_var_assignment_274348' (line 3076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3076, 8), 'tuple_var_assignment_274348', subscript_call_result_279614)
    
    # Assigning a Subscript to a Name (line 3076):
    
    # Obtaining the type of the subscript
    int_279615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3076, 8), 'int')
    
    # Call to _filtfilt_gust(...): (line 3076)
    # Processing the call arguments (line 3076)
    # Getting the type of 'b' (line 3076)
    b_279617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 35), 'b', False)
    # Getting the type of 'a' (line 3076)
    a_279618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 38), 'a', False)
    # Getting the type of 'x' (line 3076)
    x_279619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 41), 'x', False)
    # Processing the call keyword arguments (line 3076)
    # Getting the type of 'axis' (line 3076)
    axis_279620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 49), 'axis', False)
    keyword_279621 = axis_279620
    # Getting the type of 'irlen' (line 3076)
    irlen_279622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 61), 'irlen', False)
    keyword_279623 = irlen_279622
    kwargs_279624 = {'irlen': keyword_279623, 'axis': keyword_279621}
    # Getting the type of '_filtfilt_gust' (line 3076)
    _filtfilt_gust_279616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 20), '_filtfilt_gust', False)
    # Calling _filtfilt_gust(args, kwargs) (line 3076)
    _filtfilt_gust_call_result_279625 = invoke(stypy.reporting.localization.Localization(__file__, 3076, 20), _filtfilt_gust_279616, *[b_279617, a_279618, x_279619], **kwargs_279624)
    
    # Obtaining the member '__getitem__' of a type (line 3076)
    getitem___279626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3076, 8), _filtfilt_gust_call_result_279625, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3076)
    subscript_call_result_279627 = invoke(stypy.reporting.localization.Localization(__file__, 3076, 8), getitem___279626, int_279615)
    
    # Assigning a type to the variable 'tuple_var_assignment_274349' (line 3076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3076, 8), 'tuple_var_assignment_274349', subscript_call_result_279627)
    
    # Assigning a Subscript to a Name (line 3076):
    
    # Obtaining the type of the subscript
    int_279628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3076, 8), 'int')
    
    # Call to _filtfilt_gust(...): (line 3076)
    # Processing the call arguments (line 3076)
    # Getting the type of 'b' (line 3076)
    b_279630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 35), 'b', False)
    # Getting the type of 'a' (line 3076)
    a_279631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 38), 'a', False)
    # Getting the type of 'x' (line 3076)
    x_279632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 41), 'x', False)
    # Processing the call keyword arguments (line 3076)
    # Getting the type of 'axis' (line 3076)
    axis_279633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 49), 'axis', False)
    keyword_279634 = axis_279633
    # Getting the type of 'irlen' (line 3076)
    irlen_279635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 61), 'irlen', False)
    keyword_279636 = irlen_279635
    kwargs_279637 = {'irlen': keyword_279636, 'axis': keyword_279634}
    # Getting the type of '_filtfilt_gust' (line 3076)
    _filtfilt_gust_279629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 20), '_filtfilt_gust', False)
    # Calling _filtfilt_gust(args, kwargs) (line 3076)
    _filtfilt_gust_call_result_279638 = invoke(stypy.reporting.localization.Localization(__file__, 3076, 20), _filtfilt_gust_279629, *[b_279630, a_279631, x_279632], **kwargs_279637)
    
    # Obtaining the member '__getitem__' of a type (line 3076)
    getitem___279639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3076, 8), _filtfilt_gust_call_result_279638, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3076)
    subscript_call_result_279640 = invoke(stypy.reporting.localization.Localization(__file__, 3076, 8), getitem___279639, int_279628)
    
    # Assigning a type to the variable 'tuple_var_assignment_274350' (line 3076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3076, 8), 'tuple_var_assignment_274350', subscript_call_result_279640)
    
    # Assigning a Name to a Name (line 3076):
    # Getting the type of 'tuple_var_assignment_274348' (line 3076)
    tuple_var_assignment_274348_279641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 8), 'tuple_var_assignment_274348')
    # Assigning a type to the variable 'y' (line 3076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3076, 8), 'y', tuple_var_assignment_274348_279641)
    
    # Assigning a Name to a Name (line 3076):
    # Getting the type of 'tuple_var_assignment_274349' (line 3076)
    tuple_var_assignment_274349_279642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 8), 'tuple_var_assignment_274349')
    # Assigning a type to the variable 'z1' (line 3076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3076, 11), 'z1', tuple_var_assignment_274349_279642)
    
    # Assigning a Name to a Name (line 3076):
    # Getting the type of 'tuple_var_assignment_274350' (line 3076)
    tuple_var_assignment_274350_279643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 8), 'tuple_var_assignment_274350')
    # Assigning a type to the variable 'z2' (line 3076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3076, 15), 'z2', tuple_var_assignment_274350_279643)
    # Getting the type of 'y' (line 3077)
    y_279644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3077, 15), 'y')
    # Assigning a type to the variable 'stypy_return_type' (line 3077)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3077, 8), 'stypy_return_type', y_279644)
    # SSA join for if statement (line 3075)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 3080):
    
    # Assigning a Subscript to a Name (line 3080):
    
    # Obtaining the type of the subscript
    int_279645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3080, 4), 'int')
    
    # Call to _validate_pad(...): (line 3080)
    # Processing the call arguments (line 3080)
    # Getting the type of 'padtype' (line 3080)
    padtype_279647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 30), 'padtype', False)
    # Getting the type of 'padlen' (line 3080)
    padlen_279648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 39), 'padlen', False)
    # Getting the type of 'x' (line 3080)
    x_279649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 47), 'x', False)
    # Getting the type of 'axis' (line 3080)
    axis_279650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 50), 'axis', False)
    # Processing the call keyword arguments (line 3080)
    
    # Call to max(...): (line 3081)
    # Processing the call arguments (line 3081)
    
    # Call to len(...): (line 3081)
    # Processing the call arguments (line 3081)
    # Getting the type of 'a' (line 3081)
    a_279653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 44), 'a', False)
    # Processing the call keyword arguments (line 3081)
    kwargs_279654 = {}
    # Getting the type of 'len' (line 3081)
    len_279652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 40), 'len', False)
    # Calling len(args, kwargs) (line 3081)
    len_call_result_279655 = invoke(stypy.reporting.localization.Localization(__file__, 3081, 40), len_279652, *[a_279653], **kwargs_279654)
    
    
    # Call to len(...): (line 3081)
    # Processing the call arguments (line 3081)
    # Getting the type of 'b' (line 3081)
    b_279657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 52), 'b', False)
    # Processing the call keyword arguments (line 3081)
    kwargs_279658 = {}
    # Getting the type of 'len' (line 3081)
    len_279656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 48), 'len', False)
    # Calling len(args, kwargs) (line 3081)
    len_call_result_279659 = invoke(stypy.reporting.localization.Localization(__file__, 3081, 48), len_279656, *[b_279657], **kwargs_279658)
    
    # Processing the call keyword arguments (line 3081)
    kwargs_279660 = {}
    # Getting the type of 'max' (line 3081)
    max_279651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 36), 'max', False)
    # Calling max(args, kwargs) (line 3081)
    max_call_result_279661 = invoke(stypy.reporting.localization.Localization(__file__, 3081, 36), max_279651, *[len_call_result_279655, len_call_result_279659], **kwargs_279660)
    
    keyword_279662 = max_call_result_279661
    kwargs_279663 = {'ntaps': keyword_279662}
    # Getting the type of '_validate_pad' (line 3080)
    _validate_pad_279646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 16), '_validate_pad', False)
    # Calling _validate_pad(args, kwargs) (line 3080)
    _validate_pad_call_result_279664 = invoke(stypy.reporting.localization.Localization(__file__, 3080, 16), _validate_pad_279646, *[padtype_279647, padlen_279648, x_279649, axis_279650], **kwargs_279663)
    
    # Obtaining the member '__getitem__' of a type (line 3080)
    getitem___279665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3080, 4), _validate_pad_call_result_279664, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3080)
    subscript_call_result_279666 = invoke(stypy.reporting.localization.Localization(__file__, 3080, 4), getitem___279665, int_279645)
    
    # Assigning a type to the variable 'tuple_var_assignment_274351' (line 3080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3080, 4), 'tuple_var_assignment_274351', subscript_call_result_279666)
    
    # Assigning a Subscript to a Name (line 3080):
    
    # Obtaining the type of the subscript
    int_279667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3080, 4), 'int')
    
    # Call to _validate_pad(...): (line 3080)
    # Processing the call arguments (line 3080)
    # Getting the type of 'padtype' (line 3080)
    padtype_279669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 30), 'padtype', False)
    # Getting the type of 'padlen' (line 3080)
    padlen_279670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 39), 'padlen', False)
    # Getting the type of 'x' (line 3080)
    x_279671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 47), 'x', False)
    # Getting the type of 'axis' (line 3080)
    axis_279672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 50), 'axis', False)
    # Processing the call keyword arguments (line 3080)
    
    # Call to max(...): (line 3081)
    # Processing the call arguments (line 3081)
    
    # Call to len(...): (line 3081)
    # Processing the call arguments (line 3081)
    # Getting the type of 'a' (line 3081)
    a_279675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 44), 'a', False)
    # Processing the call keyword arguments (line 3081)
    kwargs_279676 = {}
    # Getting the type of 'len' (line 3081)
    len_279674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 40), 'len', False)
    # Calling len(args, kwargs) (line 3081)
    len_call_result_279677 = invoke(stypy.reporting.localization.Localization(__file__, 3081, 40), len_279674, *[a_279675], **kwargs_279676)
    
    
    # Call to len(...): (line 3081)
    # Processing the call arguments (line 3081)
    # Getting the type of 'b' (line 3081)
    b_279679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 52), 'b', False)
    # Processing the call keyword arguments (line 3081)
    kwargs_279680 = {}
    # Getting the type of 'len' (line 3081)
    len_279678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 48), 'len', False)
    # Calling len(args, kwargs) (line 3081)
    len_call_result_279681 = invoke(stypy.reporting.localization.Localization(__file__, 3081, 48), len_279678, *[b_279679], **kwargs_279680)
    
    # Processing the call keyword arguments (line 3081)
    kwargs_279682 = {}
    # Getting the type of 'max' (line 3081)
    max_279673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3081, 36), 'max', False)
    # Calling max(args, kwargs) (line 3081)
    max_call_result_279683 = invoke(stypy.reporting.localization.Localization(__file__, 3081, 36), max_279673, *[len_call_result_279677, len_call_result_279681], **kwargs_279682)
    
    keyword_279684 = max_call_result_279683
    kwargs_279685 = {'ntaps': keyword_279684}
    # Getting the type of '_validate_pad' (line 3080)
    _validate_pad_279668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 16), '_validate_pad', False)
    # Calling _validate_pad(args, kwargs) (line 3080)
    _validate_pad_call_result_279686 = invoke(stypy.reporting.localization.Localization(__file__, 3080, 16), _validate_pad_279668, *[padtype_279669, padlen_279670, x_279671, axis_279672], **kwargs_279685)
    
    # Obtaining the member '__getitem__' of a type (line 3080)
    getitem___279687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3080, 4), _validate_pad_call_result_279686, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3080)
    subscript_call_result_279688 = invoke(stypy.reporting.localization.Localization(__file__, 3080, 4), getitem___279687, int_279667)
    
    # Assigning a type to the variable 'tuple_var_assignment_274352' (line 3080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3080, 4), 'tuple_var_assignment_274352', subscript_call_result_279688)
    
    # Assigning a Name to a Name (line 3080):
    # Getting the type of 'tuple_var_assignment_274351' (line 3080)
    tuple_var_assignment_274351_279689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 4), 'tuple_var_assignment_274351')
    # Assigning a type to the variable 'edge' (line 3080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3080, 4), 'edge', tuple_var_assignment_274351_279689)
    
    # Assigning a Name to a Name (line 3080):
    # Getting the type of 'tuple_var_assignment_274352' (line 3080)
    tuple_var_assignment_274352_279690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 4), 'tuple_var_assignment_274352')
    # Assigning a type to the variable 'ext' (line 3080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3080, 10), 'ext', tuple_var_assignment_274352_279690)
    
    # Assigning a Call to a Name (line 3084):
    
    # Assigning a Call to a Name (line 3084):
    
    # Call to lfilter_zi(...): (line 3084)
    # Processing the call arguments (line 3084)
    # Getting the type of 'b' (line 3084)
    b_279692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3084, 20), 'b', False)
    # Getting the type of 'a' (line 3084)
    a_279693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3084, 23), 'a', False)
    # Processing the call keyword arguments (line 3084)
    kwargs_279694 = {}
    # Getting the type of 'lfilter_zi' (line 3084)
    lfilter_zi_279691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3084, 9), 'lfilter_zi', False)
    # Calling lfilter_zi(args, kwargs) (line 3084)
    lfilter_zi_call_result_279695 = invoke(stypy.reporting.localization.Localization(__file__, 3084, 9), lfilter_zi_279691, *[b_279692, a_279693], **kwargs_279694)
    
    # Assigning a type to the variable 'zi' (line 3084)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3084, 4), 'zi', lfilter_zi_call_result_279695)
    
    # Assigning a BinOp to a Name (line 3089):
    
    # Assigning a BinOp to a Name (line 3089):
    
    # Obtaining an instance of the builtin type 'list' (line 3089)
    list_279696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3089, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3089)
    # Adding element type (line 3089)
    int_279697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3089, 16), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3089, 15), list_279696, int_279697)
    
    # Getting the type of 'x' (line 3089)
    x_279698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3089, 21), 'x')
    # Obtaining the member 'ndim' of a type (line 3089)
    ndim_279699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3089, 21), x_279698, 'ndim')
    # Applying the binary operator '*' (line 3089)
    result_mul_279700 = python_operator(stypy.reporting.localization.Localization(__file__, 3089, 15), '*', list_279696, ndim_279699)
    
    # Assigning a type to the variable 'zi_shape' (line 3089)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3089, 4), 'zi_shape', result_mul_279700)
    
    # Assigning a Attribute to a Subscript (line 3090):
    
    # Assigning a Attribute to a Subscript (line 3090):
    # Getting the type of 'zi' (line 3090)
    zi_279701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 21), 'zi')
    # Obtaining the member 'size' of a type (line 3090)
    size_279702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3090, 21), zi_279701, 'size')
    # Getting the type of 'zi_shape' (line 3090)
    zi_shape_279703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 4), 'zi_shape')
    # Getting the type of 'axis' (line 3090)
    axis_279704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 13), 'axis')
    # Storing an element on a container (line 3090)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3090, 4), zi_shape_279703, (axis_279704, size_279702))
    
    # Assigning a Call to a Name (line 3091):
    
    # Assigning a Call to a Name (line 3091):
    
    # Call to reshape(...): (line 3091)
    # Processing the call arguments (line 3091)
    # Getting the type of 'zi' (line 3091)
    zi_279707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 20), 'zi', False)
    # Getting the type of 'zi_shape' (line 3091)
    zi_shape_279708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 24), 'zi_shape', False)
    # Processing the call keyword arguments (line 3091)
    kwargs_279709 = {}
    # Getting the type of 'np' (line 3091)
    np_279705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3091, 9), 'np', False)
    # Obtaining the member 'reshape' of a type (line 3091)
    reshape_279706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3091, 9), np_279705, 'reshape')
    # Calling reshape(args, kwargs) (line 3091)
    reshape_call_result_279710 = invoke(stypy.reporting.localization.Localization(__file__, 3091, 9), reshape_279706, *[zi_279707, zi_shape_279708], **kwargs_279709)
    
    # Assigning a type to the variable 'zi' (line 3091)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3091, 4), 'zi', reshape_call_result_279710)
    
    # Assigning a Call to a Name (line 3092):
    
    # Assigning a Call to a Name (line 3092):
    
    # Call to axis_slice(...): (line 3092)
    # Processing the call arguments (line 3092)
    # Getting the type of 'ext' (line 3092)
    ext_279712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 20), 'ext', False)
    # Processing the call keyword arguments (line 3092)
    int_279713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3092, 30), 'int')
    keyword_279714 = int_279713
    # Getting the type of 'axis' (line 3092)
    axis_279715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 38), 'axis', False)
    keyword_279716 = axis_279715
    kwargs_279717 = {'stop': keyword_279714, 'axis': keyword_279716}
    # Getting the type of 'axis_slice' (line 3092)
    axis_slice_279711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3092, 9), 'axis_slice', False)
    # Calling axis_slice(args, kwargs) (line 3092)
    axis_slice_call_result_279718 = invoke(stypy.reporting.localization.Localization(__file__, 3092, 9), axis_slice_279711, *[ext_279712], **kwargs_279717)
    
    # Assigning a type to the variable 'x0' (line 3092)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3092, 4), 'x0', axis_slice_call_result_279718)
    
    # Assigning a Call to a Tuple (line 3095):
    
    # Assigning a Subscript to a Name (line 3095):
    
    # Obtaining the type of the subscript
    int_279719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3095, 4), 'int')
    
    # Call to lfilter(...): (line 3095)
    # Processing the call arguments (line 3095)
    # Getting the type of 'b' (line 3095)
    b_279721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 22), 'b', False)
    # Getting the type of 'a' (line 3095)
    a_279722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 25), 'a', False)
    # Getting the type of 'ext' (line 3095)
    ext_279723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 28), 'ext', False)
    # Processing the call keyword arguments (line 3095)
    # Getting the type of 'axis' (line 3095)
    axis_279724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 38), 'axis', False)
    keyword_279725 = axis_279724
    # Getting the type of 'zi' (line 3095)
    zi_279726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 47), 'zi', False)
    # Getting the type of 'x0' (line 3095)
    x0_279727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 52), 'x0', False)
    # Applying the binary operator '*' (line 3095)
    result_mul_279728 = python_operator(stypy.reporting.localization.Localization(__file__, 3095, 47), '*', zi_279726, x0_279727)
    
    keyword_279729 = result_mul_279728
    kwargs_279730 = {'zi': keyword_279729, 'axis': keyword_279725}
    # Getting the type of 'lfilter' (line 3095)
    lfilter_279720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 14), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 3095)
    lfilter_call_result_279731 = invoke(stypy.reporting.localization.Localization(__file__, 3095, 14), lfilter_279720, *[b_279721, a_279722, ext_279723], **kwargs_279730)
    
    # Obtaining the member '__getitem__' of a type (line 3095)
    getitem___279732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3095, 4), lfilter_call_result_279731, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3095)
    subscript_call_result_279733 = invoke(stypy.reporting.localization.Localization(__file__, 3095, 4), getitem___279732, int_279719)
    
    # Assigning a type to the variable 'tuple_var_assignment_274353' (line 3095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3095, 4), 'tuple_var_assignment_274353', subscript_call_result_279733)
    
    # Assigning a Subscript to a Name (line 3095):
    
    # Obtaining the type of the subscript
    int_279734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3095, 4), 'int')
    
    # Call to lfilter(...): (line 3095)
    # Processing the call arguments (line 3095)
    # Getting the type of 'b' (line 3095)
    b_279736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 22), 'b', False)
    # Getting the type of 'a' (line 3095)
    a_279737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 25), 'a', False)
    # Getting the type of 'ext' (line 3095)
    ext_279738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 28), 'ext', False)
    # Processing the call keyword arguments (line 3095)
    # Getting the type of 'axis' (line 3095)
    axis_279739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 38), 'axis', False)
    keyword_279740 = axis_279739
    # Getting the type of 'zi' (line 3095)
    zi_279741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 47), 'zi', False)
    # Getting the type of 'x0' (line 3095)
    x0_279742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 52), 'x0', False)
    # Applying the binary operator '*' (line 3095)
    result_mul_279743 = python_operator(stypy.reporting.localization.Localization(__file__, 3095, 47), '*', zi_279741, x0_279742)
    
    keyword_279744 = result_mul_279743
    kwargs_279745 = {'zi': keyword_279744, 'axis': keyword_279740}
    # Getting the type of 'lfilter' (line 3095)
    lfilter_279735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 14), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 3095)
    lfilter_call_result_279746 = invoke(stypy.reporting.localization.Localization(__file__, 3095, 14), lfilter_279735, *[b_279736, a_279737, ext_279738], **kwargs_279745)
    
    # Obtaining the member '__getitem__' of a type (line 3095)
    getitem___279747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3095, 4), lfilter_call_result_279746, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3095)
    subscript_call_result_279748 = invoke(stypy.reporting.localization.Localization(__file__, 3095, 4), getitem___279747, int_279734)
    
    # Assigning a type to the variable 'tuple_var_assignment_274354' (line 3095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3095, 4), 'tuple_var_assignment_274354', subscript_call_result_279748)
    
    # Assigning a Name to a Name (line 3095):
    # Getting the type of 'tuple_var_assignment_274353' (line 3095)
    tuple_var_assignment_274353_279749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 4), 'tuple_var_assignment_274353')
    # Assigning a type to the variable 'y' (line 3095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3095, 5), 'y', tuple_var_assignment_274353_279749)
    
    # Assigning a Name to a Name (line 3095):
    # Getting the type of 'tuple_var_assignment_274354' (line 3095)
    tuple_var_assignment_274354_279750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 4), 'tuple_var_assignment_274354')
    # Assigning a type to the variable 'zf' (line 3095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3095, 8), 'zf', tuple_var_assignment_274354_279750)
    
    # Assigning a Call to a Name (line 3099):
    
    # Assigning a Call to a Name (line 3099):
    
    # Call to axis_slice(...): (line 3099)
    # Processing the call arguments (line 3099)
    # Getting the type of 'y' (line 3099)
    y_279752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 20), 'y', False)
    # Processing the call keyword arguments (line 3099)
    int_279753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3099, 29), 'int')
    keyword_279754 = int_279753
    # Getting the type of 'axis' (line 3099)
    axis_279755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 38), 'axis', False)
    keyword_279756 = axis_279755
    kwargs_279757 = {'start': keyword_279754, 'axis': keyword_279756}
    # Getting the type of 'axis_slice' (line 3099)
    axis_slice_279751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 9), 'axis_slice', False)
    # Calling axis_slice(args, kwargs) (line 3099)
    axis_slice_call_result_279758 = invoke(stypy.reporting.localization.Localization(__file__, 3099, 9), axis_slice_279751, *[y_279752], **kwargs_279757)
    
    # Assigning a type to the variable 'y0' (line 3099)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3099, 4), 'y0', axis_slice_call_result_279758)
    
    # Assigning a Call to a Tuple (line 3100):
    
    # Assigning a Subscript to a Name (line 3100):
    
    # Obtaining the type of the subscript
    int_279759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3100, 4), 'int')
    
    # Call to lfilter(...): (line 3100)
    # Processing the call arguments (line 3100)
    # Getting the type of 'b' (line 3100)
    b_279761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 22), 'b', False)
    # Getting the type of 'a' (line 3100)
    a_279762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 25), 'a', False)
    
    # Call to axis_reverse(...): (line 3100)
    # Processing the call arguments (line 3100)
    # Getting the type of 'y' (line 3100)
    y_279764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 41), 'y', False)
    # Processing the call keyword arguments (line 3100)
    # Getting the type of 'axis' (line 3100)
    axis_279765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 49), 'axis', False)
    keyword_279766 = axis_279765
    kwargs_279767 = {'axis': keyword_279766}
    # Getting the type of 'axis_reverse' (line 3100)
    axis_reverse_279763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 28), 'axis_reverse', False)
    # Calling axis_reverse(args, kwargs) (line 3100)
    axis_reverse_call_result_279768 = invoke(stypy.reporting.localization.Localization(__file__, 3100, 28), axis_reverse_279763, *[y_279764], **kwargs_279767)
    
    # Processing the call keyword arguments (line 3100)
    # Getting the type of 'axis' (line 3100)
    axis_279769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 61), 'axis', False)
    keyword_279770 = axis_279769
    # Getting the type of 'zi' (line 3100)
    zi_279771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 70), 'zi', False)
    # Getting the type of 'y0' (line 3100)
    y0_279772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 75), 'y0', False)
    # Applying the binary operator '*' (line 3100)
    result_mul_279773 = python_operator(stypy.reporting.localization.Localization(__file__, 3100, 70), '*', zi_279771, y0_279772)
    
    keyword_279774 = result_mul_279773
    kwargs_279775 = {'zi': keyword_279774, 'axis': keyword_279770}
    # Getting the type of 'lfilter' (line 3100)
    lfilter_279760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 14), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 3100)
    lfilter_call_result_279776 = invoke(stypy.reporting.localization.Localization(__file__, 3100, 14), lfilter_279760, *[b_279761, a_279762, axis_reverse_call_result_279768], **kwargs_279775)
    
    # Obtaining the member '__getitem__' of a type (line 3100)
    getitem___279777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3100, 4), lfilter_call_result_279776, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3100)
    subscript_call_result_279778 = invoke(stypy.reporting.localization.Localization(__file__, 3100, 4), getitem___279777, int_279759)
    
    # Assigning a type to the variable 'tuple_var_assignment_274355' (line 3100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3100, 4), 'tuple_var_assignment_274355', subscript_call_result_279778)
    
    # Assigning a Subscript to a Name (line 3100):
    
    # Obtaining the type of the subscript
    int_279779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3100, 4), 'int')
    
    # Call to lfilter(...): (line 3100)
    # Processing the call arguments (line 3100)
    # Getting the type of 'b' (line 3100)
    b_279781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 22), 'b', False)
    # Getting the type of 'a' (line 3100)
    a_279782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 25), 'a', False)
    
    # Call to axis_reverse(...): (line 3100)
    # Processing the call arguments (line 3100)
    # Getting the type of 'y' (line 3100)
    y_279784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 41), 'y', False)
    # Processing the call keyword arguments (line 3100)
    # Getting the type of 'axis' (line 3100)
    axis_279785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 49), 'axis', False)
    keyword_279786 = axis_279785
    kwargs_279787 = {'axis': keyword_279786}
    # Getting the type of 'axis_reverse' (line 3100)
    axis_reverse_279783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 28), 'axis_reverse', False)
    # Calling axis_reverse(args, kwargs) (line 3100)
    axis_reverse_call_result_279788 = invoke(stypy.reporting.localization.Localization(__file__, 3100, 28), axis_reverse_279783, *[y_279784], **kwargs_279787)
    
    # Processing the call keyword arguments (line 3100)
    # Getting the type of 'axis' (line 3100)
    axis_279789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 61), 'axis', False)
    keyword_279790 = axis_279789
    # Getting the type of 'zi' (line 3100)
    zi_279791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 70), 'zi', False)
    # Getting the type of 'y0' (line 3100)
    y0_279792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 75), 'y0', False)
    # Applying the binary operator '*' (line 3100)
    result_mul_279793 = python_operator(stypy.reporting.localization.Localization(__file__, 3100, 70), '*', zi_279791, y0_279792)
    
    keyword_279794 = result_mul_279793
    kwargs_279795 = {'zi': keyword_279794, 'axis': keyword_279790}
    # Getting the type of 'lfilter' (line 3100)
    lfilter_279780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 14), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 3100)
    lfilter_call_result_279796 = invoke(stypy.reporting.localization.Localization(__file__, 3100, 14), lfilter_279780, *[b_279781, a_279782, axis_reverse_call_result_279788], **kwargs_279795)
    
    # Obtaining the member '__getitem__' of a type (line 3100)
    getitem___279797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3100, 4), lfilter_call_result_279796, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3100)
    subscript_call_result_279798 = invoke(stypy.reporting.localization.Localization(__file__, 3100, 4), getitem___279797, int_279779)
    
    # Assigning a type to the variable 'tuple_var_assignment_274356' (line 3100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3100, 4), 'tuple_var_assignment_274356', subscript_call_result_279798)
    
    # Assigning a Name to a Name (line 3100):
    # Getting the type of 'tuple_var_assignment_274355' (line 3100)
    tuple_var_assignment_274355_279799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 4), 'tuple_var_assignment_274355')
    # Assigning a type to the variable 'y' (line 3100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3100, 5), 'y', tuple_var_assignment_274355_279799)
    
    # Assigning a Name to a Name (line 3100):
    # Getting the type of 'tuple_var_assignment_274356' (line 3100)
    tuple_var_assignment_274356_279800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3100, 4), 'tuple_var_assignment_274356')
    # Assigning a type to the variable 'zf' (line 3100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3100, 8), 'zf', tuple_var_assignment_274356_279800)
    
    # Assigning a Call to a Name (line 3103):
    
    # Assigning a Call to a Name (line 3103):
    
    # Call to axis_reverse(...): (line 3103)
    # Processing the call arguments (line 3103)
    # Getting the type of 'y' (line 3103)
    y_279802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 21), 'y', False)
    # Processing the call keyword arguments (line 3103)
    # Getting the type of 'axis' (line 3103)
    axis_279803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 29), 'axis', False)
    keyword_279804 = axis_279803
    kwargs_279805 = {'axis': keyword_279804}
    # Getting the type of 'axis_reverse' (line 3103)
    axis_reverse_279801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 8), 'axis_reverse', False)
    # Calling axis_reverse(args, kwargs) (line 3103)
    axis_reverse_call_result_279806 = invoke(stypy.reporting.localization.Localization(__file__, 3103, 8), axis_reverse_279801, *[y_279802], **kwargs_279805)
    
    # Assigning a type to the variable 'y' (line 3103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3103, 4), 'y', axis_reverse_call_result_279806)
    
    
    # Getting the type of 'edge' (line 3105)
    edge_279807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 7), 'edge')
    int_279808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3105, 14), 'int')
    # Applying the binary operator '>' (line 3105)
    result_gt_279809 = python_operator(stypy.reporting.localization.Localization(__file__, 3105, 7), '>', edge_279807, int_279808)
    
    # Testing the type of an if condition (line 3105)
    if_condition_279810 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3105, 4), result_gt_279809)
    # Assigning a type to the variable 'if_condition_279810' (line 3105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3105, 4), 'if_condition_279810', if_condition_279810)
    # SSA begins for if statement (line 3105)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3107):
    
    # Assigning a Call to a Name (line 3107):
    
    # Call to axis_slice(...): (line 3107)
    # Processing the call arguments (line 3107)
    # Getting the type of 'y' (line 3107)
    y_279812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3107, 23), 'y', False)
    # Processing the call keyword arguments (line 3107)
    # Getting the type of 'edge' (line 3107)
    edge_279813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3107, 32), 'edge', False)
    keyword_279814 = edge_279813
    
    # Getting the type of 'edge' (line 3107)
    edge_279815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3107, 44), 'edge', False)
    # Applying the 'usub' unary operator (line 3107)
    result___neg___279816 = python_operator(stypy.reporting.localization.Localization(__file__, 3107, 43), 'usub', edge_279815)
    
    keyword_279817 = result___neg___279816
    # Getting the type of 'axis' (line 3107)
    axis_279818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3107, 55), 'axis', False)
    keyword_279819 = axis_279818
    kwargs_279820 = {'start': keyword_279814, 'stop': keyword_279817, 'axis': keyword_279819}
    # Getting the type of 'axis_slice' (line 3107)
    axis_slice_279811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3107, 12), 'axis_slice', False)
    # Calling axis_slice(args, kwargs) (line 3107)
    axis_slice_call_result_279821 = invoke(stypy.reporting.localization.Localization(__file__, 3107, 12), axis_slice_279811, *[y_279812], **kwargs_279820)
    
    # Assigning a type to the variable 'y' (line 3107)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3107, 8), 'y', axis_slice_call_result_279821)
    # SSA join for if statement (line 3105)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'y' (line 3109)
    y_279822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3109, 11), 'y')
    # Assigning a type to the variable 'stypy_return_type' (line 3109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3109, 4), 'stypy_return_type', y_279822)
    
    # ################# End of 'filtfilt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'filtfilt' in the type store
    # Getting the type of 'stypy_return_type' (line 2915)
    stypy_return_type_279823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2915, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279823)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'filtfilt'
    return stypy_return_type_279823

# Assigning a type to the variable 'filtfilt' (line 2915)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2915, 0), 'filtfilt', filtfilt)

@norecursion
def _validate_pad(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_validate_pad'
    module_type_store = module_type_store.open_function_context('_validate_pad', 3112, 0, False)
    
    # Passed parameters checking function
    _validate_pad.stypy_localization = localization
    _validate_pad.stypy_type_of_self = None
    _validate_pad.stypy_type_store = module_type_store
    _validate_pad.stypy_function_name = '_validate_pad'
    _validate_pad.stypy_param_names_list = ['padtype', 'padlen', 'x', 'axis', 'ntaps']
    _validate_pad.stypy_varargs_param_name = None
    _validate_pad.stypy_kwargs_param_name = None
    _validate_pad.stypy_call_defaults = defaults
    _validate_pad.stypy_call_varargs = varargs
    _validate_pad.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_validate_pad', ['padtype', 'padlen', 'x', 'axis', 'ntaps'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_validate_pad', localization, ['padtype', 'padlen', 'x', 'axis', 'ntaps'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_validate_pad(...)' code ##################

    str_279824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3113, 4), 'str', 'Helper to validate padding for filtfilt')
    
    
    # Getting the type of 'padtype' (line 3114)
    padtype_279825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 7), 'padtype')
    
    # Obtaining an instance of the builtin type 'list' (line 3114)
    list_279826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3114, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3114)
    # Adding element type (line 3114)
    str_279827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3114, 23), 'str', 'even')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3114, 22), list_279826, str_279827)
    # Adding element type (line 3114)
    str_279828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3114, 31), 'str', 'odd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3114, 22), list_279826, str_279828)
    # Adding element type (line 3114)
    str_279829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3114, 38), 'str', 'constant')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3114, 22), list_279826, str_279829)
    # Adding element type (line 3114)
    # Getting the type of 'None' (line 3114)
    None_279830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 50), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3114, 22), list_279826, None_279830)
    
    # Applying the binary operator 'notin' (line 3114)
    result_contains_279831 = python_operator(stypy.reporting.localization.Localization(__file__, 3114, 7), 'notin', padtype_279825, list_279826)
    
    # Testing the type of an if condition (line 3114)
    if_condition_279832 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3114, 4), result_contains_279831)
    # Assigning a type to the variable 'if_condition_279832' (line 3114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3114, 4), 'if_condition_279832', if_condition_279832)
    # SSA begins for if statement (line 3114)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3115)
    # Processing the call arguments (line 3115)
    str_279834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3115, 26), 'str', "Unknown value '%s' given to padtype.  padtype must be 'even', 'odd', 'constant', or None.")
    # Getting the type of 'padtype' (line 3117)
    padtype_279835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 25), 'padtype', False)
    # Applying the binary operator '%' (line 3115)
    result_mod_279836 = python_operator(stypy.reporting.localization.Localization(__file__, 3115, 25), '%', str_279834, padtype_279835)
    
    # Processing the call keyword arguments (line 3115)
    kwargs_279837 = {}
    # Getting the type of 'ValueError' (line 3115)
    ValueError_279833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3115)
    ValueError_call_result_279838 = invoke(stypy.reporting.localization.Localization(__file__, 3115, 14), ValueError_279833, *[result_mod_279836], **kwargs_279837)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3115, 8), ValueError_call_result_279838, 'raise parameter', BaseException)
    # SSA join for if statement (line 3114)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 3119)
    # Getting the type of 'padtype' (line 3119)
    padtype_279839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 7), 'padtype')
    # Getting the type of 'None' (line 3119)
    None_279840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 18), 'None')
    
    (may_be_279841, more_types_in_union_279842) = may_be_none(padtype_279839, None_279840)

    if may_be_279841:

        if more_types_in_union_279842:
            # Runtime conditional SSA (line 3119)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 3120):
        
        # Assigning a Num to a Name (line 3120):
        int_279843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3120, 17), 'int')
        # Assigning a type to the variable 'padlen' (line 3120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3120, 8), 'padlen', int_279843)

        if more_types_in_union_279842:
            # SSA join for if statement (line 3119)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 3122)
    # Getting the type of 'padlen' (line 3122)
    padlen_279844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 7), 'padlen')
    # Getting the type of 'None' (line 3122)
    None_279845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3122, 17), 'None')
    
    (may_be_279846, more_types_in_union_279847) = may_be_none(padlen_279844, None_279845)

    if may_be_279846:

        if more_types_in_union_279847:
            # Runtime conditional SSA (line 3122)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 3124):
        
        # Assigning a BinOp to a Name (line 3124):
        # Getting the type of 'ntaps' (line 3124)
        ntaps_279848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 15), 'ntaps')
        int_279849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3124, 23), 'int')
        # Applying the binary operator '*' (line 3124)
        result_mul_279850 = python_operator(stypy.reporting.localization.Localization(__file__, 3124, 15), '*', ntaps_279848, int_279849)
        
        # Assigning a type to the variable 'edge' (line 3124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3124, 8), 'edge', result_mul_279850)

        if more_types_in_union_279847:
            # Runtime conditional SSA for else branch (line 3122)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_279846) or more_types_in_union_279847):
        
        # Assigning a Name to a Name (line 3126):
        
        # Assigning a Name to a Name (line 3126):
        # Getting the type of 'padlen' (line 3126)
        padlen_279851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3126, 15), 'padlen')
        # Assigning a type to the variable 'edge' (line 3126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3126, 8), 'edge', padlen_279851)

        if (may_be_279846 and more_types_in_union_279847):
            # SSA join for if statement (line 3122)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 3129)
    axis_279852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 15), 'axis')
    # Getting the type of 'x' (line 3129)
    x_279853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 7), 'x')
    # Obtaining the member 'shape' of a type (line 3129)
    shape_279854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 7), x_279853, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3129)
    getitem___279855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3129, 7), shape_279854, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3129)
    subscript_call_result_279856 = invoke(stypy.reporting.localization.Localization(__file__, 3129, 7), getitem___279855, axis_279852)
    
    # Getting the type of 'edge' (line 3129)
    edge_279857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 24), 'edge')
    # Applying the binary operator '<=' (line 3129)
    result_le_279858 = python_operator(stypy.reporting.localization.Localization(__file__, 3129, 7), '<=', subscript_call_result_279856, edge_279857)
    
    # Testing the type of an if condition (line 3129)
    if_condition_279859 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3129, 4), result_le_279858)
    # Assigning a type to the variable 'if_condition_279859' (line 3129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3129, 4), 'if_condition_279859', if_condition_279859)
    # SSA begins for if statement (line 3129)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3130)
    # Processing the call arguments (line 3130)
    str_279861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3130, 25), 'str', 'The length of the input vector x must be at least padlen, which is %d.')
    # Getting the type of 'edge' (line 3131)
    edge_279862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3131, 50), 'edge', False)
    # Applying the binary operator '%' (line 3130)
    result_mod_279863 = python_operator(stypy.reporting.localization.Localization(__file__, 3130, 25), '%', str_279861, edge_279862)
    
    # Processing the call keyword arguments (line 3130)
    kwargs_279864 = {}
    # Getting the type of 'ValueError' (line 3130)
    ValueError_279860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3130, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3130)
    ValueError_call_result_279865 = invoke(stypy.reporting.localization.Localization(__file__, 3130, 14), ValueError_279860, *[result_mod_279863], **kwargs_279864)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3130, 8), ValueError_call_result_279865, 'raise parameter', BaseException)
    # SSA join for if statement (line 3129)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'padtype' (line 3133)
    padtype_279866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 7), 'padtype')
    # Getting the type of 'None' (line 3133)
    None_279867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 22), 'None')
    # Applying the binary operator 'isnot' (line 3133)
    result_is_not_279868 = python_operator(stypy.reporting.localization.Localization(__file__, 3133, 7), 'isnot', padtype_279866, None_279867)
    
    
    # Getting the type of 'edge' (line 3133)
    edge_279869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 31), 'edge')
    int_279870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3133, 38), 'int')
    # Applying the binary operator '>' (line 3133)
    result_gt_279871 = python_operator(stypy.reporting.localization.Localization(__file__, 3133, 31), '>', edge_279869, int_279870)
    
    # Applying the binary operator 'and' (line 3133)
    result_and_keyword_279872 = python_operator(stypy.reporting.localization.Localization(__file__, 3133, 7), 'and', result_is_not_279868, result_gt_279871)
    
    # Testing the type of an if condition (line 3133)
    if_condition_279873 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3133, 4), result_and_keyword_279872)
    # Assigning a type to the variable 'if_condition_279873' (line 3133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3133, 4), 'if_condition_279873', if_condition_279873)
    # SSA begins for if statement (line 3133)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'padtype' (line 3136)
    padtype_279874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3136, 11), 'padtype')
    str_279875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3136, 22), 'str', 'even')
    # Applying the binary operator '==' (line 3136)
    result_eq_279876 = python_operator(stypy.reporting.localization.Localization(__file__, 3136, 11), '==', padtype_279874, str_279875)
    
    # Testing the type of an if condition (line 3136)
    if_condition_279877 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3136, 8), result_eq_279876)
    # Assigning a type to the variable 'if_condition_279877' (line 3136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3136, 8), 'if_condition_279877', if_condition_279877)
    # SSA begins for if statement (line 3136)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3137):
    
    # Assigning a Call to a Name (line 3137):
    
    # Call to even_ext(...): (line 3137)
    # Processing the call arguments (line 3137)
    # Getting the type of 'x' (line 3137)
    x_279879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 27), 'x', False)
    # Getting the type of 'edge' (line 3137)
    edge_279880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 30), 'edge', False)
    # Processing the call keyword arguments (line 3137)
    # Getting the type of 'axis' (line 3137)
    axis_279881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 41), 'axis', False)
    keyword_279882 = axis_279881
    kwargs_279883 = {'axis': keyword_279882}
    # Getting the type of 'even_ext' (line 3137)
    even_ext_279878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3137, 18), 'even_ext', False)
    # Calling even_ext(args, kwargs) (line 3137)
    even_ext_call_result_279884 = invoke(stypy.reporting.localization.Localization(__file__, 3137, 18), even_ext_279878, *[x_279879, edge_279880], **kwargs_279883)
    
    # Assigning a type to the variable 'ext' (line 3137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3137, 12), 'ext', even_ext_call_result_279884)
    # SSA branch for the else part of an if statement (line 3136)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'padtype' (line 3138)
    padtype_279885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 13), 'padtype')
    str_279886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3138, 24), 'str', 'odd')
    # Applying the binary operator '==' (line 3138)
    result_eq_279887 = python_operator(stypy.reporting.localization.Localization(__file__, 3138, 13), '==', padtype_279885, str_279886)
    
    # Testing the type of an if condition (line 3138)
    if_condition_279888 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3138, 13), result_eq_279887)
    # Assigning a type to the variable 'if_condition_279888' (line 3138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3138, 13), 'if_condition_279888', if_condition_279888)
    # SSA begins for if statement (line 3138)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3139):
    
    # Assigning a Call to a Name (line 3139):
    
    # Call to odd_ext(...): (line 3139)
    # Processing the call arguments (line 3139)
    # Getting the type of 'x' (line 3139)
    x_279890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 26), 'x', False)
    # Getting the type of 'edge' (line 3139)
    edge_279891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 29), 'edge', False)
    # Processing the call keyword arguments (line 3139)
    # Getting the type of 'axis' (line 3139)
    axis_279892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 40), 'axis', False)
    keyword_279893 = axis_279892
    kwargs_279894 = {'axis': keyword_279893}
    # Getting the type of 'odd_ext' (line 3139)
    odd_ext_279889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 18), 'odd_ext', False)
    # Calling odd_ext(args, kwargs) (line 3139)
    odd_ext_call_result_279895 = invoke(stypy.reporting.localization.Localization(__file__, 3139, 18), odd_ext_279889, *[x_279890, edge_279891], **kwargs_279894)
    
    # Assigning a type to the variable 'ext' (line 3139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3139, 12), 'ext', odd_ext_call_result_279895)
    # SSA branch for the else part of an if statement (line 3138)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3141):
    
    # Assigning a Call to a Name (line 3141):
    
    # Call to const_ext(...): (line 3141)
    # Processing the call arguments (line 3141)
    # Getting the type of 'x' (line 3141)
    x_279897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 28), 'x', False)
    # Getting the type of 'edge' (line 3141)
    edge_279898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 31), 'edge', False)
    # Processing the call keyword arguments (line 3141)
    # Getting the type of 'axis' (line 3141)
    axis_279899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 42), 'axis', False)
    keyword_279900 = axis_279899
    kwargs_279901 = {'axis': keyword_279900}
    # Getting the type of 'const_ext' (line 3141)
    const_ext_279896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 18), 'const_ext', False)
    # Calling const_ext(args, kwargs) (line 3141)
    const_ext_call_result_279902 = invoke(stypy.reporting.localization.Localization(__file__, 3141, 18), const_ext_279896, *[x_279897, edge_279898], **kwargs_279901)
    
    # Assigning a type to the variable 'ext' (line 3141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3141, 12), 'ext', const_ext_call_result_279902)
    # SSA join for if statement (line 3138)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3136)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 3133)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 3143):
    
    # Assigning a Name to a Name (line 3143):
    # Getting the type of 'x' (line 3143)
    x_279903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3143, 14), 'x')
    # Assigning a type to the variable 'ext' (line 3143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3143, 8), 'ext', x_279903)
    # SSA join for if statement (line 3133)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3144)
    tuple_279904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3144, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3144)
    # Adding element type (line 3144)
    # Getting the type of 'edge' (line 3144)
    edge_279905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 11), 'edge')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3144, 11), tuple_279904, edge_279905)
    # Adding element type (line 3144)
    # Getting the type of 'ext' (line 3144)
    ext_279906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 17), 'ext')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3144, 11), tuple_279904, ext_279906)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3144, 4), 'stypy_return_type', tuple_279904)
    
    # ################# End of '_validate_pad(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_validate_pad' in the type store
    # Getting the type of 'stypy_return_type' (line 3112)
    stypy_return_type_279907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3112, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_279907)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_validate_pad'
    return stypy_return_type_279907

# Assigning a type to the variable '_validate_pad' (line 3112)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3112, 0), '_validate_pad', _validate_pad)

@norecursion
def sosfilt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_279908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3147, 25), 'int')
    # Getting the type of 'None' (line 3147)
    None_279909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 32), 'None')
    defaults = [int_279908, None_279909]
    # Create a new context for function 'sosfilt'
    module_type_store = module_type_store.open_function_context('sosfilt', 3147, 0, False)
    
    # Passed parameters checking function
    sosfilt.stypy_localization = localization
    sosfilt.stypy_type_of_self = None
    sosfilt.stypy_type_store = module_type_store
    sosfilt.stypy_function_name = 'sosfilt'
    sosfilt.stypy_param_names_list = ['sos', 'x', 'axis', 'zi']
    sosfilt.stypy_varargs_param_name = None
    sosfilt.stypy_kwargs_param_name = None
    sosfilt.stypy_call_defaults = defaults
    sosfilt.stypy_call_varargs = varargs
    sosfilt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sosfilt', ['sos', 'x', 'axis', 'zi'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sosfilt', localization, ['sos', 'x', 'axis', 'zi'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sosfilt(...)' code ##################

    str_279910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3217, (-1)), 'str', "\n    Filter data along one dimension using cascaded second-order sections.\n\n    Filter a data sequence, `x`, using a digital IIR filter defined by\n    `sos`. This is implemented by performing `lfilter` for each\n    second-order section.  See `lfilter` for details.\n\n    Parameters\n    ----------\n    sos : array_like\n        Array of second-order filter coefficients, must have shape\n        ``(n_sections, 6)``. Each row corresponds to a second-order\n        section, with the first three columns providing the numerator\n        coefficients and the last three providing the denominator\n        coefficients.\n    x : array_like\n        An N-dimensional input array.\n    axis : int, optional\n        The axis of the input data array along which to apply the\n        linear filter. The filter is applied to each subarray along\n        this axis.  Default is -1.\n    zi : array_like, optional\n        Initial conditions for the cascaded filter delays.  It is a (at\n        least 2D) vector of shape ``(n_sections, ..., 2, ...)``, where\n        ``..., 2, ...`` denotes the shape of `x`, but with ``x.shape[axis]``\n        replaced by 2.  If `zi` is None or is not given then initial rest\n        (i.e. all zeros) is assumed.\n        Note that these initial conditions are *not* the same as the initial\n        conditions given by `lfiltic` or `lfilter_zi`.\n\n    Returns\n    -------\n    y : ndarray\n        The output of the digital filter.\n    zf : ndarray, optional\n        If `zi` is None, this is not returned, otherwise, `zf` holds the\n        final filter delay values.\n\n    See Also\n    --------\n    zpk2sos, sos2zpk, sosfilt_zi, sosfiltfilt, sosfreqz\n\n    Notes\n    -----\n    The filter function is implemented as a series of second-order filters\n    with direct-form II transposed structure. It is designed to minimize\n    numerical precision errors for high-order filters.\n\n    .. versionadded:: 0.16.0\n\n    Examples\n    --------\n    Plot a 13th-order filter's impulse response using both `lfilter` and\n    `sosfilt`, showing the instability that results from trying to do a\n    13th-order filter in a single stage (the numerical error pushes some poles\n    outside of the unit circle):\n\n    >>> import matplotlib.pyplot as plt\n    >>> from scipy import signal\n    >>> b, a = signal.ellip(13, 0.009, 80, 0.05, output='ba')\n    >>> sos = signal.ellip(13, 0.009, 80, 0.05, output='sos')\n    >>> x = signal.unit_impulse(700)\n    >>> y_tf = signal.lfilter(b, a, x)\n    >>> y_sos = signal.sosfilt(sos, x)\n    >>> plt.plot(y_tf, 'r', label='TF')\n    >>> plt.plot(y_sos, 'k', label='SOS')\n    >>> plt.legend(loc='best')\n    >>> plt.show()\n\n    ")
    
    # Assigning a Call to a Name (line 3218):
    
    # Assigning a Call to a Name (line 3218):
    
    # Call to asarray(...): (line 3218)
    # Processing the call arguments (line 3218)
    # Getting the type of 'x' (line 3218)
    x_279913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3218, 19), 'x', False)
    # Processing the call keyword arguments (line 3218)
    kwargs_279914 = {}
    # Getting the type of 'np' (line 3218)
    np_279911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3218, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3218)
    asarray_279912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3218, 8), np_279911, 'asarray')
    # Calling asarray(args, kwargs) (line 3218)
    asarray_call_result_279915 = invoke(stypy.reporting.localization.Localization(__file__, 3218, 8), asarray_279912, *[x_279913], **kwargs_279914)
    
    # Assigning a type to the variable 'x' (line 3218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3218, 4), 'x', asarray_call_result_279915)
    
    # Assigning a Call to a Tuple (line 3219):
    
    # Assigning a Subscript to a Name (line 3219):
    
    # Obtaining the type of the subscript
    int_279916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3219, 4), 'int')
    
    # Call to _validate_sos(...): (line 3219)
    # Processing the call arguments (line 3219)
    # Getting the type of 'sos' (line 3219)
    sos_279918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 36), 'sos', False)
    # Processing the call keyword arguments (line 3219)
    kwargs_279919 = {}
    # Getting the type of '_validate_sos' (line 3219)
    _validate_sos_279917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 22), '_validate_sos', False)
    # Calling _validate_sos(args, kwargs) (line 3219)
    _validate_sos_call_result_279920 = invoke(stypy.reporting.localization.Localization(__file__, 3219, 22), _validate_sos_279917, *[sos_279918], **kwargs_279919)
    
    # Obtaining the member '__getitem__' of a type (line 3219)
    getitem___279921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3219, 4), _validate_sos_call_result_279920, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3219)
    subscript_call_result_279922 = invoke(stypy.reporting.localization.Localization(__file__, 3219, 4), getitem___279921, int_279916)
    
    # Assigning a type to the variable 'tuple_var_assignment_274357' (line 3219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3219, 4), 'tuple_var_assignment_274357', subscript_call_result_279922)
    
    # Assigning a Subscript to a Name (line 3219):
    
    # Obtaining the type of the subscript
    int_279923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3219, 4), 'int')
    
    # Call to _validate_sos(...): (line 3219)
    # Processing the call arguments (line 3219)
    # Getting the type of 'sos' (line 3219)
    sos_279925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 36), 'sos', False)
    # Processing the call keyword arguments (line 3219)
    kwargs_279926 = {}
    # Getting the type of '_validate_sos' (line 3219)
    _validate_sos_279924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 22), '_validate_sos', False)
    # Calling _validate_sos(args, kwargs) (line 3219)
    _validate_sos_call_result_279927 = invoke(stypy.reporting.localization.Localization(__file__, 3219, 22), _validate_sos_279924, *[sos_279925], **kwargs_279926)
    
    # Obtaining the member '__getitem__' of a type (line 3219)
    getitem___279928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3219, 4), _validate_sos_call_result_279927, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3219)
    subscript_call_result_279929 = invoke(stypy.reporting.localization.Localization(__file__, 3219, 4), getitem___279928, int_279923)
    
    # Assigning a type to the variable 'tuple_var_assignment_274358' (line 3219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3219, 4), 'tuple_var_assignment_274358', subscript_call_result_279929)
    
    # Assigning a Name to a Name (line 3219):
    # Getting the type of 'tuple_var_assignment_274357' (line 3219)
    tuple_var_assignment_274357_279930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 4), 'tuple_var_assignment_274357')
    # Assigning a type to the variable 'sos' (line 3219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3219, 4), 'sos', tuple_var_assignment_274357_279930)
    
    # Assigning a Name to a Name (line 3219):
    # Getting the type of 'tuple_var_assignment_274358' (line 3219)
    tuple_var_assignment_274358_279931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 4), 'tuple_var_assignment_274358')
    # Assigning a type to the variable 'n_sections' (line 3219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3219, 9), 'n_sections', tuple_var_assignment_274358_279931)
    
    # Assigning a Compare to a Name (line 3220):
    
    # Assigning a Compare to a Name (line 3220):
    
    # Getting the type of 'zi' (line 3220)
    zi_279932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 13), 'zi')
    # Getting the type of 'None' (line 3220)
    None_279933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3220, 23), 'None')
    # Applying the binary operator 'isnot' (line 3220)
    result_is_not_279934 = python_operator(stypy.reporting.localization.Localization(__file__, 3220, 13), 'isnot', zi_279932, None_279933)
    
    # Assigning a type to the variable 'use_zi' (line 3220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3220, 4), 'use_zi', result_is_not_279934)
    
    # Getting the type of 'use_zi' (line 3221)
    use_zi_279935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3221, 7), 'use_zi')
    # Testing the type of an if condition (line 3221)
    if_condition_279936 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3221, 4), use_zi_279935)
    # Assigning a type to the variable 'if_condition_279936' (line 3221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3221, 4), 'if_condition_279936', if_condition_279936)
    # SSA begins for if statement (line 3221)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3222):
    
    # Assigning a Call to a Name (line 3222):
    
    # Call to asarray(...): (line 3222)
    # Processing the call arguments (line 3222)
    # Getting the type of 'zi' (line 3222)
    zi_279939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3222, 24), 'zi', False)
    # Processing the call keyword arguments (line 3222)
    kwargs_279940 = {}
    # Getting the type of 'np' (line 3222)
    np_279937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3222, 13), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3222)
    asarray_279938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3222, 13), np_279937, 'asarray')
    # Calling asarray(args, kwargs) (line 3222)
    asarray_call_result_279941 = invoke(stypy.reporting.localization.Localization(__file__, 3222, 13), asarray_279938, *[zi_279939], **kwargs_279940)
    
    # Assigning a type to the variable 'zi' (line 3222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3222, 8), 'zi', asarray_call_result_279941)
    
    # Assigning a Call to a Name (line 3223):
    
    # Assigning a Call to a Name (line 3223):
    
    # Call to list(...): (line 3223)
    # Processing the call arguments (line 3223)
    # Getting the type of 'x' (line 3223)
    x_279943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 26), 'x', False)
    # Obtaining the member 'shape' of a type (line 3223)
    shape_279944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3223, 26), x_279943, 'shape')
    # Processing the call keyword arguments (line 3223)
    kwargs_279945 = {}
    # Getting the type of 'list' (line 3223)
    list_279942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 21), 'list', False)
    # Calling list(args, kwargs) (line 3223)
    list_call_result_279946 = invoke(stypy.reporting.localization.Localization(__file__, 3223, 21), list_279942, *[shape_279944], **kwargs_279945)
    
    # Assigning a type to the variable 'x_zi_shape' (line 3223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3223, 8), 'x_zi_shape', list_call_result_279946)
    
    # Assigning a Num to a Subscript (line 3224):
    
    # Assigning a Num to a Subscript (line 3224):
    int_279947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3224, 27), 'int')
    # Getting the type of 'x_zi_shape' (line 3224)
    x_zi_shape_279948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3224, 8), 'x_zi_shape')
    # Getting the type of 'axis' (line 3224)
    axis_279949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3224, 19), 'axis')
    # Storing an element on a container (line 3224)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3224, 8), x_zi_shape_279948, (axis_279949, int_279947))
    
    # Assigning a Call to a Name (line 3225):
    
    # Assigning a Call to a Name (line 3225):
    
    # Call to tuple(...): (line 3225)
    # Processing the call arguments (line 3225)
    
    # Obtaining an instance of the builtin type 'list' (line 3225)
    list_279951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3225, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3225)
    # Adding element type (line 3225)
    # Getting the type of 'n_sections' (line 3225)
    n_sections_279952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 28), 'n_sections', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3225, 27), list_279951, n_sections_279952)
    
    # Getting the type of 'x_zi_shape' (line 3225)
    x_zi_shape_279953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 42), 'x_zi_shape', False)
    # Applying the binary operator '+' (line 3225)
    result_add_279954 = python_operator(stypy.reporting.localization.Localization(__file__, 3225, 27), '+', list_279951, x_zi_shape_279953)
    
    # Processing the call keyword arguments (line 3225)
    kwargs_279955 = {}
    # Getting the type of 'tuple' (line 3225)
    tuple_279950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3225, 21), 'tuple', False)
    # Calling tuple(args, kwargs) (line 3225)
    tuple_call_result_279956 = invoke(stypy.reporting.localization.Localization(__file__, 3225, 21), tuple_279950, *[result_add_279954], **kwargs_279955)
    
    # Assigning a type to the variable 'x_zi_shape' (line 3225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3225, 8), 'x_zi_shape', tuple_call_result_279956)
    
    
    # Getting the type of 'zi' (line 3226)
    zi_279957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3226, 11), 'zi')
    # Obtaining the member 'shape' of a type (line 3226)
    shape_279958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3226, 11), zi_279957, 'shape')
    # Getting the type of 'x_zi_shape' (line 3226)
    x_zi_shape_279959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3226, 23), 'x_zi_shape')
    # Applying the binary operator '!=' (line 3226)
    result_ne_279960 = python_operator(stypy.reporting.localization.Localization(__file__, 3226, 11), '!=', shape_279958, x_zi_shape_279959)
    
    # Testing the type of an if condition (line 3226)
    if_condition_279961 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3226, 8), result_ne_279960)
    # Assigning a type to the variable 'if_condition_279961' (line 3226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3226, 8), 'if_condition_279961', if_condition_279961)
    # SSA begins for if statement (line 3226)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3227)
    # Processing the call arguments (line 3227)
    str_279963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3227, 29), 'str', 'Invalid zi shape. With axis=%r, an input with shape %r, and an sos array with %d sections, zi must have shape %r, got %r.')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3230)
    tuple_279964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3230, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3230)
    # Adding element type (line 3230)
    # Getting the type of 'axis' (line 3230)
    axis_279965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3230, 30), 'axis', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3230, 30), tuple_279964, axis_279965)
    # Adding element type (line 3230)
    # Getting the type of 'x' (line 3230)
    x_279966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3230, 36), 'x', False)
    # Obtaining the member 'shape' of a type (line 3230)
    shape_279967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3230, 36), x_279966, 'shape')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3230, 30), tuple_279964, shape_279967)
    # Adding element type (line 3230)
    # Getting the type of 'n_sections' (line 3230)
    n_sections_279968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3230, 45), 'n_sections', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3230, 30), tuple_279964, n_sections_279968)
    # Adding element type (line 3230)
    # Getting the type of 'x_zi_shape' (line 3230)
    x_zi_shape_279969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3230, 57), 'x_zi_shape', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3230, 30), tuple_279964, x_zi_shape_279969)
    # Adding element type (line 3230)
    # Getting the type of 'zi' (line 3230)
    zi_279970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3230, 69), 'zi', False)
    # Obtaining the member 'shape' of a type (line 3230)
    shape_279971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3230, 69), zi_279970, 'shape')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3230, 30), tuple_279964, shape_279971)
    
    # Applying the binary operator '%' (line 3227)
    result_mod_279972 = python_operator(stypy.reporting.localization.Localization(__file__, 3227, 29), '%', str_279963, tuple_279964)
    
    # Processing the call keyword arguments (line 3227)
    kwargs_279973 = {}
    # Getting the type of 'ValueError' (line 3227)
    ValueError_279962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3227, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3227)
    ValueError_call_result_279974 = invoke(stypy.reporting.localization.Localization(__file__, 3227, 18), ValueError_279962, *[result_mod_279972], **kwargs_279973)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3227, 12), ValueError_call_result_279974, 'raise parameter', BaseException)
    # SSA join for if statement (line 3226)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3231):
    
    # Assigning a Call to a Name (line 3231):
    
    # Call to zeros_like(...): (line 3231)
    # Processing the call arguments (line 3231)
    # Getting the type of 'zi' (line 3231)
    zi_279976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3231, 24), 'zi', False)
    # Processing the call keyword arguments (line 3231)
    kwargs_279977 = {}
    # Getting the type of 'zeros_like' (line 3231)
    zeros_like_279975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3231, 13), 'zeros_like', False)
    # Calling zeros_like(args, kwargs) (line 3231)
    zeros_like_call_result_279978 = invoke(stypy.reporting.localization.Localization(__file__, 3231, 13), zeros_like_279975, *[zi_279976], **kwargs_279977)
    
    # Assigning a type to the variable 'zf' (line 3231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3231, 8), 'zf', zeros_like_call_result_279978)
    # SSA join for if statement (line 3221)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to range(...): (line 3233)
    # Processing the call arguments (line 3233)
    # Getting the type of 'n_sections' (line 3233)
    n_sections_279980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 25), 'n_sections', False)
    # Processing the call keyword arguments (line 3233)
    kwargs_279981 = {}
    # Getting the type of 'range' (line 3233)
    range_279979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 19), 'range', False)
    # Calling range(args, kwargs) (line 3233)
    range_call_result_279982 = invoke(stypy.reporting.localization.Localization(__file__, 3233, 19), range_279979, *[n_sections_279980], **kwargs_279981)
    
    # Testing the type of a for loop iterable (line 3233)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3233, 4), range_call_result_279982)
    # Getting the type of the for loop variable (line 3233)
    for_loop_var_279983 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3233, 4), range_call_result_279982)
    # Assigning a type to the variable 'section' (line 3233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3233, 4), 'section', for_loop_var_279983)
    # SSA begins for a for statement (line 3233)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'use_zi' (line 3234)
    use_zi_279984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3234, 11), 'use_zi')
    # Testing the type of an if condition (line 3234)
    if_condition_279985 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3234, 8), use_zi_279984)
    # Assigning a type to the variable 'if_condition_279985' (line 3234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3234, 8), 'if_condition_279985', if_condition_279985)
    # SSA begins for if statement (line 3234)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 3235):
    
    # Assigning a Subscript to a Name (line 3235):
    
    # Obtaining the type of the subscript
    int_279986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3235, 12), 'int')
    
    # Call to lfilter(...): (line 3235)
    # Processing the call arguments (line 3235)
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 3235)
    section_279988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 41), 'section', False)
    int_279989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3235, 51), 'int')
    slice_279990 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3235, 37), None, int_279989, None)
    # Getting the type of 'sos' (line 3235)
    sos_279991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 37), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 3235)
    getitem___279992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3235, 37), sos_279991, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3235)
    subscript_call_result_279993 = invoke(stypy.reporting.localization.Localization(__file__, 3235, 37), getitem___279992, (section_279988, slice_279990))
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 3235)
    section_279994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 59), 'section', False)
    int_279995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3235, 68), 'int')
    slice_279996 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3235, 55), int_279995, None, None)
    # Getting the type of 'sos' (line 3235)
    sos_279997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 55), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 3235)
    getitem___279998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3235, 55), sos_279997, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3235)
    subscript_call_result_279999 = invoke(stypy.reporting.localization.Localization(__file__, 3235, 55), getitem___279998, (section_279994, slice_279996))
    
    # Getting the type of 'x' (line 3236)
    x_280000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 37), 'x', False)
    # Getting the type of 'axis' (line 3236)
    axis_280001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 40), 'axis', False)
    # Processing the call keyword arguments (line 3235)
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 3236)
    section_280002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 52), 'section', False)
    # Getting the type of 'zi' (line 3236)
    zi_280003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 49), 'zi', False)
    # Obtaining the member '__getitem__' of a type (line 3236)
    getitem___280004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3236, 49), zi_280003, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3236)
    subscript_call_result_280005 = invoke(stypy.reporting.localization.Localization(__file__, 3236, 49), getitem___280004, section_280002)
    
    keyword_280006 = subscript_call_result_280005
    kwargs_280007 = {'zi': keyword_280006}
    # Getting the type of 'lfilter' (line 3235)
    lfilter_279987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 29), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 3235)
    lfilter_call_result_280008 = invoke(stypy.reporting.localization.Localization(__file__, 3235, 29), lfilter_279987, *[subscript_call_result_279993, subscript_call_result_279999, x_280000, axis_280001], **kwargs_280007)
    
    # Obtaining the member '__getitem__' of a type (line 3235)
    getitem___280009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3235, 12), lfilter_call_result_280008, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3235)
    subscript_call_result_280010 = invoke(stypy.reporting.localization.Localization(__file__, 3235, 12), getitem___280009, int_279986)
    
    # Assigning a type to the variable 'tuple_var_assignment_274359' (line 3235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3235, 12), 'tuple_var_assignment_274359', subscript_call_result_280010)
    
    # Assigning a Subscript to a Name (line 3235):
    
    # Obtaining the type of the subscript
    int_280011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3235, 12), 'int')
    
    # Call to lfilter(...): (line 3235)
    # Processing the call arguments (line 3235)
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 3235)
    section_280013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 41), 'section', False)
    int_280014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3235, 51), 'int')
    slice_280015 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3235, 37), None, int_280014, None)
    # Getting the type of 'sos' (line 3235)
    sos_280016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 37), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 3235)
    getitem___280017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3235, 37), sos_280016, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3235)
    subscript_call_result_280018 = invoke(stypy.reporting.localization.Localization(__file__, 3235, 37), getitem___280017, (section_280013, slice_280015))
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 3235)
    section_280019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 59), 'section', False)
    int_280020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3235, 68), 'int')
    slice_280021 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3235, 55), int_280020, None, None)
    # Getting the type of 'sos' (line 3235)
    sos_280022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 55), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 3235)
    getitem___280023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3235, 55), sos_280022, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3235)
    subscript_call_result_280024 = invoke(stypy.reporting.localization.Localization(__file__, 3235, 55), getitem___280023, (section_280019, slice_280021))
    
    # Getting the type of 'x' (line 3236)
    x_280025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 37), 'x', False)
    # Getting the type of 'axis' (line 3236)
    axis_280026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 40), 'axis', False)
    # Processing the call keyword arguments (line 3235)
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 3236)
    section_280027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 52), 'section', False)
    # Getting the type of 'zi' (line 3236)
    zi_280028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3236, 49), 'zi', False)
    # Obtaining the member '__getitem__' of a type (line 3236)
    getitem___280029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3236, 49), zi_280028, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3236)
    subscript_call_result_280030 = invoke(stypy.reporting.localization.Localization(__file__, 3236, 49), getitem___280029, section_280027)
    
    keyword_280031 = subscript_call_result_280030
    kwargs_280032 = {'zi': keyword_280031}
    # Getting the type of 'lfilter' (line 3235)
    lfilter_280012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 29), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 3235)
    lfilter_call_result_280033 = invoke(stypy.reporting.localization.Localization(__file__, 3235, 29), lfilter_280012, *[subscript_call_result_280018, subscript_call_result_280024, x_280025, axis_280026], **kwargs_280032)
    
    # Obtaining the member '__getitem__' of a type (line 3235)
    getitem___280034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3235, 12), lfilter_call_result_280033, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3235)
    subscript_call_result_280035 = invoke(stypy.reporting.localization.Localization(__file__, 3235, 12), getitem___280034, int_280011)
    
    # Assigning a type to the variable 'tuple_var_assignment_274360' (line 3235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3235, 12), 'tuple_var_assignment_274360', subscript_call_result_280035)
    
    # Assigning a Name to a Name (line 3235):
    # Getting the type of 'tuple_var_assignment_274359' (line 3235)
    tuple_var_assignment_274359_280036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 12), 'tuple_var_assignment_274359')
    # Assigning a type to the variable 'x' (line 3235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3235, 12), 'x', tuple_var_assignment_274359_280036)
    
    # Assigning a Name to a Subscript (line 3235):
    # Getting the type of 'tuple_var_assignment_274360' (line 3235)
    tuple_var_assignment_274360_280037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 12), 'tuple_var_assignment_274360')
    # Getting the type of 'zf' (line 3235)
    zf_280038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 15), 'zf')
    # Getting the type of 'section' (line 3235)
    section_280039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 18), 'section')
    # Storing an element on a container (line 3235)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3235, 15), zf_280038, (section_280039, tuple_var_assignment_274360_280037))
    # SSA branch for the else part of an if statement (line 3234)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3238):
    
    # Assigning a Call to a Name (line 3238):
    
    # Call to lfilter(...): (line 3238)
    # Processing the call arguments (line 3238)
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 3238)
    section_280041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3238, 28), 'section', False)
    int_280042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3238, 38), 'int')
    slice_280043 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3238, 24), None, int_280042, None)
    # Getting the type of 'sos' (line 3238)
    sos_280044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3238, 24), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 3238)
    getitem___280045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3238, 24), sos_280044, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3238)
    subscript_call_result_280046 = invoke(stypy.reporting.localization.Localization(__file__, 3238, 24), getitem___280045, (section_280041, slice_280043))
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'section' (line 3238)
    section_280047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3238, 46), 'section', False)
    int_280048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3238, 55), 'int')
    slice_280049 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3238, 42), int_280048, None, None)
    # Getting the type of 'sos' (line 3238)
    sos_280050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3238, 42), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 3238)
    getitem___280051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3238, 42), sos_280050, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3238)
    subscript_call_result_280052 = invoke(stypy.reporting.localization.Localization(__file__, 3238, 42), getitem___280051, (section_280047, slice_280049))
    
    # Getting the type of 'x' (line 3238)
    x_280053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3238, 60), 'x', False)
    # Getting the type of 'axis' (line 3238)
    axis_280054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3238, 63), 'axis', False)
    # Processing the call keyword arguments (line 3238)
    kwargs_280055 = {}
    # Getting the type of 'lfilter' (line 3238)
    lfilter_280040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3238, 16), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 3238)
    lfilter_call_result_280056 = invoke(stypy.reporting.localization.Localization(__file__, 3238, 16), lfilter_280040, *[subscript_call_result_280046, subscript_call_result_280052, x_280053, axis_280054], **kwargs_280055)
    
    # Assigning a type to the variable 'x' (line 3238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3238, 12), 'x', lfilter_call_result_280056)
    # SSA join for if statement (line 3234)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 3239):
    
    # Assigning a IfExp to a Name (line 3239):
    
    # Getting the type of 'use_zi' (line 3239)
    use_zi_280057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 21), 'use_zi')
    # Testing the type of an if expression (line 3239)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3239, 10), use_zi_280057)
    # SSA begins for if expression (line 3239)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3239)
    tuple_280058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3239, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3239)
    # Adding element type (line 3239)
    # Getting the type of 'x' (line 3239)
    x_280059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 11), 'x')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3239, 11), tuple_280058, x_280059)
    # Adding element type (line 3239)
    # Getting the type of 'zf' (line 3239)
    zf_280060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 14), 'zf')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3239, 11), tuple_280058, zf_280060)
    
    # SSA branch for the else part of an if expression (line 3239)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'x' (line 3239)
    x_280061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3239, 33), 'x')
    # SSA join for if expression (line 3239)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_280062 = union_type.UnionType.add(tuple_280058, x_280061)
    
    # Assigning a type to the variable 'out' (line 3239)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3239, 4), 'out', if_exp_280062)
    # Getting the type of 'out' (line 3240)
    out_280063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3240, 11), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 3240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3240, 4), 'stypy_return_type', out_280063)
    
    # ################# End of 'sosfilt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sosfilt' in the type store
    # Getting the type of 'stypy_return_type' (line 3147)
    stypy_return_type_280064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3147, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_280064)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sosfilt'
    return stypy_return_type_280064

# Assigning a type to the variable 'sosfilt' (line 3147)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3147, 0), 'sosfilt', sosfilt)

@norecursion
def sosfiltfilt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_280065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3243, 29), 'int')
    str_280066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3243, 41), 'str', 'odd')
    # Getting the type of 'None' (line 3243)
    None_280067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3243, 55), 'None')
    defaults = [int_280065, str_280066, None_280067]
    # Create a new context for function 'sosfiltfilt'
    module_type_store = module_type_store.open_function_context('sosfiltfilt', 3243, 0, False)
    
    # Passed parameters checking function
    sosfiltfilt.stypy_localization = localization
    sosfiltfilt.stypy_type_of_self = None
    sosfiltfilt.stypy_type_store = module_type_store
    sosfiltfilt.stypy_function_name = 'sosfiltfilt'
    sosfiltfilt.stypy_param_names_list = ['sos', 'x', 'axis', 'padtype', 'padlen']
    sosfiltfilt.stypy_varargs_param_name = None
    sosfiltfilt.stypy_kwargs_param_name = None
    sosfiltfilt.stypy_call_defaults = defaults
    sosfiltfilt.stypy_call_varargs = varargs
    sosfiltfilt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sosfiltfilt', ['sos', 'x', 'axis', 'padtype', 'padlen'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sosfiltfilt', localization, ['sos', 'x', 'axis', 'padtype', 'padlen'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sosfiltfilt(...)' code ##################

    str_280068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3330, (-1)), 'str', "\n    A forward-backward digital filter using cascaded second-order sections.\n\n    See `filtfilt` for more complete information about this method.\n\n    Parameters\n    ----------\n    sos : array_like\n        Array of second-order filter coefficients, must have shape\n        ``(n_sections, 6)``. Each row corresponds to a second-order\n        section, with the first three columns providing the numerator\n        coefficients and the last three providing the denominator\n        coefficients.\n    x : array_like\n        The array of data to be filtered.\n    axis : int, optional\n        The axis of `x` to which the filter is applied.\n        Default is -1.\n    padtype : str or None, optional\n        Must be 'odd', 'even', 'constant', or None.  This determines the\n        type of extension to use for the padded signal to which the filter\n        is applied.  If `padtype` is None, no padding is used.  The default\n        is 'odd'.\n    padlen : int or None, optional\n        The number of elements by which to extend `x` at both ends of\n        `axis` before applying the filter.  This value must be less than\n        ``x.shape[axis] - 1``.  ``padlen=0`` implies no padding.\n        The default value is::\n\n            3 * (2 * len(sos) + 1 - min((sos[:, 2] == 0).sum(),\n                                        (sos[:, 5] == 0).sum()))\n\n        The extra subtraction at the end attempts to compensate for poles\n        and zeros at the origin (e.g. for odd-order filters) to yield\n        equivalent estimates of `padlen` to those of `filtfilt` for\n        second-order section filters built with `scipy.signal` functions.\n\n    Returns\n    -------\n    y : ndarray\n        The filtered output with the same shape as `x`.\n\n    See Also\n    --------\n    filtfilt, sosfilt, sosfilt_zi, sosfreqz\n\n    Notes\n    -----\n    .. versionadded:: 0.18.0\n\n    Examples\n    --------\n    >>> from scipy.signal import sosfiltfilt, butter\n    >>> import matplotlib.pyplot as plt\n\n    Create an interesting signal to filter.\n\n    >>> n = 201\n    >>> t = np.linspace(0, 1, n)\n    >>> np.random.seed(123)\n    >>> x = 1 + (t < 0.5) - 0.25*t**2 + 0.05*np.random.randn(n)\n\n    Create a lowpass Butterworth filter, and use it to filter `x`.\n\n    >>> sos = butter(4, 0.125, output='sos')\n    >>> y = sosfiltfilt(sos, x)\n\n    For comparison, apply an 8th order filter using `sosfilt`.  The filter\n    is initialized using the mean of the first four values of `x`.\n\n    >>> from scipy.signal import sosfilt, sosfilt_zi\n    >>> sos8 = butter(8, 0.125, output='sos')\n    >>> zi = x[:4].mean() * sosfilt_zi(sos8)\n    >>> y2, zo = sosfilt(sos8, x, zi=zi)\n\n    Plot the results.  Note that the phase of `y` matches the input, while\n    `y2` has a significant phase delay.\n\n    >>> plt.plot(t, x, alpha=0.5, label='x(t)')\n    >>> plt.plot(t, y, label='y(t)')\n    >>> plt.plot(t, y2, label='y2(t)')\n    >>> plt.legend(framealpha=1, shadow=True)\n    >>> plt.grid(alpha=0.25)\n    >>> plt.xlabel('t')\n    >>> plt.show()\n\n    ")
    
    # Assigning a Call to a Tuple (line 3331):
    
    # Assigning a Subscript to a Name (line 3331):
    
    # Obtaining the type of the subscript
    int_280069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3331, 4), 'int')
    
    # Call to _validate_sos(...): (line 3331)
    # Processing the call arguments (line 3331)
    # Getting the type of 'sos' (line 3331)
    sos_280071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 36), 'sos', False)
    # Processing the call keyword arguments (line 3331)
    kwargs_280072 = {}
    # Getting the type of '_validate_sos' (line 3331)
    _validate_sos_280070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 22), '_validate_sos', False)
    # Calling _validate_sos(args, kwargs) (line 3331)
    _validate_sos_call_result_280073 = invoke(stypy.reporting.localization.Localization(__file__, 3331, 22), _validate_sos_280070, *[sos_280071], **kwargs_280072)
    
    # Obtaining the member '__getitem__' of a type (line 3331)
    getitem___280074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3331, 4), _validate_sos_call_result_280073, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3331)
    subscript_call_result_280075 = invoke(stypy.reporting.localization.Localization(__file__, 3331, 4), getitem___280074, int_280069)
    
    # Assigning a type to the variable 'tuple_var_assignment_274361' (line 3331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3331, 4), 'tuple_var_assignment_274361', subscript_call_result_280075)
    
    # Assigning a Subscript to a Name (line 3331):
    
    # Obtaining the type of the subscript
    int_280076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3331, 4), 'int')
    
    # Call to _validate_sos(...): (line 3331)
    # Processing the call arguments (line 3331)
    # Getting the type of 'sos' (line 3331)
    sos_280078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 36), 'sos', False)
    # Processing the call keyword arguments (line 3331)
    kwargs_280079 = {}
    # Getting the type of '_validate_sos' (line 3331)
    _validate_sos_280077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 22), '_validate_sos', False)
    # Calling _validate_sos(args, kwargs) (line 3331)
    _validate_sos_call_result_280080 = invoke(stypy.reporting.localization.Localization(__file__, 3331, 22), _validate_sos_280077, *[sos_280078], **kwargs_280079)
    
    # Obtaining the member '__getitem__' of a type (line 3331)
    getitem___280081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3331, 4), _validate_sos_call_result_280080, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3331)
    subscript_call_result_280082 = invoke(stypy.reporting.localization.Localization(__file__, 3331, 4), getitem___280081, int_280076)
    
    # Assigning a type to the variable 'tuple_var_assignment_274362' (line 3331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3331, 4), 'tuple_var_assignment_274362', subscript_call_result_280082)
    
    # Assigning a Name to a Name (line 3331):
    # Getting the type of 'tuple_var_assignment_274361' (line 3331)
    tuple_var_assignment_274361_280083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 4), 'tuple_var_assignment_274361')
    # Assigning a type to the variable 'sos' (line 3331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3331, 4), 'sos', tuple_var_assignment_274361_280083)
    
    # Assigning a Name to a Name (line 3331):
    # Getting the type of 'tuple_var_assignment_274362' (line 3331)
    tuple_var_assignment_274362_280084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 4), 'tuple_var_assignment_274362')
    # Assigning a type to the variable 'n_sections' (line 3331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3331, 9), 'n_sections', tuple_var_assignment_274362_280084)
    
    # Assigning a BinOp to a Name (line 3334):
    
    # Assigning a BinOp to a Name (line 3334):
    int_280085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3334, 12), 'int')
    # Getting the type of 'n_sections' (line 3334)
    n_sections_280086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3334, 16), 'n_sections')
    # Applying the binary operator '*' (line 3334)
    result_mul_280087 = python_operator(stypy.reporting.localization.Localization(__file__, 3334, 12), '*', int_280085, n_sections_280086)
    
    int_280088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3334, 29), 'int')
    # Applying the binary operator '+' (line 3334)
    result_add_280089 = python_operator(stypy.reporting.localization.Localization(__file__, 3334, 12), '+', result_mul_280087, int_280088)
    
    # Assigning a type to the variable 'ntaps' (line 3334)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3334, 4), 'ntaps', result_add_280089)
    
    # Getting the type of 'ntaps' (line 3335)
    ntaps_280090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3335, 4), 'ntaps')
    
    # Call to min(...): (line 3335)
    # Processing the call arguments (line 3335)
    
    # Call to sum(...): (line 3335)
    # Processing the call keyword arguments (line 3335)
    kwargs_280100 = {}
    
    
    # Obtaining the type of the subscript
    slice_280092 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3335, 18), None, None, None)
    int_280093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3335, 25), 'int')
    # Getting the type of 'sos' (line 3335)
    sos_280094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3335, 18), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 3335)
    getitem___280095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3335, 18), sos_280094, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3335)
    subscript_call_result_280096 = invoke(stypy.reporting.localization.Localization(__file__, 3335, 18), getitem___280095, (slice_280092, int_280093))
    
    int_280097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3335, 31), 'int')
    # Applying the binary operator '==' (line 3335)
    result_eq_280098 = python_operator(stypy.reporting.localization.Localization(__file__, 3335, 18), '==', subscript_call_result_280096, int_280097)
    
    # Obtaining the member 'sum' of a type (line 3335)
    sum_280099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3335, 18), result_eq_280098, 'sum')
    # Calling sum(args, kwargs) (line 3335)
    sum_call_result_280101 = invoke(stypy.reporting.localization.Localization(__file__, 3335, 18), sum_280099, *[], **kwargs_280100)
    
    
    # Call to sum(...): (line 3335)
    # Processing the call keyword arguments (line 3335)
    kwargs_280110 = {}
    
    
    # Obtaining the type of the subscript
    slice_280102 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3335, 42), None, None, None)
    int_280103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3335, 49), 'int')
    # Getting the type of 'sos' (line 3335)
    sos_280104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3335, 42), 'sos', False)
    # Obtaining the member '__getitem__' of a type (line 3335)
    getitem___280105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3335, 42), sos_280104, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3335)
    subscript_call_result_280106 = invoke(stypy.reporting.localization.Localization(__file__, 3335, 42), getitem___280105, (slice_280102, int_280103))
    
    int_280107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3335, 55), 'int')
    # Applying the binary operator '==' (line 3335)
    result_eq_280108 = python_operator(stypy.reporting.localization.Localization(__file__, 3335, 42), '==', subscript_call_result_280106, int_280107)
    
    # Obtaining the member 'sum' of a type (line 3335)
    sum_280109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3335, 42), result_eq_280108, 'sum')
    # Calling sum(args, kwargs) (line 3335)
    sum_call_result_280111 = invoke(stypy.reporting.localization.Localization(__file__, 3335, 42), sum_280109, *[], **kwargs_280110)
    
    # Processing the call keyword arguments (line 3335)
    kwargs_280112 = {}
    # Getting the type of 'min' (line 3335)
    min_280091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3335, 13), 'min', False)
    # Calling min(args, kwargs) (line 3335)
    min_call_result_280113 = invoke(stypy.reporting.localization.Localization(__file__, 3335, 13), min_280091, *[sum_call_result_280101, sum_call_result_280111], **kwargs_280112)
    
    # Applying the binary operator '-=' (line 3335)
    result_isub_280114 = python_operator(stypy.reporting.localization.Localization(__file__, 3335, 4), '-=', ntaps_280090, min_call_result_280113)
    # Assigning a type to the variable 'ntaps' (line 3335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3335, 4), 'ntaps', result_isub_280114)
    
    
    # Assigning a Call to a Tuple (line 3336):
    
    # Assigning a Subscript to a Name (line 3336):
    
    # Obtaining the type of the subscript
    int_280115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3336, 4), 'int')
    
    # Call to _validate_pad(...): (line 3336)
    # Processing the call arguments (line 3336)
    # Getting the type of 'padtype' (line 3336)
    padtype_280117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 30), 'padtype', False)
    # Getting the type of 'padlen' (line 3336)
    padlen_280118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 39), 'padlen', False)
    # Getting the type of 'x' (line 3336)
    x_280119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 47), 'x', False)
    # Getting the type of 'axis' (line 3336)
    axis_280120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 50), 'axis', False)
    # Processing the call keyword arguments (line 3336)
    # Getting the type of 'ntaps' (line 3337)
    ntaps_280121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 36), 'ntaps', False)
    keyword_280122 = ntaps_280121
    kwargs_280123 = {'ntaps': keyword_280122}
    # Getting the type of '_validate_pad' (line 3336)
    _validate_pad_280116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 16), '_validate_pad', False)
    # Calling _validate_pad(args, kwargs) (line 3336)
    _validate_pad_call_result_280124 = invoke(stypy.reporting.localization.Localization(__file__, 3336, 16), _validate_pad_280116, *[padtype_280117, padlen_280118, x_280119, axis_280120], **kwargs_280123)
    
    # Obtaining the member '__getitem__' of a type (line 3336)
    getitem___280125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3336, 4), _validate_pad_call_result_280124, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3336)
    subscript_call_result_280126 = invoke(stypy.reporting.localization.Localization(__file__, 3336, 4), getitem___280125, int_280115)
    
    # Assigning a type to the variable 'tuple_var_assignment_274363' (line 3336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3336, 4), 'tuple_var_assignment_274363', subscript_call_result_280126)
    
    # Assigning a Subscript to a Name (line 3336):
    
    # Obtaining the type of the subscript
    int_280127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3336, 4), 'int')
    
    # Call to _validate_pad(...): (line 3336)
    # Processing the call arguments (line 3336)
    # Getting the type of 'padtype' (line 3336)
    padtype_280129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 30), 'padtype', False)
    # Getting the type of 'padlen' (line 3336)
    padlen_280130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 39), 'padlen', False)
    # Getting the type of 'x' (line 3336)
    x_280131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 47), 'x', False)
    # Getting the type of 'axis' (line 3336)
    axis_280132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 50), 'axis', False)
    # Processing the call keyword arguments (line 3336)
    # Getting the type of 'ntaps' (line 3337)
    ntaps_280133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3337, 36), 'ntaps', False)
    keyword_280134 = ntaps_280133
    kwargs_280135 = {'ntaps': keyword_280134}
    # Getting the type of '_validate_pad' (line 3336)
    _validate_pad_280128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 16), '_validate_pad', False)
    # Calling _validate_pad(args, kwargs) (line 3336)
    _validate_pad_call_result_280136 = invoke(stypy.reporting.localization.Localization(__file__, 3336, 16), _validate_pad_280128, *[padtype_280129, padlen_280130, x_280131, axis_280132], **kwargs_280135)
    
    # Obtaining the member '__getitem__' of a type (line 3336)
    getitem___280137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3336, 4), _validate_pad_call_result_280136, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3336)
    subscript_call_result_280138 = invoke(stypy.reporting.localization.Localization(__file__, 3336, 4), getitem___280137, int_280127)
    
    # Assigning a type to the variable 'tuple_var_assignment_274364' (line 3336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3336, 4), 'tuple_var_assignment_274364', subscript_call_result_280138)
    
    # Assigning a Name to a Name (line 3336):
    # Getting the type of 'tuple_var_assignment_274363' (line 3336)
    tuple_var_assignment_274363_280139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 4), 'tuple_var_assignment_274363')
    # Assigning a type to the variable 'edge' (line 3336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3336, 4), 'edge', tuple_var_assignment_274363_280139)
    
    # Assigning a Name to a Name (line 3336):
    # Getting the type of 'tuple_var_assignment_274364' (line 3336)
    tuple_var_assignment_274364_280140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3336, 4), 'tuple_var_assignment_274364')
    # Assigning a type to the variable 'ext' (line 3336)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3336, 10), 'ext', tuple_var_assignment_274364_280140)
    
    # Assigning a Call to a Name (line 3340):
    
    # Assigning a Call to a Name (line 3340):
    
    # Call to sosfilt_zi(...): (line 3340)
    # Processing the call arguments (line 3340)
    # Getting the type of 'sos' (line 3340)
    sos_280142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 20), 'sos', False)
    # Processing the call keyword arguments (line 3340)
    kwargs_280143 = {}
    # Getting the type of 'sosfilt_zi' (line 3340)
    sosfilt_zi_280141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 9), 'sosfilt_zi', False)
    # Calling sosfilt_zi(args, kwargs) (line 3340)
    sosfilt_zi_call_result_280144 = invoke(stypy.reporting.localization.Localization(__file__, 3340, 9), sosfilt_zi_280141, *[sos_280142], **kwargs_280143)
    
    # Assigning a type to the variable 'zi' (line 3340)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3340, 4), 'zi', sosfilt_zi_call_result_280144)
    
    # Assigning a BinOp to a Name (line 3341):
    
    # Assigning a BinOp to a Name (line 3341):
    
    # Obtaining an instance of the builtin type 'list' (line 3341)
    list_280145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3341, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3341)
    # Adding element type (line 3341)
    int_280146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3341, 16), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3341, 15), list_280145, int_280146)
    
    # Getting the type of 'x' (line 3341)
    x_280147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3341, 21), 'x')
    # Obtaining the member 'ndim' of a type (line 3341)
    ndim_280148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3341, 21), x_280147, 'ndim')
    # Applying the binary operator '*' (line 3341)
    result_mul_280149 = python_operator(stypy.reporting.localization.Localization(__file__, 3341, 15), '*', list_280145, ndim_280148)
    
    # Assigning a type to the variable 'zi_shape' (line 3341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3341, 4), 'zi_shape', result_mul_280149)
    
    # Assigning a Num to a Subscript (line 3342):
    
    # Assigning a Num to a Subscript (line 3342):
    int_280150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3342, 21), 'int')
    # Getting the type of 'zi_shape' (line 3342)
    zi_shape_280151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 4), 'zi_shape')
    # Getting the type of 'axis' (line 3342)
    axis_280152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 13), 'axis')
    # Storing an element on a container (line 3342)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3342, 4), zi_shape_280151, (axis_280152, int_280150))
    
    # Assigning a BinOp to a Attribute (line 3343):
    
    # Assigning a BinOp to a Attribute (line 3343):
    
    # Obtaining an instance of the builtin type 'list' (line 3343)
    list_280153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3343, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3343)
    # Adding element type (line 3343)
    # Getting the type of 'n_sections' (line 3343)
    n_sections_280154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3343, 16), 'n_sections')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3343, 15), list_280153, n_sections_280154)
    
    # Getting the type of 'zi_shape' (line 3343)
    zi_shape_280155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3343, 30), 'zi_shape')
    # Applying the binary operator '+' (line 3343)
    result_add_280156 = python_operator(stypy.reporting.localization.Localization(__file__, 3343, 15), '+', list_280153, zi_shape_280155)
    
    # Getting the type of 'zi' (line 3343)
    zi_280157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3343, 4), 'zi')
    # Setting the type of the member 'shape' of a type (line 3343)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3343, 4), zi_280157, 'shape', result_add_280156)
    
    # Assigning a Call to a Name (line 3344):
    
    # Assigning a Call to a Name (line 3344):
    
    # Call to axis_slice(...): (line 3344)
    # Processing the call arguments (line 3344)
    # Getting the type of 'ext' (line 3344)
    ext_280159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3344, 21), 'ext', False)
    # Processing the call keyword arguments (line 3344)
    int_280160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3344, 31), 'int')
    keyword_280161 = int_280160
    # Getting the type of 'axis' (line 3344)
    axis_280162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3344, 39), 'axis', False)
    keyword_280163 = axis_280162
    kwargs_280164 = {'stop': keyword_280161, 'axis': keyword_280163}
    # Getting the type of 'axis_slice' (line 3344)
    axis_slice_280158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3344, 10), 'axis_slice', False)
    # Calling axis_slice(args, kwargs) (line 3344)
    axis_slice_call_result_280165 = invoke(stypy.reporting.localization.Localization(__file__, 3344, 10), axis_slice_280158, *[ext_280159], **kwargs_280164)
    
    # Assigning a type to the variable 'x_0' (line 3344)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3344, 4), 'x_0', axis_slice_call_result_280165)
    
    # Assigning a Call to a Tuple (line 3345):
    
    # Assigning a Subscript to a Name (line 3345):
    
    # Obtaining the type of the subscript
    int_280166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3345, 4), 'int')
    
    # Call to sosfilt(...): (line 3345)
    # Processing the call arguments (line 3345)
    # Getting the type of 'sos' (line 3345)
    sos_280168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 22), 'sos', False)
    # Getting the type of 'ext' (line 3345)
    ext_280169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 27), 'ext', False)
    # Processing the call keyword arguments (line 3345)
    # Getting the type of 'axis' (line 3345)
    axis_280170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 37), 'axis', False)
    keyword_280171 = axis_280170
    # Getting the type of 'zi' (line 3345)
    zi_280172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 46), 'zi', False)
    # Getting the type of 'x_0' (line 3345)
    x_0_280173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 51), 'x_0', False)
    # Applying the binary operator '*' (line 3345)
    result_mul_280174 = python_operator(stypy.reporting.localization.Localization(__file__, 3345, 46), '*', zi_280172, x_0_280173)
    
    keyword_280175 = result_mul_280174
    kwargs_280176 = {'zi': keyword_280175, 'axis': keyword_280171}
    # Getting the type of 'sosfilt' (line 3345)
    sosfilt_280167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 14), 'sosfilt', False)
    # Calling sosfilt(args, kwargs) (line 3345)
    sosfilt_call_result_280177 = invoke(stypy.reporting.localization.Localization(__file__, 3345, 14), sosfilt_280167, *[sos_280168, ext_280169], **kwargs_280176)
    
    # Obtaining the member '__getitem__' of a type (line 3345)
    getitem___280178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3345, 4), sosfilt_call_result_280177, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3345)
    subscript_call_result_280179 = invoke(stypy.reporting.localization.Localization(__file__, 3345, 4), getitem___280178, int_280166)
    
    # Assigning a type to the variable 'tuple_var_assignment_274365' (line 3345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3345, 4), 'tuple_var_assignment_274365', subscript_call_result_280179)
    
    # Assigning a Subscript to a Name (line 3345):
    
    # Obtaining the type of the subscript
    int_280180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3345, 4), 'int')
    
    # Call to sosfilt(...): (line 3345)
    # Processing the call arguments (line 3345)
    # Getting the type of 'sos' (line 3345)
    sos_280182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 22), 'sos', False)
    # Getting the type of 'ext' (line 3345)
    ext_280183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 27), 'ext', False)
    # Processing the call keyword arguments (line 3345)
    # Getting the type of 'axis' (line 3345)
    axis_280184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 37), 'axis', False)
    keyword_280185 = axis_280184
    # Getting the type of 'zi' (line 3345)
    zi_280186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 46), 'zi', False)
    # Getting the type of 'x_0' (line 3345)
    x_0_280187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 51), 'x_0', False)
    # Applying the binary operator '*' (line 3345)
    result_mul_280188 = python_operator(stypy.reporting.localization.Localization(__file__, 3345, 46), '*', zi_280186, x_0_280187)
    
    keyword_280189 = result_mul_280188
    kwargs_280190 = {'zi': keyword_280189, 'axis': keyword_280185}
    # Getting the type of 'sosfilt' (line 3345)
    sosfilt_280181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 14), 'sosfilt', False)
    # Calling sosfilt(args, kwargs) (line 3345)
    sosfilt_call_result_280191 = invoke(stypy.reporting.localization.Localization(__file__, 3345, 14), sosfilt_280181, *[sos_280182, ext_280183], **kwargs_280190)
    
    # Obtaining the member '__getitem__' of a type (line 3345)
    getitem___280192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3345, 4), sosfilt_call_result_280191, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3345)
    subscript_call_result_280193 = invoke(stypy.reporting.localization.Localization(__file__, 3345, 4), getitem___280192, int_280180)
    
    # Assigning a type to the variable 'tuple_var_assignment_274366' (line 3345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3345, 4), 'tuple_var_assignment_274366', subscript_call_result_280193)
    
    # Assigning a Name to a Name (line 3345):
    # Getting the type of 'tuple_var_assignment_274365' (line 3345)
    tuple_var_assignment_274365_280194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 4), 'tuple_var_assignment_274365')
    # Assigning a type to the variable 'y' (line 3345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3345, 5), 'y', tuple_var_assignment_274365_280194)
    
    # Assigning a Name to a Name (line 3345):
    # Getting the type of 'tuple_var_assignment_274366' (line 3345)
    tuple_var_assignment_274366_280195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3345, 4), 'tuple_var_assignment_274366')
    # Assigning a type to the variable 'zf' (line 3345)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3345, 8), 'zf', tuple_var_assignment_274366_280195)
    
    # Assigning a Call to a Name (line 3346):
    
    # Assigning a Call to a Name (line 3346):
    
    # Call to axis_slice(...): (line 3346)
    # Processing the call arguments (line 3346)
    # Getting the type of 'y' (line 3346)
    y_280197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3346, 21), 'y', False)
    # Processing the call keyword arguments (line 3346)
    int_280198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3346, 30), 'int')
    keyword_280199 = int_280198
    # Getting the type of 'axis' (line 3346)
    axis_280200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3346, 39), 'axis', False)
    keyword_280201 = axis_280200
    kwargs_280202 = {'start': keyword_280199, 'axis': keyword_280201}
    # Getting the type of 'axis_slice' (line 3346)
    axis_slice_280196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3346, 10), 'axis_slice', False)
    # Calling axis_slice(args, kwargs) (line 3346)
    axis_slice_call_result_280203 = invoke(stypy.reporting.localization.Localization(__file__, 3346, 10), axis_slice_280196, *[y_280197], **kwargs_280202)
    
    # Assigning a type to the variable 'y_0' (line 3346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3346, 4), 'y_0', axis_slice_call_result_280203)
    
    # Assigning a Call to a Tuple (line 3347):
    
    # Assigning a Subscript to a Name (line 3347):
    
    # Obtaining the type of the subscript
    int_280204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3347, 4), 'int')
    
    # Call to sosfilt(...): (line 3347)
    # Processing the call arguments (line 3347)
    # Getting the type of 'sos' (line 3347)
    sos_280206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 22), 'sos', False)
    
    # Call to axis_reverse(...): (line 3347)
    # Processing the call arguments (line 3347)
    # Getting the type of 'y' (line 3347)
    y_280208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 40), 'y', False)
    # Processing the call keyword arguments (line 3347)
    # Getting the type of 'axis' (line 3347)
    axis_280209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 48), 'axis', False)
    keyword_280210 = axis_280209
    kwargs_280211 = {'axis': keyword_280210}
    # Getting the type of 'axis_reverse' (line 3347)
    axis_reverse_280207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 27), 'axis_reverse', False)
    # Calling axis_reverse(args, kwargs) (line 3347)
    axis_reverse_call_result_280212 = invoke(stypy.reporting.localization.Localization(__file__, 3347, 27), axis_reverse_280207, *[y_280208], **kwargs_280211)
    
    # Processing the call keyword arguments (line 3347)
    # Getting the type of 'axis' (line 3347)
    axis_280213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 60), 'axis', False)
    keyword_280214 = axis_280213
    # Getting the type of 'zi' (line 3347)
    zi_280215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 69), 'zi', False)
    # Getting the type of 'y_0' (line 3347)
    y_0_280216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 74), 'y_0', False)
    # Applying the binary operator '*' (line 3347)
    result_mul_280217 = python_operator(stypy.reporting.localization.Localization(__file__, 3347, 69), '*', zi_280215, y_0_280216)
    
    keyword_280218 = result_mul_280217
    kwargs_280219 = {'zi': keyword_280218, 'axis': keyword_280214}
    # Getting the type of 'sosfilt' (line 3347)
    sosfilt_280205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 14), 'sosfilt', False)
    # Calling sosfilt(args, kwargs) (line 3347)
    sosfilt_call_result_280220 = invoke(stypy.reporting.localization.Localization(__file__, 3347, 14), sosfilt_280205, *[sos_280206, axis_reverse_call_result_280212], **kwargs_280219)
    
    # Obtaining the member '__getitem__' of a type (line 3347)
    getitem___280221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3347, 4), sosfilt_call_result_280220, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3347)
    subscript_call_result_280222 = invoke(stypy.reporting.localization.Localization(__file__, 3347, 4), getitem___280221, int_280204)
    
    # Assigning a type to the variable 'tuple_var_assignment_274367' (line 3347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3347, 4), 'tuple_var_assignment_274367', subscript_call_result_280222)
    
    # Assigning a Subscript to a Name (line 3347):
    
    # Obtaining the type of the subscript
    int_280223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3347, 4), 'int')
    
    # Call to sosfilt(...): (line 3347)
    # Processing the call arguments (line 3347)
    # Getting the type of 'sos' (line 3347)
    sos_280225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 22), 'sos', False)
    
    # Call to axis_reverse(...): (line 3347)
    # Processing the call arguments (line 3347)
    # Getting the type of 'y' (line 3347)
    y_280227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 40), 'y', False)
    # Processing the call keyword arguments (line 3347)
    # Getting the type of 'axis' (line 3347)
    axis_280228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 48), 'axis', False)
    keyword_280229 = axis_280228
    kwargs_280230 = {'axis': keyword_280229}
    # Getting the type of 'axis_reverse' (line 3347)
    axis_reverse_280226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 27), 'axis_reverse', False)
    # Calling axis_reverse(args, kwargs) (line 3347)
    axis_reverse_call_result_280231 = invoke(stypy.reporting.localization.Localization(__file__, 3347, 27), axis_reverse_280226, *[y_280227], **kwargs_280230)
    
    # Processing the call keyword arguments (line 3347)
    # Getting the type of 'axis' (line 3347)
    axis_280232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 60), 'axis', False)
    keyword_280233 = axis_280232
    # Getting the type of 'zi' (line 3347)
    zi_280234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 69), 'zi', False)
    # Getting the type of 'y_0' (line 3347)
    y_0_280235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 74), 'y_0', False)
    # Applying the binary operator '*' (line 3347)
    result_mul_280236 = python_operator(stypy.reporting.localization.Localization(__file__, 3347, 69), '*', zi_280234, y_0_280235)
    
    keyword_280237 = result_mul_280236
    kwargs_280238 = {'zi': keyword_280237, 'axis': keyword_280233}
    # Getting the type of 'sosfilt' (line 3347)
    sosfilt_280224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 14), 'sosfilt', False)
    # Calling sosfilt(args, kwargs) (line 3347)
    sosfilt_call_result_280239 = invoke(stypy.reporting.localization.Localization(__file__, 3347, 14), sosfilt_280224, *[sos_280225, axis_reverse_call_result_280231], **kwargs_280238)
    
    # Obtaining the member '__getitem__' of a type (line 3347)
    getitem___280240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3347, 4), sosfilt_call_result_280239, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3347)
    subscript_call_result_280241 = invoke(stypy.reporting.localization.Localization(__file__, 3347, 4), getitem___280240, int_280223)
    
    # Assigning a type to the variable 'tuple_var_assignment_274368' (line 3347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3347, 4), 'tuple_var_assignment_274368', subscript_call_result_280241)
    
    # Assigning a Name to a Name (line 3347):
    # Getting the type of 'tuple_var_assignment_274367' (line 3347)
    tuple_var_assignment_274367_280242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 4), 'tuple_var_assignment_274367')
    # Assigning a type to the variable 'y' (line 3347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3347, 5), 'y', tuple_var_assignment_274367_280242)
    
    # Assigning a Name to a Name (line 3347):
    # Getting the type of 'tuple_var_assignment_274368' (line 3347)
    tuple_var_assignment_274368_280243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3347, 4), 'tuple_var_assignment_274368')
    # Assigning a type to the variable 'zf' (line 3347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3347, 8), 'zf', tuple_var_assignment_274368_280243)
    
    # Assigning a Call to a Name (line 3348):
    
    # Assigning a Call to a Name (line 3348):
    
    # Call to axis_reverse(...): (line 3348)
    # Processing the call arguments (line 3348)
    # Getting the type of 'y' (line 3348)
    y_280245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3348, 21), 'y', False)
    # Processing the call keyword arguments (line 3348)
    # Getting the type of 'axis' (line 3348)
    axis_280246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3348, 29), 'axis', False)
    keyword_280247 = axis_280246
    kwargs_280248 = {'axis': keyword_280247}
    # Getting the type of 'axis_reverse' (line 3348)
    axis_reverse_280244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3348, 8), 'axis_reverse', False)
    # Calling axis_reverse(args, kwargs) (line 3348)
    axis_reverse_call_result_280249 = invoke(stypy.reporting.localization.Localization(__file__, 3348, 8), axis_reverse_280244, *[y_280245], **kwargs_280248)
    
    # Assigning a type to the variable 'y' (line 3348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3348, 4), 'y', axis_reverse_call_result_280249)
    
    
    # Getting the type of 'edge' (line 3349)
    edge_280250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3349, 7), 'edge')
    int_280251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3349, 14), 'int')
    # Applying the binary operator '>' (line 3349)
    result_gt_280252 = python_operator(stypy.reporting.localization.Localization(__file__, 3349, 7), '>', edge_280250, int_280251)
    
    # Testing the type of an if condition (line 3349)
    if_condition_280253 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3349, 4), result_gt_280252)
    # Assigning a type to the variable 'if_condition_280253' (line 3349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3349, 4), 'if_condition_280253', if_condition_280253)
    # SSA begins for if statement (line 3349)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3350):
    
    # Assigning a Call to a Name (line 3350):
    
    # Call to axis_slice(...): (line 3350)
    # Processing the call arguments (line 3350)
    # Getting the type of 'y' (line 3350)
    y_280255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 23), 'y', False)
    # Processing the call keyword arguments (line 3350)
    # Getting the type of 'edge' (line 3350)
    edge_280256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 32), 'edge', False)
    keyword_280257 = edge_280256
    
    # Getting the type of 'edge' (line 3350)
    edge_280258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 44), 'edge', False)
    # Applying the 'usub' unary operator (line 3350)
    result___neg___280259 = python_operator(stypy.reporting.localization.Localization(__file__, 3350, 43), 'usub', edge_280258)
    
    keyword_280260 = result___neg___280259
    # Getting the type of 'axis' (line 3350)
    axis_280261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 55), 'axis', False)
    keyword_280262 = axis_280261
    kwargs_280263 = {'start': keyword_280257, 'stop': keyword_280260, 'axis': keyword_280262}
    # Getting the type of 'axis_slice' (line 3350)
    axis_slice_280254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3350, 12), 'axis_slice', False)
    # Calling axis_slice(args, kwargs) (line 3350)
    axis_slice_call_result_280264 = invoke(stypy.reporting.localization.Localization(__file__, 3350, 12), axis_slice_280254, *[y_280255], **kwargs_280263)
    
    # Assigning a type to the variable 'y' (line 3350)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3350, 8), 'y', axis_slice_call_result_280264)
    # SSA join for if statement (line 3349)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'y' (line 3351)
    y_280265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3351, 11), 'y')
    # Assigning a type to the variable 'stypy_return_type' (line 3351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3351, 4), 'stypy_return_type', y_280265)
    
    # ################# End of 'sosfiltfilt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sosfiltfilt' in the type store
    # Getting the type of 'stypy_return_type' (line 3243)
    stypy_return_type_280266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3243, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_280266)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sosfiltfilt'
    return stypy_return_type_280266

# Assigning a type to the variable 'sosfiltfilt' (line 3243)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3243, 0), 'sosfiltfilt', sosfiltfilt)

@norecursion
def decimate(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3354)
    None_280267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 21), 'None')
    str_280268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3354, 33), 'str', 'iir')
    int_280269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3354, 45), 'int')
    # Getting the type of 'True' (line 3354)
    True_280270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 60), 'True')
    defaults = [None_280267, str_280268, int_280269, True_280270]
    # Create a new context for function 'decimate'
    module_type_store = module_type_store.open_function_context('decimate', 3354, 0, False)
    
    # Passed parameters checking function
    decimate.stypy_localization = localization
    decimate.stypy_type_of_self = None
    decimate.stypy_type_store = module_type_store
    decimate.stypy_function_name = 'decimate'
    decimate.stypy_param_names_list = ['x', 'q', 'n', 'ftype', 'axis', 'zero_phase']
    decimate.stypy_varargs_param_name = None
    decimate.stypy_kwargs_param_name = None
    decimate.stypy_call_defaults = defaults
    decimate.stypy_call_varargs = varargs
    decimate.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'decimate', ['x', 'q', 'n', 'ftype', 'axis', 'zero_phase'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'decimate', localization, ['x', 'q', 'n', 'ftype', 'axis', 'zero_phase'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'decimate(...)' code ##################

    str_280271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3400, (-1)), 'str', "\n    Downsample the signal after applying an anti-aliasing filter.\n\n    By default, an order 8 Chebyshev type I filter is used. A 30 point FIR\n    filter with Hamming window is used if `ftype` is 'fir'.\n\n    Parameters\n    ----------\n    x : array_like\n        The signal to be downsampled, as an N-dimensional array.\n    q : int\n        The downsampling factor. When using IIR downsampling, it is recommended\n        to call `decimate` multiple times for downsampling factors higher than\n        13.\n    n : int, optional\n        The order of the filter (1 less than the length for 'fir'). Defaults to\n        8 for 'iir' and 20 times the downsampling factor for 'fir'.\n    ftype : str {'iir', 'fir'} or ``dlti`` instance, optional\n        If 'iir' or 'fir', specifies the type of lowpass filter. If an instance\n        of an `dlti` object, uses that object to filter before downsampling.\n    axis : int, optional\n        The axis along which to decimate.\n    zero_phase : bool, optional\n        Prevent phase shift by filtering with `filtfilt` instead of `lfilter`\n        when using an IIR filter, and shifting the outputs back by the filter's\n        group delay when using an FIR filter. The default value of ``True`` is\n        recommended, since a phase shift is generally not desired.\n\n        .. versionadded:: 0.18.0\n\n    Returns\n    -------\n    y : ndarray\n        The down-sampled signal.\n\n    See Also\n    --------\n    resample : Resample up or down using the FFT method.\n    resample_poly : Resample using polyphase filtering and an FIR filter.\n\n    Notes\n    -----\n    The ``zero_phase`` keyword was added in 0.18.0.\n    The possibility to use instances of ``dlti`` as ``ftype`` was added in\n    0.18.0.\n    ")
    
    # Assigning a Call to a Name (line 3402):
    
    # Assigning a Call to a Name (line 3402):
    
    # Call to asarray(...): (line 3402)
    # Processing the call arguments (line 3402)
    # Getting the type of 'x' (line 3402)
    x_280273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3402, 16), 'x', False)
    # Processing the call keyword arguments (line 3402)
    kwargs_280274 = {}
    # Getting the type of 'asarray' (line 3402)
    asarray_280272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3402, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 3402)
    asarray_call_result_280275 = invoke(stypy.reporting.localization.Localization(__file__, 3402, 8), asarray_280272, *[x_280273], **kwargs_280274)
    
    # Assigning a type to the variable 'x' (line 3402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3402, 4), 'x', asarray_call_result_280275)
    
    # Assigning a Call to a Name (line 3403):
    
    # Assigning a Call to a Name (line 3403):
    
    # Call to index(...): (line 3403)
    # Processing the call arguments (line 3403)
    # Getting the type of 'q' (line 3403)
    q_280278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3403, 23), 'q', False)
    # Processing the call keyword arguments (line 3403)
    kwargs_280279 = {}
    # Getting the type of 'operator' (line 3403)
    operator_280276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3403, 8), 'operator', False)
    # Obtaining the member 'index' of a type (line 3403)
    index_280277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3403, 8), operator_280276, 'index')
    # Calling index(args, kwargs) (line 3403)
    index_call_result_280280 = invoke(stypy.reporting.localization.Localization(__file__, 3403, 8), index_280277, *[q_280278], **kwargs_280279)
    
    # Assigning a type to the variable 'q' (line 3403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3403, 4), 'q', index_call_result_280280)
    
    # Type idiom detected: calculating its left and rigth part (line 3405)
    # Getting the type of 'n' (line 3405)
    n_280281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3405, 4), 'n')
    # Getting the type of 'None' (line 3405)
    None_280282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3405, 16), 'None')
    
    (may_be_280283, more_types_in_union_280284) = may_not_be_none(n_280281, None_280282)

    if may_be_280283:

        if more_types_in_union_280284:
            # Runtime conditional SSA (line 3405)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3406):
        
        # Assigning a Call to a Name (line 3406):
        
        # Call to index(...): (line 3406)
        # Processing the call arguments (line 3406)
        # Getting the type of 'n' (line 3406)
        n_280287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3406, 27), 'n', False)
        # Processing the call keyword arguments (line 3406)
        kwargs_280288 = {}
        # Getting the type of 'operator' (line 3406)
        operator_280285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3406, 12), 'operator', False)
        # Obtaining the member 'index' of a type (line 3406)
        index_280286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3406, 12), operator_280285, 'index')
        # Calling index(args, kwargs) (line 3406)
        index_call_result_280289 = invoke(stypy.reporting.localization.Localization(__file__, 3406, 12), index_280286, *[n_280287], **kwargs_280288)
        
        # Assigning a type to the variable 'n' (line 3406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3406, 8), 'n', index_call_result_280289)

        if more_types_in_union_280284:
            # SSA join for if statement (line 3405)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'ftype' (line 3408)
    ftype_280290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 7), 'ftype')
    str_280291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3408, 16), 'str', 'fir')
    # Applying the binary operator '==' (line 3408)
    result_eq_280292 = python_operator(stypy.reporting.localization.Localization(__file__, 3408, 7), '==', ftype_280290, str_280291)
    
    # Testing the type of an if condition (line 3408)
    if_condition_280293 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3408, 4), result_eq_280292)
    # Assigning a type to the variable 'if_condition_280293' (line 3408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3408, 4), 'if_condition_280293', if_condition_280293)
    # SSA begins for if statement (line 3408)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 3409)
    # Getting the type of 'n' (line 3409)
    n_280294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 11), 'n')
    # Getting the type of 'None' (line 3409)
    None_280295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 16), 'None')
    
    (may_be_280296, more_types_in_union_280297) = may_be_none(n_280294, None_280295)

    if may_be_280296:

        if more_types_in_union_280297:
            # Runtime conditional SSA (line 3409)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 3410):
        
        # Assigning a BinOp to a Name (line 3410):
        int_280298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3410, 23), 'int')
        # Getting the type of 'q' (line 3410)
        q_280299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 28), 'q')
        # Applying the binary operator '*' (line 3410)
        result_mul_280300 = python_operator(stypy.reporting.localization.Localization(__file__, 3410, 23), '*', int_280298, q_280299)
        
        # Assigning a type to the variable 'half_len' (line 3410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3410, 12), 'half_len', result_mul_280300)
        
        # Assigning a BinOp to a Name (line 3411):
        
        # Assigning a BinOp to a Name (line 3411):
        int_280301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3411, 16), 'int')
        # Getting the type of 'half_len' (line 3411)
        half_len_280302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 20), 'half_len')
        # Applying the binary operator '*' (line 3411)
        result_mul_280303 = python_operator(stypy.reporting.localization.Localization(__file__, 3411, 16), '*', int_280301, half_len_280302)
        
        # Assigning a type to the variable 'n' (line 3411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3411, 12), 'n', result_mul_280303)

        if more_types_in_union_280297:
            # SSA join for if statement (line 3409)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Tuple to a Tuple (line 3412):
    
    # Assigning a Call to a Name (line 3412):
    
    # Call to firwin(...): (line 3412)
    # Processing the call arguments (line 3412)
    # Getting the type of 'n' (line 3412)
    n_280305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 22), 'n', False)
    int_280306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3412, 24), 'int')
    # Applying the binary operator '+' (line 3412)
    result_add_280307 = python_operator(stypy.reporting.localization.Localization(__file__, 3412, 22), '+', n_280305, int_280306)
    
    float_280308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3412, 27), 'float')
    # Getting the type of 'q' (line 3412)
    q_280309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 32), 'q', False)
    # Applying the binary operator 'div' (line 3412)
    result_div_280310 = python_operator(stypy.reporting.localization.Localization(__file__, 3412, 27), 'div', float_280308, q_280309)
    
    # Processing the call keyword arguments (line 3412)
    str_280311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3412, 42), 'str', 'hamming')
    keyword_280312 = str_280311
    kwargs_280313 = {'window': keyword_280312}
    # Getting the type of 'firwin' (line 3412)
    firwin_280304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 15), 'firwin', False)
    # Calling firwin(args, kwargs) (line 3412)
    firwin_call_result_280314 = invoke(stypy.reporting.localization.Localization(__file__, 3412, 15), firwin_280304, *[result_add_280307, result_div_280310], **kwargs_280313)
    
    # Assigning a type to the variable 'tuple_assignment_274369' (line 3412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3412, 8), 'tuple_assignment_274369', firwin_call_result_280314)
    
    # Assigning a Num to a Name (line 3412):
    float_280315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3412, 54), 'float')
    # Assigning a type to the variable 'tuple_assignment_274370' (line 3412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3412, 8), 'tuple_assignment_274370', float_280315)
    
    # Assigning a Name to a Name (line 3412):
    # Getting the type of 'tuple_assignment_274369' (line 3412)
    tuple_assignment_274369_280316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 8), 'tuple_assignment_274369')
    # Assigning a type to the variable 'b' (line 3412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3412, 8), 'b', tuple_assignment_274369_280316)
    
    # Assigning a Name to a Name (line 3412):
    # Getting the type of 'tuple_assignment_274370' (line 3412)
    tuple_assignment_274370_280317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 8), 'tuple_assignment_274370')
    # Assigning a type to the variable 'a' (line 3412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3412, 11), 'a', tuple_assignment_274370_280317)
    # SSA branch for the else part of an if statement (line 3408)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ftype' (line 3413)
    ftype_280318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3413, 9), 'ftype')
    str_280319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3413, 18), 'str', 'iir')
    # Applying the binary operator '==' (line 3413)
    result_eq_280320 = python_operator(stypy.reporting.localization.Localization(__file__, 3413, 9), '==', ftype_280318, str_280319)
    
    # Testing the type of an if condition (line 3413)
    if_condition_280321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3413, 9), result_eq_280320)
    # Assigning a type to the variable 'if_condition_280321' (line 3413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3413, 9), 'if_condition_280321', if_condition_280321)
    # SSA begins for if statement (line 3413)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 3414)
    # Getting the type of 'n' (line 3414)
    n_280322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 11), 'n')
    # Getting the type of 'None' (line 3414)
    None_280323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 16), 'None')
    
    (may_be_280324, more_types_in_union_280325) = may_be_none(n_280322, None_280323)

    if may_be_280324:

        if more_types_in_union_280325:
            # Runtime conditional SSA (line 3414)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 3415):
        
        # Assigning a Num to a Name (line 3415):
        int_280326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3415, 16), 'int')
        # Assigning a type to the variable 'n' (line 3415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3415, 12), 'n', int_280326)

        if more_types_in_union_280325:
            # SSA join for if statement (line 3414)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 3416):
    
    # Assigning a Call to a Name (line 3416):
    
    # Call to dlti(...): (line 3416)
    
    # Call to cheby1(...): (line 3416)
    # Processing the call arguments (line 3416)
    # Getting the type of 'n' (line 3416)
    n_280329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 30), 'n', False)
    float_280330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3416, 33), 'float')
    float_280331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3416, 39), 'float')
    # Getting the type of 'q' (line 3416)
    q_280332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 45), 'q', False)
    # Applying the binary operator 'div' (line 3416)
    result_div_280333 = python_operator(stypy.reporting.localization.Localization(__file__, 3416, 39), 'div', float_280331, q_280332)
    
    # Processing the call keyword arguments (line 3416)
    kwargs_280334 = {}
    # Getting the type of 'cheby1' (line 3416)
    cheby1_280328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 23), 'cheby1', False)
    # Calling cheby1(args, kwargs) (line 3416)
    cheby1_call_result_280335 = invoke(stypy.reporting.localization.Localization(__file__, 3416, 23), cheby1_280328, *[n_280329, float_280330, result_div_280333], **kwargs_280334)
    
    # Processing the call keyword arguments (line 3416)
    kwargs_280336 = {}
    # Getting the type of 'dlti' (line 3416)
    dlti_280327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3416, 17), 'dlti', False)
    # Calling dlti(args, kwargs) (line 3416)
    dlti_call_result_280337 = invoke(stypy.reporting.localization.Localization(__file__, 3416, 17), dlti_280327, *[cheby1_call_result_280335], **kwargs_280336)
    
    # Assigning a type to the variable 'system' (line 3416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3416, 8), 'system', dlti_call_result_280337)
    
    # Assigning a Tuple to a Tuple (line 3417):
    
    # Assigning a Attribute to a Name (line 3417):
    # Getting the type of 'system' (line 3417)
    system_280338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 15), 'system')
    # Obtaining the member 'num' of a type (line 3417)
    num_280339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3417, 15), system_280338, 'num')
    # Assigning a type to the variable 'tuple_assignment_274371' (line 3417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3417, 8), 'tuple_assignment_274371', num_280339)
    
    # Assigning a Attribute to a Name (line 3417):
    # Getting the type of 'system' (line 3417)
    system_280340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 27), 'system')
    # Obtaining the member 'den' of a type (line 3417)
    den_280341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3417, 27), system_280340, 'den')
    # Assigning a type to the variable 'tuple_assignment_274372' (line 3417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3417, 8), 'tuple_assignment_274372', den_280341)
    
    # Assigning a Name to a Name (line 3417):
    # Getting the type of 'tuple_assignment_274371' (line 3417)
    tuple_assignment_274371_280342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 8), 'tuple_assignment_274371')
    # Assigning a type to the variable 'b' (line 3417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3417, 8), 'b', tuple_assignment_274371_280342)
    
    # Assigning a Name to a Name (line 3417):
    # Getting the type of 'tuple_assignment_274372' (line 3417)
    tuple_assignment_274372_280343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 8), 'tuple_assignment_274372')
    # Assigning a type to the variable 'a' (line 3417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3417, 11), 'a', tuple_assignment_274372_280343)
    # SSA branch for the else part of an if statement (line 3413)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 3418)
    # Processing the call arguments (line 3418)
    # Getting the type of 'ftype' (line 3418)
    ftype_280345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 20), 'ftype', False)
    # Getting the type of 'dlti' (line 3418)
    dlti_280346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 27), 'dlti', False)
    # Processing the call keyword arguments (line 3418)
    kwargs_280347 = {}
    # Getting the type of 'isinstance' (line 3418)
    isinstance_280344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 9), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 3418)
    isinstance_call_result_280348 = invoke(stypy.reporting.localization.Localization(__file__, 3418, 9), isinstance_280344, *[ftype_280345, dlti_280346], **kwargs_280347)
    
    # Testing the type of an if condition (line 3418)
    if_condition_280349 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3418, 9), isinstance_call_result_280348)
    # Assigning a type to the variable 'if_condition_280349' (line 3418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3418, 9), 'if_condition_280349', if_condition_280349)
    # SSA begins for if statement (line 3418)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3419):
    
    # Assigning a Call to a Name (line 3419):
    
    # Call to _as_tf(...): (line 3419)
    # Processing the call keyword arguments (line 3419)
    kwargs_280352 = {}
    # Getting the type of 'ftype' (line 3419)
    ftype_280350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3419, 17), 'ftype', False)
    # Obtaining the member '_as_tf' of a type (line 3419)
    _as_tf_280351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3419, 17), ftype_280350, '_as_tf')
    # Calling _as_tf(args, kwargs) (line 3419)
    _as_tf_call_result_280353 = invoke(stypy.reporting.localization.Localization(__file__, 3419, 17), _as_tf_280351, *[], **kwargs_280352)
    
    # Assigning a type to the variable 'system' (line 3419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3419, 8), 'system', _as_tf_call_result_280353)
    
    # Assigning a Tuple to a Tuple (line 3420):
    
    # Assigning a Attribute to a Name (line 3420):
    # Getting the type of 'system' (line 3420)
    system_280354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 15), 'system')
    # Obtaining the member 'num' of a type (line 3420)
    num_280355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3420, 15), system_280354, 'num')
    # Assigning a type to the variable 'tuple_assignment_274373' (line 3420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3420, 8), 'tuple_assignment_274373', num_280355)
    
    # Assigning a Attribute to a Name (line 3420):
    # Getting the type of 'system' (line 3420)
    system_280356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 27), 'system')
    # Obtaining the member 'den' of a type (line 3420)
    den_280357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3420, 27), system_280356, 'den')
    # Assigning a type to the variable 'tuple_assignment_274374' (line 3420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3420, 8), 'tuple_assignment_274374', den_280357)
    
    # Assigning a Name to a Name (line 3420):
    # Getting the type of 'tuple_assignment_274373' (line 3420)
    tuple_assignment_274373_280358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 8), 'tuple_assignment_274373')
    # Assigning a type to the variable 'b' (line 3420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3420, 8), 'b', tuple_assignment_274373_280358)
    
    # Assigning a Name to a Name (line 3420):
    # Getting the type of 'tuple_assignment_274374' (line 3420)
    tuple_assignment_274374_280359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 8), 'tuple_assignment_274374')
    # Assigning a type to the variable 'a' (line 3420)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3420, 11), 'a', tuple_assignment_274374_280359)
    # SSA branch for the else part of an if statement (line 3418)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 3422)
    # Processing the call arguments (line 3422)
    str_280361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3422, 25), 'str', 'invalid ftype')
    # Processing the call keyword arguments (line 3422)
    kwargs_280362 = {}
    # Getting the type of 'ValueError' (line 3422)
    ValueError_280360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3422, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3422)
    ValueError_call_result_280363 = invoke(stypy.reporting.localization.Localization(__file__, 3422, 14), ValueError_280360, *[str_280361], **kwargs_280362)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3422, 8), ValueError_call_result_280363, 'raise parameter', BaseException)
    # SSA join for if statement (line 3418)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3413)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3408)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 3424):
    
    # Assigning a BinOp to a Name (line 3424):
    
    # Obtaining an instance of the builtin type 'list' (line 3424)
    list_280364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3424, 9), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3424)
    # Adding element type (line 3424)
    
    # Call to slice(...): (line 3424)
    # Processing the call arguments (line 3424)
    # Getting the type of 'None' (line 3424)
    None_280366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3424, 16), 'None', False)
    # Processing the call keyword arguments (line 3424)
    kwargs_280367 = {}
    # Getting the type of 'slice' (line 3424)
    slice_280365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3424, 10), 'slice', False)
    # Calling slice(args, kwargs) (line 3424)
    slice_call_result_280368 = invoke(stypy.reporting.localization.Localization(__file__, 3424, 10), slice_280365, *[None_280366], **kwargs_280367)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3424, 9), list_280364, slice_call_result_280368)
    
    # Getting the type of 'x' (line 3424)
    x_280369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3424, 25), 'x')
    # Obtaining the member 'ndim' of a type (line 3424)
    ndim_280370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3424, 25), x_280369, 'ndim')
    # Applying the binary operator '*' (line 3424)
    result_mul_280371 = python_operator(stypy.reporting.localization.Localization(__file__, 3424, 9), '*', list_280364, ndim_280370)
    
    # Assigning a type to the variable 'sl' (line 3424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3424, 4), 'sl', result_mul_280371)
    
    # Assigning a Call to a Name (line 3425):
    
    # Assigning a Call to a Name (line 3425):
    
    # Call to asarray(...): (line 3425)
    # Processing the call arguments (line 3425)
    # Getting the type of 'a' (line 3425)
    a_280374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3425, 19), 'a', False)
    # Processing the call keyword arguments (line 3425)
    kwargs_280375 = {}
    # Getting the type of 'np' (line 3425)
    np_280372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3425, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3425)
    asarray_280373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3425, 8), np_280372, 'asarray')
    # Calling asarray(args, kwargs) (line 3425)
    asarray_call_result_280376 = invoke(stypy.reporting.localization.Localization(__file__, 3425, 8), asarray_280373, *[a_280374], **kwargs_280375)
    
    # Assigning a type to the variable 'a' (line 3425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3425, 4), 'a', asarray_call_result_280376)
    
    
    # Getting the type of 'a' (line 3427)
    a_280377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3427, 7), 'a')
    # Obtaining the member 'size' of a type (line 3427)
    size_280378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3427, 7), a_280377, 'size')
    int_280379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3427, 17), 'int')
    # Applying the binary operator '==' (line 3427)
    result_eq_280380 = python_operator(stypy.reporting.localization.Localization(__file__, 3427, 7), '==', size_280378, int_280379)
    
    # Testing the type of an if condition (line 3427)
    if_condition_280381 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3427, 4), result_eq_280380)
    # Assigning a type to the variable 'if_condition_280381' (line 3427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3427, 4), 'if_condition_280381', if_condition_280381)
    # SSA begins for if statement (line 3427)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3428):
    
    # Assigning a BinOp to a Name (line 3428):
    # Getting the type of 'b' (line 3428)
    b_280382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 12), 'b')
    # Getting the type of 'a' (line 3428)
    a_280383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3428, 16), 'a')
    # Applying the binary operator 'div' (line 3428)
    result_div_280384 = python_operator(stypy.reporting.localization.Localization(__file__, 3428, 12), 'div', b_280382, a_280383)
    
    # Assigning a type to the variable 'b' (line 3428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3428, 8), 'b', result_div_280384)
    
    # Getting the type of 'zero_phase' (line 3429)
    zero_phase_280385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3429, 11), 'zero_phase')
    # Testing the type of an if condition (line 3429)
    if_condition_280386 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3429, 8), zero_phase_280385)
    # Assigning a type to the variable 'if_condition_280386' (line 3429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3429, 8), 'if_condition_280386', if_condition_280386)
    # SSA begins for if statement (line 3429)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3430):
    
    # Assigning a Call to a Name (line 3430):
    
    # Call to resample_poly(...): (line 3430)
    # Processing the call arguments (line 3430)
    # Getting the type of 'x' (line 3430)
    x_280388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3430, 30), 'x', False)
    int_280389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3430, 33), 'int')
    # Getting the type of 'q' (line 3430)
    q_280390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3430, 36), 'q', False)
    # Processing the call keyword arguments (line 3430)
    # Getting the type of 'axis' (line 3430)
    axis_280391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3430, 44), 'axis', False)
    keyword_280392 = axis_280391
    # Getting the type of 'b' (line 3430)
    b_280393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3430, 57), 'b', False)
    keyword_280394 = b_280393
    kwargs_280395 = {'window': keyword_280394, 'axis': keyword_280392}
    # Getting the type of 'resample_poly' (line 3430)
    resample_poly_280387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3430, 16), 'resample_poly', False)
    # Calling resample_poly(args, kwargs) (line 3430)
    resample_poly_call_result_280396 = invoke(stypy.reporting.localization.Localization(__file__, 3430, 16), resample_poly_280387, *[x_280388, int_280389, q_280390], **kwargs_280395)
    
    # Assigning a type to the variable 'y' (line 3430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3430, 12), 'y', resample_poly_call_result_280396)
    # SSA branch for the else part of an if statement (line 3429)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 3434):
    
    # Assigning a BinOp to a Name (line 3434):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 3434)
    axis_280397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 28), 'axis')
    # Getting the type of 'x' (line 3434)
    x_280398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 20), 'x')
    # Obtaining the member 'shape' of a type (line 3434)
    shape_280399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3434, 20), x_280398, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3434)
    getitem___280400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3434, 20), shape_280399, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3434)
    subscript_call_result_280401 = invoke(stypy.reporting.localization.Localization(__file__, 3434, 20), getitem___280400, axis_280397)
    
    # Getting the type of 'q' (line 3434)
    q_280402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 37), 'q')
    # Applying the binary operator '//' (line 3434)
    result_floordiv_280403 = python_operator(stypy.reporting.localization.Localization(__file__, 3434, 20), '//', subscript_call_result_280401, q_280402)
    
    
    # Call to bool(...): (line 3434)
    # Processing the call arguments (line 3434)
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 3434)
    axis_280405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 54), 'axis', False)
    # Getting the type of 'x' (line 3434)
    x_280406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 46), 'x', False)
    # Obtaining the member 'shape' of a type (line 3434)
    shape_280407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3434, 46), x_280406, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3434)
    getitem___280408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3434, 46), shape_280407, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3434)
    subscript_call_result_280409 = invoke(stypy.reporting.localization.Localization(__file__, 3434, 46), getitem___280408, axis_280405)
    
    # Getting the type of 'q' (line 3434)
    q_280410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 62), 'q', False)
    # Applying the binary operator '%' (line 3434)
    result_mod_280411 = python_operator(stypy.reporting.localization.Localization(__file__, 3434, 46), '%', subscript_call_result_280409, q_280410)
    
    # Processing the call keyword arguments (line 3434)
    kwargs_280412 = {}
    # Getting the type of 'bool' (line 3434)
    bool_280404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3434, 41), 'bool', False)
    # Calling bool(args, kwargs) (line 3434)
    bool_call_result_280413 = invoke(stypy.reporting.localization.Localization(__file__, 3434, 41), bool_280404, *[result_mod_280411], **kwargs_280412)
    
    # Applying the binary operator '+' (line 3434)
    result_add_280414 = python_operator(stypy.reporting.localization.Localization(__file__, 3434, 20), '+', result_floordiv_280403, bool_call_result_280413)
    
    # Assigning a type to the variable 'n_out' (line 3434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3434, 12), 'n_out', result_add_280414)
    
    # Assigning a Call to a Name (line 3435):
    
    # Assigning a Call to a Name (line 3435):
    
    # Call to upfirdn(...): (line 3435)
    # Processing the call arguments (line 3435)
    # Getting the type of 'b' (line 3435)
    b_280416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3435, 24), 'b', False)
    # Getting the type of 'x' (line 3435)
    x_280417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3435, 27), 'x', False)
    # Processing the call keyword arguments (line 3435)
    int_280418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3435, 33), 'int')
    keyword_280419 = int_280418
    # Getting the type of 'q' (line 3435)
    q_280420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3435, 41), 'q', False)
    keyword_280421 = q_280420
    # Getting the type of 'axis' (line 3435)
    axis_280422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3435, 49), 'axis', False)
    keyword_280423 = axis_280422
    kwargs_280424 = {'down': keyword_280421, 'up': keyword_280419, 'axis': keyword_280423}
    # Getting the type of 'upfirdn' (line 3435)
    upfirdn_280415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3435, 16), 'upfirdn', False)
    # Calling upfirdn(args, kwargs) (line 3435)
    upfirdn_call_result_280425 = invoke(stypy.reporting.localization.Localization(__file__, 3435, 16), upfirdn_280415, *[b_280416, x_280417], **kwargs_280424)
    
    # Assigning a type to the variable 'y' (line 3435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3435, 12), 'y', upfirdn_call_result_280425)
    
    # Assigning a Call to a Subscript (line 3436):
    
    # Assigning a Call to a Subscript (line 3436):
    
    # Call to slice(...): (line 3436)
    # Processing the call arguments (line 3436)
    # Getting the type of 'None' (line 3436)
    None_280427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3436, 29), 'None', False)
    # Getting the type of 'n_out' (line 3436)
    n_out_280428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3436, 35), 'n_out', False)
    # Getting the type of 'None' (line 3436)
    None_280429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3436, 42), 'None', False)
    # Processing the call keyword arguments (line 3436)
    kwargs_280430 = {}
    # Getting the type of 'slice' (line 3436)
    slice_280426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3436, 23), 'slice', False)
    # Calling slice(args, kwargs) (line 3436)
    slice_call_result_280431 = invoke(stypy.reporting.localization.Localization(__file__, 3436, 23), slice_280426, *[None_280427, n_out_280428, None_280429], **kwargs_280430)
    
    # Getting the type of 'sl' (line 3436)
    sl_280432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3436, 12), 'sl')
    # Getting the type of 'axis' (line 3436)
    axis_280433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3436, 15), 'axis')
    # Storing an element on a container (line 3436)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3436, 12), sl_280432, (axis_280433, slice_call_result_280431))
    # SSA join for if statement (line 3429)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 3427)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'zero_phase' (line 3439)
    zero_phase_280434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3439, 11), 'zero_phase')
    # Testing the type of an if condition (line 3439)
    if_condition_280435 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3439, 8), zero_phase_280434)
    # Assigning a type to the variable 'if_condition_280435' (line 3439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3439, 8), 'if_condition_280435', if_condition_280435)
    # SSA begins for if statement (line 3439)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3440):
    
    # Assigning a Call to a Name (line 3440):
    
    # Call to filtfilt(...): (line 3440)
    # Processing the call arguments (line 3440)
    # Getting the type of 'b' (line 3440)
    b_280437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3440, 25), 'b', False)
    # Getting the type of 'a' (line 3440)
    a_280438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3440, 28), 'a', False)
    # Getting the type of 'x' (line 3440)
    x_280439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3440, 31), 'x', False)
    # Processing the call keyword arguments (line 3440)
    # Getting the type of 'axis' (line 3440)
    axis_280440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3440, 39), 'axis', False)
    keyword_280441 = axis_280440
    kwargs_280442 = {'axis': keyword_280441}
    # Getting the type of 'filtfilt' (line 3440)
    filtfilt_280436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3440, 16), 'filtfilt', False)
    # Calling filtfilt(args, kwargs) (line 3440)
    filtfilt_call_result_280443 = invoke(stypy.reporting.localization.Localization(__file__, 3440, 16), filtfilt_280436, *[b_280437, a_280438, x_280439], **kwargs_280442)
    
    # Assigning a type to the variable 'y' (line 3440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3440, 12), 'y', filtfilt_call_result_280443)
    # SSA branch for the else part of an if statement (line 3439)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3442):
    
    # Assigning a Call to a Name (line 3442):
    
    # Call to lfilter(...): (line 3442)
    # Processing the call arguments (line 3442)
    # Getting the type of 'b' (line 3442)
    b_280445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 24), 'b', False)
    # Getting the type of 'a' (line 3442)
    a_280446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 27), 'a', False)
    # Getting the type of 'x' (line 3442)
    x_280447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 30), 'x', False)
    # Processing the call keyword arguments (line 3442)
    # Getting the type of 'axis' (line 3442)
    axis_280448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 38), 'axis', False)
    keyword_280449 = axis_280448
    kwargs_280450 = {'axis': keyword_280449}
    # Getting the type of 'lfilter' (line 3442)
    lfilter_280444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 16), 'lfilter', False)
    # Calling lfilter(args, kwargs) (line 3442)
    lfilter_call_result_280451 = invoke(stypy.reporting.localization.Localization(__file__, 3442, 16), lfilter_280444, *[b_280445, a_280446, x_280447], **kwargs_280450)
    
    # Assigning a type to the variable 'y' (line 3442)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3442, 12), 'y', lfilter_call_result_280451)
    # SSA join for if statement (line 3439)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Subscript (line 3443):
    
    # Assigning a Call to a Subscript (line 3443):
    
    # Call to slice(...): (line 3443)
    # Processing the call arguments (line 3443)
    # Getting the type of 'None' (line 3443)
    None_280453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3443, 25), 'None', False)
    # Getting the type of 'None' (line 3443)
    None_280454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3443, 31), 'None', False)
    # Getting the type of 'q' (line 3443)
    q_280455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3443, 37), 'q', False)
    # Processing the call keyword arguments (line 3443)
    kwargs_280456 = {}
    # Getting the type of 'slice' (line 3443)
    slice_280452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3443, 19), 'slice', False)
    # Calling slice(args, kwargs) (line 3443)
    slice_call_result_280457 = invoke(stypy.reporting.localization.Localization(__file__, 3443, 19), slice_280452, *[None_280453, None_280454, q_280455], **kwargs_280456)
    
    # Getting the type of 'sl' (line 3443)
    sl_280458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3443, 8), 'sl')
    # Getting the type of 'axis' (line 3443)
    axis_280459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3443, 11), 'axis')
    # Storing an element on a container (line 3443)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3443, 8), sl_280458, (axis_280459, slice_call_result_280457))
    # SSA join for if statement (line 3427)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'sl' (line 3445)
    sl_280460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3445, 13), 'sl')
    # Getting the type of 'y' (line 3445)
    y_280461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3445, 11), 'y')
    # Obtaining the member '__getitem__' of a type (line 3445)
    getitem___280462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3445, 11), y_280461, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3445)
    subscript_call_result_280463 = invoke(stypy.reporting.localization.Localization(__file__, 3445, 11), getitem___280462, sl_280460)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3445, 4), 'stypy_return_type', subscript_call_result_280463)
    
    # ################# End of 'decimate(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'decimate' in the type store
    # Getting the type of 'stypy_return_type' (line 3354)
    stypy_return_type_280464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_280464)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'decimate'
    return stypy_return_type_280464

# Assigning a type to the variable 'decimate' (line 3354)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3354, 0), 'decimate', decimate)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
