
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: ========================================================
3: Hierarchical clustering (:mod:`scipy.cluster.hierarchy`)
4: ========================================================
5: 
6: .. currentmodule:: scipy.cluster.hierarchy
7: 
8: These functions cut hierarchical clusterings into flat clusterings
9: or find the roots of the forest formed by a cut by providing the flat
10: cluster ids of each observation.
11: 
12: .. autosummary::
13:    :toctree: generated/
14: 
15:    fcluster
16:    fclusterdata
17:    leaders
18: 
19: These are routines for agglomerative clustering.
20: 
21: .. autosummary::
22:    :toctree: generated/
23: 
24:    linkage
25:    single
26:    complete
27:    average
28:    weighted
29:    centroid
30:    median
31:    ward
32: 
33: These routines compute statistics on hierarchies.
34: 
35: .. autosummary::
36:    :toctree: generated/
37: 
38:    cophenet
39:    from_mlab_linkage
40:    inconsistent
41:    maxinconsts
42:    maxdists
43:    maxRstat
44:    to_mlab_linkage
45: 
46: Routines for visualizing flat clusters.
47: 
48: .. autosummary::
49:    :toctree: generated/
50: 
51:    dendrogram
52: 
53: These are data structures and routines for representing hierarchies as
54: tree objects.
55: 
56: .. autosummary::
57:    :toctree: generated/
58: 
59:    ClusterNode
60:    leaves_list
61:    to_tree
62:    cut_tree
63:    optimal_leaf_ordering
64: 
65: These are predicates for checking the validity of linkage and
66: inconsistency matrices as well as for checking isomorphism of two
67: flat cluster assignments.
68: 
69: .. autosummary::
70:    :toctree: generated/
71: 
72:    is_valid_im
73:    is_valid_linkage
74:    is_isomorphic
75:    is_monotonic
76:    correspond
77:    num_obs_linkage
78: 
79: Utility routines for plotting:
80: 
81: .. autosummary::
82:    :toctree: generated/
83: 
84:    set_link_color_palette
85: 
86: References
87: ----------
88: 
89: .. [1] "Statistics toolbox." API Reference Documentation. The MathWorks.
90:    http://www.mathworks.com/access/helpdesk/help/toolbox/stats/.
91:    Accessed October 1, 2007.
92: 
93: .. [2] "Hierarchical clustering." API Reference Documentation.
94:    The Wolfram Research, Inc.
95:    https://reference.wolfram.com/language/HierarchicalClustering/tutorial/HierarchicalClustering.html.
96:    Accessed October 1, 2007.
97: 
98: .. [3] Gower, JC and Ross, GJS. "Minimum Spanning Trees and Single Linkage
99:    Cluster Analysis." Applied Statistics. 18(1): pp. 54--64. 1969.
100: 
101: .. [4] Ward Jr, JH. "Hierarchical grouping to optimize an objective
102:    function." Journal of the American Statistical Association. 58(301):
103:    pp. 236--44. 1963.
104: 
105: .. [5] Johnson, SC. "Hierarchical clustering schemes." Psychometrika.
106:    32(2): pp. 241--54. 1966.
107: 
108: .. [6] Sneath, PH and Sokal, RR. "Numerical taxonomy." Nature. 193: pp.
109:    855--60. 1962.
110: 
111: .. [7] Batagelj, V. "Comparing resemblance measures." Journal of
112:    Classification. 12: pp. 73--90. 1995.
113: 
114: .. [8] Sokal, RR and Michener, CD. "A statistical method for evaluating
115:    systematic relationships." Scientific Bulletins. 38(22):
116:    pp. 1409--38. 1958.
117: 
118: .. [9] Edelbrock, C. "Mixture model tests of hierarchical clustering
119:    algorithms: the problem of classifying everybody." Multivariate
120:    Behavioral Research. 14: pp. 367--84. 1979.
121: 
122: .. [10] Jain, A., and Dubes, R., "Algorithms for Clustering Data."
123:    Prentice-Hall. Englewood Cliffs, NJ. 1988.
124: 
125: .. [11] Fisher, RA "The use of multiple measurements in taxonomic
126:    problems." Annals of Eugenics, 7(2): 179-188. 1936
127: 
128: 
129: * MATLAB and MathWorks are registered trademarks of The MathWorks, Inc.
130: 
131: * Mathematica is a registered trademark of The Wolfram Research, Inc.
132: 
133: '''
134: from __future__ import division, print_function, absolute_import
135: 
136: # Copyright (C) Damian Eads, 2007-2008. New BSD License.
137: 
138: # hierarchy.py (derived from cluster.py, http://scipy-cluster.googlecode.com)
139: #
140: # Author: Damian Eads
141: # Date:   September 22, 2007
142: #
143: # Copyright (c) 2007, 2008, Damian Eads
144: #
145: # All rights reserved.
146: #
147: # Redistribution and use in source and binary forms, with or without
148: # modification, are permitted provided that the following conditions
149: # are met:
150: #   - Redistributions of source code must retain the above
151: #     copyright notice, this list of conditions and the
152: #     following disclaimer.
153: #   - Redistributions in binary form must reproduce the above copyright
154: #     notice, this list of conditions and the following disclaimer
155: #     in the documentation and/or other materials provided with the
156: #     distribution.
157: #   - Neither the name of the author nor the names of its
158: #     contributors may be used to endorse or promote products derived
159: #     from this software without specific prior written permission.
160: #
161: # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
162: # "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
163: # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
164: # A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
165: # OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
166: # SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
167: # LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
168: # DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
169: # THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
170: # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
171: # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
172: 
173: import warnings
174: import bisect
175: from collections import deque
176: 
177: import numpy as np
178: from . import _hierarchy, _optimal_leaf_ordering
179: import scipy.spatial.distance as distance
180: 
181: from scipy._lib.six import string_types
182: from scipy._lib.six import xrange
183: 
184: _LINKAGE_METHODS = {'single': 0, 'complete': 1, 'average': 2, 'centroid': 3,
185:                     'median': 4, 'ward': 5, 'weighted': 6}
186: _EUCLIDEAN_METHODS = ('centroid', 'median', 'ward')
187: 
188: __all__ = ['ClusterNode', 'average', 'centroid', 'complete', 'cophenet',
189:            'correspond', 'cut_tree', 'dendrogram', 'fcluster', 'fclusterdata',
190:            'from_mlab_linkage', 'inconsistent', 'is_isomorphic',
191:            'is_monotonic', 'is_valid_im', 'is_valid_linkage', 'leaders',
192:            'leaves_list', 'linkage', 'maxRstat', 'maxdists', 'maxinconsts',
193:            'median', 'num_obs_linkage', 'optimal_leaf_ordering',
194:            'set_link_color_palette', 'single', 'to_mlab_linkage', 'to_tree',
195:            'ward', 'weighted', 'distance']
196: 
197: 
198: class ClusterWarning(UserWarning):
199:     pass
200: 
201: 
202: def _warning(s):
203:     warnings.warn('scipy.cluster: %s' % s, ClusterWarning, stacklevel=3)
204: 
205: 
206: def _copy_array_if_base_present(a):
207:     '''
208:     Copy the array if its base points to a parent array.
209:     '''
210:     if a.base is not None:
211:         return a.copy()
212:     elif np.issubsctype(a, np.float32):
213:         return np.array(a, dtype=np.double)
214:     else:
215:         return a
216: 
217: 
218: def _copy_arrays_if_base_present(T):
219:     '''
220:     Accept a tuple of arrays T. Copies the array T[i] if its base array
221:     points to an actual array. Otherwise, the reference is just copied.
222:     This is useful if the arrays are being passed to a C function that
223:     does not do proper striding.
224:     '''
225:     l = [_copy_array_if_base_present(a) for a in T]
226:     return l
227: 
228: 
229: def _randdm(pnts):
230:     '''
231:     Generate a random distance matrix stored in condensed form.
232: 
233:     Parameters
234:     ----------
235:     pnts : int
236:         The number of points in the distance matrix. Has to be at least 2.
237: 
238:     Returns
239:     -------
240:     D : ndarray
241:         A ``pnts * (pnts - 1) / 2`` sized vector is returned.
242:     '''
243:     if pnts >= 2:
244:         D = np.random.rand(pnts * (pnts - 1) / 2)
245:     else:
246:         raise ValueError("The number of points in the distance matrix "
247:                          "must be at least 2.")
248:     return D
249: 
250: 
251: def single(y):
252:     '''
253:     Perform single/min/nearest linkage on the condensed distance matrix ``y``.
254: 
255:     Parameters
256:     ----------
257:     y : ndarray
258:         The upper triangular of the distance matrix. The result of
259:         ``pdist`` is returned in this form.
260: 
261:     Returns
262:     -------
263:     Z : ndarray
264:         The linkage matrix.
265: 
266:     See Also
267:     --------
268:     linkage: for advanced creation of hierarchical clusterings.
269:     scipy.spatial.distance.pdist : pairwise distance metrics
270: 
271:     '''
272:     return linkage(y, method='single', metric='euclidean')
273: 
274: 
275: def complete(y):
276:     '''
277:     Perform complete/max/farthest point linkage on a condensed distance matrix.
278: 
279:     Parameters
280:     ----------
281:     y : ndarray
282:         The upper triangular of the distance matrix. The result of
283:         ``pdist`` is returned in this form.
284: 
285:     Returns
286:     -------
287:     Z : ndarray
288:         A linkage matrix containing the hierarchical clustering. See
289:         the `linkage` function documentation for more information
290:         on its structure.
291: 
292:     See Also
293:     --------
294:     linkage: for advanced creation of hierarchical clusterings.
295:     scipy.spatial.distance.pdist : pairwise distance metrics
296: 
297:     '''
298:     return linkage(y, method='complete', metric='euclidean')
299: 
300: 
301: def average(y):
302:     '''
303:     Perform average/UPGMA linkage on a condensed distance matrix.
304: 
305:     Parameters
306:     ----------
307:     y : ndarray
308:         The upper triangular of the distance matrix. The result of
309:         ``pdist`` is returned in this form.
310: 
311:     Returns
312:     -------
313:     Z : ndarray
314:         A linkage matrix containing the hierarchical clustering. See
315:         `linkage` for more information on its structure.
316: 
317:     See Also
318:     --------
319:     linkage: for advanced creation of hierarchical clusterings.
320:     scipy.spatial.distance.pdist : pairwise distance metrics
321: 
322:     '''
323:     return linkage(y, method='average', metric='euclidean')
324: 
325: 
326: def weighted(y):
327:     '''
328:     Perform weighted/WPGMA linkage on the condensed distance matrix.
329: 
330:     See `linkage` for more information on the return
331:     structure and algorithm.
332: 
333:     Parameters
334:     ----------
335:     y : ndarray
336:         The upper triangular of the distance matrix. The result of
337:         ``pdist`` is returned in this form.
338: 
339:     Returns
340:     -------
341:     Z : ndarray
342:         A linkage matrix containing the hierarchical clustering. See
343:         `linkage` for more information on its structure.
344: 
345:     See Also
346:     --------
347:     linkage : for advanced creation of hierarchical clusterings.
348:     scipy.spatial.distance.pdist : pairwise distance metrics
349: 
350:     '''
351:     return linkage(y, method='weighted', metric='euclidean')
352: 
353: 
354: def centroid(y):
355:     '''
356:     Perform centroid/UPGMC linkage.
357: 
358:     See `linkage` for more information on the input matrix,
359:     return structure, and algorithm.
360: 
361:     The following are common calling conventions:
362: 
363:     1. ``Z = centroid(y)``
364: 
365:        Performs centroid/UPGMC linkage on the condensed distance
366:        matrix ``y``.
367: 
368:     2. ``Z = centroid(X)``
369: 
370:        Performs centroid/UPGMC linkage on the observation matrix ``X``
371:        using Euclidean distance as the distance metric.
372: 
373:     Parameters
374:     ----------
375:     y : ndarray
376:         A condensed distance matrix. A condensed
377:         distance matrix is a flat array containing the upper
378:         triangular of the distance matrix. This is the form that
379:         ``pdist`` returns. Alternatively, a collection of
380:         m observation vectors in n dimensions may be passed as
381:         a m by n array.
382: 
383:     Returns
384:     -------
385:     Z : ndarray
386:         A linkage matrix containing the hierarchical clustering. See
387:         the `linkage` function documentation for more information
388:         on its structure.
389: 
390:     See Also
391:     --------
392:     linkage: for advanced creation of hierarchical clusterings.
393: 
394:     '''
395:     return linkage(y, method='centroid', metric='euclidean')
396: 
397: 
398: def median(y):
399:     '''
400:     Perform median/WPGMC linkage.
401: 
402:     See `linkage` for more information on the return structure
403:     and algorithm.
404: 
405:      The following are common calling conventions:
406: 
407:      1. ``Z = median(y)``
408: 
409:         Performs median/WPGMC linkage on the condensed distance matrix
410:         ``y``.  See ``linkage`` for more information on the return
411:         structure and algorithm.
412: 
413:      2. ``Z = median(X)``
414: 
415:         Performs median/WPGMC linkage on the observation matrix ``X``
416:         using Euclidean distance as the distance metric. See `linkage`
417:         for more information on the return structure and algorithm.
418: 
419:     Parameters
420:     ----------
421:     y : ndarray
422:         A condensed distance matrix. A condensed
423:         distance matrix is a flat array containing the upper
424:         triangular of the distance matrix. This is the form that
425:         ``pdist`` returns.  Alternatively, a collection of
426:         m observation vectors in n dimensions may be passed as
427:         a m by n array.
428: 
429:     Returns
430:     -------
431:     Z : ndarray
432:         The hierarchical clustering encoded as a linkage matrix.
433: 
434:     See Also
435:     --------
436:     linkage: for advanced creation of hierarchical clusterings.
437:     scipy.spatial.distance.pdist : pairwise distance metrics
438: 
439:     '''
440:     return linkage(y, method='median', metric='euclidean')
441: 
442: 
443: def ward(y):
444:     '''
445:     Perform Ward's linkage on a condensed distance matrix.
446: 
447:     See `linkage` for more information on the return structure
448:     and algorithm.
449: 
450:     The following are common calling conventions:
451: 
452:     1. ``Z = ward(y)``
453:        Performs Ward's linkage on the condensed distance matrix ``y``.
454: 
455:     2. ``Z = ward(X)``
456:        Performs Ward's linkage on the observation matrix ``X`` using
457:        Euclidean distance as the distance metric.
458: 
459:     Parameters
460:     ----------
461:     y : ndarray
462:         A condensed distance matrix. A condensed
463:         distance matrix is a flat array containing the upper
464:         triangular of the distance matrix. This is the form that
465:         ``pdist`` returns.  Alternatively, a collection of
466:         m observation vectors in n dimensions may be passed as
467:         a m by n array.
468: 
469:     Returns
470:     -------
471:     Z : ndarray
472:         The hierarchical clustering encoded as a linkage matrix. See
473:         `linkage` for more information on the return structure and
474:         algorithm.
475: 
476:     See Also
477:     --------
478:     linkage: for advanced creation of hierarchical clusterings.
479:     scipy.spatial.distance.pdist : pairwise distance metrics
480: 
481:     '''
482:     return linkage(y, method='ward', metric='euclidean')
483: 
484: 
485: def linkage(y, method='single', metric='euclidean', optimal_ordering=False):
486:     '''
487:     Perform hierarchical/agglomerative clustering.
488: 
489:     The input y may be either a 1d compressed distance matrix
490:     or a 2d array of observation vectors.
491: 
492:     If y is a 1d compressed distance matrix,
493:     then y must be a :math:`{n \\choose 2}` sized
494:     vector where n is the number of original observations paired
495:     in the distance matrix. The behavior of this function is very
496:     similar to the MATLAB linkage function.
497: 
498:     A :math:`(n-1)` by 4 matrix ``Z`` is returned. At the
499:     :math:`i`-th iteration, clusters with indices ``Z[i, 0]`` and
500:     ``Z[i, 1]`` are combined to form cluster :math:`n + i`. A
501:     cluster with an index less than :math:`n` corresponds to one of
502:     the :math:`n` original observations. The distance between
503:     clusters ``Z[i, 0]`` and ``Z[i, 1]`` is given by ``Z[i, 2]``. The
504:     fourth value ``Z[i, 3]`` represents the number of original
505:     observations in the newly formed cluster.
506: 
507:     The following linkage methods are used to compute the distance
508:     :math:`d(s, t)` between two clusters :math:`s` and
509:     :math:`t`. The algorithm begins with a forest of clusters that
510:     have yet to be used in the hierarchy being formed. When two
511:     clusters :math:`s` and :math:`t` from this forest are combined
512:     into a single cluster :math:`u`, :math:`s` and :math:`t` are
513:     removed from the forest, and :math:`u` is added to the
514:     forest. When only one cluster remains in the forest, the algorithm
515:     stops, and this cluster becomes the root.
516: 
517:     A distance matrix is maintained at each iteration. The ``d[i,j]``
518:     entry corresponds to the distance between cluster :math:`i` and
519:     :math:`j` in the original forest.
520: 
521:     At each iteration, the algorithm must update the distance matrix
522:     to reflect the distance of the newly formed cluster u with the
523:     remaining clusters in the forest.
524: 
525:     Suppose there are :math:`|u|` original observations
526:     :math:`u[0], \\ldots, u[|u|-1]` in cluster :math:`u` and
527:     :math:`|v|` original objects :math:`v[0], \\ldots, v[|v|-1]` in
528:     cluster :math:`v`. Recall :math:`s` and :math:`t` are
529:     combined to form cluster :math:`u`. Let :math:`v` be any
530:     remaining cluster in the forest that is not :math:`u`.
531: 
532:     The following are methods for calculating the distance between the
533:     newly formed cluster :math:`u` and each :math:`v`.
534: 
535:       * method='single' assigns
536: 
537:         .. math::
538:            d(u,v) = \\min(dist(u[i],v[j]))
539: 
540:         for all points :math:`i` in cluster :math:`u` and
541:         :math:`j` in cluster :math:`v`. This is also known as the
542:         Nearest Point Algorithm.
543: 
544:       * method='complete' assigns
545: 
546:         .. math::
547:            d(u, v) = \\max(dist(u[i],v[j]))
548: 
549:         for all points :math:`i` in cluster u and :math:`j` in
550:         cluster :math:`v`. This is also known by the Farthest Point
551:         Algorithm or Voor Hees Algorithm.
552: 
553:       * method='average' assigns
554: 
555:         .. math::
556:            d(u,v) = \\sum_{ij} \\frac{d(u[i], v[j])}
557:                                    {(|u|*|v|)}
558: 
559:         for all points :math:`i` and :math:`j` where :math:`|u|`
560:         and :math:`|v|` are the cardinalities of clusters :math:`u`
561:         and :math:`v`, respectively. This is also called the UPGMA
562:         algorithm.
563: 
564:       * method='weighted' assigns
565: 
566:         .. math::
567:            d(u,v) = (dist(s,v) + dist(t,v))/2
568: 
569:         where cluster u was formed with cluster s and t and v
570:         is a remaining cluster in the forest. (also called WPGMA)
571: 
572:       * method='centroid' assigns
573: 
574:         .. math::
575:            dist(s,t) = ||c_s-c_t||_2
576: 
577:         where :math:`c_s` and :math:`c_t` are the centroids of
578:         clusters :math:`s` and :math:`t`, respectively. When two
579:         clusters :math:`s` and :math:`t` are combined into a new
580:         cluster :math:`u`, the new centroid is computed over all the
581:         original objects in clusters :math:`s` and :math:`t`. The
582:         distance then becomes the Euclidean distance between the
583:         centroid of :math:`u` and the centroid of a remaining cluster
584:         :math:`v` in the forest. This is also known as the UPGMC
585:         algorithm.
586: 
587:       * method='median' assigns :math:`d(s,t)` like the ``centroid``
588:         method. When two clusters :math:`s` and :math:`t` are combined
589:         into a new cluster :math:`u`, the average of centroids s and t
590:         give the new centroid :math:`u`. This is also known as the
591:         WPGMC algorithm.
592: 
593:       * method='ward' uses the Ward variance minimization algorithm.
594:         The new entry :math:`d(u,v)` is computed as follows,
595: 
596:         .. math::
597: 
598:            d(u,v) = \\sqrt{\\frac{|v|+|s|}
599:                                {T}d(v,s)^2
600:                         + \\frac{|v|+|t|}
601:                                {T}d(v,t)^2
602:                         - \\frac{|v|}
603:                                {T}d(s,t)^2}
604: 
605:         where :math:`u` is the newly joined cluster consisting of
606:         clusters :math:`s` and :math:`t`, :math:`v` is an unused
607:         cluster in the forest, :math:`T=|v|+|s|+|t|`, and
608:         :math:`|*|` is the cardinality of its argument. This is also
609:         known as the incremental algorithm.
610: 
611:     Warning: When the minimum distance pair in the forest is chosen, there
612:     may be two or more pairs with the same minimum distance. This
613:     implementation may choose a different minimum than the MATLAB
614:     version.
615: 
616:     Parameters
617:     ----------
618:     y : ndarray
619:         A condensed distance matrix. A condensed distance matrix
620:         is a flat array containing the upper triangular of the distance matrix.
621:         This is the form that ``pdist`` returns. Alternatively, a collection of
622:         :math:`m` observation vectors in :math:`n` dimensions may be passed as
623:         an :math:`m` by :math:`n` array. All elements of the condensed distance
624:         matrix must be finite, i.e. no NaNs or infs.
625:     method : str, optional
626:         The linkage algorithm to use. See the ``Linkage Methods`` section below
627:         for full descriptions.
628:     metric : str or function, optional
629:         The distance metric to use in the case that y is a collection of
630:         observation vectors; ignored otherwise. See the ``pdist``
631:         function for a list of valid distance metrics. A custom distance
632:         function can also be used.
633:     optimal_ordering : bool, optional
634:         If True, the linkage matrix will be reordered so that the distance
635:         between successive leaves is minimal. This results in a more intuitive
636:         tree structure when the data are visualized. defaults to False, because
637:         this algorithm can be slow, particularly on large datasets [2]_. See 
638:         also the `optimal_leaf_ordering` function.
639:         
640:         .. versionadded:: 1.0.0
641: 
642:     Returns
643:     -------
644:     Z : ndarray
645:         The hierarchical clustering encoded as a linkage matrix.
646: 
647:     Notes
648:     -----
649:     1. For method 'single' an optimized algorithm based on minimum spanning
650:        tree is implemented. It has time complexity :math:`O(n^2)`.
651:        For methods 'complete', 'average', 'weighted' and 'ward' an algorithm
652:        called nearest-neighbors chain is implemented. It also has time
653:        complexity :math:`O(n^2)`.
654:        For other methods a naive algorithm is implemented with :math:`O(n^3)`
655:        time complexity.
656:        All algorithms use :math:`O(n^2)` memory.
657:        Refer to [1]_ for details about the algorithms.
658:     2. Methods 'centroid', 'median' and 'ward' are correctly defined only if
659:        Euclidean pairwise metric is used. If `y` is passed as precomputed
660:        pairwise distances, then it is a user responsibility to assure that
661:        these distances are in fact Euclidean, otherwise the produced result
662:        will be incorrect.
663: 
664:     See Also
665:     --------
666:     scipy.spatial.distance.pdist : pairwise distance metrics
667: 
668:     References
669:     ----------
670:     .. [1] Daniel Mullner, "Modern hierarchical, agglomerative clustering
671:            algorithms", :arXiv:`1109.2378v1`.
672:     .. [2] Ziv Bar-Joseph, David K. Gifford, Tommi S. Jaakkola, "Fast optimal
673:            leaf ordering for hierarchical clustering", 2001. Bioinformatics
674:            https://doi.org/10.1093/bioinformatics/17.suppl_1.S22
675: 
676:     Examples
677:     --------
678:     >>> from scipy.cluster.hierarchy import dendrogram, linkage
679:     >>> from matplotlib import pyplot as plt
680:     >>> X = [[i] for i in [2, 8, 0, 4, 1, 9, 9, 0]]
681: 
682:     >>> Z = linkage(X, 'ward')
683:     >>> fig = plt.figure(figsize=(25, 10))
684:     >>> dn = dendrogram(Z)
685: 
686:     >>> Z = linkage(X, 'single')
687:     >>> fig = plt.figure(figsize=(25, 10))
688:     >>> dn = dendrogram(Z)
689:     >>> plt.show()
690:     '''
691:     if method not in _LINKAGE_METHODS:
692:         raise ValueError("Invalid method: {0}".format(method))
693: 
694:     y = _convert_to_double(np.asarray(y, order='c'))
695: 
696:     if y.ndim == 1:
697:         distance.is_valid_y(y, throw=True, name='y')
698:         [y] = _copy_arrays_if_base_present([y])
699:     elif y.ndim == 2:
700:         if method in _EUCLIDEAN_METHODS and metric != 'euclidean':
701:             raise ValueError("Method '{0}' requires the distance metric "
702:                              "to be Euclidean".format(method))
703:         if y.shape[0] == y.shape[1] and np.allclose(np.diag(y), 0):
704:             if np.all(y >= 0) and np.allclose(y, y.T):
705:                 _warning('The symmetric non-negative hollow observation '
706:                          'matrix looks suspiciously like an uncondensed '
707:                          'distance matrix')
708:         y = distance.pdist(y, metric)
709:     else:
710:         raise ValueError("`y` must be 1 or 2 dimensional.")
711: 
712:     if not np.all(np.isfinite(y)):
713:         raise ValueError("The condensed distance matrix must contain only "
714:                          "finite values.")
715: 
716:     n = int(distance.num_obs_y(y))
717:     method_code = _LINKAGE_METHODS[method]
718: 
719:     if method == 'single':
720:         result = _hierarchy.mst_single_linkage(y, n)
721:     elif method in ['complete', 'average', 'weighted', 'ward']:
722:         result = _hierarchy.nn_chain(y, n, method_code)
723:     else:
724:         result = _hierarchy.fast_linkage(y, n, method_code)
725: 
726:     if optimal_ordering:
727:         return optimal_leaf_ordering(result, y)
728:     else:
729:         return result
730: 
731: 
732: class ClusterNode:
733:     '''
734:     A tree node class for representing a cluster.
735: 
736:     Leaf nodes correspond to original observations, while non-leaf nodes
737:     correspond to non-singleton clusters.
738: 
739:     The `to_tree` function converts a matrix returned by the linkage
740:     function into an easy-to-use tree representation.
741: 
742:     All parameter names are also attributes.
743: 
744:     Parameters
745:     ----------
746:     id : int
747:         The node id.
748:     left : ClusterNode instance, optional
749:         The left child tree node.
750:     right : ClusterNode instance, optional
751:         The right child tree node.
752:     dist : float, optional
753:         Distance for this cluster in the linkage matrix.
754:     count : int, optional
755:         The number of samples in this cluster.
756: 
757:     See Also
758:     --------
759:     to_tree : for converting a linkage matrix ``Z`` into a tree object.
760: 
761:     '''
762: 
763:     def __init__(self, id, left=None, right=None, dist=0, count=1):
764:         if id < 0:
765:             raise ValueError('The id must be non-negative.')
766:         if dist < 0:
767:             raise ValueError('The distance must be non-negative.')
768:         if (left is None and right is not None) or \
769:            (left is not None and right is None):
770:             raise ValueError('Only full or proper binary trees are permitted.'
771:                              '  This node has one child.')
772:         if count < 1:
773:             raise ValueError('A cluster must contain at least one original '
774:                              'observation.')
775:         self.id = id
776:         self.left = left
777:         self.right = right
778:         self.dist = dist
779:         if self.left is None:
780:             self.count = count
781:         else:
782:             self.count = left.count + right.count
783: 
784:     def __lt__(self, node):
785:         if not isinstance(node, ClusterNode):
786:             raise ValueError("Can't compare ClusterNode "
787:                              "to type {}".format(type(node)))
788:         return self.dist < node.dist
789: 
790:     def __gt__(self, node):
791:         if not isinstance(node, ClusterNode):
792:             raise ValueError("Can't compare ClusterNode "
793:                              "to type {}".format(type(node)))
794:         return self.dist > node.dist
795: 
796:     def __eq__(self, node):
797:         if not isinstance(node, ClusterNode):
798:             raise ValueError("Can't compare ClusterNode "
799:                              "to type {}".format(type(node)))
800:         return self.dist == node.dist
801: 
802:     def get_id(self):
803:         '''
804:         The identifier of the target node.
805: 
806:         For ``0 <= i < n``, `i` corresponds to original observation i.
807:         For ``n <= i < 2n-1``, `i` corresponds to non-singleton cluster formed
808:         at iteration ``i-n``.
809: 
810:         Returns
811:         -------
812:         id : int
813:             The identifier of the target node.
814: 
815:         '''
816:         return self.id
817: 
818:     def get_count(self):
819:         '''
820:         The number of leaf nodes (original observations) belonging to
821:         the cluster node nd. If the target node is a leaf, 1 is
822:         returned.
823: 
824:         Returns
825:         -------
826:         get_count : int
827:             The number of leaf nodes below the target node.
828: 
829:         '''
830:         return self.count
831: 
832:     def get_left(self):
833:         '''
834:         Return a reference to the left child tree object.
835: 
836:         Returns
837:         -------
838:         left : ClusterNode
839:             The left child of the target node.  If the node is a leaf,
840:             None is returned.
841: 
842:         '''
843:         return self.left
844: 
845:     def get_right(self):
846:         '''
847:         Return a reference to the right child tree object.
848: 
849:         Returns
850:         -------
851:         right : ClusterNode
852:             The left child of the target node.  If the node is a leaf,
853:             None is returned.
854: 
855:         '''
856:         return self.right
857: 
858:     def is_leaf(self):
859:         '''
860:         Return True if the target node is a leaf.
861: 
862:         Returns
863:         -------
864:         leafness : bool
865:             True if the target node is a leaf node.
866: 
867:         '''
868:         return self.left is None
869: 
870:     def pre_order(self, func=(lambda x: x.id)):
871:         '''
872:         Perform pre-order traversal without recursive function calls.
873: 
874:         When a leaf node is first encountered, ``func`` is called with
875:         the leaf node as its argument, and its result is appended to
876:         the list.
877: 
878:         For example, the statement::
879: 
880:            ids = root.pre_order(lambda x: x.id)
881: 
882:         returns a list of the node ids corresponding to the leaf nodes
883:         of the tree as they appear from left to right.
884: 
885:         Parameters
886:         ----------
887:         func : function
888:             Applied to each leaf ClusterNode object in the pre-order traversal.
889:             Given the ``i``-th leaf node in the pre-order traversal ``n[i]``,
890:             the result of ``func(n[i])`` is stored in ``L[i]``. If not
891:             provided, the index of the original observation to which the node
892:             corresponds is used.
893: 
894:         Returns
895:         -------
896:         L : list
897:             The pre-order traversal.
898: 
899:         '''
900:         # Do a preorder traversal, caching the result. To avoid having to do
901:         # recursion, we'll store the previous index we've visited in a vector.
902:         n = self.count
903: 
904:         curNode = [None] * (2 * n)
905:         lvisited = set()
906:         rvisited = set()
907:         curNode[0] = self
908:         k = 0
909:         preorder = []
910:         while k >= 0:
911:             nd = curNode[k]
912:             ndid = nd.id
913:             if nd.is_leaf():
914:                 preorder.append(func(nd))
915:                 k = k - 1
916:             else:
917:                 if ndid not in lvisited:
918:                     curNode[k + 1] = nd.left
919:                     lvisited.add(ndid)
920:                     k = k + 1
921:                 elif ndid not in rvisited:
922:                     curNode[k + 1] = nd.right
923:                     rvisited.add(ndid)
924:                     k = k + 1
925:                 # If we've visited the left and right of this non-leaf
926:                 # node already, go up in the tree.
927:                 else:
928:                     k = k - 1
929: 
930:         return preorder
931: 
932: 
933: _cnode_bare = ClusterNode(0)
934: _cnode_type = type(ClusterNode)
935: 
936: 
937: def _order_cluster_tree(Z):
938:     '''
939:     Return clustering nodes in bottom-up order by distance.
940: 
941:     Parameters
942:     ----------
943:     Z : scipy.cluster.linkage array
944:         The linkage matrix.
945: 
946:     Returns
947:     -------
948:     nodes : list
949:         A list of ClusterNode objects.
950:     '''
951:     q = deque()
952:     tree = to_tree(Z)
953:     q.append(tree)
954:     nodes = []
955: 
956:     while q:
957:         node = q.popleft()
958:         if not node.is_leaf():
959:             bisect.insort_left(nodes, node)
960:             q.append(node.get_right())
961:             q.append(node.get_left())
962:     return nodes
963: 
964: 
965: def cut_tree(Z, n_clusters=None, height=None):
966:     '''
967:     Given a linkage matrix Z, return the cut tree.
968: 
969:     Parameters
970:     ----------
971:     Z : scipy.cluster.linkage array
972:         The linkage matrix.
973:     n_clusters : array_like, optional
974:         Number of clusters in the tree at the cut point.
975:     height : array_like, optional
976:         The height at which to cut the tree.  Only possible for ultrametric
977:         trees.
978: 
979:     Returns
980:     -------
981:     cutree : array
982:         An array indicating group membership at each agglomeration step.  I.e.,
983:         for a full cut tree, in the first column each data point is in its own
984:         cluster.  At the next step, two nodes are merged.  Finally all
985:         singleton and non-singleton clusters are in one group.  If `n_clusters`
986:         or `height` is given, the columns correspond to the columns of
987:         `n_clusters` or `height`.
988: 
989:     Examples
990:     --------
991:     >>> from scipy import cluster
992:     >>> np.random.seed(23)
993:     >>> X = np.random.randn(50, 4)
994:     >>> Z = cluster.hierarchy.ward(X)
995:     >>> cutree = cluster.hierarchy.cut_tree(Z, n_clusters=[5, 10])
996:     >>> cutree[:10]
997:     array([[0, 0],
998:            [1, 1],
999:            [2, 2],
1000:            [3, 3],
1001:            [3, 4],
1002:            [2, 2],
1003:            [0, 0],
1004:            [1, 5],
1005:            [3, 6],
1006:            [4, 7]])
1007: 
1008:     '''
1009:     nobs = num_obs_linkage(Z)
1010:     nodes = _order_cluster_tree(Z)
1011: 
1012:     if height is not None and n_clusters is not None:
1013:         raise ValueError("At least one of either height or n_clusters "
1014:                          "must be None")
1015:     elif height is None and n_clusters is None:  # return the full cut tree
1016:         cols_idx = np.arange(nobs)
1017:     elif height is not None:
1018:         heights = np.array([x.dist for x in nodes])
1019:         cols_idx = np.searchsorted(heights, height)
1020:     else:
1021:         cols_idx = nobs - np.searchsorted(np.arange(nobs), n_clusters)
1022: 
1023:     try:
1024:         n_cols = len(cols_idx)
1025:     except TypeError:  # scalar
1026:         n_cols = 1
1027:         cols_idx = np.array([cols_idx])
1028: 
1029:     groups = np.zeros((n_cols, nobs), dtype=int)
1030:     last_group = np.arange(nobs)
1031:     if 0 in cols_idx:
1032:         groups[0] = last_group
1033: 
1034:     for i, node in enumerate(nodes):
1035:         idx = node.pre_order()
1036:         this_group = last_group.copy()
1037:         this_group[idx] = last_group[idx].min()
1038:         this_group[this_group > last_group[idx].max()] -= 1
1039:         if i + 1 in cols_idx:
1040:             groups[np.where(i + 1 == cols_idx)[0]] = this_group
1041:         last_group = this_group
1042: 
1043:     return groups.T
1044: 
1045: 
1046: def to_tree(Z, rd=False):
1047:     '''
1048:     Convert a linkage matrix into an easy-to-use tree object.
1049: 
1050:     The reference to the root `ClusterNode` object is returned (by default).
1051: 
1052:     Each `ClusterNode` object has a ``left``, ``right``, ``dist``, ``id``,
1053:     and ``count`` attribute. The left and right attributes point to
1054:     ClusterNode objects that were combined to generate the cluster.
1055:     If both are None then the `ClusterNode` object is a leaf node, its count
1056:     must be 1, and its distance is meaningless but set to 0.
1057: 
1058:     *Note: This function is provided for the convenience of the library
1059:     user. ClusterNodes are not used as input to any of the functions in this
1060:     library.*
1061: 
1062:     Parameters
1063:     ----------
1064:     Z : ndarray
1065:         The linkage matrix in proper form (see the `linkage`
1066:         function documentation).
1067:     rd : bool, optional
1068:         When False (default), a reference to the root `ClusterNode` object is
1069:         returned.  Otherwise, a tuple ``(r, d)`` is returned. ``r`` is a
1070:         reference to the root node while ``d`` is a list of `ClusterNode`
1071:         objects - one per original entry in the linkage matrix plus entries
1072:         for all clustering steps.  If a cluster id is
1073:         less than the number of samples ``n`` in the data that the linkage
1074:         matrix describes, then it corresponds to a singleton cluster (leaf
1075:         node).
1076:         See `linkage` for more information on the assignment of cluster ids
1077:         to clusters.
1078: 
1079:     Returns
1080:     -------
1081:     tree : ClusterNode or tuple (ClusterNode, list of ClusterNode)
1082:         If ``rd`` is False, a `ClusterNode`.
1083:         If ``rd`` is True, a list of length ``2*n - 1``, with ``n`` the number
1084:         of samples.  See the description of `rd` above for more details.
1085: 
1086:     See Also
1087:     --------
1088:     linkage, is_valid_linkage, ClusterNode
1089: 
1090:     Examples
1091:     --------
1092:     >>> from scipy.cluster import hierarchy
1093:     >>> x = np.random.rand(10).reshape(5, 2)
1094:     >>> Z = hierarchy.linkage(x)
1095:     >>> hierarchy.to_tree(Z)
1096:     <scipy.cluster.hierarchy.ClusterNode object at ...
1097:     >>> rootnode, nodelist = hierarchy.to_tree(Z, rd=True)
1098:     >>> rootnode
1099:     <scipy.cluster.hierarchy.ClusterNode object at ...
1100:     >>> len(nodelist)
1101:     9
1102: 
1103:     '''
1104:     Z = np.asarray(Z, order='c')
1105:     is_valid_linkage(Z, throw=True, name='Z')
1106: 
1107:     # Number of original objects is equal to the number of rows minus 1.
1108:     n = Z.shape[0] + 1
1109: 
1110:     # Create a list full of None's to store the node objects
1111:     d = [None] * (n * 2 - 1)
1112: 
1113:     # Create the nodes corresponding to the n original objects.
1114:     for i in xrange(0, n):
1115:         d[i] = ClusterNode(i)
1116: 
1117:     nd = None
1118: 
1119:     for i in xrange(0, n - 1):
1120:         fi = int(Z[i, 0])
1121:         fj = int(Z[i, 1])
1122:         if fi > i + n:
1123:             raise ValueError(('Corrupt matrix Z. Index to derivative cluster '
1124:                               'is used before it is formed. See row %d, '
1125:                               'column 0') % fi)
1126:         if fj > i + n:
1127:             raise ValueError(('Corrupt matrix Z. Index to derivative cluster '
1128:                               'is used before it is formed. See row %d, '
1129:                               'column 1') % fj)
1130:         nd = ClusterNode(i + n, d[fi], d[fj], Z[i, 2])
1131:         #                 ^ id   ^ left ^ right ^ dist
1132:         if Z[i, 3] != nd.count:
1133:             raise ValueError(('Corrupt matrix Z. The count Z[%d,3] is '
1134:                               'incorrect.') % i)
1135:         d[n + i] = nd
1136: 
1137:     if rd:
1138:         return (nd, d)
1139:     else:
1140:         return nd
1141: 
1142: 
1143: def optimal_leaf_ordering(Z, y, metric='euclidean'):
1144:     '''
1145:     Given a linkage matrix Z and distance, reorder the cut tree.
1146: 
1147:     Parameters
1148:     ----------
1149:     Z : ndarray
1150:         The hierarchical clustering encoded as a linkage matrix. See
1151:         `linkage` for more information on the return structure and
1152:         algorithm.
1153:     y : ndarray
1154:         The condensed distance matrix from which Z was generated.
1155:         Alternatively, a collection of m observation vectors in n
1156:         dimensions may be passed as a m by n array.
1157:     metric : str or function, optional
1158:         The distance metric to use in the case that y is a collection of
1159:         observation vectors; ignored otherwise. See the ``pdist``
1160:         function for a list of valid distance metrics. A custom distance
1161:         function can also be used.
1162:     
1163:     Returns
1164:     -------
1165:     Z_ordered : ndarray
1166:         A copy of the linkage matrix Z, reordered to minimize the distance
1167:         between adjacent leaves.
1168: 
1169:     Examples
1170:     --------
1171:     >>> from scipy.cluster import hierarchy
1172:     >>> np.random.seed(23)
1173:     >>> X = np.random.randn(10,10)
1174:     >>> Z = hierarchy.ward(X)
1175:     >>> hierarchy.leaves_list(Z)
1176:     array([0, 5, 3, 9, 6, 8, 1, 4, 2, 7], dtype=int32)
1177:     >>> hierarchy.leaves_list(hierarchy.optimal_leaf_ordering(Z, X))
1178:     array([3, 9, 0, 5, 8, 2, 7, 4, 1, 6], dtype=int32)
1179:     
1180:     '''
1181:     Z = np.asarray(Z, order='c')
1182:     is_valid_linkage(Z, throw=True, name='Z')
1183: 
1184:     y = _convert_to_double(np.asarray(y, order='c'))
1185: 
1186:     if y.ndim == 1:
1187:         distance.is_valid_y(y, throw=True, name='y')
1188:         [y] = _copy_arrays_if_base_present([y])
1189:     elif y.ndim == 2:
1190:         if y.shape[0] == y.shape[1] and np.allclose(np.diag(y), 0):
1191:             if np.all(y >= 0) and np.allclose(y, y.T):
1192:                 _warning('The symmetric non-negative hollow observation '
1193:                          'matrix looks suspiciously like an uncondensed '
1194:                          'distance matrix')
1195:         y = distance.pdist(y, metric)
1196:     else:
1197:         raise ValueError("`y` must be 1 or 2 dimensional.")
1198: 
1199:     if not np.all(np.isfinite(y)):
1200:         raise ValueError("The condensed distance matrix must contain only "
1201:                          "finite values.")
1202: 
1203:     return _optimal_leaf_ordering.optimal_leaf_ordering(Z, y)
1204: 
1205: 
1206: def _convert_to_bool(X):
1207:     if X.dtype != bool:
1208:         X = X.astype(bool)
1209:     if not X.flags.contiguous:
1210:         X = X.copy()
1211:     return X
1212: 
1213: 
1214: def _convert_to_double(X):
1215:     if X.dtype != np.double:
1216:         X = X.astype(np.double)
1217:     if not X.flags.contiguous:
1218:         X = X.copy()
1219:     return X
1220: 
1221: 
1222: def cophenet(Z, Y=None):
1223:     '''
1224:     Calculate the cophenetic distances between each observation in
1225:     the hierarchical clustering defined by the linkage ``Z``.
1226: 
1227:     Suppose ``p`` and ``q`` are original observations in
1228:     disjoint clusters ``s`` and ``t``, respectively and
1229:     ``s`` and ``t`` are joined by a direct parent cluster
1230:     ``u``. The cophenetic distance between observations
1231:     ``i`` and ``j`` is simply the distance between
1232:     clusters ``s`` and ``t``.
1233: 
1234:     Parameters
1235:     ----------
1236:     Z : ndarray
1237:         The hierarchical clustering encoded as an array
1238:         (see `linkage` function).
1239:     Y : ndarray (optional)
1240:         Calculates the cophenetic correlation coefficient ``c`` of a
1241:         hierarchical clustering defined by the linkage matrix `Z`
1242:         of a set of :math:`n` observations in :math:`m`
1243:         dimensions. `Y` is the condensed distance matrix from which
1244:         `Z` was generated.
1245: 
1246:     Returns
1247:     -------
1248:     c : ndarray
1249:         The cophentic correlation distance (if ``Y`` is passed).
1250:     d : ndarray
1251:         The cophenetic distance matrix in condensed form. The
1252:         :math:`ij` th entry is the cophenetic distance between
1253:         original observations :math:`i` and :math:`j`.
1254: 
1255:     '''
1256:     Z = np.asarray(Z, order='c')
1257:     is_valid_linkage(Z, throw=True, name='Z')
1258:     Zs = Z.shape
1259:     n = Zs[0] + 1
1260: 
1261:     zz = np.zeros((n * (n-1)) // 2, dtype=np.double)
1262:     # Since the C code does not support striding using strides.
1263:     # The dimensions are used instead.
1264:     Z = _convert_to_double(Z)
1265: 
1266:     _hierarchy.cophenetic_distances(Z, zz, int(n))
1267:     if Y is None:
1268:         return zz
1269: 
1270:     Y = np.asarray(Y, order='c')
1271:     distance.is_valid_y(Y, throw=True, name='Y')
1272: 
1273:     z = zz.mean()
1274:     y = Y.mean()
1275:     Yy = Y - y
1276:     Zz = zz - z
1277:     numerator = (Yy * Zz)
1278:     denomA = Yy**2
1279:     denomB = Zz**2
1280:     c = numerator.sum() / np.sqrt((denomA.sum() * denomB.sum()))
1281:     return (c, zz)
1282: 
1283: 
1284: def inconsistent(Z, d=2):
1285:     r'''
1286:     Calculate inconsistency statistics on a linkage matrix.
1287: 
1288:     Parameters
1289:     ----------
1290:     Z : ndarray
1291:         The :math:`(n-1)` by 4 matrix encoding the linkage (hierarchical
1292:         clustering).  See `linkage` documentation for more information on its
1293:         form.
1294:     d : int, optional
1295:         The number of links up to `d` levels below each non-singleton cluster.
1296: 
1297:     Returns
1298:     -------
1299:     R : ndarray
1300:         A :math:`(n-1)` by 5 matrix where the ``i``'th row contains the link
1301:         statistics for the non-singleton cluster ``i``. The link statistics are
1302:         computed over the link heights for links :math:`d` levels below the
1303:         cluster ``i``. ``R[i,0]`` and ``R[i,1]`` are the mean and standard
1304:         deviation of the link heights, respectively; ``R[i,2]`` is the number
1305:         of links included in the calculation; and ``R[i,3]`` is the
1306:         inconsistency coefficient,
1307: 
1308:         .. math:: \frac{\mathtt{Z[i,2]} - \mathtt{R[i,0]}} {R[i,1]}
1309: 
1310:     Notes
1311:     -----
1312:     This function behaves similarly to the MATLAB(TM) ``inconsistent``
1313:     function.
1314: 
1315:     Examples
1316:     --------
1317:     >>> from scipy.cluster.hierarchy import inconsistent, linkage
1318:     >>> from matplotlib import pyplot as plt
1319:     >>> X = [[i] for i in [2, 8, 0, 4, 1, 9, 9, 0]]
1320:     >>> Z = linkage(X, 'ward')
1321:     >>> print(Z)
1322:     [[  5.           6.           0.           2.        ]
1323:      [  2.           7.           0.           2.        ]
1324:      [  0.           4.           1.           2.        ]
1325:      [  1.           8.           1.15470054   3.        ]
1326:      [  9.          10.           2.12132034   4.        ]
1327:      [  3.          12.           4.11096096   5.        ]
1328:      [ 11.          13.          14.07183949   8.        ]]
1329:     >>> inconsistent(Z)
1330:     array([[ 0.        ,  0.        ,  1.        ,  0.        ],
1331:            [ 0.        ,  0.        ,  1.        ,  0.        ],
1332:            [ 1.        ,  0.        ,  1.        ,  0.        ],
1333:            [ 0.57735027,  0.81649658,  2.        ,  0.70710678],
1334:            [ 1.04044011,  1.06123822,  3.        ,  1.01850858],
1335:            [ 3.11614065,  1.40688837,  2.        ,  0.70710678],
1336:            [ 6.44583366,  6.76770586,  3.        ,  1.12682288]])
1337: 
1338:     '''
1339:     Z = np.asarray(Z, order='c')
1340: 
1341:     Zs = Z.shape
1342:     is_valid_linkage(Z, throw=True, name='Z')
1343:     if (not d == np.floor(d)) or d < 0:
1344:         raise ValueError('The second argument d must be a nonnegative '
1345:                          'integer value.')
1346: 
1347:     # Since the C code does not support striding using strides.
1348:     # The dimensions are used instead.
1349:     [Z] = _copy_arrays_if_base_present([Z])
1350: 
1351:     n = Zs[0] + 1
1352:     R = np.zeros((n - 1, 4), dtype=np.double)
1353: 
1354:     _hierarchy.inconsistent(Z, R, int(n), int(d))
1355:     return R
1356: 
1357: 
1358: def from_mlab_linkage(Z):
1359:     '''
1360:     Convert a linkage matrix generated by MATLAB(TM) to a new
1361:     linkage matrix compatible with this module.
1362: 
1363:     The conversion does two things:
1364: 
1365:      * the indices are converted from ``1..N`` to ``0..(N-1)`` form,
1366:        and
1367: 
1368:      * a fourth column ``Z[:,3]`` is added where ``Z[i,3]`` represents the
1369:        number of original observations (leaves) in the non-singleton
1370:        cluster ``i``.
1371: 
1372:     This function is useful when loading in linkages from legacy data
1373:     files generated by MATLAB.
1374: 
1375:     Parameters
1376:     ----------
1377:     Z : ndarray
1378:         A linkage matrix generated by MATLAB(TM).
1379: 
1380:     Returns
1381:     -------
1382:     ZS : ndarray
1383:         A linkage matrix compatible with ``scipy.cluster.hierarchy``.
1384: 
1385:     '''
1386:     Z = np.asarray(Z, dtype=np.double, order='c')
1387:     Zs = Z.shape
1388: 
1389:     # If it's empty, return it.
1390:     if len(Zs) == 0 or (len(Zs) == 1 and Zs[0] == 0):
1391:         return Z.copy()
1392: 
1393:     if len(Zs) != 2:
1394:         raise ValueError("The linkage array must be rectangular.")
1395: 
1396:     # If it contains no rows, return it.
1397:     if Zs[0] == 0:
1398:         return Z.copy()
1399: 
1400:     Zpart = Z.copy()
1401:     if Zpart[:, 0:2].min() != 1.0 and Zpart[:, 0:2].max() != 2 * Zs[0]:
1402:         raise ValueError('The format of the indices is not 1..N')
1403: 
1404:     Zpart[:, 0:2] -= 1.0
1405:     CS = np.zeros((Zs[0],), dtype=np.double)
1406:     _hierarchy.calculate_cluster_sizes(Zpart, CS, int(Zs[0]) + 1)
1407:     return np.hstack([Zpart, CS.reshape(Zs[0], 1)])
1408: 
1409: 
1410: def to_mlab_linkage(Z):
1411:     '''
1412:     Convert a linkage matrix to a MATLAB(TM) compatible one.
1413: 
1414:     Converts a linkage matrix ``Z`` generated by the linkage function
1415:     of this module to a MATLAB(TM) compatible one. The return linkage
1416:     matrix has the last column removed and the cluster indices are
1417:     converted to ``1..N`` indexing.
1418: 
1419:     Parameters
1420:     ----------
1421:     Z : ndarray
1422:         A linkage matrix generated by ``scipy.cluster.hierarchy``.
1423: 
1424:     Returns
1425:     -------
1426:     to_mlab_linkage : ndarray
1427:         A linkage matrix compatible with MATLAB(TM)'s hierarchical
1428:         clustering functions.
1429: 
1430:         The return linkage matrix has the last column removed
1431:         and the cluster indices are converted to ``1..N`` indexing.
1432: 
1433:     '''
1434:     Z = np.asarray(Z, order='c', dtype=np.double)
1435:     Zs = Z.shape
1436:     if len(Zs) == 0 or (len(Zs) == 1 and Zs[0] == 0):
1437:         return Z.copy()
1438:     is_valid_linkage(Z, throw=True, name='Z')
1439: 
1440:     ZP = Z[:, 0:3].copy()
1441:     ZP[:, 0:2] += 1.0
1442: 
1443:     return ZP
1444: 
1445: 
1446: def is_monotonic(Z):
1447:     '''
1448:     Return True if the linkage passed is monotonic.
1449: 
1450:     The linkage is monotonic if for every cluster :math:`s` and :math:`t`
1451:     joined, the distance between them is no less than the distance
1452:     between any previously joined clusters.
1453: 
1454:     Parameters
1455:     ----------
1456:     Z : ndarray
1457:         The linkage matrix to check for monotonicity.
1458: 
1459:     Returns
1460:     -------
1461:     b : bool
1462:         A boolean indicating whether the linkage is monotonic.
1463: 
1464:     '''
1465:     Z = np.asarray(Z, order='c')
1466:     is_valid_linkage(Z, throw=True, name='Z')
1467: 
1468:     # We expect the i'th value to be greater than its successor.
1469:     return (Z[1:, 2] >= Z[:-1, 2]).all()
1470: 
1471: 
1472: def is_valid_im(R, warning=False, throw=False, name=None):
1473:     '''Return True if the inconsistency matrix passed is valid.
1474: 
1475:     It must be a :math:`n` by 4 array of doubles. The standard
1476:     deviations ``R[:,1]`` must be nonnegative. The link counts
1477:     ``R[:,2]`` must be positive and no greater than :math:`n-1`.
1478: 
1479:     Parameters
1480:     ----------
1481:     R : ndarray
1482:         The inconsistency matrix to check for validity.
1483:     warning : bool, optional
1484:          When True, issues a Python warning if the linkage
1485:          matrix passed is invalid.
1486:     throw : bool, optional
1487:          When True, throws a Python exception if the linkage
1488:          matrix passed is invalid.
1489:     name : str, optional
1490:          This string refers to the variable name of the invalid
1491:          linkage matrix.
1492: 
1493:     Returns
1494:     -------
1495:     b : bool
1496:         True if the inconsistency matrix is valid.
1497: 
1498:     '''
1499:     R = np.asarray(R, order='c')
1500:     valid = True
1501:     name_str = "%r " % name if name else ''
1502:     try:
1503:         if type(R) != np.ndarray:
1504:             raise TypeError('Variable %spassed as inconsistency matrix is not '
1505:                             'a numpy array.' % name_str)
1506:         if R.dtype != np.double:
1507:             raise TypeError('Inconsistency matrix %smust contain doubles '
1508:                             '(double).' % name_str)
1509:         if len(R.shape) != 2:
1510:             raise ValueError('Inconsistency matrix %smust have shape=2 (i.e. '
1511:                              'be two-dimensional).' % name_str)
1512:         if R.shape[1] != 4:
1513:             raise ValueError('Inconsistency matrix %smust have 4 columns.' %
1514:                              name_str)
1515:         if R.shape[0] < 1:
1516:             raise ValueError('Inconsistency matrix %smust have at least one '
1517:                              'row.' % name_str)
1518:         if (R[:, 0] < 0).any():
1519:             raise ValueError('Inconsistency matrix %scontains negative link '
1520:                              'height means.' % name_str)
1521:         if (R[:, 1] < 0).any():
1522:             raise ValueError('Inconsistency matrix %scontains negative link '
1523:                              'height standard deviations.' % name_str)
1524:         if (R[:, 2] < 0).any():
1525:             raise ValueError('Inconsistency matrix %scontains negative link '
1526:                              'counts.' % name_str)
1527:     except Exception as e:
1528:         if throw:
1529:             raise
1530:         if warning:
1531:             _warning(str(e))
1532:         valid = False
1533: 
1534:     return valid
1535: 
1536: 
1537: def is_valid_linkage(Z, warning=False, throw=False, name=None):
1538:     '''
1539:     Check the validity of a linkage matrix.
1540: 
1541:     A linkage matrix is valid if it is a two dimensional array (type double)
1542:     with :math:`n` rows and 4 columns.  The first two columns must contain
1543:     indices between 0 and :math:`2n-1`. For a given row ``i``, the following
1544:     two expressions have to hold:
1545: 
1546:     .. math::
1547: 
1548:         0 \\leq \\mathtt{Z[i,0]} \\leq i+n-1
1549:         0 \\leq Z[i,1] \\leq i+n-1
1550: 
1551:     I.e. a cluster cannot join another cluster unless the cluster being joined
1552:     has been generated.
1553: 
1554:     Parameters
1555:     ----------
1556:     Z : array_like
1557:         Linkage matrix.
1558:     warning : bool, optional
1559:         When True, issues a Python warning if the linkage
1560:         matrix passed is invalid.
1561:     throw : bool, optional
1562:         When True, throws a Python exception if the linkage
1563:         matrix passed is invalid.
1564:     name : str, optional
1565:         This string refers to the variable name of the invalid
1566:         linkage matrix.
1567: 
1568:     Returns
1569:     -------
1570:     b : bool
1571:         True if the inconsistency matrix is valid.
1572: 
1573:     '''
1574:     Z = np.asarray(Z, order='c')
1575:     valid = True
1576:     name_str = "%r " % name if name else ''
1577:     try:
1578:         if type(Z) != np.ndarray:
1579:             raise TypeError('Passed linkage argument %sis not a valid array.' %
1580:                             name_str)
1581:         if Z.dtype != np.double:
1582:             raise TypeError('Linkage matrix %smust contain doubles.' % name_str)
1583:         if len(Z.shape) != 2:
1584:             raise ValueError('Linkage matrix %smust have shape=2 (i.e. be '
1585:                              'two-dimensional).' % name_str)
1586:         if Z.shape[1] != 4:
1587:             raise ValueError('Linkage matrix %smust have 4 columns.' % name_str)
1588:         if Z.shape[0] == 0:
1589:             raise ValueError('Linkage must be computed on at least two '
1590:                              'observations.')
1591:         n = Z.shape[0]
1592:         if n > 1:
1593:             if ((Z[:, 0] < 0).any() or (Z[:, 1] < 0).any()):
1594:                 raise ValueError('Linkage %scontains negative indices.' %
1595:                                  name_str)
1596:             if (Z[:, 2] < 0).any():
1597:                 raise ValueError('Linkage %scontains negative distances.' %
1598:                                  name_str)
1599:             if (Z[:, 3] < 0).any():
1600:                 raise ValueError('Linkage %scontains negative counts.' %
1601:                                  name_str)
1602:         if _check_hierarchy_uses_cluster_before_formed(Z):
1603:             raise ValueError('Linkage %suses non-singleton cluster before '
1604:                              'it is formed.' % name_str)
1605:         if _check_hierarchy_uses_cluster_more_than_once(Z):
1606:             raise ValueError('Linkage %suses the same cluster more than once.'
1607:                              % name_str)
1608:     except Exception as e:
1609:         if throw:
1610:             raise
1611:         if warning:
1612:             _warning(str(e))
1613:         valid = False
1614: 
1615:     return valid
1616: 
1617: 
1618: def _check_hierarchy_uses_cluster_before_formed(Z):
1619:     n = Z.shape[0] + 1
1620:     for i in xrange(0, n - 1):
1621:         if Z[i, 0] >= n + i or Z[i, 1] >= n + i:
1622:             return True
1623:     return False
1624: 
1625: 
1626: def _check_hierarchy_uses_cluster_more_than_once(Z):
1627:     n = Z.shape[0] + 1
1628:     chosen = set([])
1629:     for i in xrange(0, n - 1):
1630:         if (Z[i, 0] in chosen) or (Z[i, 1] in chosen) or Z[i, 0] == Z[i, 1]:
1631:             return True
1632:         chosen.add(Z[i, 0])
1633:         chosen.add(Z[i, 1])
1634:     return False
1635: 
1636: 
1637: def _check_hierarchy_not_all_clusters_used(Z):
1638:     n = Z.shape[0] + 1
1639:     chosen = set([])
1640:     for i in xrange(0, n - 1):
1641:         chosen.add(int(Z[i, 0]))
1642:         chosen.add(int(Z[i, 1]))
1643:     must_chosen = set(range(0, 2 * n - 2))
1644:     return len(must_chosen.difference(chosen)) > 0
1645: 
1646: 
1647: def num_obs_linkage(Z):
1648:     '''
1649:     Return the number of original observations of the linkage matrix passed.
1650: 
1651:     Parameters
1652:     ----------
1653:     Z : ndarray
1654:         The linkage matrix on which to perform the operation.
1655: 
1656:     Returns
1657:     -------
1658:     n : int
1659:         The number of original observations in the linkage.
1660: 
1661:     '''
1662:     Z = np.asarray(Z, order='c')
1663:     is_valid_linkage(Z, throw=True, name='Z')
1664:     return (Z.shape[0] + 1)
1665: 
1666: 
1667: def correspond(Z, Y):
1668:     '''
1669:     Check for correspondence between linkage and condensed distance matrices.
1670: 
1671:     They must have the same number of original observations for
1672:     the check to succeed.
1673: 
1674:     This function is useful as a sanity check in algorithms that make
1675:     extensive use of linkage and distance matrices that must
1676:     correspond to the same set of original observations.
1677: 
1678:     Parameters
1679:     ----------
1680:     Z : array_like
1681:         The linkage matrix to check for correspondence.
1682:     Y : array_like
1683:         The condensed distance matrix to check for correspondence.
1684: 
1685:     Returns
1686:     -------
1687:     b : bool
1688:         A boolean indicating whether the linkage matrix and distance
1689:         matrix could possibly correspond to one another.
1690: 
1691:     '''
1692:     is_valid_linkage(Z, throw=True)
1693:     distance.is_valid_y(Y, throw=True)
1694:     Z = np.asarray(Z, order='c')
1695:     Y = np.asarray(Y, order='c')
1696:     return distance.num_obs_y(Y) == num_obs_linkage(Z)
1697: 
1698: 
1699: def fcluster(Z, t, criterion='inconsistent', depth=2, R=None, monocrit=None):
1700:     '''
1701:     Form flat clusters from the hierarchical clustering defined by
1702:     the given linkage matrix.
1703: 
1704:     Parameters
1705:     ----------
1706:     Z : ndarray
1707:         The hierarchical clustering encoded with the matrix returned
1708:         by the `linkage` function.
1709:     t : float
1710:         The threshold to apply when forming flat clusters.
1711:     criterion : str, optional
1712:         The criterion to use in forming flat clusters. This can
1713:         be any of the following values:
1714: 
1715:           ``inconsistent`` : If a cluster node and all its
1716:               descendants have an inconsistent value less than or equal
1717:               to `t` then all its leaf descendants belong to the
1718:               same flat cluster. When no non-singleton cluster meets
1719:               this criterion, every node is assigned to its own
1720:               cluster. (Default)
1721: 
1722:           ``distance`` : Forms flat clusters so that the original
1723:               observations in each flat cluster have no greater a
1724:               cophenetic distance than `t`.
1725: 
1726:           ``maxclust`` : Finds a minimum threshold ``r`` so that
1727:               the cophenetic distance between any two original
1728:               observations in the same flat cluster is no more than
1729:               ``r`` and no more than `t` flat clusters are formed.
1730: 
1731:           ``monocrit`` : Forms a flat cluster from a cluster node c
1732:               with index i when ``monocrit[j] <= t``.
1733: 
1734:               For example, to threshold on the maximum mean distance
1735:               as computed in the inconsistency matrix R with a
1736:               threshold of 0.8 do::
1737: 
1738:                   MR = maxRstat(Z, R, 3)
1739:                   cluster(Z, t=0.8, criterion='monocrit', monocrit=MR)
1740: 
1741:           ``maxclust_monocrit`` : Forms a flat cluster from a
1742:               non-singleton cluster node ``c`` when ``monocrit[i] <=
1743:               r`` for all cluster indices ``i`` below and including
1744:               ``c``. ``r`` is minimized such that no more than ``t``
1745:               flat clusters are formed. monocrit must be
1746:               monotonic. For example, to minimize the threshold t on
1747:               maximum inconsistency values so that no more than 3 flat
1748:               clusters are formed, do::
1749: 
1750:                   MI = maxinconsts(Z, R)
1751:                   cluster(Z, t=3, criterion='maxclust_monocrit', monocrit=MI)
1752: 
1753:     depth : int, optional
1754:         The maximum depth to perform the inconsistency calculation.
1755:         It has no meaning for the other criteria. Default is 2.
1756:     R : ndarray, optional
1757:         The inconsistency matrix to use for the 'inconsistent'
1758:         criterion. This matrix is computed if not provided.
1759:     monocrit : ndarray, optional
1760:         An array of length n-1. `monocrit[i]` is the
1761:         statistics upon which non-singleton i is thresholded. The
1762:         monocrit vector must be monotonic, i.e. given a node c with
1763:         index i, for all node indices j corresponding to nodes
1764:         below c, ``monocrit[i] >= monocrit[j]``.
1765: 
1766:     Returns
1767:     -------
1768:     fcluster : ndarray
1769:         An array of length ``n``. ``T[i]`` is the flat cluster number to
1770:         which original observation ``i`` belongs.
1771: 
1772:     '''
1773:     Z = np.asarray(Z, order='c')
1774:     is_valid_linkage(Z, throw=True, name='Z')
1775: 
1776:     n = Z.shape[0] + 1
1777:     T = np.zeros((n,), dtype='i')
1778: 
1779:     # Since the C code does not support striding using strides.
1780:     # The dimensions are used instead.
1781:     [Z] = _copy_arrays_if_base_present([Z])
1782: 
1783:     if criterion == 'inconsistent':
1784:         if R is None:
1785:             R = inconsistent(Z, depth)
1786:         else:
1787:             R = np.asarray(R, order='c')
1788:             is_valid_im(R, throw=True, name='R')
1789:             # Since the C code does not support striding using strides.
1790:             # The dimensions are used instead.
1791:             [R] = _copy_arrays_if_base_present([R])
1792:         _hierarchy.cluster_in(Z, R, T, float(t), int(n))
1793:     elif criterion == 'distance':
1794:         _hierarchy.cluster_dist(Z, T, float(t), int(n))
1795:     elif criterion == 'maxclust':
1796:         _hierarchy.cluster_maxclust_dist(Z, T, int(n), int(t))
1797:     elif criterion == 'monocrit':
1798:         [monocrit] = _copy_arrays_if_base_present([monocrit])
1799:         _hierarchy.cluster_monocrit(Z, monocrit, T, float(t), int(n))
1800:     elif criterion == 'maxclust_monocrit':
1801:         [monocrit] = _copy_arrays_if_base_present([monocrit])
1802:         _hierarchy.cluster_maxclust_monocrit(Z, monocrit, T, int(n), int(t))
1803:     else:
1804:         raise ValueError('Invalid cluster formation criterion: %s'
1805:                          % str(criterion))
1806:     return T
1807: 
1808: 
1809: def fclusterdata(X, t, criterion='inconsistent',
1810:                  metric='euclidean', depth=2, method='single', R=None):
1811:     '''
1812:     Cluster observation data using a given metric.
1813: 
1814:     Clusters the original observations in the n-by-m data
1815:     matrix X (n observations in m dimensions), using the euclidean
1816:     distance metric to calculate distances between original observations,
1817:     performs hierarchical clustering using the single linkage algorithm,
1818:     and forms flat clusters using the inconsistency method with `t` as the
1819:     cut-off threshold.
1820: 
1821:     A one-dimensional array ``T`` of length ``n`` is returned. ``T[i]`` is
1822:     the index of the flat cluster to which the original observation ``i``
1823:     belongs.
1824: 
1825:     Parameters
1826:     ----------
1827:     X : (N, M) ndarray
1828:         N by M data matrix with N observations in M dimensions.
1829:     t : float
1830:         The threshold to apply when forming flat clusters.
1831:     criterion : str, optional
1832:         Specifies the criterion for forming flat clusters.  Valid
1833:         values are 'inconsistent' (default), 'distance', or 'maxclust'
1834:         cluster formation algorithms. See `fcluster` for descriptions.
1835:     metric : str, optional
1836:         The distance metric for calculating pairwise distances. See
1837:         ``distance.pdist`` for descriptions and linkage to verify
1838:         compatibility with the linkage method.
1839:     depth : int, optional
1840:         The maximum depth for the inconsistency calculation. See
1841:         `inconsistent` for more information.
1842:     method : str, optional
1843:         The linkage method to use (single, complete, average,
1844:         weighted, median centroid, ward). See `linkage` for more
1845:         information. Default is "single".
1846:     R : ndarray, optional
1847:         The inconsistency matrix. It will be computed if necessary
1848:         if it is not passed.
1849: 
1850:     Returns
1851:     -------
1852:     fclusterdata : ndarray
1853:         A vector of length n. T[i] is the flat cluster number to
1854:         which original observation i belongs.
1855: 
1856:     See Also
1857:     --------
1858:     scipy.spatial.distance.pdist : pairwise distance metrics
1859: 
1860:     Notes
1861:     -----
1862:     This function is similar to the MATLAB function ``clusterdata``.
1863: 
1864:     '''
1865:     X = np.asarray(X, order='c', dtype=np.double)
1866: 
1867:     if type(X) != np.ndarray or len(X.shape) != 2:
1868:         raise TypeError('The observation matrix X must be an n by m numpy '
1869:                         'array.')
1870: 
1871:     Y = distance.pdist(X, metric=metric)
1872:     Z = linkage(Y, method=method)
1873:     if R is None:
1874:         R = inconsistent(Z, d=depth)
1875:     else:
1876:         R = np.asarray(R, order='c')
1877:     T = fcluster(Z, criterion=criterion, depth=depth, R=R, t=t)
1878:     return T
1879: 
1880: 
1881: def leaves_list(Z):
1882:     '''
1883:     Return a list of leaf node ids.
1884: 
1885:     The return corresponds to the observation vector index as it appears
1886:     in the tree from left to right. Z is a linkage matrix.
1887: 
1888:     Parameters
1889:     ----------
1890:     Z : ndarray
1891:         The hierarchical clustering encoded as a matrix.  `Z` is
1892:         a linkage matrix.  See `linkage` for more information.
1893: 
1894:     Returns
1895:     -------
1896:     leaves_list : ndarray
1897:         The list of leaf node ids.
1898: 
1899:     '''
1900:     Z = np.asarray(Z, order='c')
1901:     is_valid_linkage(Z, throw=True, name='Z')
1902:     n = Z.shape[0] + 1
1903:     ML = np.zeros((n,), dtype='i')
1904:     [Z] = _copy_arrays_if_base_present([Z])
1905:     _hierarchy.prelist(Z, ML, int(n))
1906:     return ML
1907: 
1908: 
1909: # Maps number of leaves to text size.
1910: #
1911: # p <= 20, size="12"
1912: # 20 < p <= 30, size="10"
1913: # 30 < p <= 50, size="8"
1914: # 50 < p <= np.inf, size="6"
1915: 
1916: _dtextsizes = {20: 12, 30: 10, 50: 8, 85: 6, np.inf: 5}
1917: _drotation = {20: 0, 40: 45, np.inf: 90}
1918: _dtextsortedkeys = list(_dtextsizes.keys())
1919: _dtextsortedkeys.sort()
1920: _drotationsortedkeys = list(_drotation.keys())
1921: _drotationsortedkeys.sort()
1922: 
1923: 
1924: def _remove_dups(L):
1925:     '''
1926:     Remove duplicates AND preserve the original order of the elements.
1927: 
1928:     The set class is not guaranteed to do this.
1929:     '''
1930:     seen_before = set([])
1931:     L2 = []
1932:     for i in L:
1933:         if i not in seen_before:
1934:             seen_before.add(i)
1935:             L2.append(i)
1936:     return L2
1937: 
1938: 
1939: def _get_tick_text_size(p):
1940:     for k in _dtextsortedkeys:
1941:         if p <= k:
1942:             return _dtextsizes[k]
1943: 
1944: 
1945: def _get_tick_rotation(p):
1946:     for k in _drotationsortedkeys:
1947:         if p <= k:
1948:             return _drotation[k]
1949: 
1950: 
1951: def _plot_dendrogram(icoords, dcoords, ivl, p, n, mh, orientation,
1952:                      no_labels, color_list, leaf_font_size=None,
1953:                      leaf_rotation=None, contraction_marks=None,
1954:                      ax=None, above_threshold_color='b'):
1955:     # Import matplotlib here so that it's not imported unless dendrograms
1956:     # are plotted. Raise an informative error if importing fails.
1957:     try:
1958:         # if an axis is provided, don't use pylab at all
1959:         if ax is None:
1960:             import matplotlib.pylab
1961:         import matplotlib.patches
1962:         import matplotlib.collections
1963:     except ImportError:
1964:         raise ImportError("You must install the matplotlib library to plot "
1965:                           "the dendrogram. Use no_plot=True to calculate the "
1966:                           "dendrogram without plotting.")
1967: 
1968:     if ax is None:
1969:         ax = matplotlib.pylab.gca()
1970:         # if we're using pylab, we want to trigger a draw at the end
1971:         trigger_redraw = True
1972:     else:
1973:         trigger_redraw = False
1974: 
1975:     # Independent variable plot width
1976:     ivw = len(ivl) * 10
1977:     # Dependent variable plot height
1978:     dvw = mh + mh * 0.05
1979: 
1980:     iv_ticks = np.arange(5, len(ivl) * 10 + 5, 10)
1981:     if orientation in ('top', 'bottom'):
1982:         if orientation == 'top':
1983:             ax.set_ylim([0, dvw])
1984:             ax.set_xlim([0, ivw])
1985:         else:
1986:             ax.set_ylim([dvw, 0])
1987:             ax.set_xlim([0, ivw])
1988: 
1989:         xlines = icoords
1990:         ylines = dcoords
1991:         if no_labels:
1992:             ax.set_xticks([])
1993:             ax.set_xticklabels([])
1994:         else:
1995:             ax.set_xticks(iv_ticks)
1996: 
1997:             if orientation == 'top':
1998:                 ax.xaxis.set_ticks_position('bottom')
1999:             else:
2000:                 ax.xaxis.set_ticks_position('top')
2001: 
2002:             # Make the tick marks invisible because they cover up the links
2003:             for line in ax.get_xticklines():
2004:                 line.set_visible(False)
2005: 
2006:             leaf_rot = (float(_get_tick_rotation(len(ivl)))
2007:                         if (leaf_rotation is None) else leaf_rotation)
2008:             leaf_font = (float(_get_tick_text_size(len(ivl)))
2009:                          if (leaf_font_size is None) else leaf_font_size)
2010:             ax.set_xticklabels(ivl, rotation=leaf_rot, size=leaf_font)
2011: 
2012:     elif orientation in ('left', 'right'):
2013:         if orientation == 'left':
2014:             ax.set_xlim([dvw, 0])
2015:             ax.set_ylim([0, ivw])
2016:         else:
2017:             ax.set_xlim([0, dvw])
2018:             ax.set_ylim([0, ivw])
2019: 
2020:         xlines = dcoords
2021:         ylines = icoords
2022:         if no_labels:
2023:             ax.set_yticks([])
2024:             ax.set_yticklabels([])
2025:         else:
2026:             ax.set_yticks(iv_ticks)
2027: 
2028:             if orientation == 'left':
2029:                 ax.yaxis.set_ticks_position('right')
2030:             else:
2031:                 ax.yaxis.set_ticks_position('left')
2032: 
2033:             # Make the tick marks invisible because they cover up the links
2034:             for line in ax.get_yticklines():
2035:                 line.set_visible(False)
2036: 
2037:             leaf_font = (float(_get_tick_text_size(len(ivl)))
2038:                          if (leaf_font_size is None) else leaf_font_size)
2039: 
2040:             if leaf_rotation is not None:
2041:                 ax.set_yticklabels(ivl, rotation=leaf_rotation, size=leaf_font)
2042:             else:
2043:                 ax.set_yticklabels(ivl, size=leaf_font)
2044: 
2045:     # Let's use collections instead. This way there is a separate legend item
2046:     # for each tree grouping, rather than stupidly one for each line segment.
2047:     colors_used = _remove_dups(color_list)
2048:     color_to_lines = {}
2049:     for color in colors_used:
2050:         color_to_lines[color] = []
2051:     for (xline, yline, color) in zip(xlines, ylines, color_list):
2052:         color_to_lines[color].append(list(zip(xline, yline)))
2053: 
2054:     colors_to_collections = {}
2055:     # Construct the collections.
2056:     for color in colors_used:
2057:         coll = matplotlib.collections.LineCollection(color_to_lines[color],
2058:                                                      colors=(color,))
2059:         colors_to_collections[color] = coll
2060: 
2061:     # Add all the groupings below the color threshold.
2062:     for color in colors_used:
2063:         if color != above_threshold_color:
2064:             ax.add_collection(colors_to_collections[color])
2065:     # If there's a grouping of links above the color threshold, it goes last.
2066:     if above_threshold_color in colors_to_collections:
2067:         ax.add_collection(colors_to_collections[above_threshold_color])
2068: 
2069:     if contraction_marks is not None:
2070:         Ellipse = matplotlib.patches.Ellipse
2071:         for (x, y) in contraction_marks:
2072:             if orientation in ('left', 'right'):
2073:                 e = Ellipse((y, x), width=dvw / 100, height=1.0)
2074:             else:
2075:                 e = Ellipse((x, y), width=1.0, height=dvw / 100)
2076:             ax.add_artist(e)
2077:             e.set_clip_box(ax.bbox)
2078:             e.set_alpha(0.5)
2079:             e.set_facecolor('k')
2080: 
2081:     if trigger_redraw:
2082:         matplotlib.pylab.draw_if_interactive()
2083: 
2084: 
2085: _link_line_colors = ['g', 'r', 'c', 'm', 'y', 'k']
2086: 
2087: 
2088: def set_link_color_palette(palette):
2089:     '''
2090:     Set list of matplotlib color codes for use by dendrogram.
2091: 
2092:     Note that this palette is global (i.e. setting it once changes the colors
2093:     for all subsequent calls to `dendrogram`) and that it affects only the
2094:     the colors below ``color_threshold``.
2095: 
2096:     Note that `dendrogram` also accepts a custom coloring function through its
2097:     ``link_color_func`` keyword, which is more flexible and non-global.
2098: 
2099:     Parameters
2100:     ----------
2101:     palette : list of str or None
2102:         A list of matplotlib color codes.  The order of the color codes is the
2103:         order in which the colors are cycled through when color thresholding in
2104:         the dendrogram.
2105: 
2106:         If ``None``, resets the palette to its default (which is
2107:         ``['g', 'r', 'c', 'm', 'y', 'k']``).
2108: 
2109:     Returns
2110:     -------
2111:     None
2112: 
2113:     See Also
2114:     --------
2115:     dendrogram
2116: 
2117:     Notes
2118:     -----
2119:     Ability to reset the palette with ``None`` added in Scipy 0.17.0.
2120: 
2121:     Examples
2122:     --------
2123:     >>> from scipy.cluster import hierarchy
2124:     >>> ytdist = np.array([662., 877., 255., 412., 996., 295., 468., 268.,
2125:     ...                    400., 754., 564., 138., 219., 869., 669.])
2126:     >>> Z = hierarchy.linkage(ytdist, 'single')
2127:     >>> dn = hierarchy.dendrogram(Z, no_plot=True)
2128:     >>> dn['color_list']
2129:     ['g', 'b', 'b', 'b', 'b']
2130:     >>> hierarchy.set_link_color_palette(['c', 'm', 'y', 'k'])
2131:     >>> dn = hierarchy.dendrogram(Z, no_plot=True)
2132:     >>> dn['color_list']
2133:     ['c', 'b', 'b', 'b', 'b']
2134:     >>> dn = hierarchy.dendrogram(Z, no_plot=True, color_threshold=267,
2135:     ...                           above_threshold_color='k')
2136:     >>> dn['color_list']
2137:     ['c', 'm', 'm', 'k', 'k']
2138: 
2139:     Now reset the color palette to its default:
2140: 
2141:     >>> hierarchy.set_link_color_palette(None)
2142: 
2143:     '''
2144:     if palette is None:
2145:         # reset to its default
2146:         palette = ['g', 'r', 'c', 'm', 'y', 'k']
2147:     elif type(palette) not in (list, tuple):
2148:         raise TypeError("palette must be a list or tuple")
2149:     _ptypes = [isinstance(p, string_types) for p in palette]
2150: 
2151:     if False in _ptypes:
2152:         raise TypeError("all palette list elements must be color strings")
2153: 
2154:     for i in list(_link_line_colors):
2155:         _link_line_colors.remove(i)
2156:     _link_line_colors.extend(list(palette))
2157: 
2158: 
2159: def dendrogram(Z, p=30, truncate_mode=None, color_threshold=None,
2160:                get_leaves=True, orientation='top', labels=None,
2161:                count_sort=False, distance_sort=False, show_leaf_counts=True,
2162:                no_plot=False, no_labels=False, leaf_font_size=None,
2163:                leaf_rotation=None, leaf_label_func=None,
2164:                show_contracted=False, link_color_func=None, ax=None,
2165:                above_threshold_color='b'):
2166:     '''
2167:     Plot the hierarchical clustering as a dendrogram.
2168: 
2169:     The dendrogram illustrates how each cluster is
2170:     composed by drawing a U-shaped link between a non-singleton
2171:     cluster and its children.  The top of the U-link indicates a
2172:     cluster merge.  The two legs of the U-link indicate which clusters
2173:     were merged.  The length of the two legs of the U-link represents
2174:     the distance between the child clusters.  It is also the
2175:     cophenetic distance between original observations in the two
2176:     children clusters.
2177: 
2178:     Parameters
2179:     ----------
2180:     Z : ndarray
2181:         The linkage matrix encoding the hierarchical clustering to
2182:         render as a dendrogram. See the ``linkage`` function for more
2183:         information on the format of ``Z``.
2184:     p : int, optional
2185:         The ``p`` parameter for ``truncate_mode``.
2186:     truncate_mode : str, optional
2187:         The dendrogram can be hard to read when the original
2188:         observation matrix from which the linkage is derived is
2189:         large. Truncation is used to condense the dendrogram. There
2190:         are several modes:
2191: 
2192:         ``None``
2193:           No truncation is performed (default).
2194:           Note: ``'none'`` is an alias for ``None`` that's kept for
2195:           backward compatibility.
2196: 
2197:         ``'lastp'``
2198:           The last ``p`` non-singleton clusters formed in the linkage are the
2199:           only non-leaf nodes in the linkage; they correspond to rows
2200:           ``Z[n-p-2:end]`` in ``Z``. All other non-singleton clusters are
2201:           contracted into leaf nodes.
2202: 
2203:         ``'level'``
2204:           No more than ``p`` levels of the dendrogram tree are displayed.
2205:           A "level" includes all nodes with ``p`` merges from the last merge.
2206: 
2207:           Note: ``'mtica'`` is an alias for ``'level'`` that's kept for
2208:           backward compatibility.
2209: 
2210:     color_threshold : double, optional
2211:         For brevity, let :math:`t` be the ``color_threshold``.
2212:         Colors all the descendent links below a cluster node
2213:         :math:`k` the same color if :math:`k` is the first node below
2214:         the cut threshold :math:`t`. All links connecting nodes with
2215:         distances greater than or equal to the threshold are colored
2216:         blue. If :math:`t` is less than or equal to zero, all nodes
2217:         are colored blue. If ``color_threshold`` is None or
2218:         'default', corresponding with MATLAB(TM) behavior, the
2219:         threshold is set to ``0.7*max(Z[:,2])``.
2220:     get_leaves : bool, optional
2221:         Includes a list ``R['leaves']=H`` in the result
2222:         dictionary. For each :math:`i`, ``H[i] == j``, cluster node
2223:         ``j`` appears in position ``i`` in the left-to-right traversal
2224:         of the leaves, where :math:`j < 2n-1` and :math:`i < n`.
2225:     orientation : str, optional
2226:         The direction to plot the dendrogram, which can be any
2227:         of the following strings:
2228: 
2229:         ``'top'``
2230:           Plots the root at the top, and plot descendent links going downwards.
2231:           (default).
2232: 
2233:         ``'bottom'``
2234:           Plots the root at the bottom, and plot descendent links going
2235:           upwards.
2236: 
2237:         ``'left'``
2238:           Plots the root at the left, and plot descendent links going right.
2239: 
2240:         ``'right'``
2241:           Plots the root at the right, and plot descendent links going left.
2242: 
2243:     labels : ndarray, optional
2244:         By default ``labels`` is None so the index of the original observation
2245:         is used to label the leaf nodes.  Otherwise, this is an :math:`n`
2246:         -sized list (or tuple). The ``labels[i]`` value is the text to put
2247:         under the :math:`i` th leaf node only if it corresponds to an original
2248:         observation and not a non-singleton cluster.
2249:     count_sort : str or bool, optional
2250:         For each node n, the order (visually, from left-to-right) n's
2251:         two descendent links are plotted is determined by this
2252:         parameter, which can be any of the following values:
2253: 
2254:         ``False``
2255:           Nothing is done.
2256: 
2257:         ``'ascending'`` or ``True``
2258:           The child with the minimum number of original objects in its cluster
2259:           is plotted first.
2260: 
2261:         ``'descendent'``
2262:           The child with the maximum number of original objects in its cluster
2263:           is plotted first.
2264: 
2265:         Note ``distance_sort`` and ``count_sort`` cannot both be True.
2266:     distance_sort : str or bool, optional
2267:         For each node n, the order (visually, from left-to-right) n's
2268:         two descendent links are plotted is determined by this
2269:         parameter, which can be any of the following values:
2270: 
2271:         ``False``
2272:           Nothing is done.
2273: 
2274:         ``'ascending'`` or ``True``
2275:           The child with the minimum distance between its direct descendents is
2276:           plotted first.
2277: 
2278:         ``'descending'``
2279:           The child with the maximum distance between its direct descendents is
2280:           plotted first.
2281: 
2282:         Note ``distance_sort`` and ``count_sort`` cannot both be True.
2283:     show_leaf_counts : bool, optional
2284:          When True, leaf nodes representing :math:`k>1` original
2285:          observation are labeled with the number of observations they
2286:          contain in parentheses.
2287:     no_plot : bool, optional
2288:         When True, the final rendering is not performed. This is
2289:         useful if only the data structures computed for the rendering
2290:         are needed or if matplotlib is not available.
2291:     no_labels : bool, optional
2292:         When True, no labels appear next to the leaf nodes in the
2293:         rendering of the dendrogram.
2294:     leaf_rotation : double, optional
2295:         Specifies the angle (in degrees) to rotate the leaf
2296:         labels. When unspecified, the rotation is based on the number of
2297:         nodes in the dendrogram (default is 0).
2298:     leaf_font_size : int, optional
2299:         Specifies the font size (in points) of the leaf labels. When
2300:         unspecified, the size based on the number of nodes in the
2301:         dendrogram.
2302:     leaf_label_func : lambda or function, optional
2303:         When leaf_label_func is a callable function, for each
2304:         leaf with cluster index :math:`k < 2n-1`. The function
2305:         is expected to return a string with the label for the
2306:         leaf.
2307: 
2308:         Indices :math:`k < n` correspond to original observations
2309:         while indices :math:`k \\geq n` correspond to non-singleton
2310:         clusters.
2311: 
2312:         For example, to label singletons with their node id and
2313:         non-singletons with their id, count, and inconsistency
2314:         coefficient, simply do::
2315: 
2316:             # First define the leaf label function.
2317:             def llf(id):
2318:                 if id < n:
2319:                     return str(id)
2320:                 else:
2321:                     return '[%d %d %1.2f]' % (id, count, R[n-id,3])
2322:             # The text for the leaf nodes is going to be big so force
2323:             # a rotation of 90 degrees.
2324:             dendrogram(Z, leaf_label_func=llf, leaf_rotation=90)
2325: 
2326:     show_contracted : bool, optional
2327:         When True the heights of non-singleton nodes contracted
2328:         into a leaf node are plotted as crosses along the link
2329:         connecting that leaf node.  This really is only useful when
2330:         truncation is used (see ``truncate_mode`` parameter).
2331:     link_color_func : callable, optional
2332:         If given, `link_color_function` is called with each non-singleton id
2333:         corresponding to each U-shaped link it will paint. The function is
2334:         expected to return the color to paint the link, encoded as a matplotlib
2335:         color string code. For example::
2336: 
2337:             dendrogram(Z, link_color_func=lambda k: colors[k])
2338: 
2339:         colors the direct links below each untruncated non-singleton node
2340:         ``k`` using ``colors[k]``.
2341:     ax : matplotlib Axes instance, optional
2342:         If None and `no_plot` is not True, the dendrogram will be plotted
2343:         on the current axes.  Otherwise if `no_plot` is not True the
2344:         dendrogram will be plotted on the given ``Axes`` instance. This can be
2345:         useful if the dendrogram is part of a more complex figure.
2346:     above_threshold_color : str, optional
2347:         This matplotlib color string sets the color of the links above the
2348:         color_threshold. The default is 'b'.
2349: 
2350:     Returns
2351:     -------
2352:     R : dict
2353:         A dictionary of data structures computed to render the
2354:         dendrogram. Its has the following keys:
2355: 
2356:         ``'color_list'``
2357:           A list of color names. The k'th element represents the color of the
2358:           k'th link.
2359: 
2360:         ``'icoord'`` and ``'dcoord'``
2361:           Each of them is a list of lists. Let ``icoord = [I1, I2, ..., Ip]``
2362:           where ``Ik = [xk1, xk2, xk3, xk4]`` and ``dcoord = [D1, D2, ..., Dp]``
2363:           where ``Dk = [yk1, yk2, yk3, yk4]``, then the k'th link painted is
2364:           ``(xk1, yk1)`` - ``(xk2, yk2)`` - ``(xk3, yk3)`` - ``(xk4, yk4)``.
2365: 
2366:         ``'ivl'``
2367:           A list of labels corresponding to the leaf nodes.
2368: 
2369:         ``'leaves'``
2370:           For each i, ``H[i] == j``, cluster node ``j`` appears in position
2371:           ``i`` in the left-to-right traversal of the leaves, where
2372:           :math:`j < 2n-1` and :math:`i < n`. If ``j`` is less than ``n``, the
2373:           ``i``-th leaf node corresponds to an original observation.
2374:           Otherwise, it corresponds to a non-singleton cluster.
2375: 
2376:     See Also
2377:     --------
2378:     linkage, set_link_color_palette
2379: 
2380:     Notes
2381:     -----
2382:     It is expected that the distances in ``Z[:,2]`` be monotonic, otherwise
2383:     crossings appear in the dendrogram.
2384: 
2385:     Examples
2386:     --------
2387:     >>> from scipy.cluster import hierarchy
2388:     >>> import matplotlib.pyplot as plt
2389: 
2390:     A very basic example:
2391: 
2392:     >>> ytdist = np.array([662., 877., 255., 412., 996., 295., 468., 268.,
2393:     ...                    400., 754., 564., 138., 219., 869., 669.])
2394:     >>> Z = hierarchy.linkage(ytdist, 'single')
2395:     >>> plt.figure()
2396:     >>> dn = hierarchy.dendrogram(Z)
2397: 
2398:     Now plot in given axes, improve the color scheme and use both vertical and
2399:     horizontal orientations:
2400: 
2401:     >>> hierarchy.set_link_color_palette(['m', 'c', 'y', 'k'])
2402:     >>> fig, axes = plt.subplots(1, 2, figsize=(8, 3))
2403:     >>> dn1 = hierarchy.dendrogram(Z, ax=axes[0], above_threshold_color='y',
2404:     ...                            orientation='top')
2405:     >>> dn2 = hierarchy.dendrogram(Z, ax=axes[1],
2406:     ...                            above_threshold_color='#bcbddc',
2407:     ...                            orientation='right')
2408:     >>> hierarchy.set_link_color_palette(None)  # reset to default after use
2409:     >>> plt.show()
2410: 
2411:     '''
2412:     # This feature was thought about but never implemented (still useful?):
2413:     #
2414:     #         ... = dendrogram(..., leaves_order=None)
2415:     #
2416:     #         Plots the leaves in the order specified by a vector of
2417:     #         original observation indices. If the vector contains duplicates
2418:     #         or results in a crossing, an exception will be thrown. Passing
2419:     #         None orders leaf nodes based on the order they appear in the
2420:     #         pre-order traversal.
2421:     Z = np.asarray(Z, order='c')
2422: 
2423:     if orientation not in ["top", "left", "bottom", "right"]:
2424:         raise ValueError("orientation must be one of 'top', 'left', "
2425:                          "'bottom', or 'right'")
2426: 
2427:     is_valid_linkage(Z, throw=True, name='Z')
2428:     Zs = Z.shape
2429:     n = Zs[0] + 1
2430:     if type(p) in (int, float):
2431:         p = int(p)
2432:     else:
2433:         raise TypeError('The second argument must be a number')
2434: 
2435:     if truncate_mode not in ('lastp', 'mlab', 'mtica', 'level', 'none', None):
2436:         # 'mlab' and 'mtica' are kept working for backwards compat.
2437:         raise ValueError('Invalid truncation mode.')
2438: 
2439:     if truncate_mode == 'lastp' or truncate_mode == 'mlab':
2440:         if p > n or p == 0:
2441:             p = n
2442: 
2443:     if truncate_mode == 'mtica':
2444:         # 'mtica' is an alias
2445:         truncate_mode = 'level'
2446: 
2447:     if truncate_mode == 'level':
2448:         if p <= 0:
2449:             p = np.inf
2450: 
2451:     if get_leaves:
2452:         lvs = []
2453:     else:
2454:         lvs = None
2455: 
2456:     icoord_list = []
2457:     dcoord_list = []
2458:     color_list = []
2459:     current_color = [0]
2460:     currently_below_threshold = [False]
2461:     ivl = []  # list of leaves
2462: 
2463:     if color_threshold is None or (isinstance(color_threshold, string_types) and
2464:                                    color_threshold == 'default'):
2465:         color_threshold = max(Z[:, 2]) * 0.7
2466: 
2467:     R = {'icoord': icoord_list, 'dcoord': dcoord_list, 'ivl': ivl,
2468:          'leaves': lvs, 'color_list': color_list}
2469: 
2470:     # Empty list will be filled in _dendrogram_calculate_info
2471:     contraction_marks = [] if show_contracted else None
2472: 
2473:     _dendrogram_calculate_info(
2474:         Z=Z, p=p,
2475:         truncate_mode=truncate_mode,
2476:         color_threshold=color_threshold,
2477:         get_leaves=get_leaves,
2478:         orientation=orientation,
2479:         labels=labels,
2480:         count_sort=count_sort,
2481:         distance_sort=distance_sort,
2482:         show_leaf_counts=show_leaf_counts,
2483:         i=2*n - 2,
2484:         iv=0.0,
2485:         ivl=ivl,
2486:         n=n,
2487:         icoord_list=icoord_list,
2488:         dcoord_list=dcoord_list,
2489:         lvs=lvs,
2490:         current_color=current_color,
2491:         color_list=color_list,
2492:         currently_below_threshold=currently_below_threshold,
2493:         leaf_label_func=leaf_label_func,
2494:         contraction_marks=contraction_marks,
2495:         link_color_func=link_color_func,
2496:         above_threshold_color=above_threshold_color)
2497: 
2498:     if not no_plot:
2499:         mh = max(Z[:, 2])
2500:         _plot_dendrogram(icoord_list, dcoord_list, ivl, p, n, mh, orientation,
2501:                          no_labels, color_list,
2502:                          leaf_font_size=leaf_font_size,
2503:                          leaf_rotation=leaf_rotation,
2504:                          contraction_marks=contraction_marks,
2505:                          ax=ax,
2506:                          above_threshold_color=above_threshold_color)
2507: 
2508:     return R
2509: 
2510: 
2511: def _append_singleton_leaf_node(Z, p, n, level, lvs, ivl, leaf_label_func,
2512:                                 i, labels):
2513:     # If the leaf id structure is not None and is a list then the caller
2514:     # to dendrogram has indicated that cluster id's corresponding to the
2515:     # leaf nodes should be recorded.
2516: 
2517:     if lvs is not None:
2518:         lvs.append(int(i))
2519: 
2520:     # If leaf node labels are to be displayed...
2521:     if ivl is not None:
2522:         # If a leaf_label_func has been provided, the label comes from the
2523:         # string returned from the leaf_label_func, which is a function
2524:         # passed to dendrogram.
2525:         if leaf_label_func:
2526:             ivl.append(leaf_label_func(int(i)))
2527:         else:
2528:             # Otherwise, if the dendrogram caller has passed a labels list
2529:             # for the leaf nodes, use it.
2530:             if labels is not None:
2531:                 ivl.append(labels[int(i - n)])
2532:             else:
2533:                 # Otherwise, use the id as the label for the leaf.x
2534:                 ivl.append(str(int(i)))
2535: 
2536: 
2537: def _append_nonsingleton_leaf_node(Z, p, n, level, lvs, ivl, leaf_label_func,
2538:                                    i, labels, show_leaf_counts):
2539:     # If the leaf id structure is not None and is a list then the caller
2540:     # to dendrogram has indicated that cluster id's corresponding to the
2541:     # leaf nodes should be recorded.
2542: 
2543:     if lvs is not None:
2544:         lvs.append(int(i))
2545:     if ivl is not None:
2546:         if leaf_label_func:
2547:             ivl.append(leaf_label_func(int(i)))
2548:         else:
2549:             if show_leaf_counts:
2550:                 ivl.append("(" + str(int(Z[i - n, 3])) + ")")
2551:             else:
2552:                 ivl.append("")
2553: 
2554: 
2555: def _append_contraction_marks(Z, iv, i, n, contraction_marks):
2556:     _append_contraction_marks_sub(Z, iv, int(Z[i - n, 0]), n, contraction_marks)
2557:     _append_contraction_marks_sub(Z, iv, int(Z[i - n, 1]), n, contraction_marks)
2558: 
2559: 
2560: def _append_contraction_marks_sub(Z, iv, i, n, contraction_marks):
2561:     if i >= n:
2562:         contraction_marks.append((iv, Z[i - n, 2]))
2563:         _append_contraction_marks_sub(Z, iv, int(Z[i - n, 0]), n, contraction_marks)
2564:         _append_contraction_marks_sub(Z, iv, int(Z[i - n, 1]), n, contraction_marks)
2565: 
2566: 
2567: def _dendrogram_calculate_info(Z, p, truncate_mode,
2568:                                color_threshold=np.inf, get_leaves=True,
2569:                                orientation='top', labels=None,
2570:                                count_sort=False, distance_sort=False,
2571:                                show_leaf_counts=False, i=-1, iv=0.0,
2572:                                ivl=[], n=0, icoord_list=[], dcoord_list=[],
2573:                                lvs=None, mhr=False,
2574:                                current_color=[], color_list=[],
2575:                                currently_below_threshold=[],
2576:                                leaf_label_func=None, level=0,
2577:                                contraction_marks=None,
2578:                                link_color_func=None,
2579:                                above_threshold_color='b'):
2580:     '''
2581:     Calculate the endpoints of the links as well as the labels for the
2582:     the dendrogram rooted at the node with index i. iv is the independent
2583:     variable value to plot the left-most leaf node below the root node i
2584:     (if orientation='top', this would be the left-most x value where the
2585:     plotting of this root node i and its descendents should begin).
2586: 
2587:     ivl is a list to store the labels of the leaf nodes. The leaf_label_func
2588:     is called whenever ivl != None, labels == None, and
2589:     leaf_label_func != None. When ivl != None and labels != None, the
2590:     labels list is used only for labeling the leaf nodes. When
2591:     ivl == None, no labels are generated for leaf nodes.
2592: 
2593:     When get_leaves==True, a list of leaves is built as they are visited
2594:     in the dendrogram.
2595: 
2596:     Returns a tuple with l being the independent variable coordinate that
2597:     corresponds to the midpoint of cluster to the left of cluster i if
2598:     i is non-singleton, otherwise the independent coordinate of the leaf
2599:     node if i is a leaf node.
2600: 
2601:     Returns
2602:     -------
2603:     A tuple (left, w, h, md), where:
2604: 
2605:       * left is the independent variable coordinate of the center of the
2606:         the U of the subtree
2607: 
2608:       * w is the amount of space used for the subtree (in independent
2609:         variable units)
2610: 
2611:       * h is the height of the subtree in dependent variable units
2612: 
2613:       * md is the ``max(Z[*,2]``) for all nodes ``*`` below and including
2614:         the target node.
2615: 
2616:     '''
2617:     if n == 0:
2618:         raise ValueError("Invalid singleton cluster count n.")
2619: 
2620:     if i == -1:
2621:         raise ValueError("Invalid root cluster index i.")
2622: 
2623:     if truncate_mode == 'lastp':
2624:         # If the node is a leaf node but corresponds to a non-singleton
2625:         # cluster, its label is either the empty string or the number of
2626:         # original observations belonging to cluster i.
2627:         if 2*n - p > i >= n:
2628:             d = Z[i - n, 2]
2629:             _append_nonsingleton_leaf_node(Z, p, n, level, lvs, ivl,
2630:                                            leaf_label_func, i, labels,
2631:                                            show_leaf_counts)
2632:             if contraction_marks is not None:
2633:                 _append_contraction_marks(Z, iv + 5.0, i, n, contraction_marks)
2634:             return (iv + 5.0, 10.0, 0.0, d)
2635:         elif i < n:
2636:             _append_singleton_leaf_node(Z, p, n, level, lvs, ivl,
2637:                                         leaf_label_func, i, labels)
2638:             return (iv + 5.0, 10.0, 0.0, 0.0)
2639:     elif truncate_mode == 'level':
2640:         if i > n and level > p:
2641:             d = Z[i - n, 2]
2642:             _append_nonsingleton_leaf_node(Z, p, n, level, lvs, ivl,
2643:                                            leaf_label_func, i, labels,
2644:                                            show_leaf_counts)
2645:             if contraction_marks is not None:
2646:                 _append_contraction_marks(Z, iv + 5.0, i, n, contraction_marks)
2647:             return (iv + 5.0, 10.0, 0.0, d)
2648:         elif i < n:
2649:             _append_singleton_leaf_node(Z, p, n, level, lvs, ivl,
2650:                                         leaf_label_func, i, labels)
2651:             return (iv + 5.0, 10.0, 0.0, 0.0)
2652:     elif truncate_mode in ('mlab',):
2653:         msg = "Mode 'mlab' is deprecated in scipy 0.19.0 (it never worked)."
2654:         warnings.warn(msg, DeprecationWarning)
2655: 
2656:     # Otherwise, only truncate if we have a leaf node.
2657:     #
2658:     # Only place leaves if they correspond to original observations.
2659:     if i < n:
2660:         _append_singleton_leaf_node(Z, p, n, level, lvs, ivl,
2661:                                     leaf_label_func, i, labels)
2662:         return (iv + 5.0, 10.0, 0.0, 0.0)
2663: 
2664:     # !!! Otherwise, we don't have a leaf node, so work on plotting a
2665:     # non-leaf node.
2666:     # Actual indices of a and b
2667:     aa = int(Z[i - n, 0])
2668:     ab = int(Z[i - n, 1])
2669:     if aa > n:
2670:         # The number of singletons below cluster a
2671:         na = Z[aa - n, 3]
2672:         # The distance between a's two direct children.
2673:         da = Z[aa - n, 2]
2674:     else:
2675:         na = 1
2676:         da = 0.0
2677:     if ab > n:
2678:         nb = Z[ab - n, 3]
2679:         db = Z[ab - n, 2]
2680:     else:
2681:         nb = 1
2682:         db = 0.0
2683: 
2684:     if count_sort == 'ascending' or count_sort:
2685:         # If a has a count greater than b, it and its descendents should
2686:         # be drawn to the right. Otherwise, to the left.
2687:         if na > nb:
2688:             # The cluster index to draw to the left (ua) will be ab
2689:             # and the one to draw to the right (ub) will be aa
2690:             ua = ab
2691:             ub = aa
2692:         else:
2693:             ua = aa
2694:             ub = ab
2695:     elif count_sort == 'descending':
2696:         # If a has a count less than or equal to b, it and its
2697:         # descendents should be drawn to the left. Otherwise, to
2698:         # the right.
2699:         if na > nb:
2700:             ua = aa
2701:             ub = ab
2702:         else:
2703:             ua = ab
2704:             ub = aa
2705:     elif distance_sort == 'ascending' or distance_sort:
2706:         # If a has a distance greater than b, it and its descendents should
2707:         # be drawn to the right. Otherwise, to the left.
2708:         if da > db:
2709:             ua = ab
2710:             ub = aa
2711:         else:
2712:             ua = aa
2713:             ub = ab
2714:     elif distance_sort == 'descending':
2715:         # If a has a distance less than or equal to b, it and its
2716:         # descendents should be drawn to the left. Otherwise, to
2717:         # the right.
2718:         if da > db:
2719:             ua = aa
2720:             ub = ab
2721:         else:
2722:             ua = ab
2723:             ub = aa
2724:     else:
2725:         ua = aa
2726:         ub = ab
2727: 
2728:     # Updated iv variable and the amount of space used.
2729:     (uiva, uwa, uah, uamd) = \
2730:         _dendrogram_calculate_info(
2731:             Z=Z, p=p,
2732:             truncate_mode=truncate_mode,
2733:             color_threshold=color_threshold,
2734:             get_leaves=get_leaves,
2735:             orientation=orientation,
2736:             labels=labels,
2737:             count_sort=count_sort,
2738:             distance_sort=distance_sort,
2739:             show_leaf_counts=show_leaf_counts,
2740:             i=ua, iv=iv, ivl=ivl, n=n,
2741:             icoord_list=icoord_list,
2742:             dcoord_list=dcoord_list, lvs=lvs,
2743:             current_color=current_color,
2744:             color_list=color_list,
2745:             currently_below_threshold=currently_below_threshold,
2746:             leaf_label_func=leaf_label_func,
2747:             level=level + 1, contraction_marks=contraction_marks,
2748:             link_color_func=link_color_func,
2749:             above_threshold_color=above_threshold_color)
2750: 
2751:     h = Z[i - n, 2]
2752:     if h >= color_threshold or color_threshold <= 0:
2753:         c = above_threshold_color
2754: 
2755:         if currently_below_threshold[0]:
2756:             current_color[0] = (current_color[0] + 1) % len(_link_line_colors)
2757:         currently_below_threshold[0] = False
2758:     else:
2759:         currently_below_threshold[0] = True
2760:         c = _link_line_colors[current_color[0]]
2761: 
2762:     (uivb, uwb, ubh, ubmd) = \
2763:         _dendrogram_calculate_info(
2764:             Z=Z, p=p,
2765:             truncate_mode=truncate_mode,
2766:             color_threshold=color_threshold,
2767:             get_leaves=get_leaves,
2768:             orientation=orientation,
2769:             labels=labels,
2770:             count_sort=count_sort,
2771:             distance_sort=distance_sort,
2772:             show_leaf_counts=show_leaf_counts,
2773:             i=ub, iv=iv + uwa, ivl=ivl, n=n,
2774:             icoord_list=icoord_list,
2775:             dcoord_list=dcoord_list, lvs=lvs,
2776:             current_color=current_color,
2777:             color_list=color_list,
2778:             currently_below_threshold=currently_below_threshold,
2779:             leaf_label_func=leaf_label_func,
2780:             level=level + 1, contraction_marks=contraction_marks,
2781:             link_color_func=link_color_func,
2782:             above_threshold_color=above_threshold_color)
2783: 
2784:     max_dist = max(uamd, ubmd, h)
2785: 
2786:     icoord_list.append([uiva, uiva, uivb, uivb])
2787:     dcoord_list.append([uah, h, h, ubh])
2788:     if link_color_func is not None:
2789:         v = link_color_func(int(i))
2790:         if not isinstance(v, string_types):
2791:             raise TypeError("link_color_func must return a matplotlib "
2792:                             "color string!")
2793:         color_list.append(v)
2794:     else:
2795:         color_list.append(c)
2796: 
2797:     return (((uiva + uivb) / 2), uwa + uwb, h, max_dist)
2798: 
2799: 
2800: def is_isomorphic(T1, T2):
2801:     '''
2802:     Determine if two different cluster assignments are equivalent.
2803: 
2804:     Parameters
2805:     ----------
2806:     T1 : array_like
2807:         An assignment of singleton cluster ids to flat cluster ids.
2808:     T2 : array_like
2809:         An assignment of singleton cluster ids to flat cluster ids.
2810: 
2811:     Returns
2812:     -------
2813:     b : bool
2814:         Whether the flat cluster assignments `T1` and `T2` are
2815:         equivalent.
2816: 
2817:     '''
2818:     T1 = np.asarray(T1, order='c')
2819:     T2 = np.asarray(T2, order='c')
2820: 
2821:     if type(T1) != np.ndarray:
2822:         raise TypeError('T1 must be a numpy array.')
2823:     if type(T2) != np.ndarray:
2824:         raise TypeError('T2 must be a numpy array.')
2825: 
2826:     T1S = T1.shape
2827:     T2S = T2.shape
2828: 
2829:     if len(T1S) != 1:
2830:         raise ValueError('T1 must be one-dimensional.')
2831:     if len(T2S) != 1:
2832:         raise ValueError('T2 must be one-dimensional.')
2833:     if T1S[0] != T2S[0]:
2834:         raise ValueError('T1 and T2 must have the same number of elements.')
2835:     n = T1S[0]
2836:     d1 = {}
2837:     d2 = {}
2838:     for i in xrange(0, n):
2839:         if T1[i] in d1:
2840:             if not T2[i] in d2:
2841:                 return False
2842:             if d1[T1[i]] != T2[i] or d2[T2[i]] != T1[i]:
2843:                 return False
2844:         elif T2[i] in d2:
2845:             return False
2846:         else:
2847:             d1[T1[i]] = T2[i]
2848:             d2[T2[i]] = T1[i]
2849:     return True
2850: 
2851: 
2852: def maxdists(Z):
2853:     '''
2854:     Return the maximum distance between any non-singleton cluster.
2855: 
2856:     Parameters
2857:     ----------
2858:     Z : ndarray
2859:         The hierarchical clustering encoded as a matrix. See
2860:         ``linkage`` for more information.
2861: 
2862:     Returns
2863:     -------
2864:     maxdists : ndarray
2865:         A ``(n-1)`` sized numpy array of doubles; ``MD[i]`` represents
2866:         the maximum distance between any cluster (including
2867:         singletons) below and including the node with index i. More
2868:         specifically, ``MD[i] = Z[Q(i)-n, 2].max()`` where ``Q(i)`` is the
2869:         set of all node indices below and including node i.
2870: 
2871:     '''
2872:     Z = np.asarray(Z, order='c', dtype=np.double)
2873:     is_valid_linkage(Z, throw=True, name='Z')
2874: 
2875:     n = Z.shape[0] + 1
2876:     MD = np.zeros((n - 1,))
2877:     [Z] = _copy_arrays_if_base_present([Z])
2878:     _hierarchy.get_max_dist_for_each_cluster(Z, MD, int(n))
2879:     return MD
2880: 
2881: 
2882: def maxinconsts(Z, R):
2883:     '''
2884:     Return the maximum inconsistency coefficient for each
2885:     non-singleton cluster and its descendents.
2886: 
2887:     Parameters
2888:     ----------
2889:     Z : ndarray
2890:         The hierarchical clustering encoded as a matrix. See
2891:         `linkage` for more information.
2892:     R : ndarray
2893:         The inconsistency matrix.
2894: 
2895:     Returns
2896:     -------
2897:     MI : ndarray
2898:         A monotonic ``(n-1)``-sized numpy array of doubles.
2899: 
2900:     '''
2901:     Z = np.asarray(Z, order='c')
2902:     R = np.asarray(R, order='c')
2903:     is_valid_linkage(Z, throw=True, name='Z')
2904:     is_valid_im(R, throw=True, name='R')
2905: 
2906:     n = Z.shape[0] + 1
2907:     if Z.shape[0] != R.shape[0]:
2908:         raise ValueError("The inconsistency matrix and linkage matrix each "
2909:                          "have a different number of rows.")
2910:     MI = np.zeros((n - 1,))
2911:     [Z, R] = _copy_arrays_if_base_present([Z, R])
2912:     _hierarchy.get_max_Rfield_for_each_cluster(Z, R, MI, int(n), 3)
2913:     return MI
2914: 
2915: 
2916: def maxRstat(Z, R, i):
2917:     '''
2918:     Return the maximum statistic for each non-singleton cluster and its
2919:     descendents.
2920: 
2921:     Parameters
2922:     ----------
2923:     Z : array_like
2924:         The hierarchical clustering encoded as a matrix. See `linkage` for more
2925:         information.
2926:     R : array_like
2927:         The inconsistency matrix.
2928:     i : int
2929:         The column of `R` to use as the statistic.
2930: 
2931:     Returns
2932:     -------
2933:     MR : ndarray
2934:         Calculates the maximum statistic for the i'th column of the
2935:         inconsistency matrix `R` for each non-singleton cluster
2936:         node. ``MR[j]`` is the maximum over ``R[Q(j)-n, i]`` where
2937:         ``Q(j)`` the set of all node ids corresponding to nodes below
2938:         and including ``j``.
2939: 
2940:     '''
2941:     Z = np.asarray(Z, order='c')
2942:     R = np.asarray(R, order='c')
2943:     is_valid_linkage(Z, throw=True, name='Z')
2944:     is_valid_im(R, throw=True, name='R')
2945:     if type(i) is not int:
2946:         raise TypeError('The third argument must be an integer.')
2947:     if i < 0 or i > 3:
2948:         raise ValueError('i must be an integer between 0 and 3 inclusive.')
2949: 
2950:     if Z.shape[0] != R.shape[0]:
2951:         raise ValueError("The inconsistency matrix and linkage matrix each "
2952:                          "have a different number of rows.")
2953: 
2954:     n = Z.shape[0] + 1
2955:     MR = np.zeros((n - 1,))
2956:     [Z, R] = _copy_arrays_if_base_present([Z, R])
2957:     _hierarchy.get_max_Rfield_for_each_cluster(Z, R, MR, int(n), i)
2958:     return MR
2959: 
2960: 
2961: def leaders(Z, T):
2962:     '''
2963:     Return the root nodes in a hierarchical clustering.
2964: 
2965:     Returns the root nodes in a hierarchical clustering corresponding
2966:     to a cut defined by a flat cluster assignment vector ``T``. See
2967:     the ``fcluster`` function for more information on the format of ``T``.
2968: 
2969:     For each flat cluster :math:`j` of the :math:`k` flat clusters
2970:     represented in the n-sized flat cluster assignment vector ``T``,
2971:     this function finds the lowest cluster node :math:`i` in the linkage
2972:     tree Z such that:
2973: 
2974:       * leaf descendents belong only to flat cluster j
2975:         (i.e. ``T[p]==j`` for all :math:`p` in :math:`S(i)` where
2976:         :math:`S(i)` is the set of leaf ids of leaf nodes descendent
2977:         with cluster node :math:`i`)
2978: 
2979:       * there does not exist a leaf that is not descendent with
2980:         :math:`i` that also belongs to cluster :math:`j`
2981:         (i.e. ``T[q]!=j`` for all :math:`q` not in :math:`S(i)`).  If
2982:         this condition is violated, ``T`` is not a valid cluster
2983:         assignment vector, and an exception will be thrown.
2984: 
2985:     Parameters
2986:     ----------
2987:     Z : ndarray
2988:         The hierarchical clustering encoded as a matrix. See
2989:         `linkage` for more information.
2990:     T : ndarray
2991:         The flat cluster assignment vector.
2992: 
2993:     Returns
2994:     -------
2995:     L : ndarray
2996:         The leader linkage node id's stored as a k-element 1-D array
2997:         where ``k`` is the number of flat clusters found in ``T``.
2998: 
2999:         ``L[j]=i`` is the linkage cluster node id that is the
3000:         leader of flat cluster with id M[j].  If ``i < n``, ``i``
3001:         corresponds to an original observation, otherwise it
3002:         corresponds to a non-singleton cluster.
3003: 
3004:         For example: if ``L[3]=2`` and ``M[3]=8``, the flat cluster with
3005:         id 8's leader is linkage node 2.
3006:     M : ndarray
3007:         The leader linkage node id's stored as a k-element 1-D array where
3008:         ``k`` is the number of flat clusters found in ``T``. This allows the
3009:         set of flat cluster ids to be any arbitrary set of ``k`` integers.
3010: 
3011:     '''
3012:     Z = np.asarray(Z, order='c')
3013:     T = np.asarray(T, order='c')
3014:     if type(T) != np.ndarray or T.dtype != 'i':
3015:         raise TypeError('T must be a one-dimensional numpy array of integers.')
3016:     is_valid_linkage(Z, throw=True, name='Z')
3017:     if len(T) != Z.shape[0] + 1:
3018:         raise ValueError('Mismatch: len(T)!=Z.shape[0] + 1.')
3019: 
3020:     Cl = np.unique(T)
3021:     kk = len(Cl)
3022:     L = np.zeros((kk,), dtype='i')
3023:     M = np.zeros((kk,), dtype='i')
3024:     n = Z.shape[0] + 1
3025:     [Z, T] = _copy_arrays_if_base_present([Z, T])
3026:     s = _hierarchy.leaders(Z, T, L, M, int(kk), int(n))
3027:     if s >= 0:
3028:         raise ValueError(('T is not a valid assignment vector. Error found '
3029:                           'when examining linkage node %d (< 2n-1).') % s)
3030:     return (L, M)
3031: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 133, (-1)), 'str', '\n========================================================\nHierarchical clustering (:mod:`scipy.cluster.hierarchy`)\n========================================================\n\n.. currentmodule:: scipy.cluster.hierarchy\n\nThese functions cut hierarchical clusterings into flat clusterings\nor find the roots of the forest formed by a cut by providing the flat\ncluster ids of each observation.\n\n.. autosummary::\n   :toctree: generated/\n\n   fcluster\n   fclusterdata\n   leaders\n\nThese are routines for agglomerative clustering.\n\n.. autosummary::\n   :toctree: generated/\n\n   linkage\n   single\n   complete\n   average\n   weighted\n   centroid\n   median\n   ward\n\nThese routines compute statistics on hierarchies.\n\n.. autosummary::\n   :toctree: generated/\n\n   cophenet\n   from_mlab_linkage\n   inconsistent\n   maxinconsts\n   maxdists\n   maxRstat\n   to_mlab_linkage\n\nRoutines for visualizing flat clusters.\n\n.. autosummary::\n   :toctree: generated/\n\n   dendrogram\n\nThese are data structures and routines for representing hierarchies as\ntree objects.\n\n.. autosummary::\n   :toctree: generated/\n\n   ClusterNode\n   leaves_list\n   to_tree\n   cut_tree\n   optimal_leaf_ordering\n\nThese are predicates for checking the validity of linkage and\ninconsistency matrices as well as for checking isomorphism of two\nflat cluster assignments.\n\n.. autosummary::\n   :toctree: generated/\n\n   is_valid_im\n   is_valid_linkage\n   is_isomorphic\n   is_monotonic\n   correspond\n   num_obs_linkage\n\nUtility routines for plotting:\n\n.. autosummary::\n   :toctree: generated/\n\n   set_link_color_palette\n\nReferences\n----------\n\n.. [1] "Statistics toolbox." API Reference Documentation. The MathWorks.\n   http://www.mathworks.com/access/helpdesk/help/toolbox/stats/.\n   Accessed October 1, 2007.\n\n.. [2] "Hierarchical clustering." API Reference Documentation.\n   The Wolfram Research, Inc.\n   https://reference.wolfram.com/language/HierarchicalClustering/tutorial/HierarchicalClustering.html.\n   Accessed October 1, 2007.\n\n.. [3] Gower, JC and Ross, GJS. "Minimum Spanning Trees and Single Linkage\n   Cluster Analysis." Applied Statistics. 18(1): pp. 54--64. 1969.\n\n.. [4] Ward Jr, JH. "Hierarchical grouping to optimize an objective\n   function." Journal of the American Statistical Association. 58(301):\n   pp. 236--44. 1963.\n\n.. [5] Johnson, SC. "Hierarchical clustering schemes." Psychometrika.\n   32(2): pp. 241--54. 1966.\n\n.. [6] Sneath, PH and Sokal, RR. "Numerical taxonomy." Nature. 193: pp.\n   855--60. 1962.\n\n.. [7] Batagelj, V. "Comparing resemblance measures." Journal of\n   Classification. 12: pp. 73--90. 1995.\n\n.. [8] Sokal, RR and Michener, CD. "A statistical method for evaluating\n   systematic relationships." Scientific Bulletins. 38(22):\n   pp. 1409--38. 1958.\n\n.. [9] Edelbrock, C. "Mixture model tests of hierarchical clustering\n   algorithms: the problem of classifying everybody." Multivariate\n   Behavioral Research. 14: pp. 367--84. 1979.\n\n.. [10] Jain, A., and Dubes, R., "Algorithms for Clustering Data."\n   Prentice-Hall. Englewood Cliffs, NJ. 1988.\n\n.. [11] Fisher, RA "The use of multiple measurements in taxonomic\n   problems." Annals of Eugenics, 7(2): 179-188. 1936\n\n\n* MATLAB and MathWorks are registered trademarks of The MathWorks, Inc.\n\n* Mathematica is a registered trademark of The Wolfram Research, Inc.\n\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 173, 0))

# 'import warnings' statement (line 173)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 173, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 174, 0))

# 'import bisect' statement (line 174)
import bisect

import_module(stypy.reporting.localization.Localization(__file__, 174, 0), 'bisect', bisect, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 175, 0))

# 'from collections import deque' statement (line 175)
try:
    from collections import deque

except:
    deque = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 175, 0), 'collections', None, module_type_store, ['deque'], [deque])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 177, 0))

# 'import numpy' statement (line 177)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/cluster/')
import_492 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 177, 0), 'numpy')

if (type(import_492) is not StypyTypeError):

    if (import_492 != 'pyd_module'):
        __import__(import_492)
        sys_modules_493 = sys.modules[import_492]
        import_module(stypy.reporting.localization.Localization(__file__, 177, 0), 'np', sys_modules_493.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 177, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 0), 'numpy', import_492)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/cluster/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 178, 0))

# 'from scipy.cluster import _hierarchy, _optimal_leaf_ordering' statement (line 178)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/cluster/')
import_494 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 178, 0), 'scipy.cluster')

if (type(import_494) is not StypyTypeError):

    if (import_494 != 'pyd_module'):
        __import__(import_494)
        sys_modules_495 = sys.modules[import_494]
        import_from_module(stypy.reporting.localization.Localization(__file__, 178, 0), 'scipy.cluster', sys_modules_495.module_type_store, module_type_store, ['_hierarchy', '_optimal_leaf_ordering'])
        nest_module(stypy.reporting.localization.Localization(__file__, 178, 0), __file__, sys_modules_495, sys_modules_495.module_type_store, module_type_store)
    else:
        from scipy.cluster import _hierarchy, _optimal_leaf_ordering

        import_from_module(stypy.reporting.localization.Localization(__file__, 178, 0), 'scipy.cluster', None, module_type_store, ['_hierarchy', '_optimal_leaf_ordering'], [_hierarchy, _optimal_leaf_ordering])

else:
    # Assigning a type to the variable 'scipy.cluster' (line 178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 0), 'scipy.cluster', import_494)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/cluster/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 179, 0))

# 'import scipy.spatial.distance' statement (line 179)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/cluster/')
import_496 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 179, 0), 'scipy.spatial.distance')

if (type(import_496) is not StypyTypeError):

    if (import_496 != 'pyd_module'):
        __import__(import_496)
        sys_modules_497 = sys.modules[import_496]
        import_module(stypy.reporting.localization.Localization(__file__, 179, 0), 'distance', sys_modules_497.module_type_store, module_type_store)
    else:
        import scipy.spatial.distance as distance

        import_module(stypy.reporting.localization.Localization(__file__, 179, 0), 'distance', scipy.spatial.distance, module_type_store)

else:
    # Assigning a type to the variable 'scipy.spatial.distance' (line 179)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 179, 0), 'scipy.spatial.distance', import_496)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/cluster/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 181, 0))

# 'from scipy._lib.six import string_types' statement (line 181)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/cluster/')
import_498 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 181, 0), 'scipy._lib.six')

if (type(import_498) is not StypyTypeError):

    if (import_498 != 'pyd_module'):
        __import__(import_498)
        sys_modules_499 = sys.modules[import_498]
        import_from_module(stypy.reporting.localization.Localization(__file__, 181, 0), 'scipy._lib.six', sys_modules_499.module_type_store, module_type_store, ['string_types'])
        nest_module(stypy.reporting.localization.Localization(__file__, 181, 0), __file__, sys_modules_499, sys_modules_499.module_type_store, module_type_store)
    else:
        from scipy._lib.six import string_types

        import_from_module(stypy.reporting.localization.Localization(__file__, 181, 0), 'scipy._lib.six', None, module_type_store, ['string_types'], [string_types])

else:
    # Assigning a type to the variable 'scipy._lib.six' (line 181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 0), 'scipy._lib.six', import_498)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/cluster/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 182, 0))

# 'from scipy._lib.six import xrange' statement (line 182)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/cluster/')
import_500 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 182, 0), 'scipy._lib.six')

if (type(import_500) is not StypyTypeError):

    if (import_500 != 'pyd_module'):
        __import__(import_500)
        sys_modules_501 = sys.modules[import_500]
        import_from_module(stypy.reporting.localization.Localization(__file__, 182, 0), 'scipy._lib.six', sys_modules_501.module_type_store, module_type_store, ['xrange'])
        nest_module(stypy.reporting.localization.Localization(__file__, 182, 0), __file__, sys_modules_501, sys_modules_501.module_type_store, module_type_store)
    else:
        from scipy._lib.six import xrange

        import_from_module(stypy.reporting.localization.Localization(__file__, 182, 0), 'scipy._lib.six', None, module_type_store, ['xrange'], [xrange])

else:
    # Assigning a type to the variable 'scipy._lib.six' (line 182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 0), 'scipy._lib.six', import_500)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/cluster/')


# Assigning a Dict to a Name (line 184):

# Assigning a Dict to a Name (line 184):

# Obtaining an instance of the builtin type 'dict' (line 184)
dict_502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 19), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 184)
# Adding element type (key, value) (line 184)
str_503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 20), 'str', 'single')
int_504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 30), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 184, 19), dict_502, (str_503, int_504))
# Adding element type (key, value) (line 184)
str_505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 33), 'str', 'complete')
int_506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 45), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 184, 19), dict_502, (str_505, int_506))
# Adding element type (key, value) (line 184)
str_507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 48), 'str', 'average')
int_508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 59), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 184, 19), dict_502, (str_507, int_508))
# Adding element type (key, value) (line 184)
str_509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 62), 'str', 'centroid')
int_510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 74), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 184, 19), dict_502, (str_509, int_510))
# Adding element type (key, value) (line 184)
str_511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 20), 'str', 'median')
int_512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 30), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 184, 19), dict_502, (str_511, int_512))
# Adding element type (key, value) (line 184)
str_513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 33), 'str', 'ward')
int_514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 41), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 184, 19), dict_502, (str_513, int_514))
# Adding element type (key, value) (line 184)
str_515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 44), 'str', 'weighted')
int_516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 56), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 184, 19), dict_502, (str_515, int_516))

# Assigning a type to the variable '_LINKAGE_METHODS' (line 184)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 0), '_LINKAGE_METHODS', dict_502)

# Assigning a Tuple to a Name (line 186):

# Assigning a Tuple to a Name (line 186):

# Obtaining an instance of the builtin type 'tuple' (line 186)
tuple_517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 22), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 186)
# Adding element type (line 186)
str_518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 22), 'str', 'centroid')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 186, 22), tuple_517, str_518)
# Adding element type (line 186)
str_519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 34), 'str', 'median')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 186, 22), tuple_517, str_519)
# Adding element type (line 186)
str_520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 44), 'str', 'ward')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 186, 22), tuple_517, str_520)

# Assigning a type to the variable '_EUCLIDEAN_METHODS' (line 186)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 0), '_EUCLIDEAN_METHODS', tuple_517)

# Assigning a List to a Name (line 188):

# Assigning a List to a Name (line 188):
__all__ = ['ClusterNode', 'average', 'centroid', 'complete', 'cophenet', 'correspond', 'cut_tree', 'dendrogram', 'fcluster', 'fclusterdata', 'from_mlab_linkage', 'inconsistent', 'is_isomorphic', 'is_monotonic', 'is_valid_im', 'is_valid_linkage', 'leaders', 'leaves_list', 'linkage', 'maxRstat', 'maxdists', 'maxinconsts', 'median', 'num_obs_linkage', 'optimal_leaf_ordering', 'set_link_color_palette', 'single', 'to_mlab_linkage', 'to_tree', 'ward', 'weighted', 'distance']
module_type_store.set_exportable_members(['ClusterNode', 'average', 'centroid', 'complete', 'cophenet', 'correspond', 'cut_tree', 'dendrogram', 'fcluster', 'fclusterdata', 'from_mlab_linkage', 'inconsistent', 'is_isomorphic', 'is_monotonic', 'is_valid_im', 'is_valid_linkage', 'leaders', 'leaves_list', 'linkage', 'maxRstat', 'maxdists', 'maxinconsts', 'median', 'num_obs_linkage', 'optimal_leaf_ordering', 'set_link_color_palette', 'single', 'to_mlab_linkage', 'to_tree', 'ward', 'weighted', 'distance'])

# Obtaining an instance of the builtin type 'list' (line 188)
list_521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 188)
# Adding element type (line 188)
str_522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 11), 'str', 'ClusterNode')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_522)
# Adding element type (line 188)
str_523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 26), 'str', 'average')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_523)
# Adding element type (line 188)
str_524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 37), 'str', 'centroid')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_524)
# Adding element type (line 188)
str_525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 49), 'str', 'complete')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_525)
# Adding element type (line 188)
str_526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, 61), 'str', 'cophenet')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_526)
# Adding element type (line 188)
str_527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 11), 'str', 'correspond')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_527)
# Adding element type (line 188)
str_528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 25), 'str', 'cut_tree')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_528)
# Adding element type (line 188)
str_529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 37), 'str', 'dendrogram')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_529)
# Adding element type (line 188)
str_530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 51), 'str', 'fcluster')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_530)
# Adding element type (line 188)
str_531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 63), 'str', 'fclusterdata')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_531)
# Adding element type (line 188)
str_532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 11), 'str', 'from_mlab_linkage')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_532)
# Adding element type (line 188)
str_533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 32), 'str', 'inconsistent')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_533)
# Adding element type (line 188)
str_534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 48), 'str', 'is_isomorphic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_534)
# Adding element type (line 188)
str_535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 11), 'str', 'is_monotonic')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_535)
# Adding element type (line 188)
str_536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 27), 'str', 'is_valid_im')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_536)
# Adding element type (line 188)
str_537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 42), 'str', 'is_valid_linkage')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_537)
# Adding element type (line 188)
str_538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 191, 62), 'str', 'leaders')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_538)
# Adding element type (line 188)
str_539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 11), 'str', 'leaves_list')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_539)
# Adding element type (line 188)
str_540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 26), 'str', 'linkage')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_540)
# Adding element type (line 188)
str_541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 37), 'str', 'maxRstat')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_541)
# Adding element type (line 188)
str_542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 49), 'str', 'maxdists')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_542)
# Adding element type (line 188)
str_543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 61), 'str', 'maxinconsts')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_543)
# Adding element type (line 188)
str_544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 11), 'str', 'median')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_544)
# Adding element type (line 188)
str_545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 21), 'str', 'num_obs_linkage')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_545)
# Adding element type (line 188)
str_546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 193, 40), 'str', 'optimal_leaf_ordering')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_546)
# Adding element type (line 188)
str_547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 11), 'str', 'set_link_color_palette')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_547)
# Adding element type (line 188)
str_548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 37), 'str', 'single')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_548)
# Adding element type (line 188)
str_549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 47), 'str', 'to_mlab_linkage')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_549)
# Adding element type (line 188)
str_550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 66), 'str', 'to_tree')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_550)
# Adding element type (line 188)
str_551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 11), 'str', 'ward')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_551)
# Adding element type (line 188)
str_552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 19), 'str', 'weighted')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_552)
# Adding element type (line 188)
str_553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 31), 'str', 'distance')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 188, 10), list_521, str_553)

# Assigning a type to the variable '__all__' (line 188)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 0), '__all__', list_521)
# Declaration of the 'ClusterWarning' class
# Getting the type of 'UserWarning' (line 198)
UserWarning_554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 21), 'UserWarning')

class ClusterWarning(UserWarning_554, ):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 198, 0, False)
        # Assigning a type to the variable 'self' (line 199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClusterWarning.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ClusterWarning' (line 198)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 0), 'ClusterWarning', ClusterWarning)

@norecursion
def _warning(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_warning'
    module_type_store = module_type_store.open_function_context('_warning', 202, 0, False)
    
    # Passed parameters checking function
    _warning.stypy_localization = localization
    _warning.stypy_type_of_self = None
    _warning.stypy_type_store = module_type_store
    _warning.stypy_function_name = '_warning'
    _warning.stypy_param_names_list = ['s']
    _warning.stypy_varargs_param_name = None
    _warning.stypy_kwargs_param_name = None
    _warning.stypy_call_defaults = defaults
    _warning.stypy_call_varargs = varargs
    _warning.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_warning', ['s'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_warning', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_warning(...)' code ##################

    
    # Call to warn(...): (line 203)
    # Processing the call arguments (line 203)
    str_557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 18), 'str', 'scipy.cluster: %s')
    # Getting the type of 's' (line 203)
    s_558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 40), 's', False)
    # Applying the binary operator '%' (line 203)
    result_mod_559 = python_operator(stypy.reporting.localization.Localization(__file__, 203, 18), '%', str_557, s_558)
    
    # Getting the type of 'ClusterWarning' (line 203)
    ClusterWarning_560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 43), 'ClusterWarning', False)
    # Processing the call keyword arguments (line 203)
    int_561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 70), 'int')
    keyword_562 = int_561
    kwargs_563 = {'stacklevel': keyword_562}
    # Getting the type of 'warnings' (line 203)
    warnings_555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 4), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 203)
    warn_556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 4), warnings_555, 'warn')
    # Calling warn(args, kwargs) (line 203)
    warn_call_result_564 = invoke(stypy.reporting.localization.Localization(__file__, 203, 4), warn_556, *[result_mod_559, ClusterWarning_560], **kwargs_563)
    
    
    # ################# End of '_warning(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_warning' in the type store
    # Getting the type of 'stypy_return_type' (line 202)
    stypy_return_type_565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_565)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_warning'
    return stypy_return_type_565

# Assigning a type to the variable '_warning' (line 202)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 0), '_warning', _warning)

@norecursion
def _copy_array_if_base_present(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_copy_array_if_base_present'
    module_type_store = module_type_store.open_function_context('_copy_array_if_base_present', 206, 0, False)
    
    # Passed parameters checking function
    _copy_array_if_base_present.stypy_localization = localization
    _copy_array_if_base_present.stypy_type_of_self = None
    _copy_array_if_base_present.stypy_type_store = module_type_store
    _copy_array_if_base_present.stypy_function_name = '_copy_array_if_base_present'
    _copy_array_if_base_present.stypy_param_names_list = ['a']
    _copy_array_if_base_present.stypy_varargs_param_name = None
    _copy_array_if_base_present.stypy_kwargs_param_name = None
    _copy_array_if_base_present.stypy_call_defaults = defaults
    _copy_array_if_base_present.stypy_call_varargs = varargs
    _copy_array_if_base_present.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_copy_array_if_base_present', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_copy_array_if_base_present', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_copy_array_if_base_present(...)' code ##################

    str_566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 209, (-1)), 'str', '\n    Copy the array if its base points to a parent array.\n    ')
    
    
    # Getting the type of 'a' (line 210)
    a_567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 7), 'a')
    # Obtaining the member 'base' of a type (line 210)
    base_568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 7), a_567, 'base')
    # Getting the type of 'None' (line 210)
    None_569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 21), 'None')
    # Applying the binary operator 'isnot' (line 210)
    result_is_not_570 = python_operator(stypy.reporting.localization.Localization(__file__, 210, 7), 'isnot', base_568, None_569)
    
    # Testing the type of an if condition (line 210)
    if_condition_571 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 210, 4), result_is_not_570)
    # Assigning a type to the variable 'if_condition_571' (line 210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'if_condition_571', if_condition_571)
    # SSA begins for if statement (line 210)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to copy(...): (line 211)
    # Processing the call keyword arguments (line 211)
    kwargs_574 = {}
    # Getting the type of 'a' (line 211)
    a_572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 15), 'a', False)
    # Obtaining the member 'copy' of a type (line 211)
    copy_573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 15), a_572, 'copy')
    # Calling copy(args, kwargs) (line 211)
    copy_call_result_575 = invoke(stypy.reporting.localization.Localization(__file__, 211, 15), copy_573, *[], **kwargs_574)
    
    # Assigning a type to the variable 'stypy_return_type' (line 211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'stypy_return_type', copy_call_result_575)
    # SSA branch for the else part of an if statement (line 210)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to issubsctype(...): (line 212)
    # Processing the call arguments (line 212)
    # Getting the type of 'a' (line 212)
    a_578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 24), 'a', False)
    # Getting the type of 'np' (line 212)
    np_579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 27), 'np', False)
    # Obtaining the member 'float32' of a type (line 212)
    float32_580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 27), np_579, 'float32')
    # Processing the call keyword arguments (line 212)
    kwargs_581 = {}
    # Getting the type of 'np' (line 212)
    np_576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 9), 'np', False)
    # Obtaining the member 'issubsctype' of a type (line 212)
    issubsctype_577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 9), np_576, 'issubsctype')
    # Calling issubsctype(args, kwargs) (line 212)
    issubsctype_call_result_582 = invoke(stypy.reporting.localization.Localization(__file__, 212, 9), issubsctype_577, *[a_578, float32_580], **kwargs_581)
    
    # Testing the type of an if condition (line 212)
    if_condition_583 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 212, 9), issubsctype_call_result_582)
    # Assigning a type to the variable 'if_condition_583' (line 212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 9), 'if_condition_583', if_condition_583)
    # SSA begins for if statement (line 212)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 213)
    # Processing the call arguments (line 213)
    # Getting the type of 'a' (line 213)
    a_586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 24), 'a', False)
    # Processing the call keyword arguments (line 213)
    # Getting the type of 'np' (line 213)
    np_587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 33), 'np', False)
    # Obtaining the member 'double' of a type (line 213)
    double_588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 33), np_587, 'double')
    keyword_589 = double_588
    kwargs_590 = {'dtype': keyword_589}
    # Getting the type of 'np' (line 213)
    np_584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 213)
    array_585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 15), np_584, 'array')
    # Calling array(args, kwargs) (line 213)
    array_call_result_591 = invoke(stypy.reporting.localization.Localization(__file__, 213, 15), array_585, *[a_586], **kwargs_590)
    
    # Assigning a type to the variable 'stypy_return_type' (line 213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 8), 'stypy_return_type', array_call_result_591)
    # SSA branch for the else part of an if statement (line 212)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'a' (line 215)
    a_592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 15), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 8), 'stypy_return_type', a_592)
    # SSA join for if statement (line 212)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 210)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_copy_array_if_base_present(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_copy_array_if_base_present' in the type store
    # Getting the type of 'stypy_return_type' (line 206)
    stypy_return_type_593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_593)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_copy_array_if_base_present'
    return stypy_return_type_593

# Assigning a type to the variable '_copy_array_if_base_present' (line 206)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 0), '_copy_array_if_base_present', _copy_array_if_base_present)

@norecursion
def _copy_arrays_if_base_present(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_copy_arrays_if_base_present'
    module_type_store = module_type_store.open_function_context('_copy_arrays_if_base_present', 218, 0, False)
    
    # Passed parameters checking function
    _copy_arrays_if_base_present.stypy_localization = localization
    _copy_arrays_if_base_present.stypy_type_of_self = None
    _copy_arrays_if_base_present.stypy_type_store = module_type_store
    _copy_arrays_if_base_present.stypy_function_name = '_copy_arrays_if_base_present'
    _copy_arrays_if_base_present.stypy_param_names_list = ['T']
    _copy_arrays_if_base_present.stypy_varargs_param_name = None
    _copy_arrays_if_base_present.stypy_kwargs_param_name = None
    _copy_arrays_if_base_present.stypy_call_defaults = defaults
    _copy_arrays_if_base_present.stypy_call_varargs = varargs
    _copy_arrays_if_base_present.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_copy_arrays_if_base_present', ['T'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_copy_arrays_if_base_present', localization, ['T'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_copy_arrays_if_base_present(...)' code ##################

    str_594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, (-1)), 'str', '\n    Accept a tuple of arrays T. Copies the array T[i] if its base array\n    points to an actual array. Otherwise, the reference is just copied.\n    This is useful if the arrays are being passed to a C function that\n    does not do proper striding.\n    ')
    
    # Assigning a ListComp to a Name (line 225):
    
    # Assigning a ListComp to a Name (line 225):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'T' (line 225)
    T_599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 49), 'T')
    comprehension_600 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 9), T_599)
    # Assigning a type to the variable 'a' (line 225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 9), 'a', comprehension_600)
    
    # Call to _copy_array_if_base_present(...): (line 225)
    # Processing the call arguments (line 225)
    # Getting the type of 'a' (line 225)
    a_596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 37), 'a', False)
    # Processing the call keyword arguments (line 225)
    kwargs_597 = {}
    # Getting the type of '_copy_array_if_base_present' (line 225)
    _copy_array_if_base_present_595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 9), '_copy_array_if_base_present', False)
    # Calling _copy_array_if_base_present(args, kwargs) (line 225)
    _copy_array_if_base_present_call_result_598 = invoke(stypy.reporting.localization.Localization(__file__, 225, 9), _copy_array_if_base_present_595, *[a_596], **kwargs_597)
    
    list_601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 9), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 225, 9), list_601, _copy_array_if_base_present_call_result_598)
    # Assigning a type to the variable 'l' (line 225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 4), 'l', list_601)
    # Getting the type of 'l' (line 226)
    l_602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 11), 'l')
    # Assigning a type to the variable 'stypy_return_type' (line 226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 4), 'stypy_return_type', l_602)
    
    # ################# End of '_copy_arrays_if_base_present(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_copy_arrays_if_base_present' in the type store
    # Getting the type of 'stypy_return_type' (line 218)
    stypy_return_type_603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_603)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_copy_arrays_if_base_present'
    return stypy_return_type_603

# Assigning a type to the variable '_copy_arrays_if_base_present' (line 218)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 0), '_copy_arrays_if_base_present', _copy_arrays_if_base_present)

@norecursion
def _randdm(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_randdm'
    module_type_store = module_type_store.open_function_context('_randdm', 229, 0, False)
    
    # Passed parameters checking function
    _randdm.stypy_localization = localization
    _randdm.stypy_type_of_self = None
    _randdm.stypy_type_store = module_type_store
    _randdm.stypy_function_name = '_randdm'
    _randdm.stypy_param_names_list = ['pnts']
    _randdm.stypy_varargs_param_name = None
    _randdm.stypy_kwargs_param_name = None
    _randdm.stypy_call_defaults = defaults
    _randdm.stypy_call_varargs = varargs
    _randdm.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_randdm', ['pnts'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_randdm', localization, ['pnts'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_randdm(...)' code ##################

    str_604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 242, (-1)), 'str', '\n    Generate a random distance matrix stored in condensed form.\n\n    Parameters\n    ----------\n    pnts : int\n        The number of points in the distance matrix. Has to be at least 2.\n\n    Returns\n    -------\n    D : ndarray\n        A ``pnts * (pnts - 1) / 2`` sized vector is returned.\n    ')
    
    
    # Getting the type of 'pnts' (line 243)
    pnts_605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 7), 'pnts')
    int_606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 243, 15), 'int')
    # Applying the binary operator '>=' (line 243)
    result_ge_607 = python_operator(stypy.reporting.localization.Localization(__file__, 243, 7), '>=', pnts_605, int_606)
    
    # Testing the type of an if condition (line 243)
    if_condition_608 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 243, 4), result_ge_607)
    # Assigning a type to the variable 'if_condition_608' (line 243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 4), 'if_condition_608', if_condition_608)
    # SSA begins for if statement (line 243)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 244):
    
    # Assigning a Call to a Name (line 244):
    
    # Call to rand(...): (line 244)
    # Processing the call arguments (line 244)
    # Getting the type of 'pnts' (line 244)
    pnts_612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 27), 'pnts', False)
    # Getting the type of 'pnts' (line 244)
    pnts_613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 35), 'pnts', False)
    int_614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 42), 'int')
    # Applying the binary operator '-' (line 244)
    result_sub_615 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 35), '-', pnts_613, int_614)
    
    # Applying the binary operator '*' (line 244)
    result_mul_616 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 27), '*', pnts_612, result_sub_615)
    
    int_617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 47), 'int')
    # Applying the binary operator 'div' (line 244)
    result_div_618 = python_operator(stypy.reporting.localization.Localization(__file__, 244, 45), 'div', result_mul_616, int_617)
    
    # Processing the call keyword arguments (line 244)
    kwargs_619 = {}
    # Getting the type of 'np' (line 244)
    np_609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 12), 'np', False)
    # Obtaining the member 'random' of a type (line 244)
    random_610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 12), np_609, 'random')
    # Obtaining the member 'rand' of a type (line 244)
    rand_611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 12), random_610, 'rand')
    # Calling rand(args, kwargs) (line 244)
    rand_call_result_620 = invoke(stypy.reporting.localization.Localization(__file__, 244, 12), rand_611, *[result_div_618], **kwargs_619)
    
    # Assigning a type to the variable 'D' (line 244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'D', rand_call_result_620)
    # SSA branch for the else part of an if statement (line 243)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 246)
    # Processing the call arguments (line 246)
    str_622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 25), 'str', 'The number of points in the distance matrix must be at least 2.')
    # Processing the call keyword arguments (line 246)
    kwargs_623 = {}
    # Getting the type of 'ValueError' (line 246)
    ValueError_621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 246)
    ValueError_call_result_624 = invoke(stypy.reporting.localization.Localization(__file__, 246, 14), ValueError_621, *[str_622], **kwargs_623)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 246, 8), ValueError_call_result_624, 'raise parameter', BaseException)
    # SSA join for if statement (line 243)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'D' (line 248)
    D_625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 11), 'D')
    # Assigning a type to the variable 'stypy_return_type' (line 248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 4), 'stypy_return_type', D_625)
    
    # ################# End of '_randdm(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_randdm' in the type store
    # Getting the type of 'stypy_return_type' (line 229)
    stypy_return_type_626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_626)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_randdm'
    return stypy_return_type_626

# Assigning a type to the variable '_randdm' (line 229)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 229, 0), '_randdm', _randdm)

@norecursion
def single(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'single'
    module_type_store = module_type_store.open_function_context('single', 251, 0, False)
    
    # Passed parameters checking function
    single.stypy_localization = localization
    single.stypy_type_of_self = None
    single.stypy_type_store = module_type_store
    single.stypy_function_name = 'single'
    single.stypy_param_names_list = ['y']
    single.stypy_varargs_param_name = None
    single.stypy_kwargs_param_name = None
    single.stypy_call_defaults = defaults
    single.stypy_call_varargs = varargs
    single.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'single', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'single', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'single(...)' code ##################

    str_627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, (-1)), 'str', '\n    Perform single/min/nearest linkage on the condensed distance matrix ``y``.\n\n    Parameters\n    ----------\n    y : ndarray\n        The upper triangular of the distance matrix. The result of\n        ``pdist`` is returned in this form.\n\n    Returns\n    -------\n    Z : ndarray\n        The linkage matrix.\n\n    See Also\n    --------\n    linkage: for advanced creation of hierarchical clusterings.\n    scipy.spatial.distance.pdist : pairwise distance metrics\n\n    ')
    
    # Call to linkage(...): (line 272)
    # Processing the call arguments (line 272)
    # Getting the type of 'y' (line 272)
    y_629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 19), 'y', False)
    # Processing the call keyword arguments (line 272)
    str_630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 29), 'str', 'single')
    keyword_631 = str_630
    str_632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 46), 'str', 'euclidean')
    keyword_633 = str_632
    kwargs_634 = {'metric': keyword_633, 'method': keyword_631}
    # Getting the type of 'linkage' (line 272)
    linkage_628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 11), 'linkage', False)
    # Calling linkage(args, kwargs) (line 272)
    linkage_call_result_635 = invoke(stypy.reporting.localization.Localization(__file__, 272, 11), linkage_628, *[y_629], **kwargs_634)
    
    # Assigning a type to the variable 'stypy_return_type' (line 272)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 4), 'stypy_return_type', linkage_call_result_635)
    
    # ################# End of 'single(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'single' in the type store
    # Getting the type of 'stypy_return_type' (line 251)
    stypy_return_type_636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_636)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'single'
    return stypy_return_type_636

# Assigning a type to the variable 'single' (line 251)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 0), 'single', single)

@norecursion
def complete(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'complete'
    module_type_store = module_type_store.open_function_context('complete', 275, 0, False)
    
    # Passed parameters checking function
    complete.stypy_localization = localization
    complete.stypy_type_of_self = None
    complete.stypy_type_store = module_type_store
    complete.stypy_function_name = 'complete'
    complete.stypy_param_names_list = ['y']
    complete.stypy_varargs_param_name = None
    complete.stypy_kwargs_param_name = None
    complete.stypy_call_defaults = defaults
    complete.stypy_call_varargs = varargs
    complete.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'complete', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'complete', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'complete(...)' code ##################

    str_637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 297, (-1)), 'str', '\n    Perform complete/max/farthest point linkage on a condensed distance matrix.\n\n    Parameters\n    ----------\n    y : ndarray\n        The upper triangular of the distance matrix. The result of\n        ``pdist`` is returned in this form.\n\n    Returns\n    -------\n    Z : ndarray\n        A linkage matrix containing the hierarchical clustering. See\n        the `linkage` function documentation for more information\n        on its structure.\n\n    See Also\n    --------\n    linkage: for advanced creation of hierarchical clusterings.\n    scipy.spatial.distance.pdist : pairwise distance metrics\n\n    ')
    
    # Call to linkage(...): (line 298)
    # Processing the call arguments (line 298)
    # Getting the type of 'y' (line 298)
    y_639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 19), 'y', False)
    # Processing the call keyword arguments (line 298)
    str_640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 29), 'str', 'complete')
    keyword_641 = str_640
    str_642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 48), 'str', 'euclidean')
    keyword_643 = str_642
    kwargs_644 = {'metric': keyword_643, 'method': keyword_641}
    # Getting the type of 'linkage' (line 298)
    linkage_638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 11), 'linkage', False)
    # Calling linkage(args, kwargs) (line 298)
    linkage_call_result_645 = invoke(stypy.reporting.localization.Localization(__file__, 298, 11), linkage_638, *[y_639], **kwargs_644)
    
    # Assigning a type to the variable 'stypy_return_type' (line 298)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 4), 'stypy_return_type', linkage_call_result_645)
    
    # ################# End of 'complete(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'complete' in the type store
    # Getting the type of 'stypy_return_type' (line 275)
    stypy_return_type_646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_646)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'complete'
    return stypy_return_type_646

# Assigning a type to the variable 'complete' (line 275)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 0), 'complete', complete)

@norecursion
def average(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'average'
    module_type_store = module_type_store.open_function_context('average', 301, 0, False)
    
    # Passed parameters checking function
    average.stypy_localization = localization
    average.stypy_type_of_self = None
    average.stypy_type_store = module_type_store
    average.stypy_function_name = 'average'
    average.stypy_param_names_list = ['y']
    average.stypy_varargs_param_name = None
    average.stypy_kwargs_param_name = None
    average.stypy_call_defaults = defaults
    average.stypy_call_varargs = varargs
    average.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'average', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'average', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'average(...)' code ##################

    str_647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 322, (-1)), 'str', '\n    Perform average/UPGMA linkage on a condensed distance matrix.\n\n    Parameters\n    ----------\n    y : ndarray\n        The upper triangular of the distance matrix. The result of\n        ``pdist`` is returned in this form.\n\n    Returns\n    -------\n    Z : ndarray\n        A linkage matrix containing the hierarchical clustering. See\n        `linkage` for more information on its structure.\n\n    See Also\n    --------\n    linkage: for advanced creation of hierarchical clusterings.\n    scipy.spatial.distance.pdist : pairwise distance metrics\n\n    ')
    
    # Call to linkage(...): (line 323)
    # Processing the call arguments (line 323)
    # Getting the type of 'y' (line 323)
    y_649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 19), 'y', False)
    # Processing the call keyword arguments (line 323)
    str_650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 29), 'str', 'average')
    keyword_651 = str_650
    str_652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 47), 'str', 'euclidean')
    keyword_653 = str_652
    kwargs_654 = {'metric': keyword_653, 'method': keyword_651}
    # Getting the type of 'linkage' (line 323)
    linkage_648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 11), 'linkage', False)
    # Calling linkage(args, kwargs) (line 323)
    linkage_call_result_655 = invoke(stypy.reporting.localization.Localization(__file__, 323, 11), linkage_648, *[y_649], **kwargs_654)
    
    # Assigning a type to the variable 'stypy_return_type' (line 323)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 4), 'stypy_return_type', linkage_call_result_655)
    
    # ################# End of 'average(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'average' in the type store
    # Getting the type of 'stypy_return_type' (line 301)
    stypy_return_type_656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_656)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'average'
    return stypy_return_type_656

# Assigning a type to the variable 'average' (line 301)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 0), 'average', average)

@norecursion
def weighted(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'weighted'
    module_type_store = module_type_store.open_function_context('weighted', 326, 0, False)
    
    # Passed parameters checking function
    weighted.stypy_localization = localization
    weighted.stypy_type_of_self = None
    weighted.stypy_type_store = module_type_store
    weighted.stypy_function_name = 'weighted'
    weighted.stypy_param_names_list = ['y']
    weighted.stypy_varargs_param_name = None
    weighted.stypy_kwargs_param_name = None
    weighted.stypy_call_defaults = defaults
    weighted.stypy_call_varargs = varargs
    weighted.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'weighted', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'weighted', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'weighted(...)' code ##################

    str_657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, (-1)), 'str', '\n    Perform weighted/WPGMA linkage on the condensed distance matrix.\n\n    See `linkage` for more information on the return\n    structure and algorithm.\n\n    Parameters\n    ----------\n    y : ndarray\n        The upper triangular of the distance matrix. The result of\n        ``pdist`` is returned in this form.\n\n    Returns\n    -------\n    Z : ndarray\n        A linkage matrix containing the hierarchical clustering. See\n        `linkage` for more information on its structure.\n\n    See Also\n    --------\n    linkage : for advanced creation of hierarchical clusterings.\n    scipy.spatial.distance.pdist : pairwise distance metrics\n\n    ')
    
    # Call to linkage(...): (line 351)
    # Processing the call arguments (line 351)
    # Getting the type of 'y' (line 351)
    y_659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 19), 'y', False)
    # Processing the call keyword arguments (line 351)
    str_660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 29), 'str', 'weighted')
    keyword_661 = str_660
    str_662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 48), 'str', 'euclidean')
    keyword_663 = str_662
    kwargs_664 = {'metric': keyword_663, 'method': keyword_661}
    # Getting the type of 'linkage' (line 351)
    linkage_658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 11), 'linkage', False)
    # Calling linkage(args, kwargs) (line 351)
    linkage_call_result_665 = invoke(stypy.reporting.localization.Localization(__file__, 351, 11), linkage_658, *[y_659], **kwargs_664)
    
    # Assigning a type to the variable 'stypy_return_type' (line 351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 4), 'stypy_return_type', linkage_call_result_665)
    
    # ################# End of 'weighted(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'weighted' in the type store
    # Getting the type of 'stypy_return_type' (line 326)
    stypy_return_type_666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_666)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'weighted'
    return stypy_return_type_666

# Assigning a type to the variable 'weighted' (line 326)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 0), 'weighted', weighted)

@norecursion
def centroid(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'centroid'
    module_type_store = module_type_store.open_function_context('centroid', 354, 0, False)
    
    # Passed parameters checking function
    centroid.stypy_localization = localization
    centroid.stypy_type_of_self = None
    centroid.stypy_type_store = module_type_store
    centroid.stypy_function_name = 'centroid'
    centroid.stypy_param_names_list = ['y']
    centroid.stypy_varargs_param_name = None
    centroid.stypy_kwargs_param_name = None
    centroid.stypy_call_defaults = defaults
    centroid.stypy_call_varargs = varargs
    centroid.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'centroid', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'centroid', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'centroid(...)' code ##################

    str_667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, (-1)), 'str', '\n    Perform centroid/UPGMC linkage.\n\n    See `linkage` for more information on the input matrix,\n    return structure, and algorithm.\n\n    The following are common calling conventions:\n\n    1. ``Z = centroid(y)``\n\n       Performs centroid/UPGMC linkage on the condensed distance\n       matrix ``y``.\n\n    2. ``Z = centroid(X)``\n\n       Performs centroid/UPGMC linkage on the observation matrix ``X``\n       using Euclidean distance as the distance metric.\n\n    Parameters\n    ----------\n    y : ndarray\n        A condensed distance matrix. A condensed\n        distance matrix is a flat array containing the upper\n        triangular of the distance matrix. This is the form that\n        ``pdist`` returns. Alternatively, a collection of\n        m observation vectors in n dimensions may be passed as\n        a m by n array.\n\n    Returns\n    -------\n    Z : ndarray\n        A linkage matrix containing the hierarchical clustering. See\n        the `linkage` function documentation for more information\n        on its structure.\n\n    See Also\n    --------\n    linkage: for advanced creation of hierarchical clusterings.\n\n    ')
    
    # Call to linkage(...): (line 395)
    # Processing the call arguments (line 395)
    # Getting the type of 'y' (line 395)
    y_669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 19), 'y', False)
    # Processing the call keyword arguments (line 395)
    str_670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 29), 'str', 'centroid')
    keyword_671 = str_670
    str_672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 48), 'str', 'euclidean')
    keyword_673 = str_672
    kwargs_674 = {'metric': keyword_673, 'method': keyword_671}
    # Getting the type of 'linkage' (line 395)
    linkage_668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 11), 'linkage', False)
    # Calling linkage(args, kwargs) (line 395)
    linkage_call_result_675 = invoke(stypy.reporting.localization.Localization(__file__, 395, 11), linkage_668, *[y_669], **kwargs_674)
    
    # Assigning a type to the variable 'stypy_return_type' (line 395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 4), 'stypy_return_type', linkage_call_result_675)
    
    # ################# End of 'centroid(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'centroid' in the type store
    # Getting the type of 'stypy_return_type' (line 354)
    stypy_return_type_676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_676)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'centroid'
    return stypy_return_type_676

# Assigning a type to the variable 'centroid' (line 354)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 0), 'centroid', centroid)

@norecursion
def median(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'median'
    module_type_store = module_type_store.open_function_context('median', 398, 0, False)
    
    # Passed parameters checking function
    median.stypy_localization = localization
    median.stypy_type_of_self = None
    median.stypy_type_store = module_type_store
    median.stypy_function_name = 'median'
    median.stypy_param_names_list = ['y']
    median.stypy_varargs_param_name = None
    median.stypy_kwargs_param_name = None
    median.stypy_call_defaults = defaults
    median.stypy_call_varargs = varargs
    median.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'median', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'median', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'median(...)' code ##################

    str_677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, (-1)), 'str', '\n    Perform median/WPGMC linkage.\n\n    See `linkage` for more information on the return structure\n    and algorithm.\n\n     The following are common calling conventions:\n\n     1. ``Z = median(y)``\n\n        Performs median/WPGMC linkage on the condensed distance matrix\n        ``y``.  See ``linkage`` for more information on the return\n        structure and algorithm.\n\n     2. ``Z = median(X)``\n\n        Performs median/WPGMC linkage on the observation matrix ``X``\n        using Euclidean distance as the distance metric. See `linkage`\n        for more information on the return structure and algorithm.\n\n    Parameters\n    ----------\n    y : ndarray\n        A condensed distance matrix. A condensed\n        distance matrix is a flat array containing the upper\n        triangular of the distance matrix. This is the form that\n        ``pdist`` returns.  Alternatively, a collection of\n        m observation vectors in n dimensions may be passed as\n        a m by n array.\n\n    Returns\n    -------\n    Z : ndarray\n        The hierarchical clustering encoded as a linkage matrix.\n\n    See Also\n    --------\n    linkage: for advanced creation of hierarchical clusterings.\n    scipy.spatial.distance.pdist : pairwise distance metrics\n\n    ')
    
    # Call to linkage(...): (line 440)
    # Processing the call arguments (line 440)
    # Getting the type of 'y' (line 440)
    y_679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 19), 'y', False)
    # Processing the call keyword arguments (line 440)
    str_680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 440, 29), 'str', 'median')
    keyword_681 = str_680
    str_682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 440, 46), 'str', 'euclidean')
    keyword_683 = str_682
    kwargs_684 = {'metric': keyword_683, 'method': keyword_681}
    # Getting the type of 'linkage' (line 440)
    linkage_678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 11), 'linkage', False)
    # Calling linkage(args, kwargs) (line 440)
    linkage_call_result_685 = invoke(stypy.reporting.localization.Localization(__file__, 440, 11), linkage_678, *[y_679], **kwargs_684)
    
    # Assigning a type to the variable 'stypy_return_type' (line 440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 4), 'stypy_return_type', linkage_call_result_685)
    
    # ################# End of 'median(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'median' in the type store
    # Getting the type of 'stypy_return_type' (line 398)
    stypy_return_type_686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_686)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'median'
    return stypy_return_type_686

# Assigning a type to the variable 'median' (line 398)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 0), 'median', median)

@norecursion
def ward(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ward'
    module_type_store = module_type_store.open_function_context('ward', 443, 0, False)
    
    # Passed parameters checking function
    ward.stypy_localization = localization
    ward.stypy_type_of_self = None
    ward.stypy_type_store = module_type_store
    ward.stypy_function_name = 'ward'
    ward.stypy_param_names_list = ['y']
    ward.stypy_varargs_param_name = None
    ward.stypy_kwargs_param_name = None
    ward.stypy_call_defaults = defaults
    ward.stypy_call_varargs = varargs
    ward.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ward', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ward', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ward(...)' code ##################

    str_687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, (-1)), 'str', "\n    Perform Ward's linkage on a condensed distance matrix.\n\n    See `linkage` for more information on the return structure\n    and algorithm.\n\n    The following are common calling conventions:\n\n    1. ``Z = ward(y)``\n       Performs Ward's linkage on the condensed distance matrix ``y``.\n\n    2. ``Z = ward(X)``\n       Performs Ward's linkage on the observation matrix ``X`` using\n       Euclidean distance as the distance metric.\n\n    Parameters\n    ----------\n    y : ndarray\n        A condensed distance matrix. A condensed\n        distance matrix is a flat array containing the upper\n        triangular of the distance matrix. This is the form that\n        ``pdist`` returns.  Alternatively, a collection of\n        m observation vectors in n dimensions may be passed as\n        a m by n array.\n\n    Returns\n    -------\n    Z : ndarray\n        The hierarchical clustering encoded as a linkage matrix. See\n        `linkage` for more information on the return structure and\n        algorithm.\n\n    See Also\n    --------\n    linkage: for advanced creation of hierarchical clusterings.\n    scipy.spatial.distance.pdist : pairwise distance metrics\n\n    ")
    
    # Call to linkage(...): (line 482)
    # Processing the call arguments (line 482)
    # Getting the type of 'y' (line 482)
    y_689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 19), 'y', False)
    # Processing the call keyword arguments (line 482)
    str_690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 29), 'str', 'ward')
    keyword_691 = str_690
    str_692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 44), 'str', 'euclidean')
    keyword_693 = str_692
    kwargs_694 = {'metric': keyword_693, 'method': keyword_691}
    # Getting the type of 'linkage' (line 482)
    linkage_688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 11), 'linkage', False)
    # Calling linkage(args, kwargs) (line 482)
    linkage_call_result_695 = invoke(stypy.reporting.localization.Localization(__file__, 482, 11), linkage_688, *[y_689], **kwargs_694)
    
    # Assigning a type to the variable 'stypy_return_type' (line 482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 4), 'stypy_return_type', linkage_call_result_695)
    
    # ################# End of 'ward(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ward' in the type store
    # Getting the type of 'stypy_return_type' (line 443)
    stypy_return_type_696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_696)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ward'
    return stypy_return_type_696

# Assigning a type to the variable 'ward' (line 443)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 443, 0), 'ward', ward)

@norecursion
def linkage(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 22), 'str', 'single')
    str_698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 39), 'str', 'euclidean')
    # Getting the type of 'False' (line 485)
    False_699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 69), 'False')
    defaults = [str_697, str_698, False_699]
    # Create a new context for function 'linkage'
    module_type_store = module_type_store.open_function_context('linkage', 485, 0, False)
    
    # Passed parameters checking function
    linkage.stypy_localization = localization
    linkage.stypy_type_of_self = None
    linkage.stypy_type_store = module_type_store
    linkage.stypy_function_name = 'linkage'
    linkage.stypy_param_names_list = ['y', 'method', 'metric', 'optimal_ordering']
    linkage.stypy_varargs_param_name = None
    linkage.stypy_kwargs_param_name = None
    linkage.stypy_call_defaults = defaults
    linkage.stypy_call_varargs = varargs
    linkage.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'linkage', ['y', 'method', 'metric', 'optimal_ordering'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'linkage', localization, ['y', 'method', 'metric', 'optimal_ordering'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'linkage(...)' code ##################

    str_700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, (-1)), 'str', '\n    Perform hierarchical/agglomerative clustering.\n\n    The input y may be either a 1d compressed distance matrix\n    or a 2d array of observation vectors.\n\n    If y is a 1d compressed distance matrix,\n    then y must be a :math:`{n \\choose 2}` sized\n    vector where n is the number of original observations paired\n    in the distance matrix. The behavior of this function is very\n    similar to the MATLAB linkage function.\n\n    A :math:`(n-1)` by 4 matrix ``Z`` is returned. At the\n    :math:`i`-th iteration, clusters with indices ``Z[i, 0]`` and\n    ``Z[i, 1]`` are combined to form cluster :math:`n + i`. A\n    cluster with an index less than :math:`n` corresponds to one of\n    the :math:`n` original observations. The distance between\n    clusters ``Z[i, 0]`` and ``Z[i, 1]`` is given by ``Z[i, 2]``. The\n    fourth value ``Z[i, 3]`` represents the number of original\n    observations in the newly formed cluster.\n\n    The following linkage methods are used to compute the distance\n    :math:`d(s, t)` between two clusters :math:`s` and\n    :math:`t`. The algorithm begins with a forest of clusters that\n    have yet to be used in the hierarchy being formed. When two\n    clusters :math:`s` and :math:`t` from this forest are combined\n    into a single cluster :math:`u`, :math:`s` and :math:`t` are\n    removed from the forest, and :math:`u` is added to the\n    forest. When only one cluster remains in the forest, the algorithm\n    stops, and this cluster becomes the root.\n\n    A distance matrix is maintained at each iteration. The ``d[i,j]``\n    entry corresponds to the distance between cluster :math:`i` and\n    :math:`j` in the original forest.\n\n    At each iteration, the algorithm must update the distance matrix\n    to reflect the distance of the newly formed cluster u with the\n    remaining clusters in the forest.\n\n    Suppose there are :math:`|u|` original observations\n    :math:`u[0], \\ldots, u[|u|-1]` in cluster :math:`u` and\n    :math:`|v|` original objects :math:`v[0], \\ldots, v[|v|-1]` in\n    cluster :math:`v`. Recall :math:`s` and :math:`t` are\n    combined to form cluster :math:`u`. Let :math:`v` be any\n    remaining cluster in the forest that is not :math:`u`.\n\n    The following are methods for calculating the distance between the\n    newly formed cluster :math:`u` and each :math:`v`.\n\n      * method=\'single\' assigns\n\n        .. math::\n           d(u,v) = \\min(dist(u[i],v[j]))\n\n        for all points :math:`i` in cluster :math:`u` and\n        :math:`j` in cluster :math:`v`. This is also known as the\n        Nearest Point Algorithm.\n\n      * method=\'complete\' assigns\n\n        .. math::\n           d(u, v) = \\max(dist(u[i],v[j]))\n\n        for all points :math:`i` in cluster u and :math:`j` in\n        cluster :math:`v`. This is also known by the Farthest Point\n        Algorithm or Voor Hees Algorithm.\n\n      * method=\'average\' assigns\n\n        .. math::\n           d(u,v) = \\sum_{ij} \\frac{d(u[i], v[j])}\n                                   {(|u|*|v|)}\n\n        for all points :math:`i` and :math:`j` where :math:`|u|`\n        and :math:`|v|` are the cardinalities of clusters :math:`u`\n        and :math:`v`, respectively. This is also called the UPGMA\n        algorithm.\n\n      * method=\'weighted\' assigns\n\n        .. math::\n           d(u,v) = (dist(s,v) + dist(t,v))/2\n\n        where cluster u was formed with cluster s and t and v\n        is a remaining cluster in the forest. (also called WPGMA)\n\n      * method=\'centroid\' assigns\n\n        .. math::\n           dist(s,t) = ||c_s-c_t||_2\n\n        where :math:`c_s` and :math:`c_t` are the centroids of\n        clusters :math:`s` and :math:`t`, respectively. When two\n        clusters :math:`s` and :math:`t` are combined into a new\n        cluster :math:`u`, the new centroid is computed over all the\n        original objects in clusters :math:`s` and :math:`t`. The\n        distance then becomes the Euclidean distance between the\n        centroid of :math:`u` and the centroid of a remaining cluster\n        :math:`v` in the forest. This is also known as the UPGMC\n        algorithm.\n\n      * method=\'median\' assigns :math:`d(s,t)` like the ``centroid``\n        method. When two clusters :math:`s` and :math:`t` are combined\n        into a new cluster :math:`u`, the average of centroids s and t\n        give the new centroid :math:`u`. This is also known as the\n        WPGMC algorithm.\n\n      * method=\'ward\' uses the Ward variance minimization algorithm.\n        The new entry :math:`d(u,v)` is computed as follows,\n\n        .. math::\n\n           d(u,v) = \\sqrt{\\frac{|v|+|s|}\n                               {T}d(v,s)^2\n                        + \\frac{|v|+|t|}\n                               {T}d(v,t)^2\n                        - \\frac{|v|}\n                               {T}d(s,t)^2}\n\n        where :math:`u` is the newly joined cluster consisting of\n        clusters :math:`s` and :math:`t`, :math:`v` is an unused\n        cluster in the forest, :math:`T=|v|+|s|+|t|`, and\n        :math:`|*|` is the cardinality of its argument. This is also\n        known as the incremental algorithm.\n\n    Warning: When the minimum distance pair in the forest is chosen, there\n    may be two or more pairs with the same minimum distance. This\n    implementation may choose a different minimum than the MATLAB\n    version.\n\n    Parameters\n    ----------\n    y : ndarray\n        A condensed distance matrix. A condensed distance matrix\n        is a flat array containing the upper triangular of the distance matrix.\n        This is the form that ``pdist`` returns. Alternatively, a collection of\n        :math:`m` observation vectors in :math:`n` dimensions may be passed as\n        an :math:`m` by :math:`n` array. All elements of the condensed distance\n        matrix must be finite, i.e. no NaNs or infs.\n    method : str, optional\n        The linkage algorithm to use. See the ``Linkage Methods`` section below\n        for full descriptions.\n    metric : str or function, optional\n        The distance metric to use in the case that y is a collection of\n        observation vectors; ignored otherwise. See the ``pdist``\n        function for a list of valid distance metrics. A custom distance\n        function can also be used.\n    optimal_ordering : bool, optional\n        If True, the linkage matrix will be reordered so that the distance\n        between successive leaves is minimal. This results in a more intuitive\n        tree structure when the data are visualized. defaults to False, because\n        this algorithm can be slow, particularly on large datasets [2]_. See \n        also the `optimal_leaf_ordering` function.\n        \n        .. versionadded:: 1.0.0\n\n    Returns\n    -------\n    Z : ndarray\n        The hierarchical clustering encoded as a linkage matrix.\n\n    Notes\n    -----\n    1. For method \'single\' an optimized algorithm based on minimum spanning\n       tree is implemented. It has time complexity :math:`O(n^2)`.\n       For methods \'complete\', \'average\', \'weighted\' and \'ward\' an algorithm\n       called nearest-neighbors chain is implemented. It also has time\n       complexity :math:`O(n^2)`.\n       For other methods a naive algorithm is implemented with :math:`O(n^3)`\n       time complexity.\n       All algorithms use :math:`O(n^2)` memory.\n       Refer to [1]_ for details about the algorithms.\n    2. Methods \'centroid\', \'median\' and \'ward\' are correctly defined only if\n       Euclidean pairwise metric is used. If `y` is passed as precomputed\n       pairwise distances, then it is a user responsibility to assure that\n       these distances are in fact Euclidean, otherwise the produced result\n       will be incorrect.\n\n    See Also\n    --------\n    scipy.spatial.distance.pdist : pairwise distance metrics\n\n    References\n    ----------\n    .. [1] Daniel Mullner, "Modern hierarchical, agglomerative clustering\n           algorithms", :arXiv:`1109.2378v1`.\n    .. [2] Ziv Bar-Joseph, David K. Gifford, Tommi S. Jaakkola, "Fast optimal\n           leaf ordering for hierarchical clustering", 2001. Bioinformatics\n           https://doi.org/10.1093/bioinformatics/17.suppl_1.S22\n\n    Examples\n    --------\n    >>> from scipy.cluster.hierarchy import dendrogram, linkage\n    >>> from matplotlib import pyplot as plt\n    >>> X = [[i] for i in [2, 8, 0, 4, 1, 9, 9, 0]]\n\n    >>> Z = linkage(X, \'ward\')\n    >>> fig = plt.figure(figsize=(25, 10))\n    >>> dn = dendrogram(Z)\n\n    >>> Z = linkage(X, \'single\')\n    >>> fig = plt.figure(figsize=(25, 10))\n    >>> dn = dendrogram(Z)\n    >>> plt.show()\n    ')
    
    
    # Getting the type of 'method' (line 691)
    method_701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 7), 'method')
    # Getting the type of '_LINKAGE_METHODS' (line 691)
    _LINKAGE_METHODS_702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 21), '_LINKAGE_METHODS')
    # Applying the binary operator 'notin' (line 691)
    result_contains_703 = python_operator(stypy.reporting.localization.Localization(__file__, 691, 7), 'notin', method_701, _LINKAGE_METHODS_702)
    
    # Testing the type of an if condition (line 691)
    if_condition_704 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 691, 4), result_contains_703)
    # Assigning a type to the variable 'if_condition_704' (line 691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 4), 'if_condition_704', if_condition_704)
    # SSA begins for if statement (line 691)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 692)
    # Processing the call arguments (line 692)
    
    # Call to format(...): (line 692)
    # Processing the call arguments (line 692)
    # Getting the type of 'method' (line 692)
    method_708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 54), 'method', False)
    # Processing the call keyword arguments (line 692)
    kwargs_709 = {}
    str_706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 25), 'str', 'Invalid method: {0}')
    # Obtaining the member 'format' of a type (line 692)
    format_707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 25), str_706, 'format')
    # Calling format(args, kwargs) (line 692)
    format_call_result_710 = invoke(stypy.reporting.localization.Localization(__file__, 692, 25), format_707, *[method_708], **kwargs_709)
    
    # Processing the call keyword arguments (line 692)
    kwargs_711 = {}
    # Getting the type of 'ValueError' (line 692)
    ValueError_705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 692)
    ValueError_call_result_712 = invoke(stypy.reporting.localization.Localization(__file__, 692, 14), ValueError_705, *[format_call_result_710], **kwargs_711)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 692, 8), ValueError_call_result_712, 'raise parameter', BaseException)
    # SSA join for if statement (line 691)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 694):
    
    # Assigning a Call to a Name (line 694):
    
    # Call to _convert_to_double(...): (line 694)
    # Processing the call arguments (line 694)
    
    # Call to asarray(...): (line 694)
    # Processing the call arguments (line 694)
    # Getting the type of 'y' (line 694)
    y_716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 38), 'y', False)
    # Processing the call keyword arguments (line 694)
    str_717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, 47), 'str', 'c')
    keyword_718 = str_717
    kwargs_719 = {'order': keyword_718}
    # Getting the type of 'np' (line 694)
    np_714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 27), 'np', False)
    # Obtaining the member 'asarray' of a type (line 694)
    asarray_715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 694, 27), np_714, 'asarray')
    # Calling asarray(args, kwargs) (line 694)
    asarray_call_result_720 = invoke(stypy.reporting.localization.Localization(__file__, 694, 27), asarray_715, *[y_716], **kwargs_719)
    
    # Processing the call keyword arguments (line 694)
    kwargs_721 = {}
    # Getting the type of '_convert_to_double' (line 694)
    _convert_to_double_713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 8), '_convert_to_double', False)
    # Calling _convert_to_double(args, kwargs) (line 694)
    _convert_to_double_call_result_722 = invoke(stypy.reporting.localization.Localization(__file__, 694, 8), _convert_to_double_713, *[asarray_call_result_720], **kwargs_721)
    
    # Assigning a type to the variable 'y' (line 694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 4), 'y', _convert_to_double_call_result_722)
    
    
    # Getting the type of 'y' (line 696)
    y_723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 7), 'y')
    # Obtaining the member 'ndim' of a type (line 696)
    ndim_724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 7), y_723, 'ndim')
    int_725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 17), 'int')
    # Applying the binary operator '==' (line 696)
    result_eq_726 = python_operator(stypy.reporting.localization.Localization(__file__, 696, 7), '==', ndim_724, int_725)
    
    # Testing the type of an if condition (line 696)
    if_condition_727 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 696, 4), result_eq_726)
    # Assigning a type to the variable 'if_condition_727' (line 696)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 4), 'if_condition_727', if_condition_727)
    # SSA begins for if statement (line 696)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to is_valid_y(...): (line 697)
    # Processing the call arguments (line 697)
    # Getting the type of 'y' (line 697)
    y_730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 28), 'y', False)
    # Processing the call keyword arguments (line 697)
    # Getting the type of 'True' (line 697)
    True_731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 37), 'True', False)
    keyword_732 = True_731
    str_733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 48), 'str', 'y')
    keyword_734 = str_733
    kwargs_735 = {'throw': keyword_732, 'name': keyword_734}
    # Getting the type of 'distance' (line 697)
    distance_728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'distance', False)
    # Obtaining the member 'is_valid_y' of a type (line 697)
    is_valid_y_729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 8), distance_728, 'is_valid_y')
    # Calling is_valid_y(args, kwargs) (line 697)
    is_valid_y_call_result_736 = invoke(stypy.reporting.localization.Localization(__file__, 697, 8), is_valid_y_729, *[y_730], **kwargs_735)
    
    
    # Assigning a Call to a List (line 698):
    
    # Assigning a Subscript to a Name (line 698):
    
    # Obtaining the type of the subscript
    int_737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 8), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 698)
    # Processing the call arguments (line 698)
    
    # Obtaining an instance of the builtin type 'list' (line 698)
    list_739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 43), 'list')
    # Adding type elements to the builtin type 'list' instance (line 698)
    # Adding element type (line 698)
    # Getting the type of 'y' (line 698)
    y_740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 44), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 698, 43), list_739, y_740)
    
    # Processing the call keyword arguments (line 698)
    kwargs_741 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 698)
    _copy_arrays_if_base_present_738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 14), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 698)
    _copy_arrays_if_base_present_call_result_742 = invoke(stypy.reporting.localization.Localization(__file__, 698, 14), _copy_arrays_if_base_present_738, *[list_739], **kwargs_741)
    
    # Obtaining the member '__getitem__' of a type (line 698)
    getitem___743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 8), _copy_arrays_if_base_present_call_result_742, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 698)
    subscript_call_result_744 = invoke(stypy.reporting.localization.Localization(__file__, 698, 8), getitem___743, int_737)
    
    # Assigning a type to the variable 'list_var_assignment_468' (line 698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'list_var_assignment_468', subscript_call_result_744)
    
    # Assigning a Name to a Name (line 698):
    # Getting the type of 'list_var_assignment_468' (line 698)
    list_var_assignment_468_745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'list_var_assignment_468')
    # Assigning a type to the variable 'y' (line 698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 9), 'y', list_var_assignment_468_745)
    # SSA branch for the else part of an if statement (line 696)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'y' (line 699)
    y_746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 9), 'y')
    # Obtaining the member 'ndim' of a type (line 699)
    ndim_747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 9), y_746, 'ndim')
    int_748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 19), 'int')
    # Applying the binary operator '==' (line 699)
    result_eq_749 = python_operator(stypy.reporting.localization.Localization(__file__, 699, 9), '==', ndim_747, int_748)
    
    # Testing the type of an if condition (line 699)
    if_condition_750 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 699, 9), result_eq_749)
    # Assigning a type to the variable 'if_condition_750' (line 699)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 9), 'if_condition_750', if_condition_750)
    # SSA begins for if statement (line 699)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'method' (line 700)
    method_751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 11), 'method')
    # Getting the type of '_EUCLIDEAN_METHODS' (line 700)
    _EUCLIDEAN_METHODS_752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 21), '_EUCLIDEAN_METHODS')
    # Applying the binary operator 'in' (line 700)
    result_contains_753 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 11), 'in', method_751, _EUCLIDEAN_METHODS_752)
    
    
    # Getting the type of 'metric' (line 700)
    metric_754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 44), 'metric')
    str_755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 700, 54), 'str', 'euclidean')
    # Applying the binary operator '!=' (line 700)
    result_ne_756 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 44), '!=', metric_754, str_755)
    
    # Applying the binary operator 'and' (line 700)
    result_and_keyword_757 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 11), 'and', result_contains_753, result_ne_756)
    
    # Testing the type of an if condition (line 700)
    if_condition_758 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 700, 8), result_and_keyword_757)
    # Assigning a type to the variable 'if_condition_758' (line 700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 8), 'if_condition_758', if_condition_758)
    # SSA begins for if statement (line 700)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 701)
    # Processing the call arguments (line 701)
    
    # Call to format(...): (line 701)
    # Processing the call arguments (line 701)
    # Getting the type of 'method' (line 702)
    method_762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 54), 'method', False)
    # Processing the call keyword arguments (line 701)
    kwargs_763 = {}
    str_760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 29), 'str', "Method '{0}' requires the distance metric to be Euclidean")
    # Obtaining the member 'format' of a type (line 701)
    format_761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 29), str_760, 'format')
    # Calling format(args, kwargs) (line 701)
    format_call_result_764 = invoke(stypy.reporting.localization.Localization(__file__, 701, 29), format_761, *[method_762], **kwargs_763)
    
    # Processing the call keyword arguments (line 701)
    kwargs_765 = {}
    # Getting the type of 'ValueError' (line 701)
    ValueError_759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 701)
    ValueError_call_result_766 = invoke(stypy.reporting.localization.Localization(__file__, 701, 18), ValueError_759, *[format_call_result_764], **kwargs_765)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 701, 12), ValueError_call_result_766, 'raise parameter', BaseException)
    # SSA join for if statement (line 700)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 19), 'int')
    # Getting the type of 'y' (line 703)
    y_768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 11), 'y')
    # Obtaining the member 'shape' of a type (line 703)
    shape_769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 11), y_768, 'shape')
    # Obtaining the member '__getitem__' of a type (line 703)
    getitem___770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 11), shape_769, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 703)
    subscript_call_result_771 = invoke(stypy.reporting.localization.Localization(__file__, 703, 11), getitem___770, int_767)
    
    
    # Obtaining the type of the subscript
    int_772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 33), 'int')
    # Getting the type of 'y' (line 703)
    y_773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 25), 'y')
    # Obtaining the member 'shape' of a type (line 703)
    shape_774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 25), y_773, 'shape')
    # Obtaining the member '__getitem__' of a type (line 703)
    getitem___775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 25), shape_774, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 703)
    subscript_call_result_776 = invoke(stypy.reporting.localization.Localization(__file__, 703, 25), getitem___775, int_772)
    
    # Applying the binary operator '==' (line 703)
    result_eq_777 = python_operator(stypy.reporting.localization.Localization(__file__, 703, 11), '==', subscript_call_result_771, subscript_call_result_776)
    
    
    # Call to allclose(...): (line 703)
    # Processing the call arguments (line 703)
    
    # Call to diag(...): (line 703)
    # Processing the call arguments (line 703)
    # Getting the type of 'y' (line 703)
    y_782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 60), 'y', False)
    # Processing the call keyword arguments (line 703)
    kwargs_783 = {}
    # Getting the type of 'np' (line 703)
    np_780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 52), 'np', False)
    # Obtaining the member 'diag' of a type (line 703)
    diag_781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 52), np_780, 'diag')
    # Calling diag(args, kwargs) (line 703)
    diag_call_result_784 = invoke(stypy.reporting.localization.Localization(__file__, 703, 52), diag_781, *[y_782], **kwargs_783)
    
    int_785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 64), 'int')
    # Processing the call keyword arguments (line 703)
    kwargs_786 = {}
    # Getting the type of 'np' (line 703)
    np_778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 40), 'np', False)
    # Obtaining the member 'allclose' of a type (line 703)
    allclose_779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 40), np_778, 'allclose')
    # Calling allclose(args, kwargs) (line 703)
    allclose_call_result_787 = invoke(stypy.reporting.localization.Localization(__file__, 703, 40), allclose_779, *[diag_call_result_784, int_785], **kwargs_786)
    
    # Applying the binary operator 'and' (line 703)
    result_and_keyword_788 = python_operator(stypy.reporting.localization.Localization(__file__, 703, 11), 'and', result_eq_777, allclose_call_result_787)
    
    # Testing the type of an if condition (line 703)
    if_condition_789 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 703, 8), result_and_keyword_788)
    # Assigning a type to the variable 'if_condition_789' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'if_condition_789', if_condition_789)
    # SSA begins for if statement (line 703)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Call to all(...): (line 704)
    # Processing the call arguments (line 704)
    
    # Getting the type of 'y' (line 704)
    y_792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 22), 'y', False)
    int_793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, 27), 'int')
    # Applying the binary operator '>=' (line 704)
    result_ge_794 = python_operator(stypy.reporting.localization.Localization(__file__, 704, 22), '>=', y_792, int_793)
    
    # Processing the call keyword arguments (line 704)
    kwargs_795 = {}
    # Getting the type of 'np' (line 704)
    np_790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 15), 'np', False)
    # Obtaining the member 'all' of a type (line 704)
    all_791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 15), np_790, 'all')
    # Calling all(args, kwargs) (line 704)
    all_call_result_796 = invoke(stypy.reporting.localization.Localization(__file__, 704, 15), all_791, *[result_ge_794], **kwargs_795)
    
    
    # Call to allclose(...): (line 704)
    # Processing the call arguments (line 704)
    # Getting the type of 'y' (line 704)
    y_799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 46), 'y', False)
    # Getting the type of 'y' (line 704)
    y_800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 49), 'y', False)
    # Obtaining the member 'T' of a type (line 704)
    T_801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 49), y_800, 'T')
    # Processing the call keyword arguments (line 704)
    kwargs_802 = {}
    # Getting the type of 'np' (line 704)
    np_797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 34), 'np', False)
    # Obtaining the member 'allclose' of a type (line 704)
    allclose_798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 34), np_797, 'allclose')
    # Calling allclose(args, kwargs) (line 704)
    allclose_call_result_803 = invoke(stypy.reporting.localization.Localization(__file__, 704, 34), allclose_798, *[y_799, T_801], **kwargs_802)
    
    # Applying the binary operator 'and' (line 704)
    result_and_keyword_804 = python_operator(stypy.reporting.localization.Localization(__file__, 704, 15), 'and', all_call_result_796, allclose_call_result_803)
    
    # Testing the type of an if condition (line 704)
    if_condition_805 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 704, 12), result_and_keyword_804)
    # Assigning a type to the variable 'if_condition_805' (line 704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 12), 'if_condition_805', if_condition_805)
    # SSA begins for if statement (line 704)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _warning(...): (line 705)
    # Processing the call arguments (line 705)
    str_807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 25), 'str', 'The symmetric non-negative hollow observation matrix looks suspiciously like an uncondensed distance matrix')
    # Processing the call keyword arguments (line 705)
    kwargs_808 = {}
    # Getting the type of '_warning' (line 705)
    _warning_806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 16), '_warning', False)
    # Calling _warning(args, kwargs) (line 705)
    _warning_call_result_809 = invoke(stypy.reporting.localization.Localization(__file__, 705, 16), _warning_806, *[str_807], **kwargs_808)
    
    # SSA join for if statement (line 704)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 703)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 708):
    
    # Assigning a Call to a Name (line 708):
    
    # Call to pdist(...): (line 708)
    # Processing the call arguments (line 708)
    # Getting the type of 'y' (line 708)
    y_812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 27), 'y', False)
    # Getting the type of 'metric' (line 708)
    metric_813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 30), 'metric', False)
    # Processing the call keyword arguments (line 708)
    kwargs_814 = {}
    # Getting the type of 'distance' (line 708)
    distance_810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 12), 'distance', False)
    # Obtaining the member 'pdist' of a type (line 708)
    pdist_811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 12), distance_810, 'pdist')
    # Calling pdist(args, kwargs) (line 708)
    pdist_call_result_815 = invoke(stypy.reporting.localization.Localization(__file__, 708, 12), pdist_811, *[y_812, metric_813], **kwargs_814)
    
    # Assigning a type to the variable 'y' (line 708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 8), 'y', pdist_call_result_815)
    # SSA branch for the else part of an if statement (line 699)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 710)
    # Processing the call arguments (line 710)
    str_817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 25), 'str', '`y` must be 1 or 2 dimensional.')
    # Processing the call keyword arguments (line 710)
    kwargs_818 = {}
    # Getting the type of 'ValueError' (line 710)
    ValueError_816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 710)
    ValueError_call_result_819 = invoke(stypy.reporting.localization.Localization(__file__, 710, 14), ValueError_816, *[str_817], **kwargs_818)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 710, 8), ValueError_call_result_819, 'raise parameter', BaseException)
    # SSA join for if statement (line 699)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 696)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to all(...): (line 712)
    # Processing the call arguments (line 712)
    
    # Call to isfinite(...): (line 712)
    # Processing the call arguments (line 712)
    # Getting the type of 'y' (line 712)
    y_824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 30), 'y', False)
    # Processing the call keyword arguments (line 712)
    kwargs_825 = {}
    # Getting the type of 'np' (line 712)
    np_822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 18), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 712)
    isfinite_823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 18), np_822, 'isfinite')
    # Calling isfinite(args, kwargs) (line 712)
    isfinite_call_result_826 = invoke(stypy.reporting.localization.Localization(__file__, 712, 18), isfinite_823, *[y_824], **kwargs_825)
    
    # Processing the call keyword arguments (line 712)
    kwargs_827 = {}
    # Getting the type of 'np' (line 712)
    np_820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 11), 'np', False)
    # Obtaining the member 'all' of a type (line 712)
    all_821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 11), np_820, 'all')
    # Calling all(args, kwargs) (line 712)
    all_call_result_828 = invoke(stypy.reporting.localization.Localization(__file__, 712, 11), all_821, *[isfinite_call_result_826], **kwargs_827)
    
    # Applying the 'not' unary operator (line 712)
    result_not__829 = python_operator(stypy.reporting.localization.Localization(__file__, 712, 7), 'not', all_call_result_828)
    
    # Testing the type of an if condition (line 712)
    if_condition_830 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 712, 4), result_not__829)
    # Assigning a type to the variable 'if_condition_830' (line 712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 4), 'if_condition_830', if_condition_830)
    # SSA begins for if statement (line 712)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 713)
    # Processing the call arguments (line 713)
    str_832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 713, 25), 'str', 'The condensed distance matrix must contain only finite values.')
    # Processing the call keyword arguments (line 713)
    kwargs_833 = {}
    # Getting the type of 'ValueError' (line 713)
    ValueError_831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 713)
    ValueError_call_result_834 = invoke(stypy.reporting.localization.Localization(__file__, 713, 14), ValueError_831, *[str_832], **kwargs_833)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 713, 8), ValueError_call_result_834, 'raise parameter', BaseException)
    # SSA join for if statement (line 712)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 716):
    
    # Assigning a Call to a Name (line 716):
    
    # Call to int(...): (line 716)
    # Processing the call arguments (line 716)
    
    # Call to num_obs_y(...): (line 716)
    # Processing the call arguments (line 716)
    # Getting the type of 'y' (line 716)
    y_838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 31), 'y', False)
    # Processing the call keyword arguments (line 716)
    kwargs_839 = {}
    # Getting the type of 'distance' (line 716)
    distance_836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 12), 'distance', False)
    # Obtaining the member 'num_obs_y' of a type (line 716)
    num_obs_y_837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 716, 12), distance_836, 'num_obs_y')
    # Calling num_obs_y(args, kwargs) (line 716)
    num_obs_y_call_result_840 = invoke(stypy.reporting.localization.Localization(__file__, 716, 12), num_obs_y_837, *[y_838], **kwargs_839)
    
    # Processing the call keyword arguments (line 716)
    kwargs_841 = {}
    # Getting the type of 'int' (line 716)
    int_835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 'int', False)
    # Calling int(args, kwargs) (line 716)
    int_call_result_842 = invoke(stypy.reporting.localization.Localization(__file__, 716, 8), int_835, *[num_obs_y_call_result_840], **kwargs_841)
    
    # Assigning a type to the variable 'n' (line 716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 4), 'n', int_call_result_842)
    
    # Assigning a Subscript to a Name (line 717):
    
    # Assigning a Subscript to a Name (line 717):
    
    # Obtaining the type of the subscript
    # Getting the type of 'method' (line 717)
    method_843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 35), 'method')
    # Getting the type of '_LINKAGE_METHODS' (line 717)
    _LINKAGE_METHODS_844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 18), '_LINKAGE_METHODS')
    # Obtaining the member '__getitem__' of a type (line 717)
    getitem___845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 18), _LINKAGE_METHODS_844, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 717)
    subscript_call_result_846 = invoke(stypy.reporting.localization.Localization(__file__, 717, 18), getitem___845, method_843)
    
    # Assigning a type to the variable 'method_code' (line 717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 4), 'method_code', subscript_call_result_846)
    
    
    # Getting the type of 'method' (line 719)
    method_847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 7), 'method')
    str_848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 17), 'str', 'single')
    # Applying the binary operator '==' (line 719)
    result_eq_849 = python_operator(stypy.reporting.localization.Localization(__file__, 719, 7), '==', method_847, str_848)
    
    # Testing the type of an if condition (line 719)
    if_condition_850 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 719, 4), result_eq_849)
    # Assigning a type to the variable 'if_condition_850' (line 719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 4), 'if_condition_850', if_condition_850)
    # SSA begins for if statement (line 719)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 720):
    
    # Assigning a Call to a Name (line 720):
    
    # Call to mst_single_linkage(...): (line 720)
    # Processing the call arguments (line 720)
    # Getting the type of 'y' (line 720)
    y_853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 47), 'y', False)
    # Getting the type of 'n' (line 720)
    n_854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 50), 'n', False)
    # Processing the call keyword arguments (line 720)
    kwargs_855 = {}
    # Getting the type of '_hierarchy' (line 720)
    _hierarchy_851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 17), '_hierarchy', False)
    # Obtaining the member 'mst_single_linkage' of a type (line 720)
    mst_single_linkage_852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 17), _hierarchy_851, 'mst_single_linkage')
    # Calling mst_single_linkage(args, kwargs) (line 720)
    mst_single_linkage_call_result_856 = invoke(stypy.reporting.localization.Localization(__file__, 720, 17), mst_single_linkage_852, *[y_853, n_854], **kwargs_855)
    
    # Assigning a type to the variable 'result' (line 720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 8), 'result', mst_single_linkage_call_result_856)
    # SSA branch for the else part of an if statement (line 719)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'method' (line 721)
    method_857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 9), 'method')
    
    # Obtaining an instance of the builtin type 'list' (line 721)
    list_858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 721)
    # Adding element type (line 721)
    str_859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 20), 'str', 'complete')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 19), list_858, str_859)
    # Adding element type (line 721)
    str_860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 32), 'str', 'average')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 19), list_858, str_860)
    # Adding element type (line 721)
    str_861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 43), 'str', 'weighted')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 19), list_858, str_861)
    # Adding element type (line 721)
    str_862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 55), 'str', 'ward')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 19), list_858, str_862)
    
    # Applying the binary operator 'in' (line 721)
    result_contains_863 = python_operator(stypy.reporting.localization.Localization(__file__, 721, 9), 'in', method_857, list_858)
    
    # Testing the type of an if condition (line 721)
    if_condition_864 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 721, 9), result_contains_863)
    # Assigning a type to the variable 'if_condition_864' (line 721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 9), 'if_condition_864', if_condition_864)
    # SSA begins for if statement (line 721)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 722):
    
    # Assigning a Call to a Name (line 722):
    
    # Call to nn_chain(...): (line 722)
    # Processing the call arguments (line 722)
    # Getting the type of 'y' (line 722)
    y_867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 37), 'y', False)
    # Getting the type of 'n' (line 722)
    n_868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 40), 'n', False)
    # Getting the type of 'method_code' (line 722)
    method_code_869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 43), 'method_code', False)
    # Processing the call keyword arguments (line 722)
    kwargs_870 = {}
    # Getting the type of '_hierarchy' (line 722)
    _hierarchy_865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 17), '_hierarchy', False)
    # Obtaining the member 'nn_chain' of a type (line 722)
    nn_chain_866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 17), _hierarchy_865, 'nn_chain')
    # Calling nn_chain(args, kwargs) (line 722)
    nn_chain_call_result_871 = invoke(stypy.reporting.localization.Localization(__file__, 722, 17), nn_chain_866, *[y_867, n_868, method_code_869], **kwargs_870)
    
    # Assigning a type to the variable 'result' (line 722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 8), 'result', nn_chain_call_result_871)
    # SSA branch for the else part of an if statement (line 721)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 724):
    
    # Assigning a Call to a Name (line 724):
    
    # Call to fast_linkage(...): (line 724)
    # Processing the call arguments (line 724)
    # Getting the type of 'y' (line 724)
    y_874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 41), 'y', False)
    # Getting the type of 'n' (line 724)
    n_875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 44), 'n', False)
    # Getting the type of 'method_code' (line 724)
    method_code_876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 47), 'method_code', False)
    # Processing the call keyword arguments (line 724)
    kwargs_877 = {}
    # Getting the type of '_hierarchy' (line 724)
    _hierarchy_872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 17), '_hierarchy', False)
    # Obtaining the member 'fast_linkage' of a type (line 724)
    fast_linkage_873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 724, 17), _hierarchy_872, 'fast_linkage')
    # Calling fast_linkage(args, kwargs) (line 724)
    fast_linkage_call_result_878 = invoke(stypy.reporting.localization.Localization(__file__, 724, 17), fast_linkage_873, *[y_874, n_875, method_code_876], **kwargs_877)
    
    # Assigning a type to the variable 'result' (line 724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 724, 8), 'result', fast_linkage_call_result_878)
    # SSA join for if statement (line 721)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 719)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'optimal_ordering' (line 726)
    optimal_ordering_879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 7), 'optimal_ordering')
    # Testing the type of an if condition (line 726)
    if_condition_880 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 726, 4), optimal_ordering_879)
    # Assigning a type to the variable 'if_condition_880' (line 726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 4), 'if_condition_880', if_condition_880)
    # SSA begins for if statement (line 726)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to optimal_leaf_ordering(...): (line 727)
    # Processing the call arguments (line 727)
    # Getting the type of 'result' (line 727)
    result_882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 37), 'result', False)
    # Getting the type of 'y' (line 727)
    y_883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 45), 'y', False)
    # Processing the call keyword arguments (line 727)
    kwargs_884 = {}
    # Getting the type of 'optimal_leaf_ordering' (line 727)
    optimal_leaf_ordering_881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 15), 'optimal_leaf_ordering', False)
    # Calling optimal_leaf_ordering(args, kwargs) (line 727)
    optimal_leaf_ordering_call_result_885 = invoke(stypy.reporting.localization.Localization(__file__, 727, 15), optimal_leaf_ordering_881, *[result_882, y_883], **kwargs_884)
    
    # Assigning a type to the variable 'stypy_return_type' (line 727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'stypy_return_type', optimal_leaf_ordering_call_result_885)
    # SSA branch for the else part of an if statement (line 726)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'result' (line 729)
    result_886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 15), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 8), 'stypy_return_type', result_886)
    # SSA join for if statement (line 726)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'linkage(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'linkage' in the type store
    # Getting the type of 'stypy_return_type' (line 485)
    stypy_return_type_887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_887)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'linkage'
    return stypy_return_type_887

# Assigning a type to the variable 'linkage' (line 485)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 0), 'linkage', linkage)
# Declaration of the 'ClusterNode' class

class ClusterNode:
    str_888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, (-1)), 'str', '\n    A tree node class for representing a cluster.\n\n    Leaf nodes correspond to original observations, while non-leaf nodes\n    correspond to non-singleton clusters.\n\n    The `to_tree` function converts a matrix returned by the linkage\n    function into an easy-to-use tree representation.\n\n    All parameter names are also attributes.\n\n    Parameters\n    ----------\n    id : int\n        The node id.\n    left : ClusterNode instance, optional\n        The left child tree node.\n    right : ClusterNode instance, optional\n        The right child tree node.\n    dist : float, optional\n        Distance for this cluster in the linkage matrix.\n    count : int, optional\n        The number of samples in this cluster.\n\n    See Also\n    --------\n    to_tree : for converting a linkage matrix ``Z`` into a tree object.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 763)
        None_889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 32), 'None')
        # Getting the type of 'None' (line 763)
        None_890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 44), 'None')
        int_891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 55), 'int')
        int_892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 64), 'int')
        defaults = [None_889, None_890, int_891, int_892]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 763, 4, False)
        # Assigning a type to the variable 'self' (line 764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClusterNode.__init__', ['id', 'left', 'right', 'dist', 'count'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['id', 'left', 'right', 'dist', 'count'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Getting the type of 'id' (line 764)
        id_893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 11), 'id')
        int_894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 16), 'int')
        # Applying the binary operator '<' (line 764)
        result_lt_895 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 11), '<', id_893, int_894)
        
        # Testing the type of an if condition (line 764)
        if_condition_896 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 764, 8), result_lt_895)
        # Assigning a type to the variable 'if_condition_896' (line 764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 8), 'if_condition_896', if_condition_896)
        # SSA begins for if statement (line 764)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 765)
        # Processing the call arguments (line 765)
        str_898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 29), 'str', 'The id must be non-negative.')
        # Processing the call keyword arguments (line 765)
        kwargs_899 = {}
        # Getting the type of 'ValueError' (line 765)
        ValueError_897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 765)
        ValueError_call_result_900 = invoke(stypy.reporting.localization.Localization(__file__, 765, 18), ValueError_897, *[str_898], **kwargs_899)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 765, 12), ValueError_call_result_900, 'raise parameter', BaseException)
        # SSA join for if statement (line 764)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'dist' (line 766)
        dist_901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 11), 'dist')
        int_902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 18), 'int')
        # Applying the binary operator '<' (line 766)
        result_lt_903 = python_operator(stypy.reporting.localization.Localization(__file__, 766, 11), '<', dist_901, int_902)
        
        # Testing the type of an if condition (line 766)
        if_condition_904 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 766, 8), result_lt_903)
        # Assigning a type to the variable 'if_condition_904' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 8), 'if_condition_904', if_condition_904)
        # SSA begins for if statement (line 766)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 767)
        # Processing the call arguments (line 767)
        str_906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 29), 'str', 'The distance must be non-negative.')
        # Processing the call keyword arguments (line 767)
        kwargs_907 = {}
        # Getting the type of 'ValueError' (line 767)
        ValueError_905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 767)
        ValueError_call_result_908 = invoke(stypy.reporting.localization.Localization(__file__, 767, 18), ValueError_905, *[str_906], **kwargs_907)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 767, 12), ValueError_call_result_908, 'raise parameter', BaseException)
        # SSA join for if statement (line 766)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'left' (line 768)
        left_909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'left')
        # Getting the type of 'None' (line 768)
        None_910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 20), 'None')
        # Applying the binary operator 'is' (line 768)
        result_is__911 = python_operator(stypy.reporting.localization.Localization(__file__, 768, 12), 'is', left_909, None_910)
        
        
        # Getting the type of 'right' (line 768)
        right_912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 29), 'right')
        # Getting the type of 'None' (line 768)
        None_913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 42), 'None')
        # Applying the binary operator 'isnot' (line 768)
        result_is_not_914 = python_operator(stypy.reporting.localization.Localization(__file__, 768, 29), 'isnot', right_912, None_913)
        
        # Applying the binary operator 'and' (line 768)
        result_and_keyword_915 = python_operator(stypy.reporting.localization.Localization(__file__, 768, 12), 'and', result_is__911, result_is_not_914)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'left' (line 769)
        left_916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 12), 'left')
        # Getting the type of 'None' (line 769)
        None_917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 24), 'None')
        # Applying the binary operator 'isnot' (line 769)
        result_is_not_918 = python_operator(stypy.reporting.localization.Localization(__file__, 769, 12), 'isnot', left_916, None_917)
        
        
        # Getting the type of 'right' (line 769)
        right_919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 33), 'right')
        # Getting the type of 'None' (line 769)
        None_920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 42), 'None')
        # Applying the binary operator 'is' (line 769)
        result_is__921 = python_operator(stypy.reporting.localization.Localization(__file__, 769, 33), 'is', right_919, None_920)
        
        # Applying the binary operator 'and' (line 769)
        result_and_keyword_922 = python_operator(stypy.reporting.localization.Localization(__file__, 769, 12), 'and', result_is_not_918, result_is__921)
        
        # Applying the binary operator 'or' (line 768)
        result_or_keyword_923 = python_operator(stypy.reporting.localization.Localization(__file__, 768, 11), 'or', result_and_keyword_915, result_and_keyword_922)
        
        # Testing the type of an if condition (line 768)
        if_condition_924 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 768, 8), result_or_keyword_923)
        # Assigning a type to the variable 'if_condition_924' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'if_condition_924', if_condition_924)
        # SSA begins for if statement (line 768)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 770)
        # Processing the call arguments (line 770)
        str_926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 29), 'str', 'Only full or proper binary trees are permitted.  This node has one child.')
        # Processing the call keyword arguments (line 770)
        kwargs_927 = {}
        # Getting the type of 'ValueError' (line 770)
        ValueError_925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 770)
        ValueError_call_result_928 = invoke(stypy.reporting.localization.Localization(__file__, 770, 18), ValueError_925, *[str_926], **kwargs_927)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 770, 12), ValueError_call_result_928, 'raise parameter', BaseException)
        # SSA join for if statement (line 768)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'count' (line 772)
        count_929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 11), 'count')
        int_930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 772, 19), 'int')
        # Applying the binary operator '<' (line 772)
        result_lt_931 = python_operator(stypy.reporting.localization.Localization(__file__, 772, 11), '<', count_929, int_930)
        
        # Testing the type of an if condition (line 772)
        if_condition_932 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 772, 8), result_lt_931)
        # Assigning a type to the variable 'if_condition_932' (line 772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 8), 'if_condition_932', if_condition_932)
        # SSA begins for if statement (line 772)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 773)
        # Processing the call arguments (line 773)
        str_934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 773, 29), 'str', 'A cluster must contain at least one original observation.')
        # Processing the call keyword arguments (line 773)
        kwargs_935 = {}
        # Getting the type of 'ValueError' (line 773)
        ValueError_933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 773)
        ValueError_call_result_936 = invoke(stypy.reporting.localization.Localization(__file__, 773, 18), ValueError_933, *[str_934], **kwargs_935)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 773, 12), ValueError_call_result_936, 'raise parameter', BaseException)
        # SSA join for if statement (line 772)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 775):
        
        # Assigning a Name to a Attribute (line 775):
        # Getting the type of 'id' (line 775)
        id_937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 18), 'id')
        # Getting the type of 'self' (line 775)
        self_938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 8), 'self')
        # Setting the type of the member 'id' of a type (line 775)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 8), self_938, 'id', id_937)
        
        # Assigning a Name to a Attribute (line 776):
        
        # Assigning a Name to a Attribute (line 776):
        # Getting the type of 'left' (line 776)
        left_939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 20), 'left')
        # Getting the type of 'self' (line 776)
        self_940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 8), 'self')
        # Setting the type of the member 'left' of a type (line 776)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 8), self_940, 'left', left_939)
        
        # Assigning a Name to a Attribute (line 777):
        
        # Assigning a Name to a Attribute (line 777):
        # Getting the type of 'right' (line 777)
        right_941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 21), 'right')
        # Getting the type of 'self' (line 777)
        self_942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 8), 'self')
        # Setting the type of the member 'right' of a type (line 777)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 8), self_942, 'right', right_941)
        
        # Assigning a Name to a Attribute (line 778):
        
        # Assigning a Name to a Attribute (line 778):
        # Getting the type of 'dist' (line 778)
        dist_943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 20), 'dist')
        # Getting the type of 'self' (line 778)
        self_944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 8), 'self')
        # Setting the type of the member 'dist' of a type (line 778)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 8), self_944, 'dist', dist_943)
        
        # Type idiom detected: calculating its left and rigth part (line 779)
        # Getting the type of 'self' (line 779)
        self_945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 11), 'self')
        # Obtaining the member 'left' of a type (line 779)
        left_946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 11), self_945, 'left')
        # Getting the type of 'None' (line 779)
        None_947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 24), 'None')
        
        (may_be_948, more_types_in_union_949) = may_be_none(left_946, None_947)

        if may_be_948:

            if more_types_in_union_949:
                # Runtime conditional SSA (line 779)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 780):
            
            # Assigning a Name to a Attribute (line 780):
            # Getting the type of 'count' (line 780)
            count_950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 25), 'count')
            # Getting the type of 'self' (line 780)
            self_951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 12), 'self')
            # Setting the type of the member 'count' of a type (line 780)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 12), self_951, 'count', count_950)

            if more_types_in_union_949:
                # Runtime conditional SSA for else branch (line 779)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_948) or more_types_in_union_949):
            
            # Assigning a BinOp to a Attribute (line 782):
            
            # Assigning a BinOp to a Attribute (line 782):
            # Getting the type of 'left' (line 782)
            left_952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 25), 'left')
            # Obtaining the member 'count' of a type (line 782)
            count_953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 25), left_952, 'count')
            # Getting the type of 'right' (line 782)
            right_954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 38), 'right')
            # Obtaining the member 'count' of a type (line 782)
            count_955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 38), right_954, 'count')
            # Applying the binary operator '+' (line 782)
            result_add_956 = python_operator(stypy.reporting.localization.Localization(__file__, 782, 25), '+', count_953, count_955)
            
            # Getting the type of 'self' (line 782)
            self_957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 12), 'self')
            # Setting the type of the member 'count' of a type (line 782)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 12), self_957, 'count', result_add_956)

            if (may_be_948 and more_types_in_union_949):
                # SSA join for if statement (line 779)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __lt__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__lt__'
        module_type_store = module_type_store.open_function_context('__lt__', 784, 4, False)
        # Assigning a type to the variable 'self' (line 785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ClusterNode.__lt__.__dict__.__setitem__('stypy_localization', localization)
        ClusterNode.__lt__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ClusterNode.__lt__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ClusterNode.__lt__.__dict__.__setitem__('stypy_function_name', 'ClusterNode.__lt__')
        ClusterNode.__lt__.__dict__.__setitem__('stypy_param_names_list', ['node'])
        ClusterNode.__lt__.__dict__.__setitem__('stypy_varargs_param_name', None)
        ClusterNode.__lt__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ClusterNode.__lt__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ClusterNode.__lt__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ClusterNode.__lt__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ClusterNode.__lt__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClusterNode.__lt__', ['node'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__lt__', localization, ['node'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__lt__(...)' code ##################

        
        
        
        # Call to isinstance(...): (line 785)
        # Processing the call arguments (line 785)
        # Getting the type of 'node' (line 785)
        node_959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 26), 'node', False)
        # Getting the type of 'ClusterNode' (line 785)
        ClusterNode_960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 32), 'ClusterNode', False)
        # Processing the call keyword arguments (line 785)
        kwargs_961 = {}
        # Getting the type of 'isinstance' (line 785)
        isinstance_958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 785)
        isinstance_call_result_962 = invoke(stypy.reporting.localization.Localization(__file__, 785, 15), isinstance_958, *[node_959, ClusterNode_960], **kwargs_961)
        
        # Applying the 'not' unary operator (line 785)
        result_not__963 = python_operator(stypy.reporting.localization.Localization(__file__, 785, 11), 'not', isinstance_call_result_962)
        
        # Testing the type of an if condition (line 785)
        if_condition_964 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 785, 8), result_not__963)
        # Assigning a type to the variable 'if_condition_964' (line 785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 8), 'if_condition_964', if_condition_964)
        # SSA begins for if statement (line 785)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 786)
        # Processing the call arguments (line 786)
        
        # Call to format(...): (line 786)
        # Processing the call arguments (line 786)
        
        # Call to type(...): (line 787)
        # Processing the call arguments (line 787)
        # Getting the type of 'node' (line 787)
        node_969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 54), 'node', False)
        # Processing the call keyword arguments (line 787)
        kwargs_970 = {}
        # Getting the type of 'type' (line 787)
        type_968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 49), 'type', False)
        # Calling type(args, kwargs) (line 787)
        type_call_result_971 = invoke(stypy.reporting.localization.Localization(__file__, 787, 49), type_968, *[node_969], **kwargs_970)
        
        # Processing the call keyword arguments (line 786)
        kwargs_972 = {}
        str_966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 29), 'str', "Can't compare ClusterNode to type {}")
        # Obtaining the member 'format' of a type (line 786)
        format_967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 29), str_966, 'format')
        # Calling format(args, kwargs) (line 786)
        format_call_result_973 = invoke(stypy.reporting.localization.Localization(__file__, 786, 29), format_967, *[type_call_result_971], **kwargs_972)
        
        # Processing the call keyword arguments (line 786)
        kwargs_974 = {}
        # Getting the type of 'ValueError' (line 786)
        ValueError_965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 786)
        ValueError_call_result_975 = invoke(stypy.reporting.localization.Localization(__file__, 786, 18), ValueError_965, *[format_call_result_973], **kwargs_974)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 786, 12), ValueError_call_result_975, 'raise parameter', BaseException)
        # SSA join for if statement (line 785)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 788)
        self_976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 15), 'self')
        # Obtaining the member 'dist' of a type (line 788)
        dist_977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 15), self_976, 'dist')
        # Getting the type of 'node' (line 788)
        node_978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 27), 'node')
        # Obtaining the member 'dist' of a type (line 788)
        dist_979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 27), node_978, 'dist')
        # Applying the binary operator '<' (line 788)
        result_lt_980 = python_operator(stypy.reporting.localization.Localization(__file__, 788, 15), '<', dist_977, dist_979)
        
        # Assigning a type to the variable 'stypy_return_type' (line 788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'stypy_return_type', result_lt_980)
        
        # ################# End of '__lt__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__lt__' in the type store
        # Getting the type of 'stypy_return_type' (line 784)
        stypy_return_type_981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_981)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__lt__'
        return stypy_return_type_981


    @norecursion
    def __gt__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__gt__'
        module_type_store = module_type_store.open_function_context('__gt__', 790, 4, False)
        # Assigning a type to the variable 'self' (line 791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ClusterNode.__gt__.__dict__.__setitem__('stypy_localization', localization)
        ClusterNode.__gt__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ClusterNode.__gt__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ClusterNode.__gt__.__dict__.__setitem__('stypy_function_name', 'ClusterNode.__gt__')
        ClusterNode.__gt__.__dict__.__setitem__('stypy_param_names_list', ['node'])
        ClusterNode.__gt__.__dict__.__setitem__('stypy_varargs_param_name', None)
        ClusterNode.__gt__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ClusterNode.__gt__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ClusterNode.__gt__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ClusterNode.__gt__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ClusterNode.__gt__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClusterNode.__gt__', ['node'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__gt__', localization, ['node'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__gt__(...)' code ##################

        
        
        
        # Call to isinstance(...): (line 791)
        # Processing the call arguments (line 791)
        # Getting the type of 'node' (line 791)
        node_983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 26), 'node', False)
        # Getting the type of 'ClusterNode' (line 791)
        ClusterNode_984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 32), 'ClusterNode', False)
        # Processing the call keyword arguments (line 791)
        kwargs_985 = {}
        # Getting the type of 'isinstance' (line 791)
        isinstance_982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 791)
        isinstance_call_result_986 = invoke(stypy.reporting.localization.Localization(__file__, 791, 15), isinstance_982, *[node_983, ClusterNode_984], **kwargs_985)
        
        # Applying the 'not' unary operator (line 791)
        result_not__987 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 11), 'not', isinstance_call_result_986)
        
        # Testing the type of an if condition (line 791)
        if_condition_988 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 791, 8), result_not__987)
        # Assigning a type to the variable 'if_condition_988' (line 791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 8), 'if_condition_988', if_condition_988)
        # SSA begins for if statement (line 791)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 792)
        # Processing the call arguments (line 792)
        
        # Call to format(...): (line 792)
        # Processing the call arguments (line 792)
        
        # Call to type(...): (line 793)
        # Processing the call arguments (line 793)
        # Getting the type of 'node' (line 793)
        node_993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 54), 'node', False)
        # Processing the call keyword arguments (line 793)
        kwargs_994 = {}
        # Getting the type of 'type' (line 793)
        type_992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 49), 'type', False)
        # Calling type(args, kwargs) (line 793)
        type_call_result_995 = invoke(stypy.reporting.localization.Localization(__file__, 793, 49), type_992, *[node_993], **kwargs_994)
        
        # Processing the call keyword arguments (line 792)
        kwargs_996 = {}
        str_990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 29), 'str', "Can't compare ClusterNode to type {}")
        # Obtaining the member 'format' of a type (line 792)
        format_991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 29), str_990, 'format')
        # Calling format(args, kwargs) (line 792)
        format_call_result_997 = invoke(stypy.reporting.localization.Localization(__file__, 792, 29), format_991, *[type_call_result_995], **kwargs_996)
        
        # Processing the call keyword arguments (line 792)
        kwargs_998 = {}
        # Getting the type of 'ValueError' (line 792)
        ValueError_989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 792)
        ValueError_call_result_999 = invoke(stypy.reporting.localization.Localization(__file__, 792, 18), ValueError_989, *[format_call_result_997], **kwargs_998)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 792, 12), ValueError_call_result_999, 'raise parameter', BaseException)
        # SSA join for if statement (line 791)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 794)
        self_1000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 15), 'self')
        # Obtaining the member 'dist' of a type (line 794)
        dist_1001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 15), self_1000, 'dist')
        # Getting the type of 'node' (line 794)
        node_1002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 27), 'node')
        # Obtaining the member 'dist' of a type (line 794)
        dist_1003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 27), node_1002, 'dist')
        # Applying the binary operator '>' (line 794)
        result_gt_1004 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 15), '>', dist_1001, dist_1003)
        
        # Assigning a type to the variable 'stypy_return_type' (line 794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'stypy_return_type', result_gt_1004)
        
        # ################# End of '__gt__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__gt__' in the type store
        # Getting the type of 'stypy_return_type' (line 790)
        stypy_return_type_1005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1005)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__gt__'
        return stypy_return_type_1005


    @norecursion
    def stypy__eq__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__eq__'
        module_type_store = module_type_store.open_function_context('__eq__', 796, 4, False)
        # Assigning a type to the variable 'self' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ClusterNode.stypy__eq__.__dict__.__setitem__('stypy_localization', localization)
        ClusterNode.stypy__eq__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ClusterNode.stypy__eq__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ClusterNode.stypy__eq__.__dict__.__setitem__('stypy_function_name', 'ClusterNode.stypy__eq__')
        ClusterNode.stypy__eq__.__dict__.__setitem__('stypy_param_names_list', ['node'])
        ClusterNode.stypy__eq__.__dict__.__setitem__('stypy_varargs_param_name', None)
        ClusterNode.stypy__eq__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ClusterNode.stypy__eq__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ClusterNode.stypy__eq__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ClusterNode.stypy__eq__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ClusterNode.stypy__eq__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClusterNode.stypy__eq__', ['node'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__eq__', localization, ['node'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__eq__(...)' code ##################

        
        
        
        # Call to isinstance(...): (line 797)
        # Processing the call arguments (line 797)
        # Getting the type of 'node' (line 797)
        node_1007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 26), 'node', False)
        # Getting the type of 'ClusterNode' (line 797)
        ClusterNode_1008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 32), 'ClusterNode', False)
        # Processing the call keyword arguments (line 797)
        kwargs_1009 = {}
        # Getting the type of 'isinstance' (line 797)
        isinstance_1006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 797)
        isinstance_call_result_1010 = invoke(stypy.reporting.localization.Localization(__file__, 797, 15), isinstance_1006, *[node_1007, ClusterNode_1008], **kwargs_1009)
        
        # Applying the 'not' unary operator (line 797)
        result_not__1011 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 11), 'not', isinstance_call_result_1010)
        
        # Testing the type of an if condition (line 797)
        if_condition_1012 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 797, 8), result_not__1011)
        # Assigning a type to the variable 'if_condition_1012' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 8), 'if_condition_1012', if_condition_1012)
        # SSA begins for if statement (line 797)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 798)
        # Processing the call arguments (line 798)
        
        # Call to format(...): (line 798)
        # Processing the call arguments (line 798)
        
        # Call to type(...): (line 799)
        # Processing the call arguments (line 799)
        # Getting the type of 'node' (line 799)
        node_1017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 54), 'node', False)
        # Processing the call keyword arguments (line 799)
        kwargs_1018 = {}
        # Getting the type of 'type' (line 799)
        type_1016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 49), 'type', False)
        # Calling type(args, kwargs) (line 799)
        type_call_result_1019 = invoke(stypy.reporting.localization.Localization(__file__, 799, 49), type_1016, *[node_1017], **kwargs_1018)
        
        # Processing the call keyword arguments (line 798)
        kwargs_1020 = {}
        str_1014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 29), 'str', "Can't compare ClusterNode to type {}")
        # Obtaining the member 'format' of a type (line 798)
        format_1015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 29), str_1014, 'format')
        # Calling format(args, kwargs) (line 798)
        format_call_result_1021 = invoke(stypy.reporting.localization.Localization(__file__, 798, 29), format_1015, *[type_call_result_1019], **kwargs_1020)
        
        # Processing the call keyword arguments (line 798)
        kwargs_1022 = {}
        # Getting the type of 'ValueError' (line 798)
        ValueError_1013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 798)
        ValueError_call_result_1023 = invoke(stypy.reporting.localization.Localization(__file__, 798, 18), ValueError_1013, *[format_call_result_1021], **kwargs_1022)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 798, 12), ValueError_call_result_1023, 'raise parameter', BaseException)
        # SSA join for if statement (line 797)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 800)
        self_1024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 15), 'self')
        # Obtaining the member 'dist' of a type (line 800)
        dist_1025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 15), self_1024, 'dist')
        # Getting the type of 'node' (line 800)
        node_1026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 28), 'node')
        # Obtaining the member 'dist' of a type (line 800)
        dist_1027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 28), node_1026, 'dist')
        # Applying the binary operator '==' (line 800)
        result_eq_1028 = python_operator(stypy.reporting.localization.Localization(__file__, 800, 15), '==', dist_1025, dist_1027)
        
        # Assigning a type to the variable 'stypy_return_type' (line 800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 8), 'stypy_return_type', result_eq_1028)
        
        # ################# End of '__eq__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__eq__' in the type store
        # Getting the type of 'stypy_return_type' (line 796)
        stypy_return_type_1029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1029)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__eq__'
        return stypy_return_type_1029


    @norecursion
    def get_id(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_id'
        module_type_store = module_type_store.open_function_context('get_id', 802, 4, False)
        # Assigning a type to the variable 'self' (line 803)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ClusterNode.get_id.__dict__.__setitem__('stypy_localization', localization)
        ClusterNode.get_id.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ClusterNode.get_id.__dict__.__setitem__('stypy_type_store', module_type_store)
        ClusterNode.get_id.__dict__.__setitem__('stypy_function_name', 'ClusterNode.get_id')
        ClusterNode.get_id.__dict__.__setitem__('stypy_param_names_list', [])
        ClusterNode.get_id.__dict__.__setitem__('stypy_varargs_param_name', None)
        ClusterNode.get_id.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ClusterNode.get_id.__dict__.__setitem__('stypy_call_defaults', defaults)
        ClusterNode.get_id.__dict__.__setitem__('stypy_call_varargs', varargs)
        ClusterNode.get_id.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ClusterNode.get_id.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClusterNode.get_id', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_id', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_id(...)' code ##################

        str_1030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, (-1)), 'str', '\n        The identifier of the target node.\n\n        For ``0 <= i < n``, `i` corresponds to original observation i.\n        For ``n <= i < 2n-1``, `i` corresponds to non-singleton cluster formed\n        at iteration ``i-n``.\n\n        Returns\n        -------\n        id : int\n            The identifier of the target node.\n\n        ')
        # Getting the type of 'self' (line 816)
        self_1031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 15), 'self')
        # Obtaining the member 'id' of a type (line 816)
        id_1032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 15), self_1031, 'id')
        # Assigning a type to the variable 'stypy_return_type' (line 816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 8), 'stypy_return_type', id_1032)
        
        # ################# End of 'get_id(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_id' in the type store
        # Getting the type of 'stypy_return_type' (line 802)
        stypy_return_type_1033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1033)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_id'
        return stypy_return_type_1033


    @norecursion
    def get_count(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_count'
        module_type_store = module_type_store.open_function_context('get_count', 818, 4, False)
        # Assigning a type to the variable 'self' (line 819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ClusterNode.get_count.__dict__.__setitem__('stypy_localization', localization)
        ClusterNode.get_count.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ClusterNode.get_count.__dict__.__setitem__('stypy_type_store', module_type_store)
        ClusterNode.get_count.__dict__.__setitem__('stypy_function_name', 'ClusterNode.get_count')
        ClusterNode.get_count.__dict__.__setitem__('stypy_param_names_list', [])
        ClusterNode.get_count.__dict__.__setitem__('stypy_varargs_param_name', None)
        ClusterNode.get_count.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ClusterNode.get_count.__dict__.__setitem__('stypy_call_defaults', defaults)
        ClusterNode.get_count.__dict__.__setitem__('stypy_call_varargs', varargs)
        ClusterNode.get_count.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ClusterNode.get_count.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClusterNode.get_count', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_count', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_count(...)' code ##################

        str_1034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, (-1)), 'str', '\n        The number of leaf nodes (original observations) belonging to\n        the cluster node nd. If the target node is a leaf, 1 is\n        returned.\n\n        Returns\n        -------\n        get_count : int\n            The number of leaf nodes below the target node.\n\n        ')
        # Getting the type of 'self' (line 830)
        self_1035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 15), 'self')
        # Obtaining the member 'count' of a type (line 830)
        count_1036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 15), self_1035, 'count')
        # Assigning a type to the variable 'stypy_return_type' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 8), 'stypy_return_type', count_1036)
        
        # ################# End of 'get_count(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_count' in the type store
        # Getting the type of 'stypy_return_type' (line 818)
        stypy_return_type_1037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1037)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_count'
        return stypy_return_type_1037


    @norecursion
    def get_left(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_left'
        module_type_store = module_type_store.open_function_context('get_left', 832, 4, False)
        # Assigning a type to the variable 'self' (line 833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ClusterNode.get_left.__dict__.__setitem__('stypy_localization', localization)
        ClusterNode.get_left.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ClusterNode.get_left.__dict__.__setitem__('stypy_type_store', module_type_store)
        ClusterNode.get_left.__dict__.__setitem__('stypy_function_name', 'ClusterNode.get_left')
        ClusterNode.get_left.__dict__.__setitem__('stypy_param_names_list', [])
        ClusterNode.get_left.__dict__.__setitem__('stypy_varargs_param_name', None)
        ClusterNode.get_left.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ClusterNode.get_left.__dict__.__setitem__('stypy_call_defaults', defaults)
        ClusterNode.get_left.__dict__.__setitem__('stypy_call_varargs', varargs)
        ClusterNode.get_left.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ClusterNode.get_left.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClusterNode.get_left', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_left', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_left(...)' code ##################

        str_1038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, (-1)), 'str', '\n        Return a reference to the left child tree object.\n\n        Returns\n        -------\n        left : ClusterNode\n            The left child of the target node.  If the node is a leaf,\n            None is returned.\n\n        ')
        # Getting the type of 'self' (line 843)
        self_1039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 15), 'self')
        # Obtaining the member 'left' of a type (line 843)
        left_1040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 15), self_1039, 'left')
        # Assigning a type to the variable 'stypy_return_type' (line 843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 8), 'stypy_return_type', left_1040)
        
        # ################# End of 'get_left(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_left' in the type store
        # Getting the type of 'stypy_return_type' (line 832)
        stypy_return_type_1041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1041)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_left'
        return stypy_return_type_1041


    @norecursion
    def get_right(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_right'
        module_type_store = module_type_store.open_function_context('get_right', 845, 4, False)
        # Assigning a type to the variable 'self' (line 846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ClusterNode.get_right.__dict__.__setitem__('stypy_localization', localization)
        ClusterNode.get_right.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ClusterNode.get_right.__dict__.__setitem__('stypy_type_store', module_type_store)
        ClusterNode.get_right.__dict__.__setitem__('stypy_function_name', 'ClusterNode.get_right')
        ClusterNode.get_right.__dict__.__setitem__('stypy_param_names_list', [])
        ClusterNode.get_right.__dict__.__setitem__('stypy_varargs_param_name', None)
        ClusterNode.get_right.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ClusterNode.get_right.__dict__.__setitem__('stypy_call_defaults', defaults)
        ClusterNode.get_right.__dict__.__setitem__('stypy_call_varargs', varargs)
        ClusterNode.get_right.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ClusterNode.get_right.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClusterNode.get_right', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_right', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_right(...)' code ##################

        str_1042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, (-1)), 'str', '\n        Return a reference to the right child tree object.\n\n        Returns\n        -------\n        right : ClusterNode\n            The left child of the target node.  If the node is a leaf,\n            None is returned.\n\n        ')
        # Getting the type of 'self' (line 856)
        self_1043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 15), 'self')
        # Obtaining the member 'right' of a type (line 856)
        right_1044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 15), self_1043, 'right')
        # Assigning a type to the variable 'stypy_return_type' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 8), 'stypy_return_type', right_1044)
        
        # ################# End of 'get_right(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_right' in the type store
        # Getting the type of 'stypy_return_type' (line 845)
        stypy_return_type_1045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1045)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_right'
        return stypy_return_type_1045


    @norecursion
    def is_leaf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'is_leaf'
        module_type_store = module_type_store.open_function_context('is_leaf', 858, 4, False)
        # Assigning a type to the variable 'self' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ClusterNode.is_leaf.__dict__.__setitem__('stypy_localization', localization)
        ClusterNode.is_leaf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ClusterNode.is_leaf.__dict__.__setitem__('stypy_type_store', module_type_store)
        ClusterNode.is_leaf.__dict__.__setitem__('stypy_function_name', 'ClusterNode.is_leaf')
        ClusterNode.is_leaf.__dict__.__setitem__('stypy_param_names_list', [])
        ClusterNode.is_leaf.__dict__.__setitem__('stypy_varargs_param_name', None)
        ClusterNode.is_leaf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ClusterNode.is_leaf.__dict__.__setitem__('stypy_call_defaults', defaults)
        ClusterNode.is_leaf.__dict__.__setitem__('stypy_call_varargs', varargs)
        ClusterNode.is_leaf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ClusterNode.is_leaf.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClusterNode.is_leaf', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'is_leaf', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'is_leaf(...)' code ##################

        str_1046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, (-1)), 'str', '\n        Return True if the target node is a leaf.\n\n        Returns\n        -------\n        leafness : bool\n            True if the target node is a leaf node.\n\n        ')
        
        # Getting the type of 'self' (line 868)
        self_1047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 15), 'self')
        # Obtaining the member 'left' of a type (line 868)
        left_1048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 15), self_1047, 'left')
        # Getting the type of 'None' (line 868)
        None_1049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 28), 'None')
        # Applying the binary operator 'is' (line 868)
        result_is__1050 = python_operator(stypy.reporting.localization.Localization(__file__, 868, 15), 'is', left_1048, None_1049)
        
        # Assigning a type to the variable 'stypy_return_type' (line 868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'stypy_return_type', result_is__1050)
        
        # ################# End of 'is_leaf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'is_leaf' in the type store
        # Getting the type of 'stypy_return_type' (line 858)
        stypy_return_type_1051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1051)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'is_leaf'
        return stypy_return_type_1051


    @norecursion
    def pre_order(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults

        @norecursion
        def _stypy_temp_lambda_1(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_1'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_1', 870, 30, True)
            # Passed parameters checking function
            _stypy_temp_lambda_1.stypy_localization = localization
            _stypy_temp_lambda_1.stypy_type_of_self = None
            _stypy_temp_lambda_1.stypy_type_store = module_type_store
            _stypy_temp_lambda_1.stypy_function_name = '_stypy_temp_lambda_1'
            _stypy_temp_lambda_1.stypy_param_names_list = ['x']
            _stypy_temp_lambda_1.stypy_varargs_param_name = None
            _stypy_temp_lambda_1.stypy_kwargs_param_name = None
            _stypy_temp_lambda_1.stypy_call_defaults = defaults
            _stypy_temp_lambda_1.stypy_call_varargs = varargs
            _stypy_temp_lambda_1.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_1', ['x'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_1', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'x' (line 870)
            x_1052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 40), 'x')
            # Obtaining the member 'id' of a type (line 870)
            id_1053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 40), x_1052, 'id')
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 870)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 30), 'stypy_return_type', id_1053)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_1' in the type store
            # Getting the type of 'stypy_return_type' (line 870)
            stypy_return_type_1054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 30), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_1054)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_1'
            return stypy_return_type_1054

        # Assigning a type to the variable '_stypy_temp_lambda_1' (line 870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 30), '_stypy_temp_lambda_1', _stypy_temp_lambda_1)
        # Getting the type of '_stypy_temp_lambda_1' (line 870)
        _stypy_temp_lambda_1_1055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 30), '_stypy_temp_lambda_1')
        defaults = [_stypy_temp_lambda_1_1055]
        # Create a new context for function 'pre_order'
        module_type_store = module_type_store.open_function_context('pre_order', 870, 4, False)
        # Assigning a type to the variable 'self' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ClusterNode.pre_order.__dict__.__setitem__('stypy_localization', localization)
        ClusterNode.pre_order.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ClusterNode.pre_order.__dict__.__setitem__('stypy_type_store', module_type_store)
        ClusterNode.pre_order.__dict__.__setitem__('stypy_function_name', 'ClusterNode.pre_order')
        ClusterNode.pre_order.__dict__.__setitem__('stypy_param_names_list', ['func'])
        ClusterNode.pre_order.__dict__.__setitem__('stypy_varargs_param_name', None)
        ClusterNode.pre_order.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ClusterNode.pre_order.__dict__.__setitem__('stypy_call_defaults', defaults)
        ClusterNode.pre_order.__dict__.__setitem__('stypy_call_varargs', varargs)
        ClusterNode.pre_order.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ClusterNode.pre_order.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClusterNode.pre_order', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pre_order', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pre_order(...)' code ##################

        str_1056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, (-1)), 'str', '\n        Perform pre-order traversal without recursive function calls.\n\n        When a leaf node is first encountered, ``func`` is called with\n        the leaf node as its argument, and its result is appended to\n        the list.\n\n        For example, the statement::\n\n           ids = root.pre_order(lambda x: x.id)\n\n        returns a list of the node ids corresponding to the leaf nodes\n        of the tree as they appear from left to right.\n\n        Parameters\n        ----------\n        func : function\n            Applied to each leaf ClusterNode object in the pre-order traversal.\n            Given the ``i``-th leaf node in the pre-order traversal ``n[i]``,\n            the result of ``func(n[i])`` is stored in ``L[i]``. If not\n            provided, the index of the original observation to which the node\n            corresponds is used.\n\n        Returns\n        -------\n        L : list\n            The pre-order traversal.\n\n        ')
        
        # Assigning a Attribute to a Name (line 902):
        
        # Assigning a Attribute to a Name (line 902):
        # Getting the type of 'self' (line 902)
        self_1057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 12), 'self')
        # Obtaining the member 'count' of a type (line 902)
        count_1058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 12), self_1057, 'count')
        # Assigning a type to the variable 'n' (line 902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 8), 'n', count_1058)
        
        # Assigning a BinOp to a Name (line 904):
        
        # Assigning a BinOp to a Name (line 904):
        
        # Obtaining an instance of the builtin type 'list' (line 904)
        list_1059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 904)
        # Adding element type (line 904)
        # Getting the type of 'None' (line 904)
        None_1060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 19), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 904, 18), list_1059, None_1060)
        
        int_1061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 28), 'int')
        # Getting the type of 'n' (line 904)
        n_1062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 32), 'n')
        # Applying the binary operator '*' (line 904)
        result_mul_1063 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 28), '*', int_1061, n_1062)
        
        # Applying the binary operator '*' (line 904)
        result_mul_1064 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 18), '*', list_1059, result_mul_1063)
        
        # Assigning a type to the variable 'curNode' (line 904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 8), 'curNode', result_mul_1064)
        
        # Assigning a Call to a Name (line 905):
        
        # Assigning a Call to a Name (line 905):
        
        # Call to set(...): (line 905)
        # Processing the call keyword arguments (line 905)
        kwargs_1066 = {}
        # Getting the type of 'set' (line 905)
        set_1065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 19), 'set', False)
        # Calling set(args, kwargs) (line 905)
        set_call_result_1067 = invoke(stypy.reporting.localization.Localization(__file__, 905, 19), set_1065, *[], **kwargs_1066)
        
        # Assigning a type to the variable 'lvisited' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'lvisited', set_call_result_1067)
        
        # Assigning a Call to a Name (line 906):
        
        # Assigning a Call to a Name (line 906):
        
        # Call to set(...): (line 906)
        # Processing the call keyword arguments (line 906)
        kwargs_1069 = {}
        # Getting the type of 'set' (line 906)
        set_1068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 19), 'set', False)
        # Calling set(args, kwargs) (line 906)
        set_call_result_1070 = invoke(stypy.reporting.localization.Localization(__file__, 906, 19), set_1068, *[], **kwargs_1069)
        
        # Assigning a type to the variable 'rvisited' (line 906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 8), 'rvisited', set_call_result_1070)
        
        # Assigning a Name to a Subscript (line 907):
        
        # Assigning a Name to a Subscript (line 907):
        # Getting the type of 'self' (line 907)
        self_1071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 21), 'self')
        # Getting the type of 'curNode' (line 907)
        curNode_1072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 8), 'curNode')
        int_1073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 16), 'int')
        # Storing an element on a container (line 907)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 907, 8), curNode_1072, (int_1073, self_1071))
        
        # Assigning a Num to a Name (line 908):
        
        # Assigning a Num to a Name (line 908):
        int_1074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 12), 'int')
        # Assigning a type to the variable 'k' (line 908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 8), 'k', int_1074)
        
        # Assigning a List to a Name (line 909):
        
        # Assigning a List to a Name (line 909):
        
        # Obtaining an instance of the builtin type 'list' (line 909)
        list_1075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 909, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 909)
        
        # Assigning a type to the variable 'preorder' (line 909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 8), 'preorder', list_1075)
        
        
        # Getting the type of 'k' (line 910)
        k_1076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 14), 'k')
        int_1077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 910, 19), 'int')
        # Applying the binary operator '>=' (line 910)
        result_ge_1078 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 14), '>=', k_1076, int_1077)
        
        # Testing the type of an if condition (line 910)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 910, 8), result_ge_1078)
        # SSA begins for while statement (line 910)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        # Assigning a Subscript to a Name (line 911):
        
        # Assigning a Subscript to a Name (line 911):
        
        # Obtaining the type of the subscript
        # Getting the type of 'k' (line 911)
        k_1079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 25), 'k')
        # Getting the type of 'curNode' (line 911)
        curNode_1080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 17), 'curNode')
        # Obtaining the member '__getitem__' of a type (line 911)
        getitem___1081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 17), curNode_1080, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 911)
        subscript_call_result_1082 = invoke(stypy.reporting.localization.Localization(__file__, 911, 17), getitem___1081, k_1079)
        
        # Assigning a type to the variable 'nd' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 12), 'nd', subscript_call_result_1082)
        
        # Assigning a Attribute to a Name (line 912):
        
        # Assigning a Attribute to a Name (line 912):
        # Getting the type of 'nd' (line 912)
        nd_1083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 19), 'nd')
        # Obtaining the member 'id' of a type (line 912)
        id_1084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 19), nd_1083, 'id')
        # Assigning a type to the variable 'ndid' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'ndid', id_1084)
        
        
        # Call to is_leaf(...): (line 913)
        # Processing the call keyword arguments (line 913)
        kwargs_1087 = {}
        # Getting the type of 'nd' (line 913)
        nd_1085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 15), 'nd', False)
        # Obtaining the member 'is_leaf' of a type (line 913)
        is_leaf_1086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 15), nd_1085, 'is_leaf')
        # Calling is_leaf(args, kwargs) (line 913)
        is_leaf_call_result_1088 = invoke(stypy.reporting.localization.Localization(__file__, 913, 15), is_leaf_1086, *[], **kwargs_1087)
        
        # Testing the type of an if condition (line 913)
        if_condition_1089 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 913, 12), is_leaf_call_result_1088)
        # Assigning a type to the variable 'if_condition_1089' (line 913)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 913, 12), 'if_condition_1089', if_condition_1089)
        # SSA begins for if statement (line 913)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 914)
        # Processing the call arguments (line 914)
        
        # Call to func(...): (line 914)
        # Processing the call arguments (line 914)
        # Getting the type of 'nd' (line 914)
        nd_1093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 37), 'nd', False)
        # Processing the call keyword arguments (line 914)
        kwargs_1094 = {}
        # Getting the type of 'func' (line 914)
        func_1092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 32), 'func', False)
        # Calling func(args, kwargs) (line 914)
        func_call_result_1095 = invoke(stypy.reporting.localization.Localization(__file__, 914, 32), func_1092, *[nd_1093], **kwargs_1094)
        
        # Processing the call keyword arguments (line 914)
        kwargs_1096 = {}
        # Getting the type of 'preorder' (line 914)
        preorder_1090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 16), 'preorder', False)
        # Obtaining the member 'append' of a type (line 914)
        append_1091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 16), preorder_1090, 'append')
        # Calling append(args, kwargs) (line 914)
        append_call_result_1097 = invoke(stypy.reporting.localization.Localization(__file__, 914, 16), append_1091, *[func_call_result_1095], **kwargs_1096)
        
        
        # Assigning a BinOp to a Name (line 915):
        
        # Assigning a BinOp to a Name (line 915):
        # Getting the type of 'k' (line 915)
        k_1098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 20), 'k')
        int_1099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 24), 'int')
        # Applying the binary operator '-' (line 915)
        result_sub_1100 = python_operator(stypy.reporting.localization.Localization(__file__, 915, 20), '-', k_1098, int_1099)
        
        # Assigning a type to the variable 'k' (line 915)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 915, 16), 'k', result_sub_1100)
        # SSA branch for the else part of an if statement (line 913)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'ndid' (line 917)
        ndid_1101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 19), 'ndid')
        # Getting the type of 'lvisited' (line 917)
        lvisited_1102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 31), 'lvisited')
        # Applying the binary operator 'notin' (line 917)
        result_contains_1103 = python_operator(stypy.reporting.localization.Localization(__file__, 917, 19), 'notin', ndid_1101, lvisited_1102)
        
        # Testing the type of an if condition (line 917)
        if_condition_1104 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 917, 16), result_contains_1103)
        # Assigning a type to the variable 'if_condition_1104' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 16), 'if_condition_1104', if_condition_1104)
        # SSA begins for if statement (line 917)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 918):
        
        # Assigning a Attribute to a Subscript (line 918):
        # Getting the type of 'nd' (line 918)
        nd_1105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 37), 'nd')
        # Obtaining the member 'left' of a type (line 918)
        left_1106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 37), nd_1105, 'left')
        # Getting the type of 'curNode' (line 918)
        curNode_1107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 20), 'curNode')
        # Getting the type of 'k' (line 918)
        k_1108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 28), 'k')
        int_1109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 32), 'int')
        # Applying the binary operator '+' (line 918)
        result_add_1110 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 28), '+', k_1108, int_1109)
        
        # Storing an element on a container (line 918)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 918, 20), curNode_1107, (result_add_1110, left_1106))
        
        # Call to add(...): (line 919)
        # Processing the call arguments (line 919)
        # Getting the type of 'ndid' (line 919)
        ndid_1113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 33), 'ndid', False)
        # Processing the call keyword arguments (line 919)
        kwargs_1114 = {}
        # Getting the type of 'lvisited' (line 919)
        lvisited_1111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 20), 'lvisited', False)
        # Obtaining the member 'add' of a type (line 919)
        add_1112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 20), lvisited_1111, 'add')
        # Calling add(args, kwargs) (line 919)
        add_call_result_1115 = invoke(stypy.reporting.localization.Localization(__file__, 919, 20), add_1112, *[ndid_1113], **kwargs_1114)
        
        
        # Assigning a BinOp to a Name (line 920):
        
        # Assigning a BinOp to a Name (line 920):
        # Getting the type of 'k' (line 920)
        k_1116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 24), 'k')
        int_1117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 28), 'int')
        # Applying the binary operator '+' (line 920)
        result_add_1118 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 24), '+', k_1116, int_1117)
        
        # Assigning a type to the variable 'k' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 20), 'k', result_add_1118)
        # SSA branch for the else part of an if statement (line 917)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'ndid' (line 921)
        ndid_1119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 21), 'ndid')
        # Getting the type of 'rvisited' (line 921)
        rvisited_1120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 33), 'rvisited')
        # Applying the binary operator 'notin' (line 921)
        result_contains_1121 = python_operator(stypy.reporting.localization.Localization(__file__, 921, 21), 'notin', ndid_1119, rvisited_1120)
        
        # Testing the type of an if condition (line 921)
        if_condition_1122 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 921, 21), result_contains_1121)
        # Assigning a type to the variable 'if_condition_1122' (line 921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 21), 'if_condition_1122', if_condition_1122)
        # SSA begins for if statement (line 921)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Subscript (line 922):
        
        # Assigning a Attribute to a Subscript (line 922):
        # Getting the type of 'nd' (line 922)
        nd_1123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 37), 'nd')
        # Obtaining the member 'right' of a type (line 922)
        right_1124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 37), nd_1123, 'right')
        # Getting the type of 'curNode' (line 922)
        curNode_1125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 20), 'curNode')
        # Getting the type of 'k' (line 922)
        k_1126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 28), 'k')
        int_1127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 922, 32), 'int')
        # Applying the binary operator '+' (line 922)
        result_add_1128 = python_operator(stypy.reporting.localization.Localization(__file__, 922, 28), '+', k_1126, int_1127)
        
        # Storing an element on a container (line 922)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 922, 20), curNode_1125, (result_add_1128, right_1124))
        
        # Call to add(...): (line 923)
        # Processing the call arguments (line 923)
        # Getting the type of 'ndid' (line 923)
        ndid_1131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 33), 'ndid', False)
        # Processing the call keyword arguments (line 923)
        kwargs_1132 = {}
        # Getting the type of 'rvisited' (line 923)
        rvisited_1129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 20), 'rvisited', False)
        # Obtaining the member 'add' of a type (line 923)
        add_1130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 20), rvisited_1129, 'add')
        # Calling add(args, kwargs) (line 923)
        add_call_result_1133 = invoke(stypy.reporting.localization.Localization(__file__, 923, 20), add_1130, *[ndid_1131], **kwargs_1132)
        
        
        # Assigning a BinOp to a Name (line 924):
        
        # Assigning a BinOp to a Name (line 924):
        # Getting the type of 'k' (line 924)
        k_1134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 24), 'k')
        int_1135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 28), 'int')
        # Applying the binary operator '+' (line 924)
        result_add_1136 = python_operator(stypy.reporting.localization.Localization(__file__, 924, 24), '+', k_1134, int_1135)
        
        # Assigning a type to the variable 'k' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 20), 'k', result_add_1136)
        # SSA branch for the else part of an if statement (line 921)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 928):
        
        # Assigning a BinOp to a Name (line 928):
        # Getting the type of 'k' (line 928)
        k_1137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 24), 'k')
        int_1138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 28), 'int')
        # Applying the binary operator '-' (line 928)
        result_sub_1139 = python_operator(stypy.reporting.localization.Localization(__file__, 928, 24), '-', k_1137, int_1138)
        
        # Assigning a type to the variable 'k' (line 928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 20), 'k', result_sub_1139)
        # SSA join for if statement (line 921)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 917)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 913)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 910)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'preorder' (line 930)
        preorder_1140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 15), 'preorder')
        # Assigning a type to the variable 'stypy_return_type' (line 930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 8), 'stypy_return_type', preorder_1140)
        
        # ################# End of 'pre_order(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pre_order' in the type store
        # Getting the type of 'stypy_return_type' (line 870)
        stypy_return_type_1141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_1141)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pre_order'
        return stypy_return_type_1141


# Assigning a type to the variable 'ClusterNode' (line 732)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 0), 'ClusterNode', ClusterNode)

# Assigning a Call to a Name (line 933):

# Assigning a Call to a Name (line 933):

# Call to ClusterNode(...): (line 933)
# Processing the call arguments (line 933)
int_1143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 26), 'int')
# Processing the call keyword arguments (line 933)
kwargs_1144 = {}
# Getting the type of 'ClusterNode' (line 933)
ClusterNode_1142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 14), 'ClusterNode', False)
# Calling ClusterNode(args, kwargs) (line 933)
ClusterNode_call_result_1145 = invoke(stypy.reporting.localization.Localization(__file__, 933, 14), ClusterNode_1142, *[int_1143], **kwargs_1144)

# Assigning a type to the variable '_cnode_bare' (line 933)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 0), '_cnode_bare', ClusterNode_call_result_1145)

# Assigning a Call to a Name (line 934):

# Assigning a Call to a Name (line 934):

# Call to type(...): (line 934)
# Processing the call arguments (line 934)
# Getting the type of 'ClusterNode' (line 934)
ClusterNode_1147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 19), 'ClusterNode', False)
# Processing the call keyword arguments (line 934)
kwargs_1148 = {}
# Getting the type of 'type' (line 934)
type_1146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 14), 'type', False)
# Calling type(args, kwargs) (line 934)
type_call_result_1149 = invoke(stypy.reporting.localization.Localization(__file__, 934, 14), type_1146, *[ClusterNode_1147], **kwargs_1148)

# Assigning a type to the variable '_cnode_type' (line 934)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 0), '_cnode_type', type_call_result_1149)

@norecursion
def _order_cluster_tree(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_order_cluster_tree'
    module_type_store = module_type_store.open_function_context('_order_cluster_tree', 937, 0, False)
    
    # Passed parameters checking function
    _order_cluster_tree.stypy_localization = localization
    _order_cluster_tree.stypy_type_of_self = None
    _order_cluster_tree.stypy_type_store = module_type_store
    _order_cluster_tree.stypy_function_name = '_order_cluster_tree'
    _order_cluster_tree.stypy_param_names_list = ['Z']
    _order_cluster_tree.stypy_varargs_param_name = None
    _order_cluster_tree.stypy_kwargs_param_name = None
    _order_cluster_tree.stypy_call_defaults = defaults
    _order_cluster_tree.stypy_call_varargs = varargs
    _order_cluster_tree.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_order_cluster_tree', ['Z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_order_cluster_tree', localization, ['Z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_order_cluster_tree(...)' code ##################

    str_1150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, (-1)), 'str', '\n    Return clustering nodes in bottom-up order by distance.\n\n    Parameters\n    ----------\n    Z : scipy.cluster.linkage array\n        The linkage matrix.\n\n    Returns\n    -------\n    nodes : list\n        A list of ClusterNode objects.\n    ')
    
    # Assigning a Call to a Name (line 951):
    
    # Assigning a Call to a Name (line 951):
    
    # Call to deque(...): (line 951)
    # Processing the call keyword arguments (line 951)
    kwargs_1152 = {}
    # Getting the type of 'deque' (line 951)
    deque_1151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'deque', False)
    # Calling deque(args, kwargs) (line 951)
    deque_call_result_1153 = invoke(stypy.reporting.localization.Localization(__file__, 951, 8), deque_1151, *[], **kwargs_1152)
    
    # Assigning a type to the variable 'q' (line 951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 4), 'q', deque_call_result_1153)
    
    # Assigning a Call to a Name (line 952):
    
    # Assigning a Call to a Name (line 952):
    
    # Call to to_tree(...): (line 952)
    # Processing the call arguments (line 952)
    # Getting the type of 'Z' (line 952)
    Z_1155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 19), 'Z', False)
    # Processing the call keyword arguments (line 952)
    kwargs_1156 = {}
    # Getting the type of 'to_tree' (line 952)
    to_tree_1154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 11), 'to_tree', False)
    # Calling to_tree(args, kwargs) (line 952)
    to_tree_call_result_1157 = invoke(stypy.reporting.localization.Localization(__file__, 952, 11), to_tree_1154, *[Z_1155], **kwargs_1156)
    
    # Assigning a type to the variable 'tree' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'tree', to_tree_call_result_1157)
    
    # Call to append(...): (line 953)
    # Processing the call arguments (line 953)
    # Getting the type of 'tree' (line 953)
    tree_1160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 13), 'tree', False)
    # Processing the call keyword arguments (line 953)
    kwargs_1161 = {}
    # Getting the type of 'q' (line 953)
    q_1158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 4), 'q', False)
    # Obtaining the member 'append' of a type (line 953)
    append_1159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 4), q_1158, 'append')
    # Calling append(args, kwargs) (line 953)
    append_call_result_1162 = invoke(stypy.reporting.localization.Localization(__file__, 953, 4), append_1159, *[tree_1160], **kwargs_1161)
    
    
    # Assigning a List to a Name (line 954):
    
    # Assigning a List to a Name (line 954):
    
    # Obtaining an instance of the builtin type 'list' (line 954)
    list_1163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 954)
    
    # Assigning a type to the variable 'nodes' (line 954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 4), 'nodes', list_1163)
    
    # Getting the type of 'q' (line 956)
    q_1164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 10), 'q')
    # Testing the type of an if condition (line 956)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 956, 4), q_1164)
    # SSA begins for while statement (line 956)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Call to a Name (line 957):
    
    # Assigning a Call to a Name (line 957):
    
    # Call to popleft(...): (line 957)
    # Processing the call keyword arguments (line 957)
    kwargs_1167 = {}
    # Getting the type of 'q' (line 957)
    q_1165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 15), 'q', False)
    # Obtaining the member 'popleft' of a type (line 957)
    popleft_1166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 15), q_1165, 'popleft')
    # Calling popleft(args, kwargs) (line 957)
    popleft_call_result_1168 = invoke(stypy.reporting.localization.Localization(__file__, 957, 15), popleft_1166, *[], **kwargs_1167)
    
    # Assigning a type to the variable 'node' (line 957)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 8), 'node', popleft_call_result_1168)
    
    
    
    # Call to is_leaf(...): (line 958)
    # Processing the call keyword arguments (line 958)
    kwargs_1171 = {}
    # Getting the type of 'node' (line 958)
    node_1169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 15), 'node', False)
    # Obtaining the member 'is_leaf' of a type (line 958)
    is_leaf_1170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 15), node_1169, 'is_leaf')
    # Calling is_leaf(args, kwargs) (line 958)
    is_leaf_call_result_1172 = invoke(stypy.reporting.localization.Localization(__file__, 958, 15), is_leaf_1170, *[], **kwargs_1171)
    
    # Applying the 'not' unary operator (line 958)
    result_not__1173 = python_operator(stypy.reporting.localization.Localization(__file__, 958, 11), 'not', is_leaf_call_result_1172)
    
    # Testing the type of an if condition (line 958)
    if_condition_1174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 958, 8), result_not__1173)
    # Assigning a type to the variable 'if_condition_1174' (line 958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 8), 'if_condition_1174', if_condition_1174)
    # SSA begins for if statement (line 958)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to insort_left(...): (line 959)
    # Processing the call arguments (line 959)
    # Getting the type of 'nodes' (line 959)
    nodes_1177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 31), 'nodes', False)
    # Getting the type of 'node' (line 959)
    node_1178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 38), 'node', False)
    # Processing the call keyword arguments (line 959)
    kwargs_1179 = {}
    # Getting the type of 'bisect' (line 959)
    bisect_1175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 12), 'bisect', False)
    # Obtaining the member 'insort_left' of a type (line 959)
    insort_left_1176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 12), bisect_1175, 'insort_left')
    # Calling insort_left(args, kwargs) (line 959)
    insort_left_call_result_1180 = invoke(stypy.reporting.localization.Localization(__file__, 959, 12), insort_left_1176, *[nodes_1177, node_1178], **kwargs_1179)
    
    
    # Call to append(...): (line 960)
    # Processing the call arguments (line 960)
    
    # Call to get_right(...): (line 960)
    # Processing the call keyword arguments (line 960)
    kwargs_1185 = {}
    # Getting the type of 'node' (line 960)
    node_1183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 21), 'node', False)
    # Obtaining the member 'get_right' of a type (line 960)
    get_right_1184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 21), node_1183, 'get_right')
    # Calling get_right(args, kwargs) (line 960)
    get_right_call_result_1186 = invoke(stypy.reporting.localization.Localization(__file__, 960, 21), get_right_1184, *[], **kwargs_1185)
    
    # Processing the call keyword arguments (line 960)
    kwargs_1187 = {}
    # Getting the type of 'q' (line 960)
    q_1181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 12), 'q', False)
    # Obtaining the member 'append' of a type (line 960)
    append_1182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 12), q_1181, 'append')
    # Calling append(args, kwargs) (line 960)
    append_call_result_1188 = invoke(stypy.reporting.localization.Localization(__file__, 960, 12), append_1182, *[get_right_call_result_1186], **kwargs_1187)
    
    
    # Call to append(...): (line 961)
    # Processing the call arguments (line 961)
    
    # Call to get_left(...): (line 961)
    # Processing the call keyword arguments (line 961)
    kwargs_1193 = {}
    # Getting the type of 'node' (line 961)
    node_1191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 21), 'node', False)
    # Obtaining the member 'get_left' of a type (line 961)
    get_left_1192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 21), node_1191, 'get_left')
    # Calling get_left(args, kwargs) (line 961)
    get_left_call_result_1194 = invoke(stypy.reporting.localization.Localization(__file__, 961, 21), get_left_1192, *[], **kwargs_1193)
    
    # Processing the call keyword arguments (line 961)
    kwargs_1195 = {}
    # Getting the type of 'q' (line 961)
    q_1189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 12), 'q', False)
    # Obtaining the member 'append' of a type (line 961)
    append_1190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 12), q_1189, 'append')
    # Calling append(args, kwargs) (line 961)
    append_call_result_1196 = invoke(stypy.reporting.localization.Localization(__file__, 961, 12), append_1190, *[get_left_call_result_1194], **kwargs_1195)
    
    # SSA join for if statement (line 958)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for while statement (line 956)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'nodes' (line 962)
    nodes_1197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 11), 'nodes')
    # Assigning a type to the variable 'stypy_return_type' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 4), 'stypy_return_type', nodes_1197)
    
    # ################# End of '_order_cluster_tree(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_order_cluster_tree' in the type store
    # Getting the type of 'stypy_return_type' (line 937)
    stypy_return_type_1198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1198)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_order_cluster_tree'
    return stypy_return_type_1198

# Assigning a type to the variable '_order_cluster_tree' (line 937)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 0), '_order_cluster_tree', _order_cluster_tree)

@norecursion
def cut_tree(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 965)
    None_1199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 27), 'None')
    # Getting the type of 'None' (line 965)
    None_1200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 40), 'None')
    defaults = [None_1199, None_1200]
    # Create a new context for function 'cut_tree'
    module_type_store = module_type_store.open_function_context('cut_tree', 965, 0, False)
    
    # Passed parameters checking function
    cut_tree.stypy_localization = localization
    cut_tree.stypy_type_of_self = None
    cut_tree.stypy_type_store = module_type_store
    cut_tree.stypy_function_name = 'cut_tree'
    cut_tree.stypy_param_names_list = ['Z', 'n_clusters', 'height']
    cut_tree.stypy_varargs_param_name = None
    cut_tree.stypy_kwargs_param_name = None
    cut_tree.stypy_call_defaults = defaults
    cut_tree.stypy_call_varargs = varargs
    cut_tree.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cut_tree', ['Z', 'n_clusters', 'height'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cut_tree', localization, ['Z', 'n_clusters', 'height'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cut_tree(...)' code ##################

    str_1201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1008, (-1)), 'str', '\n    Given a linkage matrix Z, return the cut tree.\n\n    Parameters\n    ----------\n    Z : scipy.cluster.linkage array\n        The linkage matrix.\n    n_clusters : array_like, optional\n        Number of clusters in the tree at the cut point.\n    height : array_like, optional\n        The height at which to cut the tree.  Only possible for ultrametric\n        trees.\n\n    Returns\n    -------\n    cutree : array\n        An array indicating group membership at each agglomeration step.  I.e.,\n        for a full cut tree, in the first column each data point is in its own\n        cluster.  At the next step, two nodes are merged.  Finally all\n        singleton and non-singleton clusters are in one group.  If `n_clusters`\n        or `height` is given, the columns correspond to the columns of\n        `n_clusters` or `height`.\n\n    Examples\n    --------\n    >>> from scipy import cluster\n    >>> np.random.seed(23)\n    >>> X = np.random.randn(50, 4)\n    >>> Z = cluster.hierarchy.ward(X)\n    >>> cutree = cluster.hierarchy.cut_tree(Z, n_clusters=[5, 10])\n    >>> cutree[:10]\n    array([[0, 0],\n           [1, 1],\n           [2, 2],\n           [3, 3],\n           [3, 4],\n           [2, 2],\n           [0, 0],\n           [1, 5],\n           [3, 6],\n           [4, 7]])\n\n    ')
    
    # Assigning a Call to a Name (line 1009):
    
    # Assigning a Call to a Name (line 1009):
    
    # Call to num_obs_linkage(...): (line 1009)
    # Processing the call arguments (line 1009)
    # Getting the type of 'Z' (line 1009)
    Z_1203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 27), 'Z', False)
    # Processing the call keyword arguments (line 1009)
    kwargs_1204 = {}
    # Getting the type of 'num_obs_linkage' (line 1009)
    num_obs_linkage_1202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 11), 'num_obs_linkage', False)
    # Calling num_obs_linkage(args, kwargs) (line 1009)
    num_obs_linkage_call_result_1205 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 11), num_obs_linkage_1202, *[Z_1203], **kwargs_1204)
    
    # Assigning a type to the variable 'nobs' (line 1009)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 4), 'nobs', num_obs_linkage_call_result_1205)
    
    # Assigning a Call to a Name (line 1010):
    
    # Assigning a Call to a Name (line 1010):
    
    # Call to _order_cluster_tree(...): (line 1010)
    # Processing the call arguments (line 1010)
    # Getting the type of 'Z' (line 1010)
    Z_1207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 32), 'Z', False)
    # Processing the call keyword arguments (line 1010)
    kwargs_1208 = {}
    # Getting the type of '_order_cluster_tree' (line 1010)
    _order_cluster_tree_1206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 12), '_order_cluster_tree', False)
    # Calling _order_cluster_tree(args, kwargs) (line 1010)
    _order_cluster_tree_call_result_1209 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 12), _order_cluster_tree_1206, *[Z_1207], **kwargs_1208)
    
    # Assigning a type to the variable 'nodes' (line 1010)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'nodes', _order_cluster_tree_call_result_1209)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'height' (line 1012)
    height_1210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 7), 'height')
    # Getting the type of 'None' (line 1012)
    None_1211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 21), 'None')
    # Applying the binary operator 'isnot' (line 1012)
    result_is_not_1212 = python_operator(stypy.reporting.localization.Localization(__file__, 1012, 7), 'isnot', height_1210, None_1211)
    
    
    # Getting the type of 'n_clusters' (line 1012)
    n_clusters_1213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 30), 'n_clusters')
    # Getting the type of 'None' (line 1012)
    None_1214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 48), 'None')
    # Applying the binary operator 'isnot' (line 1012)
    result_is_not_1215 = python_operator(stypy.reporting.localization.Localization(__file__, 1012, 30), 'isnot', n_clusters_1213, None_1214)
    
    # Applying the binary operator 'and' (line 1012)
    result_and_keyword_1216 = python_operator(stypy.reporting.localization.Localization(__file__, 1012, 7), 'and', result_is_not_1212, result_is_not_1215)
    
    # Testing the type of an if condition (line 1012)
    if_condition_1217 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1012, 4), result_and_keyword_1216)
    # Assigning a type to the variable 'if_condition_1217' (line 1012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1012, 4), 'if_condition_1217', if_condition_1217)
    # SSA begins for if statement (line 1012)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1013)
    # Processing the call arguments (line 1013)
    str_1219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 25), 'str', 'At least one of either height or n_clusters must be None')
    # Processing the call keyword arguments (line 1013)
    kwargs_1220 = {}
    # Getting the type of 'ValueError' (line 1013)
    ValueError_1218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1013)
    ValueError_call_result_1221 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 14), ValueError_1218, *[str_1219], **kwargs_1220)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1013, 8), ValueError_call_result_1221, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 1012)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'height' (line 1015)
    height_1222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 9), 'height')
    # Getting the type of 'None' (line 1015)
    None_1223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 19), 'None')
    # Applying the binary operator 'is' (line 1015)
    result_is__1224 = python_operator(stypy.reporting.localization.Localization(__file__, 1015, 9), 'is', height_1222, None_1223)
    
    
    # Getting the type of 'n_clusters' (line 1015)
    n_clusters_1225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 28), 'n_clusters')
    # Getting the type of 'None' (line 1015)
    None_1226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 42), 'None')
    # Applying the binary operator 'is' (line 1015)
    result_is__1227 = python_operator(stypy.reporting.localization.Localization(__file__, 1015, 28), 'is', n_clusters_1225, None_1226)
    
    # Applying the binary operator 'and' (line 1015)
    result_and_keyword_1228 = python_operator(stypy.reporting.localization.Localization(__file__, 1015, 9), 'and', result_is__1224, result_is__1227)
    
    # Testing the type of an if condition (line 1015)
    if_condition_1229 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1015, 9), result_and_keyword_1228)
    # Assigning a type to the variable 'if_condition_1229' (line 1015)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1015, 9), 'if_condition_1229', if_condition_1229)
    # SSA begins for if statement (line 1015)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1016):
    
    # Assigning a Call to a Name (line 1016):
    
    # Call to arange(...): (line 1016)
    # Processing the call arguments (line 1016)
    # Getting the type of 'nobs' (line 1016)
    nobs_1232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 29), 'nobs', False)
    # Processing the call keyword arguments (line 1016)
    kwargs_1233 = {}
    # Getting the type of 'np' (line 1016)
    np_1230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 19), 'np', False)
    # Obtaining the member 'arange' of a type (line 1016)
    arange_1231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1016, 19), np_1230, 'arange')
    # Calling arange(args, kwargs) (line 1016)
    arange_call_result_1234 = invoke(stypy.reporting.localization.Localization(__file__, 1016, 19), arange_1231, *[nobs_1232], **kwargs_1233)
    
    # Assigning a type to the variable 'cols_idx' (line 1016)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1016, 8), 'cols_idx', arange_call_result_1234)
    # SSA branch for the else part of an if statement (line 1015)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 1017)
    # Getting the type of 'height' (line 1017)
    height_1235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 9), 'height')
    # Getting the type of 'None' (line 1017)
    None_1236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 23), 'None')
    
    (may_be_1237, more_types_in_union_1238) = may_not_be_none(height_1235, None_1236)

    if may_be_1237:

        if more_types_in_union_1238:
            # Runtime conditional SSA (line 1017)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1018):
        
        # Assigning a Call to a Name (line 1018):
        
        # Call to array(...): (line 1018)
        # Processing the call arguments (line 1018)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'nodes' (line 1018)
        nodes_1243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 44), 'nodes', False)
        comprehension_1244 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1018, 28), nodes_1243)
        # Assigning a type to the variable 'x' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 28), 'x', comprehension_1244)
        # Getting the type of 'x' (line 1018)
        x_1241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 28), 'x', False)
        # Obtaining the member 'dist' of a type (line 1018)
        dist_1242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 28), x_1241, 'dist')
        list_1245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, 28), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1018, 28), list_1245, dist_1242)
        # Processing the call keyword arguments (line 1018)
        kwargs_1246 = {}
        # Getting the type of 'np' (line 1018)
        np_1239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 18), 'np', False)
        # Obtaining the member 'array' of a type (line 1018)
        array_1240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 18), np_1239, 'array')
        # Calling array(args, kwargs) (line 1018)
        array_call_result_1247 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 18), array_1240, *[list_1245], **kwargs_1246)
        
        # Assigning a type to the variable 'heights' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'heights', array_call_result_1247)
        
        # Assigning a Call to a Name (line 1019):
        
        # Assigning a Call to a Name (line 1019):
        
        # Call to searchsorted(...): (line 1019)
        # Processing the call arguments (line 1019)
        # Getting the type of 'heights' (line 1019)
        heights_1250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 35), 'heights', False)
        # Getting the type of 'height' (line 1019)
        height_1251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 44), 'height', False)
        # Processing the call keyword arguments (line 1019)
        kwargs_1252 = {}
        # Getting the type of 'np' (line 1019)
        np_1248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 19), 'np', False)
        # Obtaining the member 'searchsorted' of a type (line 1019)
        searchsorted_1249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1019, 19), np_1248, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 1019)
        searchsorted_call_result_1253 = invoke(stypy.reporting.localization.Localization(__file__, 1019, 19), searchsorted_1249, *[heights_1250, height_1251], **kwargs_1252)
        
        # Assigning a type to the variable 'cols_idx' (line 1019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1019, 8), 'cols_idx', searchsorted_call_result_1253)

        if more_types_in_union_1238:
            # Runtime conditional SSA for else branch (line 1017)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_1237) or more_types_in_union_1238):
        
        # Assigning a BinOp to a Name (line 1021):
        
        # Assigning a BinOp to a Name (line 1021):
        # Getting the type of 'nobs' (line 1021)
        nobs_1254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 19), 'nobs')
        
        # Call to searchsorted(...): (line 1021)
        # Processing the call arguments (line 1021)
        
        # Call to arange(...): (line 1021)
        # Processing the call arguments (line 1021)
        # Getting the type of 'nobs' (line 1021)
        nobs_1259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 52), 'nobs', False)
        # Processing the call keyword arguments (line 1021)
        kwargs_1260 = {}
        # Getting the type of 'np' (line 1021)
        np_1257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 42), 'np', False)
        # Obtaining the member 'arange' of a type (line 1021)
        arange_1258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 42), np_1257, 'arange')
        # Calling arange(args, kwargs) (line 1021)
        arange_call_result_1261 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 42), arange_1258, *[nobs_1259], **kwargs_1260)
        
        # Getting the type of 'n_clusters' (line 1021)
        n_clusters_1262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 59), 'n_clusters', False)
        # Processing the call keyword arguments (line 1021)
        kwargs_1263 = {}
        # Getting the type of 'np' (line 1021)
        np_1255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 26), 'np', False)
        # Obtaining the member 'searchsorted' of a type (line 1021)
        searchsorted_1256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 26), np_1255, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 1021)
        searchsorted_call_result_1264 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 26), searchsorted_1256, *[arange_call_result_1261, n_clusters_1262], **kwargs_1263)
        
        # Applying the binary operator '-' (line 1021)
        result_sub_1265 = python_operator(stypy.reporting.localization.Localization(__file__, 1021, 19), '-', nobs_1254, searchsorted_call_result_1264)
        
        # Assigning a type to the variable 'cols_idx' (line 1021)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1021, 8), 'cols_idx', result_sub_1265)

        if (may_be_1237 and more_types_in_union_1238):
            # SSA join for if statement (line 1017)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 1015)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1012)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 1023)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1024):
    
    # Assigning a Call to a Name (line 1024):
    
    # Call to len(...): (line 1024)
    # Processing the call arguments (line 1024)
    # Getting the type of 'cols_idx' (line 1024)
    cols_idx_1267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 21), 'cols_idx', False)
    # Processing the call keyword arguments (line 1024)
    kwargs_1268 = {}
    # Getting the type of 'len' (line 1024)
    len_1266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 17), 'len', False)
    # Calling len(args, kwargs) (line 1024)
    len_call_result_1269 = invoke(stypy.reporting.localization.Localization(__file__, 1024, 17), len_1266, *[cols_idx_1267], **kwargs_1268)
    
    # Assigning a type to the variable 'n_cols' (line 1024)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 8), 'n_cols', len_call_result_1269)
    # SSA branch for the except part of a try statement (line 1023)
    # SSA branch for the except 'TypeError' branch of a try statement (line 1023)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Num to a Name (line 1026):
    
    # Assigning a Num to a Name (line 1026):
    int_1270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 17), 'int')
    # Assigning a type to the variable 'n_cols' (line 1026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 8), 'n_cols', int_1270)
    
    # Assigning a Call to a Name (line 1027):
    
    # Assigning a Call to a Name (line 1027):
    
    # Call to array(...): (line 1027)
    # Processing the call arguments (line 1027)
    
    # Obtaining an instance of the builtin type 'list' (line 1027)
    list_1273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 28), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1027)
    # Adding element type (line 1027)
    # Getting the type of 'cols_idx' (line 1027)
    cols_idx_1274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 29), 'cols_idx', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1027, 28), list_1273, cols_idx_1274)
    
    # Processing the call keyword arguments (line 1027)
    kwargs_1275 = {}
    # Getting the type of 'np' (line 1027)
    np_1271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 19), 'np', False)
    # Obtaining the member 'array' of a type (line 1027)
    array_1272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 19), np_1271, 'array')
    # Calling array(args, kwargs) (line 1027)
    array_call_result_1276 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 19), array_1272, *[list_1273], **kwargs_1275)
    
    # Assigning a type to the variable 'cols_idx' (line 1027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1027, 8), 'cols_idx', array_call_result_1276)
    # SSA join for try-except statement (line 1023)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1029):
    
    # Assigning a Call to a Name (line 1029):
    
    # Call to zeros(...): (line 1029)
    # Processing the call arguments (line 1029)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1029)
    tuple_1279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1029, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1029)
    # Adding element type (line 1029)
    # Getting the type of 'n_cols' (line 1029)
    n_cols_1280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 23), 'n_cols', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1029, 23), tuple_1279, n_cols_1280)
    # Adding element type (line 1029)
    # Getting the type of 'nobs' (line 1029)
    nobs_1281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 31), 'nobs', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1029, 23), tuple_1279, nobs_1281)
    
    # Processing the call keyword arguments (line 1029)
    # Getting the type of 'int' (line 1029)
    int_1282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 44), 'int', False)
    keyword_1283 = int_1282
    kwargs_1284 = {'dtype': keyword_1283}
    # Getting the type of 'np' (line 1029)
    np_1277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 13), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1029)
    zeros_1278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 13), np_1277, 'zeros')
    # Calling zeros(args, kwargs) (line 1029)
    zeros_call_result_1285 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 13), zeros_1278, *[tuple_1279], **kwargs_1284)
    
    # Assigning a type to the variable 'groups' (line 1029)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 4), 'groups', zeros_call_result_1285)
    
    # Assigning a Call to a Name (line 1030):
    
    # Assigning a Call to a Name (line 1030):
    
    # Call to arange(...): (line 1030)
    # Processing the call arguments (line 1030)
    # Getting the type of 'nobs' (line 1030)
    nobs_1288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 27), 'nobs', False)
    # Processing the call keyword arguments (line 1030)
    kwargs_1289 = {}
    # Getting the type of 'np' (line 1030)
    np_1286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 17), 'np', False)
    # Obtaining the member 'arange' of a type (line 1030)
    arange_1287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 17), np_1286, 'arange')
    # Calling arange(args, kwargs) (line 1030)
    arange_call_result_1290 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 17), arange_1287, *[nobs_1288], **kwargs_1289)
    
    # Assigning a type to the variable 'last_group' (line 1030)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1030, 4), 'last_group', arange_call_result_1290)
    
    
    int_1291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 7), 'int')
    # Getting the type of 'cols_idx' (line 1031)
    cols_idx_1292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 12), 'cols_idx')
    # Applying the binary operator 'in' (line 1031)
    result_contains_1293 = python_operator(stypy.reporting.localization.Localization(__file__, 1031, 7), 'in', int_1291, cols_idx_1292)
    
    # Testing the type of an if condition (line 1031)
    if_condition_1294 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1031, 4), result_contains_1293)
    # Assigning a type to the variable 'if_condition_1294' (line 1031)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 4), 'if_condition_1294', if_condition_1294)
    # SSA begins for if statement (line 1031)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 1032):
    
    # Assigning a Name to a Subscript (line 1032):
    # Getting the type of 'last_group' (line 1032)
    last_group_1295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 20), 'last_group')
    # Getting the type of 'groups' (line 1032)
    groups_1296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 8), 'groups')
    int_1297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1032, 15), 'int')
    # Storing an element on a container (line 1032)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1032, 8), groups_1296, (int_1297, last_group_1295))
    # SSA join for if statement (line 1031)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to enumerate(...): (line 1034)
    # Processing the call arguments (line 1034)
    # Getting the type of 'nodes' (line 1034)
    nodes_1299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 29), 'nodes', False)
    # Processing the call keyword arguments (line 1034)
    kwargs_1300 = {}
    # Getting the type of 'enumerate' (line 1034)
    enumerate_1298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 19), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1034)
    enumerate_call_result_1301 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 19), enumerate_1298, *[nodes_1299], **kwargs_1300)
    
    # Testing the type of a for loop iterable (line 1034)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1034, 4), enumerate_call_result_1301)
    # Getting the type of the for loop variable (line 1034)
    for_loop_var_1302 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1034, 4), enumerate_call_result_1301)
    # Assigning a type to the variable 'i' (line 1034)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1034, 4), for_loop_var_1302))
    # Assigning a type to the variable 'node' (line 1034)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 4), 'node', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1034, 4), for_loop_var_1302))
    # SSA begins for a for statement (line 1034)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1035):
    
    # Assigning a Call to a Name (line 1035):
    
    # Call to pre_order(...): (line 1035)
    # Processing the call keyword arguments (line 1035)
    kwargs_1305 = {}
    # Getting the type of 'node' (line 1035)
    node_1303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 14), 'node', False)
    # Obtaining the member 'pre_order' of a type (line 1035)
    pre_order_1304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1035, 14), node_1303, 'pre_order')
    # Calling pre_order(args, kwargs) (line 1035)
    pre_order_call_result_1306 = invoke(stypy.reporting.localization.Localization(__file__, 1035, 14), pre_order_1304, *[], **kwargs_1305)
    
    # Assigning a type to the variable 'idx' (line 1035)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 8), 'idx', pre_order_call_result_1306)
    
    # Assigning a Call to a Name (line 1036):
    
    # Assigning a Call to a Name (line 1036):
    
    # Call to copy(...): (line 1036)
    # Processing the call keyword arguments (line 1036)
    kwargs_1309 = {}
    # Getting the type of 'last_group' (line 1036)
    last_group_1307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 21), 'last_group', False)
    # Obtaining the member 'copy' of a type (line 1036)
    copy_1308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 21), last_group_1307, 'copy')
    # Calling copy(args, kwargs) (line 1036)
    copy_call_result_1310 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 21), copy_1308, *[], **kwargs_1309)
    
    # Assigning a type to the variable 'this_group' (line 1036)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1036, 8), 'this_group', copy_call_result_1310)
    
    # Assigning a Call to a Subscript (line 1037):
    
    # Assigning a Call to a Subscript (line 1037):
    
    # Call to min(...): (line 1037)
    # Processing the call keyword arguments (line 1037)
    kwargs_1316 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1037)
    idx_1311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 37), 'idx', False)
    # Getting the type of 'last_group' (line 1037)
    last_group_1312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 26), 'last_group', False)
    # Obtaining the member '__getitem__' of a type (line 1037)
    getitem___1313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 26), last_group_1312, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1037)
    subscript_call_result_1314 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 26), getitem___1313, idx_1311)
    
    # Obtaining the member 'min' of a type (line 1037)
    min_1315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 26), subscript_call_result_1314, 'min')
    # Calling min(args, kwargs) (line 1037)
    min_call_result_1317 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 26), min_1315, *[], **kwargs_1316)
    
    # Getting the type of 'this_group' (line 1037)
    this_group_1318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'this_group')
    # Getting the type of 'idx' (line 1037)
    idx_1319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 19), 'idx')
    # Storing an element on a container (line 1037)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1037, 8), this_group_1318, (idx_1319, min_call_result_1317))
    
    # Getting the type of 'this_group' (line 1038)
    this_group_1320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'this_group')
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'this_group' (line 1038)
    this_group_1321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 19), 'this_group')
    
    # Call to max(...): (line 1038)
    # Processing the call keyword arguments (line 1038)
    kwargs_1327 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1038)
    idx_1322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 43), 'idx', False)
    # Getting the type of 'last_group' (line 1038)
    last_group_1323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 32), 'last_group', False)
    # Obtaining the member '__getitem__' of a type (line 1038)
    getitem___1324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 32), last_group_1323, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1038)
    subscript_call_result_1325 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 32), getitem___1324, idx_1322)
    
    # Obtaining the member 'max' of a type (line 1038)
    max_1326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 32), subscript_call_result_1325, 'max')
    # Calling max(args, kwargs) (line 1038)
    max_call_result_1328 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 32), max_1326, *[], **kwargs_1327)
    
    # Applying the binary operator '>' (line 1038)
    result_gt_1329 = python_operator(stypy.reporting.localization.Localization(__file__, 1038, 19), '>', this_group_1321, max_call_result_1328)
    
    # Getting the type of 'this_group' (line 1038)
    this_group_1330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'this_group')
    # Obtaining the member '__getitem__' of a type (line 1038)
    getitem___1331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 8), this_group_1330, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1038)
    subscript_call_result_1332 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 8), getitem___1331, result_gt_1329)
    
    int_1333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 58), 'int')
    # Applying the binary operator '-=' (line 1038)
    result_isub_1334 = python_operator(stypy.reporting.localization.Localization(__file__, 1038, 8), '-=', subscript_call_result_1332, int_1333)
    # Getting the type of 'this_group' (line 1038)
    this_group_1335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'this_group')
    
    # Getting the type of 'this_group' (line 1038)
    this_group_1336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 19), 'this_group')
    
    # Call to max(...): (line 1038)
    # Processing the call keyword arguments (line 1038)
    kwargs_1342 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1038)
    idx_1337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 43), 'idx', False)
    # Getting the type of 'last_group' (line 1038)
    last_group_1338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 32), 'last_group', False)
    # Obtaining the member '__getitem__' of a type (line 1038)
    getitem___1339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 32), last_group_1338, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1038)
    subscript_call_result_1340 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 32), getitem___1339, idx_1337)
    
    # Obtaining the member 'max' of a type (line 1038)
    max_1341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 32), subscript_call_result_1340, 'max')
    # Calling max(args, kwargs) (line 1038)
    max_call_result_1343 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 32), max_1341, *[], **kwargs_1342)
    
    # Applying the binary operator '>' (line 1038)
    result_gt_1344 = python_operator(stypy.reporting.localization.Localization(__file__, 1038, 19), '>', this_group_1336, max_call_result_1343)
    
    # Storing an element on a container (line 1038)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1038, 8), this_group_1335, (result_gt_1344, result_isub_1334))
    
    
    
    # Getting the type of 'i' (line 1039)
    i_1345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 11), 'i')
    int_1346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 15), 'int')
    # Applying the binary operator '+' (line 1039)
    result_add_1347 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 11), '+', i_1345, int_1346)
    
    # Getting the type of 'cols_idx' (line 1039)
    cols_idx_1348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 20), 'cols_idx')
    # Applying the binary operator 'in' (line 1039)
    result_contains_1349 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 11), 'in', result_add_1347, cols_idx_1348)
    
    # Testing the type of an if condition (line 1039)
    if_condition_1350 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1039, 8), result_contains_1349)
    # Assigning a type to the variable 'if_condition_1350' (line 1039)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'if_condition_1350', if_condition_1350)
    # SSA begins for if statement (line 1039)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 1040):
    
    # Assigning a Name to a Subscript (line 1040):
    # Getting the type of 'this_group' (line 1040)
    this_group_1351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 53), 'this_group')
    # Getting the type of 'groups' (line 1040)
    groups_1352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 12), 'groups')
    
    # Obtaining the type of the subscript
    int_1353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 47), 'int')
    
    # Call to where(...): (line 1040)
    # Processing the call arguments (line 1040)
    
    # Getting the type of 'i' (line 1040)
    i_1356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 28), 'i', False)
    int_1357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 32), 'int')
    # Applying the binary operator '+' (line 1040)
    result_add_1358 = python_operator(stypy.reporting.localization.Localization(__file__, 1040, 28), '+', i_1356, int_1357)
    
    # Getting the type of 'cols_idx' (line 1040)
    cols_idx_1359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 37), 'cols_idx', False)
    # Applying the binary operator '==' (line 1040)
    result_eq_1360 = python_operator(stypy.reporting.localization.Localization(__file__, 1040, 28), '==', result_add_1358, cols_idx_1359)
    
    # Processing the call keyword arguments (line 1040)
    kwargs_1361 = {}
    # Getting the type of 'np' (line 1040)
    np_1354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 19), 'np', False)
    # Obtaining the member 'where' of a type (line 1040)
    where_1355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 19), np_1354, 'where')
    # Calling where(args, kwargs) (line 1040)
    where_call_result_1362 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 19), where_1355, *[result_eq_1360], **kwargs_1361)
    
    # Obtaining the member '__getitem__' of a type (line 1040)
    getitem___1363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 19), where_call_result_1362, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1040)
    subscript_call_result_1364 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 19), getitem___1363, int_1353)
    
    # Storing an element on a container (line 1040)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1040, 12), groups_1352, (subscript_call_result_1364, this_group_1351))
    # SSA join for if statement (line 1039)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1041):
    
    # Assigning a Name to a Name (line 1041):
    # Getting the type of 'this_group' (line 1041)
    this_group_1365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 21), 'this_group')
    # Assigning a type to the variable 'last_group' (line 1041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'last_group', this_group_1365)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'groups' (line 1043)
    groups_1366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 11), 'groups')
    # Obtaining the member 'T' of a type (line 1043)
    T_1367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 11), groups_1366, 'T')
    # Assigning a type to the variable 'stypy_return_type' (line 1043)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 4), 'stypy_return_type', T_1367)
    
    # ################# End of 'cut_tree(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cut_tree' in the type store
    # Getting the type of 'stypy_return_type' (line 965)
    stypy_return_type_1368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1368)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cut_tree'
    return stypy_return_type_1368

# Assigning a type to the variable 'cut_tree' (line 965)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 965, 0), 'cut_tree', cut_tree)

@norecursion
def to_tree(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1046)
    False_1369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 18), 'False')
    defaults = [False_1369]
    # Create a new context for function 'to_tree'
    module_type_store = module_type_store.open_function_context('to_tree', 1046, 0, False)
    
    # Passed parameters checking function
    to_tree.stypy_localization = localization
    to_tree.stypy_type_of_self = None
    to_tree.stypy_type_store = module_type_store
    to_tree.stypy_function_name = 'to_tree'
    to_tree.stypy_param_names_list = ['Z', 'rd']
    to_tree.stypy_varargs_param_name = None
    to_tree.stypy_kwargs_param_name = None
    to_tree.stypy_call_defaults = defaults
    to_tree.stypy_call_varargs = varargs
    to_tree.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'to_tree', ['Z', 'rd'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'to_tree', localization, ['Z', 'rd'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'to_tree(...)' code ##################

    str_1370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1103, (-1)), 'str', '\n    Convert a linkage matrix into an easy-to-use tree object.\n\n    The reference to the root `ClusterNode` object is returned (by default).\n\n    Each `ClusterNode` object has a ``left``, ``right``, ``dist``, ``id``,\n    and ``count`` attribute. The left and right attributes point to\n    ClusterNode objects that were combined to generate the cluster.\n    If both are None then the `ClusterNode` object is a leaf node, its count\n    must be 1, and its distance is meaningless but set to 0.\n\n    *Note: This function is provided for the convenience of the library\n    user. ClusterNodes are not used as input to any of the functions in this\n    library.*\n\n    Parameters\n    ----------\n    Z : ndarray\n        The linkage matrix in proper form (see the `linkage`\n        function documentation).\n    rd : bool, optional\n        When False (default), a reference to the root `ClusterNode` object is\n        returned.  Otherwise, a tuple ``(r, d)`` is returned. ``r`` is a\n        reference to the root node while ``d`` is a list of `ClusterNode`\n        objects - one per original entry in the linkage matrix plus entries\n        for all clustering steps.  If a cluster id is\n        less than the number of samples ``n`` in the data that the linkage\n        matrix describes, then it corresponds to a singleton cluster (leaf\n        node).\n        See `linkage` for more information on the assignment of cluster ids\n        to clusters.\n\n    Returns\n    -------\n    tree : ClusterNode or tuple (ClusterNode, list of ClusterNode)\n        If ``rd`` is False, a `ClusterNode`.\n        If ``rd`` is True, a list of length ``2*n - 1``, with ``n`` the number\n        of samples.  See the description of `rd` above for more details.\n\n    See Also\n    --------\n    linkage, is_valid_linkage, ClusterNode\n\n    Examples\n    --------\n    >>> from scipy.cluster import hierarchy\n    >>> x = np.random.rand(10).reshape(5, 2)\n    >>> Z = hierarchy.linkage(x)\n    >>> hierarchy.to_tree(Z)\n    <scipy.cluster.hierarchy.ClusterNode object at ...\n    >>> rootnode, nodelist = hierarchy.to_tree(Z, rd=True)\n    >>> rootnode\n    <scipy.cluster.hierarchy.ClusterNode object at ...\n    >>> len(nodelist)\n    9\n\n    ')
    
    # Assigning a Call to a Name (line 1104):
    
    # Assigning a Call to a Name (line 1104):
    
    # Call to asarray(...): (line 1104)
    # Processing the call arguments (line 1104)
    # Getting the type of 'Z' (line 1104)
    Z_1373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 19), 'Z', False)
    # Processing the call keyword arguments (line 1104)
    str_1374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1104, 28), 'str', 'c')
    keyword_1375 = str_1374
    kwargs_1376 = {'order': keyword_1375}
    # Getting the type of 'np' (line 1104)
    np_1371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1104)
    asarray_1372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1104, 8), np_1371, 'asarray')
    # Calling asarray(args, kwargs) (line 1104)
    asarray_call_result_1377 = invoke(stypy.reporting.localization.Localization(__file__, 1104, 8), asarray_1372, *[Z_1373], **kwargs_1376)
    
    # Assigning a type to the variable 'Z' (line 1104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1104, 4), 'Z', asarray_call_result_1377)
    
    # Call to is_valid_linkage(...): (line 1105)
    # Processing the call arguments (line 1105)
    # Getting the type of 'Z' (line 1105)
    Z_1379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 21), 'Z', False)
    # Processing the call keyword arguments (line 1105)
    # Getting the type of 'True' (line 1105)
    True_1380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 30), 'True', False)
    keyword_1381 = True_1380
    str_1382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1105, 41), 'str', 'Z')
    keyword_1383 = str_1382
    kwargs_1384 = {'throw': keyword_1381, 'name': keyword_1383}
    # Getting the type of 'is_valid_linkage' (line 1105)
    is_valid_linkage_1378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 1105)
    is_valid_linkage_call_result_1385 = invoke(stypy.reporting.localization.Localization(__file__, 1105, 4), is_valid_linkage_1378, *[Z_1379], **kwargs_1384)
    
    
    # Assigning a BinOp to a Name (line 1108):
    
    # Assigning a BinOp to a Name (line 1108):
    
    # Obtaining the type of the subscript
    int_1386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1108, 16), 'int')
    # Getting the type of 'Z' (line 1108)
    Z_1387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 8), 'Z')
    # Obtaining the member 'shape' of a type (line 1108)
    shape_1388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 8), Z_1387, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1108)
    getitem___1389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 8), shape_1388, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1108)
    subscript_call_result_1390 = invoke(stypy.reporting.localization.Localization(__file__, 1108, 8), getitem___1389, int_1386)
    
    int_1391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1108, 21), 'int')
    # Applying the binary operator '+' (line 1108)
    result_add_1392 = python_operator(stypy.reporting.localization.Localization(__file__, 1108, 8), '+', subscript_call_result_1390, int_1391)
    
    # Assigning a type to the variable 'n' (line 1108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 4), 'n', result_add_1392)
    
    # Assigning a BinOp to a Name (line 1111):
    
    # Assigning a BinOp to a Name (line 1111):
    
    # Obtaining an instance of the builtin type 'list' (line 1111)
    list_1393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1111, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1111)
    # Adding element type (line 1111)
    # Getting the type of 'None' (line 1111)
    None_1394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 9), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1111, 8), list_1393, None_1394)
    
    # Getting the type of 'n' (line 1111)
    n_1395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 18), 'n')
    int_1396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1111, 22), 'int')
    # Applying the binary operator '*' (line 1111)
    result_mul_1397 = python_operator(stypy.reporting.localization.Localization(__file__, 1111, 18), '*', n_1395, int_1396)
    
    int_1398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1111, 26), 'int')
    # Applying the binary operator '-' (line 1111)
    result_sub_1399 = python_operator(stypy.reporting.localization.Localization(__file__, 1111, 18), '-', result_mul_1397, int_1398)
    
    # Applying the binary operator '*' (line 1111)
    result_mul_1400 = python_operator(stypy.reporting.localization.Localization(__file__, 1111, 8), '*', list_1393, result_sub_1399)
    
    # Assigning a type to the variable 'd' (line 1111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 4), 'd', result_mul_1400)
    
    
    # Call to xrange(...): (line 1114)
    # Processing the call arguments (line 1114)
    int_1402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 20), 'int')
    # Getting the type of 'n' (line 1114)
    n_1403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 23), 'n', False)
    # Processing the call keyword arguments (line 1114)
    kwargs_1404 = {}
    # Getting the type of 'xrange' (line 1114)
    xrange_1401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 13), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1114)
    xrange_call_result_1405 = invoke(stypy.reporting.localization.Localization(__file__, 1114, 13), xrange_1401, *[int_1402, n_1403], **kwargs_1404)
    
    # Testing the type of a for loop iterable (line 1114)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1114, 4), xrange_call_result_1405)
    # Getting the type of the for loop variable (line 1114)
    for_loop_var_1406 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1114, 4), xrange_call_result_1405)
    # Assigning a type to the variable 'i' (line 1114)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 4), 'i', for_loop_var_1406)
    # SSA begins for a for statement (line 1114)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 1115):
    
    # Assigning a Call to a Subscript (line 1115):
    
    # Call to ClusterNode(...): (line 1115)
    # Processing the call arguments (line 1115)
    # Getting the type of 'i' (line 1115)
    i_1408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 27), 'i', False)
    # Processing the call keyword arguments (line 1115)
    kwargs_1409 = {}
    # Getting the type of 'ClusterNode' (line 1115)
    ClusterNode_1407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 15), 'ClusterNode', False)
    # Calling ClusterNode(args, kwargs) (line 1115)
    ClusterNode_call_result_1410 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 15), ClusterNode_1407, *[i_1408], **kwargs_1409)
    
    # Getting the type of 'd' (line 1115)
    d_1411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'd')
    # Getting the type of 'i' (line 1115)
    i_1412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 10), 'i')
    # Storing an element on a container (line 1115)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1115, 8), d_1411, (i_1412, ClusterNode_call_result_1410))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1117):
    
    # Assigning a Name to a Name (line 1117):
    # Getting the type of 'None' (line 1117)
    None_1413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 9), 'None')
    # Assigning a type to the variable 'nd' (line 1117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1117, 4), 'nd', None_1413)
    
    
    # Call to xrange(...): (line 1119)
    # Processing the call arguments (line 1119)
    int_1415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 20), 'int')
    # Getting the type of 'n' (line 1119)
    n_1416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 23), 'n', False)
    int_1417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 27), 'int')
    # Applying the binary operator '-' (line 1119)
    result_sub_1418 = python_operator(stypy.reporting.localization.Localization(__file__, 1119, 23), '-', n_1416, int_1417)
    
    # Processing the call keyword arguments (line 1119)
    kwargs_1419 = {}
    # Getting the type of 'xrange' (line 1119)
    xrange_1414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 13), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1119)
    xrange_call_result_1420 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 13), xrange_1414, *[int_1415, result_sub_1418], **kwargs_1419)
    
    # Testing the type of a for loop iterable (line 1119)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1119, 4), xrange_call_result_1420)
    # Getting the type of the for loop variable (line 1119)
    for_loop_var_1421 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1119, 4), xrange_call_result_1420)
    # Assigning a type to the variable 'i' (line 1119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'i', for_loop_var_1421)
    # SSA begins for a for statement (line 1119)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1120):
    
    # Assigning a Call to a Name (line 1120):
    
    # Call to int(...): (line 1120)
    # Processing the call arguments (line 1120)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1120)
    tuple_1423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1120, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1120)
    # Adding element type (line 1120)
    # Getting the type of 'i' (line 1120)
    i_1424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 19), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1120, 19), tuple_1423, i_1424)
    # Adding element type (line 1120)
    int_1425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1120, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1120, 19), tuple_1423, int_1425)
    
    # Getting the type of 'Z' (line 1120)
    Z_1426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 17), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1120)
    getitem___1427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 17), Z_1426, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1120)
    subscript_call_result_1428 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 17), getitem___1427, tuple_1423)
    
    # Processing the call keyword arguments (line 1120)
    kwargs_1429 = {}
    # Getting the type of 'int' (line 1120)
    int_1422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 13), 'int', False)
    # Calling int(args, kwargs) (line 1120)
    int_call_result_1430 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 13), int_1422, *[subscript_call_result_1428], **kwargs_1429)
    
    # Assigning a type to the variable 'fi' (line 1120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 8), 'fi', int_call_result_1430)
    
    # Assigning a Call to a Name (line 1121):
    
    # Assigning a Call to a Name (line 1121):
    
    # Call to int(...): (line 1121)
    # Processing the call arguments (line 1121)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1121)
    tuple_1432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1121, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1121)
    # Adding element type (line 1121)
    # Getting the type of 'i' (line 1121)
    i_1433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 19), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1121, 19), tuple_1432, i_1433)
    # Adding element type (line 1121)
    int_1434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1121, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1121, 19), tuple_1432, int_1434)
    
    # Getting the type of 'Z' (line 1121)
    Z_1435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 17), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1121)
    getitem___1436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 17), Z_1435, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1121)
    subscript_call_result_1437 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 17), getitem___1436, tuple_1432)
    
    # Processing the call keyword arguments (line 1121)
    kwargs_1438 = {}
    # Getting the type of 'int' (line 1121)
    int_1431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 13), 'int', False)
    # Calling int(args, kwargs) (line 1121)
    int_call_result_1439 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 13), int_1431, *[subscript_call_result_1437], **kwargs_1438)
    
    # Assigning a type to the variable 'fj' (line 1121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 8), 'fj', int_call_result_1439)
    
    
    # Getting the type of 'fi' (line 1122)
    fi_1440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 11), 'fi')
    # Getting the type of 'i' (line 1122)
    i_1441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 16), 'i')
    # Getting the type of 'n' (line 1122)
    n_1442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 20), 'n')
    # Applying the binary operator '+' (line 1122)
    result_add_1443 = python_operator(stypy.reporting.localization.Localization(__file__, 1122, 16), '+', i_1441, n_1442)
    
    # Applying the binary operator '>' (line 1122)
    result_gt_1444 = python_operator(stypy.reporting.localization.Localization(__file__, 1122, 11), '>', fi_1440, result_add_1443)
    
    # Testing the type of an if condition (line 1122)
    if_condition_1445 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1122, 8), result_gt_1444)
    # Assigning a type to the variable 'if_condition_1445' (line 1122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 8), 'if_condition_1445', if_condition_1445)
    # SSA begins for if statement (line 1122)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1123)
    # Processing the call arguments (line 1123)
    str_1447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 30), 'str', 'Corrupt matrix Z. Index to derivative cluster is used before it is formed. See row %d, column 0')
    # Getting the type of 'fi' (line 1125)
    fi_1448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 44), 'fi', False)
    # Applying the binary operator '%' (line 1123)
    result_mod_1449 = python_operator(stypy.reporting.localization.Localization(__file__, 1123, 29), '%', str_1447, fi_1448)
    
    # Processing the call keyword arguments (line 1123)
    kwargs_1450 = {}
    # Getting the type of 'ValueError' (line 1123)
    ValueError_1446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1123)
    ValueError_call_result_1451 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 18), ValueError_1446, *[result_mod_1449], **kwargs_1450)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1123, 12), ValueError_call_result_1451, 'raise parameter', BaseException)
    # SSA join for if statement (line 1122)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'fj' (line 1126)
    fj_1452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 11), 'fj')
    # Getting the type of 'i' (line 1126)
    i_1453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 16), 'i')
    # Getting the type of 'n' (line 1126)
    n_1454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 20), 'n')
    # Applying the binary operator '+' (line 1126)
    result_add_1455 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 16), '+', i_1453, n_1454)
    
    # Applying the binary operator '>' (line 1126)
    result_gt_1456 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 11), '>', fj_1452, result_add_1455)
    
    # Testing the type of an if condition (line 1126)
    if_condition_1457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1126, 8), result_gt_1456)
    # Assigning a type to the variable 'if_condition_1457' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 8), 'if_condition_1457', if_condition_1457)
    # SSA begins for if statement (line 1126)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1127)
    # Processing the call arguments (line 1127)
    str_1459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 30), 'str', 'Corrupt matrix Z. Index to derivative cluster is used before it is formed. See row %d, column 1')
    # Getting the type of 'fj' (line 1129)
    fj_1460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 44), 'fj', False)
    # Applying the binary operator '%' (line 1127)
    result_mod_1461 = python_operator(stypy.reporting.localization.Localization(__file__, 1127, 29), '%', str_1459, fj_1460)
    
    # Processing the call keyword arguments (line 1127)
    kwargs_1462 = {}
    # Getting the type of 'ValueError' (line 1127)
    ValueError_1458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1127)
    ValueError_call_result_1463 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 18), ValueError_1458, *[result_mod_1461], **kwargs_1462)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1127, 12), ValueError_call_result_1463, 'raise parameter', BaseException)
    # SSA join for if statement (line 1126)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1130):
    
    # Assigning a Call to a Name (line 1130):
    
    # Call to ClusterNode(...): (line 1130)
    # Processing the call arguments (line 1130)
    # Getting the type of 'i' (line 1130)
    i_1465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 25), 'i', False)
    # Getting the type of 'n' (line 1130)
    n_1466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 29), 'n', False)
    # Applying the binary operator '+' (line 1130)
    result_add_1467 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 25), '+', i_1465, n_1466)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'fi' (line 1130)
    fi_1468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 34), 'fi', False)
    # Getting the type of 'd' (line 1130)
    d_1469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 32), 'd', False)
    # Obtaining the member '__getitem__' of a type (line 1130)
    getitem___1470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 32), d_1469, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1130)
    subscript_call_result_1471 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 32), getitem___1470, fi_1468)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'fj' (line 1130)
    fj_1472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 41), 'fj', False)
    # Getting the type of 'd' (line 1130)
    d_1473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 39), 'd', False)
    # Obtaining the member '__getitem__' of a type (line 1130)
    getitem___1474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 39), d_1473, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1130)
    subscript_call_result_1475 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 39), getitem___1474, fj_1472)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1130)
    tuple_1476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 48), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1130)
    # Adding element type (line 1130)
    # Getting the type of 'i' (line 1130)
    i_1477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 48), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1130, 48), tuple_1476, i_1477)
    # Adding element type (line 1130)
    int_1478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 51), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1130, 48), tuple_1476, int_1478)
    
    # Getting the type of 'Z' (line 1130)
    Z_1479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 46), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1130)
    getitem___1480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 46), Z_1479, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1130)
    subscript_call_result_1481 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 46), getitem___1480, tuple_1476)
    
    # Processing the call keyword arguments (line 1130)
    kwargs_1482 = {}
    # Getting the type of 'ClusterNode' (line 1130)
    ClusterNode_1464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 13), 'ClusterNode', False)
    # Calling ClusterNode(args, kwargs) (line 1130)
    ClusterNode_call_result_1483 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 13), ClusterNode_1464, *[result_add_1467, subscript_call_result_1471, subscript_call_result_1475, subscript_call_result_1481], **kwargs_1482)
    
    # Assigning a type to the variable 'nd' (line 1130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'nd', ClusterNode_call_result_1483)
    
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1132)
    tuple_1484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1132)
    # Adding element type (line 1132)
    # Getting the type of 'i' (line 1132)
    i_1485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 13), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 13), tuple_1484, i_1485)
    # Adding element type (line 1132)
    int_1486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 16), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 13), tuple_1484, int_1486)
    
    # Getting the type of 'Z' (line 1132)
    Z_1487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 11), 'Z')
    # Obtaining the member '__getitem__' of a type (line 1132)
    getitem___1488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 11), Z_1487, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1132)
    subscript_call_result_1489 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 11), getitem___1488, tuple_1484)
    
    # Getting the type of 'nd' (line 1132)
    nd_1490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 22), 'nd')
    # Obtaining the member 'count' of a type (line 1132)
    count_1491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 22), nd_1490, 'count')
    # Applying the binary operator '!=' (line 1132)
    result_ne_1492 = python_operator(stypy.reporting.localization.Localization(__file__, 1132, 11), '!=', subscript_call_result_1489, count_1491)
    
    # Testing the type of an if condition (line 1132)
    if_condition_1493 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1132, 8), result_ne_1492)
    # Assigning a type to the variable 'if_condition_1493' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'if_condition_1493', if_condition_1493)
    # SSA begins for if statement (line 1132)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1133)
    # Processing the call arguments (line 1133)
    str_1495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1133, 30), 'str', 'Corrupt matrix Z. The count Z[%d,3] is incorrect.')
    # Getting the type of 'i' (line 1134)
    i_1496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 46), 'i', False)
    # Applying the binary operator '%' (line 1133)
    result_mod_1497 = python_operator(stypy.reporting.localization.Localization(__file__, 1133, 29), '%', str_1495, i_1496)
    
    # Processing the call keyword arguments (line 1133)
    kwargs_1498 = {}
    # Getting the type of 'ValueError' (line 1133)
    ValueError_1494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1133)
    ValueError_call_result_1499 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 18), ValueError_1494, *[result_mod_1497], **kwargs_1498)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1133, 12), ValueError_call_result_1499, 'raise parameter', BaseException)
    # SSA join for if statement (line 1132)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 1135):
    
    # Assigning a Name to a Subscript (line 1135):
    # Getting the type of 'nd' (line 1135)
    nd_1500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 19), 'nd')
    # Getting the type of 'd' (line 1135)
    d_1501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 8), 'd')
    # Getting the type of 'n' (line 1135)
    n_1502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 10), 'n')
    # Getting the type of 'i' (line 1135)
    i_1503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 14), 'i')
    # Applying the binary operator '+' (line 1135)
    result_add_1504 = python_operator(stypy.reporting.localization.Localization(__file__, 1135, 10), '+', n_1502, i_1503)
    
    # Storing an element on a container (line 1135)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1135, 8), d_1501, (result_add_1504, nd_1500))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'rd' (line 1137)
    rd_1505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 7), 'rd')
    # Testing the type of an if condition (line 1137)
    if_condition_1506 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1137, 4), rd_1505)
    # Assigning a type to the variable 'if_condition_1506' (line 1137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'if_condition_1506', if_condition_1506)
    # SSA begins for if statement (line 1137)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1138)
    tuple_1507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1138, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1138)
    # Adding element type (line 1138)
    # Getting the type of 'nd' (line 1138)
    nd_1508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 16), 'nd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1138, 16), tuple_1507, nd_1508)
    # Adding element type (line 1138)
    # Getting the type of 'd' (line 1138)
    d_1509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 20), 'd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1138, 16), tuple_1507, d_1509)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'stypy_return_type', tuple_1507)
    # SSA branch for the else part of an if statement (line 1137)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'nd' (line 1140)
    nd_1510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 15), 'nd')
    # Assigning a type to the variable 'stypy_return_type' (line 1140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'stypy_return_type', nd_1510)
    # SSA join for if statement (line 1137)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'to_tree(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'to_tree' in the type store
    # Getting the type of 'stypy_return_type' (line 1046)
    stypy_return_type_1511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1511)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'to_tree'
    return stypy_return_type_1511

# Assigning a type to the variable 'to_tree' (line 1046)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 0), 'to_tree', to_tree)

@norecursion
def optimal_leaf_ordering(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_1512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 39), 'str', 'euclidean')
    defaults = [str_1512]
    # Create a new context for function 'optimal_leaf_ordering'
    module_type_store = module_type_store.open_function_context('optimal_leaf_ordering', 1143, 0, False)
    
    # Passed parameters checking function
    optimal_leaf_ordering.stypy_localization = localization
    optimal_leaf_ordering.stypy_type_of_self = None
    optimal_leaf_ordering.stypy_type_store = module_type_store
    optimal_leaf_ordering.stypy_function_name = 'optimal_leaf_ordering'
    optimal_leaf_ordering.stypy_param_names_list = ['Z', 'y', 'metric']
    optimal_leaf_ordering.stypy_varargs_param_name = None
    optimal_leaf_ordering.stypy_kwargs_param_name = None
    optimal_leaf_ordering.stypy_call_defaults = defaults
    optimal_leaf_ordering.stypy_call_varargs = varargs
    optimal_leaf_ordering.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'optimal_leaf_ordering', ['Z', 'y', 'metric'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'optimal_leaf_ordering', localization, ['Z', 'y', 'metric'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'optimal_leaf_ordering(...)' code ##################

    str_1513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1180, (-1)), 'str', '\n    Given a linkage matrix Z and distance, reorder the cut tree.\n\n    Parameters\n    ----------\n    Z : ndarray\n        The hierarchical clustering encoded as a linkage matrix. See\n        `linkage` for more information on the return structure and\n        algorithm.\n    y : ndarray\n        The condensed distance matrix from which Z was generated.\n        Alternatively, a collection of m observation vectors in n\n        dimensions may be passed as a m by n array.\n    metric : str or function, optional\n        The distance metric to use in the case that y is a collection of\n        observation vectors; ignored otherwise. See the ``pdist``\n        function for a list of valid distance metrics. A custom distance\n        function can also be used.\n    \n    Returns\n    -------\n    Z_ordered : ndarray\n        A copy of the linkage matrix Z, reordered to minimize the distance\n        between adjacent leaves.\n\n    Examples\n    --------\n    >>> from scipy.cluster import hierarchy\n    >>> np.random.seed(23)\n    >>> X = np.random.randn(10,10)\n    >>> Z = hierarchy.ward(X)\n    >>> hierarchy.leaves_list(Z)\n    array([0, 5, 3, 9, 6, 8, 1, 4, 2, 7], dtype=int32)\n    >>> hierarchy.leaves_list(hierarchy.optimal_leaf_ordering(Z, X))\n    array([3, 9, 0, 5, 8, 2, 7, 4, 1, 6], dtype=int32)\n    \n    ')
    
    # Assigning a Call to a Name (line 1181):
    
    # Assigning a Call to a Name (line 1181):
    
    # Call to asarray(...): (line 1181)
    # Processing the call arguments (line 1181)
    # Getting the type of 'Z' (line 1181)
    Z_1516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 19), 'Z', False)
    # Processing the call keyword arguments (line 1181)
    str_1517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1181, 28), 'str', 'c')
    keyword_1518 = str_1517
    kwargs_1519 = {'order': keyword_1518}
    # Getting the type of 'np' (line 1181)
    np_1514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1181)
    asarray_1515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 8), np_1514, 'asarray')
    # Calling asarray(args, kwargs) (line 1181)
    asarray_call_result_1520 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 8), asarray_1515, *[Z_1516], **kwargs_1519)
    
    # Assigning a type to the variable 'Z' (line 1181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1181, 4), 'Z', asarray_call_result_1520)
    
    # Call to is_valid_linkage(...): (line 1182)
    # Processing the call arguments (line 1182)
    # Getting the type of 'Z' (line 1182)
    Z_1522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 21), 'Z', False)
    # Processing the call keyword arguments (line 1182)
    # Getting the type of 'True' (line 1182)
    True_1523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 30), 'True', False)
    keyword_1524 = True_1523
    str_1525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 41), 'str', 'Z')
    keyword_1526 = str_1525
    kwargs_1527 = {'throw': keyword_1524, 'name': keyword_1526}
    # Getting the type of 'is_valid_linkage' (line 1182)
    is_valid_linkage_1521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 1182)
    is_valid_linkage_call_result_1528 = invoke(stypy.reporting.localization.Localization(__file__, 1182, 4), is_valid_linkage_1521, *[Z_1522], **kwargs_1527)
    
    
    # Assigning a Call to a Name (line 1184):
    
    # Assigning a Call to a Name (line 1184):
    
    # Call to _convert_to_double(...): (line 1184)
    # Processing the call arguments (line 1184)
    
    # Call to asarray(...): (line 1184)
    # Processing the call arguments (line 1184)
    # Getting the type of 'y' (line 1184)
    y_1532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 38), 'y', False)
    # Processing the call keyword arguments (line 1184)
    str_1533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1184, 47), 'str', 'c')
    keyword_1534 = str_1533
    kwargs_1535 = {'order': keyword_1534}
    # Getting the type of 'np' (line 1184)
    np_1530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 27), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1184)
    asarray_1531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 27), np_1530, 'asarray')
    # Calling asarray(args, kwargs) (line 1184)
    asarray_call_result_1536 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 27), asarray_1531, *[y_1532], **kwargs_1535)
    
    # Processing the call keyword arguments (line 1184)
    kwargs_1537 = {}
    # Getting the type of '_convert_to_double' (line 1184)
    _convert_to_double_1529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 8), '_convert_to_double', False)
    # Calling _convert_to_double(args, kwargs) (line 1184)
    _convert_to_double_call_result_1538 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 8), _convert_to_double_1529, *[asarray_call_result_1536], **kwargs_1537)
    
    # Assigning a type to the variable 'y' (line 1184)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 4), 'y', _convert_to_double_call_result_1538)
    
    
    # Getting the type of 'y' (line 1186)
    y_1539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 7), 'y')
    # Obtaining the member 'ndim' of a type (line 1186)
    ndim_1540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 7), y_1539, 'ndim')
    int_1541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 17), 'int')
    # Applying the binary operator '==' (line 1186)
    result_eq_1542 = python_operator(stypy.reporting.localization.Localization(__file__, 1186, 7), '==', ndim_1540, int_1541)
    
    # Testing the type of an if condition (line 1186)
    if_condition_1543 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1186, 4), result_eq_1542)
    # Assigning a type to the variable 'if_condition_1543' (line 1186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 4), 'if_condition_1543', if_condition_1543)
    # SSA begins for if statement (line 1186)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to is_valid_y(...): (line 1187)
    # Processing the call arguments (line 1187)
    # Getting the type of 'y' (line 1187)
    y_1546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 28), 'y', False)
    # Processing the call keyword arguments (line 1187)
    # Getting the type of 'True' (line 1187)
    True_1547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 37), 'True', False)
    keyword_1548 = True_1547
    str_1549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 48), 'str', 'y')
    keyword_1550 = str_1549
    kwargs_1551 = {'throw': keyword_1548, 'name': keyword_1550}
    # Getting the type of 'distance' (line 1187)
    distance_1544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 8), 'distance', False)
    # Obtaining the member 'is_valid_y' of a type (line 1187)
    is_valid_y_1545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 8), distance_1544, 'is_valid_y')
    # Calling is_valid_y(args, kwargs) (line 1187)
    is_valid_y_call_result_1552 = invoke(stypy.reporting.localization.Localization(__file__, 1187, 8), is_valid_y_1545, *[y_1546], **kwargs_1551)
    
    
    # Assigning a Call to a List (line 1188):
    
    # Assigning a Subscript to a Name (line 1188):
    
    # Obtaining the type of the subscript
    int_1553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 8), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 1188)
    # Processing the call arguments (line 1188)
    
    # Obtaining an instance of the builtin type 'list' (line 1188)
    list_1555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 43), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1188)
    # Adding element type (line 1188)
    # Getting the type of 'y' (line 1188)
    y_1556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 44), 'y', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1188, 43), list_1555, y_1556)
    
    # Processing the call keyword arguments (line 1188)
    kwargs_1557 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 1188)
    _copy_arrays_if_base_present_1554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 14), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 1188)
    _copy_arrays_if_base_present_call_result_1558 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 14), _copy_arrays_if_base_present_1554, *[list_1555], **kwargs_1557)
    
    # Obtaining the member '__getitem__' of a type (line 1188)
    getitem___1559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 8), _copy_arrays_if_base_present_call_result_1558, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1188)
    subscript_call_result_1560 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 8), getitem___1559, int_1553)
    
    # Assigning a type to the variable 'list_var_assignment_469' (line 1188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'list_var_assignment_469', subscript_call_result_1560)
    
    # Assigning a Name to a Name (line 1188):
    # Getting the type of 'list_var_assignment_469' (line 1188)
    list_var_assignment_469_1561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'list_var_assignment_469')
    # Assigning a type to the variable 'y' (line 1188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 9), 'y', list_var_assignment_469_1561)
    # SSA branch for the else part of an if statement (line 1186)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'y' (line 1189)
    y_1562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 9), 'y')
    # Obtaining the member 'ndim' of a type (line 1189)
    ndim_1563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 9), y_1562, 'ndim')
    int_1564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 19), 'int')
    # Applying the binary operator '==' (line 1189)
    result_eq_1565 = python_operator(stypy.reporting.localization.Localization(__file__, 1189, 9), '==', ndim_1563, int_1564)
    
    # Testing the type of an if condition (line 1189)
    if_condition_1566 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1189, 9), result_eq_1565)
    # Assigning a type to the variable 'if_condition_1566' (line 1189)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 9), 'if_condition_1566', if_condition_1566)
    # SSA begins for if statement (line 1189)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    int_1567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 19), 'int')
    # Getting the type of 'y' (line 1190)
    y_1568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 11), 'y')
    # Obtaining the member 'shape' of a type (line 1190)
    shape_1569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 11), y_1568, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1190)
    getitem___1570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 11), shape_1569, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1190)
    subscript_call_result_1571 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 11), getitem___1570, int_1567)
    
    
    # Obtaining the type of the subscript
    int_1572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 33), 'int')
    # Getting the type of 'y' (line 1190)
    y_1573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 25), 'y')
    # Obtaining the member 'shape' of a type (line 1190)
    shape_1574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 25), y_1573, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1190)
    getitem___1575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 25), shape_1574, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1190)
    subscript_call_result_1576 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 25), getitem___1575, int_1572)
    
    # Applying the binary operator '==' (line 1190)
    result_eq_1577 = python_operator(stypy.reporting.localization.Localization(__file__, 1190, 11), '==', subscript_call_result_1571, subscript_call_result_1576)
    
    
    # Call to allclose(...): (line 1190)
    # Processing the call arguments (line 1190)
    
    # Call to diag(...): (line 1190)
    # Processing the call arguments (line 1190)
    # Getting the type of 'y' (line 1190)
    y_1582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 60), 'y', False)
    # Processing the call keyword arguments (line 1190)
    kwargs_1583 = {}
    # Getting the type of 'np' (line 1190)
    np_1580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 52), 'np', False)
    # Obtaining the member 'diag' of a type (line 1190)
    diag_1581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 52), np_1580, 'diag')
    # Calling diag(args, kwargs) (line 1190)
    diag_call_result_1584 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 52), diag_1581, *[y_1582], **kwargs_1583)
    
    int_1585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 64), 'int')
    # Processing the call keyword arguments (line 1190)
    kwargs_1586 = {}
    # Getting the type of 'np' (line 1190)
    np_1578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 40), 'np', False)
    # Obtaining the member 'allclose' of a type (line 1190)
    allclose_1579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 40), np_1578, 'allclose')
    # Calling allclose(args, kwargs) (line 1190)
    allclose_call_result_1587 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 40), allclose_1579, *[diag_call_result_1584, int_1585], **kwargs_1586)
    
    # Applying the binary operator 'and' (line 1190)
    result_and_keyword_1588 = python_operator(stypy.reporting.localization.Localization(__file__, 1190, 11), 'and', result_eq_1577, allclose_call_result_1587)
    
    # Testing the type of an if condition (line 1190)
    if_condition_1589 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1190, 8), result_and_keyword_1588)
    # Assigning a type to the variable 'if_condition_1589' (line 1190)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 8), 'if_condition_1589', if_condition_1589)
    # SSA begins for if statement (line 1190)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Call to all(...): (line 1191)
    # Processing the call arguments (line 1191)
    
    # Getting the type of 'y' (line 1191)
    y_1592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 22), 'y', False)
    int_1593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 27), 'int')
    # Applying the binary operator '>=' (line 1191)
    result_ge_1594 = python_operator(stypy.reporting.localization.Localization(__file__, 1191, 22), '>=', y_1592, int_1593)
    
    # Processing the call keyword arguments (line 1191)
    kwargs_1595 = {}
    # Getting the type of 'np' (line 1191)
    np_1590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 15), 'np', False)
    # Obtaining the member 'all' of a type (line 1191)
    all_1591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 15), np_1590, 'all')
    # Calling all(args, kwargs) (line 1191)
    all_call_result_1596 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 15), all_1591, *[result_ge_1594], **kwargs_1595)
    
    
    # Call to allclose(...): (line 1191)
    # Processing the call arguments (line 1191)
    # Getting the type of 'y' (line 1191)
    y_1599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 46), 'y', False)
    # Getting the type of 'y' (line 1191)
    y_1600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 49), 'y', False)
    # Obtaining the member 'T' of a type (line 1191)
    T_1601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 49), y_1600, 'T')
    # Processing the call keyword arguments (line 1191)
    kwargs_1602 = {}
    # Getting the type of 'np' (line 1191)
    np_1597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 34), 'np', False)
    # Obtaining the member 'allclose' of a type (line 1191)
    allclose_1598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 34), np_1597, 'allclose')
    # Calling allclose(args, kwargs) (line 1191)
    allclose_call_result_1603 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 34), allclose_1598, *[y_1599, T_1601], **kwargs_1602)
    
    # Applying the binary operator 'and' (line 1191)
    result_and_keyword_1604 = python_operator(stypy.reporting.localization.Localization(__file__, 1191, 15), 'and', all_call_result_1596, allclose_call_result_1603)
    
    # Testing the type of an if condition (line 1191)
    if_condition_1605 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1191, 12), result_and_keyword_1604)
    # Assigning a type to the variable 'if_condition_1605' (line 1191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 12), 'if_condition_1605', if_condition_1605)
    # SSA begins for if statement (line 1191)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _warning(...): (line 1192)
    # Processing the call arguments (line 1192)
    str_1607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1192, 25), 'str', 'The symmetric non-negative hollow observation matrix looks suspiciously like an uncondensed distance matrix')
    # Processing the call keyword arguments (line 1192)
    kwargs_1608 = {}
    # Getting the type of '_warning' (line 1192)
    _warning_1606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 16), '_warning', False)
    # Calling _warning(args, kwargs) (line 1192)
    _warning_call_result_1609 = invoke(stypy.reporting.localization.Localization(__file__, 1192, 16), _warning_1606, *[str_1607], **kwargs_1608)
    
    # SSA join for if statement (line 1191)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1190)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1195):
    
    # Assigning a Call to a Name (line 1195):
    
    # Call to pdist(...): (line 1195)
    # Processing the call arguments (line 1195)
    # Getting the type of 'y' (line 1195)
    y_1612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 27), 'y', False)
    # Getting the type of 'metric' (line 1195)
    metric_1613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 30), 'metric', False)
    # Processing the call keyword arguments (line 1195)
    kwargs_1614 = {}
    # Getting the type of 'distance' (line 1195)
    distance_1610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 12), 'distance', False)
    # Obtaining the member 'pdist' of a type (line 1195)
    pdist_1611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 12), distance_1610, 'pdist')
    # Calling pdist(args, kwargs) (line 1195)
    pdist_call_result_1615 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 12), pdist_1611, *[y_1612, metric_1613], **kwargs_1614)
    
    # Assigning a type to the variable 'y' (line 1195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'y', pdist_call_result_1615)
    # SSA branch for the else part of an if statement (line 1189)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1197)
    # Processing the call arguments (line 1197)
    str_1617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 25), 'str', '`y` must be 1 or 2 dimensional.')
    # Processing the call keyword arguments (line 1197)
    kwargs_1618 = {}
    # Getting the type of 'ValueError' (line 1197)
    ValueError_1616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1197)
    ValueError_call_result_1619 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 14), ValueError_1616, *[str_1617], **kwargs_1618)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1197, 8), ValueError_call_result_1619, 'raise parameter', BaseException)
    # SSA join for if statement (line 1189)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1186)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to all(...): (line 1199)
    # Processing the call arguments (line 1199)
    
    # Call to isfinite(...): (line 1199)
    # Processing the call arguments (line 1199)
    # Getting the type of 'y' (line 1199)
    y_1624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 30), 'y', False)
    # Processing the call keyword arguments (line 1199)
    kwargs_1625 = {}
    # Getting the type of 'np' (line 1199)
    np_1622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 18), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 1199)
    isfinite_1623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 18), np_1622, 'isfinite')
    # Calling isfinite(args, kwargs) (line 1199)
    isfinite_call_result_1626 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 18), isfinite_1623, *[y_1624], **kwargs_1625)
    
    # Processing the call keyword arguments (line 1199)
    kwargs_1627 = {}
    # Getting the type of 'np' (line 1199)
    np_1620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 11), 'np', False)
    # Obtaining the member 'all' of a type (line 1199)
    all_1621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1199, 11), np_1620, 'all')
    # Calling all(args, kwargs) (line 1199)
    all_call_result_1628 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 11), all_1621, *[isfinite_call_result_1626], **kwargs_1627)
    
    # Applying the 'not' unary operator (line 1199)
    result_not__1629 = python_operator(stypy.reporting.localization.Localization(__file__, 1199, 7), 'not', all_call_result_1628)
    
    # Testing the type of an if condition (line 1199)
    if_condition_1630 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1199, 4), result_not__1629)
    # Assigning a type to the variable 'if_condition_1630' (line 1199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 4), 'if_condition_1630', if_condition_1630)
    # SSA begins for if statement (line 1199)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1200)
    # Processing the call arguments (line 1200)
    str_1632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 25), 'str', 'The condensed distance matrix must contain only finite values.')
    # Processing the call keyword arguments (line 1200)
    kwargs_1633 = {}
    # Getting the type of 'ValueError' (line 1200)
    ValueError_1631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1200)
    ValueError_call_result_1634 = invoke(stypy.reporting.localization.Localization(__file__, 1200, 14), ValueError_1631, *[str_1632], **kwargs_1633)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1200, 8), ValueError_call_result_1634, 'raise parameter', BaseException)
    # SSA join for if statement (line 1199)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to optimal_leaf_ordering(...): (line 1203)
    # Processing the call arguments (line 1203)
    # Getting the type of 'Z' (line 1203)
    Z_1637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 56), 'Z', False)
    # Getting the type of 'y' (line 1203)
    y_1638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 59), 'y', False)
    # Processing the call keyword arguments (line 1203)
    kwargs_1639 = {}
    # Getting the type of '_optimal_leaf_ordering' (line 1203)
    _optimal_leaf_ordering_1635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 11), '_optimal_leaf_ordering', False)
    # Obtaining the member 'optimal_leaf_ordering' of a type (line 1203)
    optimal_leaf_ordering_1636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 11), _optimal_leaf_ordering_1635, 'optimal_leaf_ordering')
    # Calling optimal_leaf_ordering(args, kwargs) (line 1203)
    optimal_leaf_ordering_call_result_1640 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 11), optimal_leaf_ordering_1636, *[Z_1637, y_1638], **kwargs_1639)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1203)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 4), 'stypy_return_type', optimal_leaf_ordering_call_result_1640)
    
    # ################# End of 'optimal_leaf_ordering(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'optimal_leaf_ordering' in the type store
    # Getting the type of 'stypy_return_type' (line 1143)
    stypy_return_type_1641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1641)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'optimal_leaf_ordering'
    return stypy_return_type_1641

# Assigning a type to the variable 'optimal_leaf_ordering' (line 1143)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 0), 'optimal_leaf_ordering', optimal_leaf_ordering)

@norecursion
def _convert_to_bool(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_convert_to_bool'
    module_type_store = module_type_store.open_function_context('_convert_to_bool', 1206, 0, False)
    
    # Passed parameters checking function
    _convert_to_bool.stypy_localization = localization
    _convert_to_bool.stypy_type_of_self = None
    _convert_to_bool.stypy_type_store = module_type_store
    _convert_to_bool.stypy_function_name = '_convert_to_bool'
    _convert_to_bool.stypy_param_names_list = ['X']
    _convert_to_bool.stypy_varargs_param_name = None
    _convert_to_bool.stypy_kwargs_param_name = None
    _convert_to_bool.stypy_call_defaults = defaults
    _convert_to_bool.stypy_call_varargs = varargs
    _convert_to_bool.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_convert_to_bool', ['X'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_convert_to_bool', localization, ['X'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_convert_to_bool(...)' code ##################

    
    
    # Getting the type of 'X' (line 1207)
    X_1642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 7), 'X')
    # Obtaining the member 'dtype' of a type (line 1207)
    dtype_1643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 7), X_1642, 'dtype')
    # Getting the type of 'bool' (line 1207)
    bool_1644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 18), 'bool')
    # Applying the binary operator '!=' (line 1207)
    result_ne_1645 = python_operator(stypy.reporting.localization.Localization(__file__, 1207, 7), '!=', dtype_1643, bool_1644)
    
    # Testing the type of an if condition (line 1207)
    if_condition_1646 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1207, 4), result_ne_1645)
    # Assigning a type to the variable 'if_condition_1646' (line 1207)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 4), 'if_condition_1646', if_condition_1646)
    # SSA begins for if statement (line 1207)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1208):
    
    # Assigning a Call to a Name (line 1208):
    
    # Call to astype(...): (line 1208)
    # Processing the call arguments (line 1208)
    # Getting the type of 'bool' (line 1208)
    bool_1649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 21), 'bool', False)
    # Processing the call keyword arguments (line 1208)
    kwargs_1650 = {}
    # Getting the type of 'X' (line 1208)
    X_1647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 12), 'X', False)
    # Obtaining the member 'astype' of a type (line 1208)
    astype_1648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 12), X_1647, 'astype')
    # Calling astype(args, kwargs) (line 1208)
    astype_call_result_1651 = invoke(stypy.reporting.localization.Localization(__file__, 1208, 12), astype_1648, *[bool_1649], **kwargs_1650)
    
    # Assigning a type to the variable 'X' (line 1208)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1208, 8), 'X', astype_call_result_1651)
    # SSA join for if statement (line 1207)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'X' (line 1209)
    X_1652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 11), 'X')
    # Obtaining the member 'flags' of a type (line 1209)
    flags_1653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1209, 11), X_1652, 'flags')
    # Obtaining the member 'contiguous' of a type (line 1209)
    contiguous_1654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1209, 11), flags_1653, 'contiguous')
    # Applying the 'not' unary operator (line 1209)
    result_not__1655 = python_operator(stypy.reporting.localization.Localization(__file__, 1209, 7), 'not', contiguous_1654)
    
    # Testing the type of an if condition (line 1209)
    if_condition_1656 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1209, 4), result_not__1655)
    # Assigning a type to the variable 'if_condition_1656' (line 1209)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 4), 'if_condition_1656', if_condition_1656)
    # SSA begins for if statement (line 1209)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1210):
    
    # Assigning a Call to a Name (line 1210):
    
    # Call to copy(...): (line 1210)
    # Processing the call keyword arguments (line 1210)
    kwargs_1659 = {}
    # Getting the type of 'X' (line 1210)
    X_1657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 12), 'X', False)
    # Obtaining the member 'copy' of a type (line 1210)
    copy_1658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 12), X_1657, 'copy')
    # Calling copy(args, kwargs) (line 1210)
    copy_call_result_1660 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 12), copy_1658, *[], **kwargs_1659)
    
    # Assigning a type to the variable 'X' (line 1210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 8), 'X', copy_call_result_1660)
    # SSA join for if statement (line 1209)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'X' (line 1211)
    X_1661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 11), 'X')
    # Assigning a type to the variable 'stypy_return_type' (line 1211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 4), 'stypy_return_type', X_1661)
    
    # ################# End of '_convert_to_bool(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_convert_to_bool' in the type store
    # Getting the type of 'stypy_return_type' (line 1206)
    stypy_return_type_1662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1662)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_convert_to_bool'
    return stypy_return_type_1662

# Assigning a type to the variable '_convert_to_bool' (line 1206)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 0), '_convert_to_bool', _convert_to_bool)

@norecursion
def _convert_to_double(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_convert_to_double'
    module_type_store = module_type_store.open_function_context('_convert_to_double', 1214, 0, False)
    
    # Passed parameters checking function
    _convert_to_double.stypy_localization = localization
    _convert_to_double.stypy_type_of_self = None
    _convert_to_double.stypy_type_store = module_type_store
    _convert_to_double.stypy_function_name = '_convert_to_double'
    _convert_to_double.stypy_param_names_list = ['X']
    _convert_to_double.stypy_varargs_param_name = None
    _convert_to_double.stypy_kwargs_param_name = None
    _convert_to_double.stypy_call_defaults = defaults
    _convert_to_double.stypy_call_varargs = varargs
    _convert_to_double.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_convert_to_double', ['X'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_convert_to_double', localization, ['X'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_convert_to_double(...)' code ##################

    
    
    # Getting the type of 'X' (line 1215)
    X_1663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 7), 'X')
    # Obtaining the member 'dtype' of a type (line 1215)
    dtype_1664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 7), X_1663, 'dtype')
    # Getting the type of 'np' (line 1215)
    np_1665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 18), 'np')
    # Obtaining the member 'double' of a type (line 1215)
    double_1666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 18), np_1665, 'double')
    # Applying the binary operator '!=' (line 1215)
    result_ne_1667 = python_operator(stypy.reporting.localization.Localization(__file__, 1215, 7), '!=', dtype_1664, double_1666)
    
    # Testing the type of an if condition (line 1215)
    if_condition_1668 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1215, 4), result_ne_1667)
    # Assigning a type to the variable 'if_condition_1668' (line 1215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 4), 'if_condition_1668', if_condition_1668)
    # SSA begins for if statement (line 1215)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1216):
    
    # Assigning a Call to a Name (line 1216):
    
    # Call to astype(...): (line 1216)
    # Processing the call arguments (line 1216)
    # Getting the type of 'np' (line 1216)
    np_1671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 21), 'np', False)
    # Obtaining the member 'double' of a type (line 1216)
    double_1672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 21), np_1671, 'double')
    # Processing the call keyword arguments (line 1216)
    kwargs_1673 = {}
    # Getting the type of 'X' (line 1216)
    X_1669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 12), 'X', False)
    # Obtaining the member 'astype' of a type (line 1216)
    astype_1670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 12), X_1669, 'astype')
    # Calling astype(args, kwargs) (line 1216)
    astype_call_result_1674 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 12), astype_1670, *[double_1672], **kwargs_1673)
    
    # Assigning a type to the variable 'X' (line 1216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1216, 8), 'X', astype_call_result_1674)
    # SSA join for if statement (line 1215)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'X' (line 1217)
    X_1675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 11), 'X')
    # Obtaining the member 'flags' of a type (line 1217)
    flags_1676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 11), X_1675, 'flags')
    # Obtaining the member 'contiguous' of a type (line 1217)
    contiguous_1677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 11), flags_1676, 'contiguous')
    # Applying the 'not' unary operator (line 1217)
    result_not__1678 = python_operator(stypy.reporting.localization.Localization(__file__, 1217, 7), 'not', contiguous_1677)
    
    # Testing the type of an if condition (line 1217)
    if_condition_1679 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1217, 4), result_not__1678)
    # Assigning a type to the variable 'if_condition_1679' (line 1217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 4), 'if_condition_1679', if_condition_1679)
    # SSA begins for if statement (line 1217)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1218):
    
    # Assigning a Call to a Name (line 1218):
    
    # Call to copy(...): (line 1218)
    # Processing the call keyword arguments (line 1218)
    kwargs_1682 = {}
    # Getting the type of 'X' (line 1218)
    X_1680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 12), 'X', False)
    # Obtaining the member 'copy' of a type (line 1218)
    copy_1681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 12), X_1680, 'copy')
    # Calling copy(args, kwargs) (line 1218)
    copy_call_result_1683 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 12), copy_1681, *[], **kwargs_1682)
    
    # Assigning a type to the variable 'X' (line 1218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 8), 'X', copy_call_result_1683)
    # SSA join for if statement (line 1217)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'X' (line 1219)
    X_1684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 11), 'X')
    # Assigning a type to the variable 'stypy_return_type' (line 1219)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1219, 4), 'stypy_return_type', X_1684)
    
    # ################# End of '_convert_to_double(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_convert_to_double' in the type store
    # Getting the type of 'stypy_return_type' (line 1214)
    stypy_return_type_1685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1685)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_convert_to_double'
    return stypy_return_type_1685

# Assigning a type to the variable '_convert_to_double' (line 1214)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 0), '_convert_to_double', _convert_to_double)

@norecursion
def cophenet(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1222)
    None_1686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 18), 'None')
    defaults = [None_1686]
    # Create a new context for function 'cophenet'
    module_type_store = module_type_store.open_function_context('cophenet', 1222, 0, False)
    
    # Passed parameters checking function
    cophenet.stypy_localization = localization
    cophenet.stypy_type_of_self = None
    cophenet.stypy_type_store = module_type_store
    cophenet.stypy_function_name = 'cophenet'
    cophenet.stypy_param_names_list = ['Z', 'Y']
    cophenet.stypy_varargs_param_name = None
    cophenet.stypy_kwargs_param_name = None
    cophenet.stypy_call_defaults = defaults
    cophenet.stypy_call_varargs = varargs
    cophenet.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cophenet', ['Z', 'Y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cophenet', localization, ['Z', 'Y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cophenet(...)' code ##################

    str_1687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, (-1)), 'str', '\n    Calculate the cophenetic distances between each observation in\n    the hierarchical clustering defined by the linkage ``Z``.\n\n    Suppose ``p`` and ``q`` are original observations in\n    disjoint clusters ``s`` and ``t``, respectively and\n    ``s`` and ``t`` are joined by a direct parent cluster\n    ``u``. The cophenetic distance between observations\n    ``i`` and ``j`` is simply the distance between\n    clusters ``s`` and ``t``.\n\n    Parameters\n    ----------\n    Z : ndarray\n        The hierarchical clustering encoded as an array\n        (see `linkage` function).\n    Y : ndarray (optional)\n        Calculates the cophenetic correlation coefficient ``c`` of a\n        hierarchical clustering defined by the linkage matrix `Z`\n        of a set of :math:`n` observations in :math:`m`\n        dimensions. `Y` is the condensed distance matrix from which\n        `Z` was generated.\n\n    Returns\n    -------\n    c : ndarray\n        The cophentic correlation distance (if ``Y`` is passed).\n    d : ndarray\n        The cophenetic distance matrix in condensed form. The\n        :math:`ij` th entry is the cophenetic distance between\n        original observations :math:`i` and :math:`j`.\n\n    ')
    
    # Assigning a Call to a Name (line 1256):
    
    # Assigning a Call to a Name (line 1256):
    
    # Call to asarray(...): (line 1256)
    # Processing the call arguments (line 1256)
    # Getting the type of 'Z' (line 1256)
    Z_1690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 19), 'Z', False)
    # Processing the call keyword arguments (line 1256)
    str_1691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1256, 28), 'str', 'c')
    keyword_1692 = str_1691
    kwargs_1693 = {'order': keyword_1692}
    # Getting the type of 'np' (line 1256)
    np_1688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1256)
    asarray_1689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 8), np_1688, 'asarray')
    # Calling asarray(args, kwargs) (line 1256)
    asarray_call_result_1694 = invoke(stypy.reporting.localization.Localization(__file__, 1256, 8), asarray_1689, *[Z_1690], **kwargs_1693)
    
    # Assigning a type to the variable 'Z' (line 1256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 4), 'Z', asarray_call_result_1694)
    
    # Call to is_valid_linkage(...): (line 1257)
    # Processing the call arguments (line 1257)
    # Getting the type of 'Z' (line 1257)
    Z_1696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 21), 'Z', False)
    # Processing the call keyword arguments (line 1257)
    # Getting the type of 'True' (line 1257)
    True_1697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 30), 'True', False)
    keyword_1698 = True_1697
    str_1699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1257, 41), 'str', 'Z')
    keyword_1700 = str_1699
    kwargs_1701 = {'throw': keyword_1698, 'name': keyword_1700}
    # Getting the type of 'is_valid_linkage' (line 1257)
    is_valid_linkage_1695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 1257)
    is_valid_linkage_call_result_1702 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 4), is_valid_linkage_1695, *[Z_1696], **kwargs_1701)
    
    
    # Assigning a Attribute to a Name (line 1258):
    
    # Assigning a Attribute to a Name (line 1258):
    # Getting the type of 'Z' (line 1258)
    Z_1703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 9), 'Z')
    # Obtaining the member 'shape' of a type (line 1258)
    shape_1704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1258, 9), Z_1703, 'shape')
    # Assigning a type to the variable 'Zs' (line 1258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 4), 'Zs', shape_1704)
    
    # Assigning a BinOp to a Name (line 1259):
    
    # Assigning a BinOp to a Name (line 1259):
    
    # Obtaining the type of the subscript
    int_1705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1259, 11), 'int')
    # Getting the type of 'Zs' (line 1259)
    Zs_1706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 8), 'Zs')
    # Obtaining the member '__getitem__' of a type (line 1259)
    getitem___1707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1259, 8), Zs_1706, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1259)
    subscript_call_result_1708 = invoke(stypy.reporting.localization.Localization(__file__, 1259, 8), getitem___1707, int_1705)
    
    int_1709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1259, 16), 'int')
    # Applying the binary operator '+' (line 1259)
    result_add_1710 = python_operator(stypy.reporting.localization.Localization(__file__, 1259, 8), '+', subscript_call_result_1708, int_1709)
    
    # Assigning a type to the variable 'n' (line 1259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 4), 'n', result_add_1710)
    
    # Assigning a Call to a Name (line 1261):
    
    # Assigning a Call to a Name (line 1261):
    
    # Call to zeros(...): (line 1261)
    # Processing the call arguments (line 1261)
    # Getting the type of 'n' (line 1261)
    n_1713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 19), 'n', False)
    # Getting the type of 'n' (line 1261)
    n_1714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 24), 'n', False)
    int_1715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 26), 'int')
    # Applying the binary operator '-' (line 1261)
    result_sub_1716 = python_operator(stypy.reporting.localization.Localization(__file__, 1261, 24), '-', n_1714, int_1715)
    
    # Applying the binary operator '*' (line 1261)
    result_mul_1717 = python_operator(stypy.reporting.localization.Localization(__file__, 1261, 19), '*', n_1713, result_sub_1716)
    
    int_1718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 33), 'int')
    # Applying the binary operator '//' (line 1261)
    result_floordiv_1719 = python_operator(stypy.reporting.localization.Localization(__file__, 1261, 18), '//', result_mul_1717, int_1718)
    
    # Processing the call keyword arguments (line 1261)
    # Getting the type of 'np' (line 1261)
    np_1720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 42), 'np', False)
    # Obtaining the member 'double' of a type (line 1261)
    double_1721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 42), np_1720, 'double')
    keyword_1722 = double_1721
    kwargs_1723 = {'dtype': keyword_1722}
    # Getting the type of 'np' (line 1261)
    np_1711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 9), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1261)
    zeros_1712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 9), np_1711, 'zeros')
    # Calling zeros(args, kwargs) (line 1261)
    zeros_call_result_1724 = invoke(stypy.reporting.localization.Localization(__file__, 1261, 9), zeros_1712, *[result_floordiv_1719], **kwargs_1723)
    
    # Assigning a type to the variable 'zz' (line 1261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1261, 4), 'zz', zeros_call_result_1724)
    
    # Assigning a Call to a Name (line 1264):
    
    # Assigning a Call to a Name (line 1264):
    
    # Call to _convert_to_double(...): (line 1264)
    # Processing the call arguments (line 1264)
    # Getting the type of 'Z' (line 1264)
    Z_1726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 27), 'Z', False)
    # Processing the call keyword arguments (line 1264)
    kwargs_1727 = {}
    # Getting the type of '_convert_to_double' (line 1264)
    _convert_to_double_1725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 8), '_convert_to_double', False)
    # Calling _convert_to_double(args, kwargs) (line 1264)
    _convert_to_double_call_result_1728 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 8), _convert_to_double_1725, *[Z_1726], **kwargs_1727)
    
    # Assigning a type to the variable 'Z' (line 1264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 4), 'Z', _convert_to_double_call_result_1728)
    
    # Call to cophenetic_distances(...): (line 1266)
    # Processing the call arguments (line 1266)
    # Getting the type of 'Z' (line 1266)
    Z_1731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 36), 'Z', False)
    # Getting the type of 'zz' (line 1266)
    zz_1732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 39), 'zz', False)
    
    # Call to int(...): (line 1266)
    # Processing the call arguments (line 1266)
    # Getting the type of 'n' (line 1266)
    n_1734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 47), 'n', False)
    # Processing the call keyword arguments (line 1266)
    kwargs_1735 = {}
    # Getting the type of 'int' (line 1266)
    int_1733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 43), 'int', False)
    # Calling int(args, kwargs) (line 1266)
    int_call_result_1736 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 43), int_1733, *[n_1734], **kwargs_1735)
    
    # Processing the call keyword arguments (line 1266)
    kwargs_1737 = {}
    # Getting the type of '_hierarchy' (line 1266)
    _hierarchy_1729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 4), '_hierarchy', False)
    # Obtaining the member 'cophenetic_distances' of a type (line 1266)
    cophenetic_distances_1730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 4), _hierarchy_1729, 'cophenetic_distances')
    # Calling cophenetic_distances(args, kwargs) (line 1266)
    cophenetic_distances_call_result_1738 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 4), cophenetic_distances_1730, *[Z_1731, zz_1732, int_call_result_1736], **kwargs_1737)
    
    
    # Type idiom detected: calculating its left and rigth part (line 1267)
    # Getting the type of 'Y' (line 1267)
    Y_1739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 7), 'Y')
    # Getting the type of 'None' (line 1267)
    None_1740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 12), 'None')
    
    (may_be_1741, more_types_in_union_1742) = may_be_none(Y_1739, None_1740)

    if may_be_1741:

        if more_types_in_union_1742:
            # Runtime conditional SSA (line 1267)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 'zz' (line 1268)
        zz_1743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 15), 'zz')
        # Assigning a type to the variable 'stypy_return_type' (line 1268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1268, 8), 'stypy_return_type', zz_1743)

        if more_types_in_union_1742:
            # SSA join for if statement (line 1267)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1270):
    
    # Assigning a Call to a Name (line 1270):
    
    # Call to asarray(...): (line 1270)
    # Processing the call arguments (line 1270)
    # Getting the type of 'Y' (line 1270)
    Y_1746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 19), 'Y', False)
    # Processing the call keyword arguments (line 1270)
    str_1747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, 28), 'str', 'c')
    keyword_1748 = str_1747
    kwargs_1749 = {'order': keyword_1748}
    # Getting the type of 'np' (line 1270)
    np_1744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1270)
    asarray_1745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1270, 8), np_1744, 'asarray')
    # Calling asarray(args, kwargs) (line 1270)
    asarray_call_result_1750 = invoke(stypy.reporting.localization.Localization(__file__, 1270, 8), asarray_1745, *[Y_1746], **kwargs_1749)
    
    # Assigning a type to the variable 'Y' (line 1270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 4), 'Y', asarray_call_result_1750)
    
    # Call to is_valid_y(...): (line 1271)
    # Processing the call arguments (line 1271)
    # Getting the type of 'Y' (line 1271)
    Y_1753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 24), 'Y', False)
    # Processing the call keyword arguments (line 1271)
    # Getting the type of 'True' (line 1271)
    True_1754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 33), 'True', False)
    keyword_1755 = True_1754
    str_1756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1271, 44), 'str', 'Y')
    keyword_1757 = str_1756
    kwargs_1758 = {'throw': keyword_1755, 'name': keyword_1757}
    # Getting the type of 'distance' (line 1271)
    distance_1751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 4), 'distance', False)
    # Obtaining the member 'is_valid_y' of a type (line 1271)
    is_valid_y_1752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 4), distance_1751, 'is_valid_y')
    # Calling is_valid_y(args, kwargs) (line 1271)
    is_valid_y_call_result_1759 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 4), is_valid_y_1752, *[Y_1753], **kwargs_1758)
    
    
    # Assigning a Call to a Name (line 1273):
    
    # Assigning a Call to a Name (line 1273):
    
    # Call to mean(...): (line 1273)
    # Processing the call keyword arguments (line 1273)
    kwargs_1762 = {}
    # Getting the type of 'zz' (line 1273)
    zz_1760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 8), 'zz', False)
    # Obtaining the member 'mean' of a type (line 1273)
    mean_1761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 8), zz_1760, 'mean')
    # Calling mean(args, kwargs) (line 1273)
    mean_call_result_1763 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 8), mean_1761, *[], **kwargs_1762)
    
    # Assigning a type to the variable 'z' (line 1273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 4), 'z', mean_call_result_1763)
    
    # Assigning a Call to a Name (line 1274):
    
    # Assigning a Call to a Name (line 1274):
    
    # Call to mean(...): (line 1274)
    # Processing the call keyword arguments (line 1274)
    kwargs_1766 = {}
    # Getting the type of 'Y' (line 1274)
    Y_1764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 8), 'Y', False)
    # Obtaining the member 'mean' of a type (line 1274)
    mean_1765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1274, 8), Y_1764, 'mean')
    # Calling mean(args, kwargs) (line 1274)
    mean_call_result_1767 = invoke(stypy.reporting.localization.Localization(__file__, 1274, 8), mean_1765, *[], **kwargs_1766)
    
    # Assigning a type to the variable 'y' (line 1274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1274, 4), 'y', mean_call_result_1767)
    
    # Assigning a BinOp to a Name (line 1275):
    
    # Assigning a BinOp to a Name (line 1275):
    # Getting the type of 'Y' (line 1275)
    Y_1768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 9), 'Y')
    # Getting the type of 'y' (line 1275)
    y_1769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 13), 'y')
    # Applying the binary operator '-' (line 1275)
    result_sub_1770 = python_operator(stypy.reporting.localization.Localization(__file__, 1275, 9), '-', Y_1768, y_1769)
    
    # Assigning a type to the variable 'Yy' (line 1275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 4), 'Yy', result_sub_1770)
    
    # Assigning a BinOp to a Name (line 1276):
    
    # Assigning a BinOp to a Name (line 1276):
    # Getting the type of 'zz' (line 1276)
    zz_1771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 9), 'zz')
    # Getting the type of 'z' (line 1276)
    z_1772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 14), 'z')
    # Applying the binary operator '-' (line 1276)
    result_sub_1773 = python_operator(stypy.reporting.localization.Localization(__file__, 1276, 9), '-', zz_1771, z_1772)
    
    # Assigning a type to the variable 'Zz' (line 1276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 4), 'Zz', result_sub_1773)
    
    # Assigning a BinOp to a Name (line 1277):
    
    # Assigning a BinOp to a Name (line 1277):
    # Getting the type of 'Yy' (line 1277)
    Yy_1774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 17), 'Yy')
    # Getting the type of 'Zz' (line 1277)
    Zz_1775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 22), 'Zz')
    # Applying the binary operator '*' (line 1277)
    result_mul_1776 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 17), '*', Yy_1774, Zz_1775)
    
    # Assigning a type to the variable 'numerator' (line 1277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 4), 'numerator', result_mul_1776)
    
    # Assigning a BinOp to a Name (line 1278):
    
    # Assigning a BinOp to a Name (line 1278):
    # Getting the type of 'Yy' (line 1278)
    Yy_1777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 13), 'Yy')
    int_1778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1278, 17), 'int')
    # Applying the binary operator '**' (line 1278)
    result_pow_1779 = python_operator(stypy.reporting.localization.Localization(__file__, 1278, 13), '**', Yy_1777, int_1778)
    
    # Assigning a type to the variable 'denomA' (line 1278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1278, 4), 'denomA', result_pow_1779)
    
    # Assigning a BinOp to a Name (line 1279):
    
    # Assigning a BinOp to a Name (line 1279):
    # Getting the type of 'Zz' (line 1279)
    Zz_1780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 13), 'Zz')
    int_1781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1279, 17), 'int')
    # Applying the binary operator '**' (line 1279)
    result_pow_1782 = python_operator(stypy.reporting.localization.Localization(__file__, 1279, 13), '**', Zz_1780, int_1781)
    
    # Assigning a type to the variable 'denomB' (line 1279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 4), 'denomB', result_pow_1782)
    
    # Assigning a BinOp to a Name (line 1280):
    
    # Assigning a BinOp to a Name (line 1280):
    
    # Call to sum(...): (line 1280)
    # Processing the call keyword arguments (line 1280)
    kwargs_1785 = {}
    # Getting the type of 'numerator' (line 1280)
    numerator_1783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 8), 'numerator', False)
    # Obtaining the member 'sum' of a type (line 1280)
    sum_1784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 8), numerator_1783, 'sum')
    # Calling sum(args, kwargs) (line 1280)
    sum_call_result_1786 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 8), sum_1784, *[], **kwargs_1785)
    
    
    # Call to sqrt(...): (line 1280)
    # Processing the call arguments (line 1280)
    
    # Call to sum(...): (line 1280)
    # Processing the call keyword arguments (line 1280)
    kwargs_1791 = {}
    # Getting the type of 'denomA' (line 1280)
    denomA_1789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 35), 'denomA', False)
    # Obtaining the member 'sum' of a type (line 1280)
    sum_1790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 35), denomA_1789, 'sum')
    # Calling sum(args, kwargs) (line 1280)
    sum_call_result_1792 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 35), sum_1790, *[], **kwargs_1791)
    
    
    # Call to sum(...): (line 1280)
    # Processing the call keyword arguments (line 1280)
    kwargs_1795 = {}
    # Getting the type of 'denomB' (line 1280)
    denomB_1793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 50), 'denomB', False)
    # Obtaining the member 'sum' of a type (line 1280)
    sum_1794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 50), denomB_1793, 'sum')
    # Calling sum(args, kwargs) (line 1280)
    sum_call_result_1796 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 50), sum_1794, *[], **kwargs_1795)
    
    # Applying the binary operator '*' (line 1280)
    result_mul_1797 = python_operator(stypy.reporting.localization.Localization(__file__, 1280, 35), '*', sum_call_result_1792, sum_call_result_1796)
    
    # Processing the call keyword arguments (line 1280)
    kwargs_1798 = {}
    # Getting the type of 'np' (line 1280)
    np_1787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 26), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 1280)
    sqrt_1788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 26), np_1787, 'sqrt')
    # Calling sqrt(args, kwargs) (line 1280)
    sqrt_call_result_1799 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 26), sqrt_1788, *[result_mul_1797], **kwargs_1798)
    
    # Applying the binary operator 'div' (line 1280)
    result_div_1800 = python_operator(stypy.reporting.localization.Localization(__file__, 1280, 8), 'div', sum_call_result_1786, sqrt_call_result_1799)
    
    # Assigning a type to the variable 'c' (line 1280)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 4), 'c', result_div_1800)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1281)
    tuple_1801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1281, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1281)
    # Adding element type (line 1281)
    # Getting the type of 'c' (line 1281)
    c_1802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 12), 'c')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1281, 12), tuple_1801, c_1802)
    # Adding element type (line 1281)
    # Getting the type of 'zz' (line 1281)
    zz_1803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 15), 'zz')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1281, 12), tuple_1801, zz_1803)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 4), 'stypy_return_type', tuple_1801)
    
    # ################# End of 'cophenet(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cophenet' in the type store
    # Getting the type of 'stypy_return_type' (line 1222)
    stypy_return_type_1804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1804)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cophenet'
    return stypy_return_type_1804

# Assigning a type to the variable 'cophenet' (line 1222)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 0), 'cophenet', cophenet)

@norecursion
def inconsistent(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_1805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 22), 'int')
    defaults = [int_1805]
    # Create a new context for function 'inconsistent'
    module_type_store = module_type_store.open_function_context('inconsistent', 1284, 0, False)
    
    # Passed parameters checking function
    inconsistent.stypy_localization = localization
    inconsistent.stypy_type_of_self = None
    inconsistent.stypy_type_store = module_type_store
    inconsistent.stypy_function_name = 'inconsistent'
    inconsistent.stypy_param_names_list = ['Z', 'd']
    inconsistent.stypy_varargs_param_name = None
    inconsistent.stypy_kwargs_param_name = None
    inconsistent.stypy_call_defaults = defaults
    inconsistent.stypy_call_varargs = varargs
    inconsistent.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'inconsistent', ['Z', 'd'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'inconsistent', localization, ['Z', 'd'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'inconsistent(...)' code ##################

    str_1806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1338, (-1)), 'str', "\n    Calculate inconsistency statistics on a linkage matrix.\n\n    Parameters\n    ----------\n    Z : ndarray\n        The :math:`(n-1)` by 4 matrix encoding the linkage (hierarchical\n        clustering).  See `linkage` documentation for more information on its\n        form.\n    d : int, optional\n        The number of links up to `d` levels below each non-singleton cluster.\n\n    Returns\n    -------\n    R : ndarray\n        A :math:`(n-1)` by 5 matrix where the ``i``'th row contains the link\n        statistics for the non-singleton cluster ``i``. The link statistics are\n        computed over the link heights for links :math:`d` levels below the\n        cluster ``i``. ``R[i,0]`` and ``R[i,1]`` are the mean and standard\n        deviation of the link heights, respectively; ``R[i,2]`` is the number\n        of links included in the calculation; and ``R[i,3]`` is the\n        inconsistency coefficient,\n\n        .. math:: \\frac{\\mathtt{Z[i,2]} - \\mathtt{R[i,0]}} {R[i,1]}\n\n    Notes\n    -----\n    This function behaves similarly to the MATLAB(TM) ``inconsistent``\n    function.\n\n    Examples\n    --------\n    >>> from scipy.cluster.hierarchy import inconsistent, linkage\n    >>> from matplotlib import pyplot as plt\n    >>> X = [[i] for i in [2, 8, 0, 4, 1, 9, 9, 0]]\n    >>> Z = linkage(X, 'ward')\n    >>> print(Z)\n    [[  5.           6.           0.           2.        ]\n     [  2.           7.           0.           2.        ]\n     [  0.           4.           1.           2.        ]\n     [  1.           8.           1.15470054   3.        ]\n     [  9.          10.           2.12132034   4.        ]\n     [  3.          12.           4.11096096   5.        ]\n     [ 11.          13.          14.07183949   8.        ]]\n    >>> inconsistent(Z)\n    array([[ 0.        ,  0.        ,  1.        ,  0.        ],\n           [ 0.        ,  0.        ,  1.        ,  0.        ],\n           [ 1.        ,  0.        ,  1.        ,  0.        ],\n           [ 0.57735027,  0.81649658,  2.        ,  0.70710678],\n           [ 1.04044011,  1.06123822,  3.        ,  1.01850858],\n           [ 3.11614065,  1.40688837,  2.        ,  0.70710678],\n           [ 6.44583366,  6.76770586,  3.        ,  1.12682288]])\n\n    ")
    
    # Assigning a Call to a Name (line 1339):
    
    # Assigning a Call to a Name (line 1339):
    
    # Call to asarray(...): (line 1339)
    # Processing the call arguments (line 1339)
    # Getting the type of 'Z' (line 1339)
    Z_1809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 19), 'Z', False)
    # Processing the call keyword arguments (line 1339)
    str_1810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1339, 28), 'str', 'c')
    keyword_1811 = str_1810
    kwargs_1812 = {'order': keyword_1811}
    # Getting the type of 'np' (line 1339)
    np_1807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1339)
    asarray_1808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1339, 8), np_1807, 'asarray')
    # Calling asarray(args, kwargs) (line 1339)
    asarray_call_result_1813 = invoke(stypy.reporting.localization.Localization(__file__, 1339, 8), asarray_1808, *[Z_1809], **kwargs_1812)
    
    # Assigning a type to the variable 'Z' (line 1339)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 4), 'Z', asarray_call_result_1813)
    
    # Assigning a Attribute to a Name (line 1341):
    
    # Assigning a Attribute to a Name (line 1341):
    # Getting the type of 'Z' (line 1341)
    Z_1814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1341, 9), 'Z')
    # Obtaining the member 'shape' of a type (line 1341)
    shape_1815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1341, 9), Z_1814, 'shape')
    # Assigning a type to the variable 'Zs' (line 1341)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'Zs', shape_1815)
    
    # Call to is_valid_linkage(...): (line 1342)
    # Processing the call arguments (line 1342)
    # Getting the type of 'Z' (line 1342)
    Z_1817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 21), 'Z', False)
    # Processing the call keyword arguments (line 1342)
    # Getting the type of 'True' (line 1342)
    True_1818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 30), 'True', False)
    keyword_1819 = True_1818
    str_1820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1342, 41), 'str', 'Z')
    keyword_1821 = str_1820
    kwargs_1822 = {'throw': keyword_1819, 'name': keyword_1821}
    # Getting the type of 'is_valid_linkage' (line 1342)
    is_valid_linkage_1816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 1342)
    is_valid_linkage_call_result_1823 = invoke(stypy.reporting.localization.Localization(__file__, 1342, 4), is_valid_linkage_1816, *[Z_1817], **kwargs_1822)
    
    
    
    # Evaluating a boolean operation
    
    
    # Getting the type of 'd' (line 1343)
    d_1824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 12), 'd')
    
    # Call to floor(...): (line 1343)
    # Processing the call arguments (line 1343)
    # Getting the type of 'd' (line 1343)
    d_1827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 26), 'd', False)
    # Processing the call keyword arguments (line 1343)
    kwargs_1828 = {}
    # Getting the type of 'np' (line 1343)
    np_1825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 17), 'np', False)
    # Obtaining the member 'floor' of a type (line 1343)
    floor_1826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 17), np_1825, 'floor')
    # Calling floor(args, kwargs) (line 1343)
    floor_call_result_1829 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 17), floor_1826, *[d_1827], **kwargs_1828)
    
    # Applying the binary operator '==' (line 1343)
    result_eq_1830 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 12), '==', d_1824, floor_call_result_1829)
    
    # Applying the 'not' unary operator (line 1343)
    result_not__1831 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 8), 'not', result_eq_1830)
    
    
    # Getting the type of 'd' (line 1343)
    d_1832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 33), 'd')
    int_1833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 37), 'int')
    # Applying the binary operator '<' (line 1343)
    result_lt_1834 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 33), '<', d_1832, int_1833)
    
    # Applying the binary operator 'or' (line 1343)
    result_or_keyword_1835 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 7), 'or', result_not__1831, result_lt_1834)
    
    # Testing the type of an if condition (line 1343)
    if_condition_1836 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1343, 4), result_or_keyword_1835)
    # Assigning a type to the variable 'if_condition_1836' (line 1343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'if_condition_1836', if_condition_1836)
    # SSA begins for if statement (line 1343)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1344)
    # Processing the call arguments (line 1344)
    str_1838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1344, 25), 'str', 'The second argument d must be a nonnegative integer value.')
    # Processing the call keyword arguments (line 1344)
    kwargs_1839 = {}
    # Getting the type of 'ValueError' (line 1344)
    ValueError_1837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1344)
    ValueError_call_result_1840 = invoke(stypy.reporting.localization.Localization(__file__, 1344, 14), ValueError_1837, *[str_1838], **kwargs_1839)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1344, 8), ValueError_call_result_1840, 'raise parameter', BaseException)
    # SSA join for if statement (line 1343)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a List (line 1349):
    
    # Assigning a Subscript to a Name (line 1349):
    
    # Obtaining the type of the subscript
    int_1841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1349, 4), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 1349)
    # Processing the call arguments (line 1349)
    
    # Obtaining an instance of the builtin type 'list' (line 1349)
    list_1843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1349, 39), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1349)
    # Adding element type (line 1349)
    # Getting the type of 'Z' (line 1349)
    Z_1844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 40), 'Z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1349, 39), list_1843, Z_1844)
    
    # Processing the call keyword arguments (line 1349)
    kwargs_1845 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 1349)
    _copy_arrays_if_base_present_1842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 10), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 1349)
    _copy_arrays_if_base_present_call_result_1846 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 10), _copy_arrays_if_base_present_1842, *[list_1843], **kwargs_1845)
    
    # Obtaining the member '__getitem__' of a type (line 1349)
    getitem___1847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 4), _copy_arrays_if_base_present_call_result_1846, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1349)
    subscript_call_result_1848 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 4), getitem___1847, int_1841)
    
    # Assigning a type to the variable 'list_var_assignment_470' (line 1349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 4), 'list_var_assignment_470', subscript_call_result_1848)
    
    # Assigning a Name to a Name (line 1349):
    # Getting the type of 'list_var_assignment_470' (line 1349)
    list_var_assignment_470_1849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 4), 'list_var_assignment_470')
    # Assigning a type to the variable 'Z' (line 1349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 5), 'Z', list_var_assignment_470_1849)
    
    # Assigning a BinOp to a Name (line 1351):
    
    # Assigning a BinOp to a Name (line 1351):
    
    # Obtaining the type of the subscript
    int_1850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, 11), 'int')
    # Getting the type of 'Zs' (line 1351)
    Zs_1851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 8), 'Zs')
    # Obtaining the member '__getitem__' of a type (line 1351)
    getitem___1852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 8), Zs_1851, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1351)
    subscript_call_result_1853 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 8), getitem___1852, int_1850)
    
    int_1854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1351, 16), 'int')
    # Applying the binary operator '+' (line 1351)
    result_add_1855 = python_operator(stypy.reporting.localization.Localization(__file__, 1351, 8), '+', subscript_call_result_1853, int_1854)
    
    # Assigning a type to the variable 'n' (line 1351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 4), 'n', result_add_1855)
    
    # Assigning a Call to a Name (line 1352):
    
    # Assigning a Call to a Name (line 1352):
    
    # Call to zeros(...): (line 1352)
    # Processing the call arguments (line 1352)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1352)
    tuple_1858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1352, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1352)
    # Adding element type (line 1352)
    # Getting the type of 'n' (line 1352)
    n_1859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 18), 'n', False)
    int_1860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1352, 22), 'int')
    # Applying the binary operator '-' (line 1352)
    result_sub_1861 = python_operator(stypy.reporting.localization.Localization(__file__, 1352, 18), '-', n_1859, int_1860)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1352, 18), tuple_1858, result_sub_1861)
    # Adding element type (line 1352)
    int_1862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1352, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1352, 18), tuple_1858, int_1862)
    
    # Processing the call keyword arguments (line 1352)
    # Getting the type of 'np' (line 1352)
    np_1863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 35), 'np', False)
    # Obtaining the member 'double' of a type (line 1352)
    double_1864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 35), np_1863, 'double')
    keyword_1865 = double_1864
    kwargs_1866 = {'dtype': keyword_1865}
    # Getting the type of 'np' (line 1352)
    np_1856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 8), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1352)
    zeros_1857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 8), np_1856, 'zeros')
    # Calling zeros(args, kwargs) (line 1352)
    zeros_call_result_1867 = invoke(stypy.reporting.localization.Localization(__file__, 1352, 8), zeros_1857, *[tuple_1858], **kwargs_1866)
    
    # Assigning a type to the variable 'R' (line 1352)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1352, 4), 'R', zeros_call_result_1867)
    
    # Call to inconsistent(...): (line 1354)
    # Processing the call arguments (line 1354)
    # Getting the type of 'Z' (line 1354)
    Z_1870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 28), 'Z', False)
    # Getting the type of 'R' (line 1354)
    R_1871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 31), 'R', False)
    
    # Call to int(...): (line 1354)
    # Processing the call arguments (line 1354)
    # Getting the type of 'n' (line 1354)
    n_1873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 38), 'n', False)
    # Processing the call keyword arguments (line 1354)
    kwargs_1874 = {}
    # Getting the type of 'int' (line 1354)
    int_1872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 34), 'int', False)
    # Calling int(args, kwargs) (line 1354)
    int_call_result_1875 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 34), int_1872, *[n_1873], **kwargs_1874)
    
    
    # Call to int(...): (line 1354)
    # Processing the call arguments (line 1354)
    # Getting the type of 'd' (line 1354)
    d_1877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 46), 'd', False)
    # Processing the call keyword arguments (line 1354)
    kwargs_1878 = {}
    # Getting the type of 'int' (line 1354)
    int_1876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 42), 'int', False)
    # Calling int(args, kwargs) (line 1354)
    int_call_result_1879 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 42), int_1876, *[d_1877], **kwargs_1878)
    
    # Processing the call keyword arguments (line 1354)
    kwargs_1880 = {}
    # Getting the type of '_hierarchy' (line 1354)
    _hierarchy_1868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 4), '_hierarchy', False)
    # Obtaining the member 'inconsistent' of a type (line 1354)
    inconsistent_1869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 4), _hierarchy_1868, 'inconsistent')
    # Calling inconsistent(args, kwargs) (line 1354)
    inconsistent_call_result_1881 = invoke(stypy.reporting.localization.Localization(__file__, 1354, 4), inconsistent_1869, *[Z_1870, R_1871, int_call_result_1875, int_call_result_1879], **kwargs_1880)
    
    # Getting the type of 'R' (line 1355)
    R_1882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 11), 'R')
    # Assigning a type to the variable 'stypy_return_type' (line 1355)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1355, 4), 'stypy_return_type', R_1882)
    
    # ################# End of 'inconsistent(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'inconsistent' in the type store
    # Getting the type of 'stypy_return_type' (line 1284)
    stypy_return_type_1883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_1883)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'inconsistent'
    return stypy_return_type_1883

# Assigning a type to the variable 'inconsistent' (line 1284)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1284, 0), 'inconsistent', inconsistent)

@norecursion
def from_mlab_linkage(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'from_mlab_linkage'
    module_type_store = module_type_store.open_function_context('from_mlab_linkage', 1358, 0, False)
    
    # Passed parameters checking function
    from_mlab_linkage.stypy_localization = localization
    from_mlab_linkage.stypy_type_of_self = None
    from_mlab_linkage.stypy_type_store = module_type_store
    from_mlab_linkage.stypy_function_name = 'from_mlab_linkage'
    from_mlab_linkage.stypy_param_names_list = ['Z']
    from_mlab_linkage.stypy_varargs_param_name = None
    from_mlab_linkage.stypy_kwargs_param_name = None
    from_mlab_linkage.stypy_call_defaults = defaults
    from_mlab_linkage.stypy_call_varargs = varargs
    from_mlab_linkage.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'from_mlab_linkage', ['Z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'from_mlab_linkage', localization, ['Z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'from_mlab_linkage(...)' code ##################

    str_1884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, (-1)), 'str', '\n    Convert a linkage matrix generated by MATLAB(TM) to a new\n    linkage matrix compatible with this module.\n\n    The conversion does two things:\n\n     * the indices are converted from ``1..N`` to ``0..(N-1)`` form,\n       and\n\n     * a fourth column ``Z[:,3]`` is added where ``Z[i,3]`` represents the\n       number of original observations (leaves) in the non-singleton\n       cluster ``i``.\n\n    This function is useful when loading in linkages from legacy data\n    files generated by MATLAB.\n\n    Parameters\n    ----------\n    Z : ndarray\n        A linkage matrix generated by MATLAB(TM).\n\n    Returns\n    -------\n    ZS : ndarray\n        A linkage matrix compatible with ``scipy.cluster.hierarchy``.\n\n    ')
    
    # Assigning a Call to a Name (line 1386):
    
    # Assigning a Call to a Name (line 1386):
    
    # Call to asarray(...): (line 1386)
    # Processing the call arguments (line 1386)
    # Getting the type of 'Z' (line 1386)
    Z_1887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 19), 'Z', False)
    # Processing the call keyword arguments (line 1386)
    # Getting the type of 'np' (line 1386)
    np_1888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 28), 'np', False)
    # Obtaining the member 'double' of a type (line 1386)
    double_1889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1386, 28), np_1888, 'double')
    keyword_1890 = double_1889
    str_1891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1386, 45), 'str', 'c')
    keyword_1892 = str_1891
    kwargs_1893 = {'dtype': keyword_1890, 'order': keyword_1892}
    # Getting the type of 'np' (line 1386)
    np_1885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1386)
    asarray_1886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1386, 8), np_1885, 'asarray')
    # Calling asarray(args, kwargs) (line 1386)
    asarray_call_result_1894 = invoke(stypy.reporting.localization.Localization(__file__, 1386, 8), asarray_1886, *[Z_1887], **kwargs_1893)
    
    # Assigning a type to the variable 'Z' (line 1386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 4), 'Z', asarray_call_result_1894)
    
    # Assigning a Attribute to a Name (line 1387):
    
    # Assigning a Attribute to a Name (line 1387):
    # Getting the type of 'Z' (line 1387)
    Z_1895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 9), 'Z')
    # Obtaining the member 'shape' of a type (line 1387)
    shape_1896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 9), Z_1895, 'shape')
    # Assigning a type to the variable 'Zs' (line 1387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 4), 'Zs', shape_1896)
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 1390)
    # Processing the call arguments (line 1390)
    # Getting the type of 'Zs' (line 1390)
    Zs_1898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 11), 'Zs', False)
    # Processing the call keyword arguments (line 1390)
    kwargs_1899 = {}
    # Getting the type of 'len' (line 1390)
    len_1897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 7), 'len', False)
    # Calling len(args, kwargs) (line 1390)
    len_call_result_1900 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 7), len_1897, *[Zs_1898], **kwargs_1899)
    
    int_1901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 18), 'int')
    # Applying the binary operator '==' (line 1390)
    result_eq_1902 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 7), '==', len_call_result_1900, int_1901)
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 1390)
    # Processing the call arguments (line 1390)
    # Getting the type of 'Zs' (line 1390)
    Zs_1904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 28), 'Zs', False)
    # Processing the call keyword arguments (line 1390)
    kwargs_1905 = {}
    # Getting the type of 'len' (line 1390)
    len_1903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 24), 'len', False)
    # Calling len(args, kwargs) (line 1390)
    len_call_result_1906 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 24), len_1903, *[Zs_1904], **kwargs_1905)
    
    int_1907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 35), 'int')
    # Applying the binary operator '==' (line 1390)
    result_eq_1908 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 24), '==', len_call_result_1906, int_1907)
    
    
    
    # Obtaining the type of the subscript
    int_1909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 44), 'int')
    # Getting the type of 'Zs' (line 1390)
    Zs_1910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 41), 'Zs')
    # Obtaining the member '__getitem__' of a type (line 1390)
    getitem___1911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1390, 41), Zs_1910, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1390)
    subscript_call_result_1912 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 41), getitem___1911, int_1909)
    
    int_1913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 50), 'int')
    # Applying the binary operator '==' (line 1390)
    result_eq_1914 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 41), '==', subscript_call_result_1912, int_1913)
    
    # Applying the binary operator 'and' (line 1390)
    result_and_keyword_1915 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 24), 'and', result_eq_1908, result_eq_1914)
    
    # Applying the binary operator 'or' (line 1390)
    result_or_keyword_1916 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 7), 'or', result_eq_1902, result_and_keyword_1915)
    
    # Testing the type of an if condition (line 1390)
    if_condition_1917 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1390, 4), result_or_keyword_1916)
    # Assigning a type to the variable 'if_condition_1917' (line 1390)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 4), 'if_condition_1917', if_condition_1917)
    # SSA begins for if statement (line 1390)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to copy(...): (line 1391)
    # Processing the call keyword arguments (line 1391)
    kwargs_1920 = {}
    # Getting the type of 'Z' (line 1391)
    Z_1918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 15), 'Z', False)
    # Obtaining the member 'copy' of a type (line 1391)
    copy_1919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1391, 15), Z_1918, 'copy')
    # Calling copy(args, kwargs) (line 1391)
    copy_call_result_1921 = invoke(stypy.reporting.localization.Localization(__file__, 1391, 15), copy_1919, *[], **kwargs_1920)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1391, 8), 'stypy_return_type', copy_call_result_1921)
    # SSA join for if statement (line 1390)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1393)
    # Processing the call arguments (line 1393)
    # Getting the type of 'Zs' (line 1393)
    Zs_1923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 11), 'Zs', False)
    # Processing the call keyword arguments (line 1393)
    kwargs_1924 = {}
    # Getting the type of 'len' (line 1393)
    len_1922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 7), 'len', False)
    # Calling len(args, kwargs) (line 1393)
    len_call_result_1925 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 7), len_1922, *[Zs_1923], **kwargs_1924)
    
    int_1926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1393, 18), 'int')
    # Applying the binary operator '!=' (line 1393)
    result_ne_1927 = python_operator(stypy.reporting.localization.Localization(__file__, 1393, 7), '!=', len_call_result_1925, int_1926)
    
    # Testing the type of an if condition (line 1393)
    if_condition_1928 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1393, 4), result_ne_1927)
    # Assigning a type to the variable 'if_condition_1928' (line 1393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 4), 'if_condition_1928', if_condition_1928)
    # SSA begins for if statement (line 1393)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1394)
    # Processing the call arguments (line 1394)
    str_1930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1394, 25), 'str', 'The linkage array must be rectangular.')
    # Processing the call keyword arguments (line 1394)
    kwargs_1931 = {}
    # Getting the type of 'ValueError' (line 1394)
    ValueError_1929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1394)
    ValueError_call_result_1932 = invoke(stypy.reporting.localization.Localization(__file__, 1394, 14), ValueError_1929, *[str_1930], **kwargs_1931)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1394, 8), ValueError_call_result_1932, 'raise parameter', BaseException)
    # SSA join for if statement (line 1393)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_1933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 10), 'int')
    # Getting the type of 'Zs' (line 1397)
    Zs_1934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 7), 'Zs')
    # Obtaining the member '__getitem__' of a type (line 1397)
    getitem___1935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 7), Zs_1934, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1397)
    subscript_call_result_1936 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 7), getitem___1935, int_1933)
    
    int_1937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 16), 'int')
    # Applying the binary operator '==' (line 1397)
    result_eq_1938 = python_operator(stypy.reporting.localization.Localization(__file__, 1397, 7), '==', subscript_call_result_1936, int_1937)
    
    # Testing the type of an if condition (line 1397)
    if_condition_1939 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1397, 4), result_eq_1938)
    # Assigning a type to the variable 'if_condition_1939' (line 1397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 4), 'if_condition_1939', if_condition_1939)
    # SSA begins for if statement (line 1397)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to copy(...): (line 1398)
    # Processing the call keyword arguments (line 1398)
    kwargs_1942 = {}
    # Getting the type of 'Z' (line 1398)
    Z_1940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 15), 'Z', False)
    # Obtaining the member 'copy' of a type (line 1398)
    copy_1941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 15), Z_1940, 'copy')
    # Calling copy(args, kwargs) (line 1398)
    copy_call_result_1943 = invoke(stypy.reporting.localization.Localization(__file__, 1398, 15), copy_1941, *[], **kwargs_1942)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 8), 'stypy_return_type', copy_call_result_1943)
    # SSA join for if statement (line 1397)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1400):
    
    # Assigning a Call to a Name (line 1400):
    
    # Call to copy(...): (line 1400)
    # Processing the call keyword arguments (line 1400)
    kwargs_1946 = {}
    # Getting the type of 'Z' (line 1400)
    Z_1944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 12), 'Z', False)
    # Obtaining the member 'copy' of a type (line 1400)
    copy_1945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 12), Z_1944, 'copy')
    # Calling copy(args, kwargs) (line 1400)
    copy_call_result_1947 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 12), copy_1945, *[], **kwargs_1946)
    
    # Assigning a type to the variable 'Zpart' (line 1400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 4), 'Zpart', copy_call_result_1947)
    
    
    # Evaluating a boolean operation
    
    
    # Call to min(...): (line 1401)
    # Processing the call keyword arguments (line 1401)
    kwargs_1956 = {}
    
    # Obtaining the type of the subscript
    slice_1948 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1401, 7), None, None, None)
    int_1949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 16), 'int')
    int_1950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 18), 'int')
    slice_1951 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1401, 7), int_1949, int_1950, None)
    # Getting the type of 'Zpart' (line 1401)
    Zpart_1952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 7), 'Zpart', False)
    # Obtaining the member '__getitem__' of a type (line 1401)
    getitem___1953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 7), Zpart_1952, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1401)
    subscript_call_result_1954 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 7), getitem___1953, (slice_1948, slice_1951))
    
    # Obtaining the member 'min' of a type (line 1401)
    min_1955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 7), subscript_call_result_1954, 'min')
    # Calling min(args, kwargs) (line 1401)
    min_call_result_1957 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 7), min_1955, *[], **kwargs_1956)
    
    float_1958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 30), 'float')
    # Applying the binary operator '!=' (line 1401)
    result_ne_1959 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 7), '!=', min_call_result_1957, float_1958)
    
    
    
    # Call to max(...): (line 1401)
    # Processing the call keyword arguments (line 1401)
    kwargs_1968 = {}
    
    # Obtaining the type of the subscript
    slice_1960 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1401, 38), None, None, None)
    int_1961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 47), 'int')
    int_1962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 49), 'int')
    slice_1963 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1401, 38), int_1961, int_1962, None)
    # Getting the type of 'Zpart' (line 1401)
    Zpart_1964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 38), 'Zpart', False)
    # Obtaining the member '__getitem__' of a type (line 1401)
    getitem___1965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 38), Zpart_1964, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1401)
    subscript_call_result_1966 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 38), getitem___1965, (slice_1960, slice_1963))
    
    # Obtaining the member 'max' of a type (line 1401)
    max_1967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 38), subscript_call_result_1966, 'max')
    # Calling max(args, kwargs) (line 1401)
    max_call_result_1969 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 38), max_1967, *[], **kwargs_1968)
    
    int_1970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 61), 'int')
    
    # Obtaining the type of the subscript
    int_1971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 68), 'int')
    # Getting the type of 'Zs' (line 1401)
    Zs_1972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 65), 'Zs')
    # Obtaining the member '__getitem__' of a type (line 1401)
    getitem___1973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 65), Zs_1972, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1401)
    subscript_call_result_1974 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 65), getitem___1973, int_1971)
    
    # Applying the binary operator '*' (line 1401)
    result_mul_1975 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 61), '*', int_1970, subscript_call_result_1974)
    
    # Applying the binary operator '!=' (line 1401)
    result_ne_1976 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 38), '!=', max_call_result_1969, result_mul_1975)
    
    # Applying the binary operator 'and' (line 1401)
    result_and_keyword_1977 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 7), 'and', result_ne_1959, result_ne_1976)
    
    # Testing the type of an if condition (line 1401)
    if_condition_1978 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1401, 4), result_and_keyword_1977)
    # Assigning a type to the variable 'if_condition_1978' (line 1401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1401, 4), 'if_condition_1978', if_condition_1978)
    # SSA begins for if statement (line 1401)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1402)
    # Processing the call arguments (line 1402)
    str_1980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 25), 'str', 'The format of the indices is not 1..N')
    # Processing the call keyword arguments (line 1402)
    kwargs_1981 = {}
    # Getting the type of 'ValueError' (line 1402)
    ValueError_1979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1402)
    ValueError_call_result_1982 = invoke(stypy.reporting.localization.Localization(__file__, 1402, 14), ValueError_1979, *[str_1980], **kwargs_1981)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1402, 8), ValueError_call_result_1982, 'raise parameter', BaseException)
    # SSA join for if statement (line 1401)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'Zpart' (line 1404)
    Zpart_1983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 4), 'Zpart')
    
    # Obtaining the type of the subscript
    slice_1984 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1404, 4), None, None, None)
    int_1985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 13), 'int')
    int_1986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 15), 'int')
    slice_1987 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1404, 4), int_1985, int_1986, None)
    # Getting the type of 'Zpart' (line 1404)
    Zpart_1988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 4), 'Zpart')
    # Obtaining the member '__getitem__' of a type (line 1404)
    getitem___1989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 4), Zpart_1988, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1404)
    subscript_call_result_1990 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 4), getitem___1989, (slice_1984, slice_1987))
    
    float_1991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 21), 'float')
    # Applying the binary operator '-=' (line 1404)
    result_isub_1992 = python_operator(stypy.reporting.localization.Localization(__file__, 1404, 4), '-=', subscript_call_result_1990, float_1991)
    # Getting the type of 'Zpart' (line 1404)
    Zpart_1993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 4), 'Zpart')
    slice_1994 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1404, 4), None, None, None)
    int_1995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 13), 'int')
    int_1996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 15), 'int')
    slice_1997 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1404, 4), int_1995, int_1996, None)
    # Storing an element on a container (line 1404)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1404, 4), Zpart_1993, ((slice_1994, slice_1997), result_isub_1992))
    
    
    # Assigning a Call to a Name (line 1405):
    
    # Assigning a Call to a Name (line 1405):
    
    # Call to zeros(...): (line 1405)
    # Processing the call arguments (line 1405)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1405)
    tuple_2000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1405)
    # Adding element type (line 1405)
    
    # Obtaining the type of the subscript
    int_2001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 22), 'int')
    # Getting the type of 'Zs' (line 1405)
    Zs_2002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 19), 'Zs', False)
    # Obtaining the member '__getitem__' of a type (line 1405)
    getitem___2003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 19), Zs_2002, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1405)
    subscript_call_result_2004 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 19), getitem___2003, int_2001)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1405, 19), tuple_2000, subscript_call_result_2004)
    
    # Processing the call keyword arguments (line 1405)
    # Getting the type of 'np' (line 1405)
    np_2005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 34), 'np', False)
    # Obtaining the member 'double' of a type (line 1405)
    double_2006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 34), np_2005, 'double')
    keyword_2007 = double_2006
    kwargs_2008 = {'dtype': keyword_2007}
    # Getting the type of 'np' (line 1405)
    np_1998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 9), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1405)
    zeros_1999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 9), np_1998, 'zeros')
    # Calling zeros(args, kwargs) (line 1405)
    zeros_call_result_2009 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 9), zeros_1999, *[tuple_2000], **kwargs_2008)
    
    # Assigning a type to the variable 'CS' (line 1405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 4), 'CS', zeros_call_result_2009)
    
    # Call to calculate_cluster_sizes(...): (line 1406)
    # Processing the call arguments (line 1406)
    # Getting the type of 'Zpart' (line 1406)
    Zpart_2012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 39), 'Zpart', False)
    # Getting the type of 'CS' (line 1406)
    CS_2013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 46), 'CS', False)
    
    # Call to int(...): (line 1406)
    # Processing the call arguments (line 1406)
    
    # Obtaining the type of the subscript
    int_2015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1406, 57), 'int')
    # Getting the type of 'Zs' (line 1406)
    Zs_2016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 54), 'Zs', False)
    # Obtaining the member '__getitem__' of a type (line 1406)
    getitem___2017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1406, 54), Zs_2016, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1406)
    subscript_call_result_2018 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 54), getitem___2017, int_2015)
    
    # Processing the call keyword arguments (line 1406)
    kwargs_2019 = {}
    # Getting the type of 'int' (line 1406)
    int_2014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 50), 'int', False)
    # Calling int(args, kwargs) (line 1406)
    int_call_result_2020 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 50), int_2014, *[subscript_call_result_2018], **kwargs_2019)
    
    int_2021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1406, 63), 'int')
    # Applying the binary operator '+' (line 1406)
    result_add_2022 = python_operator(stypy.reporting.localization.Localization(__file__, 1406, 50), '+', int_call_result_2020, int_2021)
    
    # Processing the call keyword arguments (line 1406)
    kwargs_2023 = {}
    # Getting the type of '_hierarchy' (line 1406)
    _hierarchy_2010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 4), '_hierarchy', False)
    # Obtaining the member 'calculate_cluster_sizes' of a type (line 1406)
    calculate_cluster_sizes_2011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1406, 4), _hierarchy_2010, 'calculate_cluster_sizes')
    # Calling calculate_cluster_sizes(args, kwargs) (line 1406)
    calculate_cluster_sizes_call_result_2024 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 4), calculate_cluster_sizes_2011, *[Zpart_2012, CS_2013, result_add_2022], **kwargs_2023)
    
    
    # Call to hstack(...): (line 1407)
    # Processing the call arguments (line 1407)
    
    # Obtaining an instance of the builtin type 'list' (line 1407)
    list_2027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1407)
    # Adding element type (line 1407)
    # Getting the type of 'Zpart' (line 1407)
    Zpart_2028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 22), 'Zpart', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1407, 21), list_2027, Zpart_2028)
    # Adding element type (line 1407)
    
    # Call to reshape(...): (line 1407)
    # Processing the call arguments (line 1407)
    
    # Obtaining the type of the subscript
    int_2031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, 43), 'int')
    # Getting the type of 'Zs' (line 1407)
    Zs_2032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 40), 'Zs', False)
    # Obtaining the member '__getitem__' of a type (line 1407)
    getitem___2033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 40), Zs_2032, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1407)
    subscript_call_result_2034 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 40), getitem___2033, int_2031)
    
    int_2035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1407, 47), 'int')
    # Processing the call keyword arguments (line 1407)
    kwargs_2036 = {}
    # Getting the type of 'CS' (line 1407)
    CS_2029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 29), 'CS', False)
    # Obtaining the member 'reshape' of a type (line 1407)
    reshape_2030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 29), CS_2029, 'reshape')
    # Calling reshape(args, kwargs) (line 1407)
    reshape_call_result_2037 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 29), reshape_2030, *[subscript_call_result_2034, int_2035], **kwargs_2036)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1407, 21), list_2027, reshape_call_result_2037)
    
    # Processing the call keyword arguments (line 1407)
    kwargs_2038 = {}
    # Getting the type of 'np' (line 1407)
    np_2025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 11), 'np', False)
    # Obtaining the member 'hstack' of a type (line 1407)
    hstack_2026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 11), np_2025, 'hstack')
    # Calling hstack(args, kwargs) (line 1407)
    hstack_call_result_2039 = invoke(stypy.reporting.localization.Localization(__file__, 1407, 11), hstack_2026, *[list_2027], **kwargs_2038)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 4), 'stypy_return_type', hstack_call_result_2039)
    
    # ################# End of 'from_mlab_linkage(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'from_mlab_linkage' in the type store
    # Getting the type of 'stypy_return_type' (line 1358)
    stypy_return_type_2040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2040)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'from_mlab_linkage'
    return stypy_return_type_2040

# Assigning a type to the variable 'from_mlab_linkage' (line 1358)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1358, 0), 'from_mlab_linkage', from_mlab_linkage)

@norecursion
def to_mlab_linkage(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'to_mlab_linkage'
    module_type_store = module_type_store.open_function_context('to_mlab_linkage', 1410, 0, False)
    
    # Passed parameters checking function
    to_mlab_linkage.stypy_localization = localization
    to_mlab_linkage.stypy_type_of_self = None
    to_mlab_linkage.stypy_type_store = module_type_store
    to_mlab_linkage.stypy_function_name = 'to_mlab_linkage'
    to_mlab_linkage.stypy_param_names_list = ['Z']
    to_mlab_linkage.stypy_varargs_param_name = None
    to_mlab_linkage.stypy_kwargs_param_name = None
    to_mlab_linkage.stypy_call_defaults = defaults
    to_mlab_linkage.stypy_call_varargs = varargs
    to_mlab_linkage.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'to_mlab_linkage', ['Z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'to_mlab_linkage', localization, ['Z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'to_mlab_linkage(...)' code ##################

    str_2041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, (-1)), 'str', "\n    Convert a linkage matrix to a MATLAB(TM) compatible one.\n\n    Converts a linkage matrix ``Z`` generated by the linkage function\n    of this module to a MATLAB(TM) compatible one. The return linkage\n    matrix has the last column removed and the cluster indices are\n    converted to ``1..N`` indexing.\n\n    Parameters\n    ----------\n    Z : ndarray\n        A linkage matrix generated by ``scipy.cluster.hierarchy``.\n\n    Returns\n    -------\n    to_mlab_linkage : ndarray\n        A linkage matrix compatible with MATLAB(TM)'s hierarchical\n        clustering functions.\n\n        The return linkage matrix has the last column removed\n        and the cluster indices are converted to ``1..N`` indexing.\n\n    ")
    
    # Assigning a Call to a Name (line 1434):
    
    # Assigning a Call to a Name (line 1434):
    
    # Call to asarray(...): (line 1434)
    # Processing the call arguments (line 1434)
    # Getting the type of 'Z' (line 1434)
    Z_2044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 19), 'Z', False)
    # Processing the call keyword arguments (line 1434)
    str_2045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 28), 'str', 'c')
    keyword_2046 = str_2045
    # Getting the type of 'np' (line 1434)
    np_2047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 39), 'np', False)
    # Obtaining the member 'double' of a type (line 1434)
    double_2048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 39), np_2047, 'double')
    keyword_2049 = double_2048
    kwargs_2050 = {'dtype': keyword_2049, 'order': keyword_2046}
    # Getting the type of 'np' (line 1434)
    np_2042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1434)
    asarray_2043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 8), np_2042, 'asarray')
    # Calling asarray(args, kwargs) (line 1434)
    asarray_call_result_2051 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 8), asarray_2043, *[Z_2044], **kwargs_2050)
    
    # Assigning a type to the variable 'Z' (line 1434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 4), 'Z', asarray_call_result_2051)
    
    # Assigning a Attribute to a Name (line 1435):
    
    # Assigning a Attribute to a Name (line 1435):
    # Getting the type of 'Z' (line 1435)
    Z_2052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 9), 'Z')
    # Obtaining the member 'shape' of a type (line 1435)
    shape_2053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1435, 9), Z_2052, 'shape')
    # Assigning a type to the variable 'Zs' (line 1435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 4), 'Zs', shape_2053)
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 1436)
    # Processing the call arguments (line 1436)
    # Getting the type of 'Zs' (line 1436)
    Zs_2055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 11), 'Zs', False)
    # Processing the call keyword arguments (line 1436)
    kwargs_2056 = {}
    # Getting the type of 'len' (line 1436)
    len_2054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 7), 'len', False)
    # Calling len(args, kwargs) (line 1436)
    len_call_result_2057 = invoke(stypy.reporting.localization.Localization(__file__, 1436, 7), len_2054, *[Zs_2055], **kwargs_2056)
    
    int_2058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 18), 'int')
    # Applying the binary operator '==' (line 1436)
    result_eq_2059 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 7), '==', len_call_result_2057, int_2058)
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 1436)
    # Processing the call arguments (line 1436)
    # Getting the type of 'Zs' (line 1436)
    Zs_2061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 28), 'Zs', False)
    # Processing the call keyword arguments (line 1436)
    kwargs_2062 = {}
    # Getting the type of 'len' (line 1436)
    len_2060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 24), 'len', False)
    # Calling len(args, kwargs) (line 1436)
    len_call_result_2063 = invoke(stypy.reporting.localization.Localization(__file__, 1436, 24), len_2060, *[Zs_2061], **kwargs_2062)
    
    int_2064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 35), 'int')
    # Applying the binary operator '==' (line 1436)
    result_eq_2065 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 24), '==', len_call_result_2063, int_2064)
    
    
    
    # Obtaining the type of the subscript
    int_2066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 44), 'int')
    # Getting the type of 'Zs' (line 1436)
    Zs_2067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 41), 'Zs')
    # Obtaining the member '__getitem__' of a type (line 1436)
    getitem___2068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 41), Zs_2067, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1436)
    subscript_call_result_2069 = invoke(stypy.reporting.localization.Localization(__file__, 1436, 41), getitem___2068, int_2066)
    
    int_2070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 50), 'int')
    # Applying the binary operator '==' (line 1436)
    result_eq_2071 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 41), '==', subscript_call_result_2069, int_2070)
    
    # Applying the binary operator 'and' (line 1436)
    result_and_keyword_2072 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 24), 'and', result_eq_2065, result_eq_2071)
    
    # Applying the binary operator 'or' (line 1436)
    result_or_keyword_2073 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 7), 'or', result_eq_2059, result_and_keyword_2072)
    
    # Testing the type of an if condition (line 1436)
    if_condition_2074 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1436, 4), result_or_keyword_2073)
    # Assigning a type to the variable 'if_condition_2074' (line 1436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 4), 'if_condition_2074', if_condition_2074)
    # SSA begins for if statement (line 1436)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to copy(...): (line 1437)
    # Processing the call keyword arguments (line 1437)
    kwargs_2077 = {}
    # Getting the type of 'Z' (line 1437)
    Z_2075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 15), 'Z', False)
    # Obtaining the member 'copy' of a type (line 1437)
    copy_2076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 15), Z_2075, 'copy')
    # Calling copy(args, kwargs) (line 1437)
    copy_call_result_2078 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 15), copy_2076, *[], **kwargs_2077)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 8), 'stypy_return_type', copy_call_result_2078)
    # SSA join for if statement (line 1436)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to is_valid_linkage(...): (line 1438)
    # Processing the call arguments (line 1438)
    # Getting the type of 'Z' (line 1438)
    Z_2080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 21), 'Z', False)
    # Processing the call keyword arguments (line 1438)
    # Getting the type of 'True' (line 1438)
    True_2081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 30), 'True', False)
    keyword_2082 = True_2081
    str_2083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1438, 41), 'str', 'Z')
    keyword_2084 = str_2083
    kwargs_2085 = {'throw': keyword_2082, 'name': keyword_2084}
    # Getting the type of 'is_valid_linkage' (line 1438)
    is_valid_linkage_2079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 1438)
    is_valid_linkage_call_result_2086 = invoke(stypy.reporting.localization.Localization(__file__, 1438, 4), is_valid_linkage_2079, *[Z_2080], **kwargs_2085)
    
    
    # Assigning a Call to a Name (line 1440):
    
    # Assigning a Call to a Name (line 1440):
    
    # Call to copy(...): (line 1440)
    # Processing the call keyword arguments (line 1440)
    kwargs_2095 = {}
    
    # Obtaining the type of the subscript
    slice_2087 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1440, 9), None, None, None)
    int_2088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1440, 14), 'int')
    int_2089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1440, 16), 'int')
    slice_2090 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1440, 9), int_2088, int_2089, None)
    # Getting the type of 'Z' (line 1440)
    Z_2091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 9), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1440)
    getitem___2092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 9), Z_2091, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1440)
    subscript_call_result_2093 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 9), getitem___2092, (slice_2087, slice_2090))
    
    # Obtaining the member 'copy' of a type (line 1440)
    copy_2094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 9), subscript_call_result_2093, 'copy')
    # Calling copy(args, kwargs) (line 1440)
    copy_call_result_2096 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 9), copy_2094, *[], **kwargs_2095)
    
    # Assigning a type to the variable 'ZP' (line 1440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 4), 'ZP', copy_call_result_2096)
    
    # Getting the type of 'ZP' (line 1441)
    ZP_2097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 4), 'ZP')
    
    # Obtaining the type of the subscript
    slice_2098 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1441, 4), None, None, None)
    int_2099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 10), 'int')
    int_2100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 12), 'int')
    slice_2101 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1441, 4), int_2099, int_2100, None)
    # Getting the type of 'ZP' (line 1441)
    ZP_2102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 4), 'ZP')
    # Obtaining the member '__getitem__' of a type (line 1441)
    getitem___2103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1441, 4), ZP_2102, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1441)
    subscript_call_result_2104 = invoke(stypy.reporting.localization.Localization(__file__, 1441, 4), getitem___2103, (slice_2098, slice_2101))
    
    float_2105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 18), 'float')
    # Applying the binary operator '+=' (line 1441)
    result_iadd_2106 = python_operator(stypy.reporting.localization.Localization(__file__, 1441, 4), '+=', subscript_call_result_2104, float_2105)
    # Getting the type of 'ZP' (line 1441)
    ZP_2107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 4), 'ZP')
    slice_2108 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1441, 4), None, None, None)
    int_2109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 10), 'int')
    int_2110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 12), 'int')
    slice_2111 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1441, 4), int_2109, int_2110, None)
    # Storing an element on a container (line 1441)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1441, 4), ZP_2107, ((slice_2108, slice_2111), result_iadd_2106))
    
    # Getting the type of 'ZP' (line 1443)
    ZP_2112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 11), 'ZP')
    # Assigning a type to the variable 'stypy_return_type' (line 1443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1443, 4), 'stypy_return_type', ZP_2112)
    
    # ################# End of 'to_mlab_linkage(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'to_mlab_linkage' in the type store
    # Getting the type of 'stypy_return_type' (line 1410)
    stypy_return_type_2113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2113)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'to_mlab_linkage'
    return stypy_return_type_2113

# Assigning a type to the variable 'to_mlab_linkage' (line 1410)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 0), 'to_mlab_linkage', to_mlab_linkage)

@norecursion
def is_monotonic(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_monotonic'
    module_type_store = module_type_store.open_function_context('is_monotonic', 1446, 0, False)
    
    # Passed parameters checking function
    is_monotonic.stypy_localization = localization
    is_monotonic.stypy_type_of_self = None
    is_monotonic.stypy_type_store = module_type_store
    is_monotonic.stypy_function_name = 'is_monotonic'
    is_monotonic.stypy_param_names_list = ['Z']
    is_monotonic.stypy_varargs_param_name = None
    is_monotonic.stypy_kwargs_param_name = None
    is_monotonic.stypy_call_defaults = defaults
    is_monotonic.stypy_call_varargs = varargs
    is_monotonic.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_monotonic', ['Z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_monotonic', localization, ['Z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_monotonic(...)' code ##################

    str_2114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, (-1)), 'str', '\n    Return True if the linkage passed is monotonic.\n\n    The linkage is monotonic if for every cluster :math:`s` and :math:`t`\n    joined, the distance between them is no less than the distance\n    between any previously joined clusters.\n\n    Parameters\n    ----------\n    Z : ndarray\n        The linkage matrix to check for monotonicity.\n\n    Returns\n    -------\n    b : bool\n        A boolean indicating whether the linkage is monotonic.\n\n    ')
    
    # Assigning a Call to a Name (line 1465):
    
    # Assigning a Call to a Name (line 1465):
    
    # Call to asarray(...): (line 1465)
    # Processing the call arguments (line 1465)
    # Getting the type of 'Z' (line 1465)
    Z_2117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 19), 'Z', False)
    # Processing the call keyword arguments (line 1465)
    str_2118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1465, 28), 'str', 'c')
    keyword_2119 = str_2118
    kwargs_2120 = {'order': keyword_2119}
    # Getting the type of 'np' (line 1465)
    np_2115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1465)
    asarray_2116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 8), np_2115, 'asarray')
    # Calling asarray(args, kwargs) (line 1465)
    asarray_call_result_2121 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 8), asarray_2116, *[Z_2117], **kwargs_2120)
    
    # Assigning a type to the variable 'Z' (line 1465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 4), 'Z', asarray_call_result_2121)
    
    # Call to is_valid_linkage(...): (line 1466)
    # Processing the call arguments (line 1466)
    # Getting the type of 'Z' (line 1466)
    Z_2123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 21), 'Z', False)
    # Processing the call keyword arguments (line 1466)
    # Getting the type of 'True' (line 1466)
    True_2124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 30), 'True', False)
    keyword_2125 = True_2124
    str_2126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1466, 41), 'str', 'Z')
    keyword_2127 = str_2126
    kwargs_2128 = {'throw': keyword_2125, 'name': keyword_2127}
    # Getting the type of 'is_valid_linkage' (line 1466)
    is_valid_linkage_2122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 1466)
    is_valid_linkage_call_result_2129 = invoke(stypy.reporting.localization.Localization(__file__, 1466, 4), is_valid_linkage_2122, *[Z_2123], **kwargs_2128)
    
    
    # Call to all(...): (line 1469)
    # Processing the call keyword arguments (line 1469)
    kwargs_2144 = {}
    
    
    # Obtaining the type of the subscript
    int_2130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 14), 'int')
    slice_2131 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1469, 12), int_2130, None, None)
    int_2132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 18), 'int')
    # Getting the type of 'Z' (line 1469)
    Z_2133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 12), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1469)
    getitem___2134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 12), Z_2133, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1469)
    subscript_call_result_2135 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 12), getitem___2134, (slice_2131, int_2132))
    
    
    # Obtaining the type of the subscript
    int_2136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 27), 'int')
    slice_2137 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1469, 24), None, int_2136, None)
    int_2138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 31), 'int')
    # Getting the type of 'Z' (line 1469)
    Z_2139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 24), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1469)
    getitem___2140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 24), Z_2139, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1469)
    subscript_call_result_2141 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 24), getitem___2140, (slice_2137, int_2138))
    
    # Applying the binary operator '>=' (line 1469)
    result_ge_2142 = python_operator(stypy.reporting.localization.Localization(__file__, 1469, 12), '>=', subscript_call_result_2135, subscript_call_result_2141)
    
    # Obtaining the member 'all' of a type (line 1469)
    all_2143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 12), result_ge_2142, 'all')
    # Calling all(args, kwargs) (line 1469)
    all_call_result_2145 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 12), all_2143, *[], **kwargs_2144)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1469, 4), 'stypy_return_type', all_call_result_2145)
    
    # ################# End of 'is_monotonic(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_monotonic' in the type store
    # Getting the type of 'stypy_return_type' (line 1446)
    stypy_return_type_2146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2146)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_monotonic'
    return stypy_return_type_2146

# Assigning a type to the variable 'is_monotonic' (line 1446)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 0), 'is_monotonic', is_monotonic)

@norecursion
def is_valid_im(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1472)
    False_2147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 27), 'False')
    # Getting the type of 'False' (line 1472)
    False_2148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 40), 'False')
    # Getting the type of 'None' (line 1472)
    None_2149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 52), 'None')
    defaults = [False_2147, False_2148, None_2149]
    # Create a new context for function 'is_valid_im'
    module_type_store = module_type_store.open_function_context('is_valid_im', 1472, 0, False)
    
    # Passed parameters checking function
    is_valid_im.stypy_localization = localization
    is_valid_im.stypy_type_of_self = None
    is_valid_im.stypy_type_store = module_type_store
    is_valid_im.stypy_function_name = 'is_valid_im'
    is_valid_im.stypy_param_names_list = ['R', 'warning', 'throw', 'name']
    is_valid_im.stypy_varargs_param_name = None
    is_valid_im.stypy_kwargs_param_name = None
    is_valid_im.stypy_call_defaults = defaults
    is_valid_im.stypy_call_varargs = varargs
    is_valid_im.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_valid_im', ['R', 'warning', 'throw', 'name'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_valid_im', localization, ['R', 'warning', 'throw', 'name'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_valid_im(...)' code ##################

    str_2150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1498, (-1)), 'str', 'Return True if the inconsistency matrix passed is valid.\n\n    It must be a :math:`n` by 4 array of doubles. The standard\n    deviations ``R[:,1]`` must be nonnegative. The link counts\n    ``R[:,2]`` must be positive and no greater than :math:`n-1`.\n\n    Parameters\n    ----------\n    R : ndarray\n        The inconsistency matrix to check for validity.\n    warning : bool, optional\n         When True, issues a Python warning if the linkage\n         matrix passed is invalid.\n    throw : bool, optional\n         When True, throws a Python exception if the linkage\n         matrix passed is invalid.\n    name : str, optional\n         This string refers to the variable name of the invalid\n         linkage matrix.\n\n    Returns\n    -------\n    b : bool\n        True if the inconsistency matrix is valid.\n\n    ')
    
    # Assigning a Call to a Name (line 1499):
    
    # Assigning a Call to a Name (line 1499):
    
    # Call to asarray(...): (line 1499)
    # Processing the call arguments (line 1499)
    # Getting the type of 'R' (line 1499)
    R_2153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 19), 'R', False)
    # Processing the call keyword arguments (line 1499)
    str_2154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1499, 28), 'str', 'c')
    keyword_2155 = str_2154
    kwargs_2156 = {'order': keyword_2155}
    # Getting the type of 'np' (line 1499)
    np_2151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1499)
    asarray_2152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1499, 8), np_2151, 'asarray')
    # Calling asarray(args, kwargs) (line 1499)
    asarray_call_result_2157 = invoke(stypy.reporting.localization.Localization(__file__, 1499, 8), asarray_2152, *[R_2153], **kwargs_2156)
    
    # Assigning a type to the variable 'R' (line 1499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1499, 4), 'R', asarray_call_result_2157)
    
    # Assigning a Name to a Name (line 1500):
    
    # Assigning a Name to a Name (line 1500):
    # Getting the type of 'True' (line 1500)
    True_2158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 12), 'True')
    # Assigning a type to the variable 'valid' (line 1500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 4), 'valid', True_2158)
    
    # Assigning a IfExp to a Name (line 1501):
    
    # Assigning a IfExp to a Name (line 1501):
    
    # Getting the type of 'name' (line 1501)
    name_2159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 31), 'name')
    # Testing the type of an if expression (line 1501)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1501, 15), name_2159)
    # SSA begins for if expression (line 1501)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_2160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, 15), 'str', '%r ')
    # Getting the type of 'name' (line 1501)
    name_2161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 23), 'name')
    # Applying the binary operator '%' (line 1501)
    result_mod_2162 = python_operator(stypy.reporting.localization.Localization(__file__, 1501, 15), '%', str_2160, name_2161)
    
    # SSA branch for the else part of an if expression (line 1501)
    module_type_store.open_ssa_branch('if expression else')
    str_2163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, 41), 'str', '')
    # SSA join for if expression (line 1501)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_2164 = union_type.UnionType.add(result_mod_2162, str_2163)
    
    # Assigning a type to the variable 'name_str' (line 1501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'name_str', if_exp_2164)
    
    
    # SSA begins for try-except statement (line 1502)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    
    # Call to type(...): (line 1503)
    # Processing the call arguments (line 1503)
    # Getting the type of 'R' (line 1503)
    R_2166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 16), 'R', False)
    # Processing the call keyword arguments (line 1503)
    kwargs_2167 = {}
    # Getting the type of 'type' (line 1503)
    type_2165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 11), 'type', False)
    # Calling type(args, kwargs) (line 1503)
    type_call_result_2168 = invoke(stypy.reporting.localization.Localization(__file__, 1503, 11), type_2165, *[R_2166], **kwargs_2167)
    
    # Getting the type of 'np' (line 1503)
    np_2169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 22), 'np')
    # Obtaining the member 'ndarray' of a type (line 1503)
    ndarray_2170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 22), np_2169, 'ndarray')
    # Applying the binary operator '!=' (line 1503)
    result_ne_2171 = python_operator(stypy.reporting.localization.Localization(__file__, 1503, 11), '!=', type_call_result_2168, ndarray_2170)
    
    # Testing the type of an if condition (line 1503)
    if_condition_2172 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1503, 8), result_ne_2171)
    # Assigning a type to the variable 'if_condition_2172' (line 1503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 8), 'if_condition_2172', if_condition_2172)
    # SSA begins for if statement (line 1503)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 1504)
    # Processing the call arguments (line 1504)
    str_2174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1504, 28), 'str', 'Variable %spassed as inconsistency matrix is not a numpy array.')
    # Getting the type of 'name_str' (line 1505)
    name_str_2175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 47), 'name_str', False)
    # Applying the binary operator '%' (line 1504)
    result_mod_2176 = python_operator(stypy.reporting.localization.Localization(__file__, 1504, 28), '%', str_2174, name_str_2175)
    
    # Processing the call keyword arguments (line 1504)
    kwargs_2177 = {}
    # Getting the type of 'TypeError' (line 1504)
    TypeError_2173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 18), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1504)
    TypeError_call_result_2178 = invoke(stypy.reporting.localization.Localization(__file__, 1504, 18), TypeError_2173, *[result_mod_2176], **kwargs_2177)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1504, 12), TypeError_call_result_2178, 'raise parameter', BaseException)
    # SSA join for if statement (line 1503)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'R' (line 1506)
    R_2179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 11), 'R')
    # Obtaining the member 'dtype' of a type (line 1506)
    dtype_2180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 11), R_2179, 'dtype')
    # Getting the type of 'np' (line 1506)
    np_2181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 22), 'np')
    # Obtaining the member 'double' of a type (line 1506)
    double_2182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 22), np_2181, 'double')
    # Applying the binary operator '!=' (line 1506)
    result_ne_2183 = python_operator(stypy.reporting.localization.Localization(__file__, 1506, 11), '!=', dtype_2180, double_2182)
    
    # Testing the type of an if condition (line 1506)
    if_condition_2184 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1506, 8), result_ne_2183)
    # Assigning a type to the variable 'if_condition_2184' (line 1506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 8), 'if_condition_2184', if_condition_2184)
    # SSA begins for if statement (line 1506)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 1507)
    # Processing the call arguments (line 1507)
    str_2186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, 28), 'str', 'Inconsistency matrix %smust contain doubles (double).')
    # Getting the type of 'name_str' (line 1508)
    name_str_2187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 42), 'name_str', False)
    # Applying the binary operator '%' (line 1507)
    result_mod_2188 = python_operator(stypy.reporting.localization.Localization(__file__, 1507, 28), '%', str_2186, name_str_2187)
    
    # Processing the call keyword arguments (line 1507)
    kwargs_2189 = {}
    # Getting the type of 'TypeError' (line 1507)
    TypeError_2185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 18), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1507)
    TypeError_call_result_2190 = invoke(stypy.reporting.localization.Localization(__file__, 1507, 18), TypeError_2185, *[result_mod_2188], **kwargs_2189)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1507, 12), TypeError_call_result_2190, 'raise parameter', BaseException)
    # SSA join for if statement (line 1506)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1509)
    # Processing the call arguments (line 1509)
    # Getting the type of 'R' (line 1509)
    R_2192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 15), 'R', False)
    # Obtaining the member 'shape' of a type (line 1509)
    shape_2193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1509, 15), R_2192, 'shape')
    # Processing the call keyword arguments (line 1509)
    kwargs_2194 = {}
    # Getting the type of 'len' (line 1509)
    len_2191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 11), 'len', False)
    # Calling len(args, kwargs) (line 1509)
    len_call_result_2195 = invoke(stypy.reporting.localization.Localization(__file__, 1509, 11), len_2191, *[shape_2193], **kwargs_2194)
    
    int_2196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1509, 27), 'int')
    # Applying the binary operator '!=' (line 1509)
    result_ne_2197 = python_operator(stypy.reporting.localization.Localization(__file__, 1509, 11), '!=', len_call_result_2195, int_2196)
    
    # Testing the type of an if condition (line 1509)
    if_condition_2198 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1509, 8), result_ne_2197)
    # Assigning a type to the variable 'if_condition_2198' (line 1509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1509, 8), 'if_condition_2198', if_condition_2198)
    # SSA begins for if statement (line 1509)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1510)
    # Processing the call arguments (line 1510)
    str_2200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1510, 29), 'str', 'Inconsistency matrix %smust have shape=2 (i.e. be two-dimensional).')
    # Getting the type of 'name_str' (line 1511)
    name_str_2201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 54), 'name_str', False)
    # Applying the binary operator '%' (line 1510)
    result_mod_2202 = python_operator(stypy.reporting.localization.Localization(__file__, 1510, 29), '%', str_2200, name_str_2201)
    
    # Processing the call keyword arguments (line 1510)
    kwargs_2203 = {}
    # Getting the type of 'ValueError' (line 1510)
    ValueError_2199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1510)
    ValueError_call_result_2204 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 18), ValueError_2199, *[result_mod_2202], **kwargs_2203)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1510, 12), ValueError_call_result_2204, 'raise parameter', BaseException)
    # SSA join for if statement (line 1509)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_2205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, 19), 'int')
    # Getting the type of 'R' (line 1512)
    R_2206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 11), 'R')
    # Obtaining the member 'shape' of a type (line 1512)
    shape_2207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 11), R_2206, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1512)
    getitem___2208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 11), shape_2207, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1512)
    subscript_call_result_2209 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 11), getitem___2208, int_2205)
    
    int_2210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, 25), 'int')
    # Applying the binary operator '!=' (line 1512)
    result_ne_2211 = python_operator(stypy.reporting.localization.Localization(__file__, 1512, 11), '!=', subscript_call_result_2209, int_2210)
    
    # Testing the type of an if condition (line 1512)
    if_condition_2212 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1512, 8), result_ne_2211)
    # Assigning a type to the variable 'if_condition_2212' (line 1512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 8), 'if_condition_2212', if_condition_2212)
    # SSA begins for if statement (line 1512)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1513)
    # Processing the call arguments (line 1513)
    str_2214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1513, 29), 'str', 'Inconsistency matrix %smust have 4 columns.')
    # Getting the type of 'name_str' (line 1514)
    name_str_2215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 29), 'name_str', False)
    # Applying the binary operator '%' (line 1513)
    result_mod_2216 = python_operator(stypy.reporting.localization.Localization(__file__, 1513, 29), '%', str_2214, name_str_2215)
    
    # Processing the call keyword arguments (line 1513)
    kwargs_2217 = {}
    # Getting the type of 'ValueError' (line 1513)
    ValueError_2213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1513)
    ValueError_call_result_2218 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 18), ValueError_2213, *[result_mod_2216], **kwargs_2217)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1513, 12), ValueError_call_result_2218, 'raise parameter', BaseException)
    # SSA join for if statement (line 1512)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_2219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, 19), 'int')
    # Getting the type of 'R' (line 1515)
    R_2220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 11), 'R')
    # Obtaining the member 'shape' of a type (line 1515)
    shape_2221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 11), R_2220, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1515)
    getitem___2222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 11), shape_2221, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1515)
    subscript_call_result_2223 = invoke(stypy.reporting.localization.Localization(__file__, 1515, 11), getitem___2222, int_2219)
    
    int_2224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, 24), 'int')
    # Applying the binary operator '<' (line 1515)
    result_lt_2225 = python_operator(stypy.reporting.localization.Localization(__file__, 1515, 11), '<', subscript_call_result_2223, int_2224)
    
    # Testing the type of an if condition (line 1515)
    if_condition_2226 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1515, 8), result_lt_2225)
    # Assigning a type to the variable 'if_condition_2226' (line 1515)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1515, 8), 'if_condition_2226', if_condition_2226)
    # SSA begins for if statement (line 1515)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1516)
    # Processing the call arguments (line 1516)
    str_2228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1516, 29), 'str', 'Inconsistency matrix %smust have at least one row.')
    # Getting the type of 'name_str' (line 1517)
    name_str_2229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 38), 'name_str', False)
    # Applying the binary operator '%' (line 1516)
    result_mod_2230 = python_operator(stypy.reporting.localization.Localization(__file__, 1516, 29), '%', str_2228, name_str_2229)
    
    # Processing the call keyword arguments (line 1516)
    kwargs_2231 = {}
    # Getting the type of 'ValueError' (line 1516)
    ValueError_2227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1516)
    ValueError_call_result_2232 = invoke(stypy.reporting.localization.Localization(__file__, 1516, 18), ValueError_2227, *[result_mod_2230], **kwargs_2231)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1516, 12), ValueError_call_result_2232, 'raise parameter', BaseException)
    # SSA join for if statement (line 1515)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 1518)
    # Processing the call keyword arguments (line 1518)
    kwargs_2241 = {}
    
    
    # Obtaining the type of the subscript
    slice_2233 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1518, 12), None, None, None)
    int_2234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1518, 17), 'int')
    # Getting the type of 'R' (line 1518)
    R_2235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 12), 'R', False)
    # Obtaining the member '__getitem__' of a type (line 1518)
    getitem___2236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1518, 12), R_2235, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1518)
    subscript_call_result_2237 = invoke(stypy.reporting.localization.Localization(__file__, 1518, 12), getitem___2236, (slice_2233, int_2234))
    
    int_2238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1518, 22), 'int')
    # Applying the binary operator '<' (line 1518)
    result_lt_2239 = python_operator(stypy.reporting.localization.Localization(__file__, 1518, 12), '<', subscript_call_result_2237, int_2238)
    
    # Obtaining the member 'any' of a type (line 1518)
    any_2240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1518, 12), result_lt_2239, 'any')
    # Calling any(args, kwargs) (line 1518)
    any_call_result_2242 = invoke(stypy.reporting.localization.Localization(__file__, 1518, 12), any_2240, *[], **kwargs_2241)
    
    # Testing the type of an if condition (line 1518)
    if_condition_2243 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1518, 8), any_call_result_2242)
    # Assigning a type to the variable 'if_condition_2243' (line 1518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1518, 8), 'if_condition_2243', if_condition_2243)
    # SSA begins for if statement (line 1518)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1519)
    # Processing the call arguments (line 1519)
    str_2245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1519, 29), 'str', 'Inconsistency matrix %scontains negative link height means.')
    # Getting the type of 'name_str' (line 1520)
    name_str_2246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 47), 'name_str', False)
    # Applying the binary operator '%' (line 1519)
    result_mod_2247 = python_operator(stypy.reporting.localization.Localization(__file__, 1519, 29), '%', str_2245, name_str_2246)
    
    # Processing the call keyword arguments (line 1519)
    kwargs_2248 = {}
    # Getting the type of 'ValueError' (line 1519)
    ValueError_2244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1519)
    ValueError_call_result_2249 = invoke(stypy.reporting.localization.Localization(__file__, 1519, 18), ValueError_2244, *[result_mod_2247], **kwargs_2248)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1519, 12), ValueError_call_result_2249, 'raise parameter', BaseException)
    # SSA join for if statement (line 1518)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 1521)
    # Processing the call keyword arguments (line 1521)
    kwargs_2258 = {}
    
    
    # Obtaining the type of the subscript
    slice_2250 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1521, 12), None, None, None)
    int_2251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1521, 17), 'int')
    # Getting the type of 'R' (line 1521)
    R_2252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 12), 'R', False)
    # Obtaining the member '__getitem__' of a type (line 1521)
    getitem___2253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1521, 12), R_2252, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1521)
    subscript_call_result_2254 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 12), getitem___2253, (slice_2250, int_2251))
    
    int_2255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1521, 22), 'int')
    # Applying the binary operator '<' (line 1521)
    result_lt_2256 = python_operator(stypy.reporting.localization.Localization(__file__, 1521, 12), '<', subscript_call_result_2254, int_2255)
    
    # Obtaining the member 'any' of a type (line 1521)
    any_2257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1521, 12), result_lt_2256, 'any')
    # Calling any(args, kwargs) (line 1521)
    any_call_result_2259 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 12), any_2257, *[], **kwargs_2258)
    
    # Testing the type of an if condition (line 1521)
    if_condition_2260 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1521, 8), any_call_result_2259)
    # Assigning a type to the variable 'if_condition_2260' (line 1521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1521, 8), 'if_condition_2260', if_condition_2260)
    # SSA begins for if statement (line 1521)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1522)
    # Processing the call arguments (line 1522)
    str_2262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1522, 29), 'str', 'Inconsistency matrix %scontains negative link height standard deviations.')
    # Getting the type of 'name_str' (line 1523)
    name_str_2263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 61), 'name_str', False)
    # Applying the binary operator '%' (line 1522)
    result_mod_2264 = python_operator(stypy.reporting.localization.Localization(__file__, 1522, 29), '%', str_2262, name_str_2263)
    
    # Processing the call keyword arguments (line 1522)
    kwargs_2265 = {}
    # Getting the type of 'ValueError' (line 1522)
    ValueError_2261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1522)
    ValueError_call_result_2266 = invoke(stypy.reporting.localization.Localization(__file__, 1522, 18), ValueError_2261, *[result_mod_2264], **kwargs_2265)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1522, 12), ValueError_call_result_2266, 'raise parameter', BaseException)
    # SSA join for if statement (line 1521)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 1524)
    # Processing the call keyword arguments (line 1524)
    kwargs_2275 = {}
    
    
    # Obtaining the type of the subscript
    slice_2267 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1524, 12), None, None, None)
    int_2268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, 17), 'int')
    # Getting the type of 'R' (line 1524)
    R_2269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'R', False)
    # Obtaining the member '__getitem__' of a type (line 1524)
    getitem___2270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 12), R_2269, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1524)
    subscript_call_result_2271 = invoke(stypy.reporting.localization.Localization(__file__, 1524, 12), getitem___2270, (slice_2267, int_2268))
    
    int_2272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, 22), 'int')
    # Applying the binary operator '<' (line 1524)
    result_lt_2273 = python_operator(stypy.reporting.localization.Localization(__file__, 1524, 12), '<', subscript_call_result_2271, int_2272)
    
    # Obtaining the member 'any' of a type (line 1524)
    any_2274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 12), result_lt_2273, 'any')
    # Calling any(args, kwargs) (line 1524)
    any_call_result_2276 = invoke(stypy.reporting.localization.Localization(__file__, 1524, 12), any_2274, *[], **kwargs_2275)
    
    # Testing the type of an if condition (line 1524)
    if_condition_2277 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1524, 8), any_call_result_2276)
    # Assigning a type to the variable 'if_condition_2277' (line 1524)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 8), 'if_condition_2277', if_condition_2277)
    # SSA begins for if statement (line 1524)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1525)
    # Processing the call arguments (line 1525)
    str_2279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 29), 'str', 'Inconsistency matrix %scontains negative link counts.')
    # Getting the type of 'name_str' (line 1526)
    name_str_2280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 41), 'name_str', False)
    # Applying the binary operator '%' (line 1525)
    result_mod_2281 = python_operator(stypy.reporting.localization.Localization(__file__, 1525, 29), '%', str_2279, name_str_2280)
    
    # Processing the call keyword arguments (line 1525)
    kwargs_2282 = {}
    # Getting the type of 'ValueError' (line 1525)
    ValueError_2278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1525)
    ValueError_call_result_2283 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 18), ValueError_2278, *[result_mod_2281], **kwargs_2282)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1525, 12), ValueError_call_result_2283, 'raise parameter', BaseException)
    # SSA join for if statement (line 1524)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 1502)
    # SSA branch for the except 'Exception' branch of a try statement (line 1502)
    # Storing handler type
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'Exception' (line 1527)
    Exception_2284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 11), 'Exception')
    # Assigning a type to the variable 'e' (line 1527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 4), 'e', Exception_2284)
    
    # Getting the type of 'throw' (line 1528)
    throw_2285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 11), 'throw')
    # Testing the type of an if condition (line 1528)
    if_condition_2286 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1528, 8), throw_2285)
    # Assigning a type to the variable 'if_condition_2286' (line 1528)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 8), 'if_condition_2286', if_condition_2286)
    # SSA begins for if statement (line 1528)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1528)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'warning' (line 1530)
    warning_2287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 11), 'warning')
    # Testing the type of an if condition (line 1530)
    if_condition_2288 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1530, 8), warning_2287)
    # Assigning a type to the variable 'if_condition_2288' (line 1530)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1530, 8), 'if_condition_2288', if_condition_2288)
    # SSA begins for if statement (line 1530)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _warning(...): (line 1531)
    # Processing the call arguments (line 1531)
    
    # Call to str(...): (line 1531)
    # Processing the call arguments (line 1531)
    # Getting the type of 'e' (line 1531)
    e_2291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 25), 'e', False)
    # Processing the call keyword arguments (line 1531)
    kwargs_2292 = {}
    # Getting the type of 'str' (line 1531)
    str_2290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 21), 'str', False)
    # Calling str(args, kwargs) (line 1531)
    str_call_result_2293 = invoke(stypy.reporting.localization.Localization(__file__, 1531, 21), str_2290, *[e_2291], **kwargs_2292)
    
    # Processing the call keyword arguments (line 1531)
    kwargs_2294 = {}
    # Getting the type of '_warning' (line 1531)
    _warning_2289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 12), '_warning', False)
    # Calling _warning(args, kwargs) (line 1531)
    _warning_call_result_2295 = invoke(stypy.reporting.localization.Localization(__file__, 1531, 12), _warning_2289, *[str_call_result_2293], **kwargs_2294)
    
    # SSA join for if statement (line 1530)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1532):
    
    # Assigning a Name to a Name (line 1532):
    # Getting the type of 'False' (line 1532)
    False_2296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 16), 'False')
    # Assigning a type to the variable 'valid' (line 1532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'valid', False_2296)
    # SSA join for try-except statement (line 1502)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'valid' (line 1534)
    valid_2297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 11), 'valid')
    # Assigning a type to the variable 'stypy_return_type' (line 1534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 4), 'stypy_return_type', valid_2297)
    
    # ################# End of 'is_valid_im(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_valid_im' in the type store
    # Getting the type of 'stypy_return_type' (line 1472)
    stypy_return_type_2298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2298)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_valid_im'
    return stypy_return_type_2298

# Assigning a type to the variable 'is_valid_im' (line 1472)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 0), 'is_valid_im', is_valid_im)

@norecursion
def is_valid_linkage(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'False' (line 1537)
    False_2299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 32), 'False')
    # Getting the type of 'False' (line 1537)
    False_2300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 45), 'False')
    # Getting the type of 'None' (line 1537)
    None_2301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 57), 'None')
    defaults = [False_2299, False_2300, None_2301]
    # Create a new context for function 'is_valid_linkage'
    module_type_store = module_type_store.open_function_context('is_valid_linkage', 1537, 0, False)
    
    # Passed parameters checking function
    is_valid_linkage.stypy_localization = localization
    is_valid_linkage.stypy_type_of_self = None
    is_valid_linkage.stypy_type_store = module_type_store
    is_valid_linkage.stypy_function_name = 'is_valid_linkage'
    is_valid_linkage.stypy_param_names_list = ['Z', 'warning', 'throw', 'name']
    is_valid_linkage.stypy_varargs_param_name = None
    is_valid_linkage.stypy_kwargs_param_name = None
    is_valid_linkage.stypy_call_defaults = defaults
    is_valid_linkage.stypy_call_varargs = varargs
    is_valid_linkage.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_valid_linkage', ['Z', 'warning', 'throw', 'name'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_valid_linkage', localization, ['Z', 'warning', 'throw', 'name'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_valid_linkage(...)' code ##################

    str_2302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, (-1)), 'str', '\n    Check the validity of a linkage matrix.\n\n    A linkage matrix is valid if it is a two dimensional array (type double)\n    with :math:`n` rows and 4 columns.  The first two columns must contain\n    indices between 0 and :math:`2n-1`. For a given row ``i``, the following\n    two expressions have to hold:\n\n    .. math::\n\n        0 \\leq \\mathtt{Z[i,0]} \\leq i+n-1\n        0 \\leq Z[i,1] \\leq i+n-1\n\n    I.e. a cluster cannot join another cluster unless the cluster being joined\n    has been generated.\n\n    Parameters\n    ----------\n    Z : array_like\n        Linkage matrix.\n    warning : bool, optional\n        When True, issues a Python warning if the linkage\n        matrix passed is invalid.\n    throw : bool, optional\n        When True, throws a Python exception if the linkage\n        matrix passed is invalid.\n    name : str, optional\n        This string refers to the variable name of the invalid\n        linkage matrix.\n\n    Returns\n    -------\n    b : bool\n        True if the inconsistency matrix is valid.\n\n    ')
    
    # Assigning a Call to a Name (line 1574):
    
    # Assigning a Call to a Name (line 1574):
    
    # Call to asarray(...): (line 1574)
    # Processing the call arguments (line 1574)
    # Getting the type of 'Z' (line 1574)
    Z_2305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 19), 'Z', False)
    # Processing the call keyword arguments (line 1574)
    str_2306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1574, 28), 'str', 'c')
    keyword_2307 = str_2306
    kwargs_2308 = {'order': keyword_2307}
    # Getting the type of 'np' (line 1574)
    np_2303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1574, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1574)
    asarray_2304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1574, 8), np_2303, 'asarray')
    # Calling asarray(args, kwargs) (line 1574)
    asarray_call_result_2309 = invoke(stypy.reporting.localization.Localization(__file__, 1574, 8), asarray_2304, *[Z_2305], **kwargs_2308)
    
    # Assigning a type to the variable 'Z' (line 1574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1574, 4), 'Z', asarray_call_result_2309)
    
    # Assigning a Name to a Name (line 1575):
    
    # Assigning a Name to a Name (line 1575):
    # Getting the type of 'True' (line 1575)
    True_2310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 12), 'True')
    # Assigning a type to the variable 'valid' (line 1575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 4), 'valid', True_2310)
    
    # Assigning a IfExp to a Name (line 1576):
    
    # Assigning a IfExp to a Name (line 1576):
    
    # Getting the type of 'name' (line 1576)
    name_2311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 31), 'name')
    # Testing the type of an if expression (line 1576)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1576, 15), name_2311)
    # SSA begins for if expression (line 1576)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_2312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 15), 'str', '%r ')
    # Getting the type of 'name' (line 1576)
    name_2313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 23), 'name')
    # Applying the binary operator '%' (line 1576)
    result_mod_2314 = python_operator(stypy.reporting.localization.Localization(__file__, 1576, 15), '%', str_2312, name_2313)
    
    # SSA branch for the else part of an if expression (line 1576)
    module_type_store.open_ssa_branch('if expression else')
    str_2315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 41), 'str', '')
    # SSA join for if expression (line 1576)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_2316 = union_type.UnionType.add(result_mod_2314, str_2315)
    
    # Assigning a type to the variable 'name_str' (line 1576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 4), 'name_str', if_exp_2316)
    
    
    # SSA begins for try-except statement (line 1577)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    
    # Call to type(...): (line 1578)
    # Processing the call arguments (line 1578)
    # Getting the type of 'Z' (line 1578)
    Z_2318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 16), 'Z', False)
    # Processing the call keyword arguments (line 1578)
    kwargs_2319 = {}
    # Getting the type of 'type' (line 1578)
    type_2317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 11), 'type', False)
    # Calling type(args, kwargs) (line 1578)
    type_call_result_2320 = invoke(stypy.reporting.localization.Localization(__file__, 1578, 11), type_2317, *[Z_2318], **kwargs_2319)
    
    # Getting the type of 'np' (line 1578)
    np_2321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 22), 'np')
    # Obtaining the member 'ndarray' of a type (line 1578)
    ndarray_2322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1578, 22), np_2321, 'ndarray')
    # Applying the binary operator '!=' (line 1578)
    result_ne_2323 = python_operator(stypy.reporting.localization.Localization(__file__, 1578, 11), '!=', type_call_result_2320, ndarray_2322)
    
    # Testing the type of an if condition (line 1578)
    if_condition_2324 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1578, 8), result_ne_2323)
    # Assigning a type to the variable 'if_condition_2324' (line 1578)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 8), 'if_condition_2324', if_condition_2324)
    # SSA begins for if statement (line 1578)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 1579)
    # Processing the call arguments (line 1579)
    str_2326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1579, 28), 'str', 'Passed linkage argument %sis not a valid array.')
    # Getting the type of 'name_str' (line 1580)
    name_str_2327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 28), 'name_str', False)
    # Applying the binary operator '%' (line 1579)
    result_mod_2328 = python_operator(stypy.reporting.localization.Localization(__file__, 1579, 28), '%', str_2326, name_str_2327)
    
    # Processing the call keyword arguments (line 1579)
    kwargs_2329 = {}
    # Getting the type of 'TypeError' (line 1579)
    TypeError_2325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 18), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1579)
    TypeError_call_result_2330 = invoke(stypy.reporting.localization.Localization(__file__, 1579, 18), TypeError_2325, *[result_mod_2328], **kwargs_2329)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1579, 12), TypeError_call_result_2330, 'raise parameter', BaseException)
    # SSA join for if statement (line 1578)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'Z' (line 1581)
    Z_2331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 11), 'Z')
    # Obtaining the member 'dtype' of a type (line 1581)
    dtype_2332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1581, 11), Z_2331, 'dtype')
    # Getting the type of 'np' (line 1581)
    np_2333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 22), 'np')
    # Obtaining the member 'double' of a type (line 1581)
    double_2334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1581, 22), np_2333, 'double')
    # Applying the binary operator '!=' (line 1581)
    result_ne_2335 = python_operator(stypy.reporting.localization.Localization(__file__, 1581, 11), '!=', dtype_2332, double_2334)
    
    # Testing the type of an if condition (line 1581)
    if_condition_2336 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1581, 8), result_ne_2335)
    # Assigning a type to the variable 'if_condition_2336' (line 1581)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 8), 'if_condition_2336', if_condition_2336)
    # SSA begins for if statement (line 1581)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 1582)
    # Processing the call arguments (line 1582)
    str_2338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1582, 28), 'str', 'Linkage matrix %smust contain doubles.')
    # Getting the type of 'name_str' (line 1582)
    name_str_2339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 71), 'name_str', False)
    # Applying the binary operator '%' (line 1582)
    result_mod_2340 = python_operator(stypy.reporting.localization.Localization(__file__, 1582, 28), '%', str_2338, name_str_2339)
    
    # Processing the call keyword arguments (line 1582)
    kwargs_2341 = {}
    # Getting the type of 'TypeError' (line 1582)
    TypeError_2337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 18), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1582)
    TypeError_call_result_2342 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 18), TypeError_2337, *[result_mod_2340], **kwargs_2341)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1582, 12), TypeError_call_result_2342, 'raise parameter', BaseException)
    # SSA join for if statement (line 1581)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1583)
    # Processing the call arguments (line 1583)
    # Getting the type of 'Z' (line 1583)
    Z_2344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 15), 'Z', False)
    # Obtaining the member 'shape' of a type (line 1583)
    shape_2345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 15), Z_2344, 'shape')
    # Processing the call keyword arguments (line 1583)
    kwargs_2346 = {}
    # Getting the type of 'len' (line 1583)
    len_2343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 11), 'len', False)
    # Calling len(args, kwargs) (line 1583)
    len_call_result_2347 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 11), len_2343, *[shape_2345], **kwargs_2346)
    
    int_2348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 27), 'int')
    # Applying the binary operator '!=' (line 1583)
    result_ne_2349 = python_operator(stypy.reporting.localization.Localization(__file__, 1583, 11), '!=', len_call_result_2347, int_2348)
    
    # Testing the type of an if condition (line 1583)
    if_condition_2350 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1583, 8), result_ne_2349)
    # Assigning a type to the variable 'if_condition_2350' (line 1583)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 8), 'if_condition_2350', if_condition_2350)
    # SSA begins for if statement (line 1583)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1584)
    # Processing the call arguments (line 1584)
    str_2352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1584, 29), 'str', 'Linkage matrix %smust have shape=2 (i.e. be two-dimensional).')
    # Getting the type of 'name_str' (line 1585)
    name_str_2353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 51), 'name_str', False)
    # Applying the binary operator '%' (line 1584)
    result_mod_2354 = python_operator(stypy.reporting.localization.Localization(__file__, 1584, 29), '%', str_2352, name_str_2353)
    
    # Processing the call keyword arguments (line 1584)
    kwargs_2355 = {}
    # Getting the type of 'ValueError' (line 1584)
    ValueError_2351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1584)
    ValueError_call_result_2356 = invoke(stypy.reporting.localization.Localization(__file__, 1584, 18), ValueError_2351, *[result_mod_2354], **kwargs_2355)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1584, 12), ValueError_call_result_2356, 'raise parameter', BaseException)
    # SSA join for if statement (line 1583)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_2357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1586, 19), 'int')
    # Getting the type of 'Z' (line 1586)
    Z_2358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 11), 'Z')
    # Obtaining the member 'shape' of a type (line 1586)
    shape_2359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 11), Z_2358, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1586)
    getitem___2360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 11), shape_2359, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1586)
    subscript_call_result_2361 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 11), getitem___2360, int_2357)
    
    int_2362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1586, 25), 'int')
    # Applying the binary operator '!=' (line 1586)
    result_ne_2363 = python_operator(stypy.reporting.localization.Localization(__file__, 1586, 11), '!=', subscript_call_result_2361, int_2362)
    
    # Testing the type of an if condition (line 1586)
    if_condition_2364 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1586, 8), result_ne_2363)
    # Assigning a type to the variable 'if_condition_2364' (line 1586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1586, 8), 'if_condition_2364', if_condition_2364)
    # SSA begins for if statement (line 1586)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1587)
    # Processing the call arguments (line 1587)
    str_2366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 29), 'str', 'Linkage matrix %smust have 4 columns.')
    # Getting the type of 'name_str' (line 1587)
    name_str_2367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 71), 'name_str', False)
    # Applying the binary operator '%' (line 1587)
    result_mod_2368 = python_operator(stypy.reporting.localization.Localization(__file__, 1587, 29), '%', str_2366, name_str_2367)
    
    # Processing the call keyword arguments (line 1587)
    kwargs_2369 = {}
    # Getting the type of 'ValueError' (line 1587)
    ValueError_2365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1587)
    ValueError_call_result_2370 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 18), ValueError_2365, *[result_mod_2368], **kwargs_2369)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1587, 12), ValueError_call_result_2370, 'raise parameter', BaseException)
    # SSA join for if statement (line 1586)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_2371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1588, 19), 'int')
    # Getting the type of 'Z' (line 1588)
    Z_2372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 11), 'Z')
    # Obtaining the member 'shape' of a type (line 1588)
    shape_2373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1588, 11), Z_2372, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1588)
    getitem___2374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1588, 11), shape_2373, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1588)
    subscript_call_result_2375 = invoke(stypy.reporting.localization.Localization(__file__, 1588, 11), getitem___2374, int_2371)
    
    int_2376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1588, 25), 'int')
    # Applying the binary operator '==' (line 1588)
    result_eq_2377 = python_operator(stypy.reporting.localization.Localization(__file__, 1588, 11), '==', subscript_call_result_2375, int_2376)
    
    # Testing the type of an if condition (line 1588)
    if_condition_2378 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1588, 8), result_eq_2377)
    # Assigning a type to the variable 'if_condition_2378' (line 1588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1588, 8), 'if_condition_2378', if_condition_2378)
    # SSA begins for if statement (line 1588)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1589)
    # Processing the call arguments (line 1589)
    str_2380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1589, 29), 'str', 'Linkage must be computed on at least two observations.')
    # Processing the call keyword arguments (line 1589)
    kwargs_2381 = {}
    # Getting the type of 'ValueError' (line 1589)
    ValueError_2379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1589)
    ValueError_call_result_2382 = invoke(stypy.reporting.localization.Localization(__file__, 1589, 18), ValueError_2379, *[str_2380], **kwargs_2381)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1589, 12), ValueError_call_result_2382, 'raise parameter', BaseException)
    # SSA join for if statement (line 1588)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1591):
    
    # Assigning a Subscript to a Name (line 1591):
    
    # Obtaining the type of the subscript
    int_2383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1591, 20), 'int')
    # Getting the type of 'Z' (line 1591)
    Z_2384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 12), 'Z')
    # Obtaining the member 'shape' of a type (line 1591)
    shape_2385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 12), Z_2384, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1591)
    getitem___2386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 12), shape_2385, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1591)
    subscript_call_result_2387 = invoke(stypy.reporting.localization.Localization(__file__, 1591, 12), getitem___2386, int_2383)
    
    # Assigning a type to the variable 'n' (line 1591)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1591, 8), 'n', subscript_call_result_2387)
    
    
    # Getting the type of 'n' (line 1592)
    n_2388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 11), 'n')
    int_2389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1592, 15), 'int')
    # Applying the binary operator '>' (line 1592)
    result_gt_2390 = python_operator(stypy.reporting.localization.Localization(__file__, 1592, 11), '>', n_2388, int_2389)
    
    # Testing the type of an if condition (line 1592)
    if_condition_2391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1592, 8), result_gt_2390)
    # Assigning a type to the variable 'if_condition_2391' (line 1592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 8), 'if_condition_2391', if_condition_2391)
    # SSA begins for if statement (line 1592)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Call to any(...): (line 1593)
    # Processing the call keyword arguments (line 1593)
    kwargs_2400 = {}
    
    
    # Obtaining the type of the subscript
    slice_2392 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1593, 17), None, None, None)
    int_2393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 22), 'int')
    # Getting the type of 'Z' (line 1593)
    Z_2394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 17), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1593)
    getitem___2395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 17), Z_2394, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1593)
    subscript_call_result_2396 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 17), getitem___2395, (slice_2392, int_2393))
    
    int_2397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 27), 'int')
    # Applying the binary operator '<' (line 1593)
    result_lt_2398 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 17), '<', subscript_call_result_2396, int_2397)
    
    # Obtaining the member 'any' of a type (line 1593)
    any_2399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 17), result_lt_2398, 'any')
    # Calling any(args, kwargs) (line 1593)
    any_call_result_2401 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 17), any_2399, *[], **kwargs_2400)
    
    
    # Call to any(...): (line 1593)
    # Processing the call keyword arguments (line 1593)
    kwargs_2410 = {}
    
    
    # Obtaining the type of the subscript
    slice_2402 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1593, 40), None, None, None)
    int_2403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 45), 'int')
    # Getting the type of 'Z' (line 1593)
    Z_2404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 40), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1593)
    getitem___2405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 40), Z_2404, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1593)
    subscript_call_result_2406 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 40), getitem___2405, (slice_2402, int_2403))
    
    int_2407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 50), 'int')
    # Applying the binary operator '<' (line 1593)
    result_lt_2408 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 40), '<', subscript_call_result_2406, int_2407)
    
    # Obtaining the member 'any' of a type (line 1593)
    any_2409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 40), result_lt_2408, 'any')
    # Calling any(args, kwargs) (line 1593)
    any_call_result_2411 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 40), any_2409, *[], **kwargs_2410)
    
    # Applying the binary operator 'or' (line 1593)
    result_or_keyword_2412 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 16), 'or', any_call_result_2401, any_call_result_2411)
    
    # Testing the type of an if condition (line 1593)
    if_condition_2413 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1593, 12), result_or_keyword_2412)
    # Assigning a type to the variable 'if_condition_2413' (line 1593)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 12), 'if_condition_2413', if_condition_2413)
    # SSA begins for if statement (line 1593)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1594)
    # Processing the call arguments (line 1594)
    str_2415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1594, 33), 'str', 'Linkage %scontains negative indices.')
    # Getting the type of 'name_str' (line 1595)
    name_str_2416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 33), 'name_str', False)
    # Applying the binary operator '%' (line 1594)
    result_mod_2417 = python_operator(stypy.reporting.localization.Localization(__file__, 1594, 33), '%', str_2415, name_str_2416)
    
    # Processing the call keyword arguments (line 1594)
    kwargs_2418 = {}
    # Getting the type of 'ValueError' (line 1594)
    ValueError_2414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1594)
    ValueError_call_result_2419 = invoke(stypy.reporting.localization.Localization(__file__, 1594, 22), ValueError_2414, *[result_mod_2417], **kwargs_2418)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1594, 16), ValueError_call_result_2419, 'raise parameter', BaseException)
    # SSA join for if statement (line 1593)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 1596)
    # Processing the call keyword arguments (line 1596)
    kwargs_2428 = {}
    
    
    # Obtaining the type of the subscript
    slice_2420 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1596, 16), None, None, None)
    int_2421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1596, 21), 'int')
    # Getting the type of 'Z' (line 1596)
    Z_2422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 16), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1596)
    getitem___2423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 16), Z_2422, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1596)
    subscript_call_result_2424 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 16), getitem___2423, (slice_2420, int_2421))
    
    int_2425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1596, 26), 'int')
    # Applying the binary operator '<' (line 1596)
    result_lt_2426 = python_operator(stypy.reporting.localization.Localization(__file__, 1596, 16), '<', subscript_call_result_2424, int_2425)
    
    # Obtaining the member 'any' of a type (line 1596)
    any_2427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1596, 16), result_lt_2426, 'any')
    # Calling any(args, kwargs) (line 1596)
    any_call_result_2429 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 16), any_2427, *[], **kwargs_2428)
    
    # Testing the type of an if condition (line 1596)
    if_condition_2430 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1596, 12), any_call_result_2429)
    # Assigning a type to the variable 'if_condition_2430' (line 1596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 12), 'if_condition_2430', if_condition_2430)
    # SSA begins for if statement (line 1596)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1597)
    # Processing the call arguments (line 1597)
    str_2432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1597, 33), 'str', 'Linkage %scontains negative distances.')
    # Getting the type of 'name_str' (line 1598)
    name_str_2433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 33), 'name_str', False)
    # Applying the binary operator '%' (line 1597)
    result_mod_2434 = python_operator(stypy.reporting.localization.Localization(__file__, 1597, 33), '%', str_2432, name_str_2433)
    
    # Processing the call keyword arguments (line 1597)
    kwargs_2435 = {}
    # Getting the type of 'ValueError' (line 1597)
    ValueError_2431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1597)
    ValueError_call_result_2436 = invoke(stypy.reporting.localization.Localization(__file__, 1597, 22), ValueError_2431, *[result_mod_2434], **kwargs_2435)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1597, 16), ValueError_call_result_2436, 'raise parameter', BaseException)
    # SSA join for if statement (line 1596)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 1599)
    # Processing the call keyword arguments (line 1599)
    kwargs_2445 = {}
    
    
    # Obtaining the type of the subscript
    slice_2437 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1599, 16), None, None, None)
    int_2438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1599, 21), 'int')
    # Getting the type of 'Z' (line 1599)
    Z_2439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 16), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1599)
    getitem___2440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1599, 16), Z_2439, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1599)
    subscript_call_result_2441 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 16), getitem___2440, (slice_2437, int_2438))
    
    int_2442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1599, 26), 'int')
    # Applying the binary operator '<' (line 1599)
    result_lt_2443 = python_operator(stypy.reporting.localization.Localization(__file__, 1599, 16), '<', subscript_call_result_2441, int_2442)
    
    # Obtaining the member 'any' of a type (line 1599)
    any_2444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1599, 16), result_lt_2443, 'any')
    # Calling any(args, kwargs) (line 1599)
    any_call_result_2446 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 16), any_2444, *[], **kwargs_2445)
    
    # Testing the type of an if condition (line 1599)
    if_condition_2447 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1599, 12), any_call_result_2446)
    # Assigning a type to the variable 'if_condition_2447' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 12), 'if_condition_2447', if_condition_2447)
    # SSA begins for if statement (line 1599)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1600)
    # Processing the call arguments (line 1600)
    str_2449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1600, 33), 'str', 'Linkage %scontains negative counts.')
    # Getting the type of 'name_str' (line 1601)
    name_str_2450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 33), 'name_str', False)
    # Applying the binary operator '%' (line 1600)
    result_mod_2451 = python_operator(stypy.reporting.localization.Localization(__file__, 1600, 33), '%', str_2449, name_str_2450)
    
    # Processing the call keyword arguments (line 1600)
    kwargs_2452 = {}
    # Getting the type of 'ValueError' (line 1600)
    ValueError_2448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1600)
    ValueError_call_result_2453 = invoke(stypy.reporting.localization.Localization(__file__, 1600, 22), ValueError_2448, *[result_mod_2451], **kwargs_2452)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1600, 16), ValueError_call_result_2453, 'raise parameter', BaseException)
    # SSA join for if statement (line 1599)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1592)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to _check_hierarchy_uses_cluster_before_formed(...): (line 1602)
    # Processing the call arguments (line 1602)
    # Getting the type of 'Z' (line 1602)
    Z_2455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 55), 'Z', False)
    # Processing the call keyword arguments (line 1602)
    kwargs_2456 = {}
    # Getting the type of '_check_hierarchy_uses_cluster_before_formed' (line 1602)
    _check_hierarchy_uses_cluster_before_formed_2454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1602, 11), '_check_hierarchy_uses_cluster_before_formed', False)
    # Calling _check_hierarchy_uses_cluster_before_formed(args, kwargs) (line 1602)
    _check_hierarchy_uses_cluster_before_formed_call_result_2457 = invoke(stypy.reporting.localization.Localization(__file__, 1602, 11), _check_hierarchy_uses_cluster_before_formed_2454, *[Z_2455], **kwargs_2456)
    
    # Testing the type of an if condition (line 1602)
    if_condition_2458 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1602, 8), _check_hierarchy_uses_cluster_before_formed_call_result_2457)
    # Assigning a type to the variable 'if_condition_2458' (line 1602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1602, 8), 'if_condition_2458', if_condition_2458)
    # SSA begins for if statement (line 1602)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1603)
    # Processing the call arguments (line 1603)
    str_2460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1603, 29), 'str', 'Linkage %suses non-singleton cluster before it is formed.')
    # Getting the type of 'name_str' (line 1604)
    name_str_2461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 47), 'name_str', False)
    # Applying the binary operator '%' (line 1603)
    result_mod_2462 = python_operator(stypy.reporting.localization.Localization(__file__, 1603, 29), '%', str_2460, name_str_2461)
    
    # Processing the call keyword arguments (line 1603)
    kwargs_2463 = {}
    # Getting the type of 'ValueError' (line 1603)
    ValueError_2459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1603)
    ValueError_call_result_2464 = invoke(stypy.reporting.localization.Localization(__file__, 1603, 18), ValueError_2459, *[result_mod_2462], **kwargs_2463)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1603, 12), ValueError_call_result_2464, 'raise parameter', BaseException)
    # SSA join for if statement (line 1602)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to _check_hierarchy_uses_cluster_more_than_once(...): (line 1605)
    # Processing the call arguments (line 1605)
    # Getting the type of 'Z' (line 1605)
    Z_2466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 56), 'Z', False)
    # Processing the call keyword arguments (line 1605)
    kwargs_2467 = {}
    # Getting the type of '_check_hierarchy_uses_cluster_more_than_once' (line 1605)
    _check_hierarchy_uses_cluster_more_than_once_2465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 11), '_check_hierarchy_uses_cluster_more_than_once', False)
    # Calling _check_hierarchy_uses_cluster_more_than_once(args, kwargs) (line 1605)
    _check_hierarchy_uses_cluster_more_than_once_call_result_2468 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 11), _check_hierarchy_uses_cluster_more_than_once_2465, *[Z_2466], **kwargs_2467)
    
    # Testing the type of an if condition (line 1605)
    if_condition_2469 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1605, 8), _check_hierarchy_uses_cluster_more_than_once_call_result_2468)
    # Assigning a type to the variable 'if_condition_2469' (line 1605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 8), 'if_condition_2469', if_condition_2469)
    # SSA begins for if statement (line 1605)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1606)
    # Processing the call arguments (line 1606)
    str_2471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1606, 29), 'str', 'Linkage %suses the same cluster more than once.')
    # Getting the type of 'name_str' (line 1607)
    name_str_2472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 31), 'name_str', False)
    # Applying the binary operator '%' (line 1606)
    result_mod_2473 = python_operator(stypy.reporting.localization.Localization(__file__, 1606, 29), '%', str_2471, name_str_2472)
    
    # Processing the call keyword arguments (line 1606)
    kwargs_2474 = {}
    # Getting the type of 'ValueError' (line 1606)
    ValueError_2470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1606)
    ValueError_call_result_2475 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 18), ValueError_2470, *[result_mod_2473], **kwargs_2474)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1606, 12), ValueError_call_result_2475, 'raise parameter', BaseException)
    # SSA join for if statement (line 1605)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 1577)
    # SSA branch for the except 'Exception' branch of a try statement (line 1577)
    # Storing handler type
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'Exception' (line 1608)
    Exception_2476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 11), 'Exception')
    # Assigning a type to the variable 'e' (line 1608)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1608, 4), 'e', Exception_2476)
    
    # Getting the type of 'throw' (line 1609)
    throw_2477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 11), 'throw')
    # Testing the type of an if condition (line 1609)
    if_condition_2478 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1609, 8), throw_2477)
    # Assigning a type to the variable 'if_condition_2478' (line 1609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1609, 8), 'if_condition_2478', if_condition_2478)
    # SSA begins for if statement (line 1609)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1609)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'warning' (line 1611)
    warning_2479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 11), 'warning')
    # Testing the type of an if condition (line 1611)
    if_condition_2480 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1611, 8), warning_2479)
    # Assigning a type to the variable 'if_condition_2480' (line 1611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1611, 8), 'if_condition_2480', if_condition_2480)
    # SSA begins for if statement (line 1611)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _warning(...): (line 1612)
    # Processing the call arguments (line 1612)
    
    # Call to str(...): (line 1612)
    # Processing the call arguments (line 1612)
    # Getting the type of 'e' (line 1612)
    e_2483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 25), 'e', False)
    # Processing the call keyword arguments (line 1612)
    kwargs_2484 = {}
    # Getting the type of 'str' (line 1612)
    str_2482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 21), 'str', False)
    # Calling str(args, kwargs) (line 1612)
    str_call_result_2485 = invoke(stypy.reporting.localization.Localization(__file__, 1612, 21), str_2482, *[e_2483], **kwargs_2484)
    
    # Processing the call keyword arguments (line 1612)
    kwargs_2486 = {}
    # Getting the type of '_warning' (line 1612)
    _warning_2481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 12), '_warning', False)
    # Calling _warning(args, kwargs) (line 1612)
    _warning_call_result_2487 = invoke(stypy.reporting.localization.Localization(__file__, 1612, 12), _warning_2481, *[str_call_result_2485], **kwargs_2486)
    
    # SSA join for if statement (line 1611)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1613):
    
    # Assigning a Name to a Name (line 1613):
    # Getting the type of 'False' (line 1613)
    False_2488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 16), 'False')
    # Assigning a type to the variable 'valid' (line 1613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'valid', False_2488)
    # SSA join for try-except statement (line 1577)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'valid' (line 1615)
    valid_2489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 11), 'valid')
    # Assigning a type to the variable 'stypy_return_type' (line 1615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 4), 'stypy_return_type', valid_2489)
    
    # ################# End of 'is_valid_linkage(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_valid_linkage' in the type store
    # Getting the type of 'stypy_return_type' (line 1537)
    stypy_return_type_2490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2490)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_valid_linkage'
    return stypy_return_type_2490

# Assigning a type to the variable 'is_valid_linkage' (line 1537)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 0), 'is_valid_linkage', is_valid_linkage)

@norecursion
def _check_hierarchy_uses_cluster_before_formed(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_check_hierarchy_uses_cluster_before_formed'
    module_type_store = module_type_store.open_function_context('_check_hierarchy_uses_cluster_before_formed', 1618, 0, False)
    
    # Passed parameters checking function
    _check_hierarchy_uses_cluster_before_formed.stypy_localization = localization
    _check_hierarchy_uses_cluster_before_formed.stypy_type_of_self = None
    _check_hierarchy_uses_cluster_before_formed.stypy_type_store = module_type_store
    _check_hierarchy_uses_cluster_before_formed.stypy_function_name = '_check_hierarchy_uses_cluster_before_formed'
    _check_hierarchy_uses_cluster_before_formed.stypy_param_names_list = ['Z']
    _check_hierarchy_uses_cluster_before_formed.stypy_varargs_param_name = None
    _check_hierarchy_uses_cluster_before_formed.stypy_kwargs_param_name = None
    _check_hierarchy_uses_cluster_before_formed.stypy_call_defaults = defaults
    _check_hierarchy_uses_cluster_before_formed.stypy_call_varargs = varargs
    _check_hierarchy_uses_cluster_before_formed.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_check_hierarchy_uses_cluster_before_formed', ['Z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_check_hierarchy_uses_cluster_before_formed', localization, ['Z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_check_hierarchy_uses_cluster_before_formed(...)' code ##################

    
    # Assigning a BinOp to a Name (line 1619):
    
    # Assigning a BinOp to a Name (line 1619):
    
    # Obtaining the type of the subscript
    int_2491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1619, 16), 'int')
    # Getting the type of 'Z' (line 1619)
    Z_2492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 8), 'Z')
    # Obtaining the member 'shape' of a type (line 1619)
    shape_2493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 8), Z_2492, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1619)
    getitem___2494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 8), shape_2493, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1619)
    subscript_call_result_2495 = invoke(stypy.reporting.localization.Localization(__file__, 1619, 8), getitem___2494, int_2491)
    
    int_2496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1619, 21), 'int')
    # Applying the binary operator '+' (line 1619)
    result_add_2497 = python_operator(stypy.reporting.localization.Localization(__file__, 1619, 8), '+', subscript_call_result_2495, int_2496)
    
    # Assigning a type to the variable 'n' (line 1619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 4), 'n', result_add_2497)
    
    
    # Call to xrange(...): (line 1620)
    # Processing the call arguments (line 1620)
    int_2499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1620, 20), 'int')
    # Getting the type of 'n' (line 1620)
    n_2500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 23), 'n', False)
    int_2501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1620, 27), 'int')
    # Applying the binary operator '-' (line 1620)
    result_sub_2502 = python_operator(stypy.reporting.localization.Localization(__file__, 1620, 23), '-', n_2500, int_2501)
    
    # Processing the call keyword arguments (line 1620)
    kwargs_2503 = {}
    # Getting the type of 'xrange' (line 1620)
    xrange_2498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 13), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1620)
    xrange_call_result_2504 = invoke(stypy.reporting.localization.Localization(__file__, 1620, 13), xrange_2498, *[int_2499, result_sub_2502], **kwargs_2503)
    
    # Testing the type of a for loop iterable (line 1620)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1620, 4), xrange_call_result_2504)
    # Getting the type of the for loop variable (line 1620)
    for_loop_var_2505 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1620, 4), xrange_call_result_2504)
    # Assigning a type to the variable 'i' (line 1620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 4), 'i', for_loop_var_2505)
    # SSA begins for a for statement (line 1620)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1621)
    tuple_2506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1621)
    # Adding element type (line 1621)
    # Getting the type of 'i' (line 1621)
    i_2507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 13), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1621, 13), tuple_2506, i_2507)
    # Adding element type (line 1621)
    int_2508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 16), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1621, 13), tuple_2506, int_2508)
    
    # Getting the type of 'Z' (line 1621)
    Z_2509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 11), 'Z')
    # Obtaining the member '__getitem__' of a type (line 1621)
    getitem___2510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1621, 11), Z_2509, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1621)
    subscript_call_result_2511 = invoke(stypy.reporting.localization.Localization(__file__, 1621, 11), getitem___2510, tuple_2506)
    
    # Getting the type of 'n' (line 1621)
    n_2512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 22), 'n')
    # Getting the type of 'i' (line 1621)
    i_2513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 26), 'i')
    # Applying the binary operator '+' (line 1621)
    result_add_2514 = python_operator(stypy.reporting.localization.Localization(__file__, 1621, 22), '+', n_2512, i_2513)
    
    # Applying the binary operator '>=' (line 1621)
    result_ge_2515 = python_operator(stypy.reporting.localization.Localization(__file__, 1621, 11), '>=', subscript_call_result_2511, result_add_2514)
    
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1621)
    tuple_2516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 33), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1621)
    # Adding element type (line 1621)
    # Getting the type of 'i' (line 1621)
    i_2517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 33), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1621, 33), tuple_2516, i_2517)
    # Adding element type (line 1621)
    int_2518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1621, 36), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1621, 33), tuple_2516, int_2518)
    
    # Getting the type of 'Z' (line 1621)
    Z_2519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 31), 'Z')
    # Obtaining the member '__getitem__' of a type (line 1621)
    getitem___2520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1621, 31), Z_2519, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1621)
    subscript_call_result_2521 = invoke(stypy.reporting.localization.Localization(__file__, 1621, 31), getitem___2520, tuple_2516)
    
    # Getting the type of 'n' (line 1621)
    n_2522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 42), 'n')
    # Getting the type of 'i' (line 1621)
    i_2523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 46), 'i')
    # Applying the binary operator '+' (line 1621)
    result_add_2524 = python_operator(stypy.reporting.localization.Localization(__file__, 1621, 42), '+', n_2522, i_2523)
    
    # Applying the binary operator '>=' (line 1621)
    result_ge_2525 = python_operator(stypy.reporting.localization.Localization(__file__, 1621, 31), '>=', subscript_call_result_2521, result_add_2524)
    
    # Applying the binary operator 'or' (line 1621)
    result_or_keyword_2526 = python_operator(stypy.reporting.localization.Localization(__file__, 1621, 11), 'or', result_ge_2515, result_ge_2525)
    
    # Testing the type of an if condition (line 1621)
    if_condition_2527 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1621, 8), result_or_keyword_2526)
    # Assigning a type to the variable 'if_condition_2527' (line 1621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 8), 'if_condition_2527', if_condition_2527)
    # SSA begins for if statement (line 1621)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 1622)
    True_2528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 19), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 1622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 12), 'stypy_return_type', True_2528)
    # SSA join for if statement (line 1621)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'False' (line 1623)
    False_2529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 11), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1623, 4), 'stypy_return_type', False_2529)
    
    # ################# End of '_check_hierarchy_uses_cluster_before_formed(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_check_hierarchy_uses_cluster_before_formed' in the type store
    # Getting the type of 'stypy_return_type' (line 1618)
    stypy_return_type_2530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2530)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_check_hierarchy_uses_cluster_before_formed'
    return stypy_return_type_2530

# Assigning a type to the variable '_check_hierarchy_uses_cluster_before_formed' (line 1618)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1618, 0), '_check_hierarchy_uses_cluster_before_formed', _check_hierarchy_uses_cluster_before_formed)

@norecursion
def _check_hierarchy_uses_cluster_more_than_once(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_check_hierarchy_uses_cluster_more_than_once'
    module_type_store = module_type_store.open_function_context('_check_hierarchy_uses_cluster_more_than_once', 1626, 0, False)
    
    # Passed parameters checking function
    _check_hierarchy_uses_cluster_more_than_once.stypy_localization = localization
    _check_hierarchy_uses_cluster_more_than_once.stypy_type_of_self = None
    _check_hierarchy_uses_cluster_more_than_once.stypy_type_store = module_type_store
    _check_hierarchy_uses_cluster_more_than_once.stypy_function_name = '_check_hierarchy_uses_cluster_more_than_once'
    _check_hierarchy_uses_cluster_more_than_once.stypy_param_names_list = ['Z']
    _check_hierarchy_uses_cluster_more_than_once.stypy_varargs_param_name = None
    _check_hierarchy_uses_cluster_more_than_once.stypy_kwargs_param_name = None
    _check_hierarchy_uses_cluster_more_than_once.stypy_call_defaults = defaults
    _check_hierarchy_uses_cluster_more_than_once.stypy_call_varargs = varargs
    _check_hierarchy_uses_cluster_more_than_once.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_check_hierarchy_uses_cluster_more_than_once', ['Z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_check_hierarchy_uses_cluster_more_than_once', localization, ['Z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_check_hierarchy_uses_cluster_more_than_once(...)' code ##################

    
    # Assigning a BinOp to a Name (line 1627):
    
    # Assigning a BinOp to a Name (line 1627):
    
    # Obtaining the type of the subscript
    int_2531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1627, 16), 'int')
    # Getting the type of 'Z' (line 1627)
    Z_2532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 8), 'Z')
    # Obtaining the member 'shape' of a type (line 1627)
    shape_2533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1627, 8), Z_2532, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1627)
    getitem___2534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1627, 8), shape_2533, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1627)
    subscript_call_result_2535 = invoke(stypy.reporting.localization.Localization(__file__, 1627, 8), getitem___2534, int_2531)
    
    int_2536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1627, 21), 'int')
    # Applying the binary operator '+' (line 1627)
    result_add_2537 = python_operator(stypy.reporting.localization.Localization(__file__, 1627, 8), '+', subscript_call_result_2535, int_2536)
    
    # Assigning a type to the variable 'n' (line 1627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1627, 4), 'n', result_add_2537)
    
    # Assigning a Call to a Name (line 1628):
    
    # Assigning a Call to a Name (line 1628):
    
    # Call to set(...): (line 1628)
    # Processing the call arguments (line 1628)
    
    # Obtaining an instance of the builtin type 'list' (line 1628)
    list_2539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1628)
    
    # Processing the call keyword arguments (line 1628)
    kwargs_2540 = {}
    # Getting the type of 'set' (line 1628)
    set_2538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 13), 'set', False)
    # Calling set(args, kwargs) (line 1628)
    set_call_result_2541 = invoke(stypy.reporting.localization.Localization(__file__, 1628, 13), set_2538, *[list_2539], **kwargs_2540)
    
    # Assigning a type to the variable 'chosen' (line 1628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 4), 'chosen', set_call_result_2541)
    
    
    # Call to xrange(...): (line 1629)
    # Processing the call arguments (line 1629)
    int_2543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1629, 20), 'int')
    # Getting the type of 'n' (line 1629)
    n_2544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 23), 'n', False)
    int_2545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1629, 27), 'int')
    # Applying the binary operator '-' (line 1629)
    result_sub_2546 = python_operator(stypy.reporting.localization.Localization(__file__, 1629, 23), '-', n_2544, int_2545)
    
    # Processing the call keyword arguments (line 1629)
    kwargs_2547 = {}
    # Getting the type of 'xrange' (line 1629)
    xrange_2542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 13), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1629)
    xrange_call_result_2548 = invoke(stypy.reporting.localization.Localization(__file__, 1629, 13), xrange_2542, *[int_2543, result_sub_2546], **kwargs_2547)
    
    # Testing the type of a for loop iterable (line 1629)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1629, 4), xrange_call_result_2548)
    # Getting the type of the for loop variable (line 1629)
    for_loop_var_2549 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1629, 4), xrange_call_result_2548)
    # Assigning a type to the variable 'i' (line 1629)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1629, 4), 'i', for_loop_var_2549)
    # SSA begins for a for statement (line 1629)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1630)
    tuple_2550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1630)
    # Adding element type (line 1630)
    # Getting the type of 'i' (line 1630)
    i_2551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 14), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 14), tuple_2550, i_2551)
    # Adding element type (line 1630)
    int_2552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 17), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 14), tuple_2550, int_2552)
    
    # Getting the type of 'Z' (line 1630)
    Z_2553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 12), 'Z')
    # Obtaining the member '__getitem__' of a type (line 1630)
    getitem___2554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 12), Z_2553, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1630)
    subscript_call_result_2555 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 12), getitem___2554, tuple_2550)
    
    # Getting the type of 'chosen' (line 1630)
    chosen_2556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 23), 'chosen')
    # Applying the binary operator 'in' (line 1630)
    result_contains_2557 = python_operator(stypy.reporting.localization.Localization(__file__, 1630, 12), 'in', subscript_call_result_2555, chosen_2556)
    
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1630)
    tuple_2558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1630)
    # Adding element type (line 1630)
    # Getting the type of 'i' (line 1630)
    i_2559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 37), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 37), tuple_2558, i_2559)
    # Adding element type (line 1630)
    int_2560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 40), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 37), tuple_2558, int_2560)
    
    # Getting the type of 'Z' (line 1630)
    Z_2561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 35), 'Z')
    # Obtaining the member '__getitem__' of a type (line 1630)
    getitem___2562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 35), Z_2561, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1630)
    subscript_call_result_2563 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 35), getitem___2562, tuple_2558)
    
    # Getting the type of 'chosen' (line 1630)
    chosen_2564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 46), 'chosen')
    # Applying the binary operator 'in' (line 1630)
    result_contains_2565 = python_operator(stypy.reporting.localization.Localization(__file__, 1630, 35), 'in', subscript_call_result_2563, chosen_2564)
    
    # Applying the binary operator 'or' (line 1630)
    result_or_keyword_2566 = python_operator(stypy.reporting.localization.Localization(__file__, 1630, 11), 'or', result_contains_2557, result_contains_2565)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1630)
    tuple_2567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 59), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1630)
    # Adding element type (line 1630)
    # Getting the type of 'i' (line 1630)
    i_2568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 59), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 59), tuple_2567, i_2568)
    # Adding element type (line 1630)
    int_2569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 62), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 59), tuple_2567, int_2569)
    
    # Getting the type of 'Z' (line 1630)
    Z_2570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 57), 'Z')
    # Obtaining the member '__getitem__' of a type (line 1630)
    getitem___2571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 57), Z_2570, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1630)
    subscript_call_result_2572 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 57), getitem___2571, tuple_2567)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1630)
    tuple_2573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 70), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1630)
    # Adding element type (line 1630)
    # Getting the type of 'i' (line 1630)
    i_2574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 70), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 70), tuple_2573, i_2574)
    # Adding element type (line 1630)
    int_2575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1630, 73), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1630, 70), tuple_2573, int_2575)
    
    # Getting the type of 'Z' (line 1630)
    Z_2576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 68), 'Z')
    # Obtaining the member '__getitem__' of a type (line 1630)
    getitem___2577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 68), Z_2576, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1630)
    subscript_call_result_2578 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 68), getitem___2577, tuple_2573)
    
    # Applying the binary operator '==' (line 1630)
    result_eq_2579 = python_operator(stypy.reporting.localization.Localization(__file__, 1630, 57), '==', subscript_call_result_2572, subscript_call_result_2578)
    
    # Applying the binary operator 'or' (line 1630)
    result_or_keyword_2580 = python_operator(stypy.reporting.localization.Localization(__file__, 1630, 11), 'or', result_or_keyword_2566, result_eq_2579)
    
    # Testing the type of an if condition (line 1630)
    if_condition_2581 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1630, 8), result_or_keyword_2580)
    # Assigning a type to the variable 'if_condition_2581' (line 1630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 8), 'if_condition_2581', if_condition_2581)
    # SSA begins for if statement (line 1630)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'True' (line 1631)
    True_2582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 19), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 1631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1631, 12), 'stypy_return_type', True_2582)
    # SSA join for if statement (line 1630)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to add(...): (line 1632)
    # Processing the call arguments (line 1632)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1632)
    tuple_2585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1632, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1632)
    # Adding element type (line 1632)
    # Getting the type of 'i' (line 1632)
    i_2586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 21), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1632, 21), tuple_2585, i_2586)
    # Adding element type (line 1632)
    int_2587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1632, 24), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1632, 21), tuple_2585, int_2587)
    
    # Getting the type of 'Z' (line 1632)
    Z_2588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 19), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1632)
    getitem___2589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1632, 19), Z_2588, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1632)
    subscript_call_result_2590 = invoke(stypy.reporting.localization.Localization(__file__, 1632, 19), getitem___2589, tuple_2585)
    
    # Processing the call keyword arguments (line 1632)
    kwargs_2591 = {}
    # Getting the type of 'chosen' (line 1632)
    chosen_2583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 8), 'chosen', False)
    # Obtaining the member 'add' of a type (line 1632)
    add_2584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1632, 8), chosen_2583, 'add')
    # Calling add(args, kwargs) (line 1632)
    add_call_result_2592 = invoke(stypy.reporting.localization.Localization(__file__, 1632, 8), add_2584, *[subscript_call_result_2590], **kwargs_2591)
    
    
    # Call to add(...): (line 1633)
    # Processing the call arguments (line 1633)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1633)
    tuple_2595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1633)
    # Adding element type (line 1633)
    # Getting the type of 'i' (line 1633)
    i_2596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 21), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1633, 21), tuple_2595, i_2596)
    # Adding element type (line 1633)
    int_2597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 24), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1633, 21), tuple_2595, int_2597)
    
    # Getting the type of 'Z' (line 1633)
    Z_2598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 19), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1633)
    getitem___2599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1633, 19), Z_2598, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1633)
    subscript_call_result_2600 = invoke(stypy.reporting.localization.Localization(__file__, 1633, 19), getitem___2599, tuple_2595)
    
    # Processing the call keyword arguments (line 1633)
    kwargs_2601 = {}
    # Getting the type of 'chosen' (line 1633)
    chosen_2593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 8), 'chosen', False)
    # Obtaining the member 'add' of a type (line 1633)
    add_2594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1633, 8), chosen_2593, 'add')
    # Calling add(args, kwargs) (line 1633)
    add_call_result_2602 = invoke(stypy.reporting.localization.Localization(__file__, 1633, 8), add_2594, *[subscript_call_result_2600], **kwargs_2601)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'False' (line 1634)
    False_2603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 11), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 1634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 4), 'stypy_return_type', False_2603)
    
    # ################# End of '_check_hierarchy_uses_cluster_more_than_once(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_check_hierarchy_uses_cluster_more_than_once' in the type store
    # Getting the type of 'stypy_return_type' (line 1626)
    stypy_return_type_2604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2604)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_check_hierarchy_uses_cluster_more_than_once'
    return stypy_return_type_2604

# Assigning a type to the variable '_check_hierarchy_uses_cluster_more_than_once' (line 1626)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 0), '_check_hierarchy_uses_cluster_more_than_once', _check_hierarchy_uses_cluster_more_than_once)

@norecursion
def _check_hierarchy_not_all_clusters_used(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_check_hierarchy_not_all_clusters_used'
    module_type_store = module_type_store.open_function_context('_check_hierarchy_not_all_clusters_used', 1637, 0, False)
    
    # Passed parameters checking function
    _check_hierarchy_not_all_clusters_used.stypy_localization = localization
    _check_hierarchy_not_all_clusters_used.stypy_type_of_self = None
    _check_hierarchy_not_all_clusters_used.stypy_type_store = module_type_store
    _check_hierarchy_not_all_clusters_used.stypy_function_name = '_check_hierarchy_not_all_clusters_used'
    _check_hierarchy_not_all_clusters_used.stypy_param_names_list = ['Z']
    _check_hierarchy_not_all_clusters_used.stypy_varargs_param_name = None
    _check_hierarchy_not_all_clusters_used.stypy_kwargs_param_name = None
    _check_hierarchy_not_all_clusters_used.stypy_call_defaults = defaults
    _check_hierarchy_not_all_clusters_used.stypy_call_varargs = varargs
    _check_hierarchy_not_all_clusters_used.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_check_hierarchy_not_all_clusters_used', ['Z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_check_hierarchy_not_all_clusters_used', localization, ['Z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_check_hierarchy_not_all_clusters_used(...)' code ##################

    
    # Assigning a BinOp to a Name (line 1638):
    
    # Assigning a BinOp to a Name (line 1638):
    
    # Obtaining the type of the subscript
    int_2605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1638, 16), 'int')
    # Getting the type of 'Z' (line 1638)
    Z_2606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 8), 'Z')
    # Obtaining the member 'shape' of a type (line 1638)
    shape_2607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 8), Z_2606, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1638)
    getitem___2608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1638, 8), shape_2607, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1638)
    subscript_call_result_2609 = invoke(stypy.reporting.localization.Localization(__file__, 1638, 8), getitem___2608, int_2605)
    
    int_2610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1638, 21), 'int')
    # Applying the binary operator '+' (line 1638)
    result_add_2611 = python_operator(stypy.reporting.localization.Localization(__file__, 1638, 8), '+', subscript_call_result_2609, int_2610)
    
    # Assigning a type to the variable 'n' (line 1638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1638, 4), 'n', result_add_2611)
    
    # Assigning a Call to a Name (line 1639):
    
    # Assigning a Call to a Name (line 1639):
    
    # Call to set(...): (line 1639)
    # Processing the call arguments (line 1639)
    
    # Obtaining an instance of the builtin type 'list' (line 1639)
    list_2613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1639, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1639)
    
    # Processing the call keyword arguments (line 1639)
    kwargs_2614 = {}
    # Getting the type of 'set' (line 1639)
    set_2612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 13), 'set', False)
    # Calling set(args, kwargs) (line 1639)
    set_call_result_2615 = invoke(stypy.reporting.localization.Localization(__file__, 1639, 13), set_2612, *[list_2613], **kwargs_2614)
    
    # Assigning a type to the variable 'chosen' (line 1639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1639, 4), 'chosen', set_call_result_2615)
    
    
    # Call to xrange(...): (line 1640)
    # Processing the call arguments (line 1640)
    int_2617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1640, 20), 'int')
    # Getting the type of 'n' (line 1640)
    n_2618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 23), 'n', False)
    int_2619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1640, 27), 'int')
    # Applying the binary operator '-' (line 1640)
    result_sub_2620 = python_operator(stypy.reporting.localization.Localization(__file__, 1640, 23), '-', n_2618, int_2619)
    
    # Processing the call keyword arguments (line 1640)
    kwargs_2621 = {}
    # Getting the type of 'xrange' (line 1640)
    xrange_2616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 13), 'xrange', False)
    # Calling xrange(args, kwargs) (line 1640)
    xrange_call_result_2622 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 13), xrange_2616, *[int_2617, result_sub_2620], **kwargs_2621)
    
    # Testing the type of a for loop iterable (line 1640)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1640, 4), xrange_call_result_2622)
    # Getting the type of the for loop variable (line 1640)
    for_loop_var_2623 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1640, 4), xrange_call_result_2622)
    # Assigning a type to the variable 'i' (line 1640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 4), 'i', for_loop_var_2623)
    # SSA begins for a for statement (line 1640)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to add(...): (line 1641)
    # Processing the call arguments (line 1641)
    
    # Call to int(...): (line 1641)
    # Processing the call arguments (line 1641)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1641)
    tuple_2627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1641)
    # Adding element type (line 1641)
    # Getting the type of 'i' (line 1641)
    i_2628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 25), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1641, 25), tuple_2627, i_2628)
    # Adding element type (line 1641)
    int_2629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1641, 25), tuple_2627, int_2629)
    
    # Getting the type of 'Z' (line 1641)
    Z_2630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 23), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1641)
    getitem___2631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 23), Z_2630, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1641)
    subscript_call_result_2632 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 23), getitem___2631, tuple_2627)
    
    # Processing the call keyword arguments (line 1641)
    kwargs_2633 = {}
    # Getting the type of 'int' (line 1641)
    int_2626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 19), 'int', False)
    # Calling int(args, kwargs) (line 1641)
    int_call_result_2634 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 19), int_2626, *[subscript_call_result_2632], **kwargs_2633)
    
    # Processing the call keyword arguments (line 1641)
    kwargs_2635 = {}
    # Getting the type of 'chosen' (line 1641)
    chosen_2624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1641, 8), 'chosen', False)
    # Obtaining the member 'add' of a type (line 1641)
    add_2625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1641, 8), chosen_2624, 'add')
    # Calling add(args, kwargs) (line 1641)
    add_call_result_2636 = invoke(stypy.reporting.localization.Localization(__file__, 1641, 8), add_2625, *[int_call_result_2634], **kwargs_2635)
    
    
    # Call to add(...): (line 1642)
    # Processing the call arguments (line 1642)
    
    # Call to int(...): (line 1642)
    # Processing the call arguments (line 1642)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1642)
    tuple_2640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1642)
    # Adding element type (line 1642)
    # Getting the type of 'i' (line 1642)
    i_2641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 25), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1642, 25), tuple_2640, i_2641)
    # Adding element type (line 1642)
    int_2642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1642, 25), tuple_2640, int_2642)
    
    # Getting the type of 'Z' (line 1642)
    Z_2643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 23), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 1642)
    getitem___2644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1642, 23), Z_2643, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1642)
    subscript_call_result_2645 = invoke(stypy.reporting.localization.Localization(__file__, 1642, 23), getitem___2644, tuple_2640)
    
    # Processing the call keyword arguments (line 1642)
    kwargs_2646 = {}
    # Getting the type of 'int' (line 1642)
    int_2639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 19), 'int', False)
    # Calling int(args, kwargs) (line 1642)
    int_call_result_2647 = invoke(stypy.reporting.localization.Localization(__file__, 1642, 19), int_2639, *[subscript_call_result_2645], **kwargs_2646)
    
    # Processing the call keyword arguments (line 1642)
    kwargs_2648 = {}
    # Getting the type of 'chosen' (line 1642)
    chosen_2637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 8), 'chosen', False)
    # Obtaining the member 'add' of a type (line 1642)
    add_2638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1642, 8), chosen_2637, 'add')
    # Calling add(args, kwargs) (line 1642)
    add_call_result_2649 = invoke(stypy.reporting.localization.Localization(__file__, 1642, 8), add_2638, *[int_call_result_2647], **kwargs_2648)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1643):
    
    # Assigning a Call to a Name (line 1643):
    
    # Call to set(...): (line 1643)
    # Processing the call arguments (line 1643)
    
    # Call to range(...): (line 1643)
    # Processing the call arguments (line 1643)
    int_2652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 28), 'int')
    int_2653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 31), 'int')
    # Getting the type of 'n' (line 1643)
    n_2654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 35), 'n', False)
    # Applying the binary operator '*' (line 1643)
    result_mul_2655 = python_operator(stypy.reporting.localization.Localization(__file__, 1643, 31), '*', int_2653, n_2654)
    
    int_2656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1643, 39), 'int')
    # Applying the binary operator '-' (line 1643)
    result_sub_2657 = python_operator(stypy.reporting.localization.Localization(__file__, 1643, 31), '-', result_mul_2655, int_2656)
    
    # Processing the call keyword arguments (line 1643)
    kwargs_2658 = {}
    # Getting the type of 'range' (line 1643)
    range_2651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 22), 'range', False)
    # Calling range(args, kwargs) (line 1643)
    range_call_result_2659 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 22), range_2651, *[int_2652, result_sub_2657], **kwargs_2658)
    
    # Processing the call keyword arguments (line 1643)
    kwargs_2660 = {}
    # Getting the type of 'set' (line 1643)
    set_2650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 18), 'set', False)
    # Calling set(args, kwargs) (line 1643)
    set_call_result_2661 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 18), set_2650, *[range_call_result_2659], **kwargs_2660)
    
    # Assigning a type to the variable 'must_chosen' (line 1643)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 4), 'must_chosen', set_call_result_2661)
    
    
    # Call to len(...): (line 1644)
    # Processing the call arguments (line 1644)
    
    # Call to difference(...): (line 1644)
    # Processing the call arguments (line 1644)
    # Getting the type of 'chosen' (line 1644)
    chosen_2665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 38), 'chosen', False)
    # Processing the call keyword arguments (line 1644)
    kwargs_2666 = {}
    # Getting the type of 'must_chosen' (line 1644)
    must_chosen_2663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 15), 'must_chosen', False)
    # Obtaining the member 'difference' of a type (line 1644)
    difference_2664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1644, 15), must_chosen_2663, 'difference')
    # Calling difference(args, kwargs) (line 1644)
    difference_call_result_2667 = invoke(stypy.reporting.localization.Localization(__file__, 1644, 15), difference_2664, *[chosen_2665], **kwargs_2666)
    
    # Processing the call keyword arguments (line 1644)
    kwargs_2668 = {}
    # Getting the type of 'len' (line 1644)
    len_2662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 11), 'len', False)
    # Calling len(args, kwargs) (line 1644)
    len_call_result_2669 = invoke(stypy.reporting.localization.Localization(__file__, 1644, 11), len_2662, *[difference_call_result_2667], **kwargs_2668)
    
    int_2670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1644, 49), 'int')
    # Applying the binary operator '>' (line 1644)
    result_gt_2671 = python_operator(stypy.reporting.localization.Localization(__file__, 1644, 11), '>', len_call_result_2669, int_2670)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1644, 4), 'stypy_return_type', result_gt_2671)
    
    # ################# End of '_check_hierarchy_not_all_clusters_used(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_check_hierarchy_not_all_clusters_used' in the type store
    # Getting the type of 'stypy_return_type' (line 1637)
    stypy_return_type_2672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2672)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_check_hierarchy_not_all_clusters_used'
    return stypy_return_type_2672

# Assigning a type to the variable '_check_hierarchy_not_all_clusters_used' (line 1637)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 0), '_check_hierarchy_not_all_clusters_used', _check_hierarchy_not_all_clusters_used)

@norecursion
def num_obs_linkage(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'num_obs_linkage'
    module_type_store = module_type_store.open_function_context('num_obs_linkage', 1647, 0, False)
    
    # Passed parameters checking function
    num_obs_linkage.stypy_localization = localization
    num_obs_linkage.stypy_type_of_self = None
    num_obs_linkage.stypy_type_store = module_type_store
    num_obs_linkage.stypy_function_name = 'num_obs_linkage'
    num_obs_linkage.stypy_param_names_list = ['Z']
    num_obs_linkage.stypy_varargs_param_name = None
    num_obs_linkage.stypy_kwargs_param_name = None
    num_obs_linkage.stypy_call_defaults = defaults
    num_obs_linkage.stypy_call_varargs = varargs
    num_obs_linkage.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'num_obs_linkage', ['Z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'num_obs_linkage', localization, ['Z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'num_obs_linkage(...)' code ##################

    str_2673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, (-1)), 'str', '\n    Return the number of original observations of the linkage matrix passed.\n\n    Parameters\n    ----------\n    Z : ndarray\n        The linkage matrix on which to perform the operation.\n\n    Returns\n    -------\n    n : int\n        The number of original observations in the linkage.\n\n    ')
    
    # Assigning a Call to a Name (line 1662):
    
    # Assigning a Call to a Name (line 1662):
    
    # Call to asarray(...): (line 1662)
    # Processing the call arguments (line 1662)
    # Getting the type of 'Z' (line 1662)
    Z_2676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 19), 'Z', False)
    # Processing the call keyword arguments (line 1662)
    str_2677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 28), 'str', 'c')
    keyword_2678 = str_2677
    kwargs_2679 = {'order': keyword_2678}
    # Getting the type of 'np' (line 1662)
    np_2674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1662)
    asarray_2675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1662, 8), np_2674, 'asarray')
    # Calling asarray(args, kwargs) (line 1662)
    asarray_call_result_2680 = invoke(stypy.reporting.localization.Localization(__file__, 1662, 8), asarray_2675, *[Z_2676], **kwargs_2679)
    
    # Assigning a type to the variable 'Z' (line 1662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1662, 4), 'Z', asarray_call_result_2680)
    
    # Call to is_valid_linkage(...): (line 1663)
    # Processing the call arguments (line 1663)
    # Getting the type of 'Z' (line 1663)
    Z_2682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 21), 'Z', False)
    # Processing the call keyword arguments (line 1663)
    # Getting the type of 'True' (line 1663)
    True_2683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 30), 'True', False)
    keyword_2684 = True_2683
    str_2685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 41), 'str', 'Z')
    keyword_2686 = str_2685
    kwargs_2687 = {'throw': keyword_2684, 'name': keyword_2686}
    # Getting the type of 'is_valid_linkage' (line 1663)
    is_valid_linkage_2681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 1663)
    is_valid_linkage_call_result_2688 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 4), is_valid_linkage_2681, *[Z_2682], **kwargs_2687)
    
    
    # Obtaining the type of the subscript
    int_2689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1664, 20), 'int')
    # Getting the type of 'Z' (line 1664)
    Z_2690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 12), 'Z')
    # Obtaining the member 'shape' of a type (line 1664)
    shape_2691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 12), Z_2690, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1664)
    getitem___2692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1664, 12), shape_2691, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1664)
    subscript_call_result_2693 = invoke(stypy.reporting.localization.Localization(__file__, 1664, 12), getitem___2692, int_2689)
    
    int_2694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1664, 25), 'int')
    # Applying the binary operator '+' (line 1664)
    result_add_2695 = python_operator(stypy.reporting.localization.Localization(__file__, 1664, 12), '+', subscript_call_result_2693, int_2694)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1664, 4), 'stypy_return_type', result_add_2695)
    
    # ################# End of 'num_obs_linkage(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'num_obs_linkage' in the type store
    # Getting the type of 'stypy_return_type' (line 1647)
    stypy_return_type_2696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2696)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'num_obs_linkage'
    return stypy_return_type_2696

# Assigning a type to the variable 'num_obs_linkage' (line 1647)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1647, 0), 'num_obs_linkage', num_obs_linkage)

@norecursion
def correspond(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'correspond'
    module_type_store = module_type_store.open_function_context('correspond', 1667, 0, False)
    
    # Passed parameters checking function
    correspond.stypy_localization = localization
    correspond.stypy_type_of_self = None
    correspond.stypy_type_store = module_type_store
    correspond.stypy_function_name = 'correspond'
    correspond.stypy_param_names_list = ['Z', 'Y']
    correspond.stypy_varargs_param_name = None
    correspond.stypy_kwargs_param_name = None
    correspond.stypy_call_defaults = defaults
    correspond.stypy_call_varargs = varargs
    correspond.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'correspond', ['Z', 'Y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'correspond', localization, ['Z', 'Y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'correspond(...)' code ##################

    str_2697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1691, (-1)), 'str', '\n    Check for correspondence between linkage and condensed distance matrices.\n\n    They must have the same number of original observations for\n    the check to succeed.\n\n    This function is useful as a sanity check in algorithms that make\n    extensive use of linkage and distance matrices that must\n    correspond to the same set of original observations.\n\n    Parameters\n    ----------\n    Z : array_like\n        The linkage matrix to check for correspondence.\n    Y : array_like\n        The condensed distance matrix to check for correspondence.\n\n    Returns\n    -------\n    b : bool\n        A boolean indicating whether the linkage matrix and distance\n        matrix could possibly correspond to one another.\n\n    ')
    
    # Call to is_valid_linkage(...): (line 1692)
    # Processing the call arguments (line 1692)
    # Getting the type of 'Z' (line 1692)
    Z_2699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 21), 'Z', False)
    # Processing the call keyword arguments (line 1692)
    # Getting the type of 'True' (line 1692)
    True_2700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 30), 'True', False)
    keyword_2701 = True_2700
    kwargs_2702 = {'throw': keyword_2701}
    # Getting the type of 'is_valid_linkage' (line 1692)
    is_valid_linkage_2698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 1692)
    is_valid_linkage_call_result_2703 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 4), is_valid_linkage_2698, *[Z_2699], **kwargs_2702)
    
    
    # Call to is_valid_y(...): (line 1693)
    # Processing the call arguments (line 1693)
    # Getting the type of 'Y' (line 1693)
    Y_2706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 24), 'Y', False)
    # Processing the call keyword arguments (line 1693)
    # Getting the type of 'True' (line 1693)
    True_2707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 33), 'True', False)
    keyword_2708 = True_2707
    kwargs_2709 = {'throw': keyword_2708}
    # Getting the type of 'distance' (line 1693)
    distance_2704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 4), 'distance', False)
    # Obtaining the member 'is_valid_y' of a type (line 1693)
    is_valid_y_2705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 4), distance_2704, 'is_valid_y')
    # Calling is_valid_y(args, kwargs) (line 1693)
    is_valid_y_call_result_2710 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 4), is_valid_y_2705, *[Y_2706], **kwargs_2709)
    
    
    # Assigning a Call to a Name (line 1694):
    
    # Assigning a Call to a Name (line 1694):
    
    # Call to asarray(...): (line 1694)
    # Processing the call arguments (line 1694)
    # Getting the type of 'Z' (line 1694)
    Z_2713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 19), 'Z', False)
    # Processing the call keyword arguments (line 1694)
    str_2714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1694, 28), 'str', 'c')
    keyword_2715 = str_2714
    kwargs_2716 = {'order': keyword_2715}
    # Getting the type of 'np' (line 1694)
    np_2711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1694)
    asarray_2712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 8), np_2711, 'asarray')
    # Calling asarray(args, kwargs) (line 1694)
    asarray_call_result_2717 = invoke(stypy.reporting.localization.Localization(__file__, 1694, 8), asarray_2712, *[Z_2713], **kwargs_2716)
    
    # Assigning a type to the variable 'Z' (line 1694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1694, 4), 'Z', asarray_call_result_2717)
    
    # Assigning a Call to a Name (line 1695):
    
    # Assigning a Call to a Name (line 1695):
    
    # Call to asarray(...): (line 1695)
    # Processing the call arguments (line 1695)
    # Getting the type of 'Y' (line 1695)
    Y_2720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 19), 'Y', False)
    # Processing the call keyword arguments (line 1695)
    str_2721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1695, 28), 'str', 'c')
    keyword_2722 = str_2721
    kwargs_2723 = {'order': keyword_2722}
    # Getting the type of 'np' (line 1695)
    np_2718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1695)
    asarray_2719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1695, 8), np_2718, 'asarray')
    # Calling asarray(args, kwargs) (line 1695)
    asarray_call_result_2724 = invoke(stypy.reporting.localization.Localization(__file__, 1695, 8), asarray_2719, *[Y_2720], **kwargs_2723)
    
    # Assigning a type to the variable 'Y' (line 1695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 4), 'Y', asarray_call_result_2724)
    
    
    # Call to num_obs_y(...): (line 1696)
    # Processing the call arguments (line 1696)
    # Getting the type of 'Y' (line 1696)
    Y_2727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 30), 'Y', False)
    # Processing the call keyword arguments (line 1696)
    kwargs_2728 = {}
    # Getting the type of 'distance' (line 1696)
    distance_2725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 11), 'distance', False)
    # Obtaining the member 'num_obs_y' of a type (line 1696)
    num_obs_y_2726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1696, 11), distance_2725, 'num_obs_y')
    # Calling num_obs_y(args, kwargs) (line 1696)
    num_obs_y_call_result_2729 = invoke(stypy.reporting.localization.Localization(__file__, 1696, 11), num_obs_y_2726, *[Y_2727], **kwargs_2728)
    
    
    # Call to num_obs_linkage(...): (line 1696)
    # Processing the call arguments (line 1696)
    # Getting the type of 'Z' (line 1696)
    Z_2731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 52), 'Z', False)
    # Processing the call keyword arguments (line 1696)
    kwargs_2732 = {}
    # Getting the type of 'num_obs_linkage' (line 1696)
    num_obs_linkage_2730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1696, 36), 'num_obs_linkage', False)
    # Calling num_obs_linkage(args, kwargs) (line 1696)
    num_obs_linkage_call_result_2733 = invoke(stypy.reporting.localization.Localization(__file__, 1696, 36), num_obs_linkage_2730, *[Z_2731], **kwargs_2732)
    
    # Applying the binary operator '==' (line 1696)
    result_eq_2734 = python_operator(stypy.reporting.localization.Localization(__file__, 1696, 11), '==', num_obs_y_call_result_2729, num_obs_linkage_call_result_2733)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1696)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1696, 4), 'stypy_return_type', result_eq_2734)
    
    # ################# End of 'correspond(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'correspond' in the type store
    # Getting the type of 'stypy_return_type' (line 1667)
    stypy_return_type_2735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2735)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'correspond'
    return stypy_return_type_2735

# Assigning a type to the variable 'correspond' (line 1667)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 0), 'correspond', correspond)

@norecursion
def fcluster(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_2736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1699, 29), 'str', 'inconsistent')
    int_2737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1699, 51), 'int')
    # Getting the type of 'None' (line 1699)
    None_2738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 56), 'None')
    # Getting the type of 'None' (line 1699)
    None_2739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 71), 'None')
    defaults = [str_2736, int_2737, None_2738, None_2739]
    # Create a new context for function 'fcluster'
    module_type_store = module_type_store.open_function_context('fcluster', 1699, 0, False)
    
    # Passed parameters checking function
    fcluster.stypy_localization = localization
    fcluster.stypy_type_of_self = None
    fcluster.stypy_type_store = module_type_store
    fcluster.stypy_function_name = 'fcluster'
    fcluster.stypy_param_names_list = ['Z', 't', 'criterion', 'depth', 'R', 'monocrit']
    fcluster.stypy_varargs_param_name = None
    fcluster.stypy_kwargs_param_name = None
    fcluster.stypy_call_defaults = defaults
    fcluster.stypy_call_varargs = varargs
    fcluster.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fcluster', ['Z', 't', 'criterion', 'depth', 'R', 'monocrit'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fcluster', localization, ['Z', 't', 'criterion', 'depth', 'R', 'monocrit'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fcluster(...)' code ##################

    str_2740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1772, (-1)), 'str', "\n    Form flat clusters from the hierarchical clustering defined by\n    the given linkage matrix.\n\n    Parameters\n    ----------\n    Z : ndarray\n        The hierarchical clustering encoded with the matrix returned\n        by the `linkage` function.\n    t : float\n        The threshold to apply when forming flat clusters.\n    criterion : str, optional\n        The criterion to use in forming flat clusters. This can\n        be any of the following values:\n\n          ``inconsistent`` : If a cluster node and all its\n              descendants have an inconsistent value less than or equal\n              to `t` then all its leaf descendants belong to the\n              same flat cluster. When no non-singleton cluster meets\n              this criterion, every node is assigned to its own\n              cluster. (Default)\n\n          ``distance`` : Forms flat clusters so that the original\n              observations in each flat cluster have no greater a\n              cophenetic distance than `t`.\n\n          ``maxclust`` : Finds a minimum threshold ``r`` so that\n              the cophenetic distance between any two original\n              observations in the same flat cluster is no more than\n              ``r`` and no more than `t` flat clusters are formed.\n\n          ``monocrit`` : Forms a flat cluster from a cluster node c\n              with index i when ``monocrit[j] <= t``.\n\n              For example, to threshold on the maximum mean distance\n              as computed in the inconsistency matrix R with a\n              threshold of 0.8 do::\n\n                  MR = maxRstat(Z, R, 3)\n                  cluster(Z, t=0.8, criterion='monocrit', monocrit=MR)\n\n          ``maxclust_monocrit`` : Forms a flat cluster from a\n              non-singleton cluster node ``c`` when ``monocrit[i] <=\n              r`` for all cluster indices ``i`` below and including\n              ``c``. ``r`` is minimized such that no more than ``t``\n              flat clusters are formed. monocrit must be\n              monotonic. For example, to minimize the threshold t on\n              maximum inconsistency values so that no more than 3 flat\n              clusters are formed, do::\n\n                  MI = maxinconsts(Z, R)\n                  cluster(Z, t=3, criterion='maxclust_monocrit', monocrit=MI)\n\n    depth : int, optional\n        The maximum depth to perform the inconsistency calculation.\n        It has no meaning for the other criteria. Default is 2.\n    R : ndarray, optional\n        The inconsistency matrix to use for the 'inconsistent'\n        criterion. This matrix is computed if not provided.\n    monocrit : ndarray, optional\n        An array of length n-1. `monocrit[i]` is the\n        statistics upon which non-singleton i is thresholded. The\n        monocrit vector must be monotonic, i.e. given a node c with\n        index i, for all node indices j corresponding to nodes\n        below c, ``monocrit[i] >= monocrit[j]``.\n\n    Returns\n    -------\n    fcluster : ndarray\n        An array of length ``n``. ``T[i]`` is the flat cluster number to\n        which original observation ``i`` belongs.\n\n    ")
    
    # Assigning a Call to a Name (line 1773):
    
    # Assigning a Call to a Name (line 1773):
    
    # Call to asarray(...): (line 1773)
    # Processing the call arguments (line 1773)
    # Getting the type of 'Z' (line 1773)
    Z_2743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 19), 'Z', False)
    # Processing the call keyword arguments (line 1773)
    str_2744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1773, 28), 'str', 'c')
    keyword_2745 = str_2744
    kwargs_2746 = {'order': keyword_2745}
    # Getting the type of 'np' (line 1773)
    np_2741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1773)
    asarray_2742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 8), np_2741, 'asarray')
    # Calling asarray(args, kwargs) (line 1773)
    asarray_call_result_2747 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 8), asarray_2742, *[Z_2743], **kwargs_2746)
    
    # Assigning a type to the variable 'Z' (line 1773)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1773, 4), 'Z', asarray_call_result_2747)
    
    # Call to is_valid_linkage(...): (line 1774)
    # Processing the call arguments (line 1774)
    # Getting the type of 'Z' (line 1774)
    Z_2749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 21), 'Z', False)
    # Processing the call keyword arguments (line 1774)
    # Getting the type of 'True' (line 1774)
    True_2750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 30), 'True', False)
    keyword_2751 = True_2750
    str_2752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1774, 41), 'str', 'Z')
    keyword_2753 = str_2752
    kwargs_2754 = {'throw': keyword_2751, 'name': keyword_2753}
    # Getting the type of 'is_valid_linkage' (line 1774)
    is_valid_linkage_2748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1774, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 1774)
    is_valid_linkage_call_result_2755 = invoke(stypy.reporting.localization.Localization(__file__, 1774, 4), is_valid_linkage_2748, *[Z_2749], **kwargs_2754)
    
    
    # Assigning a BinOp to a Name (line 1776):
    
    # Assigning a BinOp to a Name (line 1776):
    
    # Obtaining the type of the subscript
    int_2756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1776, 16), 'int')
    # Getting the type of 'Z' (line 1776)
    Z_2757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 8), 'Z')
    # Obtaining the member 'shape' of a type (line 1776)
    shape_2758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 8), Z_2757, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1776)
    getitem___2759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 8), shape_2758, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1776)
    subscript_call_result_2760 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 8), getitem___2759, int_2756)
    
    int_2761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1776, 21), 'int')
    # Applying the binary operator '+' (line 1776)
    result_add_2762 = python_operator(stypy.reporting.localization.Localization(__file__, 1776, 8), '+', subscript_call_result_2760, int_2761)
    
    # Assigning a type to the variable 'n' (line 1776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1776, 4), 'n', result_add_2762)
    
    # Assigning a Call to a Name (line 1777):
    
    # Assigning a Call to a Name (line 1777):
    
    # Call to zeros(...): (line 1777)
    # Processing the call arguments (line 1777)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1777)
    tuple_2765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1777)
    # Adding element type (line 1777)
    # Getting the type of 'n' (line 1777)
    n_2766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 18), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1777, 18), tuple_2765, n_2766)
    
    # Processing the call keyword arguments (line 1777)
    str_2767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, 29), 'str', 'i')
    keyword_2768 = str_2767
    kwargs_2769 = {'dtype': keyword_2768}
    # Getting the type of 'np' (line 1777)
    np_2763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 8), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1777)
    zeros_2764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 8), np_2763, 'zeros')
    # Calling zeros(args, kwargs) (line 1777)
    zeros_call_result_2770 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 8), zeros_2764, *[tuple_2765], **kwargs_2769)
    
    # Assigning a type to the variable 'T' (line 1777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1777, 4), 'T', zeros_call_result_2770)
    
    # Assigning a Call to a List (line 1781):
    
    # Assigning a Subscript to a Name (line 1781):
    
    # Obtaining the type of the subscript
    int_2771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1781, 4), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 1781)
    # Processing the call arguments (line 1781)
    
    # Obtaining an instance of the builtin type 'list' (line 1781)
    list_2773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1781, 39), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1781)
    # Adding element type (line 1781)
    # Getting the type of 'Z' (line 1781)
    Z_2774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 40), 'Z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1781, 39), list_2773, Z_2774)
    
    # Processing the call keyword arguments (line 1781)
    kwargs_2775 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 1781)
    _copy_arrays_if_base_present_2772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 10), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 1781)
    _copy_arrays_if_base_present_call_result_2776 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 10), _copy_arrays_if_base_present_2772, *[list_2773], **kwargs_2775)
    
    # Obtaining the member '__getitem__' of a type (line 1781)
    getitem___2777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1781, 4), _copy_arrays_if_base_present_call_result_2776, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1781)
    subscript_call_result_2778 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 4), getitem___2777, int_2771)
    
    # Assigning a type to the variable 'list_var_assignment_471' (line 1781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 4), 'list_var_assignment_471', subscript_call_result_2778)
    
    # Assigning a Name to a Name (line 1781):
    # Getting the type of 'list_var_assignment_471' (line 1781)
    list_var_assignment_471_2779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 4), 'list_var_assignment_471')
    # Assigning a type to the variable 'Z' (line 1781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 5), 'Z', list_var_assignment_471_2779)
    
    
    # Getting the type of 'criterion' (line 1783)
    criterion_2780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 7), 'criterion')
    str_2781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1783, 20), 'str', 'inconsistent')
    # Applying the binary operator '==' (line 1783)
    result_eq_2782 = python_operator(stypy.reporting.localization.Localization(__file__, 1783, 7), '==', criterion_2780, str_2781)
    
    # Testing the type of an if condition (line 1783)
    if_condition_2783 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1783, 4), result_eq_2782)
    # Assigning a type to the variable 'if_condition_2783' (line 1783)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 4), 'if_condition_2783', if_condition_2783)
    # SSA begins for if statement (line 1783)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 1784)
    # Getting the type of 'R' (line 1784)
    R_2784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 11), 'R')
    # Getting the type of 'None' (line 1784)
    None_2785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 16), 'None')
    
    (may_be_2786, more_types_in_union_2787) = may_be_none(R_2784, None_2785)

    if may_be_2786:

        if more_types_in_union_2787:
            # Runtime conditional SSA (line 1784)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1785):
        
        # Assigning a Call to a Name (line 1785):
        
        # Call to inconsistent(...): (line 1785)
        # Processing the call arguments (line 1785)
        # Getting the type of 'Z' (line 1785)
        Z_2789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 29), 'Z', False)
        # Getting the type of 'depth' (line 1785)
        depth_2790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 32), 'depth', False)
        # Processing the call keyword arguments (line 1785)
        kwargs_2791 = {}
        # Getting the type of 'inconsistent' (line 1785)
        inconsistent_2788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 16), 'inconsistent', False)
        # Calling inconsistent(args, kwargs) (line 1785)
        inconsistent_call_result_2792 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 16), inconsistent_2788, *[Z_2789, depth_2790], **kwargs_2791)
        
        # Assigning a type to the variable 'R' (line 1785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1785, 12), 'R', inconsistent_call_result_2792)

        if more_types_in_union_2787:
            # Runtime conditional SSA for else branch (line 1784)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_2786) or more_types_in_union_2787):
        
        # Assigning a Call to a Name (line 1787):
        
        # Assigning a Call to a Name (line 1787):
        
        # Call to asarray(...): (line 1787)
        # Processing the call arguments (line 1787)
        # Getting the type of 'R' (line 1787)
        R_2795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 27), 'R', False)
        # Processing the call keyword arguments (line 1787)
        str_2796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1787, 36), 'str', 'c')
        keyword_2797 = str_2796
        kwargs_2798 = {'order': keyword_2797}
        # Getting the type of 'np' (line 1787)
        np_2793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 16), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1787)
        asarray_2794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 16), np_2793, 'asarray')
        # Calling asarray(args, kwargs) (line 1787)
        asarray_call_result_2799 = invoke(stypy.reporting.localization.Localization(__file__, 1787, 16), asarray_2794, *[R_2795], **kwargs_2798)
        
        # Assigning a type to the variable 'R' (line 1787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 12), 'R', asarray_call_result_2799)
        
        # Call to is_valid_im(...): (line 1788)
        # Processing the call arguments (line 1788)
        # Getting the type of 'R' (line 1788)
        R_2801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 24), 'R', False)
        # Processing the call keyword arguments (line 1788)
        # Getting the type of 'True' (line 1788)
        True_2802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 33), 'True', False)
        keyword_2803 = True_2802
        str_2804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 44), 'str', 'R')
        keyword_2805 = str_2804
        kwargs_2806 = {'throw': keyword_2803, 'name': keyword_2805}
        # Getting the type of 'is_valid_im' (line 1788)
        is_valid_im_2800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 12), 'is_valid_im', False)
        # Calling is_valid_im(args, kwargs) (line 1788)
        is_valid_im_call_result_2807 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 12), is_valid_im_2800, *[R_2801], **kwargs_2806)
        
        
        # Assigning a Call to a List (line 1791):
        
        # Assigning a Subscript to a Name (line 1791):
        
        # Obtaining the type of the subscript
        int_2808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1791, 12), 'int')
        
        # Call to _copy_arrays_if_base_present(...): (line 1791)
        # Processing the call arguments (line 1791)
        
        # Obtaining an instance of the builtin type 'list' (line 1791)
        list_2810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1791, 47), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1791)
        # Adding element type (line 1791)
        # Getting the type of 'R' (line 1791)
        R_2811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 48), 'R', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1791, 47), list_2810, R_2811)
        
        # Processing the call keyword arguments (line 1791)
        kwargs_2812 = {}
        # Getting the type of '_copy_arrays_if_base_present' (line 1791)
        _copy_arrays_if_base_present_2809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 18), '_copy_arrays_if_base_present', False)
        # Calling _copy_arrays_if_base_present(args, kwargs) (line 1791)
        _copy_arrays_if_base_present_call_result_2813 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 18), _copy_arrays_if_base_present_2809, *[list_2810], **kwargs_2812)
        
        # Obtaining the member '__getitem__' of a type (line 1791)
        getitem___2814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 12), _copy_arrays_if_base_present_call_result_2813, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1791)
        subscript_call_result_2815 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 12), getitem___2814, int_2808)
        
        # Assigning a type to the variable 'list_var_assignment_472' (line 1791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1791, 12), 'list_var_assignment_472', subscript_call_result_2815)
        
        # Assigning a Name to a Name (line 1791):
        # Getting the type of 'list_var_assignment_472' (line 1791)
        list_var_assignment_472_2816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 12), 'list_var_assignment_472')
        # Assigning a type to the variable 'R' (line 1791)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1791, 13), 'R', list_var_assignment_472_2816)

        if (may_be_2786 and more_types_in_union_2787):
            # SSA join for if statement (line 1784)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to cluster_in(...): (line 1792)
    # Processing the call arguments (line 1792)
    # Getting the type of 'Z' (line 1792)
    Z_2819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 30), 'Z', False)
    # Getting the type of 'R' (line 1792)
    R_2820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 33), 'R', False)
    # Getting the type of 'T' (line 1792)
    T_2821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 36), 'T', False)
    
    # Call to float(...): (line 1792)
    # Processing the call arguments (line 1792)
    # Getting the type of 't' (line 1792)
    t_2823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 45), 't', False)
    # Processing the call keyword arguments (line 1792)
    kwargs_2824 = {}
    # Getting the type of 'float' (line 1792)
    float_2822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 39), 'float', False)
    # Calling float(args, kwargs) (line 1792)
    float_call_result_2825 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 39), float_2822, *[t_2823], **kwargs_2824)
    
    
    # Call to int(...): (line 1792)
    # Processing the call arguments (line 1792)
    # Getting the type of 'n' (line 1792)
    n_2827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 53), 'n', False)
    # Processing the call keyword arguments (line 1792)
    kwargs_2828 = {}
    # Getting the type of 'int' (line 1792)
    int_2826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 49), 'int', False)
    # Calling int(args, kwargs) (line 1792)
    int_call_result_2829 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 49), int_2826, *[n_2827], **kwargs_2828)
    
    # Processing the call keyword arguments (line 1792)
    kwargs_2830 = {}
    # Getting the type of '_hierarchy' (line 1792)
    _hierarchy_2817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 8), '_hierarchy', False)
    # Obtaining the member 'cluster_in' of a type (line 1792)
    cluster_in_2818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 8), _hierarchy_2817, 'cluster_in')
    # Calling cluster_in(args, kwargs) (line 1792)
    cluster_in_call_result_2831 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 8), cluster_in_2818, *[Z_2819, R_2820, T_2821, float_call_result_2825, int_call_result_2829], **kwargs_2830)
    
    # SSA branch for the else part of an if statement (line 1783)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'criterion' (line 1793)
    criterion_2832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 9), 'criterion')
    str_2833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, 22), 'str', 'distance')
    # Applying the binary operator '==' (line 1793)
    result_eq_2834 = python_operator(stypy.reporting.localization.Localization(__file__, 1793, 9), '==', criterion_2832, str_2833)
    
    # Testing the type of an if condition (line 1793)
    if_condition_2835 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1793, 9), result_eq_2834)
    # Assigning a type to the variable 'if_condition_2835' (line 1793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 9), 'if_condition_2835', if_condition_2835)
    # SSA begins for if statement (line 1793)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to cluster_dist(...): (line 1794)
    # Processing the call arguments (line 1794)
    # Getting the type of 'Z' (line 1794)
    Z_2838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 32), 'Z', False)
    # Getting the type of 'T' (line 1794)
    T_2839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 35), 'T', False)
    
    # Call to float(...): (line 1794)
    # Processing the call arguments (line 1794)
    # Getting the type of 't' (line 1794)
    t_2841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 44), 't', False)
    # Processing the call keyword arguments (line 1794)
    kwargs_2842 = {}
    # Getting the type of 'float' (line 1794)
    float_2840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 38), 'float', False)
    # Calling float(args, kwargs) (line 1794)
    float_call_result_2843 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 38), float_2840, *[t_2841], **kwargs_2842)
    
    
    # Call to int(...): (line 1794)
    # Processing the call arguments (line 1794)
    # Getting the type of 'n' (line 1794)
    n_2845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 52), 'n', False)
    # Processing the call keyword arguments (line 1794)
    kwargs_2846 = {}
    # Getting the type of 'int' (line 1794)
    int_2844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 48), 'int', False)
    # Calling int(args, kwargs) (line 1794)
    int_call_result_2847 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 48), int_2844, *[n_2845], **kwargs_2846)
    
    # Processing the call keyword arguments (line 1794)
    kwargs_2848 = {}
    # Getting the type of '_hierarchy' (line 1794)
    _hierarchy_2836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 8), '_hierarchy', False)
    # Obtaining the member 'cluster_dist' of a type (line 1794)
    cluster_dist_2837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 8), _hierarchy_2836, 'cluster_dist')
    # Calling cluster_dist(args, kwargs) (line 1794)
    cluster_dist_call_result_2849 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 8), cluster_dist_2837, *[Z_2838, T_2839, float_call_result_2843, int_call_result_2847], **kwargs_2848)
    
    # SSA branch for the else part of an if statement (line 1793)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'criterion' (line 1795)
    criterion_2850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 9), 'criterion')
    str_2851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, 22), 'str', 'maxclust')
    # Applying the binary operator '==' (line 1795)
    result_eq_2852 = python_operator(stypy.reporting.localization.Localization(__file__, 1795, 9), '==', criterion_2850, str_2851)
    
    # Testing the type of an if condition (line 1795)
    if_condition_2853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1795, 9), result_eq_2852)
    # Assigning a type to the variable 'if_condition_2853' (line 1795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 9), 'if_condition_2853', if_condition_2853)
    # SSA begins for if statement (line 1795)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to cluster_maxclust_dist(...): (line 1796)
    # Processing the call arguments (line 1796)
    # Getting the type of 'Z' (line 1796)
    Z_2856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 41), 'Z', False)
    # Getting the type of 'T' (line 1796)
    T_2857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 44), 'T', False)
    
    # Call to int(...): (line 1796)
    # Processing the call arguments (line 1796)
    # Getting the type of 'n' (line 1796)
    n_2859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 51), 'n', False)
    # Processing the call keyword arguments (line 1796)
    kwargs_2860 = {}
    # Getting the type of 'int' (line 1796)
    int_2858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 47), 'int', False)
    # Calling int(args, kwargs) (line 1796)
    int_call_result_2861 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 47), int_2858, *[n_2859], **kwargs_2860)
    
    
    # Call to int(...): (line 1796)
    # Processing the call arguments (line 1796)
    # Getting the type of 't' (line 1796)
    t_2863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 59), 't', False)
    # Processing the call keyword arguments (line 1796)
    kwargs_2864 = {}
    # Getting the type of 'int' (line 1796)
    int_2862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 55), 'int', False)
    # Calling int(args, kwargs) (line 1796)
    int_call_result_2865 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 55), int_2862, *[t_2863], **kwargs_2864)
    
    # Processing the call keyword arguments (line 1796)
    kwargs_2866 = {}
    # Getting the type of '_hierarchy' (line 1796)
    _hierarchy_2854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 8), '_hierarchy', False)
    # Obtaining the member 'cluster_maxclust_dist' of a type (line 1796)
    cluster_maxclust_dist_2855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1796, 8), _hierarchy_2854, 'cluster_maxclust_dist')
    # Calling cluster_maxclust_dist(args, kwargs) (line 1796)
    cluster_maxclust_dist_call_result_2867 = invoke(stypy.reporting.localization.Localization(__file__, 1796, 8), cluster_maxclust_dist_2855, *[Z_2856, T_2857, int_call_result_2861, int_call_result_2865], **kwargs_2866)
    
    # SSA branch for the else part of an if statement (line 1795)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'criterion' (line 1797)
    criterion_2868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 9), 'criterion')
    str_2869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 22), 'str', 'monocrit')
    # Applying the binary operator '==' (line 1797)
    result_eq_2870 = python_operator(stypy.reporting.localization.Localization(__file__, 1797, 9), '==', criterion_2868, str_2869)
    
    # Testing the type of an if condition (line 1797)
    if_condition_2871 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1797, 9), result_eq_2870)
    # Assigning a type to the variable 'if_condition_2871' (line 1797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 9), 'if_condition_2871', if_condition_2871)
    # SSA begins for if statement (line 1797)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a List (line 1798):
    
    # Assigning a Subscript to a Name (line 1798):
    
    # Obtaining the type of the subscript
    int_2872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 8), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 1798)
    # Processing the call arguments (line 1798)
    
    # Obtaining an instance of the builtin type 'list' (line 1798)
    list_2874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 50), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1798)
    # Adding element type (line 1798)
    # Getting the type of 'monocrit' (line 1798)
    monocrit_2875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 51), 'monocrit', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1798, 50), list_2874, monocrit_2875)
    
    # Processing the call keyword arguments (line 1798)
    kwargs_2876 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 1798)
    _copy_arrays_if_base_present_2873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 21), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 1798)
    _copy_arrays_if_base_present_call_result_2877 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 21), _copy_arrays_if_base_present_2873, *[list_2874], **kwargs_2876)
    
    # Obtaining the member '__getitem__' of a type (line 1798)
    getitem___2878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 8), _copy_arrays_if_base_present_call_result_2877, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1798)
    subscript_call_result_2879 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 8), getitem___2878, int_2872)
    
    # Assigning a type to the variable 'list_var_assignment_473' (line 1798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 8), 'list_var_assignment_473', subscript_call_result_2879)
    
    # Assigning a Name to a Name (line 1798):
    # Getting the type of 'list_var_assignment_473' (line 1798)
    list_var_assignment_473_2880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 8), 'list_var_assignment_473')
    # Assigning a type to the variable 'monocrit' (line 1798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 9), 'monocrit', list_var_assignment_473_2880)
    
    # Call to cluster_monocrit(...): (line 1799)
    # Processing the call arguments (line 1799)
    # Getting the type of 'Z' (line 1799)
    Z_2883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 36), 'Z', False)
    # Getting the type of 'monocrit' (line 1799)
    monocrit_2884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 39), 'monocrit', False)
    # Getting the type of 'T' (line 1799)
    T_2885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 49), 'T', False)
    
    # Call to float(...): (line 1799)
    # Processing the call arguments (line 1799)
    # Getting the type of 't' (line 1799)
    t_2887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 58), 't', False)
    # Processing the call keyword arguments (line 1799)
    kwargs_2888 = {}
    # Getting the type of 'float' (line 1799)
    float_2886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 52), 'float', False)
    # Calling float(args, kwargs) (line 1799)
    float_call_result_2889 = invoke(stypy.reporting.localization.Localization(__file__, 1799, 52), float_2886, *[t_2887], **kwargs_2888)
    
    
    # Call to int(...): (line 1799)
    # Processing the call arguments (line 1799)
    # Getting the type of 'n' (line 1799)
    n_2891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 66), 'n', False)
    # Processing the call keyword arguments (line 1799)
    kwargs_2892 = {}
    # Getting the type of 'int' (line 1799)
    int_2890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 62), 'int', False)
    # Calling int(args, kwargs) (line 1799)
    int_call_result_2893 = invoke(stypy.reporting.localization.Localization(__file__, 1799, 62), int_2890, *[n_2891], **kwargs_2892)
    
    # Processing the call keyword arguments (line 1799)
    kwargs_2894 = {}
    # Getting the type of '_hierarchy' (line 1799)
    _hierarchy_2881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 8), '_hierarchy', False)
    # Obtaining the member 'cluster_monocrit' of a type (line 1799)
    cluster_monocrit_2882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1799, 8), _hierarchy_2881, 'cluster_monocrit')
    # Calling cluster_monocrit(args, kwargs) (line 1799)
    cluster_monocrit_call_result_2895 = invoke(stypy.reporting.localization.Localization(__file__, 1799, 8), cluster_monocrit_2882, *[Z_2883, monocrit_2884, T_2885, float_call_result_2889, int_call_result_2893], **kwargs_2894)
    
    # SSA branch for the else part of an if statement (line 1797)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'criterion' (line 1800)
    criterion_2896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 9), 'criterion')
    str_2897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 22), 'str', 'maxclust_monocrit')
    # Applying the binary operator '==' (line 1800)
    result_eq_2898 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 9), '==', criterion_2896, str_2897)
    
    # Testing the type of an if condition (line 1800)
    if_condition_2899 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1800, 9), result_eq_2898)
    # Assigning a type to the variable 'if_condition_2899' (line 1800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 9), 'if_condition_2899', if_condition_2899)
    # SSA begins for if statement (line 1800)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a List (line 1801):
    
    # Assigning a Subscript to a Name (line 1801):
    
    # Obtaining the type of the subscript
    int_2900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1801, 8), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 1801)
    # Processing the call arguments (line 1801)
    
    # Obtaining an instance of the builtin type 'list' (line 1801)
    list_2902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1801, 50), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1801)
    # Adding element type (line 1801)
    # Getting the type of 'monocrit' (line 1801)
    monocrit_2903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 51), 'monocrit', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1801, 50), list_2902, monocrit_2903)
    
    # Processing the call keyword arguments (line 1801)
    kwargs_2904 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 1801)
    _copy_arrays_if_base_present_2901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 21), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 1801)
    _copy_arrays_if_base_present_call_result_2905 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 21), _copy_arrays_if_base_present_2901, *[list_2902], **kwargs_2904)
    
    # Obtaining the member '__getitem__' of a type (line 1801)
    getitem___2906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1801, 8), _copy_arrays_if_base_present_call_result_2905, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1801)
    subscript_call_result_2907 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 8), getitem___2906, int_2900)
    
    # Assigning a type to the variable 'list_var_assignment_474' (line 1801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 8), 'list_var_assignment_474', subscript_call_result_2907)
    
    # Assigning a Name to a Name (line 1801):
    # Getting the type of 'list_var_assignment_474' (line 1801)
    list_var_assignment_474_2908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 8), 'list_var_assignment_474')
    # Assigning a type to the variable 'monocrit' (line 1801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 9), 'monocrit', list_var_assignment_474_2908)
    
    # Call to cluster_maxclust_monocrit(...): (line 1802)
    # Processing the call arguments (line 1802)
    # Getting the type of 'Z' (line 1802)
    Z_2911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 45), 'Z', False)
    # Getting the type of 'monocrit' (line 1802)
    monocrit_2912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 48), 'monocrit', False)
    # Getting the type of 'T' (line 1802)
    T_2913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 58), 'T', False)
    
    # Call to int(...): (line 1802)
    # Processing the call arguments (line 1802)
    # Getting the type of 'n' (line 1802)
    n_2915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 65), 'n', False)
    # Processing the call keyword arguments (line 1802)
    kwargs_2916 = {}
    # Getting the type of 'int' (line 1802)
    int_2914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 61), 'int', False)
    # Calling int(args, kwargs) (line 1802)
    int_call_result_2917 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 61), int_2914, *[n_2915], **kwargs_2916)
    
    
    # Call to int(...): (line 1802)
    # Processing the call arguments (line 1802)
    # Getting the type of 't' (line 1802)
    t_2919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 73), 't', False)
    # Processing the call keyword arguments (line 1802)
    kwargs_2920 = {}
    # Getting the type of 'int' (line 1802)
    int_2918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 69), 'int', False)
    # Calling int(args, kwargs) (line 1802)
    int_call_result_2921 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 69), int_2918, *[t_2919], **kwargs_2920)
    
    # Processing the call keyword arguments (line 1802)
    kwargs_2922 = {}
    # Getting the type of '_hierarchy' (line 1802)
    _hierarchy_2909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 8), '_hierarchy', False)
    # Obtaining the member 'cluster_maxclust_monocrit' of a type (line 1802)
    cluster_maxclust_monocrit_2910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 8), _hierarchy_2909, 'cluster_maxclust_monocrit')
    # Calling cluster_maxclust_monocrit(args, kwargs) (line 1802)
    cluster_maxclust_monocrit_call_result_2923 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 8), cluster_maxclust_monocrit_2910, *[Z_2911, monocrit_2912, T_2913, int_call_result_2917, int_call_result_2921], **kwargs_2922)
    
    # SSA branch for the else part of an if statement (line 1800)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1804)
    # Processing the call arguments (line 1804)
    str_2925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1804, 25), 'str', 'Invalid cluster formation criterion: %s')
    
    # Call to str(...): (line 1805)
    # Processing the call arguments (line 1805)
    # Getting the type of 'criterion' (line 1805)
    criterion_2927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 31), 'criterion', False)
    # Processing the call keyword arguments (line 1805)
    kwargs_2928 = {}
    # Getting the type of 'str' (line 1805)
    str_2926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 27), 'str', False)
    # Calling str(args, kwargs) (line 1805)
    str_call_result_2929 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 27), str_2926, *[criterion_2927], **kwargs_2928)
    
    # Applying the binary operator '%' (line 1804)
    result_mod_2930 = python_operator(stypy.reporting.localization.Localization(__file__, 1804, 25), '%', str_2925, str_call_result_2929)
    
    # Processing the call keyword arguments (line 1804)
    kwargs_2931 = {}
    # Getting the type of 'ValueError' (line 1804)
    ValueError_2924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1804)
    ValueError_call_result_2932 = invoke(stypy.reporting.localization.Localization(__file__, 1804, 14), ValueError_2924, *[result_mod_2930], **kwargs_2931)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1804, 8), ValueError_call_result_2932, 'raise parameter', BaseException)
    # SSA join for if statement (line 1800)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1797)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1795)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1793)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1783)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'T' (line 1806)
    T_2933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 11), 'T')
    # Assigning a type to the variable 'stypy_return_type' (line 1806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1806, 4), 'stypy_return_type', T_2933)
    
    # ################# End of 'fcluster(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fcluster' in the type store
    # Getting the type of 'stypy_return_type' (line 1699)
    stypy_return_type_2934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_2934)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fcluster'
    return stypy_return_type_2934

# Assigning a type to the variable 'fcluster' (line 1699)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1699, 0), 'fcluster', fcluster)

@norecursion
def fclusterdata(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_2935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 33), 'str', 'inconsistent')
    str_2936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 24), 'str', 'euclidean')
    int_2937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 43), 'int')
    str_2938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 53), 'str', 'single')
    # Getting the type of 'None' (line 1810)
    None_2939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 65), 'None')
    defaults = [str_2935, str_2936, int_2937, str_2938, None_2939]
    # Create a new context for function 'fclusterdata'
    module_type_store = module_type_store.open_function_context('fclusterdata', 1809, 0, False)
    
    # Passed parameters checking function
    fclusterdata.stypy_localization = localization
    fclusterdata.stypy_type_of_self = None
    fclusterdata.stypy_type_store = module_type_store
    fclusterdata.stypy_function_name = 'fclusterdata'
    fclusterdata.stypy_param_names_list = ['X', 't', 'criterion', 'metric', 'depth', 'method', 'R']
    fclusterdata.stypy_varargs_param_name = None
    fclusterdata.stypy_kwargs_param_name = None
    fclusterdata.stypy_call_defaults = defaults
    fclusterdata.stypy_call_varargs = varargs
    fclusterdata.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fclusterdata', ['X', 't', 'criterion', 'metric', 'depth', 'method', 'R'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fclusterdata', localization, ['X', 't', 'criterion', 'metric', 'depth', 'method', 'R'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fclusterdata(...)' code ##################

    str_2940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1864, (-1)), 'str', '\n    Cluster observation data using a given metric.\n\n    Clusters the original observations in the n-by-m data\n    matrix X (n observations in m dimensions), using the euclidean\n    distance metric to calculate distances between original observations,\n    performs hierarchical clustering using the single linkage algorithm,\n    and forms flat clusters using the inconsistency method with `t` as the\n    cut-off threshold.\n\n    A one-dimensional array ``T`` of length ``n`` is returned. ``T[i]`` is\n    the index of the flat cluster to which the original observation ``i``\n    belongs.\n\n    Parameters\n    ----------\n    X : (N, M) ndarray\n        N by M data matrix with N observations in M dimensions.\n    t : float\n        The threshold to apply when forming flat clusters.\n    criterion : str, optional\n        Specifies the criterion for forming flat clusters.  Valid\n        values are \'inconsistent\' (default), \'distance\', or \'maxclust\'\n        cluster formation algorithms. See `fcluster` for descriptions.\n    metric : str, optional\n        The distance metric for calculating pairwise distances. See\n        ``distance.pdist`` for descriptions and linkage to verify\n        compatibility with the linkage method.\n    depth : int, optional\n        The maximum depth for the inconsistency calculation. See\n        `inconsistent` for more information.\n    method : str, optional\n        The linkage method to use (single, complete, average,\n        weighted, median centroid, ward). See `linkage` for more\n        information. Default is "single".\n    R : ndarray, optional\n        The inconsistency matrix. It will be computed if necessary\n        if it is not passed.\n\n    Returns\n    -------\n    fclusterdata : ndarray\n        A vector of length n. T[i] is the flat cluster number to\n        which original observation i belongs.\n\n    See Also\n    --------\n    scipy.spatial.distance.pdist : pairwise distance metrics\n\n    Notes\n    -----\n    This function is similar to the MATLAB function ``clusterdata``.\n\n    ')
    
    # Assigning a Call to a Name (line 1865):
    
    # Assigning a Call to a Name (line 1865):
    
    # Call to asarray(...): (line 1865)
    # Processing the call arguments (line 1865)
    # Getting the type of 'X' (line 1865)
    X_2943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 19), 'X', False)
    # Processing the call keyword arguments (line 1865)
    str_2944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1865, 28), 'str', 'c')
    keyword_2945 = str_2944
    # Getting the type of 'np' (line 1865)
    np_2946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 39), 'np', False)
    # Obtaining the member 'double' of a type (line 1865)
    double_2947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1865, 39), np_2946, 'double')
    keyword_2948 = double_2947
    kwargs_2949 = {'dtype': keyword_2948, 'order': keyword_2945}
    # Getting the type of 'np' (line 1865)
    np_2941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1865)
    asarray_2942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1865, 8), np_2941, 'asarray')
    # Calling asarray(args, kwargs) (line 1865)
    asarray_call_result_2950 = invoke(stypy.reporting.localization.Localization(__file__, 1865, 8), asarray_2942, *[X_2943], **kwargs_2949)
    
    # Assigning a type to the variable 'X' (line 1865)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 4), 'X', asarray_call_result_2950)
    
    
    # Evaluating a boolean operation
    
    
    # Call to type(...): (line 1867)
    # Processing the call arguments (line 1867)
    # Getting the type of 'X' (line 1867)
    X_2952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 12), 'X', False)
    # Processing the call keyword arguments (line 1867)
    kwargs_2953 = {}
    # Getting the type of 'type' (line 1867)
    type_2951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 7), 'type', False)
    # Calling type(args, kwargs) (line 1867)
    type_call_result_2954 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 7), type_2951, *[X_2952], **kwargs_2953)
    
    # Getting the type of 'np' (line 1867)
    np_2955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 18), 'np')
    # Obtaining the member 'ndarray' of a type (line 1867)
    ndarray_2956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 18), np_2955, 'ndarray')
    # Applying the binary operator '!=' (line 1867)
    result_ne_2957 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 7), '!=', type_call_result_2954, ndarray_2956)
    
    
    
    # Call to len(...): (line 1867)
    # Processing the call arguments (line 1867)
    # Getting the type of 'X' (line 1867)
    X_2959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 36), 'X', False)
    # Obtaining the member 'shape' of a type (line 1867)
    shape_2960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 36), X_2959, 'shape')
    # Processing the call keyword arguments (line 1867)
    kwargs_2961 = {}
    # Getting the type of 'len' (line 1867)
    len_2958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 32), 'len', False)
    # Calling len(args, kwargs) (line 1867)
    len_call_result_2962 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 32), len_2958, *[shape_2960], **kwargs_2961)
    
    int_2963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 48), 'int')
    # Applying the binary operator '!=' (line 1867)
    result_ne_2964 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 32), '!=', len_call_result_2962, int_2963)
    
    # Applying the binary operator 'or' (line 1867)
    result_or_keyword_2965 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 7), 'or', result_ne_2957, result_ne_2964)
    
    # Testing the type of an if condition (line 1867)
    if_condition_2966 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1867, 4), result_or_keyword_2965)
    # Assigning a type to the variable 'if_condition_2966' (line 1867)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 4), 'if_condition_2966', if_condition_2966)
    # SSA begins for if statement (line 1867)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 1868)
    # Processing the call arguments (line 1868)
    str_2968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 24), 'str', 'The observation matrix X must be an n by m numpy array.')
    # Processing the call keyword arguments (line 1868)
    kwargs_2969 = {}
    # Getting the type of 'TypeError' (line 1868)
    TypeError_2967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1868)
    TypeError_call_result_2970 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 14), TypeError_2967, *[str_2968], **kwargs_2969)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1868, 8), TypeError_call_result_2970, 'raise parameter', BaseException)
    # SSA join for if statement (line 1867)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1871):
    
    # Assigning a Call to a Name (line 1871):
    
    # Call to pdist(...): (line 1871)
    # Processing the call arguments (line 1871)
    # Getting the type of 'X' (line 1871)
    X_2973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 23), 'X', False)
    # Processing the call keyword arguments (line 1871)
    # Getting the type of 'metric' (line 1871)
    metric_2974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 33), 'metric', False)
    keyword_2975 = metric_2974
    kwargs_2976 = {'metric': keyword_2975}
    # Getting the type of 'distance' (line 1871)
    distance_2971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 8), 'distance', False)
    # Obtaining the member 'pdist' of a type (line 1871)
    pdist_2972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1871, 8), distance_2971, 'pdist')
    # Calling pdist(args, kwargs) (line 1871)
    pdist_call_result_2977 = invoke(stypy.reporting.localization.Localization(__file__, 1871, 8), pdist_2972, *[X_2973], **kwargs_2976)
    
    # Assigning a type to the variable 'Y' (line 1871)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 4), 'Y', pdist_call_result_2977)
    
    # Assigning a Call to a Name (line 1872):
    
    # Assigning a Call to a Name (line 1872):
    
    # Call to linkage(...): (line 1872)
    # Processing the call arguments (line 1872)
    # Getting the type of 'Y' (line 1872)
    Y_2979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 16), 'Y', False)
    # Processing the call keyword arguments (line 1872)
    # Getting the type of 'method' (line 1872)
    method_2980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 26), 'method', False)
    keyword_2981 = method_2980
    kwargs_2982 = {'method': keyword_2981}
    # Getting the type of 'linkage' (line 1872)
    linkage_2978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 8), 'linkage', False)
    # Calling linkage(args, kwargs) (line 1872)
    linkage_call_result_2983 = invoke(stypy.reporting.localization.Localization(__file__, 1872, 8), linkage_2978, *[Y_2979], **kwargs_2982)
    
    # Assigning a type to the variable 'Z' (line 1872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 4), 'Z', linkage_call_result_2983)
    
    # Type idiom detected: calculating its left and rigth part (line 1873)
    # Getting the type of 'R' (line 1873)
    R_2984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 7), 'R')
    # Getting the type of 'None' (line 1873)
    None_2985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 12), 'None')
    
    (may_be_2986, more_types_in_union_2987) = may_be_none(R_2984, None_2985)

    if may_be_2986:

        if more_types_in_union_2987:
            # Runtime conditional SSA (line 1873)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1874):
        
        # Assigning a Call to a Name (line 1874):
        
        # Call to inconsistent(...): (line 1874)
        # Processing the call arguments (line 1874)
        # Getting the type of 'Z' (line 1874)
        Z_2989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 25), 'Z', False)
        # Processing the call keyword arguments (line 1874)
        # Getting the type of 'depth' (line 1874)
        depth_2990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 30), 'depth', False)
        keyword_2991 = depth_2990
        kwargs_2992 = {'d': keyword_2991}
        # Getting the type of 'inconsistent' (line 1874)
        inconsistent_2988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 12), 'inconsistent', False)
        # Calling inconsistent(args, kwargs) (line 1874)
        inconsistent_call_result_2993 = invoke(stypy.reporting.localization.Localization(__file__, 1874, 12), inconsistent_2988, *[Z_2989], **kwargs_2992)
        
        # Assigning a type to the variable 'R' (line 1874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1874, 8), 'R', inconsistent_call_result_2993)

        if more_types_in_union_2987:
            # Runtime conditional SSA for else branch (line 1873)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_2986) or more_types_in_union_2987):
        
        # Assigning a Call to a Name (line 1876):
        
        # Assigning a Call to a Name (line 1876):
        
        # Call to asarray(...): (line 1876)
        # Processing the call arguments (line 1876)
        # Getting the type of 'R' (line 1876)
        R_2996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 23), 'R', False)
        # Processing the call keyword arguments (line 1876)
        str_2997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 32), 'str', 'c')
        keyword_2998 = str_2997
        kwargs_2999 = {'order': keyword_2998}
        # Getting the type of 'np' (line 1876)
        np_2994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1876)
        asarray_2995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1876, 12), np_2994, 'asarray')
        # Calling asarray(args, kwargs) (line 1876)
        asarray_call_result_3000 = invoke(stypy.reporting.localization.Localization(__file__, 1876, 12), asarray_2995, *[R_2996], **kwargs_2999)
        
        # Assigning a type to the variable 'R' (line 1876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 8), 'R', asarray_call_result_3000)

        if (may_be_2986 and more_types_in_union_2987):
            # SSA join for if statement (line 1873)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1877):
    
    # Assigning a Call to a Name (line 1877):
    
    # Call to fcluster(...): (line 1877)
    # Processing the call arguments (line 1877)
    # Getting the type of 'Z' (line 1877)
    Z_3002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 17), 'Z', False)
    # Processing the call keyword arguments (line 1877)
    # Getting the type of 'criterion' (line 1877)
    criterion_3003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 30), 'criterion', False)
    keyword_3004 = criterion_3003
    # Getting the type of 'depth' (line 1877)
    depth_3005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 47), 'depth', False)
    keyword_3006 = depth_3005
    # Getting the type of 'R' (line 1877)
    R_3007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 56), 'R', False)
    keyword_3008 = R_3007
    # Getting the type of 't' (line 1877)
    t_3009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 61), 't', False)
    keyword_3010 = t_3009
    kwargs_3011 = {'depth': keyword_3006, 'R': keyword_3008, 'criterion': keyword_3004, 't': keyword_3010}
    # Getting the type of 'fcluster' (line 1877)
    fcluster_3001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'fcluster', False)
    # Calling fcluster(args, kwargs) (line 1877)
    fcluster_call_result_3012 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 8), fcluster_3001, *[Z_3002], **kwargs_3011)
    
    # Assigning a type to the variable 'T' (line 1877)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 4), 'T', fcluster_call_result_3012)
    # Getting the type of 'T' (line 1878)
    T_3013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 11), 'T')
    # Assigning a type to the variable 'stypy_return_type' (line 1878)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 4), 'stypy_return_type', T_3013)
    
    # ################# End of 'fclusterdata(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fclusterdata' in the type store
    # Getting the type of 'stypy_return_type' (line 1809)
    stypy_return_type_3014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_3014)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fclusterdata'
    return stypy_return_type_3014

# Assigning a type to the variable 'fclusterdata' (line 1809)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 0), 'fclusterdata', fclusterdata)

@norecursion
def leaves_list(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'leaves_list'
    module_type_store = module_type_store.open_function_context('leaves_list', 1881, 0, False)
    
    # Passed parameters checking function
    leaves_list.stypy_localization = localization
    leaves_list.stypy_type_of_self = None
    leaves_list.stypy_type_store = module_type_store
    leaves_list.stypy_function_name = 'leaves_list'
    leaves_list.stypy_param_names_list = ['Z']
    leaves_list.stypy_varargs_param_name = None
    leaves_list.stypy_kwargs_param_name = None
    leaves_list.stypy_call_defaults = defaults
    leaves_list.stypy_call_varargs = varargs
    leaves_list.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'leaves_list', ['Z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'leaves_list', localization, ['Z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'leaves_list(...)' code ##################

    str_3015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, (-1)), 'str', '\n    Return a list of leaf node ids.\n\n    The return corresponds to the observation vector index as it appears\n    in the tree from left to right. Z is a linkage matrix.\n\n    Parameters\n    ----------\n    Z : ndarray\n        The hierarchical clustering encoded as a matrix.  `Z` is\n        a linkage matrix.  See `linkage` for more information.\n\n    Returns\n    -------\n    leaves_list : ndarray\n        The list of leaf node ids.\n\n    ')
    
    # Assigning a Call to a Name (line 1900):
    
    # Assigning a Call to a Name (line 1900):
    
    # Call to asarray(...): (line 1900)
    # Processing the call arguments (line 1900)
    # Getting the type of 'Z' (line 1900)
    Z_3018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 19), 'Z', False)
    # Processing the call keyword arguments (line 1900)
    str_3019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1900, 28), 'str', 'c')
    keyword_3020 = str_3019
    kwargs_3021 = {'order': keyword_3020}
    # Getting the type of 'np' (line 1900)
    np_3016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1900)
    asarray_3017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1900, 8), np_3016, 'asarray')
    # Calling asarray(args, kwargs) (line 1900)
    asarray_call_result_3022 = invoke(stypy.reporting.localization.Localization(__file__, 1900, 8), asarray_3017, *[Z_3018], **kwargs_3021)
    
    # Assigning a type to the variable 'Z' (line 1900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1900, 4), 'Z', asarray_call_result_3022)
    
    # Call to is_valid_linkage(...): (line 1901)
    # Processing the call arguments (line 1901)
    # Getting the type of 'Z' (line 1901)
    Z_3024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 21), 'Z', False)
    # Processing the call keyword arguments (line 1901)
    # Getting the type of 'True' (line 1901)
    True_3025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 30), 'True', False)
    keyword_3026 = True_3025
    str_3027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1901, 41), 'str', 'Z')
    keyword_3028 = str_3027
    kwargs_3029 = {'throw': keyword_3026, 'name': keyword_3028}
    # Getting the type of 'is_valid_linkage' (line 1901)
    is_valid_linkage_3023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 1901)
    is_valid_linkage_call_result_3030 = invoke(stypy.reporting.localization.Localization(__file__, 1901, 4), is_valid_linkage_3023, *[Z_3024], **kwargs_3029)
    
    
    # Assigning a BinOp to a Name (line 1902):
    
    # Assigning a BinOp to a Name (line 1902):
    
    # Obtaining the type of the subscript
    int_3031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1902, 16), 'int')
    # Getting the type of 'Z' (line 1902)
    Z_3032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1902, 8), 'Z')
    # Obtaining the member 'shape' of a type (line 1902)
    shape_3033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1902, 8), Z_3032, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1902)
    getitem___3034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1902, 8), shape_3033, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1902)
    subscript_call_result_3035 = invoke(stypy.reporting.localization.Localization(__file__, 1902, 8), getitem___3034, int_3031)
    
    int_3036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1902, 21), 'int')
    # Applying the binary operator '+' (line 1902)
    result_add_3037 = python_operator(stypy.reporting.localization.Localization(__file__, 1902, 8), '+', subscript_call_result_3035, int_3036)
    
    # Assigning a type to the variable 'n' (line 1902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1902, 4), 'n', result_add_3037)
    
    # Assigning a Call to a Name (line 1903):
    
    # Assigning a Call to a Name (line 1903):
    
    # Call to zeros(...): (line 1903)
    # Processing the call arguments (line 1903)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1903)
    tuple_3040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1903, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1903)
    # Adding element type (line 1903)
    # Getting the type of 'n' (line 1903)
    n_3041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 19), 'n', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1903, 19), tuple_3040, n_3041)
    
    # Processing the call keyword arguments (line 1903)
    str_3042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1903, 30), 'str', 'i')
    keyword_3043 = str_3042
    kwargs_3044 = {'dtype': keyword_3043}
    # Getting the type of 'np' (line 1903)
    np_3038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 9), 'np', False)
    # Obtaining the member 'zeros' of a type (line 1903)
    zeros_3039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1903, 9), np_3038, 'zeros')
    # Calling zeros(args, kwargs) (line 1903)
    zeros_call_result_3045 = invoke(stypy.reporting.localization.Localization(__file__, 1903, 9), zeros_3039, *[tuple_3040], **kwargs_3044)
    
    # Assigning a type to the variable 'ML' (line 1903)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1903, 4), 'ML', zeros_call_result_3045)
    
    # Assigning a Call to a List (line 1904):
    
    # Assigning a Subscript to a Name (line 1904):
    
    # Obtaining the type of the subscript
    int_3046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1904, 4), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 1904)
    # Processing the call arguments (line 1904)
    
    # Obtaining an instance of the builtin type 'list' (line 1904)
    list_3048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1904, 39), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1904)
    # Adding element type (line 1904)
    # Getting the type of 'Z' (line 1904)
    Z_3049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 40), 'Z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1904, 39), list_3048, Z_3049)
    
    # Processing the call keyword arguments (line 1904)
    kwargs_3050 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 1904)
    _copy_arrays_if_base_present_3047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 10), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 1904)
    _copy_arrays_if_base_present_call_result_3051 = invoke(stypy.reporting.localization.Localization(__file__, 1904, 10), _copy_arrays_if_base_present_3047, *[list_3048], **kwargs_3050)
    
    # Obtaining the member '__getitem__' of a type (line 1904)
    getitem___3052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1904, 4), _copy_arrays_if_base_present_call_result_3051, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1904)
    subscript_call_result_3053 = invoke(stypy.reporting.localization.Localization(__file__, 1904, 4), getitem___3052, int_3046)
    
    # Assigning a type to the variable 'list_var_assignment_475' (line 1904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 4), 'list_var_assignment_475', subscript_call_result_3053)
    
    # Assigning a Name to a Name (line 1904):
    # Getting the type of 'list_var_assignment_475' (line 1904)
    list_var_assignment_475_3054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 4), 'list_var_assignment_475')
    # Assigning a type to the variable 'Z' (line 1904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 5), 'Z', list_var_assignment_475_3054)
    
    # Call to prelist(...): (line 1905)
    # Processing the call arguments (line 1905)
    # Getting the type of 'Z' (line 1905)
    Z_3057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 23), 'Z', False)
    # Getting the type of 'ML' (line 1905)
    ML_3058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 26), 'ML', False)
    
    # Call to int(...): (line 1905)
    # Processing the call arguments (line 1905)
    # Getting the type of 'n' (line 1905)
    n_3060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 34), 'n', False)
    # Processing the call keyword arguments (line 1905)
    kwargs_3061 = {}
    # Getting the type of 'int' (line 1905)
    int_3059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 30), 'int', False)
    # Calling int(args, kwargs) (line 1905)
    int_call_result_3062 = invoke(stypy.reporting.localization.Localization(__file__, 1905, 30), int_3059, *[n_3060], **kwargs_3061)
    
    # Processing the call keyword arguments (line 1905)
    kwargs_3063 = {}
    # Getting the type of '_hierarchy' (line 1905)
    _hierarchy_3055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1905, 4), '_hierarchy', False)
    # Obtaining the member 'prelist' of a type (line 1905)
    prelist_3056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1905, 4), _hierarchy_3055, 'prelist')
    # Calling prelist(args, kwargs) (line 1905)
    prelist_call_result_3064 = invoke(stypy.reporting.localization.Localization(__file__, 1905, 4), prelist_3056, *[Z_3057, ML_3058, int_call_result_3062], **kwargs_3063)
    
    # Getting the type of 'ML' (line 1906)
    ML_3065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 11), 'ML')
    # Assigning a type to the variable 'stypy_return_type' (line 1906)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1906, 4), 'stypy_return_type', ML_3065)
    
    # ################# End of 'leaves_list(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'leaves_list' in the type store
    # Getting the type of 'stypy_return_type' (line 1881)
    stypy_return_type_3066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_3066)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'leaves_list'
    return stypy_return_type_3066

# Assigning a type to the variable 'leaves_list' (line 1881)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 0), 'leaves_list', leaves_list)

# Assigning a Dict to a Name (line 1916):

# Assigning a Dict to a Name (line 1916):

# Obtaining an instance of the builtin type 'dict' (line 1916)
dict_3067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 14), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1916)
# Adding element type (key, value) (line 1916)
int_3068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 15), 'int')
int_3069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 19), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1916, 14), dict_3067, (int_3068, int_3069))
# Adding element type (key, value) (line 1916)
int_3070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 23), 'int')
int_3071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 27), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1916, 14), dict_3067, (int_3070, int_3071))
# Adding element type (key, value) (line 1916)
int_3072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 31), 'int')
int_3073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 35), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1916, 14), dict_3067, (int_3072, int_3073))
# Adding element type (key, value) (line 1916)
int_3074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 38), 'int')
int_3075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 42), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1916, 14), dict_3067, (int_3074, int_3075))
# Adding element type (key, value) (line 1916)
# Getting the type of 'np' (line 1916)
np_3076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 45), 'np')
# Obtaining the member 'inf' of a type (line 1916)
inf_3077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 45), np_3076, 'inf')
int_3078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1916, 53), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1916, 14), dict_3067, (inf_3077, int_3078))

# Assigning a type to the variable '_dtextsizes' (line 1916)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1916, 0), '_dtextsizes', dict_3067)

# Assigning a Dict to a Name (line 1917):

# Assigning a Dict to a Name (line 1917):

# Obtaining an instance of the builtin type 'dict' (line 1917)
dict_3079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 13), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1917)
# Adding element type (key, value) (line 1917)
int_3080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 14), 'int')
int_3081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 18), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1917, 13), dict_3079, (int_3080, int_3081))
# Adding element type (key, value) (line 1917)
int_3082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 21), 'int')
int_3083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 25), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1917, 13), dict_3079, (int_3082, int_3083))
# Adding element type (key, value) (line 1917)
# Getting the type of 'np' (line 1917)
np_3084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1917, 29), 'np')
# Obtaining the member 'inf' of a type (line 1917)
inf_3085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1917, 29), np_3084, 'inf')
int_3086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 37), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1917, 13), dict_3079, (inf_3085, int_3086))

# Assigning a type to the variable '_drotation' (line 1917)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1917, 0), '_drotation', dict_3079)

# Assigning a Call to a Name (line 1918):

# Assigning a Call to a Name (line 1918):

# Call to list(...): (line 1918)
# Processing the call arguments (line 1918)

# Call to keys(...): (line 1918)
# Processing the call keyword arguments (line 1918)
kwargs_3090 = {}
# Getting the type of '_dtextsizes' (line 1918)
_dtextsizes_3088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 24), '_dtextsizes', False)
# Obtaining the member 'keys' of a type (line 1918)
keys_3089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1918, 24), _dtextsizes_3088, 'keys')
# Calling keys(args, kwargs) (line 1918)
keys_call_result_3091 = invoke(stypy.reporting.localization.Localization(__file__, 1918, 24), keys_3089, *[], **kwargs_3090)

# Processing the call keyword arguments (line 1918)
kwargs_3092 = {}
# Getting the type of 'list' (line 1918)
list_3087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 19), 'list', False)
# Calling list(args, kwargs) (line 1918)
list_call_result_3093 = invoke(stypy.reporting.localization.Localization(__file__, 1918, 19), list_3087, *[keys_call_result_3091], **kwargs_3092)

# Assigning a type to the variable '_dtextsortedkeys' (line 1918)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1918, 0), '_dtextsortedkeys', list_call_result_3093)

# Call to sort(...): (line 1919)
# Processing the call keyword arguments (line 1919)
kwargs_3096 = {}
# Getting the type of '_dtextsortedkeys' (line 1919)
_dtextsortedkeys_3094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1919, 0), '_dtextsortedkeys', False)
# Obtaining the member 'sort' of a type (line 1919)
sort_3095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1919, 0), _dtextsortedkeys_3094, 'sort')
# Calling sort(args, kwargs) (line 1919)
sort_call_result_3097 = invoke(stypy.reporting.localization.Localization(__file__, 1919, 0), sort_3095, *[], **kwargs_3096)


# Assigning a Call to a Name (line 1920):

# Assigning a Call to a Name (line 1920):

# Call to list(...): (line 1920)
# Processing the call arguments (line 1920)

# Call to keys(...): (line 1920)
# Processing the call keyword arguments (line 1920)
kwargs_3101 = {}
# Getting the type of '_drotation' (line 1920)
_drotation_3099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 28), '_drotation', False)
# Obtaining the member 'keys' of a type (line 1920)
keys_3100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1920, 28), _drotation_3099, 'keys')
# Calling keys(args, kwargs) (line 1920)
keys_call_result_3102 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 28), keys_3100, *[], **kwargs_3101)

# Processing the call keyword arguments (line 1920)
kwargs_3103 = {}
# Getting the type of 'list' (line 1920)
list_3098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 23), 'list', False)
# Calling list(args, kwargs) (line 1920)
list_call_result_3104 = invoke(stypy.reporting.localization.Localization(__file__, 1920, 23), list_3098, *[keys_call_result_3102], **kwargs_3103)

# Assigning a type to the variable '_drotationsortedkeys' (line 1920)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 0), '_drotationsortedkeys', list_call_result_3104)

# Call to sort(...): (line 1921)
# Processing the call keyword arguments (line 1921)
kwargs_3107 = {}
# Getting the type of '_drotationsortedkeys' (line 1921)
_drotationsortedkeys_3105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 0), '_drotationsortedkeys', False)
# Obtaining the member 'sort' of a type (line 1921)
sort_3106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 0), _drotationsortedkeys_3105, 'sort')
# Calling sort(args, kwargs) (line 1921)
sort_call_result_3108 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 0), sort_3106, *[], **kwargs_3107)


@norecursion
def _remove_dups(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_remove_dups'
    module_type_store = module_type_store.open_function_context('_remove_dups', 1924, 0, False)
    
    # Passed parameters checking function
    _remove_dups.stypy_localization = localization
    _remove_dups.stypy_type_of_self = None
    _remove_dups.stypy_type_store = module_type_store
    _remove_dups.stypy_function_name = '_remove_dups'
    _remove_dups.stypy_param_names_list = ['L']
    _remove_dups.stypy_varargs_param_name = None
    _remove_dups.stypy_kwargs_param_name = None
    _remove_dups.stypy_call_defaults = defaults
    _remove_dups.stypy_call_varargs = varargs
    _remove_dups.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_remove_dups', ['L'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_remove_dups', localization, ['L'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_remove_dups(...)' code ##################

    str_3109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, (-1)), 'str', '\n    Remove duplicates AND preserve the original order of the elements.\n\n    The set class is not guaranteed to do this.\n    ')
    
    # Assigning a Call to a Name (line 1930):
    
    # Assigning a Call to a Name (line 1930):
    
    # Call to set(...): (line 1930)
    # Processing the call arguments (line 1930)
    
    # Obtaining an instance of the builtin type 'list' (line 1930)
    list_3111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1930, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1930)
    
    # Processing the call keyword arguments (line 1930)
    kwargs_3112 = {}
    # Getting the type of 'set' (line 1930)
    set_3110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 18), 'set', False)
    # Calling set(args, kwargs) (line 1930)
    set_call_result_3113 = invoke(stypy.reporting.localization.Localization(__file__, 1930, 18), set_3110, *[list_3111], **kwargs_3112)
    
    # Assigning a type to the variable 'seen_before' (line 1930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1930, 4), 'seen_before', set_call_result_3113)
    
    # Assigning a List to a Name (line 1931):
    
    # Assigning a List to a Name (line 1931):
    
    # Obtaining an instance of the builtin type 'list' (line 1931)
    list_3114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1931, 9), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1931)
    
    # Assigning a type to the variable 'L2' (line 1931)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1931, 4), 'L2', list_3114)
    
    # Getting the type of 'L' (line 1932)
    L_3115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 13), 'L')
    # Testing the type of a for loop iterable (line 1932)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1932, 4), L_3115)
    # Getting the type of the for loop variable (line 1932)
    for_loop_var_3116 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1932, 4), L_3115)
    # Assigning a type to the variable 'i' (line 1932)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1932, 4), 'i', for_loop_var_3116)
    # SSA begins for a for statement (line 1932)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'i' (line 1933)
    i_3117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 11), 'i')
    # Getting the type of 'seen_before' (line 1933)
    seen_before_3118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 20), 'seen_before')
    # Applying the binary operator 'notin' (line 1933)
    result_contains_3119 = python_operator(stypy.reporting.localization.Localization(__file__, 1933, 11), 'notin', i_3117, seen_before_3118)
    
    # Testing the type of an if condition (line 1933)
    if_condition_3120 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1933, 8), result_contains_3119)
    # Assigning a type to the variable 'if_condition_3120' (line 1933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1933, 8), 'if_condition_3120', if_condition_3120)
    # SSA begins for if statement (line 1933)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to add(...): (line 1934)
    # Processing the call arguments (line 1934)
    # Getting the type of 'i' (line 1934)
    i_3123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 28), 'i', False)
    # Processing the call keyword arguments (line 1934)
    kwargs_3124 = {}
    # Getting the type of 'seen_before' (line 1934)
    seen_before_3121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 12), 'seen_before', False)
    # Obtaining the member 'add' of a type (line 1934)
    add_3122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1934, 12), seen_before_3121, 'add')
    # Calling add(args, kwargs) (line 1934)
    add_call_result_3125 = invoke(stypy.reporting.localization.Localization(__file__, 1934, 12), add_3122, *[i_3123], **kwargs_3124)
    
    
    # Call to append(...): (line 1935)
    # Processing the call arguments (line 1935)
    # Getting the type of 'i' (line 1935)
    i_3128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 22), 'i', False)
    # Processing the call keyword arguments (line 1935)
    kwargs_3129 = {}
    # Getting the type of 'L2' (line 1935)
    L2_3126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 12), 'L2', False)
    # Obtaining the member 'append' of a type (line 1935)
    append_3127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1935, 12), L2_3126, 'append')
    # Calling append(args, kwargs) (line 1935)
    append_call_result_3130 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 12), append_3127, *[i_3128], **kwargs_3129)
    
    # SSA join for if statement (line 1933)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'L2' (line 1936)
    L2_3131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 11), 'L2')
    # Assigning a type to the variable 'stypy_return_type' (line 1936)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 4), 'stypy_return_type', L2_3131)
    
    # ################# End of '_remove_dups(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_remove_dups' in the type store
    # Getting the type of 'stypy_return_type' (line 1924)
    stypy_return_type_3132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_3132)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_remove_dups'
    return stypy_return_type_3132

# Assigning a type to the variable '_remove_dups' (line 1924)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 0), '_remove_dups', _remove_dups)

@norecursion
def _get_tick_text_size(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_tick_text_size'
    module_type_store = module_type_store.open_function_context('_get_tick_text_size', 1939, 0, False)
    
    # Passed parameters checking function
    _get_tick_text_size.stypy_localization = localization
    _get_tick_text_size.stypy_type_of_self = None
    _get_tick_text_size.stypy_type_store = module_type_store
    _get_tick_text_size.stypy_function_name = '_get_tick_text_size'
    _get_tick_text_size.stypy_param_names_list = ['p']
    _get_tick_text_size.stypy_varargs_param_name = None
    _get_tick_text_size.stypy_kwargs_param_name = None
    _get_tick_text_size.stypy_call_defaults = defaults
    _get_tick_text_size.stypy_call_varargs = varargs
    _get_tick_text_size.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_tick_text_size', ['p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_tick_text_size', localization, ['p'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_tick_text_size(...)' code ##################

    
    # Getting the type of '_dtextsortedkeys' (line 1940)
    _dtextsortedkeys_3133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 13), '_dtextsortedkeys')
    # Testing the type of a for loop iterable (line 1940)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1940, 4), _dtextsortedkeys_3133)
    # Getting the type of the for loop variable (line 1940)
    for_loop_var_3134 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1940, 4), _dtextsortedkeys_3133)
    # Assigning a type to the variable 'k' (line 1940)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1940, 4), 'k', for_loop_var_3134)
    # SSA begins for a for statement (line 1940)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'p' (line 1941)
    p_3135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 11), 'p')
    # Getting the type of 'k' (line 1941)
    k_3136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 16), 'k')
    # Applying the binary operator '<=' (line 1941)
    result_le_3137 = python_operator(stypy.reporting.localization.Localization(__file__, 1941, 11), '<=', p_3135, k_3136)
    
    # Testing the type of an if condition (line 1941)
    if_condition_3138 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1941, 8), result_le_3137)
    # Assigning a type to the variable 'if_condition_3138' (line 1941)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1941, 8), 'if_condition_3138', if_condition_3138)
    # SSA begins for if statement (line 1941)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1942)
    k_3139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 31), 'k')
    # Getting the type of '_dtextsizes' (line 1942)
    _dtextsizes_3140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 19), '_dtextsizes')
    # Obtaining the member '__getitem__' of a type (line 1942)
    getitem___3141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1942, 19), _dtextsizes_3140, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1942)
    subscript_call_result_3142 = invoke(stypy.reporting.localization.Localization(__file__, 1942, 19), getitem___3141, k_3139)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 12), 'stypy_return_type', subscript_call_result_3142)
    # SSA join for if statement (line 1941)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_get_tick_text_size(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_tick_text_size' in the type store
    # Getting the type of 'stypy_return_type' (line 1939)
    stypy_return_type_3143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_3143)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_tick_text_size'
    return stypy_return_type_3143

# Assigning a type to the variable '_get_tick_text_size' (line 1939)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1939, 0), '_get_tick_text_size', _get_tick_text_size)

@norecursion
def _get_tick_rotation(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_get_tick_rotation'
    module_type_store = module_type_store.open_function_context('_get_tick_rotation', 1945, 0, False)
    
    # Passed parameters checking function
    _get_tick_rotation.stypy_localization = localization
    _get_tick_rotation.stypy_type_of_self = None
    _get_tick_rotation.stypy_type_store = module_type_store
    _get_tick_rotation.stypy_function_name = '_get_tick_rotation'
    _get_tick_rotation.stypy_param_names_list = ['p']
    _get_tick_rotation.stypy_varargs_param_name = None
    _get_tick_rotation.stypy_kwargs_param_name = None
    _get_tick_rotation.stypy_call_defaults = defaults
    _get_tick_rotation.stypy_call_varargs = varargs
    _get_tick_rotation.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_get_tick_rotation', ['p'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_get_tick_rotation', localization, ['p'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_get_tick_rotation(...)' code ##################

    
    # Getting the type of '_drotationsortedkeys' (line 1946)
    _drotationsortedkeys_3144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 13), '_drotationsortedkeys')
    # Testing the type of a for loop iterable (line 1946)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1946, 4), _drotationsortedkeys_3144)
    # Getting the type of the for loop variable (line 1946)
    for_loop_var_3145 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1946, 4), _drotationsortedkeys_3144)
    # Assigning a type to the variable 'k' (line 1946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1946, 4), 'k', for_loop_var_3145)
    # SSA begins for a for statement (line 1946)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'p' (line 1947)
    p_3146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 11), 'p')
    # Getting the type of 'k' (line 1947)
    k_3147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 16), 'k')
    # Applying the binary operator '<=' (line 1947)
    result_le_3148 = python_operator(stypy.reporting.localization.Localization(__file__, 1947, 11), '<=', p_3146, k_3147)
    
    # Testing the type of an if condition (line 1947)
    if_condition_3149 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1947, 8), result_le_3148)
    # Assigning a type to the variable 'if_condition_3149' (line 1947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1947, 8), 'if_condition_3149', if_condition_3149)
    # SSA begins for if statement (line 1947)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1948)
    k_3150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 30), 'k')
    # Getting the type of '_drotation' (line 1948)
    _drotation_3151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1948, 19), '_drotation')
    # Obtaining the member '__getitem__' of a type (line 1948)
    getitem___3152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1948, 19), _drotation_3151, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1948)
    subscript_call_result_3153 = invoke(stypy.reporting.localization.Localization(__file__, 1948, 19), getitem___3152, k_3150)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1948)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1948, 12), 'stypy_return_type', subscript_call_result_3153)
    # SSA join for if statement (line 1947)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_get_tick_rotation(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_get_tick_rotation' in the type store
    # Getting the type of 'stypy_return_type' (line 1945)
    stypy_return_type_3154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_3154)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_get_tick_rotation'
    return stypy_return_type_3154

# Assigning a type to the variable '_get_tick_rotation' (line 1945)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1945, 0), '_get_tick_rotation', _get_tick_rotation)

@norecursion
def _plot_dendrogram(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1952)
    None_3155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 59), 'None')
    # Getting the type of 'None' (line 1953)
    None_3156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 35), 'None')
    # Getting the type of 'None' (line 1953)
    None_3157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1953, 59), 'None')
    # Getting the type of 'None' (line 1954)
    None_3158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1954, 24), 'None')
    str_3159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1954, 52), 'str', 'b')
    defaults = [None_3155, None_3156, None_3157, None_3158, str_3159]
    # Create a new context for function '_plot_dendrogram'
    module_type_store = module_type_store.open_function_context('_plot_dendrogram', 1951, 0, False)
    
    # Passed parameters checking function
    _plot_dendrogram.stypy_localization = localization
    _plot_dendrogram.stypy_type_of_self = None
    _plot_dendrogram.stypy_type_store = module_type_store
    _plot_dendrogram.stypy_function_name = '_plot_dendrogram'
    _plot_dendrogram.stypy_param_names_list = ['icoords', 'dcoords', 'ivl', 'p', 'n', 'mh', 'orientation', 'no_labels', 'color_list', 'leaf_font_size', 'leaf_rotation', 'contraction_marks', 'ax', 'above_threshold_color']
    _plot_dendrogram.stypy_varargs_param_name = None
    _plot_dendrogram.stypy_kwargs_param_name = None
    _plot_dendrogram.stypy_call_defaults = defaults
    _plot_dendrogram.stypy_call_varargs = varargs
    _plot_dendrogram.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_plot_dendrogram', ['icoords', 'dcoords', 'ivl', 'p', 'n', 'mh', 'orientation', 'no_labels', 'color_list', 'leaf_font_size', 'leaf_rotation', 'contraction_marks', 'ax', 'above_threshold_color'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_plot_dendrogram', localization, ['icoords', 'dcoords', 'ivl', 'p', 'n', 'mh', 'orientation', 'no_labels', 'color_list', 'leaf_font_size', 'leaf_rotation', 'contraction_marks', 'ax', 'above_threshold_color'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_plot_dendrogram(...)' code ##################

    
    
    # SSA begins for try-except statement (line 1957)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Type idiom detected: calculating its left and rigth part (line 1959)
    # Getting the type of 'ax' (line 1959)
    ax_3160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 11), 'ax')
    # Getting the type of 'None' (line 1959)
    None_3161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1959, 17), 'None')
    
    (may_be_3162, more_types_in_union_3163) = may_be_none(ax_3160, None_3161)

    if may_be_3162:

        if more_types_in_union_3163:
            # Runtime conditional SSA (line 1959)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1960, 12))
        
        # 'import matplotlib.pylab' statement (line 1960)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/cluster/')
        import_3164 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1960, 12), 'matplotlib.pylab')

        if (type(import_3164) is not StypyTypeError):

            if (import_3164 != 'pyd_module'):
                __import__(import_3164)
                sys_modules_3165 = sys.modules[import_3164]
                import_module(stypy.reporting.localization.Localization(__file__, 1960, 12), 'matplotlib.pylab', sys_modules_3165.module_type_store, module_type_store)
            else:
                import matplotlib.pylab

                import_module(stypy.reporting.localization.Localization(__file__, 1960, 12), 'matplotlib.pylab', matplotlib.pylab, module_type_store)

        else:
            # Assigning a type to the variable 'matplotlib.pylab' (line 1960)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1960, 12), 'matplotlib.pylab', import_3164)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/cluster/')
        

        if more_types_in_union_3163:
            # SSA join for if statement (line 1959)
            module_type_store = module_type_store.join_ssa_context()


    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1961, 8))
    
    # 'import matplotlib.patches' statement (line 1961)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/cluster/')
    import_3166 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1961, 8), 'matplotlib.patches')

    if (type(import_3166) is not StypyTypeError):

        if (import_3166 != 'pyd_module'):
            __import__(import_3166)
            sys_modules_3167 = sys.modules[import_3166]
            import_module(stypy.reporting.localization.Localization(__file__, 1961, 8), 'matplotlib.patches', sys_modules_3167.module_type_store, module_type_store)
        else:
            import matplotlib.patches

            import_module(stypy.reporting.localization.Localization(__file__, 1961, 8), 'matplotlib.patches', matplotlib.patches, module_type_store)

    else:
        # Assigning a type to the variable 'matplotlib.patches' (line 1961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1961, 8), 'matplotlib.patches', import_3166)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/cluster/')
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1962, 8))
    
    # 'import matplotlib.collections' statement (line 1962)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/scipy/cluster/')
    import_3168 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1962, 8), 'matplotlib.collections')

    if (type(import_3168) is not StypyTypeError):

        if (import_3168 != 'pyd_module'):
            __import__(import_3168)
            sys_modules_3169 = sys.modules[import_3168]
            import_module(stypy.reporting.localization.Localization(__file__, 1962, 8), 'matplotlib.collections', sys_modules_3169.module_type_store, module_type_store)
        else:
            import matplotlib.collections

            import_module(stypy.reporting.localization.Localization(__file__, 1962, 8), 'matplotlib.collections', matplotlib.collections, module_type_store)

    else:
        # Assigning a type to the variable 'matplotlib.collections' (line 1962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 8), 'matplotlib.collections', import_3168)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/scipy/cluster/')
    
    # SSA branch for the except part of a try statement (line 1957)
    # SSA branch for the except 'ImportError' branch of a try statement (line 1957)
    module_type_store.open_ssa_branch('except')
    
    # Call to ImportError(...): (line 1964)
    # Processing the call arguments (line 1964)
    str_3171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1964, 26), 'str', 'You must install the matplotlib library to plot the dendrogram. Use no_plot=True to calculate the dendrogram without plotting.')
    # Processing the call keyword arguments (line 1964)
    kwargs_3172 = {}
    # Getting the type of 'ImportError' (line 1964)
    ImportError_3170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 14), 'ImportError', False)
    # Calling ImportError(args, kwargs) (line 1964)
    ImportError_call_result_3173 = invoke(stypy.reporting.localization.Localization(__file__, 1964, 14), ImportError_3170, *[str_3171], **kwargs_3172)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1964, 8), ImportError_call_result_3173, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1957)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1968)
    # Getting the type of 'ax' (line 1968)
    ax_3174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 7), 'ax')
    # Getting the type of 'None' (line 1968)
    None_3175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 13), 'None')
    
    (may_be_3176, more_types_in_union_3177) = may_be_none(ax_3174, None_3175)

    if may_be_3176:

        if more_types_in_union_3177:
            # Runtime conditional SSA (line 1968)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1969):
        
        # Assigning a Call to a Name (line 1969):
        
        # Call to gca(...): (line 1969)
        # Processing the call keyword arguments (line 1969)
        kwargs_3181 = {}
        # Getting the type of 'matplotlib' (line 1969)
        matplotlib_3178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 13), 'matplotlib', False)
        # Obtaining the member 'pylab' of a type (line 1969)
        pylab_3179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1969, 13), matplotlib_3178, 'pylab')
        # Obtaining the member 'gca' of a type (line 1969)
        gca_3180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1969, 13), pylab_3179, 'gca')
        # Calling gca(args, kwargs) (line 1969)
        gca_call_result_3182 = invoke(stypy.reporting.localization.Localization(__file__, 1969, 13), gca_3180, *[], **kwargs_3181)
        
        # Assigning a type to the variable 'ax' (line 1969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1969, 8), 'ax', gca_call_result_3182)
        
        # Assigning a Name to a Name (line 1971):
        
        # Assigning a Name to a Name (line 1971):
        # Getting the type of 'True' (line 1971)
        True_3183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 25), 'True')
        # Assigning a type to the variable 'trigger_redraw' (line 1971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1971, 8), 'trigger_redraw', True_3183)

        if more_types_in_union_3177:
            # Runtime conditional SSA for else branch (line 1968)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_3176) or more_types_in_union_3177):
        
        # Assigning a Name to a Name (line 1973):
        
        # Assigning a Name to a Name (line 1973):
        # Getting the type of 'False' (line 1973)
        False_3184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 25), 'False')
        # Assigning a type to the variable 'trigger_redraw' (line 1973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 8), 'trigger_redraw', False_3184)

        if (may_be_3176 and more_types_in_union_3177):
            # SSA join for if statement (line 1968)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 1976):
    
    # Assigning a BinOp to a Name (line 1976):
    
    # Call to len(...): (line 1976)
    # Processing the call arguments (line 1976)
    # Getting the type of 'ivl' (line 1976)
    ivl_3186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 14), 'ivl', False)
    # Processing the call keyword arguments (line 1976)
    kwargs_3187 = {}
    # Getting the type of 'len' (line 1976)
    len_3185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 10), 'len', False)
    # Calling len(args, kwargs) (line 1976)
    len_call_result_3188 = invoke(stypy.reporting.localization.Localization(__file__, 1976, 10), len_3185, *[ivl_3186], **kwargs_3187)
    
    int_3189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1976, 21), 'int')
    # Applying the binary operator '*' (line 1976)
    result_mul_3190 = python_operator(stypy.reporting.localization.Localization(__file__, 1976, 10), '*', len_call_result_3188, int_3189)
    
    # Assigning a type to the variable 'ivw' (line 1976)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1976, 4), 'ivw', result_mul_3190)
    
    # Assigning a BinOp to a Name (line 1978):
    
    # Assigning a BinOp to a Name (line 1978):
    # Getting the type of 'mh' (line 1978)
    mh_3191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 10), 'mh')
    # Getting the type of 'mh' (line 1978)
    mh_3192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1978, 15), 'mh')
    float_3193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 20), 'float')
    # Applying the binary operator '*' (line 1978)
    result_mul_3194 = python_operator(stypy.reporting.localization.Localization(__file__, 1978, 15), '*', mh_3192, float_3193)
    
    # Applying the binary operator '+' (line 1978)
    result_add_3195 = python_operator(stypy.reporting.localization.Localization(__file__, 1978, 10), '+', mh_3191, result_mul_3194)
    
    # Assigning a type to the variable 'dvw' (line 1978)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 4), 'dvw', result_add_3195)
    
    # Assigning a Call to a Name (line 1980):
    
    # Assigning a Call to a Name (line 1980):
    
    # Call to arange(...): (line 1980)
    # Processing the call arguments (line 1980)
    int_3198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 25), 'int')
    
    # Call to len(...): (line 1980)
    # Processing the call arguments (line 1980)
    # Getting the type of 'ivl' (line 1980)
    ivl_3200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 32), 'ivl', False)
    # Processing the call keyword arguments (line 1980)
    kwargs_3201 = {}
    # Getting the type of 'len' (line 1980)
    len_3199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 28), 'len', False)
    # Calling len(args, kwargs) (line 1980)
    len_call_result_3202 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 28), len_3199, *[ivl_3200], **kwargs_3201)
    
    int_3203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 39), 'int')
    # Applying the binary operator '*' (line 1980)
    result_mul_3204 = python_operator(stypy.reporting.localization.Localization(__file__, 1980, 28), '*', len_call_result_3202, int_3203)
    
    int_3205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 44), 'int')
    # Applying the binary operator '+' (line 1980)
    result_add_3206 = python_operator(stypy.reporting.localization.Localization(__file__, 1980, 28), '+', result_mul_3204, int_3205)
    
    int_3207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1980, 47), 'int')
    # Processing the call keyword arguments (line 1980)
    kwargs_3208 = {}
    # Getting the type of 'np' (line 1980)
    np_3196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 15), 'np', False)
    # Obtaining the member 'arange' of a type (line 1980)
    arange_3197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1980, 15), np_3196, 'arange')
    # Calling arange(args, kwargs) (line 1980)
    arange_call_result_3209 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 15), arange_3197, *[int_3198, result_add_3206, int_3207], **kwargs_3208)
    
    # Assigning a type to the variable 'iv_ticks' (line 1980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 4), 'iv_ticks', arange_call_result_3209)
    
    
    # Getting the type of 'orientation' (line 1981)
    orientation_3210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 7), 'orientation')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1981)
    tuple_3211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1981)
    # Adding element type (line 1981)
    str_3212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, 23), 'str', 'top')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1981, 23), tuple_3211, str_3212)
    # Adding element type (line 1981)
    str_3213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, 30), 'str', 'bottom')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1981, 23), tuple_3211, str_3213)
    
    # Applying the binary operator 'in' (line 1981)
    result_contains_3214 = python_operator(stypy.reporting.localization.Localization(__file__, 1981, 7), 'in', orientation_3210, tuple_3211)
    
    # Testing the type of an if condition (line 1981)
    if_condition_3215 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1981, 4), result_contains_3214)
    # Assigning a type to the variable 'if_condition_3215' (line 1981)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1981, 4), 'if_condition_3215', if_condition_3215)
    # SSA begins for if statement (line 1981)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'orientation' (line 1982)
    orientation_3216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1982, 11), 'orientation')
    str_3217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1982, 26), 'str', 'top')
    # Applying the binary operator '==' (line 1982)
    result_eq_3218 = python_operator(stypy.reporting.localization.Localization(__file__, 1982, 11), '==', orientation_3216, str_3217)
    
    # Testing the type of an if condition (line 1982)
    if_condition_3219 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1982, 8), result_eq_3218)
    # Assigning a type to the variable 'if_condition_3219' (line 1982)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1982, 8), 'if_condition_3219', if_condition_3219)
    # SSA begins for if statement (line 1982)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_ylim(...): (line 1983)
    # Processing the call arguments (line 1983)
    
    # Obtaining an instance of the builtin type 'list' (line 1983)
    list_3222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1983)
    # Adding element type (line 1983)
    int_3223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1983, 24), list_3222, int_3223)
    # Adding element type (line 1983)
    # Getting the type of 'dvw' (line 1983)
    dvw_3224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 28), 'dvw', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1983, 24), list_3222, dvw_3224)
    
    # Processing the call keyword arguments (line 1983)
    kwargs_3225 = {}
    # Getting the type of 'ax' (line 1983)
    ax_3220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 12), 'ax', False)
    # Obtaining the member 'set_ylim' of a type (line 1983)
    set_ylim_3221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1983, 12), ax_3220, 'set_ylim')
    # Calling set_ylim(args, kwargs) (line 1983)
    set_ylim_call_result_3226 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 12), set_ylim_3221, *[list_3222], **kwargs_3225)
    
    
    # Call to set_xlim(...): (line 1984)
    # Processing the call arguments (line 1984)
    
    # Obtaining an instance of the builtin type 'list' (line 1984)
    list_3229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1984, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1984)
    # Adding element type (line 1984)
    int_3230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1984, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1984, 24), list_3229, int_3230)
    # Adding element type (line 1984)
    # Getting the type of 'ivw' (line 1984)
    ivw_3231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 28), 'ivw', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1984, 24), list_3229, ivw_3231)
    
    # Processing the call keyword arguments (line 1984)
    kwargs_3232 = {}
    # Getting the type of 'ax' (line 1984)
    ax_3227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 12), 'ax', False)
    # Obtaining the member 'set_xlim' of a type (line 1984)
    set_xlim_3228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1984, 12), ax_3227, 'set_xlim')
    # Calling set_xlim(args, kwargs) (line 1984)
    set_xlim_call_result_3233 = invoke(stypy.reporting.localization.Localization(__file__, 1984, 12), set_xlim_3228, *[list_3229], **kwargs_3232)
    
    # SSA branch for the else part of an if statement (line 1982)
    module_type_store.open_ssa_branch('else')
    
    # Call to set_ylim(...): (line 1986)
    # Processing the call arguments (line 1986)
    
    # Obtaining an instance of the builtin type 'list' (line 1986)
    list_3236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1986, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1986)
    # Adding element type (line 1986)
    # Getting the type of 'dvw' (line 1986)
    dvw_3237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 25), 'dvw', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1986, 24), list_3236, dvw_3237)
    # Adding element type (line 1986)
    int_3238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1986, 30), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1986, 24), list_3236, int_3238)
    
    # Processing the call keyword arguments (line 1986)
    kwargs_3239 = {}
    # Getting the type of 'ax' (line 1986)
    ax_3234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 12), 'ax', False)
    # Obtaining the member 'set_ylim' of a type (line 1986)
    set_ylim_3235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1986, 12), ax_3234, 'set_ylim')
    # Calling set_ylim(args, kwargs) (line 1986)
    set_ylim_call_result_3240 = invoke(stypy.reporting.localization.Localization(__file__, 1986, 12), set_ylim_3235, *[list_3236], **kwargs_3239)
    
    
    # Call to set_xlim(...): (line 1987)
    # Processing the call arguments (line 1987)
    
    # Obtaining an instance of the builtin type 'list' (line 1987)
    list_3243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1987, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1987)
    # Adding element type (line 1987)
    int_3244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1987, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1987, 24), list_3243, int_3244)
    # Adding element type (line 1987)
    # Getting the type of 'ivw' (line 1987)
    ivw_3245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 28), 'ivw', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1987, 24), list_3243, ivw_3245)
    
    # Processing the call keyword arguments (line 1987)
    kwargs_3246 = {}
    # Getting the type of 'ax' (line 1987)
    ax_3241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 12), 'ax', False)
    # Obtaining the member 'set_xlim' of a type (line 1987)
    set_xlim_3242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1987, 12), ax_3241, 'set_xlim')
    # Calling set_xlim(args, kwargs) (line 1987)
    set_xlim_call_result_3247 = invoke(stypy.reporting.localization.Localization(__file__, 1987, 12), set_xlim_3242, *[list_3243], **kwargs_3246)
    
    # SSA join for if statement (line 1982)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1989):
    
    # Assigning a Name to a Name (line 1989):
    # Getting the type of 'icoords' (line 1989)
    icoords_3248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 17), 'icoords')
    # Assigning a type to the variable 'xlines' (line 1989)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1989, 8), 'xlines', icoords_3248)
    
    # Assigning a Name to a Name (line 1990):
    
    # Assigning a Name to a Name (line 1990):
    # Getting the type of 'dcoords' (line 1990)
    dcoords_3249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 17), 'dcoords')
    # Assigning a type to the variable 'ylines' (line 1990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1990, 8), 'ylines', dcoords_3249)
    
    # Getting the type of 'no_labels' (line 1991)
    no_labels_3250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 11), 'no_labels')
    # Testing the type of an if condition (line 1991)
    if_condition_3251 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1991, 8), no_labels_3250)
    # Assigning a type to the variable 'if_condition_3251' (line 1991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'if_condition_3251', if_condition_3251)
    # SSA begins for if statement (line 1991)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_xticks(...): (line 1992)
    # Processing the call arguments (line 1992)
    
    # Obtaining an instance of the builtin type 'list' (line 1992)
    list_3254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1992, 26), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1992)
    
    # Processing the call keyword arguments (line 1992)
    kwargs_3255 = {}
    # Getting the type of 'ax' (line 1992)
    ax_3252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 12), 'ax', False)
    # Obtaining the member 'set_xticks' of a type (line 1992)
    set_xticks_3253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 12), ax_3252, 'set_xticks')
    # Calling set_xticks(args, kwargs) (line 1992)
    set_xticks_call_result_3256 = invoke(stypy.reporting.localization.Localization(__file__, 1992, 12), set_xticks_3253, *[list_3254], **kwargs_3255)
    
    
    # Call to set_xticklabels(...): (line 1993)
    # Processing the call arguments (line 1993)
    
    # Obtaining an instance of the builtin type 'list' (line 1993)
    list_3259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1993, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1993)
    
    # Processing the call keyword arguments (line 1993)
    kwargs_3260 = {}
    # Getting the type of 'ax' (line 1993)
    ax_3257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 12), 'ax', False)
    # Obtaining the member 'set_xticklabels' of a type (line 1993)
    set_xticklabels_3258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1993, 12), ax_3257, 'set_xticklabels')
    # Calling set_xticklabels(args, kwargs) (line 1993)
    set_xticklabels_call_result_3261 = invoke(stypy.reporting.localization.Localization(__file__, 1993, 12), set_xticklabels_3258, *[list_3259], **kwargs_3260)
    
    # SSA branch for the else part of an if statement (line 1991)
    module_type_store.open_ssa_branch('else')
    
    # Call to set_xticks(...): (line 1995)
    # Processing the call arguments (line 1995)
    # Getting the type of 'iv_ticks' (line 1995)
    iv_ticks_3264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 26), 'iv_ticks', False)
    # Processing the call keyword arguments (line 1995)
    kwargs_3265 = {}
    # Getting the type of 'ax' (line 1995)
    ax_3262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 12), 'ax', False)
    # Obtaining the member 'set_xticks' of a type (line 1995)
    set_xticks_3263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1995, 12), ax_3262, 'set_xticks')
    # Calling set_xticks(args, kwargs) (line 1995)
    set_xticks_call_result_3266 = invoke(stypy.reporting.localization.Localization(__file__, 1995, 12), set_xticks_3263, *[iv_ticks_3264], **kwargs_3265)
    
    
    
    # Getting the type of 'orientation' (line 1997)
    orientation_3267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 15), 'orientation')
    str_3268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1997, 30), 'str', 'top')
    # Applying the binary operator '==' (line 1997)
    result_eq_3269 = python_operator(stypy.reporting.localization.Localization(__file__, 1997, 15), '==', orientation_3267, str_3268)
    
    # Testing the type of an if condition (line 1997)
    if_condition_3270 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1997, 12), result_eq_3269)
    # Assigning a type to the variable 'if_condition_3270' (line 1997)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1997, 12), 'if_condition_3270', if_condition_3270)
    # SSA begins for if statement (line 1997)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_ticks_position(...): (line 1998)
    # Processing the call arguments (line 1998)
    str_3274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1998, 44), 'str', 'bottom')
    # Processing the call keyword arguments (line 1998)
    kwargs_3275 = {}
    # Getting the type of 'ax' (line 1998)
    ax_3271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 16), 'ax', False)
    # Obtaining the member 'xaxis' of a type (line 1998)
    xaxis_3272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1998, 16), ax_3271, 'xaxis')
    # Obtaining the member 'set_ticks_position' of a type (line 1998)
    set_ticks_position_3273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1998, 16), xaxis_3272, 'set_ticks_position')
    # Calling set_ticks_position(args, kwargs) (line 1998)
    set_ticks_position_call_result_3276 = invoke(stypy.reporting.localization.Localization(__file__, 1998, 16), set_ticks_position_3273, *[str_3274], **kwargs_3275)
    
    # SSA branch for the else part of an if statement (line 1997)
    module_type_store.open_ssa_branch('else')
    
    # Call to set_ticks_position(...): (line 2000)
    # Processing the call arguments (line 2000)
    str_3280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2000, 44), 'str', 'top')
    # Processing the call keyword arguments (line 2000)
    kwargs_3281 = {}
    # Getting the type of 'ax' (line 2000)
    ax_3277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 16), 'ax', False)
    # Obtaining the member 'xaxis' of a type (line 2000)
    xaxis_3278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2000, 16), ax_3277, 'xaxis')
    # Obtaining the member 'set_ticks_position' of a type (line 2000)
    set_ticks_position_3279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2000, 16), xaxis_3278, 'set_ticks_position')
    # Calling set_ticks_position(args, kwargs) (line 2000)
    set_ticks_position_call_result_3282 = invoke(stypy.reporting.localization.Localization(__file__, 2000, 16), set_ticks_position_3279, *[str_3280], **kwargs_3281)
    
    # SSA join for if statement (line 1997)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to get_xticklines(...): (line 2003)
    # Processing the call keyword arguments (line 2003)
    kwargs_3285 = {}
    # Getting the type of 'ax' (line 2003)
    ax_3283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 24), 'ax', False)
    # Obtaining the member 'get_xticklines' of a type (line 2003)
    get_xticklines_3284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2003, 24), ax_3283, 'get_xticklines')
    # Calling get_xticklines(args, kwargs) (line 2003)
    get_xticklines_call_result_3286 = invoke(stypy.reporting.localization.Localization(__file__, 2003, 24), get_xticklines_3284, *[], **kwargs_3285)
    
    # Testing the type of a for loop iterable (line 2003)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2003, 12), get_xticklines_call_result_3286)
    # Getting the type of the for loop variable (line 2003)
    for_loop_var_3287 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2003, 12), get_xticklines_call_result_3286)
    # Assigning a type to the variable 'line' (line 2003)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2003, 12), 'line', for_loop_var_3287)
    # SSA begins for a for statement (line 2003)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to set_visible(...): (line 2004)
    # Processing the call arguments (line 2004)
    # Getting the type of 'False' (line 2004)
    False_3290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 33), 'False', False)
    # Processing the call keyword arguments (line 2004)
    kwargs_3291 = {}
    # Getting the type of 'line' (line 2004)
    line_3288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 16), 'line', False)
    # Obtaining the member 'set_visible' of a type (line 2004)
    set_visible_3289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2004, 16), line_3288, 'set_visible')
    # Calling set_visible(args, kwargs) (line 2004)
    set_visible_call_result_3292 = invoke(stypy.reporting.localization.Localization(__file__, 2004, 16), set_visible_3289, *[False_3290], **kwargs_3291)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 2006):
    
    # Assigning a IfExp to a Name (line 2006):
    
    
    # Getting the type of 'leaf_rotation' (line 2007)
    leaf_rotation_3293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 28), 'leaf_rotation')
    # Getting the type of 'None' (line 2007)
    None_3294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 45), 'None')
    # Applying the binary operator 'is' (line 2007)
    result_is__3295 = python_operator(stypy.reporting.localization.Localization(__file__, 2007, 28), 'is', leaf_rotation_3293, None_3294)
    
    # Testing the type of an if expression (line 2006)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2006, 24), result_is__3295)
    # SSA begins for if expression (line 2006)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to float(...): (line 2006)
    # Processing the call arguments (line 2006)
    
    # Call to _get_tick_rotation(...): (line 2006)
    # Processing the call arguments (line 2006)
    
    # Call to len(...): (line 2006)
    # Processing the call arguments (line 2006)
    # Getting the type of 'ivl' (line 2006)
    ivl_3299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 53), 'ivl', False)
    # Processing the call keyword arguments (line 2006)
    kwargs_3300 = {}
    # Getting the type of 'len' (line 2006)
    len_3298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 49), 'len', False)
    # Calling len(args, kwargs) (line 2006)
    len_call_result_3301 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 49), len_3298, *[ivl_3299], **kwargs_3300)
    
    # Processing the call keyword arguments (line 2006)
    kwargs_3302 = {}
    # Getting the type of '_get_tick_rotation' (line 2006)
    _get_tick_rotation_3297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 30), '_get_tick_rotation', False)
    # Calling _get_tick_rotation(args, kwargs) (line 2006)
    _get_tick_rotation_call_result_3303 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 30), _get_tick_rotation_3297, *[len_call_result_3301], **kwargs_3302)
    
    # Processing the call keyword arguments (line 2006)
    kwargs_3304 = {}
    # Getting the type of 'float' (line 2006)
    float_3296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 24), 'float', False)
    # Calling float(args, kwargs) (line 2006)
    float_call_result_3305 = invoke(stypy.reporting.localization.Localization(__file__, 2006, 24), float_3296, *[_get_tick_rotation_call_result_3303], **kwargs_3304)
    
    # SSA branch for the else part of an if expression (line 2006)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'leaf_rotation' (line 2007)
    leaf_rotation_3306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 56), 'leaf_rotation')
    # SSA join for if expression (line 2006)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_3307 = union_type.UnionType.add(float_call_result_3305, leaf_rotation_3306)
    
    # Assigning a type to the variable 'leaf_rot' (line 2006)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2006, 12), 'leaf_rot', if_exp_3307)
    
    # Assigning a IfExp to a Name (line 2008):
    
    # Assigning a IfExp to a Name (line 2008):
    
    
    # Getting the type of 'leaf_font_size' (line 2009)
    leaf_font_size_3308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 29), 'leaf_font_size')
    # Getting the type of 'None' (line 2009)
    None_3309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 47), 'None')
    # Applying the binary operator 'is' (line 2009)
    result_is__3310 = python_operator(stypy.reporting.localization.Localization(__file__, 2009, 29), 'is', leaf_font_size_3308, None_3309)
    
    # Testing the type of an if expression (line 2008)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2008, 25), result_is__3310)
    # SSA begins for if expression (line 2008)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to float(...): (line 2008)
    # Processing the call arguments (line 2008)
    
    # Call to _get_tick_text_size(...): (line 2008)
    # Processing the call arguments (line 2008)
    
    # Call to len(...): (line 2008)
    # Processing the call arguments (line 2008)
    # Getting the type of 'ivl' (line 2008)
    ivl_3314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 55), 'ivl', False)
    # Processing the call keyword arguments (line 2008)
    kwargs_3315 = {}
    # Getting the type of 'len' (line 2008)
    len_3313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 51), 'len', False)
    # Calling len(args, kwargs) (line 2008)
    len_call_result_3316 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 51), len_3313, *[ivl_3314], **kwargs_3315)
    
    # Processing the call keyword arguments (line 2008)
    kwargs_3317 = {}
    # Getting the type of '_get_tick_text_size' (line 2008)
    _get_tick_text_size_3312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 31), '_get_tick_text_size', False)
    # Calling _get_tick_text_size(args, kwargs) (line 2008)
    _get_tick_text_size_call_result_3318 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 31), _get_tick_text_size_3312, *[len_call_result_3316], **kwargs_3317)
    
    # Processing the call keyword arguments (line 2008)
    kwargs_3319 = {}
    # Getting the type of 'float' (line 2008)
    float_3311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 25), 'float', False)
    # Calling float(args, kwargs) (line 2008)
    float_call_result_3320 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 25), float_3311, *[_get_tick_text_size_call_result_3318], **kwargs_3319)
    
    # SSA branch for the else part of an if expression (line 2008)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'leaf_font_size' (line 2009)
    leaf_font_size_3321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 58), 'leaf_font_size')
    # SSA join for if expression (line 2008)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_3322 = union_type.UnionType.add(float_call_result_3320, leaf_font_size_3321)
    
    # Assigning a type to the variable 'leaf_font' (line 2008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2008, 12), 'leaf_font', if_exp_3322)
    
    # Call to set_xticklabels(...): (line 2010)
    # Processing the call arguments (line 2010)
    # Getting the type of 'ivl' (line 2010)
    ivl_3325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 31), 'ivl', False)
    # Processing the call keyword arguments (line 2010)
    # Getting the type of 'leaf_rot' (line 2010)
    leaf_rot_3326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 45), 'leaf_rot', False)
    keyword_3327 = leaf_rot_3326
    # Getting the type of 'leaf_font' (line 2010)
    leaf_font_3328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 60), 'leaf_font', False)
    keyword_3329 = leaf_font_3328
    kwargs_3330 = {'rotation': keyword_3327, 'size': keyword_3329}
    # Getting the type of 'ax' (line 2010)
    ax_3323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 12), 'ax', False)
    # Obtaining the member 'set_xticklabels' of a type (line 2010)
    set_xticklabels_3324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 12), ax_3323, 'set_xticklabels')
    # Calling set_xticklabels(args, kwargs) (line 2010)
    set_xticklabels_call_result_3331 = invoke(stypy.reporting.localization.Localization(__file__, 2010, 12), set_xticklabels_3324, *[ivl_3325], **kwargs_3330)
    
    # SSA join for if statement (line 1991)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1981)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'orientation' (line 2012)
    orientation_3332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 9), 'orientation')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2012)
    tuple_3333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2012, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2012)
    # Adding element type (line 2012)
    str_3334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2012, 25), 'str', 'left')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2012, 25), tuple_3333, str_3334)
    # Adding element type (line 2012)
    str_3335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2012, 33), 'str', 'right')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2012, 25), tuple_3333, str_3335)
    
    # Applying the binary operator 'in' (line 2012)
    result_contains_3336 = python_operator(stypy.reporting.localization.Localization(__file__, 2012, 9), 'in', orientation_3332, tuple_3333)
    
    # Testing the type of an if condition (line 2012)
    if_condition_3337 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2012, 9), result_contains_3336)
    # Assigning a type to the variable 'if_condition_3337' (line 2012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2012, 9), 'if_condition_3337', if_condition_3337)
    # SSA begins for if statement (line 2012)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'orientation' (line 2013)
    orientation_3338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2013, 11), 'orientation')
    str_3339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2013, 26), 'str', 'left')
    # Applying the binary operator '==' (line 2013)
    result_eq_3340 = python_operator(stypy.reporting.localization.Localization(__file__, 2013, 11), '==', orientation_3338, str_3339)
    
    # Testing the type of an if condition (line 2013)
    if_condition_3341 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2013, 8), result_eq_3340)
    # Assigning a type to the variable 'if_condition_3341' (line 2013)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2013, 8), 'if_condition_3341', if_condition_3341)
    # SSA begins for if statement (line 2013)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_xlim(...): (line 2014)
    # Processing the call arguments (line 2014)
    
    # Obtaining an instance of the builtin type 'list' (line 2014)
    list_3344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2014, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2014)
    # Adding element type (line 2014)
    # Getting the type of 'dvw' (line 2014)
    dvw_3345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 25), 'dvw', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2014, 24), list_3344, dvw_3345)
    # Adding element type (line 2014)
    int_3346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2014, 30), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2014, 24), list_3344, int_3346)
    
    # Processing the call keyword arguments (line 2014)
    kwargs_3347 = {}
    # Getting the type of 'ax' (line 2014)
    ax_3342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 12), 'ax', False)
    # Obtaining the member 'set_xlim' of a type (line 2014)
    set_xlim_3343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2014, 12), ax_3342, 'set_xlim')
    # Calling set_xlim(args, kwargs) (line 2014)
    set_xlim_call_result_3348 = invoke(stypy.reporting.localization.Localization(__file__, 2014, 12), set_xlim_3343, *[list_3344], **kwargs_3347)
    
    
    # Call to set_ylim(...): (line 2015)
    # Processing the call arguments (line 2015)
    
    # Obtaining an instance of the builtin type 'list' (line 2015)
    list_3351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2015)
    # Adding element type (line 2015)
    int_3352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2015, 24), list_3351, int_3352)
    # Adding element type (line 2015)
    # Getting the type of 'ivw' (line 2015)
    ivw_3353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 28), 'ivw', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2015, 24), list_3351, ivw_3353)
    
    # Processing the call keyword arguments (line 2015)
    kwargs_3354 = {}
    # Getting the type of 'ax' (line 2015)
    ax_3349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 12), 'ax', False)
    # Obtaining the member 'set_ylim' of a type (line 2015)
    set_ylim_3350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2015, 12), ax_3349, 'set_ylim')
    # Calling set_ylim(args, kwargs) (line 2015)
    set_ylim_call_result_3355 = invoke(stypy.reporting.localization.Localization(__file__, 2015, 12), set_ylim_3350, *[list_3351], **kwargs_3354)
    
    # SSA branch for the else part of an if statement (line 2013)
    module_type_store.open_ssa_branch('else')
    
    # Call to set_xlim(...): (line 2017)
    # Processing the call arguments (line 2017)
    
    # Obtaining an instance of the builtin type 'list' (line 2017)
    list_3358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2017, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2017)
    # Adding element type (line 2017)
    int_3359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2017, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2017, 24), list_3358, int_3359)
    # Adding element type (line 2017)
    # Getting the type of 'dvw' (line 2017)
    dvw_3360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 28), 'dvw', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2017, 24), list_3358, dvw_3360)
    
    # Processing the call keyword arguments (line 2017)
    kwargs_3361 = {}
    # Getting the type of 'ax' (line 2017)
    ax_3356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2017, 12), 'ax', False)
    # Obtaining the member 'set_xlim' of a type (line 2017)
    set_xlim_3357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2017, 12), ax_3356, 'set_xlim')
    # Calling set_xlim(args, kwargs) (line 2017)
    set_xlim_call_result_3362 = invoke(stypy.reporting.localization.Localization(__file__, 2017, 12), set_xlim_3357, *[list_3358], **kwargs_3361)
    
    
    # Call to set_ylim(...): (line 2018)
    # Processing the call arguments (line 2018)
    
    # Obtaining an instance of the builtin type 'list' (line 2018)
    list_3365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2018, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2018)
    # Adding element type (line 2018)
    int_3366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2018, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2018, 24), list_3365, int_3366)
    # Adding element type (line 2018)
    # Getting the type of 'ivw' (line 2018)
    ivw_3367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 28), 'ivw', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2018, 24), list_3365, ivw_3367)
    
    # Processing the call keyword arguments (line 2018)
    kwargs_3368 = {}
    # Getting the type of 'ax' (line 2018)
    ax_3363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 12), 'ax', False)
    # Obtaining the member 'set_ylim' of a type (line 2018)
    set_ylim_3364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2018, 12), ax_3363, 'set_ylim')
    # Calling set_ylim(args, kwargs) (line 2018)
    set_ylim_call_result_3369 = invoke(stypy.reporting.localization.Localization(__file__, 2018, 12), set_ylim_3364, *[list_3365], **kwargs_3368)
    
    # SSA join for if statement (line 2013)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 2020):
    
    # Assigning a Name to a Name (line 2020):
    # Getting the type of 'dcoords' (line 2020)
    dcoords_3370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 17), 'dcoords')
    # Assigning a type to the variable 'xlines' (line 2020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 8), 'xlines', dcoords_3370)
    
    # Assigning a Name to a Name (line 2021):
    
    # Assigning a Name to a Name (line 2021):
    # Getting the type of 'icoords' (line 2021)
    icoords_3371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 17), 'icoords')
    # Assigning a type to the variable 'ylines' (line 2021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 8), 'ylines', icoords_3371)
    
    # Getting the type of 'no_labels' (line 2022)
    no_labels_3372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2022, 11), 'no_labels')
    # Testing the type of an if condition (line 2022)
    if_condition_3373 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2022, 8), no_labels_3372)
    # Assigning a type to the variable 'if_condition_3373' (line 2022)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2022, 8), 'if_condition_3373', if_condition_3373)
    # SSA begins for if statement (line 2022)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_yticks(...): (line 2023)
    # Processing the call arguments (line 2023)
    
    # Obtaining an instance of the builtin type 'list' (line 2023)
    list_3376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 26), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2023)
    
    # Processing the call keyword arguments (line 2023)
    kwargs_3377 = {}
    # Getting the type of 'ax' (line 2023)
    ax_3374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 12), 'ax', False)
    # Obtaining the member 'set_yticks' of a type (line 2023)
    set_yticks_3375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2023, 12), ax_3374, 'set_yticks')
    # Calling set_yticks(args, kwargs) (line 2023)
    set_yticks_call_result_3378 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 12), set_yticks_3375, *[list_3376], **kwargs_3377)
    
    
    # Call to set_yticklabels(...): (line 2024)
    # Processing the call arguments (line 2024)
    
    # Obtaining an instance of the builtin type 'list' (line 2024)
    list_3381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2024, 31), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2024)
    
    # Processing the call keyword arguments (line 2024)
    kwargs_3382 = {}
    # Getting the type of 'ax' (line 2024)
    ax_3379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 12), 'ax', False)
    # Obtaining the member 'set_yticklabels' of a type (line 2024)
    set_yticklabels_3380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2024, 12), ax_3379, 'set_yticklabels')
    # Calling set_yticklabels(args, kwargs) (line 2024)
    set_yticklabels_call_result_3383 = invoke(stypy.reporting.localization.Localization(__file__, 2024, 12), set_yticklabels_3380, *[list_3381], **kwargs_3382)
    
    # SSA branch for the else part of an if statement (line 2022)
    module_type_store.open_ssa_branch('else')
    
    # Call to set_yticks(...): (line 2026)
    # Processing the call arguments (line 2026)
    # Getting the type of 'iv_ticks' (line 2026)
    iv_ticks_3386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 26), 'iv_ticks', False)
    # Processing the call keyword arguments (line 2026)
    kwargs_3387 = {}
    # Getting the type of 'ax' (line 2026)
    ax_3384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 12), 'ax', False)
    # Obtaining the member 'set_yticks' of a type (line 2026)
    set_yticks_3385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2026, 12), ax_3384, 'set_yticks')
    # Calling set_yticks(args, kwargs) (line 2026)
    set_yticks_call_result_3388 = invoke(stypy.reporting.localization.Localization(__file__, 2026, 12), set_yticks_3385, *[iv_ticks_3386], **kwargs_3387)
    
    
    
    # Getting the type of 'orientation' (line 2028)
    orientation_3389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 15), 'orientation')
    str_3390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2028, 30), 'str', 'left')
    # Applying the binary operator '==' (line 2028)
    result_eq_3391 = python_operator(stypy.reporting.localization.Localization(__file__, 2028, 15), '==', orientation_3389, str_3390)
    
    # Testing the type of an if condition (line 2028)
    if_condition_3392 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2028, 12), result_eq_3391)
    # Assigning a type to the variable 'if_condition_3392' (line 2028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2028, 12), 'if_condition_3392', if_condition_3392)
    # SSA begins for if statement (line 2028)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_ticks_position(...): (line 2029)
    # Processing the call arguments (line 2029)
    str_3396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2029, 44), 'str', 'right')
    # Processing the call keyword arguments (line 2029)
    kwargs_3397 = {}
    # Getting the type of 'ax' (line 2029)
    ax_3393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 16), 'ax', False)
    # Obtaining the member 'yaxis' of a type (line 2029)
    yaxis_3394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2029, 16), ax_3393, 'yaxis')
    # Obtaining the member 'set_ticks_position' of a type (line 2029)
    set_ticks_position_3395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2029, 16), yaxis_3394, 'set_ticks_position')
    # Calling set_ticks_position(args, kwargs) (line 2029)
    set_ticks_position_call_result_3398 = invoke(stypy.reporting.localization.Localization(__file__, 2029, 16), set_ticks_position_3395, *[str_3396], **kwargs_3397)
    
    # SSA branch for the else part of an if statement (line 2028)
    module_type_store.open_ssa_branch('else')
    
    # Call to set_ticks_position(...): (line 2031)
    # Processing the call arguments (line 2031)
    str_3402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2031, 44), 'str', 'left')
    # Processing the call keyword arguments (line 2031)
    kwargs_3403 = {}
    # Getting the type of 'ax' (line 2031)
    ax_3399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 16), 'ax', False)
    # Obtaining the member 'yaxis' of a type (line 2031)
    yaxis_3400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2031, 16), ax_3399, 'yaxis')
    # Obtaining the member 'set_ticks_position' of a type (line 2031)
    set_ticks_position_3401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2031, 16), yaxis_3400, 'set_ticks_position')
    # Calling set_ticks_position(args, kwargs) (line 2031)
    set_ticks_position_call_result_3404 = invoke(stypy.reporting.localization.Localization(__file__, 2031, 16), set_ticks_position_3401, *[str_3402], **kwargs_3403)
    
    # SSA join for if statement (line 2028)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to get_yticklines(...): (line 2034)
    # Processing the call keyword arguments (line 2034)
    kwargs_3407 = {}
    # Getting the type of 'ax' (line 2034)
    ax_3405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 24), 'ax', False)
    # Obtaining the member 'get_yticklines' of a type (line 2034)
    get_yticklines_3406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2034, 24), ax_3405, 'get_yticklines')
    # Calling get_yticklines(args, kwargs) (line 2034)
    get_yticklines_call_result_3408 = invoke(stypy.reporting.localization.Localization(__file__, 2034, 24), get_yticklines_3406, *[], **kwargs_3407)
    
    # Testing the type of a for loop iterable (line 2034)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2034, 12), get_yticklines_call_result_3408)
    # Getting the type of the for loop variable (line 2034)
    for_loop_var_3409 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2034, 12), get_yticklines_call_result_3408)
    # Assigning a type to the variable 'line' (line 2034)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2034, 12), 'line', for_loop_var_3409)
    # SSA begins for a for statement (line 2034)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to set_visible(...): (line 2035)
    # Processing the call arguments (line 2035)
    # Getting the type of 'False' (line 2035)
    False_3412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 33), 'False', False)
    # Processing the call keyword arguments (line 2035)
    kwargs_3413 = {}
    # Getting the type of 'line' (line 2035)
    line_3410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2035, 16), 'line', False)
    # Obtaining the member 'set_visible' of a type (line 2035)
    set_visible_3411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2035, 16), line_3410, 'set_visible')
    # Calling set_visible(args, kwargs) (line 2035)
    set_visible_call_result_3414 = invoke(stypy.reporting.localization.Localization(__file__, 2035, 16), set_visible_3411, *[False_3412], **kwargs_3413)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a IfExp to a Name (line 2037):
    
    # Assigning a IfExp to a Name (line 2037):
    
    
    # Getting the type of 'leaf_font_size' (line 2038)
    leaf_font_size_3415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 29), 'leaf_font_size')
    # Getting the type of 'None' (line 2038)
    None_3416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 47), 'None')
    # Applying the binary operator 'is' (line 2038)
    result_is__3417 = python_operator(stypy.reporting.localization.Localization(__file__, 2038, 29), 'is', leaf_font_size_3415, None_3416)
    
    # Testing the type of an if expression (line 2037)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2037, 25), result_is__3417)
    # SSA begins for if expression (line 2037)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to float(...): (line 2037)
    # Processing the call arguments (line 2037)
    
    # Call to _get_tick_text_size(...): (line 2037)
    # Processing the call arguments (line 2037)
    
    # Call to len(...): (line 2037)
    # Processing the call arguments (line 2037)
    # Getting the type of 'ivl' (line 2037)
    ivl_3421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 55), 'ivl', False)
    # Processing the call keyword arguments (line 2037)
    kwargs_3422 = {}
    # Getting the type of 'len' (line 2037)
    len_3420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 51), 'len', False)
    # Calling len(args, kwargs) (line 2037)
    len_call_result_3423 = invoke(stypy.reporting.localization.Localization(__file__, 2037, 51), len_3420, *[ivl_3421], **kwargs_3422)
    
    # Processing the call keyword arguments (line 2037)
    kwargs_3424 = {}
    # Getting the type of '_get_tick_text_size' (line 2037)
    _get_tick_text_size_3419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 31), '_get_tick_text_size', False)
    # Calling _get_tick_text_size(args, kwargs) (line 2037)
    _get_tick_text_size_call_result_3425 = invoke(stypy.reporting.localization.Localization(__file__, 2037, 31), _get_tick_text_size_3419, *[len_call_result_3423], **kwargs_3424)
    
    # Processing the call keyword arguments (line 2037)
    kwargs_3426 = {}
    # Getting the type of 'float' (line 2037)
    float_3418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 25), 'float', False)
    # Calling float(args, kwargs) (line 2037)
    float_call_result_3427 = invoke(stypy.reporting.localization.Localization(__file__, 2037, 25), float_3418, *[_get_tick_text_size_call_result_3425], **kwargs_3426)
    
    # SSA branch for the else part of an if expression (line 2037)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'leaf_font_size' (line 2038)
    leaf_font_size_3428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 58), 'leaf_font_size')
    # SSA join for if expression (line 2037)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_3429 = union_type.UnionType.add(float_call_result_3427, leaf_font_size_3428)
    
    # Assigning a type to the variable 'leaf_font' (line 2037)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 12), 'leaf_font', if_exp_3429)
    
    # Type idiom detected: calculating its left and rigth part (line 2040)
    # Getting the type of 'leaf_rotation' (line 2040)
    leaf_rotation_3430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 12), 'leaf_rotation')
    # Getting the type of 'None' (line 2040)
    None_3431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 36), 'None')
    
    (may_be_3432, more_types_in_union_3433) = may_not_be_none(leaf_rotation_3430, None_3431)

    if may_be_3432:

        if more_types_in_union_3433:
            # Runtime conditional SSA (line 2040)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_yticklabels(...): (line 2041)
        # Processing the call arguments (line 2041)
        # Getting the type of 'ivl' (line 2041)
        ivl_3436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 35), 'ivl', False)
        # Processing the call keyword arguments (line 2041)
        # Getting the type of 'leaf_rotation' (line 2041)
        leaf_rotation_3437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 49), 'leaf_rotation', False)
        keyword_3438 = leaf_rotation_3437
        # Getting the type of 'leaf_font' (line 2041)
        leaf_font_3439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 69), 'leaf_font', False)
        keyword_3440 = leaf_font_3439
        kwargs_3441 = {'rotation': keyword_3438, 'size': keyword_3440}
        # Getting the type of 'ax' (line 2041)
        ax_3434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 16), 'ax', False)
        # Obtaining the member 'set_yticklabels' of a type (line 2041)
        set_yticklabels_3435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2041, 16), ax_3434, 'set_yticklabels')
        # Calling set_yticklabels(args, kwargs) (line 2041)
        set_yticklabels_call_result_3442 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 16), set_yticklabels_3435, *[ivl_3436], **kwargs_3441)
        

        if more_types_in_union_3433:
            # Runtime conditional SSA for else branch (line 2040)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_3432) or more_types_in_union_3433):
        
        # Call to set_yticklabels(...): (line 2043)
        # Processing the call arguments (line 2043)
        # Getting the type of 'ivl' (line 2043)
        ivl_3445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 35), 'ivl', False)
        # Processing the call keyword arguments (line 2043)
        # Getting the type of 'leaf_font' (line 2043)
        leaf_font_3446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 45), 'leaf_font', False)
        keyword_3447 = leaf_font_3446
        kwargs_3448 = {'size': keyword_3447}
        # Getting the type of 'ax' (line 2043)
        ax_3443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 16), 'ax', False)
        # Obtaining the member 'set_yticklabels' of a type (line 2043)
        set_yticklabels_3444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2043, 16), ax_3443, 'set_yticklabels')
        # Calling set_yticklabels(args, kwargs) (line 2043)
        set_yticklabels_call_result_3449 = invoke(stypy.reporting.localization.Localization(__file__, 2043, 16), set_yticklabels_3444, *[ivl_3445], **kwargs_3448)
        

        if (may_be_3432 and more_types_in_union_3433):
            # SSA join for if statement (line 2040)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 2022)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2012)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1981)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2047):
    
    # Assigning a Call to a Name (line 2047):
    
    # Call to _remove_dups(...): (line 2047)
    # Processing the call arguments (line 2047)
    # Getting the type of 'color_list' (line 2047)
    color_list_3451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 31), 'color_list', False)
    # Processing the call keyword arguments (line 2047)
    kwargs_3452 = {}
    # Getting the type of '_remove_dups' (line 2047)
    _remove_dups_3450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 18), '_remove_dups', False)
    # Calling _remove_dups(args, kwargs) (line 2047)
    _remove_dups_call_result_3453 = invoke(stypy.reporting.localization.Localization(__file__, 2047, 18), _remove_dups_3450, *[color_list_3451], **kwargs_3452)
    
    # Assigning a type to the variable 'colors_used' (line 2047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2047, 4), 'colors_used', _remove_dups_call_result_3453)
    
    # Assigning a Dict to a Name (line 2048):
    
    # Assigning a Dict to a Name (line 2048):
    
    # Obtaining an instance of the builtin type 'dict' (line 2048)
    dict_3454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 21), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2048)
    
    # Assigning a type to the variable 'color_to_lines' (line 2048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2048, 4), 'color_to_lines', dict_3454)
    
    # Getting the type of 'colors_used' (line 2049)
    colors_used_3455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 17), 'colors_used')
    # Testing the type of a for loop iterable (line 2049)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2049, 4), colors_used_3455)
    # Getting the type of the for loop variable (line 2049)
    for_loop_var_3456 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2049, 4), colors_used_3455)
    # Assigning a type to the variable 'color' (line 2049)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2049, 4), 'color', for_loop_var_3456)
    # SSA begins for a for statement (line 2049)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a List to a Subscript (line 2050):
    
    # Assigning a List to a Subscript (line 2050):
    
    # Obtaining an instance of the builtin type 'list' (line 2050)
    list_3457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2050, 32), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2050)
    
    # Getting the type of 'color_to_lines' (line 2050)
    color_to_lines_3458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2050, 8), 'color_to_lines')
    # Getting the type of 'color' (line 2050)
    color_3459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2050, 23), 'color')
    # Storing an element on a container (line 2050)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2050, 8), color_to_lines_3458, (color_3459, list_3457))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to zip(...): (line 2051)
    # Processing the call arguments (line 2051)
    # Getting the type of 'xlines' (line 2051)
    xlines_3461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 37), 'xlines', False)
    # Getting the type of 'ylines' (line 2051)
    ylines_3462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 45), 'ylines', False)
    # Getting the type of 'color_list' (line 2051)
    color_list_3463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 53), 'color_list', False)
    # Processing the call keyword arguments (line 2051)
    kwargs_3464 = {}
    # Getting the type of 'zip' (line 2051)
    zip_3460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 33), 'zip', False)
    # Calling zip(args, kwargs) (line 2051)
    zip_call_result_3465 = invoke(stypy.reporting.localization.Localization(__file__, 2051, 33), zip_3460, *[xlines_3461, ylines_3462, color_list_3463], **kwargs_3464)
    
    # Testing the type of a for loop iterable (line 2051)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2051, 4), zip_call_result_3465)
    # Getting the type of the for loop variable (line 2051)
    for_loop_var_3466 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2051, 4), zip_call_result_3465)
    # Assigning a type to the variable 'xline' (line 2051)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 4), 'xline', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2051, 4), for_loop_var_3466))
    # Assigning a type to the variable 'yline' (line 2051)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 4), 'yline', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2051, 4), for_loop_var_3466))
    # Assigning a type to the variable 'color' (line 2051)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 4), 'color', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2051, 4), for_loop_var_3466))
    # SSA begins for a for statement (line 2051)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 2052)
    # Processing the call arguments (line 2052)
    
    # Call to list(...): (line 2052)
    # Processing the call arguments (line 2052)
    
    # Call to zip(...): (line 2052)
    # Processing the call arguments (line 2052)
    # Getting the type of 'xline' (line 2052)
    xline_3474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 46), 'xline', False)
    # Getting the type of 'yline' (line 2052)
    yline_3475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 53), 'yline', False)
    # Processing the call keyword arguments (line 2052)
    kwargs_3476 = {}
    # Getting the type of 'zip' (line 2052)
    zip_3473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 42), 'zip', False)
    # Calling zip(args, kwargs) (line 2052)
    zip_call_result_3477 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 42), zip_3473, *[xline_3474, yline_3475], **kwargs_3476)
    
    # Processing the call keyword arguments (line 2052)
    kwargs_3478 = {}
    # Getting the type of 'list' (line 2052)
    list_3472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 37), 'list', False)
    # Calling list(args, kwargs) (line 2052)
    list_call_result_3479 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 37), list_3472, *[zip_call_result_3477], **kwargs_3478)
    
    # Processing the call keyword arguments (line 2052)
    kwargs_3480 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'color' (line 2052)
    color_3467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 23), 'color', False)
    # Getting the type of 'color_to_lines' (line 2052)
    color_to_lines_3468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2052, 8), 'color_to_lines', False)
    # Obtaining the member '__getitem__' of a type (line 2052)
    getitem___3469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 8), color_to_lines_3468, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2052)
    subscript_call_result_3470 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 8), getitem___3469, color_3467)
    
    # Obtaining the member 'append' of a type (line 2052)
    append_3471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2052, 8), subscript_call_result_3470, 'append')
    # Calling append(args, kwargs) (line 2052)
    append_call_result_3481 = invoke(stypy.reporting.localization.Localization(__file__, 2052, 8), append_3471, *[list_call_result_3479], **kwargs_3480)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Dict to a Name (line 2054):
    
    # Assigning a Dict to a Name (line 2054):
    
    # Obtaining an instance of the builtin type 'dict' (line 2054)
    dict_3482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2054, 28), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2054)
    
    # Assigning a type to the variable 'colors_to_collections' (line 2054)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2054, 4), 'colors_to_collections', dict_3482)
    
    # Getting the type of 'colors_used' (line 2056)
    colors_used_3483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2056, 17), 'colors_used')
    # Testing the type of a for loop iterable (line 2056)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2056, 4), colors_used_3483)
    # Getting the type of the for loop variable (line 2056)
    for_loop_var_3484 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2056, 4), colors_used_3483)
    # Assigning a type to the variable 'color' (line 2056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2056, 4), 'color', for_loop_var_3484)
    # SSA begins for a for statement (line 2056)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 2057):
    
    # Assigning a Call to a Name (line 2057):
    
    # Call to LineCollection(...): (line 2057)
    # Processing the call arguments (line 2057)
    
    # Obtaining the type of the subscript
    # Getting the type of 'color' (line 2057)
    color_3488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 68), 'color', False)
    # Getting the type of 'color_to_lines' (line 2057)
    color_to_lines_3489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 53), 'color_to_lines', False)
    # Obtaining the member '__getitem__' of a type (line 2057)
    getitem___3490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2057, 53), color_to_lines_3489, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2057)
    subscript_call_result_3491 = invoke(stypy.reporting.localization.Localization(__file__, 2057, 53), getitem___3490, color_3488)
    
    # Processing the call keyword arguments (line 2057)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2058)
    tuple_3492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2058, 61), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2058)
    # Adding element type (line 2058)
    # Getting the type of 'color' (line 2058)
    color_3493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 61), 'color', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2058, 61), tuple_3492, color_3493)
    
    keyword_3494 = tuple_3492
    kwargs_3495 = {'colors': keyword_3494}
    # Getting the type of 'matplotlib' (line 2057)
    matplotlib_3485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 15), 'matplotlib', False)
    # Obtaining the member 'collections' of a type (line 2057)
    collections_3486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2057, 15), matplotlib_3485, 'collections')
    # Obtaining the member 'LineCollection' of a type (line 2057)
    LineCollection_3487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2057, 15), collections_3486, 'LineCollection')
    # Calling LineCollection(args, kwargs) (line 2057)
    LineCollection_call_result_3496 = invoke(stypy.reporting.localization.Localization(__file__, 2057, 15), LineCollection_3487, *[subscript_call_result_3491], **kwargs_3495)
    
    # Assigning a type to the variable 'coll' (line 2057)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2057, 8), 'coll', LineCollection_call_result_3496)
    
    # Assigning a Name to a Subscript (line 2059):
    
    # Assigning a Name to a Subscript (line 2059):
    # Getting the type of 'coll' (line 2059)
    coll_3497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 39), 'coll')
    # Getting the type of 'colors_to_collections' (line 2059)
    colors_to_collections_3498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 8), 'colors_to_collections')
    # Getting the type of 'color' (line 2059)
    color_3499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 30), 'color')
    # Storing an element on a container (line 2059)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2059, 8), colors_to_collections_3498, (color_3499, coll_3497))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'colors_used' (line 2062)
    colors_used_3500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 17), 'colors_used')
    # Testing the type of a for loop iterable (line 2062)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2062, 4), colors_used_3500)
    # Getting the type of the for loop variable (line 2062)
    for_loop_var_3501 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2062, 4), colors_used_3500)
    # Assigning a type to the variable 'color' (line 2062)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2062, 4), 'color', for_loop_var_3501)
    # SSA begins for a for statement (line 2062)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'color' (line 2063)
    color_3502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 11), 'color')
    # Getting the type of 'above_threshold_color' (line 2063)
    above_threshold_color_3503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 20), 'above_threshold_color')
    # Applying the binary operator '!=' (line 2063)
    result_ne_3504 = python_operator(stypy.reporting.localization.Localization(__file__, 2063, 11), '!=', color_3502, above_threshold_color_3503)
    
    # Testing the type of an if condition (line 2063)
    if_condition_3505 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2063, 8), result_ne_3504)
    # Assigning a type to the variable 'if_condition_3505' (line 2063)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2063, 8), 'if_condition_3505', if_condition_3505)
    # SSA begins for if statement (line 2063)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to add_collection(...): (line 2064)
    # Processing the call arguments (line 2064)
    
    # Obtaining the type of the subscript
    # Getting the type of 'color' (line 2064)
    color_3508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 52), 'color', False)
    # Getting the type of 'colors_to_collections' (line 2064)
    colors_to_collections_3509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 30), 'colors_to_collections', False)
    # Obtaining the member '__getitem__' of a type (line 2064)
    getitem___3510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2064, 30), colors_to_collections_3509, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2064)
    subscript_call_result_3511 = invoke(stypy.reporting.localization.Localization(__file__, 2064, 30), getitem___3510, color_3508)
    
    # Processing the call keyword arguments (line 2064)
    kwargs_3512 = {}
    # Getting the type of 'ax' (line 2064)
    ax_3506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 12), 'ax', False)
    # Obtaining the member 'add_collection' of a type (line 2064)
    add_collection_3507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2064, 12), ax_3506, 'add_collection')
    # Calling add_collection(args, kwargs) (line 2064)
    add_collection_call_result_3513 = invoke(stypy.reporting.localization.Localization(__file__, 2064, 12), add_collection_3507, *[subscript_call_result_3511], **kwargs_3512)
    
    # SSA join for if statement (line 2063)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'above_threshold_color' (line 2066)
    above_threshold_color_3514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 7), 'above_threshold_color')
    # Getting the type of 'colors_to_collections' (line 2066)
    colors_to_collections_3515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 32), 'colors_to_collections')
    # Applying the binary operator 'in' (line 2066)
    result_contains_3516 = python_operator(stypy.reporting.localization.Localization(__file__, 2066, 7), 'in', above_threshold_color_3514, colors_to_collections_3515)
    
    # Testing the type of an if condition (line 2066)
    if_condition_3517 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2066, 4), result_contains_3516)
    # Assigning a type to the variable 'if_condition_3517' (line 2066)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2066, 4), 'if_condition_3517', if_condition_3517)
    # SSA begins for if statement (line 2066)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to add_collection(...): (line 2067)
    # Processing the call arguments (line 2067)
    
    # Obtaining the type of the subscript
    # Getting the type of 'above_threshold_color' (line 2067)
    above_threshold_color_3520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 48), 'above_threshold_color', False)
    # Getting the type of 'colors_to_collections' (line 2067)
    colors_to_collections_3521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 26), 'colors_to_collections', False)
    # Obtaining the member '__getitem__' of a type (line 2067)
    getitem___3522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 26), colors_to_collections_3521, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2067)
    subscript_call_result_3523 = invoke(stypy.reporting.localization.Localization(__file__, 2067, 26), getitem___3522, above_threshold_color_3520)
    
    # Processing the call keyword arguments (line 2067)
    kwargs_3524 = {}
    # Getting the type of 'ax' (line 2067)
    ax_3518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'ax', False)
    # Obtaining the member 'add_collection' of a type (line 2067)
    add_collection_3519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 8), ax_3518, 'add_collection')
    # Calling add_collection(args, kwargs) (line 2067)
    add_collection_call_result_3525 = invoke(stypy.reporting.localization.Localization(__file__, 2067, 8), add_collection_3519, *[subscript_call_result_3523], **kwargs_3524)
    
    # SSA join for if statement (line 2066)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2069)
    # Getting the type of 'contraction_marks' (line 2069)
    contraction_marks_3526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 4), 'contraction_marks')
    # Getting the type of 'None' (line 2069)
    None_3527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 32), 'None')
    
    (may_be_3528, more_types_in_union_3529) = may_not_be_none(contraction_marks_3526, None_3527)

    if may_be_3528:

        if more_types_in_union_3529:
            # Runtime conditional SSA (line 2069)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 2070):
        
        # Assigning a Attribute to a Name (line 2070):
        # Getting the type of 'matplotlib' (line 2070)
        matplotlib_3530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 18), 'matplotlib')
        # Obtaining the member 'patches' of a type (line 2070)
        patches_3531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2070, 18), matplotlib_3530, 'patches')
        # Obtaining the member 'Ellipse' of a type (line 2070)
        Ellipse_3532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2070, 18), patches_3531, 'Ellipse')
        # Assigning a type to the variable 'Ellipse' (line 2070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2070, 8), 'Ellipse', Ellipse_3532)
        
        # Getting the type of 'contraction_marks' (line 2071)
        contraction_marks_3533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 22), 'contraction_marks')
        # Testing the type of a for loop iterable (line 2071)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2071, 8), contraction_marks_3533)
        # Getting the type of the for loop variable (line 2071)
        for_loop_var_3534 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2071, 8), contraction_marks_3533)
        # Assigning a type to the variable 'x' (line 2071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2071, 8), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2071, 8), for_loop_var_3534))
        # Assigning a type to the variable 'y' (line 2071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2071, 8), 'y', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2071, 8), for_loop_var_3534))
        # SSA begins for a for statement (line 2071)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'orientation' (line 2072)
        orientation_3535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 15), 'orientation')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2072)
        tuple_3536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2072, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2072)
        # Adding element type (line 2072)
        str_3537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2072, 31), 'str', 'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2072, 31), tuple_3536, str_3537)
        # Adding element type (line 2072)
        str_3538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2072, 39), 'str', 'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2072, 31), tuple_3536, str_3538)
        
        # Applying the binary operator 'in' (line 2072)
        result_contains_3539 = python_operator(stypy.reporting.localization.Localization(__file__, 2072, 15), 'in', orientation_3535, tuple_3536)
        
        # Testing the type of an if condition (line 2072)
        if_condition_3540 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2072, 12), result_contains_3539)
        # Assigning a type to the variable 'if_condition_3540' (line 2072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2072, 12), 'if_condition_3540', if_condition_3540)
        # SSA begins for if statement (line 2072)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2073):
        
        # Assigning a Call to a Name (line 2073):
        
        # Call to Ellipse(...): (line 2073)
        # Processing the call arguments (line 2073)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2073)
        tuple_3542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2073, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2073)
        # Adding element type (line 2073)
        # Getting the type of 'y' (line 2073)
        y_3543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 29), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2073, 29), tuple_3542, y_3543)
        # Adding element type (line 2073)
        # Getting the type of 'x' (line 2073)
        x_3544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 32), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2073, 29), tuple_3542, x_3544)
        
        # Processing the call keyword arguments (line 2073)
        # Getting the type of 'dvw' (line 2073)
        dvw_3545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 42), 'dvw', False)
        int_3546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2073, 48), 'int')
        # Applying the binary operator 'div' (line 2073)
        result_div_3547 = python_operator(stypy.reporting.localization.Localization(__file__, 2073, 42), 'div', dvw_3545, int_3546)
        
        keyword_3548 = result_div_3547
        float_3549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2073, 60), 'float')
        keyword_3550 = float_3549
        kwargs_3551 = {'width': keyword_3548, 'height': keyword_3550}
        # Getting the type of 'Ellipse' (line 2073)
        Ellipse_3541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2073, 20), 'Ellipse', False)
        # Calling Ellipse(args, kwargs) (line 2073)
        Ellipse_call_result_3552 = invoke(stypy.reporting.localization.Localization(__file__, 2073, 20), Ellipse_3541, *[tuple_3542], **kwargs_3551)
        
        # Assigning a type to the variable 'e' (line 2073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2073, 16), 'e', Ellipse_call_result_3552)
        # SSA branch for the else part of an if statement (line 2072)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2075):
        
        # Assigning a Call to a Name (line 2075):
        
        # Call to Ellipse(...): (line 2075)
        # Processing the call arguments (line 2075)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2075)
        tuple_3554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2075, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2075)
        # Adding element type (line 2075)
        # Getting the type of 'x' (line 2075)
        x_3555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 29), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2075, 29), tuple_3554, x_3555)
        # Adding element type (line 2075)
        # Getting the type of 'y' (line 2075)
        y_3556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 32), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2075, 29), tuple_3554, y_3556)
        
        # Processing the call keyword arguments (line 2075)
        float_3557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2075, 42), 'float')
        keyword_3558 = float_3557
        # Getting the type of 'dvw' (line 2075)
        dvw_3559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 54), 'dvw', False)
        int_3560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2075, 60), 'int')
        # Applying the binary operator 'div' (line 2075)
        result_div_3561 = python_operator(stypy.reporting.localization.Localization(__file__, 2075, 54), 'div', dvw_3559, int_3560)
        
        keyword_3562 = result_div_3561
        kwargs_3563 = {'width': keyword_3558, 'height': keyword_3562}
        # Getting the type of 'Ellipse' (line 2075)
        Ellipse_3553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 20), 'Ellipse', False)
        # Calling Ellipse(args, kwargs) (line 2075)
        Ellipse_call_result_3564 = invoke(stypy.reporting.localization.Localization(__file__, 2075, 20), Ellipse_3553, *[tuple_3554], **kwargs_3563)
        
        # Assigning a type to the variable 'e' (line 2075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 16), 'e', Ellipse_call_result_3564)
        # SSA join for if statement (line 2072)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to add_artist(...): (line 2076)
        # Processing the call arguments (line 2076)
        # Getting the type of 'e' (line 2076)
        e_3567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 26), 'e', False)
        # Processing the call keyword arguments (line 2076)
        kwargs_3568 = {}
        # Getting the type of 'ax' (line 2076)
        ax_3565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 12), 'ax', False)
        # Obtaining the member 'add_artist' of a type (line 2076)
        add_artist_3566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2076, 12), ax_3565, 'add_artist')
        # Calling add_artist(args, kwargs) (line 2076)
        add_artist_call_result_3569 = invoke(stypy.reporting.localization.Localization(__file__, 2076, 12), add_artist_3566, *[e_3567], **kwargs_3568)
        
        
        # Call to set_clip_box(...): (line 2077)
        # Processing the call arguments (line 2077)
        # Getting the type of 'ax' (line 2077)
        ax_3572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 27), 'ax', False)
        # Obtaining the member 'bbox' of a type (line 2077)
        bbox_3573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2077, 27), ax_3572, 'bbox')
        # Processing the call keyword arguments (line 2077)
        kwargs_3574 = {}
        # Getting the type of 'e' (line 2077)
        e_3570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2077, 12), 'e', False)
        # Obtaining the member 'set_clip_box' of a type (line 2077)
        set_clip_box_3571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2077, 12), e_3570, 'set_clip_box')
        # Calling set_clip_box(args, kwargs) (line 2077)
        set_clip_box_call_result_3575 = invoke(stypy.reporting.localization.Localization(__file__, 2077, 12), set_clip_box_3571, *[bbox_3573], **kwargs_3574)
        
        
        # Call to set_alpha(...): (line 2078)
        # Processing the call arguments (line 2078)
        float_3578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 24), 'float')
        # Processing the call keyword arguments (line 2078)
        kwargs_3579 = {}
        # Getting the type of 'e' (line 2078)
        e_3576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 12), 'e', False)
        # Obtaining the member 'set_alpha' of a type (line 2078)
        set_alpha_3577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 12), e_3576, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 2078)
        set_alpha_call_result_3580 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 12), set_alpha_3577, *[float_3578], **kwargs_3579)
        
        
        # Call to set_facecolor(...): (line 2079)
        # Processing the call arguments (line 2079)
        str_3583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2079, 28), 'str', 'k')
        # Processing the call keyword arguments (line 2079)
        kwargs_3584 = {}
        # Getting the type of 'e' (line 2079)
        e_3581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 12), 'e', False)
        # Obtaining the member 'set_facecolor' of a type (line 2079)
        set_facecolor_3582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2079, 12), e_3581, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 2079)
        set_facecolor_call_result_3585 = invoke(stypy.reporting.localization.Localization(__file__, 2079, 12), set_facecolor_3582, *[str_3583], **kwargs_3584)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_3529:
            # SSA join for if statement (line 2069)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'trigger_redraw' (line 2081)
    trigger_redraw_3586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 7), 'trigger_redraw')
    # Testing the type of an if condition (line 2081)
    if_condition_3587 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2081, 4), trigger_redraw_3586)
    # Assigning a type to the variable 'if_condition_3587' (line 2081)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2081, 4), 'if_condition_3587', if_condition_3587)
    # SSA begins for if statement (line 2081)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to draw_if_interactive(...): (line 2082)
    # Processing the call keyword arguments (line 2082)
    kwargs_3591 = {}
    # Getting the type of 'matplotlib' (line 2082)
    matplotlib_3588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2082, 8), 'matplotlib', False)
    # Obtaining the member 'pylab' of a type (line 2082)
    pylab_3589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2082, 8), matplotlib_3588, 'pylab')
    # Obtaining the member 'draw_if_interactive' of a type (line 2082)
    draw_if_interactive_3590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2082, 8), pylab_3589, 'draw_if_interactive')
    # Calling draw_if_interactive(args, kwargs) (line 2082)
    draw_if_interactive_call_result_3592 = invoke(stypy.reporting.localization.Localization(__file__, 2082, 8), draw_if_interactive_3590, *[], **kwargs_3591)
    
    # SSA join for if statement (line 2081)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_plot_dendrogram(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_plot_dendrogram' in the type store
    # Getting the type of 'stypy_return_type' (line 1951)
    stypy_return_type_3593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_3593)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_plot_dendrogram'
    return stypy_return_type_3593

# Assigning a type to the variable '_plot_dendrogram' (line 1951)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1951, 0), '_plot_dendrogram', _plot_dendrogram)

# Assigning a List to a Name (line 2085):

# Assigning a List to a Name (line 2085):

# Obtaining an instance of the builtin type 'list' (line 2085)
list_3594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 20), 'list')
# Adding type elements to the builtin type 'list' instance (line 2085)
# Adding element type (line 2085)
str_3595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 21), 'str', 'g')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2085, 20), list_3594, str_3595)
# Adding element type (line 2085)
str_3596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 26), 'str', 'r')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2085, 20), list_3594, str_3596)
# Adding element type (line 2085)
str_3597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 31), 'str', 'c')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2085, 20), list_3594, str_3597)
# Adding element type (line 2085)
str_3598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 36), 'str', 'm')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2085, 20), list_3594, str_3598)
# Adding element type (line 2085)
str_3599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 41), 'str', 'y')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2085, 20), list_3594, str_3599)
# Adding element type (line 2085)
str_3600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 46), 'str', 'k')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2085, 20), list_3594, str_3600)

# Assigning a type to the variable '_link_line_colors' (line 2085)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2085, 0), '_link_line_colors', list_3594)

@norecursion
def set_link_color_palette(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'set_link_color_palette'
    module_type_store = module_type_store.open_function_context('set_link_color_palette', 2088, 0, False)
    
    # Passed parameters checking function
    set_link_color_palette.stypy_localization = localization
    set_link_color_palette.stypy_type_of_self = None
    set_link_color_palette.stypy_type_store = module_type_store
    set_link_color_palette.stypy_function_name = 'set_link_color_palette'
    set_link_color_palette.stypy_param_names_list = ['palette']
    set_link_color_palette.stypy_varargs_param_name = None
    set_link_color_palette.stypy_kwargs_param_name = None
    set_link_color_palette.stypy_call_defaults = defaults
    set_link_color_palette.stypy_call_varargs = varargs
    set_link_color_palette.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'set_link_color_palette', ['palette'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'set_link_color_palette', localization, ['palette'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'set_link_color_palette(...)' code ##################

    str_3601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2143, (-1)), 'str', "\n    Set list of matplotlib color codes for use by dendrogram.\n\n    Note that this palette is global (i.e. setting it once changes the colors\n    for all subsequent calls to `dendrogram`) and that it affects only the\n    the colors below ``color_threshold``.\n\n    Note that `dendrogram` also accepts a custom coloring function through its\n    ``link_color_func`` keyword, which is more flexible and non-global.\n\n    Parameters\n    ----------\n    palette : list of str or None\n        A list of matplotlib color codes.  The order of the color codes is the\n        order in which the colors are cycled through when color thresholding in\n        the dendrogram.\n\n        If ``None``, resets the palette to its default (which is\n        ``['g', 'r', 'c', 'm', 'y', 'k']``).\n\n    Returns\n    -------\n    None\n\n    See Also\n    --------\n    dendrogram\n\n    Notes\n    -----\n    Ability to reset the palette with ``None`` added in Scipy 0.17.0.\n\n    Examples\n    --------\n    >>> from scipy.cluster import hierarchy\n    >>> ytdist = np.array([662., 877., 255., 412., 996., 295., 468., 268.,\n    ...                    400., 754., 564., 138., 219., 869., 669.])\n    >>> Z = hierarchy.linkage(ytdist, 'single')\n    >>> dn = hierarchy.dendrogram(Z, no_plot=True)\n    >>> dn['color_list']\n    ['g', 'b', 'b', 'b', 'b']\n    >>> hierarchy.set_link_color_palette(['c', 'm', 'y', 'k'])\n    >>> dn = hierarchy.dendrogram(Z, no_plot=True)\n    >>> dn['color_list']\n    ['c', 'b', 'b', 'b', 'b']\n    >>> dn = hierarchy.dendrogram(Z, no_plot=True, color_threshold=267,\n    ...                           above_threshold_color='k')\n    >>> dn['color_list']\n    ['c', 'm', 'm', 'k', 'k']\n\n    Now reset the color palette to its default:\n\n    >>> hierarchy.set_link_color_palette(None)\n\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 2144)
    # Getting the type of 'palette' (line 2144)
    palette_3602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 7), 'palette')
    # Getting the type of 'None' (line 2144)
    None_3603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 18), 'None')
    
    (may_be_3604, more_types_in_union_3605) = may_be_none(palette_3602, None_3603)

    if may_be_3604:

        if more_types_in_union_3605:
            # Runtime conditional SSA (line 2144)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a List to a Name (line 2146):
        
        # Assigning a List to a Name (line 2146):
        
        # Obtaining an instance of the builtin type 'list' (line 2146)
        list_3606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2146)
        # Adding element type (line 2146)
        str_3607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 19), 'str', 'g')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2146, 18), list_3606, str_3607)
        # Adding element type (line 2146)
        str_3608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 24), 'str', 'r')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2146, 18), list_3606, str_3608)
        # Adding element type (line 2146)
        str_3609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 29), 'str', 'c')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2146, 18), list_3606, str_3609)
        # Adding element type (line 2146)
        str_3610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 34), 'str', 'm')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2146, 18), list_3606, str_3610)
        # Adding element type (line 2146)
        str_3611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 39), 'str', 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2146, 18), list_3606, str_3611)
        # Adding element type (line 2146)
        str_3612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 44), 'str', 'k')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2146, 18), list_3606, str_3612)
        
        # Assigning a type to the variable 'palette' (line 2146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2146, 8), 'palette', list_3606)

        if more_types_in_union_3605:
            # Runtime conditional SSA for else branch (line 2144)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_3604) or more_types_in_union_3605):
        
        
        
        # Call to type(...): (line 2147)
        # Processing the call arguments (line 2147)
        # Getting the type of 'palette' (line 2147)
        palette_3614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 14), 'palette', False)
        # Processing the call keyword arguments (line 2147)
        kwargs_3615 = {}
        # Getting the type of 'type' (line 2147)
        type_3613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 9), 'type', False)
        # Calling type(args, kwargs) (line 2147)
        type_call_result_3616 = invoke(stypy.reporting.localization.Localization(__file__, 2147, 9), type_3613, *[palette_3614], **kwargs_3615)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2147)
        tuple_3617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2147, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2147)
        # Adding element type (line 2147)
        # Getting the type of 'list' (line 2147)
        list_3618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 31), 'list')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2147, 31), tuple_3617, list_3618)
        # Adding element type (line 2147)
        # Getting the type of 'tuple' (line 2147)
        tuple_3619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 37), 'tuple')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2147, 31), tuple_3617, tuple_3619)
        
        # Applying the binary operator 'notin' (line 2147)
        result_contains_3620 = python_operator(stypy.reporting.localization.Localization(__file__, 2147, 9), 'notin', type_call_result_3616, tuple_3617)
        
        # Testing the type of an if condition (line 2147)
        if_condition_3621 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2147, 9), result_contains_3620)
        # Assigning a type to the variable 'if_condition_3621' (line 2147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2147, 9), 'if_condition_3621', if_condition_3621)
        # SSA begins for if statement (line 2147)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 2148)
        # Processing the call arguments (line 2148)
        str_3623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2148, 24), 'str', 'palette must be a list or tuple')
        # Processing the call keyword arguments (line 2148)
        kwargs_3624 = {}
        # Getting the type of 'TypeError' (line 2148)
        TypeError_3622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 14), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 2148)
        TypeError_call_result_3625 = invoke(stypy.reporting.localization.Localization(__file__, 2148, 14), TypeError_3622, *[str_3623], **kwargs_3624)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2148, 8), TypeError_call_result_3625, 'raise parameter', BaseException)
        # SSA join for if statement (line 2147)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_3604 and more_types_in_union_3605):
            # SSA join for if statement (line 2144)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a ListComp to a Name (line 2149):
    
    # Assigning a ListComp to a Name (line 2149):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'palette' (line 2149)
    palette_3631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 52), 'palette')
    comprehension_3632 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2149, 15), palette_3631)
    # Assigning a type to the variable 'p' (line 2149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2149, 15), 'p', comprehension_3632)
    
    # Call to isinstance(...): (line 2149)
    # Processing the call arguments (line 2149)
    # Getting the type of 'p' (line 2149)
    p_3627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 26), 'p', False)
    # Getting the type of 'string_types' (line 2149)
    string_types_3628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 29), 'string_types', False)
    # Processing the call keyword arguments (line 2149)
    kwargs_3629 = {}
    # Getting the type of 'isinstance' (line 2149)
    isinstance_3626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2149)
    isinstance_call_result_3630 = invoke(stypy.reporting.localization.Localization(__file__, 2149, 15), isinstance_3626, *[p_3627, string_types_3628], **kwargs_3629)
    
    list_3633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2149, 15), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2149, 15), list_3633, isinstance_call_result_3630)
    # Assigning a type to the variable '_ptypes' (line 2149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2149, 4), '_ptypes', list_3633)
    
    
    # Getting the type of 'False' (line 2151)
    False_3634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 7), 'False')
    # Getting the type of '_ptypes' (line 2151)
    _ptypes_3635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 16), '_ptypes')
    # Applying the binary operator 'in' (line 2151)
    result_contains_3636 = python_operator(stypy.reporting.localization.Localization(__file__, 2151, 7), 'in', False_3634, _ptypes_3635)
    
    # Testing the type of an if condition (line 2151)
    if_condition_3637 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2151, 4), result_contains_3636)
    # Assigning a type to the variable 'if_condition_3637' (line 2151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2151, 4), 'if_condition_3637', if_condition_3637)
    # SSA begins for if statement (line 2151)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 2152)
    # Processing the call arguments (line 2152)
    str_3639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2152, 24), 'str', 'all palette list elements must be color strings')
    # Processing the call keyword arguments (line 2152)
    kwargs_3640 = {}
    # Getting the type of 'TypeError' (line 2152)
    TypeError_3638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 2152)
    TypeError_call_result_3641 = invoke(stypy.reporting.localization.Localization(__file__, 2152, 14), TypeError_3638, *[str_3639], **kwargs_3640)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2152, 8), TypeError_call_result_3641, 'raise parameter', BaseException)
    # SSA join for if statement (line 2151)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to list(...): (line 2154)
    # Processing the call arguments (line 2154)
    # Getting the type of '_link_line_colors' (line 2154)
    _link_line_colors_3643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 18), '_link_line_colors', False)
    # Processing the call keyword arguments (line 2154)
    kwargs_3644 = {}
    # Getting the type of 'list' (line 2154)
    list_3642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 13), 'list', False)
    # Calling list(args, kwargs) (line 2154)
    list_call_result_3645 = invoke(stypy.reporting.localization.Localization(__file__, 2154, 13), list_3642, *[_link_line_colors_3643], **kwargs_3644)
    
    # Testing the type of a for loop iterable (line 2154)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2154, 4), list_call_result_3645)
    # Getting the type of the for loop variable (line 2154)
    for_loop_var_3646 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2154, 4), list_call_result_3645)
    # Assigning a type to the variable 'i' (line 2154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2154, 4), 'i', for_loop_var_3646)
    # SSA begins for a for statement (line 2154)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to remove(...): (line 2155)
    # Processing the call arguments (line 2155)
    # Getting the type of 'i' (line 2155)
    i_3649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 33), 'i', False)
    # Processing the call keyword arguments (line 2155)
    kwargs_3650 = {}
    # Getting the type of '_link_line_colors' (line 2155)
    _link_line_colors_3647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 8), '_link_line_colors', False)
    # Obtaining the member 'remove' of a type (line 2155)
    remove_3648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 8), _link_line_colors_3647, 'remove')
    # Calling remove(args, kwargs) (line 2155)
    remove_call_result_3651 = invoke(stypy.reporting.localization.Localization(__file__, 2155, 8), remove_3648, *[i_3649], **kwargs_3650)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to extend(...): (line 2156)
    # Processing the call arguments (line 2156)
    
    # Call to list(...): (line 2156)
    # Processing the call arguments (line 2156)
    # Getting the type of 'palette' (line 2156)
    palette_3655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 34), 'palette', False)
    # Processing the call keyword arguments (line 2156)
    kwargs_3656 = {}
    # Getting the type of 'list' (line 2156)
    list_3654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 29), 'list', False)
    # Calling list(args, kwargs) (line 2156)
    list_call_result_3657 = invoke(stypy.reporting.localization.Localization(__file__, 2156, 29), list_3654, *[palette_3655], **kwargs_3656)
    
    # Processing the call keyword arguments (line 2156)
    kwargs_3658 = {}
    # Getting the type of '_link_line_colors' (line 2156)
    _link_line_colors_3652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 4), '_link_line_colors', False)
    # Obtaining the member 'extend' of a type (line 2156)
    extend_3653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2156, 4), _link_line_colors_3652, 'extend')
    # Calling extend(args, kwargs) (line 2156)
    extend_call_result_3659 = invoke(stypy.reporting.localization.Localization(__file__, 2156, 4), extend_3653, *[list_call_result_3657], **kwargs_3658)
    
    
    # ################# End of 'set_link_color_palette(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'set_link_color_palette' in the type store
    # Getting the type of 'stypy_return_type' (line 2088)
    stypy_return_type_3660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_3660)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'set_link_color_palette'
    return stypy_return_type_3660

# Assigning a type to the variable 'set_link_color_palette' (line 2088)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2088, 0), 'set_link_color_palette', set_link_color_palette)

@norecursion
def dendrogram(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_3661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2159, 20), 'int')
    # Getting the type of 'None' (line 2159)
    None_3662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 38), 'None')
    # Getting the type of 'None' (line 2159)
    None_3663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 60), 'None')
    # Getting the type of 'True' (line 2160)
    True_3664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 26), 'True')
    str_3665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2160, 44), 'str', 'top')
    # Getting the type of 'None' (line 2160)
    None_3666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 58), 'None')
    # Getting the type of 'False' (line 2161)
    False_3667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 26), 'False')
    # Getting the type of 'False' (line 2161)
    False_3668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 47), 'False')
    # Getting the type of 'True' (line 2161)
    True_3669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 71), 'True')
    # Getting the type of 'False' (line 2162)
    False_3670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 23), 'False')
    # Getting the type of 'False' (line 2162)
    False_3671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 40), 'False')
    # Getting the type of 'None' (line 2162)
    None_3672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 62), 'None')
    # Getting the type of 'None' (line 2163)
    None_3673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 29), 'None')
    # Getting the type of 'None' (line 2163)
    None_3674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 51), 'None')
    # Getting the type of 'False' (line 2164)
    False_3675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 31), 'False')
    # Getting the type of 'None' (line 2164)
    None_3676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 54), 'None')
    # Getting the type of 'None' (line 2164)
    None_3677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 63), 'None')
    str_3678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2165, 37), 'str', 'b')
    defaults = [int_3661, None_3662, None_3663, True_3664, str_3665, None_3666, False_3667, False_3668, True_3669, False_3670, False_3671, None_3672, None_3673, None_3674, False_3675, None_3676, None_3677, str_3678]
    # Create a new context for function 'dendrogram'
    module_type_store = module_type_store.open_function_context('dendrogram', 2159, 0, False)
    
    # Passed parameters checking function
    dendrogram.stypy_localization = localization
    dendrogram.stypy_type_of_self = None
    dendrogram.stypy_type_store = module_type_store
    dendrogram.stypy_function_name = 'dendrogram'
    dendrogram.stypy_param_names_list = ['Z', 'p', 'truncate_mode', 'color_threshold', 'get_leaves', 'orientation', 'labels', 'count_sort', 'distance_sort', 'show_leaf_counts', 'no_plot', 'no_labels', 'leaf_font_size', 'leaf_rotation', 'leaf_label_func', 'show_contracted', 'link_color_func', 'ax', 'above_threshold_color']
    dendrogram.stypy_varargs_param_name = None
    dendrogram.stypy_kwargs_param_name = None
    dendrogram.stypy_call_defaults = defaults
    dendrogram.stypy_call_varargs = varargs
    dendrogram.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dendrogram', ['Z', 'p', 'truncate_mode', 'color_threshold', 'get_leaves', 'orientation', 'labels', 'count_sort', 'distance_sort', 'show_leaf_counts', 'no_plot', 'no_labels', 'leaf_font_size', 'leaf_rotation', 'leaf_label_func', 'show_contracted', 'link_color_func', 'ax', 'above_threshold_color'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dendrogram', localization, ['Z', 'p', 'truncate_mode', 'color_threshold', 'get_leaves', 'orientation', 'labels', 'count_sort', 'distance_sort', 'show_leaf_counts', 'no_plot', 'no_labels', 'leaf_font_size', 'leaf_rotation', 'leaf_label_func', 'show_contracted', 'link_color_func', 'ax', 'above_threshold_color'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dendrogram(...)' code ##################

    str_3679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2411, (-1)), 'str', '\n    Plot the hierarchical clustering as a dendrogram.\n\n    The dendrogram illustrates how each cluster is\n    composed by drawing a U-shaped link between a non-singleton\n    cluster and its children.  The top of the U-link indicates a\n    cluster merge.  The two legs of the U-link indicate which clusters\n    were merged.  The length of the two legs of the U-link represents\n    the distance between the child clusters.  It is also the\n    cophenetic distance between original observations in the two\n    children clusters.\n\n    Parameters\n    ----------\n    Z : ndarray\n        The linkage matrix encoding the hierarchical clustering to\n        render as a dendrogram. See the ``linkage`` function for more\n        information on the format of ``Z``.\n    p : int, optional\n        The ``p`` parameter for ``truncate_mode``.\n    truncate_mode : str, optional\n        The dendrogram can be hard to read when the original\n        observation matrix from which the linkage is derived is\n        large. Truncation is used to condense the dendrogram. There\n        are several modes:\n\n        ``None``\n          No truncation is performed (default).\n          Note: ``\'none\'`` is an alias for ``None`` that\'s kept for\n          backward compatibility.\n\n        ``\'lastp\'``\n          The last ``p`` non-singleton clusters formed in the linkage are the\n          only non-leaf nodes in the linkage; they correspond to rows\n          ``Z[n-p-2:end]`` in ``Z``. All other non-singleton clusters are\n          contracted into leaf nodes.\n\n        ``\'level\'``\n          No more than ``p`` levels of the dendrogram tree are displayed.\n          A "level" includes all nodes with ``p`` merges from the last merge.\n\n          Note: ``\'mtica\'`` is an alias for ``\'level\'`` that\'s kept for\n          backward compatibility.\n\n    color_threshold : double, optional\n        For brevity, let :math:`t` be the ``color_threshold``.\n        Colors all the descendent links below a cluster node\n        :math:`k` the same color if :math:`k` is the first node below\n        the cut threshold :math:`t`. All links connecting nodes with\n        distances greater than or equal to the threshold are colored\n        blue. If :math:`t` is less than or equal to zero, all nodes\n        are colored blue. If ``color_threshold`` is None or\n        \'default\', corresponding with MATLAB(TM) behavior, the\n        threshold is set to ``0.7*max(Z[:,2])``.\n    get_leaves : bool, optional\n        Includes a list ``R[\'leaves\']=H`` in the result\n        dictionary. For each :math:`i`, ``H[i] == j``, cluster node\n        ``j`` appears in position ``i`` in the left-to-right traversal\n        of the leaves, where :math:`j < 2n-1` and :math:`i < n`.\n    orientation : str, optional\n        The direction to plot the dendrogram, which can be any\n        of the following strings:\n\n        ``\'top\'``\n          Plots the root at the top, and plot descendent links going downwards.\n          (default).\n\n        ``\'bottom\'``\n          Plots the root at the bottom, and plot descendent links going\n          upwards.\n\n        ``\'left\'``\n          Plots the root at the left, and plot descendent links going right.\n\n        ``\'right\'``\n          Plots the root at the right, and plot descendent links going left.\n\n    labels : ndarray, optional\n        By default ``labels`` is None so the index of the original observation\n        is used to label the leaf nodes.  Otherwise, this is an :math:`n`\n        -sized list (or tuple). The ``labels[i]`` value is the text to put\n        under the :math:`i` th leaf node only if it corresponds to an original\n        observation and not a non-singleton cluster.\n    count_sort : str or bool, optional\n        For each node n, the order (visually, from left-to-right) n\'s\n        two descendent links are plotted is determined by this\n        parameter, which can be any of the following values:\n\n        ``False``\n          Nothing is done.\n\n        ``\'ascending\'`` or ``True``\n          The child with the minimum number of original objects in its cluster\n          is plotted first.\n\n        ``\'descendent\'``\n          The child with the maximum number of original objects in its cluster\n          is plotted first.\n\n        Note ``distance_sort`` and ``count_sort`` cannot both be True.\n    distance_sort : str or bool, optional\n        For each node n, the order (visually, from left-to-right) n\'s\n        two descendent links are plotted is determined by this\n        parameter, which can be any of the following values:\n\n        ``False``\n          Nothing is done.\n\n        ``\'ascending\'`` or ``True``\n          The child with the minimum distance between its direct descendents is\n          plotted first.\n\n        ``\'descending\'``\n          The child with the maximum distance between its direct descendents is\n          plotted first.\n\n        Note ``distance_sort`` and ``count_sort`` cannot both be True.\n    show_leaf_counts : bool, optional\n         When True, leaf nodes representing :math:`k>1` original\n         observation are labeled with the number of observations they\n         contain in parentheses.\n    no_plot : bool, optional\n        When True, the final rendering is not performed. This is\n        useful if only the data structures computed for the rendering\n        are needed or if matplotlib is not available.\n    no_labels : bool, optional\n        When True, no labels appear next to the leaf nodes in the\n        rendering of the dendrogram.\n    leaf_rotation : double, optional\n        Specifies the angle (in degrees) to rotate the leaf\n        labels. When unspecified, the rotation is based on the number of\n        nodes in the dendrogram (default is 0).\n    leaf_font_size : int, optional\n        Specifies the font size (in points) of the leaf labels. When\n        unspecified, the size based on the number of nodes in the\n        dendrogram.\n    leaf_label_func : lambda or function, optional\n        When leaf_label_func is a callable function, for each\n        leaf with cluster index :math:`k < 2n-1`. The function\n        is expected to return a string with the label for the\n        leaf.\n\n        Indices :math:`k < n` correspond to original observations\n        while indices :math:`k \\geq n` correspond to non-singleton\n        clusters.\n\n        For example, to label singletons with their node id and\n        non-singletons with their id, count, and inconsistency\n        coefficient, simply do::\n\n            # First define the leaf label function.\n            def llf(id):\n                if id < n:\n                    return str(id)\n                else:\n                    return \'[%d %d %1.2f]\' % (id, count, R[n-id,3])\n            # The text for the leaf nodes is going to be big so force\n            # a rotation of 90 degrees.\n            dendrogram(Z, leaf_label_func=llf, leaf_rotation=90)\n\n    show_contracted : bool, optional\n        When True the heights of non-singleton nodes contracted\n        into a leaf node are plotted as crosses along the link\n        connecting that leaf node.  This really is only useful when\n        truncation is used (see ``truncate_mode`` parameter).\n    link_color_func : callable, optional\n        If given, `link_color_function` is called with each non-singleton id\n        corresponding to each U-shaped link it will paint. The function is\n        expected to return the color to paint the link, encoded as a matplotlib\n        color string code. For example::\n\n            dendrogram(Z, link_color_func=lambda k: colors[k])\n\n        colors the direct links below each untruncated non-singleton node\n        ``k`` using ``colors[k]``.\n    ax : matplotlib Axes instance, optional\n        If None and `no_plot` is not True, the dendrogram will be plotted\n        on the current axes.  Otherwise if `no_plot` is not True the\n        dendrogram will be plotted on the given ``Axes`` instance. This can be\n        useful if the dendrogram is part of a more complex figure.\n    above_threshold_color : str, optional\n        This matplotlib color string sets the color of the links above the\n        color_threshold. The default is \'b\'.\n\n    Returns\n    -------\n    R : dict\n        A dictionary of data structures computed to render the\n        dendrogram. Its has the following keys:\n\n        ``\'color_list\'``\n          A list of color names. The k\'th element represents the color of the\n          k\'th link.\n\n        ``\'icoord\'`` and ``\'dcoord\'``\n          Each of them is a list of lists. Let ``icoord = [I1, I2, ..., Ip]``\n          where ``Ik = [xk1, xk2, xk3, xk4]`` and ``dcoord = [D1, D2, ..., Dp]``\n          where ``Dk = [yk1, yk2, yk3, yk4]``, then the k\'th link painted is\n          ``(xk1, yk1)`` - ``(xk2, yk2)`` - ``(xk3, yk3)`` - ``(xk4, yk4)``.\n\n        ``\'ivl\'``\n          A list of labels corresponding to the leaf nodes.\n\n        ``\'leaves\'``\n          For each i, ``H[i] == j``, cluster node ``j`` appears in position\n          ``i`` in the left-to-right traversal of the leaves, where\n          :math:`j < 2n-1` and :math:`i < n`. If ``j`` is less than ``n``, the\n          ``i``-th leaf node corresponds to an original observation.\n          Otherwise, it corresponds to a non-singleton cluster.\n\n    See Also\n    --------\n    linkage, set_link_color_palette\n\n    Notes\n    -----\n    It is expected that the distances in ``Z[:,2]`` be monotonic, otherwise\n    crossings appear in the dendrogram.\n\n    Examples\n    --------\n    >>> from scipy.cluster import hierarchy\n    >>> import matplotlib.pyplot as plt\n\n    A very basic example:\n\n    >>> ytdist = np.array([662., 877., 255., 412., 996., 295., 468., 268.,\n    ...                    400., 754., 564., 138., 219., 869., 669.])\n    >>> Z = hierarchy.linkage(ytdist, \'single\')\n    >>> plt.figure()\n    >>> dn = hierarchy.dendrogram(Z)\n\n    Now plot in given axes, improve the color scheme and use both vertical and\n    horizontal orientations:\n\n    >>> hierarchy.set_link_color_palette([\'m\', \'c\', \'y\', \'k\'])\n    >>> fig, axes = plt.subplots(1, 2, figsize=(8, 3))\n    >>> dn1 = hierarchy.dendrogram(Z, ax=axes[0], above_threshold_color=\'y\',\n    ...                            orientation=\'top\')\n    >>> dn2 = hierarchy.dendrogram(Z, ax=axes[1],\n    ...                            above_threshold_color=\'#bcbddc\',\n    ...                            orientation=\'right\')\n    >>> hierarchy.set_link_color_palette(None)  # reset to default after use\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Name (line 2421):
    
    # Assigning a Call to a Name (line 2421):
    
    # Call to asarray(...): (line 2421)
    # Processing the call arguments (line 2421)
    # Getting the type of 'Z' (line 2421)
    Z_3682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 19), 'Z', False)
    # Processing the call keyword arguments (line 2421)
    str_3683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2421, 28), 'str', 'c')
    keyword_3684 = str_3683
    kwargs_3685 = {'order': keyword_3684}
    # Getting the type of 'np' (line 2421)
    np_3680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2421)
    asarray_3681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2421, 8), np_3680, 'asarray')
    # Calling asarray(args, kwargs) (line 2421)
    asarray_call_result_3686 = invoke(stypy.reporting.localization.Localization(__file__, 2421, 8), asarray_3681, *[Z_3682], **kwargs_3685)
    
    # Assigning a type to the variable 'Z' (line 2421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2421, 4), 'Z', asarray_call_result_3686)
    
    
    # Getting the type of 'orientation' (line 2423)
    orientation_3687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 7), 'orientation')
    
    # Obtaining an instance of the builtin type 'list' (line 2423)
    list_3688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2423, 26), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2423)
    # Adding element type (line 2423)
    str_3689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2423, 27), 'str', 'top')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2423, 26), list_3688, str_3689)
    # Adding element type (line 2423)
    str_3690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2423, 34), 'str', 'left')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2423, 26), list_3688, str_3690)
    # Adding element type (line 2423)
    str_3691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2423, 42), 'str', 'bottom')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2423, 26), list_3688, str_3691)
    # Adding element type (line 2423)
    str_3692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2423, 52), 'str', 'right')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2423, 26), list_3688, str_3692)
    
    # Applying the binary operator 'notin' (line 2423)
    result_contains_3693 = python_operator(stypy.reporting.localization.Localization(__file__, 2423, 7), 'notin', orientation_3687, list_3688)
    
    # Testing the type of an if condition (line 2423)
    if_condition_3694 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2423, 4), result_contains_3693)
    # Assigning a type to the variable 'if_condition_3694' (line 2423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2423, 4), 'if_condition_3694', if_condition_3694)
    # SSA begins for if statement (line 2423)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2424)
    # Processing the call arguments (line 2424)
    str_3696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2424, 25), 'str', "orientation must be one of 'top', 'left', 'bottom', or 'right'")
    # Processing the call keyword arguments (line 2424)
    kwargs_3697 = {}
    # Getting the type of 'ValueError' (line 2424)
    ValueError_3695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2424, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2424)
    ValueError_call_result_3698 = invoke(stypy.reporting.localization.Localization(__file__, 2424, 14), ValueError_3695, *[str_3696], **kwargs_3697)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2424, 8), ValueError_call_result_3698, 'raise parameter', BaseException)
    # SSA join for if statement (line 2423)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to is_valid_linkage(...): (line 2427)
    # Processing the call arguments (line 2427)
    # Getting the type of 'Z' (line 2427)
    Z_3700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 21), 'Z', False)
    # Processing the call keyword arguments (line 2427)
    # Getting the type of 'True' (line 2427)
    True_3701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 30), 'True', False)
    keyword_3702 = True_3701
    str_3703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2427, 41), 'str', 'Z')
    keyword_3704 = str_3703
    kwargs_3705 = {'throw': keyword_3702, 'name': keyword_3704}
    # Getting the type of 'is_valid_linkage' (line 2427)
    is_valid_linkage_3699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2427, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 2427)
    is_valid_linkage_call_result_3706 = invoke(stypy.reporting.localization.Localization(__file__, 2427, 4), is_valid_linkage_3699, *[Z_3700], **kwargs_3705)
    
    
    # Assigning a Attribute to a Name (line 2428):
    
    # Assigning a Attribute to a Name (line 2428):
    # Getting the type of 'Z' (line 2428)
    Z_3707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2428, 9), 'Z')
    # Obtaining the member 'shape' of a type (line 2428)
    shape_3708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2428, 9), Z_3707, 'shape')
    # Assigning a type to the variable 'Zs' (line 2428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2428, 4), 'Zs', shape_3708)
    
    # Assigning a BinOp to a Name (line 2429):
    
    # Assigning a BinOp to a Name (line 2429):
    
    # Obtaining the type of the subscript
    int_3709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2429, 11), 'int')
    # Getting the type of 'Zs' (line 2429)
    Zs_3710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2429, 8), 'Zs')
    # Obtaining the member '__getitem__' of a type (line 2429)
    getitem___3711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2429, 8), Zs_3710, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2429)
    subscript_call_result_3712 = invoke(stypy.reporting.localization.Localization(__file__, 2429, 8), getitem___3711, int_3709)
    
    int_3713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2429, 16), 'int')
    # Applying the binary operator '+' (line 2429)
    result_add_3714 = python_operator(stypy.reporting.localization.Localization(__file__, 2429, 8), '+', subscript_call_result_3712, int_3713)
    
    # Assigning a type to the variable 'n' (line 2429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2429, 4), 'n', result_add_3714)
    
    
    
    # Call to type(...): (line 2430)
    # Processing the call arguments (line 2430)
    # Getting the type of 'p' (line 2430)
    p_3716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 12), 'p', False)
    # Processing the call keyword arguments (line 2430)
    kwargs_3717 = {}
    # Getting the type of 'type' (line 2430)
    type_3715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 7), 'type', False)
    # Calling type(args, kwargs) (line 2430)
    type_call_result_3718 = invoke(stypy.reporting.localization.Localization(__file__, 2430, 7), type_3715, *[p_3716], **kwargs_3717)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2430)
    tuple_3719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2430, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2430)
    # Adding element type (line 2430)
    # Getting the type of 'int' (line 2430)
    int_3720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 19), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2430, 19), tuple_3719, int_3720)
    # Adding element type (line 2430)
    # Getting the type of 'float' (line 2430)
    float_3721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 24), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2430, 19), tuple_3719, float_3721)
    
    # Applying the binary operator 'in' (line 2430)
    result_contains_3722 = python_operator(stypy.reporting.localization.Localization(__file__, 2430, 7), 'in', type_call_result_3718, tuple_3719)
    
    # Testing the type of an if condition (line 2430)
    if_condition_3723 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2430, 4), result_contains_3722)
    # Assigning a type to the variable 'if_condition_3723' (line 2430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'if_condition_3723', if_condition_3723)
    # SSA begins for if statement (line 2430)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2431):
    
    # Assigning a Call to a Name (line 2431):
    
    # Call to int(...): (line 2431)
    # Processing the call arguments (line 2431)
    # Getting the type of 'p' (line 2431)
    p_3725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 16), 'p', False)
    # Processing the call keyword arguments (line 2431)
    kwargs_3726 = {}
    # Getting the type of 'int' (line 2431)
    int_3724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 12), 'int', False)
    # Calling int(args, kwargs) (line 2431)
    int_call_result_3727 = invoke(stypy.reporting.localization.Localization(__file__, 2431, 12), int_3724, *[p_3725], **kwargs_3726)
    
    # Assigning a type to the variable 'p' (line 2431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2431, 8), 'p', int_call_result_3727)
    # SSA branch for the else part of an if statement (line 2430)
    module_type_store.open_ssa_branch('else')
    
    # Call to TypeError(...): (line 2433)
    # Processing the call arguments (line 2433)
    str_3729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2433, 24), 'str', 'The second argument must be a number')
    # Processing the call keyword arguments (line 2433)
    kwargs_3730 = {}
    # Getting the type of 'TypeError' (line 2433)
    TypeError_3728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 2433)
    TypeError_call_result_3731 = invoke(stypy.reporting.localization.Localization(__file__, 2433, 14), TypeError_3728, *[str_3729], **kwargs_3730)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2433, 8), TypeError_call_result_3731, 'raise parameter', BaseException)
    # SSA join for if statement (line 2430)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'truncate_mode' (line 2435)
    truncate_mode_3732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 7), 'truncate_mode')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2435)
    tuple_3733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2435)
    # Adding element type (line 2435)
    str_3734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 29), 'str', 'lastp')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2435, 29), tuple_3733, str_3734)
    # Adding element type (line 2435)
    str_3735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 38), 'str', 'mlab')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2435, 29), tuple_3733, str_3735)
    # Adding element type (line 2435)
    str_3736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 46), 'str', 'mtica')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2435, 29), tuple_3733, str_3736)
    # Adding element type (line 2435)
    str_3737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 55), 'str', 'level')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2435, 29), tuple_3733, str_3737)
    # Adding element type (line 2435)
    str_3738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 64), 'str', 'none')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2435, 29), tuple_3733, str_3738)
    # Adding element type (line 2435)
    # Getting the type of 'None' (line 2435)
    None_3739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 72), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2435, 29), tuple_3733, None_3739)
    
    # Applying the binary operator 'notin' (line 2435)
    result_contains_3740 = python_operator(stypy.reporting.localization.Localization(__file__, 2435, 7), 'notin', truncate_mode_3732, tuple_3733)
    
    # Testing the type of an if condition (line 2435)
    if_condition_3741 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2435, 4), result_contains_3740)
    # Assigning a type to the variable 'if_condition_3741' (line 2435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2435, 4), 'if_condition_3741', if_condition_3741)
    # SSA begins for if statement (line 2435)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2437)
    # Processing the call arguments (line 2437)
    str_3743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2437, 25), 'str', 'Invalid truncation mode.')
    # Processing the call keyword arguments (line 2437)
    kwargs_3744 = {}
    # Getting the type of 'ValueError' (line 2437)
    ValueError_3742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2437)
    ValueError_call_result_3745 = invoke(stypy.reporting.localization.Localization(__file__, 2437, 14), ValueError_3742, *[str_3743], **kwargs_3744)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2437, 8), ValueError_call_result_3745, 'raise parameter', BaseException)
    # SSA join for if statement (line 2435)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'truncate_mode' (line 2439)
    truncate_mode_3746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 7), 'truncate_mode')
    str_3747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2439, 24), 'str', 'lastp')
    # Applying the binary operator '==' (line 2439)
    result_eq_3748 = python_operator(stypy.reporting.localization.Localization(__file__, 2439, 7), '==', truncate_mode_3746, str_3747)
    
    
    # Getting the type of 'truncate_mode' (line 2439)
    truncate_mode_3749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 35), 'truncate_mode')
    str_3750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2439, 52), 'str', 'mlab')
    # Applying the binary operator '==' (line 2439)
    result_eq_3751 = python_operator(stypy.reporting.localization.Localization(__file__, 2439, 35), '==', truncate_mode_3749, str_3750)
    
    # Applying the binary operator 'or' (line 2439)
    result_or_keyword_3752 = python_operator(stypy.reporting.localization.Localization(__file__, 2439, 7), 'or', result_eq_3748, result_eq_3751)
    
    # Testing the type of an if condition (line 2439)
    if_condition_3753 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2439, 4), result_or_keyword_3752)
    # Assigning a type to the variable 'if_condition_3753' (line 2439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2439, 4), 'if_condition_3753', if_condition_3753)
    # SSA begins for if statement (line 2439)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'p' (line 2440)
    p_3754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 11), 'p')
    # Getting the type of 'n' (line 2440)
    n_3755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 15), 'n')
    # Applying the binary operator '>' (line 2440)
    result_gt_3756 = python_operator(stypy.reporting.localization.Localization(__file__, 2440, 11), '>', p_3754, n_3755)
    
    
    # Getting the type of 'p' (line 2440)
    p_3757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 20), 'p')
    int_3758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2440, 25), 'int')
    # Applying the binary operator '==' (line 2440)
    result_eq_3759 = python_operator(stypy.reporting.localization.Localization(__file__, 2440, 20), '==', p_3757, int_3758)
    
    # Applying the binary operator 'or' (line 2440)
    result_or_keyword_3760 = python_operator(stypy.reporting.localization.Localization(__file__, 2440, 11), 'or', result_gt_3756, result_eq_3759)
    
    # Testing the type of an if condition (line 2440)
    if_condition_3761 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2440, 8), result_or_keyword_3760)
    # Assigning a type to the variable 'if_condition_3761' (line 2440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2440, 8), 'if_condition_3761', if_condition_3761)
    # SSA begins for if statement (line 2440)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2441):
    
    # Assigning a Name to a Name (line 2441):
    # Getting the type of 'n' (line 2441)
    n_3762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 16), 'n')
    # Assigning a type to the variable 'p' (line 2441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2441, 12), 'p', n_3762)
    # SSA join for if statement (line 2440)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2439)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'truncate_mode' (line 2443)
    truncate_mode_3763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 7), 'truncate_mode')
    str_3764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2443, 24), 'str', 'mtica')
    # Applying the binary operator '==' (line 2443)
    result_eq_3765 = python_operator(stypy.reporting.localization.Localization(__file__, 2443, 7), '==', truncate_mode_3763, str_3764)
    
    # Testing the type of an if condition (line 2443)
    if_condition_3766 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2443, 4), result_eq_3765)
    # Assigning a type to the variable 'if_condition_3766' (line 2443)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2443, 4), 'if_condition_3766', if_condition_3766)
    # SSA begins for if statement (line 2443)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 2445):
    
    # Assigning a Str to a Name (line 2445):
    str_3767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2445, 24), 'str', 'level')
    # Assigning a type to the variable 'truncate_mode' (line 2445)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2445, 8), 'truncate_mode', str_3767)
    # SSA join for if statement (line 2443)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'truncate_mode' (line 2447)
    truncate_mode_3768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 7), 'truncate_mode')
    str_3769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2447, 24), 'str', 'level')
    # Applying the binary operator '==' (line 2447)
    result_eq_3770 = python_operator(stypy.reporting.localization.Localization(__file__, 2447, 7), '==', truncate_mode_3768, str_3769)
    
    # Testing the type of an if condition (line 2447)
    if_condition_3771 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2447, 4), result_eq_3770)
    # Assigning a type to the variable 'if_condition_3771' (line 2447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2447, 4), 'if_condition_3771', if_condition_3771)
    # SSA begins for if statement (line 2447)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'p' (line 2448)
    p_3772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 11), 'p')
    int_3773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2448, 16), 'int')
    # Applying the binary operator '<=' (line 2448)
    result_le_3774 = python_operator(stypy.reporting.localization.Localization(__file__, 2448, 11), '<=', p_3772, int_3773)
    
    # Testing the type of an if condition (line 2448)
    if_condition_3775 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2448, 8), result_le_3774)
    # Assigning a type to the variable 'if_condition_3775' (line 2448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2448, 8), 'if_condition_3775', if_condition_3775)
    # SSA begins for if statement (line 2448)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 2449):
    
    # Assigning a Attribute to a Name (line 2449):
    # Getting the type of 'np' (line 2449)
    np_3776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 16), 'np')
    # Obtaining the member 'inf' of a type (line 2449)
    inf_3777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2449, 16), np_3776, 'inf')
    # Assigning a type to the variable 'p' (line 2449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2449, 12), 'p', inf_3777)
    # SSA join for if statement (line 2448)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2447)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'get_leaves' (line 2451)
    get_leaves_3778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 7), 'get_leaves')
    # Testing the type of an if condition (line 2451)
    if_condition_3779 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2451, 4), get_leaves_3778)
    # Assigning a type to the variable 'if_condition_3779' (line 2451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 4), 'if_condition_3779', if_condition_3779)
    # SSA begins for if statement (line 2451)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 2452):
    
    # Assigning a List to a Name (line 2452):
    
    # Obtaining an instance of the builtin type 'list' (line 2452)
    list_3780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2452, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2452)
    
    # Assigning a type to the variable 'lvs' (line 2452)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2452, 8), 'lvs', list_3780)
    # SSA branch for the else part of an if statement (line 2451)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2454):
    
    # Assigning a Name to a Name (line 2454):
    # Getting the type of 'None' (line 2454)
    None_3781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 14), 'None')
    # Assigning a type to the variable 'lvs' (line 2454)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2454, 8), 'lvs', None_3781)
    # SSA join for if statement (line 2451)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 2456):
    
    # Assigning a List to a Name (line 2456):
    
    # Obtaining an instance of the builtin type 'list' (line 2456)
    list_3782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2456, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2456)
    
    # Assigning a type to the variable 'icoord_list' (line 2456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2456, 4), 'icoord_list', list_3782)
    
    # Assigning a List to a Name (line 2457):
    
    # Assigning a List to a Name (line 2457):
    
    # Obtaining an instance of the builtin type 'list' (line 2457)
    list_3783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2457, 18), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2457)
    
    # Assigning a type to the variable 'dcoord_list' (line 2457)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2457, 4), 'dcoord_list', list_3783)
    
    # Assigning a List to a Name (line 2458):
    
    # Assigning a List to a Name (line 2458):
    
    # Obtaining an instance of the builtin type 'list' (line 2458)
    list_3784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2458, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2458)
    
    # Assigning a type to the variable 'color_list' (line 2458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 4), 'color_list', list_3784)
    
    # Assigning a List to a Name (line 2459):
    
    # Assigning a List to a Name (line 2459):
    
    # Obtaining an instance of the builtin type 'list' (line 2459)
    list_3785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2459, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2459)
    # Adding element type (line 2459)
    int_3786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2459, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2459, 20), list_3785, int_3786)
    
    # Assigning a type to the variable 'current_color' (line 2459)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2459, 4), 'current_color', list_3785)
    
    # Assigning a List to a Name (line 2460):
    
    # Assigning a List to a Name (line 2460):
    
    # Obtaining an instance of the builtin type 'list' (line 2460)
    list_3787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2460, 32), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2460)
    # Adding element type (line 2460)
    # Getting the type of 'False' (line 2460)
    False_3788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 33), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2460, 32), list_3787, False_3788)
    
    # Assigning a type to the variable 'currently_below_threshold' (line 2460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2460, 4), 'currently_below_threshold', list_3787)
    
    # Assigning a List to a Name (line 2461):
    
    # Assigning a List to a Name (line 2461):
    
    # Obtaining an instance of the builtin type 'list' (line 2461)
    list_3789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2461, 10), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2461)
    
    # Assigning a type to the variable 'ivl' (line 2461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2461, 4), 'ivl', list_3789)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'color_threshold' (line 2463)
    color_threshold_3790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 7), 'color_threshold')
    # Getting the type of 'None' (line 2463)
    None_3791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 26), 'None')
    # Applying the binary operator 'is' (line 2463)
    result_is__3792 = python_operator(stypy.reporting.localization.Localization(__file__, 2463, 7), 'is', color_threshold_3790, None_3791)
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 2463)
    # Processing the call arguments (line 2463)
    # Getting the type of 'color_threshold' (line 2463)
    color_threshold_3794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 46), 'color_threshold', False)
    # Getting the type of 'string_types' (line 2463)
    string_types_3795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 63), 'string_types', False)
    # Processing the call keyword arguments (line 2463)
    kwargs_3796 = {}
    # Getting the type of 'isinstance' (line 2463)
    isinstance_3793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 35), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2463)
    isinstance_call_result_3797 = invoke(stypy.reporting.localization.Localization(__file__, 2463, 35), isinstance_3793, *[color_threshold_3794, string_types_3795], **kwargs_3796)
    
    
    # Getting the type of 'color_threshold' (line 2464)
    color_threshold_3798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2464, 35), 'color_threshold')
    str_3799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2464, 54), 'str', 'default')
    # Applying the binary operator '==' (line 2464)
    result_eq_3800 = python_operator(stypy.reporting.localization.Localization(__file__, 2464, 35), '==', color_threshold_3798, str_3799)
    
    # Applying the binary operator 'and' (line 2463)
    result_and_keyword_3801 = python_operator(stypy.reporting.localization.Localization(__file__, 2463, 35), 'and', isinstance_call_result_3797, result_eq_3800)
    
    # Applying the binary operator 'or' (line 2463)
    result_or_keyword_3802 = python_operator(stypy.reporting.localization.Localization(__file__, 2463, 7), 'or', result_is__3792, result_and_keyword_3801)
    
    # Testing the type of an if condition (line 2463)
    if_condition_3803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2463, 4), result_or_keyword_3802)
    # Assigning a type to the variable 'if_condition_3803' (line 2463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2463, 4), 'if_condition_3803', if_condition_3803)
    # SSA begins for if statement (line 2463)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2465):
    
    # Assigning a BinOp to a Name (line 2465):
    
    # Call to max(...): (line 2465)
    # Processing the call arguments (line 2465)
    
    # Obtaining the type of the subscript
    slice_3805 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2465, 30), None, None, None)
    int_3806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2465, 35), 'int')
    # Getting the type of 'Z' (line 2465)
    Z_3807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 30), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 2465)
    getitem___3808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2465, 30), Z_3807, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2465)
    subscript_call_result_3809 = invoke(stypy.reporting.localization.Localization(__file__, 2465, 30), getitem___3808, (slice_3805, int_3806))
    
    # Processing the call keyword arguments (line 2465)
    kwargs_3810 = {}
    # Getting the type of 'max' (line 2465)
    max_3804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 26), 'max', False)
    # Calling max(args, kwargs) (line 2465)
    max_call_result_3811 = invoke(stypy.reporting.localization.Localization(__file__, 2465, 26), max_3804, *[subscript_call_result_3809], **kwargs_3810)
    
    float_3812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2465, 41), 'float')
    # Applying the binary operator '*' (line 2465)
    result_mul_3813 = python_operator(stypy.reporting.localization.Localization(__file__, 2465, 26), '*', max_call_result_3811, float_3812)
    
    # Assigning a type to the variable 'color_threshold' (line 2465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2465, 8), 'color_threshold', result_mul_3813)
    # SSA join for if statement (line 2463)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Dict to a Name (line 2467):
    
    # Assigning a Dict to a Name (line 2467):
    
    # Obtaining an instance of the builtin type 'dict' (line 2467)
    dict_3814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2467, 8), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2467)
    # Adding element type (key, value) (line 2467)
    str_3815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2467, 9), 'str', 'icoord')
    # Getting the type of 'icoord_list' (line 2467)
    icoord_list_3816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 19), 'icoord_list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2467, 8), dict_3814, (str_3815, icoord_list_3816))
    # Adding element type (key, value) (line 2467)
    str_3817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2467, 32), 'str', 'dcoord')
    # Getting the type of 'dcoord_list' (line 2467)
    dcoord_list_3818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 42), 'dcoord_list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2467, 8), dict_3814, (str_3817, dcoord_list_3818))
    # Adding element type (key, value) (line 2467)
    str_3819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2467, 55), 'str', 'ivl')
    # Getting the type of 'ivl' (line 2467)
    ivl_3820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 62), 'ivl')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2467, 8), dict_3814, (str_3819, ivl_3820))
    # Adding element type (key, value) (line 2467)
    str_3821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2468, 9), 'str', 'leaves')
    # Getting the type of 'lvs' (line 2468)
    lvs_3822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 19), 'lvs')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2467, 8), dict_3814, (str_3821, lvs_3822))
    # Adding element type (key, value) (line 2467)
    str_3823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2468, 24), 'str', 'color_list')
    # Getting the type of 'color_list' (line 2468)
    color_list_3824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 38), 'color_list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2467, 8), dict_3814, (str_3823, color_list_3824))
    
    # Assigning a type to the variable 'R' (line 2467)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2467, 4), 'R', dict_3814)
    
    # Assigning a IfExp to a Name (line 2471):
    
    # Assigning a IfExp to a Name (line 2471):
    
    # Getting the type of 'show_contracted' (line 2471)
    show_contracted_3825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 30), 'show_contracted')
    # Testing the type of an if expression (line 2471)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2471, 24), show_contracted_3825)
    # SSA begins for if expression (line 2471)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Obtaining an instance of the builtin type 'list' (line 2471)
    list_3826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2471, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2471)
    
    # SSA branch for the else part of an if expression (line 2471)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'None' (line 2471)
    None_3827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 51), 'None')
    # SSA join for if expression (line 2471)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_3828 = union_type.UnionType.add(list_3826, None_3827)
    
    # Assigning a type to the variable 'contraction_marks' (line 2471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2471, 4), 'contraction_marks', if_exp_3828)
    
    # Call to _dendrogram_calculate_info(...): (line 2473)
    # Processing the call keyword arguments (line 2473)
    # Getting the type of 'Z' (line 2474)
    Z_3830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2474, 10), 'Z', False)
    keyword_3831 = Z_3830
    # Getting the type of 'p' (line 2474)
    p_3832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2474, 15), 'p', False)
    keyword_3833 = p_3832
    # Getting the type of 'truncate_mode' (line 2475)
    truncate_mode_3834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 22), 'truncate_mode', False)
    keyword_3835 = truncate_mode_3834
    # Getting the type of 'color_threshold' (line 2476)
    color_threshold_3836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 24), 'color_threshold', False)
    keyword_3837 = color_threshold_3836
    # Getting the type of 'get_leaves' (line 2477)
    get_leaves_3838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2477, 19), 'get_leaves', False)
    keyword_3839 = get_leaves_3838
    # Getting the type of 'orientation' (line 2478)
    orientation_3840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 20), 'orientation', False)
    keyword_3841 = orientation_3840
    # Getting the type of 'labels' (line 2479)
    labels_3842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 15), 'labels', False)
    keyword_3843 = labels_3842
    # Getting the type of 'count_sort' (line 2480)
    count_sort_3844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 19), 'count_sort', False)
    keyword_3845 = count_sort_3844
    # Getting the type of 'distance_sort' (line 2481)
    distance_sort_3846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 22), 'distance_sort', False)
    keyword_3847 = distance_sort_3846
    # Getting the type of 'show_leaf_counts' (line 2482)
    show_leaf_counts_3848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 25), 'show_leaf_counts', False)
    keyword_3849 = show_leaf_counts_3848
    int_3850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 10), 'int')
    # Getting the type of 'n' (line 2483)
    n_3851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 12), 'n', False)
    # Applying the binary operator '*' (line 2483)
    result_mul_3852 = python_operator(stypy.reporting.localization.Localization(__file__, 2483, 10), '*', int_3850, n_3851)
    
    int_3853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2483, 16), 'int')
    # Applying the binary operator '-' (line 2483)
    result_sub_3854 = python_operator(stypy.reporting.localization.Localization(__file__, 2483, 10), '-', result_mul_3852, int_3853)
    
    keyword_3855 = result_sub_3854
    float_3856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2484, 11), 'float')
    keyword_3857 = float_3856
    # Getting the type of 'ivl' (line 2485)
    ivl_3858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 12), 'ivl', False)
    keyword_3859 = ivl_3858
    # Getting the type of 'n' (line 2486)
    n_3860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 10), 'n', False)
    keyword_3861 = n_3860
    # Getting the type of 'icoord_list' (line 2487)
    icoord_list_3862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 20), 'icoord_list', False)
    keyword_3863 = icoord_list_3862
    # Getting the type of 'dcoord_list' (line 2488)
    dcoord_list_3864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2488, 20), 'dcoord_list', False)
    keyword_3865 = dcoord_list_3864
    # Getting the type of 'lvs' (line 2489)
    lvs_3866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 12), 'lvs', False)
    keyword_3867 = lvs_3866
    # Getting the type of 'current_color' (line 2490)
    current_color_3868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2490, 22), 'current_color', False)
    keyword_3869 = current_color_3868
    # Getting the type of 'color_list' (line 2491)
    color_list_3870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2491, 19), 'color_list', False)
    keyword_3871 = color_list_3870
    # Getting the type of 'currently_below_threshold' (line 2492)
    currently_below_threshold_3872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 34), 'currently_below_threshold', False)
    keyword_3873 = currently_below_threshold_3872
    # Getting the type of 'leaf_label_func' (line 2493)
    leaf_label_func_3874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2493, 24), 'leaf_label_func', False)
    keyword_3875 = leaf_label_func_3874
    # Getting the type of 'contraction_marks' (line 2494)
    contraction_marks_3876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 26), 'contraction_marks', False)
    keyword_3877 = contraction_marks_3876
    # Getting the type of 'link_color_func' (line 2495)
    link_color_func_3878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 24), 'link_color_func', False)
    keyword_3879 = link_color_func_3878
    # Getting the type of 'above_threshold_color' (line 2496)
    above_threshold_color_3880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2496, 30), 'above_threshold_color', False)
    keyword_3881 = above_threshold_color_3880
    kwargs_3882 = {'orientation': keyword_3841, 'ivl': keyword_3859, 'labels': keyword_3843, 'iv': keyword_3857, 'distance_sort': keyword_3847, 'truncate_mode': keyword_3835, 'above_threshold_color': keyword_3881, 'color_threshold': keyword_3837, 'dcoord_list': keyword_3865, 'get_leaves': keyword_3839, 'link_color_func': keyword_3879, 'Z': keyword_3831, 'count_sort': keyword_3845, 'lvs': keyword_3867, 'current_color': keyword_3869, 'leaf_label_func': keyword_3875, 'i': keyword_3855, 'show_leaf_counts': keyword_3849, 'color_list': keyword_3871, 'n': keyword_3861, 'p': keyword_3833, 'icoord_list': keyword_3863, 'currently_below_threshold': keyword_3873, 'contraction_marks': keyword_3877}
    # Getting the type of '_dendrogram_calculate_info' (line 2473)
    _dendrogram_calculate_info_3829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 4), '_dendrogram_calculate_info', False)
    # Calling _dendrogram_calculate_info(args, kwargs) (line 2473)
    _dendrogram_calculate_info_call_result_3883 = invoke(stypy.reporting.localization.Localization(__file__, 2473, 4), _dendrogram_calculate_info_3829, *[], **kwargs_3882)
    
    
    
    # Getting the type of 'no_plot' (line 2498)
    no_plot_3884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 11), 'no_plot')
    # Applying the 'not' unary operator (line 2498)
    result_not__3885 = python_operator(stypy.reporting.localization.Localization(__file__, 2498, 7), 'not', no_plot_3884)
    
    # Testing the type of an if condition (line 2498)
    if_condition_3886 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2498, 4), result_not__3885)
    # Assigning a type to the variable 'if_condition_3886' (line 2498)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2498, 4), 'if_condition_3886', if_condition_3886)
    # SSA begins for if statement (line 2498)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2499):
    
    # Assigning a Call to a Name (line 2499):
    
    # Call to max(...): (line 2499)
    # Processing the call arguments (line 2499)
    
    # Obtaining the type of the subscript
    slice_3888 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2499, 17), None, None, None)
    int_3889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2499, 22), 'int')
    # Getting the type of 'Z' (line 2499)
    Z_3890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 17), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 2499)
    getitem___3891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2499, 17), Z_3890, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2499)
    subscript_call_result_3892 = invoke(stypy.reporting.localization.Localization(__file__, 2499, 17), getitem___3891, (slice_3888, int_3889))
    
    # Processing the call keyword arguments (line 2499)
    kwargs_3893 = {}
    # Getting the type of 'max' (line 2499)
    max_3887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2499, 13), 'max', False)
    # Calling max(args, kwargs) (line 2499)
    max_call_result_3894 = invoke(stypy.reporting.localization.Localization(__file__, 2499, 13), max_3887, *[subscript_call_result_3892], **kwargs_3893)
    
    # Assigning a type to the variable 'mh' (line 2499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2499, 8), 'mh', max_call_result_3894)
    
    # Call to _plot_dendrogram(...): (line 2500)
    # Processing the call arguments (line 2500)
    # Getting the type of 'icoord_list' (line 2500)
    icoord_list_3896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 25), 'icoord_list', False)
    # Getting the type of 'dcoord_list' (line 2500)
    dcoord_list_3897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 38), 'dcoord_list', False)
    # Getting the type of 'ivl' (line 2500)
    ivl_3898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 51), 'ivl', False)
    # Getting the type of 'p' (line 2500)
    p_3899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 56), 'p', False)
    # Getting the type of 'n' (line 2500)
    n_3900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 59), 'n', False)
    # Getting the type of 'mh' (line 2500)
    mh_3901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 62), 'mh', False)
    # Getting the type of 'orientation' (line 2500)
    orientation_3902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 66), 'orientation', False)
    # Getting the type of 'no_labels' (line 2501)
    no_labels_3903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 25), 'no_labels', False)
    # Getting the type of 'color_list' (line 2501)
    color_list_3904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 36), 'color_list', False)
    # Processing the call keyword arguments (line 2500)
    # Getting the type of 'leaf_font_size' (line 2502)
    leaf_font_size_3905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2502, 40), 'leaf_font_size', False)
    keyword_3906 = leaf_font_size_3905
    # Getting the type of 'leaf_rotation' (line 2503)
    leaf_rotation_3907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 39), 'leaf_rotation', False)
    keyword_3908 = leaf_rotation_3907
    # Getting the type of 'contraction_marks' (line 2504)
    contraction_marks_3909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2504, 43), 'contraction_marks', False)
    keyword_3910 = contraction_marks_3909
    # Getting the type of 'ax' (line 2505)
    ax_3911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 28), 'ax', False)
    keyword_3912 = ax_3911
    # Getting the type of 'above_threshold_color' (line 2506)
    above_threshold_color_3913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2506, 47), 'above_threshold_color', False)
    keyword_3914 = above_threshold_color_3913
    kwargs_3915 = {'leaf_rotation': keyword_3908, 'ax': keyword_3912, 'leaf_font_size': keyword_3906, 'above_threshold_color': keyword_3914, 'contraction_marks': keyword_3910}
    # Getting the type of '_plot_dendrogram' (line 2500)
    _plot_dendrogram_3895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 8), '_plot_dendrogram', False)
    # Calling _plot_dendrogram(args, kwargs) (line 2500)
    _plot_dendrogram_call_result_3916 = invoke(stypy.reporting.localization.Localization(__file__, 2500, 8), _plot_dendrogram_3895, *[icoord_list_3896, dcoord_list_3897, ivl_3898, p_3899, n_3900, mh_3901, orientation_3902, no_labels_3903, color_list_3904], **kwargs_3915)
    
    # SSA join for if statement (line 2498)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'R' (line 2508)
    R_3917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2508, 11), 'R')
    # Assigning a type to the variable 'stypy_return_type' (line 2508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2508, 4), 'stypy_return_type', R_3917)
    
    # ################# End of 'dendrogram(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dendrogram' in the type store
    # Getting the type of 'stypy_return_type' (line 2159)
    stypy_return_type_3918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_3918)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dendrogram'
    return stypy_return_type_3918

# Assigning a type to the variable 'dendrogram' (line 2159)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2159, 0), 'dendrogram', dendrogram)

@norecursion
def _append_singleton_leaf_node(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_append_singleton_leaf_node'
    module_type_store = module_type_store.open_function_context('_append_singleton_leaf_node', 2511, 0, False)
    
    # Passed parameters checking function
    _append_singleton_leaf_node.stypy_localization = localization
    _append_singleton_leaf_node.stypy_type_of_self = None
    _append_singleton_leaf_node.stypy_type_store = module_type_store
    _append_singleton_leaf_node.stypy_function_name = '_append_singleton_leaf_node'
    _append_singleton_leaf_node.stypy_param_names_list = ['Z', 'p', 'n', 'level', 'lvs', 'ivl', 'leaf_label_func', 'i', 'labels']
    _append_singleton_leaf_node.stypy_varargs_param_name = None
    _append_singleton_leaf_node.stypy_kwargs_param_name = None
    _append_singleton_leaf_node.stypy_call_defaults = defaults
    _append_singleton_leaf_node.stypy_call_varargs = varargs
    _append_singleton_leaf_node.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_append_singleton_leaf_node', ['Z', 'p', 'n', 'level', 'lvs', 'ivl', 'leaf_label_func', 'i', 'labels'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_append_singleton_leaf_node', localization, ['Z', 'p', 'n', 'level', 'lvs', 'ivl', 'leaf_label_func', 'i', 'labels'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_append_singleton_leaf_node(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 2517)
    # Getting the type of 'lvs' (line 2517)
    lvs_3919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 4), 'lvs')
    # Getting the type of 'None' (line 2517)
    None_3920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 18), 'None')
    
    (may_be_3921, more_types_in_union_3922) = may_not_be_none(lvs_3919, None_3920)

    if may_be_3921:

        if more_types_in_union_3922:
            # Runtime conditional SSA (line 2517)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to append(...): (line 2518)
        # Processing the call arguments (line 2518)
        
        # Call to int(...): (line 2518)
        # Processing the call arguments (line 2518)
        # Getting the type of 'i' (line 2518)
        i_3926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 23), 'i', False)
        # Processing the call keyword arguments (line 2518)
        kwargs_3927 = {}
        # Getting the type of 'int' (line 2518)
        int_3925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 19), 'int', False)
        # Calling int(args, kwargs) (line 2518)
        int_call_result_3928 = invoke(stypy.reporting.localization.Localization(__file__, 2518, 19), int_3925, *[i_3926], **kwargs_3927)
        
        # Processing the call keyword arguments (line 2518)
        kwargs_3929 = {}
        # Getting the type of 'lvs' (line 2518)
        lvs_3923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2518, 8), 'lvs', False)
        # Obtaining the member 'append' of a type (line 2518)
        append_3924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2518, 8), lvs_3923, 'append')
        # Calling append(args, kwargs) (line 2518)
        append_call_result_3930 = invoke(stypy.reporting.localization.Localization(__file__, 2518, 8), append_3924, *[int_call_result_3928], **kwargs_3929)
        

        if more_types_in_union_3922:
            # SSA join for if statement (line 2517)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2521)
    # Getting the type of 'ivl' (line 2521)
    ivl_3931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 4), 'ivl')
    # Getting the type of 'None' (line 2521)
    None_3932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2521, 18), 'None')
    
    (may_be_3933, more_types_in_union_3934) = may_not_be_none(ivl_3931, None_3932)

    if may_be_3933:

        if more_types_in_union_3934:
            # Runtime conditional SSA (line 2521)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'leaf_label_func' (line 2525)
        leaf_label_func_3935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2525, 11), 'leaf_label_func')
        # Testing the type of an if condition (line 2525)
        if_condition_3936 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2525, 8), leaf_label_func_3935)
        # Assigning a type to the variable 'if_condition_3936' (line 2525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2525, 8), 'if_condition_3936', if_condition_3936)
        # SSA begins for if statement (line 2525)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2526)
        # Processing the call arguments (line 2526)
        
        # Call to leaf_label_func(...): (line 2526)
        # Processing the call arguments (line 2526)
        
        # Call to int(...): (line 2526)
        # Processing the call arguments (line 2526)
        # Getting the type of 'i' (line 2526)
        i_3941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2526, 43), 'i', False)
        # Processing the call keyword arguments (line 2526)
        kwargs_3942 = {}
        # Getting the type of 'int' (line 2526)
        int_3940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2526, 39), 'int', False)
        # Calling int(args, kwargs) (line 2526)
        int_call_result_3943 = invoke(stypy.reporting.localization.Localization(__file__, 2526, 39), int_3940, *[i_3941], **kwargs_3942)
        
        # Processing the call keyword arguments (line 2526)
        kwargs_3944 = {}
        # Getting the type of 'leaf_label_func' (line 2526)
        leaf_label_func_3939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2526, 23), 'leaf_label_func', False)
        # Calling leaf_label_func(args, kwargs) (line 2526)
        leaf_label_func_call_result_3945 = invoke(stypy.reporting.localization.Localization(__file__, 2526, 23), leaf_label_func_3939, *[int_call_result_3943], **kwargs_3944)
        
        # Processing the call keyword arguments (line 2526)
        kwargs_3946 = {}
        # Getting the type of 'ivl' (line 2526)
        ivl_3937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2526, 12), 'ivl', False)
        # Obtaining the member 'append' of a type (line 2526)
        append_3938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2526, 12), ivl_3937, 'append')
        # Calling append(args, kwargs) (line 2526)
        append_call_result_3947 = invoke(stypy.reporting.localization.Localization(__file__, 2526, 12), append_3938, *[leaf_label_func_call_result_3945], **kwargs_3946)
        
        # SSA branch for the else part of an if statement (line 2525)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 2530)
        # Getting the type of 'labels' (line 2530)
        labels_3948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2530, 12), 'labels')
        # Getting the type of 'None' (line 2530)
        None_3949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2530, 29), 'None')
        
        (may_be_3950, more_types_in_union_3951) = may_not_be_none(labels_3948, None_3949)

        if may_be_3950:

            if more_types_in_union_3951:
                # Runtime conditional SSA (line 2530)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to append(...): (line 2531)
            # Processing the call arguments (line 2531)
            
            # Obtaining the type of the subscript
            
            # Call to int(...): (line 2531)
            # Processing the call arguments (line 2531)
            # Getting the type of 'i' (line 2531)
            i_3955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2531, 38), 'i', False)
            # Getting the type of 'n' (line 2531)
            n_3956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2531, 42), 'n', False)
            # Applying the binary operator '-' (line 2531)
            result_sub_3957 = python_operator(stypy.reporting.localization.Localization(__file__, 2531, 38), '-', i_3955, n_3956)
            
            # Processing the call keyword arguments (line 2531)
            kwargs_3958 = {}
            # Getting the type of 'int' (line 2531)
            int_3954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2531, 34), 'int', False)
            # Calling int(args, kwargs) (line 2531)
            int_call_result_3959 = invoke(stypy.reporting.localization.Localization(__file__, 2531, 34), int_3954, *[result_sub_3957], **kwargs_3958)
            
            # Getting the type of 'labels' (line 2531)
            labels_3960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2531, 27), 'labels', False)
            # Obtaining the member '__getitem__' of a type (line 2531)
            getitem___3961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2531, 27), labels_3960, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2531)
            subscript_call_result_3962 = invoke(stypy.reporting.localization.Localization(__file__, 2531, 27), getitem___3961, int_call_result_3959)
            
            # Processing the call keyword arguments (line 2531)
            kwargs_3963 = {}
            # Getting the type of 'ivl' (line 2531)
            ivl_3952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2531, 16), 'ivl', False)
            # Obtaining the member 'append' of a type (line 2531)
            append_3953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2531, 16), ivl_3952, 'append')
            # Calling append(args, kwargs) (line 2531)
            append_call_result_3964 = invoke(stypy.reporting.localization.Localization(__file__, 2531, 16), append_3953, *[subscript_call_result_3962], **kwargs_3963)
            

            if more_types_in_union_3951:
                # Runtime conditional SSA for else branch (line 2530)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_3950) or more_types_in_union_3951):
            
            # Call to append(...): (line 2534)
            # Processing the call arguments (line 2534)
            
            # Call to str(...): (line 2534)
            # Processing the call arguments (line 2534)
            
            # Call to int(...): (line 2534)
            # Processing the call arguments (line 2534)
            # Getting the type of 'i' (line 2534)
            i_3969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2534, 35), 'i', False)
            # Processing the call keyword arguments (line 2534)
            kwargs_3970 = {}
            # Getting the type of 'int' (line 2534)
            int_3968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2534, 31), 'int', False)
            # Calling int(args, kwargs) (line 2534)
            int_call_result_3971 = invoke(stypy.reporting.localization.Localization(__file__, 2534, 31), int_3968, *[i_3969], **kwargs_3970)
            
            # Processing the call keyword arguments (line 2534)
            kwargs_3972 = {}
            # Getting the type of 'str' (line 2534)
            str_3967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2534, 27), 'str', False)
            # Calling str(args, kwargs) (line 2534)
            str_call_result_3973 = invoke(stypy.reporting.localization.Localization(__file__, 2534, 27), str_3967, *[int_call_result_3971], **kwargs_3972)
            
            # Processing the call keyword arguments (line 2534)
            kwargs_3974 = {}
            # Getting the type of 'ivl' (line 2534)
            ivl_3965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2534, 16), 'ivl', False)
            # Obtaining the member 'append' of a type (line 2534)
            append_3966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2534, 16), ivl_3965, 'append')
            # Calling append(args, kwargs) (line 2534)
            append_call_result_3975 = invoke(stypy.reporting.localization.Localization(__file__, 2534, 16), append_3966, *[str_call_result_3973], **kwargs_3974)
            

            if (may_be_3950 and more_types_in_union_3951):
                # SSA join for if statement (line 2530)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 2525)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_3934:
            # SSA join for if statement (line 2521)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of '_append_singleton_leaf_node(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_append_singleton_leaf_node' in the type store
    # Getting the type of 'stypy_return_type' (line 2511)
    stypy_return_type_3976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_3976)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_append_singleton_leaf_node'
    return stypy_return_type_3976

# Assigning a type to the variable '_append_singleton_leaf_node' (line 2511)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2511, 0), '_append_singleton_leaf_node', _append_singleton_leaf_node)

@norecursion
def _append_nonsingleton_leaf_node(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_append_nonsingleton_leaf_node'
    module_type_store = module_type_store.open_function_context('_append_nonsingleton_leaf_node', 2537, 0, False)
    
    # Passed parameters checking function
    _append_nonsingleton_leaf_node.stypy_localization = localization
    _append_nonsingleton_leaf_node.stypy_type_of_self = None
    _append_nonsingleton_leaf_node.stypy_type_store = module_type_store
    _append_nonsingleton_leaf_node.stypy_function_name = '_append_nonsingleton_leaf_node'
    _append_nonsingleton_leaf_node.stypy_param_names_list = ['Z', 'p', 'n', 'level', 'lvs', 'ivl', 'leaf_label_func', 'i', 'labels', 'show_leaf_counts']
    _append_nonsingleton_leaf_node.stypy_varargs_param_name = None
    _append_nonsingleton_leaf_node.stypy_kwargs_param_name = None
    _append_nonsingleton_leaf_node.stypy_call_defaults = defaults
    _append_nonsingleton_leaf_node.stypy_call_varargs = varargs
    _append_nonsingleton_leaf_node.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_append_nonsingleton_leaf_node', ['Z', 'p', 'n', 'level', 'lvs', 'ivl', 'leaf_label_func', 'i', 'labels', 'show_leaf_counts'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_append_nonsingleton_leaf_node', localization, ['Z', 'p', 'n', 'level', 'lvs', 'ivl', 'leaf_label_func', 'i', 'labels', 'show_leaf_counts'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_append_nonsingleton_leaf_node(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 2543)
    # Getting the type of 'lvs' (line 2543)
    lvs_3977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 4), 'lvs')
    # Getting the type of 'None' (line 2543)
    None_3978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 18), 'None')
    
    (may_be_3979, more_types_in_union_3980) = may_not_be_none(lvs_3977, None_3978)

    if may_be_3979:

        if more_types_in_union_3980:
            # Runtime conditional SSA (line 2543)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to append(...): (line 2544)
        # Processing the call arguments (line 2544)
        
        # Call to int(...): (line 2544)
        # Processing the call arguments (line 2544)
        # Getting the type of 'i' (line 2544)
        i_3984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 23), 'i', False)
        # Processing the call keyword arguments (line 2544)
        kwargs_3985 = {}
        # Getting the type of 'int' (line 2544)
        int_3983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 19), 'int', False)
        # Calling int(args, kwargs) (line 2544)
        int_call_result_3986 = invoke(stypy.reporting.localization.Localization(__file__, 2544, 19), int_3983, *[i_3984], **kwargs_3985)
        
        # Processing the call keyword arguments (line 2544)
        kwargs_3987 = {}
        # Getting the type of 'lvs' (line 2544)
        lvs_3981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2544, 8), 'lvs', False)
        # Obtaining the member 'append' of a type (line 2544)
        append_3982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2544, 8), lvs_3981, 'append')
        # Calling append(args, kwargs) (line 2544)
        append_call_result_3988 = invoke(stypy.reporting.localization.Localization(__file__, 2544, 8), append_3982, *[int_call_result_3986], **kwargs_3987)
        

        if more_types_in_union_3980:
            # SSA join for if statement (line 2543)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2545)
    # Getting the type of 'ivl' (line 2545)
    ivl_3989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 4), 'ivl')
    # Getting the type of 'None' (line 2545)
    None_3990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 18), 'None')
    
    (may_be_3991, more_types_in_union_3992) = may_not_be_none(ivl_3989, None_3990)

    if may_be_3991:

        if more_types_in_union_3992:
            # Runtime conditional SSA (line 2545)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'leaf_label_func' (line 2546)
        leaf_label_func_3993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 11), 'leaf_label_func')
        # Testing the type of an if condition (line 2546)
        if_condition_3994 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2546, 8), leaf_label_func_3993)
        # Assigning a type to the variable 'if_condition_3994' (line 2546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2546, 8), 'if_condition_3994', if_condition_3994)
        # SSA begins for if statement (line 2546)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2547)
        # Processing the call arguments (line 2547)
        
        # Call to leaf_label_func(...): (line 2547)
        # Processing the call arguments (line 2547)
        
        # Call to int(...): (line 2547)
        # Processing the call arguments (line 2547)
        # Getting the type of 'i' (line 2547)
        i_3999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 43), 'i', False)
        # Processing the call keyword arguments (line 2547)
        kwargs_4000 = {}
        # Getting the type of 'int' (line 2547)
        int_3998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 39), 'int', False)
        # Calling int(args, kwargs) (line 2547)
        int_call_result_4001 = invoke(stypy.reporting.localization.Localization(__file__, 2547, 39), int_3998, *[i_3999], **kwargs_4000)
        
        # Processing the call keyword arguments (line 2547)
        kwargs_4002 = {}
        # Getting the type of 'leaf_label_func' (line 2547)
        leaf_label_func_3997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 23), 'leaf_label_func', False)
        # Calling leaf_label_func(args, kwargs) (line 2547)
        leaf_label_func_call_result_4003 = invoke(stypy.reporting.localization.Localization(__file__, 2547, 23), leaf_label_func_3997, *[int_call_result_4001], **kwargs_4002)
        
        # Processing the call keyword arguments (line 2547)
        kwargs_4004 = {}
        # Getting the type of 'ivl' (line 2547)
        ivl_3995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 12), 'ivl', False)
        # Obtaining the member 'append' of a type (line 2547)
        append_3996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2547, 12), ivl_3995, 'append')
        # Calling append(args, kwargs) (line 2547)
        append_call_result_4005 = invoke(stypy.reporting.localization.Localization(__file__, 2547, 12), append_3996, *[leaf_label_func_call_result_4003], **kwargs_4004)
        
        # SSA branch for the else part of an if statement (line 2546)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'show_leaf_counts' (line 2549)
        show_leaf_counts_4006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 15), 'show_leaf_counts')
        # Testing the type of an if condition (line 2549)
        if_condition_4007 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2549, 12), show_leaf_counts_4006)
        # Assigning a type to the variable 'if_condition_4007' (line 2549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2549, 12), 'if_condition_4007', if_condition_4007)
        # SSA begins for if statement (line 2549)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2550)
        # Processing the call arguments (line 2550)
        str_4010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2550, 27), 'str', '(')
        
        # Call to str(...): (line 2550)
        # Processing the call arguments (line 2550)
        
        # Call to int(...): (line 2550)
        # Processing the call arguments (line 2550)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 2550)
        tuple_4013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2550, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2550)
        # Adding element type (line 2550)
        # Getting the type of 'i' (line 2550)
        i_4014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 43), 'i', False)
        # Getting the type of 'n' (line 2550)
        n_4015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 47), 'n', False)
        # Applying the binary operator '-' (line 2550)
        result_sub_4016 = python_operator(stypy.reporting.localization.Localization(__file__, 2550, 43), '-', i_4014, n_4015)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2550, 43), tuple_4013, result_sub_4016)
        # Adding element type (line 2550)
        int_4017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2550, 50), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2550, 43), tuple_4013, int_4017)
        
        # Getting the type of 'Z' (line 2550)
        Z_4018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 41), 'Z', False)
        # Obtaining the member '__getitem__' of a type (line 2550)
        getitem___4019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2550, 41), Z_4018, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2550)
        subscript_call_result_4020 = invoke(stypy.reporting.localization.Localization(__file__, 2550, 41), getitem___4019, tuple_4013)
        
        # Processing the call keyword arguments (line 2550)
        kwargs_4021 = {}
        # Getting the type of 'int' (line 2550)
        int_4012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 37), 'int', False)
        # Calling int(args, kwargs) (line 2550)
        int_call_result_4022 = invoke(stypy.reporting.localization.Localization(__file__, 2550, 37), int_4012, *[subscript_call_result_4020], **kwargs_4021)
        
        # Processing the call keyword arguments (line 2550)
        kwargs_4023 = {}
        # Getting the type of 'str' (line 2550)
        str_4011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 33), 'str', False)
        # Calling str(args, kwargs) (line 2550)
        str_call_result_4024 = invoke(stypy.reporting.localization.Localization(__file__, 2550, 33), str_4011, *[int_call_result_4022], **kwargs_4023)
        
        # Applying the binary operator '+' (line 2550)
        result_add_4025 = python_operator(stypy.reporting.localization.Localization(__file__, 2550, 27), '+', str_4010, str_call_result_4024)
        
        str_4026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2550, 57), 'str', ')')
        # Applying the binary operator '+' (line 2550)
        result_add_4027 = python_operator(stypy.reporting.localization.Localization(__file__, 2550, 55), '+', result_add_4025, str_4026)
        
        # Processing the call keyword arguments (line 2550)
        kwargs_4028 = {}
        # Getting the type of 'ivl' (line 2550)
        ivl_4008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 16), 'ivl', False)
        # Obtaining the member 'append' of a type (line 2550)
        append_4009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2550, 16), ivl_4008, 'append')
        # Calling append(args, kwargs) (line 2550)
        append_call_result_4029 = invoke(stypy.reporting.localization.Localization(__file__, 2550, 16), append_4009, *[result_add_4027], **kwargs_4028)
        
        # SSA branch for the else part of an if statement (line 2549)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 2552)
        # Processing the call arguments (line 2552)
        str_4032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2552, 27), 'str', '')
        # Processing the call keyword arguments (line 2552)
        kwargs_4033 = {}
        # Getting the type of 'ivl' (line 2552)
        ivl_4030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 16), 'ivl', False)
        # Obtaining the member 'append' of a type (line 2552)
        append_4031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2552, 16), ivl_4030, 'append')
        # Calling append(args, kwargs) (line 2552)
        append_call_result_4034 = invoke(stypy.reporting.localization.Localization(__file__, 2552, 16), append_4031, *[str_4032], **kwargs_4033)
        
        # SSA join for if statement (line 2549)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2546)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_3992:
            # SSA join for if statement (line 2545)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of '_append_nonsingleton_leaf_node(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_append_nonsingleton_leaf_node' in the type store
    # Getting the type of 'stypy_return_type' (line 2537)
    stypy_return_type_4035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2537, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_4035)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_append_nonsingleton_leaf_node'
    return stypy_return_type_4035

# Assigning a type to the variable '_append_nonsingleton_leaf_node' (line 2537)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2537, 0), '_append_nonsingleton_leaf_node', _append_nonsingleton_leaf_node)

@norecursion
def _append_contraction_marks(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_append_contraction_marks'
    module_type_store = module_type_store.open_function_context('_append_contraction_marks', 2555, 0, False)
    
    # Passed parameters checking function
    _append_contraction_marks.stypy_localization = localization
    _append_contraction_marks.stypy_type_of_self = None
    _append_contraction_marks.stypy_type_store = module_type_store
    _append_contraction_marks.stypy_function_name = '_append_contraction_marks'
    _append_contraction_marks.stypy_param_names_list = ['Z', 'iv', 'i', 'n', 'contraction_marks']
    _append_contraction_marks.stypy_varargs_param_name = None
    _append_contraction_marks.stypy_kwargs_param_name = None
    _append_contraction_marks.stypy_call_defaults = defaults
    _append_contraction_marks.stypy_call_varargs = varargs
    _append_contraction_marks.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_append_contraction_marks', ['Z', 'iv', 'i', 'n', 'contraction_marks'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_append_contraction_marks', localization, ['Z', 'iv', 'i', 'n', 'contraction_marks'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_append_contraction_marks(...)' code ##################

    
    # Call to _append_contraction_marks_sub(...): (line 2556)
    # Processing the call arguments (line 2556)
    # Getting the type of 'Z' (line 2556)
    Z_4037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 34), 'Z', False)
    # Getting the type of 'iv' (line 2556)
    iv_4038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 37), 'iv', False)
    
    # Call to int(...): (line 2556)
    # Processing the call arguments (line 2556)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2556)
    tuple_4040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2556, 47), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2556)
    # Adding element type (line 2556)
    # Getting the type of 'i' (line 2556)
    i_4041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 47), 'i', False)
    # Getting the type of 'n' (line 2556)
    n_4042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 51), 'n', False)
    # Applying the binary operator '-' (line 2556)
    result_sub_4043 = python_operator(stypy.reporting.localization.Localization(__file__, 2556, 47), '-', i_4041, n_4042)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2556, 47), tuple_4040, result_sub_4043)
    # Adding element type (line 2556)
    int_4044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2556, 54), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2556, 47), tuple_4040, int_4044)
    
    # Getting the type of 'Z' (line 2556)
    Z_4045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 45), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 2556)
    getitem___4046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2556, 45), Z_4045, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2556)
    subscript_call_result_4047 = invoke(stypy.reporting.localization.Localization(__file__, 2556, 45), getitem___4046, tuple_4040)
    
    # Processing the call keyword arguments (line 2556)
    kwargs_4048 = {}
    # Getting the type of 'int' (line 2556)
    int_4039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 41), 'int', False)
    # Calling int(args, kwargs) (line 2556)
    int_call_result_4049 = invoke(stypy.reporting.localization.Localization(__file__, 2556, 41), int_4039, *[subscript_call_result_4047], **kwargs_4048)
    
    # Getting the type of 'n' (line 2556)
    n_4050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 59), 'n', False)
    # Getting the type of 'contraction_marks' (line 2556)
    contraction_marks_4051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 62), 'contraction_marks', False)
    # Processing the call keyword arguments (line 2556)
    kwargs_4052 = {}
    # Getting the type of '_append_contraction_marks_sub' (line 2556)
    _append_contraction_marks_sub_4036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 4), '_append_contraction_marks_sub', False)
    # Calling _append_contraction_marks_sub(args, kwargs) (line 2556)
    _append_contraction_marks_sub_call_result_4053 = invoke(stypy.reporting.localization.Localization(__file__, 2556, 4), _append_contraction_marks_sub_4036, *[Z_4037, iv_4038, int_call_result_4049, n_4050, contraction_marks_4051], **kwargs_4052)
    
    
    # Call to _append_contraction_marks_sub(...): (line 2557)
    # Processing the call arguments (line 2557)
    # Getting the type of 'Z' (line 2557)
    Z_4055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 34), 'Z', False)
    # Getting the type of 'iv' (line 2557)
    iv_4056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 37), 'iv', False)
    
    # Call to int(...): (line 2557)
    # Processing the call arguments (line 2557)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2557)
    tuple_4058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 47), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2557)
    # Adding element type (line 2557)
    # Getting the type of 'i' (line 2557)
    i_4059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 47), 'i', False)
    # Getting the type of 'n' (line 2557)
    n_4060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 51), 'n', False)
    # Applying the binary operator '-' (line 2557)
    result_sub_4061 = python_operator(stypy.reporting.localization.Localization(__file__, 2557, 47), '-', i_4059, n_4060)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 47), tuple_4058, result_sub_4061)
    # Adding element type (line 2557)
    int_4062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2557, 54), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2557, 47), tuple_4058, int_4062)
    
    # Getting the type of 'Z' (line 2557)
    Z_4063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 45), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 2557)
    getitem___4064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2557, 45), Z_4063, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2557)
    subscript_call_result_4065 = invoke(stypy.reporting.localization.Localization(__file__, 2557, 45), getitem___4064, tuple_4058)
    
    # Processing the call keyword arguments (line 2557)
    kwargs_4066 = {}
    # Getting the type of 'int' (line 2557)
    int_4057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 41), 'int', False)
    # Calling int(args, kwargs) (line 2557)
    int_call_result_4067 = invoke(stypy.reporting.localization.Localization(__file__, 2557, 41), int_4057, *[subscript_call_result_4065], **kwargs_4066)
    
    # Getting the type of 'n' (line 2557)
    n_4068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 59), 'n', False)
    # Getting the type of 'contraction_marks' (line 2557)
    contraction_marks_4069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 62), 'contraction_marks', False)
    # Processing the call keyword arguments (line 2557)
    kwargs_4070 = {}
    # Getting the type of '_append_contraction_marks_sub' (line 2557)
    _append_contraction_marks_sub_4054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 4), '_append_contraction_marks_sub', False)
    # Calling _append_contraction_marks_sub(args, kwargs) (line 2557)
    _append_contraction_marks_sub_call_result_4071 = invoke(stypy.reporting.localization.Localization(__file__, 2557, 4), _append_contraction_marks_sub_4054, *[Z_4055, iv_4056, int_call_result_4067, n_4068, contraction_marks_4069], **kwargs_4070)
    
    
    # ################# End of '_append_contraction_marks(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_append_contraction_marks' in the type store
    # Getting the type of 'stypy_return_type' (line 2555)
    stypy_return_type_4072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2555, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_4072)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_append_contraction_marks'
    return stypy_return_type_4072

# Assigning a type to the variable '_append_contraction_marks' (line 2555)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2555, 0), '_append_contraction_marks', _append_contraction_marks)

@norecursion
def _append_contraction_marks_sub(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_append_contraction_marks_sub'
    module_type_store = module_type_store.open_function_context('_append_contraction_marks_sub', 2560, 0, False)
    
    # Passed parameters checking function
    _append_contraction_marks_sub.stypy_localization = localization
    _append_contraction_marks_sub.stypy_type_of_self = None
    _append_contraction_marks_sub.stypy_type_store = module_type_store
    _append_contraction_marks_sub.stypy_function_name = '_append_contraction_marks_sub'
    _append_contraction_marks_sub.stypy_param_names_list = ['Z', 'iv', 'i', 'n', 'contraction_marks']
    _append_contraction_marks_sub.stypy_varargs_param_name = None
    _append_contraction_marks_sub.stypy_kwargs_param_name = None
    _append_contraction_marks_sub.stypy_call_defaults = defaults
    _append_contraction_marks_sub.stypy_call_varargs = varargs
    _append_contraction_marks_sub.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_append_contraction_marks_sub', ['Z', 'iv', 'i', 'n', 'contraction_marks'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_append_contraction_marks_sub', localization, ['Z', 'iv', 'i', 'n', 'contraction_marks'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_append_contraction_marks_sub(...)' code ##################

    
    
    # Getting the type of 'i' (line 2561)
    i_4073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 7), 'i')
    # Getting the type of 'n' (line 2561)
    n_4074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 12), 'n')
    # Applying the binary operator '>=' (line 2561)
    result_ge_4075 = python_operator(stypy.reporting.localization.Localization(__file__, 2561, 7), '>=', i_4073, n_4074)
    
    # Testing the type of an if condition (line 2561)
    if_condition_4076 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2561, 4), result_ge_4075)
    # Assigning a type to the variable 'if_condition_4076' (line 2561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2561, 4), 'if_condition_4076', if_condition_4076)
    # SSA begins for if statement (line 2561)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2562)
    # Processing the call arguments (line 2562)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2562)
    tuple_4079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2562, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2562)
    # Adding element type (line 2562)
    # Getting the type of 'iv' (line 2562)
    iv_4080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 34), 'iv', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2562, 34), tuple_4079, iv_4080)
    # Adding element type (line 2562)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2562)
    tuple_4081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2562, 40), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2562)
    # Adding element type (line 2562)
    # Getting the type of 'i' (line 2562)
    i_4082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 40), 'i', False)
    # Getting the type of 'n' (line 2562)
    n_4083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 44), 'n', False)
    # Applying the binary operator '-' (line 2562)
    result_sub_4084 = python_operator(stypy.reporting.localization.Localization(__file__, 2562, 40), '-', i_4082, n_4083)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2562, 40), tuple_4081, result_sub_4084)
    # Adding element type (line 2562)
    int_4085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2562, 47), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2562, 40), tuple_4081, int_4085)
    
    # Getting the type of 'Z' (line 2562)
    Z_4086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 38), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 2562)
    getitem___4087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2562, 38), Z_4086, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2562)
    subscript_call_result_4088 = invoke(stypy.reporting.localization.Localization(__file__, 2562, 38), getitem___4087, tuple_4081)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2562, 34), tuple_4079, subscript_call_result_4088)
    
    # Processing the call keyword arguments (line 2562)
    kwargs_4089 = {}
    # Getting the type of 'contraction_marks' (line 2562)
    contraction_marks_4077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 8), 'contraction_marks', False)
    # Obtaining the member 'append' of a type (line 2562)
    append_4078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2562, 8), contraction_marks_4077, 'append')
    # Calling append(args, kwargs) (line 2562)
    append_call_result_4090 = invoke(stypy.reporting.localization.Localization(__file__, 2562, 8), append_4078, *[tuple_4079], **kwargs_4089)
    
    
    # Call to _append_contraction_marks_sub(...): (line 2563)
    # Processing the call arguments (line 2563)
    # Getting the type of 'Z' (line 2563)
    Z_4092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 38), 'Z', False)
    # Getting the type of 'iv' (line 2563)
    iv_4093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 41), 'iv', False)
    
    # Call to int(...): (line 2563)
    # Processing the call arguments (line 2563)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2563)
    tuple_4095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2563, 51), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2563)
    # Adding element type (line 2563)
    # Getting the type of 'i' (line 2563)
    i_4096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 51), 'i', False)
    # Getting the type of 'n' (line 2563)
    n_4097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 55), 'n', False)
    # Applying the binary operator '-' (line 2563)
    result_sub_4098 = python_operator(stypy.reporting.localization.Localization(__file__, 2563, 51), '-', i_4096, n_4097)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2563, 51), tuple_4095, result_sub_4098)
    # Adding element type (line 2563)
    int_4099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2563, 58), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2563, 51), tuple_4095, int_4099)
    
    # Getting the type of 'Z' (line 2563)
    Z_4100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 49), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 2563)
    getitem___4101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2563, 49), Z_4100, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2563)
    subscript_call_result_4102 = invoke(stypy.reporting.localization.Localization(__file__, 2563, 49), getitem___4101, tuple_4095)
    
    # Processing the call keyword arguments (line 2563)
    kwargs_4103 = {}
    # Getting the type of 'int' (line 2563)
    int_4094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 45), 'int', False)
    # Calling int(args, kwargs) (line 2563)
    int_call_result_4104 = invoke(stypy.reporting.localization.Localization(__file__, 2563, 45), int_4094, *[subscript_call_result_4102], **kwargs_4103)
    
    # Getting the type of 'n' (line 2563)
    n_4105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 63), 'n', False)
    # Getting the type of 'contraction_marks' (line 2563)
    contraction_marks_4106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 66), 'contraction_marks', False)
    # Processing the call keyword arguments (line 2563)
    kwargs_4107 = {}
    # Getting the type of '_append_contraction_marks_sub' (line 2563)
    _append_contraction_marks_sub_4091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2563, 8), '_append_contraction_marks_sub', False)
    # Calling _append_contraction_marks_sub(args, kwargs) (line 2563)
    _append_contraction_marks_sub_call_result_4108 = invoke(stypy.reporting.localization.Localization(__file__, 2563, 8), _append_contraction_marks_sub_4091, *[Z_4092, iv_4093, int_call_result_4104, n_4105, contraction_marks_4106], **kwargs_4107)
    
    
    # Call to _append_contraction_marks_sub(...): (line 2564)
    # Processing the call arguments (line 2564)
    # Getting the type of 'Z' (line 2564)
    Z_4110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 38), 'Z', False)
    # Getting the type of 'iv' (line 2564)
    iv_4111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 41), 'iv', False)
    
    # Call to int(...): (line 2564)
    # Processing the call arguments (line 2564)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2564)
    tuple_4113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 51), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2564)
    # Adding element type (line 2564)
    # Getting the type of 'i' (line 2564)
    i_4114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 51), 'i', False)
    # Getting the type of 'n' (line 2564)
    n_4115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 55), 'n', False)
    # Applying the binary operator '-' (line 2564)
    result_sub_4116 = python_operator(stypy.reporting.localization.Localization(__file__, 2564, 51), '-', i_4114, n_4115)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 51), tuple_4113, result_sub_4116)
    # Adding element type (line 2564)
    int_4117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 58), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2564, 51), tuple_4113, int_4117)
    
    # Getting the type of 'Z' (line 2564)
    Z_4118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 49), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 2564)
    getitem___4119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2564, 49), Z_4118, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2564)
    subscript_call_result_4120 = invoke(stypy.reporting.localization.Localization(__file__, 2564, 49), getitem___4119, tuple_4113)
    
    # Processing the call keyword arguments (line 2564)
    kwargs_4121 = {}
    # Getting the type of 'int' (line 2564)
    int_4112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 45), 'int', False)
    # Calling int(args, kwargs) (line 2564)
    int_call_result_4122 = invoke(stypy.reporting.localization.Localization(__file__, 2564, 45), int_4112, *[subscript_call_result_4120], **kwargs_4121)
    
    # Getting the type of 'n' (line 2564)
    n_4123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 63), 'n', False)
    # Getting the type of 'contraction_marks' (line 2564)
    contraction_marks_4124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 66), 'contraction_marks', False)
    # Processing the call keyword arguments (line 2564)
    kwargs_4125 = {}
    # Getting the type of '_append_contraction_marks_sub' (line 2564)
    _append_contraction_marks_sub_4109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 8), '_append_contraction_marks_sub', False)
    # Calling _append_contraction_marks_sub(args, kwargs) (line 2564)
    _append_contraction_marks_sub_call_result_4126 = invoke(stypy.reporting.localization.Localization(__file__, 2564, 8), _append_contraction_marks_sub_4109, *[Z_4110, iv_4111, int_call_result_4122, n_4123, contraction_marks_4124], **kwargs_4125)
    
    # SSA join for if statement (line 2561)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_append_contraction_marks_sub(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_append_contraction_marks_sub' in the type store
    # Getting the type of 'stypy_return_type' (line 2560)
    stypy_return_type_4127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2560, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_4127)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_append_contraction_marks_sub'
    return stypy_return_type_4127

# Assigning a type to the variable '_append_contraction_marks_sub' (line 2560)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2560, 0), '_append_contraction_marks_sub', _append_contraction_marks_sub)

@norecursion
def _dendrogram_calculate_info(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'np' (line 2568)
    np_4128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 47), 'np')
    # Obtaining the member 'inf' of a type (line 2568)
    inf_4129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2568, 47), np_4128, 'inf')
    # Getting the type of 'True' (line 2568)
    True_4130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 66), 'True')
    str_4131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2569, 43), 'str', 'top')
    # Getting the type of 'None' (line 2569)
    None_4132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2569, 57), 'None')
    # Getting the type of 'False' (line 2570)
    False_4133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 42), 'False')
    # Getting the type of 'False' (line 2570)
    False_4134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2570, 63), 'False')
    # Getting the type of 'False' (line 2571)
    False_4135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 48), 'False')
    int_4136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2571, 57), 'int')
    float_4137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2571, 64), 'float')
    
    # Obtaining an instance of the builtin type 'list' (line 2572)
    list_4138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 35), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2572)
    
    int_4139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 41), 'int')
    
    # Obtaining an instance of the builtin type 'list' (line 2572)
    list_4140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 56), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2572)
    
    
    # Obtaining an instance of the builtin type 'list' (line 2572)
    list_4141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2572, 72), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2572)
    
    # Getting the type of 'None' (line 2573)
    None_4142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 35), 'None')
    # Getting the type of 'False' (line 2573)
    False_4143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 45), 'False')
    
    # Obtaining an instance of the builtin type 'list' (line 2574)
    list_4144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, 45), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2574)
    
    
    # Obtaining an instance of the builtin type 'list' (line 2574)
    list_4145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2574, 60), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2574)
    
    
    # Obtaining an instance of the builtin type 'list' (line 2575)
    list_4146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2575, 57), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2575)
    
    # Getting the type of 'None' (line 2576)
    None_4147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2576, 47), 'None')
    int_4148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2576, 59), 'int')
    # Getting the type of 'None' (line 2577)
    None_4149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 49), 'None')
    # Getting the type of 'None' (line 2578)
    None_4150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2578, 47), 'None')
    str_4151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2579, 53), 'str', 'b')
    defaults = [inf_4129, True_4130, str_4131, None_4132, False_4133, False_4134, False_4135, int_4136, float_4137, list_4138, int_4139, list_4140, list_4141, None_4142, False_4143, list_4144, list_4145, list_4146, None_4147, int_4148, None_4149, None_4150, str_4151]
    # Create a new context for function '_dendrogram_calculate_info'
    module_type_store = module_type_store.open_function_context('_dendrogram_calculate_info', 2567, 0, False)
    
    # Passed parameters checking function
    _dendrogram_calculate_info.stypy_localization = localization
    _dendrogram_calculate_info.stypy_type_of_self = None
    _dendrogram_calculate_info.stypy_type_store = module_type_store
    _dendrogram_calculate_info.stypy_function_name = '_dendrogram_calculate_info'
    _dendrogram_calculate_info.stypy_param_names_list = ['Z', 'p', 'truncate_mode', 'color_threshold', 'get_leaves', 'orientation', 'labels', 'count_sort', 'distance_sort', 'show_leaf_counts', 'i', 'iv', 'ivl', 'n', 'icoord_list', 'dcoord_list', 'lvs', 'mhr', 'current_color', 'color_list', 'currently_below_threshold', 'leaf_label_func', 'level', 'contraction_marks', 'link_color_func', 'above_threshold_color']
    _dendrogram_calculate_info.stypy_varargs_param_name = None
    _dendrogram_calculate_info.stypy_kwargs_param_name = None
    _dendrogram_calculate_info.stypy_call_defaults = defaults
    _dendrogram_calculate_info.stypy_call_varargs = varargs
    _dendrogram_calculate_info.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_dendrogram_calculate_info', ['Z', 'p', 'truncate_mode', 'color_threshold', 'get_leaves', 'orientation', 'labels', 'count_sort', 'distance_sort', 'show_leaf_counts', 'i', 'iv', 'ivl', 'n', 'icoord_list', 'dcoord_list', 'lvs', 'mhr', 'current_color', 'color_list', 'currently_below_threshold', 'leaf_label_func', 'level', 'contraction_marks', 'link_color_func', 'above_threshold_color'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_dendrogram_calculate_info', localization, ['Z', 'p', 'truncate_mode', 'color_threshold', 'get_leaves', 'orientation', 'labels', 'count_sort', 'distance_sort', 'show_leaf_counts', 'i', 'iv', 'ivl', 'n', 'icoord_list', 'dcoord_list', 'lvs', 'mhr', 'current_color', 'color_list', 'currently_below_threshold', 'leaf_label_func', 'level', 'contraction_marks', 'link_color_func', 'above_threshold_color'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_dendrogram_calculate_info(...)' code ##################

    str_4152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2616, (-1)), 'str', "\n    Calculate the endpoints of the links as well as the labels for the\n    the dendrogram rooted at the node with index i. iv is the independent\n    variable value to plot the left-most leaf node below the root node i\n    (if orientation='top', this would be the left-most x value where the\n    plotting of this root node i and its descendents should begin).\n\n    ivl is a list to store the labels of the leaf nodes. The leaf_label_func\n    is called whenever ivl != None, labels == None, and\n    leaf_label_func != None. When ivl != None and labels != None, the\n    labels list is used only for labeling the leaf nodes. When\n    ivl == None, no labels are generated for leaf nodes.\n\n    When get_leaves==True, a list of leaves is built as they are visited\n    in the dendrogram.\n\n    Returns a tuple with l being the independent variable coordinate that\n    corresponds to the midpoint of cluster to the left of cluster i if\n    i is non-singleton, otherwise the independent coordinate of the leaf\n    node if i is a leaf node.\n\n    Returns\n    -------\n    A tuple (left, w, h, md), where:\n\n      * left is the independent variable coordinate of the center of the\n        the U of the subtree\n\n      * w is the amount of space used for the subtree (in independent\n        variable units)\n\n      * h is the height of the subtree in dependent variable units\n\n      * md is the ``max(Z[*,2]``) for all nodes ``*`` below and including\n        the target node.\n\n    ")
    
    
    # Getting the type of 'n' (line 2617)
    n_4153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2617, 7), 'n')
    int_4154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2617, 12), 'int')
    # Applying the binary operator '==' (line 2617)
    result_eq_4155 = python_operator(stypy.reporting.localization.Localization(__file__, 2617, 7), '==', n_4153, int_4154)
    
    # Testing the type of an if condition (line 2617)
    if_condition_4156 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2617, 4), result_eq_4155)
    # Assigning a type to the variable 'if_condition_4156' (line 2617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2617, 4), 'if_condition_4156', if_condition_4156)
    # SSA begins for if statement (line 2617)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2618)
    # Processing the call arguments (line 2618)
    str_4158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2618, 25), 'str', 'Invalid singleton cluster count n.')
    # Processing the call keyword arguments (line 2618)
    kwargs_4159 = {}
    # Getting the type of 'ValueError' (line 2618)
    ValueError_4157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2618, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2618)
    ValueError_call_result_4160 = invoke(stypy.reporting.localization.Localization(__file__, 2618, 14), ValueError_4157, *[str_4158], **kwargs_4159)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2618, 8), ValueError_call_result_4160, 'raise parameter', BaseException)
    # SSA join for if statement (line 2617)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'i' (line 2620)
    i_4161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 7), 'i')
    int_4162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2620, 12), 'int')
    # Applying the binary operator '==' (line 2620)
    result_eq_4163 = python_operator(stypy.reporting.localization.Localization(__file__, 2620, 7), '==', i_4161, int_4162)
    
    # Testing the type of an if condition (line 2620)
    if_condition_4164 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2620, 4), result_eq_4163)
    # Assigning a type to the variable 'if_condition_4164' (line 2620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2620, 4), 'if_condition_4164', if_condition_4164)
    # SSA begins for if statement (line 2620)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2621)
    # Processing the call arguments (line 2621)
    str_4166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2621, 25), 'str', 'Invalid root cluster index i.')
    # Processing the call keyword arguments (line 2621)
    kwargs_4167 = {}
    # Getting the type of 'ValueError' (line 2621)
    ValueError_4165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2621)
    ValueError_call_result_4168 = invoke(stypy.reporting.localization.Localization(__file__, 2621, 14), ValueError_4165, *[str_4166], **kwargs_4167)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2621, 8), ValueError_call_result_4168, 'raise parameter', BaseException)
    # SSA join for if statement (line 2620)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'truncate_mode' (line 2623)
    truncate_mode_4169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2623, 7), 'truncate_mode')
    str_4170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2623, 24), 'str', 'lastp')
    # Applying the binary operator '==' (line 2623)
    result_eq_4171 = python_operator(stypy.reporting.localization.Localization(__file__, 2623, 7), '==', truncate_mode_4169, str_4170)
    
    # Testing the type of an if condition (line 2623)
    if_condition_4172 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2623, 4), result_eq_4171)
    # Assigning a type to the variable 'if_condition_4172' (line 2623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2623, 4), 'if_condition_4172', if_condition_4172)
    # SSA begins for if statement (line 2623)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    int_4173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2627, 11), 'int')
    # Getting the type of 'n' (line 2627)
    n_4174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 13), 'n')
    # Applying the binary operator '*' (line 2627)
    result_mul_4175 = python_operator(stypy.reporting.localization.Localization(__file__, 2627, 11), '*', int_4173, n_4174)
    
    # Getting the type of 'p' (line 2627)
    p_4176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 17), 'p')
    # Applying the binary operator '-' (line 2627)
    result_sub_4177 = python_operator(stypy.reporting.localization.Localization(__file__, 2627, 11), '-', result_mul_4175, p_4176)
    
    # Getting the type of 'i' (line 2627)
    i_4178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 21), 'i')
    # Applying the binary operator '>' (line 2627)
    result_gt_4179 = python_operator(stypy.reporting.localization.Localization(__file__, 2627, 11), '>', result_sub_4177, i_4178)
    # Getting the type of 'n' (line 2627)
    n_4180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 26), 'n')
    # Applying the binary operator '>=' (line 2627)
    result_ge_4181 = python_operator(stypy.reporting.localization.Localization(__file__, 2627, 11), '>=', i_4178, n_4180)
    # Applying the binary operator '&' (line 2627)
    result_and__4182 = python_operator(stypy.reporting.localization.Localization(__file__, 2627, 11), '&', result_gt_4179, result_ge_4181)
    
    # Testing the type of an if condition (line 2627)
    if_condition_4183 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2627, 8), result_and__4182)
    # Assigning a type to the variable 'if_condition_4183' (line 2627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2627, 8), 'if_condition_4183', if_condition_4183)
    # SSA begins for if statement (line 2627)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2628):
    
    # Assigning a Subscript to a Name (line 2628):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2628)
    tuple_4184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2628, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2628)
    # Adding element type (line 2628)
    # Getting the type of 'i' (line 2628)
    i_4185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 18), 'i')
    # Getting the type of 'n' (line 2628)
    n_4186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 22), 'n')
    # Applying the binary operator '-' (line 2628)
    result_sub_4187 = python_operator(stypy.reporting.localization.Localization(__file__, 2628, 18), '-', i_4185, n_4186)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2628, 18), tuple_4184, result_sub_4187)
    # Adding element type (line 2628)
    int_4188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2628, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2628, 18), tuple_4184, int_4188)
    
    # Getting the type of 'Z' (line 2628)
    Z_4189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2628, 16), 'Z')
    # Obtaining the member '__getitem__' of a type (line 2628)
    getitem___4190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2628, 16), Z_4189, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2628)
    subscript_call_result_4191 = invoke(stypy.reporting.localization.Localization(__file__, 2628, 16), getitem___4190, tuple_4184)
    
    # Assigning a type to the variable 'd' (line 2628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2628, 12), 'd', subscript_call_result_4191)
    
    # Call to _append_nonsingleton_leaf_node(...): (line 2629)
    # Processing the call arguments (line 2629)
    # Getting the type of 'Z' (line 2629)
    Z_4193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 43), 'Z', False)
    # Getting the type of 'p' (line 2629)
    p_4194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 46), 'p', False)
    # Getting the type of 'n' (line 2629)
    n_4195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 49), 'n', False)
    # Getting the type of 'level' (line 2629)
    level_4196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 52), 'level', False)
    # Getting the type of 'lvs' (line 2629)
    lvs_4197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 59), 'lvs', False)
    # Getting the type of 'ivl' (line 2629)
    ivl_4198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 64), 'ivl', False)
    # Getting the type of 'leaf_label_func' (line 2630)
    leaf_label_func_4199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 43), 'leaf_label_func', False)
    # Getting the type of 'i' (line 2630)
    i_4200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 60), 'i', False)
    # Getting the type of 'labels' (line 2630)
    labels_4201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2630, 63), 'labels', False)
    # Getting the type of 'show_leaf_counts' (line 2631)
    show_leaf_counts_4202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 43), 'show_leaf_counts', False)
    # Processing the call keyword arguments (line 2629)
    kwargs_4203 = {}
    # Getting the type of '_append_nonsingleton_leaf_node' (line 2629)
    _append_nonsingleton_leaf_node_4192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 12), '_append_nonsingleton_leaf_node', False)
    # Calling _append_nonsingleton_leaf_node(args, kwargs) (line 2629)
    _append_nonsingleton_leaf_node_call_result_4204 = invoke(stypy.reporting.localization.Localization(__file__, 2629, 12), _append_nonsingleton_leaf_node_4192, *[Z_4193, p_4194, n_4195, level_4196, lvs_4197, ivl_4198, leaf_label_func_4199, i_4200, labels_4201, show_leaf_counts_4202], **kwargs_4203)
    
    
    # Type idiom detected: calculating its left and rigth part (line 2632)
    # Getting the type of 'contraction_marks' (line 2632)
    contraction_marks_4205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 12), 'contraction_marks')
    # Getting the type of 'None' (line 2632)
    None_4206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2632, 40), 'None')
    
    (may_be_4207, more_types_in_union_4208) = may_not_be_none(contraction_marks_4205, None_4206)

    if may_be_4207:

        if more_types_in_union_4208:
            # Runtime conditional SSA (line 2632)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to _append_contraction_marks(...): (line 2633)
        # Processing the call arguments (line 2633)
        # Getting the type of 'Z' (line 2633)
        Z_4210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 42), 'Z', False)
        # Getting the type of 'iv' (line 2633)
        iv_4211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 45), 'iv', False)
        float_4212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2633, 50), 'float')
        # Applying the binary operator '+' (line 2633)
        result_add_4213 = python_operator(stypy.reporting.localization.Localization(__file__, 2633, 45), '+', iv_4211, float_4212)
        
        # Getting the type of 'i' (line 2633)
        i_4214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 55), 'i', False)
        # Getting the type of 'n' (line 2633)
        n_4215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 58), 'n', False)
        # Getting the type of 'contraction_marks' (line 2633)
        contraction_marks_4216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 61), 'contraction_marks', False)
        # Processing the call keyword arguments (line 2633)
        kwargs_4217 = {}
        # Getting the type of '_append_contraction_marks' (line 2633)
        _append_contraction_marks_4209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2633, 16), '_append_contraction_marks', False)
        # Calling _append_contraction_marks(args, kwargs) (line 2633)
        _append_contraction_marks_call_result_4218 = invoke(stypy.reporting.localization.Localization(__file__, 2633, 16), _append_contraction_marks_4209, *[Z_4210, result_add_4213, i_4214, n_4215, contraction_marks_4216], **kwargs_4217)
        

        if more_types_in_union_4208:
            # SSA join for if statement (line 2632)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2634)
    tuple_4219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2634, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2634)
    # Adding element type (line 2634)
    # Getting the type of 'iv' (line 2634)
    iv_4220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 20), 'iv')
    float_4221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2634, 25), 'float')
    # Applying the binary operator '+' (line 2634)
    result_add_4222 = python_operator(stypy.reporting.localization.Localization(__file__, 2634, 20), '+', iv_4220, float_4221)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2634, 20), tuple_4219, result_add_4222)
    # Adding element type (line 2634)
    float_4223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2634, 30), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2634, 20), tuple_4219, float_4223)
    # Adding element type (line 2634)
    float_4224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2634, 36), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2634, 20), tuple_4219, float_4224)
    # Adding element type (line 2634)
    # Getting the type of 'd' (line 2634)
    d_4225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2634, 41), 'd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2634, 20), tuple_4219, d_4225)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2634, 12), 'stypy_return_type', tuple_4219)
    # SSA branch for the else part of an if statement (line 2627)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'i' (line 2635)
    i_4226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 13), 'i')
    # Getting the type of 'n' (line 2635)
    n_4227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 17), 'n')
    # Applying the binary operator '<' (line 2635)
    result_lt_4228 = python_operator(stypy.reporting.localization.Localization(__file__, 2635, 13), '<', i_4226, n_4227)
    
    # Testing the type of an if condition (line 2635)
    if_condition_4229 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2635, 13), result_lt_4228)
    # Assigning a type to the variable 'if_condition_4229' (line 2635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2635, 13), 'if_condition_4229', if_condition_4229)
    # SSA begins for if statement (line 2635)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _append_singleton_leaf_node(...): (line 2636)
    # Processing the call arguments (line 2636)
    # Getting the type of 'Z' (line 2636)
    Z_4231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 40), 'Z', False)
    # Getting the type of 'p' (line 2636)
    p_4232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 43), 'p', False)
    # Getting the type of 'n' (line 2636)
    n_4233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 46), 'n', False)
    # Getting the type of 'level' (line 2636)
    level_4234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 49), 'level', False)
    # Getting the type of 'lvs' (line 2636)
    lvs_4235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 56), 'lvs', False)
    # Getting the type of 'ivl' (line 2636)
    ivl_4236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 61), 'ivl', False)
    # Getting the type of 'leaf_label_func' (line 2637)
    leaf_label_func_4237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 40), 'leaf_label_func', False)
    # Getting the type of 'i' (line 2637)
    i_4238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 57), 'i', False)
    # Getting the type of 'labels' (line 2637)
    labels_4239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 60), 'labels', False)
    # Processing the call keyword arguments (line 2636)
    kwargs_4240 = {}
    # Getting the type of '_append_singleton_leaf_node' (line 2636)
    _append_singleton_leaf_node_4230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2636, 12), '_append_singleton_leaf_node', False)
    # Calling _append_singleton_leaf_node(args, kwargs) (line 2636)
    _append_singleton_leaf_node_call_result_4241 = invoke(stypy.reporting.localization.Localization(__file__, 2636, 12), _append_singleton_leaf_node_4230, *[Z_4231, p_4232, n_4233, level_4234, lvs_4235, ivl_4236, leaf_label_func_4237, i_4238, labels_4239], **kwargs_4240)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2638)
    tuple_4242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2638)
    # Adding element type (line 2638)
    # Getting the type of 'iv' (line 2638)
    iv_4243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2638, 20), 'iv')
    float_4244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, 25), 'float')
    # Applying the binary operator '+' (line 2638)
    result_add_4245 = python_operator(stypy.reporting.localization.Localization(__file__, 2638, 20), '+', iv_4243, float_4244)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2638, 20), tuple_4242, result_add_4245)
    # Adding element type (line 2638)
    float_4246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, 30), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2638, 20), tuple_4242, float_4246)
    # Adding element type (line 2638)
    float_4247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, 36), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2638, 20), tuple_4242, float_4247)
    # Adding element type (line 2638)
    float_4248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2638, 41), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2638, 20), tuple_4242, float_4248)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2638)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2638, 12), 'stypy_return_type', tuple_4242)
    # SSA join for if statement (line 2635)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2627)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2623)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'truncate_mode' (line 2639)
    truncate_mode_4249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2639, 9), 'truncate_mode')
    str_4250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2639, 26), 'str', 'level')
    # Applying the binary operator '==' (line 2639)
    result_eq_4251 = python_operator(stypy.reporting.localization.Localization(__file__, 2639, 9), '==', truncate_mode_4249, str_4250)
    
    # Testing the type of an if condition (line 2639)
    if_condition_4252 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2639, 9), result_eq_4251)
    # Assigning a type to the variable 'if_condition_4252' (line 2639)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2639, 9), 'if_condition_4252', if_condition_4252)
    # SSA begins for if statement (line 2639)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'i' (line 2640)
    i_4253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 11), 'i')
    # Getting the type of 'n' (line 2640)
    n_4254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 15), 'n')
    # Applying the binary operator '>' (line 2640)
    result_gt_4255 = python_operator(stypy.reporting.localization.Localization(__file__, 2640, 11), '>', i_4253, n_4254)
    
    
    # Getting the type of 'level' (line 2640)
    level_4256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 21), 'level')
    # Getting the type of 'p' (line 2640)
    p_4257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 29), 'p')
    # Applying the binary operator '>' (line 2640)
    result_gt_4258 = python_operator(stypy.reporting.localization.Localization(__file__, 2640, 21), '>', level_4256, p_4257)
    
    # Applying the binary operator 'and' (line 2640)
    result_and_keyword_4259 = python_operator(stypy.reporting.localization.Localization(__file__, 2640, 11), 'and', result_gt_4255, result_gt_4258)
    
    # Testing the type of an if condition (line 2640)
    if_condition_4260 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2640, 8), result_and_keyword_4259)
    # Assigning a type to the variable 'if_condition_4260' (line 2640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2640, 8), 'if_condition_4260', if_condition_4260)
    # SSA begins for if statement (line 2640)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2641):
    
    # Assigning a Subscript to a Name (line 2641):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2641)
    tuple_4261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2641, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2641)
    # Adding element type (line 2641)
    # Getting the type of 'i' (line 2641)
    i_4262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 18), 'i')
    # Getting the type of 'n' (line 2641)
    n_4263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 22), 'n')
    # Applying the binary operator '-' (line 2641)
    result_sub_4264 = python_operator(stypy.reporting.localization.Localization(__file__, 2641, 18), '-', i_4262, n_4263)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2641, 18), tuple_4261, result_sub_4264)
    # Adding element type (line 2641)
    int_4265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2641, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2641, 18), tuple_4261, int_4265)
    
    # Getting the type of 'Z' (line 2641)
    Z_4266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 16), 'Z')
    # Obtaining the member '__getitem__' of a type (line 2641)
    getitem___4267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2641, 16), Z_4266, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2641)
    subscript_call_result_4268 = invoke(stypy.reporting.localization.Localization(__file__, 2641, 16), getitem___4267, tuple_4261)
    
    # Assigning a type to the variable 'd' (line 2641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2641, 12), 'd', subscript_call_result_4268)
    
    # Call to _append_nonsingleton_leaf_node(...): (line 2642)
    # Processing the call arguments (line 2642)
    # Getting the type of 'Z' (line 2642)
    Z_4270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 43), 'Z', False)
    # Getting the type of 'p' (line 2642)
    p_4271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 46), 'p', False)
    # Getting the type of 'n' (line 2642)
    n_4272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 49), 'n', False)
    # Getting the type of 'level' (line 2642)
    level_4273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 52), 'level', False)
    # Getting the type of 'lvs' (line 2642)
    lvs_4274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 59), 'lvs', False)
    # Getting the type of 'ivl' (line 2642)
    ivl_4275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 64), 'ivl', False)
    # Getting the type of 'leaf_label_func' (line 2643)
    leaf_label_func_4276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 43), 'leaf_label_func', False)
    # Getting the type of 'i' (line 2643)
    i_4277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 60), 'i', False)
    # Getting the type of 'labels' (line 2643)
    labels_4278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 63), 'labels', False)
    # Getting the type of 'show_leaf_counts' (line 2644)
    show_leaf_counts_4279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2644, 43), 'show_leaf_counts', False)
    # Processing the call keyword arguments (line 2642)
    kwargs_4280 = {}
    # Getting the type of '_append_nonsingleton_leaf_node' (line 2642)
    _append_nonsingleton_leaf_node_4269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 12), '_append_nonsingleton_leaf_node', False)
    # Calling _append_nonsingleton_leaf_node(args, kwargs) (line 2642)
    _append_nonsingleton_leaf_node_call_result_4281 = invoke(stypy.reporting.localization.Localization(__file__, 2642, 12), _append_nonsingleton_leaf_node_4269, *[Z_4270, p_4271, n_4272, level_4273, lvs_4274, ivl_4275, leaf_label_func_4276, i_4277, labels_4278, show_leaf_counts_4279], **kwargs_4280)
    
    
    # Type idiom detected: calculating its left and rigth part (line 2645)
    # Getting the type of 'contraction_marks' (line 2645)
    contraction_marks_4282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 12), 'contraction_marks')
    # Getting the type of 'None' (line 2645)
    None_4283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 40), 'None')
    
    (may_be_4284, more_types_in_union_4285) = may_not_be_none(contraction_marks_4282, None_4283)

    if may_be_4284:

        if more_types_in_union_4285:
            # Runtime conditional SSA (line 2645)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to _append_contraction_marks(...): (line 2646)
        # Processing the call arguments (line 2646)
        # Getting the type of 'Z' (line 2646)
        Z_4287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 42), 'Z', False)
        # Getting the type of 'iv' (line 2646)
        iv_4288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 45), 'iv', False)
        float_4289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2646, 50), 'float')
        # Applying the binary operator '+' (line 2646)
        result_add_4290 = python_operator(stypy.reporting.localization.Localization(__file__, 2646, 45), '+', iv_4288, float_4289)
        
        # Getting the type of 'i' (line 2646)
        i_4291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 55), 'i', False)
        # Getting the type of 'n' (line 2646)
        n_4292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 58), 'n', False)
        # Getting the type of 'contraction_marks' (line 2646)
        contraction_marks_4293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 61), 'contraction_marks', False)
        # Processing the call keyword arguments (line 2646)
        kwargs_4294 = {}
        # Getting the type of '_append_contraction_marks' (line 2646)
        _append_contraction_marks_4286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 16), '_append_contraction_marks', False)
        # Calling _append_contraction_marks(args, kwargs) (line 2646)
        _append_contraction_marks_call_result_4295 = invoke(stypy.reporting.localization.Localization(__file__, 2646, 16), _append_contraction_marks_4286, *[Z_4287, result_add_4290, i_4291, n_4292, contraction_marks_4293], **kwargs_4294)
        

        if more_types_in_union_4285:
            # SSA join for if statement (line 2645)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2647)
    tuple_4296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2647, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2647)
    # Adding element type (line 2647)
    # Getting the type of 'iv' (line 2647)
    iv_4297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 20), 'iv')
    float_4298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2647, 25), 'float')
    # Applying the binary operator '+' (line 2647)
    result_add_4299 = python_operator(stypy.reporting.localization.Localization(__file__, 2647, 20), '+', iv_4297, float_4298)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2647, 20), tuple_4296, result_add_4299)
    # Adding element type (line 2647)
    float_4300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2647, 30), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2647, 20), tuple_4296, float_4300)
    # Adding element type (line 2647)
    float_4301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2647, 36), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2647, 20), tuple_4296, float_4301)
    # Adding element type (line 2647)
    # Getting the type of 'd' (line 2647)
    d_4302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2647, 41), 'd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2647, 20), tuple_4296, d_4302)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2647, 12), 'stypy_return_type', tuple_4296)
    # SSA branch for the else part of an if statement (line 2640)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'i' (line 2648)
    i_4303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 13), 'i')
    # Getting the type of 'n' (line 2648)
    n_4304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 17), 'n')
    # Applying the binary operator '<' (line 2648)
    result_lt_4305 = python_operator(stypy.reporting.localization.Localization(__file__, 2648, 13), '<', i_4303, n_4304)
    
    # Testing the type of an if condition (line 2648)
    if_condition_4306 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2648, 13), result_lt_4305)
    # Assigning a type to the variable 'if_condition_4306' (line 2648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2648, 13), 'if_condition_4306', if_condition_4306)
    # SSA begins for if statement (line 2648)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _append_singleton_leaf_node(...): (line 2649)
    # Processing the call arguments (line 2649)
    # Getting the type of 'Z' (line 2649)
    Z_4308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 40), 'Z', False)
    # Getting the type of 'p' (line 2649)
    p_4309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 43), 'p', False)
    # Getting the type of 'n' (line 2649)
    n_4310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 46), 'n', False)
    # Getting the type of 'level' (line 2649)
    level_4311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 49), 'level', False)
    # Getting the type of 'lvs' (line 2649)
    lvs_4312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 56), 'lvs', False)
    # Getting the type of 'ivl' (line 2649)
    ivl_4313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 61), 'ivl', False)
    # Getting the type of 'leaf_label_func' (line 2650)
    leaf_label_func_4314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 40), 'leaf_label_func', False)
    # Getting the type of 'i' (line 2650)
    i_4315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 57), 'i', False)
    # Getting the type of 'labels' (line 2650)
    labels_4316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 60), 'labels', False)
    # Processing the call keyword arguments (line 2649)
    kwargs_4317 = {}
    # Getting the type of '_append_singleton_leaf_node' (line 2649)
    _append_singleton_leaf_node_4307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2649, 12), '_append_singleton_leaf_node', False)
    # Calling _append_singleton_leaf_node(args, kwargs) (line 2649)
    _append_singleton_leaf_node_call_result_4318 = invoke(stypy.reporting.localization.Localization(__file__, 2649, 12), _append_singleton_leaf_node_4307, *[Z_4308, p_4309, n_4310, level_4311, lvs_4312, ivl_4313, leaf_label_func_4314, i_4315, labels_4316], **kwargs_4317)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2651)
    tuple_4319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2651, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2651)
    # Adding element type (line 2651)
    # Getting the type of 'iv' (line 2651)
    iv_4320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2651, 20), 'iv')
    float_4321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2651, 25), 'float')
    # Applying the binary operator '+' (line 2651)
    result_add_4322 = python_operator(stypy.reporting.localization.Localization(__file__, 2651, 20), '+', iv_4320, float_4321)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2651, 20), tuple_4319, result_add_4322)
    # Adding element type (line 2651)
    float_4323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2651, 30), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2651, 20), tuple_4319, float_4323)
    # Adding element type (line 2651)
    float_4324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2651, 36), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2651, 20), tuple_4319, float_4324)
    # Adding element type (line 2651)
    float_4325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2651, 41), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2651, 20), tuple_4319, float_4325)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2651)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2651, 12), 'stypy_return_type', tuple_4319)
    # SSA join for if statement (line 2648)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2640)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2639)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'truncate_mode' (line 2652)
    truncate_mode_4326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2652, 9), 'truncate_mode')
    
    # Obtaining an instance of the builtin type 'tuple' (line 2652)
    tuple_4327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2652, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2652)
    # Adding element type (line 2652)
    str_4328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2652, 27), 'str', 'mlab')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2652, 27), tuple_4327, str_4328)
    
    # Applying the binary operator 'in' (line 2652)
    result_contains_4329 = python_operator(stypy.reporting.localization.Localization(__file__, 2652, 9), 'in', truncate_mode_4326, tuple_4327)
    
    # Testing the type of an if condition (line 2652)
    if_condition_4330 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2652, 9), result_contains_4329)
    # Assigning a type to the variable 'if_condition_4330' (line 2652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2652, 9), 'if_condition_4330', if_condition_4330)
    # SSA begins for if statement (line 2652)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 2653):
    
    # Assigning a Str to a Name (line 2653):
    str_4331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2653, 14), 'str', "Mode 'mlab' is deprecated in scipy 0.19.0 (it never worked).")
    # Assigning a type to the variable 'msg' (line 2653)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2653, 8), 'msg', str_4331)
    
    # Call to warn(...): (line 2654)
    # Processing the call arguments (line 2654)
    # Getting the type of 'msg' (line 2654)
    msg_4334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 22), 'msg', False)
    # Getting the type of 'DeprecationWarning' (line 2654)
    DeprecationWarning_4335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 27), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 2654)
    kwargs_4336 = {}
    # Getting the type of 'warnings' (line 2654)
    warnings_4332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2654, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2654)
    warn_4333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2654, 8), warnings_4332, 'warn')
    # Calling warn(args, kwargs) (line 2654)
    warn_call_result_4337 = invoke(stypy.reporting.localization.Localization(__file__, 2654, 8), warn_4333, *[msg_4334, DeprecationWarning_4335], **kwargs_4336)
    
    # SSA join for if statement (line 2652)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2639)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2623)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'i' (line 2659)
    i_4338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2659, 7), 'i')
    # Getting the type of 'n' (line 2659)
    n_4339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2659, 11), 'n')
    # Applying the binary operator '<' (line 2659)
    result_lt_4340 = python_operator(stypy.reporting.localization.Localization(__file__, 2659, 7), '<', i_4338, n_4339)
    
    # Testing the type of an if condition (line 2659)
    if_condition_4341 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2659, 4), result_lt_4340)
    # Assigning a type to the variable 'if_condition_4341' (line 2659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2659, 4), 'if_condition_4341', if_condition_4341)
    # SSA begins for if statement (line 2659)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to _append_singleton_leaf_node(...): (line 2660)
    # Processing the call arguments (line 2660)
    # Getting the type of 'Z' (line 2660)
    Z_4343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 36), 'Z', False)
    # Getting the type of 'p' (line 2660)
    p_4344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 39), 'p', False)
    # Getting the type of 'n' (line 2660)
    n_4345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 42), 'n', False)
    # Getting the type of 'level' (line 2660)
    level_4346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 45), 'level', False)
    # Getting the type of 'lvs' (line 2660)
    lvs_4347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 52), 'lvs', False)
    # Getting the type of 'ivl' (line 2660)
    ivl_4348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 57), 'ivl', False)
    # Getting the type of 'leaf_label_func' (line 2661)
    leaf_label_func_4349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 36), 'leaf_label_func', False)
    # Getting the type of 'i' (line 2661)
    i_4350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 53), 'i', False)
    # Getting the type of 'labels' (line 2661)
    labels_4351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 56), 'labels', False)
    # Processing the call keyword arguments (line 2660)
    kwargs_4352 = {}
    # Getting the type of '_append_singleton_leaf_node' (line 2660)
    _append_singleton_leaf_node_4342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2660, 8), '_append_singleton_leaf_node', False)
    # Calling _append_singleton_leaf_node(args, kwargs) (line 2660)
    _append_singleton_leaf_node_call_result_4353 = invoke(stypy.reporting.localization.Localization(__file__, 2660, 8), _append_singleton_leaf_node_4342, *[Z_4343, p_4344, n_4345, level_4346, lvs_4347, ivl_4348, leaf_label_func_4349, i_4350, labels_4351], **kwargs_4352)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2662)
    tuple_4354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2662, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2662)
    # Adding element type (line 2662)
    # Getting the type of 'iv' (line 2662)
    iv_4355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 16), 'iv')
    float_4356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2662, 21), 'float')
    # Applying the binary operator '+' (line 2662)
    result_add_4357 = python_operator(stypy.reporting.localization.Localization(__file__, 2662, 16), '+', iv_4355, float_4356)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2662, 16), tuple_4354, result_add_4357)
    # Adding element type (line 2662)
    float_4358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2662, 26), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2662, 16), tuple_4354, float_4358)
    # Adding element type (line 2662)
    float_4359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2662, 32), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2662, 16), tuple_4354, float_4359)
    # Adding element type (line 2662)
    float_4360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2662, 37), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2662, 16), tuple_4354, float_4360)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2662, 8), 'stypy_return_type', tuple_4354)
    # SSA join for if statement (line 2659)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2667):
    
    # Assigning a Call to a Name (line 2667):
    
    # Call to int(...): (line 2667)
    # Processing the call arguments (line 2667)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2667)
    tuple_4362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2667, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2667)
    # Adding element type (line 2667)
    # Getting the type of 'i' (line 2667)
    i_4363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 15), 'i', False)
    # Getting the type of 'n' (line 2667)
    n_4364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 19), 'n', False)
    # Applying the binary operator '-' (line 2667)
    result_sub_4365 = python_operator(stypy.reporting.localization.Localization(__file__, 2667, 15), '-', i_4363, n_4364)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2667, 15), tuple_4362, result_sub_4365)
    # Adding element type (line 2667)
    int_4366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2667, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2667, 15), tuple_4362, int_4366)
    
    # Getting the type of 'Z' (line 2667)
    Z_4367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 13), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 2667)
    getitem___4368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2667, 13), Z_4367, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2667)
    subscript_call_result_4369 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 13), getitem___4368, tuple_4362)
    
    # Processing the call keyword arguments (line 2667)
    kwargs_4370 = {}
    # Getting the type of 'int' (line 2667)
    int_4361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 9), 'int', False)
    # Calling int(args, kwargs) (line 2667)
    int_call_result_4371 = invoke(stypy.reporting.localization.Localization(__file__, 2667, 9), int_4361, *[subscript_call_result_4369], **kwargs_4370)
    
    # Assigning a type to the variable 'aa' (line 2667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2667, 4), 'aa', int_call_result_4371)
    
    # Assigning a Call to a Name (line 2668):
    
    # Assigning a Call to a Name (line 2668):
    
    # Call to int(...): (line 2668)
    # Processing the call arguments (line 2668)
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2668)
    tuple_4373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2668, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2668)
    # Adding element type (line 2668)
    # Getting the type of 'i' (line 2668)
    i_4374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2668, 15), 'i', False)
    # Getting the type of 'n' (line 2668)
    n_4375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2668, 19), 'n', False)
    # Applying the binary operator '-' (line 2668)
    result_sub_4376 = python_operator(stypy.reporting.localization.Localization(__file__, 2668, 15), '-', i_4374, n_4375)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2668, 15), tuple_4373, result_sub_4376)
    # Adding element type (line 2668)
    int_4377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2668, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2668, 15), tuple_4373, int_4377)
    
    # Getting the type of 'Z' (line 2668)
    Z_4378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2668, 13), 'Z', False)
    # Obtaining the member '__getitem__' of a type (line 2668)
    getitem___4379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2668, 13), Z_4378, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2668)
    subscript_call_result_4380 = invoke(stypy.reporting.localization.Localization(__file__, 2668, 13), getitem___4379, tuple_4373)
    
    # Processing the call keyword arguments (line 2668)
    kwargs_4381 = {}
    # Getting the type of 'int' (line 2668)
    int_4372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2668, 9), 'int', False)
    # Calling int(args, kwargs) (line 2668)
    int_call_result_4382 = invoke(stypy.reporting.localization.Localization(__file__, 2668, 9), int_4372, *[subscript_call_result_4380], **kwargs_4381)
    
    # Assigning a type to the variable 'ab' (line 2668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2668, 4), 'ab', int_call_result_4382)
    
    
    # Getting the type of 'aa' (line 2669)
    aa_4383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 7), 'aa')
    # Getting the type of 'n' (line 2669)
    n_4384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 12), 'n')
    # Applying the binary operator '>' (line 2669)
    result_gt_4385 = python_operator(stypy.reporting.localization.Localization(__file__, 2669, 7), '>', aa_4383, n_4384)
    
    # Testing the type of an if condition (line 2669)
    if_condition_4386 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2669, 4), result_gt_4385)
    # Assigning a type to the variable 'if_condition_4386' (line 2669)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2669, 4), 'if_condition_4386', if_condition_4386)
    # SSA begins for if statement (line 2669)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2671):
    
    # Assigning a Subscript to a Name (line 2671):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2671)
    tuple_4387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2671, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2671)
    # Adding element type (line 2671)
    # Getting the type of 'aa' (line 2671)
    aa_4388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 15), 'aa')
    # Getting the type of 'n' (line 2671)
    n_4389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 20), 'n')
    # Applying the binary operator '-' (line 2671)
    result_sub_4390 = python_operator(stypy.reporting.localization.Localization(__file__, 2671, 15), '-', aa_4388, n_4389)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2671, 15), tuple_4387, result_sub_4390)
    # Adding element type (line 2671)
    int_4391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2671, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2671, 15), tuple_4387, int_4391)
    
    # Getting the type of 'Z' (line 2671)
    Z_4392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 13), 'Z')
    # Obtaining the member '__getitem__' of a type (line 2671)
    getitem___4393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2671, 13), Z_4392, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2671)
    subscript_call_result_4394 = invoke(stypy.reporting.localization.Localization(__file__, 2671, 13), getitem___4393, tuple_4387)
    
    # Assigning a type to the variable 'na' (line 2671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2671, 8), 'na', subscript_call_result_4394)
    
    # Assigning a Subscript to a Name (line 2673):
    
    # Assigning a Subscript to a Name (line 2673):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2673)
    tuple_4395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2673, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2673)
    # Adding element type (line 2673)
    # Getting the type of 'aa' (line 2673)
    aa_4396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 15), 'aa')
    # Getting the type of 'n' (line 2673)
    n_4397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 20), 'n')
    # Applying the binary operator '-' (line 2673)
    result_sub_4398 = python_operator(stypy.reporting.localization.Localization(__file__, 2673, 15), '-', aa_4396, n_4397)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2673, 15), tuple_4395, result_sub_4398)
    # Adding element type (line 2673)
    int_4399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2673, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2673, 15), tuple_4395, int_4399)
    
    # Getting the type of 'Z' (line 2673)
    Z_4400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 13), 'Z')
    # Obtaining the member '__getitem__' of a type (line 2673)
    getitem___4401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2673, 13), Z_4400, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2673)
    subscript_call_result_4402 = invoke(stypy.reporting.localization.Localization(__file__, 2673, 13), getitem___4401, tuple_4395)
    
    # Assigning a type to the variable 'da' (line 2673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2673, 8), 'da', subscript_call_result_4402)
    # SSA branch for the else part of an if statement (line 2669)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 2675):
    
    # Assigning a Num to a Name (line 2675):
    int_4403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2675, 13), 'int')
    # Assigning a type to the variable 'na' (line 2675)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2675, 8), 'na', int_4403)
    
    # Assigning a Num to a Name (line 2676):
    
    # Assigning a Num to a Name (line 2676):
    float_4404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2676, 13), 'float')
    # Assigning a type to the variable 'da' (line 2676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2676, 8), 'da', float_4404)
    # SSA join for if statement (line 2669)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'ab' (line 2677)
    ab_4405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 7), 'ab')
    # Getting the type of 'n' (line 2677)
    n_4406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 12), 'n')
    # Applying the binary operator '>' (line 2677)
    result_gt_4407 = python_operator(stypy.reporting.localization.Localization(__file__, 2677, 7), '>', ab_4405, n_4406)
    
    # Testing the type of an if condition (line 2677)
    if_condition_4408 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2677, 4), result_gt_4407)
    # Assigning a type to the variable 'if_condition_4408' (line 2677)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2677, 4), 'if_condition_4408', if_condition_4408)
    # SSA begins for if statement (line 2677)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2678):
    
    # Assigning a Subscript to a Name (line 2678):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2678)
    tuple_4409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2678, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2678)
    # Adding element type (line 2678)
    # Getting the type of 'ab' (line 2678)
    ab_4410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 15), 'ab')
    # Getting the type of 'n' (line 2678)
    n_4411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 20), 'n')
    # Applying the binary operator '-' (line 2678)
    result_sub_4412 = python_operator(stypy.reporting.localization.Localization(__file__, 2678, 15), '-', ab_4410, n_4411)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2678, 15), tuple_4409, result_sub_4412)
    # Adding element type (line 2678)
    int_4413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2678, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2678, 15), tuple_4409, int_4413)
    
    # Getting the type of 'Z' (line 2678)
    Z_4414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 13), 'Z')
    # Obtaining the member '__getitem__' of a type (line 2678)
    getitem___4415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2678, 13), Z_4414, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2678)
    subscript_call_result_4416 = invoke(stypy.reporting.localization.Localization(__file__, 2678, 13), getitem___4415, tuple_4409)
    
    # Assigning a type to the variable 'nb' (line 2678)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2678, 8), 'nb', subscript_call_result_4416)
    
    # Assigning a Subscript to a Name (line 2679):
    
    # Assigning a Subscript to a Name (line 2679):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2679)
    tuple_4417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2679, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2679)
    # Adding element type (line 2679)
    # Getting the type of 'ab' (line 2679)
    ab_4418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2679, 15), 'ab')
    # Getting the type of 'n' (line 2679)
    n_4419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2679, 20), 'n')
    # Applying the binary operator '-' (line 2679)
    result_sub_4420 = python_operator(stypy.reporting.localization.Localization(__file__, 2679, 15), '-', ab_4418, n_4419)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2679, 15), tuple_4417, result_sub_4420)
    # Adding element type (line 2679)
    int_4421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2679, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2679, 15), tuple_4417, int_4421)
    
    # Getting the type of 'Z' (line 2679)
    Z_4422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2679, 13), 'Z')
    # Obtaining the member '__getitem__' of a type (line 2679)
    getitem___4423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2679, 13), Z_4422, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2679)
    subscript_call_result_4424 = invoke(stypy.reporting.localization.Localization(__file__, 2679, 13), getitem___4423, tuple_4417)
    
    # Assigning a type to the variable 'db' (line 2679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2679, 8), 'db', subscript_call_result_4424)
    # SSA branch for the else part of an if statement (line 2677)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 2681):
    
    # Assigning a Num to a Name (line 2681):
    int_4425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2681, 13), 'int')
    # Assigning a type to the variable 'nb' (line 2681)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2681, 8), 'nb', int_4425)
    
    # Assigning a Num to a Name (line 2682):
    
    # Assigning a Num to a Name (line 2682):
    float_4426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2682, 13), 'float')
    # Assigning a type to the variable 'db' (line 2682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2682, 8), 'db', float_4426)
    # SSA join for if statement (line 2677)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'count_sort' (line 2684)
    count_sort_4427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 7), 'count_sort')
    str_4428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2684, 21), 'str', 'ascending')
    # Applying the binary operator '==' (line 2684)
    result_eq_4429 = python_operator(stypy.reporting.localization.Localization(__file__, 2684, 7), '==', count_sort_4427, str_4428)
    
    # Getting the type of 'count_sort' (line 2684)
    count_sort_4430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 36), 'count_sort')
    # Applying the binary operator 'or' (line 2684)
    result_or_keyword_4431 = python_operator(stypy.reporting.localization.Localization(__file__, 2684, 7), 'or', result_eq_4429, count_sort_4430)
    
    # Testing the type of an if condition (line 2684)
    if_condition_4432 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2684, 4), result_or_keyword_4431)
    # Assigning a type to the variable 'if_condition_4432' (line 2684)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2684, 4), 'if_condition_4432', if_condition_4432)
    # SSA begins for if statement (line 2684)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'na' (line 2687)
    na_4433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2687, 11), 'na')
    # Getting the type of 'nb' (line 2687)
    nb_4434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2687, 16), 'nb')
    # Applying the binary operator '>' (line 2687)
    result_gt_4435 = python_operator(stypy.reporting.localization.Localization(__file__, 2687, 11), '>', na_4433, nb_4434)
    
    # Testing the type of an if condition (line 2687)
    if_condition_4436 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2687, 8), result_gt_4435)
    # Assigning a type to the variable 'if_condition_4436' (line 2687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2687, 8), 'if_condition_4436', if_condition_4436)
    # SSA begins for if statement (line 2687)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2690):
    
    # Assigning a Name to a Name (line 2690):
    # Getting the type of 'ab' (line 2690)
    ab_4437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2690, 17), 'ab')
    # Assigning a type to the variable 'ua' (line 2690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2690, 12), 'ua', ab_4437)
    
    # Assigning a Name to a Name (line 2691):
    
    # Assigning a Name to a Name (line 2691):
    # Getting the type of 'aa' (line 2691)
    aa_4438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2691, 17), 'aa')
    # Assigning a type to the variable 'ub' (line 2691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2691, 12), 'ub', aa_4438)
    # SSA branch for the else part of an if statement (line 2687)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2693):
    
    # Assigning a Name to a Name (line 2693):
    # Getting the type of 'aa' (line 2693)
    aa_4439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 17), 'aa')
    # Assigning a type to the variable 'ua' (line 2693)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2693, 12), 'ua', aa_4439)
    
    # Assigning a Name to a Name (line 2694):
    
    # Assigning a Name to a Name (line 2694):
    # Getting the type of 'ab' (line 2694)
    ab_4440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 17), 'ab')
    # Assigning a type to the variable 'ub' (line 2694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2694, 12), 'ub', ab_4440)
    # SSA join for if statement (line 2687)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2684)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'count_sort' (line 2695)
    count_sort_4441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2695, 9), 'count_sort')
    str_4442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2695, 23), 'str', 'descending')
    # Applying the binary operator '==' (line 2695)
    result_eq_4443 = python_operator(stypy.reporting.localization.Localization(__file__, 2695, 9), '==', count_sort_4441, str_4442)
    
    # Testing the type of an if condition (line 2695)
    if_condition_4444 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2695, 9), result_eq_4443)
    # Assigning a type to the variable 'if_condition_4444' (line 2695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2695, 9), 'if_condition_4444', if_condition_4444)
    # SSA begins for if statement (line 2695)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'na' (line 2699)
    na_4445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2699, 11), 'na')
    # Getting the type of 'nb' (line 2699)
    nb_4446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2699, 16), 'nb')
    # Applying the binary operator '>' (line 2699)
    result_gt_4447 = python_operator(stypy.reporting.localization.Localization(__file__, 2699, 11), '>', na_4445, nb_4446)
    
    # Testing the type of an if condition (line 2699)
    if_condition_4448 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2699, 8), result_gt_4447)
    # Assigning a type to the variable 'if_condition_4448' (line 2699)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2699, 8), 'if_condition_4448', if_condition_4448)
    # SSA begins for if statement (line 2699)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2700):
    
    # Assigning a Name to a Name (line 2700):
    # Getting the type of 'aa' (line 2700)
    aa_4449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 17), 'aa')
    # Assigning a type to the variable 'ua' (line 2700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2700, 12), 'ua', aa_4449)
    
    # Assigning a Name to a Name (line 2701):
    
    # Assigning a Name to a Name (line 2701):
    # Getting the type of 'ab' (line 2701)
    ab_4450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 17), 'ab')
    # Assigning a type to the variable 'ub' (line 2701)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2701, 12), 'ub', ab_4450)
    # SSA branch for the else part of an if statement (line 2699)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2703):
    
    # Assigning a Name to a Name (line 2703):
    # Getting the type of 'ab' (line 2703)
    ab_4451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2703, 17), 'ab')
    # Assigning a type to the variable 'ua' (line 2703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2703, 12), 'ua', ab_4451)
    
    # Assigning a Name to a Name (line 2704):
    
    # Assigning a Name to a Name (line 2704):
    # Getting the type of 'aa' (line 2704)
    aa_4452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 17), 'aa')
    # Assigning a type to the variable 'ub' (line 2704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2704, 12), 'ub', aa_4452)
    # SSA join for if statement (line 2699)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2695)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'distance_sort' (line 2705)
    distance_sort_4453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 9), 'distance_sort')
    str_4454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2705, 26), 'str', 'ascending')
    # Applying the binary operator '==' (line 2705)
    result_eq_4455 = python_operator(stypy.reporting.localization.Localization(__file__, 2705, 9), '==', distance_sort_4453, str_4454)
    
    # Getting the type of 'distance_sort' (line 2705)
    distance_sort_4456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 41), 'distance_sort')
    # Applying the binary operator 'or' (line 2705)
    result_or_keyword_4457 = python_operator(stypy.reporting.localization.Localization(__file__, 2705, 9), 'or', result_eq_4455, distance_sort_4456)
    
    # Testing the type of an if condition (line 2705)
    if_condition_4458 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2705, 9), result_or_keyword_4457)
    # Assigning a type to the variable 'if_condition_4458' (line 2705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2705, 9), 'if_condition_4458', if_condition_4458)
    # SSA begins for if statement (line 2705)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'da' (line 2708)
    da_4459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 11), 'da')
    # Getting the type of 'db' (line 2708)
    db_4460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 16), 'db')
    # Applying the binary operator '>' (line 2708)
    result_gt_4461 = python_operator(stypy.reporting.localization.Localization(__file__, 2708, 11), '>', da_4459, db_4460)
    
    # Testing the type of an if condition (line 2708)
    if_condition_4462 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2708, 8), result_gt_4461)
    # Assigning a type to the variable 'if_condition_4462' (line 2708)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2708, 8), 'if_condition_4462', if_condition_4462)
    # SSA begins for if statement (line 2708)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2709):
    
    # Assigning a Name to a Name (line 2709):
    # Getting the type of 'ab' (line 2709)
    ab_4463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2709, 17), 'ab')
    # Assigning a type to the variable 'ua' (line 2709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2709, 12), 'ua', ab_4463)
    
    # Assigning a Name to a Name (line 2710):
    
    # Assigning a Name to a Name (line 2710):
    # Getting the type of 'aa' (line 2710)
    aa_4464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 17), 'aa')
    # Assigning a type to the variable 'ub' (line 2710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2710, 12), 'ub', aa_4464)
    # SSA branch for the else part of an if statement (line 2708)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2712):
    
    # Assigning a Name to a Name (line 2712):
    # Getting the type of 'aa' (line 2712)
    aa_4465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2712, 17), 'aa')
    # Assigning a type to the variable 'ua' (line 2712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2712, 12), 'ua', aa_4465)
    
    # Assigning a Name to a Name (line 2713):
    
    # Assigning a Name to a Name (line 2713):
    # Getting the type of 'ab' (line 2713)
    ab_4466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2713, 17), 'ab')
    # Assigning a type to the variable 'ub' (line 2713)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2713, 12), 'ub', ab_4466)
    # SSA join for if statement (line 2708)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2705)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'distance_sort' (line 2714)
    distance_sort_4467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2714, 9), 'distance_sort')
    str_4468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2714, 26), 'str', 'descending')
    # Applying the binary operator '==' (line 2714)
    result_eq_4469 = python_operator(stypy.reporting.localization.Localization(__file__, 2714, 9), '==', distance_sort_4467, str_4468)
    
    # Testing the type of an if condition (line 2714)
    if_condition_4470 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2714, 9), result_eq_4469)
    # Assigning a type to the variable 'if_condition_4470' (line 2714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2714, 9), 'if_condition_4470', if_condition_4470)
    # SSA begins for if statement (line 2714)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'da' (line 2718)
    da_4471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 11), 'da')
    # Getting the type of 'db' (line 2718)
    db_4472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 16), 'db')
    # Applying the binary operator '>' (line 2718)
    result_gt_4473 = python_operator(stypy.reporting.localization.Localization(__file__, 2718, 11), '>', da_4471, db_4472)
    
    # Testing the type of an if condition (line 2718)
    if_condition_4474 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2718, 8), result_gt_4473)
    # Assigning a type to the variable 'if_condition_4474' (line 2718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2718, 8), 'if_condition_4474', if_condition_4474)
    # SSA begins for if statement (line 2718)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2719):
    
    # Assigning a Name to a Name (line 2719):
    # Getting the type of 'aa' (line 2719)
    aa_4475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 17), 'aa')
    # Assigning a type to the variable 'ua' (line 2719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2719, 12), 'ua', aa_4475)
    
    # Assigning a Name to a Name (line 2720):
    
    # Assigning a Name to a Name (line 2720):
    # Getting the type of 'ab' (line 2720)
    ab_4476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 17), 'ab')
    # Assigning a type to the variable 'ub' (line 2720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2720, 12), 'ub', ab_4476)
    # SSA branch for the else part of an if statement (line 2718)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2722):
    
    # Assigning a Name to a Name (line 2722):
    # Getting the type of 'ab' (line 2722)
    ab_4477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2722, 17), 'ab')
    # Assigning a type to the variable 'ua' (line 2722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2722, 12), 'ua', ab_4477)
    
    # Assigning a Name to a Name (line 2723):
    
    # Assigning a Name to a Name (line 2723):
    # Getting the type of 'aa' (line 2723)
    aa_4478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 17), 'aa')
    # Assigning a type to the variable 'ub' (line 2723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2723, 12), 'ub', aa_4478)
    # SSA join for if statement (line 2718)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2714)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 2725):
    
    # Assigning a Name to a Name (line 2725):
    # Getting the type of 'aa' (line 2725)
    aa_4479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2725, 13), 'aa')
    # Assigning a type to the variable 'ua' (line 2725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2725, 8), 'ua', aa_4479)
    
    # Assigning a Name to a Name (line 2726):
    
    # Assigning a Name to a Name (line 2726):
    # Getting the type of 'ab' (line 2726)
    ab_4480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 13), 'ab')
    # Assigning a type to the variable 'ub' (line 2726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2726, 8), 'ub', ab_4480)
    # SSA join for if statement (line 2714)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2705)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2695)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2684)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 2729):
    
    # Assigning a Subscript to a Name (line 2729):
    
    # Obtaining the type of the subscript
    int_4481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2729, 4), 'int')
    
    # Call to _dendrogram_calculate_info(...): (line 2730)
    # Processing the call keyword arguments (line 2730)
    # Getting the type of 'Z' (line 2731)
    Z_4483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 14), 'Z', False)
    keyword_4484 = Z_4483
    # Getting the type of 'p' (line 2731)
    p_4485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 19), 'p', False)
    keyword_4486 = p_4485
    # Getting the type of 'truncate_mode' (line 2732)
    truncate_mode_4487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2732, 26), 'truncate_mode', False)
    keyword_4488 = truncate_mode_4487
    # Getting the type of 'color_threshold' (line 2733)
    color_threshold_4489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 28), 'color_threshold', False)
    keyword_4490 = color_threshold_4489
    # Getting the type of 'get_leaves' (line 2734)
    get_leaves_4491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 23), 'get_leaves', False)
    keyword_4492 = get_leaves_4491
    # Getting the type of 'orientation' (line 2735)
    orientation_4493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 24), 'orientation', False)
    keyword_4494 = orientation_4493
    # Getting the type of 'labels' (line 2736)
    labels_4495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 19), 'labels', False)
    keyword_4496 = labels_4495
    # Getting the type of 'count_sort' (line 2737)
    count_sort_4497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 23), 'count_sort', False)
    keyword_4498 = count_sort_4497
    # Getting the type of 'distance_sort' (line 2738)
    distance_sort_4499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 26), 'distance_sort', False)
    keyword_4500 = distance_sort_4499
    # Getting the type of 'show_leaf_counts' (line 2739)
    show_leaf_counts_4501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 29), 'show_leaf_counts', False)
    keyword_4502 = show_leaf_counts_4501
    # Getting the type of 'ua' (line 2740)
    ua_4503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 14), 'ua', False)
    keyword_4504 = ua_4503
    # Getting the type of 'iv' (line 2740)
    iv_4505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 21), 'iv', False)
    keyword_4506 = iv_4505
    # Getting the type of 'ivl' (line 2740)
    ivl_4507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 29), 'ivl', False)
    keyword_4508 = ivl_4507
    # Getting the type of 'n' (line 2740)
    n_4509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 36), 'n', False)
    keyword_4510 = n_4509
    # Getting the type of 'icoord_list' (line 2741)
    icoord_list_4511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 24), 'icoord_list', False)
    keyword_4512 = icoord_list_4511
    # Getting the type of 'dcoord_list' (line 2742)
    dcoord_list_4513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 24), 'dcoord_list', False)
    keyword_4514 = dcoord_list_4513
    # Getting the type of 'lvs' (line 2742)
    lvs_4515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 41), 'lvs', False)
    keyword_4516 = lvs_4515
    # Getting the type of 'current_color' (line 2743)
    current_color_4517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2743, 26), 'current_color', False)
    keyword_4518 = current_color_4517
    # Getting the type of 'color_list' (line 2744)
    color_list_4519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 23), 'color_list', False)
    keyword_4520 = color_list_4519
    # Getting the type of 'currently_below_threshold' (line 2745)
    currently_below_threshold_4521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 38), 'currently_below_threshold', False)
    keyword_4522 = currently_below_threshold_4521
    # Getting the type of 'leaf_label_func' (line 2746)
    leaf_label_func_4523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 28), 'leaf_label_func', False)
    keyword_4524 = leaf_label_func_4523
    # Getting the type of 'level' (line 2747)
    level_4525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 18), 'level', False)
    int_4526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2747, 26), 'int')
    # Applying the binary operator '+' (line 2747)
    result_add_4527 = python_operator(stypy.reporting.localization.Localization(__file__, 2747, 18), '+', level_4525, int_4526)
    
    keyword_4528 = result_add_4527
    # Getting the type of 'contraction_marks' (line 2747)
    contraction_marks_4529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 47), 'contraction_marks', False)
    keyword_4530 = contraction_marks_4529
    # Getting the type of 'link_color_func' (line 2748)
    link_color_func_4531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 28), 'link_color_func', False)
    keyword_4532 = link_color_func_4531
    # Getting the type of 'above_threshold_color' (line 2749)
    above_threshold_color_4533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 34), 'above_threshold_color', False)
    keyword_4534 = above_threshold_color_4533
    kwargs_4535 = {'orientation': keyword_4494, 'ivl': keyword_4508, 'labels': keyword_4496, 'iv': keyword_4506, 'distance_sort': keyword_4500, 'truncate_mode': keyword_4488, 'above_threshold_color': keyword_4534, 'color_threshold': keyword_4490, 'dcoord_list': keyword_4514, 'get_leaves': keyword_4492, 'link_color_func': keyword_4532, 'Z': keyword_4484, 'count_sort': keyword_4498, 'lvs': keyword_4516, 'current_color': keyword_4518, 'leaf_label_func': keyword_4524, 'i': keyword_4504, 'show_leaf_counts': keyword_4502, 'color_list': keyword_4520, 'level': keyword_4528, 'n': keyword_4510, 'p': keyword_4486, 'icoord_list': keyword_4512, 'currently_below_threshold': keyword_4522, 'contraction_marks': keyword_4530}
    # Getting the type of '_dendrogram_calculate_info' (line 2730)
    _dendrogram_calculate_info_4482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2730, 8), '_dendrogram_calculate_info', False)
    # Calling _dendrogram_calculate_info(args, kwargs) (line 2730)
    _dendrogram_calculate_info_call_result_4536 = invoke(stypy.reporting.localization.Localization(__file__, 2730, 8), _dendrogram_calculate_info_4482, *[], **kwargs_4535)
    
    # Obtaining the member '__getitem__' of a type (line 2729)
    getitem___4537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2729, 4), _dendrogram_calculate_info_call_result_4536, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2729)
    subscript_call_result_4538 = invoke(stypy.reporting.localization.Localization(__file__, 2729, 4), getitem___4537, int_4481)
    
    # Assigning a type to the variable 'tuple_var_assignment_476' (line 2729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2729, 4), 'tuple_var_assignment_476', subscript_call_result_4538)
    
    # Assigning a Subscript to a Name (line 2729):
    
    # Obtaining the type of the subscript
    int_4539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2729, 4), 'int')
    
    # Call to _dendrogram_calculate_info(...): (line 2730)
    # Processing the call keyword arguments (line 2730)
    # Getting the type of 'Z' (line 2731)
    Z_4541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 14), 'Z', False)
    keyword_4542 = Z_4541
    # Getting the type of 'p' (line 2731)
    p_4543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 19), 'p', False)
    keyword_4544 = p_4543
    # Getting the type of 'truncate_mode' (line 2732)
    truncate_mode_4545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2732, 26), 'truncate_mode', False)
    keyword_4546 = truncate_mode_4545
    # Getting the type of 'color_threshold' (line 2733)
    color_threshold_4547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 28), 'color_threshold', False)
    keyword_4548 = color_threshold_4547
    # Getting the type of 'get_leaves' (line 2734)
    get_leaves_4549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 23), 'get_leaves', False)
    keyword_4550 = get_leaves_4549
    # Getting the type of 'orientation' (line 2735)
    orientation_4551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 24), 'orientation', False)
    keyword_4552 = orientation_4551
    # Getting the type of 'labels' (line 2736)
    labels_4553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 19), 'labels', False)
    keyword_4554 = labels_4553
    # Getting the type of 'count_sort' (line 2737)
    count_sort_4555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 23), 'count_sort', False)
    keyword_4556 = count_sort_4555
    # Getting the type of 'distance_sort' (line 2738)
    distance_sort_4557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 26), 'distance_sort', False)
    keyword_4558 = distance_sort_4557
    # Getting the type of 'show_leaf_counts' (line 2739)
    show_leaf_counts_4559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 29), 'show_leaf_counts', False)
    keyword_4560 = show_leaf_counts_4559
    # Getting the type of 'ua' (line 2740)
    ua_4561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 14), 'ua', False)
    keyword_4562 = ua_4561
    # Getting the type of 'iv' (line 2740)
    iv_4563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 21), 'iv', False)
    keyword_4564 = iv_4563
    # Getting the type of 'ivl' (line 2740)
    ivl_4565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 29), 'ivl', False)
    keyword_4566 = ivl_4565
    # Getting the type of 'n' (line 2740)
    n_4567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 36), 'n', False)
    keyword_4568 = n_4567
    # Getting the type of 'icoord_list' (line 2741)
    icoord_list_4569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 24), 'icoord_list', False)
    keyword_4570 = icoord_list_4569
    # Getting the type of 'dcoord_list' (line 2742)
    dcoord_list_4571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 24), 'dcoord_list', False)
    keyword_4572 = dcoord_list_4571
    # Getting the type of 'lvs' (line 2742)
    lvs_4573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 41), 'lvs', False)
    keyword_4574 = lvs_4573
    # Getting the type of 'current_color' (line 2743)
    current_color_4575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2743, 26), 'current_color', False)
    keyword_4576 = current_color_4575
    # Getting the type of 'color_list' (line 2744)
    color_list_4577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 23), 'color_list', False)
    keyword_4578 = color_list_4577
    # Getting the type of 'currently_below_threshold' (line 2745)
    currently_below_threshold_4579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 38), 'currently_below_threshold', False)
    keyword_4580 = currently_below_threshold_4579
    # Getting the type of 'leaf_label_func' (line 2746)
    leaf_label_func_4581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 28), 'leaf_label_func', False)
    keyword_4582 = leaf_label_func_4581
    # Getting the type of 'level' (line 2747)
    level_4583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 18), 'level', False)
    int_4584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2747, 26), 'int')
    # Applying the binary operator '+' (line 2747)
    result_add_4585 = python_operator(stypy.reporting.localization.Localization(__file__, 2747, 18), '+', level_4583, int_4584)
    
    keyword_4586 = result_add_4585
    # Getting the type of 'contraction_marks' (line 2747)
    contraction_marks_4587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 47), 'contraction_marks', False)
    keyword_4588 = contraction_marks_4587
    # Getting the type of 'link_color_func' (line 2748)
    link_color_func_4589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 28), 'link_color_func', False)
    keyword_4590 = link_color_func_4589
    # Getting the type of 'above_threshold_color' (line 2749)
    above_threshold_color_4591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 34), 'above_threshold_color', False)
    keyword_4592 = above_threshold_color_4591
    kwargs_4593 = {'orientation': keyword_4552, 'ivl': keyword_4566, 'labels': keyword_4554, 'iv': keyword_4564, 'distance_sort': keyword_4558, 'truncate_mode': keyword_4546, 'above_threshold_color': keyword_4592, 'color_threshold': keyword_4548, 'dcoord_list': keyword_4572, 'get_leaves': keyword_4550, 'link_color_func': keyword_4590, 'Z': keyword_4542, 'count_sort': keyword_4556, 'lvs': keyword_4574, 'current_color': keyword_4576, 'leaf_label_func': keyword_4582, 'i': keyword_4562, 'show_leaf_counts': keyword_4560, 'color_list': keyword_4578, 'level': keyword_4586, 'n': keyword_4568, 'p': keyword_4544, 'icoord_list': keyword_4570, 'currently_below_threshold': keyword_4580, 'contraction_marks': keyword_4588}
    # Getting the type of '_dendrogram_calculate_info' (line 2730)
    _dendrogram_calculate_info_4540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2730, 8), '_dendrogram_calculate_info', False)
    # Calling _dendrogram_calculate_info(args, kwargs) (line 2730)
    _dendrogram_calculate_info_call_result_4594 = invoke(stypy.reporting.localization.Localization(__file__, 2730, 8), _dendrogram_calculate_info_4540, *[], **kwargs_4593)
    
    # Obtaining the member '__getitem__' of a type (line 2729)
    getitem___4595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2729, 4), _dendrogram_calculate_info_call_result_4594, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2729)
    subscript_call_result_4596 = invoke(stypy.reporting.localization.Localization(__file__, 2729, 4), getitem___4595, int_4539)
    
    # Assigning a type to the variable 'tuple_var_assignment_477' (line 2729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2729, 4), 'tuple_var_assignment_477', subscript_call_result_4596)
    
    # Assigning a Subscript to a Name (line 2729):
    
    # Obtaining the type of the subscript
    int_4597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2729, 4), 'int')
    
    # Call to _dendrogram_calculate_info(...): (line 2730)
    # Processing the call keyword arguments (line 2730)
    # Getting the type of 'Z' (line 2731)
    Z_4599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 14), 'Z', False)
    keyword_4600 = Z_4599
    # Getting the type of 'p' (line 2731)
    p_4601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 19), 'p', False)
    keyword_4602 = p_4601
    # Getting the type of 'truncate_mode' (line 2732)
    truncate_mode_4603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2732, 26), 'truncate_mode', False)
    keyword_4604 = truncate_mode_4603
    # Getting the type of 'color_threshold' (line 2733)
    color_threshold_4605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 28), 'color_threshold', False)
    keyword_4606 = color_threshold_4605
    # Getting the type of 'get_leaves' (line 2734)
    get_leaves_4607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 23), 'get_leaves', False)
    keyword_4608 = get_leaves_4607
    # Getting the type of 'orientation' (line 2735)
    orientation_4609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 24), 'orientation', False)
    keyword_4610 = orientation_4609
    # Getting the type of 'labels' (line 2736)
    labels_4611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 19), 'labels', False)
    keyword_4612 = labels_4611
    # Getting the type of 'count_sort' (line 2737)
    count_sort_4613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 23), 'count_sort', False)
    keyword_4614 = count_sort_4613
    # Getting the type of 'distance_sort' (line 2738)
    distance_sort_4615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 26), 'distance_sort', False)
    keyword_4616 = distance_sort_4615
    # Getting the type of 'show_leaf_counts' (line 2739)
    show_leaf_counts_4617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 29), 'show_leaf_counts', False)
    keyword_4618 = show_leaf_counts_4617
    # Getting the type of 'ua' (line 2740)
    ua_4619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 14), 'ua', False)
    keyword_4620 = ua_4619
    # Getting the type of 'iv' (line 2740)
    iv_4621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 21), 'iv', False)
    keyword_4622 = iv_4621
    # Getting the type of 'ivl' (line 2740)
    ivl_4623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 29), 'ivl', False)
    keyword_4624 = ivl_4623
    # Getting the type of 'n' (line 2740)
    n_4625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 36), 'n', False)
    keyword_4626 = n_4625
    # Getting the type of 'icoord_list' (line 2741)
    icoord_list_4627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 24), 'icoord_list', False)
    keyword_4628 = icoord_list_4627
    # Getting the type of 'dcoord_list' (line 2742)
    dcoord_list_4629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 24), 'dcoord_list', False)
    keyword_4630 = dcoord_list_4629
    # Getting the type of 'lvs' (line 2742)
    lvs_4631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 41), 'lvs', False)
    keyword_4632 = lvs_4631
    # Getting the type of 'current_color' (line 2743)
    current_color_4633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2743, 26), 'current_color', False)
    keyword_4634 = current_color_4633
    # Getting the type of 'color_list' (line 2744)
    color_list_4635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 23), 'color_list', False)
    keyword_4636 = color_list_4635
    # Getting the type of 'currently_below_threshold' (line 2745)
    currently_below_threshold_4637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 38), 'currently_below_threshold', False)
    keyword_4638 = currently_below_threshold_4637
    # Getting the type of 'leaf_label_func' (line 2746)
    leaf_label_func_4639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 28), 'leaf_label_func', False)
    keyword_4640 = leaf_label_func_4639
    # Getting the type of 'level' (line 2747)
    level_4641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 18), 'level', False)
    int_4642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2747, 26), 'int')
    # Applying the binary operator '+' (line 2747)
    result_add_4643 = python_operator(stypy.reporting.localization.Localization(__file__, 2747, 18), '+', level_4641, int_4642)
    
    keyword_4644 = result_add_4643
    # Getting the type of 'contraction_marks' (line 2747)
    contraction_marks_4645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 47), 'contraction_marks', False)
    keyword_4646 = contraction_marks_4645
    # Getting the type of 'link_color_func' (line 2748)
    link_color_func_4647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 28), 'link_color_func', False)
    keyword_4648 = link_color_func_4647
    # Getting the type of 'above_threshold_color' (line 2749)
    above_threshold_color_4649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 34), 'above_threshold_color', False)
    keyword_4650 = above_threshold_color_4649
    kwargs_4651 = {'orientation': keyword_4610, 'ivl': keyword_4624, 'labels': keyword_4612, 'iv': keyword_4622, 'distance_sort': keyword_4616, 'truncate_mode': keyword_4604, 'above_threshold_color': keyword_4650, 'color_threshold': keyword_4606, 'dcoord_list': keyword_4630, 'get_leaves': keyword_4608, 'link_color_func': keyword_4648, 'Z': keyword_4600, 'count_sort': keyword_4614, 'lvs': keyword_4632, 'current_color': keyword_4634, 'leaf_label_func': keyword_4640, 'i': keyword_4620, 'show_leaf_counts': keyword_4618, 'color_list': keyword_4636, 'level': keyword_4644, 'n': keyword_4626, 'p': keyword_4602, 'icoord_list': keyword_4628, 'currently_below_threshold': keyword_4638, 'contraction_marks': keyword_4646}
    # Getting the type of '_dendrogram_calculate_info' (line 2730)
    _dendrogram_calculate_info_4598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2730, 8), '_dendrogram_calculate_info', False)
    # Calling _dendrogram_calculate_info(args, kwargs) (line 2730)
    _dendrogram_calculate_info_call_result_4652 = invoke(stypy.reporting.localization.Localization(__file__, 2730, 8), _dendrogram_calculate_info_4598, *[], **kwargs_4651)
    
    # Obtaining the member '__getitem__' of a type (line 2729)
    getitem___4653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2729, 4), _dendrogram_calculate_info_call_result_4652, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2729)
    subscript_call_result_4654 = invoke(stypy.reporting.localization.Localization(__file__, 2729, 4), getitem___4653, int_4597)
    
    # Assigning a type to the variable 'tuple_var_assignment_478' (line 2729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2729, 4), 'tuple_var_assignment_478', subscript_call_result_4654)
    
    # Assigning a Subscript to a Name (line 2729):
    
    # Obtaining the type of the subscript
    int_4655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2729, 4), 'int')
    
    # Call to _dendrogram_calculate_info(...): (line 2730)
    # Processing the call keyword arguments (line 2730)
    # Getting the type of 'Z' (line 2731)
    Z_4657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 14), 'Z', False)
    keyword_4658 = Z_4657
    # Getting the type of 'p' (line 2731)
    p_4659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 19), 'p', False)
    keyword_4660 = p_4659
    # Getting the type of 'truncate_mode' (line 2732)
    truncate_mode_4661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2732, 26), 'truncate_mode', False)
    keyword_4662 = truncate_mode_4661
    # Getting the type of 'color_threshold' (line 2733)
    color_threshold_4663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 28), 'color_threshold', False)
    keyword_4664 = color_threshold_4663
    # Getting the type of 'get_leaves' (line 2734)
    get_leaves_4665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 23), 'get_leaves', False)
    keyword_4666 = get_leaves_4665
    # Getting the type of 'orientation' (line 2735)
    orientation_4667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2735, 24), 'orientation', False)
    keyword_4668 = orientation_4667
    # Getting the type of 'labels' (line 2736)
    labels_4669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 19), 'labels', False)
    keyword_4670 = labels_4669
    # Getting the type of 'count_sort' (line 2737)
    count_sort_4671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2737, 23), 'count_sort', False)
    keyword_4672 = count_sort_4671
    # Getting the type of 'distance_sort' (line 2738)
    distance_sort_4673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 26), 'distance_sort', False)
    keyword_4674 = distance_sort_4673
    # Getting the type of 'show_leaf_counts' (line 2739)
    show_leaf_counts_4675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2739, 29), 'show_leaf_counts', False)
    keyword_4676 = show_leaf_counts_4675
    # Getting the type of 'ua' (line 2740)
    ua_4677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 14), 'ua', False)
    keyword_4678 = ua_4677
    # Getting the type of 'iv' (line 2740)
    iv_4679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 21), 'iv', False)
    keyword_4680 = iv_4679
    # Getting the type of 'ivl' (line 2740)
    ivl_4681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 29), 'ivl', False)
    keyword_4682 = ivl_4681
    # Getting the type of 'n' (line 2740)
    n_4683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2740, 36), 'n', False)
    keyword_4684 = n_4683
    # Getting the type of 'icoord_list' (line 2741)
    icoord_list_4685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2741, 24), 'icoord_list', False)
    keyword_4686 = icoord_list_4685
    # Getting the type of 'dcoord_list' (line 2742)
    dcoord_list_4687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 24), 'dcoord_list', False)
    keyword_4688 = dcoord_list_4687
    # Getting the type of 'lvs' (line 2742)
    lvs_4689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 41), 'lvs', False)
    keyword_4690 = lvs_4689
    # Getting the type of 'current_color' (line 2743)
    current_color_4691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2743, 26), 'current_color', False)
    keyword_4692 = current_color_4691
    # Getting the type of 'color_list' (line 2744)
    color_list_4693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 23), 'color_list', False)
    keyword_4694 = color_list_4693
    # Getting the type of 'currently_below_threshold' (line 2745)
    currently_below_threshold_4695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2745, 38), 'currently_below_threshold', False)
    keyword_4696 = currently_below_threshold_4695
    # Getting the type of 'leaf_label_func' (line 2746)
    leaf_label_func_4697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2746, 28), 'leaf_label_func', False)
    keyword_4698 = leaf_label_func_4697
    # Getting the type of 'level' (line 2747)
    level_4699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 18), 'level', False)
    int_4700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2747, 26), 'int')
    # Applying the binary operator '+' (line 2747)
    result_add_4701 = python_operator(stypy.reporting.localization.Localization(__file__, 2747, 18), '+', level_4699, int_4700)
    
    keyword_4702 = result_add_4701
    # Getting the type of 'contraction_marks' (line 2747)
    contraction_marks_4703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 47), 'contraction_marks', False)
    keyword_4704 = contraction_marks_4703
    # Getting the type of 'link_color_func' (line 2748)
    link_color_func_4705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 28), 'link_color_func', False)
    keyword_4706 = link_color_func_4705
    # Getting the type of 'above_threshold_color' (line 2749)
    above_threshold_color_4707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 34), 'above_threshold_color', False)
    keyword_4708 = above_threshold_color_4707
    kwargs_4709 = {'orientation': keyword_4668, 'ivl': keyword_4682, 'labels': keyword_4670, 'iv': keyword_4680, 'distance_sort': keyword_4674, 'truncate_mode': keyword_4662, 'above_threshold_color': keyword_4708, 'color_threshold': keyword_4664, 'dcoord_list': keyword_4688, 'get_leaves': keyword_4666, 'link_color_func': keyword_4706, 'Z': keyword_4658, 'count_sort': keyword_4672, 'lvs': keyword_4690, 'current_color': keyword_4692, 'leaf_label_func': keyword_4698, 'i': keyword_4678, 'show_leaf_counts': keyword_4676, 'color_list': keyword_4694, 'level': keyword_4702, 'n': keyword_4684, 'p': keyword_4660, 'icoord_list': keyword_4686, 'currently_below_threshold': keyword_4696, 'contraction_marks': keyword_4704}
    # Getting the type of '_dendrogram_calculate_info' (line 2730)
    _dendrogram_calculate_info_4656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2730, 8), '_dendrogram_calculate_info', False)
    # Calling _dendrogram_calculate_info(args, kwargs) (line 2730)
    _dendrogram_calculate_info_call_result_4710 = invoke(stypy.reporting.localization.Localization(__file__, 2730, 8), _dendrogram_calculate_info_4656, *[], **kwargs_4709)
    
    # Obtaining the member '__getitem__' of a type (line 2729)
    getitem___4711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2729, 4), _dendrogram_calculate_info_call_result_4710, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2729)
    subscript_call_result_4712 = invoke(stypy.reporting.localization.Localization(__file__, 2729, 4), getitem___4711, int_4655)
    
    # Assigning a type to the variable 'tuple_var_assignment_479' (line 2729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2729, 4), 'tuple_var_assignment_479', subscript_call_result_4712)
    
    # Assigning a Name to a Name (line 2729):
    # Getting the type of 'tuple_var_assignment_476' (line 2729)
    tuple_var_assignment_476_4713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 4), 'tuple_var_assignment_476')
    # Assigning a type to the variable 'uiva' (line 2729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2729, 5), 'uiva', tuple_var_assignment_476_4713)
    
    # Assigning a Name to a Name (line 2729):
    # Getting the type of 'tuple_var_assignment_477' (line 2729)
    tuple_var_assignment_477_4714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 4), 'tuple_var_assignment_477')
    # Assigning a type to the variable 'uwa' (line 2729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2729, 11), 'uwa', tuple_var_assignment_477_4714)
    
    # Assigning a Name to a Name (line 2729):
    # Getting the type of 'tuple_var_assignment_478' (line 2729)
    tuple_var_assignment_478_4715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 4), 'tuple_var_assignment_478')
    # Assigning a type to the variable 'uah' (line 2729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2729, 16), 'uah', tuple_var_assignment_478_4715)
    
    # Assigning a Name to a Name (line 2729):
    # Getting the type of 'tuple_var_assignment_479' (line 2729)
    tuple_var_assignment_479_4716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 4), 'tuple_var_assignment_479')
    # Assigning a type to the variable 'uamd' (line 2729)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2729, 21), 'uamd', tuple_var_assignment_479_4716)
    
    # Assigning a Subscript to a Name (line 2751):
    
    # Assigning a Subscript to a Name (line 2751):
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 2751)
    tuple_4717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2751, 10), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2751)
    # Adding element type (line 2751)
    # Getting the type of 'i' (line 2751)
    i_4718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2751, 10), 'i')
    # Getting the type of 'n' (line 2751)
    n_4719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2751, 14), 'n')
    # Applying the binary operator '-' (line 2751)
    result_sub_4720 = python_operator(stypy.reporting.localization.Localization(__file__, 2751, 10), '-', i_4718, n_4719)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2751, 10), tuple_4717, result_sub_4720)
    # Adding element type (line 2751)
    int_4721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2751, 17), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2751, 10), tuple_4717, int_4721)
    
    # Getting the type of 'Z' (line 2751)
    Z_4722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2751, 8), 'Z')
    # Obtaining the member '__getitem__' of a type (line 2751)
    getitem___4723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2751, 8), Z_4722, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2751)
    subscript_call_result_4724 = invoke(stypy.reporting.localization.Localization(__file__, 2751, 8), getitem___4723, tuple_4717)
    
    # Assigning a type to the variable 'h' (line 2751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2751, 4), 'h', subscript_call_result_4724)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'h' (line 2752)
    h_4725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 7), 'h')
    # Getting the type of 'color_threshold' (line 2752)
    color_threshold_4726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 12), 'color_threshold')
    # Applying the binary operator '>=' (line 2752)
    result_ge_4727 = python_operator(stypy.reporting.localization.Localization(__file__, 2752, 7), '>=', h_4725, color_threshold_4726)
    
    
    # Getting the type of 'color_threshold' (line 2752)
    color_threshold_4728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 31), 'color_threshold')
    int_4729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2752, 50), 'int')
    # Applying the binary operator '<=' (line 2752)
    result_le_4730 = python_operator(stypy.reporting.localization.Localization(__file__, 2752, 31), '<=', color_threshold_4728, int_4729)
    
    # Applying the binary operator 'or' (line 2752)
    result_or_keyword_4731 = python_operator(stypy.reporting.localization.Localization(__file__, 2752, 7), 'or', result_ge_4727, result_le_4730)
    
    # Testing the type of an if condition (line 2752)
    if_condition_4732 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2752, 4), result_or_keyword_4731)
    # Assigning a type to the variable 'if_condition_4732' (line 2752)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2752, 4), 'if_condition_4732', if_condition_4732)
    # SSA begins for if statement (line 2752)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 2753):
    
    # Assigning a Name to a Name (line 2753):
    # Getting the type of 'above_threshold_color' (line 2753)
    above_threshold_color_4733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 12), 'above_threshold_color')
    # Assigning a type to the variable 'c' (line 2753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2753, 8), 'c', above_threshold_color_4733)
    
    
    # Obtaining the type of the subscript
    int_4734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2755, 37), 'int')
    # Getting the type of 'currently_below_threshold' (line 2755)
    currently_below_threshold_4735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 11), 'currently_below_threshold')
    # Obtaining the member '__getitem__' of a type (line 2755)
    getitem___4736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2755, 11), currently_below_threshold_4735, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2755)
    subscript_call_result_4737 = invoke(stypy.reporting.localization.Localization(__file__, 2755, 11), getitem___4736, int_4734)
    
    # Testing the type of an if condition (line 2755)
    if_condition_4738 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2755, 8), subscript_call_result_4737)
    # Assigning a type to the variable 'if_condition_4738' (line 2755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 8), 'if_condition_4738', if_condition_4738)
    # SSA begins for if statement (line 2755)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Subscript (line 2756):
    
    # Assigning a BinOp to a Subscript (line 2756):
    
    # Obtaining the type of the subscript
    int_4739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2756, 46), 'int')
    # Getting the type of 'current_color' (line 2756)
    current_color_4740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2756, 32), 'current_color')
    # Obtaining the member '__getitem__' of a type (line 2756)
    getitem___4741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2756, 32), current_color_4740, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2756)
    subscript_call_result_4742 = invoke(stypy.reporting.localization.Localization(__file__, 2756, 32), getitem___4741, int_4739)
    
    int_4743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2756, 51), 'int')
    # Applying the binary operator '+' (line 2756)
    result_add_4744 = python_operator(stypy.reporting.localization.Localization(__file__, 2756, 32), '+', subscript_call_result_4742, int_4743)
    
    
    # Call to len(...): (line 2756)
    # Processing the call arguments (line 2756)
    # Getting the type of '_link_line_colors' (line 2756)
    _link_line_colors_4746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2756, 60), '_link_line_colors', False)
    # Processing the call keyword arguments (line 2756)
    kwargs_4747 = {}
    # Getting the type of 'len' (line 2756)
    len_4745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2756, 56), 'len', False)
    # Calling len(args, kwargs) (line 2756)
    len_call_result_4748 = invoke(stypy.reporting.localization.Localization(__file__, 2756, 56), len_4745, *[_link_line_colors_4746], **kwargs_4747)
    
    # Applying the binary operator '%' (line 2756)
    result_mod_4749 = python_operator(stypy.reporting.localization.Localization(__file__, 2756, 31), '%', result_add_4744, len_call_result_4748)
    
    # Getting the type of 'current_color' (line 2756)
    current_color_4750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2756, 12), 'current_color')
    int_4751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2756, 26), 'int')
    # Storing an element on a container (line 2756)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2756, 12), current_color_4750, (int_4751, result_mod_4749))
    # SSA join for if statement (line 2755)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 2757):
    
    # Assigning a Name to a Subscript (line 2757):
    # Getting the type of 'False' (line 2757)
    False_4752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2757, 39), 'False')
    # Getting the type of 'currently_below_threshold' (line 2757)
    currently_below_threshold_4753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2757, 8), 'currently_below_threshold')
    int_4754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2757, 34), 'int')
    # Storing an element on a container (line 2757)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2757, 8), currently_below_threshold_4753, (int_4754, False_4752))
    # SSA branch for the else part of an if statement (line 2752)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Subscript (line 2759):
    
    # Assigning a Name to a Subscript (line 2759):
    # Getting the type of 'True' (line 2759)
    True_4755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2759, 39), 'True')
    # Getting the type of 'currently_below_threshold' (line 2759)
    currently_below_threshold_4756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2759, 8), 'currently_below_threshold')
    int_4757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2759, 34), 'int')
    # Storing an element on a container (line 2759)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2759, 8), currently_below_threshold_4756, (int_4757, True_4755))
    
    # Assigning a Subscript to a Name (line 2760):
    
    # Assigning a Subscript to a Name (line 2760):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_4758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2760, 44), 'int')
    # Getting the type of 'current_color' (line 2760)
    current_color_4759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2760, 30), 'current_color')
    # Obtaining the member '__getitem__' of a type (line 2760)
    getitem___4760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2760, 30), current_color_4759, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2760)
    subscript_call_result_4761 = invoke(stypy.reporting.localization.Localization(__file__, 2760, 30), getitem___4760, int_4758)
    
    # Getting the type of '_link_line_colors' (line 2760)
    _link_line_colors_4762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2760, 12), '_link_line_colors')
    # Obtaining the member '__getitem__' of a type (line 2760)
    getitem___4763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2760, 12), _link_line_colors_4762, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2760)
    subscript_call_result_4764 = invoke(stypy.reporting.localization.Localization(__file__, 2760, 12), getitem___4763, subscript_call_result_4761)
    
    # Assigning a type to the variable 'c' (line 2760)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2760, 8), 'c', subscript_call_result_4764)
    # SSA join for if statement (line 2752)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 2762):
    
    # Assigning a Subscript to a Name (line 2762):
    
    # Obtaining the type of the subscript
    int_4765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2762, 4), 'int')
    
    # Call to _dendrogram_calculate_info(...): (line 2763)
    # Processing the call keyword arguments (line 2763)
    # Getting the type of 'Z' (line 2764)
    Z_4767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 14), 'Z', False)
    keyword_4768 = Z_4767
    # Getting the type of 'p' (line 2764)
    p_4769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 19), 'p', False)
    keyword_4770 = p_4769
    # Getting the type of 'truncate_mode' (line 2765)
    truncate_mode_4771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 26), 'truncate_mode', False)
    keyword_4772 = truncate_mode_4771
    # Getting the type of 'color_threshold' (line 2766)
    color_threshold_4773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 28), 'color_threshold', False)
    keyword_4774 = color_threshold_4773
    # Getting the type of 'get_leaves' (line 2767)
    get_leaves_4775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 23), 'get_leaves', False)
    keyword_4776 = get_leaves_4775
    # Getting the type of 'orientation' (line 2768)
    orientation_4777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2768, 24), 'orientation', False)
    keyword_4778 = orientation_4777
    # Getting the type of 'labels' (line 2769)
    labels_4779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 19), 'labels', False)
    keyword_4780 = labels_4779
    # Getting the type of 'count_sort' (line 2770)
    count_sort_4781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 23), 'count_sort', False)
    keyword_4782 = count_sort_4781
    # Getting the type of 'distance_sort' (line 2771)
    distance_sort_4783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 26), 'distance_sort', False)
    keyword_4784 = distance_sort_4783
    # Getting the type of 'show_leaf_counts' (line 2772)
    show_leaf_counts_4785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 29), 'show_leaf_counts', False)
    keyword_4786 = show_leaf_counts_4785
    # Getting the type of 'ub' (line 2773)
    ub_4787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 14), 'ub', False)
    keyword_4788 = ub_4787
    # Getting the type of 'iv' (line 2773)
    iv_4789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 21), 'iv', False)
    # Getting the type of 'uwa' (line 2773)
    uwa_4790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 26), 'uwa', False)
    # Applying the binary operator '+' (line 2773)
    result_add_4791 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 21), '+', iv_4789, uwa_4790)
    
    keyword_4792 = result_add_4791
    # Getting the type of 'ivl' (line 2773)
    ivl_4793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 35), 'ivl', False)
    keyword_4794 = ivl_4793
    # Getting the type of 'n' (line 2773)
    n_4795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 42), 'n', False)
    keyword_4796 = n_4795
    # Getting the type of 'icoord_list' (line 2774)
    icoord_list_4797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2774, 24), 'icoord_list', False)
    keyword_4798 = icoord_list_4797
    # Getting the type of 'dcoord_list' (line 2775)
    dcoord_list_4799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 24), 'dcoord_list', False)
    keyword_4800 = dcoord_list_4799
    # Getting the type of 'lvs' (line 2775)
    lvs_4801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 41), 'lvs', False)
    keyword_4802 = lvs_4801
    # Getting the type of 'current_color' (line 2776)
    current_color_4803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 26), 'current_color', False)
    keyword_4804 = current_color_4803
    # Getting the type of 'color_list' (line 2777)
    color_list_4805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 23), 'color_list', False)
    keyword_4806 = color_list_4805
    # Getting the type of 'currently_below_threshold' (line 2778)
    currently_below_threshold_4807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 38), 'currently_below_threshold', False)
    keyword_4808 = currently_below_threshold_4807
    # Getting the type of 'leaf_label_func' (line 2779)
    leaf_label_func_4809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 28), 'leaf_label_func', False)
    keyword_4810 = leaf_label_func_4809
    # Getting the type of 'level' (line 2780)
    level_4811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 18), 'level', False)
    int_4812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2780, 26), 'int')
    # Applying the binary operator '+' (line 2780)
    result_add_4813 = python_operator(stypy.reporting.localization.Localization(__file__, 2780, 18), '+', level_4811, int_4812)
    
    keyword_4814 = result_add_4813
    # Getting the type of 'contraction_marks' (line 2780)
    contraction_marks_4815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 47), 'contraction_marks', False)
    keyword_4816 = contraction_marks_4815
    # Getting the type of 'link_color_func' (line 2781)
    link_color_func_4817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 28), 'link_color_func', False)
    keyword_4818 = link_color_func_4817
    # Getting the type of 'above_threshold_color' (line 2782)
    above_threshold_color_4819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 34), 'above_threshold_color', False)
    keyword_4820 = above_threshold_color_4819
    kwargs_4821 = {'orientation': keyword_4778, 'ivl': keyword_4794, 'labels': keyword_4780, 'iv': keyword_4792, 'distance_sort': keyword_4784, 'truncate_mode': keyword_4772, 'above_threshold_color': keyword_4820, 'color_threshold': keyword_4774, 'dcoord_list': keyword_4800, 'get_leaves': keyword_4776, 'link_color_func': keyword_4818, 'Z': keyword_4768, 'count_sort': keyword_4782, 'lvs': keyword_4802, 'current_color': keyword_4804, 'leaf_label_func': keyword_4810, 'i': keyword_4788, 'show_leaf_counts': keyword_4786, 'color_list': keyword_4806, 'level': keyword_4814, 'n': keyword_4796, 'p': keyword_4770, 'icoord_list': keyword_4798, 'currently_below_threshold': keyword_4808, 'contraction_marks': keyword_4816}
    # Getting the type of '_dendrogram_calculate_info' (line 2763)
    _dendrogram_calculate_info_4766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 8), '_dendrogram_calculate_info', False)
    # Calling _dendrogram_calculate_info(args, kwargs) (line 2763)
    _dendrogram_calculate_info_call_result_4822 = invoke(stypy.reporting.localization.Localization(__file__, 2763, 8), _dendrogram_calculate_info_4766, *[], **kwargs_4821)
    
    # Obtaining the member '__getitem__' of a type (line 2762)
    getitem___4823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2762, 4), _dendrogram_calculate_info_call_result_4822, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2762)
    subscript_call_result_4824 = invoke(stypy.reporting.localization.Localization(__file__, 2762, 4), getitem___4823, int_4765)
    
    # Assigning a type to the variable 'tuple_var_assignment_480' (line 2762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 4), 'tuple_var_assignment_480', subscript_call_result_4824)
    
    # Assigning a Subscript to a Name (line 2762):
    
    # Obtaining the type of the subscript
    int_4825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2762, 4), 'int')
    
    # Call to _dendrogram_calculate_info(...): (line 2763)
    # Processing the call keyword arguments (line 2763)
    # Getting the type of 'Z' (line 2764)
    Z_4827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 14), 'Z', False)
    keyword_4828 = Z_4827
    # Getting the type of 'p' (line 2764)
    p_4829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 19), 'p', False)
    keyword_4830 = p_4829
    # Getting the type of 'truncate_mode' (line 2765)
    truncate_mode_4831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 26), 'truncate_mode', False)
    keyword_4832 = truncate_mode_4831
    # Getting the type of 'color_threshold' (line 2766)
    color_threshold_4833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 28), 'color_threshold', False)
    keyword_4834 = color_threshold_4833
    # Getting the type of 'get_leaves' (line 2767)
    get_leaves_4835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 23), 'get_leaves', False)
    keyword_4836 = get_leaves_4835
    # Getting the type of 'orientation' (line 2768)
    orientation_4837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2768, 24), 'orientation', False)
    keyword_4838 = orientation_4837
    # Getting the type of 'labels' (line 2769)
    labels_4839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 19), 'labels', False)
    keyword_4840 = labels_4839
    # Getting the type of 'count_sort' (line 2770)
    count_sort_4841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 23), 'count_sort', False)
    keyword_4842 = count_sort_4841
    # Getting the type of 'distance_sort' (line 2771)
    distance_sort_4843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 26), 'distance_sort', False)
    keyword_4844 = distance_sort_4843
    # Getting the type of 'show_leaf_counts' (line 2772)
    show_leaf_counts_4845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 29), 'show_leaf_counts', False)
    keyword_4846 = show_leaf_counts_4845
    # Getting the type of 'ub' (line 2773)
    ub_4847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 14), 'ub', False)
    keyword_4848 = ub_4847
    # Getting the type of 'iv' (line 2773)
    iv_4849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 21), 'iv', False)
    # Getting the type of 'uwa' (line 2773)
    uwa_4850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 26), 'uwa', False)
    # Applying the binary operator '+' (line 2773)
    result_add_4851 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 21), '+', iv_4849, uwa_4850)
    
    keyword_4852 = result_add_4851
    # Getting the type of 'ivl' (line 2773)
    ivl_4853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 35), 'ivl', False)
    keyword_4854 = ivl_4853
    # Getting the type of 'n' (line 2773)
    n_4855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 42), 'n', False)
    keyword_4856 = n_4855
    # Getting the type of 'icoord_list' (line 2774)
    icoord_list_4857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2774, 24), 'icoord_list', False)
    keyword_4858 = icoord_list_4857
    # Getting the type of 'dcoord_list' (line 2775)
    dcoord_list_4859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 24), 'dcoord_list', False)
    keyword_4860 = dcoord_list_4859
    # Getting the type of 'lvs' (line 2775)
    lvs_4861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 41), 'lvs', False)
    keyword_4862 = lvs_4861
    # Getting the type of 'current_color' (line 2776)
    current_color_4863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 26), 'current_color', False)
    keyword_4864 = current_color_4863
    # Getting the type of 'color_list' (line 2777)
    color_list_4865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 23), 'color_list', False)
    keyword_4866 = color_list_4865
    # Getting the type of 'currently_below_threshold' (line 2778)
    currently_below_threshold_4867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 38), 'currently_below_threshold', False)
    keyword_4868 = currently_below_threshold_4867
    # Getting the type of 'leaf_label_func' (line 2779)
    leaf_label_func_4869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 28), 'leaf_label_func', False)
    keyword_4870 = leaf_label_func_4869
    # Getting the type of 'level' (line 2780)
    level_4871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 18), 'level', False)
    int_4872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2780, 26), 'int')
    # Applying the binary operator '+' (line 2780)
    result_add_4873 = python_operator(stypy.reporting.localization.Localization(__file__, 2780, 18), '+', level_4871, int_4872)
    
    keyword_4874 = result_add_4873
    # Getting the type of 'contraction_marks' (line 2780)
    contraction_marks_4875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 47), 'contraction_marks', False)
    keyword_4876 = contraction_marks_4875
    # Getting the type of 'link_color_func' (line 2781)
    link_color_func_4877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 28), 'link_color_func', False)
    keyword_4878 = link_color_func_4877
    # Getting the type of 'above_threshold_color' (line 2782)
    above_threshold_color_4879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 34), 'above_threshold_color', False)
    keyword_4880 = above_threshold_color_4879
    kwargs_4881 = {'orientation': keyword_4838, 'ivl': keyword_4854, 'labels': keyword_4840, 'iv': keyword_4852, 'distance_sort': keyword_4844, 'truncate_mode': keyword_4832, 'above_threshold_color': keyword_4880, 'color_threshold': keyword_4834, 'dcoord_list': keyword_4860, 'get_leaves': keyword_4836, 'link_color_func': keyword_4878, 'Z': keyword_4828, 'count_sort': keyword_4842, 'lvs': keyword_4862, 'current_color': keyword_4864, 'leaf_label_func': keyword_4870, 'i': keyword_4848, 'show_leaf_counts': keyword_4846, 'color_list': keyword_4866, 'level': keyword_4874, 'n': keyword_4856, 'p': keyword_4830, 'icoord_list': keyword_4858, 'currently_below_threshold': keyword_4868, 'contraction_marks': keyword_4876}
    # Getting the type of '_dendrogram_calculate_info' (line 2763)
    _dendrogram_calculate_info_4826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 8), '_dendrogram_calculate_info', False)
    # Calling _dendrogram_calculate_info(args, kwargs) (line 2763)
    _dendrogram_calculate_info_call_result_4882 = invoke(stypy.reporting.localization.Localization(__file__, 2763, 8), _dendrogram_calculate_info_4826, *[], **kwargs_4881)
    
    # Obtaining the member '__getitem__' of a type (line 2762)
    getitem___4883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2762, 4), _dendrogram_calculate_info_call_result_4882, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2762)
    subscript_call_result_4884 = invoke(stypy.reporting.localization.Localization(__file__, 2762, 4), getitem___4883, int_4825)
    
    # Assigning a type to the variable 'tuple_var_assignment_481' (line 2762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 4), 'tuple_var_assignment_481', subscript_call_result_4884)
    
    # Assigning a Subscript to a Name (line 2762):
    
    # Obtaining the type of the subscript
    int_4885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2762, 4), 'int')
    
    # Call to _dendrogram_calculate_info(...): (line 2763)
    # Processing the call keyword arguments (line 2763)
    # Getting the type of 'Z' (line 2764)
    Z_4887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 14), 'Z', False)
    keyword_4888 = Z_4887
    # Getting the type of 'p' (line 2764)
    p_4889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 19), 'p', False)
    keyword_4890 = p_4889
    # Getting the type of 'truncate_mode' (line 2765)
    truncate_mode_4891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 26), 'truncate_mode', False)
    keyword_4892 = truncate_mode_4891
    # Getting the type of 'color_threshold' (line 2766)
    color_threshold_4893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 28), 'color_threshold', False)
    keyword_4894 = color_threshold_4893
    # Getting the type of 'get_leaves' (line 2767)
    get_leaves_4895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 23), 'get_leaves', False)
    keyword_4896 = get_leaves_4895
    # Getting the type of 'orientation' (line 2768)
    orientation_4897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2768, 24), 'orientation', False)
    keyword_4898 = orientation_4897
    # Getting the type of 'labels' (line 2769)
    labels_4899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 19), 'labels', False)
    keyword_4900 = labels_4899
    # Getting the type of 'count_sort' (line 2770)
    count_sort_4901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 23), 'count_sort', False)
    keyword_4902 = count_sort_4901
    # Getting the type of 'distance_sort' (line 2771)
    distance_sort_4903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 26), 'distance_sort', False)
    keyword_4904 = distance_sort_4903
    # Getting the type of 'show_leaf_counts' (line 2772)
    show_leaf_counts_4905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 29), 'show_leaf_counts', False)
    keyword_4906 = show_leaf_counts_4905
    # Getting the type of 'ub' (line 2773)
    ub_4907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 14), 'ub', False)
    keyword_4908 = ub_4907
    # Getting the type of 'iv' (line 2773)
    iv_4909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 21), 'iv', False)
    # Getting the type of 'uwa' (line 2773)
    uwa_4910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 26), 'uwa', False)
    # Applying the binary operator '+' (line 2773)
    result_add_4911 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 21), '+', iv_4909, uwa_4910)
    
    keyword_4912 = result_add_4911
    # Getting the type of 'ivl' (line 2773)
    ivl_4913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 35), 'ivl', False)
    keyword_4914 = ivl_4913
    # Getting the type of 'n' (line 2773)
    n_4915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 42), 'n', False)
    keyword_4916 = n_4915
    # Getting the type of 'icoord_list' (line 2774)
    icoord_list_4917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2774, 24), 'icoord_list', False)
    keyword_4918 = icoord_list_4917
    # Getting the type of 'dcoord_list' (line 2775)
    dcoord_list_4919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 24), 'dcoord_list', False)
    keyword_4920 = dcoord_list_4919
    # Getting the type of 'lvs' (line 2775)
    lvs_4921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 41), 'lvs', False)
    keyword_4922 = lvs_4921
    # Getting the type of 'current_color' (line 2776)
    current_color_4923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 26), 'current_color', False)
    keyword_4924 = current_color_4923
    # Getting the type of 'color_list' (line 2777)
    color_list_4925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 23), 'color_list', False)
    keyword_4926 = color_list_4925
    # Getting the type of 'currently_below_threshold' (line 2778)
    currently_below_threshold_4927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 38), 'currently_below_threshold', False)
    keyword_4928 = currently_below_threshold_4927
    # Getting the type of 'leaf_label_func' (line 2779)
    leaf_label_func_4929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 28), 'leaf_label_func', False)
    keyword_4930 = leaf_label_func_4929
    # Getting the type of 'level' (line 2780)
    level_4931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 18), 'level', False)
    int_4932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2780, 26), 'int')
    # Applying the binary operator '+' (line 2780)
    result_add_4933 = python_operator(stypy.reporting.localization.Localization(__file__, 2780, 18), '+', level_4931, int_4932)
    
    keyword_4934 = result_add_4933
    # Getting the type of 'contraction_marks' (line 2780)
    contraction_marks_4935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 47), 'contraction_marks', False)
    keyword_4936 = contraction_marks_4935
    # Getting the type of 'link_color_func' (line 2781)
    link_color_func_4937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 28), 'link_color_func', False)
    keyword_4938 = link_color_func_4937
    # Getting the type of 'above_threshold_color' (line 2782)
    above_threshold_color_4939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 34), 'above_threshold_color', False)
    keyword_4940 = above_threshold_color_4939
    kwargs_4941 = {'orientation': keyword_4898, 'ivl': keyword_4914, 'labels': keyword_4900, 'iv': keyword_4912, 'distance_sort': keyword_4904, 'truncate_mode': keyword_4892, 'above_threshold_color': keyword_4940, 'color_threshold': keyword_4894, 'dcoord_list': keyword_4920, 'get_leaves': keyword_4896, 'link_color_func': keyword_4938, 'Z': keyword_4888, 'count_sort': keyword_4902, 'lvs': keyword_4922, 'current_color': keyword_4924, 'leaf_label_func': keyword_4930, 'i': keyword_4908, 'show_leaf_counts': keyword_4906, 'color_list': keyword_4926, 'level': keyword_4934, 'n': keyword_4916, 'p': keyword_4890, 'icoord_list': keyword_4918, 'currently_below_threshold': keyword_4928, 'contraction_marks': keyword_4936}
    # Getting the type of '_dendrogram_calculate_info' (line 2763)
    _dendrogram_calculate_info_4886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 8), '_dendrogram_calculate_info', False)
    # Calling _dendrogram_calculate_info(args, kwargs) (line 2763)
    _dendrogram_calculate_info_call_result_4942 = invoke(stypy.reporting.localization.Localization(__file__, 2763, 8), _dendrogram_calculate_info_4886, *[], **kwargs_4941)
    
    # Obtaining the member '__getitem__' of a type (line 2762)
    getitem___4943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2762, 4), _dendrogram_calculate_info_call_result_4942, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2762)
    subscript_call_result_4944 = invoke(stypy.reporting.localization.Localization(__file__, 2762, 4), getitem___4943, int_4885)
    
    # Assigning a type to the variable 'tuple_var_assignment_482' (line 2762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 4), 'tuple_var_assignment_482', subscript_call_result_4944)
    
    # Assigning a Subscript to a Name (line 2762):
    
    # Obtaining the type of the subscript
    int_4945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2762, 4), 'int')
    
    # Call to _dendrogram_calculate_info(...): (line 2763)
    # Processing the call keyword arguments (line 2763)
    # Getting the type of 'Z' (line 2764)
    Z_4947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 14), 'Z', False)
    keyword_4948 = Z_4947
    # Getting the type of 'p' (line 2764)
    p_4949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2764, 19), 'p', False)
    keyword_4950 = p_4949
    # Getting the type of 'truncate_mode' (line 2765)
    truncate_mode_4951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 26), 'truncate_mode', False)
    keyword_4952 = truncate_mode_4951
    # Getting the type of 'color_threshold' (line 2766)
    color_threshold_4953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2766, 28), 'color_threshold', False)
    keyword_4954 = color_threshold_4953
    # Getting the type of 'get_leaves' (line 2767)
    get_leaves_4955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2767, 23), 'get_leaves', False)
    keyword_4956 = get_leaves_4955
    # Getting the type of 'orientation' (line 2768)
    orientation_4957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2768, 24), 'orientation', False)
    keyword_4958 = orientation_4957
    # Getting the type of 'labels' (line 2769)
    labels_4959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 19), 'labels', False)
    keyword_4960 = labels_4959
    # Getting the type of 'count_sort' (line 2770)
    count_sort_4961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 23), 'count_sort', False)
    keyword_4962 = count_sort_4961
    # Getting the type of 'distance_sort' (line 2771)
    distance_sort_4963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 26), 'distance_sort', False)
    keyword_4964 = distance_sort_4963
    # Getting the type of 'show_leaf_counts' (line 2772)
    show_leaf_counts_4965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 29), 'show_leaf_counts', False)
    keyword_4966 = show_leaf_counts_4965
    # Getting the type of 'ub' (line 2773)
    ub_4967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 14), 'ub', False)
    keyword_4968 = ub_4967
    # Getting the type of 'iv' (line 2773)
    iv_4969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 21), 'iv', False)
    # Getting the type of 'uwa' (line 2773)
    uwa_4970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 26), 'uwa', False)
    # Applying the binary operator '+' (line 2773)
    result_add_4971 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 21), '+', iv_4969, uwa_4970)
    
    keyword_4972 = result_add_4971
    # Getting the type of 'ivl' (line 2773)
    ivl_4973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 35), 'ivl', False)
    keyword_4974 = ivl_4973
    # Getting the type of 'n' (line 2773)
    n_4975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 42), 'n', False)
    keyword_4976 = n_4975
    # Getting the type of 'icoord_list' (line 2774)
    icoord_list_4977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2774, 24), 'icoord_list', False)
    keyword_4978 = icoord_list_4977
    # Getting the type of 'dcoord_list' (line 2775)
    dcoord_list_4979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 24), 'dcoord_list', False)
    keyword_4980 = dcoord_list_4979
    # Getting the type of 'lvs' (line 2775)
    lvs_4981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2775, 41), 'lvs', False)
    keyword_4982 = lvs_4981
    # Getting the type of 'current_color' (line 2776)
    current_color_4983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 26), 'current_color', False)
    keyword_4984 = current_color_4983
    # Getting the type of 'color_list' (line 2777)
    color_list_4985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2777, 23), 'color_list', False)
    keyword_4986 = color_list_4985
    # Getting the type of 'currently_below_threshold' (line 2778)
    currently_below_threshold_4987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 38), 'currently_below_threshold', False)
    keyword_4988 = currently_below_threshold_4987
    # Getting the type of 'leaf_label_func' (line 2779)
    leaf_label_func_4989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 28), 'leaf_label_func', False)
    keyword_4990 = leaf_label_func_4989
    # Getting the type of 'level' (line 2780)
    level_4991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 18), 'level', False)
    int_4992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2780, 26), 'int')
    # Applying the binary operator '+' (line 2780)
    result_add_4993 = python_operator(stypy.reporting.localization.Localization(__file__, 2780, 18), '+', level_4991, int_4992)
    
    keyword_4994 = result_add_4993
    # Getting the type of 'contraction_marks' (line 2780)
    contraction_marks_4995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 47), 'contraction_marks', False)
    keyword_4996 = contraction_marks_4995
    # Getting the type of 'link_color_func' (line 2781)
    link_color_func_4997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2781, 28), 'link_color_func', False)
    keyword_4998 = link_color_func_4997
    # Getting the type of 'above_threshold_color' (line 2782)
    above_threshold_color_4999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2782, 34), 'above_threshold_color', False)
    keyword_5000 = above_threshold_color_4999
    kwargs_5001 = {'orientation': keyword_4958, 'ivl': keyword_4974, 'labels': keyword_4960, 'iv': keyword_4972, 'distance_sort': keyword_4964, 'truncate_mode': keyword_4952, 'above_threshold_color': keyword_5000, 'color_threshold': keyword_4954, 'dcoord_list': keyword_4980, 'get_leaves': keyword_4956, 'link_color_func': keyword_4998, 'Z': keyword_4948, 'count_sort': keyword_4962, 'lvs': keyword_4982, 'current_color': keyword_4984, 'leaf_label_func': keyword_4990, 'i': keyword_4968, 'show_leaf_counts': keyword_4966, 'color_list': keyword_4986, 'level': keyword_4994, 'n': keyword_4976, 'p': keyword_4950, 'icoord_list': keyword_4978, 'currently_below_threshold': keyword_4988, 'contraction_marks': keyword_4996}
    # Getting the type of '_dendrogram_calculate_info' (line 2763)
    _dendrogram_calculate_info_4946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 8), '_dendrogram_calculate_info', False)
    # Calling _dendrogram_calculate_info(args, kwargs) (line 2763)
    _dendrogram_calculate_info_call_result_5002 = invoke(stypy.reporting.localization.Localization(__file__, 2763, 8), _dendrogram_calculate_info_4946, *[], **kwargs_5001)
    
    # Obtaining the member '__getitem__' of a type (line 2762)
    getitem___5003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2762, 4), _dendrogram_calculate_info_call_result_5002, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2762)
    subscript_call_result_5004 = invoke(stypy.reporting.localization.Localization(__file__, 2762, 4), getitem___5003, int_4945)
    
    # Assigning a type to the variable 'tuple_var_assignment_483' (line 2762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 4), 'tuple_var_assignment_483', subscript_call_result_5004)
    
    # Assigning a Name to a Name (line 2762):
    # Getting the type of 'tuple_var_assignment_480' (line 2762)
    tuple_var_assignment_480_5005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 4), 'tuple_var_assignment_480')
    # Assigning a type to the variable 'uivb' (line 2762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 5), 'uivb', tuple_var_assignment_480_5005)
    
    # Assigning a Name to a Name (line 2762):
    # Getting the type of 'tuple_var_assignment_481' (line 2762)
    tuple_var_assignment_481_5006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 4), 'tuple_var_assignment_481')
    # Assigning a type to the variable 'uwb' (line 2762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 11), 'uwb', tuple_var_assignment_481_5006)
    
    # Assigning a Name to a Name (line 2762):
    # Getting the type of 'tuple_var_assignment_482' (line 2762)
    tuple_var_assignment_482_5007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 4), 'tuple_var_assignment_482')
    # Assigning a type to the variable 'ubh' (line 2762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 16), 'ubh', tuple_var_assignment_482_5007)
    
    # Assigning a Name to a Name (line 2762):
    # Getting the type of 'tuple_var_assignment_483' (line 2762)
    tuple_var_assignment_483_5008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2762, 4), 'tuple_var_assignment_483')
    # Assigning a type to the variable 'ubmd' (line 2762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2762, 21), 'ubmd', tuple_var_assignment_483_5008)
    
    # Assigning a Call to a Name (line 2784):
    
    # Assigning a Call to a Name (line 2784):
    
    # Call to max(...): (line 2784)
    # Processing the call arguments (line 2784)
    # Getting the type of 'uamd' (line 2784)
    uamd_5010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 19), 'uamd', False)
    # Getting the type of 'ubmd' (line 2784)
    ubmd_5011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 25), 'ubmd', False)
    # Getting the type of 'h' (line 2784)
    h_5012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 31), 'h', False)
    # Processing the call keyword arguments (line 2784)
    kwargs_5013 = {}
    # Getting the type of 'max' (line 2784)
    max_5009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 15), 'max', False)
    # Calling max(args, kwargs) (line 2784)
    max_call_result_5014 = invoke(stypy.reporting.localization.Localization(__file__, 2784, 15), max_5009, *[uamd_5010, ubmd_5011, h_5012], **kwargs_5013)
    
    # Assigning a type to the variable 'max_dist' (line 2784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 4), 'max_dist', max_call_result_5014)
    
    # Call to append(...): (line 2786)
    # Processing the call arguments (line 2786)
    
    # Obtaining an instance of the builtin type 'list' (line 2786)
    list_5017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2786, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2786)
    # Adding element type (line 2786)
    # Getting the type of 'uiva' (line 2786)
    uiva_5018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 24), 'uiva', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 23), list_5017, uiva_5018)
    # Adding element type (line 2786)
    # Getting the type of 'uiva' (line 2786)
    uiva_5019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 30), 'uiva', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 23), list_5017, uiva_5019)
    # Adding element type (line 2786)
    # Getting the type of 'uivb' (line 2786)
    uivb_5020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 36), 'uivb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 23), list_5017, uivb_5020)
    # Adding element type (line 2786)
    # Getting the type of 'uivb' (line 2786)
    uivb_5021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 42), 'uivb', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2786, 23), list_5017, uivb_5021)
    
    # Processing the call keyword arguments (line 2786)
    kwargs_5022 = {}
    # Getting the type of 'icoord_list' (line 2786)
    icoord_list_5015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 4), 'icoord_list', False)
    # Obtaining the member 'append' of a type (line 2786)
    append_5016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2786, 4), icoord_list_5015, 'append')
    # Calling append(args, kwargs) (line 2786)
    append_call_result_5023 = invoke(stypy.reporting.localization.Localization(__file__, 2786, 4), append_5016, *[list_5017], **kwargs_5022)
    
    
    # Call to append(...): (line 2787)
    # Processing the call arguments (line 2787)
    
    # Obtaining an instance of the builtin type 'list' (line 2787)
    list_5026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2787, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2787)
    # Adding element type (line 2787)
    # Getting the type of 'uah' (line 2787)
    uah_5027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 24), 'uah', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2787, 23), list_5026, uah_5027)
    # Adding element type (line 2787)
    # Getting the type of 'h' (line 2787)
    h_5028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 29), 'h', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2787, 23), list_5026, h_5028)
    # Adding element type (line 2787)
    # Getting the type of 'h' (line 2787)
    h_5029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 32), 'h', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2787, 23), list_5026, h_5029)
    # Adding element type (line 2787)
    # Getting the type of 'ubh' (line 2787)
    ubh_5030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 35), 'ubh', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2787, 23), list_5026, ubh_5030)
    
    # Processing the call keyword arguments (line 2787)
    kwargs_5031 = {}
    # Getting the type of 'dcoord_list' (line 2787)
    dcoord_list_5024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2787, 4), 'dcoord_list', False)
    # Obtaining the member 'append' of a type (line 2787)
    append_5025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2787, 4), dcoord_list_5024, 'append')
    # Calling append(args, kwargs) (line 2787)
    append_call_result_5032 = invoke(stypy.reporting.localization.Localization(__file__, 2787, 4), append_5025, *[list_5026], **kwargs_5031)
    
    
    # Type idiom detected: calculating its left and rigth part (line 2788)
    # Getting the type of 'link_color_func' (line 2788)
    link_color_func_5033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 4), 'link_color_func')
    # Getting the type of 'None' (line 2788)
    None_5034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2788, 30), 'None')
    
    (may_be_5035, more_types_in_union_5036) = may_not_be_none(link_color_func_5033, None_5034)

    if may_be_5035:

        if more_types_in_union_5036:
            # Runtime conditional SSA (line 2788)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2789):
        
        # Assigning a Call to a Name (line 2789):
        
        # Call to link_color_func(...): (line 2789)
        # Processing the call arguments (line 2789)
        
        # Call to int(...): (line 2789)
        # Processing the call arguments (line 2789)
        # Getting the type of 'i' (line 2789)
        i_5039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 32), 'i', False)
        # Processing the call keyword arguments (line 2789)
        kwargs_5040 = {}
        # Getting the type of 'int' (line 2789)
        int_5038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 28), 'int', False)
        # Calling int(args, kwargs) (line 2789)
        int_call_result_5041 = invoke(stypy.reporting.localization.Localization(__file__, 2789, 28), int_5038, *[i_5039], **kwargs_5040)
        
        # Processing the call keyword arguments (line 2789)
        kwargs_5042 = {}
        # Getting the type of 'link_color_func' (line 2789)
        link_color_func_5037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 12), 'link_color_func', False)
        # Calling link_color_func(args, kwargs) (line 2789)
        link_color_func_call_result_5043 = invoke(stypy.reporting.localization.Localization(__file__, 2789, 12), link_color_func_5037, *[int_call_result_5041], **kwargs_5042)
        
        # Assigning a type to the variable 'v' (line 2789)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2789, 8), 'v', link_color_func_call_result_5043)
        
        
        
        # Call to isinstance(...): (line 2790)
        # Processing the call arguments (line 2790)
        # Getting the type of 'v' (line 2790)
        v_5045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 26), 'v', False)
        # Getting the type of 'string_types' (line 2790)
        string_types_5046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 29), 'string_types', False)
        # Processing the call keyword arguments (line 2790)
        kwargs_5047 = {}
        # Getting the type of 'isinstance' (line 2790)
        isinstance_5044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2790)
        isinstance_call_result_5048 = invoke(stypy.reporting.localization.Localization(__file__, 2790, 15), isinstance_5044, *[v_5045, string_types_5046], **kwargs_5047)
        
        # Applying the 'not' unary operator (line 2790)
        result_not__5049 = python_operator(stypy.reporting.localization.Localization(__file__, 2790, 11), 'not', isinstance_call_result_5048)
        
        # Testing the type of an if condition (line 2790)
        if_condition_5050 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2790, 8), result_not__5049)
        # Assigning a type to the variable 'if_condition_5050' (line 2790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2790, 8), 'if_condition_5050', if_condition_5050)
        # SSA begins for if statement (line 2790)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 2791)
        # Processing the call arguments (line 2791)
        str_5052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2791, 28), 'str', 'link_color_func must return a matplotlib color string!')
        # Processing the call keyword arguments (line 2791)
        kwargs_5053 = {}
        # Getting the type of 'TypeError' (line 2791)
        TypeError_5051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 2791)
        TypeError_call_result_5054 = invoke(stypy.reporting.localization.Localization(__file__, 2791, 18), TypeError_5051, *[str_5052], **kwargs_5053)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2791, 12), TypeError_call_result_5054, 'raise parameter', BaseException)
        # SSA join for if statement (line 2790)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 2793)
        # Processing the call arguments (line 2793)
        # Getting the type of 'v' (line 2793)
        v_5057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 26), 'v', False)
        # Processing the call keyword arguments (line 2793)
        kwargs_5058 = {}
        # Getting the type of 'color_list' (line 2793)
        color_list_5055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2793, 8), 'color_list', False)
        # Obtaining the member 'append' of a type (line 2793)
        append_5056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2793, 8), color_list_5055, 'append')
        # Calling append(args, kwargs) (line 2793)
        append_call_result_5059 = invoke(stypy.reporting.localization.Localization(__file__, 2793, 8), append_5056, *[v_5057], **kwargs_5058)
        

        if more_types_in_union_5036:
            # Runtime conditional SSA for else branch (line 2788)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_5035) or more_types_in_union_5036):
        
        # Call to append(...): (line 2795)
        # Processing the call arguments (line 2795)
        # Getting the type of 'c' (line 2795)
        c_5062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 26), 'c', False)
        # Processing the call keyword arguments (line 2795)
        kwargs_5063 = {}
        # Getting the type of 'color_list' (line 2795)
        color_list_5060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 8), 'color_list', False)
        # Obtaining the member 'append' of a type (line 2795)
        append_5061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2795, 8), color_list_5060, 'append')
        # Calling append(args, kwargs) (line 2795)
        append_call_result_5064 = invoke(stypy.reporting.localization.Localization(__file__, 2795, 8), append_5061, *[c_5062], **kwargs_5063)
        

        if (may_be_5035 and more_types_in_union_5036):
            # SSA join for if statement (line 2788)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Obtaining an instance of the builtin type 'tuple' (line 2797)
    tuple_5065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2797, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2797)
    # Adding element type (line 2797)
    # Getting the type of 'uiva' (line 2797)
    uiva_5066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 14), 'uiva')
    # Getting the type of 'uivb' (line 2797)
    uivb_5067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 21), 'uivb')
    # Applying the binary operator '+' (line 2797)
    result_add_5068 = python_operator(stypy.reporting.localization.Localization(__file__, 2797, 14), '+', uiva_5066, uivb_5067)
    
    int_5069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2797, 29), 'int')
    # Applying the binary operator 'div' (line 2797)
    result_div_5070 = python_operator(stypy.reporting.localization.Localization(__file__, 2797, 13), 'div', result_add_5068, int_5069)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2797, 12), tuple_5065, result_div_5070)
    # Adding element type (line 2797)
    # Getting the type of 'uwa' (line 2797)
    uwa_5071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 33), 'uwa')
    # Getting the type of 'uwb' (line 2797)
    uwb_5072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 39), 'uwb')
    # Applying the binary operator '+' (line 2797)
    result_add_5073 = python_operator(stypy.reporting.localization.Localization(__file__, 2797, 33), '+', uwa_5071, uwb_5072)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2797, 12), tuple_5065, result_add_5073)
    # Adding element type (line 2797)
    # Getting the type of 'h' (line 2797)
    h_5074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 44), 'h')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2797, 12), tuple_5065, h_5074)
    # Adding element type (line 2797)
    # Getting the type of 'max_dist' (line 2797)
    max_dist_5075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 47), 'max_dist')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2797, 12), tuple_5065, max_dist_5075)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2797, 4), 'stypy_return_type', tuple_5065)
    
    # ################# End of '_dendrogram_calculate_info(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_dendrogram_calculate_info' in the type store
    # Getting the type of 'stypy_return_type' (line 2567)
    stypy_return_type_5076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2567, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_5076)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_dendrogram_calculate_info'
    return stypy_return_type_5076

# Assigning a type to the variable '_dendrogram_calculate_info' (line 2567)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2567, 0), '_dendrogram_calculate_info', _dendrogram_calculate_info)

@norecursion
def is_isomorphic(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'is_isomorphic'
    module_type_store = module_type_store.open_function_context('is_isomorphic', 2800, 0, False)
    
    # Passed parameters checking function
    is_isomorphic.stypy_localization = localization
    is_isomorphic.stypy_type_of_self = None
    is_isomorphic.stypy_type_store = module_type_store
    is_isomorphic.stypy_function_name = 'is_isomorphic'
    is_isomorphic.stypy_param_names_list = ['T1', 'T2']
    is_isomorphic.stypy_varargs_param_name = None
    is_isomorphic.stypy_kwargs_param_name = None
    is_isomorphic.stypy_call_defaults = defaults
    is_isomorphic.stypy_call_varargs = varargs
    is_isomorphic.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'is_isomorphic', ['T1', 'T2'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'is_isomorphic', localization, ['T1', 'T2'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'is_isomorphic(...)' code ##################

    str_5077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2817, (-1)), 'str', '\n    Determine if two different cluster assignments are equivalent.\n\n    Parameters\n    ----------\n    T1 : array_like\n        An assignment of singleton cluster ids to flat cluster ids.\n    T2 : array_like\n        An assignment of singleton cluster ids to flat cluster ids.\n\n    Returns\n    -------\n    b : bool\n        Whether the flat cluster assignments `T1` and `T2` are\n        equivalent.\n\n    ')
    
    # Assigning a Call to a Name (line 2818):
    
    # Assigning a Call to a Name (line 2818):
    
    # Call to asarray(...): (line 2818)
    # Processing the call arguments (line 2818)
    # Getting the type of 'T1' (line 2818)
    T1_5080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 20), 'T1', False)
    # Processing the call keyword arguments (line 2818)
    str_5081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2818, 30), 'str', 'c')
    keyword_5082 = str_5081
    kwargs_5083 = {'order': keyword_5082}
    # Getting the type of 'np' (line 2818)
    np_5078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 9), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2818)
    asarray_5079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2818, 9), np_5078, 'asarray')
    # Calling asarray(args, kwargs) (line 2818)
    asarray_call_result_5084 = invoke(stypy.reporting.localization.Localization(__file__, 2818, 9), asarray_5079, *[T1_5080], **kwargs_5083)
    
    # Assigning a type to the variable 'T1' (line 2818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2818, 4), 'T1', asarray_call_result_5084)
    
    # Assigning a Call to a Name (line 2819):
    
    # Assigning a Call to a Name (line 2819):
    
    # Call to asarray(...): (line 2819)
    # Processing the call arguments (line 2819)
    # Getting the type of 'T2' (line 2819)
    T2_5087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 20), 'T2', False)
    # Processing the call keyword arguments (line 2819)
    str_5088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2819, 30), 'str', 'c')
    keyword_5089 = str_5088
    kwargs_5090 = {'order': keyword_5089}
    # Getting the type of 'np' (line 2819)
    np_5085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2819, 9), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2819)
    asarray_5086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2819, 9), np_5085, 'asarray')
    # Calling asarray(args, kwargs) (line 2819)
    asarray_call_result_5091 = invoke(stypy.reporting.localization.Localization(__file__, 2819, 9), asarray_5086, *[T2_5087], **kwargs_5090)
    
    # Assigning a type to the variable 'T2' (line 2819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2819, 4), 'T2', asarray_call_result_5091)
    
    
    
    # Call to type(...): (line 2821)
    # Processing the call arguments (line 2821)
    # Getting the type of 'T1' (line 2821)
    T1_5093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 12), 'T1', False)
    # Processing the call keyword arguments (line 2821)
    kwargs_5094 = {}
    # Getting the type of 'type' (line 2821)
    type_5092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 7), 'type', False)
    # Calling type(args, kwargs) (line 2821)
    type_call_result_5095 = invoke(stypy.reporting.localization.Localization(__file__, 2821, 7), type_5092, *[T1_5093], **kwargs_5094)
    
    # Getting the type of 'np' (line 2821)
    np_5096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 19), 'np')
    # Obtaining the member 'ndarray' of a type (line 2821)
    ndarray_5097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2821, 19), np_5096, 'ndarray')
    # Applying the binary operator '!=' (line 2821)
    result_ne_5098 = python_operator(stypy.reporting.localization.Localization(__file__, 2821, 7), '!=', type_call_result_5095, ndarray_5097)
    
    # Testing the type of an if condition (line 2821)
    if_condition_5099 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2821, 4), result_ne_5098)
    # Assigning a type to the variable 'if_condition_5099' (line 2821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2821, 4), 'if_condition_5099', if_condition_5099)
    # SSA begins for if statement (line 2821)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 2822)
    # Processing the call arguments (line 2822)
    str_5101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2822, 24), 'str', 'T1 must be a numpy array.')
    # Processing the call keyword arguments (line 2822)
    kwargs_5102 = {}
    # Getting the type of 'TypeError' (line 2822)
    TypeError_5100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2822, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 2822)
    TypeError_call_result_5103 = invoke(stypy.reporting.localization.Localization(__file__, 2822, 14), TypeError_5100, *[str_5101], **kwargs_5102)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2822, 8), TypeError_call_result_5103, 'raise parameter', BaseException)
    # SSA join for if statement (line 2821)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to type(...): (line 2823)
    # Processing the call arguments (line 2823)
    # Getting the type of 'T2' (line 2823)
    T2_5105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2823, 12), 'T2', False)
    # Processing the call keyword arguments (line 2823)
    kwargs_5106 = {}
    # Getting the type of 'type' (line 2823)
    type_5104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2823, 7), 'type', False)
    # Calling type(args, kwargs) (line 2823)
    type_call_result_5107 = invoke(stypy.reporting.localization.Localization(__file__, 2823, 7), type_5104, *[T2_5105], **kwargs_5106)
    
    # Getting the type of 'np' (line 2823)
    np_5108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2823, 19), 'np')
    # Obtaining the member 'ndarray' of a type (line 2823)
    ndarray_5109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2823, 19), np_5108, 'ndarray')
    # Applying the binary operator '!=' (line 2823)
    result_ne_5110 = python_operator(stypy.reporting.localization.Localization(__file__, 2823, 7), '!=', type_call_result_5107, ndarray_5109)
    
    # Testing the type of an if condition (line 2823)
    if_condition_5111 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2823, 4), result_ne_5110)
    # Assigning a type to the variable 'if_condition_5111' (line 2823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2823, 4), 'if_condition_5111', if_condition_5111)
    # SSA begins for if statement (line 2823)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 2824)
    # Processing the call arguments (line 2824)
    str_5113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2824, 24), 'str', 'T2 must be a numpy array.')
    # Processing the call keyword arguments (line 2824)
    kwargs_5114 = {}
    # Getting the type of 'TypeError' (line 2824)
    TypeError_5112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2824, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 2824)
    TypeError_call_result_5115 = invoke(stypy.reporting.localization.Localization(__file__, 2824, 14), TypeError_5112, *[str_5113], **kwargs_5114)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2824, 8), TypeError_call_result_5115, 'raise parameter', BaseException)
    # SSA join for if statement (line 2823)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 2826):
    
    # Assigning a Attribute to a Name (line 2826):
    # Getting the type of 'T1' (line 2826)
    T1_5116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2826, 10), 'T1')
    # Obtaining the member 'shape' of a type (line 2826)
    shape_5117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2826, 10), T1_5116, 'shape')
    # Assigning a type to the variable 'T1S' (line 2826)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2826, 4), 'T1S', shape_5117)
    
    # Assigning a Attribute to a Name (line 2827):
    
    # Assigning a Attribute to a Name (line 2827):
    # Getting the type of 'T2' (line 2827)
    T2_5118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2827, 10), 'T2')
    # Obtaining the member 'shape' of a type (line 2827)
    shape_5119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2827, 10), T2_5118, 'shape')
    # Assigning a type to the variable 'T2S' (line 2827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2827, 4), 'T2S', shape_5119)
    
    
    
    # Call to len(...): (line 2829)
    # Processing the call arguments (line 2829)
    # Getting the type of 'T1S' (line 2829)
    T1S_5121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2829, 11), 'T1S', False)
    # Processing the call keyword arguments (line 2829)
    kwargs_5122 = {}
    # Getting the type of 'len' (line 2829)
    len_5120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2829, 7), 'len', False)
    # Calling len(args, kwargs) (line 2829)
    len_call_result_5123 = invoke(stypy.reporting.localization.Localization(__file__, 2829, 7), len_5120, *[T1S_5121], **kwargs_5122)
    
    int_5124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2829, 19), 'int')
    # Applying the binary operator '!=' (line 2829)
    result_ne_5125 = python_operator(stypy.reporting.localization.Localization(__file__, 2829, 7), '!=', len_call_result_5123, int_5124)
    
    # Testing the type of an if condition (line 2829)
    if_condition_5126 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2829, 4), result_ne_5125)
    # Assigning a type to the variable 'if_condition_5126' (line 2829)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2829, 4), 'if_condition_5126', if_condition_5126)
    # SSA begins for if statement (line 2829)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2830)
    # Processing the call arguments (line 2830)
    str_5128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2830, 25), 'str', 'T1 must be one-dimensional.')
    # Processing the call keyword arguments (line 2830)
    kwargs_5129 = {}
    # Getting the type of 'ValueError' (line 2830)
    ValueError_5127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2830, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2830)
    ValueError_call_result_5130 = invoke(stypy.reporting.localization.Localization(__file__, 2830, 14), ValueError_5127, *[str_5128], **kwargs_5129)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2830, 8), ValueError_call_result_5130, 'raise parameter', BaseException)
    # SSA join for if statement (line 2829)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 2831)
    # Processing the call arguments (line 2831)
    # Getting the type of 'T2S' (line 2831)
    T2S_5132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 11), 'T2S', False)
    # Processing the call keyword arguments (line 2831)
    kwargs_5133 = {}
    # Getting the type of 'len' (line 2831)
    len_5131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 7), 'len', False)
    # Calling len(args, kwargs) (line 2831)
    len_call_result_5134 = invoke(stypy.reporting.localization.Localization(__file__, 2831, 7), len_5131, *[T2S_5132], **kwargs_5133)
    
    int_5135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2831, 19), 'int')
    # Applying the binary operator '!=' (line 2831)
    result_ne_5136 = python_operator(stypy.reporting.localization.Localization(__file__, 2831, 7), '!=', len_call_result_5134, int_5135)
    
    # Testing the type of an if condition (line 2831)
    if_condition_5137 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2831, 4), result_ne_5136)
    # Assigning a type to the variable 'if_condition_5137' (line 2831)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2831, 4), 'if_condition_5137', if_condition_5137)
    # SSA begins for if statement (line 2831)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2832)
    # Processing the call arguments (line 2832)
    str_5139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2832, 25), 'str', 'T2 must be one-dimensional.')
    # Processing the call keyword arguments (line 2832)
    kwargs_5140 = {}
    # Getting the type of 'ValueError' (line 2832)
    ValueError_5138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2832)
    ValueError_call_result_5141 = invoke(stypy.reporting.localization.Localization(__file__, 2832, 14), ValueError_5138, *[str_5139], **kwargs_5140)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2832, 8), ValueError_call_result_5141, 'raise parameter', BaseException)
    # SSA join for if statement (line 2831)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_5142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2833, 11), 'int')
    # Getting the type of 'T1S' (line 2833)
    T1S_5143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 7), 'T1S')
    # Obtaining the member '__getitem__' of a type (line 2833)
    getitem___5144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2833, 7), T1S_5143, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2833)
    subscript_call_result_5145 = invoke(stypy.reporting.localization.Localization(__file__, 2833, 7), getitem___5144, int_5142)
    
    
    # Obtaining the type of the subscript
    int_5146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2833, 21), 'int')
    # Getting the type of 'T2S' (line 2833)
    T2S_5147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 17), 'T2S')
    # Obtaining the member '__getitem__' of a type (line 2833)
    getitem___5148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2833, 17), T2S_5147, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2833)
    subscript_call_result_5149 = invoke(stypy.reporting.localization.Localization(__file__, 2833, 17), getitem___5148, int_5146)
    
    # Applying the binary operator '!=' (line 2833)
    result_ne_5150 = python_operator(stypy.reporting.localization.Localization(__file__, 2833, 7), '!=', subscript_call_result_5145, subscript_call_result_5149)
    
    # Testing the type of an if condition (line 2833)
    if_condition_5151 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2833, 4), result_ne_5150)
    # Assigning a type to the variable 'if_condition_5151' (line 2833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2833, 4), 'if_condition_5151', if_condition_5151)
    # SSA begins for if statement (line 2833)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2834)
    # Processing the call arguments (line 2834)
    str_5153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2834, 25), 'str', 'T1 and T2 must have the same number of elements.')
    # Processing the call keyword arguments (line 2834)
    kwargs_5154 = {}
    # Getting the type of 'ValueError' (line 2834)
    ValueError_5152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2834, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2834)
    ValueError_call_result_5155 = invoke(stypy.reporting.localization.Localization(__file__, 2834, 14), ValueError_5152, *[str_5153], **kwargs_5154)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2834, 8), ValueError_call_result_5155, 'raise parameter', BaseException)
    # SSA join for if statement (line 2833)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2835):
    
    # Assigning a Subscript to a Name (line 2835):
    
    # Obtaining the type of the subscript
    int_5156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2835, 12), 'int')
    # Getting the type of 'T1S' (line 2835)
    T1S_5157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 8), 'T1S')
    # Obtaining the member '__getitem__' of a type (line 2835)
    getitem___5158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2835, 8), T1S_5157, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2835)
    subscript_call_result_5159 = invoke(stypy.reporting.localization.Localization(__file__, 2835, 8), getitem___5158, int_5156)
    
    # Assigning a type to the variable 'n' (line 2835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2835, 4), 'n', subscript_call_result_5159)
    
    # Assigning a Dict to a Name (line 2836):
    
    # Assigning a Dict to a Name (line 2836):
    
    # Obtaining an instance of the builtin type 'dict' (line 2836)
    dict_5160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2836, 9), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2836)
    
    # Assigning a type to the variable 'd1' (line 2836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2836, 4), 'd1', dict_5160)
    
    # Assigning a Dict to a Name (line 2837):
    
    # Assigning a Dict to a Name (line 2837):
    
    # Obtaining an instance of the builtin type 'dict' (line 2837)
    dict_5161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2837, 9), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 2837)
    
    # Assigning a type to the variable 'd2' (line 2837)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2837, 4), 'd2', dict_5161)
    
    
    # Call to xrange(...): (line 2838)
    # Processing the call arguments (line 2838)
    int_5163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2838, 20), 'int')
    # Getting the type of 'n' (line 2838)
    n_5164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2838, 23), 'n', False)
    # Processing the call keyword arguments (line 2838)
    kwargs_5165 = {}
    # Getting the type of 'xrange' (line 2838)
    xrange_5162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2838, 13), 'xrange', False)
    # Calling xrange(args, kwargs) (line 2838)
    xrange_call_result_5166 = invoke(stypy.reporting.localization.Localization(__file__, 2838, 13), xrange_5162, *[int_5163, n_5164], **kwargs_5165)
    
    # Testing the type of a for loop iterable (line 2838)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2838, 4), xrange_call_result_5166)
    # Getting the type of the for loop variable (line 2838)
    for_loop_var_5167 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2838, 4), xrange_call_result_5166)
    # Assigning a type to the variable 'i' (line 2838)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2838, 4), 'i', for_loop_var_5167)
    # SSA begins for a for statement (line 2838)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2839)
    i_5168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 14), 'i')
    # Getting the type of 'T1' (line 2839)
    T1_5169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 11), 'T1')
    # Obtaining the member '__getitem__' of a type (line 2839)
    getitem___5170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2839, 11), T1_5169, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2839)
    subscript_call_result_5171 = invoke(stypy.reporting.localization.Localization(__file__, 2839, 11), getitem___5170, i_5168)
    
    # Getting the type of 'd1' (line 2839)
    d1_5172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 20), 'd1')
    # Applying the binary operator 'in' (line 2839)
    result_contains_5173 = python_operator(stypy.reporting.localization.Localization(__file__, 2839, 11), 'in', subscript_call_result_5171, d1_5172)
    
    # Testing the type of an if condition (line 2839)
    if_condition_5174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2839, 8), result_contains_5173)
    # Assigning a type to the variable 'if_condition_5174' (line 2839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2839, 8), 'if_condition_5174', if_condition_5174)
    # SSA begins for if statement (line 2839)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2840)
    i_5175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 22), 'i')
    # Getting the type of 'T2' (line 2840)
    T2_5176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 19), 'T2')
    # Obtaining the member '__getitem__' of a type (line 2840)
    getitem___5177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2840, 19), T2_5176, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2840)
    subscript_call_result_5178 = invoke(stypy.reporting.localization.Localization(__file__, 2840, 19), getitem___5177, i_5175)
    
    # Getting the type of 'd2' (line 2840)
    d2_5179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2840, 28), 'd2')
    # Applying the binary operator 'in' (line 2840)
    result_contains_5180 = python_operator(stypy.reporting.localization.Localization(__file__, 2840, 19), 'in', subscript_call_result_5178, d2_5179)
    
    # Applying the 'not' unary operator (line 2840)
    result_not__5181 = python_operator(stypy.reporting.localization.Localization(__file__, 2840, 15), 'not', result_contains_5180)
    
    # Testing the type of an if condition (line 2840)
    if_condition_5182 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2840, 12), result_not__5181)
    # Assigning a type to the variable 'if_condition_5182' (line 2840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2840, 12), 'if_condition_5182', if_condition_5182)
    # SSA begins for if statement (line 2840)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 2841)
    False_5183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 23), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2841)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2841, 16), 'stypy_return_type', False_5183)
    # SSA join for if statement (line 2840)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2842)
    i_5184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 21), 'i')
    # Getting the type of 'T1' (line 2842)
    T1_5185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 18), 'T1')
    # Obtaining the member '__getitem__' of a type (line 2842)
    getitem___5186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 18), T1_5185, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2842)
    subscript_call_result_5187 = invoke(stypy.reporting.localization.Localization(__file__, 2842, 18), getitem___5186, i_5184)
    
    # Getting the type of 'd1' (line 2842)
    d1_5188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 15), 'd1')
    # Obtaining the member '__getitem__' of a type (line 2842)
    getitem___5189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 15), d1_5188, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2842)
    subscript_call_result_5190 = invoke(stypy.reporting.localization.Localization(__file__, 2842, 15), getitem___5189, subscript_call_result_5187)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2842)
    i_5191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 31), 'i')
    # Getting the type of 'T2' (line 2842)
    T2_5192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 28), 'T2')
    # Obtaining the member '__getitem__' of a type (line 2842)
    getitem___5193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 28), T2_5192, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2842)
    subscript_call_result_5194 = invoke(stypy.reporting.localization.Localization(__file__, 2842, 28), getitem___5193, i_5191)
    
    # Applying the binary operator '!=' (line 2842)
    result_ne_5195 = python_operator(stypy.reporting.localization.Localization(__file__, 2842, 15), '!=', subscript_call_result_5190, subscript_call_result_5194)
    
    
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2842)
    i_5196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 43), 'i')
    # Getting the type of 'T2' (line 2842)
    T2_5197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 40), 'T2')
    # Obtaining the member '__getitem__' of a type (line 2842)
    getitem___5198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 40), T2_5197, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2842)
    subscript_call_result_5199 = invoke(stypy.reporting.localization.Localization(__file__, 2842, 40), getitem___5198, i_5196)
    
    # Getting the type of 'd2' (line 2842)
    d2_5200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 37), 'd2')
    # Obtaining the member '__getitem__' of a type (line 2842)
    getitem___5201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 37), d2_5200, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2842)
    subscript_call_result_5202 = invoke(stypy.reporting.localization.Localization(__file__, 2842, 37), getitem___5201, subscript_call_result_5199)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2842)
    i_5203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 53), 'i')
    # Getting the type of 'T1' (line 2842)
    T1_5204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 50), 'T1')
    # Obtaining the member '__getitem__' of a type (line 2842)
    getitem___5205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 50), T1_5204, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2842)
    subscript_call_result_5206 = invoke(stypy.reporting.localization.Localization(__file__, 2842, 50), getitem___5205, i_5203)
    
    # Applying the binary operator '!=' (line 2842)
    result_ne_5207 = python_operator(stypy.reporting.localization.Localization(__file__, 2842, 37), '!=', subscript_call_result_5202, subscript_call_result_5206)
    
    # Applying the binary operator 'or' (line 2842)
    result_or_keyword_5208 = python_operator(stypy.reporting.localization.Localization(__file__, 2842, 15), 'or', result_ne_5195, result_ne_5207)
    
    # Testing the type of an if condition (line 2842)
    if_condition_5209 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2842, 12), result_or_keyword_5208)
    # Assigning a type to the variable 'if_condition_5209' (line 2842)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2842, 12), 'if_condition_5209', if_condition_5209)
    # SSA begins for if statement (line 2842)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 2843)
    False_5210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2843, 23), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 16), 'stypy_return_type', False_5210)
    # SSA join for if statement (line 2842)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2839)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2844)
    i_5211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 16), 'i')
    # Getting the type of 'T2' (line 2844)
    T2_5212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 13), 'T2')
    # Obtaining the member '__getitem__' of a type (line 2844)
    getitem___5213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2844, 13), T2_5212, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2844)
    subscript_call_result_5214 = invoke(stypy.reporting.localization.Localization(__file__, 2844, 13), getitem___5213, i_5211)
    
    # Getting the type of 'd2' (line 2844)
    d2_5215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 22), 'd2')
    # Applying the binary operator 'in' (line 2844)
    result_contains_5216 = python_operator(stypy.reporting.localization.Localization(__file__, 2844, 13), 'in', subscript_call_result_5214, d2_5215)
    
    # Testing the type of an if condition (line 2844)
    if_condition_5217 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2844, 13), result_contains_5216)
    # Assigning a type to the variable 'if_condition_5217' (line 2844)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2844, 13), 'if_condition_5217', if_condition_5217)
    # SSA begins for if statement (line 2844)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'False' (line 2845)
    False_5218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 19), 'False')
    # Assigning a type to the variable 'stypy_return_type' (line 2845)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2845, 12), 'stypy_return_type', False_5218)
    # SSA branch for the else part of an if statement (line 2844)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Subscript (line 2847):
    
    # Assigning a Subscript to a Subscript (line 2847):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2847)
    i_5219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 27), 'i')
    # Getting the type of 'T2' (line 2847)
    T2_5220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 24), 'T2')
    # Obtaining the member '__getitem__' of a type (line 2847)
    getitem___5221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2847, 24), T2_5220, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2847)
    subscript_call_result_5222 = invoke(stypy.reporting.localization.Localization(__file__, 2847, 24), getitem___5221, i_5219)
    
    # Getting the type of 'd1' (line 2847)
    d1_5223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 12), 'd1')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2847)
    i_5224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 18), 'i')
    # Getting the type of 'T1' (line 2847)
    T1_5225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 15), 'T1')
    # Obtaining the member '__getitem__' of a type (line 2847)
    getitem___5226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2847, 15), T1_5225, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2847)
    subscript_call_result_5227 = invoke(stypy.reporting.localization.Localization(__file__, 2847, 15), getitem___5226, i_5224)
    
    # Storing an element on a container (line 2847)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2847, 12), d1_5223, (subscript_call_result_5227, subscript_call_result_5222))
    
    # Assigning a Subscript to a Subscript (line 2848):
    
    # Assigning a Subscript to a Subscript (line 2848):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2848)
    i_5228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 27), 'i')
    # Getting the type of 'T1' (line 2848)
    T1_5229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 24), 'T1')
    # Obtaining the member '__getitem__' of a type (line 2848)
    getitem___5230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2848, 24), T1_5229, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2848)
    subscript_call_result_5231 = invoke(stypy.reporting.localization.Localization(__file__, 2848, 24), getitem___5230, i_5228)
    
    # Getting the type of 'd2' (line 2848)
    d2_5232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 12), 'd2')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2848)
    i_5233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 18), 'i')
    # Getting the type of 'T2' (line 2848)
    T2_5234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 15), 'T2')
    # Obtaining the member '__getitem__' of a type (line 2848)
    getitem___5235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2848, 15), T2_5234, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2848)
    subscript_call_result_5236 = invoke(stypy.reporting.localization.Localization(__file__, 2848, 15), getitem___5235, i_5233)
    
    # Storing an element on a container (line 2848)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2848, 12), d2_5232, (subscript_call_result_5236, subscript_call_result_5231))
    # SSA join for if statement (line 2844)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2839)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'True' (line 2849)
    True_5237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 11), 'True')
    # Assigning a type to the variable 'stypy_return_type' (line 2849)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2849, 4), 'stypy_return_type', True_5237)
    
    # ################# End of 'is_isomorphic(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'is_isomorphic' in the type store
    # Getting the type of 'stypy_return_type' (line 2800)
    stypy_return_type_5238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_5238)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'is_isomorphic'
    return stypy_return_type_5238

# Assigning a type to the variable 'is_isomorphic' (line 2800)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2800, 0), 'is_isomorphic', is_isomorphic)

@norecursion
def maxdists(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'maxdists'
    module_type_store = module_type_store.open_function_context('maxdists', 2852, 0, False)
    
    # Passed parameters checking function
    maxdists.stypy_localization = localization
    maxdists.stypy_type_of_self = None
    maxdists.stypy_type_store = module_type_store
    maxdists.stypy_function_name = 'maxdists'
    maxdists.stypy_param_names_list = ['Z']
    maxdists.stypy_varargs_param_name = None
    maxdists.stypy_kwargs_param_name = None
    maxdists.stypy_call_defaults = defaults
    maxdists.stypy_call_varargs = varargs
    maxdists.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'maxdists', ['Z'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'maxdists', localization, ['Z'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'maxdists(...)' code ##################

    str_5239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2871, (-1)), 'str', '\n    Return the maximum distance between any non-singleton cluster.\n\n    Parameters\n    ----------\n    Z : ndarray\n        The hierarchical clustering encoded as a matrix. See\n        ``linkage`` for more information.\n\n    Returns\n    -------\n    maxdists : ndarray\n        A ``(n-1)`` sized numpy array of doubles; ``MD[i]`` represents\n        the maximum distance between any cluster (including\n        singletons) below and including the node with index i. More\n        specifically, ``MD[i] = Z[Q(i)-n, 2].max()`` where ``Q(i)`` is the\n        set of all node indices below and including node i.\n\n    ')
    
    # Assigning a Call to a Name (line 2872):
    
    # Assigning a Call to a Name (line 2872):
    
    # Call to asarray(...): (line 2872)
    # Processing the call arguments (line 2872)
    # Getting the type of 'Z' (line 2872)
    Z_5242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 19), 'Z', False)
    # Processing the call keyword arguments (line 2872)
    str_5243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2872, 28), 'str', 'c')
    keyword_5244 = str_5243
    # Getting the type of 'np' (line 2872)
    np_5245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 39), 'np', False)
    # Obtaining the member 'double' of a type (line 2872)
    double_5246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2872, 39), np_5245, 'double')
    keyword_5247 = double_5246
    kwargs_5248 = {'dtype': keyword_5247, 'order': keyword_5244}
    # Getting the type of 'np' (line 2872)
    np_5240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2872)
    asarray_5241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2872, 8), np_5240, 'asarray')
    # Calling asarray(args, kwargs) (line 2872)
    asarray_call_result_5249 = invoke(stypy.reporting.localization.Localization(__file__, 2872, 8), asarray_5241, *[Z_5242], **kwargs_5248)
    
    # Assigning a type to the variable 'Z' (line 2872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2872, 4), 'Z', asarray_call_result_5249)
    
    # Call to is_valid_linkage(...): (line 2873)
    # Processing the call arguments (line 2873)
    # Getting the type of 'Z' (line 2873)
    Z_5251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 21), 'Z', False)
    # Processing the call keyword arguments (line 2873)
    # Getting the type of 'True' (line 2873)
    True_5252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 30), 'True', False)
    keyword_5253 = True_5252
    str_5254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2873, 41), 'str', 'Z')
    keyword_5255 = str_5254
    kwargs_5256 = {'throw': keyword_5253, 'name': keyword_5255}
    # Getting the type of 'is_valid_linkage' (line 2873)
    is_valid_linkage_5250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 2873)
    is_valid_linkage_call_result_5257 = invoke(stypy.reporting.localization.Localization(__file__, 2873, 4), is_valid_linkage_5250, *[Z_5251], **kwargs_5256)
    
    
    # Assigning a BinOp to a Name (line 2875):
    
    # Assigning a BinOp to a Name (line 2875):
    
    # Obtaining the type of the subscript
    int_5258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2875, 16), 'int')
    # Getting the type of 'Z' (line 2875)
    Z_5259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2875, 8), 'Z')
    # Obtaining the member 'shape' of a type (line 2875)
    shape_5260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2875, 8), Z_5259, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2875)
    getitem___5261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2875, 8), shape_5260, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2875)
    subscript_call_result_5262 = invoke(stypy.reporting.localization.Localization(__file__, 2875, 8), getitem___5261, int_5258)
    
    int_5263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2875, 21), 'int')
    # Applying the binary operator '+' (line 2875)
    result_add_5264 = python_operator(stypy.reporting.localization.Localization(__file__, 2875, 8), '+', subscript_call_result_5262, int_5263)
    
    # Assigning a type to the variable 'n' (line 2875)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2875, 4), 'n', result_add_5264)
    
    # Assigning a Call to a Name (line 2876):
    
    # Assigning a Call to a Name (line 2876):
    
    # Call to zeros(...): (line 2876)
    # Processing the call arguments (line 2876)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2876)
    tuple_5267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2876, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2876)
    # Adding element type (line 2876)
    # Getting the type of 'n' (line 2876)
    n_5268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2876, 19), 'n', False)
    int_5269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2876, 23), 'int')
    # Applying the binary operator '-' (line 2876)
    result_sub_5270 = python_operator(stypy.reporting.localization.Localization(__file__, 2876, 19), '-', n_5268, int_5269)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2876, 19), tuple_5267, result_sub_5270)
    
    # Processing the call keyword arguments (line 2876)
    kwargs_5271 = {}
    # Getting the type of 'np' (line 2876)
    np_5265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2876, 9), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2876)
    zeros_5266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2876, 9), np_5265, 'zeros')
    # Calling zeros(args, kwargs) (line 2876)
    zeros_call_result_5272 = invoke(stypy.reporting.localization.Localization(__file__, 2876, 9), zeros_5266, *[tuple_5267], **kwargs_5271)
    
    # Assigning a type to the variable 'MD' (line 2876)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2876, 4), 'MD', zeros_call_result_5272)
    
    # Assigning a Call to a List (line 2877):
    
    # Assigning a Subscript to a Name (line 2877):
    
    # Obtaining the type of the subscript
    int_5273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2877, 4), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 2877)
    # Processing the call arguments (line 2877)
    
    # Obtaining an instance of the builtin type 'list' (line 2877)
    list_5275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2877, 39), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2877)
    # Adding element type (line 2877)
    # Getting the type of 'Z' (line 2877)
    Z_5276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2877, 40), 'Z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2877, 39), list_5275, Z_5276)
    
    # Processing the call keyword arguments (line 2877)
    kwargs_5277 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 2877)
    _copy_arrays_if_base_present_5274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2877, 10), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 2877)
    _copy_arrays_if_base_present_call_result_5278 = invoke(stypy.reporting.localization.Localization(__file__, 2877, 10), _copy_arrays_if_base_present_5274, *[list_5275], **kwargs_5277)
    
    # Obtaining the member '__getitem__' of a type (line 2877)
    getitem___5279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2877, 4), _copy_arrays_if_base_present_call_result_5278, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2877)
    subscript_call_result_5280 = invoke(stypy.reporting.localization.Localization(__file__, 2877, 4), getitem___5279, int_5273)
    
    # Assigning a type to the variable 'list_var_assignment_484' (line 2877)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2877, 4), 'list_var_assignment_484', subscript_call_result_5280)
    
    # Assigning a Name to a Name (line 2877):
    # Getting the type of 'list_var_assignment_484' (line 2877)
    list_var_assignment_484_5281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2877, 4), 'list_var_assignment_484')
    # Assigning a type to the variable 'Z' (line 2877)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2877, 5), 'Z', list_var_assignment_484_5281)
    
    # Call to get_max_dist_for_each_cluster(...): (line 2878)
    # Processing the call arguments (line 2878)
    # Getting the type of 'Z' (line 2878)
    Z_5284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 45), 'Z', False)
    # Getting the type of 'MD' (line 2878)
    MD_5285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 48), 'MD', False)
    
    # Call to int(...): (line 2878)
    # Processing the call arguments (line 2878)
    # Getting the type of 'n' (line 2878)
    n_5287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 56), 'n', False)
    # Processing the call keyword arguments (line 2878)
    kwargs_5288 = {}
    # Getting the type of 'int' (line 2878)
    int_5286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 52), 'int', False)
    # Calling int(args, kwargs) (line 2878)
    int_call_result_5289 = invoke(stypy.reporting.localization.Localization(__file__, 2878, 52), int_5286, *[n_5287], **kwargs_5288)
    
    # Processing the call keyword arguments (line 2878)
    kwargs_5290 = {}
    # Getting the type of '_hierarchy' (line 2878)
    _hierarchy_5282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 4), '_hierarchy', False)
    # Obtaining the member 'get_max_dist_for_each_cluster' of a type (line 2878)
    get_max_dist_for_each_cluster_5283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2878, 4), _hierarchy_5282, 'get_max_dist_for_each_cluster')
    # Calling get_max_dist_for_each_cluster(args, kwargs) (line 2878)
    get_max_dist_for_each_cluster_call_result_5291 = invoke(stypy.reporting.localization.Localization(__file__, 2878, 4), get_max_dist_for_each_cluster_5283, *[Z_5284, MD_5285, int_call_result_5289], **kwargs_5290)
    
    # Getting the type of 'MD' (line 2879)
    MD_5292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2879, 11), 'MD')
    # Assigning a type to the variable 'stypy_return_type' (line 2879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2879, 4), 'stypy_return_type', MD_5292)
    
    # ################# End of 'maxdists(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'maxdists' in the type store
    # Getting the type of 'stypy_return_type' (line 2852)
    stypy_return_type_5293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_5293)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'maxdists'
    return stypy_return_type_5293

# Assigning a type to the variable 'maxdists' (line 2852)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2852, 0), 'maxdists', maxdists)

@norecursion
def maxinconsts(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'maxinconsts'
    module_type_store = module_type_store.open_function_context('maxinconsts', 2882, 0, False)
    
    # Passed parameters checking function
    maxinconsts.stypy_localization = localization
    maxinconsts.stypy_type_of_self = None
    maxinconsts.stypy_type_store = module_type_store
    maxinconsts.stypy_function_name = 'maxinconsts'
    maxinconsts.stypy_param_names_list = ['Z', 'R']
    maxinconsts.stypy_varargs_param_name = None
    maxinconsts.stypy_kwargs_param_name = None
    maxinconsts.stypy_call_defaults = defaults
    maxinconsts.stypy_call_varargs = varargs
    maxinconsts.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'maxinconsts', ['Z', 'R'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'maxinconsts', localization, ['Z', 'R'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'maxinconsts(...)' code ##################

    str_5294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2900, (-1)), 'str', '\n    Return the maximum inconsistency coefficient for each\n    non-singleton cluster and its descendents.\n\n    Parameters\n    ----------\n    Z : ndarray\n        The hierarchical clustering encoded as a matrix. See\n        `linkage` for more information.\n    R : ndarray\n        The inconsistency matrix.\n\n    Returns\n    -------\n    MI : ndarray\n        A monotonic ``(n-1)``-sized numpy array of doubles.\n\n    ')
    
    # Assigning a Call to a Name (line 2901):
    
    # Assigning a Call to a Name (line 2901):
    
    # Call to asarray(...): (line 2901)
    # Processing the call arguments (line 2901)
    # Getting the type of 'Z' (line 2901)
    Z_5297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 19), 'Z', False)
    # Processing the call keyword arguments (line 2901)
    str_5298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2901, 28), 'str', 'c')
    keyword_5299 = str_5298
    kwargs_5300 = {'order': keyword_5299}
    # Getting the type of 'np' (line 2901)
    np_5295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2901)
    asarray_5296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2901, 8), np_5295, 'asarray')
    # Calling asarray(args, kwargs) (line 2901)
    asarray_call_result_5301 = invoke(stypy.reporting.localization.Localization(__file__, 2901, 8), asarray_5296, *[Z_5297], **kwargs_5300)
    
    # Assigning a type to the variable 'Z' (line 2901)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2901, 4), 'Z', asarray_call_result_5301)
    
    # Assigning a Call to a Name (line 2902):
    
    # Assigning a Call to a Name (line 2902):
    
    # Call to asarray(...): (line 2902)
    # Processing the call arguments (line 2902)
    # Getting the type of 'R' (line 2902)
    R_5304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 19), 'R', False)
    # Processing the call keyword arguments (line 2902)
    str_5305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2902, 28), 'str', 'c')
    keyword_5306 = str_5305
    kwargs_5307 = {'order': keyword_5306}
    # Getting the type of 'np' (line 2902)
    np_5302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2902, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2902)
    asarray_5303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2902, 8), np_5302, 'asarray')
    # Calling asarray(args, kwargs) (line 2902)
    asarray_call_result_5308 = invoke(stypy.reporting.localization.Localization(__file__, 2902, 8), asarray_5303, *[R_5304], **kwargs_5307)
    
    # Assigning a type to the variable 'R' (line 2902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2902, 4), 'R', asarray_call_result_5308)
    
    # Call to is_valid_linkage(...): (line 2903)
    # Processing the call arguments (line 2903)
    # Getting the type of 'Z' (line 2903)
    Z_5310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 21), 'Z', False)
    # Processing the call keyword arguments (line 2903)
    # Getting the type of 'True' (line 2903)
    True_5311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 30), 'True', False)
    keyword_5312 = True_5311
    str_5313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2903, 41), 'str', 'Z')
    keyword_5314 = str_5313
    kwargs_5315 = {'throw': keyword_5312, 'name': keyword_5314}
    # Getting the type of 'is_valid_linkage' (line 2903)
    is_valid_linkage_5309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 2903)
    is_valid_linkage_call_result_5316 = invoke(stypy.reporting.localization.Localization(__file__, 2903, 4), is_valid_linkage_5309, *[Z_5310], **kwargs_5315)
    
    
    # Call to is_valid_im(...): (line 2904)
    # Processing the call arguments (line 2904)
    # Getting the type of 'R' (line 2904)
    R_5318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 16), 'R', False)
    # Processing the call keyword arguments (line 2904)
    # Getting the type of 'True' (line 2904)
    True_5319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 25), 'True', False)
    keyword_5320 = True_5319
    str_5321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2904, 36), 'str', 'R')
    keyword_5322 = str_5321
    kwargs_5323 = {'throw': keyword_5320, 'name': keyword_5322}
    # Getting the type of 'is_valid_im' (line 2904)
    is_valid_im_5317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2904, 4), 'is_valid_im', False)
    # Calling is_valid_im(args, kwargs) (line 2904)
    is_valid_im_call_result_5324 = invoke(stypy.reporting.localization.Localization(__file__, 2904, 4), is_valid_im_5317, *[R_5318], **kwargs_5323)
    
    
    # Assigning a BinOp to a Name (line 2906):
    
    # Assigning a BinOp to a Name (line 2906):
    
    # Obtaining the type of the subscript
    int_5325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2906, 16), 'int')
    # Getting the type of 'Z' (line 2906)
    Z_5326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2906, 8), 'Z')
    # Obtaining the member 'shape' of a type (line 2906)
    shape_5327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2906, 8), Z_5326, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2906)
    getitem___5328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2906, 8), shape_5327, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2906)
    subscript_call_result_5329 = invoke(stypy.reporting.localization.Localization(__file__, 2906, 8), getitem___5328, int_5325)
    
    int_5330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2906, 21), 'int')
    # Applying the binary operator '+' (line 2906)
    result_add_5331 = python_operator(stypy.reporting.localization.Localization(__file__, 2906, 8), '+', subscript_call_result_5329, int_5330)
    
    # Assigning a type to the variable 'n' (line 2906)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2906, 4), 'n', result_add_5331)
    
    
    
    # Obtaining the type of the subscript
    int_5332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2907, 15), 'int')
    # Getting the type of 'Z' (line 2907)
    Z_5333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 7), 'Z')
    # Obtaining the member 'shape' of a type (line 2907)
    shape_5334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2907, 7), Z_5333, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2907)
    getitem___5335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2907, 7), shape_5334, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2907)
    subscript_call_result_5336 = invoke(stypy.reporting.localization.Localization(__file__, 2907, 7), getitem___5335, int_5332)
    
    
    # Obtaining the type of the subscript
    int_5337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2907, 29), 'int')
    # Getting the type of 'R' (line 2907)
    R_5338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 21), 'R')
    # Obtaining the member 'shape' of a type (line 2907)
    shape_5339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2907, 21), R_5338, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2907)
    getitem___5340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2907, 21), shape_5339, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2907)
    subscript_call_result_5341 = invoke(stypy.reporting.localization.Localization(__file__, 2907, 21), getitem___5340, int_5337)
    
    # Applying the binary operator '!=' (line 2907)
    result_ne_5342 = python_operator(stypy.reporting.localization.Localization(__file__, 2907, 7), '!=', subscript_call_result_5336, subscript_call_result_5341)
    
    # Testing the type of an if condition (line 2907)
    if_condition_5343 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2907, 4), result_ne_5342)
    # Assigning a type to the variable 'if_condition_5343' (line 2907)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2907, 4), 'if_condition_5343', if_condition_5343)
    # SSA begins for if statement (line 2907)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2908)
    # Processing the call arguments (line 2908)
    str_5345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2908, 25), 'str', 'The inconsistency matrix and linkage matrix each have a different number of rows.')
    # Processing the call keyword arguments (line 2908)
    kwargs_5346 = {}
    # Getting the type of 'ValueError' (line 2908)
    ValueError_5344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2908)
    ValueError_call_result_5347 = invoke(stypy.reporting.localization.Localization(__file__, 2908, 14), ValueError_5344, *[str_5345], **kwargs_5346)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2908, 8), ValueError_call_result_5347, 'raise parameter', BaseException)
    # SSA join for if statement (line 2907)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2910):
    
    # Assigning a Call to a Name (line 2910):
    
    # Call to zeros(...): (line 2910)
    # Processing the call arguments (line 2910)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2910)
    tuple_5350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2910, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2910)
    # Adding element type (line 2910)
    # Getting the type of 'n' (line 2910)
    n_5351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2910, 19), 'n', False)
    int_5352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2910, 23), 'int')
    # Applying the binary operator '-' (line 2910)
    result_sub_5353 = python_operator(stypy.reporting.localization.Localization(__file__, 2910, 19), '-', n_5351, int_5352)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2910, 19), tuple_5350, result_sub_5353)
    
    # Processing the call keyword arguments (line 2910)
    kwargs_5354 = {}
    # Getting the type of 'np' (line 2910)
    np_5348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2910, 9), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2910)
    zeros_5349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2910, 9), np_5348, 'zeros')
    # Calling zeros(args, kwargs) (line 2910)
    zeros_call_result_5355 = invoke(stypy.reporting.localization.Localization(__file__, 2910, 9), zeros_5349, *[tuple_5350], **kwargs_5354)
    
    # Assigning a type to the variable 'MI' (line 2910)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2910, 4), 'MI', zeros_call_result_5355)
    
    # Assigning a Call to a List (line 2911):
    
    # Assigning a Subscript to a Name (line 2911):
    
    # Obtaining the type of the subscript
    int_5356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2911, 4), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 2911)
    # Processing the call arguments (line 2911)
    
    # Obtaining an instance of the builtin type 'list' (line 2911)
    list_5358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2911, 42), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2911)
    # Adding element type (line 2911)
    # Getting the type of 'Z' (line 2911)
    Z_5359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 43), 'Z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2911, 42), list_5358, Z_5359)
    # Adding element type (line 2911)
    # Getting the type of 'R' (line 2911)
    R_5360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 46), 'R', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2911, 42), list_5358, R_5360)
    
    # Processing the call keyword arguments (line 2911)
    kwargs_5361 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 2911)
    _copy_arrays_if_base_present_5357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 13), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 2911)
    _copy_arrays_if_base_present_call_result_5362 = invoke(stypy.reporting.localization.Localization(__file__, 2911, 13), _copy_arrays_if_base_present_5357, *[list_5358], **kwargs_5361)
    
    # Obtaining the member '__getitem__' of a type (line 2911)
    getitem___5363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2911, 4), _copy_arrays_if_base_present_call_result_5362, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2911)
    subscript_call_result_5364 = invoke(stypy.reporting.localization.Localization(__file__, 2911, 4), getitem___5363, int_5356)
    
    # Assigning a type to the variable 'list_var_assignment_485' (line 2911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2911, 4), 'list_var_assignment_485', subscript_call_result_5364)
    
    # Assigning a Subscript to a Name (line 2911):
    
    # Obtaining the type of the subscript
    int_5365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2911, 4), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 2911)
    # Processing the call arguments (line 2911)
    
    # Obtaining an instance of the builtin type 'list' (line 2911)
    list_5367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2911, 42), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2911)
    # Adding element type (line 2911)
    # Getting the type of 'Z' (line 2911)
    Z_5368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 43), 'Z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2911, 42), list_5367, Z_5368)
    # Adding element type (line 2911)
    # Getting the type of 'R' (line 2911)
    R_5369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 46), 'R', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2911, 42), list_5367, R_5369)
    
    # Processing the call keyword arguments (line 2911)
    kwargs_5370 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 2911)
    _copy_arrays_if_base_present_5366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 13), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 2911)
    _copy_arrays_if_base_present_call_result_5371 = invoke(stypy.reporting.localization.Localization(__file__, 2911, 13), _copy_arrays_if_base_present_5366, *[list_5367], **kwargs_5370)
    
    # Obtaining the member '__getitem__' of a type (line 2911)
    getitem___5372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2911, 4), _copy_arrays_if_base_present_call_result_5371, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2911)
    subscript_call_result_5373 = invoke(stypy.reporting.localization.Localization(__file__, 2911, 4), getitem___5372, int_5365)
    
    # Assigning a type to the variable 'list_var_assignment_486' (line 2911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2911, 4), 'list_var_assignment_486', subscript_call_result_5373)
    
    # Assigning a Name to a Name (line 2911):
    # Getting the type of 'list_var_assignment_485' (line 2911)
    list_var_assignment_485_5374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 4), 'list_var_assignment_485')
    # Assigning a type to the variable 'Z' (line 2911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2911, 5), 'Z', list_var_assignment_485_5374)
    
    # Assigning a Name to a Name (line 2911):
    # Getting the type of 'list_var_assignment_486' (line 2911)
    list_var_assignment_486_5375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2911, 4), 'list_var_assignment_486')
    # Assigning a type to the variable 'R' (line 2911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2911, 8), 'R', list_var_assignment_486_5375)
    
    # Call to get_max_Rfield_for_each_cluster(...): (line 2912)
    # Processing the call arguments (line 2912)
    # Getting the type of 'Z' (line 2912)
    Z_5378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 47), 'Z', False)
    # Getting the type of 'R' (line 2912)
    R_5379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 50), 'R', False)
    # Getting the type of 'MI' (line 2912)
    MI_5380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 53), 'MI', False)
    
    # Call to int(...): (line 2912)
    # Processing the call arguments (line 2912)
    # Getting the type of 'n' (line 2912)
    n_5382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 61), 'n', False)
    # Processing the call keyword arguments (line 2912)
    kwargs_5383 = {}
    # Getting the type of 'int' (line 2912)
    int_5381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 57), 'int', False)
    # Calling int(args, kwargs) (line 2912)
    int_call_result_5384 = invoke(stypy.reporting.localization.Localization(__file__, 2912, 57), int_5381, *[n_5382], **kwargs_5383)
    
    int_5385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2912, 65), 'int')
    # Processing the call keyword arguments (line 2912)
    kwargs_5386 = {}
    # Getting the type of '_hierarchy' (line 2912)
    _hierarchy_5376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2912, 4), '_hierarchy', False)
    # Obtaining the member 'get_max_Rfield_for_each_cluster' of a type (line 2912)
    get_max_Rfield_for_each_cluster_5377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2912, 4), _hierarchy_5376, 'get_max_Rfield_for_each_cluster')
    # Calling get_max_Rfield_for_each_cluster(args, kwargs) (line 2912)
    get_max_Rfield_for_each_cluster_call_result_5387 = invoke(stypy.reporting.localization.Localization(__file__, 2912, 4), get_max_Rfield_for_each_cluster_5377, *[Z_5378, R_5379, MI_5380, int_call_result_5384, int_5385], **kwargs_5386)
    
    # Getting the type of 'MI' (line 2913)
    MI_5388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 11), 'MI')
    # Assigning a type to the variable 'stypy_return_type' (line 2913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2913, 4), 'stypy_return_type', MI_5388)
    
    # ################# End of 'maxinconsts(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'maxinconsts' in the type store
    # Getting the type of 'stypy_return_type' (line 2882)
    stypy_return_type_5389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_5389)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'maxinconsts'
    return stypy_return_type_5389

# Assigning a type to the variable 'maxinconsts' (line 2882)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2882, 0), 'maxinconsts', maxinconsts)

@norecursion
def maxRstat(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'maxRstat'
    module_type_store = module_type_store.open_function_context('maxRstat', 2916, 0, False)
    
    # Passed parameters checking function
    maxRstat.stypy_localization = localization
    maxRstat.stypy_type_of_self = None
    maxRstat.stypy_type_store = module_type_store
    maxRstat.stypy_function_name = 'maxRstat'
    maxRstat.stypy_param_names_list = ['Z', 'R', 'i']
    maxRstat.stypy_varargs_param_name = None
    maxRstat.stypy_kwargs_param_name = None
    maxRstat.stypy_call_defaults = defaults
    maxRstat.stypy_call_varargs = varargs
    maxRstat.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'maxRstat', ['Z', 'R', 'i'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'maxRstat', localization, ['Z', 'R', 'i'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'maxRstat(...)' code ##################

    str_5390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2940, (-1)), 'str', "\n    Return the maximum statistic for each non-singleton cluster and its\n    descendents.\n\n    Parameters\n    ----------\n    Z : array_like\n        The hierarchical clustering encoded as a matrix. See `linkage` for more\n        information.\n    R : array_like\n        The inconsistency matrix.\n    i : int\n        The column of `R` to use as the statistic.\n\n    Returns\n    -------\n    MR : ndarray\n        Calculates the maximum statistic for the i'th column of the\n        inconsistency matrix `R` for each non-singleton cluster\n        node. ``MR[j]`` is the maximum over ``R[Q(j)-n, i]`` where\n        ``Q(j)`` the set of all node ids corresponding to nodes below\n        and including ``j``.\n\n    ")
    
    # Assigning a Call to a Name (line 2941):
    
    # Assigning a Call to a Name (line 2941):
    
    # Call to asarray(...): (line 2941)
    # Processing the call arguments (line 2941)
    # Getting the type of 'Z' (line 2941)
    Z_5393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2941, 19), 'Z', False)
    # Processing the call keyword arguments (line 2941)
    str_5394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2941, 28), 'str', 'c')
    keyword_5395 = str_5394
    kwargs_5396 = {'order': keyword_5395}
    # Getting the type of 'np' (line 2941)
    np_5391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2941, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2941)
    asarray_5392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2941, 8), np_5391, 'asarray')
    # Calling asarray(args, kwargs) (line 2941)
    asarray_call_result_5397 = invoke(stypy.reporting.localization.Localization(__file__, 2941, 8), asarray_5392, *[Z_5393], **kwargs_5396)
    
    # Assigning a type to the variable 'Z' (line 2941)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2941, 4), 'Z', asarray_call_result_5397)
    
    # Assigning a Call to a Name (line 2942):
    
    # Assigning a Call to a Name (line 2942):
    
    # Call to asarray(...): (line 2942)
    # Processing the call arguments (line 2942)
    # Getting the type of 'R' (line 2942)
    R_5400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 19), 'R', False)
    # Processing the call keyword arguments (line 2942)
    str_5401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2942, 28), 'str', 'c')
    keyword_5402 = str_5401
    kwargs_5403 = {'order': keyword_5402}
    # Getting the type of 'np' (line 2942)
    np_5398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2942)
    asarray_5399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2942, 8), np_5398, 'asarray')
    # Calling asarray(args, kwargs) (line 2942)
    asarray_call_result_5404 = invoke(stypy.reporting.localization.Localization(__file__, 2942, 8), asarray_5399, *[R_5400], **kwargs_5403)
    
    # Assigning a type to the variable 'R' (line 2942)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2942, 4), 'R', asarray_call_result_5404)
    
    # Call to is_valid_linkage(...): (line 2943)
    # Processing the call arguments (line 2943)
    # Getting the type of 'Z' (line 2943)
    Z_5406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2943, 21), 'Z', False)
    # Processing the call keyword arguments (line 2943)
    # Getting the type of 'True' (line 2943)
    True_5407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2943, 30), 'True', False)
    keyword_5408 = True_5407
    str_5409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2943, 41), 'str', 'Z')
    keyword_5410 = str_5409
    kwargs_5411 = {'throw': keyword_5408, 'name': keyword_5410}
    # Getting the type of 'is_valid_linkage' (line 2943)
    is_valid_linkage_5405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2943, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 2943)
    is_valid_linkage_call_result_5412 = invoke(stypy.reporting.localization.Localization(__file__, 2943, 4), is_valid_linkage_5405, *[Z_5406], **kwargs_5411)
    
    
    # Call to is_valid_im(...): (line 2944)
    # Processing the call arguments (line 2944)
    # Getting the type of 'R' (line 2944)
    R_5414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2944, 16), 'R', False)
    # Processing the call keyword arguments (line 2944)
    # Getting the type of 'True' (line 2944)
    True_5415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2944, 25), 'True', False)
    keyword_5416 = True_5415
    str_5417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2944, 36), 'str', 'R')
    keyword_5418 = str_5417
    kwargs_5419 = {'throw': keyword_5416, 'name': keyword_5418}
    # Getting the type of 'is_valid_im' (line 2944)
    is_valid_im_5413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2944, 4), 'is_valid_im', False)
    # Calling is_valid_im(args, kwargs) (line 2944)
    is_valid_im_call_result_5420 = invoke(stypy.reporting.localization.Localization(__file__, 2944, 4), is_valid_im_5413, *[R_5414], **kwargs_5419)
    
    
    # Type idiom detected: calculating its left and rigth part (line 2945)
    # Getting the type of 'i' (line 2945)
    i_5421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 12), 'i')
    # Getting the type of 'int' (line 2945)
    int_5422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 22), 'int')
    
    (may_be_5423, more_types_in_union_5424) = may_not_be_type(i_5421, int_5422)

    if may_be_5423:

        if more_types_in_union_5424:
            # Runtime conditional SSA (line 2945)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 'i' (line 2945)
        i_5425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 4), 'i')
        # Assigning a type to the variable 'i' (line 2945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2945, 4), 'i', remove_type_from_union(i_5425, int_5422))
        
        # Call to TypeError(...): (line 2946)
        # Processing the call arguments (line 2946)
        str_5427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2946, 24), 'str', 'The third argument must be an integer.')
        # Processing the call keyword arguments (line 2946)
        kwargs_5428 = {}
        # Getting the type of 'TypeError' (line 2946)
        TypeError_5426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 14), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 2946)
        TypeError_call_result_5429 = invoke(stypy.reporting.localization.Localization(__file__, 2946, 14), TypeError_5426, *[str_5427], **kwargs_5428)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2946, 8), TypeError_call_result_5429, 'raise parameter', BaseException)

        if more_types_in_union_5424:
            # SSA join for if statement (line 2945)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'i' (line 2947)
    i_5430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 7), 'i')
    int_5431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 11), 'int')
    # Applying the binary operator '<' (line 2947)
    result_lt_5432 = python_operator(stypy.reporting.localization.Localization(__file__, 2947, 7), '<', i_5430, int_5431)
    
    
    # Getting the type of 'i' (line 2947)
    i_5433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2947, 16), 'i')
    int_5434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2947, 20), 'int')
    # Applying the binary operator '>' (line 2947)
    result_gt_5435 = python_operator(stypy.reporting.localization.Localization(__file__, 2947, 16), '>', i_5433, int_5434)
    
    # Applying the binary operator 'or' (line 2947)
    result_or_keyword_5436 = python_operator(stypy.reporting.localization.Localization(__file__, 2947, 7), 'or', result_lt_5432, result_gt_5435)
    
    # Testing the type of an if condition (line 2947)
    if_condition_5437 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2947, 4), result_or_keyword_5436)
    # Assigning a type to the variable 'if_condition_5437' (line 2947)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2947, 4), 'if_condition_5437', if_condition_5437)
    # SSA begins for if statement (line 2947)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2948)
    # Processing the call arguments (line 2948)
    str_5439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2948, 25), 'str', 'i must be an integer between 0 and 3 inclusive.')
    # Processing the call keyword arguments (line 2948)
    kwargs_5440 = {}
    # Getting the type of 'ValueError' (line 2948)
    ValueError_5438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2948)
    ValueError_call_result_5441 = invoke(stypy.reporting.localization.Localization(__file__, 2948, 14), ValueError_5438, *[str_5439], **kwargs_5440)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2948, 8), ValueError_call_result_5441, 'raise parameter', BaseException)
    # SSA join for if statement (line 2947)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_5442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2950, 15), 'int')
    # Getting the type of 'Z' (line 2950)
    Z_5443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 7), 'Z')
    # Obtaining the member 'shape' of a type (line 2950)
    shape_5444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2950, 7), Z_5443, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2950)
    getitem___5445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2950, 7), shape_5444, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2950)
    subscript_call_result_5446 = invoke(stypy.reporting.localization.Localization(__file__, 2950, 7), getitem___5445, int_5442)
    
    
    # Obtaining the type of the subscript
    int_5447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2950, 29), 'int')
    # Getting the type of 'R' (line 2950)
    R_5448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 21), 'R')
    # Obtaining the member 'shape' of a type (line 2950)
    shape_5449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2950, 21), R_5448, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2950)
    getitem___5450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2950, 21), shape_5449, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2950)
    subscript_call_result_5451 = invoke(stypy.reporting.localization.Localization(__file__, 2950, 21), getitem___5450, int_5447)
    
    # Applying the binary operator '!=' (line 2950)
    result_ne_5452 = python_operator(stypy.reporting.localization.Localization(__file__, 2950, 7), '!=', subscript_call_result_5446, subscript_call_result_5451)
    
    # Testing the type of an if condition (line 2950)
    if_condition_5453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2950, 4), result_ne_5452)
    # Assigning a type to the variable 'if_condition_5453' (line 2950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2950, 4), 'if_condition_5453', if_condition_5453)
    # SSA begins for if statement (line 2950)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2951)
    # Processing the call arguments (line 2951)
    str_5455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2951, 25), 'str', 'The inconsistency matrix and linkage matrix each have a different number of rows.')
    # Processing the call keyword arguments (line 2951)
    kwargs_5456 = {}
    # Getting the type of 'ValueError' (line 2951)
    ValueError_5454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2951, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2951)
    ValueError_call_result_5457 = invoke(stypy.reporting.localization.Localization(__file__, 2951, 14), ValueError_5454, *[str_5455], **kwargs_5456)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2951, 8), ValueError_call_result_5457, 'raise parameter', BaseException)
    # SSA join for if statement (line 2950)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 2954):
    
    # Assigning a BinOp to a Name (line 2954):
    
    # Obtaining the type of the subscript
    int_5458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2954, 16), 'int')
    # Getting the type of 'Z' (line 2954)
    Z_5459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 8), 'Z')
    # Obtaining the member 'shape' of a type (line 2954)
    shape_5460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2954, 8), Z_5459, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2954)
    getitem___5461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2954, 8), shape_5460, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2954)
    subscript_call_result_5462 = invoke(stypy.reporting.localization.Localization(__file__, 2954, 8), getitem___5461, int_5458)
    
    int_5463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2954, 21), 'int')
    # Applying the binary operator '+' (line 2954)
    result_add_5464 = python_operator(stypy.reporting.localization.Localization(__file__, 2954, 8), '+', subscript_call_result_5462, int_5463)
    
    # Assigning a type to the variable 'n' (line 2954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2954, 4), 'n', result_add_5464)
    
    # Assigning a Call to a Name (line 2955):
    
    # Assigning a Call to a Name (line 2955):
    
    # Call to zeros(...): (line 2955)
    # Processing the call arguments (line 2955)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2955)
    tuple_5467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2955, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2955)
    # Adding element type (line 2955)
    # Getting the type of 'n' (line 2955)
    n_5468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2955, 19), 'n', False)
    int_5469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2955, 23), 'int')
    # Applying the binary operator '-' (line 2955)
    result_sub_5470 = python_operator(stypy.reporting.localization.Localization(__file__, 2955, 19), '-', n_5468, int_5469)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2955, 19), tuple_5467, result_sub_5470)
    
    # Processing the call keyword arguments (line 2955)
    kwargs_5471 = {}
    # Getting the type of 'np' (line 2955)
    np_5465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2955, 9), 'np', False)
    # Obtaining the member 'zeros' of a type (line 2955)
    zeros_5466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2955, 9), np_5465, 'zeros')
    # Calling zeros(args, kwargs) (line 2955)
    zeros_call_result_5472 = invoke(stypy.reporting.localization.Localization(__file__, 2955, 9), zeros_5466, *[tuple_5467], **kwargs_5471)
    
    # Assigning a type to the variable 'MR' (line 2955)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2955, 4), 'MR', zeros_call_result_5472)
    
    # Assigning a Call to a List (line 2956):
    
    # Assigning a Subscript to a Name (line 2956):
    
    # Obtaining the type of the subscript
    int_5473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 4), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 2956)
    # Processing the call arguments (line 2956)
    
    # Obtaining an instance of the builtin type 'list' (line 2956)
    list_5475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 42), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2956)
    # Adding element type (line 2956)
    # Getting the type of 'Z' (line 2956)
    Z_5476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 43), 'Z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2956, 42), list_5475, Z_5476)
    # Adding element type (line 2956)
    # Getting the type of 'R' (line 2956)
    R_5477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 46), 'R', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2956, 42), list_5475, R_5477)
    
    # Processing the call keyword arguments (line 2956)
    kwargs_5478 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 2956)
    _copy_arrays_if_base_present_5474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 13), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 2956)
    _copy_arrays_if_base_present_call_result_5479 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 13), _copy_arrays_if_base_present_5474, *[list_5475], **kwargs_5478)
    
    # Obtaining the member '__getitem__' of a type (line 2956)
    getitem___5480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 4), _copy_arrays_if_base_present_call_result_5479, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2956)
    subscript_call_result_5481 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 4), getitem___5480, int_5473)
    
    # Assigning a type to the variable 'list_var_assignment_487' (line 2956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2956, 4), 'list_var_assignment_487', subscript_call_result_5481)
    
    # Assigning a Subscript to a Name (line 2956):
    
    # Obtaining the type of the subscript
    int_5482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 4), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 2956)
    # Processing the call arguments (line 2956)
    
    # Obtaining an instance of the builtin type 'list' (line 2956)
    list_5484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 42), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2956)
    # Adding element type (line 2956)
    # Getting the type of 'Z' (line 2956)
    Z_5485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 43), 'Z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2956, 42), list_5484, Z_5485)
    # Adding element type (line 2956)
    # Getting the type of 'R' (line 2956)
    R_5486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 46), 'R', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2956, 42), list_5484, R_5486)
    
    # Processing the call keyword arguments (line 2956)
    kwargs_5487 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 2956)
    _copy_arrays_if_base_present_5483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 13), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 2956)
    _copy_arrays_if_base_present_call_result_5488 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 13), _copy_arrays_if_base_present_5483, *[list_5484], **kwargs_5487)
    
    # Obtaining the member '__getitem__' of a type (line 2956)
    getitem___5489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2956, 4), _copy_arrays_if_base_present_call_result_5488, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2956)
    subscript_call_result_5490 = invoke(stypy.reporting.localization.Localization(__file__, 2956, 4), getitem___5489, int_5482)
    
    # Assigning a type to the variable 'list_var_assignment_488' (line 2956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2956, 4), 'list_var_assignment_488', subscript_call_result_5490)
    
    # Assigning a Name to a Name (line 2956):
    # Getting the type of 'list_var_assignment_487' (line 2956)
    list_var_assignment_487_5491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 4), 'list_var_assignment_487')
    # Assigning a type to the variable 'Z' (line 2956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2956, 5), 'Z', list_var_assignment_487_5491)
    
    # Assigning a Name to a Name (line 2956):
    # Getting the type of 'list_var_assignment_488' (line 2956)
    list_var_assignment_488_5492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 4), 'list_var_assignment_488')
    # Assigning a type to the variable 'R' (line 2956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2956, 8), 'R', list_var_assignment_488_5492)
    
    # Call to get_max_Rfield_for_each_cluster(...): (line 2957)
    # Processing the call arguments (line 2957)
    # Getting the type of 'Z' (line 2957)
    Z_5495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 47), 'Z', False)
    # Getting the type of 'R' (line 2957)
    R_5496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 50), 'R', False)
    # Getting the type of 'MR' (line 2957)
    MR_5497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 53), 'MR', False)
    
    # Call to int(...): (line 2957)
    # Processing the call arguments (line 2957)
    # Getting the type of 'n' (line 2957)
    n_5499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 61), 'n', False)
    # Processing the call keyword arguments (line 2957)
    kwargs_5500 = {}
    # Getting the type of 'int' (line 2957)
    int_5498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 57), 'int', False)
    # Calling int(args, kwargs) (line 2957)
    int_call_result_5501 = invoke(stypy.reporting.localization.Localization(__file__, 2957, 57), int_5498, *[n_5499], **kwargs_5500)
    
    # Getting the type of 'i' (line 2957)
    i_5502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 65), 'i', False)
    # Processing the call keyword arguments (line 2957)
    kwargs_5503 = {}
    # Getting the type of '_hierarchy' (line 2957)
    _hierarchy_5493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 4), '_hierarchy', False)
    # Obtaining the member 'get_max_Rfield_for_each_cluster' of a type (line 2957)
    get_max_Rfield_for_each_cluster_5494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2957, 4), _hierarchy_5493, 'get_max_Rfield_for_each_cluster')
    # Calling get_max_Rfield_for_each_cluster(args, kwargs) (line 2957)
    get_max_Rfield_for_each_cluster_call_result_5504 = invoke(stypy.reporting.localization.Localization(__file__, 2957, 4), get_max_Rfield_for_each_cluster_5494, *[Z_5495, R_5496, MR_5497, int_call_result_5501, i_5502], **kwargs_5503)
    
    # Getting the type of 'MR' (line 2958)
    MR_5505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 11), 'MR')
    # Assigning a type to the variable 'stypy_return_type' (line 2958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2958, 4), 'stypy_return_type', MR_5505)
    
    # ################# End of 'maxRstat(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'maxRstat' in the type store
    # Getting the type of 'stypy_return_type' (line 2916)
    stypy_return_type_5506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_5506)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'maxRstat'
    return stypy_return_type_5506

# Assigning a type to the variable 'maxRstat' (line 2916)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2916, 0), 'maxRstat', maxRstat)

@norecursion
def leaders(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'leaders'
    module_type_store = module_type_store.open_function_context('leaders', 2961, 0, False)
    
    # Passed parameters checking function
    leaders.stypy_localization = localization
    leaders.stypy_type_of_self = None
    leaders.stypy_type_store = module_type_store
    leaders.stypy_function_name = 'leaders'
    leaders.stypy_param_names_list = ['Z', 'T']
    leaders.stypy_varargs_param_name = None
    leaders.stypy_kwargs_param_name = None
    leaders.stypy_call_defaults = defaults
    leaders.stypy_call_varargs = varargs
    leaders.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'leaders', ['Z', 'T'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'leaders', localization, ['Z', 'T'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'leaders(...)' code ##################

    str_5507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3011, (-1)), 'str', "\n    Return the root nodes in a hierarchical clustering.\n\n    Returns the root nodes in a hierarchical clustering corresponding\n    to a cut defined by a flat cluster assignment vector ``T``. See\n    the ``fcluster`` function for more information on the format of ``T``.\n\n    For each flat cluster :math:`j` of the :math:`k` flat clusters\n    represented in the n-sized flat cluster assignment vector ``T``,\n    this function finds the lowest cluster node :math:`i` in the linkage\n    tree Z such that:\n\n      * leaf descendents belong only to flat cluster j\n        (i.e. ``T[p]==j`` for all :math:`p` in :math:`S(i)` where\n        :math:`S(i)` is the set of leaf ids of leaf nodes descendent\n        with cluster node :math:`i`)\n\n      * there does not exist a leaf that is not descendent with\n        :math:`i` that also belongs to cluster :math:`j`\n        (i.e. ``T[q]!=j`` for all :math:`q` not in :math:`S(i)`).  If\n        this condition is violated, ``T`` is not a valid cluster\n        assignment vector, and an exception will be thrown.\n\n    Parameters\n    ----------\n    Z : ndarray\n        The hierarchical clustering encoded as a matrix. See\n        `linkage` for more information.\n    T : ndarray\n        The flat cluster assignment vector.\n\n    Returns\n    -------\n    L : ndarray\n        The leader linkage node id's stored as a k-element 1-D array\n        where ``k`` is the number of flat clusters found in ``T``.\n\n        ``L[j]=i`` is the linkage cluster node id that is the\n        leader of flat cluster with id M[j].  If ``i < n``, ``i``\n        corresponds to an original observation, otherwise it\n        corresponds to a non-singleton cluster.\n\n        For example: if ``L[3]=2`` and ``M[3]=8``, the flat cluster with\n        id 8's leader is linkage node 2.\n    M : ndarray\n        The leader linkage node id's stored as a k-element 1-D array where\n        ``k`` is the number of flat clusters found in ``T``. This allows the\n        set of flat cluster ids to be any arbitrary set of ``k`` integers.\n\n    ")
    
    # Assigning a Call to a Name (line 3012):
    
    # Assigning a Call to a Name (line 3012):
    
    # Call to asarray(...): (line 3012)
    # Processing the call arguments (line 3012)
    # Getting the type of 'Z' (line 3012)
    Z_5510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 19), 'Z', False)
    # Processing the call keyword arguments (line 3012)
    str_5511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3012, 28), 'str', 'c')
    keyword_5512 = str_5511
    kwargs_5513 = {'order': keyword_5512}
    # Getting the type of 'np' (line 3012)
    np_5508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3012)
    asarray_5509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3012, 8), np_5508, 'asarray')
    # Calling asarray(args, kwargs) (line 3012)
    asarray_call_result_5514 = invoke(stypy.reporting.localization.Localization(__file__, 3012, 8), asarray_5509, *[Z_5510], **kwargs_5513)
    
    # Assigning a type to the variable 'Z' (line 3012)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3012, 4), 'Z', asarray_call_result_5514)
    
    # Assigning a Call to a Name (line 3013):
    
    # Assigning a Call to a Name (line 3013):
    
    # Call to asarray(...): (line 3013)
    # Processing the call arguments (line 3013)
    # Getting the type of 'T' (line 3013)
    T_5517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 19), 'T', False)
    # Processing the call keyword arguments (line 3013)
    str_5518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3013, 28), 'str', 'c')
    keyword_5519 = str_5518
    kwargs_5520 = {'order': keyword_5519}
    # Getting the type of 'np' (line 3013)
    np_5515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3013)
    asarray_5516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3013, 8), np_5515, 'asarray')
    # Calling asarray(args, kwargs) (line 3013)
    asarray_call_result_5521 = invoke(stypy.reporting.localization.Localization(__file__, 3013, 8), asarray_5516, *[T_5517], **kwargs_5520)
    
    # Assigning a type to the variable 'T' (line 3013)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3013, 4), 'T', asarray_call_result_5521)
    
    
    # Evaluating a boolean operation
    
    
    # Call to type(...): (line 3014)
    # Processing the call arguments (line 3014)
    # Getting the type of 'T' (line 3014)
    T_5523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 12), 'T', False)
    # Processing the call keyword arguments (line 3014)
    kwargs_5524 = {}
    # Getting the type of 'type' (line 3014)
    type_5522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 7), 'type', False)
    # Calling type(args, kwargs) (line 3014)
    type_call_result_5525 = invoke(stypy.reporting.localization.Localization(__file__, 3014, 7), type_5522, *[T_5523], **kwargs_5524)
    
    # Getting the type of 'np' (line 3014)
    np_5526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 18), 'np')
    # Obtaining the member 'ndarray' of a type (line 3014)
    ndarray_5527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3014, 18), np_5526, 'ndarray')
    # Applying the binary operator '!=' (line 3014)
    result_ne_5528 = python_operator(stypy.reporting.localization.Localization(__file__, 3014, 7), '!=', type_call_result_5525, ndarray_5527)
    
    
    # Getting the type of 'T' (line 3014)
    T_5529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 32), 'T')
    # Obtaining the member 'dtype' of a type (line 3014)
    dtype_5530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3014, 32), T_5529, 'dtype')
    str_5531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3014, 43), 'str', 'i')
    # Applying the binary operator '!=' (line 3014)
    result_ne_5532 = python_operator(stypy.reporting.localization.Localization(__file__, 3014, 32), '!=', dtype_5530, str_5531)
    
    # Applying the binary operator 'or' (line 3014)
    result_or_keyword_5533 = python_operator(stypy.reporting.localization.Localization(__file__, 3014, 7), 'or', result_ne_5528, result_ne_5532)
    
    # Testing the type of an if condition (line 3014)
    if_condition_5534 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3014, 4), result_or_keyword_5533)
    # Assigning a type to the variable 'if_condition_5534' (line 3014)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3014, 4), 'if_condition_5534', if_condition_5534)
    # SSA begins for if statement (line 3014)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 3015)
    # Processing the call arguments (line 3015)
    str_5536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3015, 24), 'str', 'T must be a one-dimensional numpy array of integers.')
    # Processing the call keyword arguments (line 3015)
    kwargs_5537 = {}
    # Getting the type of 'TypeError' (line 3015)
    TypeError_5535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 3015)
    TypeError_call_result_5538 = invoke(stypy.reporting.localization.Localization(__file__, 3015, 14), TypeError_5535, *[str_5536], **kwargs_5537)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3015, 8), TypeError_call_result_5538, 'raise parameter', BaseException)
    # SSA join for if statement (line 3014)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to is_valid_linkage(...): (line 3016)
    # Processing the call arguments (line 3016)
    # Getting the type of 'Z' (line 3016)
    Z_5540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 21), 'Z', False)
    # Processing the call keyword arguments (line 3016)
    # Getting the type of 'True' (line 3016)
    True_5541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 30), 'True', False)
    keyword_5542 = True_5541
    str_5543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3016, 41), 'str', 'Z')
    keyword_5544 = str_5543
    kwargs_5545 = {'throw': keyword_5542, 'name': keyword_5544}
    # Getting the type of 'is_valid_linkage' (line 3016)
    is_valid_linkage_5539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3016, 4), 'is_valid_linkage', False)
    # Calling is_valid_linkage(args, kwargs) (line 3016)
    is_valid_linkage_call_result_5546 = invoke(stypy.reporting.localization.Localization(__file__, 3016, 4), is_valid_linkage_5539, *[Z_5540], **kwargs_5545)
    
    
    
    
    # Call to len(...): (line 3017)
    # Processing the call arguments (line 3017)
    # Getting the type of 'T' (line 3017)
    T_5548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 11), 'T', False)
    # Processing the call keyword arguments (line 3017)
    kwargs_5549 = {}
    # Getting the type of 'len' (line 3017)
    len_5547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 7), 'len', False)
    # Calling len(args, kwargs) (line 3017)
    len_call_result_5550 = invoke(stypy.reporting.localization.Localization(__file__, 3017, 7), len_5547, *[T_5548], **kwargs_5549)
    
    
    # Obtaining the type of the subscript
    int_5551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3017, 25), 'int')
    # Getting the type of 'Z' (line 3017)
    Z_5552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3017, 17), 'Z')
    # Obtaining the member 'shape' of a type (line 3017)
    shape_5553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 17), Z_5552, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3017)
    getitem___5554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3017, 17), shape_5553, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3017)
    subscript_call_result_5555 = invoke(stypy.reporting.localization.Localization(__file__, 3017, 17), getitem___5554, int_5551)
    
    int_5556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3017, 30), 'int')
    # Applying the binary operator '+' (line 3017)
    result_add_5557 = python_operator(stypy.reporting.localization.Localization(__file__, 3017, 17), '+', subscript_call_result_5555, int_5556)
    
    # Applying the binary operator '!=' (line 3017)
    result_ne_5558 = python_operator(stypy.reporting.localization.Localization(__file__, 3017, 7), '!=', len_call_result_5550, result_add_5557)
    
    # Testing the type of an if condition (line 3017)
    if_condition_5559 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3017, 4), result_ne_5558)
    # Assigning a type to the variable 'if_condition_5559' (line 3017)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3017, 4), 'if_condition_5559', if_condition_5559)
    # SSA begins for if statement (line 3017)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3018)
    # Processing the call arguments (line 3018)
    str_5561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3018, 25), 'str', 'Mismatch: len(T)!=Z.shape[0] + 1.')
    # Processing the call keyword arguments (line 3018)
    kwargs_5562 = {}
    # Getting the type of 'ValueError' (line 3018)
    ValueError_5560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3018)
    ValueError_call_result_5563 = invoke(stypy.reporting.localization.Localization(__file__, 3018, 14), ValueError_5560, *[str_5561], **kwargs_5562)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3018, 8), ValueError_call_result_5563, 'raise parameter', BaseException)
    # SSA join for if statement (line 3017)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3020):
    
    # Assigning a Call to a Name (line 3020):
    
    # Call to unique(...): (line 3020)
    # Processing the call arguments (line 3020)
    # Getting the type of 'T' (line 3020)
    T_5566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 19), 'T', False)
    # Processing the call keyword arguments (line 3020)
    kwargs_5567 = {}
    # Getting the type of 'np' (line 3020)
    np_5564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 9), 'np', False)
    # Obtaining the member 'unique' of a type (line 3020)
    unique_5565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3020, 9), np_5564, 'unique')
    # Calling unique(args, kwargs) (line 3020)
    unique_call_result_5568 = invoke(stypy.reporting.localization.Localization(__file__, 3020, 9), unique_5565, *[T_5566], **kwargs_5567)
    
    # Assigning a type to the variable 'Cl' (line 3020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3020, 4), 'Cl', unique_call_result_5568)
    
    # Assigning a Call to a Name (line 3021):
    
    # Assigning a Call to a Name (line 3021):
    
    # Call to len(...): (line 3021)
    # Processing the call arguments (line 3021)
    # Getting the type of 'Cl' (line 3021)
    Cl_5570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 13), 'Cl', False)
    # Processing the call keyword arguments (line 3021)
    kwargs_5571 = {}
    # Getting the type of 'len' (line 3021)
    len_5569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 9), 'len', False)
    # Calling len(args, kwargs) (line 3021)
    len_call_result_5572 = invoke(stypy.reporting.localization.Localization(__file__, 3021, 9), len_5569, *[Cl_5570], **kwargs_5571)
    
    # Assigning a type to the variable 'kk' (line 3021)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3021, 4), 'kk', len_call_result_5572)
    
    # Assigning a Call to a Name (line 3022):
    
    # Assigning a Call to a Name (line 3022):
    
    # Call to zeros(...): (line 3022)
    # Processing the call arguments (line 3022)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3022)
    tuple_5575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3022, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3022)
    # Adding element type (line 3022)
    # Getting the type of 'kk' (line 3022)
    kk_5576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3022, 18), 'kk', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3022, 18), tuple_5575, kk_5576)
    
    # Processing the call keyword arguments (line 3022)
    str_5577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3022, 30), 'str', 'i')
    keyword_5578 = str_5577
    kwargs_5579 = {'dtype': keyword_5578}
    # Getting the type of 'np' (line 3022)
    np_5573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3022, 8), 'np', False)
    # Obtaining the member 'zeros' of a type (line 3022)
    zeros_5574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3022, 8), np_5573, 'zeros')
    # Calling zeros(args, kwargs) (line 3022)
    zeros_call_result_5580 = invoke(stypy.reporting.localization.Localization(__file__, 3022, 8), zeros_5574, *[tuple_5575], **kwargs_5579)
    
    # Assigning a type to the variable 'L' (line 3022)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3022, 4), 'L', zeros_call_result_5580)
    
    # Assigning a Call to a Name (line 3023):
    
    # Assigning a Call to a Name (line 3023):
    
    # Call to zeros(...): (line 3023)
    # Processing the call arguments (line 3023)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3023)
    tuple_5583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3023, 18), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3023)
    # Adding element type (line 3023)
    # Getting the type of 'kk' (line 3023)
    kk_5584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3023, 18), 'kk', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3023, 18), tuple_5583, kk_5584)
    
    # Processing the call keyword arguments (line 3023)
    str_5585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3023, 30), 'str', 'i')
    keyword_5586 = str_5585
    kwargs_5587 = {'dtype': keyword_5586}
    # Getting the type of 'np' (line 3023)
    np_5581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3023, 8), 'np', False)
    # Obtaining the member 'zeros' of a type (line 3023)
    zeros_5582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3023, 8), np_5581, 'zeros')
    # Calling zeros(args, kwargs) (line 3023)
    zeros_call_result_5588 = invoke(stypy.reporting.localization.Localization(__file__, 3023, 8), zeros_5582, *[tuple_5583], **kwargs_5587)
    
    # Assigning a type to the variable 'M' (line 3023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3023, 4), 'M', zeros_call_result_5588)
    
    # Assigning a BinOp to a Name (line 3024):
    
    # Assigning a BinOp to a Name (line 3024):
    
    # Obtaining the type of the subscript
    int_5589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3024, 16), 'int')
    # Getting the type of 'Z' (line 3024)
    Z_5590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 8), 'Z')
    # Obtaining the member 'shape' of a type (line 3024)
    shape_5591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3024, 8), Z_5590, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3024)
    getitem___5592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3024, 8), shape_5591, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3024)
    subscript_call_result_5593 = invoke(stypy.reporting.localization.Localization(__file__, 3024, 8), getitem___5592, int_5589)
    
    int_5594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3024, 21), 'int')
    # Applying the binary operator '+' (line 3024)
    result_add_5595 = python_operator(stypy.reporting.localization.Localization(__file__, 3024, 8), '+', subscript_call_result_5593, int_5594)
    
    # Assigning a type to the variable 'n' (line 3024)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3024, 4), 'n', result_add_5595)
    
    # Assigning a Call to a List (line 3025):
    
    # Assigning a Subscript to a Name (line 3025):
    
    # Obtaining the type of the subscript
    int_5596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3025, 4), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 3025)
    # Processing the call arguments (line 3025)
    
    # Obtaining an instance of the builtin type 'list' (line 3025)
    list_5598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3025, 42), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3025)
    # Adding element type (line 3025)
    # Getting the type of 'Z' (line 3025)
    Z_5599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 43), 'Z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3025, 42), list_5598, Z_5599)
    # Adding element type (line 3025)
    # Getting the type of 'T' (line 3025)
    T_5600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 46), 'T', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3025, 42), list_5598, T_5600)
    
    # Processing the call keyword arguments (line 3025)
    kwargs_5601 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 3025)
    _copy_arrays_if_base_present_5597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 13), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 3025)
    _copy_arrays_if_base_present_call_result_5602 = invoke(stypy.reporting.localization.Localization(__file__, 3025, 13), _copy_arrays_if_base_present_5597, *[list_5598], **kwargs_5601)
    
    # Obtaining the member '__getitem__' of a type (line 3025)
    getitem___5603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3025, 4), _copy_arrays_if_base_present_call_result_5602, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3025)
    subscript_call_result_5604 = invoke(stypy.reporting.localization.Localization(__file__, 3025, 4), getitem___5603, int_5596)
    
    # Assigning a type to the variable 'list_var_assignment_489' (line 3025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3025, 4), 'list_var_assignment_489', subscript_call_result_5604)
    
    # Assigning a Subscript to a Name (line 3025):
    
    # Obtaining the type of the subscript
    int_5605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3025, 4), 'int')
    
    # Call to _copy_arrays_if_base_present(...): (line 3025)
    # Processing the call arguments (line 3025)
    
    # Obtaining an instance of the builtin type 'list' (line 3025)
    list_5607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3025, 42), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3025)
    # Adding element type (line 3025)
    # Getting the type of 'Z' (line 3025)
    Z_5608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 43), 'Z', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3025, 42), list_5607, Z_5608)
    # Adding element type (line 3025)
    # Getting the type of 'T' (line 3025)
    T_5609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 46), 'T', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3025, 42), list_5607, T_5609)
    
    # Processing the call keyword arguments (line 3025)
    kwargs_5610 = {}
    # Getting the type of '_copy_arrays_if_base_present' (line 3025)
    _copy_arrays_if_base_present_5606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 13), '_copy_arrays_if_base_present', False)
    # Calling _copy_arrays_if_base_present(args, kwargs) (line 3025)
    _copy_arrays_if_base_present_call_result_5611 = invoke(stypy.reporting.localization.Localization(__file__, 3025, 13), _copy_arrays_if_base_present_5606, *[list_5607], **kwargs_5610)
    
    # Obtaining the member '__getitem__' of a type (line 3025)
    getitem___5612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3025, 4), _copy_arrays_if_base_present_call_result_5611, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3025)
    subscript_call_result_5613 = invoke(stypy.reporting.localization.Localization(__file__, 3025, 4), getitem___5612, int_5605)
    
    # Assigning a type to the variable 'list_var_assignment_490' (line 3025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3025, 4), 'list_var_assignment_490', subscript_call_result_5613)
    
    # Assigning a Name to a Name (line 3025):
    # Getting the type of 'list_var_assignment_489' (line 3025)
    list_var_assignment_489_5614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 4), 'list_var_assignment_489')
    # Assigning a type to the variable 'Z' (line 3025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3025, 5), 'Z', list_var_assignment_489_5614)
    
    # Assigning a Name to a Name (line 3025):
    # Getting the type of 'list_var_assignment_490' (line 3025)
    list_var_assignment_490_5615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3025, 4), 'list_var_assignment_490')
    # Assigning a type to the variable 'T' (line 3025)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3025, 8), 'T', list_var_assignment_490_5615)
    
    # Assigning a Call to a Name (line 3026):
    
    # Assigning a Call to a Name (line 3026):
    
    # Call to leaders(...): (line 3026)
    # Processing the call arguments (line 3026)
    # Getting the type of 'Z' (line 3026)
    Z_5618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 27), 'Z', False)
    # Getting the type of 'T' (line 3026)
    T_5619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 30), 'T', False)
    # Getting the type of 'L' (line 3026)
    L_5620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 33), 'L', False)
    # Getting the type of 'M' (line 3026)
    M_5621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 36), 'M', False)
    
    # Call to int(...): (line 3026)
    # Processing the call arguments (line 3026)
    # Getting the type of 'kk' (line 3026)
    kk_5623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 43), 'kk', False)
    # Processing the call keyword arguments (line 3026)
    kwargs_5624 = {}
    # Getting the type of 'int' (line 3026)
    int_5622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 39), 'int', False)
    # Calling int(args, kwargs) (line 3026)
    int_call_result_5625 = invoke(stypy.reporting.localization.Localization(__file__, 3026, 39), int_5622, *[kk_5623], **kwargs_5624)
    
    
    # Call to int(...): (line 3026)
    # Processing the call arguments (line 3026)
    # Getting the type of 'n' (line 3026)
    n_5627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 52), 'n', False)
    # Processing the call keyword arguments (line 3026)
    kwargs_5628 = {}
    # Getting the type of 'int' (line 3026)
    int_5626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 48), 'int', False)
    # Calling int(args, kwargs) (line 3026)
    int_call_result_5629 = invoke(stypy.reporting.localization.Localization(__file__, 3026, 48), int_5626, *[n_5627], **kwargs_5628)
    
    # Processing the call keyword arguments (line 3026)
    kwargs_5630 = {}
    # Getting the type of '_hierarchy' (line 3026)
    _hierarchy_5616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 8), '_hierarchy', False)
    # Obtaining the member 'leaders' of a type (line 3026)
    leaders_5617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3026, 8), _hierarchy_5616, 'leaders')
    # Calling leaders(args, kwargs) (line 3026)
    leaders_call_result_5631 = invoke(stypy.reporting.localization.Localization(__file__, 3026, 8), leaders_5617, *[Z_5618, T_5619, L_5620, M_5621, int_call_result_5625, int_call_result_5629], **kwargs_5630)
    
    # Assigning a type to the variable 's' (line 3026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3026, 4), 's', leaders_call_result_5631)
    
    
    # Getting the type of 's' (line 3027)
    s_5632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 7), 's')
    int_5633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3027, 12), 'int')
    # Applying the binary operator '>=' (line 3027)
    result_ge_5634 = python_operator(stypy.reporting.localization.Localization(__file__, 3027, 7), '>=', s_5632, int_5633)
    
    # Testing the type of an if condition (line 3027)
    if_condition_5635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3027, 4), result_ge_5634)
    # Assigning a type to the variable 'if_condition_5635' (line 3027)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3027, 4), 'if_condition_5635', if_condition_5635)
    # SSA begins for if statement (line 3027)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3028)
    # Processing the call arguments (line 3028)
    str_5637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3028, 26), 'str', 'T is not a valid assignment vector. Error found when examining linkage node %d (< 2n-1).')
    # Getting the type of 's' (line 3029)
    s_5638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3029, 72), 's', False)
    # Applying the binary operator '%' (line 3028)
    result_mod_5639 = python_operator(stypy.reporting.localization.Localization(__file__, 3028, 25), '%', str_5637, s_5638)
    
    # Processing the call keyword arguments (line 3028)
    kwargs_5640 = {}
    # Getting the type of 'ValueError' (line 3028)
    ValueError_5636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3028)
    ValueError_call_result_5641 = invoke(stypy.reporting.localization.Localization(__file__, 3028, 14), ValueError_5636, *[result_mod_5639], **kwargs_5640)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3028, 8), ValueError_call_result_5641, 'raise parameter', BaseException)
    # SSA join for if statement (line 3027)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 3030)
    tuple_5642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3030, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3030)
    # Adding element type (line 3030)
    # Getting the type of 'L' (line 3030)
    L_5643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 12), 'L')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3030, 12), tuple_5642, L_5643)
    # Adding element type (line 3030)
    # Getting the type of 'M' (line 3030)
    M_5644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 15), 'M')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3030, 12), tuple_5642, M_5644)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3030)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3030, 4), 'stypy_return_type', tuple_5642)
    
    # ################# End of 'leaders(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'leaders' in the type store
    # Getting the type of 'stypy_return_type' (line 2961)
    stypy_return_type_5645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2961, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_5645)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'leaders'
    return stypy_return_type_5645

# Assigning a type to the variable 'leaders' (line 2961)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2961, 0), 'leaders', leaders)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
